pip show 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip show [options] <package>\n\n\n</pre></code>\n<h4>Description</h4>\nShow information about one or more installed packages.\n<h4>Options</h4>\n\n-f, --files¶\nShow the full list of installed files for each package.\n<h4>Examples</h4>\nShow information about a package:\n<pre><code>$ pip show sphinx\n---\nName: Sphinx\nVersion: 1.1.3\nLocation: /my/env/lib/pythonx.x/site-packages\nRequires: Pygments, Jinja2, docutils\n\n</pre></code>\n</section>	https://pip.pypa.io/en/stable/reference/pip_show.html	
pip download 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip download [options] <requirement specifier> [package-index-options]\npip download [options] -r <requirements file> [package-index-options]\npip download [options] [-e] <vcs project url>\npip download [options] [-e] <local project path>\npip download [options] <archive url/path>\n\n\n</pre></code>\n<h4>Overview</h4>\npip download replaces the --download option to pip install,\nwhich is now deprecated and will be removed in pip 10.\npip download does the same resolution and downloading as pip install,\nbut instead of installing the dependencies, it collects the downloaded\ndistributions into the directory provided (defaulting to the current\ndirectory). This directory can later be passed as the value to\npip install --find-links to facilitate offline or locked down package\ninstallation.\n<h4>Options</h4>\n\n-c, --constraint <file>¶\nConstrain versions using the given constraints file. This option can be used multiple times.\n-e, --editable <path/url>¶\nInstall a project in editable mode (i.e. setuptools "develop mode") from a local project path or a VCS url.\n-r, --requirement <file>¶\nInstall from the given requirements file. This option can be used multiple times.\n-b, --build <dir>¶\nDirectory to unpack packages into and build in.\n--no-deps¶\nDon't install package dependencies.\n--global-option <options>¶\nExtra global options to be supplied to the setup.py call before the install command.\n--no-binary <format_control>¶\nDo not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all binary packages, :none: to empty the set, or one or more package names with commas between them. Note that some packages are tricky to compile and may fail to install when this option is used on them.\n--only-binary <format_control>¶\nDo not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all source packages, :none: to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.\n--src <dir>¶\nDirectory to check out editable projects into. The default in a virtualenv is "<venv path>/src". The default for global installs is "<current dir>/src".\n--pre¶\nInclude pre-release and development versions. By default, pip only finds stable versions.\n--no-clean¶\nDon't clean up build directories.\n--require-hashes¶\nRequire a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.\n-d, --dest <dir>¶\nDownload packages into <dir>.\n-i, --index-url <url>¶\nBase URL of Python Package Index (default https://pypi.python.org/simple).\n--extra-index-url <url>¶\nExtra URLs of package indexes to use in addition to --index-url.\n--no-index¶\nIgnore package index (only looking at --find-links URLs instead).\n-f, --find-links <url>¶\nIf a url or path to an html file, then parse for links to archives. If a local path or file:// url that's a directory, then look for archives in the directory listing.\n--process-dependency-links¶\nEnable the processing of dependency links.\n<h4>Examples</h4>\nDownload a package and all of its dependencies\n<pre><code>$ pip download SomePackage\n$ pip download -d . SomePackage # equivalent to above\n$ pip download --no-index --find-links=/tmp/wheelhouse -d /tmp/otherwheelhouse SomePackage\n\n</pre></code>\n</section>	https://pip.pypa.io/en/stable/reference/pip_download.html	
pip search 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip search [options] <query>\n\n</pre></code>\n<h4>Description</h4>\nSearch for PyPI packages whose name or summary contains <query>.\n<h4>Options</h4>\n\n--index <url>¶\nBase URL of Python Package Index (default https://pypi.python.org/pypi)\n<h4>Examples</h4>\nSearch for "peppercorn"\n<pre><code>$ pip search peppercorn\npepperedform - Helpers for using peppercorn with formprocess.\npeppercorn - A library for converting a token stream into [\n]\n\n</pre></code>\n</section>	https://pip.pypa.io/en/stable/reference/pip_search.html	
pip install 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip install [options] <requirement specifier> [package-index-options]\npip install [options] -r <requirements file> [package-index-options]\npip install [options] [-e] <vcs project url>\npip install [options] [-e] <local project path>\npip install [options] <archive url/path>\n\n\n</pre></code>\n<h4>Overview</h4>\nPip install has several stages:\nIdentify the base requirements. The user supplied arguments are processed\nhere.\nResolve dependencies. What will be installed is determined here.\nBuild wheels. All the dependencies that can be are built into wheels.\nInstall the packages (and uninstall anything being upgraded/replaced).\n<h4>Argument Handling</h4>\nWhen looking at the items to be installed, pip checks what type of item\neach is, in the following order:\nProject or archive URL.\nLocal directory (which must contain a setup.py, or pip will report\nan error).\nLocal file (a sdist or wheel format archive, following the naming\nconventions for those formats).\nA requirement, as specified in PEP 440.\nEach item identified is added to the set of requirements to be satisfied by\nthe install.\n<h4>Working Out the Name and Version</h4>\nFor each candidate item, pip needs to know the project name and version. For\nwheels (identified by the .whl file extension) this can be obtained from\nthe filename, as per the Wheel spec. For local directories, or explicitly\nspecified sdist files, the setup.py egg_info command is used to determine\nthe project metadata. For sdists located via an index, the filename is parsed\nfor the name and project version (this is in theory slightly less reliable\nthan using the egg_info command, but avoids downloading and processing\nunnecessary numbers of files).\nAny URL may use the #egg=name syntax (see VCS Support) to\nexplicitly state the project name.\n<h4>Satisfying Requirements</h4>\nOnce pip has the set of requirements to satisfy, it chooses which version of\neach requirement to install using the simple rule that the latest version that\nsatisfies the given constraints will be installed (but see here\nfor an exception regarding pre-release versions). Where more than one source of\nthe chosen version is available, it is assumed that any source is acceptable\n(as otherwise the versions would differ).\n<h4>Installation Order</h4>\nAs of v6.1.0, pip installs dependencies before their dependents, i.e. in\n"topological order". This is the only commitment pip currently makes related\nto order. While it may be coincidentally true that pip will install things in\nthe order of the install arguments or in the order of the items in a\nrequirements file, this is not a promise.\nIn the event of a dependency cycle (aka "circular dependency"), the current\nimplementation (which might possibly change later) has it such that the first\nencountered member of the cycle is installed last.\nFor instance, if quux depends on foo which depends on bar which depends on baz,\nwhich depends on foo:\n<pre><code>pip install quux\nInstalling collected packages baz, bar, foo, quux\n\npip install bar\nInstalling collected packages foo, baz, bar\n\n</pre></code>\nPrior to v6.1.0, pip made no commitments about install order.\nThe decision to install topologically is based on the principle that\ninstallations should proceed in a way that leaves the environment usable at each\nstep. This has two main practical benefits:\nConcurrent use of the environment during the install is more likely to work.\nA failed install is less likely to leave a broken environment. Although pip\nwould like to support failure rollbacks eventually, in the mean time, this is\nan improvement.\nAlthough the new install order is not intended to replace (and does not replace)\nthe use of setup_requires to declare build dependencies, it may help certain\nprojects install from sdist (that might previously fail) that fit the following\nprofile:\nThey have build dependencies that are also declared as install dependencies\nusing install_requires.\npython setup.py egg_info works without their build dependencies being\ninstalled.\nFor whatever reason, they don't or won't declare their build dependencies using\nsetup_requires.\n\n<h4>Example Requirements File</h4>\nUse pip install -r example-requirements.txt to install:\n<pre><code>#\n####### example-requirements.txt #######\n#\n###### Requirements without Version Specifiers ######\nnose\nnose-cov\nbeautifulsoup4\n#\n###### Requirements with Version Specifiers ######\n# See https://www.python.org/dev/peps/pep-0440/#version-specifiers\ndocopt == 0.6.1 # Version Matching. Must be version 0.6.1\nkeyring >= 4.1.1 # Minimum version 4.1.1\ncoverage != 3.5 # Version Exclusion. Anything except version 3.5\nMopidy-Dirble ~= 1.1 # Compatible release. Same as >= 1.1, == 1.*\n#\n###### Refer to other requirements files ######\n-r other-requirements.txt\n#\n#\n###### A particular file ######\n./downloads/numpy-1.9.2-cp34-none-win32.whl\nhttp://wxpython.org/Phoenix/snapshot-builds/wxPython_Phoenix-3.0.3.dev1820+49a8884-cp34-none-win_amd64.whl\n#\n###### Additional Requirements without Version Specifiers ######\n# Same as 1st section, just here to show that you can put things in any order.\nrejected\ngreen\n#\n\n</pre></code>\n<h4>Requirement Specifiers</h4>\npip supports installing from a package index using a requirement\nspecifier. Generally speaking, a requirement\nspecifier is composed of a project name followed by optional version\nspecifiers. PEP508 contains a full specification\nof the format of a requirement (pip does not support the url_req form\nof specifier at this time).\nSome examples:\n<pre><code>SomeProject\nSomeProject == 1.3\nSomeProject >=1.2,<.2.0\nSomeProject[foo, bar]\nSomeProject~=1.4.2\n\n</pre></code>\nSince version 6.0, pip also supports specifiers containing environment markers like so:\n<pre><code>SomeProject ==5.4 ; python_version < '2.7'\nSomeProject; sys_platform == 'win32'\n\n</pre></code>\nEnvironment markers are supported in the command line and in requirements files.\nNote\nUse quotes around specifiers in the shell when using >, <, or when\nusing environment markers. Don't use quotes in requirement files. [1]\n<h4>Per-requirement Overrides</h4>\nSince version 7.0 pip supports controlling the command line options given to\nsetup.py via requirements files. This disables the use of wheels (cached or\notherwise) for that package, as setup.py does not exist for wheels.\nThe --global-option and --install-option options are used to pass\noptions to setup.py. For example:\n<pre><code>FooProject >= 1.2 --global-option="--no-user-cfg" \\n--install-option="--prefix='/usr/local'" \\n--install-option="--no-compile"\n\n</pre></code>\nThe above translates roughly into running FooProject's setup.py\nscript as:\n<pre><code>python setup.py --no-user-cfg install --prefix='/usr/local' --no-compile\n\n</pre></code>\nNote that the only way of giving more than one option to setup.py\nis through multiple --global-option and --install-option\noptions, as shown in the example above. The value of each option is\npassed as a single argument to the setup.py script. Therefore, a\nline such as the following is invalid and would result in an\ninstallation error.\n<pre><code># Invalid. Please use '--install-option' twice as shown above.\nFooProject >= 1.2 --install-option="--prefix=/usr/local --no-compile"\n\n</pre></code>\n<h4>Pre-release Versions</h4>\nStarting with v1.4, pip will only install stable versions as specified by\nPEP426 by default. If a version cannot be parsed as a compliant PEP426\nversion then it is assumed to be a pre-release.\nIf a Requirement specifier includes a pre-release or development version\n(e.g. >=0.0.dev0) then pip will allow pre-release and development versions\nfor that requirement. This does not include the != flag.\nThe pip install command also supports a --pre flag\nthat will enable installing pre-releases and development releases.\n<h4>Git</h4>\npip currently supports cloning over git, git+https and git+ssh:\nHere are the supported forms:\n<pre><code>[-e] git+git://git.myproject.org/MyProject#egg=MyProject\n[-e] git+https://git.myproject.org/MyProject#egg=MyProject\n[-e] git+ssh://git.myproject.org/MyProject#egg=MyProject\n-e git+git@git.myproject.org:MyProject#egg=MyProject\n\n</pre></code>\nPassing branch names, a commit hash or a tag name is possible like so:\n<pre><code>[-e] git://git.myproject.org/MyProject.git@master#egg=MyProject\n[-e] git://git.myproject.org/MyProject.git@v1.0#egg=MyProject\n[-e] git://git.myproject.org/MyProject.git@da39a3ee5e6b4b0d3255bfef95601890afd80709#egg=MyProject\n\n</pre></code>\n<h4>Mercurial</h4>\nThe supported schemes are: hg+http, hg+https,\nhg+static-http and hg+ssh.\n<pre><code>[-e] hg+http://hg.myproject.org/MyProject#egg=MyProject\n[-e] hg+https://hg.myproject.org/MyProject#egg=MyProject\n[-e] hg+ssh://hg.myproject.org/MyProject#egg=MyProject\n\n</pre></code>\nYou can also specify a revision number, a revision hash, a tag name or a local\nbranch name like so:\n<pre><code>[-e] hg+http://hg.myproject.org/MyProject@da39a3ee5e6b#egg=MyProject\n[-e] hg+http://hg.myproject.org/MyProject@2019#egg=MyProject\n[-e] hg+http://hg.myproject.org/MyProject@v1.0#egg=MyProject\n[-e] hg+http://hg.myproject.org/MyProject@special_feature#egg=MyProject\n\n</pre></code>\n<h4>Subversion</h4>\npip supports the URL schemes svn, svn+svn, svn+http, svn+https, svn+ssh.\nYou can also give specific revisions to an SVN URL, like so:\n<pre><code>[-e] svn+svn://svn.myproject.org/svn/MyProject#egg=MyProject\n[-e] svn+http://svn.myproject.org/svn/MyProject/trunk@2019#egg=MyProject\n\n</pre></code>\nwhich will check out revision 2019. @{20080101} would also check\nout the revision from 2008-01-01. You can only check out specific\nrevisions using -e svn+....\n<h4>Bazaar</h4>\npip supports Bazaar using the bzr+http, bzr+https, bzr+ssh,\nbzr+sftp, bzr+ftp and bzr+lp schemes.\n<pre><code>[-e] bzr+http://bzr.myproject.org/MyProject/trunk#egg=MyProject\n[-e] bzr+sftp://user@myproject.org/MyProject/trunk#egg=MyProject\n[-e] bzr+ssh://user@myproject.org/MyProject/trunk#egg=MyProject\n[-e] bzr+ftp://user@myproject.org/MyProject/trunk#egg=MyProject\n[-e] bzr+lp:MyProject#egg=MyProject\n\n</pre></code>\nTags or revisions can be installed like so:\n<pre><code>[-e] bzr+https://bzr.myproject.org/MyProject/trunk@2019#egg=MyProject\n[-e] bzr+http://bzr.myproject.org/MyProject/trunk@v1.0#egg=MyProject\n\n</pre></code>\n<h4>Finding Packages</h4>\npip searches for packages on PyPI using the\nhttp simple interface,\nwhich is documented here\nand there\npip offers a number of Package Index Options for modifying how packages are found.\npip looks for packages in a number of places, on PyPI (if not disabled via\n`--no-index`), in the local filesystem, and in any additional repositories\nspecified via `--find-links` or `--index-url`. There is no ordering in\nthe locations that are searched, rather they are all checked, and the "best"\nmatch for the requirements (in terms of version number - see PEP440 for\ndetails) is selected.\nSee the pip install Examples.\n<h4>SSL Certificate Verification</h4>\nStarting with v1.3, pip provides SSL certificate verification over https, to\nprevent man-in-the-middle attacks against PyPI downloads.\n<h4>Wheel Cache</h4>\nPip will read from the subdirectory wheels within the pip cache directory\nand use any packages found there. This is disabled via the same\n--no-cache-dir option that disables the HTTP cache. The internal structure\nof that is not part of the pip API. As of 7.0, pip makes a subdirectory for\neach sdist that wheels are built from and places the resulting wheels inside.\nPip attempts to choose the best wheels from those built in preference to\nbuilding a new wheel. Note that this means when a package has both optional\nC extensions and builds py tagged wheels when the C extension can't be built\nthat pip will not attempt to build a better wheel for Pythons that would have\nsupported it, once any generic wheel is built. To correct this, make sure that\nthe wheels are built with Python specific tags - e.g. pp on Pypy.\nWhen no wheels are found for an sdist, pip will attempt to build a wheel\nautomatically and insert it into the wheel cache.\n<h4>Hashes from PyPI</h4>\nPyPI provides an MD5 hash in the fragment portion of each package download URL,\nlike #md5=123..., which pip checks as a protection against download\ncorruption. Other hash algorithms that have guaranteed support from hashlib\nare also supported here: sha1, sha224, sha384, sha256, and sha512. Since this\nhash originates remotely, it is not a useful guard against tampering and thus\ndoes not satisfy the --require-hashes demand that every package have a\nlocal hash.\n<h4>"Editable" Installs</h4>\n"Editable" installs are fundamentally "setuptools develop mode"\ninstalls.\nYou can install local projects or VCS projects in "editable" mode:\n<pre><code>$ pip install -e path/to/SomeProject\n$ pip install -e git+http://repo/my_project.git#egg=SomeProject\n\n</pre></code>\n(See the VCS Support section above for more information on VCS-related syntax.)\nFor local projects, the "SomeProject.egg-info" directory is created relative to\nthe project path. This is one advantage over just using setup.py develop,\nwhich creates the "egg-info" directly relative the current working directory.\n<h4>Controlling setup_requires</h4>\nSetuptools offers the setup_requires setup() keyword\nfor specifying dependencies that need to be present in order for the setup.py\nscript to run. Internally, Setuptools uses easy_install to fulfill these\ndependencies.\npip has no way to control how these dependencies are located. None of the\nPackage Index Options have an effect.\nThe solution is to configure a "system" or "personal" Distutils configuration\nfile to\nmanage the fulfillment.\nFor example, to have the dependency located at an alternate index, add this:\n<pre><code>[easy_install]\nindex_url = https://my.index-mirror.com\n\n</pre></code>\nTo have the dependency located from a local directory and not crawl PyPI, add this:\n<pre><code>[easy_install]\nallow_hosts = ''\nfind_links = file:///path/to/local/archives/\n\n</pre></code>\n<h4>Build System Interface</h4>\nIn order for pip to install a package from source, setup.py must implement\nthe following commands:\n<pre><code>setup.py egg_info [--egg-base XXX]\nsetup.py install --record XXX [--single-version-externally-managed] [--root XXX] [--compile|--no-compile] [--install-headers XXX]\n\n</pre></code>\nThe egg_info command should create egg metadata for the package, as\ndescribed in the setuptools documentation at\nhttp://pythonhosted.org/setuptools/setuptools.html#egg-info-create-egg-metadata-and-set-build-tags\nThe install command should implement the complete process of installing the\npackage to the target directory XXX.\nTo install a package in "editable" mode (pip install -e), setup.py must\nimplement the following command:\n<pre><code>setup.py develop --no-deps\n\n</pre></code>\nThis should implement the complete process of installing the package in\n"editable" mode.\nAll packages will be attempted to built into wheels:\n<pre><code>setup.py bdist_wheel -d XXX\n\n</pre></code>\nOne further setup.py command is invoked by pip install:\n<pre><code>setup.py clean\n\n</pre></code>\nThis command is invoked to clean up temporary commands from the build. (TODO:\nInvestigate in more detail when this command is required).\nNo other build system commands are invoked by the pip install command.\nInstalling a package from a wheel does not invoke the build system at all.\n<h4>Options</h4>\n-c, --constraint <file>¶\nConstrain versions using the given constraints file. This option can be used multiple times.\n-e, --editable <path/url>¶\nInstall a project in editable mode (i.e. setuptools "develop mode") from a local project path or a VCS url.\n-r, --requirement <file>¶\nInstall from the given requirements file. This option can be used multiple times.\n-b, --build <dir>¶\nDirectory to unpack packages into and build in.\n-t, --target <dir>¶\nInstall packages into <dir>. By default this will not replace existing files/folders in <dir>. Use --upgrade to replace existing packages in <dir> with new versions.\n-d, --download <dir>¶\nDownload packages into <dir> instead of installing them, regardless of what's already installed.\n--src <dir>¶\nDirectory to check out editable projects into. The default in a virtualenv is "<venv path>/src". The default for global installs is "<current dir>/src".\n-U, --upgrade¶\nUpgrade all specified packages to the newest available version. This process is recursive regardless of whether a dependency is already satisfied.\n--force-reinstall¶\nWhen upgrading, reinstall all packages even if they are already up-to-date.\n-I, --ignore-installed¶\nIgnore the installed packages (reinstalling instead).\n--no-deps¶\nDon't install package dependencies.\n--install-option <options>¶\nExtra arguments to be supplied to the setup.py install command (use like --install-option="--install-scripts=/usr/local/bin"). Use multiple --install-option options to pass multiple options to setup.py install. If you are using an option with a directory path, be sure to use absolute path.\n--global-option <options>¶\nExtra global options to be supplied to the setup.py call before the install command.\n--user¶\nInstall to the Python user install directory for your platform. Typically ~/.local/, or %APPDATA%Python on Windows. (See the Python documentation for site.USER_BASE for full details.)\n--egg¶\nInstall packages as eggs, not 'flat', like pip normally does. This option is not about installing from eggs. (WARNING: Because this option overrides pip's normal install logic, requirements files may not behave as expected.)\n--root <dir>¶\nInstall everything relative to this alternate root directory.\n--prefix <dir>¶\nInstallation prefix where lib, bin and other top-level folders are placed\n--compile¶\nCompile py files to pyc\n--no-compile¶\nDo not compile py files to pyc\n--no-use-wheel¶\nDo not Find and prefer wheel archives when searching indexes and find-links locations. DEPRECATED in favour of --no-binary.\n--no-binary <format_control>¶\nDo not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all binary packages, :none: to empty the set, or one or more package names with commas between them. Note that some packages are tricky to compile and may fail to install when this option is used on them.\n--only-binary <format_control>¶\nDo not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all source packages, :none: to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.\n--pre¶\nInclude pre-release and development versions. By default, pip only finds stable versions.\n--no-clean¶\nDon't clean up build directories.\n--require-hashes¶\nRequire a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.\n-i, --index-url <url>¶\nBase URL of Python Package Index (default https://pypi.python.org/simple).\n--extra-index-url <url>¶\nExtra URLs of package indexes to use in addition to --index-url.\n--no-index¶\nIgnore package index (only looking at --find-links URLs instead).\n-f, --find-links <url>¶\nIf a url or path to an html file, then parse for links to archives. If a local path or file:// url that's a directory, then look for archives in the directory listing.\n--process-dependency-links¶\nEnable the processing of dependency links.\n<h4>Examples</h4>\nInstall SomePackage and its dependencies from PyPI using Requirement Specifiers\n<pre><code>$ pip install SomePackage # latest version\n$ pip install SomePackage==1.0.4 # specific version\n$ pip install 'SomePackage>=1.0.4' # minimum version\n\n</pre></code>\nInstall a list of requirements specified in a file. See the Requirements files.\n<pre><code>$ pip install -r requirements.txt\n\n</pre></code>\nUpgrade an already installed SomePackage to the latest from PyPI.\n<pre><code>$ pip install --upgrade SomePackage\n\n</pre></code>\nInstall a local project in "editable" mode. See the section on Editable Installs.\n<pre><code>$ pip install -e . # project in current directory\n$ pip install -e path/to/project # project in another directory\n\n</pre></code>\nInstall a project from VCS in "editable" mode. See the sections on VCS Support and Editable Installs.\n<pre><code>$ pip install -e git+https://git.repo/some_pkg.git#egg=SomePackage # from git\n$ pip install -e hg+https://hg.repo/some_pkg.git#egg=SomePackage # from mercurial\n$ pip install -e svn+svn://svn.repo/some_pkg/trunk/#egg=SomePackage # from svn\n$ pip install -e git+https://git.repo/some_pkg.git@feature#egg=SomePackage # from 'feature' branch\n$ pip install -e "git+https://git.repo/some_repo.git#egg=subdir&subdirectory=subdir_path" # install a python package from a repo subdirectory\n\n</pre></code>\nInstall a package with setuptools extras.\n<pre><code>$ pip install SomePackage[PDF]\n$ pip install SomePackage[PDF]==3.0\n$ pip install -e .[PDF]==3.0 # editable project in current directory\n\n</pre></code>\nInstall a particular source archive file.\n<pre><code>$ pip install ./downloads/SomePackage-1.0.4.tar.gz\n$ pip install http://my.package.repo/SomePackage-1.0.4.zip\n\n</pre></code>\nInstall from alternative package repositories.\n<pre><code>Install from a different index, and not PyPI\n$ pip install --index-url http://my.package.repo/simple/ SomePackage\n\n\nSearch an additional index during install, in addition to PyPI\n$ pip install --extra-index-url http://my.package.repo/simple SomePackage\n\n\nInstall from a local flat directory containing archives (and don't scan indexes):\n$ pip install --no-index --find-links=file:///local/dir/ SomePackage\n$ pip install --no-index --find-links=/local/dir/ SomePackage\n$ pip install --no-index --find-links=relative/dir/ SomePackage\n\n</pre></code>\nFind pre-release and development versions, in addition to stable versions. By default, pip only finds stable versions.\n<pre><code>$ pip install --pre SomePackage\n\n</pre></code>\n[1]This is true with the exception that pip v7.0 and v7.0.1 required quotes\naround specifiers containing environment markers in requirement files.\n</section>	https://pip.pypa.io/en/stable/reference/pip_install.html	
pip 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip <command> [options]\n\n</pre></code>\n<h4>Console logging</h4>\npip offers -v, --verbose and -q, --quiet\nto control the console log level.\n\n<h4>File logging</h4>\npip offers the --log option for specifying a file where a maximum\nverbosity log will be kept. This option is empty by default. This log appends\nto previous logging.\nLike all pip options, --log can also be set as an environment variable, or\nplaced into the pip config file. See the Configuration section.\n<h4>--exists-action option</h4>\nThis option specifies default behavior when path already exists.\nPossible cases: downloading files or checking out repositories for installation,\ncreating archives. If --exists-action is not defined, pip will prompt\nwhen decision is needed.\n(s)witch\nOnly relevant to VCS checkout. Attempt to switch the checkout\nto the appropriate url and/or revision.\n(i)gnore\nAbort current operation (e.g. don't copy file, don't create archive,\ndon't modify a checkout).\n(w)ipe\nDelete the file or VCS checkout before trying to create, download, or checkout a new one.\n(b)ackup\nRename the file or checkout to {name}{'.bak' * n}, where n is some number\nof .bak extensions, such that the file didn't exist at some point.\nSo the most recent backup will be the one with the largest number after .bak.\n<h4>Setuptools Injection</h4>\nAs noted above, the supported build system is setuptools. However, not all\npackages use setuptools in their build scripts. To support projects that\nuse "pure distutils", pip injects setuptools into sys.modules\nbefore invoking setup.py. The injection should be transparent to\ndistutils-based projects, but 3rd party build tools wishing to provide a\nsetup.py emulating the commands pip requires may need to be aware that it\ntakes place.\n<h4>Future Developments</h4>\nPEP426 notes that the intention is to add hooks to project metadata in\nversion 2.1 of the metadata spec, to explicitly define how to build a project\nfrom its source. Once this version of the metadata spec is final, pip will\nmigrate to using that interface. At that point, the setup.py interface\ndocumented here will be retained solely for legacy purposes, until projects\nhave migrated.\nSpecifically, applications should not expect to rely on there being any form\nof backward compatibility guarantees around the setup.py interface.\n<h4>Build Options</h4>\nThe --global-option and --build-option arguments to the pip install\nand pip wheel inject additional arguments into the setup.py command\n(--build-option is only available in pip wheel). These arguments are\nincluded in the command as follows:\n<pre><code>python setup.py <global_options> BUILD COMMAND <build_options>\n\n</pre></code>\nThe options are passed unmodified, and presently offer direct access to the\ndistutils command line. Use of --global-option and --build-option\nshould be considered as build system dependent, and may not be supported in the\ncurrent form if support for alternative build systems is added to pip.\n<h4>General Options</h4>\n-h, --help¶\nShow help.\n--isolated¶\nRun pip in an isolated mode, ignoring environment variables and user configuration.\n-v, --verbose¶\nGive more output. Option is additive, and can be used up to 3 times.\n-V, --version¶\nShow version and exit.\n-q, --quiet¶\nGive less output.\n--log <path>¶\nPath to a verbose appending log.\n--proxy <proxy>¶\nSpecify a proxy in the form [user:passwd@]proxy.server:port.\n--retries <retries>¶\nMaximum number of retries each connection should attempt (default 5 times).\n--timeout <sec>¶\nSet the socket timeout (default 15 seconds).\n--exists-action <action>¶\nDefault action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup.\n--trusted-host <hostname>¶\nMark this host as trusted, even though it does not have valid or any HTTPS.\n--cert <path>¶\nPath to alternate CA bundle.\n--client-cert <path>¶\nPath to SSL client certificate, a single file containing the private key and the certificate in PEM format.\n--cache-dir <dir>¶\nStore the cache data in <dir>.\n--no-cache-dir¶\nDisable the cache.\n--disable-pip-version-check¶\nDon't periodically check PyPI to determine whether a new version of pip is available for download. Implied with --no-index.\n</section>	https://pip.pypa.io/en/stable/reference/pip.html	
pip uninstall 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip uninstall [options] <package>\npip uninstall [options] -r <requirements file>\n\n\n</pre></code>\n<h4>Description</h4>\n\nUninstall packages.\npip is able to uninstall most installed packages. Known exceptions are:\nPure distutils packages installed with python setup.py install, which\nleave behind no metadata to determine what files were installed.\nScript wrappers installed by python setup.py develop.\n<h4>Options</h4>\n-r, --requirement <file>¶\nUninstall all the packages listed in the given requirements file. This option can be used multiple times.\n-y, --yes¶\nDon't ask for confirmation of uninstall deletions.\n<h4>Examples</h4>\nUninstall a package.\n<pre><code>$ pip uninstall simplejson\nUninstalling simplejson:\n/home/me/env/lib/python2.7/site-packages/simplejson\n/home/me/env/lib/python2.7/site-packages/simplejson-2.2.1-py2.7.egg-info\nProceed (y/n)? y\nSuccessfully uninstalled simplejson\n\n</pre></code>\n</section>	https://pip.pypa.io/en/stable/reference/pip_uninstall.html	
pip list 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip list [options]\n\n</pre></code>\n<h4>Description</h4>\n\nList installed packages, including editables.\nPackages are listed in a case-insensitive sorted order.\n<h4>Options</h4>\n-o, --outdated¶\nList outdated packages\n-u, --uptodate¶\nList uptodate packages\n-e, --editable¶\nList editable projects.\n-l, --local¶\nIf in a virtualenv that has global access, do not list globally-installed packages.\n--user¶\nOnly output packages installed in user-site.\n--pre¶\nInclude pre-release and development versions. By default, pip only finds stable versions.\n-i, --index-url <url>¶\nBase URL of Python Package Index (default https://pypi.python.org/simple).\n--extra-index-url <url>¶\nExtra URLs of package indexes to use in addition to --index-url.\n--no-index¶\nIgnore package index (only looking at --find-links URLs instead).\n-f, --find-links <url>¶\nIf a url or path to an html file, then parse for links to archives. If a local path or file:// url that's a directory, then look for archives in the directory listing.\n--process-dependency-links¶\nEnable the processing of dependency links.\n<h4>Examples</h4>\nList installed packages.\n<pre><code>$ pip list\ndocutils (0.10)\nJinja2 (2.7.2)\nMarkupSafe (0.18)\nPygments (1.6)\nSphinx (1.2.1)\n\n</pre></code>\nList outdated packages (excluding editables), and the latest version available\n<pre><code>$ pip list --outdated\ndocutils (Current: 0.10 Latest: 0.11)\nSphinx (Current: 1.2.1 Latest: 1.2.2)\n\n</pre></code>\n</section>	https://pip.pypa.io/en/stable/reference/pip_list.html	
pip freeze 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip freeze [options]\n\n</pre></code>\n<h4>Description</h4>\n\nOutput installed packages in requirements format.\npackages are listed in a case-insensitive sorted order.\n<h4>Options</h4>\n-r, --requirement <file>¶\nUse the order in the given requirements file and its comments when generating output.\n-f, --find-links <url>¶\nURL for finding packages, which will be added to the output.\n-l, --local¶\nIf in a virtualenv that has global access, do not output globally-installed packages.\n--user¶\nOnly output packages installed in user-site.\n--all¶\nDo not skip these packages in the output: pip, setuptools, distribute, wheel\n<h4>Examples</h4>\nGenerate output suitable for a requirements file.\n<pre><code>$ pip freeze\ndocutils==0.11\nJinja2==2.7.2\nMarkupSafe==0.19\nPygments==1.6\nSphinx==1.2.2\n\n</pre></code>\nGenerate a requirements file and then install from it in another environment.\n<pre><code>$ env1/bin/pip freeze > requirements.txt\n$ env2/bin/pip install -r requirements.txt\n\n</pre></code>\n</section>	https://pip.pypa.io/en/stable/reference/pip_freeze.html	
pip wheel 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip wheel [options] <requirement specifier>\npip wheel [options] -r <requirements file>\npip wheel [options] [-e] <vcs project url>\npip wheel [options] [-e] <local project path>\npip wheel [options] <archive url/path>\n\n\n</pre></code>\n<h4>Customising the build</h4>\nIt is possible using --global-option to include additional build commands\nwith their arguments in the setup.py command. This is currently the only\nway to influence the building of C extensions from the command line. For\nexample:\n<pre><code>pip wheel --global-option bdist_ext --global-option -DFOO wheel\n\n</pre></code>\nwill result in a build command of\n<pre><code>setup.py bdist_ext -DFOO bdist_wheel -d TARGET\n\n</pre></code>\nwhich passes a preprocessor symbol to the extension build.\nSuch usage is considered highly build-system specific and more an accident of\nthe current implementation than a supported interface.\n<h4>Options</h4>\n\n-w, --wheel-dir <dir>¶\nBuild wheels into <dir>, where the default is the current working directory.\n--no-use-wheel¶\nDo not Find and prefer wheel archives when searching indexes and find-links locations. DEPRECATED in favour of --no-binary.\n--no-binary <format_control>¶\nDo not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all binary packages, :none: to empty the set, or one or more package names with commas between them. Note that some packages are tricky to compile and may fail to install when this option is used on them.\n--only-binary <format_control>¶\nDo not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all source packages, :none: to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.\n--build-option <options>¶\nExtra arguments to be supplied to 'setup.py bdist_wheel'.\n-c, --constraint <file>¶\nConstrain versions using the given constraints file. This option can be used multiple times.\n-e, --editable <path/url>¶\nInstall a project in editable mode (i.e. setuptools "develop mode") from a local project path or a VCS url.\n-r, --requirement <file>¶\nInstall from the given requirements file. This option can be used multiple times.\n--src <dir>¶\nDirectory to check out editable projects into. The default in a virtualenv is "<venv path>/src". The default for global installs is "<current dir>/src".\n--no-deps¶\nDon't install package dependencies.\n-b, --build <dir>¶\nDirectory to unpack packages into and build in.\n--global-option <options>¶\nExtra global options to be supplied to the setup.py call before the 'bdist_wheel' command.\n--pre¶\nInclude pre-release and development versions. By default, pip only finds stable versions.\n--no-clean¶\nDon't clean up build directories.\n--require-hashes¶\nRequire a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.\n-i, --index-url <url>¶\nBase URL of Python Package Index (default https://pypi.python.org/simple).\n--extra-index-url <url>¶\nExtra URLs of package indexes to use in addition to --index-url.\n--no-index¶\nIgnore package index (only looking at --find-links URLs instead).\n-f, --find-links <url>¶\nIf a url or path to an html file, then parse for links to archives. If a local path or file:// url that's a directory, then look for archives in the directory listing.\n--process-dependency-links¶\nEnable the processing of dependency links.\n<h4>Examples</h4>\nBuild wheels for a requirement (and all its dependencies), and then install\n<pre><code>$ pip wheel --wheel-dir=/tmp/wheelhouse SomePackage\n$ pip install --no-index --find-links=/tmp/wheelhouse SomePackage\n\n</pre></code>\n</section>	https://pip.pypa.io/en/stable/reference/pip_wheel.html	
pip hash 	A							https://pip.pypa.io/en/stable/reference/			<section class="prog__container"><h4>Usage</h4>\n<pre><code>pip hash [options] <file>\n\n\n</pre></code>\n<h4>Overview</h4>\npip hash is a convenient way to get a hash digest for use with\nHash-Checking Mode, especially for packages with multiple archives. The\nerror message from pip install --require-hashes ... will give you one\nhash, but, if there are multiple archives (like source and binary ones), you\nwill need to manually download and compute a hash for the others. Otherwise, a\nspurious hash mismatch could occur when pip install is passed a\ndifferent set of options, like --no-binary.\n<h4>Options</h4>\n\n-a, --algorithm <algorithm>¶\nThe hash algorithm to use: one of sha256, sha384, sha512\n<h4>Example</h4>\nCompute the hash of a downloaded archive:\n<pre><code>$ pip download SomePackage\nCollecting SomePackage\nDownloading SomePackage-2.2.tar.gz\nSaved ./pip_downloads/SomePackage-2.2.tar.gz\nSuccessfully downloaded SomePackage\n$ pip hash ./pip_downloads/SomePackage-2.2.tar.gz\n./pip_downloads/SomePackage-2.2.tar.gz:\n--hash=sha256:93e62e05c7ad3da1a233def6731e8285156701e3419a5fe279017c429ec67ce0\n\n</pre></code>\n</section>	https://pip.pypa.io/en/stable/reference/pip_hash.html	
