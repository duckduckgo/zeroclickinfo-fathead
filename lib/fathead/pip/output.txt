pip show 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip show [options] <package><br><br><br></pre></code><br><h4>Description</h4><br>Show information about one or more installed packages.<br><h4>Options</h4><br><br>-f, --files¶<br>Show the full list of installed files for each package.<br><h4>Examples</h4><br>Show information about a package:<br><pre><code>$ pip show sphinx<br>---<br>Name: Sphinx<br>Version: 1.1.3<br>Location: /my/env/lib/pythonx.x/site-packages<br>Requires: Pygments, Jinja2, docutils<br><br></pre></code><br></div>	https://pip.pypa.io/en/stable/reference/pip_show.html
pip download 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip download [options] <requirement specifier> [package-index-options]<br>pip download [options] -r <requirements file> [package-index-options]<br>pip download [options] [-e] <vcs project url><br>pip download [options] [-e] <local project path><br>pip download [options] <archive url/path><br><br><br></pre></code><br><h4>Overview</h4><br>pip download replaces the --download option to pip install,<br>which is now deprecated and will be removed in pip 10.<br>pip download does the same resolution and downloading as pip install,<br>but instead of installing the dependencies, it collects the downloaded<br>distributions into the directory provided (defaulting to the current<br>directory). This directory can later be passed as the value to<br>pip install --find-links to facilitate offline or locked down package<br>installation.<br><h4>Options</h4><br><br>-c, --constraint <file>¶<br>Constrain versions using the given constraints file. This option can be used multiple times.<br>-e, --editable <path/url>¶<br>Install a project in editable mode (i.e. setuptools "develop mode") from a local project path or a VCS url.<br>-r, --requirement <file>¶<br>Install from the given requirements file. This option can be used multiple times.<br>-b, --build <dir>¶<br>Directory to unpack packages into and build in.<br>--no-deps¶<br>Don't install package dependencies.<br>--global-option <options>¶<br>Extra global options to be supplied to the setup.py call before the install command.<br>--no-binary <format_control>¶<br>Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all binary packages, :none: to empty the set, or one or more package names with commas between them. Note that some packages are tricky to compile and may fail to install when this option is used on them.<br>--only-binary <format_control>¶<br>Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all source packages, :none: to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.<br>--src <dir>¶<br>Directory to check out editable projects into. The default in a virtualenv is "<venv path>/src". The default for global installs is "<current dir>/src".<br>--pre¶<br>Include pre-release and development versions. By default, pip only finds stable versions.<br>--no-clean¶<br>Don't clean up build directories.<br>--require-hashes¶<br>Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.<br>-d, --dest <dir>¶<br>Download packages into <dir>.<br>-i, --index-url <url>¶<br>Base URL of Python Package Index (default https://pypi.python.org/simple).<br>--extra-index-url <url>¶<br>Extra URLs of package indexes to use in addition to --index-url.<br>--no-index¶<br>Ignore package index (only looking at --find-links URLs instead).<br>-f, --find-links <url>¶<br>If a url or path to an html file, then parse for links to archives. If a local path or file:// url that's a directory, then look for archives in the directory listing.<br>--process-dependency-links¶<br>Enable the processing of dependency links.<br><h4>Examples</h4><br>Download a package and all of its dependencies<br><pre><code>$ pip download SomePackage<br>$ pip download -d . SomePackage # equivalent to above<br>$ pip download --no-index --find-links=/tmp/wheelhouse -d /tmp/otherwheelhouse SomePackage<br><br></pre></code><br></div>	https://pip.pypa.io/en/stable/reference/pip_download.html
pip search 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip search [options] <query><br><br></pre></code><br><h4>Description</h4><br>Search for PyPI packages whose name or summary contains <query>.<br><h4>Options</h4><br><br>--index <url>¶<br>Base URL of Python Package Index (default https://pypi.python.org/pypi)<br><h4>Examples</h4><br>Search for "peppercorn"<br><pre><code>$ pip search peppercorn<br>pepperedform - Helpers for using peppercorn with formprocess.<br>peppercorn - A library for converting a token stream into [<br>]<br><br></pre></code><br></div>	https://pip.pypa.io/en/stable/reference/pip_search.html
pip install 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip install [options] <requirement specifier> [package-index-options]<br>pip install [options] -r <requirements file> [package-index-options]<br>pip install [options] [-e] <vcs project url><br>pip install [options] [-e] <local project path><br>pip install [options] <archive url/path><br><br><br></pre></code><br><h4>Overview</h4><br>Pip install has several stages:<br>Identify the base requirements. The user supplied arguments are processed<br>here.<br>Resolve dependencies. What will be installed is determined here.<br>Build wheels. All the dependencies that can be are built into wheels.<br>Install the packages (and uninstall anything being upgraded/replaced).<br><h4>Argument Handling</h4><br>When looking at the items to be installed, pip checks what type of item<br>each is, in the following order:<br>Project or archive URL.<br>Local directory (which must contain a setup.py, or pip will report<br>an error).<br>Local file (a sdist or wheel format archive, following the naming<br>conventions for those formats).<br>A requirement, as specified in PEP 440.<br>Each item identified is added to the set of requirements to be satisfied by<br>the install.<br><h4>Working Out the Name and Version</h4><br>For each candidate item, pip needs to know the project name and version. For<br>wheels (identified by the .whl file extension) this can be obtained from<br>the filename, as per the Wheel spec. For local directories, or explicitly<br>specified sdist files, the setup.py egg_info command is used to determine<br>the project metadata. For sdists located via an index, the filename is parsed<br>for the name and project version (this is in theory slightly less reliable<br>than using the egg_info command, but avoids downloading and processing<br>unnecessary numbers of files).<br>Any URL may use the #egg=name syntax (see VCS Support) to<br>explicitly state the project name.<br><h4>Satisfying Requirements</h4><br>Once pip has the set of requirements to satisfy, it chooses which version of<br>each requirement to install using the simple rule that the latest version that<br>satisfies the given constraints will be installed (but see here<br>for an exception regarding pre-release versions). Where more than one source of<br>the chosen version is available, it is assumed that any source is acceptable<br>(as otherwise the versions would differ).<br><h4>Installation Order</h4><br>As of v6.1.0, pip installs dependencies before their dependents, i.e. in<br>"topological order". This is the only commitment pip currently makes related<br>to order. While it may be coincidentally true that pip will install things in<br>the order of the install arguments or in the order of the items in a<br>requirements file, this is not a promise.<br>In the event of a dependency cycle (aka "circular dependency"), the current<br>implementation (which might possibly change later) has it such that the first<br>encountered member of the cycle is installed last.<br>For instance, if quux depends on foo which depends on bar which depends on baz,<br>which depends on foo:<br><pre><code>pip install quux<br>Installing collected packages baz, bar, foo, quux<br><br>pip install bar<br>Installing collected packages foo, baz, bar<br><br></pre></code><br>Prior to v6.1.0, pip made no commitments about install order.<br>The decision to install topologically is based on the principle that<br>installations should proceed in a way that leaves the environment usable at each<br>step. This has two main practical benefits:<br>Concurrent use of the environment during the install is more likely to work.<br>A failed install is less likely to leave a broken environment. Although pip<br>would like to support failure rollbacks eventually, in the mean time, this is<br>an improvement.<br>Although the new install order is not intended to replace (and does not replace)<br>the use of setup_requires to declare build dependencies, it may help certain<br>projects install from sdist (that might previously fail) that fit the following<br>profile:<br>They have build dependencies that are also declared as install dependencies<br>using install_requires.<br>python setup.py egg_info works without their build dependencies being<br>installed.<br>For whatever reason, they don't or won't declare their build dependencies using<br>setup_requires.<br><br><h4>Example Requirements File</h4><br>Use pip install -r example-requirements.txt to install:<br><pre><code>#<br>####### example-requirements.txt #######<br>#<br>###### Requirements without Version Specifiers ######<br>nose<br>nose-cov<br>beautifulsoup4<br>#<br>###### Requirements with Version Specifiers ######<br># See https://www.python.org/dev/peps/pep-0440/#version-specifiers<br>docopt == 0.6.1 # Version Matching. Must be version 0.6.1<br>keyring >= 4.1.1 # Minimum version 4.1.1<br>coverage != 3.5 # Version Exclusion. Anything except version 3.5<br>Mopidy-Dirble ~= 1.1 # Compatible release. Same as >= 1.1, == 1.*<br>#<br>###### Refer to other requirements files ######<br>-r other-requirements.txt<br>#<br>#<br>###### A particular file ######<br>./downloads/numpy-1.9.2-cp34-none-win32.whl<br>http://wxpython.org/Phoenix/snapshot-builds/wxPython_Phoenix-3.0.3.dev1820+49a8884-cp34-none-win_amd64.whl<br>#<br>###### Additional Requirements without Version Specifiers ######<br># Same as 1st section, just here to show that you can put things in any order.<br>rejected<br>green<br>#<br><br></pre></code><br><h4>Requirement Specifiers</h4><br>pip supports installing from a package index using a requirement<br>specifier. Generally speaking, a requirement<br>specifier is composed of a project name followed by optional version<br>specifiers. PEP508 contains a full specification<br>of the format of a requirement (pip does not support the url_req form<br>of specifier at this time).<br>Some examples:<br><pre><code>SomeProject<br>SomeProject == 1.3<br>SomeProject >=1.2,<.2.0<br>SomeProject[foo, bar]<br>SomeProject~=1.4.2<br><br></pre></code><br>Since version 6.0, pip also supports specifiers containing environment markers like so:<br><pre><code>SomeProject ==5.4 ; python_version < '2.7'<br>SomeProject; sys_platform == 'win32'<br><br></pre></code><br>Environment markers are supported in the command line and in requirements files.<br>Note<br>Use quotes around specifiers in the shell when using >, <, or when<br>using environment markers. Don't use quotes in requirement files. [1]<br><h4>Per-requirement Overrides</h4><br>Since version 7.0 pip supports controlling the command line options given to<br>setup.py via requirements files. This disables the use of wheels (cached or<br>otherwise) for that package, as setup.py does not exist for wheels.<br>The --global-option and --install-option options are used to pass<br>options to setup.py. For example:<br><pre><code>FooProject >= 1.2 --global-option="--no-user-cfg" \<br>--install-option="--prefix='/usr/local'" \<br>--install-option="--no-compile"<br><br></pre></code><br>The above translates roughly into running FooProject's setup.py<br>script as:<br><pre><code>python setup.py --no-user-cfg install --prefix='/usr/local' --no-compile<br><br></pre></code><br>Note that the only way of giving more than one option to setup.py<br>is through multiple --global-option and --install-option<br>options, as shown in the example above. The value of each option is<br>passed as a single argument to the setup.py script. Therefore, a<br>line such as the following is invalid and would result in an<br>installation error.<br><pre><code># Invalid. Please use '--install-option' twice as shown above.<br>FooProject >= 1.2 --install-option="--prefix=/usr/local --no-compile"<br><br></pre></code><br><h4>Pre-release Versions</h4><br>Starting with v1.4, pip will only install stable versions as specified by<br>PEP426 by default. If a version cannot be parsed as a compliant PEP426<br>version then it is assumed to be a pre-release.<br>If a Requirement specifier includes a pre-release or development version<br>(e.g. >=0.0.dev0) then pip will allow pre-release and development versions<br>for that requirement. This does not include the != flag.<br>The pip install command also supports a --pre flag<br>that will enable installing pre-releases and development releases.<br><h4>Git</h4><br>pip currently supports cloning over git, git+https and git+ssh:<br>Here are the supported forms:<br><pre><code>[-e] git+git://git.myproject.org/MyProject#egg=MyProject<br>[-e] git+https://git.myproject.org/MyProject#egg=MyProject<br>[-e] git+ssh://git.myproject.org/MyProject#egg=MyProject<br>-e git+git@git.myproject.org:MyProject#egg=MyProject<br><br></pre></code><br>Passing branch names, a commit hash or a tag name is possible like so:<br><pre><code>[-e] git://git.myproject.org/MyProject.git@master#egg=MyProject<br>[-e] git://git.myproject.org/MyProject.git@v1.0#egg=MyProject<br>[-e] git://git.myproject.org/MyProject.git@da39a3ee5e6b4b0d3255bfef95601890afd80709#egg=MyProject<br><br></pre></code><br><h4>Mercurial</h4><br>The supported schemes are: hg+http, hg+https,<br>hg+static-http and hg+ssh.<br><pre><code>[-e] hg+http://hg.myproject.org/MyProject#egg=MyProject<br>[-e] hg+https://hg.myproject.org/MyProject#egg=MyProject<br>[-e] hg+ssh://hg.myproject.org/MyProject#egg=MyProject<br><br></pre></code><br>You can also specify a revision number, a revision hash, a tag name or a local<br>branch name like so:<br><pre><code>[-e] hg+http://hg.myproject.org/MyProject@da39a3ee5e6b#egg=MyProject<br>[-e] hg+http://hg.myproject.org/MyProject@2019#egg=MyProject<br>[-e] hg+http://hg.myproject.org/MyProject@v1.0#egg=MyProject<br>[-e] hg+http://hg.myproject.org/MyProject@special_feature#egg=MyProject<br><br></pre></code><br><h4>Subversion</h4><br>pip supports the URL schemes svn, svn+svn, svn+http, svn+https, svn+ssh.<br>You can also give specific revisions to an SVN URL, like so:<br><pre><code>[-e] svn+svn://svn.myproject.org/svn/MyProject#egg=MyProject<br>[-e] svn+http://svn.myproject.org/svn/MyProject/trunk@2019#egg=MyProject<br><br></pre></code><br>which will check out revision 2019. @{20080101} would also check<br>out the revision from 2008-01-01. You can only check out specific<br>revisions using -e svn+....<br><h4>Bazaar</h4><br>pip supports Bazaar using the bzr+http, bzr+https, bzr+ssh,<br>bzr+sftp, bzr+ftp and bzr+lp schemes.<br><pre><code>[-e] bzr+http://bzr.myproject.org/MyProject/trunk#egg=MyProject<br>[-e] bzr+sftp://user@myproject.org/MyProject/trunk#egg=MyProject<br>[-e] bzr+ssh://user@myproject.org/MyProject/trunk#egg=MyProject<br>[-e] bzr+ftp://user@myproject.org/MyProject/trunk#egg=MyProject<br>[-e] bzr+lp:MyProject#egg=MyProject<br><br></pre></code><br>Tags or revisions can be installed like so:<br><pre><code>[-e] bzr+https://bzr.myproject.org/MyProject/trunk@2019#egg=MyProject<br>[-e] bzr+http://bzr.myproject.org/MyProject/trunk@v1.0#egg=MyProject<br><br></pre></code><br><h4>Finding Packages</h4><br>pip searches for packages on PyPI using the<br>http simple interface,<br>which is documented here<br>and there<br>pip offers a number of Package Index Options for modifying how packages are found.<br>pip looks for packages in a number of places, on PyPI (if not disabled via<br>`--no-index`), in the local filesystem, and in any additional repositories<br>specified via `--find-links` or `--index-url`. There is no ordering in<br>the locations that are searched, rather they are all checked, and the "best"<br>match for the requirements (in terms of version number - see PEP440 for<br>details) is selected.<br>See the pip install Examples.<br><h4>SSL Certificate Verification</h4><br>Starting with v1.3, pip provides SSL certificate verification over https, to<br>prevent man-in-the-middle attacks against PyPI downloads.<br><h4>Wheel Cache</h4><br>Pip will read from the subdirectory wheels within the pip cache directory<br>and use any packages found there. This is disabled via the same<br>--no-cache-dir option that disables the HTTP cache. The internal structure<br>of that is not part of the pip API. As of 7.0, pip makes a subdirectory for<br>each sdist that wheels are built from and places the resulting wheels inside.<br>Pip attempts to choose the best wheels from those built in preference to<br>building a new wheel. Note that this means when a package has both optional<br>C extensions and builds py tagged wheels when the C extension can't be built<br>that pip will not attempt to build a better wheel for Pythons that would have<br>supported it, once any generic wheel is built. To correct this, make sure that<br>the wheels are built with Python specific tags - e.g. pp on Pypy.<br>When no wheels are found for an sdist, pip will attempt to build a wheel<br>automatically and insert it into the wheel cache.<br><h4>Hashes from PyPI</h4><br>PyPI provides an MD5 hash in the fragment portion of each package download URL,<br>like #md5=123..., which pip checks as a protection against download<br>corruption. Other hash algorithms that have guaranteed support from hashlib<br>are also supported here: sha1, sha224, sha384, sha256, and sha512. Since this<br>hash originates remotely, it is not a useful guard against tampering and thus<br>does not satisfy the --require-hashes demand that every package have a<br>local hash.<br><h4>"Editable" Installs</h4><br>"Editable" installs are fundamentally "setuptools develop mode"<br>installs.<br>You can install local projects or VCS projects in "editable" mode:<br><pre><code>$ pip install -e path/to/SomeProject<br>$ pip install -e git+http://repo/my_project.git#egg=SomeProject<br><br></pre></code><br>(See the VCS Support section above for more information on VCS-related syntax.)<br>For local projects, the "SomeProject.egg-info" directory is created relative to<br>the project path. This is one advantage over just using setup.py develop,<br>which creates the "egg-info" directly relative the current working directory.<br><h4>Controlling setup_requires</h4><br>Setuptools offers the setup_requires setup() keyword<br>for specifying dependencies that need to be present in order for the setup.py<br>script to run. Internally, Setuptools uses easy_install to fulfill these<br>dependencies.<br>pip has no way to control how these dependencies are located. None of the<br>Package Index Options have an effect.<br>The solution is to configure a "system" or "personal" Distutils configuration<br>file to<br>manage the fulfillment.<br>For example, to have the dependency located at an alternate index, add this:<br><pre><code>[easy_install]<br>index_url = https://my.index-mirror.com<br><br></pre></code><br>To have the dependency located from a local directory and not crawl PyPI, add this:<br><pre><code>[easy_install]<br>allow_hosts = ''<br>find_links = file:///path/to/local/archives/<br><br></pre></code><br><h4>Build System Interface</h4><br>In order for pip to install a package from source, setup.py must implement<br>the following commands:<br><pre><code>setup.py egg_info [--egg-base XXX]<br>setup.py install --record XXX [--single-version-externally-managed] [--root XXX] [--compile|--no-compile] [--install-headers XXX]<br><br></pre></code><br>The egg_info command should create egg metadata for the package, as<br>described in the setuptools documentation at<br>http://pythonhosted.org/setuptools/setuptools.html#egg-info-create-egg-metadata-and-set-build-tags<br>The install command should implement the complete process of installing the<br>package to the target directory XXX.<br>To install a package in "editable" mode (pip install -e), setup.py must<br>implement the following command:<br><pre><code>setup.py develop --no-deps<br><br></pre></code><br>This should implement the complete process of installing the package in<br>"editable" mode.<br>All packages will be attempted to built into wheels:<br><pre><code>setup.py bdist_wheel -d XXX<br><br></pre></code><br>One further setup.py command is invoked by pip install:<br><pre><code>setup.py clean<br><br></pre></code><br>This command is invoked to clean up temporary commands from the build. (TODO:<br>Investigate in more detail when this command is required).<br>No other build system commands are invoked by the pip install command.<br>Installing a package from a wheel does not invoke the build system at all.<br><h4>Options</h4><br>-c, --constraint <file>¶<br>Constrain versions using the given constraints file. This option can be used multiple times.<br>-e, --editable <path/url>¶<br>Install a project in editable mode (i.e. setuptools "develop mode") from a local project path or a VCS url.<br>-r, --requirement <file>¶<br>Install from the given requirements file. This option can be used multiple times.<br>-b, --build <dir>¶<br>Directory to unpack packages into and build in.<br>-t, --target <dir>¶<br>Install packages into <dir>. By default this will not replace existing files/folders in <dir>. Use --upgrade to replace existing packages in <dir> with new versions.<br>-d, --download <dir>¶<br>Download packages into <dir> instead of installing them, regardless of what's already installed.<br>--src <dir>¶<br>Directory to check out editable projects into. The default in a virtualenv is "<venv path>/src". The default for global installs is "<current dir>/src".<br>-U, --upgrade¶<br>Upgrade all specified packages to the newest available version. This process is recursive regardless of whether a dependency is already satisfied.<br>--force-reinstall¶<br>When upgrading, reinstall all packages even if they are already up-to-date.<br>-I, --ignore-installed¶<br>Ignore the installed packages (reinstalling instead).<br>--no-deps¶<br>Don't install package dependencies.<br>--install-option <options>¶<br>Extra arguments to be supplied to the setup.py install command (use like --install-option="--install-scripts=/usr/local/bin"). Use multiple --install-option options to pass multiple options to setup.py install. If you are using an option with a directory path, be sure to use absolute path.<br>--global-option <options>¶<br>Extra global options to be supplied to the setup.py call before the install command.<br>--user¶<br>Install to the Python user install directory for your platform. Typically ~/.local/, or %APPDATA%Python on Windows. (See the Python documentation for site.USER_BASE for full details.)<br>--egg¶<br>Install packages as eggs, not 'flat', like pip normally does. This option is not about installing from eggs. (WARNING: Because this option overrides pip's normal install logic, requirements files may not behave as expected.)<br>--root <dir>¶<br>Install everything relative to this alternate root directory.<br>--prefix <dir>¶<br>Installation prefix where lib, bin and other top-level folders are placed<br>--compile¶<br>Compile py files to pyc<br>--no-compile¶<br>Do not compile py files to pyc<br>--no-use-wheel¶<br>Do not Find and prefer wheel archives when searching indexes and find-links locations. DEPRECATED in favour of --no-binary.<br>--no-binary <format_control>¶<br>Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all binary packages, :none: to empty the set, or one or more package names with commas between them. Note that some packages are tricky to compile and may fail to install when this option is used on them.<br>--only-binary <format_control>¶<br>Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all source packages, :none: to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.<br>--pre¶<br>Include pre-release and development versions. By default, pip only finds stable versions.<br>--no-clean¶<br>Don't clean up build directories.<br>--require-hashes¶<br>Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.<br>-i, --index-url <url>¶<br>Base URL of Python Package Index (default https://pypi.python.org/simple).<br>--extra-index-url <url>¶<br>Extra URLs of package indexes to use in addition to --index-url.<br>--no-index¶<br>Ignore package index (only looking at --find-links URLs instead).<br>-f, --find-links <url>¶<br>If a url or path to an html file, then parse for links to archives. If a local path or file:// url that's a directory, then look for archives in the directory listing.<br>--process-dependency-links¶<br>Enable the processing of dependency links.<br><h4>Examples</h4><br>Install SomePackage and its dependencies from PyPI using Requirement Specifiers<br><pre><code>$ pip install SomePackage # latest version<br>$ pip install SomePackage==1.0.4 # specific version<br>$ pip install 'SomePackage>=1.0.4' # minimum version<br><br></pre></code><br>Install a list of requirements specified in a file. See the Requirements files.<br><pre><code>$ pip install -r requirements.txt<br><br></pre></code><br>Upgrade an already installed SomePackage to the latest from PyPI.<br><pre><code>$ pip install --upgrade SomePackage<br><br></pre></code><br>Install a local project in "editable" mode. See the section on Editable Installs.<br><pre><code>$ pip install -e . # project in current directory<br>$ pip install -e path/to/project # project in another directory<br><br></pre></code><br>Install a project from VCS in "editable" mode. See the sections on VCS Support and Editable Installs.<br><pre><code>$ pip install -e git+https://git.repo/some_pkg.git#egg=SomePackage # from git<br>$ pip install -e hg+https://hg.repo/some_pkg.git#egg=SomePackage # from mercurial<br>$ pip install -e svn+svn://svn.repo/some_pkg/trunk/#egg=SomePackage # from svn<br>$ pip install -e git+https://git.repo/some_pkg.git@feature#egg=SomePackage # from 'feature' branch<br>$ pip install -e "git+https://git.repo/some_repo.git#egg=subdir&subdirectory=subdir_path" # install a python package from a repo subdirectory<br><br></pre></code><br>Install a package with setuptools extras.<br><pre><code>$ pip install SomePackage[PDF]<br>$ pip install SomePackage[PDF]==3.0<br>$ pip install -e .[PDF]==3.0 # editable project in current directory<br><br></pre></code><br>Install a particular source archive file.<br><pre><code>$ pip install ./downloads/SomePackage-1.0.4.tar.gz<br>$ pip install http://my.package.repo/SomePackage-1.0.4.zip<br><br></pre></code><br>Install from alternative package repositories.<br><pre><code>Install from a different index, and not PyPI<br>$ pip install --index-url http://my.package.repo/simple/ SomePackage<br><br><br>Search an additional index during install, in addition to PyPI<br>$ pip install --extra-index-url http://my.package.repo/simple SomePackage<br><br><br>Install from a local flat directory containing archives (and don't scan indexes):<br>$ pip install --no-index --find-links=file:///local/dir/ SomePackage<br>$ pip install --no-index --find-links=/local/dir/ SomePackage<br>$ pip install --no-index --find-links=relative/dir/ SomePackage<br><br></pre></code><br>Find pre-release and development versions, in addition to stable versions. By default, pip only finds stable versions.<br><pre><code>$ pip install --pre SomePackage<br><br></pre></code><br>[1]This is true with the exception that pip v7.0 and v7.0.1 required quotes<br>around specifiers containing environment markers in requirement files.<br></div>	https://pip.pypa.io/en/stable/reference/pip_install.html
pip 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip <command> [options]<br><br></pre></code><br><h4>Console logging</h4><br>pip offers -v, --verbose and -q, --quiet<br>to control the console log level.<br><br><h4>File logging</h4><br>pip offers the --log option for specifying a file where a maximum<br>verbosity log will be kept. This option is empty by default. This log appends<br>to previous logging.<br>Like all pip options, --log can also be set as an environment variable, or<br>placed into the pip config file. See the Configuration section.<br><h4>--exists-action option</h4><br>This option specifies default behavior when path already exists.<br>Possible cases: downloading files or checking out repositories for installation,<br>creating archives. If --exists-action is not defined, pip will prompt<br>when decision is needed.<br>(s)witch<br>Only relevant to VCS checkout. Attempt to switch the checkout<br>to the appropriate url and/or revision.<br>(i)gnore<br>Abort current operation (e.g. don't copy file, don't create archive,<br>don't modify a checkout).<br>(w)ipe<br>Delete the file or VCS checkout before trying to create, download, or checkout a new one.<br>(b)ackup<br>Rename the file or checkout to {name}{'.bak' * n}, where n is some number<br>of .bak extensions, such that the file didn't exist at some point.<br>So the most recent backup will be the one with the largest number after .bak.<br><h4>Setuptools Injection</h4><br>As noted above, the supported build system is setuptools. However, not all<br>packages use setuptools in their build scripts. To support projects that<br>use "pure distutils", pip injects setuptools into sys.modules<br>before invoking setup.py. The injection should be transparent to<br>distutils-based projects, but 3rd party build tools wishing to provide a<br>setup.py emulating the commands pip requires may need to be aware that it<br>takes place.<br><h4>Future Developments</h4><br>PEP426 notes that the intention is to add hooks to project metadata in<br>version 2.1 of the metadata spec, to explicitly define how to build a project<br>from its source. Once this version of the metadata spec is final, pip will<br>migrate to using that interface. At that point, the setup.py interface<br>documented here will be retained solely for legacy purposes, until projects<br>have migrated.<br>Specifically, applications should not expect to rely on there being any form<br>of backward compatibility guarantees around the setup.py interface.<br><h4>Build Options</h4><br>The --global-option and --build-option arguments to the pip install<br>and pip wheel inject additional arguments into the setup.py command<br>(--build-option is only available in pip wheel). These arguments are<br>included in the command as follows:<br><pre><code>python setup.py <global_options> BUILD COMMAND <build_options><br><br></pre></code><br>The options are passed unmodified, and presently offer direct access to the<br>distutils command line. Use of --global-option and --build-option<br>should be considered as build system dependent, and may not be supported in the<br>current form if support for alternative build systems is added to pip.<br><h4>General Options</h4><br>-h, --help¶<br>Show help.<br>--isolated¶<br>Run pip in an isolated mode, ignoring environment variables and user configuration.<br>-v, --verbose¶<br>Give more output. Option is additive, and can be used up to 3 times.<br>-V, --version¶<br>Show version and exit.<br>-q, --quiet¶<br>Give less output.<br>--log <path>¶<br>Path to a verbose appending log.<br>--proxy <proxy>¶<br>Specify a proxy in the form [user:passwd@]proxy.server:port.<br>--retries <retries>¶<br>Maximum number of retries each connection should attempt (default 5 times).<br>--timeout <sec>¶<br>Set the socket timeout (default 15 seconds).<br>--exists-action <action>¶<br>Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup.<br>--trusted-host <hostname>¶<br>Mark this host as trusted, even though it does not have valid or any HTTPS.<br>--cert <path>¶<br>Path to alternate CA bundle.<br>--client-cert <path>¶<br>Path to SSL client certificate, a single file containing the private key and the certificate in PEM format.<br>--cache-dir <dir>¶<br>Store the cache data in <dir>.<br>--no-cache-dir¶<br>Disable the cache.<br>--disable-pip-version-check¶<br>Don't periodically check PyPI to determine whether a new version of pip is available for download. Implied with --no-index.<br></div>	https://pip.pypa.io/en/stable/reference/pip.html
pip uninstall 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip uninstall [options] <package><br>pip uninstall [options] -r <requirements file><br><br><br></pre></code><br><h4>Description</h4><br><br>Uninstall packages.<br>pip is able to uninstall most installed packages. Known exceptions are:<br>Pure distutils packages installed with python setup.py install, which<br>leave behind no metadata to determine what files were installed.<br>Script wrappers installed by python setup.py develop.<br><h4>Options</h4><br>-r, --requirement <file>¶<br>Uninstall all the packages listed in the given requirements file. This option can be used multiple times.<br>-y, --yes¶<br>Don't ask for confirmation of uninstall deletions.<br><h4>Examples</h4><br>Uninstall a package.<br><pre><code>$ pip uninstall simplejson<br>Uninstalling simplejson:<br>/home/me/env/lib/python2.7/site-packages/simplejson<br>/home/me/env/lib/python2.7/site-packages/simplejson-2.2.1-py2.7.egg-info<br>Proceed (y/n)? y<br>Successfully uninstalled simplejson<br><br></pre></code><br></div>	https://pip.pypa.io/en/stable/reference/pip_uninstall.html
pip list 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip list [options]<br><br></pre></code><br><h4>Description</h4><br><br>List installed packages, including editables.<br>Packages are listed in a case-insensitive sorted order.<br><h4>Options</h4><br>-o, --outdated¶<br>List outdated packages<br>-u, --uptodate¶<br>List uptodate packages<br>-e, --editable¶<br>List editable projects.<br>-l, --local¶<br>If in a virtualenv that has global access, do not list globally-installed packages.<br>--user¶<br>Only output packages installed in user-site.<br>--pre¶<br>Include pre-release and development versions. By default, pip only finds stable versions.<br>-i, --index-url <url>¶<br>Base URL of Python Package Index (default https://pypi.python.org/simple).<br>--extra-index-url <url>¶<br>Extra URLs of package indexes to use in addition to --index-url.<br>--no-index¶<br>Ignore package index (only looking at --find-links URLs instead).<br>-f, --find-links <url>¶<br>If a url or path to an html file, then parse for links to archives. If a local path or file:// url that's a directory, then look for archives in the directory listing.<br>--process-dependency-links¶<br>Enable the processing of dependency links.<br><h4>Examples</h4><br>List installed packages.<br><pre><code>$ pip list<br>docutils (0.10)<br>Jinja2 (2.7.2)<br>MarkupSafe (0.18)<br>Pygments (1.6)<br>Sphinx (1.2.1)<br><br></pre></code><br>List outdated packages (excluding editables), and the latest version available<br><pre><code>$ pip list --outdated<br>docutils (Current: 0.10 Latest: 0.11)<br>Sphinx (Current: 1.2.1 Latest: 1.2.2)<br><br></pre></code><br></div>	https://pip.pypa.io/en/stable/reference/pip_list.html
pip freeze 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip freeze [options]<br><br></pre></code><br><h4>Description</h4><br><br>Output installed packages in requirements format.<br>packages are listed in a case-insensitive sorted order.<br><h4>Options</h4><br>-r, --requirement <file>¶<br>Use the order in the given requirements file and its comments when generating output.<br>-f, --find-links <url>¶<br>URL for finding packages, which will be added to the output.<br>-l, --local¶<br>If in a virtualenv that has global access, do not output globally-installed packages.<br>--user¶<br>Only output packages installed in user-site.<br>--all¶<br>Do not skip these packages in the output: pip, setuptools, distribute, wheel<br><h4>Examples</h4><br>Generate output suitable for a requirements file.<br><pre><code>$ pip freeze<br>docutils==0.11<br>Jinja2==2.7.2<br>MarkupSafe==0.19<br>Pygments==1.6<br>Sphinx==1.2.2<br><br></pre></code><br>Generate a requirements file and then install from it in another environment.<br><pre><code>$ env1/bin/pip freeze > requirements.txt<br>$ env2/bin/pip install -r requirements.txt<br><br></pre></code><br></div>	https://pip.pypa.io/en/stable/reference/pip_freeze.html
pip wheel 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip wheel [options] <requirement specifier><br>pip wheel [options] -r <requirements file><br>pip wheel [options] [-e] <vcs project url><br>pip wheel [options] [-e] <local project path><br>pip wheel [options] <archive url/path><br><br><br></pre></code><br><h4>Customising the build</h4><br>It is possible using --global-option to include additional build commands<br>with their arguments in the setup.py command. This is currently the only<br>way to influence the building of C extensions from the command line. For<br>example:<br><pre><code>pip wheel --global-option bdist_ext --global-option -DFOO wheel<br><br></pre></code><br>will result in a build command of<br><pre><code>setup.py bdist_ext -DFOO bdist_wheel -d TARGET<br><br></pre></code><br>which passes a preprocessor symbol to the extension build.<br>Such usage is considered highly build-system specific and more an accident of<br>the current implementation than a supported interface.<br><h4>Options</h4><br><br>-w, --wheel-dir <dir>¶<br>Build wheels into <dir>, where the default is the current working directory.<br>--no-use-wheel¶<br>Do not Find and prefer wheel archives when searching indexes and find-links locations. DEPRECATED in favour of --no-binary.<br>--no-binary <format_control>¶<br>Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all binary packages, :none: to empty the set, or one or more package names with commas between them. Note that some packages are tricky to compile and may fail to install when this option is used on them.<br>--only-binary <format_control>¶<br>Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all source packages, :none: to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.<br>--build-option <options>¶<br>Extra arguments to be supplied to 'setup.py bdist_wheel'.<br>-c, --constraint <file>¶<br>Constrain versions using the given constraints file. This option can be used multiple times.<br>-e, --editable <path/url>¶<br>Install a project in editable mode (i.e. setuptools "develop mode") from a local project path or a VCS url.<br>-r, --requirement <file>¶<br>Install from the given requirements file. This option can be used multiple times.<br>--src <dir>¶<br>Directory to check out editable projects into. The default in a virtualenv is "<venv path>/src". The default for global installs is "<current dir>/src".<br>--no-deps¶<br>Don't install package dependencies.<br>-b, --build <dir>¶<br>Directory to unpack packages into and build in.<br>--global-option <options>¶<br>Extra global options to be supplied to the setup.py call before the 'bdist_wheel' command.<br>--pre¶<br>Include pre-release and development versions. By default, pip only finds stable versions.<br>--no-clean¶<br>Don't clean up build directories.<br>--require-hashes¶<br>Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.<br>-i, --index-url <url>¶<br>Base URL of Python Package Index (default https://pypi.python.org/simple).<br>--extra-index-url <url>¶<br>Extra URLs of package indexes to use in addition to --index-url.<br>--no-index¶<br>Ignore package index (only looking at --find-links URLs instead).<br>-f, --find-links <url>¶<br>If a url or path to an html file, then parse for links to archives. If a local path or file:// url that's a directory, then look for archives in the directory listing.<br>--process-dependency-links¶<br>Enable the processing of dependency links.<br><h4>Examples</h4><br>Build wheels for a requirement (and all its dependencies), and then install<br><pre><code>$ pip wheel --wheel-dir=/tmp/wheelhouse SomePackage<br>$ pip install --no-index --find-links=/tmp/wheelhouse SomePackage<br><br></pre></code><br></div>	https://pip.pypa.io/en/stable/reference/pip_wheel.html
pip hash 	A							https://pip.pypa.io/en/stable/reference/			<div class="prog__container"><h4>Usage</h4><br><pre><code>pip hash [options] <file><br><br><br></pre></code><br><h4>Overview</h4><br>pip hash is a convenient way to get a hash digest for use with<br>Hash-Checking Mode, especially for packages with multiple archives. The<br>error message from pip install --require-hashes ... will give you one<br>hash, but, if there are multiple archives (like source and binary ones), you<br>will need to manually download and compute a hash for the others. Otherwise, a<br>spurious hash mismatch could occur when pip install is passed a<br>different set of options, like --no-binary.<br><h4>Options</h4><br><br>-a, --algorithm <algorithm>¶<br>The hash algorithm to use: one of sha256, sha384, sha512<br><h4>Example</h4><br>Compute the hash of a downloaded archive:<br><pre><code>$ pip download SomePackage<br>Collecting SomePackage<br>Downloading SomePackage-2.2.tar.gz<br>Saved ./pip_downloads/SomePackage-2.2.tar.gz<br>Successfully downloaded SomePackage<br>$ pip hash ./pip_downloads/SomePackage-2.2.tar.gz<br>./pip_downloads/SomePackage-2.2.tar.gz:<br>--hash=sha256:93e62e05c7ad3da1a233def6731e8285156701e3419a5fe279017c429ec67ce0<br><br></pre></code><br></div>	https://pip.pypa.io/en/stable/reference/pip_hash.html