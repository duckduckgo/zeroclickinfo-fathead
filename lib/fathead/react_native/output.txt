ActionSheetIOS	A					[[ActionSheetIOS.showShareActionSheetWithOptions]]\\n[[ActionSheetIOS.showActionSheetWithOptions]]					<section class="prog__container"><p>Display an iOS action sheet. The options object must contain one or more of:</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/actionsheetios.html#
ActionSheetIOS showActionSheetWithOptions	R	ActionSheetIOS.showActionSheetWithOptions										
ActionSheetIOS showShareActionSheetWithOptions	R	ActionSheetIOS.showShareActionSheetWithOptions										
ActionSheetIOS.showActionSheetWithOptions	A										<section class="prog__container"><p>Display an iOS action sheet. The options object must contain one or more of:</p><pre><code>showActionSheetWithOptions(options, callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/actionsheetios.html#showactionsheetwithoptions
ActionSheetIOS.showShareActionSheetWithOptions	A										<section class="prog__container"><p>Display the iOS share sheet. The options object should contain one or both of message and url and can additionally have a subject or excludedActivityTypes:</p><pre><code>showShareActionSheetWithOptions(options, failureCallback, successCallback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/actionsheetios.html#showshareactionsheetwithoptions
ActivityIndicator	A					[[ActivityIndicator.color]]\\n[[ActivityIndicator.hidesWhenStopped]]\\n[[ActivityIndicator.size]]\\n[[ActivityIndicator.animating]]					<section class="prog__container"><p>Displays a circular loading indicator.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/activityindicator.html#
ActivityIndicator animating	R	ActivityIndicator.animating										
ActivityIndicator color	R	ActivityIndicator.color										
ActivityIndicator hidesWhenStopped	R	ActivityIndicator.hidesWhenStopped										
ActivityIndicator size	R	ActivityIndicator.size										
ActivityIndicator.animating	A										<section class="prog__container"><p>Whether to show the indicator (true, the default) or hide it (false).</p><pre><code>animating bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/activityindicator.html#animating
ActivityIndicator.color	A										<section class="prog__container"><p>The foreground color of the spinner (default is gray).</p><pre><code>color color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/activityindicator.html#color
ActivityIndicator.hidesWhenStopped	A										<section class="prog__container"><p>Whether the indicator should hide when not animating (true by default).</p><pre><code>hidesWhenStopped bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/activityindicator.html#hideswhenstopped
ActivityIndicator.size	A										<section class="prog__container"><p>Size of the indicator (default is 'small'). Passing a number to the size prop is only supported on Android.</p><pre><code>size enum('small', 'large'), number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/activityindicator.html#size
AdSupportIOS	A					[[AdSupportIOS.getAdvertisingId]]\\n[[AdSupportIOS.getAdvertisingTrackingEnabled]]					<section class="prog__container"><p>You can edit the content above on GitHub and send us a pull request!</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/adsupportios.html#
AdSupportIOS getAdvertisingId	R	AdSupportIOS.getAdvertisingId										
AdSupportIOS getAdvertisingTrackingEnabled	R	AdSupportIOS.getAdvertisingTrackingEnabled										
AdSupportIOS.getAdvertisingId	A										<section class="prog__container"><pre><code>getAdvertisingId(onSuccess, onFailure)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/adsupportios.html#getadvertisingid
AdSupportIOS.getAdvertisingTrackingEnabled	A										<section class="prog__container"><pre><code>getAdvertisingTrackingEnabled(onSuccess, onFailure)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/adsupportios.html#getadvertisingtrackingenabled
Alert	A					[[Alert.alert]]					<section class="prog__container"><p>Launches an alert dialog with the specified title and message.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/alert.html#
Alert alert	R	Alert.alert										
Alert.alert	A										<section class="prog__container"><pre><code>alert(title, message?, buttons?, options?, type?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/alert.html#alert
AlertIOS	A					[[AlertIOS.alert]]\\n[[AlertIOS.prompt]]					<section class="prog__container"><p>AlertIOS provides functionality to create an iOS alert dialog with a message or create a prompt for user input.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/alertios.html#
AlertIOS alert	R	AlertIOS.alert										
AlertIOS prompt	R	AlertIOS.prompt										
AlertIOS.alert	A										<section class="prog__container"><p>Create and display a popup alert.</p><pre><code>alert(title, message?, callbackOrButtons?, type?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/alertios.html#alert
AlertIOS.prompt	A										<section class="prog__container"><p>Create and display a prompt to enter some text.</p><pre><code>prompt(title, message?, callbackOrButtons?, type?, defaultValue?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/alertios.html#prompt
Animated	A					[[Animated.stopAnimation]]\\n[[Animated.addListener]]\\n[[Animated.getTranslateTransform]]\\n[[Animated.removeListener]]\\n[[Animated.setValue]]\\n[[Animated.getLayout]]\\n[[Animated.constructor]]\\n[[Animated.setOffset]]\\n[[Animated.flattenOffset]]					<section class="prog__container"><p>Animations are an important part of modern UX, and the Animated library is designed to make them fluid, powerful, and easy to build and maintain.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#
Animated addListener	R	Animated.addListener										
Animated constructor	R	Animated.constructor										
Animated flattenOffset	R	Animated.flattenOffset										
Animated getLayout	R	Animated.getLayout										
Animated getTranslateTransform	R	Animated.getTranslateTransform										
Animated removeListener	R	Animated.removeListener										
Animated setOffset	R	Animated.setOffset										
Animated setValue	R	Animated.setValue										
Animated stopAnimation	R	Animated.stopAnimation										
Animated.addListener	A										<section class="prog__container"><pre><code>addListener(callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#addlistener
Animated.constructor	A										<section class="prog__container"><pre><code>constructor(valueIn?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#constructor
Animated.flattenOffset	A										<section class="prog__container"><pre><code>flattenOffset(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#flattenoffset
Animated.getLayout	A										<section class="prog__container"><p>Converts {x, y} into {left, top} for use in style, e.g.</p><pre><code>getLayout(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#getlayout
Animated.getTranslateTransform	A										<section class="prog__container"><p>Converts {x, y} into a useable translation transform, e.g.</p><pre><code>getTranslateTransform(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#gettranslatetransform
Animated.removeListener	A										<section class="prog__container"><pre><code>removeListener(id)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#removelistener
Animated.setOffset	A										<section class="prog__container"><pre><code>setOffset(offset)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#setoffset
Animated.setValue	A										<section class="prog__container"><pre><code>setValue(value)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#setvalue
Animated.stopAnimation	A										<section class="prog__container"><pre><code>stopAnimation(callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/animated.html#stopanimation
Animations	A										<section class="prog__container"><p>Fluid, meaningful animations are essential to the mobile user experience. Like everything in React Native, Animation APIs for React Native are currently under development, but have started to coalesce around two complementary systems: LayoutAnimation for animated global layout transactions, and Animated for more granular and interactive control of specific values.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/animations.html#
AppRegistry	A					[[AppRegistry.unmountApplicationComponentAtRootTag]]\\n[[AppRegistry.getAppKeys]]\\n[[AppRegistry.registerHeadlessTask]]\\n[[AppRegistry.runApplication]]\\n[[AppRegistry.registerConfig]]\\n[[AppRegistry.registerComponent]]\\n[[AppRegistry.registerRunnable]]\\n[[AppRegistry.startHeadlessTask]]					<section class="prog__container"><p>AppRegistry is the JS entry point to running all React Native apps. App root components should register themselves with AppRegistry.registerComponent, then the native system can load the bundle for the app and then actually run the app when it's ready by invoking AppRegistry.runApplication.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/appregistry.html#
AppRegistry getAppKeys	R	AppRegistry.getAppKeys										
AppRegistry registerComponent	R	AppRegistry.registerComponent										
AppRegistry registerConfig	R	AppRegistry.registerConfig										
AppRegistry registerHeadlessTask	R	AppRegistry.registerHeadlessTask										
AppRegistry registerRunnable	R	AppRegistry.registerRunnable										
AppRegistry runApplication	R	AppRegistry.runApplication										
AppRegistry startHeadlessTask	R	AppRegistry.startHeadlessTask										
AppRegistry unmountApplicationComponentAtRootTag	R	AppRegistry.unmountApplicationComponentAtRootTag										
AppRegistry.getAppKeys	A										<section class="prog__container"><pre><code>getAppKeys(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appregistry.html#getappkeys
AppRegistry.registerComponent	A										<section class="prog__container"><pre><code>registerComponent(appKey, getComponentFunc)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appregistry.html#registercomponent
AppRegistry.registerConfig	A										<section class="prog__container"><pre><code>registerConfig(config)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appregistry.html#registerconfig
AppRegistry.registerHeadlessTask	A										<section class="prog__container"><p>Register a headless task. A headless task is a bit of code that runs without a UI. @param taskKey the key associated with this task @param task  a promise returning function that takes some data passed from the native side as         the only argument; when the promise is resolved or rejected the native side is         notified of this event and it may decide to destroy the JS context.</p><pre><code>registerHeadlessTask(taskKey, task)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appregistry.html#registerheadlesstask
AppRegistry.registerRunnable	A										<section class="prog__container"><pre><code>registerRunnable(appKey, func)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appregistry.html#registerrunnable
AppRegistry.runApplication	A										<section class="prog__container"><pre><code>runApplication(appKey, appParameters)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appregistry.html#runapplication
AppRegistry.startHeadlessTask	A										<section class="prog__container"><p>Only called from native code. Starts a headless task.</p><pre><code>startHeadlessTask(taskId, taskKey, data)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appregistry.html#startheadlesstask
AppRegistry.unmountApplicationComponentAtRootTag	A										<section class="prog__container"><pre><code>unmountApplicationComponentAtRootTag(rootTag)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appregistry.html#unmountapplicationcomponentatroottag
AppState	A					[[AppState.removeEventListener]]\\n[[AppState.constructor]]\\n[[AppState.addEventListener]]					<section class="prog__container"><p>AppState can tell you if the app is in the foreground or background, and notify you when the state changes.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/appstate.html#
AppState addEventListener	R	AppState.addEventListener										
AppState constructor	R	AppState.constructor										
AppState removeEventListener	R	AppState.removeEventListener										
AppState.addEventListener	A										<section class="prog__container"><p>Add a handler to AppState changes by listening to the change event type and providing the handler</p><pre><code>addEventListener(type, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appstate.html#addeventlistener
AppState.constructor	A										<section class="prog__container"><pre><code>constructor(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appstate.html#constructor
AppState.removeEventListener	A										<section class="prog__container"><p>Remove a handler by passing the change event type and the handler</p><pre><code>removeEventListener(type, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/appstate.html#removeeventlistener
AsyncStorage	A					[[AsyncStorage.setItem]]\\n[[AsyncStorage.multiRemove]]\\n[[AsyncStorage.multiMerge]]\\n[[AsyncStorage.getItem]]\\n[[AsyncStorage.mergeItem]]\\n[[AsyncStorage.removeItem]]\\n[[AsyncStorage.flushGetRequests]]\\n[[AsyncStorage.multiSet]]\\n[[AsyncStorage.clear]]\\n[[AsyncStorage.getAllKeys]]\\n[[AsyncStorage.multiGet]]					<section class="prog__container"><p>AsyncStorage is a simple, unencrypted, asynchronous, persistent, key-value storage system that is global to the app. It should be used instead of LocalStorage.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#
AsyncStorage clear	R	AsyncStorage.clear										
AsyncStorage flushGetRequests	R	AsyncStorage.flushGetRequests										
AsyncStorage getAllKeys	R	AsyncStorage.getAllKeys										
AsyncStorage getItem	R	AsyncStorage.getItem										
AsyncStorage mergeItem	R	AsyncStorage.mergeItem										
AsyncStorage multiGet	R	AsyncStorage.multiGet										
AsyncStorage multiMerge	R	AsyncStorage.multiMerge										
AsyncStorage multiRemove	R	AsyncStorage.multiRemove										
AsyncStorage multiSet	R	AsyncStorage.multiSet										
AsyncStorage removeItem	R	AsyncStorage.removeItem										
AsyncStorage setItem	R	AsyncStorage.setItem										
AsyncStorage.clear	A										<section class="prog__container"><p>Erases all AsyncStorage for all clients, libraries, etc. You probably don't want to call this; use removeItem or multiRemove to clear only your app's keys. Returns a Promise object.</p><pre><code>clear(callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#clear
AsyncStorage.flushGetRequests	A										<section class="prog__container"><p>Flushes any pending requests using a single batch call to get the data.</p><pre><code>flushGetRequests()</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#flushgetrequests
AsyncStorage.getAllKeys	A										<section class="prog__container"><p>Gets all keys known to your app; for all callers, libraries, etc. Returns a Promise object.</p><pre><code>getAllKeys(callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#getallkeys
AsyncStorage.getItem	A										<section class="prog__container"><p>Fetches an item for a key and invokes a callback upon completion. Returns a Promise object.</p><pre><code>getItem(key, callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#getitem
AsyncStorage.mergeItem	A										<section class="prog__container"><p>Merges an existing key value with an input value, assuming both values are stringified JSON. Returns a Promise object.</p><pre><code>mergeItem(key, value, callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#mergeitem
AsyncStorage.multiGet	A										<section class="prog__container"><p>This allows you to batch the fetching of items given an array of key inputs. Your callback will be invoked with an array of corresponding key-value pairs found:</p><pre><code>multiGet(keys, callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#multiget
AsyncStorage.multiMerge	A										<section class="prog__container"><p>Batch operation to merge in existing and new values for a given set of keys. This assumes that the values are stringified JSON. Returns a Promise object.</p><pre><code>multiMerge(keyValuePairs, callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#multimerge
AsyncStorage.multiRemove	A										<section class="prog__container"><p>Call this to batch the deletion of all keys in the keys array. Returns a Promise object.</p><pre><code>multiRemove(keys, callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#multiremove
AsyncStorage.multiSet	A										<section class="prog__container"><p>Use this as a batch operation for storing multiple key-value pairs. When the operation completes you'll get a single callback with any errors:</p><pre><code>multiSet(keyValuePairs, callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#multiset
AsyncStorage.removeItem	A										<section class="prog__container"><p>Removes an item for a key and invokes a callback upon completion. Returns a Promise object.</p><pre><code>removeItem(key, callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#removeitem
AsyncStorage.setItem	A										<section class="prog__container"><p>Sets the value for a key and invokes a callback upon completion. Returns a Promise object.</p><pre><code>setItem(key, value, callback?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/asyncstorage.html#setitem
BackAndroid	A					[[BackAndroid.removeEventListener]]\\n[[BackAndroid.addEventListener]]\\n[[BackAndroid.exitApp]]					<section class="prog__container"><p>Detect hardware back button presses, and programmatically invoke the default back button functionality to exit the app if there are no listeners or if none of the listeners return true. The event subscriptions are called in reverse order (i.e. last registered subscription first), and if one subscription returns true then subscriptions registered earlier will not be called.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/backandroid.html#
BackAndroid addEventListener	R	BackAndroid.addEventListener										
BackAndroid exitApp	R	BackAndroid.exitApp										
BackAndroid removeEventListener	R	BackAndroid.removeEventListener										
BackAndroid.addEventListener	A										<section class="prog__container"><pre><code>addEventListener(eventName, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/backandroid.html#addeventlistener
BackAndroid.exitApp	A										<section class="prog__container"><pre><code>exitApp(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/backandroid.html#exitapp
BackAndroid.removeEventListener	A										<section class="prog__container"><pre><code>removeEventListener(eventName, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/backandroid.html#removeeventlistener
Building React Native from source	A										<section class="prog__container"><p>You will need to build React Native from source if you want to work on a new feature/bug fix, try out the latest features which are not released yet, or maintain your own fork with patches that cannot be merged to the core.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/android-building-from-source.html#
Button	A					[[Button.onPress]]\\n[[Button.color]]\\n[[Button.accessibilityLabel]]\\n[[Button.title]]\\n[[Button.disabled]]					<section class="prog__container"><p>A basic button component that should render nicely on any platform. Supports a minimal level of customization.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/button.html#
Button accessibilityLabel	R	Button.accessibilityLabel										
Button color	R	Button.color										
Button disabled	R	Button.disabled										
Button onPress	R	Button.onPress										
Button title	R	Button.title										
Button.accessibilityLabel	A										<section class="prog__container"><p>Text to display for blindness accessibility features</p><pre><code>accessibilityLabel string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/button.html#accessibilitylabel
Button.color	A										<section class="prog__container"><p>Color of the text (iOS), or background color of the button (Android)</p><pre><code>color color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/button.html#color
Button.disabled	A										<section class="prog__container"><p>If true, disable all interactions for this component.</p><pre><code>disabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/button.html#disabled
Button.onPress	A										<section class="prog__container"><p>Handler to be called when the user taps the button</p><pre><code>onPress function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/button.html#onpress
Button.title	A										<section class="prog__container"><p>Text to display inside the button</p><pre><code>title string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/button.html#title
CameraRoll	A					[[CameraRoll.saveImageWithTag]]\\n[[CameraRoll.getPhotos]]\\n[[CameraRoll.saveToCameraRoll]]					<section class="prog__container"><p>CameraRoll provides access to the local camera roll / gallery. Before using this you must link the RCTCameraRoll library. You can refer to Linking for help.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/cameraroll.html#
CameraRoll getPhotos	R	CameraRoll.getPhotos										
CameraRoll saveImageWithTag	R	CameraRoll.saveImageWithTag										
CameraRoll saveToCameraRoll	R	CameraRoll.saveToCameraRoll										
CameraRoll.getPhotos	A										<section class="prog__container"><p>Returns a Promise with photo identifier objects from the local camera roll of the device matching shape defined by getPhotosReturnChecker.</p><pre><code>getPhotos(params)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/cameraroll.html#getphotos
CameraRoll.saveImageWithTag	A										<section class="prog__container"><pre><code>saveImageWithTag(tag)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/cameraroll.html#saveimagewithtag
CameraRoll.saveToCameraRoll	A										<section class="prog__container"><p>Saves the photo or video to the camera roll / gallery.</p><pre><code>saveToCameraRoll(tag, type?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/cameraroll.html#savetocameraroll
Clipboard	A					[[Clipboard.setString]]\\n[[Clipboard.getString]]					<section class="prog__container"><p>Clipboard gives you an interface for setting and getting content from Clipboard on both iOS and Android</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/clipboard.html#
Clipboard getString	R	Clipboard.getString										
Clipboard setString	R	Clipboard.setString										
Clipboard.getString	A										<section class="prog__container"><p>Get content of string type, this method returns a Promise, so you can use following code to get clipboard content</p><pre><code>getString(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/clipboard.html#getstring
Clipboard.setString	A										<section class="prog__container"><p>Set content of string type. You can use following code to set clipboard content</p><pre><code>setString(content)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/clipboard.html#setstring
Colors	A										<section class="prog__container"><p>The following formats are supported:</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/colors.html#
Communication between native and React Native	A										<section class="prog__container"><p>In Integrating with Existing Apps guide and Native UI Components guide we learn how to embed React Native in a native component and vice versa. When we mix native and React Native components, we'll eventually find a need to communicate between these two worlds. Some ways to achieve that have been already mentioned in other guides. This article summarizes available techniques.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/communication-ios.html#
DatePickerAndroid	A					[[DatePickerAndroid.dismissedAction]]\\n[[DatePickerAndroid.dateSetAction]]\\n[[DatePickerAndroid.open]]					<section class="prog__container"><p>Opens the standard Android date picker dialog.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerandroid.html#
DatePickerAndroid dateSetAction	R	DatePickerAndroid.dateSetAction										
DatePickerAndroid dismissedAction	R	DatePickerAndroid.dismissedAction										
DatePickerAndroid open	R	DatePickerAndroid.open										
DatePickerAndroid.dateSetAction	A										<section class="prog__container"><p>A date has been selected.</p><pre><code>dateSetAction(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerandroid.html#datesetaction
DatePickerAndroid.dismissedAction	A										<section class="prog__container"><p>The dialog has been dismissed.</p><pre><code>dismissedAction(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerandroid.html#dismissedaction
DatePickerAndroid.open	A										<section class="prog__container"><p>Opens the standard Android date picker dialog.</p><pre><code>open(options)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerandroid.html#open
DatePickerIOS	A					[[DatePickerIOS.mode]]\\n[[DatePickerIOS.maximumDate]]\\n[[DatePickerIOS.minuteInterval]]\\n[[DatePickerIOS.timeZoneOffsetInMinutes]]\\n[[DatePickerIOS.date]]\\n[[DatePickerIOS.onDateChange]]\\n[[DatePickerIOS.minimumDate]]					<section class="prog__container"><p>Use DatePickerIOS to render a date/time picker (selector) on iOS. This is a controlled component, so you must hook in to the onDateChange callback and update the date prop in order for the component to update, otherwise the user's change will be reverted immediately to reflect props.date as the source of truth.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerios.html#
DatePickerIOS date	R	DatePickerIOS.date										
DatePickerIOS maximumDate	R	DatePickerIOS.maximumDate										
DatePickerIOS minimumDate	R	DatePickerIOS.minimumDate										
DatePickerIOS minuteInterval	R	DatePickerIOS.minuteInterval										
DatePickerIOS mode	R	DatePickerIOS.mode										
DatePickerIOS onDateChange	R	DatePickerIOS.onDateChange										
DatePickerIOS timeZoneOffsetInMinutes	R	DatePickerIOS.timeZoneOffsetInMinutes										
DatePickerIOS.date	A										<section class="prog__container"><p>The currently selected date.</p><pre><code>date Date</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerios.html#date
DatePickerIOS.maximumDate	A										<section class="prog__container"><p>Maximum date.</p><pre><code>maximumDate Date</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerios.html#maximumdate
DatePickerIOS.minimumDate	A										<section class="prog__container"><p>Minimum date.</p><pre><code>minimumDate Date</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerios.html#minimumdate
DatePickerIOS.minuteInterval	A										<section class="prog__container"><p>The interval at which minutes can be selected.</p><pre><code>minuteInterval enum(1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerios.html#minuteinterval
DatePickerIOS.mode	A										<section class="prog__container"><p>The date picker mode.</p><pre><code>mode enum('date', 'time', 'datetime')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerios.html#mode
DatePickerIOS.onDateChange	A										<section class="prog__container"><p>Date change handler.</p><pre><code>onDateChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerios.html#ondatechange
DatePickerIOS.timeZoneOffsetInMinutes	A										<section class="prog__container"><p>Timezone offset in minutes.</p><pre><code>timeZoneOffsetInMinutes number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/datepickerios.html#timezoneoffsetinminutes
Dimensions	A					[[Dimensions.get]]\\n[[Dimensions.set]]					<section class="prog__container"><p>This should only be called from native code by sending the didUpdateDimensions event.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/dimensions.html#
Dimensions get	R	Dimensions.get										
Dimensions set	R	Dimensions.set										
Dimensions.get	A										<section class="prog__container"><p>Initial dimensions are set before runApplication is called so they should be available before any other require's are run, but may be updated later.</p><pre><code>get(dim)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/dimensions.html#get
Dimensions.set	A										<section class="prog__container"><p>This should only be called from native code by sending the didUpdateDimensions event.</p><pre><code>set(dims)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/dimensions.html#set
Direct Manipulation	A										<section class="prog__container"><p>It is sometimes necessary to make changes directly to a component without using state/props to trigger a re-render of the entire subtree. When using React in the browser for example, you sometimes need to directly modify a DOM node, and the same is true for views in mobile apps. setNativeProps is the React Native equivalent to setting properties directly on a DOM node.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/direct-manipulation.html#
DrawerLayoutAndroid	A					[[DrawerLayoutAndroid.onDrawerClose]]\\n[[DrawerLayoutAndroid.statusBarBackgroundColor]]\\n[[DrawerLayoutAndroid.onDrawerOpen]]\\n[[DrawerLayoutAndroid.onDrawerStateChanged]]\\n[[DrawerLayoutAndroid.onDrawerSlide]]\\n[[DrawerLayoutAndroid.keyboardDismissMode]]\\n[[DrawerLayoutAndroid.closeDrawer]]\\n[[DrawerLayoutAndroid.openDrawer]]\\n[[DrawerLayoutAndroid.drawerLockMode]]\\n[[DrawerLayoutAndroid.renderNavigationView]]\\n[[DrawerLayoutAndroid.drawerWidth]]\\n[[DrawerLayoutAndroid.drawerBackgroundColor]]\\n[[DrawerLayoutAndroid.drawerPosition]]					<section class="prog__container"><p>React component that wraps the platform DrawerLayout (Android only). The Drawer (typically used for navigation) is rendered with renderNavigationView and direct children are the main view (where your content goes). The navigation view is initially not visible on the screen, but can be pulled in from the side of the window specified by the drawerPosition prop and its width can be set by the drawerWidth prop.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#
DrawerLayoutAndroid closeDrawer	R	DrawerLayoutAndroid.closeDrawer										
DrawerLayoutAndroid drawerBackgroundColor	R	DrawerLayoutAndroid.drawerBackgroundColor										
DrawerLayoutAndroid drawerLockMode	R	DrawerLayoutAndroid.drawerLockMode										
DrawerLayoutAndroid drawerPosition	R	DrawerLayoutAndroid.drawerPosition										
DrawerLayoutAndroid drawerWidth	R	DrawerLayoutAndroid.drawerWidth										
DrawerLayoutAndroid keyboardDismissMode	R	DrawerLayoutAndroid.keyboardDismissMode										
DrawerLayoutAndroid onDrawerClose	R	DrawerLayoutAndroid.onDrawerClose										
DrawerLayoutAndroid onDrawerOpen	R	DrawerLayoutAndroid.onDrawerOpen										
DrawerLayoutAndroid onDrawerSlide	R	DrawerLayoutAndroid.onDrawerSlide										
DrawerLayoutAndroid onDrawerStateChanged	R	DrawerLayoutAndroid.onDrawerStateChanged										
DrawerLayoutAndroid openDrawer	R	DrawerLayoutAndroid.openDrawer										
DrawerLayoutAndroid renderNavigationView	R	DrawerLayoutAndroid.renderNavigationView										
DrawerLayoutAndroid statusBarBackgroundColor	R	DrawerLayoutAndroid.statusBarBackgroundColor										
DrawerLayoutAndroid.closeDrawer	A										<section class="prog__container"><p>Closes the drawer.</p><pre><code>closeDrawer(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#closedrawer
DrawerLayoutAndroid.drawerBackgroundColor	A										<section class="prog__container"><p>Specifies the background color of the drawer. The default value is white. If you want to set the opacity of the drawer, use rgba. Example:</p><pre><code>drawerBackgroundColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#drawerbackgroundcolor
DrawerLayoutAndroid.drawerLockMode	A										<section class="prog__container"><p>Specifies the lock mode of the drawer. The drawer can be locked in 3 states: - unlocked (default), meaning that the drawer will respond (open/close) to touch gestures. - locked-closed, meaning that the drawer will stay closed and not respond to gestures. - locked-open, meaning that the drawer will stay opened and not respond to gestures. The drawer may still be opened and closed programmatically (openDrawer/closeDrawer).</p><pre><code>drawerLockMode enum('unlocked', 'locked-closed', 'locked-open')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#drawerlockmode
DrawerLayoutAndroid.drawerPosition	A										<section class="prog__container"><p>Specifies the side of the screen from which the drawer will slide in.</p><pre><code>drawerPosition enum(DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#drawerposition
DrawerLayoutAndroid.drawerWidth	A										<section class="prog__container"><p>Specifies the width of the drawer, more precisely the width of the view that be pulled in from the edge of the window.</p><pre><code>drawerWidth number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#drawerwidth
DrawerLayoutAndroid.keyboardDismissMode	A										<section class="prog__container"><p>Determines whether the keyboard gets dismissed in response to a drag.  - 'none' (the default), drags do not dismiss the keyboard.  - 'on-drag', the keyboard is dismissed when a drag begins.</p><pre><code>keyboardDismissMode enum('none', 'on-drag')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#keyboarddismissmode
DrawerLayoutAndroid.onDrawerClose	A										<section class="prog__container"><p>Function called whenever the navigation view has been closed.</p><pre><code>onDrawerClose function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#ondrawerclose
DrawerLayoutAndroid.onDrawerOpen	A										<section class="prog__container"><p>Function called whenever the navigation view has been opened.</p><pre><code>onDrawerOpen function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#ondraweropen
DrawerLayoutAndroid.onDrawerSlide	A										<section class="prog__container"><p>Function called whenever there is an interaction with the navigation view.</p><pre><code>onDrawerSlide function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#ondrawerslide
DrawerLayoutAndroid.onDrawerStateChanged	A										<section class="prog__container"><p>Function called when the drawer state has changed. The drawer can be in 3 states: - idle, meaning there is no interaction with the navigation view happening at the time - dragging, meaning there is currently an interaction with the navigation view - settling, meaning that there was an interaction with the navigation view, and the navigation view is now finishing its closing or opening animation</p><pre><code>onDrawerStateChanged function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#ondrawerstatechanged
DrawerLayoutAndroid.openDrawer	A										<section class="prog__container"><p>Opens the drawer.</p><pre><code>openDrawer(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#opendrawer
DrawerLayoutAndroid.renderNavigationView	A										<section class="prog__container"><p>The navigation view that will be rendered to the side of the screen and can be pulled in.</p><pre><code>renderNavigationView function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#rendernavigationview
DrawerLayoutAndroid.statusBarBackgroundColor	A										<section class="prog__container"><p>Make the drawer take the entire screen and draw the background of the status bar to allow it to open over the status bar. It will only have an effect on API 21+.</p><pre><code>statusBarBackgroundColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/drawerlayoutandroid.html#statusbarbackgroundcolor
Easing	A					[[Easing.step0]]\\n[[Easing.sin]]\\n[[Easing.ease]]\\n[[Easing.inOut]]\\n[[Easing.linear]]\\n[[Easing.poly]]\\n[[Easing.quad]]\\n[[Easing.bezier]]\\n[[Easing.out]]\\n[[Easing.circle]]\\n[[Easing.step1]]\\n[[Easing.bounce]]\\n[[Easing.elastic]]\\n[[Easing.exp]]\\n[[Easing.cubic]]\\n[[Easing.back]]\\n[[Easing.in]]					<section class="prog__container"><p>This class implements common easing functions. The math is pretty obscure, but this cool website has nice visual illustrations of what they represent: http://xaedes.de/dev/transitions/</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#
Easing back	R	Easing.back										
Easing bezier	R	Easing.bezier										
Easing bounce	R	Easing.bounce										
Easing circle	R	Easing.circle										
Easing cubic	R	Easing.cubic										
Easing ease	R	Easing.ease										
Easing elastic	R	Easing.elastic										
Easing exp	R	Easing.exp										
Easing in	R	Easing.in										
Easing inOut	R	Easing.inOut										
Easing linear	R	Easing.linear										
Easing out	R	Easing.out										
Easing poly	R	Easing.poly										
Easing quad	R	Easing.quad										
Easing sin	R	Easing.sin										
Easing step0	R	Easing.step0										
Easing step1	R	Easing.step1										
Easing.back	A										<section class="prog__container"><pre><code>back(s)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#back
Easing.bezier	A										<section class="prog__container"><pre><code>bezier(x1, y1, x2, y2)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#bezier
Easing.bounce	A										<section class="prog__container"><pre><code>bounce(t)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#bounce
Easing.circle	A										<section class="prog__container"><pre><code>circle(t)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#circle
Easing.cubic	A										<section class="prog__container"><pre><code>cubic(t)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#cubic
Easing.ease	A										<section class="prog__container"><pre><code>ease(t)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#ease
Easing.elastic	A										<section class="prog__container"><p>A simple elastic interaction, similar to a spring. Default bounciness is 1, which overshoots a little bit once. 0 bounciness doesn't overshoot at all, and bounciness of N > 1 will overshoot about N times.</p><pre><code>elastic(bounciness)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#elastic
Easing.exp	A										<section class="prog__container"><pre><code>exp(t)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#exp
Easing.in	A										<section class="prog__container"><pre><code>in(easing)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#in
Easing.inOut	A										<section class="prog__container"><p>Makes any easing function symmetrical.</p><pre><code>inOut(easing)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#inout
Easing.linear	A										<section class="prog__container"><pre><code>linear(t)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#linear
Easing.out	A										<section class="prog__container"><p>Runs an easing function backwards.</p><pre><code>out(easing)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#out
Easing.poly	A										<section class="prog__container"><pre><code>poly(n)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#poly
Easing.quad	A										<section class="prog__container"><pre><code>quad(t)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#quad
Easing.sin	A										<section class="prog__container"><pre><code>sin(t)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#sin
Easing.step0	A										<section class="prog__container"><pre><code>step0(n)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#step0
Easing.step1	A										<section class="prog__container"><pre><code>step1(n)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/easing.html#step1
Generating Signed APK	A										<section class="prog__container"><p>Android requires that all apps be digitally signed with a certificate before they can be installed, so to distribute your Android application via Google Play store, you'll need to generate a signed release APK. The Signing Your Applications page on Android Developers documentation describes the topic in detail. This guide covers the process in brief, as well as lists the steps required to packaging the JavaScript bundle.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/signed-apk-android.html#
Geolocation	A					[[Geolocation.stopObserving]]\\n[[Geolocation.watchPosition]]\\n[[Geolocation.getCurrentPosition]]\\n[[Geolocation.clearWatch]]					<section class="prog__container"><p>The Geolocation API extends the web spec: https://developer.mozilla.org/en-US/docs/Web/API/Geolocation</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/geolocation.html#
Geolocation clearWatch	R	Geolocation.clearWatch										
Geolocation getCurrentPosition	R	Geolocation.getCurrentPosition										
Geolocation stopObserving	R	Geolocation.stopObserving										
Geolocation watchPosition	R	Geolocation.watchPosition										
Geolocation.clearWatch	A										<section class="prog__container"><pre><code>clearWatch(watchID)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/geolocation.html#clearwatch
Geolocation.getCurrentPosition	A										<section class="prog__container"><p>Invokes the success callback once with the latest location info. Supported options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool) On Android, this can return almost immediately if the location is cached or request an update, which might take a while.</p><pre><code>getCurrentPosition(geo_success, geo_error?, geo_options?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/geolocation.html#getcurrentposition
Geolocation.stopObserving	A										<section class="prog__container"><pre><code>stopObserving(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/geolocation.html#stopobserving
Geolocation.watchPosition	A										<section class="prog__container"><p>Invokes the success callback whenever the location changes. Supported options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool), distanceFilter(m)</p><pre><code>watchPosition(success, error?, options?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/geolocation.html#watchposition
Gesture Responder System	A										<section class="prog__container"><p>The gesture responder system manages the lifecycle of gestures in your app. A touch can go through several phases as the app determines what the user's intention is. For example, the app needs to determine if the touch is scrolling, sliding on a widget, or tapping. This can even change during the duration of a touch. There can also be multiple simultaneous touches.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/gesture-responder-system.html#
Getting Started	A										<section class="prog__container"><p>Welcome to React Native! This page will help you install React Native on your system, so that you can build apps with it right away. If you already have React Native installed, you can skip ahead to the Tutorial.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/getting-started.html#
Handling Text Input	A										<section class="prog__container"><p>TextInput is a basic component that allows the user to enter text. It has an onChangeText prop that takes a function to be called every time the text changed, and an onSubmitEditing prop that takes a function to be called when the text is submitted.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/handling-text-input.html#
Handling Touches	A										<section class="prog__container"><p>Users interact with mobile apps mainly through touch. They can use a combination of gestures, such as tapping on a button, scrolling a list, or zooming on a map.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/handling-touches.html#
Headless JS	A										<section class="prog__container"><p>Headless JS is a way to run tasks in JavaScript while your app is in the background. It can be used, for example, to sync fresh data, handle push notifications, or play music.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/headless-js-android.html#
Height and Width	A										<section class="prog__container"><p>A component's height and width determine its size on the screen.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/height-and-width.html#
Image	A					[[Image.onProgress]]\\n[[Image.getSize]]\\n[[Image.prefetch]]\\n[[Image.testID]]\\n[[Image.accessible]]\\n[[Image.accessibilityLabel]]\\n[[Image.source]]\\n[[Image.resizeMethod]]\\n[[Image.style]]\\n[[Image.onLayout]]\\n[[Image.blurRadius]]\\n[[Image.resizeMode]]\\n[[Image.onLoadStart]]\\n[[Image.capInsets]]\\n[[Image.defaultSource]]\\n[[Image.onLoadEnd]]\\n[[Image.onError]]\\n[[Image.onLoad]]\\n[[Image.onPartialLoad]]					<section class="prog__container"><p>A React component for displaying different types of images, including network images, static resources, temporary local images, and images from local disk, such as the camera roll.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#
Image accessibilityLabel	R	Image.accessibilityLabel										
Image accessible	R	Image.accessible										
Image blurRadius	R	Image.blurRadius										
Image capInsets	R	Image.capInsets										
Image defaultSource	R	Image.defaultSource										
Image getSize	R	Image.getSize										
Image onError	R	Image.onError										
Image onLayout	R	Image.onLayout										
Image onLoad	R	Image.onLoad										
Image onLoadEnd	R	Image.onLoadEnd										
Image onLoadStart	R	Image.onLoadStart										
Image onPartialLoad	R	Image.onPartialLoad										
Image onProgress	R	Image.onProgress										
Image prefetch	R	Image.prefetch										
Image resizeMethod	R	Image.resizeMethod										
Image resizeMode	R	Image.resizeMode										
Image source	R	Image.source										
Image style	R	Image.style										
Image testID	R	Image.testID										
Image.accessibilityLabel	A										<section class="prog__container"><p>The text that's read by the screen reader when the user interacts with the image.</p><pre><code>accessibilityLabel string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#accessibilitylabel
Image.accessible	A										<section class="prog__container"><p>When true, indicates the image is an accessibility element.</p><pre><code>accessible bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#accessible
Image.blurRadius	A										<section class="prog__container"><p>blurRadius: the blur radius of the blur filter added to the image</p><pre><code>blurRadius number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#blurradius
Image.capInsets	A										<section class="prog__container"><p>When the image is resized, the corners of the size specified by capInsets will stay a fixed size, but the center content and borders of the image will be stretched. This is useful for creating resizable rounded buttons, shadows, and other resizable assets. More info in the official Apple documentation.</p><pre><code>capInsets {top: number, left: number, bottom: number, right: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#capinsets
Image.defaultSource	A										<section class="prog__container"><p>A static image to display while loading the image source.</p><pre><code>defaultSource {uri: string, width: number, height: number, scale: number}, number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#defaultsource
Image.getSize	A										<section class="prog__container"><p>Retrieve the width and height (in pixels) of an image prior to displaying it. This method can fail if the image cannot be found, or fails to download.</p><pre><code>getSize(uri, success, failure): </code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#getsize
Image.onError	A										<section class="prog__container"><p>Invoked on load error with {nativeEvent: {error}}.</p><pre><code>onError function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#onerror
Image.onLayout	A										<section class="prog__container"><p>Invoked on mount and layout changes with {nativeEvent: {layout: {x, y, width, height}}}.</p><pre><code>onLayout function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#onlayout
Image.onLoad	A										<section class="prog__container"><p>Invoked when load completes successfully.</p><pre><code>onLoad function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#onload
Image.onLoadEnd	A										<section class="prog__container"><p>Invoked when load either succeeds or fails.</p><pre><code>onLoadEnd function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#onloadend
Image.onLoadStart	A										<section class="prog__container"><p>Invoked on load start.</p><pre><code>onLoadStart function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#onloadstart
Image.onPartialLoad	A										<section class="prog__container"><p>Invoked when a partial load of the image is complete. The definition of what constitutes a "partial load" is loader specific though this is meant for progressive JPEG loads.</p><pre><code>onPartialLoad function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#onpartialload
Image.onProgress	A										<section class="prog__container"><p>Invoked on download progress with {nativeEvent: {loaded, total}}.</p><pre><code>onProgress function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#onprogress
Image.prefetch	A										<section class="prog__container"><p>Prefetches a remote image for later use by downloading it to the disk cache</p><pre><code>prefetch(url): </code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#prefetch
Image.resizeMethod	A										<section class="prog__container"><p>The mechanism that should be used to resize the image when the image's dimensions differ from the image view's dimensions. Defaults to auto.</p><pre><code>resizeMethod enum('auto', 'resize', 'scale')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#resizemethod
Image.resizeMode	A										<section class="prog__container"><p>Determines how to resize the image when the frame doesn't match the raw image dimensions.</p><pre><code>resizeMode enum('cover', 'contain', 'stretch', 'repeat', 'center')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#resizemode
Image.source	A										<section class="prog__container"><p>The image source (either a remote URL or a local file resource).</p><pre><code>source ImageSourcePropType</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#source
Image.style	A										<section class="prog__container"><p>Changes the color of all the non-transparent pixels to the tintColor.</p><pre><code>style style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#style
Image.testID	A										<section class="prog__container"><p>A unique identifier for this element to be used in UI Automation testing scripts.</p><pre><code>testID string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/image.html#testid
ImageEditor	A					[[ImageEditor.cropImage]]					<section class="prog__container"><p>Crop the image specified by the URI param. If URI points to a remote image, it will be downloaded automatically. If the image cannot be loaded/downloaded, the failure callback will be called.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/imageeditor.html#
ImageEditor cropImage	R	ImageEditor.cropImage										
ImageEditor.cropImage	A										<section class="prog__container"><p>Crop the image specified by the URI param. If URI points to a remote image, it will be downloaded automatically. If the image cannot be loaded/downloaded, the failure callback will be called.</p><pre><code>cropImage(uri, cropData, success, failure)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/imageeditor.html#cropimage
ImagePickerIOS	A					[[ImagePickerIOS.openCameraDialog]]\\n[[ImagePickerIOS.openSelectDialog]]\\n[[ImagePickerIOS.canRecordVideos]]\\n[[ImagePickerIOS.canUseCamera]]					<section class="prog__container"><p>You can edit the content above on GitHub and send us a pull request!</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagepickerios.html#
ImagePickerIOS canRecordVideos	R	ImagePickerIOS.canRecordVideos										
ImagePickerIOS canUseCamera	R	ImagePickerIOS.canUseCamera										
ImagePickerIOS openCameraDialog	R	ImagePickerIOS.openCameraDialog										
ImagePickerIOS openSelectDialog	R	ImagePickerIOS.openSelectDialog										
ImagePickerIOS.canRecordVideos	A										<section class="prog__container"><pre><code>canRecordVideos(callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagepickerios.html#canrecordvideos
ImagePickerIOS.canUseCamera	A										<section class="prog__container"><pre><code>canUseCamera(callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagepickerios.html#canusecamera
ImagePickerIOS.openCameraDialog	A										<section class="prog__container"><pre><code>openCameraDialog(config, successCallback, cancelCallback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagepickerios.html#opencameradialog
ImagePickerIOS.openSelectDialog	A										<section class="prog__container"><pre><code>openSelectDialog(config, successCallback, cancelCallback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagepickerios.html#openselectdialog
ImageStore	A					[[ImageStore.addImageFromBase64]]\\n[[ImageStore.getBase64ForTag]]\\n[[ImageStore.hasImageForTag]]\\n[[ImageStore.removeImageForTag]]					<section class="prog__container"><p>Check if the ImageStore contains image data for the specified URI. @platform ios</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagestore.html#
ImageStore addImageFromBase64	R	ImageStore.addImageFromBase64										
ImageStore getBase64ForTag	R	ImageStore.getBase64ForTag										
ImageStore hasImageForTag	R	ImageStore.hasImageForTag										
ImageStore removeImageForTag	R	ImageStore.removeImageForTag										
ImageStore.addImageFromBase64	A										<section class="prog__container"><p>Stores a base64-encoded image in the ImageStore, and returns a URI that can be used to access or display the image later. Images are stored in memory only, and must be manually deleted when you are finished with them by calling removeImageForTag().</p><pre><code>addImageFromBase64(base64ImageData, success, failure)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagestore.html#addimagefrombase64
ImageStore.getBase64ForTag	A										<section class="prog__container"><p>Retrieves the base64-encoded data for an image in the ImageStore. If the specified URI does not match an image in the store, the failure callback will be called.</p><pre><code>getBase64ForTag(uri, success, failure)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagestore.html#getbase64fortag
ImageStore.hasImageForTag	A										<section class="prog__container"><p>Check if the ImageStore contains image data for the specified URI. @platform ios</p><pre><code>hasImageForTag(uri, callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagestore.html#hasimagefortag
ImageStore.removeImageForTag	A										<section class="prog__container"><p>Delete an image from the ImageStore. Images are stored in memory and must be manually removed when you are finished with them, otherwise they will continue to use up RAM until the app is terminated. It is safe to call removeImageForTag() without first calling hasImageForTag(), it will simply fail silently. @platform ios</p><pre><code>removeImageForTag(uri)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/imagestore.html#removeimagefortag
Integration With Existing Apps	A										<section class="prog__container"><p>This section will be updated shortly showing an integration into a more real world application such as the 2048 app that was used for Objective-C and Swift.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/integration-with-existing-apps.html#
InteractionManager	A					[[InteractionManager.clearInteractionHandle]]\\n[[InteractionManager.runAfterInteractions]]\\n[[InteractionManager.createInteractionHandle]]\\n[[InteractionManager.setDeadline]]					<section class="prog__container"><p>InteractionManager allows long-running work to be scheduled after any interactions/animations have completed. In particular, this allows JavaScript animations to run smoothly.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/interactionmanager.html#
InteractionManager clearInteractionHandle	R	InteractionManager.clearInteractionHandle										
InteractionManager createInteractionHandle	R	InteractionManager.createInteractionHandle										
InteractionManager runAfterInteractions	R	InteractionManager.runAfterInteractions										
InteractionManager setDeadline	R	InteractionManager.setDeadline										
InteractionManager.clearInteractionHandle	A										<section class="prog__container"><p>Notify manager that an interaction has completed.</p><pre><code>clearInteractionHandle(handle)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/interactionmanager.html#clearinteractionhandle
InteractionManager.createInteractionHandle	A										<section class="prog__container"><p>Notify manager that an interaction has started.</p><pre><code>createInteractionHandle(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/interactionmanager.html#createinteractionhandle
InteractionManager.runAfterInteractions	A										<section class="prog__container"><p>Schedule a function to run after all interactions have completed. Returns a cancellable "promise".</p><pre><code>runAfterInteractions(task)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/interactionmanager.html#runafterinteractions
InteractionManager.setDeadline	A										<section class="prog__container"><p>A positive number will use setTimeout to schedule any tasks after the eventLoopRunningTime hits the deadline value, otherwise all tasks will be executed in one setImmediate batch (default).</p><pre><code>setDeadline(deadline)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/interactionmanager.html#setdeadline
Item	R	TabBarIOS.Item										
Item TabBarIOS badge	R	TabBarIOS.Item.badge										
Item TabBarIOS badgeColor	R	TabBarIOS.Item.badgeColor										
Item TabBarIOS icon	R	TabBarIOS.Item.icon										
Item TabBarIOS onPress	R	TabBarIOS.Item.onPress										
Item TabBarIOS renderAsOriginal	R	TabBarIOS.Item.renderAsOriginal										
Item TabBarIOS selected	R	TabBarIOS.Item.selected										
Item TabBarIOS selectedIcon	R	TabBarIOS.Item.selectedIcon										
Item TabBarIOS style	R	TabBarIOS.Item.style										
Item TabBarIOS systemIcon	R	TabBarIOS.Item.systemIcon										
Item TabBarIOS title	R	TabBarIOS.Item.title										
Item badge	R	TabBarIOS.Item.badge										
Item badgeColor	R	TabBarIOS.Item.badgeColor										
Item icon	R	TabBarIOS.Item.icon										
Item onPress	R	TabBarIOS.Item.onPress										
Item renderAsOriginal	R	TabBarIOS.Item.renderAsOriginal										
Item selected	R	TabBarIOS.Item.selected										
Item selectedIcon	R	TabBarIOS.Item.selectedIcon										
Item style	R	TabBarIOS.Item.style										
Item systemIcon	R	TabBarIOS.Item.systemIcon										
Item title	R	TabBarIOS.Item.title										
Keyboard	A					[[Keyboard.removeListener]]\\n[[Keyboard.dismiss]]\\n[[Keyboard.addListener]]\\n[[Keyboard.removeAllListeners]]					<section class="prog__container"><p>Keyboard module to control keyboard events.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboard.html#
Keyboard addListener	R	Keyboard.addListener										
Keyboard dismiss	R	Keyboard.dismiss										
Keyboard removeAllListeners	R	Keyboard.removeAllListeners										
Keyboard removeListener	R	Keyboard.removeListener										
Keyboard.addListener	A										<section class="prog__container"><p>The addListener function connects a JavaScript function to an identified native keyboard notification event.</p><pre><code>addListener(eventName, callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboard.html#addlistener
Keyboard.dismiss	A										<section class="prog__container"><p>Dismisses the active keyboard and removes focus.</p><pre><code>dismiss(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboard.html#dismiss
Keyboard.removeAllListeners	A										<section class="prog__container"><p>Removes all listeners for a specific event type.</p><pre><code>removeAllListeners(eventName)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboard.html#removealllisteners
Keyboard.removeListener	A										<section class="prog__container"><p>Removes a specific listener.</p><pre><code>removeListener(eventName, callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboard.html#removelistener
KeyboardAvoidingView	A					[[KeyboardAvoidingView.onLayout]]\\n[[KeyboardAvoidingView.keyboardVerticalOffset]]\\n[[KeyboardAvoidingView.relativeKeyboardHeight]]\\n[[KeyboardAvoidingView.onKeyboardChange]]\\n[[KeyboardAvoidingView.behavior]]\\n[[KeyboardAvoidingView.contentContainerStyle]]					<section class="prog__container"><p>It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard. It can automatically adjust either its position or bottom padding based on the position of the keyboard.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboardavoidingview.html#
KeyboardAvoidingView behavior	R	KeyboardAvoidingView.behavior										
KeyboardAvoidingView contentContainerStyle	R	KeyboardAvoidingView.contentContainerStyle										
KeyboardAvoidingView keyboardVerticalOffset	R	KeyboardAvoidingView.keyboardVerticalOffset										
KeyboardAvoidingView onKeyboardChange	R	KeyboardAvoidingView.onKeyboardChange										
KeyboardAvoidingView onLayout	R	KeyboardAvoidingView.onLayout										
KeyboardAvoidingView relativeKeyboardHeight	R	KeyboardAvoidingView.relativeKeyboardHeight										
KeyboardAvoidingView.behavior	A										<section class="prog__container"><pre><code>behavior enum('height', 'position', 'padding')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboardavoidingview.html#behavior
KeyboardAvoidingView.contentContainerStyle	A										<section class="prog__container"><p>The style of the content container(View) when behavior is 'position'.</p><pre><code>contentContainerStyle View#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboardavoidingview.html#contentcontainerstyle
KeyboardAvoidingView.keyboardVerticalOffset	A										<section class="prog__container"><p>This is the distance between the top of the user screen and the react native view, may be non-zero in some use cases.</p><pre><code>keyboardVerticalOffset number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboardavoidingview.html#keyboardverticaloffset
KeyboardAvoidingView.onKeyboardChange	A										<section class="prog__container"><pre><code>onKeyboardChange(event)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboardavoidingview.html#onkeyboardchange
KeyboardAvoidingView.onLayout	A										<section class="prog__container"><pre><code>onLayout(event)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboardavoidingview.html#onlayout
KeyboardAvoidingView.relativeKeyboardHeight	A										<section class="prog__container"><pre><code>relativeKeyboardHeight(keyboardFrame): </code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/keyboardavoidingview.html#relativekeyboardheight
Layout Props	A					[[Layout Props.paddingRight]]\\n[[Layout Props.right]]\\n[[Layout Props.flexWrap]]\\n[[Layout Props.flexGrow]]\\n[[Layout Props.bottom]]\\n[[Layout Props.paddingLeft]]\\n[[Layout Props.marginHorizontal]]\\n[[Layout Props.flex]]\\n[[Layout Props.minWidth]]\\n[[Layout Props.alignItems]]\\n[[Layout Props.flexShrink]]\\n[[Layout Props.marginRight]]\\n[[Layout Props.borderBottomWidth]]\\n[[Layout Props.left]]\\n[[Layout Props.borderWidth]]\\n[[Layout Props.margin]]\\n[[Layout Props.paddingVertical]]\\n[[Layout Props.borderRightWidth]]\\n[[Layout Props.paddingBottom]]\\n[[Layout Props.marginBottom]]\\n[[Layout Props.padding]]\\n[[Layout Props.marginVertical]]\\n[[Layout Props.marginTop]]\\n[[Layout Props.minHeight]]\\n[[Layout Props.zIndex]]\\n[[Layout Props.flexDirection]]\\n[[Layout Props.paddingHorizontal]]\\n[[Layout Props.marginLeft]]\\n[[Layout Props.maxWidth]]\\n[[Layout Props.borderTopWidth]]\\n[[Layout Props.maxHeight]]\\n[[Layout Props.alignSelf]]\\n[[Layout Props.aspectRatio]]\\n[[Layout Props.top]]\\n[[Layout Props.overflow]]\\n[[Layout Props.flexBasis]]\\n[[Layout Props.height]]\\n[[Layout Props.position]]\\n[[Layout Props.justifyContent]]\\n[[Layout Props.width]]\\n[[Layout Props.paddingTop]]\\n[[Layout Props.borderLeftWidth]]					<section class="prog__container"><p>alignItems aligns children in the cross direction.  For example, if children are flowing vertically, alignItems  controls how they align horizontally.  It works like align-items in CSS (default: stretch).  See https://developer.mozilla.org/en-US/docs/Web/CSS/align-items  for more details.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#
Layout Props alignItems	R	Layout Props.alignItems										
Layout Props alignSelf	R	Layout Props.alignSelf										
Layout Props aspectRatio	R	Layout Props.aspectRatio										
Layout Props borderBottomWidth	R	Layout Props.borderBottomWidth										
Layout Props borderLeftWidth	R	Layout Props.borderLeftWidth										
Layout Props borderRightWidth	R	Layout Props.borderRightWidth										
Layout Props borderTopWidth	R	Layout Props.borderTopWidth										
Layout Props borderWidth	R	Layout Props.borderWidth										
Layout Props bottom	R	Layout Props.bottom										
Layout Props flex	R	Layout Props.flex										
Layout Props flexBasis	R	Layout Props.flexBasis										
Layout Props flexDirection	R	Layout Props.flexDirection										
Layout Props flexGrow	R	Layout Props.flexGrow										
Layout Props flexShrink	R	Layout Props.flexShrink										
Layout Props flexWrap	R	Layout Props.flexWrap										
Layout Props height	R	Layout Props.height										
Layout Props justifyContent	R	Layout Props.justifyContent										
Layout Props left	R	Layout Props.left										
Layout Props margin	R	Layout Props.margin										
Layout Props marginBottom	R	Layout Props.marginBottom										
Layout Props marginHorizontal	R	Layout Props.marginHorizontal										
Layout Props marginLeft	R	Layout Props.marginLeft										
Layout Props marginRight	R	Layout Props.marginRight										
Layout Props marginTop	R	Layout Props.marginTop										
Layout Props marginVertical	R	Layout Props.marginVertical										
Layout Props maxHeight	R	Layout Props.maxHeight										
Layout Props maxWidth	R	Layout Props.maxWidth										
Layout Props minHeight	R	Layout Props.minHeight										
Layout Props minWidth	R	Layout Props.minWidth										
Layout Props overflow	R	Layout Props.overflow										
Layout Props padding	R	Layout Props.padding										
Layout Props paddingBottom	R	Layout Props.paddingBottom										
Layout Props paddingHorizontal	R	Layout Props.paddingHorizontal										
Layout Props paddingLeft	R	Layout Props.paddingLeft										
Layout Props paddingRight	R	Layout Props.paddingRight										
Layout Props paddingTop	R	Layout Props.paddingTop										
Layout Props paddingVertical	R	Layout Props.paddingVertical										
Layout Props position	R	Layout Props.position										
Layout Props right	R	Layout Props.right										
Layout Props top	R	Layout Props.top										
Layout Props width	R	Layout Props.width										
Layout Props zIndex	R	Layout Props.zIndex										
Layout Props.alignItems	A										<section class="prog__container"><p>alignItems aligns children in the cross direction.  For example, if children are flowing vertically, alignItems  controls how they align horizontally.  It works like align-items in CSS (default: stretch).  See https://developer.mozilla.org/en-US/docs/Web/CSS/align-items  for more details.</p><pre><code>alignItems enum('flex-start', 'flex-end', 'center', 'stretch')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#alignitems
Layout Props.alignSelf	A										<section class="prog__container"><p>alignSelf controls how a child aligns in the cross direction,  overriding the alignItems of the parent. It works like align-self  in CSS (default: auto).  See https://developer.mozilla.org/en-US/docs/Web/CSS/align-self  for more details.</p><pre><code>alignSelf enum('auto', 'flex-start', 'flex-end', 'center', 'stretch')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#alignself
Layout Props.aspectRatio	A										<section class="prog__container"><p>Aspect ratio control the size of the undefined dimension of a node. Aspect ratio is a non-standard property only available in react native and not CSS.</p><pre><code>aspectRatio number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#aspectratio
Layout Props.borderBottomWidth	A										<section class="prog__container"><p>borderBottomWidth works like border-bottom-width in CSS. See https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width for more details.</p><pre><code>borderBottomWidth number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#borderbottomwidth
Layout Props.borderLeftWidth	A										<section class="prog__container"><p>borderLeftWidth works like border-left-width in CSS. See https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width for more details.</p><pre><code>borderLeftWidth number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#borderleftwidth
Layout Props.borderRightWidth	A										<section class="prog__container"><p>borderRightWidth works like border-right-width in CSS. See https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width for more details.</p><pre><code>borderRightWidth number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#borderrightwidth
Layout Props.borderTopWidth	A										<section class="prog__container"><p>borderTopWidth works like border-top-width in CSS. See https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width for more details.</p><pre><code>borderTopWidth number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#bordertopwidth
Layout Props.borderWidth	A										<section class="prog__container"><p>borderWidth works like border-width in CSS. See https://developer.mozilla.org/en-US/docs/Web/CSS/border-width for more details.</p><pre><code>borderWidth number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#borderwidth
Layout Props.bottom	A										<section class="prog__container"><p>bottom is the number of logical pixels to offset the bottom edge of  this component.</p><pre><code>bottom number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#bottom
Layout Props.flex	A										<section class="prog__container"><p>In React Native flex does not work the same way that it does in CSS.  flex is a number rather than a string, and it works  according to the css-layout library  at https://github.com/facebook/css-layout.</p><pre><code>flex number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#flex
Layout Props.flexBasis	A										<section class="prog__container"><pre><code>flexBasis number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#flexbasis
Layout Props.flexDirection	A										<section class="prog__container"><p>flexDirection controls which directions children of a container go.  row goes left to right, column goes top to bottom, and you may  be able to guess what the other two do. It works like flex-direction  in CSS, except the default is column.  See https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction  for more details.</p><pre><code>flexDirection enum('row', 'row-reverse', 'column', 'column-reverse')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#flexdirection
Layout Props.flexGrow	A										<section class="prog__container"><pre><code>flexGrow number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#flexgrow
Layout Props.flexShrink	A										<section class="prog__container"><pre><code>flexShrink number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#flexshrink
Layout Props.flexWrap	A										<section class="prog__container"><p>flexWrap controls whether children can wrap around after they  hit the end of a flex container.  It works like flex-wrap in CSS (default: nowrap).  See https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap  for more details.</p><pre><code>flexWrap enum('wrap', 'nowrap')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#flexwrap
Layout Props.height	A										<section class="prog__container"><p>height sets the height of this component.</p><pre><code>height number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#height
Layout Props.justifyContent	A										<section class="prog__container"><p>justifyContent aligns children in the main direction.  For example, if children are flowing vertically, justifyContent  controls how they align vertically.  It works like justify-content in CSS (default: flex-start).  See https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content  for more details.</p><pre><code>justifyContent enum('flex-start', 'flex-end', 'center', 'space-between', 'space-around')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#justifycontent
Layout Props.left	A										<section class="prog__container"><p>left is the number of logical pixels to offset the left edge of  this component.</p><pre><code>left number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#left
Layout Props.margin	A										<section class="prog__container"><p>Setting margin has the same effect as setting each of  marginTop, marginLeft, marginBottom, and marginRight.  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin  for more details.</p><pre><code>margin number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#margin
Layout Props.marginBottom	A										<section class="prog__container"><p>marginBottom works like margin-bottom in CSS.  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom  for more details.</p><pre><code>marginBottom number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#marginbottom
Layout Props.marginHorizontal	A										<section class="prog__container"><p>Setting marginHorizontal has the same effect as setting  both marginLeft and marginRight.</p><pre><code>marginHorizontal number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#marginhorizontal
Layout Props.marginLeft	A										<section class="prog__container"><p>marginLeft works like margin-left in CSS.  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left  for more details.</p><pre><code>marginLeft number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#marginleft
Layout Props.marginRight	A										<section class="prog__container"><p>marginRight works like margin-right in CSS.  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right  for more details.</p><pre><code>marginRight number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#marginright
Layout Props.marginTop	A										<section class="prog__container"><p>marginTop works like margin-top in CSS.  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top  for more details.</p><pre><code>marginTop number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#margintop
Layout Props.marginVertical	A										<section class="prog__container"><p>Setting marginVertical has the same effect as setting both  marginTop and marginBottom.</p><pre><code>marginVertical number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#marginvertical
Layout Props.maxHeight	A										<section class="prog__container"><p>maxHeight is the maximum height for this component, in logical pixels.</p><pre><code>maxHeight number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#maxheight
Layout Props.maxWidth	A										<section class="prog__container"><p>maxWidth is the maximum width for this component, in logical pixels.</p><pre><code>maxWidth number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#maxwidth
Layout Props.minHeight	A										<section class="prog__container"><p>minHeight is the minimum height for this component, in logical pixels.</p><pre><code>minHeight number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#minheight
Layout Props.minWidth	A										<section class="prog__container"><p>minWidth is the minimum width for this component, in logical pixels.</p><pre><code>minWidth number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#minwidth
Layout Props.overflow	A										<section class="prog__container"><p>overflow controls how a children are measured and displayed.  overflow: hidden causes views to be clipped while overflow: scroll  causes views to be measured independently of their parents main axis.It works likeoverflow` in CSS (default: visible).  See https://developer.mozilla.org/en/docs/Web/CSS/overflow  for more details.</p><pre><code>overflow enum('visible', 'hidden', 'scroll')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#overflow
Layout Props.padding	A										<section class="prog__container"><p>Setting padding has the same effect as setting each of  paddingTop, paddingBottom, paddingLeft, and paddingRight.  See https://developer.mozilla.org/en-US/docs/Web/CSS/padding  for more details.</p><pre><code>padding number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#padding
Layout Props.paddingBottom	A										<section class="prog__container"><p>paddingBottom works like padding-bottom in CSS. See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom for more details.</p><pre><code>paddingBottom number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#paddingbottom
Layout Props.paddingHorizontal	A										<section class="prog__container"><p>Setting paddingHorizontal is like setting both of  paddingLeft and paddingRight.</p><pre><code>paddingHorizontal number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#paddinghorizontal
Layout Props.paddingLeft	A										<section class="prog__container"><p>paddingLeft works like padding-left in CSS. See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left for more details.</p><pre><code>paddingLeft number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#paddingleft
Layout Props.paddingRight	A										<section class="prog__container"><p>paddingRight works like padding-right in CSS. See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right for more details.</p><pre><code>paddingRight number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#paddingright
Layout Props.paddingTop	A										<section class="prog__container"><p>paddingTop works like padding-top in CSS. See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top for more details.</p><pre><code>paddingTop number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#paddingtop
Layout Props.paddingVertical	A										<section class="prog__container"><p>Setting paddingVertical is like setting both of  paddingTop and paddingBottom.</p><pre><code>paddingVertical number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#paddingvertical
Layout Props.position	A										<section class="prog__container"><p>position in React Native is similar to regular CSS, but  everything is set to relative by default, so absolute  positioning is always just relative to the parent.</p><pre><code>position enum('absolute', 'relative')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#position
Layout Props.right	A										<section class="prog__container"><p>right is the number of logical pixels to offset the right edge of  this component.</p><pre><code>right number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#right
Layout Props.top	A										<section class="prog__container"><p>top is the number of logical pixels to offset the top edge of  this component.</p><pre><code>top number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#top
Layout Props.width	A										<section class="prog__container"><p>width sets the width of this component.</p><pre><code>width number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#width
Layout Props.zIndex	A										<section class="prog__container"><p>zIndex controls which components display on top of others.  Normally, you don't use zIndex. Components render according to  their order in the document tree, so later components draw over  earlier ones. zIndex may be useful if you have animations or custom  modal interfaces where you don't want this behavior.</p><pre><code>zIndex number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layout-props.html#zindex
Layout with Flexbox	A										<section class="prog__container"><p>A component can specify the layout of its children using the flexbox algorithm. Flexbox is designed to provide a consistent layout on different screen sizes.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/flexbox.html#
LayoutAnimation	A					[[LayoutAnimation.configureNext]]\\n[[LayoutAnimation.create]]					<section class="prog__container"><p>Automatically animates views to their new positions when the next layout happens.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/layoutanimation.html#
LayoutAnimation configureNext	R	LayoutAnimation.configureNext										
LayoutAnimation create	R	LayoutAnimation.create										
LayoutAnimation.configureNext	A										<section class="prog__container"><p>Schedules an animation to happen on the next layout.</p><pre><code>configureNext(config, onAnimationDidEnd?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layoutanimation.html#configurenext
LayoutAnimation.create	A										<section class="prog__container"><p>Helper for creating a config for configureNext.</p><pre><code>create(duration, type, creationProp)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/layoutanimation.html#create
Linking	A					[[Linking.removeEventListener]]\\n[[Linking.openURL]]\\n[[Linking.addEventListener]]\\n[[Linking.getInitialURL]]\\n[[Linking.canOpenURL]]\\n[[Linking.constructor]]					<section class="prog__container"><p>Linking gives you a general interface to interact with both incoming and outgoing app links.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/linking.html#
Linking Libraries	A										<section class="prog__container"><p>Not every app uses all the native capabilities, and including the code to support all those features would impact the binary size... But we still want to make it easy to add these features whenever you need them.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/linking-libraries-ios.html#
Linking addEventListener	R	Linking.addEventListener										
Linking canOpenURL	R	Linking.canOpenURL										
Linking constructor	R	Linking.constructor										
Linking getInitialURL	R	Linking.getInitialURL										
Linking openURL	R	Linking.openURL										
Linking removeEventListener	R	Linking.removeEventListener										
Linking.addEventListener	A										<section class="prog__container"><p>Add a handler to Linking changes by listening to the url event type and providing the handler</p><pre><code>addEventListener(type, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/linking.html#addeventlistener
Linking.canOpenURL	A										<section class="prog__container"><p>Determine whether or not an installed app can handle a given URL.</p><pre><code>canOpenURL(url)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/linking.html#canopenurl
Linking.constructor	A										<section class="prog__container"><pre><code>constructor(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/linking.html#constructor
Linking.getInitialURL	A										<section class="prog__container"><p>If the app launch was triggered by an app link, it will give the link url, otherwise it will give null</p><pre><code>getInitialURL(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/linking.html#getinitialurl
Linking.openURL	A										<section class="prog__container"><p>Try to open the given url with any of the installed apps.</p><pre><code>openURL(url)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/linking.html#openurl
Linking.removeEventListener	A										<section class="prog__container"><p>Remove a handler by passing the url event type and the handler</p><pre><code>removeEventListener(type, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/linking.html#removeeventlistener
ListView	A					[[ListView.scrollRenderAheadDistance]]\\n[[ListView.renderSectionHeader]]\\n[[ListView.dataSource]]\\n[[ListView.renderScrollComponent]]\\n[[ListView.scrollTo]]\\n[[ListView.onEndReachedThreshold]]\\n[[ListView.enableEmptySections]]\\n[[ListView.getMetrics]]\\n[[ListView.removeClippedSubviews]]\\n[[ListView.renderFooter]]\\n[[ListView.onChangeVisibleRows]]\\n[[ListView.pageSize]]\\n[[ListView.renderSeparator]]\\n[[ListView.onEndReached]]\\n[[ListView.renderRow]]\\n[[ListView.renderHeader]]\\n[[ListView.initialListSize]]\\n[[ListView.stickyHeaderIndices]]					<section class="prog__container"><p>ListView - A core component designed for efficient display of vertically scrolling lists of changing data. The minimal API is to create a ListView.DataSource, populate it with a simple array of data blobs, and instantiate a ListView component with that data source and a renderRow callback which takes a blob from the data array and returns a renderable component.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#
ListView dataSource	R	ListView.dataSource										
ListView enableEmptySections	R	ListView.enableEmptySections										
ListView getMetrics	R	ListView.getMetrics										
ListView initialListSize	R	ListView.initialListSize										
ListView onChangeVisibleRows	R	ListView.onChangeVisibleRows										
ListView onEndReached	R	ListView.onEndReached										
ListView onEndReachedThreshold	R	ListView.onEndReachedThreshold										
ListView pageSize	R	ListView.pageSize										
ListView removeClippedSubviews	R	ListView.removeClippedSubviews										
ListView renderFooter	R	ListView.renderFooter										
ListView renderHeader	R	ListView.renderHeader										
ListView renderRow	R	ListView.renderRow										
ListView renderScrollComponent	R	ListView.renderScrollComponent										
ListView renderSectionHeader	R	ListView.renderSectionHeader										
ListView renderSeparator	R	ListView.renderSeparator										
ListView scrollRenderAheadDistance	R	ListView.scrollRenderAheadDistance										
ListView scrollTo	R	ListView.scrollTo										
ListView stickyHeaderIndices	R	ListView.stickyHeaderIndices										
ListView.dataSource	A										<section class="prog__container"><p>An instance of ListView.DataSource to use</p><pre><code>dataSource ListViewDataSource</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#datasource
ListView.enableEmptySections	A										<section class="prog__container"><p>Flag indicating whether empty section headers should be rendered. In the future release empty section headers will be rendered by default, and the flag will be deprecated. If empty sections are not desired to be rendered their indices should be excluded from sectionID object.</p><pre><code>enableEmptySections bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#enableemptysections
ListView.getMetrics	A										<section class="prog__container"><p>Exports some data, e.g. for perf investigations or analytics.</p><pre><code>getMetrics(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#getmetrics
ListView.initialListSize	A										<section class="prog__container"><p>How many rows to render on initial component mount. Use this to make it so that the first screen worth of data appears at one time instead of over the course of multiple frames.</p><pre><code>initialListSize number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#initiallistsize
ListView.onChangeVisibleRows	A										<section class="prog__container"><p>(visibleRows, changedRows) => void</p><pre><code>onChangeVisibleRows function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#onchangevisiblerows
ListView.onEndReached	A										<section class="prog__container"><p>Called when all rows have been rendered and the list has been scrolled to within onEndReachedThreshold of the bottom. The native scroll event is provided.</p><pre><code>onEndReached function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#onendreached
ListView.onEndReachedThreshold	A										<section class="prog__container"><p>Threshold in pixels (virtual, not physical) for calling onEndReached.</p><pre><code>onEndReachedThreshold number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#onendreachedthreshold
ListView.pageSize	A										<section class="prog__container"><p>Number of rows to render per event loop. Note: if your 'rows' are actually cells, i.e. they don't span the full width of your view (as in the ListViewGridLayoutExample), you should set the pageSize to be a multiple of the number of cells per row, otherwise you're likely to see gaps at the edge of the ListView as new pages are loaded.</p><pre><code>pageSize number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#pagesize
ListView.removeClippedSubviews	A										<section class="prog__container"><p>A performance optimization for improving scroll perf of large lists, used in conjunction with overflow: 'hidden' on the row containers. This is enabled by default.</p><pre><code>removeClippedSubviews bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#removeclippedsubviews
ListView.renderFooter	A										<section class="prog__container"><p>() => renderable</p><pre><code>renderFooter function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#renderfooter
ListView.renderHeader	A										<section class="prog__container"><pre><code>renderHeader function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#renderheader
ListView.renderRow	A										<section class="prog__container"><p>(rowData, sectionID, rowID, highlightRow) => renderable</p><pre><code>renderRow function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#renderrow
ListView.renderScrollComponent	A										<section class="prog__container"><p>(props) => renderable</p><pre><code>renderScrollComponent function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#renderscrollcomponent
ListView.renderSectionHeader	A										<section class="prog__container"><p>(sectionData, sectionID) => renderable</p><pre><code>renderSectionHeader function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#rendersectionheader
ListView.renderSeparator	A										<section class="prog__container"><p>(sectionID, rowID, adjacentRowHighlighted) => renderable</p><pre><code>renderSeparator function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#renderseparator
ListView.scrollRenderAheadDistance	A										<section class="prog__container"><p>How early to start rendering rows before they come on screen, in pixels.</p><pre><code>scrollRenderAheadDistance number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#scrollrenderaheaddistance
ListView.scrollTo	A										<section class="prog__container"><p>Scrolls to a given x, y offset, either immediately or with a smooth animation.</p><pre><code>scrollTo(...args)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#scrollto
ListView.stickyHeaderIndices	A										<section class="prog__container"><p>An array of child indices determining which children get docked to the top of the screen when scrolling. For example, passing stickyHeaderIndices={[0]} will cause the first child to be fixed to the top of the scroll view. This property is not supported in conjunction with horizontal={true}.</p><pre><code>stickyHeaderIndices [number]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/listview.html#stickyheaderindices
MapView	A					[[MapView.onRegionChange]]\\n[[MapView.showsAnnotationCallouts]]\\n[[MapView.showsCompass]]\\n[[MapView.onAnnotationPress]]\\n[[MapView.active]]\\n[[MapView.followUserLocation]]\\n[[MapView.minDelta]]\\n[[MapView.onRegionChangeComplete]]\\n[[MapView.maxDelta]]\\n[[MapView.showsPointsOfInterest]]\\n[[MapView.showsUserLocation]]\\n[[MapView.rotateEnabled]]\\n[[MapView.scrollEnabled]]\\n[[MapView.region]]\\n[[MapView.legalLabelInsets]]\\n[[MapView.mapType]]\\n[[MapView.annotations]]\\n[[MapView.style]]\\n[[MapView.pitchEnabled]]\\n[[MapView.zoomEnabled]]\\n[[MapView.overlays]]					<section class="prog__container"><p>IMPORTANT: This component is now DEPRECATED and will be removed in React Native version 0.42. This component only supports iOS.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#
MapView active	R	MapView.active										
MapView annotations	R	MapView.annotations										
MapView followUserLocation	R	MapView.followUserLocation										
MapView legalLabelInsets	R	MapView.legalLabelInsets										
MapView mapType	R	MapView.mapType										
MapView maxDelta	R	MapView.maxDelta										
MapView minDelta	R	MapView.minDelta										
MapView onAnnotationPress	R	MapView.onAnnotationPress										
MapView onRegionChange	R	MapView.onRegionChange										
MapView onRegionChangeComplete	R	MapView.onRegionChangeComplete										
MapView overlays	R	MapView.overlays										
MapView pitchEnabled	R	MapView.pitchEnabled										
MapView region	R	MapView.region										
MapView rotateEnabled	R	MapView.rotateEnabled										
MapView scrollEnabled	R	MapView.scrollEnabled										
MapView showsAnnotationCallouts	R	MapView.showsAnnotationCallouts										
MapView showsCompass	R	MapView.showsCompass										
MapView showsPointsOfInterest	R	MapView.showsPointsOfInterest										
MapView showsUserLocation	R	MapView.showsUserLocation										
MapView style	R	MapView.style										
MapView zoomEnabled	R	MapView.zoomEnabled										
MapView.active	A										<section class="prog__container"><pre><code>active bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#active
MapView.annotations	A										<section class="prog__container"><p>Map annotations with title and subtitle.</p><pre><code>annotations [{latitude: number, longitude: number, animateDrop: bool, draggable: bool, onDragStateChange: function, onFocus: function, onBlur: function, title: string, subtitle: string, leftCalloutView: element, rightCalloutView: element, detailCalloutView: element, tintColor: [object Object], image: Image.propTypes.source, view: element, id: string, hasLeftCallout: deprecatedPropType(  React.PropTypes.bool,  'Use `leftCalloutView` instead.' ), hasRightCallout: deprecatedPropType(  React.PropTypes.bool,  'Use `rightCalloutView` instead.' ), onLeftCalloutPress: deprecatedPropType(  React.PropTypes.func,  'Use `leftCalloutView` instead.' ), onRightCalloutPress: deprecatedPropType(  React.PropTypes.func,  'Use `rightCalloutView` instead.' )}]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#annotations
MapView.followUserLocation	A										<section class="prog__container"><p>If true the map will follow the user's location whenever it changes. Note that this has no effect unless showsUserLocation is enabled. Default value is true.</p><pre><code>followUserLocation bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#followuserlocation
MapView.legalLabelInsets	A										<section class="prog__container"><p>Insets for the map's legal label, originally at bottom left of the map.</p><pre><code>legalLabelInsets {top: number, left: number, bottom: number, right: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#legallabelinsets
MapView.mapType	A										<section class="prog__container"><p>The map type to be displayed.</p><pre><code>mapType enum('standard', 'satellite', 'hybrid')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#maptype
MapView.maxDelta	A										<section class="prog__container"><p>Maximum size of the area that can be displayed.</p><pre><code>maxDelta number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#maxdelta
MapView.minDelta	A										<section class="prog__container"><p>Minimum size of the area that can be displayed.</p><pre><code>minDelta number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#mindelta
MapView.onAnnotationPress	A										<section class="prog__container"><p>Deprecated. Use annotation onFocus and onBlur instead.</p><pre><code>onAnnotationPress function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#onannotationpress
MapView.onRegionChange	A										<section class="prog__container"><p>Callback that is called continuously when the user is dragging the map.</p><pre><code>onRegionChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#onregionchange
MapView.onRegionChangeComplete	A										<section class="prog__container"><p>Callback that is called once, when the user is done moving the map.</p><pre><code>onRegionChangeComplete function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#onregionchangecomplete
MapView.overlays	A										<section class="prog__container"><p>Map overlays</p><pre><code>overlays [{coordinates: [object Object], lineWidth: number, strokeColor: [object Object], fillColor: [object Object], id: string}]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#overlays
MapView.pitchEnabled	A										<section class="prog__container"><p>When this property is set to true and a valid camera is associated with the map, the camera's pitch angle is used to tilt the plane of the map.</p><pre><code>pitchEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#pitchenabled
MapView.region	A										<section class="prog__container"><p>The region to be displayed by the map.</p><pre><code>region {latitude: number, longitude: number, latitudeDelta: number, longitudeDelta: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#region
MapView.rotateEnabled	A										<section class="prog__container"><p>When this property is set to true and a valid camera is associated with the map, the camera's heading angle is used to rotate the plane of the map around its center point.</p><pre><code>rotateEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#rotateenabled
MapView.scrollEnabled	A										<section class="prog__container"><p>If false the user won't be able to change the map region being displayed. Default value is true.</p><pre><code>scrollEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#scrollenabled
MapView.showsAnnotationCallouts	A										<section class="prog__container"><p>If true the map will show the callouts for all annotations without the user having to click on the annotation. Default value is false.</p><pre><code>showsAnnotationCallouts bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#showsannotationcallouts
MapView.showsCompass	A										<section class="prog__container"><p>If false, compass won't be displayed on the map. Default value is true.</p><pre><code>showsCompass bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#showscompass
MapView.showsPointsOfInterest	A										<section class="prog__container"><p>If false points of interest won't be displayed on the map. Default value is true.</p><pre><code>showsPointsOfInterest bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#showspointsofinterest
MapView.showsUserLocation	A										<section class="prog__container"><p>If true the app will ask for the user's location and display it on the map. Default value is false.</p><pre><code>showsUserLocation bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#showsuserlocation
MapView.style	A										<section class="prog__container"><p>Used to style and layout the MapView.</p><pre><code>style View#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#style
MapView.zoomEnabled	A										<section class="prog__container"><p>If false the user won't be able to pinch/zoom the map. Default value is true.</p><pre><code>zoomEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/mapview.html#zoomenabled
Modal	A					[[Modal.onOrientationChange]]\\n[[Modal.onRequestClose]]\\n[[Modal.transparent]]\\n[[Modal.animated]]\\n[[Modal.visible]]\\n[[Modal.animationType]]\\n[[Modal.supportedOrientations]]\\n[[Modal.onShow]]					<section class="prog__container"><p>The Modal component is a simple way to present content above an enclosing view.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/modal.html#
Modal animated	R	Modal.animated										
Modal animationType	R	Modal.animationType										
Modal onOrientationChange	R	Modal.onOrientationChange										
Modal onRequestClose	R	Modal.onRequestClose										
Modal onShow	R	Modal.onShow										
Modal supportedOrientations	R	Modal.supportedOrientations										
Modal transparent	R	Modal.transparent										
Modal visible	R	Modal.visible										
Modal.animated	A										<section class="prog__container"><p>Use the animationType prop instead.</p><pre><code>animated bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/modal.html#animated
Modal.animationType	A										<section class="prog__container"><p>The animationType prop controls how the modal animates.</p><pre><code>animationType enum('none', 'slide', 'fade')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/modal.html#animationtype
Modal.onOrientationChange	A										<section class="prog__container"><p>The onOrientationChange callback is called when the orientation changes while the modal is being displayed. The orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.</p><pre><code>onOrientationChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/modal.html#onorientationchange
Modal.onRequestClose	A										<section class="prog__container"><p>The onRequestClose callback is called when the user taps the hardware back button.</p><pre><code>onRequestClose Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/modal.html#onrequestclose
Modal.onShow	A										<section class="prog__container"><p>The onShow prop allows passing a function that will be called once the modal has been shown.</p><pre><code>onShow function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/modal.html#onshow
Modal.supportedOrientations	A										<section class="prog__container"><p>The supportedOrientations prop allows the modal to be rotated to any of the specified orientations. On iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field.</p><pre><code>supportedOrientations [enum('portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right')]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/modal.html#supportedorientations
Modal.transparent	A										<section class="prog__container"><p>The transparent prop determines whether your modal will fill the entire view. Setting this to true will render the modal over a transparent background.</p><pre><code>transparent bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/modal.html#transparent
Modal.visible	A										<section class="prog__container"><p>The visible prop determines whether your modal is visible.</p><pre><code>visible bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/modal.html#visible
More Resources	A										<section class="prog__container"><p>If you just read through this website, you should be able to build a pretty cool React Native app. But React Native isn't just a product made by one company - it's a community of thousands of developers. So if you're interested in React Native, here's some related stuff you might want to check out.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/more-resources.html#
NativeMethodsMixin	A					[[NativeMethodsMixin.measure]]\\n[[NativeMethodsMixin.blur]]\\n[[NativeMethodsMixin.focus]]\\n[[NativeMethodsMixin.measureInWindow]]\\n[[NativeMethodsMixin.measureLayout]]					<section class="prog__container"><p>NativeMethodsMixin provides methods to access the underlying native component directly. This can be useful in cases when you want to focus a view or measure its on-screen dimensions, for example.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/nativemethodsmixin.html#
NativeMethodsMixin blur	R	NativeMethodsMixin.blur										
NativeMethodsMixin focus	R	NativeMethodsMixin.focus										
NativeMethodsMixin measure	R	NativeMethodsMixin.measure										
NativeMethodsMixin measureInWindow	R	NativeMethodsMixin.measureInWindow										
NativeMethodsMixin measureLayout	R	NativeMethodsMixin.measureLayout										
NativeMethodsMixin.blur	A										<section class="prog__container"><p>Removes focus from an input or view. This is the opposite of focus().</p><pre><code>blur(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/nativemethodsmixin.html#blur
NativeMethodsMixin.focus	A										<section class="prog__container"><p>Requests focus for the given input or view. The exact behavior triggered will depend on the platform and type of view.</p><pre><code>focus(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/nativemethodsmixin.html#focus
NativeMethodsMixin.measure	A										<section class="prog__container"><p>Determines the location on screen, width, and height of the given view and returns the values via an async callback. If successful, the callback will be called with the following arguments:</p><pre><code>measure(callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/nativemethodsmixin.html#measure
NativeMethodsMixin.measureInWindow	A										<section class="prog__container"><p>Determines the location of the given view in the window and returns the values via an async callback. If the React root view is embedded in another native view, this will give you the absolute coordinates. If successful, the callback will be called with the following arguments:</p><pre><code>measureInWindow(callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/nativemethodsmixin.html#measureinwindow
NativeMethodsMixin.measureLayout	A										<section class="prog__container"><p>Like measure(), but measures the view relative an ancestor, specified as relativeToNativeNode. This means that the returned x, y are relative to the origin x, y of the ancestor view.</p><pre><code>measureLayout(relativeToNativeNode, onSuccess, onFail)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/nativemethodsmixin.html#measurelayout
Navigation	A										<section class="prog__container"><p>This guide covers the various navigation components available in React Native. If you are just getting started with navigation, you will probably want to use Navigator. If you are only targeting iOS and would like to stick to the native look and feel, check out NavigatorIOS. If you are looking for greater control over your navigation stack, you can't go wrong with NavigationExperimental.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigation.html#
Navigator	A					[[Navigator.popN]]\\n[[Navigator.onDidFocus]]\\n[[Navigator.popToRoute]]\\n[[Navigator.initialRouteStack]]\\n[[Navigator.replace]]\\n[[Navigator.initialRoute]]\\n[[Navigator.push]]\\n[[Navigator.navigator]]\\n[[Navigator.onWillFocus]]\\n[[Navigator.pop]]\\n[[Navigator.jumpTo]]\\n[[Navigator.jumpForward]]\\n[[Navigator.navigationBar]]\\n[[Navigator.popToTop]]\\n[[Navigator.resetTo]]\\n[[Navigator.replacePrevious]]\\n[[Navigator.sceneStyle]]\\n[[Navigator.configureScene]]\\n[[Navigator.immediatelyResetRouteStack]]\\n[[Navigator.getCurrentRoutes]]\\n[[Navigator.renderScene]]\\n[[Navigator.jumpBack]]\\n[[Navigator.replacePreviousAndPop]]\\n[[Navigator.replaceAtIndex]]					<section class="prog__container"><p>Navigator handles the transition between different scenes in your app. It is implemented in JavaScript and is available on both iOS and Android. If you are targeting iOS only, you may also want to consider using NavigatorIOS as it leverages native UIKit navigation.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#
Navigator configureScene	R	Navigator.configureScene										
Navigator getCurrentRoutes	R	Navigator.getCurrentRoutes										
Navigator immediatelyResetRouteStack	R	Navigator.immediatelyResetRouteStack										
Navigator initialRoute	R	Navigator.initialRoute										
Navigator initialRouteStack	R	Navigator.initialRouteStack										
Navigator jumpBack	R	Navigator.jumpBack										
Navigator jumpForward	R	Navigator.jumpForward										
Navigator jumpTo	R	Navigator.jumpTo										
Navigator navigationBar	R	Navigator.navigationBar										
Navigator navigator	R	Navigator.navigator										
Navigator onDidFocus	R	Navigator.onDidFocus										
Navigator onWillFocus	R	Navigator.onWillFocus										
Navigator pop	R	Navigator.pop										
Navigator popN	R	Navigator.popN										
Navigator popToRoute	R	Navigator.popToRoute										
Navigator popToTop	R	Navigator.popToTop										
Navigator push	R	Navigator.push										
Navigator renderScene	R	Navigator.renderScene										
Navigator replace	R	Navigator.replace										
Navigator replaceAtIndex	R	Navigator.replaceAtIndex										
Navigator replacePrevious	R	Navigator.replacePrevious										
Navigator replacePreviousAndPop	R	Navigator.replacePreviousAndPop										
Navigator resetTo	R	Navigator.resetTo										
Navigator sceneStyle	R	Navigator.sceneStyle										
Navigator.configureScene	A										<section class="prog__container"><p>Optional function where you can configure scene animations and gestures. Will be invoked with route and routeStack parameters, where route corresponds to the current scene being rendered by the Navigator and routeStack is the set of currently mounted routes that the navigator could transition to.</p><pre><code>configureScene function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#configurescene
Navigator.getCurrentRoutes	A										<section class="prog__container"><p>Returns the current list of routes.</p><pre><code>getCurrentRoutes(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#getcurrentroutes
Navigator.immediatelyResetRouteStack	A										<section class="prog__container"><p>Reset every scene with an array of routes.</p><pre><code>immediatelyResetRouteStack(nextRouteStack)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#immediatelyresetroutestack
Navigator.initialRoute	A										<section class="prog__container"><p>The initial route for navigation. A route is an object that the navigator will use to identify each scene it renders.</p><pre><code>initialRoute object</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#initialroute
Navigator.initialRouteStack	A										<section class="prog__container"><p>Pass this in to provide a set of routes to initially mount. This prop is required if initialRoute is not provided to the navigator. If this prop is not passed in, it will default internally to an array containing only initialRoute.</p><pre><code>initialRouteStack [object]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#initialroutestack
Navigator.jumpBack	A										<section class="prog__container"><p>Jump backward without unmounting the current scene.</p><pre><code>jumpBack(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#jumpback
Navigator.jumpForward	A										<section class="prog__container"><p>Jump forward to the next scene in the route stack.</p><pre><code>jumpForward(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#jumpforward
Navigator.jumpTo	A										<section class="prog__container"><p>Transition to an existing scene without unmounting.</p><pre><code>jumpTo(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#jumpto
Navigator.navigationBar	A										<section class="prog__container"><p>Use this to provide an optional component representing a navigation bar that is persisted across scene transitions. This component will receive two props: navigator and navState representing the navigator component and its state. The component is re-rendered when the route changes.</p><pre><code>navigationBar node</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#navigationbar
Navigator.navigator	A										<section class="prog__container"><p>Optionally pass in the navigator object from a parent Navigator.</p><pre><code>navigator object</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#navigator
Navigator.onDidFocus	A										<section class="prog__container"><p>Will be called with the new route of each scene after the transition is complete or after the initial mounting.</p><pre><code>onDidFocus function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#ondidfocus
Navigator.onWillFocus	A										<section class="prog__container"><p>Pass in a function to get notified with the target route when the navigator component is mounted and before each navigator transition.</p><pre><code>onWillFocus function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#onwillfocus
Navigator.pop	A										<section class="prog__container"><p>Transition back and unmount the current scene.</p><pre><code>pop(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#pop
Navigator.popN	A										<section class="prog__container"><p>Go back N scenes at once. When N=1, behavior matches pop(). When N is invalid(negative or bigger than current routes count), do nothing.</p><pre><code>popN(n)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#popn
Navigator.popToRoute	A										<section class="prog__container"><p>Pop to a particular scene, as specified by its route. All scenes after it will be unmounted.</p><pre><code>popToRoute(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#poptoroute
Navigator.popToTop	A										<section class="prog__container"><p>Pop to the first scene in the stack, unmounting every other scene.</p><pre><code>popToTop(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#poptotop
Navigator.push	A										<section class="prog__container"><p>Navigate forward to a new scene, squashing any scenes that you could jump forward to.</p><pre><code>push(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#push
Navigator.renderScene	A										<section class="prog__container"><p>Required function which renders the scene for a given route. Will be invoked with the route and the navigator object.</p><pre><code>renderScene function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#renderscene
Navigator.replace	A										<section class="prog__container"><p>Replace the current scene with a new route.</p><pre><code>replace(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#replace
Navigator.replaceAtIndex	A										<section class="prog__container"><p>Replace a scene as specified by an index.</p><pre><code>replaceAtIndex(route, index, cb)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#replaceatindex
Navigator.replacePrevious	A										<section class="prog__container"><p>Replace the previous scene.</p><pre><code>replacePrevious(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#replaceprevious
Navigator.replacePreviousAndPop	A										<section class="prog__container"><p>Replace the previous scene and pop to it.</p><pre><code>replacePreviousAndPop(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#replacepreviousandpop
Navigator.resetTo	A										<section class="prog__container"><p>Navigate to a new scene and reset route stack.</p><pre><code>resetTo(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#resetto
Navigator.sceneStyle	A										<section class="prog__container"><p>Styles to apply to the container of each scene.</p><pre><code>sceneStyle View#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigator.html#scenestyle
NavigatorIOS	A					[[NavigatorIOS.popToTop]]\\n[[NavigatorIOS.tintColor]]\\n[[NavigatorIOS.interactivePopGestureEnabled]]\\n[[NavigatorIOS.push]]\\n[[NavigatorIOS.pop]]\\n[[NavigatorIOS.resetTo]]\\n[[NavigatorIOS.popN]]\\n[[NavigatorIOS.itemWrapperStyle]]\\n[[NavigatorIOS.replacePreviousAndPop]]\\n[[NavigatorIOS.replace]]\\n[[NavigatorIOS.shadowHidden]]\\n[[NavigatorIOS.titleTextColor]]\\n[[NavigatorIOS.barTintColor]]\\n[[NavigatorIOS.initialRoute]]\\n[[NavigatorIOS.navigationBarHidden]]\\n[[NavigatorIOS.translucent]]\\n[[NavigatorIOS.popToRoute]]\\n[[NavigatorIOS.replaceAtIndex]]\\n[[NavigatorIOS.replacePrevious]]					<section class="prog__container"><p>NavigatorIOS is a wrapper around UINavigationController, enabling you to implement a navigation stack. It works exactly the same as it would on a native app using UINavigationController, providing the same animations and behavior from UIKIt.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#
NavigatorIOS barTintColor	R	NavigatorIOS.barTintColor										
NavigatorIOS initialRoute	R	NavigatorIOS.initialRoute										
NavigatorIOS interactivePopGestureEnabled	R	NavigatorIOS.interactivePopGestureEnabled										
NavigatorIOS itemWrapperStyle	R	NavigatorIOS.itemWrapperStyle										
NavigatorIOS navigationBarHidden	R	NavigatorIOS.navigationBarHidden										
NavigatorIOS pop	R	NavigatorIOS.pop										
NavigatorIOS popN	R	NavigatorIOS.popN										
NavigatorIOS popToRoute	R	NavigatorIOS.popToRoute										
NavigatorIOS popToTop	R	NavigatorIOS.popToTop										
NavigatorIOS push	R	NavigatorIOS.push										
NavigatorIOS replace	R	NavigatorIOS.replace										
NavigatorIOS replaceAtIndex	R	NavigatorIOS.replaceAtIndex										
NavigatorIOS replacePrevious	R	NavigatorIOS.replacePrevious										
NavigatorIOS replacePreviousAndPop	R	NavigatorIOS.replacePreviousAndPop										
NavigatorIOS resetTo	R	NavigatorIOS.resetTo										
NavigatorIOS shadowHidden	R	NavigatorIOS.shadowHidden										
NavigatorIOS tintColor	R	NavigatorIOS.tintColor										
NavigatorIOS titleTextColor	R	NavigatorIOS.titleTextColor										
NavigatorIOS translucent	R	NavigatorIOS.translucent										
NavigatorIOS.barTintColor	A										<section class="prog__container"><p>The default background color of the navigation bar.</p><pre><code>barTintColor string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#bartintcolor
NavigatorIOS.initialRoute	A										<section class="prog__container"><p>NavigatorIOS uses route objects to identify child views, their props, and navigation bar configuration. Navigation operations such as push operations expect routes to look like this the initialRoute.</p><pre><code>initialRoute {component: function, title: string, titleImage: Image.propTypes.source, passProps: object, backButtonIcon: Image.propTypes.source, backButtonTitle: string, leftButtonIcon: Image.propTypes.source, leftButtonTitle: string, leftButtonSystemIcon: Object.keys(SystemIcons), onLeftButtonPress: function, rightButtonIcon: Image.propTypes.source, rightButtonTitle: string, rightButtonSystemIcon: Object.keys(SystemIcons), onRightButtonPress: function, wrapperStyle: [object Object], navigationBarHidden: bool, shadowHidden: bool, tintColor: string, barTintColor: string, titleTextColor: string, translucent: bool}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#initialroute
NavigatorIOS.interactivePopGestureEnabled	A										<section class="prog__container"><p>Boolean value that indicates whether the interactive pop gesture is enabled. This is useful for enabling/disabling the back swipe navigation gesture.</p><pre><code>interactivePopGestureEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#interactivepopgestureenabled
NavigatorIOS.itemWrapperStyle	A										<section class="prog__container"><p>The default wrapper style for components in the navigator. A common use case is to set the backgroundColor for every scene.</p><pre><code>itemWrapperStyle View#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#itemwrapperstyle
NavigatorIOS.navigationBarHidden	A										<section class="prog__container"><p>Boolean value that indicates whether the navigation bar is hidden by default.</p><pre><code>navigationBarHidden bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#navigationbarhidden
NavigatorIOS.pop	A										<section class="prog__container"><p>Pop back to the previous scene.</p><pre><code>pop(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#pop
NavigatorIOS.popN	A										<section class="prog__container"><p>Go back N scenes at once. When N=1, behavior matches pop().</p><pre><code>popN(n)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#popn
NavigatorIOS.popToRoute	A										<section class="prog__container"><p>Go back to the item for a particular route object.</p><pre><code>popToRoute(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#poptoroute
NavigatorIOS.popToTop	A										<section class="prog__container"><p>Go back to the topmost item in the navigation stack.</p><pre><code>popToTop(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#poptotop
NavigatorIOS.push	A										<section class="prog__container"><p>Navigate forward to a new route.</p><pre><code>push(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#push
NavigatorIOS.replace	A										<section class="prog__container"><p>Replace the route for the current scene and immediately load the view for the new route.</p><pre><code>replace(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#replace
NavigatorIOS.replaceAtIndex	A										<section class="prog__container"><p>Replace a route in the navigation stack.</p><pre><code>replaceAtIndex(route, index)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#replaceatindex
NavigatorIOS.replacePrevious	A										<section class="prog__container"><p>Replace the route/view for the previous scene.</p><pre><code>replacePrevious(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#replaceprevious
NavigatorIOS.replacePreviousAndPop	A										<section class="prog__container"><p>Replaces the previous route/view and transitions back to it.</p><pre><code>replacePreviousAndPop(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#replacepreviousandpop
NavigatorIOS.resetTo	A										<section class="prog__container"><p>Replaces the top item and pop to it.</p><pre><code>resetTo(route)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#resetto
NavigatorIOS.shadowHidden	A										<section class="prog__container"><p>Boolean value that indicates whether to hide the 1px hairline shadow by default.</p><pre><code>shadowHidden bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#shadowhidden
NavigatorIOS.tintColor	A										<section class="prog__container"><p>The default color used for the buttons in the navigation bar.</p><pre><code>tintColor string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#tintcolor
NavigatorIOS.titleTextColor	A										<section class="prog__container"><p>The default text color of the navigation bar title.</p><pre><code>titleTextColor string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#titletextcolor
NavigatorIOS.translucent	A										<section class="prog__container"><p>Boolean value that indicates whether the navigation bar is translucent by default</p><pre><code>translucent bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/navigatorios.html#translucent
NetInfo	A					[[NetInfo.addEventListener]]\\n[[NetInfo.removeEventListener]]\\n[[NetInfo.isConnectionExpensive]]\\n[[NetInfo.fetch]]					<section class="prog__container"><p>NetInfo exposes info about online/offline status</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/netinfo.html#
NetInfo addEventListener	R	NetInfo.addEventListener										
NetInfo fetch	R	NetInfo.fetch										
NetInfo isConnectionExpensive	R	NetInfo.isConnectionExpensive										
NetInfo removeEventListener	R	NetInfo.removeEventListener										
NetInfo.addEventListener	A										<section class="prog__container"><p>Invokes the listener whenever network status changes. The listener receives one of the connectivity types listed above.</p><pre><code>addEventListener(eventName, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/netinfo.html#addeventlistener
NetInfo.fetch	A										<section class="prog__container"><p>Returns a promise that resolves with one of the connectivity types listed above.</p><pre><code>fetch(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/netinfo.html#fetch
NetInfo.isConnectionExpensive	A										<section class="prog__container"><pre><code>isConnectionExpensive(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/netinfo.html#isconnectionexpensive
NetInfo.removeEventListener	A										<section class="prog__container"><p>Removes the listener for network status changes.</p><pre><code>removeEventListener(eventName, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/netinfo.html#removeeventlistener
Networking	A										<section class="prog__container"><p>Many mobile apps need to load resources from a remote URL. You may want to make a POST request to a REST API, or you may simply need to fetch a chunk of static content from another server.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/network.html#
PanResponder	A					[[PanResponder.create]]					<section class="prog__container"><p>PanResponder reconciles several touches into a single gesture. It makes single-touch gestures resilient to extra touches, and can be used to recognize simple multi-touch gestures.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/panresponder.html#
PanResponder create	R	PanResponder.create										
PanResponder.create	A										<section class="prog__container"><p>@param {object} config Enhanced versions of all of the responder callbacks that provide not only the typical ResponderSyntheticEvent, but also the PanResponder gesture state. Simply replace the word Responder with PanResponder in each of the typical onResponder* callbacks. For example, the config object would look like:</p><pre><code>create(config)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/panresponder.html#create
Performance	A										<section class="prog__container"><p>A compelling reason for using React Native instead of WebView-based tools is to achieve 60 FPS and a native look & feel to your apps. Where possible, we would like for React Native to do the right thing and help you to focus on your app instead of performance optimization, but there are areas where we're not quite there yet, and others where React Native (similar to writing native code directly) cannot possibly determine the best way to optimize for you and so manual intervention will be necessary.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/performance.html#
PermissionsAndroid	A					[[PermissionsAndroid.requestMultiple]]\\n[[PermissionsAndroid.check]]\\n[[PermissionsAndroid.requestPermission]]\\n[[PermissionsAndroid.request]]\\n[[PermissionsAndroid.constructor]]\\n[[PermissionsAndroid.checkPermission]]					<section class="prog__container"><p>PermissionsAndroid provides access to Android M's new permissions model. Some permissions are granted by default when the application is installed so long as they appear in AndroidManifest.xml. However, "dangerous" permissions require a dialog prompt. You should use this module for those permissions.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/permissionsandroid.html#
PermissionsAndroid check	R	PermissionsAndroid.check										
PermissionsAndroid checkPermission	R	PermissionsAndroid.checkPermission										
PermissionsAndroid constructor	R	PermissionsAndroid.constructor										
PermissionsAndroid request	R	PermissionsAndroid.request										
PermissionsAndroid requestMultiple	R	PermissionsAndroid.requestMultiple										
PermissionsAndroid requestPermission	R	PermissionsAndroid.requestPermission										
PermissionsAndroid.check	A										<section class="prog__container"><p>Returns a promise resolving to a boolean value as to whether the specified permissions has been granted</p><pre><code>check(permission)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/permissionsandroid.html#check
PermissionsAndroid.checkPermission	A										<section class="prog__container"><p>DEPRECATED - use check</p><pre><code>checkPermission(permission)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/permissionsandroid.html#checkpermission
PermissionsAndroid.constructor	A										<section class="prog__container"><pre><code>constructor(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/permissionsandroid.html#constructor
PermissionsAndroid.request	A										<section class="prog__container"><p>Prompts the user to enable a permission and returns a promise resolving to a string value indicating whether the user allowed or denied the request</p><pre><code>request(permission, rationale?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/permissionsandroid.html#request
PermissionsAndroid.requestMultiple	A										<section class="prog__container"><p>Prompts the user to enable multiple permissions in the same dialog and returns an object with the permissions as keys and strings as values indicating whether the user allowed or denied the request</p><pre><code>requestMultiple(permissions)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/permissionsandroid.html#requestmultiple
PermissionsAndroid.requestPermission	A										<section class="prog__container"><p>DEPRECATED - use request</p><pre><code>requestPermission(permission, rationale?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/permissionsandroid.html#requestpermission
Picker	A					[[Picker.enabled]]\\n[[Picker.onValueChange]]\\n[[Picker.prompt]]\\n[[Picker.testID]]\\n[[Picker.selectedValue]]\\n[[Picker.style]]\\n[[Picker.mode]]\\n[[Picker.itemStyle]]					<section class="prog__container"><p>Renders the native picker component on iOS and Android. Example:</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/picker.html#
Picker enabled	R	Picker.enabled										
Picker itemStyle	R	Picker.itemStyle										
Picker mode	R	Picker.mode										
Picker onValueChange	R	Picker.onValueChange										
Picker prompt	R	Picker.prompt										
Picker selectedValue	R	Picker.selectedValue										
Picker style	R	Picker.style										
Picker testID	R	Picker.testID										
Picker.enabled	A										<section class="prog__container"><p>If set to false, the picker will be disabled, i.e. the user will not be able to make a selection.</p><pre><code>enabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/picker.html#enabled
Picker.itemStyle	A										<section class="prog__container"><p>Style to apply to each of the item labels.</p><pre><code>itemStyle itemStylePropType</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/picker.html#itemstyle
Picker.mode	A										<section class="prog__container"><p>On Android, specifies how to display the selection items when the user taps on the picker:</p><pre><code>mode enum('dialog', 'dropdown')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/picker.html#mode
Picker.onValueChange	A										<section class="prog__container"><p>Callback for when an item is selected. This is called with the following parameters:  - itemValue: the value prop of the item that was selected  - itemPosition: the index of the selected item in this picker</p><pre><code>onValueChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/picker.html#onvaluechange
Picker.prompt	A										<section class="prog__container"><p>Prompt string for this picker, used on Android in dialog mode as the title of the dialog.</p><pre><code>prompt string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/picker.html#prompt
Picker.selectedValue	A										<section class="prog__container"><p>Value matching value of one of the items. Can be a string or an integer.</p><pre><code>selectedValue any</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/picker.html#selectedvalue
Picker.style	A										<section class="prog__container"><pre><code>style pickerStyleType</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/picker.html#style
Picker.testID	A										<section class="prog__container"><p>Used to locate this view in end-to-end tests.</p><pre><code>testID string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/picker.html#testid
PickerIOS	A					[[PickerIOS.selectedValue]]\\n[[PickerIOS.itemStyle]]\\n[[PickerIOS.onValueChange]]					<section class="prog__container"><p>You can edit the content above on GitHub and send us a pull request!</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/pickerios.html#
PickerIOS itemStyle	R	PickerIOS.itemStyle										
PickerIOS onValueChange	R	PickerIOS.onValueChange										
PickerIOS selectedValue	R	PickerIOS.selectedValue										
PickerIOS.itemStyle	A										<section class="prog__container"><pre><code>itemStyle itemStylePropType</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pickerios.html#itemstyle
PickerIOS.onValueChange	A										<section class="prog__container"><pre><code>onValueChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pickerios.html#onvaluechange
PickerIOS.selectedValue	A										<section class="prog__container"><pre><code>selectedValue any</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pickerios.html#selectedvalue
PixelRatio	A					[[PixelRatio.startDetecting]]\\n[[PixelRatio.getFontScale]]\\n[[PixelRatio.roundToNearestPixel]]\\n[[PixelRatio.get]]\\n[[PixelRatio.getPixelSizeForLayoutSize]]					<section class="prog__container"><p>PixelRatio class gives access to the device pixel density.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/pixelratio.html#
PixelRatio get	R	PixelRatio.get										
PixelRatio getFontScale	R	PixelRatio.getFontScale										
PixelRatio getPixelSizeForLayoutSize	R	PixelRatio.getPixelSizeForLayoutSize										
PixelRatio roundToNearestPixel	R	PixelRatio.roundToNearestPixel										
PixelRatio startDetecting	R	PixelRatio.startDetecting										
PixelRatio.get	A										<section class="prog__container"><p>Returns the device pixel density. Some examples:</p><pre><code>get(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pixelratio.html#get
PixelRatio.getFontScale	A										<section class="prog__container"><p>Returns the scaling factor for font sizes. This is the ratio that is used to calculate the absolute font size, so any elements that heavily depend on that should use this to do calculations.</p><pre><code>getFontScale(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pixelratio.html#getfontscale
PixelRatio.getPixelSizeForLayoutSize	A										<section class="prog__container"><p>Converts a layout size (dp) to pixel size (px).</p><pre><code>getPixelSizeForLayoutSize(layoutSize)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pixelratio.html#getpixelsizeforlayoutsize
PixelRatio.roundToNearestPixel	A										<section class="prog__container"><p>Rounds a layout size (dp) to the nearest layout size that corresponds to an integer number of pixels. For example, on a device with a PixelRatio of 3, PixelRatio.roundToNearestPixel(8.4) = 8.33, which corresponds to exactly (8.33 * 3) = 25 pixels.</p><pre><code>roundToNearestPixel(layoutSize)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pixelratio.html#roundtonearestpixel
PixelRatio.startDetecting	A										<section class="prog__container"><p>// No-op for iOS, but used on the web. Should not be documented.</p><pre><code>startDetecting(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pixelratio.html#startdetecting
Platform Specific Code	A										<section class="prog__container"><p>When building a cross-platform app, you'll want to re-use as much code as possible. Scenarios may arise where it makes sense for the code to be different, for example you may want to implement separate visual components for iOS and Android.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/platform-specific-code.html#
Profiling Android UI Performance	A										<section class="prog__container"><p>We try our best to deliver buttery-smooth UI performance by default, but sometimes that just isn't possible. Remember, Android supports 10k+ different phones and is generalized to support software rendering: the framework architecture and need to generalize across many hardware targets unfortunately means you get less for free relative to iOS. But sometimes, there are things you can improve (and many times it's not native code's fault at all!).</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/android-ui-performance.html#
ProgressBarAndroid	A					[[ProgressBarAndroid.styleAttr]]\\n[[ProgressBarAndroid.progress]]\\n[[ProgressBarAndroid.color]]\\n[[ProgressBarAndroid.testID]]\\n[[ProgressBarAndroid.indeterminate]]					<section class="prog__container"><p>React component that wraps the Android-only ProgressBar. This component is used to indicate that the app is loading or there is some activity in the app.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressbarandroid.html#
ProgressBarAndroid color	R	ProgressBarAndroid.color										
ProgressBarAndroid indeterminate	R	ProgressBarAndroid.indeterminate										
ProgressBarAndroid progress	R	ProgressBarAndroid.progress										
ProgressBarAndroid styleAttr	R	ProgressBarAndroid.styleAttr										
ProgressBarAndroid testID	R	ProgressBarAndroid.testID										
ProgressBarAndroid.color	A										<section class="prog__container"><p>Color of the progress bar.</p><pre><code>color color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressbarandroid.html#color
ProgressBarAndroid.indeterminate	A										<section class="prog__container"><p>If the progress bar will show indeterminate progress. Note that this can only be false if styleAttr is Horizontal.</p><pre><code>indeterminate indeterminateType</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressbarandroid.html#indeterminate
ProgressBarAndroid.progress	A										<section class="prog__container"><p>The progress value (between 0 and 1).</p><pre><code>progress number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressbarandroid.html#progress
ProgressBarAndroid.styleAttr	A										<section class="prog__container"><p>Style of the ProgressBar. One of:</p><pre><code>styleAttr enum('Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressbarandroid.html#styleattr
ProgressBarAndroid.testID	A										<section class="prog__container"><p>Used to locate this view in end-to-end tests.</p><pre><code>testID string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressbarandroid.html#testid
ProgressViewIOS	A					[[ProgressViewIOS.progressViewStyle]]\\n[[ProgressViewIOS.progress]]\\n[[ProgressViewIOS.progressTintColor]]\\n[[ProgressViewIOS.trackImage]]\\n[[ProgressViewIOS.trackTintColor]]\\n[[ProgressViewIOS.progressImage]]					<section class="prog__container"><p>Use ProgressViewIOS to render a UIProgressView on iOS.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressviewios.html#
ProgressViewIOS progress	R	ProgressViewIOS.progress										
ProgressViewIOS progressImage	R	ProgressViewIOS.progressImage										
ProgressViewIOS progressTintColor	R	ProgressViewIOS.progressTintColor										
ProgressViewIOS progressViewStyle	R	ProgressViewIOS.progressViewStyle										
ProgressViewIOS trackImage	R	ProgressViewIOS.trackImage										
ProgressViewIOS trackTintColor	R	ProgressViewIOS.trackTintColor										
ProgressViewIOS.progress	A										<section class="prog__container"><p>The progress value (between 0 and 1).</p><pre><code>progress number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressviewios.html#progress
ProgressViewIOS.progressImage	A										<section class="prog__container"><p>A stretchable image to display as the progress bar.</p><pre><code>progressImage Image.propTypes.source</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressviewios.html#progressimage
ProgressViewIOS.progressTintColor	A										<section class="prog__container"><p>The tint color of the progress bar itself.</p><pre><code>progressTintColor string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressviewios.html#progresstintcolor
ProgressViewIOS.progressViewStyle	A										<section class="prog__container"><p>The progress bar style.</p><pre><code>progressViewStyle enum('default', 'bar')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressviewios.html#progressviewstyle
ProgressViewIOS.trackImage	A										<section class="prog__container"><p>A stretchable image to display behind the progress bar.</p><pre><code>trackImage Image.propTypes.source</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressviewios.html#trackimage
ProgressViewIOS.trackTintColor	A										<section class="prog__container"><p>The tint color of the progress bar track.</p><pre><code>trackTintColor string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/progressviewios.html#tracktintcolor
Props	A										<section class="prog__container"><p>Most components can be customized when they are created, with different parameters. These creation parameters are called props.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/props.html#
PushNotificationIOS	A					[[PushNotificationIOS.abandonPermissions]]\\n[[PushNotificationIOS.addEventListener]]\\n[[PushNotificationIOS.removeEventListener]]\\n[[PushNotificationIOS.getScheduledLocalNotifications]]\\n[[PushNotificationIOS.getSound]]\\n[[PushNotificationIOS.getMessage]]\\n[[PushNotificationIOS.checkPermissions]]\\n[[PushNotificationIOS.cancelAllLocalNotifications]]\\n[[PushNotificationIOS.getInitialNotification]]\\n[[PushNotificationIOS.getBadgeCount]]\\n[[PushNotificationIOS.scheduleLocalNotification]]\\n[[PushNotificationIOS.finish]]\\n[[PushNotificationIOS.cancelLocalNotifications]]\\n[[PushNotificationIOS.getApplicationIconBadgeNumber]]\\n[[PushNotificationIOS.requestPermissions]]\\n[[PushNotificationIOS.constructor]]\\n[[PushNotificationIOS.=]]\\n[[PushNotificationIOS.setApplicationIconBadgeNumber]]\\n[[PushNotificationIOS.getAlert]]\\n[[PushNotificationIOS.getData]]					<section class="prog__container"><p>Handle push notifications for your app, including permission handling and icon badge number.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#
PushNotificationIOS abandonPermissions	R	PushNotificationIOS.abandonPermissions										
PushNotificationIOS addEventListener	R	PushNotificationIOS.addEventListener										
PushNotificationIOS cancelAllLocalNotifications	R	PushNotificationIOS.cancelAllLocalNotifications										
PushNotificationIOS cancelLocalNotifications	R	PushNotificationIOS.cancelLocalNotifications										
PushNotificationIOS checkPermissions	R	PushNotificationIOS.checkPermissions										
PushNotificationIOS constructor	R	PushNotificationIOS.constructor										
PushNotificationIOS finish	R	PushNotificationIOS.finish										
PushNotificationIOS getAlert	R	PushNotificationIOS.getAlert										
PushNotificationIOS getApplicationIconBadgeNumber	R	PushNotificationIOS.getApplicationIconBadgeNumber										
PushNotificationIOS getBadgeCount	R	PushNotificationIOS.getBadgeCount										
PushNotificationIOS getData	R	PushNotificationIOS.getData										
PushNotificationIOS getInitialNotification	R	PushNotificationIOS.getInitialNotification										
PushNotificationIOS getMessage	R	PushNotificationIOS.getMessage										
PushNotificationIOS getScheduledLocalNotifications	R	PushNotificationIOS.getScheduledLocalNotifications										
PushNotificationIOS getSound	R	PushNotificationIOS.getSound										
PushNotificationIOS removeEventListener	R	PushNotificationIOS.removeEventListener										
PushNotificationIOS requestPermissions	R	PushNotificationIOS.requestPermissions										
PushNotificationIOS scheduleLocalNotification	R	PushNotificationIOS.scheduleLocalNotification										
PushNotificationIOS setApplicationIconBadgeNumber	R	PushNotificationIOS.setApplicationIconBadgeNumber										
PushNotificationIOS.=	A										<section class="prog__container"><pre><code>=(NewData, NoData, ResultFailed, }, static, (, :)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#
PushNotificationIOS.abandonPermissions	A										<section class="prog__container"><p>Unregister for all remote notifications received via Apple Push Notification service.</p><pre><code>abandonPermissions(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#abandonpermissions
PushNotificationIOS.addEventListener	A										<section class="prog__container"><p>Attaches a listener to remote or local notification events while the app is running in the foreground or the background.</p><pre><code>addEventListener(type, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#addeventlistener
PushNotificationIOS.cancelAllLocalNotifications	A										<section class="prog__container"><p>Cancels all scheduled localNotifications</p><pre><code>cancelAllLocalNotifications(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#cancelalllocalnotifications
PushNotificationIOS.cancelLocalNotifications	A										<section class="prog__container"><p>Cancel local notifications.</p><pre><code>cancelLocalNotifications(userInfo)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#cancellocalnotifications
PushNotificationIOS.checkPermissions	A										<section class="prog__container"><p>See what push permissions are currently enabled. callback will be invoked with a permissions object:</p><pre><code>checkPermissions(callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#checkpermissions
PushNotificationIOS.constructor	A										<section class="prog__container"><p>You will never need to instantiate PushNotificationIOS yourself. Listening to the notification event and invoking getInitialNotification is sufficient</p><pre><code>constructor(nativeNotif)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#constructor
PushNotificationIOS.finish	A										<section class="prog__container"><p>This method is available for remote notifications that have been received via: application:didReceiveRemoteNotification:fetchCompletionHandler: https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/UIApplicationDelegate/application:didReceiveRemoteNotification:fetchCompletionHandler:</p><pre><code>finish(fetchResult)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#finish
PushNotificationIOS.getAlert	A										<section class="prog__container"><p>Gets the notification's main message from the aps object</p><pre><code>getAlert(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#getalert
PushNotificationIOS.getApplicationIconBadgeNumber	A										<section class="prog__container"><p>Gets the current badge number for the app icon on the home screen</p><pre><code>getApplicationIconBadgeNumber(callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#getapplicationiconbadgenumber
PushNotificationIOS.getBadgeCount	A										<section class="prog__container"><p>Gets the badge count number from the aps object</p><pre><code>getBadgeCount(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#getbadgecount
PushNotificationIOS.getData	A										<section class="prog__container"><p>Gets the data object on the notif</p><pre><code>getData(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#getdata
PushNotificationIOS.getInitialNotification	A										<section class="prog__container"><p>This method returns a promise that resolves to either the notification object if the app was launched by a push notification, or null otherwise.</p><pre><code>getInitialNotification(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#getinitialnotification
PushNotificationIOS.getMessage	A										<section class="prog__container"><p>An alias for getAlert to get the notification's main message string</p><pre><code>getMessage(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#getmessage
PushNotificationIOS.getScheduledLocalNotifications	A										<section class="prog__container"><p>Gets the local notifications that are currently scheduled.</p><pre><code>getScheduledLocalNotifications(callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#getscheduledlocalnotifications
PushNotificationIOS.getSound	A										<section class="prog__container"><p>Gets the sound string from the aps object</p><pre><code>getSound(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#getsound
PushNotificationIOS.removeEventListener	A										<section class="prog__container"><p>Removes the event listener. Do this in componentWillUnmount to prevent memory leaks</p><pre><code>removeEventListener(type, handler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#removeeventlistener
PushNotificationIOS.requestPermissions	A										<section class="prog__container"><p>Requests notification permissions from iOS, prompting the user's dialog box. By default, it will request all notification permissions, but a subset of these can be requested by passing a map of requested permissions. The following permissions are supported:</p><pre><code>requestPermissions(permissions?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#requestpermissions
PushNotificationIOS.scheduleLocalNotification	A										<section class="prog__container"><p>Schedules the localNotification for future presentation.</p><pre><code>scheduleLocalNotification(details)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#schedulelocalnotification
PushNotificationIOS.setApplicationIconBadgeNumber	A										<section class="prog__container"><p>Sets the badge number for the app icon on the home screen</p><pre><code>setApplicationIconBadgeNumber(number)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/pushnotificationios.html#setapplicationiconbadgenumber
RefreshControl	A					[[RefreshControl.colors]]\\n[[RefreshControl.tintColor]]\\n[[RefreshControl.size]]\\n[[RefreshControl.enabled]]\\n[[RefreshControl.title]]\\n[[RefreshControl.titleColor]]\\n[[RefreshControl.refreshing]]\\n[[RefreshControl.onRefresh]]\\n[[RefreshControl.progressBackgroundColor]]\\n[[RefreshControl.progressViewOffset]]					<section class="prog__container"><p>This component is used inside a ScrollView or ListView to add pull to refresh functionality. When the ScrollView is at scrollY: 0, swiping down triggers an onRefresh event.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#
RefreshControl colors	R	RefreshControl.colors										
RefreshControl enabled	R	RefreshControl.enabled										
RefreshControl onRefresh	R	RefreshControl.onRefresh										
RefreshControl progressBackgroundColor	R	RefreshControl.progressBackgroundColor										
RefreshControl progressViewOffset	R	RefreshControl.progressViewOffset										
RefreshControl refreshing	R	RefreshControl.refreshing										
RefreshControl size	R	RefreshControl.size										
RefreshControl tintColor	R	RefreshControl.tintColor										
RefreshControl title	R	RefreshControl.title										
RefreshControl titleColor	R	RefreshControl.titleColor										
RefreshControl.colors	A										<section class="prog__container"><p>The colors (at least one) that will be used to draw the refresh indicator.</p><pre><code>colors [color]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#colors
RefreshControl.enabled	A										<section class="prog__container"><p>Whether the pull to refresh functionality is enabled.</p><pre><code>enabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#enabled
RefreshControl.onRefresh	A										<section class="prog__container"><p>Called when the view starts refreshing.</p><pre><code>onRefresh function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#onrefresh
RefreshControl.progressBackgroundColor	A										<section class="prog__container"><p>The background color of the refresh indicator.</p><pre><code>progressBackgroundColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#progressbackgroundcolor
RefreshControl.progressViewOffset	A										<section class="prog__container"><p>Progress view top offset</p><pre><code>progressViewOffset number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#progressviewoffset
RefreshControl.refreshing	A										<section class="prog__container"><p>Whether the view should be indicating an active refresh.</p><pre><code>refreshing bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#refreshing
RefreshControl.size	A										<section class="prog__container"><p>Size of the refresh indicator, see RefreshControl.SIZE.</p><pre><code>size enum(RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#size
RefreshControl.tintColor	A										<section class="prog__container"><p>The color of the refresh indicator.</p><pre><code>tintColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#tintcolor
RefreshControl.title	A										<section class="prog__container"><p>The title displayed under the refresh indicator.</p><pre><code>title string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#title
RefreshControl.titleColor	A										<section class="prog__container"><p>Title color.</p><pre><code>titleColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/refreshcontrol.html#titlecolor
Ripple	R	TouchableNativeFeedback.Ripple										
Running On Device	A										<section class="prog__container"><p>It's always a good idea to test your app on an actual device before releasing it to your users. This document will guide you through the necessary steps to run your React Native app on a device.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/running-on-device.html#
ScrollView	A					[[ScrollView.bouncesZoom]]\\n[[ScrollView.automaticallyAdjustContentInsets]]\\n[[ScrollView.scrollIndicatorInsets]]\\n[[ScrollView.minimumZoomScale]]\\n[[ScrollView.style]]\\n[[ScrollView.scrollsToTop]]\\n[[ScrollView.zoomScale]]\\n[[ScrollView.showsVerticalScrollIndicator]]\\n[[ScrollView.scrollPerfTag]]\\n[[ScrollView.contentInset]]\\n[[ScrollView.canCancelContentTouches]]\\n[[ScrollView.showsHorizontalScrollIndicator]]\\n[[ScrollView.removeClippedSubviews]]\\n[[ScrollView.scrollEventThrottle]]\\n[[ScrollView.directionalLockEnabled]]\\n[[ScrollView.scrollWithoutAnimationTo]]\\n[[ScrollView.contentContainerStyle]]\\n[[ScrollView.endFillColor]]\\n[[ScrollView.keyboardShouldPersistTaps]]\\n[[ScrollView.decelerationRate]]\\n[[ScrollView.centerContent]]\\n[[ScrollView.snapToAlignment]]\\n[[ScrollView.keyboardDismissMode]]\\n[[ScrollView.indicatorStyle]]\\n[[ScrollView.scrollTo]]\\n[[ScrollView.contentOffset]]\\n[[ScrollView.alwaysBounceHorizontal]]\\n[[ScrollView.stickyHeaderIndices]]\\n[[ScrollView.onContentSizeChange]]\\n[[ScrollView.maximumZoomScale]]\\n[[ScrollView.refreshControl]]\\n[[ScrollView.horizontal]]\\n[[ScrollView.onScrollAnimationEnd]]\\n[[ScrollView.snapToInterval]]\\n[[ScrollView.pagingEnabled]]\\n[[ScrollView.bounces]]\\n[[ScrollView.alwaysBounceVertical]]\\n[[ScrollView.scrollEnabled]]\\n[[ScrollView.onScroll]]					<section class="prog__container"><p>Component that wraps platform ScrollView while providing integration with touch locking "responder" system.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#
ScrollView alwaysBounceHorizontal	R	ScrollView.alwaysBounceHorizontal										
ScrollView alwaysBounceVertical	R	ScrollView.alwaysBounceVertical										
ScrollView automaticallyAdjustContentInsets	R	ScrollView.automaticallyAdjustContentInsets										
ScrollView bounces	R	ScrollView.bounces										
ScrollView bouncesZoom	R	ScrollView.bouncesZoom										
ScrollView canCancelContentTouches	R	ScrollView.canCancelContentTouches										
ScrollView centerContent	R	ScrollView.centerContent										
ScrollView contentContainerStyle	R	ScrollView.contentContainerStyle										
ScrollView contentInset	R	ScrollView.contentInset										
ScrollView contentOffset	R	ScrollView.contentOffset										
ScrollView decelerationRate	R	ScrollView.decelerationRate										
ScrollView directionalLockEnabled	R	ScrollView.directionalLockEnabled										
ScrollView endFillColor	R	ScrollView.endFillColor										
ScrollView horizontal	R	ScrollView.horizontal										
ScrollView indicatorStyle	R	ScrollView.indicatorStyle										
ScrollView keyboardDismissMode	R	ScrollView.keyboardDismissMode										
ScrollView keyboardShouldPersistTaps	R	ScrollView.keyboardShouldPersistTaps										
ScrollView maximumZoomScale	R	ScrollView.maximumZoomScale										
ScrollView minimumZoomScale	R	ScrollView.minimumZoomScale										
ScrollView onContentSizeChange	R	ScrollView.onContentSizeChange										
ScrollView onScroll	R	ScrollView.onScroll										
ScrollView onScrollAnimationEnd	R	ScrollView.onScrollAnimationEnd										
ScrollView pagingEnabled	R	ScrollView.pagingEnabled										
ScrollView refreshControl	R	ScrollView.refreshControl										
ScrollView removeClippedSubviews	R	ScrollView.removeClippedSubviews										
ScrollView scrollEnabled	R	ScrollView.scrollEnabled										
ScrollView scrollEventThrottle	R	ScrollView.scrollEventThrottle										
ScrollView scrollIndicatorInsets	R	ScrollView.scrollIndicatorInsets										
ScrollView scrollPerfTag	R	ScrollView.scrollPerfTag										
ScrollView scrollTo	R	ScrollView.scrollTo										
ScrollView scrollWithoutAnimationTo	R	ScrollView.scrollWithoutAnimationTo										
ScrollView scrollsToTop	R	ScrollView.scrollsToTop										
ScrollView showsHorizontalScrollIndicator	R	ScrollView.showsHorizontalScrollIndicator										
ScrollView showsVerticalScrollIndicator	R	ScrollView.showsVerticalScrollIndicator										
ScrollView snapToAlignment	R	ScrollView.snapToAlignment										
ScrollView snapToInterval	R	ScrollView.snapToInterval										
ScrollView stickyHeaderIndices	R	ScrollView.stickyHeaderIndices										
ScrollView style	R	ScrollView.style										
ScrollView zoomScale	R	ScrollView.zoomScale										
ScrollView.alwaysBounceHorizontal	A										<section class="prog__container"><p>When true, the scroll view bounces horizontally when it reaches the end even if the content is smaller than the scroll view itself. The default value is true when horizontal={true} and false otherwise.</p><pre><code>alwaysBounceHorizontal bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#alwaysbouncehorizontal
ScrollView.alwaysBounceVertical	A										<section class="prog__container"><p>When true, the scroll view bounces vertically when it reaches the end even if the content is smaller than the scroll view itself. The default value is false when horizontal={true} and true otherwise.</p><pre><code>alwaysBounceVertical bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#alwaysbouncevertical
ScrollView.automaticallyAdjustContentInsets	A										<section class="prog__container"><p>Controls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar. The default value is true.</p><pre><code>automaticallyAdjustContentInsets bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#automaticallyadjustcontentinsets
ScrollView.bounces	A										<section class="prog__container"><p>When true, the scroll view bounces when it reaches the end of the content if the content is larger then the scroll view along the axis of the scroll direction. When false, it disables all bouncing even if the alwaysBounce* props are true. The default value is true.</p><pre><code>bounces bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#bounces
ScrollView.bouncesZoom	A										<section class="prog__container"><p>When true, gestures can drive zoom past min/max and the zoom will animate to the min/max value at gesture end, otherwise the zoom will not exceed the limits.</p><pre><code>bouncesZoom bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#bounceszoom
ScrollView.canCancelContentTouches	A										<section class="prog__container"><p>When false, once tracking starts, won't try to drag if the touch moves. The default value is true.</p><pre><code>canCancelContentTouches bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#cancancelcontenttouches
ScrollView.centerContent	A										<section class="prog__container"><p>When true, the scroll view automatically centers the content when the content is smaller than the scroll view bounds; when the content is larger than the scroll view, this property has no effect. The default value is false.</p><pre><code>centerContent bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#centercontent
ScrollView.contentContainerStyle	A										<section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#contentcontainerstyle
ScrollView.contentInset	A										<section class="prog__container"><p>The amount by which the scroll view content is inset from the edges of the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.</p><pre><code>contentInset {top: number, left: number, bottom: number, right: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#contentinset
ScrollView.contentOffset	A										<section class="prog__container"><p>Used to manually set the starting scroll offset. The default value is {x: 0, y: 0}.</p><pre><code>contentOffset PointPropType</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#contentoffset
ScrollView.decelerationRate	A										<section class="prog__container"><p>A floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use string shortcuts "normal" and "fast" which match the underlying iOS settings for UIScrollViewDecelerationRateNormal and UIScrollViewDecelerationRateFast respectively.  - normal: 0.998 (the default)  - fast: 0.99</p><pre><code>decelerationRate enum('fast', 'normal'), number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#decelerationrate
ScrollView.directionalLockEnabled	A										<section class="prog__container"><p>When true, the ScrollView will try to lock to only vertical or horizontal scrolling while dragging. The default value is false.</p><pre><code>directionalLockEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#directionallockenabled
ScrollView.endFillColor	A										<section class="prog__container"><p>Sometimes a scrollview takes up more space than its content fills. When this is the case, this prop will fill the rest of the scrollview with a color to avoid setting a background and creating unnecessary overdraw. This is an advanced optimization that is not needed in the general case.</p><pre><code>endFillColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#endfillcolor
ScrollView.horizontal	A										<section class="prog__container"><p>When true, the scroll view's children are arranged horizontally in a row instead of vertically in a column. The default value is false.</p><pre><code>horizontal bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#horizontal
ScrollView.indicatorStyle	A										<section class="prog__container"><p>The style of the scroll indicators.  - default (the default), same as black.  - black, scroll indicator is black. This style is good against a white content background.  - white, scroll indicator is white. This style is good against a black content background.</p><pre><code>indicatorStyle enum('default', 'black', 'white')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#indicatorstyle
ScrollView.keyboardDismissMode	A										<section class="prog__container"><p>Determines whether the keyboard gets dismissed in response to a drag.  - 'none' (the default), drags do not dismiss the keyboard.  - 'on-drag', the keyboard is dismissed when a drag begins.  - 'interactive', the keyboard is dismissed interactively with the drag and moves in   synchrony with the touch; dragging upwards cancels the dismissal.   On android this is not supported and it will have the same behavior as 'none'.</p><pre><code>keyboardDismissMode enum('none', 'interactive', 'on-drag')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#keyboarddismissmode
ScrollView.keyboardShouldPersistTaps	A										<section class="prog__container"><p>Determines when the keyboard should stay visible after a tap.</p><pre><code>keyboardShouldPersistTaps enum('always', 'never', 'handled', false, true)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#keyboardshouldpersisttaps
ScrollView.maximumZoomScale	A										<section class="prog__container"><p>The maximum allowed zoom scale. The default value is 1.0.</p><pre><code>maximumZoomScale number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#maximumzoomscale
ScrollView.minimumZoomScale	A										<section class="prog__container"><p>The minimum allowed zoom scale. The default value is 1.0.</p><pre><code>minimumZoomScale number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#minimumzoomscale
ScrollView.onContentSizeChange	A										<section class="prog__container"><p>Called when scrollable content view of the ScrollView changes.</p><pre><code>onContentSizeChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#oncontentsizechange
ScrollView.onScroll	A										<section class="prog__container"><p>Fires at most once per frame during scrolling. The frequency of the events can be controlled using the scrollEventThrottle prop.</p><pre><code>onScroll function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#onscroll
ScrollView.onScrollAnimationEnd	A										<section class="prog__container"><p>Called when a scrolling animation ends.</p><pre><code>onScrollAnimationEnd function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#onscrollanimationend
ScrollView.pagingEnabled	A										<section class="prog__container"><p>When true, the scroll view stops on multiples of the scroll view's size when scrolling. This can be used for horizontal pagination. The default value is false.</p><pre><code>pagingEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#pagingenabled
ScrollView.refreshControl	A										<section class="prog__container"><p>A RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.</p><pre><code>refreshControl element</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#refreshcontrol
ScrollView.removeClippedSubviews	A										<section class="prog__container"><p>Experimental: When true, offscreen child views (whose overflow value is hidden) are removed from their native backing superview when offscreen. This can improve scrolling performance on long lists. The default value is true.</p><pre><code>removeClippedSubviews bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#removeclippedsubviews
ScrollView.scrollEnabled	A										<section class="prog__container"><p>When false, the content does not scroll. The default value is true.</p><pre><code>scrollEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#scrollenabled
ScrollView.scrollEventThrottle	A										<section class="prog__container"><p>This controls how often the scroll event will be fired while scrolling (as a time interval in ms). A lower number yields better accuracy for code that is tracking the scroll position, but can lead to scroll performance problems due to the volume of information being send over the bridge. You will not notice a difference between values set between 1-16 as the JS run loop is synced to the screen refresh rate. If you do not need precise scroll position tracking, set this value higher to limit the information being sent across the bridge. The default value is zero, which results in the scroll event being sent only once each time the view is scrolled.</p><pre><code>scrollEventThrottle number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#scrolleventthrottle
ScrollView.scrollIndicatorInsets	A										<section class="prog__container"><p>The amount by which the scroll view indicators are inset from the edges of the scroll view. This should normally be set to the same value as the contentInset. Defaults to {0, 0, 0, 0}.</p><pre><code>scrollIndicatorInsets {top: number, left: number, bottom: number, right: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#scrollindicatorinsets
ScrollView.scrollPerfTag	A										<section class="prog__container"><p>Tag used to log scroll performance on this scroll view. Will force momentum events to be turned on (see sendMomentumEvents). This doesn't do anything out of the box and you need to implement a custom native FpsListener for it to be useful.</p><pre><code>scrollPerfTag string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#scrollperftag
ScrollView.scrollTo	A										<section class="prog__container"><p>Scrolls to a given x, y offset, either immediately or with a smooth animation.</p><pre><code>scrollTo(y?, x?, animated?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#scrollto
ScrollView.scrollWithoutAnimationTo	A										<section class="prog__container"><p>Deprecated, do not use.</p><pre><code>scrollWithoutAnimationTo(y, x)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#scrollwithoutanimationto
ScrollView.scrollsToTop	A										<section class="prog__container"><p>When true, the scroll view scrolls to top when the status bar is tapped. The default value is true.</p><pre><code>scrollsToTop bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#scrollstotop
ScrollView.showsHorizontalScrollIndicator	A										<section class="prog__container"><p>When true, shows a horizontal scroll indicator. The default value is true.</p><pre><code>showsHorizontalScrollIndicator bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#showshorizontalscrollindicator
ScrollView.showsVerticalScrollIndicator	A										<section class="prog__container"><p>When true, shows a vertical scroll indicator. The default value is true.</p><pre><code>showsVerticalScrollIndicator bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#showsverticalscrollindicator
ScrollView.snapToAlignment	A										<section class="prog__container"><p>When snapToInterval is set, snapToAlignment will define the relationship of the snapping to the scroll view.  - start (the default) will align the snap at the left (horizontal) or top (vertical)  - center will align the snap in the center  - end will align the snap at the right (horizontal) or bottom (vertical)</p><pre><code>snapToAlignment enum('start', 'center', 'end')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#snaptoalignment
ScrollView.snapToInterval	A										<section class="prog__container"><p>When set, causes the scroll view to stop at multiples of the value of snapToInterval. This can be used for paginating through children that have lengths smaller than the scroll view. Used in combination with snapToAlignment.</p><pre><code>snapToInterval number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#snaptointerval
ScrollView.stickyHeaderIndices	A										<section class="prog__container"><p>An array of child indices determining which children get docked to the top of the screen when scrolling. For example, passing stickyHeaderIndices={[0]} will cause the first child to be fixed to the top of the scroll view. This property is not supported in conjunction with horizontal={true}.</p><pre><code>stickyHeaderIndices [number]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#stickyheaderindices
ScrollView.style	A										<section class="prog__container"><p>(Android-only) Sets the elevation of a view, using Android's underlying elevation API. This adds a drop shadow to the item and affects z-order for overlapping views. Only supported on Android 5.0+, has no effect on earlier versions.</p><pre><code>style style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#style
ScrollView.zoomScale	A										<section class="prog__container"><p>The current scale of the scroll view content. The default value is 1.0.</p><pre><code>zoomScale number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/scrollview.html#zoomscale
SegmentedControlIOS	A					[[SegmentedControlIOS.enabled]]\\n[[SegmentedControlIOS.tintColor]]\\n[[SegmentedControlIOS.values]]\\n[[SegmentedControlIOS.momentary]]\\n[[SegmentedControlIOS.onChange]]\\n[[SegmentedControlIOS.onValueChange]]\\n[[SegmentedControlIOS.selectedIndex]]					<section class="prog__container"><p>Use SegmentedControlIOS to render a UISegmentedControl iOS.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/segmentedcontrolios.html#
SegmentedControlIOS enabled	R	SegmentedControlIOS.enabled										
SegmentedControlIOS momentary	R	SegmentedControlIOS.momentary										
SegmentedControlIOS onChange	R	SegmentedControlIOS.onChange										
SegmentedControlIOS onValueChange	R	SegmentedControlIOS.onValueChange										
SegmentedControlIOS selectedIndex	R	SegmentedControlIOS.selectedIndex										
SegmentedControlIOS tintColor	R	SegmentedControlIOS.tintColor										
SegmentedControlIOS values	R	SegmentedControlIOS.values										
SegmentedControlIOS.enabled	A										<section class="prog__container"><p>If false the user won't be able to interact with the control. Default value is true.</p><pre><code>enabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/segmentedcontrolios.html#enabled
SegmentedControlIOS.momentary	A										<section class="prog__container"><p>If true, then selecting a segment won't persist visually. The onValueChange callback will still work as expected.</p><pre><code>momentary bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/segmentedcontrolios.html#momentary
SegmentedControlIOS.onChange	A										<section class="prog__container"><p>Callback that is called when the user taps a segment; passes the event as an argument</p><pre><code>onChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/segmentedcontrolios.html#onchange
SegmentedControlIOS.onValueChange	A										<section class="prog__container"><p>Callback that is called when the user taps a segment; passes the segment's value as an argument</p><pre><code>onValueChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/segmentedcontrolios.html#onvaluechange
SegmentedControlIOS.selectedIndex	A										<section class="prog__container"><p>The index in props.values of the segment to be (pre)selected.</p><pre><code>selectedIndex number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/segmentedcontrolios.html#selectedindex
SegmentedControlIOS.tintColor	A										<section class="prog__container"><p>Accent color of the control.</p><pre><code>tintColor string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/segmentedcontrolios.html#tintcolor
SegmentedControlIOS.values	A										<section class="prog__container"><p>The labels for the control's segment buttons, in order.</p><pre><code>values [string]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/segmentedcontrolios.html#values
SelectableBackground	R	TouchableNativeFeedback.SelectableBackground										
SelectableBackgroundBorderless	R	TouchableNativeFeedback.SelectableBackgroundBorderless										
Settings	A					[[Settings.set]]\\n[[Settings.watchKeys]]\\n[[Settings.get]]\\n[[Settings.clearWatch]]					<section class="prog__container"><p>You can edit the content above on GitHub and send us a pull request!</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/settings.html#
Settings clearWatch	R	Settings.clearWatch										
Settings get	R	Settings.get										
Settings set	R	Settings.set										
Settings watchKeys	R	Settings.watchKeys										
Settings.clearWatch	A										<section class="prog__container"><pre><code>clearWatch(watchId)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/settings.html#clearwatch
Settings.get	A										<section class="prog__container"><pre><code>get(key)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/settings.html#get
Settings.set	A										<section class="prog__container"><pre><code>set(settings)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/settings.html#set
Settings.watchKeys	A										<section class="prog__container"><pre><code>watchKeys(keys, callback)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/settings.html#watchkeys
Shadow Props	A					[[Shadow Props.shadowOpacity]]\\n[[Shadow Props.shadowColor]]\\n[[Shadow Props.shadowRadius]]\\n[[Shadow Props.shadowOffset]]					<section class="prog__container"><p>Sets the drop shadow color</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/shadow-props.html#
Shadow Props shadowColor	R	Shadow Props.shadowColor										
Shadow Props shadowOffset	R	Shadow Props.shadowOffset										
Shadow Props shadowOpacity	R	Shadow Props.shadowOpacity										
Shadow Props shadowRadius	R	Shadow Props.shadowRadius										
Shadow Props.shadowColor	A										<section class="prog__container"><p>Sets the drop shadow color</p><pre><code>shadowColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/shadow-props.html#shadowcolor
Shadow Props.shadowOffset	A										<section class="prog__container"><p>Sets the drop shadow offset</p><pre><code>shadowOffset {width: number, height: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/shadow-props.html#shadowoffset
Shadow Props.shadowOpacity	A										<section class="prog__container"><p>Sets the drop shadow opacity (multiplied by the color's alpha component)</p><pre><code>shadowOpacity number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/shadow-props.html#shadowopacity
Shadow Props.shadowRadius	A										<section class="prog__container"><p>Sets the drop shadow blur radius</p><pre><code>shadowRadius number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/shadow-props.html#shadowradius
Share	A					[[Share.sharedAction]]\\n[[Share.share]]\\n[[Share.dismissedAction]]					<section class="prog__container"><p>Open a dialog to share text content.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/share.html#
Share dismissedAction	R	Share.dismissedAction										
Share share	R	Share.share										
Share sharedAction	R	Share.sharedAction										
Share.dismissedAction	A										<section class="prog__container"><p>The dialog has been dismissed. @platform ios</p><pre><code>dismissedAction(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/share.html#dismissedaction
Share.share	A										<section class="prog__container"><p>Open a dialog to share text content.</p><pre><code>share(content, options)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/share.html#share
Share.sharedAction	A										<section class="prog__container"><p>The content was successfully shared.</p><pre><code>sharedAction(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/share.html#sharedaction
Slider	A					[[Slider.minimumTrackImage]]\\n[[Slider.disabled]]\\n[[Slider.style]]\\n[[Slider.maximumTrackTintColor]]\\n[[Slider.minimumTrackTintColor]]\\n[[Slider.onSlidingComplete]]\\n[[Slider.step]]\\n[[Slider.maximumTrackImage]]\\n[[Slider.value]]\\n[[Slider.minimumValue]]\\n[[Slider.testID]]\\n[[Slider.thumbImage]]\\n[[Slider.maximumValue]]\\n[[Slider.onValueChange]]\\n[[Slider.trackImage]]					<section class="prog__container"><p>A component used to select a single value from a range of values.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#
Slider disabled	R	Slider.disabled										
Slider maximumTrackImage	R	Slider.maximumTrackImage										
Slider maximumTrackTintColor	R	Slider.maximumTrackTintColor										
Slider maximumValue	R	Slider.maximumValue										
Slider minimumTrackImage	R	Slider.minimumTrackImage										
Slider minimumTrackTintColor	R	Slider.minimumTrackTintColor										
Slider minimumValue	R	Slider.minimumValue										
Slider onSlidingComplete	R	Slider.onSlidingComplete										
Slider onValueChange	R	Slider.onValueChange										
Slider step	R	Slider.step										
Slider style	R	Slider.style										
Slider testID	R	Slider.testID										
Slider thumbImage	R	Slider.thumbImage										
Slider trackImage	R	Slider.trackImage										
Slider value	R	Slider.value										
Slider.disabled	A										<section class="prog__container"><p>If true the user won't be able to move the slider. Default value is false.</p><pre><code>disabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#disabled
Slider.maximumTrackImage	A										<section class="prog__container"><p>Assigns a maximum track image. Only static images are supported. The leftmost pixel of the image will be stretched to fill the track.</p><pre><code>maximumTrackImage Image.propTypes.source</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#maximumtrackimage
Slider.maximumTrackTintColor	A										<section class="prog__container"><p>The color used for the track to the right of the button. Overrides the default blue gradient image.</p><pre><code>maximumTrackTintColor string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#maximumtracktintcolor
Slider.maximumValue	A										<section class="prog__container"><p>Initial maximum value of the slider. Default value is 1.</p><pre><code>maximumValue number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#maximumvalue
Slider.minimumTrackImage	A										<section class="prog__container"><p>Assigns a minimum track image. Only static images are supported. The rightmost pixel of the image will be stretched to fill the track.</p><pre><code>minimumTrackImage Image.propTypes.source</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#minimumtrackimage
Slider.minimumTrackTintColor	A										<section class="prog__container"><p>The color used for the track to the left of the button. Overrides the default blue gradient image.</p><pre><code>minimumTrackTintColor string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#minimumtracktintcolor
Slider.minimumValue	A										<section class="prog__container"><p>Initial minimum value of the slider. Default value is 0.</p><pre><code>minimumValue number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#minimumvalue
Slider.onSlidingComplete	A										<section class="prog__container"><p>Callback called when the user finishes changing the value (e.g. when the slider is released).</p><pre><code>onSlidingComplete function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#onslidingcomplete
Slider.onValueChange	A										<section class="prog__container"><p>Callback continuously called while the user is dragging the slider.</p><pre><code>onValueChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#onvaluechange
Slider.step	A										<section class="prog__container"><p>Step value of the slider. The value should be between 0 and (maximumValue - minimumValue). Default value is 0.</p><pre><code>step number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#step
Slider.style	A										<section class="prog__container"><p>Used to style and layout the Slider. See StyleSheet.js and ViewStylePropTypes.js for more info.</p><pre><code>style View#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#style
Slider.testID	A										<section class="prog__container"><p>Used to locate this view in UI automation tests.</p><pre><code>testID string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#testid
Slider.thumbImage	A										<section class="prog__container"><p>Sets an image for the thumb. Only static images are supported.</p><pre><code>thumbImage Image.propTypes.source</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#thumbimage
Slider.trackImage	A										<section class="prog__container"><p>Assigns a single image for the track. Only static images are supported. The center pixel of the image will be stretched to fill the track.</p><pre><code>trackImage Image.propTypes.source</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#trackimage
Slider.value	A										<section class="prog__container"><p>Initial value of the slider. The value should be between minimumValue and maximumValue, which default to 0 and 1 respectively. Default value is 0.</p><pre><code>value number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/slider.html#value
SnapshotViewIOS	A					[[SnapshotViewIOS.onSnapshotReady]]\\n[[SnapshotViewIOS.testIdentifier]]					<section class="prog__container"><p>You can edit the content above on GitHub and send us a pull request!</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/snapshotviewios.html#
SnapshotViewIOS onSnapshotReady	R	SnapshotViewIOS.onSnapshotReady										
SnapshotViewIOS testIdentifier	R	SnapshotViewIOS.testIdentifier										
SnapshotViewIOS.onSnapshotReady	A										<section class="prog__container"><pre><code>onSnapshotReady function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/snapshotviewios.html#onsnapshotready
SnapshotViewIOS.testIdentifier	A										<section class="prog__container"><pre><code>testIdentifier string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/snapshotviewios.html#testidentifier
State	A										<section class="prog__container"><p>There are two types of data that control a component: props and state. props are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use state.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/state.html#
StatusBar	A					[[StatusBar.setNetworkActivityIndicatorVisible]]\\n[[StatusBar.backgroundColor]]\\n[[StatusBar.setTranslucent]]\\n[[StatusBar.setBarStyle]]\\n[[StatusBar.hidden]]\\n[[StatusBar.setBackgroundColor]]\\n[[StatusBar.animated]]\\n[[StatusBar.translucent]]\\n[[StatusBar.showHideTransition]]\\n[[StatusBar.barStyle]]\\n[[StatusBar.setHidden]]\\n[[StatusBar.networkActivityIndicatorVisible]]					<section class="prog__container"><p>Component to control the app status bar.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#
StatusBar animated	R	StatusBar.animated										
StatusBar backgroundColor	R	StatusBar.backgroundColor										
StatusBar barStyle	R	StatusBar.barStyle										
StatusBar hidden	R	StatusBar.hidden										
StatusBar networkActivityIndicatorVisible	R	StatusBar.networkActivityIndicatorVisible										
StatusBar setBackgroundColor	R	StatusBar.setBackgroundColor										
StatusBar setBarStyle	R	StatusBar.setBarStyle										
StatusBar setHidden	R	StatusBar.setHidden										
StatusBar setNetworkActivityIndicatorVisible	R	StatusBar.setNetworkActivityIndicatorVisible										
StatusBar setTranslucent	R	StatusBar.setTranslucent										
StatusBar showHideTransition	R	StatusBar.showHideTransition										
StatusBar translucent	R	StatusBar.translucent										
StatusBar.animated	A										<section class="prog__container"><p>If the transition between status bar property changes should be animated. Supported for backgroundColor, barStyle and hidden.</p><pre><code>animated bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#animated
StatusBar.backgroundColor	A										<section class="prog__container"><p>The background color of the status bar.</p><pre><code>backgroundColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#backgroundcolor
StatusBar.barStyle	A										<section class="prog__container"><p>Sets the color of the status bar text.</p><pre><code>barStyle enum('default', 'light-content', 'dark-content')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#barstyle
StatusBar.hidden	A										<section class="prog__container"><p>If the status bar is hidden.</p><pre><code>hidden bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#hidden
StatusBar.networkActivityIndicatorVisible	A										<section class="prog__container"><p>If the network activity indicator should be visible.</p><pre><code>networkActivityIndicatorVisible bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#networkactivityindicatorvisible
StatusBar.setBackgroundColor	A										<section class="prog__container"><p>Set the background color for the status bar</p><pre><code>setBackgroundColor(color, animated?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#setbackgroundcolor
StatusBar.setBarStyle	A										<section class="prog__container"><p>Set the status bar style</p><pre><code>setBarStyle(style, animated?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#setbarstyle
StatusBar.setHidden	A										<section class="prog__container"><p>Show or hide the status bar</p><pre><code>setHidden(hidden, animation?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#sethidden
StatusBar.setNetworkActivityIndicatorVisible	A										<section class="prog__container"><p>Control the visibility of the network activity indicator</p><pre><code>setNetworkActivityIndicatorVisible(visible)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#setnetworkactivityindicatorvisible
StatusBar.setTranslucent	A										<section class="prog__container"><p>Control the translucency of the status bar</p><pre><code>setTranslucent(translucent)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#settranslucent
StatusBar.showHideTransition	A										<section class="prog__container"><p>The transition effect when showing and hiding the status bar using the hidden prop. Defaults to 'fade'.</p><pre><code>showHideTransition enum('fade', 'slide')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#showhidetransition
StatusBar.translucent	A										<section class="prog__container"><p>If the status bar is translucent. When translucent is set to true, the app will draw under the status bar. This is useful when using a semi transparent status bar color.</p><pre><code>translucent bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbar.html#translucent
StatusBarIOS	A										<section class="prog__container"><p>Use StatusBar for mutating the status bar.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/statusbarios.html#
Style	A										<section class="prog__container"><p>With React Native, you don't use a special language or syntax for defining styles. You just style your application using JavaScript. All of the core components accept a prop named style. The style names and values usually match how CSS works on the web, except names are written using camel casing, e.g backgroundColor rather than background-color.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/style.html#
StyleSheet	A					[[StyleSheet.create]]\\n[[StyleSheet.setStyleAttributePreprocessor]]					<section class="prog__container"><p>A StyleSheet is an abstraction similar to CSS StyleSheets</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/stylesheet.html#
StyleSheet create	R	StyleSheet.create										
StyleSheet setStyleAttributePreprocessor	R	StyleSheet.setStyleAttributePreprocessor										
StyleSheet.create	A										<section class="prog__container"><p>Creates a StyleSheet style reference from the given object.</p><pre><code>create(obj)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/stylesheet.html#create
StyleSheet.setStyleAttributePreprocessor	A										<section class="prog__container"><p>WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.</p><pre><code>setStyleAttributePreprocessor(property, process)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/stylesheet.html#setstyleattributepreprocessor
Switch	A					[[Switch.value]]\\n[[Switch.onTintColor]]\\n[[Switch.disabled]]\\n[[Switch.thumbTintColor]]\\n[[Switch.onValueChange]]\\n[[Switch.testID]]\\n[[Switch.tintColor]]					<section class="prog__container"><p>Renders a boolean input.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/switch.html#
Switch disabled	R	Switch.disabled										
Switch onTintColor	R	Switch.onTintColor										
Switch onValueChange	R	Switch.onValueChange										
Switch testID	R	Switch.testID										
Switch thumbTintColor	R	Switch.thumbTintColor										
Switch tintColor	R	Switch.tintColor										
Switch value	R	Switch.value										
Switch.disabled	A										<section class="prog__container"><p>If true the user won't be able to toggle the switch. Default value is false.</p><pre><code>disabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/switch.html#disabled
Switch.onTintColor	A										<section class="prog__container"><p>Background color when the switch is turned on.</p><pre><code>onTintColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/switch.html#ontintcolor
Switch.onValueChange	A										<section class="prog__container"><p>Invoked with the new value when the value changes.</p><pre><code>onValueChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/switch.html#onvaluechange
Switch.testID	A										<section class="prog__container"><p>Used to locate this view in end-to-end tests.</p><pre><code>testID string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/switch.html#testid
Switch.thumbTintColor	A										<section class="prog__container"><p>Color of the foreground switch grip.</p><pre><code>thumbTintColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/switch.html#thumbtintcolor
Switch.tintColor	A										<section class="prog__container"><p>Border color when the switch is turned off.</p><pre><code>tintColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/switch.html#tintcolor
Switch.value	A										<section class="prog__container"><p>The value of the switch. If true the switch will be turned on. Default value is false.</p><pre><code>value bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/switch.html#value
Systrace	A					[[Systrace.beginAsyncEvent]]\\n[[Systrace.attachToRelayProfiler]]\\n[[Systrace.endEvent]]\\n[[Systrace.setEnabled]]\\n[[Systrace.counterEvent]]\\n[[Systrace.swizzleJSON]]\\n[[Systrace.measure]]\\n[[Systrace.measureMethods]]\\n[[Systrace.beginEvent]]\\n[[Systrace.endAsyncEvent]]					<section class="prog__container"><p>beginEvent/endEvent for starting and then ending a profile within the same call stack frame</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#
Systrace attachToRelayProfiler	R	Systrace.attachToRelayProfiler										
Systrace beginAsyncEvent	R	Systrace.beginAsyncEvent										
Systrace beginEvent	R	Systrace.beginEvent										
Systrace counterEvent	R	Systrace.counterEvent										
Systrace endAsyncEvent	R	Systrace.endAsyncEvent										
Systrace endEvent	R	Systrace.endEvent										
Systrace measure	R	Systrace.measure										
Systrace measureMethods	R	Systrace.measureMethods										
Systrace setEnabled	R	Systrace.setEnabled										
Systrace swizzleJSON	R	Systrace.swizzleJSON										
Systrace.attachToRelayProfiler	A										<section class="prog__container"><p>Relay profiles use await calls, so likely occur out of current stack frame therefore async variant of profiling is used</p><pre><code>attachToRelayProfiler(relayProfiler)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#attachtorelayprofiler
Systrace.beginAsyncEvent	A										<section class="prog__container"><p>beginAsyncEvent/endAsyncEvent for starting and then ending a profile where the end can either occur on another thread or out of the current stack frame, eg await the returned cookie variable should be used as input into the endAsyncEvent call to end the profile</p><pre><code>beginAsyncEvent(profileName?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#beginasyncevent
Systrace.beginEvent	A										<section class="prog__container"><p>beginEvent/endEvent for starting and then ending a profile within the same call stack frame</p><pre><code>beginEvent(profileName?, args?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#beginevent
Systrace.counterEvent	A										<section class="prog__container"><p>counterEvent registers the value to the profileName on the systrace timeline</p><pre><code>counterEvent(profileName?, value?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#counterevent
Systrace.endAsyncEvent	A										<section class="prog__container"><pre><code>endAsyncEvent(profileName?, cookie?)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#endasyncevent
Systrace.endEvent	A										<section class="prog__container"><pre><code>endEvent(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#endevent
Systrace.measure	A										<section class="prog__container"><p>Returns an profiled version of the input function. For example, you can: JSON.parse = Systrace.measure('JSON', 'parse', JSON.parse);</p><pre><code>measure(objName, fnName, func)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#measure
Systrace.measureMethods	A										<section class="prog__container"><p>Measures multiple methods of a class. For example, you can do: Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);</p><pre><code>measureMethods(object, objectName, methodNames)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#measuremethods
Systrace.setEnabled	A										<section class="prog__container"><pre><code>setEnabled(enabled)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#setenabled
Systrace.swizzleJSON	A										<section class="prog__container"><p>This is not called by default due to perf overhead but it's useful if you want to find traces which spend too much time in JSON.</p><pre><code>swizzleJSON(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/systrace.html#swizzlejson
TabBarIOS	A					[[TabBarIOS.unselectedItemTintColor]]\\n[[TabBarIOS.unselectedTintColor]]\\n[[TabBarIOS.barTintColor]]\\n[[TabBarIOS.tintColor]]\\n[[TabBarIOS.style]]\\n[[TabBarIOS.translucent]]\\n[[TabBarIOS.itemPositioning]]\\n[[TabBarIOS.Item]]					<section class="prog__container"><p>Background color of the tab bar</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios.html#
TabBarIOS Item	R	TabBarIOS.Item										
TabBarIOS Item badge	R	TabBarIOS.Item.badge										
TabBarIOS Item badgeColor	R	TabBarIOS.Item.badgeColor										
TabBarIOS Item icon	R	TabBarIOS.Item.icon										
TabBarIOS Item onPress	R	TabBarIOS.Item.onPress										
TabBarIOS Item renderAsOriginal	R	TabBarIOS.Item.renderAsOriginal										
TabBarIOS Item selected	R	TabBarIOS.Item.selected										
TabBarIOS Item selectedIcon	R	TabBarIOS.Item.selectedIcon										
TabBarIOS Item style	R	TabBarIOS.Item.style										
TabBarIOS Item systemIcon	R	TabBarIOS.Item.systemIcon										
TabBarIOS Item title	R	TabBarIOS.Item.title										
TabBarIOS badge	R	TabBarIOS.Item.badge										
TabBarIOS badgeColor	R	TabBarIOS.Item.badgeColor										
TabBarIOS barTintColor	R	TabBarIOS.barTintColor										
TabBarIOS icon	R	TabBarIOS.Item.icon										
TabBarIOS itemPositioning	R	TabBarIOS.itemPositioning										
TabBarIOS onPress	R	TabBarIOS.Item.onPress										
TabBarIOS renderAsOriginal	R	TabBarIOS.Item.renderAsOriginal										
TabBarIOS selected	R	TabBarIOS.Item.selected										
TabBarIOS selectedIcon	R	TabBarIOS.Item.selectedIcon										
TabBarIOS style	D								*[[TabBarIOS.Item.style]] <section class="prog__container"><p>React style object.</p><pre><code>style View#style</code></pre></section>\n*[[TabBarIOS.style]] <section class="prog__container"><pre><code>style View#style</code></pre></section>			
TabBarIOS systemIcon	R	TabBarIOS.Item.systemIcon										
TabBarIOS tintColor	R	TabBarIOS.tintColor										
TabBarIOS title	R	TabBarIOS.Item.title										
TabBarIOS translucent	R	TabBarIOS.translucent										
TabBarIOS unselectedItemTintColor	R	TabBarIOS.unselectedItemTintColor										
TabBarIOS unselectedTintColor	R	TabBarIOS.unselectedTintColor										
TabBarIOS.Item	A					[[TabBarIOS.Item.badge]]\\n[[TabBarIOS.Item.selected]]\\n[[TabBarIOS.Item.systemIcon]]\\n[[TabBarIOS.Item.badgeColor]]\\n[[TabBarIOS.Item.selectedIcon]]\\n[[TabBarIOS.Item.title]]\\n[[TabBarIOS.Item.icon]]\\n[[TabBarIOS.Item.onPress]]\\n[[TabBarIOS.Item.style]]\\n[[TabBarIOS.Item.renderAsOriginal]]					<section class="prog__container"><p>Little red bubble that sits at the top right of the icon.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#
TabBarIOS.Item.badge	A										<section class="prog__container"><p>Little red bubble that sits at the top right of the icon.</p><pre><code>badge string, number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#badge
TabBarIOS.Item.badgeColor	A										<section class="prog__container"><p>Background color for the badge. Available since iOS 10.</p><pre><code>badgeColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#badgecolor
TabBarIOS.Item.icon	A										<section class="prog__container"><p>A custom icon for the tab. It is ignored when a system icon is defined.</p><pre><code>icon Image.propTypes.source</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#icon
TabBarIOS.Item.onPress	A										<section class="prog__container"><p>Callback when this tab is being selected, you should change the state of your component to set selected={true}.</p><pre><code>onPress function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#onpress
TabBarIOS.Item.renderAsOriginal	A										<section class="prog__container"><p>If set to true it renders the image as original, it defaults to being displayed as a template</p><pre><code>renderAsOriginal bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#renderasoriginal
TabBarIOS.Item.selected	A										<section class="prog__container"><p>It specifies whether the children are visible or not. If you see a blank content, you probably forgot to add a selected one.</p><pre><code>selected bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#selected
TabBarIOS.Item.selectedIcon	A										<section class="prog__container"><p>A custom icon when the tab is selected. It is ignored when a system icon is defined. If left empty, the icon will be tinted in blue.</p><pre><code>selectedIcon Image.propTypes.source</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#selectedicon
TabBarIOS.Item.style	A										<section class="prog__container"><p>React style object.</p><pre><code>style View#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#style
TabBarIOS.Item.systemIcon	A										<section class="prog__container"><p>Items comes with a few predefined system icons. Note that if you are using them, the title and selectedIcon will be overridden with the system ones.</p><pre><code>systemIcon enum('bookmarks', 'contacts', 'downloads', 'favorites', 'featured', 'history', 'more', 'most-recent', 'most-viewed', 'recents', 'search', 'top-rated')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#systemicon
TabBarIOS.Item.title	A										<section class="prog__container"><p>Text that appears under the icon. It is ignored when a system icon is defined.</p><pre><code>title string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios-item.html#title
TabBarIOS.barTintColor	A										<section class="prog__container"><p>Background color of the tab bar</p><pre><code>barTintColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios.html#bartintcolor
TabBarIOS.itemPositioning	A										<section class="prog__container"><p>Specifies tab bar item positioning. Available values are: - fill - distributes items across the entire width of the tab bar - center - centers item in the available tab bar space - auto (default) - distributes items dynamically according to the user interface idiom. In a horizontally compact environment (e.g. iPhone 5) this value defaults to fill, in a horizontally regular one (e.g. iPad) it defaults to center.</p><pre><code>itemPositioning enum('fill', 'center', 'auto')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios.html#itempositioning
TabBarIOS.style	A										<section class="prog__container"><pre><code>style View#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios.html#style
TabBarIOS.tintColor	A										<section class="prog__container"><p>Color of the currently selected tab icon</p><pre><code>tintColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios.html#tintcolor
TabBarIOS.translucent	A										<section class="prog__container"><p>A Boolean value that indicates whether the tab bar is translucent</p><pre><code>translucent bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios.html#translucent
TabBarIOS.unselectedItemTintColor	A										<section class="prog__container"><p>Color of unselected tab icons. Available since iOS 10.</p><pre><code>unselectedItemTintColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios.html#unselecteditemtintcolor
TabBarIOS.unselectedTintColor	A										<section class="prog__container"><p>Color of text on unselected tabs</p><pre><code>unselectedTintColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/tabbarios.html#unselectedtintcolor
Text	A					[[Text.allowFontScaling]]\\n[[Text.accessible]]\\n[[Text.adjustsFontSizeToFit]]\\n[[Text.testID]]\\n[[Text.selectable]]\\n[[Text.minimumFontScale]]\\n[[Text.style]]\\n[[Text.onLongPress]]\\n[[Text.onPress]]\\n[[Text.suppressHighlighting]]\\n[[Text.ellipsizeMode]]\\n[[Text.numberOfLines]]\\n[[Text.onLayout]]					<section class="prog__container"><p>A React component for displaying text.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#
Text accessible	R	Text.accessible										
Text adjustsFontSizeToFit	R	Text.adjustsFontSizeToFit										
Text allowFontScaling	R	Text.allowFontScaling										
Text ellipsizeMode	R	Text.ellipsizeMode										
Text minimumFontScale	R	Text.minimumFontScale										
Text numberOfLines	R	Text.numberOfLines										
Text onLayout	R	Text.onLayout										
Text onLongPress	R	Text.onLongPress										
Text onPress	R	Text.onPress										
Text selectable	R	Text.selectable										
Text style	R	Text.style										
Text suppressHighlighting	R	Text.suppressHighlighting										
Text testID	R	Text.testID										
Text.accessible	A										<section class="prog__container"><p>When set to true, indicates that the view is an accessibility element. The default value for a Text element is true.</p><pre><code>accessible bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#accessible
Text.adjustsFontSizeToFit	A										<section class="prog__container"><p>Specifies whether font should be scaled down automatically to fit given style constraints.</p><pre><code>adjustsFontSizeToFit bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#adjustsfontsizetofit
Text.allowFontScaling	A										<section class="prog__container"><p>Specifies whether fonts should scale to respect Text Size accessibility setting on iOS. The default is true.</p><pre><code>allowFontScaling bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#allowfontscaling
Text.ellipsizeMode	A										<section class="prog__container"><p>This can be one of the following values:</p><pre><code>ellipsizeMode enum('head', 'middle', 'tail', 'clip')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#ellipsizemode
Text.minimumFontScale	A										<section class="prog__container"><p>Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).</p><pre><code>minimumFontScale number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#minimumfontscale
Text.numberOfLines	A										<section class="prog__container"><p>Used to truncate the text with an ellipsis after computing the text layout, including line wrapping, such that the total number of lines does not exceed this number.</p><pre><code>numberOfLines number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#numberoflines
Text.onLayout	A										<section class="prog__container"><p>Invoked on mount and layout changes with</p><pre><code>onLayout function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#onlayout
Text.onLongPress	A										<section class="prog__container"><p>This function is called on long press.</p><pre><code>onLongPress function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#onlongpress
Text.onPress	A										<section class="prog__container"><p>This function is called on press.</p><pre><code>onPress function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#onpress
Text.selectable	A										<section class="prog__container"><p>Lets the user select text, to use the native copy and paste functionality.</p><pre><code>selectable bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#selectable
Text.style	A										<section class="prog__container"><p>Specifies font weight. The values 'normal' and 'bold' are supported for most fonts. Not all fonts have a variant for each of the numeric values, in that case the closest one is chosen.</p><pre><code>style style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#style
Text.suppressHighlighting	A										<section class="prog__container"><p>When true, no visual change is made when text is pressed down. By default, a gray oval highlights the text on press down.</p><pre><code>suppressHighlighting bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#suppresshighlighting
Text.testID	A										<section class="prog__container"><p>Used to locate this view in end-to-end tests.</p><pre><code>testID string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/text.html#testid
TextInput	A					[[TextInput.disableFullscreenUI]]\\n[[TextInput.underlineColorAndroid]]\\n[[TextInput.clearButtonMode]]\\n[[TextInput.onSubmitEditing]]\\n[[TextInput.onFocus]]\\n[[TextInput.secureTextEntry]]\\n[[TextInput.defaultValue]]\\n[[TextInput.editable]]\\n[[TextInput.onContentSizeChange]]\\n[[TextInput.onScroll]]\\n[[TextInput.onEndEditing]]\\n[[TextInput.clear]]\\n[[TextInput.inlineImagePadding]]\\n[[TextInput.onChangeText]]\\n[[TextInput.dataDetectorTypes]]\\n[[TextInput.clearTextOnFocus]]\\n[[TextInput.placeholder]]\\n[[TextInput.autoCapitalize]]\\n[[TextInput.value]]\\n[[TextInput.onBlur]]\\n[[TextInput.selectTextOnFocus]]\\n[[TextInput.onKeyPress]]\\n[[TextInput.returnKeyLabel]]\\n[[TextInput.keyboardType]]\\n[[TextInput.blurOnSubmit]]\\n[[TextInput.numberOfLines]]\\n[[TextInput.inlineImageLeft]]\\n[[TextInput.selectionState]]\\n[[TextInput.keyboardAppearance]]\\n[[TextInput.enablesReturnKeyAutomatically]]\\n[[TextInput.maxLength]]\\n[[TextInput.multiline]]\\n[[TextInput.returnKeyType]]\\n[[TextInput.spellCheck]]\\n[[TextInput.style]]\\n[[TextInput.onSelectionChange]]\\n[[TextInput.placeholderTextColor]]\\n[[TextInput.selection]]\\n[[TextInput.onChange]]\\n[[TextInput.onLayout]]\\n[[TextInput.selectionColor]]\\n[[TextInput.isFocused]]\\n[[TextInput.autoCorrect]]\\n[[TextInput.autoFocus]]					<section class="prog__container"><p>A foundational component for inputting text into the app via a keyboard. Props provide configurability for several features, such as auto-correction, auto-capitalization, placeholder text, and different keyboard types, such as a numeric keypad.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#
TextInput autoCapitalize	R	TextInput.autoCapitalize										
TextInput autoCorrect	R	TextInput.autoCorrect										
TextInput autoFocus	R	TextInput.autoFocus										
TextInput blurOnSubmit	R	TextInput.blurOnSubmit										
TextInput clear	R	TextInput.clear										
TextInput clearButtonMode	R	TextInput.clearButtonMode										
TextInput clearTextOnFocus	R	TextInput.clearTextOnFocus										
TextInput dataDetectorTypes	R	TextInput.dataDetectorTypes										
TextInput defaultValue	R	TextInput.defaultValue										
TextInput disableFullscreenUI	R	TextInput.disableFullscreenUI										
TextInput editable	R	TextInput.editable										
TextInput enablesReturnKeyAutomatically	R	TextInput.enablesReturnKeyAutomatically										
TextInput inlineImageLeft	R	TextInput.inlineImageLeft										
TextInput inlineImagePadding	R	TextInput.inlineImagePadding										
TextInput isFocused	R	TextInput.isFocused										
TextInput keyboardAppearance	R	TextInput.keyboardAppearance										
TextInput keyboardType	R	TextInput.keyboardType										
TextInput maxLength	R	TextInput.maxLength										
TextInput multiline	R	TextInput.multiline										
TextInput numberOfLines	R	TextInput.numberOfLines										
TextInput onBlur	R	TextInput.onBlur										
TextInput onChange	R	TextInput.onChange										
TextInput onChangeText	R	TextInput.onChangeText										
TextInput onContentSizeChange	R	TextInput.onContentSizeChange										
TextInput onEndEditing	R	TextInput.onEndEditing										
TextInput onFocus	R	TextInput.onFocus										
TextInput onKeyPress	R	TextInput.onKeyPress										
TextInput onLayout	R	TextInput.onLayout										
TextInput onScroll	R	TextInput.onScroll										
TextInput onSelectionChange	R	TextInput.onSelectionChange										
TextInput onSubmitEditing	R	TextInput.onSubmitEditing										
TextInput placeholder	R	TextInput.placeholder										
TextInput placeholderTextColor	R	TextInput.placeholderTextColor										
TextInput returnKeyLabel	R	TextInput.returnKeyLabel										
TextInput returnKeyType	R	TextInput.returnKeyType										
TextInput secureTextEntry	R	TextInput.secureTextEntry										
TextInput selectTextOnFocus	R	TextInput.selectTextOnFocus										
TextInput selection	R	TextInput.selection										
TextInput selectionColor	R	TextInput.selectionColor										
TextInput selectionState	R	TextInput.selectionState										
TextInput spellCheck	R	TextInput.spellCheck										
TextInput style	R	TextInput.style										
TextInput underlineColorAndroid	R	TextInput.underlineColorAndroid										
TextInput value	R	TextInput.value										
TextInput.autoCapitalize	A										<section class="prog__container"><p>Can tell TextInput to automatically capitalize certain characters.</p><pre><code>autoCapitalize enum('none', 'sentences', 'words', 'characters')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#autocapitalize
TextInput.autoCorrect	A										<section class="prog__container"><p>If false, disables auto-correct. The default value is true.</p><pre><code>autoCorrect bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#autocorrect
TextInput.autoFocus	A										<section class="prog__container"><p>If true, focuses the input on componentDidMount. The default value is false.</p><pre><code>autoFocus bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#autofocus
TextInput.blurOnSubmit	A										<section class="prog__container"><p>If true, the text field will blur when submitted. The default value is true for single-line fields and false for multiline fields. Note that for multiline fields, setting blurOnSubmit to true means that pressing return will blur the field and trigger the onSubmitEditing event instead of inserting a newline into the field.</p><pre><code>blurOnSubmit bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#bluronsubmit
TextInput.clear	A										<section class="prog__container"><p>Removes all text from the TextInput.</p><pre><code>clear(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#clear
TextInput.clearButtonMode	A										<section class="prog__container"><p>When the clear button should appear on the right side of the text view.</p><pre><code>clearButtonMode enum('never', 'while-editing', 'unless-editing', 'always')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#clearbuttonmode
TextInput.clearTextOnFocus	A										<section class="prog__container"><p>If true, clears the text field automatically when editing begins.</p><pre><code>clearTextOnFocus bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#cleartextonfocus
TextInput.dataDetectorTypes	A										<section class="prog__container"><p>Determines the types of data converted to clickable URLs in the text input. Only valid if multiline={true} and editable={false}. By default no data types are detected.</p><pre><code>dataDetectorTypes enum('phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'), [object Object]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#datadetectortypes
TextInput.defaultValue	A										<section class="prog__container"><p>Provides an initial value that will change when the user starts typing. Useful for simple use-cases where you do not want to deal with listening to events and updating the value prop to keep the controlled state in sync.</p><pre><code>defaultValue node</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#defaultvalue
TextInput.disableFullscreenUI	A										<section class="prog__container"><p>When false, if there is a small amount of space available around a text input (e.g. landscape orientation on a phone), the OS may choose to have the user edit the text inside of a full screen text input mode. When true, this feature is disabled and users will always edit the text directly inside of the text input. Defaults to false.</p><pre><code>disableFullscreenUI bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#disablefullscreenui
TextInput.editable	A										<section class="prog__container"><p>If false, text is not editable. The default value is true.</p><pre><code>editable bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#editable
TextInput.enablesReturnKeyAutomatically	A										<section class="prog__container"><p>If true, the keyboard disables the return key when there is no text and automatically enables it when there is text. The default value is false.</p><pre><code>enablesReturnKeyAutomatically bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#enablesreturnkeyautomatically
TextInput.inlineImageLeft	A										<section class="prog__container"><p>If defined, the provided image resource will be rendered on the left.</p><pre><code>inlineImageLeft string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#inlineimageleft
TextInput.inlineImagePadding	A										<section class="prog__container"><p>Padding between the inline image, if any, and the text input itself.</p><pre><code>inlineImagePadding number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#inlineimagepadding
TextInput.isFocused	A										<section class="prog__container"><p>Returns true if the input is currently focused; false otherwise.</p><pre><code>isFocused(0): </code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#isfocused
TextInput.keyboardAppearance	A										<section class="prog__container"><p>Determines the color of the keyboard.</p><pre><code>keyboardAppearance enum('default', 'light', 'dark')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#keyboardappearance
TextInput.keyboardType	A										<section class="prog__container"><p>Determines which keyboard to open, e.g.numeric.</p><pre><code>keyboardType enum('default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#keyboardtype
TextInput.maxLength	A										<section class="prog__container"><p>Limits the maximum number of characters that can be entered. Use this instead of implementing the logic in JS to avoid flicker.</p><pre><code>maxLength number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#maxlength
TextInput.multiline	A										<section class="prog__container"><p>If true, the text input can be multiple lines. The default value is false.</p><pre><code>multiline bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#multiline
TextInput.numberOfLines	A										<section class="prog__container"><p>Sets the number of lines for a TextInput. Use it with multiline set to true to be able to fill the lines.</p><pre><code>numberOfLines number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#numberoflines
TextInput.onBlur	A										<section class="prog__container"><p>Callback that is called when the text input is blurred.</p><pre><code>onBlur function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onblur
TextInput.onChange	A										<section class="prog__container"><p>Callback that is called when the text input's text changes.</p><pre><code>onChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onchange
TextInput.onChangeText	A										<section class="prog__container"><p>Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.</p><pre><code>onChangeText function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onchangetext
TextInput.onContentSizeChange	A										<section class="prog__container"><p>Callback that is called when the text input's content size changes. This will be called with { nativeEvent: { contentSize: { width, height } } }.</p><pre><code>onContentSizeChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#oncontentsizechange
TextInput.onEndEditing	A										<section class="prog__container"><p>Callback that is called when text input ends.</p><pre><code>onEndEditing function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onendediting
TextInput.onFocus	A										<section class="prog__container"><p>Callback that is called when the text input is focused.</p><pre><code>onFocus function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onfocus
TextInput.onKeyPress	A										<section class="prog__container"><p>Callback that is called when a key is pressed. Pressed key value is passed as an argument to the callback handler. Fires before onChange callbacks.</p><pre><code>onKeyPress function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onkeypress
TextInput.onLayout	A										<section class="prog__container"><p>Invoked on mount and layout changes with {x, y, width, height}.</p><pre><code>onLayout function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onlayout
TextInput.onScroll	A										<section class="prog__container"><p>Invoked on content scroll with { nativeEvent: { contentOffset: { x, y } } }. May also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.</p><pre><code>onScroll function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onscroll
TextInput.onSelectionChange	A										<section class="prog__container"><p>Callback that is called when the text input selection is changed.</p><pre><code>onSelectionChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onselectionchange
TextInput.onSubmitEditing	A										<section class="prog__container"><p>Callback that is called when the text input's submit button is pressed. Invalid if multiline={true} is specified.</p><pre><code>onSubmitEditing function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#onsubmitediting
TextInput.placeholder	A										<section class="prog__container"><p>The string that will be rendered before text input has been entered.</p><pre><code>placeholder node</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#placeholder
TextInput.placeholderTextColor	A										<section class="prog__container"><p>The text color of the placeholder string.</p><pre><code>placeholderTextColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#placeholdertextcolor
TextInput.returnKeyLabel	A										<section class="prog__container"><p>Sets the return key to the label. Use it instead of returnKeyType.</p><pre><code>returnKeyLabel string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#returnkeylabel
TextInput.returnKeyType	A										<section class="prog__container"><p>Determines how the return key should look. On Android you can also use returnKeyLabel.</p><pre><code>returnKeyType enum('done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#returnkeytype
TextInput.secureTextEntry	A										<section class="prog__container"><p>If true, the text input obscures the text entered so that sensitive text like passwords stay secure. The default value is false.</p><pre><code>secureTextEntry bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#securetextentry
TextInput.selectTextOnFocus	A										<section class="prog__container"><p>If true, all text will automatically be selected on focus.</p><pre><code>selectTextOnFocus bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#selecttextonfocus
TextInput.selection	A										<section class="prog__container"><p>The start and end of the text input's selection. Set start and end to the same value to position the cursor.</p><pre><code>selection {start: number, end: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#selection
TextInput.selectionColor	A										<section class="prog__container"><p>The highlight (and cursor on iOS) color of the text input.</p><pre><code>selectionColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#selectioncolor
TextInput.selectionState	A										<section class="prog__container"><p>An instance of DocumentSelectionState, this is some state that is responsible for maintaining selection information for a document.</p><pre><code>selectionState DocumentSelectionState</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#selectionstate
TextInput.spellCheck	A										<section class="prog__container"><p>If false, disables spell-check style (i.e. red underlines). The default value is inherited from autoCorrect.</p><pre><code>spellCheck bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#spellcheck
TextInput.style	A										<section class="prog__container"><p>Styles</p><pre><code>style Text#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#style
TextInput.underlineColorAndroid	A										<section class="prog__container"><p>The color of the TextInput underline.</p><pre><code>underlineColorAndroid color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#underlinecolorandroid
TextInput.value	A										<section class="prog__container"><p>The value to show for the text input. TextInput is a controlled component, which means the native value will be forced to match this value prop if provided. For most uses, this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same. In addition to simply setting the same value, either set editable={false}, or set/update maxLength to prevent unwanted edits without flicker.</p><pre><code>value string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/textinput.html#value
TimePickerAndroid	A					[[TimePickerAndroid.timeSetAction]]\\n[[TimePickerAndroid.open]]\\n[[TimePickerAndroid.dismissedAction]]					<section class="prog__container"><p>Opens the standard Android time picker dialog.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/timepickerandroid.html#
TimePickerAndroid dismissedAction	R	TimePickerAndroid.dismissedAction										
TimePickerAndroid open	R	TimePickerAndroid.open										
TimePickerAndroid timeSetAction	R	TimePickerAndroid.timeSetAction										
TimePickerAndroid.dismissedAction	A										<section class="prog__container"><p>The dialog has been dismissed.</p><pre><code>dismissedAction(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/timepickerandroid.html#dismissedaction
TimePickerAndroid.open	A										<section class="prog__container"><p>Opens the standard Android time picker dialog.</p><pre><code>open(options)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/timepickerandroid.html#open
TimePickerAndroid.timeSetAction	A										<section class="prog__container"><p>A time has been selected.</p><pre><code>timeSetAction(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/timepickerandroid.html#timesetaction
Timers	A										<section class="prog__container"><p>Timers are an important part of an application and React Native implements the browser timers.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/timers.html#
ToastAndroid	A					[[ToastAndroid.show]]\\n[[ToastAndroid.showWithGravity]]					<section class="prog__container"><p>This exposes the native ToastAndroid module as a JS module. This has a function 'show' which takes the following parameters:</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/toastandroid.html#
ToastAndroid show	R	ToastAndroid.show										
ToastAndroid showWithGravity	R	ToastAndroid.showWithGravity										
ToastAndroid.show	A										<section class="prog__container"><pre><code>show(message, duration)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toastandroid.html#show
ToastAndroid.showWithGravity	A										<section class="prog__container"><pre><code>showWithGravity(message, duration, gravity)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toastandroid.html#showwithgravity
ToolbarAndroid	A					[[ToolbarAndroid.testID]]\\n[[ToolbarAndroid.navIcon]]\\n[[ToolbarAndroid.actions]]\\n[[ToolbarAndroid.overflowIcon]]\\n[[ToolbarAndroid.rtl]]\\n[[ToolbarAndroid.title]]\\n[[ToolbarAndroid.subtitleColor]]\\n[[ToolbarAndroid.titleColor]]\\n[[ToolbarAndroid.contentInsetStart]]\\n[[ToolbarAndroid.contentInsetEnd]]\\n[[ToolbarAndroid.subtitle]]\\n[[ToolbarAndroid.onActionSelected]]\\n[[ToolbarAndroid.onIconClicked]]\\n[[ToolbarAndroid.logo]]					<section class="prog__container"><p>React component that wraps the Android-only Toolbar widget. A Toolbar can display a logo, navigation icon (e.g. hamburger menu), a title & subtitle and a list of actions. The title and subtitle are expanded so the logo and navigation icons are displayed on the left, title and subtitle in the middle and the actions on the right.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#
ToolbarAndroid actions	R	ToolbarAndroid.actions										
ToolbarAndroid contentInsetEnd	R	ToolbarAndroid.contentInsetEnd										
ToolbarAndroid contentInsetStart	R	ToolbarAndroid.contentInsetStart										
ToolbarAndroid logo	R	ToolbarAndroid.logo										
ToolbarAndroid navIcon	R	ToolbarAndroid.navIcon										
ToolbarAndroid onActionSelected	R	ToolbarAndroid.onActionSelected										
ToolbarAndroid onIconClicked	R	ToolbarAndroid.onIconClicked										
ToolbarAndroid overflowIcon	R	ToolbarAndroid.overflowIcon										
ToolbarAndroid rtl	R	ToolbarAndroid.rtl										
ToolbarAndroid subtitle	R	ToolbarAndroid.subtitle										
ToolbarAndroid subtitleColor	R	ToolbarAndroid.subtitleColor										
ToolbarAndroid testID	R	ToolbarAndroid.testID										
ToolbarAndroid title	R	ToolbarAndroid.title										
ToolbarAndroid titleColor	R	ToolbarAndroid.titleColor										
ToolbarAndroid.actions	A										<section class="prog__container"><p>Sets possible actions on the toolbar as part of the action menu. These are displayed as icons or text on the right side of the widget. If they don't fit they are placed in an 'overflow' menu.</p><pre><code>actions [{title: string, icon: optionalImageSource, show: enum('always', 'ifRoom', 'never'), showWithText: bool}]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#actions
ToolbarAndroid.contentInsetEnd	A										<section class="prog__container"><p>Sets the content inset for the toolbar ending edge.</p><pre><code>contentInsetEnd number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#contentinsetend
ToolbarAndroid.contentInsetStart	A										<section class="prog__container"><p>Sets the content inset for the toolbar starting edge.</p><pre><code>contentInsetStart number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#contentinsetstart
ToolbarAndroid.logo	A										<section class="prog__container"><p>Sets the toolbar logo.</p><pre><code>logo optionalImageSource</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#logo
ToolbarAndroid.navIcon	A										<section class="prog__container"><p>Sets the navigation icon.</p><pre><code>navIcon optionalImageSource</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#navicon
ToolbarAndroid.onActionSelected	A										<section class="prog__container"><p>Callback that is called when an action is selected. The only argument that is passed to the callback is the position of the action in the actions array.</p><pre><code>onActionSelected function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#onactionselected
ToolbarAndroid.onIconClicked	A										<section class="prog__container"><p>Callback called when the icon is selected.</p><pre><code>onIconClicked function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#oniconclicked
ToolbarAndroid.overflowIcon	A										<section class="prog__container"><p>Sets the overflow icon.</p><pre><code>overflowIcon optionalImageSource</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#overflowicon
ToolbarAndroid.rtl	A										<section class="prog__container"><p>Used to set the toolbar direction to RTL. In addition to this property you need to add</p><pre><code>rtl bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#rtl
ToolbarAndroid.subtitle	A										<section class="prog__container"><p>Sets the toolbar subtitle.</p><pre><code>subtitle string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#subtitle
ToolbarAndroid.subtitleColor	A										<section class="prog__container"><p>Sets the toolbar subtitle color.</p><pre><code>subtitleColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#subtitlecolor
ToolbarAndroid.testID	A										<section class="prog__container"><p>Used to locate this view in end-to-end tests.</p><pre><code>testID string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#testid
ToolbarAndroid.title	A										<section class="prog__container"><p>Sets the toolbar title.</p><pre><code>title string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#title
ToolbarAndroid.titleColor	A										<section class="prog__container"><p>Sets the toolbar title color.</p><pre><code>titleColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/toolbarandroid.html#titlecolor
TouchableHighlight	A					[[TouchableHighlight.activeOpacity]]\\n[[TouchableHighlight.underlayColor]]\\n[[TouchableHighlight.onHideUnderlay]]\\n[[TouchableHighlight.style]]\\n[[TouchableHighlight.onShowUnderlay]]					<section class="prog__container"><p>A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, which allows the underlay color to show through, darkening or tinting the view. The underlay comes from adding a view to the view hierarchy, which can sometimes cause unwanted visual artifacts if not used correctly, for example if the backgroundColor of the wrapped view isn't explicitly set to an opaque color.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablehighlight.html#
TouchableHighlight activeOpacity	R	TouchableHighlight.activeOpacity										
TouchableHighlight onHideUnderlay	R	TouchableHighlight.onHideUnderlay										
TouchableHighlight onShowUnderlay	R	TouchableHighlight.onShowUnderlay										
TouchableHighlight style	R	TouchableHighlight.style										
TouchableHighlight underlayColor	R	TouchableHighlight.underlayColor										
TouchableHighlight.activeOpacity	A										<section class="prog__container"><p>Determines what the opacity of the wrapped view should be when touch is active.</p><pre><code>activeOpacity number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablehighlight.html#activeopacity
TouchableHighlight.onHideUnderlay	A										<section class="prog__container"><p>Called immediately after the underlay is hidden</p><pre><code>onHideUnderlay function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablehighlight.html#onhideunderlay
TouchableHighlight.onShowUnderlay	A										<section class="prog__container"><p>Called immediately after the underlay is shown</p><pre><code>onShowUnderlay function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablehighlight.html#onshowunderlay
TouchableHighlight.style	A										<section class="prog__container"><pre><code>style View#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablehighlight.html#style
TouchableHighlight.underlayColor	A										<section class="prog__container"><p>The color of the underlay that will show through when the touch is active.</p><pre><code>underlayColor color</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablehighlight.html#underlaycolor
TouchableNativeFeedback	A					[[TouchableNativeFeedback.Ripple]]\\n[[TouchableNativeFeedback.SelectableBackgroundBorderless]]\\n[[TouchableNativeFeedback.canUseNativeForeground]]\\n[[TouchableNativeFeedback.background]]\\n[[TouchableNativeFeedback.useForeground]]\\n[[TouchableNativeFeedback.SelectableBackground]]					<section class="prog__container"><p>A wrapper for making views respond properly to touches (Android only). On Android this component uses native state drawable to display touch feedback. At the moment it only supports having a single View instance as a child node, as it's implemented by replacing that View with another instance of RCTView node with some additional properties set.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablenativefeedback.html#
TouchableNativeFeedback Ripple	R	TouchableNativeFeedback.Ripple										
TouchableNativeFeedback SelectableBackground	R	TouchableNativeFeedback.SelectableBackground										
TouchableNativeFeedback SelectableBackgroundBorderless	R	TouchableNativeFeedback.SelectableBackgroundBorderless										
TouchableNativeFeedback background	R	TouchableNativeFeedback.background										
TouchableNativeFeedback canUseNativeForeground	R	TouchableNativeFeedback.canUseNativeForeground										
TouchableNativeFeedback useForeground	R	TouchableNativeFeedback.useForeground										
TouchableNativeFeedback.Ripple	A										<section class="prog__container"><p>Creates an object that represents ripple drawable with specified color (as a string). If property borderless evaluates to true the ripple will render outside of the view bounds (see native actionbar buttons as an example of that behavior). This background type is available on Android API level 21+.</p><pre><code>Ripple(color, borderless)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablenativefeedback.html#ripple
TouchableNativeFeedback.SelectableBackground	A										<section class="prog__container"><p>Creates an object that represents android theme's default background for selectable elements (?android:attr/selectableItemBackground).</p><pre><code>SelectableBackground(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablenativefeedback.html#selectablebackground
TouchableNativeFeedback.SelectableBackgroundBorderless	A										<section class="prog__container"><p>Creates an object that represent android theme's default background for borderless selectable elements (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+.</p><pre><code>SelectableBackgroundBorderless(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablenativefeedback.html#selectablebackgroundborderless
TouchableNativeFeedback.background	A										<section class="prog__container"><p>Determines the type of background drawable that's going to be used to display feedback. It takes an object with type property and extra data depending on the type. It's recommended to use one of the static methods to generate that dictionary.</p><pre><code>background backgroundPropType</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablenativefeedback.html#background
TouchableNativeFeedback.canUseNativeForeground	A										<section class="prog__container"><pre><code>canUseNativeForeground(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablenativefeedback.html#canusenativeforeground
TouchableNativeFeedback.useForeground	A										<section class="prog__container"><p>Set to true to add the ripple effect to the foreground of the view, instead of the background. This is useful if one of your child views has a background of its own, or you're e.g. displaying images, and you don't want the ripple to be covered by them.</p><pre><code>useForeground bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablenativefeedback.html#useforeground
TouchableOpacity	A					[[TouchableOpacity.setOpacityTo]]\\n[[TouchableOpacity.activeOpacity]]					<section class="prog__container"><p>A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, dimming it. This is done without actually changing the view hierarchy, and in general is easy to add to an app without weird side-effects.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchableopacity.html#
TouchableOpacity activeOpacity	R	TouchableOpacity.activeOpacity										
TouchableOpacity setOpacityTo	R	TouchableOpacity.setOpacityTo										
TouchableOpacity.activeOpacity	A										<section class="prog__container"><p>Determines what the opacity of the wrapped view should be when touch is active. Defaults to 0.2.</p><pre><code>activeOpacity number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchableopacity.html#activeopacity
TouchableOpacity.setOpacityTo	A										<section class="prog__container"><p>Animate the touchable to a new opacity.</p><pre><code>setOpacityTo(value, duration)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchableopacity.html#setopacityto
TouchableWithoutFeedback	A					[[TouchableWithoutFeedback.onPressIn]]\\n[[TouchableWithoutFeedback.disabled]]\\n[[TouchableWithoutFeedback.delayPressIn]]\\n[[TouchableWithoutFeedback.accessibilityComponentType]]\\n[[TouchableWithoutFeedback.onPressOut]]\\n[[TouchableWithoutFeedback.delayPressOut]]\\n[[TouchableWithoutFeedback.accessible]]\\n[[TouchableWithoutFeedback.delayLongPress]]\\n[[TouchableWithoutFeedback.onLayout]]\\n[[TouchableWithoutFeedback.onLongPress]]\\n[[TouchableWithoutFeedback.pressRetentionOffset]]\\n[[TouchableWithoutFeedback.hitSlop]]\\n[[TouchableWithoutFeedback.onPress]]\\n[[TouchableWithoutFeedback.accessibilityTraits]]					<section class="prog__container"><p>Do not use unless you have a very good reason. All the elements that respond to press should have a visual feedback when touched. This is one of the primary reasons a "web" app doesn't feel "native".</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#
TouchableWithoutFeedback accessibilityComponentType	R	TouchableWithoutFeedback.accessibilityComponentType										
TouchableWithoutFeedback accessibilityTraits	R	TouchableWithoutFeedback.accessibilityTraits										
TouchableWithoutFeedback accessible	R	TouchableWithoutFeedback.accessible										
TouchableWithoutFeedback delayLongPress	R	TouchableWithoutFeedback.delayLongPress										
TouchableWithoutFeedback delayPressIn	R	TouchableWithoutFeedback.delayPressIn										
TouchableWithoutFeedback delayPressOut	R	TouchableWithoutFeedback.delayPressOut										
TouchableWithoutFeedback disabled	R	TouchableWithoutFeedback.disabled										
TouchableWithoutFeedback hitSlop	R	TouchableWithoutFeedback.hitSlop										
TouchableWithoutFeedback onLayout	R	TouchableWithoutFeedback.onLayout										
TouchableWithoutFeedback onLongPress	R	TouchableWithoutFeedback.onLongPress										
TouchableWithoutFeedback onPress	R	TouchableWithoutFeedback.onPress										
TouchableWithoutFeedback onPressIn	R	TouchableWithoutFeedback.onPressIn										
TouchableWithoutFeedback onPressOut	R	TouchableWithoutFeedback.onPressOut										
TouchableWithoutFeedback pressRetentionOffset	R	TouchableWithoutFeedback.pressRetentionOffset										
TouchableWithoutFeedback.accessibilityComponentType	A										<section class="prog__container"><pre><code>accessibilityComponentType View.AccessibilityComponentType</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#accessibilitycomponenttype
TouchableWithoutFeedback.accessibilityTraits	A										<section class="prog__container"><pre><code>accessibilityTraits View.AccessibilityTraits, [object Object]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#accessibilitytraits
TouchableWithoutFeedback.accessible	A										<section class="prog__container"><pre><code>accessible bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#accessible
TouchableWithoutFeedback.delayLongPress	A										<section class="prog__container"><p>Delay in ms, from onPressIn, before onLongPress is called.</p><pre><code>delayLongPress number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#delaylongpress
TouchableWithoutFeedback.delayPressIn	A										<section class="prog__container"><p>Delay in ms, from the start of the touch, before onPressIn is called.</p><pre><code>delayPressIn number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#delaypressin
TouchableWithoutFeedback.delayPressOut	A										<section class="prog__container"><p>Delay in ms, from the release of the touch, before onPressOut is called.</p><pre><code>delayPressOut number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#delaypressout
TouchableWithoutFeedback.disabled	A										<section class="prog__container"><p>If true, disable all interactions for this component.</p><pre><code>disabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#disabled
TouchableWithoutFeedback.hitSlop	A										<section class="prog__container"><p>This defines how far your touch can start away from the button. This is added to pressRetentionOffset when moving off of the button.  NOTE  The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.</p><pre><code>hitSlop {top: number, left: number, bottom: number, right: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#hitslop
TouchableWithoutFeedback.onLayout	A										<section class="prog__container"><p>Invoked on mount and layout changes with</p><pre><code>onLayout function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#onlayout
TouchableWithoutFeedback.onLongPress	A										<section class="prog__container"><pre><code>onLongPress function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#onlongpress
TouchableWithoutFeedback.onPress	A										<section class="prog__container"><p>Called when the touch is released, but not if cancelled (e.g. by a scroll that steals the responder lock).</p><pre><code>onPress function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#onpress
TouchableWithoutFeedback.onPressIn	A										<section class="prog__container"><pre><code>onPressIn function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#onpressin
TouchableWithoutFeedback.onPressOut	A										<section class="prog__container"><pre><code>onPressOut function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#onpressout
TouchableWithoutFeedback.pressRetentionOffset	A										<section class="prog__container"><p>When the scroll view is disabled, this defines how far your touch may move off of the button, before deactivating the button. Once deactivated, try moving it back and you'll see that the button is once again reactivated! Move it back and forth several times while the scroll view is disabled. Ensure you pass in a constant to reduce memory allocations.</p><pre><code>pressRetentionOffset {top: number, left: number, bottom: number, right: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/touchablewithoutfeedback.html#pressretentionoffset
Troubleshooting	A										<section class="prog__container"><p>These are some common issues you may run into while setting up React Native. If you encounter something that is not listed here, try searching for the issue in GitHub.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/troubleshooting.html#
Tutorial	A										<section class="prog__container"><p>React Native is like React, but it uses native components instead of web components as building blocks. So to understand the basic structure of a React Native app, you need to understand some of the basic React concepts, like JSX, components, state, and props. If you already know React, you still need to learn some React-Native-specific stuff, like the native components. This tutorial is aimed at all audiences, whether you have React experience or not.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/tutorial.html#
Understanding the CLI	A										<section class="prog__container"><p>Though you may have installed the react-native-cli via npm as a separate module, it is a shell for accessing the CLI embedded in the React Native of each project. Your commands and their effects are dependent on the version of the module of react-native in context of the project. This guide will give a brief overview of the CLI in the module.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/understanding-cli.html#
Upgrading	A										<section class="prog__container"><p>Upgrading to new versions of React Native will give you access to more APIs, views, developer tools and other goodies. Because React Native projects are essentially made up of an Android project, an iOS project and a JavaScript project, all combined under an npm package, upgrading can be rather tricky. But we try to make it easy for you. Here's what you need to do to upgrade from an older version of React Native:</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/upgrading.html#
Using Navigators	A										<section class="prog__container"><p>Mobile apps rarely consist of just one screen. As soon as you add a second screen to your app, you will have to take into consideration how the user will navigate from one screen to the other.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/using-navigators.html#
Using a ListView	A										<section class="prog__container"><p>The ListView component displays a vertically scrolling list of changing, but similarly structured, data.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/using-a-listview.html#
Using a ScrollView	A										<section class="prog__container"><p>The ScrollView is a generic scrolling container that can host multiple components and views. The scrollable items need not be homogenous, and you can scroll both vertically and horizontally (by setting the horizontal property).</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/using-a-scrollview.html#
Vibration	A					[[Vibration.cancel]]\\n[[Vibration.vibrate]]					<section class="prog__container"><p>Stop vibration</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/vibration.html#
Vibration cancel	R	Vibration.cancel										
Vibration vibrate	R	Vibration.vibrate										
Vibration.cancel	A										<section class="prog__container"><p>Stop vibration</p><pre><code>cancel(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/vibration.html#cancel
Vibration.vibrate	A										<section class="prog__container"><pre><code>vibrate(pattern, repeat)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/vibration.html#vibrate
VibrationIOS	A					[[VibrationIOS.vibrate]]					<section class="prog__container"><p>NOTE: VibrationIOS is being deprecated. Use Vibration instead.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/vibrationios.html#
VibrationIOS vibrate	R	VibrationIOS.vibrate										
VibrationIOS.vibrate	A										<section class="prog__container"><p>@deprecated</p><pre><code>vibrate(0)</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/vibrationios.html#vibrate
View	A					[[View.importantForAccessibility]]\\n[[View.onMagicTap]]\\n[[View.pointerEvents]]\\n[[View.onResponderTerminationRequest]]\\n[[View.shouldRasterizeIOS]]\\n[[View.accessibilityLabel]]\\n[[View.accessibilityTraits]]\\n[[View.removeClippedSubviews]]\\n[[View.onResponderRelease]]\\n[[View.onStartShouldSetResponder]]\\n[[View.onLayout]]\\n[[View.onResponderMove]]\\n[[View.onResponderTerminate]]\\n[[View.onResponderGrant]]\\n[[View.accessibilityLiveRegion]]\\n[[View.onStartShouldSetResponderCapture]]\\n[[View.accessibilityComponentType]]\\n[[View.onMoveShouldSetResponder]]\\n[[View.needsOffscreenAlphaCompositing]]\\n[[View.style]]\\n[[View.testID]]\\n[[View.hitSlop]]\\n[[View.onMoveShouldSetResponderCapture]]\\n[[View.onAccessibilityTap]]\\n[[View.onResponderReject]]\\n[[View.accessible]]\\n[[View.renderToHardwareTextureAndroid]]\\n[[View.collapsable]]					<section class="prog__container"><p>The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, <div>, android.view, etc.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#
View accessibilityComponentType	R	View.accessibilityComponentType										
View accessibilityLabel	R	View.accessibilityLabel										
View accessibilityLiveRegion	R	View.accessibilityLiveRegion										
View accessibilityTraits	R	View.accessibilityTraits										
View accessible	R	View.accessible										
View collapsable	R	View.collapsable										
View hitSlop	R	View.hitSlop										
View importantForAccessibility	R	View.importantForAccessibility										
View needsOffscreenAlphaCompositing	R	View.needsOffscreenAlphaCompositing										
View onAccessibilityTap	R	View.onAccessibilityTap										
View onLayout	R	View.onLayout										
View onMagicTap	R	View.onMagicTap										
View onMoveShouldSetResponder	R	View.onMoveShouldSetResponder										
View onMoveShouldSetResponderCapture	R	View.onMoveShouldSetResponderCapture										
View onResponderGrant	R	View.onResponderGrant										
View onResponderMove	R	View.onResponderMove										
View onResponderReject	R	View.onResponderReject										
View onResponderRelease	R	View.onResponderRelease										
View onResponderTerminate	R	View.onResponderTerminate										
View onResponderTerminationRequest	R	View.onResponderTerminationRequest										
View onStartShouldSetResponder	R	View.onStartShouldSetResponder										
View onStartShouldSetResponderCapture	R	View.onStartShouldSetResponderCapture										
View pointerEvents	R	View.pointerEvents										
View removeClippedSubviews	R	View.removeClippedSubviews										
View renderToHardwareTextureAndroid	R	View.renderToHardwareTextureAndroid										
View shouldRasterizeIOS	R	View.shouldRasterizeIOS										
View style	R	View.style										
View testID	R	View.testID										
View.accessibilityComponentType	A										<section class="prog__container"><p>Indicates to accessibility services to treat UI component like a native one. Works for Android only.</p><pre><code>accessibilityComponentType enum('none', 'button', 'radiobutton_checked', 'radiobutton_unchecked')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#accessibilitycomponenttype
View.accessibilityLabel	A										<section class="prog__container"><p>Overrides the text that's read by the screen reader when the user interacts with the element. By default, the label is constructed by traversing all the children and accumulating all the Text nodes separated by space.</p><pre><code>accessibilityLabel node</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#accessibilitylabel
View.accessibilityLiveRegion	A										<section class="prog__container"><p>Indicates to accessibility services whether the user should be notified when this view changes. Works for Android API >= 19 only. Possible values:</p><pre><code>accessibilityLiveRegion enum('none', 'polite', 'assertive')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#accessibilityliveregion
View.accessibilityTraits	A										<section class="prog__container"><p>Provides additional traits to screen reader. By default no traits are provided unless specified otherwise in element.</p><pre><code>accessibilityTraits enum('none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'), [object Object]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#accessibilitytraits
View.accessible	A										<section class="prog__container"><p>When true, indicates that the view is an accessibility element. By default, all the touchable elements are accessible.</p><pre><code>accessible bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#accessible
View.collapsable	A										<section class="prog__container"><p>Views that are only used to layout their children or otherwise don't draw anything may be automatically removed from the native hierarchy as an optimization. Set this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.</p><pre><code>collapsable bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#collapsable
View.hitSlop	A										<section class="prog__container"><p>This defines how far a touch event can start away from the view. Typical interface guidelines recommend touch targets that are at least 30 - 40 points/density-independent pixels.</p><pre><code>hitSlop {top: number, left: number, bottom: number, right: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#hitslop
View.importantForAccessibility	A										<section class="prog__container"><p>Controls how view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. Works for Android only.</p><pre><code>importantForAccessibility enum('auto', 'yes', 'no', 'no-hide-descendants')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#importantforaccessibility
View.needsOffscreenAlphaCompositing	A										<section class="prog__container"><p>Whether this View needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior. The default (false) falls back to drawing the component and its children with an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value. This default may be noticeable and undesired in the case where the View you are setting an opacity on has multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).</p><pre><code>needsOffscreenAlphaCompositing bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#needsoffscreenalphacompositing
View.onAccessibilityTap	A										<section class="prog__container"><p>When accessible is true, the system will try to invoke this function when the user performs accessibility tap gesture.</p><pre><code>onAccessibilityTap function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onaccessibilitytap
View.onLayout	A										<section class="prog__container"><p>Invoked on mount and layout changes with:</p><pre><code>onLayout function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onlayout
View.onMagicTap	A										<section class="prog__container"><p>When accessible is true, the system will invoke this function when the user performs the magic tap gesture.</p><pre><code>onMagicTap function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onmagictap
View.onMoveShouldSetResponder	A										<section class="prog__container"><p>Does this view want to "claim" touch responsiveness? This is called for every touch move on the View when it is not the responder.</p><pre><code>onMoveShouldSetResponder function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onmoveshouldsetresponder
View.onMoveShouldSetResponderCapture	A										<section class="prog__container"><p>If a parent View wants to prevent a child View from becoming responder on a move, it should have this handler which returns true.</p><pre><code>onMoveShouldSetResponderCapture function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onmoveshouldsetrespondercapture
View.onResponderGrant	A										<section class="prog__container"><p>The View is now responding for touch events. This is the time to highlight and show the user what is happening.</p><pre><code>onResponderGrant function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onrespondergrant
View.onResponderMove	A										<section class="prog__container"><p>The user is moving their finger.</p><pre><code>onResponderMove function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onrespondermove
View.onResponderReject	A										<section class="prog__container"><p>Another responder is already active and will not release it to that View asking to be the responder.</p><pre><code>onResponderReject function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onresponderreject
View.onResponderRelease	A										<section class="prog__container"><p>Fired at the end of the touch.</p><pre><code>onResponderRelease function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onresponderrelease
View.onResponderTerminate	A										<section class="prog__container"><p>The responder has been taken from the View. Might be taken by other views after a call to onResponderTerminationRequest, or might be taken by the OS without asking (e.g., happens with control center/ notification center on iOS)</p><pre><code>onResponderTerminate function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onresponderterminate
View.onResponderTerminationRequest	A										<section class="prog__container"><p>Some other View wants to become responder and is asking this View to release its responder. Returning true allows its release.</p><pre><code>onResponderTerminationRequest function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onresponderterminationrequest
View.onStartShouldSetResponder	A										<section class="prog__container"><p>Does this view want to become responder on the start of a touch?</p><pre><code>onStartShouldSetResponder function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onstartshouldsetresponder
View.onStartShouldSetResponderCapture	A										<section class="prog__container"><p>If a parent View wants to prevent a child View from becoming responder on a touch start, it should have this handler which returns true.</p><pre><code>onStartShouldSetResponderCapture function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#onstartshouldsetrespondercapture
View.pointerEvents	A										<section class="prog__container"><p>Controls whether the View can be the target of touch events.</p><pre><code>pointerEvents enum('box-none', 'none', 'box-only', 'auto')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#pointerevents
View.removeClippedSubviews	A										<section class="prog__container"><p>This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews, most of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound. The subviews must also have overflow: hidden, as should the containing view (or one of its superviews).</p><pre><code>removeClippedSubviews bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#removeclippedsubviews
View.renderToHardwareTextureAndroid	A										<section class="prog__container"><p>Whether this View should render itself (and all of its children) into a single hardware texture on the GPU.</p><pre><code>renderToHardwareTextureAndroid bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#rendertohardwaretextureandroid
View.shouldRasterizeIOS	A										<section class="prog__container"><p>Whether this View should be rendered as a bitmap before compositing.</p><pre><code>shouldRasterizeIOS bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#shouldrasterizeios
View.style	A										<section class="prog__container"><p>(Android-only) Sets the elevation of a view, using Android's underlying elevation API. This adds a drop shadow to the item and affects z-order for overlapping views. Only supported on Android 5.0+, has no effect on earlier versions.</p><pre><code>style style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#style
View.testID	A										<section class="prog__container"><p>Used to locate this view in end-to-end tests.</p><pre><code>testID string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/view.html#testid
ViewPagerAndroid	A					[[ViewPagerAndroid.onPageScrollStateChanged]]\\n[[ViewPagerAndroid.onPageSelected]]\\n[[ViewPagerAndroid.initialPage]]\\n[[ViewPagerAndroid.pageMargin]]\\n[[ViewPagerAndroid.keyboardDismissMode]]\\n[[ViewPagerAndroid.scrollEnabled]]\\n[[ViewPagerAndroid.onPageScroll]]					<section class="prog__container"><p>Container that allows to flip left and right between child views. Each child view of the ViewPagerAndroid will be treated as a separate page and will be stretched to fill the ViewPagerAndroid.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/viewpagerandroid.html#
ViewPagerAndroid initialPage	R	ViewPagerAndroid.initialPage										
ViewPagerAndroid keyboardDismissMode	R	ViewPagerAndroid.keyboardDismissMode										
ViewPagerAndroid onPageScroll	R	ViewPagerAndroid.onPageScroll										
ViewPagerAndroid onPageScrollStateChanged	R	ViewPagerAndroid.onPageScrollStateChanged										
ViewPagerAndroid onPageSelected	R	ViewPagerAndroid.onPageSelected										
ViewPagerAndroid pageMargin	R	ViewPagerAndroid.pageMargin										
ViewPagerAndroid scrollEnabled	R	ViewPagerAndroid.scrollEnabled										
ViewPagerAndroid.initialPage	A										<section class="prog__container"><p>Index of initial page that should be selected. Use setPage method to update the page, and onPageSelected to monitor page changes</p><pre><code>initialPage number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/viewpagerandroid.html#initialpage
ViewPagerAndroid.keyboardDismissMode	A										<section class="prog__container"><p>Determines whether the keyboard gets dismissed in response to a drag.  - 'none' (the default), drags do not dismiss the keyboard.  - 'on-drag', the keyboard is dismissed when a drag begins.</p><pre><code>keyboardDismissMode enum('none', 'on-drag')</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/viewpagerandroid.html#keyboarddismissmode
ViewPagerAndroid.onPageScroll	A										<section class="prog__container"><p>Executed when transitioning between pages (ether because of animation for the requested page change or when user is swiping/dragging between pages) The event.nativeEvent object for this callback will carry following data:  - position - index of first page from the left that is currently visible  - offset - value from range [0,1) describing stage between page transitions.   Value x means that (1 - x) fraction of the page at "position" index is   visible, and x fraction of the next page is visible.</p><pre><code>onPageScroll function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/viewpagerandroid.html#onpagescroll
ViewPagerAndroid.onPageScrollStateChanged	A										<section class="prog__container"><p>Function called when the page scrolling state has changed. The page scrolling state can be in 3 states: - idle, meaning there is no interaction with the page scroller happening at the time - dragging, meaning there is currently an interaction with the page scroller - settling, meaning that there was an interaction with the page scroller, and the  page scroller is now finishing it's closing or opening animation</p><pre><code>onPageScrollStateChanged function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/viewpagerandroid.html#onpagescrollstatechanged
ViewPagerAndroid.onPageSelected	A										<section class="prog__container"><p>This callback will be called once ViewPager finish navigating to selected page (when user swipes between pages). The event.nativeEvent object passed to this callback will have following fields:  - position - index of page that has been selected</p><pre><code>onPageSelected function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/viewpagerandroid.html#onpageselected
ViewPagerAndroid.pageMargin	A										<section class="prog__container"><p>Blank space to show between pages. This is only visible while scrolling, pages are still edge-to-edge.</p><pre><code>pageMargin number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/viewpagerandroid.html#pagemargin
ViewPagerAndroid.scrollEnabled	A										<section class="prog__container"><p>When false, the content does not scroll. The default value is true.</p><pre><code>scrollEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/viewpagerandroid.html#scrollenabled
WebView	A					[[WebView.onLoadEnd]]\\n[[WebView.onLoadStart]]\\n[[WebView.userAgent]]\\n[[WebView.source]]\\n[[WebView.contentInset]]\\n[[WebView.onNavigationStateChange]]\\n[[WebView.injectedJavaScript]]\\n[[WebView.onLoad]]\\n[[WebView.style]]\\n[[WebView.javaScriptEnabled]]\\n[[WebView.domStorageEnabled]]\\n[[WebView.onMessage]]\\n[[WebView.automaticallyAdjustContentInsets]]\\n[[WebView.renderLoading]]\\n[[WebView.onShouldStartLoadWithRequest]]\\n[[WebView.startInLoadingState]]\\n[[WebView.decelerationRate]]\\n[[WebView.scalesPageToFit]]\\n[[WebView.mediaPlaybackRequiresUserAction]]\\n[[WebView.url]]\\n[[WebView.dataDetectorTypes]]\\n[[WebView.html]]\\n[[WebView.renderError]]\\n[[WebView.onError]]\\n[[WebView.bounces]]\\n[[WebView.scrollEnabled]]\\n[[WebView.allowsInlineMediaPlayback]]					<section class="prog__container"><p>WebView renders web content in a native view.</p></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#
WebView allowsInlineMediaPlayback	R	WebView.allowsInlineMediaPlayback										
WebView automaticallyAdjustContentInsets	R	WebView.automaticallyAdjustContentInsets										
WebView bounces	R	WebView.bounces										
WebView contentInset	R	WebView.contentInset										
WebView dataDetectorTypes	R	WebView.dataDetectorTypes										
WebView decelerationRate	R	WebView.decelerationRate										
WebView domStorageEnabled	R	WebView.domStorageEnabled										
WebView html	R	WebView.html										
WebView injectedJavaScript	R	WebView.injectedJavaScript										
WebView javaScriptEnabled	R	WebView.javaScriptEnabled										
WebView mediaPlaybackRequiresUserAction	R	WebView.mediaPlaybackRequiresUserAction										
WebView onError	R	WebView.onError										
WebView onLoad	R	WebView.onLoad										
WebView onLoadEnd	R	WebView.onLoadEnd										
WebView onLoadStart	R	WebView.onLoadStart										
WebView onMessage	R	WebView.onMessage										
WebView onNavigationStateChange	R	WebView.onNavigationStateChange										
WebView onShouldStartLoadWithRequest	R	WebView.onShouldStartLoadWithRequest										
WebView renderError	R	WebView.renderError										
WebView renderLoading	R	WebView.renderLoading										
WebView scalesPageToFit	R	WebView.scalesPageToFit										
WebView scrollEnabled	R	WebView.scrollEnabled										
WebView source	R	WebView.source										
WebView startInLoadingState	R	WebView.startInLoadingState										
WebView style	R	WebView.style										
WebView url	R	WebView.url										
WebView userAgent	R	WebView.userAgent										
WebView.allowsInlineMediaPlayback	A										<section class="prog__container"><p>Boolean that determines whether HTML5 videos play inline or use the native full-screen controller. The default value is false.</p><pre><code>allowsInlineMediaPlayback bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#allowsinlinemediaplayback
WebView.automaticallyAdjustContentInsets	A										<section class="prog__container"><p>Controls whether to adjust the content inset for web views that are placed behind a navigation bar, tab bar, or toolbar. The default value is true.</p><pre><code>automaticallyAdjustContentInsets bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#automaticallyadjustcontentinsets
WebView.bounces	A										<section class="prog__container"><p>Boolean value that determines whether the web view bounces when it reaches the edge of the content. The default value is true.</p><pre><code>bounces bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#bounces
WebView.contentInset	A										<section class="prog__container"><p>The amount by which the web view content is inset from the edges of the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.</p><pre><code>contentInset {top: number, left: number, bottom: number, right: number}</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#contentinset
WebView.dataDetectorTypes	A										<section class="prog__container"><p>Determines the types of data converted to clickable URLs in the web view’s content. By default only phone numbers are detected.</p><pre><code>dataDetectorTypes enum('phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'), [object Object]</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#datadetectortypes
WebView.decelerationRate	A										<section class="prog__container"><p>A floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use the string shortcuts "normal" and "fast" which match the underlying iOS settings for UIScrollViewDecelerationRateNormal and UIScrollViewDecelerationRateFast respectively:</p><pre><code>decelerationRate ScrollView.propTypes.decelerationRate</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#decelerationrate
WebView.domStorageEnabled	A										<section class="prog__container"><p>Boolean value to control whether DOM Storage is enabled. Used only in Android.</p><pre><code>domStorageEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#domstorageenabled
WebView.html	A										<section class="prog__container"><p>Use the source prop instead.</p><pre><code>html string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#html
WebView.injectedJavaScript	A										<section class="prog__container"><p>Set this to provide JavaScript that will be injected into the web page when the view loads.</p><pre><code>injectedJavaScript string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#injectedjavascript
WebView.javaScriptEnabled	A										<section class="prog__container"><p>Boolean value to enable JavaScript in the WebView. Used on Android only as JavaScript is enabled by default on iOS. The default value is true.</p><pre><code>javaScriptEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#javascriptenabled
WebView.mediaPlaybackRequiresUserAction	A										<section class="prog__container"><p>Boolean that determines whether HTML5 audio and video requires the user to tap them before they start playing. The default value is true.</p><pre><code>mediaPlaybackRequiresUserAction bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#mediaplaybackrequiresuseraction
WebView.onError	A										<section class="prog__container"><p>Function that is invoked when the WebView load fails.</p><pre><code>onError function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#onerror
WebView.onLoad	A										<section class="prog__container"><p>Function that is invoked when the WebView has finished loading.</p><pre><code>onLoad function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#onload
WebView.onLoadEnd	A										<section class="prog__container"><p>Function that is invoked when the WebView load succeeds or fails.</p><pre><code>onLoadEnd function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#onloadend
WebView.onLoadStart	A										<section class="prog__container"><p>Function that is invoked when the WebView starts loading.</p><pre><code>onLoadStart function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#onloadstart
WebView.onMessage	A										<section class="prog__container"><p>A function that is invoked when the webview calls window.postMessage. Setting this property will inject a postMessage global into your webview, but will still call pre-existing values of postMessage.</p><pre><code>onMessage function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#onmessage
WebView.onNavigationStateChange	A										<section class="prog__container"><p>Function that is invoked when the WebView loading starts or ends.</p><pre><code>onNavigationStateChange function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#onnavigationstatechange
WebView.onShouldStartLoadWithRequest	A										<section class="prog__container"><p>Function that allows custom handling of any web view requests. Return true from the function to continue loading the request and false to stop loading.</p><pre><code>onShouldStartLoadWithRequest function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#onshouldstartloadwithrequest
WebView.renderError	A										<section class="prog__container"><p>Function that returns a view to show if there's an error.</p><pre><code>renderError function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#rendererror
WebView.renderLoading	A										<section class="prog__container"><p>Function that returns a loading indicator.</p><pre><code>renderLoading function</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#renderloading
WebView.scalesPageToFit	A										<section class="prog__container"><p>Boolean that controls whether the web content is scaled to fit the view and enables the user to change the scale. The default value is true.</p><pre><code>scalesPageToFit bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#scalespagetofit
WebView.scrollEnabled	A										<section class="prog__container"><p>Boolean value that determines whether scrolling is enabled in the WebView. The default value is true.</p><pre><code>scrollEnabled bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#scrollenabled
WebView.source	A										<section class="prog__container"><p>Loads static html or a uri (with optional headers) in the WebView.</p><pre><code>source {uri: string, method: string, headers: object, body: string}, {html: string, baseUrl: string}, number</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#source
WebView.startInLoadingState	A										<section class="prog__container"><p>Boolean value that forces the WebView to show the loading view on the first load.</p><pre><code>startInLoadingState bool</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#startinloadingstate
WebView.style	A										<section class="prog__container"><p>The style to apply to the WebView.</p><pre><code>style View#style</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#style
WebView.url	A										<section class="prog__container"><p>Use the source prop instead.</p><pre><code>url string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#url
WebView.userAgent	A										<section class="prog__container"><p>Sets the user-agent for the WebView.</p><pre><code>userAgent string</code></pre></section>	https://facebook.github.io/react-native/releases/0.40/docs/webview.html#useragent
abandonPermissions	R	PushNotificationIOS.abandonPermissions										
accessibilityComponentType	D								*[[TouchableWithoutFeedback.accessibilityComponentType]] <section class="prog__container"><pre><code>accessibilityComponentType View.AccessibilityComponentType</code></pre></section>\n*[[View.accessibilityComponentType]] <section class="prog__container"><p>Indicates to accessibility services to treat UI component like a native one. Works for Android only.</p><pre><code>accessibilityComponentType enum('none', 'button', 'radiobutton_checked', 'radiobutton_unchecked')</code></pre></section>			
accessibilityLabel	D								*[[Image.accessibilityLabel]] <section class="prog__container"><p>When true, the scroll view bounces when it reaches the end of the content if the content is larger then the scroll view along the axis of the scroll direction. When false, it disables all bouncing even if the alwaysBounce* props are true. The default value is true.</p><pre><code>bounces bool</code></pre></section>\n*[[View.accessibilityLabel]] <section class="prog__container"><p>Overrides the text that's read by the screen reader when the user interacts with the element. By default, the label is constructed by traversing all the children and accumulating all the Text nodes separated by space.</p><pre><code>accessibilityLabel node</code></pre></section>\n*[[Button.accessibilityLabel]] <section class="prog__container"><p>Text to display for blindness accessibility features</p><pre><code>accessibilityLabel string</code></pre></section>			
accessibilityLiveRegion	R	View.accessibilityLiveRegion										
accessibilityTraits	D								*[[TouchableWithoutFeedback.accessibilityTraits]] <section class="prog__container"><pre><code>accessibilityTraits View.AccessibilityTraits, [object Object]</code></pre></section>\n*[[View.accessibilityTraits]] <section class="prog__container"><p>Provides additional traits to screen reader. By default no traits are provided unless specified otherwise in element.</p><pre><code>accessibilityTraits enum('none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'), [object Object]</code></pre></section>			
accessible	D								*[[TouchableWithoutFeedback.accessible]] <section class="prog__container"><p>Determines the types of data converted to clickable URLs in the text input. Only valid if multiline={true} and editable={false}. By default no data types are detected.</p><pre><code>dataDetectorTypes enum('phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'), [object Object]</code></pre></section>\n*[[Text.accessible]] <section class="prog__container"><p>The amount by which the scroll view content is inset from the edges of the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.</p><pre><code>contentInset {top: number, left: number, bottom: number, right: number}</code></pre></section>\n*[[Image.accessible]] <section class="prog__container"><p>When true, indicates the image is an accessibility element.</p><pre><code>accessible bool</code></pre></section>\n*[[View.accessible]] <section class="prog__container"><p>When true, indicates that the view is an accessibility element. By default, all the touchable elements are accessible.</p><pre><code>accessible bool</code></pre></section>			
actions	R	ToolbarAndroid.actions										
active	R	MapView.active										
activeOpacity	D								*[[TouchableOpacity.activeOpacity]] <section class="prog__container"><p>Determines what the opacity of the wrapped view should be when touch is active. Defaults to 0.2.</p><pre><code>activeOpacity number</code></pre></section>\n*[[TouchableHighlight.activeOpacity]] <section class="prog__container"><p>Determines what the opacity of the wrapped view should be when touch is active.</p><pre><code>activeOpacity number</code></pre></section>			
addEventListener	D								*[[PushNotificationIOS.addEventListener]] <section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>\n*[[AppState.addEventListener]] <section class="prog__container"><p>Add a handler to AppState changes by listening to the change event type and providing the handler</p><pre><code>addEventListener(type, handler)</code></pre></section>\n*[[BackAndroid.addEventListener]] <section class="prog__container"><pre><code>addEventListener(eventName, handler)</code></pre></section>\n*[[NetInfo.addEventListener]] <section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>\n*[[Linking.addEventListener]] <section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>			
addImageFromBase64	R	ImageStore.addImageFromBase64										
addListener	D								*[[Animated.addListener]] <section class="prog__container"><pre><code>addListener(callback)</code></pre></section>\n*[[Keyboard.addListener]] <section class="prog__container"><p>The addListener function connects a JavaScript function to an identified native keyboard notification event.</p><pre><code>addListener(eventName, callback)</code></pre></section>			
adjustsFontSizeToFit	R	Text.adjustsFontSizeToFit										
alert	D								*[[Alert.alert]] <section class="prog__container"><pre><code>alert(title, message?, buttons?, options?, type?)</code></pre></section>\n*[[AlertIOS.alert]] <section class="prog__container"><p>Create and display a popup alert.</p><pre><code>alert(title, message?, callbackOrButtons?, type?)</code></pre></section>			
alignItems	R	Layout Props.alignItems										
alignSelf	R	Layout Props.alignSelf										
allowFontScaling	R	Text.allowFontScaling										
allowsInlineMediaPlayback	R	WebView.allowsInlineMediaPlayback										
alwaysBounceHorizontal	R	ScrollView.alwaysBounceHorizontal										
alwaysBounceVertical	R	ScrollView.alwaysBounceVertical										
animated	D								*[[Modal.animated]] <section class="prog__container"><p>Use the animationType prop instead.</p><pre><code>animated bool</code></pre></section>\n*[[StatusBar.animated]] <section class="prog__container"><p>If the transition between status bar property changes should be animated. Supported for backgroundColor, barStyle and hidden.</p><pre><code>animated bool</code></pre></section>			
animating	R	ActivityIndicator.animating										
animationType	R	Modal.animationType										
annotations	R	MapView.annotations										
aspectRatio	R	Layout Props.aspectRatio										
attachToRelayProfiler	R	Systrace.attachToRelayProfiler										
autoCapitalize	R	TextInput.autoCapitalize										
autoCorrect	R	TextInput.autoCorrect										
autoFocus	R	TextInput.autoFocus										
automaticallyAdjustContentInsets	D								*[[ScrollView.automaticallyAdjustContentInsets]] <section class="prog__container"><p>Controls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar. The default value is true.</p><pre><code>automaticallyAdjustContentInsets bool</code></pre></section>\n*[[WebView.automaticallyAdjustContentInsets]] <section class="prog__container"><p>Controls whether to adjust the content inset for web views that are placed behind a navigation bar, tab bar, or toolbar. The default value is true.</p><pre><code>automaticallyAdjustContentInsets bool</code></pre></section>			
back	R	Easing.back										
background	R	TouchableNativeFeedback.background										
backgroundColor	R	StatusBar.backgroundColor										
badge	R	TabBarIOS.Item.badge										
badgeColor	R	TabBarIOS.Item.badgeColor										
barStyle	R	StatusBar.barStyle										
barTintColor	D								*[[TabBarIOS.barTintColor]] <section class="prog__container"><p>Background color of the tab bar</p><pre><code>barTintColor color</code></pre></section>\n*[[NavigatorIOS.barTintColor]] <section class="prog__container"><p>The default background color of the navigation bar.</p><pre><code>barTintColor string</code></pre></section>			
beginAsyncEvent	R	Systrace.beginAsyncEvent										
beginEvent	R	Systrace.beginEvent										
behavior	R	KeyboardAvoidingView.behavior										
bezier	R	Easing.bezier										
blur	R	NativeMethodsMixin.blur										
blurOnSubmit	R	TextInput.blurOnSubmit										
blurRadius	R	Image.blurRadius										
borderBottomWidth	R	Layout Props.borderBottomWidth										
borderLeftWidth	R	Layout Props.borderLeftWidth										
borderRightWidth	R	Layout Props.borderRightWidth										
borderTopWidth	R	Layout Props.borderTopWidth										
borderWidth	R	Layout Props.borderWidth										
bottom	R	Layout Props.bottom										
bounce	R	Easing.bounce										
bounces	D								*[[WebView.bounces]] <section class="prog__container"><p>Boolean value that determines whether the web view bounces when it reaches the edge of the content. The default value is true.</p><pre><code>bounces bool</code></pre></section>\n*[[ScrollView.bounces]] <section class="prog__container"><p>When true, the scroll view bounces when it reaches the end of the content if the content is larger then the scroll view along the axis of the scroll direction. When false, it disables all bouncing even if the alwaysBounce* props are true. The default value is true.</p><pre><code>bounces bool</code></pre></section>			
bouncesZoom	R	ScrollView.bouncesZoom										
canCancelContentTouches	R	ScrollView.canCancelContentTouches										
canOpenURL	R	Linking.canOpenURL										
canRecordVideos	R	ImagePickerIOS.canRecordVideos										
canUseCamera	R	ImagePickerIOS.canUseCamera										
canUseNativeForeground	R	TouchableNativeFeedback.canUseNativeForeground										
cancel	R	Vibration.cancel										
cancelAllLocalNotifications	R	PushNotificationIOS.cancelAllLocalNotifications										
cancelLocalNotifications	R	PushNotificationIOS.cancelLocalNotifications										
capInsets	R	Image.capInsets										
centerContent	R	ScrollView.centerContent										
check	R	PermissionsAndroid.check										
checkPermission	R	PermissionsAndroid.checkPermission										
checkPermissions	R	PushNotificationIOS.checkPermissions										
circle	R	Easing.circle										
clear	D								*[[TextInput.clear]] <section class="prog__container"><p>Removes all text from the TextInput.</p><pre><code>clear(0)</code></pre></section>\n*[[AsyncStorage.clear]] <section class="prog__container"><p>Erases all AsyncStorage for all clients, libraries, etc. You probably don't want to call this; use removeItem or multiRemove to clear only your app's keys. Returns a Promise object.</p><pre><code>clear(callback?)</code></pre></section>			
clearButtonMode	R	TextInput.clearButtonMode										
clearInteractionHandle	R	InteractionManager.clearInteractionHandle										
clearTextOnFocus	R	TextInput.clearTextOnFocus										
clearWatch	D								*[[Geolocation.clearWatch]] <section class="prog__container"><pre><code>clearWatch(watchID)</code></pre></section>\n*[[Settings.clearWatch]] <section class="prog__container"><pre><code>clearWatch(watchId)</code></pre></section>			
closeDrawer	R	DrawerLayoutAndroid.closeDrawer										
collapsable	R	View.collapsable										
color	D								*[[ActivityIndicator.color]] <section class="prog__container"><p>The foreground color of the spinner (default is gray).</p><pre><code>color color</code></pre></section>\n*[[Button.color]] <section class="prog__container"><p>Color of the text (iOS), or background color of the button (Android)</p><pre><code>color color</code></pre></section>\n*[[ProgressBarAndroid.color]] <section class="prog__container"><p>Pop back to the previous scene.</p><pre><code>pop(0)</code></pre></section>			
colors	R	RefreshControl.colors										
configureNext	R	LayoutAnimation.configureNext										
configureScene	R	Navigator.configureScene										
constructor	D								*[[Animated.constructor]] <section class="prog__container"><pre><code>constructor(valueIn?)</code></pre></section>\n*[[PushNotificationIOS.constructor]] <section class="prog__container"><p>Called when scrollable content view of the ScrollView changes.</p><pre><code>onContentSizeChange function</code></pre></section>\n*[[PermissionsAndroid.constructor]] <section class="prog__container"><p>The addListener function connects a JavaScript function to an identified native keyboard notification event.</p><pre><code>addListener(eventName, callback)</code></pre></section>\n*[[AppState.constructor]] <section class="prog__container"><p>On Android, specifies how to display the selection items when the user taps on the picker:</p><pre><code>mode enum('dialog', 'dropdown')</code></pre></section>\n*[[Linking.constructor]] <section class="prog__container"><pre><code>constructor(0)</code></pre></section>			
contentContainerStyle	D								*[[ScrollView.contentContainerStyle]] <section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>\n*[[KeyboardAvoidingView.contentContainerStyle]] <section class="prog__container"><p>The style of the content container(View) when behavior is 'position'.</p><pre><code>contentContainerStyle View#style</code></pre></section>			
contentInset	D								*[[WebView.contentInset]] <section class="prog__container"><p>The amount by which the web view content is inset from the edges of the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.</p><pre><code>contentInset {top: number, left: number, bottom: number, right: number}</code></pre></section>\n*[[ScrollView.contentInset]] <section class="prog__container"><p>The amount by which the scroll view content is inset from the edges of the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.</p><pre><code>contentInset {top: number, left: number, bottom: number, right: number}</code></pre></section>			
contentInsetEnd	R	ToolbarAndroid.contentInsetEnd										
contentInsetStart	R	ToolbarAndroid.contentInsetStart										
contentOffset	R	ScrollView.contentOffset										
counterEvent	R	Systrace.counterEvent										
create	D								*[[LayoutAnimation.create]] <section class="prog__container"><p>Helper for creating a config for configureNext.</p><pre><code>create(duration, type, creationProp)</code></pre></section>\n*[[PanResponder.create]] <section class="prog__container"><p>@param {object} config Enhanced versions of all of the responder callbacks that provide not only the typical ResponderSyntheticEvent, but also the PanResponder gesture state. Simply replace the word Responder with PanResponder in each of the typical onResponder* callbacks. For example, the config object would look like:</p><pre><code>create(config)</code></pre></section>\n*[[StyleSheet.create]] <section class="prog__container"><p>The initial route for navigation. A route is an object that the navigator will use to identify each scene it renders.</p><pre><code>initialRoute object</code></pre></section>			
createInteractionHandle	R	InteractionManager.createInteractionHandle										
cropImage	R	ImageEditor.cropImage										
cubic	R	Easing.cubic										
dataDetectorTypes	D								*[[TextInput.dataDetectorTypes]] <section class="prog__container"><p>Determines the types of data converted to clickable URLs in the text input. Only valid if multiline={true} and editable={false}. By default no data types are detected.</p><pre><code>dataDetectorTypes enum('phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'), [object Object]</code></pre></section>\n*[[WebView.dataDetectorTypes]] <section class="prog__container"><p>Determines the types of data converted to clickable URLs in the web view’s content. By default only phone numbers are detected.</p><pre><code>dataDetectorTypes enum('phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'), [object Object]</code></pre></section>			
dataSource	R	ListView.dataSource										
date	R	DatePickerIOS.date										
dateSetAction	R	DatePickerAndroid.dateSetAction										
decelerationRate	D								*[[WebView.decelerationRate]] <section class="prog__container"><p>A floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use the string shortcuts "normal" and "fast" which match the underlying iOS settings for UIScrollViewDecelerationRateNormal and UIScrollViewDecelerationRateFast respectively:</p><pre><code>decelerationRate ScrollView.propTypes.decelerationRate</code></pre></section>\n*[[ScrollView.decelerationRate]] <section class="prog__container"><p>A floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use string shortcuts "normal" and "fast" which match the underlying iOS settings for UIScrollViewDecelerationRateNormal and UIScrollViewDecelerationRateFast respectively.  - normal: 0.998 (the default)  - fast: 0.99</p><pre><code>decelerationRate enum('fast', 'normal'), number</code></pre></section>			
defaultSource	R	Image.defaultSource										
defaultValue	R	TextInput.defaultValue										
delayLongPress	R	TouchableWithoutFeedback.delayLongPress										
delayPressIn	R	TouchableWithoutFeedback.delayPressIn										
delayPressOut	R	TouchableWithoutFeedback.delayPressOut										
directionalLockEnabled	R	ScrollView.directionalLockEnabled										
disableFullscreenUI	R	TextInput.disableFullscreenUI										
disabled	D								*[[TouchableWithoutFeedback.disabled]] <section class="prog__container"><p>Style to apply to each of the item labels.</p><pre><code>itemStyle itemStylePropType</code></pre></section>\n*[[Switch.disabled]] <section class="prog__container"><p>If true the user won't be able to toggle the switch. Default value is false.</p><pre><code>disabled bool</code></pre></section>\n*[[Slider.disabled]] <section class="prog__container"><p>If true the user won't be able to move the slider. Default value is false.</p><pre><code>disabled bool</code></pre></section>\n*[[Button.disabled]] <section class="prog__container"><p>Scrolls to a given x, y offset, either immediately or with a smooth animation.</p><pre><code>scrollTo(y?, x?, animated?)</code></pre></section>			
dismiss	R	Keyboard.dismiss										
dismissedAction	D								*[[TimePickerAndroid.dismissedAction]] <section class="prog__container"><p>The dialog has been dismissed.</p><pre><code>dismissedAction(0)</code></pre></section>\n*[[DatePickerAndroid.dismissedAction]] <section class="prog__container"><p>The dialog has been dismissed.</p><pre><code>dismissedAction(0)</code></pre></section>\n*[[Share.dismissedAction]] <section class="prog__container"><p>Loads static html or a uri (with optional headers) in the WebView.</p><pre><code>source {uri: string, method: string, headers: object, body: string}, {html: string, baseUrl: string}, number</code></pre></section>			
domStorageEnabled	R	WebView.domStorageEnabled										
drawerBackgroundColor	R	DrawerLayoutAndroid.drawerBackgroundColor										
drawerLockMode	R	DrawerLayoutAndroid.drawerLockMode										
drawerPosition	R	DrawerLayoutAndroid.drawerPosition										
drawerWidth	R	DrawerLayoutAndroid.drawerWidth										
ease	R	Easing.ease										
editable	R	TextInput.editable										
elastic	R	Easing.elastic										
ellipsizeMode	R	Text.ellipsizeMode										
enableEmptySections	R	ListView.enableEmptySections										
enabled	D								*[[RefreshControl.enabled]] <section class="prog__container"><p>Whether the pull to refresh functionality is enabled.</p><pre><code>enabled bool</code></pre></section>\n*[[Picker.enabled]] <section class="prog__container"><p>If set to false, the picker will be disabled, i.e. the user will not be able to make a selection.</p><pre><code>enabled bool</code></pre></section>\n*[[SegmentedControlIOS.enabled]] <section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>			
enablesReturnKeyAutomatically	R	TextInput.enablesReturnKeyAutomatically										
endAsyncEvent	R	Systrace.endAsyncEvent										
endEvent	R	Systrace.endEvent										
endFillColor	R	ScrollView.endFillColor										
exitApp	R	BackAndroid.exitApp										
exp	R	Easing.exp										
fetch	R	NetInfo.fetch										
finish	R	PushNotificationIOS.finish										
flattenOffset	R	Animated.flattenOffset										
flex	R	Layout Props.flex										
flexBasis	R	Layout Props.flexBasis										
flexDirection	R	Layout Props.flexDirection										
flexGrow	R	Layout Props.flexGrow										
flexShrink	R	Layout Props.flexShrink										
flexWrap	R	Layout Props.flexWrap										
flushGetRequests	R	AsyncStorage.flushGetRequests										
focus	R	NativeMethodsMixin.focus										
followUserLocation	R	MapView.followUserLocation										
get	D								*[[Settings.get]] <section class="prog__container"><p>Callback that is called when the user taps a segment; passes the event as an argument</p><pre><code>onChange function</code></pre></section>\n*[[PixelRatio.get]] <section class="prog__container"><p>Returns the device pixel density. Some examples:</p><pre><code>get(0)</code></pre></section>\n*[[Dimensions.get]] <section class="prog__container"><p>Initial dimensions are set before runApplication is called so they should be available before any other require's are run, but may be updated later.</p><pre><code>get(dim)</code></pre></section>			
getAdvertisingId	R	AdSupportIOS.getAdvertisingId										
getAdvertisingTrackingEnabled	R	AdSupportIOS.getAdvertisingTrackingEnabled										
getAlert	R	PushNotificationIOS.getAlert										
getAllKeys	R	AsyncStorage.getAllKeys										
getAppKeys	R	AppRegistry.getAppKeys										
getApplicationIconBadgeNumber	R	PushNotificationIOS.getApplicationIconBadgeNumber										
getBadgeCount	R	PushNotificationIOS.getBadgeCount										
getBase64ForTag	R	ImageStore.getBase64ForTag										
getCurrentPosition	R	Geolocation.getCurrentPosition										
getCurrentRoutes	R	Navigator.getCurrentRoutes										
getData	R	PushNotificationIOS.getData										
getFontScale	R	PixelRatio.getFontScale										
getInitialNotification	R	PushNotificationIOS.getInitialNotification										
getInitialURL	R	Linking.getInitialURL										
getItem	R	AsyncStorage.getItem										
getLayout	R	Animated.getLayout										
getMessage	R	PushNotificationIOS.getMessage										
getMetrics	R	ListView.getMetrics										
getPhotos	R	CameraRoll.getPhotos										
getPixelSizeForLayoutSize	R	PixelRatio.getPixelSizeForLayoutSize										
getScheduledLocalNotifications	R	PushNotificationIOS.getScheduledLocalNotifications										
getSize	R	Image.getSize										
getSound	R	PushNotificationIOS.getSound										
getString	R	Clipboard.getString										
getTranslateTransform	R	Animated.getTranslateTransform										
hasImageForTag	R	ImageStore.hasImageForTag										
height	R	Layout Props.height										
hidden	R	StatusBar.hidden										
hidesWhenStopped	R	ActivityIndicator.hidesWhenStopped										
hitSlop	D								*[[View.hitSlop]] <section class="prog__container"><p>This defines how far a touch event can start away from the view. Typical interface guidelines recommend touch targets that are at least 30 - 40 points/density-independent pixels.</p><pre><code>hitSlop {top: number, left: number, bottom: number, right: number}</code></pre></section>\n*[[TouchableWithoutFeedback.hitSlop]] <section class="prog__container"><p>This defines how far your touch can start away from the button. This is added to pressRetentionOffset when moving off of the button.  NOTE  The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.</p><pre><code>hitSlop {top: number, left: number, bottom: number, right: number}</code></pre></section>			
horizontal	R	ScrollView.horizontal										
html	R	WebView.html										
icon	R	TabBarIOS.Item.icon										
immediatelyResetRouteStack	R	Navigator.immediatelyResetRouteStack										
importantForAccessibility	R	View.importantForAccessibility										
in	R	Easing.in										
inOut	R	Easing.inOut										
indeterminate	R	ProgressBarAndroid.indeterminate										
indicatorStyle	R	ScrollView.indicatorStyle										
initialListSize	R	ListView.initialListSize										
initialPage	R	ViewPagerAndroid.initialPage										
initialRoute	D								*[[Navigator.initialRoute]] <section class="prog__container"><p>The initial route for navigation. A route is an object that the navigator will use to identify each scene it renders.</p><pre><code>initialRoute object</code></pre></section>\n*[[NavigatorIOS.initialRoute]] <section class="prog__container"><p>NavigatorIOS uses route objects to identify child views, their props, and navigation bar configuration. Navigation operations such as push operations expect routes to look like this the initialRoute.</p><pre><code>initialRoute {component: function, title: string, titleImage: Image.propTypes.source, passProps: object, backButtonIcon: Image.propTypes.source, backButtonTitle: string, leftButtonIcon: Image.propTypes.source, leftButtonTitle: string, leftButtonSystemIcon: Object.keys(SystemIcons), onLeftButtonPress: function, rightButtonIcon: Image.propTypes.source, rightButtonTitle: string, rightButtonSystemIcon: Object.keys(SystemIcons), onRightButtonPress: function, wrapperStyle: [object Object], navigationBarHidden: bool, shadowHidden: bool, tintColor: string, barTintColor: string, titleTextColor: string, translucent: bool}</code></pre></section>			
initialRouteStack	R	Navigator.initialRouteStack										
injectedJavaScript	R	WebView.injectedJavaScript										
inlineImageLeft	R	TextInput.inlineImageLeft										
inlineImagePadding	R	TextInput.inlineImagePadding										
interactivePopGestureEnabled	R	NavigatorIOS.interactivePopGestureEnabled										
isConnectionExpensive	R	NetInfo.isConnectionExpensive										
isFocused	R	TextInput.isFocused										
itemPositioning	R	TabBarIOS.itemPositioning										
itemStyle	D								*[[PickerIOS.itemStyle]] <section class="prog__container"><pre><code>itemStyle itemStylePropType</code></pre></section>\n*[[Picker.itemStyle]] <section class="prog__container"><p>Style to apply to each of the item labels.</p><pre><code>itemStyle itemStylePropType</code></pre></section>			
itemWrapperStyle	R	NavigatorIOS.itemWrapperStyle										
javaScriptEnabled	R	WebView.javaScriptEnabled										
jumpBack	R	Navigator.jumpBack										
jumpForward	R	Navigator.jumpForward										
jumpTo	R	Navigator.jumpTo										
justifyContent	R	Layout Props.justifyContent										
keyboardAppearance	R	TextInput.keyboardAppearance										
keyboardDismissMode	D								*[[ScrollView.keyboardDismissMode]] <section class="prog__container"><p>Determines whether the keyboard gets dismissed in response to a drag.  - 'none' (the default), drags do not dismiss the keyboard.  - 'on-drag', the keyboard is dismissed when a drag begins.  - 'interactive', the keyboard is dismissed interactively with the drag and moves in   synchrony with the touch; dragging upwards cancels the dismissal.   On android this is not supported and it will have the same behavior as 'none'.</p><pre><code>keyboardDismissMode enum('none', 'interactive', 'on-drag')</code></pre></section>\n*[[ViewPagerAndroid.keyboardDismissMode]] <section class="prog__container"><p>Prompt string for this picker, used on Android in dialog mode as the title of the dialog.</p><pre><code>prompt string</code></pre></section>\n*[[DrawerLayoutAndroid.keyboardDismissMode]] <section class="prog__container"><p>Determines whether the keyboard gets dismissed in response to a drag.  - 'none' (the default), drags do not dismiss the keyboard.  - 'on-drag', the keyboard is dismissed when a drag begins.</p><pre><code>keyboardDismissMode enum('none', 'on-drag')</code></pre></section>			
keyboardShouldPersistTaps	R	ScrollView.keyboardShouldPersistTaps										
keyboardType	R	TextInput.keyboardType										
keyboardVerticalOffset	R	KeyboardAvoidingView.keyboardVerticalOffset										
left	R	Layout Props.left										
legalLabelInsets	R	MapView.legalLabelInsets										
linear	R	Easing.linear										
logo	R	ToolbarAndroid.logo										
mapType	R	MapView.mapType										
margin	R	Layout Props.margin										
marginBottom	R	Layout Props.marginBottom										
marginHorizontal	R	Layout Props.marginHorizontal										
marginLeft	R	Layout Props.marginLeft										
marginRight	R	Layout Props.marginRight										
marginTop	R	Layout Props.marginTop										
marginVertical	R	Layout Props.marginVertical										
maxDelta	R	MapView.maxDelta										
maxHeight	R	Layout Props.maxHeight										
maxLength	R	TextInput.maxLength										
maxWidth	R	Layout Props.maxWidth										
maximumDate	R	DatePickerIOS.maximumDate										
maximumTrackImage	R	Slider.maximumTrackImage										
maximumTrackTintColor	R	Slider.maximumTrackTintColor										
maximumValue	R	Slider.maximumValue										
maximumZoomScale	R	ScrollView.maximumZoomScale										
measure	D								*[[Systrace.measure]] <section class="prog__container"><p>Returns an profiled version of the input function. For example, you can: JSON.parse = Systrace.measure('JSON', 'parse', JSON.parse);</p><pre><code>measure(objName, fnName, func)</code></pre></section>\n*[[NativeMethodsMixin.measure]] <section class="prog__container"><p>Determines the location on screen, width, and height of the given view and returns the values via an async callback. If successful, the callback will be called with the following arguments:</p><pre><code>measure(callback)</code></pre></section>			
measureInWindow	R	NativeMethodsMixin.measureInWindow										
measureLayout	R	NativeMethodsMixin.measureLayout										
measureMethods	R	Systrace.measureMethods										
mediaPlaybackRequiresUserAction	R	WebView.mediaPlaybackRequiresUserAction										
mergeItem	R	AsyncStorage.mergeItem										
minDelta	R	MapView.minDelta										
minHeight	R	Layout Props.minHeight										
minWidth	R	Layout Props.minWidth										
minimumDate	R	DatePickerIOS.minimumDate										
minimumFontScale	R	Text.minimumFontScale										
minimumTrackImage	R	Slider.minimumTrackImage										
minimumTrackTintColor	R	Slider.minimumTrackTintColor										
minimumValue	R	Slider.minimumValue										
minimumZoomScale	R	ScrollView.minimumZoomScale										
minuteInterval	R	DatePickerIOS.minuteInterval										
mode	D								*[[Picker.mode]] <section class="prog__container"><p>On Android, specifies how to display the selection items when the user taps on the picker:</p><pre><code>mode enum('dialog', 'dropdown')</code></pre></section>\n*[[DatePickerIOS.mode]] <section class="prog__container"><p>The date picker mode.</p><pre><code>mode enum('date', 'time', 'datetime')</code></pre></section>			
momentary	R	SegmentedControlIOS.momentary										
multiGet	R	AsyncStorage.multiGet										
multiMerge	R	AsyncStorage.multiMerge										
multiRemove	R	AsyncStorage.multiRemove										
multiSet	R	AsyncStorage.multiSet										
multiline	R	TextInput.multiline										
navIcon	R	ToolbarAndroid.navIcon										
navigationBar	R	Navigator.navigationBar										
navigationBarHidden	R	NavigatorIOS.navigationBarHidden										
navigator	R	Navigator.navigator										
needsOffscreenAlphaCompositing	R	View.needsOffscreenAlphaCompositing										
networkActivityIndicatorVisible	R	StatusBar.networkActivityIndicatorVisible										
numberOfLines	D								*[[Text.numberOfLines]] <section class="prog__container"><p>Used to truncate the text with an ellipsis after computing the text layout, including line wrapping, such that the total number of lines does not exceed this number.</p><pre><code>numberOfLines number</code></pre></section>\n*[[TextInput.numberOfLines]] <section class="prog__container"><p>Sets the number of lines for a TextInput. Use it with multiline set to true to be able to fill the lines.</p><pre><code>numberOfLines number</code></pre></section>			
onAccessibilityTap	R	View.onAccessibilityTap										
onActionSelected	R	ToolbarAndroid.onActionSelected										
onAnnotationPress	R	MapView.onAnnotationPress										
onBlur	R	TextInput.onBlur										
onChange	D								*[[SegmentedControlIOS.onChange]] <section class="prog__container"><p>Callback that is called when the user taps a segment; passes the event as an argument</p><pre><code>onChange function</code></pre></section>\n*[[TextInput.onChange]] <section class="prog__container"><p>Callback that is called when the text input's text changes.</p><pre><code>onChange function</code></pre></section>			
onChangeText	R	TextInput.onChangeText										
onChangeVisibleRows	R	ListView.onChangeVisibleRows										
onContentSizeChange	D								*[[TextInput.onContentSizeChange]] <section class="prog__container"><p>Callback that is called when the text input's content size changes. This will be called with { nativeEvent: { contentSize: { width, height } } }.</p><pre><code>onContentSizeChange function</code></pre></section>\n*[[ScrollView.onContentSizeChange]] <section class="prog__container"><p>Called when scrollable content view of the ScrollView changes.</p><pre><code>onContentSizeChange function</code></pre></section>			
onDateChange	R	DatePickerIOS.onDateChange										
onDidFocus	R	Navigator.onDidFocus										
onDrawerClose	R	DrawerLayoutAndroid.onDrawerClose										
onDrawerOpen	R	DrawerLayoutAndroid.onDrawerOpen										
onDrawerSlide	R	DrawerLayoutAndroid.onDrawerSlide										
onDrawerStateChanged	R	DrawerLayoutAndroid.onDrawerStateChanged										
onEndEditing	R	TextInput.onEndEditing										
onEndReached	R	ListView.onEndReached										
onEndReachedThreshold	R	ListView.onEndReachedThreshold										
onError	D								*[[Image.onError]] <section class="prog__container"><p>Invoked on load error with {nativeEvent: {error}}.</p><pre><code>onError function</code></pre></section>\n*[[WebView.onError]] <section class="prog__container"><p>Function that is invoked when the WebView load fails.</p><pre><code>onError function</code></pre></section>			
onFocus	R	TextInput.onFocus										
onHideUnderlay	R	TouchableHighlight.onHideUnderlay										
onIconClicked	R	ToolbarAndroid.onIconClicked										
onKeyPress	R	TextInput.onKeyPress										
onKeyboardChange	R	KeyboardAvoidingView.onKeyboardChange										
onLayout	D								*[[KeyboardAvoidingView.onLayout]] <section class="prog__container"><p>Title color.</p><pre><code>titleColor color</code></pre></section>\n*[[Image.onLayout]] <section class="prog__container"><p>The amount by which the scroll view content is inset from the edges of the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.</p><pre><code>contentInset {top: number, left: number, bottom: number, right: number}</code></pre></section>\n*[[View.onLayout]] <section class="prog__container"><p>Determines the types of data converted to clickable URLs in the text input. Only valid if multiline={true} and editable={false}. By default no data types are detected.</p><pre><code>dataDetectorTypes enum('phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'), [object Object]</code></pre></section>\n*[[TextInput.onLayout]] <section class="prog__container"><p>Invoked on mount and layout changes with {x, y, width, height}.</p><pre><code>onLayout function</code></pre></section>\n*[[Text.onLayout]] <section class="prog__container"><p>Replace the current scene with a new route.</p><pre><code>replace(route)</code></pre></section>\n*[[TouchableWithoutFeedback.onLayout]] <section class="prog__container"><p>Invoked on mount and layout changes with</p><pre><code>onLayout function</code></pre></section>			
onLoad	D								*[[Image.onLoad]] <section class="prog__container"><p>Invoked when load completes successfully.</p><pre><code>onLoad function</code></pre></section>\n*[[WebView.onLoad]] <section class="prog__container"><p>Function that is invoked when the WebView has finished loading.</p><pre><code>onLoad function</code></pre></section>			
onLoadEnd	D								*[[Image.onLoadEnd]] <section class="prog__container"><p>Invoked when load either succeeds or fails.</p><pre><code>onLoadEnd function</code></pre></section>\n*[[WebView.onLoadEnd]] <section class="prog__container"><p>Function that is invoked when the WebView load succeeds or fails.</p><pre><code>onLoadEnd function</code></pre></section>			
onLoadStart	D								*[[WebView.onLoadStart]] <section class="prog__container"><p>Function that is invoked when the WebView starts loading.</p><pre><code>onLoadStart function</code></pre></section>\n*[[Image.onLoadStart]] <section class="prog__container"><p>Invoked on load start.</p><pre><code>onLoadStart function</code></pre></section>			
onLongPress	D								*[[TouchableWithoutFeedback.onLongPress]] <section class="prog__container"><pre><code>onLongPress function</code></pre></section>\n*[[Text.onLongPress]] <section class="prog__container"><p>This function is called on long press.</p><pre><code>onLongPress function</code></pre></section>			
onMagicTap	R	View.onMagicTap										
onMessage	R	WebView.onMessage										
onMoveShouldSetResponder	R	View.onMoveShouldSetResponder										
onMoveShouldSetResponderCapture	R	View.onMoveShouldSetResponderCapture										
onNavigationStateChange	R	WebView.onNavigationStateChange										
onOrientationChange	R	Modal.onOrientationChange										
onPageScroll	R	ViewPagerAndroid.onPageScroll										
onPageScrollStateChanged	R	ViewPagerAndroid.onPageScrollStateChanged										
onPageSelected	R	ViewPagerAndroid.onPageSelected										
onPartialLoad	R	Image.onPartialLoad										
onPress	D								*[[TabBarIOS.Item.onPress]] <section class="prog__container"><p>Callback when this tab is being selected, you should change the state of your component to set selected={true}.</p><pre><code>onPress function</code></pre></section>\n*[[Text.onPress]] <section class="prog__container"><p>Pop back to the previous scene.</p><pre><code>pop(0)</code></pre></section>\n*[[Button.onPress]] <section class="prog__container"><p>Handler to be called when the user taps the button</p><pre><code>onPress function</code></pre></section>\n*[[TouchableWithoutFeedback.onPress]] <section class="prog__container"><p>Determines what the opacity of the wrapped view should be when touch is active.</p><pre><code>activeOpacity number</code></pre></section>			
onPressIn	R	TouchableWithoutFeedback.onPressIn										
onPressOut	R	TouchableWithoutFeedback.onPressOut										
onProgress	R	Image.onProgress										
onRefresh	R	RefreshControl.onRefresh										
onRegionChange	R	MapView.onRegionChange										
onRegionChangeComplete	R	MapView.onRegionChangeComplete										
onRequestClose	R	Modal.onRequestClose										
onResponderGrant	R	View.onResponderGrant										
onResponderMove	R	View.onResponderMove										
onResponderReject	R	View.onResponderReject										
onResponderRelease	R	View.onResponderRelease										
onResponderTerminate	R	View.onResponderTerminate										
onResponderTerminationRequest	R	View.onResponderTerminationRequest										
onScroll	D								*[[TextInput.onScroll]] <section class="prog__container"><p>Invoked on content scroll with { nativeEvent: { contentOffset: { x, y } } }. May also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.</p><pre><code>onScroll function</code></pre></section>\n*[[ScrollView.onScroll]] <section class="prog__container"><p>Fires at most once per frame during scrolling. The frequency of the events can be controlled using the scrollEventThrottle prop.</p><pre><code>onScroll function</code></pre></section>			
onScrollAnimationEnd	R	ScrollView.onScrollAnimationEnd										
onSelectionChange	R	TextInput.onSelectionChange										
onShouldStartLoadWithRequest	R	WebView.onShouldStartLoadWithRequest										
onShow	R	Modal.onShow										
onShowUnderlay	R	TouchableHighlight.onShowUnderlay										
onSlidingComplete	R	Slider.onSlidingComplete										
onSnapshotReady	R	SnapshotViewIOS.onSnapshotReady										
onStartShouldSetResponder	R	View.onStartShouldSetResponder										
onStartShouldSetResponderCapture	R	View.onStartShouldSetResponderCapture										
onSubmitEditing	R	TextInput.onSubmitEditing										
onTintColor	R	Switch.onTintColor										
onValueChange	D								*[[SegmentedControlIOS.onValueChange]] <section class="prog__container"><p>Callback that is called when the user taps a segment; passes the segment's value as an argument</p><pre><code>onValueChange function</code></pre></section>\n*[[PickerIOS.onValueChange]] <section class="prog__container"><p>Determines the types of data converted to clickable URLs in the text input. Only valid if multiline={true} and editable={false}. By default no data types are detected.</p><pre><code>dataDetectorTypes enum('phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'), [object Object]</code></pre></section>\n*[[Picker.onValueChange]] <section class="prog__container"><p>Callback for when an item is selected. This is called with the following parameters:  - itemValue: the value prop of the item that was selected  - itemPosition: the index of the selected item in this picker</p><pre><code>onValueChange function</code></pre></section>\n*[[Switch.onValueChange]] <section class="prog__container"><p>If the transition between status bar property changes should be animated. Supported for backgroundColor, barStyle and hidden.</p><pre><code>animated bool</code></pre></section>\n*[[Slider.onValueChange]] <section class="prog__container"><p>Replace the previous scene.</p><pre><code>replacePrevious(route)</code></pre></section>			
onWillFocus	R	Navigator.onWillFocus										
open	D								*[[TimePickerAndroid.open]] <section class="prog__container"><p>Opens the standard Android time picker dialog.</p><pre><code>open(options)</code></pre></section>\n*[[DatePickerAndroid.open]] <section class="prog__container"><p>Opens the standard Android date picker dialog.</p><pre><code>open(options)</code></pre></section>			
openCameraDialog	R	ImagePickerIOS.openCameraDialog										
openDrawer	R	DrawerLayoutAndroid.openDrawer										
openSelectDialog	R	ImagePickerIOS.openSelectDialog										
openURL	R	Linking.openURL										
out	R	Easing.out										
overflow	R	Layout Props.overflow										
overflowIcon	R	ToolbarAndroid.overflowIcon										
overlays	R	MapView.overlays										
padding	R	Layout Props.padding										
paddingBottom	R	Layout Props.paddingBottom										
paddingHorizontal	R	Layout Props.paddingHorizontal										
paddingLeft	R	Layout Props.paddingLeft										
paddingRight	R	Layout Props.paddingRight										
paddingTop	R	Layout Props.paddingTop										
paddingVertical	R	Layout Props.paddingVertical										
pageMargin	R	ViewPagerAndroid.pageMargin										
pageSize	R	ListView.pageSize										
pagingEnabled	R	ScrollView.pagingEnabled										
pitchEnabled	R	MapView.pitchEnabled										
placeholder	R	TextInput.placeholder										
placeholderTextColor	R	TextInput.placeholderTextColor										
pointerEvents	R	View.pointerEvents										
poly	R	Easing.poly										
pop	D								*[[NavigatorIOS.pop]] <section class="prog__container"><p>Pop back to the previous scene.</p><pre><code>pop(0)</code></pre></section>\n*[[Navigator.pop]] <section class="prog__container"><p>Transition back and unmount the current scene.</p><pre><code>pop(0)</code></pre></section>			
popN	D								*[[Navigator.popN]] <section class="prog__container"><p>Go back N scenes at once. When N=1, behavior matches pop(). When N is invalid(negative or bigger than current routes count), do nothing.</p><pre><code>popN(n)</code></pre></section>\n*[[NavigatorIOS.popN]] <section class="prog__container"><p>Go back N scenes at once. When N=1, behavior matches pop().</p><pre><code>popN(n)</code></pre></section>			
popToRoute	D								*[[Navigator.popToRoute]] <section class="prog__container"><p>Pop to a particular scene, as specified by its route. All scenes after it will be unmounted.</p><pre><code>popToRoute(route)</code></pre></section>\n*[[NavigatorIOS.popToRoute]] <section class="prog__container"><p>Go back to the item for a particular route object.</p><pre><code>popToRoute(route)</code></pre></section>			
popToTop	D								*[[Navigator.popToTop]] <section class="prog__container"><p>Pop to the first scene in the stack, unmounting every other scene.</p><pre><code>popToTop(0)</code></pre></section>\n*[[NavigatorIOS.popToTop]] <section class="prog__container"><p>Go back to the topmost item in the navigation stack.</p><pre><code>popToTop(0)</code></pre></section>			
position	R	Layout Props.position										
prefetch	R	Image.prefetch										
pressRetentionOffset	R	TouchableWithoutFeedback.pressRetentionOffset										
progress	D								*[[ProgressViewIOS.progress]] <section class="prog__container"><p>The progress value (between 0 and 1).</p><pre><code>progress number</code></pre></section>\n*[[ProgressBarAndroid.progress]] <section class="prog__container"><p>The progress value (between 0 and 1).</p><pre><code>progress number</code></pre></section>			
progressBackgroundColor	R	RefreshControl.progressBackgroundColor										
progressImage	R	ProgressViewIOS.progressImage										
progressTintColor	R	ProgressViewIOS.progressTintColor										
progressViewOffset	R	RefreshControl.progressViewOffset										
progressViewStyle	R	ProgressViewIOS.progressViewStyle										
prompt	D								*[[Picker.prompt]] <section class="prog__container"><p>Prompt string for this picker, used on Android in dialog mode as the title of the dialog.</p><pre><code>prompt string</code></pre></section>\n*[[AlertIOS.prompt]] <section class="prog__container"><p>Create and display a prompt to enter some text.</p><pre><code>prompt(title, message?, callbackOrButtons?, type?, defaultValue?)</code></pre></section>			
push	D								*[[Navigator.push]] <section class="prog__container"><p>Navigate forward to a new scene, squashing any scenes that you could jump forward to.</p><pre><code>push(route)</code></pre></section>\n*[[NavigatorIOS.push]] <section class="prog__container"><p>Navigate forward to a new route.</p><pre><code>push(route)</code></pre></section>			
quad	R	Easing.quad										
refreshControl	R	ScrollView.refreshControl										
refreshing	R	RefreshControl.refreshing										
region	R	MapView.region										
registerComponent	R	AppRegistry.registerComponent										
registerConfig	R	AppRegistry.registerConfig										
registerHeadlessTask	R	AppRegistry.registerHeadlessTask										
registerRunnable	R	AppRegistry.registerRunnable										
relativeKeyboardHeight	R	KeyboardAvoidingView.relativeKeyboardHeight										
removeAllListeners	R	Keyboard.removeAllListeners										
removeClippedSubviews	D								*[[View.removeClippedSubviews]] <section class="prog__container"><p>If the transition between status bar property changes should be animated. Supported for backgroundColor, barStyle and hidden.</p><pre><code>animated bool</code></pre></section>\n*[[ScrollView.removeClippedSubviews]] <section class="prog__container"><p>Experimental: When true, offscreen child views (whose overflow value is hidden) are removed from their native backing superview when offscreen. This can improve scrolling performance on long lists. The default value is true.</p><pre><code>removeClippedSubviews bool</code></pre></section>\n*[[ListView.removeClippedSubviews]] <section class="prog__container"><p>A performance optimization for improving scroll perf of large lists, used in conjunction with overflow: 'hidden' on the row containers. This is enabled by default.</p><pre><code>removeClippedSubviews bool</code></pre></section>			
removeEventListener	D								*[[AppState.removeEventListener]] <section class="prog__container"><p>Remove a handler by passing the change event type and the handler</p><pre><code>removeEventListener(type, handler)</code></pre></section>\n*[[Linking.removeEventListener]] <section class="prog__container"><p>Called when scrollable content view of the ScrollView changes.</p><pre><code>onContentSizeChange function</code></pre></section>\n*[[PushNotificationIOS.removeEventListener]] <section class="prog__container"><p>This defines how far your touch can start away from the button. This is added to pressRetentionOffset when moving off of the button.  NOTE  The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.</p><pre><code>hitSlop {top: number, left: number, bottom: number, right: number}</code></pre></section>\n*[[NetInfo.removeEventListener]] <section class="prog__container"><p>Callback for when an item is selected. This is called with the following parameters:  - itemValue: the value prop of the item that was selected  - itemPosition: the index of the selected item in this picker</p><pre><code>onValueChange function</code></pre></section>\n*[[BackAndroid.removeEventListener]] <section class="prog__container"><pre><code>removeEventListener(eventName, handler)</code></pre></section>			
removeImageForTag	R	ImageStore.removeImageForTag										
removeItem	R	AsyncStorage.removeItem										
removeListener	D								*[[Keyboard.removeListener]] <section class="prog__container"><p>Removes a specific listener.</p><pre><code>removeListener(eventName, callback)</code></pre></section>\n*[[Animated.removeListener]] <section class="prog__container"><pre><code>removeListener(id)</code></pre></section>			
renderAsOriginal	R	TabBarIOS.Item.renderAsOriginal										
renderError	R	WebView.renderError										
renderFooter	R	ListView.renderFooter										
renderHeader	R	ListView.renderHeader										
renderLoading	R	WebView.renderLoading										
renderNavigationView	R	DrawerLayoutAndroid.renderNavigationView										
renderRow	R	ListView.renderRow										
renderScene	R	Navigator.renderScene										
renderScrollComponent	R	ListView.renderScrollComponent										
renderSectionHeader	R	ListView.renderSectionHeader										
renderSeparator	R	ListView.renderSeparator										
renderToHardwareTextureAndroid	R	View.renderToHardwareTextureAndroid										
replace	D								*[[NavigatorIOS.replace]] <section class="prog__container"><p>Replace the route for the current scene and immediately load the view for the new route.</p><pre><code>replace(route)</code></pre></section>\n*[[Navigator.replace]] <section class="prog__container"><p>Replace the current scene with a new route.</p><pre><code>replace(route)</code></pre></section>			
replaceAtIndex	D								*[[NavigatorIOS.replaceAtIndex]] <section class="prog__container"><p>Replace a route in the navigation stack.</p><pre><code>replaceAtIndex(route, index)</code></pre></section>\n*[[Navigator.replaceAtIndex]] <section class="prog__container"><p>Replace a scene as specified by an index.</p><pre><code>replaceAtIndex(route, index, cb)</code></pre></section>			
replacePrevious	D								*[[NavigatorIOS.replacePrevious]] <section class="prog__container"><p>Replace the route/view for the previous scene.</p><pre><code>replacePrevious(route)</code></pre></section>\n*[[Navigator.replacePrevious]] <section class="prog__container"><p>Replace the previous scene.</p><pre><code>replacePrevious(route)</code></pre></section>			
replacePreviousAndPop	D								*[[Navigator.replacePreviousAndPop]] <section class="prog__container"><p>Replace the previous scene and pop to it.</p><pre><code>replacePreviousAndPop(route)</code></pre></section>\n*[[NavigatorIOS.replacePreviousAndPop]] <section class="prog__container"><p>Replaces the previous route/view and transitions back to it.</p><pre><code>replacePreviousAndPop(route)</code></pre></section>			
request	R	PermissionsAndroid.request										
requestMultiple	R	PermissionsAndroid.requestMultiple										
requestPermission	R	PermissionsAndroid.requestPermission										
requestPermissions	R	PushNotificationIOS.requestPermissions										
resetTo	D								*[[Navigator.resetTo]] <section class="prog__container"><p>Navigate to a new scene and reset route stack.</p><pre><code>resetTo(route)</code></pre></section>\n*[[NavigatorIOS.resetTo]] <section class="prog__container"><p>Replaces the top item and pop to it.</p><pre><code>resetTo(route)</code></pre></section>			
resizeMethod	R	Image.resizeMethod										
resizeMode	R	Image.resizeMode										
returnKeyLabel	R	TextInput.returnKeyLabel										
returnKeyType	R	TextInput.returnKeyType										
right	R	Layout Props.right										
rotateEnabled	R	MapView.rotateEnabled										
roundToNearestPixel	R	PixelRatio.roundToNearestPixel										
rtl	R	ToolbarAndroid.rtl										
runAfterInteractions	R	InteractionManager.runAfterInteractions										
runApplication	R	AppRegistry.runApplication										
saveImageWithTag	R	CameraRoll.saveImageWithTag										
saveToCameraRoll	R	CameraRoll.saveToCameraRoll										
scalesPageToFit	R	WebView.scalesPageToFit										
sceneStyle	R	Navigator.sceneStyle										
scheduleLocalNotification	R	PushNotificationIOS.scheduleLocalNotification										
scrollEnabled	D								*[[ScrollView.scrollEnabled]] <section class="prog__container"><p>When false, the content does not scroll. The default value is true.</p><pre><code>scrollEnabled bool</code></pre></section>\n*[[WebView.scrollEnabled]] <section class="prog__container"><p>Helper for creating a config for configureNext.</p><pre><code>create(duration, type, creationProp)</code></pre></section>\n*[[ViewPagerAndroid.scrollEnabled]] <section class="prog__container"><p>When false, the content does not scroll. The default value is true.</p><pre><code>scrollEnabled bool</code></pre></section>\n*[[MapView.scrollEnabled]] <section class="prog__container"><p>Create and display a popup alert.</p><pre><code>alert(title, message?, callbackOrButtons?, type?)</code></pre></section>			
scrollEventThrottle	R	ScrollView.scrollEventThrottle										
scrollIndicatorInsets	R	ScrollView.scrollIndicatorInsets										
scrollPerfTag	R	ScrollView.scrollPerfTag										
scrollRenderAheadDistance	R	ListView.scrollRenderAheadDistance										
scrollTo	D								*[[ScrollView.scrollTo]] <section class="prog__container"><p>Scrolls to a given x, y offset, either immediately or with a smooth animation.</p><pre><code>scrollTo(y?, x?, animated?)</code></pre></section>\n*[[ListView.scrollTo]] <section class="prog__container"><p>Scrolls to a given x, y offset, either immediately or with a smooth animation.</p><pre><code>scrollTo(...args)</code></pre></section>			
scrollWithoutAnimationTo	R	ScrollView.scrollWithoutAnimationTo										
scrollsToTop	R	ScrollView.scrollsToTop										
secureTextEntry	R	TextInput.secureTextEntry										
selectTextOnFocus	R	TextInput.selectTextOnFocus										
selectable	R	Text.selectable										
selected	R	TabBarIOS.Item.selected										
selectedIcon	R	TabBarIOS.Item.selectedIcon										
selectedIndex	R	SegmentedControlIOS.selectedIndex										
selectedValue	D								*[[Picker.selectedValue]] <section class="prog__container"><p>Value matching value of one of the items. Can be a string or an integer.</p><pre><code>selectedValue any</code></pre></section>\n*[[PickerIOS.selectedValue]] <section class="prog__container"><pre><code>selectedValue any</code></pre></section>			
selection	R	TextInput.selection										
selectionColor	R	TextInput.selectionColor										
selectionState	R	TextInput.selectionState										
set	D								*[[Dimensions.set]] <section class="prog__container"><p>This should only be called from native code by sending the didUpdateDimensions event.</p><pre><code>set(dims)</code></pre></section>\n*[[Settings.set]] <section class="prog__container"><pre><code>set(settings)</code></pre></section>			
setApplicationIconBadgeNumber	R	PushNotificationIOS.setApplicationIconBadgeNumber										
setBackgroundColor	R	StatusBar.setBackgroundColor										
setBarStyle	R	StatusBar.setBarStyle										
setDeadline	R	InteractionManager.setDeadline										
setEnabled	R	Systrace.setEnabled										
setHidden	R	StatusBar.setHidden										
setItem	R	AsyncStorage.setItem										
setNetworkActivityIndicatorVisible	R	StatusBar.setNetworkActivityIndicatorVisible										
setOffset	R	Animated.setOffset										
setOpacityTo	R	TouchableOpacity.setOpacityTo										
setString	R	Clipboard.setString										
setStyleAttributePreprocessor	R	StyleSheet.setStyleAttributePreprocessor										
setTranslucent	R	StatusBar.setTranslucent										
setValue	R	Animated.setValue										
shadowColor	R	Shadow Props.shadowColor										
shadowHidden	R	NavigatorIOS.shadowHidden										
shadowOffset	R	Shadow Props.shadowOffset										
shadowOpacity	R	Shadow Props.shadowOpacity										
shadowRadius	R	Shadow Props.shadowRadius										
share	R	Share.share										
sharedAction	R	Share.sharedAction										
shouldRasterizeIOS	R	View.shouldRasterizeIOS										
show	R	ToastAndroid.show										
showActionSheetWithOptions	R	ActionSheetIOS.showActionSheetWithOptions										
showHideTransition	R	StatusBar.showHideTransition										
showShareActionSheetWithOptions	R	ActionSheetIOS.showShareActionSheetWithOptions										
showWithGravity	R	ToastAndroid.showWithGravity										
showsAnnotationCallouts	R	MapView.showsAnnotationCallouts										
showsCompass	R	MapView.showsCompass										
showsHorizontalScrollIndicator	R	ScrollView.showsHorizontalScrollIndicator										
showsPointsOfInterest	R	MapView.showsPointsOfInterest										
showsUserLocation	R	MapView.showsUserLocation										
showsVerticalScrollIndicator	R	ScrollView.showsVerticalScrollIndicator										
sin	R	Easing.sin										
size	D								*[[RefreshControl.size]] <section class="prog__container"><p>Size of the refresh indicator, see RefreshControl.SIZE.</p><pre><code>size enum(RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE)</code></pre></section>\n*[[ActivityIndicator.size]] <section class="prog__container"><p>Size of the indicator (default is 'small'). Passing a number to the size prop is only supported on Android.</p><pre><code>size enum('small', 'large'), number</code></pre></section>			
snapToAlignment	R	ScrollView.snapToAlignment										
snapToInterval	R	ScrollView.snapToInterval										
source	D								*[[Image.source]] <section class="prog__container"><p>The image source (either a remote URL or a local file resource).</p><pre><code>source ImageSourcePropType</code></pre></section>\n*[[WebView.source]] <section class="prog__container"><p>Loads static html or a uri (with optional headers) in the WebView.</p><pre><code>source {uri: string, method: string, headers: object, body: string}, {html: string, baseUrl: string}, number</code></pre></section>			
spellCheck	R	TextInput.spellCheck										
startDetecting	R	PixelRatio.startDetecting										
startHeadlessTask	R	AppRegistry.startHeadlessTask										
startInLoadingState	R	WebView.startInLoadingState										
statusBarBackgroundColor	R	DrawerLayoutAndroid.statusBarBackgroundColor										
step	R	Slider.step										
step0	R	Easing.step0										
step1	R	Easing.step1										
stickyHeaderIndices	D								*[[ListView.stickyHeaderIndices]] <section class="prog__container"><p>An array of child indices determining which children get docked to the top of the screen when scrolling. For example, passing stickyHeaderIndices={[0]} will cause the first child to be fixed to the top of the scroll view. This property is not supported in conjunction with horizontal={true}.</p><pre><code>stickyHeaderIndices [number]</code></pre></section>\n*[[ScrollView.stickyHeaderIndices]] <section class="prog__container"><p>An array of child indices determining which children get docked to the top of the screen when scrolling. For example, passing stickyHeaderIndices={[0]} will cause the first child to be fixed to the top of the scroll view. This property is not supported in conjunction with horizontal={true}.</p><pre><code>stickyHeaderIndices [number]</code></pre></section>			
stopAnimation	R	Animated.stopAnimation										
stopObserving	R	Geolocation.stopObserving										
style	D								*[[Picker.style]] <section class="prog__container"><p>When true, indicates that the view is an accessibility element. By default, all the touchable elements are accessible.</p><pre><code>accessible bool</code></pre></section>\n*[[TabBarIOS.style]] <section class="prog__container"><p>Create and display a popup alert.</p><pre><code>alert(title, message?, callbackOrButtons?, type?)</code></pre></section>\n*[[MapView.style]] <section class="prog__container"><p>When true, the scroll view bounces when it reaches the end of the content if the content is larger then the scroll view along the axis of the scroll direction. When false, it disables all bouncing even if the alwaysBounce* props are true. The default value is true.</p><pre><code>bounces bool</code></pre></section>\n*[[WebView.style]] <section class="prog__container"><p>If the transition between status bar property changes should be animated. Supported for backgroundColor, barStyle and hidden.</p><pre><code>animated bool</code></pre></section>\n*[[Text.style]] <section class="prog__container"><p>Controls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar. The default value is true.</p><pre><code>automaticallyAdjustContentInsets bool</code></pre></section>\n*[[ScrollView.style]] <section class="prog__container"><p>Controls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar. The default value is true.</p><pre><code>automaticallyAdjustContentInsets bool</code></pre></section>\n*[[View.style]] <section class="prog__container"><p>(Android-only) Sets the elevation of a view, using Android's underlying elevation API. This adds a drop shadow to the item and affects z-order for overlapping views. Only supported on Android 5.0+, has no effect on earlier versions.</p><pre><code>style style</code></pre></section>\n*[[TouchableHighlight.style]] <section class="prog__container"><p>When false, the content does not scroll. The default value is true.</p><pre><code>scrollEnabled bool</code></pre></section>\n*[[Slider.style]] <section class="prog__container"><p>When true, the scroll view bounces when it reaches the end of the content if the content is larger then the scroll view along the axis of the scroll direction. When false, it disables all bouncing even if the alwaysBounce* props are true. The default value is true.</p><pre><code>bounces bool</code></pre></section>\n*[[Image.style]] <section class="prog__container"><p>Changes the color of all the non-transparent pixels to the tintColor.</p><pre><code>style style</code></pre></section>\n*[[TextInput.style]] <section class="prog__container"><p>This defines how far your touch can start away from the button. This is added to pressRetentionOffset when moving off of the button.  NOTE  The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.</p><pre><code>hitSlop {top: number, left: number, bottom: number, right: number}</code></pre></section>\n*[[TabBarIOS.Item.style]] <section class="prog__container"><p>React style object.</p><pre><code>style View#style</code></pre></section>			
styleAttr	R	ProgressBarAndroid.styleAttr										
subtitle	R	ToolbarAndroid.subtitle										
subtitleColor	R	ToolbarAndroid.subtitleColor										
supportedOrientations	R	Modal.supportedOrientations										
suppressHighlighting	R	Text.suppressHighlighting										
swizzleJSON	R	Systrace.swizzleJSON										
systemIcon	R	TabBarIOS.Item.systemIcon										
testID	D								*[[Image.testID]] <section class="prog__container"><p>A unique identifier for this element to be used in UI Automation testing scripts.</p><pre><code>testID string</code></pre></section>\n*[[Text.testID]] <section class="prog__container"><p>Create and display a popup alert.</p><pre><code>alert(title, message?, callbackOrButtons?, type?)</code></pre></section>\n*[[Slider.testID]] <section class="prog__container"><p>Used to locate this view in UI automation tests.</p><pre><code>testID string</code></pre></section>\n*[[Picker.testID]] <section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>\n*[[Switch.testID]] <section class="prog__container"><p>Determines the types of data converted to clickable URLs in the text input. Only valid if multiline={true} and editable={false}. By default no data types are detected.</p><pre><code>dataDetectorTypes enum('phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'), [object Object]</code></pre></section>\n*[[View.testID]] <section class="prog__container"><p>Scrolls to a given x, y offset, either immediately or with a smooth animation.</p><pre><code>scrollTo(y?, x?, animated?)</code></pre></section>\n*[[ProgressBarAndroid.testID]] <section class="prog__container"><p>A stretchable image to display behind the progress bar.</p><pre><code>trackImage Image.propTypes.source</code></pre></section>\n*[[ToolbarAndroid.testID]] <section class="prog__container"><p>Returns an profiled version of the input function. For example, you can: JSON.parse = Systrace.measure('JSON', 'parse', JSON.parse);</p><pre><code>measure(objName, fnName, func)</code></pre></section>			
testIdentifier	R	SnapshotViewIOS.testIdentifier										
thumbImage	R	Slider.thumbImage										
thumbTintColor	R	Switch.thumbTintColor										
timeSetAction	R	TimePickerAndroid.timeSetAction										
timeZoneOffsetInMinutes	R	DatePickerIOS.timeZoneOffsetInMinutes										
tintColor	D								*[[TabBarIOS.tintColor]] <section class="prog__container"><p>Create and display a popup alert.</p><pre><code>alert(title, message?, callbackOrButtons?, type?)</code></pre></section>\n*[[NavigatorIOS.tintColor]] <section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>\n*[[SegmentedControlIOS.tintColor]] <section class="prog__container"><p>Accent color of the control.</p><pre><code>tintColor string</code></pre></section>\n*[[RefreshControl.tintColor]] <section class="prog__container"><p>React style object.</p><pre><code>style View#style</code></pre></section>\n*[[Switch.tintColor]] <section class="prog__container"><p>Border color when the switch is turned off.</p><pre><code>tintColor color</code></pre></section>			
title	D								*[[TabBarIOS.Item.title]] <section class="prog__container"><p>Opens the standard Android date picker dialog.</p><pre><code>open(options)</code></pre></section>\n*[[RefreshControl.title]] <section class="prog__container"><p>The title displayed under the refresh indicator.</p><pre><code>title string</code></pre></section>\n*[[ToolbarAndroid.title]] <section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>\n*[[Button.title]] <section class="prog__container"><p>Text to display inside the button</p><pre><code>title string</code></pre></section>			
titleColor	D								*[[ToolbarAndroid.titleColor]] <section class="prog__container"><p>Sets the toolbar title color.</p><pre><code>titleColor color</code></pre></section>\n*[[RefreshControl.titleColor]] <section class="prog__container"><p>Title color.</p><pre><code>titleColor color</code></pre></section>			
titleTextColor	R	NavigatorIOS.titleTextColor										
top	R	Layout Props.top										
trackImage	D								*[[Slider.trackImage]] <section class="prog__container"><p>Assigns a single image for the track. Only static images are supported. The center pixel of the image will be stretched to fill the track.</p><pre><code>trackImage Image.propTypes.source</code></pre></section>\n*[[ProgressViewIOS.trackImage]] <section class="prog__container"><p>A stretchable image to display behind the progress bar.</p><pre><code>trackImage Image.propTypes.source</code></pre></section>			
trackTintColor	R	ProgressViewIOS.trackTintColor										
translucent	D								*[[StatusBar.translucent]] <section class="prog__container"><p>Replaces the top item and pop to it.</p><pre><code>resetTo(route)</code></pre></section>\n*[[TabBarIOS.translucent]] <section class="prog__container"><p>A Boolean value that indicates whether the tab bar is translucent</p><pre><code>translucent bool</code></pre></section>\n*[[NavigatorIOS.translucent]] <section class="prog__container"><p>Boolean value that indicates whether the navigation bar is translucent by default</p><pre><code>translucent bool</code></pre></section>			
transparent	R	Modal.transparent										
underlayColor	R	TouchableHighlight.underlayColor										
underlineColorAndroid	R	TextInput.underlineColorAndroid										
unmountApplicationComponentAtRootTag	R	AppRegistry.unmountApplicationComponentAtRootTag										
unselectedItemTintColor	R	TabBarIOS.unselectedItemTintColor										
unselectedTintColor	R	TabBarIOS.unselectedTintColor										
url	R	WebView.url										
useForeground	R	TouchableNativeFeedback.useForeground										
userAgent	R	WebView.userAgent										
value	D								*[[TextInput.value]] <section class="prog__container"><p>The value to show for the text input. TextInput is a controlled component, which means the native value will be forced to match this value prop if provided. For most uses, this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same. In addition to simply setting the same value, either set editable={false}, or set/update maxLength to prevent unwanted edits without flicker.</p><pre><code>value string</code></pre></section>\n*[[Slider.value]] <section class="prog__container"><p>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</p><pre><code>contentContainerStyle StyleSheetPropType(ViewStylePropTypes)</code></pre></section>\n*[[Switch.value]] <section class="prog__container"><p>The value of the switch. If true the switch will be turned on. Default value is false.</p><pre><code>value bool</code></pre></section>			
values	R	SegmentedControlIOS.values										
vibrate	D								*[[VibrationIOS.vibrate]] <section class="prog__container"><p>@deprecated</p><pre><code>vibrate(0)</code></pre></section>\n*[[Vibration.vibrate]] <section class="prog__container"><pre><code>vibrate(pattern, repeat)</code></pre></section>			
visible	R	Modal.visible										
watchKeys	R	Settings.watchKeys										
watchPosition	R	Geolocation.watchPosition										
width	R	Layout Props.width										
zIndex	R	Layout Props.zIndex										
zoomEnabled	R	MapView.zoomEnabled										
zoomScale	R	ScrollView.zoomScale										
