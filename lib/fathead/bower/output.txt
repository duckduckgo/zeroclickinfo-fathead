cache	A										<section class="prog__container"><p>Manage bower cache</p><pre><code>$ bower cache <command> [<args>]</code></pre></section>	https://bower.io/docs/api/#cache
cache command	R	cache										
help	A										<section class="prog__container"><p>Display help information about Bower</p><pre><code>$ bower help <command></code></pre></section>	https://bower.io/docs/api/#help
help command	R	help										
home	A										<section class="prog__container"><p>Opens a package homepage into your favorite browser.\n\nIf no `<package>` is passed, opens the homepage of the local package.</p><pre><code>$ bower home\n$ bower home <package>\n$ bower home <package>#<version></code></pre></section>	https://bower.io/docs/api/#home
home command	R	home										
info	A										<section class="prog__container"><p>Displays overall information of a package or of a particular version.</p><pre><code>$ bower info <package>\n$ bower info <package> [<property>]\n$ bower info <package>#<version> [<property>]</code></pre></section>	https://bower.io/docs/api/#info
info command	R	info										
init	A										<section class="prog__container"><p>Interactively create a bower.json file</p><pre><code>$ bower init</code></pre></section>	https://bower.io/docs/api/#init
init command	R	init										
install	A										<section class="prog__container"><p>Installs project dependencies recursively.\n\nProject dependencies consist of:\n\n1. `dependencies` specified in `bower.json` of project\n2. All "external" dependencies not specified in `bower.json`, but present in `bower_components`\n3. Any additional `<endpoint>` passed as an argument to this command\n\nWhen `--save` flag is used, all additional endpoint are saved to `dependencies` in `bower.json`.\n\nBower recommends to always use `--save` flag to achieve reproducible installs between machines.\n\nEndpoints can have multiple forms:\n\n* `<package>`\n* `<package>#<version>`\n* `<name>=<package>#<version>`\n\nWhere:\n\n* `<package>` is a package URL, physical location or registry name\n* `<version>` is a valid range, commit, branch, etc.\n* `<name>` is the name it should have locally.\n\n`<package>` can be any one of the following:\n\n<table>\n  <tr>\n    <td>Registered package name</td>\n    <td>\n      <code>jquery</code><br>\n      <code>normalize.css</code>\n    </td>\n  </tr>\n  <tr>\n    <td>Git endpoint</td>\n    <td>\n      <code>https://github.com/user/package.git</code><br>\n      <code>git@github.com:user/package.git</code>\n    </td>\n  </tr>\n  <tr>\n    <td>Git endpoint without .git</td>\n    <td>\n      <code>git+https://github.com/user/package</code><br>\n      <code>git+ssh://git@github.com/user/package</code>\n    </td>\n  </tr>\n  <tr>\n    <td>Local folder</td>\n    <td><code>my/local/folder/</code></td>\n  </tr>\n  <tr>\n    <td>Public Subversion endpoint</td>\n    <td><code>svn+http://package.googlecode.com/svn/</code></td>\n  </tr>\n  <tr>\n    <td>Private Subversion endpoint</td>\n    <td>\n      <code>svn+ssh://package.googlecode.com/svn/</code><br>\n      <code>svn+https://package.googlecode.com/svn/</code>\n    </td>\n  </tr>\n  <tr>\n    <td>Shorthand (defaults to GitHub)</td>\n    <td><code>user/package</code></td>\n  </tr>\n  <tr>\n    <td>URL</td>\n    <td>\n      <code>http://example.com/script.js</code><br>\n      <code>http://example.com/style.css</code><br>\n      <code>http://example.com/package.zip</code> (contents will be extracted)<br>\n      <code>http://example.com/package.tar</code> (contents will be extracted)\n    </td>\n  </tr>\n</table>\n\n\nA version can be:\n\n<table>\n  <tr>\n    <td>semver version</td>\n    <td>\n      <code>#1.2.3</code>\n    </td>\n  </tr>\n  <tr>\n    <td>version range</td>\n    <td>\n      <code>#1.2</code><br>\n      <code>#~1.2.3</code><br>\n      <code>#^1.2.3</code><br>\n      <code>#>=1.2.3 &lt;2.0</code><br>\n    </td>\n  </tr>\n  <tr>\n    <td>Git tag</td>\n    <td><code>#&lt;tag&gt;</code></td>\n  </tr>\n  <tr>\n    <td>Git commit SHA</td>\n    <td><code>#&lt;sha&gt;</code></td>\n  </tr>\n  <tr>\n    <td>Git branch</td>\n    <td><code>#&lt;branch&gt;</code></td>\n  </tr>\n  <tr>\n    <td>Subversion revision</td>\n    <td><code>#&lt;revision&gt;</code></td>\n  </tr>\n</table></p><pre><code>$ bower install [<options>]\n$ bower install <endpoint> [<endpoint> ..] [<options>]</code></pre></section>	https://bower.io/docs/api/#install
install command	R	install										
link	A										<section class="prog__container"><p>The link functionality allows developers to easily test their packages. Linking is a two-step process.\n\nUsing 'bower link' in a project folder will create a global link. Then, in some other package, `bower link <name>` will create a link in the components folder pointing to the previously created link.\n\nThis allows you to easily test a package because changes will be reflected immediately. When the link is no longer necessary, simply remove it with `bower uninstall <name>`.</p><pre><code>$ bower link\n$ bower link <name> [<local name>]</code></pre></section>	https://bower.io/docs/api/#link
link command	R	link										
list	A										<section class="prog__container"><p>List local packages and possible updates.</p><pre><code>$ bower list [<options>]</code></pre></section>	https://bower.io/docs/api/#list
list command	R	list										
lookup	A										<section class="prog__container"><p>Look up a package URL by name</p><pre><code>$ bower lookup <name></code></pre></section>	https://bower.io/docs/api/#lookup
lookup command	R	lookup										
login	A										<section class="prog__container"><p>Authenticate with GitHub and store credentials.</p><pre><code>$ bower login</code></pre></section>	https://bower.io/docs/api/#login
login command	R	login										
prune	A										<section class="prog__container"><p>Uninstalls local extraneous packages</p><pre><code>$ bower prune</code></pre></section>	https://bower.io/docs/api/#prune
prune command	R	prune										
register	A										<section class="prog__container"><p>Register a package</p><pre><code>$ bower register <name> <url></code></pre></section>	https://bower.io/docs/api/#register
register command	R	register										
search	A										<section class="prog__container"><p>Finds all packages or a specific package.</p><pre><code>$ bower search\n$ bower search <name></code></pre></section>	https://bower.io/docs/api/#search
search command	R	search										
update	A										<section class="prog__container"><p>Updates installed packages to their newest version according to bower.json.</p><pre><code>$ bower update <name> [<name> ..] [<options>]</code></pre></section>	https://bower.io/docs/api/#update
update command	R	update										
uninstall	A										<section class="prog__container"><p>Uninstalls a package locally from your bower_components directory</p><pre><code>$ bower uninstall <name> [<name> ..] [<options>]</code></pre></section>	https://bower.io/docs/api/#uninstall
uninstall command	R	uninstall										
version	A										<section class="prog__container"><p>Run this in a package directory to bump the version and write the new data back to the bower.json file.\n\nThe newversion argument should be a valid semver string, or a valid second argument to semver.inc (one of "build", "patch", "minor", or "major"). In the second case, the existing version will be incremented by 1 in the specified field.\n\nIf run in a git repo, it will also create a version commit and tag, and fail if the repo is not clean.</p><pre><code>$ bower version [<newversion> | major | minor | patch]</code></pre></section>	https://bower.io/docs/api/#version
version command	R	version										
force	A										<section class="prog__container"><p>Makes various commands more forceful\n\n- `bower install --force` re-installs all installed components. It also forces installation even when there are non-bower directories with the same name in the components directory. Adding `--force` also bypasses the cache, and writes to the cache anyway.\n- `bower uninstall <package> --force` continues uninstallation even after a dependency conflict\n- `bower register <package> --force` bypasses confirmation. Login is still needed.</p><pre><code>-f, --force</code></pre></section>	https://bower.io/docs/api/#force
force command	R	force										
json	A										<section class="prog__container"><p>Output consumable JSON</p><pre><code>-j, --json</code></pre></section>	https://bower.io/docs/api/#json
json command	R	json										
loglevel	A										<section class="prog__container"><p>What level of logs to report. Possible values: error, conflict, warn, action, info, debug</p><pre><code>-l, --loglevel</code></pre></section>	https://bower.io/docs/api/#loglevel
loglevel command	R	loglevel										
offline	A										<section class="prog__container"><p>Do not use network connection</p><pre><code>-o, --offline</code></pre></section>	https://bower.io/docs/api/#offline
offline command	R	offline										
quiet	A										<section class="prog__container"><p>Only output important information. It is an alias for `--loglevel=warn`.</p><pre><code>-q, --quiet</code></pre></section>	https://bower.io/docs/api/#quiet
quiet command	R	quiet										
silent	A										<section class="prog__container"><p>Do not output anything, besides errors. It is an alias for `--loglevel=error`. Silent is also useful if you have private components that might leak credentials to your CI environment.</p><pre><code>-s, --silent</code></pre></section>	https://bower.io/docs/api/#silent
silent command	R	silent										
verbose	A										<section class="prog__container"><p>Makes output more verbose. It is an alias for `--loglevel=debug`.</p><pre><code>-V, --verbose</code></pre></section>	https://bower.io/docs/api/#verbose
verbose command	R	verbose										
allow-root	A										<section class="prog__container"><p>Allows running commands as root. Bower is a user command, there is no need to execute it with superuser permissions. However, if you still want to run commands with sudo, use `--allow-root` option.</p><pre><code>--allow-root</code></pre></section>	https://bower.io/docs/api/#allow-root
allow-root command	R	allow-root										