Mongoose-Aggregate	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Aggregate()</code></pre><p>The Mongoose Aggregate constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Aggregate
Mongoose-CastError	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#CastError(type, value, path, [reason])</code></pre><p>The Mongoose CastError constructor</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>type</code> <code>String</code> The name of the type</p></li><li><p><code>value</code> <code>Any</code> The value that failed to cast</p></li><li><p><code>path</code> <code>String</code> The path a.b.c in the doc where this cast error occurred</p></li><li><p><code>[reason]</code> <code>Error</code> The original error that was thrown</p></li></ul></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-CastError
Mongoose-Collection	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Collection()</code></pre><p>The Mongoose Collection constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Collection
Mongoose-connect	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#connect(uri(s), [options], [callback])</code></pre><p>Opens the default mongoose connection.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>uri(s)</code> <code>String</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>MongooseThenable</code> pseudo-promise wrapper around this</p></li></ul><p>If arguments are passed, they are proxied to eitherConnection#open orConnection#openSet appropriately.</p><p>Options passed take precedence over options included in connection strings.</p><span class="prog__sub">Example:</span><pre><code>mongoose.connect('mongodb://user:pass@localhost:port/database');\n\n// replica sets\nvar uri = 'mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/mydatabase';\nmongoose.connect(uri);\n\n// with options\nmongoose.connect(uri, options);\n\n// connecting to multiple mongos\nvar uri = 'mongodb://hostA:27501,hostB:27501';\nvar opts = { mongos: true };\nmongoose.connect(uri, opts);\n\n// optional callback that gets fired when initial connection completed\nvar uri = 'mongodb://nonexistent.domain:27000';\nmongoose.connect(uri, function(error) {\n  // if error is truthy, the initial connection failed.\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-connect
Mongoose-Connection	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Connection()</code></pre><p>The Mongoose Connection constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Connection
Mongoose-createConnection	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#createConnection([uri], [options], [options.config], [options.config.autoIndex])</code></pre><p>Creates a Connection instance.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[uri]</code> <code>String</code> a mongodb:// URI</p></li><li><p><code>[options]</code> <code>Object</code> options to pass to the driver</p></li><li><p><code>[options.config]</code> <code>Object</code> mongoose-specific options</p></li><li><p><code>[options.config.autoIndex]</code> <code>Boolean</code> set to false to disable automatic index creation for all models associated with this connection.</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Connection</code> the created Connection object</p></li></ul><p>Each connection instance maps to a single database. This method is helpful when mangaging multiple db connections.</p><p>If arguments are passed, they are proxied to either Connection#open or Connection#openSet appropriately. This means we can pass db, server, and replset options to the driver. Note that the safe option specified in your schema will overwrite the safe db option specified here unless you set your schemas safe option to undefined. See this for more information.</p><p>Options passed take precedence over options included in connection strings.</p><span class="prog__sub">Example:</span><pre><code>// with mongodb:// URI\ndb = mongoose.createConnection('mongodb://user:pass@localhost:port/database');\n\n// and options\nvar opts = { db: { native_parser: true }}\ndb = mongoose.createConnection('mongodb://user:pass@localhost:port/database', opts);\n\n// replica sets\ndb = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database');\n\n// and options\nvar opts = { replset: { strategy: 'ping', rs_name: 'testSet' }}\ndb = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database', opts);\n\n// with [host, database_name[, port] signature\ndb = mongoose.createConnection('localhost', 'database', port)\n\n// and options\nvar opts = { server: { auto_reconnect: false }, user: 'username', pass: 'mypassword' }\ndb = mongoose.createConnection('localhost', 'database', port, opts)\n\n// initialize now, connect later\ndb = mongoose.createConnection();\ndb.open('localhost', 'database', port, [opts]);</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-createConnection
Mongoose-disconnect	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#disconnect([fn])</code></pre><p>Disconnects all connections.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[fn]</code> <code>Function</code> called after all connection close.</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>MongooseThenable</code> pseudo-promise wrapper around this</p></li></ul></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-disconnect
Mongoose-Document	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Document()</code></pre><p>The Mongoose Document constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Document
Mongoose-DocumentProvider	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#DocumentProvider()</code></pre><p>The Mongoose DocumentProvider constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-DocumentProvider
Mongoose-Error	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Error()</code></pre><p>The MongooseError constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Error
Mongoose-get	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#get(key)</code></pre><p>Gets mongoose options</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>mongoose.get('test') // returns the 'test' value</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-get
Mongoose-model	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#model(name, [schema], [collection], [skipInit])</code></pre><p>Defines a model or retrieves it.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String, Function</code> model name or class extending Model</p></li><li><p><code>[schema]</code> <code>Schema</code> </p></li><li><p><code>[collection]</code> <code>String</code> name (optional, inferred from model name)</p></li><li><p><code>[skipInit]</code> <code>Boolean</code> whether to skip initialization (defaults to false)</p></li></ul><p>Models defined on the mongoose instance are available to all connection created by the same mongoose instance.</p><span class="prog__sub">Example:</span><pre><code>var mongoose = require('mongoose');\n\n// define an Actor model with this mongoose instance\nmongoose.model('Actor', new Schema({ name: String }));\n\n// create a new connection\nvar conn = mongoose.createConnection(..);\n\n// retrieve the Actor model\nvar Actor = conn.model('Actor');</code></pre><p>When no collection argument is passed, Mongoose produces a collection name by passing the model name to the utils.toCollectionName method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option.</p><span class="prog__sub">Example:</span><pre><code>var schema = new Schema({ name: String }, { collection: 'actor' });\n\n// or\n\nschema.set('collection', 'actor');\n\n// or\n\nvar collectionName = 'actor'\nvar M = mongoose.model('Actor', schema, collectionName)</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-model
Mongoose-Model	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Model()</code></pre><p>The Mongoose Model constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Model
Mongoose-modelNames	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#modelNames()</code></pre><p>Returns an array of model names created on this instance of Mongoose.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Array</code> </p></li></ul><span class="prog__sub">Note:</span><p>Does not include names of models created using connection.model().</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-modelNames
=Mongoose	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose()</code></pre><p>Mongoose constructor.</p><p>The exports object of the mongoose module is an instance of this class.Most apps will only use this one instance.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose
Mongoose-Mongoose	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Mongoose()</code></pre><p>The Mongoose constructor</p><p>The exports of the mongoose module is an instance of this class.</p><span class="prog__sub">Example:</span><pre><code>var mongoose = require('mongoose');\nvar mongoose2 = new mongoose.Mongoose();</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Mongoose
Mongoose-plugin	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#plugin(fn, [opts])</code></pre><p>Declares a global plugin executed on all Schemas.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> plugin callback</p></li><li><p><code>[opts]</code> <code>Object</code> optional options</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Mongoose</code> this</p></li></ul><p>Equivalent to calling .plugin(fn) on each Schema you create.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-plugin
Mongoose-PromiseProvider	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#PromiseProvider()</code></pre><p>Storage layer for mongoose promises</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-PromiseProvider
Mongoose-Query	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Query()</code></pre><p>The Mongoose Query constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Query
Mongoose-Schema	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Schema()</code></pre><p>The Mongoose Schema constructor</p><span class="prog__sub">Example:</span><pre><code>var mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\nvar CatSchema = new Schema(..);</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Schema
Mongoose-SchemaType	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#SchemaType()</code></pre><p>The Mongoose SchemaType constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-SchemaType
Mongoose-set	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#set(key, value)</code></pre><p>Sets mongoose options</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li><li><p><code>value</code> <code>String, Function</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>mongoose.set('test', value) // sets the 'test' option to `value`\n\nmongoose.set('debug', true) // enable logging collection methods + arguments to the console\n\nmongoose.set('debug', function(collectionName, methodName, arg1, arg2...) {}); // use custom function to log collection methods + arguments</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-set
Mongoose-VirtualType	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#VirtualType()</code></pre><p>The Mongoose VirtualType constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-VirtualType
Mongoose-connection	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#connection</code></pre><p>The default connection of the mongoose module.</p><span class="prog__sub">Example:</span><pre><code>var mongoose = require('mongoose');\nmongoose.connect(...);\nmongoose.connection.on('error', cb);</code></pre><p>This is the connection used by default for every model created using mongoose.model.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Connection</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-connection
Mongoose-mongo	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#mongo</code></pre><p>The node-mongodb-native driver Mongoose uses.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-mongo
Mongoose-mquery	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#mquery</code></pre><p>The mquery query builder Mongoose uses.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-mquery
Mongoose-SchemaTypes	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#SchemaTypes</code></pre><p>The various Mongoose SchemaTypes.</p><span class="prog__sub">Note:</span><p>Alias of mongoose.Schema.Types for backwards compatibility.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-SchemaTypes
Mongoose-Types	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Types</code></pre><p>The various Mongoose Types.</p><span class="prog__sub">Example:</span><pre><code>var mongoose = require('mongoose');\nvar array = mongoose.Types.Array;</code></pre><span class="prog__sub">Types:</span><ul class="prog__ul>"\n<li>ObjectId</li>\n<li>Buffer</li>\n<li>SubDocument</li>\n<li>Array</li>\n<li>DocumentArray</li>\n</ul><p>Using this exposed access to the ObjectId type, we can construct ids on demand.</p><pre><code>var ObjectId = mongoose.Types.ObjectId;\nvar id1 = new ObjectId;</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Types
Mongoose-version	A			Mongoose						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#version</code></pre><p>The Mongoose version</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-version
QueryStream-destroy	A			QueryStream						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#destroy([err])</code></pre><p>Destroys the stream, closing the underlying cursor, which emits the close event. No more events will be emitted after the close event.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[err]</code> <code>Error</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-destroy
QueryStream-pause	A			QueryStream						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#pause()</code></pre><p>Pauses this stream.</p></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-pause
QueryStream-pipe	A			QueryStream						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#pipe()</code></pre><p>Pipes this query stream into another stream. This method is inherited from NodeJS Streams.</p><span class="prog__sub">Example:</span><pre><code>query.stream().pipe(writeStream [, options])</code></pre></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-pipe
=QueryStream	A			QueryStream						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream(query, [options])</code></pre><p>Provides a Node.js 0.8 style ReadStream interface for Queries.</p><span class="prog__sub">Events:</span><ul><li><p><code>data</code>: emits a single Mongoose document</p></li><li><p><code>error</code>: emits when an error occurs during streaming. This will emit <em>before</em> the <code>close</code> event.</p></li><li><p><code>close</code>: emits when the stream reaches the end of the cursor or an error occurs, or the stream is manually <code>destroy</code>ed. After this event, no more events are emitted.</p></li></ul><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>query</code> <code>Query</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li></ul><pre><code>var stream = Model.find().stream();\n\nstream.on('data', function (doc) {\n  // do something with the mongoose document\n}).on('error', function (err) {\n  // handle the error\n}).on('close', function () {\n  // the stream is closed\n});</code></pre><p>The stream interface allows us to simply "plug-in" to other Node.js 0.8 style write streams.</p><pre><code>Model.where('created').gte(twoWeeksAgo).stream().pipe(writeStream);</code></pre><span class="prog__sub">Valid options</span><ul class="prog__ul>"\n<li><code>transform</code>: optional function which accepts a mongoose document. The return value of the function will be emitted on <code>data</code>.</li>\n</ul><span class="prog__sub">Example</span><pre><code>// JSON.stringify all documents before emitting\nvar stream = Thing.find().stream({ transform: JSON.stringify });\nstream.pipe(writeStream);</code></pre><p>NOTE: plugging into an HTTP response will *not* work out of the box. Those streams expect only strings or buffers to be emitted, so first formatting our documents as strings/buffers is necessary.</p><p>NOTE: these streams are Node.js 0.8 style read streams which differ from Node.js 0.10 style. Node.js 0.10 streams are not well tested yet and are not guaranteed to work.</p></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream
QueryStream-resume	A			QueryStream						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#resume()</code></pre><p>Resumes this stream.</p></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-resume
QueryStream-paused	A			QueryStream						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#paused</code></pre><p>Flag stating whether or not this stream is paused.</p></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-paused
QueryStream-readable	A			QueryStream						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#readable</code></pre><p>Flag stating whether or not this stream is readable.</p></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-readable
=Connection	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection(base)</code></pre><p>Connection constructor</p><span class="prog__sub">Events:</span><ul><li><p><code>connecting</code>: Emitted when <code>connection.{open,openSet}()</code> is executed on this connection.</p></li><li><p><code>connected</code>: Emitted when this connection successfully connects to the db. May be emitted <em>multiple</em> times in <code>reconnected</code> scenarios.</p></li><li><p><code>open</code>: Emitted after we <code>connected</code> and <code>onOpen</code> is executed on all of this connections models.</p></li><li><p><code>disconnecting</code>: Emitted when <code>connection.close()</code> was executed.</p></li><li><p><code>disconnected</code>: Emitted after getting disconnected from the db.</p></li><li><p><code>close</code>: Emitted after we <code>disconnected</code> and <code>onClose</code> executed on all of this connections models.</p></li><li><p><code>reconnected</code>: Emitted after we <code>connected</code> and subsequently <code>disconnected</code>, followed by successfully another successfull connection.</p></li><li><p><code>error</code>: Emitted when an error occurs on this connection.</p></li><li><p><code>fullsetup</code>: Emitted in a replica-set scenario, when primary and at least one seconaries specified in the connection string are connected.</p></li><li><p><code>all</code>: Emitted in a replica-set scenario, when all nodes specified in the connection string are connected.</p></li></ul><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>base</code> <code>Mongoose</code> a mongoose instance</p></li></ul><p>For practical reasons, a Connection equals a Db.</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection
Connection-open	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#open(connection_string, [database], [port], [options], [callback])</code></pre><p>Opens the connection to MongoDB.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>connection_string</code> <code>String</code> mongodb://uri or the host to which you are connecting</p></li><li><p><code>[database]</code> <code>String</code> database name</p></li><li><p><code>[port]</code> <code>Number</code> database port</p></li><li><p><code>[options]</code> <code>Object</code> options</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><p>options is a hash with the following possible properties:</p><pre><code>config  - passed to the connection config instance\ndb      - passed to the connection db instance\nserver  - passed to the connection server instance(s)\nreplset - passed to the connection ReplSet instance\nuser    - username for authentication\npass    - password for authentication\nauth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\n</code></pre><span class="prog__sub">Notes:</span><p>Mongoose forces the db option forceServerObjectId false and cannot be overridden.Mongoose defaults the server auto_reconnect options to true which can be overridden.See the node-mongodb-native driver instance for options that it understands.</p><p>Options passed take precedence over options included in connection strings.</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-open
Connection-dropDatabase	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#dropDatabase(callback)</code></pre><p>Helper for dropDatabase().</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>callback</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#connection_Connection-dropDatabase
Connection-openSet	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#openSet(uris, [database], [options], [callback])</code></pre><p>Opens the connection to a replica set.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>uris</code> <code>String</code> MongoDB connection string</p></li><li><p><code>[database]</code> <code>String</code> database name if not included in uris</p></li><li><p><code>[options]</code> <code>Object</code> passed to the internal driver</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>var db = mongoose.createConnection();\ndb.openSet("mongodb://user:pwd@localhost:27020,localhost:27021,localhost:27012/mydb");</code></pre><p>The database name and/or auth need only be included in one URI.The options is a hash which is passed to the internal driver connection object.</p><p>Valid options</p><pre><code>db      - passed to the connection db instance\nserver  - passed to the connection server instance(s)\nreplset - passed to the connection ReplSetServer instance\nuser    - username for authentication\npass    - password for authentication\nauth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\nmongos  - Boolean - if true, enables High Availability support for mongos\n</code></pre><p>Options passed take precedence over options included in connection strings.</p><span class="prog__sub">Notes:</span><p>If connecting to multiple mongos servers, set the mongos option to true.</p><pre><code>conn.open('mongodb://mongosA:27501,mongosB:27501', { mongos: true }, cb);</code></pre><p>Mongoose forces the db option forceServerObjectId false and cannot be overridden.Mongoose defaults the server auto_reconnect options to true which can be overridden.See the node-mongodb-native driver instance for options that it understands.</p><p>Options passed take precedence over options included in connection strings.</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-openSet
Connection-close	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#close([callback])</code></pre><p>Closes the connection</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[callback]</code> <code>Function</code> optional</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Connection</code> self</p></li></ul></section>	http://mongoosejs.com/docs/api.html#connection_Connection-close
Connection-collection	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#collection(name, [options])</code></pre><p>Retrieves a collection, creating it if not cached.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String</code> of the collection</p></li><li><p><code>[options]</code> <code>Object</code> optional collection options</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Collection</code> collection instance</p></li></ul><p>Not typically needed by applications. Just talk to your collection through your model.</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-collection
Connection-model	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#model(name, [schema], [collection])</code></pre><p>Defines or retrieves a model.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String</code> the model name</p></li><li><p><code>[schema]</code> <code>Schema</code> a schema. necessary when defining a model</p></li><li><p><code>[collection]</code> <code>String</code> name of mongodb collection (optional) if not given it will be induced from model name</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Model</code> The compiled model</p></li></ul><pre><code>var mongoose = require('mongoose');\nvar db = mongoose.createConnection(..);\ndb.model('Venue', new Schema(..));\nvar Ticket = db.model('Ticket', new Schema(..));\nvar Venue = db.model('Venue');</code></pre><p>When no collection argument is passed, Mongoose produces a collection name by passing the model name to the utils.toCollectionName method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option.</p><span class="prog__sub">Example:</span><pre><code>var schema = new Schema({ name: String }, { collection: 'actor' });\n\n// or\n\nschema.set('collection', 'actor');\n\n// or\n\nvar collectionName = 'actor'\nvar M = conn.model('Actor', schema, collectionName)</code></pre></section>	http://mongoosejs.com/docs/api.html#connection_Connection-model
Connection-modelNames	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#modelNames()</code></pre><p>Returns an array of model names created on this connection.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Array</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#connection_Connection-modelNames
Connection-config	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#config</code></pre><p>A hash of the global options that are associated with this connection</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-config
Connection-db	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#db</code></pre><p>The mongodb.Db instance, set when the connection is opened</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-db
Connection-collections	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#collections</code></pre><p>A hash of the collections associated with this connection</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-collections
Connection-readyState	A			Connection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#readyState</code></pre><p>Connection ready state</p><ul class="prog__ul>"\n<li>0 = disconnected</li>\n<li>1 = connected</li>\n<li>2 = connecting</li>\n<li>3 = disconnecting</li>\n</ul><p>Each state change emits its associated event name.</p><span class="prog__sub">Example</span><pre><code>conn.on('connected', callback);\nconn.on('disconnected', callback);</code></pre></section>	http://mongoosejs.com/docs/api.html#connection_Connection-readyState
exports.pluralization	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.pluralization</code></pre><p>Pluralization rules.</p><p>These rules are applied while processing the argument to toCollectionName.</p></section>	http://mongoosejs.com/docs/api.html#utils_exports.pluralization
exports.uncountables	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.uncountables</code></pre><p>Uncountable words.</p><p>These words are applied while processing the argument to toCollectionName.</p></section>	http://mongoosejs.com/docs/api.html#utils_exports.uncountables
exports.Document	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.Document()</code></pre><p>The Mongoose browser Document constructor.</p></section>	http://mongoosejs.com/docs/api.html#browser_exports.Document
exports.Error	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.Error()</code></pre><p>The MongooseError constructor.</p></section>	http://mongoosejs.com/docs/api.html#browser_exports.Error
exports.PromiseProvider	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.PromiseProvider()</code></pre><p>Storage layer for mongoose promises</p></section>	http://mongoosejs.com/docs/api.html#browser_exports.PromiseProvider
exports.Schema	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.Schema()</code></pre><p>The Mongoose Schema constructor</p><span class="prog__sub">Example:</span><pre><code>var mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\nvar CatSchema = new Schema(..);</code></pre></section>	http://mongoosejs.com/docs/api.html#browser_exports.Schema
exports.VirtualType	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.VirtualType()</code></pre><p>The Mongoose VirtualType constructor</p></section>	http://mongoosejs.com/docs/api.html#browser_exports.VirtualType
exports-SchemaTypes	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports#SchemaTypes</code></pre><p>The various Mongoose SchemaTypes.</p><span class="prog__sub">Note:</span><p>Alias of mongoose.Schema.Types for backwards compatibility.</p></section>	http://mongoosejs.com/docs/api.html#browser_exports-SchemaTypes
exports-Types	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports#Types</code></pre><p>The various Mongoose Types.</p><span class="prog__sub">Example:</span><pre><code>var mongoose = require('mongoose');\nvar array = mongoose.Types.Array;</code></pre><span class="prog__sub">Types:</span><ul class="prog__ul>"\n<li>ObjectId</li>\n<li>Buffer</li>\n<li>SubDocument</li>\n<li>Array</li>\n<li>DocumentArray</li>\n</ul><p>Using this exposed access to the ObjectId type, we can construct ids on demand.</p><pre><code>var ObjectId = mongoose.Types.ObjectId;\nvar id1 = new ObjectId;</code></pre></section>	http://mongoosejs.com/docs/api.html#browser_exports-Types
NativeCollection-getIndexes	A			NativeCollection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>NativeCollection#getIndexes(callback)</code></pre><p>Retreives information about this collections indexes.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>callback</code> <code>Function</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#drivers_node-mongodb-native_collection_NativeCollection-getIndexes
NativeConnection-useDb	A			NativeConnection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>NativeConnection#useDb(name)</code></pre><p>Switches to a different database using the same connection pool.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String</code> The database name</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Connection</code> New Connection Object</p></li></ul><p>Returns a new connection object, with the new db.</p></section>	http://mongoosejs.com/docs/api.html#drivers_node-mongodb-native_connection_NativeConnection-useDb
NativeConnection.STATES	A			NativeConnection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>NativeConnection.STATES</code></pre><p>Expose the possible connection states.</p></section>	http://mongoosejs.com/docs/api.html#drivers_node-mongodb-native_connection_NativeConnection.STATES
MongooseError.messages	A			MongooseError						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseError.messages()</code></pre><p>The default built-in validator error messages. These may be customized.</p><pre><code>// customize within each schema or globally like so\nvar mongoose = require('mongoose');\nmongoose.Error.messages.String.enum  = "Your custom message for {PATH}.";</code></pre><p>As you might have noticed, error messages support basic templating</p><ul class="prog__ul>"\n<li><code>{PATH}</code> is replaced with the invalid document path</li>\n<li><code>{VALUE}</code> is replaced with the invalid value</li>\n<li><code>{TYPE}</code> is replaced with the validator type such as &quot;regexp&quot;, &quot;min&quot;, or &quot;user defined&quot;</li>\n<li><code>{MIN}</code> is replaced with the declared min value for the Number.min validator</li>\n<li><code>{MAX}</code> is replaced with the declared max value for the Number.max validator</li>\n</ul><p>Click the "show code" link below to see all defaults.</p></section>	http://mongoosejs.com/docs/api.html#error_messages_MongooseError.messages
ValidationError-toString	A			ValidationError						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ValidationError#toString()</code></pre><p>Console.log helper</p></section>	http://mongoosejs.com/docs/api.html#error_validation_ValidationError-toString
=MongooseError	A			MongooseError						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseError(msg)</code></pre><p>MongooseError constructor</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>msg</code> <code>String</code> Error message</p></li></ul></section>	http://mongoosejs.com/docs/api.html#error_MongooseError
MongooseError.messages	A			MongooseError						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseError.messages</code></pre><p>The default built-in validator error messages.</p></section>	http://mongoosejs.com/docs/api.html#error_MongooseError.messages
QueryCursor-close	A			QueryCursor						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor#close(callback)</code></pre><p>Marks this cursor as closed. Will stop streaming and subsequent calls tonext() will error.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>callback</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor-close
QueryCursor-eachAsync	A			QueryCursor						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor#eachAsync(fn, [callback])</code></pre><p>Execute fn for every document in the cursor. If fn returns a promise,will wait for the promise to resolve before iterating on to the next one.Returns a promise that resolves when done.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> </p></li><li><p><code>[callback]</code> <code>Function</code> executed when all docs have been processed</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor-eachAsync
QueryCursor-map	A			QueryCursor						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor#map(fn)</code></pre><p>Registers a transform function which subsequently maps documents retrievedvia the streams interface or .next()</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>QueryCursor</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>// Map documents returned by `data` events\nThing.\n  find({ name: /^hello/ }).\n  cursor().\n  map(function (doc) {\n   doc.foo = "bar";\n   return doc;\n  })\n  on('data', function(doc) { console.log(doc.foo); });\n\n// Or map documents returned by `.next()`\nvar cursor = Thing.find({ name: /^hello/ }).\n  cursor().\n  map(function (doc) {\n    doc.foo = "bar";\n    return doc;\n  });\ncursor.next(function(error, doc) {\n  console.log(doc.foo);\n});</code></pre></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor-map
QueryCursor-next	A			QueryCursor						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor#next(callback)</code></pre><p>Get the next document from this cursor. Will return null when there areno documents left.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>callback</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor-next
=QueryCursor	A			QueryCursor						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor(query, options)</code></pre><p>A QueryCursor is a concurrency primitive for processing query resultsone document at a time. A QueryCursor fulfills the Node.js streams3 API,in addition to several other mechanisms for loading documents from MongoDBone at a time.</p><span class="prog__sub">Events:</span><ul><li><p><code>cursor</code>: Emitted when the cursor is created</p></li><li><p><code>error</code>: Emitted when an error occurred</p></li><li><p><code>data</code>: Emitted when the stream is flowing and the next doc is ready</p></li><li><p><code>end</code>: Emitted when the stream is exhausted</p></li></ul><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>query</code> <code>Query</code> </p></li><li><p><code>options</code> <code>Object</code> query options passed to .find()</p></li></ul><p>Unless you're an advanced user, do not instantiate this class directly.Use Query#cursor() instead.</p></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor
VirtualType-applyGetters	A			VirtualType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType#applyGetters(value, scope)</code></pre><p>Applies getters to value using optional scope.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Object</code> </p></li><li><p><code>scope</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>T</code> the value after applying all getters</p></li></ul></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType-applyGetters
VirtualType-applySetters	A			VirtualType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType#applySetters(value, scope)</code></pre><p>Applies setters to value using optional scope.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Object</code> </p></li><li><p><code>scope</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>T</code> the value after applying all setters</p></li></ul></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType-applySetters
VirtualType-get	A			VirtualType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType#get(fn)</code></pre><p>Defines a getter.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>VirtualType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var virtual = schema.virtual('fullname');\nvirtual.get(function () {\n  return this.name.first + ' ' + this.name.last;\n});</code></pre></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType-get
VirtualType-set	A			VirtualType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType#set(fn)</code></pre><p>Defines a setter.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>VirtualType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var virtual = schema.virtual('fullname');\nvirtual.set(function (v) {\n  var parts = v.split(' ');\n  this.name.first = parts[0];\n  this.name.last = parts[1];\n});</code></pre></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType-set
=VirtualType	A			VirtualType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType()</code></pre><p>VirtualType constructor</p><p>This is what mongoose uses to define virtual attributes via Schema.prototype.virtual.</p><span class="prog__sub">Example:</span><pre><code>var fullname = schema.virtual('fullname');\nfullname instanceof mongoose.VirtualType // true</code></pre></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType
Schema-add	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#add(obj, prefix)</code></pre><p>Adds key path / schema type pairs to this schema.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>obj</code> <code>Object</code> </p></li><li><p><code>prefix</code> <code>String</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>var ToySchema = new Schema;\nToySchema.add({ name: 'string', color: 'string', price: 'number' });</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-add
Schema-eachPath	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#eachPath(fn)</code></pre><p>Iterates the schemas paths similar to Array#forEach.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> callback function</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Schema</code> this</p></li></ul><p>The callback is passed the pathname and schemaType as arguments on each iteration.</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema-eachPath
Schema-get	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#get(key)</code></pre><p>Gets a schema option.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> option name</p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-get
Schema-index	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#index(fields, [options], [options.expires=null])</code></pre><p>Defines an index (most likely compound) for this schema.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fields</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> Options to pass to MongoDB driver's createIndex() function</p></li><li><p><code>[options.expires=null]</code> <code>String</code> Mongoose-specific syntactic sugar, uses ms to convert expires option into seconds for the expireAfterSeconds in the above link.</p></li></ul><span class="prog__sub">Example</span><pre><code>schema.index({ first: 1, last: -1 })</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-index
Schema-indexes	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#indexes()</code></pre><p>Compiles indexes from fields and schema-level indexes</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema-indexes
Schema-loadClass	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#loadClass(model)</code></pre><p>Loads an ES6 class into a schema. Maps setters + getters, static methods, and instance methods to schema virtuals, statics, and methods.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>model</code> <code>Function</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-loadClass
Schema-method	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#method(method, [fn])</code></pre><p>Adds an instance method to documents constructed from Models compiled from this schema.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>method</code> <code>String, Object</code> name</p></li><li><p><code>[fn]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>var schema = kittySchema = new Schema(..);\n\nschema.method('meow', function () {\n  console.log('meeeeeoooooooooooow');\n})\n\nvar Kitty = mongoose.model('Kitty', schema);\n\nvar fizz = new Kitty;\nfizz.meow(); // meeeeeooooooooooooow</code></pre><p>If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.</p><pre><code>schema.method({\n    purr: function () {}\n  , scratch: function () {}\n});\n\n// later\nfizz.purr();\nfizz.scratch();</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-method
Schema-path	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#path(path, constructor)</code></pre><p>Gets/sets schema paths.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li><li><p><code>constructor</code> <code>Object</code> </p></li></ul><p>Sets a path (if arity 2)Gets a path (if arity 1)</p><span class="prog__sub">Example</span><pre><code>schema.path('name') // returns a SchemaType\nschema.path('name', Number) // changes the schemaType of `name` to Number</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-path
Schema-pathType	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#pathType(path)</code></pre><p>Returns the pathType of path for this schema.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>String</code> </p></li></ul><p>Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema-pathType
Schema-plugin	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#plugin(plugin, [opts])</code></pre><p>Registers a plugin for this schema.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>plugin</code> <code>Function</code> callback</p></li><li><p><code>[opts]</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-plugin
Schema-post	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#post(method, fn)</code></pre><p>Defines a post hook for the document</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>method</code> <code>String</code> name of the method to hook</p></li><li><p><code>fn</code> <code>Function</code> callback</p></li></ul><pre><code>var schema = new Schema(..);\nschema.post('save', function (doc) {\n  console.log('this fired after a document was saved');\n});\n\nshema.post('find', function(docs) {\n  console.log('this fired after you run a find query');\n});\n\nvar Model = mongoose.model('Model', schema);\n\nvar m = new Model(..);\nm.save(function(err) {\n  console.log('this fires after the `post` hook');\n});\n\nm.find(function(err, docs) {\n  console.log('this fires after the post find hook');\n});</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-post
Schema-pre	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#pre(method, callback)</code></pre><p>Defines a pre hook for the document.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>method</code> <code>String</code> </p></li><li><p><code>callback</code> <code>Function</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>var toySchema = new Schema(..);\n\ntoySchema.pre('save', function (next) {\n  if (!this.created) this.created = new Date;\n  next();\n})\n\ntoySchema.pre('validate', function (next) {\n  if (this.name !== 'Woody') this.name = 'Woody';\n  next();\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-pre
Schema-queue	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#queue(name, args)</code></pre><p>Adds a method call to the queue.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String</code> name of the document method to call later</p></li><li><p><code>args</code> <code>Array</code> arguments to pass to the method</p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-queue
Schema-remove	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#remove(path)</code></pre><p>Removes the given path (or [paths]).</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String, Array</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-remove
Schema-requiredPaths	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#requiredPaths(invalidate)</code></pre><p>Returns an Array of path strings that are required by this schema.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>invalidate</code> <code>Boolean</code> refresh the cache</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Array</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-requiredPaths
=Schema	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema(definition, [options])</code></pre><p>Schema constructor.</p><span class="prog__sub">Events:</span><ul><li><p><code>init</code>: Emitted after the schema is compiled into a <code>Model</code>.</p></li></ul><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>definition</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>var child = new Schema({ name: String });\nvar schema = new Schema({ name: String, age: Number, children: [child] });\nvar Tree = mongoose.model('Tree', schema);\n\n// setting schema options\nnew Schema({ name: String }, { _id: false, autoIndex: false })</code></pre><span class="prog__sub">Options:</span><ul class="prog__ul>"\n<li>autoIndex: bool - defaults to null (which means use the connection&apos;s autoIndex option)</li>\n<li>bufferCommands: bool - defaults to true</li>\n<li>capped: bool - defaults to false</li>\n<li>collection: string - no default</li>\n<li>emitIndexErrors: bool - defaults to false.</li>\n<li>id: bool - defaults to true</li>\n<li>_id: bool - defaults to true</li>\n<li><code>minimize</code>: bool - controls document#toObject behavior when called manually - defaults to true</li>\n<li>read: string</li>\n<li>safe: bool - defaults to true.</li>\n<li>shardKey: bool - defaults to <code>null</code></li>\n<li>strict: bool - defaults to true</li>\n<li>toJSON - object - no default</li>\n<li>toObject - object - no default</li>\n<li>typeKey - string - defaults to &apos;type&apos;</li>\n<li>useNestedStrict - boolean - defaults to false</li>\n<li>validateBeforeSave - bool - defaults to <code>true</code></li>\n<li>versionKey: string - defaults to &quot;__v&quot;</li>\n</ul><span class="prog__sub">Note:</span><p>When nesting schemas, (children in the example above), always declare the child schema first before passing it into its parent.</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema
Schema-set	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#set(key, [value])</code></pre><p>Sets/gets a schema option.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> option name</p></li><li><p><code>[value]</code> <code>Object</code> if not passed, the current option value is returned</p></li></ul><span class="prog__sub">Example</span><pre><code>schema.set('strict'); // 'true' by default\nschema.set('strict', false); // Sets 'strict' to false\nschema.set('strict'); // 'false'</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-set
Schema-static	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#static(name, [fn])</code></pre><p>Adds static "class" methods to Models compiled from this schema.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String, Object</code> </p></li><li><p><code>[fn]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>var schema = new Schema(..);\nschema.static('findByName', function (name, callback) {\n  return this.find({ name: name }, callback);\n});\n\nvar Drink = mongoose.model('Drink', schema);\nDrink.findByName('sanpellegrino', function (err, drinks) {\n  //\n});</code></pre><p>If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema-static
Schema-virtual	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#virtual(name, [options])</code></pre><p>Creates a virtual type with the given name.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>VirtualType</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-virtual
Schema-virtualpath	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#virtualpath(name)</code></pre><p>Returns the virtual type with the given name.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>VirtualType</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-virtualpath
Schema.indexTypes	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema.indexTypes()</code></pre><p>The allowed index types</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema.indexTypes
Schema.reserved	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema.reserved</code></pre><p>Reserved document keys.</p><p>Keys in this object are names that are rejected in schema declarations b/c they conflict with mongoose functionality. Using these key name will throw an error.</p><pre><code>on, emit, _events, db, get, set, init, isNew, errors, schema, options, modelName, collection, _pres, _posts, toObject</code></pre><p>NOTE: Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.</p><pre><code>var schema = new Schema(..);\n schema.methods.init = function () {} // potentially breaking</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema.reserved
Schema.Types	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema.Types</code></pre><p>The various built-in Mongoose Schema Types.</p><span class="prog__sub">Example:</span><pre><code>var mongoose = require('mongoose');\nvar ObjectId = mongoose.Schema.Types.ObjectId;</code></pre><span class="prog__sub">Types:</span><ul class="prog__ul>"\n<li>String</li>\n<li>Number</li>\n<li>Boolean | Bool</li>\n<li>Array</li>\n<li>Buffer</li>\n<li>Date</li>\n<li>ObjectId | Oid</li>\n<li>Mixed</li>\n</ul><p>Using this exposed access to the Mixed SchemaType, we can use them in our schema.</p><pre><code>var Mixed = mongoose.Schema.Types.Mixed;\nnew mongoose.Schema({ _user: Mixed })</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema.Types
Schema-obj	A			Schema						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#obj</code></pre><p>The original object passed to the schema constructor</p><span class="prog__sub">Example:</span><pre><code>var schema = new Schema({ a: String }).add({ b: String });\nschema.obj; // { a: String }</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-obj
Document-depopulate	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#depopulate(path)</code></pre><p>Takes a populated field and returns it to its unpopulated state.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>Model.findOne().populate('author').exec(function (err, doc) {\n  console.log(doc.author.name); // Dr.Seuss\n  console.log(doc.depopulate('author'));\n  console.log(doc.author); // '5144cf8050f071d979c118a7'\n})</code></pre><p>If the path was not populated, this is a no-op.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-depopulate
Document-equals	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#equals(doc)</code></pre><p>Returns true if the Document stores the same data as doc.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>doc</code> <code>Document</code> a document to compare</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul><p>Documents are considered equal when they have matching _ids, unless neitherdocument has an _id, in which case this function falls back to usingdeepEqual().</p></section>	http://mongoosejs.com/docs/api.html#document_Document-equals
Document-execPopulate	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#execPopulate()</code></pre><p>Explicitly executes population and returns a promise. Useful for ES2015integration.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> promise that resolves to the document when population is done</p></li></ul><span class="prog__sub">Example:</span><pre><code>var promise = doc.\n  populate('company').\n  populate({\n    path: 'notes',\n    match: /airline/,\n    select: 'text',\n    model: 'modelName'\n    options: opts\n  }).\n  execPopulate();\n\n// summary\ndoc.execPopulate().then(resolve, reject);</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-execPopulate
Document-get	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#get(path, [type])</code></pre><p>Returns the value of a path.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li><li><p><code>[type]</code> <code>Schema, String, Number, Buffer, *</code> optionally specify a type for on-the-fly attributes</p></li></ul><span class="prog__sub">Example</span><pre><code>// path\ndoc.get('age') // 47\n\n// dynamic casting to a string\ndoc.get('age', String) // "47"</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-get
Document-init	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#init(doc, fn)</code></pre><p>Initializes the document without setters or marking anything modified.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>doc</code> <code>Object</code> document returned by mongo</p></li><li><p><code>fn</code> <code>Function</code> callback</p></li></ul><p>Called internally after a document is returned from mongodb.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-init
Document-inspect	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#inspect()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#document_Document-inspect
Document-invalidate	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#invalidate(path, errorMsg, value, [kind])</code></pre><p>Marks a path as invalid, causing validation to fail.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> the field to invalidate</p></li><li><p><code>errorMsg</code> <code>String, Error</code> the error which states the reason path was invalid</p></li><li><p><code>value</code> <code>Object, String, Number, T</code> optional invalid value</p></li><li><p><code>[kind]</code> <code>String</code> optional kind property for the error</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>ValidationError</code> the current ValidationError, with all currently invalidated paths</p></li></ul><p>The errorMsg argument will become the message of the ValidationError.</p><p>The value argument (if passed) will be available through the ValidationError.value property.</p><pre><code>doc.invalidate('size', 'must be less than 20', 14);\n\ndoc.validate(function (err) {\n  console.log(err)\n  // prints\n  { message: 'Validation failed',\n    name: 'ValidationError',\n    errors:\n     { size:\n        { message: 'must be less than 20',\n          name: 'ValidatorError',\n          path: 'size',\n          type: 'user defined',\n          value: 14 } } }\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-invalidate
Document-isDirectModified	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#isDirectModified(path)</code></pre><p>Returns true if path was directly set and modified, else false.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>doc.set('documents.0.title', 'changed');\ndoc.isDirectModified('documents.0.title') // true\ndoc.isDirectModified('documents') // false</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-isDirectModified
Document-isInit	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#isInit(path)</code></pre><p>Checks if path was initialized.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#document_Document-isInit
Document-isModified	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#isModified([path])</code></pre><p>Returns true if this document was modified, else false.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> optional</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul><p>If path is given, checks if a path or any full path containing path as part of its path chain has been modified.</p><span class="prog__sub">Example</span><pre><code>doc.set('documents.0.title', 'changed');\ndoc.isModified()                      // true\ndoc.isModified('documents')           // true\ndoc.isModified('documents.0.title')   // true\ndoc.isModified('documents otherProp') // true\ndoc.isDirectModified('documents')     // false</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-isModified
Document-isSelected	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#isSelected(path)</code></pre><p>Checks if path was selected in the source query which initialized this document.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>Thing.findOne().select('name').exec(function (err, doc) {\n   doc.isSelected('name') // true\n   doc.isSelected('age')  // false\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-isSelected
Document-markModified	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#markModified(path)</code></pre><p>Marks the path as having pending changes to write to the db.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> the path to mark modified</p></li></ul><p>Very helpful when using Mixed types.</p><span class="prog__sub">Example:</span><pre><code>doc.mixed.type = 'changed';\ndoc.markModified('mixed.type');\ndoc.save() // changes to mixed.type are now persisted</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-markModified
Document-modifiedPaths	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#modifiedPaths()</code></pre><p>Returns the list of paths that have been modified.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Array</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#document_Document-modifiedPaths
Document-populate	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#populate([path], [callback])</code></pre><p>Populates document references, executing the callback when complete.If you want to use promises instead, use this function withexecPopulate()</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String, Object</code> The path to populate or an options object</p></li><li><p><code>[callback]</code> <code>Function</code> When passed, population is invoked</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Document</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>doc\n.populate('company')\n.populate({\n  path: 'notes',\n  match: /airline/,\n  select: 'text',\n  model: 'modelName'\n  options: opts\n}, function (err, user) {\n  assert(doc._id === user._id) // the document itself is passed\n})\n\n// summary\ndoc.populate(path)                   // not executed\ndoc.populate(options);               // not executed\ndoc.populate(path, callback)         // executed\ndoc.populate(options, callback);     // executed\ndoc.populate(callback);              // executed\ndoc.populate(options).execPopulate() // executed, returns promise</code></pre><span class="prog__sub">NOTE:</span><p>Population does not occur unless a callback is passed or you explicitlycall execPopulate().Passing the same path a second time will overwrite the previous path options.See Model.populate() for explaination of options.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-populate
Document-populated	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#populated(path)</code></pre><p>Gets _id(s) used during population of the given path.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Array, ObjectId, Number, Buffer, String, undefined</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>Model.findOne().populate('author').exec(function (err, doc) {\n  console.log(doc.author.name)         // Dr.Seuss\n  console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\n})</code></pre><p>If the path was not populated, undefined is returned.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-populated
Document-set	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#set(path, val, [type], [options])</code></pre><p>Sets the value of a path, or many paths.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String, Object</code> path or object of key/vals to set</p></li><li><p><code>val</code> <code>Any</code> the value to set</p></li><li><p><code>[type]</code> <code>Schema, String, Number, Buffer, *</code> optionally specify a type for "on-the-fly" attributes</p></li><li><p><code>[options]</code> <code>Object</code> optionally specify options that modify the behavior of the set</p></li></ul><span class="prog__sub">Example:</span><pre><code>// path, value\ndoc.set(path, value)\n\n// object\ndoc.set({\n    path  : value\n  , path2 : {\n       path  : value\n    }\n})\n\n// on-the-fly cast to number\ndoc.set(path, value, Number)\n\n// on-the-fly cast to string\ndoc.set(path, value, String)\n\n// changing strict mode behavior\ndoc.set(path, value, { strict: false });</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-set
Document-toJSON	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#toJSON(options)</code></pre><p>The return value of this method is used in calls to JSON.stringify(doc).</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>options</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Object</code> </p></li></ul><p>This method accepts the same options as Document#toObject. To apply the options to every document of your schema by default, set your schemas toJSON option to the same argument.</p><pre><code>schema.set('toJSON', { virtuals: true })</code></pre><p>See schema options for details.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-toJSON
Document-toObject	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#toObject([options])</code></pre><p>Converts this document into a plain javascript object, ready for storage in MongoDB.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[options]</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Object</code> js object</p></li></ul><p>Buffers are converted to instances of mongodb.Binary for proper storage.</p><span class="prog__sub">Options:</span><ul class="prog__ul>"\n<li><code>getters</code> apply all getters (path and virtual getters)</li>\n<li><code>virtuals</code> apply virtual getters (can override <code>getters</code> option)</li>\n<li><code>minimize</code> remove empty objects (defaults to true)</li>\n<li><code>transform</code> a transform function to apply to the resulting document before returning</li>\n<li><code>depopulate</code> depopulate any populated paths, replacing them with their original refs (defaults to false)</li>\n<li><code>versionKey</code> whether to include the version key (defaults to true)</li>\n<li><code>retainKeyOrder</code> keep the order of object keys. If this is set to true, <code>Object.keys(new Doc({ a: 1, b: 2}).toObject())</code> will always produce <code>[&apos;a&apos;, &apos;b&apos;]</code> (defaults to false)</li>\n</ul><span class="prog__sub">Getters/Virtuals</span><p>Example of only applying path getters</p><pre><code>doc.toObject({ getters: true, virtuals: false })</code></pre><p>Example of only applying virtual getters</p><pre><code>doc.toObject({ virtuals: true })</code></pre><p>Example of applying both path and virtual getters</p><pre><code>doc.toObject({ getters: true })</code></pre><p>To apply these options to every document of your schema by default, set your schemas toObject option to the same argument.</p><pre><code>schema.set('toObject', { virtuals: true })</code></pre><span class="prog__sub">Transform</span><p>We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional transform function.</p><p>Transform functions receive three arguments</p><pre><code>function (doc, ret, options) {}</code></pre><ul class="prog__ul>"\n<li><code>doc</code> The mongoose document which is being converted</li>\n<li><code>ret</code> The plain object representation which has been converted</li>\n<li><code>options</code> The options in use (either schema options or the options passed inline)</li>\n</ul><span class="prog__sub">Example</span><pre><code>// specify the transform schema option\nif (!schema.options.toObject) schema.options.toObject = {};\nschema.options.toObject.transform = function (doc, ret, options) {\n  // remove the _id of every document before returning the result\n  delete ret._id;\n  return ret;\n}\n\n// without the transformation in the schema\ndoc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n\n// with the transformation\ndoc.toObject(); // { name: 'Wreck-it Ralph' }</code></pre><p>With transformations we can do a lot more than remove properties. We can even return completely new customized objects:</p><pre><code>if (!schema.options.toObject) schema.options.toObject = {};\nschema.options.toObject.transform = function (doc, ret, options) {\n  return { movie: ret.name }\n}\n\n// without the transformation in the schema\ndoc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n\n// with the transformation\ndoc.toObject(); // { movie: 'Wreck-it Ralph' }</code></pre><p>Note: if a transform function returns undefined, the return value will be ignored.</p><p>Transformations may also be applied inline, overridding any transform set in the options:</p><pre><code>function xform (doc, ret, options) {\n  return { inline: ret.name, custom: true }\n}\n\n// pass the transform as an inline option\ndoc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }</code></pre><p>Note: if you call toObject and pass any options, the transform declared in your schema options will not be applied. To force its application pass transform: true</p><pre><code>if (!schema.options.toObject) schema.options.toObject = {};\nschema.options.toObject.hide = '_id';\nschema.options.toObject.transform = function (doc, ret, options) {\n  if (options.hide) {\n    options.hide.split(' ').forEach(function (prop) {\n      delete ret[prop];\n    });\n  }\n  return ret;\n}\n\nvar doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\ndoc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\ndoc.toObject({ hide: 'secret _id' });                  // { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\ndoc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }</code></pre><p>Transforms are applied only to the document and are not applied to sub-documents.</p><p>Transforms, like all of these options, are also available for toJSON.</p><p>See schema options for some more details.</p><p>During save, no custom options are applied to the document before being sent to the database.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-toObject
Document-toString	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#toString()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#document_Document-toString
Document-unmarkModified	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#unmarkModified(path)</code></pre><p>Clears the modified state on the specified path.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> the path to unmark modified</p></li></ul><span class="prog__sub">Example:</span><pre><code>doc.foo = 'bar';\ndoc.unmarkModified('foo');\ndoc.save() // changes to foo will not be persisted</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-unmarkModified
Document-update	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#update(doc, options, callback)</code></pre><p>Sends an update command with this document _id as the query selector.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>doc</code> <code>Object</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li><li><p><code>callback</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);</code></pre><span class="prog__sub">Valid options:</span><ul class="prog__ul>"\n<li>same as in Model.update</li>\n</ul></section>	http://mongoosejs.com/docs/api.html#document_Document-update
Document-validate	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#validate(optional, callback)</code></pre><p>Executes registered validation rules for this document.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>optional</code> <code>Object</code> options internal options</p></li><li><p><code>callback</code> <code>Function</code> optional callback called after validation completes, passing an error if one occurred</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> Promise</p></li></ul><span class="prog__sub">Note:</span><p>This method is called pre save and if a validation rule is violated, save is aborted and the error is returned to your callback.</p><span class="prog__sub">Example:</span><pre><code>doc.validate(function (err) {\n  if (err) handleError(err);\n  else // validation passed\n});</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-validate
Document-validateSync	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#validateSync(pathsToValidate)</code></pre><p>Executes registered validation rules (skipping asynchronous validators) for this document.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>pathsToValidate</code> <code>Array, string</code> only validate the given paths</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>MongooseError, undefined</code> MongooseError if there are errors during validation, or undefined if there is no error.</p></li></ul><span class="prog__sub">Note:</span><p>This method is useful if you need synchronous validation.</p><span class="prog__sub">Example:</span><pre><code>var err = doc.validateSync();\nif ( err ){\n  handleError( err );\n} else {\n  // validation passed\n}</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-validateSync
Document-errors	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#errors</code></pre><p>Hash containing current validation errors.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-errors
Document-id	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#id</code></pre><p>The string version of this documents _id.</p><span class="prog__sub">Note:</span><p>This getter exists on all documents by default. The getter can be disabled by setting the id option of its Schema to false at construction time.</p><pre><code>new Schema({ name: String }, { id: false });</code></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-id
Document-isNew	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#isNew</code></pre><p>Boolean flag specifying if the document is new.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-isNew
Document-schema	A			Document						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#schema</code></pre><p>The documents schema.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-schema
=exports	A			exports						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports()</code></pre><p>ObjectId type constructor</p><span class="prog__sub">Example</span><pre><code>var id = new mongoose.Types.ObjectId;</code></pre></section>	http://mongoosejs.com/docs/api.html#types_decimal128_exports
Subdocument-ownerDocument	A			Subdocument						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Subdocument#ownerDocument()</code></pre><p>Returns the top level document of this sub-document.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Document</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_subdocument_Subdocument-ownerDocument
Subdocument-remove	A			Subdocument						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Subdocument#remove([options], [callback])</code></pre><p>Null-out this subdoc</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> optional callback for compatibility with Document.prototype.remove</p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_subdocument_Subdocument-remove
MongooseArray-$shift	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray#$shift()</code></pre><p>Atomically shifts the array at most one time per document save().</p><span class="prog__sub">NOTE:</span><p>Calling this mulitple times on an array before saving sends the same command as calling it once.This update is implemented using the MongoDB $pop method which enforces this restriction.</p><pre><code>doc.array = [1,2,3];\n\n var shifted = doc.array.$shift();\n console.log(shifted); // 1\n console.log(doc.array); // [2,3]\n\n // no affect\n shifted = doc.array.$shift();\n console.log(doc.array); // [2,3]\n\n doc.save(function (err) {\n   if (err) return handleError(err);\n\n   // we saved, now $shift works again\n   shifted = doc.array.$shift();\n   console.log(shifted ); // 2\n   console.log(doc.array); // [3]\n })</code></pre></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray-%24shift
MongooseArray-remove	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray#remove()</code></pre><p>Alias of pull</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray-remove
MongooseArray.$pop	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.$pop()</code></pre><p>Pops the array atomically at most one time per document save().</p><span class="prog__sub">NOTE:</span><p>Calling this mulitple times on an array before saving sends the same command as calling it once.This update is implemented using the MongoDB $pop method which enforces this restriction.</p><pre><code>doc.array = [1,2,3];\n\n var popped = doc.array.$pop();\n console.log(popped); // 3\n console.log(doc.array); // [1,2]\n\n // no affect\n popped = doc.array.$pop();\n console.log(doc.array); // [1,2]\n\n doc.save(function (err) {\n   if (err) return handleError(err);\n\n   // we saved, now $pop works again\n   popped = doc.array.$pop();\n   console.log(popped); // 2\n   console.log(doc.array); // [1]\n })</code></pre></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.%24pop
MongooseArray.addToSet	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.addToSet([args...])</code></pre><p>Adds values to the array if not already present.</p><span class="prog__sub">Example:</span><pre><code>console.log(doc.array) // [2,3,4]\nvar added = doc.array.addToSet(4,5);\nconsole.log(doc.array) // [2,3,4,5]\nconsole.log(added)     // [5]</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[args...]</code> <code>T</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Array</code> the values that were added</p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.addToSet
MongooseArray.indexOf	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.indexOf(obj)</code></pre><p>Return the index of obj or -1 if not found.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>obj</code> <code>Object</code> the item to look for</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Number</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.indexOf
MongooseArray.inspect	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.inspect()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.inspect
MongooseArray.nonAtomicPush	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.nonAtomicPush([args...])</code></pre><p>Pushes items to the array non-atomically.</p><span class="prog__sub">NOTE:</span><p>marks the entire array as modified, which if saved, will store it as a $set operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[args...]</code> <code>T</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.nonAtomicPush
MongooseArray.pop	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.pop()</code></pre><p>Wraps Array#pop with proper change tracking.</p><span class="prog__sub">Note:</span><p>marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.pop
MongooseArray.pull	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.pull([args...])</code></pre><p>Pulls items from the array atomically. Equality is determined by castingthe provided value to an embedded document and comparing usingthe Document.equals() function.</p><span class="prog__sub">Examples:</span><pre><code>doc.array.pull(ObjectId)\ndoc.array.pull({ _id: 'someId' })\ndoc.array.pull(36)\ndoc.array.pull('tag 1', 'tag 2')</code></pre><p>To remove a document from a subdocument array we may pass an object with a matching _id.</p><pre><code>doc.subdocs.push({ _id: 4815162342 })\ndoc.subdocs.pull({ _id: 4815162342 }) // removed</code></pre><p>Or we may passing the _id directly and let mongoose take care of it.</p><pre><code>doc.subdocs.push({ _id: 4815162342 })\ndoc.subdocs.pull(4815162342); // works</code></pre><p>The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[args...]</code> <code>T</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.pull
MongooseArray.push	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.push([args...])</code></pre><p>Wraps Array#push with proper change tracking.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[args...]</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.push
MongooseArray.set	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.set()</code></pre><p>Sets the casted val at index i and marks the array modified.</p><span class="prog__sub">Example:</span><pre><code>// given documents based on the following\nvar Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n\nvar doc = new Doc({ array: [2,3,4] })\n\nconsole.log(doc.array) // [2,3,4]\n\ndoc.array.set(1,"5");\nconsole.log(doc.array); // [2,5,4] // properly cast to number\ndoc.save() // the change is saved\n\n// VS not using array#set\ndoc.array[1] = "5";\nconsole.log(doc.array); // [2,"5",4] // no casting\ndoc.save() // change is not saved</code></pre><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Array</code> this</p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.set
MongooseArray.shift	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.shift()</code></pre><p>Wraps Array#shift with proper change tracking.</p><span class="prog__sub">Example:</span><pre><code>doc.array = [2,3];\nvar res = doc.array.shift();\nconsole.log(res) // 2\nconsole.log(doc.array) // [3]</code></pre><span class="prog__sub">Note:</span><p>marks the entire array as modified, which if saved, will store it as a $set operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.shift
MongooseArray.sort	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.sort()</code></pre><p>Wraps Array#sort with proper change tracking.</p><span class="prog__sub">NOTE:</span><p>marks the entire array as modified, which if saved, will store it as a $set operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.sort
MongooseArray.splice	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.splice()</code></pre><p>Wraps Array#splice with proper change tracking and casting.</p><span class="prog__sub">Note:</span><p>marks the entire array as modified, which if saved, will store it as a $set operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.splice
MongooseArray.toObject	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.toObject(options)</code></pre><p>Returns a native js Array.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>options</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Array</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.toObject
MongooseArray.unshift	A			MongooseArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.unshift()</code></pre><p>Wraps Array#unshift with proper change tracking.</p><span class="prog__sub">Note:</span><p>marks the entire array as modified, which if saved, will store it as a $set operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.unshift
MongooseDocumentArray.create	A			MongooseDocumentArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseDocumentArray.create(obj)</code></pre><p>Creates a subdocument casted to this schema.</p><p>This is the same subdocument constructor used for casting.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>obj</code> <code>Object</code> the value to cast to this arrays SubDocument schema</p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray.create
MongooseDocumentArray.id	A			MongooseDocumentArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseDocumentArray.id(id)</code></pre><p>Searches array items for the first document with a matching _id.</p><span class="prog__sub">Example:</span><pre><code>var embeddedDoc = m.array.id(some_id);</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>id</code> <code>ObjectId, String, Number, Buffer</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>EmbeddedDocument, null</code> the subdocument or null if not found.</p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray.id
MongooseDocumentArray.inspect	A			MongooseDocumentArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseDocumentArray.inspect()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray.inspect
MongooseDocumentArray.toObject	A			MongooseDocumentArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseDocumentArray.toObject([options])</code></pre><p>Returns a native js Array of plain js objects</p><span class="prog__sub">NOTE:</span><p>Each sub-document is converted to a plain object by calling its #toObject method.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[options]</code> <code>Object</code> optional options to pass to each documents <code>code</code>toObject</code> method call during conversion</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Array</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray.toObject
MongooseBuffer.copy	A			MongooseBuffer						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.copy(target)</code></pre><p>Copies the buffer.</p><span class="prog__sub">Note:</span><p>Buffer#copy does not mark target as modified so you must copy from a MongooseBuffer for it to work as expected. This is a work around since copy modifies the target, not this.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>target</code> <code>Buffer</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Number</code> The number of bytes copied.</p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.copy
MongooseBuffer.equals	A			MongooseBuffer						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.equals(other)</code></pre><p>Determines if this buffer is equals to other buffer</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>other</code> <code>Buffer</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.equals
MongooseBuffer.subtype	A			MongooseBuffer						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.subtype(subtype)</code></pre><p>Sets the subtype option and marks the buffer modified.</p><span class="prog__sub">SubTypes:</span><p>var bson = require('bson')  bson.BSON_BINARY_SUBTYPE_DEFAULT  bson.BSON_BINARY_SUBTYPE_FUNCTION  bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY  bson.BSON_BINARY_SUBTYPE_UUID  bson.BSON_BINARY_SUBTYPE_MD5  bson.BSON_BINARY_SUBTYPE_USER_DEFINED</p><p>doc.buffer.subtype(bson.BSON_BINARY_SUBTYPE_UUID);</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>subtype</code> <code>Hex</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.subtype
MongooseBuffer.toObject	A			MongooseBuffer						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.toObject([subtype])</code></pre><p>Converts this buffer to its Binary type representation.</p><span class="prog__sub">SubTypes:</span><p>var bson = require('bson')  bson.BSON_BINARY_SUBTYPE_DEFAULT  bson.BSON_BINARY_SUBTYPE_FUNCTION  bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY  bson.BSON_BINARY_SUBTYPE_UUID  bson.BSON_BINARY_SUBTYPE_MD5  bson.BSON_BINARY_SUBTYPE_USER_DEFINED</p><p>doc.buffer.toObject(bson.BSON_BINARY_SUBTYPE_USER_DEFINED);</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[subtype]</code> <code>Hex</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Binary</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.toObject
MongooseBuffer.write	A			MongooseBuffer						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.write()</code></pre><p>Writes the buffer.</p></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.write
=ObjectId	A			ObjectId						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId()</code></pre><p>ObjectId type constructor</p><span class="prog__sub">Example</span><pre><code>var id = new mongoose.Types.ObjectId;</code></pre></section>	http://mongoosejs.com/docs/api.html#types_objectid_ObjectId
EmbeddedDocument-inspect	A			EmbeddedDocument						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#inspect()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-inspect
EmbeddedDocument-invalidate	A			EmbeddedDocument						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#invalidate(path, err)</code></pre><p>Marks a path as invalid, causing validation to fail.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> the field to invalidate</p></li><li><p><code>err</code> <code>String, Error</code> error which states the reason path was invalid</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-invalidate
EmbeddedDocument-ownerDocument	A			EmbeddedDocument						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#ownerDocument()</code></pre><p>Returns the top level document of this sub-document.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Document</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-ownerDocument
EmbeddedDocument-parent	A			EmbeddedDocument						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#parent()</code></pre><p>Returns this sub-documents parent document.</p></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-parent
EmbeddedDocument-parentArray	A			EmbeddedDocument						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#parentArray()</code></pre><p>Returns this sub-documents parent array.</p></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-parentArray
EmbeddedDocument-remove	A			EmbeddedDocument						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#remove([options], [fn])</code></pre><p>Removes the subdocument from its parent array.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[fn]</code> <code>Function</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-remove
EmbeddedDocument.markModified	A			EmbeddedDocument						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument.markModified(path)</code></pre><p>Marks the embedded doc modified.</p><span class="prog__sub">Example:</span><pre><code>var doc = blogpost.comments.id(hexstring);\ndoc.mixed.type = 'changed';\ndoc.markModified('mixed.type');</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> the path which changed</p></li></ul></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument.markModified
Query-$where	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#$where(js)</code></pre><p>Specifies a javascript function or expression to pass to MongoDBs query system.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>js</code> <code>String, Function</code> javascript string or function</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.$where('this.comments.length === 10 || this.name.length === 5')\n\n// or\n\nquery.$where(function () {\n  return this.comments.length === 10 || this.name.length === 5;\n})</code></pre><span class="prog__sub">NOTE:</span><p>Only use $where when you have a condition that cannot be met using other MongoDB operators like $lt.Be sure to read about all of its caveats before using.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-%24where
Query-all	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#all([path], val)</code></pre><p>Specifies an $all query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-all
Query-and	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#and(array)</code></pre><p>Specifies arguments for a $and condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>array</code> <code>Array</code> array of conditions</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.and([{ color: 'green' }, { status: 'ok' }])</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-and
Query-batchSize	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#batchSize(val)</code></pre><p>Specifies the batchSize option.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Number</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>query.batchSize(100)</code></pre><span class="prog__sub">Note</span><p>Cannot be used with distinct()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-batchSize
Query-box	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#box(val, Upper)</code></pre><p>Specifies a $box condition</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Object</code> </p></li><li><p><code>Upper</code> <code>[Array]</code> Right Coords</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>var lowerLeft = [40.73083, -73.99756]\nvar upperRight= [40.741404,  -73.988135]\n\nquery.where('loc').within().box(lowerLeft, upperRight)\nquery.box({ ll : lowerLeft, ur : upperRight })</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-box
Query-cast	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#cast(model, [obj])</code></pre><p>Casts this query to the schema of model</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>model</code> <code>Model</code> </p></li><li><p><code>[obj]</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Object</code> </p></li></ul><span class="prog__sub">Note</span><p>If obj is present, it is cast instead of this query.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-cast
Query-catch	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#catch([reject])</code></pre><p>Executes the query returning a Promise which will beresolved with either the doc(s) or rejected with the error.Like .then(), but only takes a rejection handler.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[reject]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-catch
Query-center	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#center()</code></pre><p>DEPRECATED Alias for circle</p><p>Deprecated. Use circle instead.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-center
Query-centerSphere	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#centerSphere([path], val)</code></pre><p>DEPRECATED Specifies a $centerSphere condition</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Deprecated. Use circle instead.</p><span class="prog__sub">Example</span><pre><code>var area = { center: [50, 50], radius: 10 };\nquery.where('loc').within().centerSphere(area);</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-centerSphere
Query-circle	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#circle([path], area)</code></pre><p>Specifies a $center or $centerSphere condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>area</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>var area = { center: [50, 50], radius: 10, unique: true }\nquery.where('loc').within().circle(area)\n// alternatively\nquery.circle('loc', area);\n\n// spherical calculations\nvar area = { center: [50, 50], radius: 10, unique: true, spherical: true }\nquery.where('loc').within().circle(area)\n// alternatively\nquery.circle('loc', area);</code></pre><p>New in 3.7.0</p></section>	http://mongoosejs.com/docs/api.html#query_Query-circle
Query-collation	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#collation(value)</code></pre><p>Adds a collation to this op (MongoDB 3.4 and up)</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-collation
Query-comment	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#comment(val)</code></pre><p>Specifies the comment option.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Number</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>query.comment('login query')</code></pre><span class="prog__sub">Note</span><p>Cannot be used with distinct()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-comment
Query-count	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#count([criteria], [callback])</code></pre><p>Specifying this query as a count query.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[criteria]</code> <code>Object</code> mongodb selector</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Passing a callback executes the query.</p><span class="prog__sub">Example:</span><pre><code>var countQuery = model.where({ 'color': 'black' }).count();\n\nquery.count({ color: 'black' }).count(callback)\n\nquery.count({ color: 'black' }, callback)\n\nquery.where('color', 'black').count(function (err, count) {\n  if (err) return handleError(err);\n  console.log('there are %d kittens', count);\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-count
Query-cursor	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#cursor([options])</code></pre><p>Returns a wrapper around a mongodb driver cursor.A QueryCursor exposes a Streams3-compatibleinterface, as well as a .next() function.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[options]</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>QueryCursor</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>// There are 2 ways to use a cursor. First, as a stream:\nThing.\n  find({ name: /^hello/ }).\n  cursor().\n  on('data', function(doc) { console.log(doc); }).\n  on('end', function() { console.log('Done!'); });\n\n// Or you can use `.next()` to manually get the next doc in the stream.\n// `.next()` returns a promise, so you can use promises or callbacks.\nvar cursor = Thing.find({ name: /^hello/ }).cursor();\ncursor.next(function(error, doc) {\n  console.log(doc);\n});\n\n// Because `.next()` returns a promise, you can use co\n// to easily iterate through all documents without loading them\n// all into memory.\nco(function*() {\n  const cursor = Thing.find({ name: /^hello/ }).cursor();\n  for (let doc = yield cursor.next(); doc != null; doc = yield cursor.next()) {\n    console.log(doc);\n  }\n});</code></pre><span class="prog__sub">Valid options</span><ul class="prog__ul>"\n<li><code>transform</code>: optional function which accepts a mongoose document. The return value of the function will be emitted on <code>data</code> and returned by <code>.next()</code>.</li>\n</ul></section>	http://mongoosejs.com/docs/api.html#query_Query-cursor
Query-distinct	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#distinct([field], [criteria], [callback])</code></pre><p>Declares or executes a distict() operation.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[field]</code> <code>String</code> </p></li><li><p><code>[criteria]</code> <code>Object, Query</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Passing a callback executes the query.</p><span class="prog__sub">Example</span><pre><code>distinct(field, conditions, callback)\ndistinct(field, conditions)\ndistinct(field, callback)\ndistinct(field)\ndistinct(callback)\ndistinct()</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-distinct
Query-elemMatch	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#elemMatch(path, criteria)</code></pre><p>Specifies an $elemMatch condition</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String, Object, Function</code> </p></li><li><p><code>criteria</code> <code>Object, Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n\nquery.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n\nquery.elemMatch('comment', function (elem) {\n  elem.where('author').equals('autobot');\n  elem.where('votes').gte(5);\n})\n\nquery.where('comment').elemMatch(function (elem) {\n  elem.where({ author: 'autobot' });\n  elem.where('votes').gte(5);\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-elemMatch
Query-equals	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#equals(val)</code></pre><p>Specifies the complementary comparison value for paths specified with where()</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>User.where('age').equals(49);\n\n// is the same as\n\nUser.where('age', 49);</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-equals
Query-exec	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#exec([operation], [callback])</code></pre><p>Executes the query</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[operation]</code> <code>String, Function</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul><span class="prog__sub">Examples:</span><pre><code>var promise = query.exec();\nvar promise = query.exec('update');\n\nquery.exec(callback);\nquery.exec('find', callback);</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-exec
Query-exists	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#exists([path], val)</code></pre><p>Specifies an $exists condition</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>// { name: { $exists: true }}\nThing.where('name').exists()\nThing.where('name').exists(true)\nThing.find().exists('name')\n\n// { name: { $exists: false }}\nThing.where('name').exists(false);\nThing.find().exists('name', false);</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-exists
Query-find	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#find([criteria], [callback])</code></pre><p>Finds documents.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[criteria]</code> <code>Object</code> mongodb selector</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>When no callback is passed, the query is not executed. When the query is executed, the result will be an array of documents.</p><span class="prog__sub">Example</span><pre><code>query.find({ name: 'Los Pollos Hermanos' }).find(callback)</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-find
Query-findOne	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#findOne([criteria], [projection], [callback])</code></pre><p>Declares the query a findOne operation. When executed, the first found document is passed to the callback.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[criteria]</code> <code>Object, Query</code> mongodb selector</p></li><li><p><code>[projection]</code> <code>Object</code> optional fields to return</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Passing a callback executes the query. The result of the query is a single document.</p><ul class="prog__ul>"\n<li><em>Note:</em> <code>conditions</code> is optional, and if <code>conditions</code> is null or undefined,\nmongoose will send an empty <code>findOne</code> command to MongoDB, which will return\nan arbitrary document. If you&apos;re querying by <code>_id</code>, use <code>Model.findById()</code>\ninstead.</li>\n</ul><span class="prog__sub">Example</span><pre><code>var query  = Kitten.where({ color: 'white' });\nquery.findOne(function (err, kitten) {\n  if (err) return handleError(err);\n  if (kitten) {\n    // doc may be null if no document matched\n  }\n});</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-findOne
Query-findOneAndRemove	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#findOneAndRemove([conditions], [options], [callback])</code></pre><p>Issues a mongodb findAndModify remove command.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[conditions]</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed.</p><span class="prog__sub">Available options</span><ul class="prog__ul>"\n<li><code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li>\n<li><code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li>\n<li><code>passRawResult</code>: if true, passes the raw result from the MongoDB driver as the third callback parameter</li>\n</ul><span class="prog__sub">Callback Signature</span><pre><code>function(error, doc, result) {\n  // error: any errors that occurred\n  // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n  // result: [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n}\n</code></pre><span class="prog__sub">Examples</span><pre><code>A.where().findOneAndRemove(conditions, options, callback) // executes\nA.where().findOneAndRemove(conditions, options)  // return Query\nA.where().findOneAndRemove(conditions, callback) // executes\nA.where().findOneAndRemove(conditions) // returns Query\nA.where().findOneAndRemove(callback)   // executes\nA.where().findOneAndRemove()           // returns Query</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-findOneAndRemove
Query-findOneAndUpdate	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#findOneAndUpdate([query], [doc], [options], [callback])</code></pre><p>Issues a mongodb findAndModify update command.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[query]</code> <code>Object, Query</code> </p></li><li><p><code>[doc]</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Finds a matching document, updates it according to the update arg, passing any options, and returns the found document (if any) to the callback. The query executes immediately if callback is passed.</p><span class="prog__sub">Available options</span><ul class="prog__ul>"\n<li><code>new</code>: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)</li>\n<li><code>upsert</code>: bool - creates the object if it doesn&apos;t exist. defaults to false.</li>\n<li><code>fields</code>: {Object|String} - Field selection. Equivalent to <code>.select(fields).findOneAndUpdate()</code></li>\n<li><code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li>\n<li><code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li>\n<li><code>runValidators</code>: if true, runs update validators on this command. Update validators validate the update operation against the model&apos;s schema.</li>\n<li><code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the defaults specified in the model&apos;s schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on MongoDB&apos;s <code>$setOnInsert</code> operator.</li>\n<li><code>passRawResult</code>: if true, passes the raw result from the MongoDB driver as the third callback parameter</li>\n<li><code>context</code> (string) if set to &apos;query&apos; and <code>runValidators</code> is on, <code>this</code> will refer to the query in custom validator functions that update validation runs. Does nothing if <code>runValidators</code> is false.</li>\n</ul><span class="prog__sub">Callback Signature</span><pre><code>function(error, doc) {\n  // error: any errors that occurred\n  // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n}</code></pre><span class="prog__sub">Examples</span><pre><code>query.findOneAndUpdate(conditions, update, options, callback) // executes\nquery.findOneAndUpdate(conditions, update, options)  // returns Query\nquery.findOneAndUpdate(conditions, update, callback) // executes\nquery.findOneAndUpdate(conditions, update)           // returns Query\nquery.findOneAndUpdate(update, callback)             // returns Query\nquery.findOneAndUpdate(update)                       // returns Query\nquery.findOneAndUpdate(callback)                     // executes\nquery.findOneAndUpdate()                             // returns Query</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-findOneAndUpdate
Query-geometry	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#geometry(object)</code></pre><p>Specifies a $geometry condition</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>object</code> <code>Object</code> Must contain a type property which is a String and a coordinates property which is an Array. See the examples.</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\nquery.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n\n// or\nvar polyB = [[ 0, 0 ], [ 1, 1 ]]\nquery.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n\n// or\nvar polyC = [ 0, 0 ]\nquery.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n\n// or\nquery.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })</code></pre><p>The argument is assigned to the most recent path passed to where().</p><span class="prog__sub">NOTE:</span><p>geometry() must come after either intersects() or within().</p><p>The object argument must contain type and coordinates properties.- type {String}- coordinates {Array}</p></section>	http://mongoosejs.com/docs/api.html#query_Query-geometry
Query-getQuery	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#getQuery()</code></pre><p>Returns the current query conditions as a JSON object.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Object</code> current query conditions</p></li></ul><span class="prog__sub">Example:</span><pre><code>var query = new Query();\nquery.find({ a: 1 }).where('b').gt(2);\nquery.getQuery(); // { a: 1, b: { $gt: 2 } }</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-getQuery
Query-getUpdate	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#getUpdate()</code></pre><p>Returns the current update operations as a JSON object.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Object</code> current update operations</p></li></ul><span class="prog__sub">Example:</span><pre><code>var query = new Query();\nquery.update({}, { $set: { a: 5 } });\nquery.getUpdate(); // { $set: { a: 5 } }</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-getUpdate
Query-gt	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#gt([path], val)</code></pre><p>Specifies a $gt query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p><span class="prog__sub">Example</span><pre><code>Thing.find().where('age').gt(21)\n\n// or\nThing.find().gt('age', 21)</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-gt
Query-gte	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#gte([path], val)</code></pre><p>Specifies a $gte query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-gte
Query-hint	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#hint(val)</code></pre><p>Sets query hints.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Object</code> a hint object</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.hint({ indexA: 1, indexB: -1})</code></pre><span class="prog__sub">Note</span><p>Cannot be used with distinct()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-hint
Query-in	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#in([path], val)</code></pre><p>Specifies an $in query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-in
Query-intersects	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#intersects([arg])</code></pre><p>Declares an intersects query for geometry().</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[arg]</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.where('path').intersects().geometry({\n    type: 'LineString'\n  , coordinates: [[180.0, 11.0], [180, 9.0]]\n})\n\nquery.where('path').intersects({\n    type: 'LineString'\n  , coordinates: [[180.0, 11.0], [180, 9.0]]\n})</code></pre><span class="prog__sub">NOTE:</span><p>MUST be used after where().</p><span class="prog__sub">NOTE:</span><p>In Mongoose 3.7, intersects changed from a getter to a function. If you need the old syntax, use this.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-intersects
Query-lean	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#lean(bool)</code></pre><p>Sets the lean option.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>bool</code> <code>Boolean</code> defaults to true</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Documents returned from queries with the lean option enabled are plain javascript objects, not MongooseDocuments. They have no save method, getters/setters or other Mongoose magic applied.</p><span class="prog__sub">Example:</span><pre><code>new Query().lean() // true\nnew Query().lean(true)\nnew Query().lean(false)\n\nModel.find().lean().exec(function (err, docs) {\n  docs[0] instanceof mongoose.Document // false\n});</code></pre><p>This is a great option in high-performance read-only scenarios, especially when combined with stream.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-lean
Query-limit	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#limit(val)</code></pre><p>Specifies the maximum number of documents the query will return.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Number</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>query.limit(20)</code></pre><span class="prog__sub">Note</span><p>Cannot be used with distinct()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-limit
Query-lt	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#lt([path], val)</code></pre><p>Specifies a $lt query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-lt
Query-lte	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#lte([path], val)</code></pre><p>Specifies a $lte query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-lte
Query-maxDistance	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#maxDistance([path], val)</code></pre><p>Specifies a $maxDistance query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-maxDistance
Query-maxscan	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#maxscan()</code></pre><p>DEPRECATED Alias of maxScan</p></section>	http://mongoosejs.com/docs/api.html#query_Query-maxscan
Query-maxScan	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#maxScan(val)</code></pre><p>Specifies the maxScan option.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Number</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>query.maxScan(100)</code></pre><span class="prog__sub">Note</span><p>Cannot be used with distinct()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-maxScan
Query-merge	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#merge(source)</code></pre><p>Merges another Query or conditions object into this one.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>source</code> <code>Query, Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>When a Query is passed, conditions, field selection and options are merged.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-merge
Query-merge	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#merge(source)</code></pre><p>Merges another Query or conditions object into this one.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>source</code> <code>Query, Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>When a Query is passed, conditions, field selection and options are merged.</p><p>New in 3.7.0</p></section>	http://mongoosejs.com/docs/api.html#query_Query-merge
Query-mod	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#mod([path], val)</code></pre><p>Specifies a $mod condition</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-mod
Query-mongooseOptions	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#mongooseOptions(options)</code></pre><p>Getter/setter around the current mongoose-specific options for this query(populate, lean, etc.)</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>options</code> <code>Object</code> if specified, overwrites the current options</p></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-mongooseOptions
Query-ne	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#ne([path], val)</code></pre><p>Specifies a $ne query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-ne
Query-near	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#near([path], val)</code></pre><p>Specifies a $near or $nearSphere condition</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>These operators return documents sorted by distance.</p><span class="prog__sub">Example</span><pre><code>query.where('loc').near({ center: [10, 10] });\nquery.where('loc').near({ center: [10, 10], maxDistance: 5 });\nquery.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\nquery.near('loc', { center: [10, 10], maxDistance: 5 });</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-near
Query-nearSphere	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#nearSphere()</code></pre><p>DEPRECATED Specifies a $nearSphere condition</p><span class="prog__sub">Example</span><pre><code>query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });</code></pre><p>Deprecated. Use query.near() instead with the spherical option set to true.</p><span class="prog__sub">Example</span><pre><code>query.where('loc').near({ center: [10, 10], spherical: true });</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-nearSphere
Query-nin	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#nin([path], val)</code></pre><p>Specifies an $nin query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-nin
Query-nor	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#nor(array)</code></pre><p>Specifies arguments for a $nor condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>array</code> <code>Array</code> array of conditions</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.nor([{ color: 'green' }, { status: 'ok' }])</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-nor
Query-or	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#or(array)</code></pre><p>Specifies arguments for an $or condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>array</code> <code>Array</code> array of conditions</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.or([{ color: 'red' }, { status: 'emergency' }])</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-or
Query-polygon	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#polygon([path], [coordinatePairs...])</code></pre><p>Specifies a $polygon condition</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String, Array</code> </p></li><li><p><code>[coordinatePairs...]</code> <code>Array, Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.where('loc').within().polygon([10,20], [13, 25], [7,15])\nquery.polygon('loc', [10,20], [13, 25], [7,15])</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-polygon
Query-populate	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#populate(path, [select], [model], [match], [options])</code></pre><p>Specifies paths which should be populated with other documents.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>Object, String</code> either the path to populate or an object specifying all parameters</p></li><li><p><code>[select]</code> <code>Object, String</code> Field selection for the population query</p></li><li><p><code>[model]</code> <code>Model</code> The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's ref field.</p></li><li><p><code>[match]</code> <code>Object</code> Conditions for the population query</p></li><li><p><code>[options]</code> <code>Object</code> Options for the population query (sort, etc)</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>Kitten.findOne().populate('owner').exec(function (err, kitten) {\n  console.log(kitten.owner.name) // Max\n})\n\nKitten.find().populate({\n    path: 'owner'\n  , select: 'name'\n  , match: { color: 'black' }\n  , options: { sort: { name: -1 }}\n}).exec(function (err, kittens) {\n  console.log(kittens[0].owner.name) // Zoopa\n})\n\n// alternatively\nKitten.find().populate('owner', 'name', null, {sort: { name: -1 }}).exec(function (err, kittens) {\n  console.log(kittens[0].owner.name) // Zoopa\n})</code></pre><p>Paths are populated after the query executes and a response is received. A separate query is then executed for each path specified for population. After a response for each query has also been returned, the results are passed to the callback.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-populate
Query-read	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#read(pref, [tags])</code></pre><p>Determines the MongoDB nodes from which to read.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>pref</code> <code>String</code> one of the listed preference options or aliases</p></li><li><p><code>[tags]</code> <code>Array</code> optional tags for this query</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Preferences:</span><pre><code>primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\nsecondary            Read from secondary if available, otherwise error.\nprimaryPreferred     Read from primary if available, otherwise a secondary.\nsecondaryPreferred   Read from a secondary if available, otherwise read from the primary.\nnearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.</code></pre><p>Aliases</p><pre><code>p   primary\npp  primaryPreferred\ns   secondary\nsp  secondaryPreferred\nn   nearest</code></pre><span class="prog__sub">Example:</span><pre><code>new Query().read('primary')\nnew Query().read('p')  // same as primary\n\nnew Query().read('primaryPreferred')\nnew Query().read('pp') // same as primaryPreferred\n\nnew Query().read('secondary')\nnew Query().read('s')  // same as secondary\n\nnew Query().read('secondaryPreferred')\nnew Query().read('sp') // same as secondaryPreferred\n\nnew Query().read('nearest')\nnew Query().read('n')  // same as nearest\n\n// read from secondaries with matching tags\nnew Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])</code></pre><p>Read more about how to use read preferrences here and here.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-read
Query-regex	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#regex([path], val)</code></pre><p>Specifies a $regex query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-regex
Query-remove	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#remove([criteria], [callback])</code></pre><p>Declare and/or execute this query as a remove() operation.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[criteria]</code> <code>Object, Query</code> mongodb selector</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>Model.remove({ artist: 'Anne Murray' }, callback)</code></pre><span class="prog__sub">Note</span><p>The operation is only executed when a callback is passed. To force execution without a callback, you must first call remove() and then execute it by using the exec() method.</p><pre><code>// not executed\nvar query = Model.find().remove({ name: 'Anne Murray' })\n\n// executed\nquery.remove({ name: 'Anne Murray' }, callback)\nquery.remove({ name: 'Anne Murray' }).remove(callback)\n\n// executed without a callback\nquery.exec()\n\n// summary\nquery.remove(conds, fn); // executes\nquery.remove(conds)\nquery.remove(fn) // executes\nquery.remove()</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-remove
Query-select	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#select(arg)</code></pre><p>Specifies which document fields to include or exclude (also known as the query "projection")</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>arg</code> <code>Object, String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>When using string syntax, prefixing a path with - will flag that path as excluded. When a path does not have the - prefix, it is included. Lastly, if a path is prefixed with +, it forces inclusion of the path, which is useful for paths excluded at the schema level.</p><span class="prog__sub">Example</span><pre><code>// include a and b, exclude other fields\nquery.select('a b');\n\n// exclude c and d, include other fields\nquery.select('-c -d');\n\n// or you may use object notation, useful when\n// you have keys already prefixed with a "-"\nquery.select({ a: 1, b: 1 });\nquery.select({ c: 0, d: 0 });\n\n// force inclusion of field excluded at schema level\nquery.select('+path')</code></pre><span class="prog__sub">NOTE:</span><p>Cannot be used with distinct().</p><p>v2 had slightly different syntax such as allowing arrays of field names. This support was removed in v3.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-select
Query-selected	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#selected()</code></pre><p>Determines if field selection has been made.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-selected
Query-selectedExclusively	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#selectedExclusively()</code></pre><p>Determines if exclusive field selection has been made.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul><pre><code>query.selectedExclusively() // false\nquery.select('-name')\nquery.selectedExclusively() // true\nquery.selectedInclusively() // false</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-selectedExclusively
Query-selectedInclusively	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#selectedInclusively()</code></pre><p>Determines if inclusive field selection has been made.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul><pre><code>query.selectedInclusively() // false\nquery.select('name')\nquery.selectedInclusively() // true</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-selectedInclusively
Query-setOptions	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#setOptions(options)</code></pre><p>Sets query options.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>options</code> <code>Object</code> </p></li></ul><span class="prog__sub">Options:</span><ul class="prog__ul>"\n<li>tailable *</li>\n<li>sort *</li>\n<li>limit *</li>\n<li>skip *</li>\n<li>maxscan *</li>\n<li>batchSize *</li>\n<li>comment *</li>\n<li>snapshot *</li>\n<li>hint *</li>\n<li>readPreference **</li>\n<li>lean *</li>\n<li>safe</li>\n</ul><p>* denotes a query helper method is also available** query helper method to set readPreference is read()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-setOptions
Query-size	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#size([path], val)</code></pre><p>Specifies a $size query condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> </p></li></ul><p>When called with one argument, the most recent path passed to where() is used.</p><span class="prog__sub">Example</span><pre><code>MyModel.where('tags').size(0).exec(function (err, docs) {\n  if (err) return handleError(err);\n\n  assert(Array.isArray(docs));\n  console.log('documents with 0 tags', docs);\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-size
Query-skip	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#skip(val)</code></pre><p>Specifies the number of documents to skip.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Number</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>query.skip(100).limit(20)</code></pre><span class="prog__sub">Note</span><p>Cannot be used with distinct()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-skip
Query-slaveOk	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#slaveOk(v)</code></pre><p>DEPRECATED Sets the slaveOk option.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>v</code> <code>Boolean</code> defaults to true</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Deprecated in MongoDB 2.2 in favor of read preferences.</p><span class="prog__sub">Example:</span><pre><code>query.slaveOk() // true\nquery.slaveOk(true)\nquery.slaveOk(false)</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-slaveOk
Query-slice	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#slice([path], val)</code></pre><p>Specifies a $slice projection for an array.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String</code> </p></li><li><p><code>val</code> <code>Number</code> number/range of elements to slice</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.slice('comments', 5)\nquery.slice('comments', -5)\nquery.slice('comments', [10, 5])\nquery.where('comments').slice(5)\nquery.where('comments').slice([-10, 5])</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-slice
Query-snapshot	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#snapshot()</code></pre><p>Specifies this query as a snapshot query.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.snapshot() // true\nquery.snapshot(true)\nquery.snapshot(false)</code></pre><span class="prog__sub">Note</span><p>Cannot be used with distinct()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-snapshot
Query-sort	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#sort(arg)</code></pre><p>Sets the sort order</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>arg</code> <code>Object, String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1.</p><p>If a string is passed, it must be a space delimited list of path names. Thesort order of each path is ascending unless the path name is prefixed with -which will be treated as descending.</p><span class="prog__sub">Example</span><pre><code>// sort by "field" ascending and "test" descending\nquery.sort({ field: 'asc', test: -1 });\n\n// equivalent\nquery.sort('field -test');</code></pre><span class="prog__sub">Note</span><p>Cannot be used with distinct()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-sort
Query-stream	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#stream([options])</code></pre><p>Returns a Node.js 0.8 style read stream interface.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[options]</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>QueryStream</code> </p></li></ul><span class="prog__sub">Example</span><pre><code>// follows the nodejs 0.8 stream api\nThing.find({ name: /^hello/ }).stream().pipe(res)\n\n// manual streaming\nvar stream = Thing.find({ name: /^hello/ }).stream();\n\nstream.on('data', function (doc) {\n  // do something with the mongoose document\n}).on('error', function (err) {\n  // handle the error\n}).on('close', function () {\n  // the stream is closed\n});</code></pre><span class="prog__sub">Valid options</span><ul class="prog__ul>"\n<li><code>transform</code>: optional function which accepts a mongoose document. The return value of the function will be emitted on <code>data</code>.</li>\n</ul><span class="prog__sub">Example</span><pre><code>// JSON.stringify all documents before emitting\nvar stream = Thing.find().stream({ transform: JSON.stringify });\nstream.pipe(writeStream);</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-stream
Query-tailable	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#tailable(bool, [opts], [opts.numberOfRetries], [opts.tailableRetryInterval])</code></pre><p>Sets the tailable option (for use with capped collections).</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>bool</code> <code>Boolean</code> defaults to true</p></li><li><p><code>[opts]</code> <code>Object</code> options to set</p></li><li><p><code>[opts.numberOfRetries]</code> <code>Number</code> if cursor is exhausted, retry this many times before giving up</p></li><li><p><code>[opts.tailableRetryInterval]</code> <code>Number</code> if cursor is exhausted, wait this many milliseconds before retrying</p></li></ul><span class="prog__sub">Example</span><pre><code>query.tailable() // true\nquery.tailable(true)\nquery.tailable(false)</code></pre><span class="prog__sub">Note</span><p>Cannot be used with distinct()</p></section>	http://mongoosejs.com/docs/api.html#query_Query-tailable
Query-then	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#then([resolve], [reject])</code></pre><p>Executes the query returning a Promise which will beresolved with either the doc(s) or rejected with the error.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[resolve]</code> <code>Function</code> </p></li><li><p><code>[reject]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-then
Query-toConstructor	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#toConstructor()</code></pre><p>Converts this query to a customized, reusable query constructor with all arguments and options retained.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> subclass-of-Query</p></li></ul><span class="prog__sub">Example</span><pre><code>// Create a query for adventure movies and read from the primary\n// node in the replica-set unless it is down, in which case we'll\n// read from a secondary node.\nvar query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n\n// create a custom Query constructor based off these settings\nvar Adventure = query.toConstructor();\n\n// Adventure is now a subclass of mongoose.Query and works the same way but with the\n// default query parameters and options set.\nAdventure().exec(callback)\n\n// further narrow down our query results while still using the previous settings\nAdventure().where({ name: /^Life/ }).exec(callback);\n\n// since Adventure is a stand-alone constructor we can also add our own\n// helper methods and getters without impacting global queries\nAdventure.prototype.startsWith = function (prefix) {\n  this.where({ name: new RegExp('^' + prefix) })\n  return this;\n}\nObject.defineProperty(Adventure.prototype, 'highlyRated', {\n  get: function () {\n    this.where({ rating: { $gt: 4.5 }});\n    return this;\n  }\n})\nAdventure().highlyRated.startsWith('Life').exec(callback)</code></pre><p>New in 3.7.3</p></section>	http://mongoosejs.com/docs/api.html#query_Query-toConstructor
Query-update	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#update([criteria], [doc], [options], [callback])</code></pre><p>Declare and/or execute this query as an update() operation.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[criteria]</code> <code>Object</code> </p></li><li><p><code>[doc]</code> <code>Object</code> the update command</p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>All paths passed that are not $atomic operations will become $set ops.</p><span class="prog__sub">Example</span><pre><code>Model.where({ _id: id }).update({ title: 'words' })\n\n// becomes\n\nModel.where({ _id: id }).update({ $set: { title: 'words' }})</code></pre><span class="prog__sub">Valid options:</span><ul class="prog__ul>"\n<li><code>safe</code> (boolean) safe mode (defaults to value set in schema (true))</li>\n<li><code>upsert</code> (boolean) whether to create the doc if it doesn&apos;t match (false)</li>\n<li><code>multi</code> (boolean) whether multiple documents should be updated (false)</li>\n<li><code>runValidators</code>: if true, runs update validators on this command. Update validators validate the update operation against the model&apos;s schema.</li>\n<li><code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the defaults specified in the model&apos;s schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on MongoDB&apos;s <code>$setOnInsert</code> operator.</li>\n<li><code>strict</code> (boolean) overrides the <code>strict</code> option for this update</li>\n<li><code>overwrite</code> (boolean) disables update-only mode, allowing you to overwrite the doc (false)</li>\n<li><code>context</code> (string) if set to &apos;query&apos; and <code>runValidators</code> is on, <code>this</code> will refer to the query in custom validator functions that update validation runs. Does nothing if <code>runValidators</code> is false.</li>\n</ul><span class="prog__sub">Note</span><p>Passing an empty object {} as the doc will result in a no-op unless the overwrite option is passed. Without the overwrite option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.</p><span class="prog__sub">Note</span><p>The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the exec() method.</p><pre><code>var q = Model.where({ _id: id });\nq.update({ $set: { name: 'bob' }}).update(); // not executed\n\nq.update({ $set: { name: 'bob' }}).exec(); // executed\n\n// keys that are not $atomic ops become $set.\n// this executes the same command as the previous example.\nq.update({ name: 'bob' }).exec();\n\n// overwriting with empty docs\nvar q = Model.where({ _id: id }).setOptions({ overwrite: true })\nq.update({ }, callback); // executes\n\n// multi update with overwrite to empty doc\nvar q = Model.where({ _id: id });\nq.setOptions({ multi: true, overwrite: true })\nq.update({ });\nq.update(callback); // executed\n\n// multi updates\nModel.where()\n     .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n\n// more multi updates\nModel.where()\n     .setOptions({ multi: true })\n     .update({ $set: { arr: [] }}, callback)\n\n// single update by default\nModel.where({ email: 'address@example.com' })\n     .update({ $inc: { counter: 1 }}, callback)\n</code></pre><p>API summary</p><pre><code>update(criteria, doc, options, cb) // executes\nupdate(criteria, doc, options)\nupdate(criteria, doc, cb) // executes\nupdate(criteria, doc)\nupdate(doc, cb) // executes\nupdate(doc)\nupdate(cb) // executes\nupdate(true) // executes\nupdate()</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-update
Query-updateMany	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#updateMany([criteria], [doc], [options], [callback])</code></pre><p>Declare and/or execute this query as an updateMany() operation. Same asupdate(), except MongoDB will update all documents that matchcriteria (as opposed to just the first one) regardless of the value ofthe multi option.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[criteria]</code> <code>Object</code> </p></li><li><p><code>[doc]</code> <code>Object</code> the update command</p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Note updateMany will not fire update middleware. Use pre('updateMany')and post('updateMany') instead.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-updateMany
Query-updateOne	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#updateOne([criteria], [doc], [options], [callback])</code></pre><p>Declare and/or execute this query as an updateOne() operation. Same asupdate(), except MongoDB will update only the first document thatmatches criteria regardless of the value of the multi option.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[criteria]</code> <code>Object</code> </p></li><li><p><code>[doc]</code> <code>Object</code> the update command</p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><p>Note updateOne will not fire update middleware. Use pre('updateOne')and post('updateOne') instead.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-updateOne
Query-where	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#where([path], [val])</code></pre><p>Specifies a path for use with chaining.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[path]</code> <code>String, Object</code> </p></li><li><p><code>[val]</code> <code>T</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>// instead of writing:\nUser.find({age: {$gte: 21, $lte: 65}}, callback);\n\n// we can instead write:\nUser.where('age').gte(21).lte(65);\n\n// passing query conditions is permitted\nUser.find().where({ name: 'vonderful' })\n\n// chaining\nUser\n.where('age').gte(21).lte(65)\n.where('name', /^vonderful/i)\n.where('friends').slice(10)\n.exec(callback)</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-where
Query-within	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#within()</code></pre><p>Defines a $within or $geoWithin argument for geo-spatial queries.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> this</p></li></ul><span class="prog__sub">Example</span><pre><code>query.where(path).within().box()\nquery.where(path).within().circle()\nquery.where(path).within().geometry()\n\nquery.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\nquery.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\nquery.where('loc').within({ polygon: [[],[],[],[]] });\n\nquery.where('loc').within([], [], []) // polygon\nquery.where('loc').within([], []) // box\nquery.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry</code></pre><p>MUST be used after where().</p><span class="prog__sub">NOTE:</span><p>As of Mongoose 3.7, $geoWithin is always used for queries. To change this behavior, see Query.use$geoWithin.</p><span class="prog__sub">NOTE:</span><p>In Mongoose 3.7, within changed from a getter to a function. If you need the old syntax, use this.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-within
Query-use%2524geoWithin	A			Query						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#use$geoWithin</code></pre><p>Flag to opt out of using $geoWithin.</p><pre><code>mongoose.Query.use$geoWithin = false;</code></pre><p>MongoDB 2.4 deprecated the use of $within, replacing it with $geoWithin. Mongoose uses $geoWithin by default (which is 100% backward compatible with $within). If you are running an older version of MongoDB, set this flag to false so your within() queries continue to work.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-use%2524geoWithin
Decimal128-checkRequired	A			Decimal128						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Decimal128#checkRequired(value, doc)</code></pre><p>Check if the given value satisfies a required validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Any</code> </p></li><li><p><code>doc</code> <code>Document</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_decimal128_Decimal128-checkRequired
=Decimal128	A			Decimal128						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Decimal128(key, options)</code></pre><p>Decimal128 SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_decimal128_Decimal128
Decimal128.schemaName	A			Decimal128						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Decimal128.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_decimal128_Decimal128.schemaName
SchemaArray-checkRequired	A			SchemaArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaArray#checkRequired(value)</code></pre><p>Check if the given value satisfies a required validator. The given valuemust be not null nor undefined, and have a non-zero length.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Any</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_array_SchemaArray-checkRequired
=SchemaArray	A			SchemaArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaArray(key, cast, options)</code></pre><p>Array SchemaType constructor</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li><li><p><code>cast</code> <code>SchemaType</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_array_SchemaArray
SchemaArray.schemaName	A			SchemaArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaArray.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_array_SchemaArray.schemaName
SchemaString-checkRequired	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#checkRequired(value, doc)</code></pre><p>Check if the given value satisfies a required validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Any</code> </p></li><li><p><code>doc</code> <code>Document</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-checkRequired
SchemaString-enum	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#enum([args...])</code></pre><p>Adds an enum validator</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[args...]</code> <code>String, Object</code> enumeration values</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var states = ['opening', 'open', 'closing', 'closed']\nvar s = new Schema({ state: { type: String, enum: states }})\nvar M = db.model('M', s)\nvar m = new M({ state: 'invalid' })\nm.save(function (err) {\n  console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n  m.state = 'open'\n  m.save(callback) // success\n})\n\n// or with custom error messages\nvar enum = {\n  values: ['opening', 'open', 'closing', 'closed'],\n  message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n}\nvar s = new Schema({ state: { type: String, enum: enum })\nvar M = db.model('M', s)\nvar m = new M({ state: 'invalid' })\nm.save(function (err) {\n  console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n  m.state = 'open'\n  m.save(callback) // success\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-enum
SchemaString-lowercase	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#lowercase()</code></pre><p>Adds a lowercase setter.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ email: { type: String, lowercase: true }})\nvar M = db.model('M', s);\nvar m = new M({ email: 'SomeEmail@example.COM' });\nconsole.log(m.email) // someemail@example.com\n</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-lowercase
SchemaString-match	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#match(regExp, [message])</code></pre><p>Sets a regexp validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>regExp</code> <code>RegExp</code> regular expression to test against</p></li><li><p><code>[message]</code> <code>String</code> optional custom error message</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><p>Any value that does not pass regExp.test(val) will fail validation.</p><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ name: { type: String, match: /^a/ }})\nvar M = db.model('M', s)\nvar m = new M({ name: 'I am invalid' })\nm.validate(function (err) {\n  console.error(String(err)) // "ValidationError: Path `name` is invalid (I am invalid)."\n  m.name = 'apples'\n  m.validate(function (err) {\n    assert.ok(err) // success\n  })\n})\n\n// using a custom error message\nvar match = [ /\.html$/, "That file doesn't end in .html ({VALUE})" ];\nvar s = new Schema({ file: { type: String, match: match }})\nvar M = db.model('M', s);\nvar m = new M({ file: 'invalid' });\nm.validate(function (err) {\n  console.log(String(err)) // "ValidationError: That file doesn't end in .html (invalid)"\n})</code></pre><p>Empty strings, undefined, and null values always pass the match validator. If you require these values, enable the required validator also.</p><pre><code>var s = new Schema({ name: { type: String, match: /^a/, required: true }})</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-match
SchemaString-maxlength	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#maxlength(value, [message])</code></pre><p>Sets a maximum length validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Number</code> maximum string length</p></li><li><p><code>[message]</code> <code>String</code> optional custom error message</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var schema = new Schema({ postalCode: { type: String, maxlength: 9 })\nvar Address = db.model('Address', schema)\nvar address = new Address({ postalCode: '9512512345' })\naddress.save(function (err) {\n  console.error(err) // validator error\n  address.postalCode = '95125';\n  address.save() // success\n})\n\n// custom error messages\n// We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\nvar maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\nvar schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\nvar Address = mongoose.model('Address', schema);\nvar address = new Address({ postalCode: '9512512345' });\naddress.validate(function (err) {\n  console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-maxlength
SchemaString-minlength	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#minlength(value, [message])</code></pre><p>Sets a minimum length validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Number</code> minimum string length</p></li><li><p><code>[message]</code> <code>String</code> optional custom error message</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var schema = new Schema({ postalCode: { type: String, minlength: 5 })\nvar Address = db.model('Address', schema)\nvar address = new Address({ postalCode: '9512' })\naddress.save(function (err) {\n  console.error(err) // validator error\n  address.postalCode = '95125';\n  address.save() // success\n})\n\n// custom error messages\n// We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\nvar minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\nvar schema = new Schema({ postalCode: { type: String, minlength: minlength })\nvar Address = mongoose.model('Address', schema);\nvar address = new Address({ postalCode: '9512' });\naddress.validate(function (err) {\n  console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-minlength
=SchemaString	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString(key, options)</code></pre><p>String SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString
SchemaString-trim	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#trim()</code></pre><p>Adds a trim setter.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><p>The string value will be trimmed when set.</p><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ name: { type: String, trim: true }})\nvar M = db.model('M', s)\nvar string = ' some name '\nconsole.log(string.length) // 11\nvar m = new M({ name: string })\nconsole.log(m.name.length) // 9</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-trim
SchemaString-uppercase	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#uppercase()</code></pre><p>Adds an uppercase setter.</p><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ caps: { type: String, uppercase: true }})\nvar M = db.model('M', s);\nvar m = new M({ caps: 'an example' });\nconsole.log(m.caps) // AN EXAMPLE</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-uppercase
SchemaString.schemaName	A			SchemaString						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString.schemaName
=DocumentArray	A			DocumentArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>DocumentArray(key, schema, options)</code></pre><p>SubdocsArray SchemaType constructor</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li><li><p><code>schema</code> <code>Schema</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_documentarray_DocumentArray
DocumentArray.schemaName	A			DocumentArray						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>DocumentArray.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_documentarray_DocumentArray.schemaName
SchemaNumber-checkRequired	A			SchemaNumber						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber#checkRequired(value, doc)</code></pre><p>Check if the given value satisfies a required validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Any</code> </p></li><li><p><code>doc</code> <code>Document</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-checkRequired
SchemaNumber-max	A			SchemaNumber						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber#max(maximum, [message])</code></pre><p>Sets a maximum number validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>maximum</code> <code>Number</code> number</p></li><li><p><code>[message]</code> <code>String</code> optional custom error message</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ n: { type: Number, max: 10 })\nvar M = db.model('M', s)\nvar m = new M({ n: 11 })\nm.save(function (err) {\n  console.error(err) // validator error\n  m.n = 10;\n  m.save() // success\n})\n\n// custom error messages\n// We can also use the special {MAX} token which will be replaced with the invalid value\nvar max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\nvar schema = new Schema({ n: { type: Number, max: max })\nvar M = mongoose.model('Measurement', schema);\nvar s= new M({ n: 4 });\ns.validate(function (err) {\n  console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-max
SchemaNumber-min	A			SchemaNumber						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber#min(value, [message])</code></pre><p>Sets a minimum number validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Number</code> minimum number</p></li><li><p><code>[message]</code> <code>String</code> optional custom error message</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ n: { type: Number, min: 10 })\nvar M = db.model('M', s)\nvar m = new M({ n: 9 })\nm.save(function (err) {\n  console.error(err) // validator error\n  m.n = 10;\n  m.save() // success\n})\n\n// custom error messages\n// We can also use the special {MIN} token which will be replaced with the invalid value\nvar min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\nvar schema = new Schema({ n: { type: Number, min: min })\nvar M = mongoose.model('Measurement', schema);\nvar s= new M({ n: 4 });\ns.validate(function (err) {\n  console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-min
=SchemaNumber	A			SchemaNumber						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber(key, options)</code></pre><p>Number SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber
SchemaNumber.schemaName	A			SchemaNumber						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber.schemaName
SchemaDate-checkRequired	A			SchemaDate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate#checkRequired(value, doc)</code></pre><p>Check if the given value satisfies a required validator. To satisfya required validator, the given value must be an instance of Date.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Any</code> </p></li><li><p><code>doc</code> <code>Document</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate-checkRequired
SchemaDate-expires	A			SchemaDate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate#expires(when)</code></pre><p>Declares a TTL index (rounded to the nearest second) for Date types only.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>when</code> <code>Number, String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><p>This sets the expireAfterSeconds index option available in MongoDB >= 2.1.2.This index type is only compatible with Date types.</p><span class="prog__sub">Example:</span><pre><code>// expire in 24 hours\nnew Schema({ createdAt: { type: Date, expires: 60*60*24 }});</code></pre><p>expires utilizes the ms module from guille allowing us to use a friendlier syntax:</p><span class="prog__sub">Example:</span><pre><code>// expire in 24 hours\nnew Schema({ createdAt: { type: Date, expires: '24h' }});\n\n// expire in 1.5 hours\nnew Schema({ createdAt: { type: Date, expires: '1.5h' }});\n\n// expire in 7 days\nvar schema = new Schema({ createdAt: Date });\nschema.path('createdAt').expires('7d');</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate-expires
SchemaDate-max	A			SchemaDate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate#max(maximum, [message])</code></pre><p>Sets a maximum date validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>maximum</code> <code>Date</code> date</p></li><li><p><code>[message]</code> <code>String</code> optional custom error message</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ d: { type: Date, max: Date('2014-01-01') })\nvar M = db.model('M', s)\nvar m = new M({ d: Date('2014-12-08') })\nm.save(function (err) {\n  console.error(err) // validator error\n  m.d = Date('2013-12-31');\n  m.save() // success\n})\n\n// custom error messages\n// We can also use the special {MAX} token which will be replaced with the invalid value\nvar max = [Date('2014-01-01'), 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\nvar schema = new Schema({ d: { type: Date, max: max })\nvar M = mongoose.model('M', schema);\nvar s= new M({ d: Date('2014-12-08') });\ns.validate(function (err) {\n  console.log(String(err)) // ValidationError: The value of path `d` (2014-12-08) exceeds the limit (2014-01-01).\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate-max
SchemaDate-min	A			SchemaDate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate#min(value, [message])</code></pre><p>Sets a minimum date validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Date</code> minimum date</p></li><li><p><code>[message]</code> <code>String</code> optional custom error message</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ d: { type: Date, min: Date('1970-01-01') })\nvar M = db.model('M', s)\nvar m = new M({ d: Date('1969-12-31') })\nm.save(function (err) {\n  console.error(err) // validator error\n  m.d = Date('2014-12-08');\n  m.save() // success\n})\n\n// custom error messages\n// We can also use the special {MIN} token which will be replaced with the invalid value\nvar min = [Date('1970-01-01'), 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\nvar schema = new Schema({ d: { type: Date, min: min })\nvar M = mongoose.model('M', schema);\nvar s= new M({ d: Date('1969-12-31') });\ns.validate(function (err) {\n  console.log(String(err)) // ValidationError: The value of path `d` (1969-12-31) is before the limit (1970-01-01).\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate-min
=SchemaDate	A			SchemaDate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate(key, options)</code></pre><p>Date SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate
SchemaDate.schemaName	A			SchemaDate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate.schemaName
SchemaBuffer-checkRequired	A			SchemaBuffer						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBuffer#checkRequired(value, doc)</code></pre><p>Check if the given value satisfies a required validator. To satisfy arequired validator, a buffer must not be null or undefined and havenon-zero length.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Any</code> </p></li><li><p><code>doc</code> <code>Document</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_buffer_SchemaBuffer-checkRequired
=SchemaBuffer	A			SchemaBuffer						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBuffer(key, options)</code></pre><p>Buffer SchemaType constructor</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_buffer_SchemaBuffer
SchemaBuffer.schemaName	A			SchemaBuffer						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBuffer.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_buffer_SchemaBuffer.schemaName
SchemaBoolean-checkRequired	A			SchemaBoolean						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBoolean#checkRequired(value)</code></pre><p>Check if the given value satisfies a required validator. For a booleanto satisfy a required validator, it must be strictly equal to true or tofalse.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Any</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_boolean_SchemaBoolean-checkRequired
=SchemaBoolean	A			SchemaBoolean						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBoolean(path, options)</code></pre><p>Boolean SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_boolean_SchemaBoolean
SchemaBoolean.schemaName	A			SchemaBoolean						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBoolean.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_boolean_SchemaBoolean.schemaName
ObjectId-auto	A			ObjectId						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId#auto(turnOn)</code></pre><p>Adds an auto-generated ObjectId default if turnOn is true.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>turnOn</code> <code>Boolean</code> auto generated ObjectId defaults</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_objectid_ObjectId-auto
ObjectId-checkRequired	A			ObjectId						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId#checkRequired(value, doc)</code></pre><p>Check if the given value satisfies a required validator.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Any</code> </p></li><li><p><code>doc</code> <code>Document</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Boolean</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_objectid_ObjectId-checkRequired
=ObjectId	A			ObjectId						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId(key, options)</code></pre><p>ObjectId SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>key</code> <code>String</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_objectid_ObjectId
ObjectId.schemaName	A			ObjectId						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_objectid_ObjectId.schemaName
=Mixed	A			Mixed						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mixed(path, options)</code></pre><p>Mixed SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_mixed_Mixed
Mixed.schemaName	A			Mixed						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mixed.schemaName</code></pre><p>This schema type's name, to defend against minifiers that manglefunction names.</p></section>	http://mongoosejs.com/docs/api.html#schema_mixed_Mixed.schemaName
=Embedded	A			Embedded						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Embedded(schema, key, options)</code></pre><p>Sub-schema schematype constructor</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>schema</code> <code>Schema</code> </p></li><li><p><code>key</code> <code>String</code> </p></li><li><p><code>options</code> <code>Object</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_embedded_Embedded
Aggregate-addCursorFlag	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#addCursorFlag(flag, value)</code></pre><p>Adds a cursor flag</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>flag</code> <code>String</code> </p></li><li><p><code>value</code> <code>Boolean</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>Model.aggregate(..).addCursorFlag('noCursorTimeout', true).exec();</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-addCursorFlag
=Aggregate	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate([ops])</code></pre><p>Aggregate constructor used for building aggregation pipelines.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[ops]</code> <code>Object, Array</code> aggregation operator(s) or operator array</p></li></ul><span class="prog__sub">Example:</span><pre><code>new Aggregate();\nnew Aggregate({ $project: { a: 1, b: 1 } });\nnew Aggregate({ $project: { a: 1, b: 1 } }, { $skip: 5 });\nnew Aggregate([{ $project: { a: 1, b: 1 } }, { $skip: 5 }]);</code></pre><p>Returned when calling Model.aggregate().</p><span class="prog__sub">Example:</span><pre><code>Model\n.aggregate({ $match: { age: { $gte: 21 }}})\n.unwind('tags')\n.exec(callback)</code></pre><span class="prog__sub">Note:</span><ul class="prog__ul>"\n<li>The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).</li>\n<li>Requires MongoDB &gt;= 2.1</li>\n<li>Mongoose does <strong>not</strong> cast pipeline stages. <code>new Aggregate({ $match: { _id: &apos;00000000000000000000000a&apos; } });</code> will not work unless <code>_id</code> is a string in the database. Use <code>new Aggregate({ $match: { _id: mongoose.Types.ObjectId(&apos;00000000000000000000000a&apos;) } });</code> instead.</li>\n</ul></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate
Aggregate-allowDiskUse	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#allowDiskUse(value, [tags])</code></pre><p>Sets the allowDiskUse option for the aggregation query (ignored for < 2.6.0)</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>value</code> <code>Boolean</code> Should tell server it can use hard drive to store data during aggregation.</p></li><li><p><code>[tags]</code> <code>Array</code> optional tags for this query</p></li></ul><span class="prog__sub">Example:</span><pre><code>Model.aggregate(..).allowDiskUse(true).exec(callback)</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-allowDiskUse
Aggregate-append	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#append(ops)</code></pre><p>Appends new operators to this aggregate pipeline</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>ops</code> <code>Object</code> operator(s) to append</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><span class="prog__sub">Examples:</span><pre><code>aggregate.append({ $project: { field: 1 }}, { $limit: 2 });\n\n// or pass an array\nvar pipeline = [{ $match: { daw: 'Logic Audio X' }} ];\naggregate.append(pipeline);</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-append
Aggregate-collation	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#collation(collation, value)</code></pre><p>Adds a collation</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>collation</code> <code>Object</code> options</p></li><li><p><code>value</code> <code>Boolean</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>Model.aggregate(..).collation({ locale: 'en_US', strength: 1 }).exec();</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-collation
Aggregate-cursor	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#cursor(options)</code></pre><p>Sets the cursor option option for the aggregation query (ignored for < 2.6.0).Note the different syntax below: .exec() returns a cursor object, and no callbackis necessary.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>options</code> <code>Object</code> set the cursor batch size</p></li></ul><span class="prog__sub">Example:</span><pre><code>var cursor = Model.aggregate(..).cursor({ batchSize: 1000 }).exec();\ncursor.each(function(error, doc) {\n  // use doc\n});</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-cursor
Aggregate-exec	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#exec([callback])</code></pre><p>Executes the aggregate pipeline on the currently bound Model.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>aggregate.exec(callback);\n\n// Because a promise is returned, the `callback` is optional.\nvar promise = aggregate.exec();\npromise.then(..);</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-exec
Aggregate-explain	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#explain(callback)</code></pre><p>Execute the aggregation with explain</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>callback</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>Model.aggregate(..).explain(callback)</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-explain
Aggregate-facet	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#facet(facet)</code></pre><p>Combines multiple aggregation pipelines.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>facet</code> <code>Object</code> options</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>Model.aggregate(...)\n .facet({\n   books: [{ groupBy: '$author' }],\n   price: [{ $bucketAuto: { groupBy: '$price', buckets: 2 } }]\n })\n .exec();\n\n// Output: { books: [...], price: [{...}, {...}] }</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-facet
Aggregate-graphLookup	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#graphLookup(options)</code></pre><p>Appends new custom $graphLookup operator(s) to this aggregate pipeline, performing a recursive search on a collection.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>options</code> <code>Object</code> to $graphLookup as described in the above link</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><p>Note that graphLookup can only consume at most 100MB of memory, and does not allow disk use even if { allowDiskUse: true } is specified.</p><span class="prog__sub">Examples:</span><pre><code>// Suppose we have a collection of courses, where a document might look like `{ _id: 0, name: 'Calculus', prerequisite: 'Trigonometry'}` and `{ _id: 0, name: 'Trigonometry', prerequisite: 'Algebra' }`\n aggregate.graphLookup({ from: 'courses', startWith: '$prerequisite', connectFromField: 'prerequisite', connectToField: 'name', as: 'prerequisites', maxDepth: 3 }) // this will recursively search the 'courses' collection up to 3 prerequisites</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-graphLookup
Aggregate-group	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#group(arg)</code></pre><p>Appends a new custom $group operator to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>arg</code> <code>Object</code> $group operator contents</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><span class="prog__sub">Examples:</span><pre><code>aggregate.group({ _id: "$department" });</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-group
Aggregate-limit	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#limit(num)</code></pre><p>Appends a new $limit operator to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>num</code> <code>Number</code> maximum number of records to pass to the next stage</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><span class="prog__sub">Examples:</span><pre><code>aggregate.limit(10);</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-limit
Aggregate-lookup	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#lookup(options)</code></pre><p>Appends new custom $lookup operator(s) to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>options</code> <code>Object</code> to $lookup as described in the above link</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><span class="prog__sub">Examples:</span><pre><code>aggregate.lookup({ from: 'users', localField: 'userId', foreignField: '_id', as: 'users' });</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-lookup
Aggregate-match	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#match(arg)</code></pre><p>Appends a new custom $match operator to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>arg</code> <code>Object</code> $match operator contents</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><span class="prog__sub">Examples:</span><pre><code>aggregate.match({ department: { $in: [ "sales", "engineering" } } });</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-match
Aggregate-model	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#model(model)</code></pre><p>Binds this aggregate to a model.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>model</code> <code>Model</code> the model to which the aggregate is to be bound</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-model
Aggregate-near	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#near(parameters)</code></pre><p>Appends a new $geoNear operator to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>parameters</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><span class="prog__sub">NOTE:</span><p>MUST be used as the first operator in the pipeline.</p><span class="prog__sub">Examples:</span><pre><code>aggregate.near({\n  near: [40.724, -73.997],\n  distanceField: "dist.calculated", // required\n  maxDistance: 0.008,\n  query: { type: "public" },\n  includeLocs: "dist.location",\n  uniqueDocs: true,\n  num: 5\n});</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-near
Aggregate-project	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#project(arg)</code></pre><p>Appends a new $project operator to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>arg</code> <code>Object, String</code> field specification</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><p>Mongoose query selection syntax is also supported.</p><span class="prog__sub">Examples:</span><pre><code>// include a, include b, exclude _id\naggregate.project("a b -_id");\n\n// or you may use object notation, useful when\n// you have keys already prefixed with a "-"\naggregate.project({a: 1, b: 1, _id: 0});\n\n// reshaping documents\naggregate.project({\n    newField: '$b.nested'\n  , plusTen: { $add: ['$val', 10]}\n  , sub: {\n       name: '$a'\n    }\n})\n\n// etc\naggregate.project({ salary_k: { $divide: [ "$salary", 1000 ] } });</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-project
Aggregate-read	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#read(pref, [tags])</code></pre><p>Sets the readPreference option for the aggregation query.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>pref</code> <code>String</code> one of the listed preference options or their aliases</p></li><li><p><code>[tags]</code> <code>Array</code> optional tags for this query</p></li></ul><span class="prog__sub">Example:</span><pre><code>Model.aggregate(..).read('primaryPreferred').exec(callback)</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-read
Aggregate-sample	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#sample(size)</code></pre><p>Appepnds new custom $sample operator(s) to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>size</code> <code>Number</code> number of random documents to pick</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><span class="prog__sub">Examples:</span><pre><code>aggregate.sample(3); // Add a pipeline that picks 3 random documents</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-sample
Aggregate-skip	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#skip(num)</code></pre><p>Appends a new $skip operator to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>num</code> <code>Number</code> number of records to skip before next stage</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><span class="prog__sub">Examples:</span><pre><code>aggregate.skip(10);</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-skip
Aggregate-sort	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#sort(arg)</code></pre><p>Appends a new $sort operator to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>arg</code> <code>Object, String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> this</p></li></ul><p>If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1.</p><p>If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with - which will be treated as descending.</p><span class="prog__sub">Examples:</span><pre><code>// these are equivalent\naggregate.sort({ field: 'asc', test: -1 });\naggregate.sort('field -test');</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-sort
Aggregate-then	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#then([resolve], [reject])</code></pre><p>Provides promise for aggregate.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[resolve]</code> <code>Function</code> successCallback</p></li><li><p><code>[reject]</code> <code>Function</code> errorCallback</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>Model.aggregate(..).then(successCallback, errorCallback);</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-then
Aggregate-unwind	A			Aggregate						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#unwind(fields)</code></pre><p>Appends new custom $unwind operator(s) to this aggregate pipeline.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fields</code> <code>String</code> the field(s) to unwind</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate</code> </p></li></ul><p>Note that the $unwind operator requires the path name to start with '$'.Mongoose will prepend '$' if the specified field doesn't start '$'.</p><span class="prog__sub">Examples:</span><pre><code>aggregate.unwind("tags");\naggregate.unwind("a", "b", "c");</code></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-unwind
SchemaType-default	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#default(val)</code></pre><p>Sets a default value for this SchemaType.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Function, T</code> the default value</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>defaultValue</code> </p></li></ul><span class="prog__sub">Example:</span><pre><code>var schema = new Schema({ n: { type: Number, default: 10 })\nvar M = db.model('M', schema)\nvar m = new M;\nconsole.log(m.n) // 10</code></pre><p>Defaults can be either functions which return the value to use as the default or the literal value itself. Either way, the value will be cast based on its schema type before being set during document creation.</p><span class="prog__sub">Example:</span><pre><code>// values are cast:\nvar schema = new Schema({ aNumber: { type: Number, default: 4.815162342 }})\nvar M = db.model('M', schema)\nvar m = new M;\nconsole.log(m.aNumber) // 4.815162342\n\n// default unique objects for Mixed types:\nvar schema = new Schema({ mixed: Schema.Types.Mixed });\nschema.path('mixed').default(function () {\n  return {};\n});\n\n// if we don't use a function to return object literals for Mixed defaults,\n// each document will receive a reference to the same object literal creating\n// a "shared" object instance:\nvar schema = new Schema({ mixed: Schema.Types.Mixed });\nschema.path('mixed').default({});\nvar M = db.model('M', schema);\nvar m1 = new M;\nm1.mixed.added = 1;\nconsole.log(m1.mixed); // { added: 1 }\nvar m2 = new M;\nconsole.log(m2.mixed); // { added: 1 }</code></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-default
SchemaType-get	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#get(fn)</code></pre><p>Adds a getter to this schematype.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>function dob (val) {\n  if (!val) return val;\n  return (val.getMonth() + 1) + "/" + val.getDate() + "/" + val.getFullYear();\n}\n\n// defining within the schema\nvar s = new Schema({ born: { type: Date, get: dob })\n\n// or by retreiving its SchemaType\nvar s = new Schema({ born: Date })\ns.path('born').get(dob)</code></pre><p>Getters allow you to transform the representation of the data as it travels from the raw mongodb document to the value that you see.</p><p>Suppose you are storing credit card numbers and you want to hide everything except the last 4 digits to the mongoose user. You can do so by defining a getter in the following way:</p><pre><code>function obfuscate (cc) {\n  return '****-****-****-' + cc.slice(cc.length-4, cc.length);\n}\n\nvar AccountSchema = new Schema({\n  creditCardNumber: { type: String, get: obfuscate }\n});\n\nvar Account = db.model('Account', AccountSchema);\n\nAccount.findById(id, function (err, found) {\n  console.log(found.creditCardNumber); // '****-****-****-1234'\n});</code></pre><p>Getters are also passed a second argument, the schematype on which the getter was defined. This allows for tailored behavior based on options passed in the schema.</p><pre><code>function inspector (val, schematype) {\n  if (schematype.options.required) {\n    return schematype.path + ' is required';\n  } else {\n    return schematype.path + ' is not';\n  }\n}\n\nvar VirusSchema = new Schema({\n  name: { type: String, required: true, get: inspector },\n  taxonomy: { type: String, get: inspector }\n})\n\nvar Virus = db.model('Virus', VirusSchema);\n\nVirus.findById(id, function (err, virus) {\n  console.log(virus.name);     // name is required\n  console.log(virus.taxonomy); // taxonomy is not\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-get
SchemaType-index	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#index(options)</code></pre><p>Declares the index options for this schematype.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>options</code> <code>Object, Boolean, String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ name: { type: String, index: true })\nvar s = new Schema({ loc: { type: [Number], index: 'hashed' })\nvar s = new Schema({ loc: { type: [Number], index: '2d', sparse: true })\nvar s = new Schema({ loc: { type: [Number], index: { type: '2dsphere', sparse: true }})\nvar s = new Schema({ date: { type: Date, index: { unique: true, expires: '1d' }})\nSchema.path('my.path').index(true);\nSchema.path('my.date').index({ expires: 60 });\nSchema.path('my.path').index({ unique: true, sparse: true });</code></pre><span class="prog__sub">NOTE:</span><p>Indexes are created in the background by default. Specify background: false to override.</p><p>Direction doesn't matter for single key indexes</p></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-index
SchemaType-required	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#required(required, [message])</code></pre><p>Adds a required validator to this SchemaType. The validator gets addedto the front of this SchemaType's validators array using unshift().</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>required</code> <code>Boolean</code> enable/disable the validator</p></li><li><p><code>[message]</code> <code>String</code> optional custom error message</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ born: { type: Date, required: true })\n\n// or with custom error message\n\nvar s = new Schema({ born: { type: Date, required: '{PATH} is required!' })\n\n// or through the path API\n\nSchema.path('name').required(true);\n\n// with custom error messaging\n\nSchema.path('name').required(true, 'grrr :( ');\n\n// or make a path conditionally required based on a function\nvar isOver18 = function() { return this.age &gt;= 18; };\nSchema.path('voterRegistrationId').required(isOver18);</code></pre><p>The required validator uses the SchemaType's checkRequired function todetermine whether a given value satisfies the required validator. By default,a value satisfies the required validator if val != null (that is, ifthe value is not null nor undefined). However, most built-in mongoose schematypes override the default checkRequired function:</p></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-required
=SchemaType	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType(path, [options], [instance])</code></pre><p>SchemaType constructor</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[instance]</code> <code>String</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType
SchemaType-select	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#select(val)</code></pre><p>Sets default select() behavior for this path.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>val</code> <code>Boolean</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><p>Set to true if this path should always be included in the results, false if it should be excluded by default. This setting can be overridden at the query level.</p><span class="prog__sub">Example:</span><pre><code>T = db.model('T', new Schema({ x: { type: String, select: true }}));\nT.find(..); // field x will always be selected ..\n// .. unless overridden;\nT.find().select('-x').exec(callback);</code></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-select
SchemaType-set	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#set(fn)</code></pre><p>Adds a setter to this schematype.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>function capitalize (val) {\n  if (typeof val !== 'string') val = '';\n  return val.charAt(0).toUpperCase() + val.substring(1);\n}\n\n// defining within the schema\nvar s = new Schema({ name: { type: String, set: capitalize }})\n\n// or by retreiving its SchemaType\nvar s = new Schema({ name: String })\ns.path('name').set(capitalize)</code></pre><p>Setters allow you to transform the data before it gets to the raw mongodb document and is set as a value on an actual key.</p><p>Suppose you are implementing user registration for a website. Users provide an email and password, which gets saved to mongodb. The email is a string that you will want to normalize to lower case, in order to avoid one email having more than one account -- e.g., otherwise, avenue@q.com can be registered for 2 accounts via avenue@q.com and AvEnUe@Q.CoM.</p><p>You can set up email lower case normalization easily via a Mongoose setter.</p><pre><code>function toLower (v) {\n  return v.toLowerCase();\n}\n\nvar UserSchema = new Schema({\n  email: { type: String, set: toLower }\n})\n\nvar User = db.model('User', UserSchema)\n\nvar user = new User({email: 'AVENUE@Q.COM'})\nconsole.log(user.email); // 'avenue@q.com'\n\n// or\nvar user = new User\nuser.email = 'Avenue@Q.com'\nconsole.log(user.email) // 'avenue@q.com'\n</code></pre><p>As you can see above, setters allow you to transform the data before it gets to the raw mongodb document and is set as a value on an actual key.</p><p>NOTE: we could have also just used the built-in lowercase: true SchemaType option instead of defining our own function.</p><pre><code>new Schema({ email: { type: String, lowercase: true }})</code></pre><p>Setters are also passed a second argument, the schematype on which the setter was defined. This allows for tailored behavior based on options passed in the schema.</p><pre><code>function inspector (val, schematype) {\n  if (schematype.options.required) {\n    return schematype.path + ' is required';\n  } else {\n    return val;\n  }\n}\n\nvar VirusSchema = new Schema({\n  name: { type: String, required: true, set: inspector },\n  taxonomy: { type: String, set: inspector }\n})\n\nvar Virus = db.model('Virus', VirusSchema);\nvar v = new Virus({ name: 'Parvoviridae', taxonomy: 'Parvovirinae' });\n\nconsole.log(v.name);     // name is required\nconsole.log(v.taxonomy); // Parvovirinae</code></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-set
SchemaType-sparse	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#sparse(bool)</code></pre><p>Declares a sparse index.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>bool</code> <code>Boolean</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ name: { type: String, sparse: true })\nSchema.path('name').index({ sparse: true });</code></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-sparse
SchemaType-text	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#text(bool)</code></pre><p>Declares a full text index.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>bool</code> <code>Boolean</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><pre><code>var s = new Schema({name : {type: String, text : true })\n Schema.path('name').index({text : true});</code></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-text
SchemaType-unique	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#unique(bool)</code></pre><p>Declares an unique index.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>bool</code> <code>Boolean</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><span class="prog__sub">Example:</span><pre><code>var s = new Schema({ name: { type: String, unique: true }});\nSchema.path('name').index({ unique: true });</code></pre><p>NOTE: violating the constraint returns an E11000 error from MongoDB when saving, not a Mongoose validation error.</p></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-unique
SchemaType-validate	A			SchemaType						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#validate(obj, [errorMsg], [type])</code></pre><p>Adds validator(s) for this document path.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>obj</code> <code>RegExp, Function, Object</code> validator</p></li><li><p><code>[errorMsg]</code> <code>String</code> optional error message</p></li><li><p><code>[type]</code> <code>String</code> optional validator type</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>SchemaType</code> this</p></li></ul><p>Validators always receive the value to validate as their first argument and must return Boolean. Returning false means validation failed.</p><p>The error message argument is optional. If not passed, the default generic error message template will be used.</p><span class="prog__sub">Examples:</span><pre><code>// make sure every value is equal to "something"\nfunction validator (val) {\n  return val == 'something';\n}\nnew Schema({ name: { type: String, validate: validator }});\n\n// with a custom error message\n\nvar custom = [validator, 'Uh oh, {PATH} does not equal "something".']\nnew Schema({ name: { type: String, validate: custom }});\n\n// adding many validators at a time\n\nvar many = [\n    { validator: validator, msg: 'uh oh' }\n  , { validator: anotherValidator, msg: 'failed' }\n]\nnew Schema({ name: { type: String, validate: many }});\n\n// or utilizing SchemaType methods directly:\n\nvar schema = new Schema({ name: 'string' });\nschema.path('name').validate(validator, 'validation of `{PATH}` failed with value `{VALUE}`');</code></pre><span class="prog__sub">Error message templates:</span><p>From the examples above, you may have noticed that error messages support basic templating. There are a few other template keywords besides {PATH} and {VALUE} too. To find out more, details are available here</p><span class="prog__sub">Asynchronous validation:</span><p>Passing a validator function that receives two arguments tells mongoose that the validator is an asynchronous validator. The first argument passed to the validator function is the value being validated. The second argument is a callback function that must called when you finish validating the value and passed either true or false to communicate either success or failure respectively.</p><pre><code>schema.path('name').validate(function (value, respond) {\n  doStuff(value, function () {\n    ...\n    respond(false); // validation failed\n  })\n}, '{PATH} failed validation.');\n\n// or with dynamic message\n\nschema.path('name').validate(function (value, respond) {\n  doStuff(value, function () {\n    ...\n    respond(false, 'this message gets to the validation error');\n  });\n}, 'this message does not matter');</code></pre><p>You might use asynchronous validators to retreive other documents from the database to validate against or to meet other I/O bound validation needs.</p><p>Validation occurs pre('save') or whenever you manually execute document#validate.</p><p>If validation fails during pre('save') and no callback was passed to receive the error, an error event will be emitted on your Models associated db connection, passing the validation error object along.</p><pre><code>var conn = mongoose.createConnection(..);\nconn.on('error', handleError);\n\nvar Product = conn.model('Product', yourSchema);\nvar dvd = new Product(..);\ndvd.save(); // emits error on the `conn` above</code></pre><p>If you desire handling these errors at the Model level, attach an error listener to your Model and the event will instead be emitted there.</p><pre><code>// registering an error listener on the Model lets us handle errors more locally\nProduct.on('error', handleError);</code></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-validate
Promise-addBack	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#addBack(listener)</code></pre><p>Adds a single function as a listener to both err and complete.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>listener</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> this</p></li></ul><p>It will be executed with traditional node.js argument position when the promise is resolved.</p><pre><code>promise.addBack(function (err, args...) {\n  if (err) return handleError(err);\n  console.log('success');\n})</code></pre><p>Alias of mpromise#onResolve.</p><p>Deprecated. Use onResolve instead.</p></section>	http://mongoosejs.com/docs/api.html#promise_Promise-addBack
Promise-addCallback	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#addCallback(listener)</code></pre><p>Adds a listener to the complete (success) event.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>listener</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> this</p></li></ul><p>Alias of mpromise#onFulfill.</p><p>Deprecated. Use onFulfill instead.</p></section>	http://mongoosejs.com/docs/api.html#promise_Promise-addCallback
Promise-addErrback	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#addErrback(listener)</code></pre><p>Adds a listener to the err (rejected) event.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>listener</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> this</p></li></ul><p>Alias of mpromise#onReject.</p><p>Deprecated. Use onReject instead.</p></section>	http://mongoosejs.com/docs/api.html#promise_Promise-addErrback
Promise-catch	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#catch(onReject)</code></pre><p>ES6-style .catch() shorthand</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>onReject</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#promise_Promise-catch
Promise-end	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#end()</code></pre><p>Signifies that this promise was the last in a chain of then()s: if a handler passed to the call to then which produced this promise throws, the exception will go uncaught.</p><span class="prog__sub">Example:</span><pre><code>var p = new Promise;\np.then(function(){ throw new Error('shucks') });\nsetTimeout(function () {\n  p.fulfill();\n  // error was caught and swallowed by the promise returned from\n  // p.then(). we either have to always register handlers on\n  // the returned promises or we can do the following...\n}, 10);\n\n// this time we use .end() which prevents catching thrown errors\nvar p = new Promise;\nvar p2 = p.then(function(){ throw new Error('shucks') }).end(); // &lt;--\nsetTimeout(function () {\n  p.fulfill(); // throws "shucks"\n}, 10);</code></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-end
Promise-error	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#error(err)</code></pre><p>Rejects this promise with err.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>err</code> <code>Error, String</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> this</p></li></ul><p>If the promise has already been fulfilled or rejected, not action is taken.</p><p>Differs from #reject by first casting err to an Error if it is not instanceof Error.</p></section>	http://mongoosejs.com/docs/api.html#promise_Promise-error
Promise-on	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#on(event, listener)</code></pre><p>Adds listener to the event.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>event</code> <code>String</code> </p></li><li><p><code>listener</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> this</p></li></ul><p>If event is either the success or failure event and the event has already been emitted, thelistener is called immediately and passed the results of the original emitted event.</p></section>	http://mongoosejs.com/docs/api.html#promise_Promise-on
=Promise	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise(fn)</code></pre><p>Promise constructor.</p><span class="prog__sub">Events:</span><ul><li><p><code>err</code>: Emits when the promise is rejected</p></li><li><p><code>complete</code>: Emits when the promise is fulfilled</p></li></ul><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> a function which will be called when the promise is resolved that accepts fn(err, ...){} as signature</p></li></ul><p>Promises are returned from executed queries. Example:</p><pre><code>var query = Candy.find({ bar: true });\nvar promise = query.exec();</code></pre><p>DEPRECATED. Mongoose 5.0 will use native promises by default (or bluebird,if native promises are not present) but stillsupport plugging in your own ES6-compatible promises library. Mongoose 5.0will not support mpromise.</p></section>	http://mongoosejs.com/docs/api.html#promise_Promise
Promise-reject	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#reject(reason)</code></pre><p>Rejects this promise with reason.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>reason</code> <code>Object, String, Error</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> this</p></li></ul><p>If the promise has already been fulfilled or rejected, not action is taken.</p></section>	http://mongoosejs.com/docs/api.html#promise_Promise-reject
Promise-resolve	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#resolve([err], [val])</code></pre><p>Resolves this promise to a rejected state if err is passed or a fulfilled state if no err is passed.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[err]</code> <code>Error</code> error or null</p></li><li><p><code>[val]</code> <code>Object</code> value to fulfill the promise with</p></li></ul><p>If the promise has already been fulfilled or rejected, not action is taken.</p><p>err will be cast to an Error if not already instanceof Error.</p><p>NOTE: overrides mpromise#resolve to provide error casting.</p></section>	http://mongoosejs.com/docs/api.html#promise_Promise-resolve
Promise-then	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#then(onFulFill, onReject)</code></pre><p>Creates a new promise and returns it. If onFulfill or onReject are passed, they are added as SUCCESS/ERROR callbacks to this promise after the nextTick.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>onFulFill</code> <code>Function</code> </p></li><li><p><code>onReject</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> newPromise</p></li></ul><p>Conforms to promises/A+ specification.</p><span class="prog__sub">Example:</span><pre><code>var promise = Meetups.find({ tags: 'javascript' }).select('_id').exec();\npromise.then(function (meetups) {\n  var ids = meetups.map(function (m) {\n    return m._id;\n  });\n  return People.find({ meetups: { $in: ids } }).exec();\n}).then(function (people) {\n  if (people.length &lt; 10000) {\n    throw new Error('Too few people!!!');\n  } else {\n    throw new Error('Still need more people!!!');\n  }\n}).then(null, function (err) {\n  assert.ok(err instanceof Error);\n});</code></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-then
Promise.complete	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise.complete(args)</code></pre><p>Fulfills this promise with passed arguments.</p><p>Alias of mpromise#fulfill.</p><p>Deprecated. Use fulfill instead.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>args</code> <code>T</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#promise_Promise.complete
Promise.ES6	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise.ES6(resolver)</code></pre><p>ES6-style promise constructor wrapper around mpromise.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>resolver</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> new promise</p></li></ul></section>	http://mongoosejs.com/docs/api.html#promise_Promise.ES6
Promise.fulfill	A			Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise.fulfill(args)</code></pre><p>Fulfills this promise with passed arguments.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>args</code> <code>T</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#promise_Promise.fulfill
=ES6Promise	A			ES6Promise						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ES6Promise(fn)</code></pre><p>ES6 Promise wrapper constructor.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>fn</code> <code>Function</code> a function which will be called when the promise is resolved that accepts fn(err, ...){} as signature</p></li></ul><p>Promises are returned from executed queries. Example:</p><pre><code>var query = Candy.find({ bar: true });\nvar promise = query.exec();</code></pre><p>DEPRECATED. Mongoose 5.0 will use native promises by default (or bluebird,if native promises are not present) but stillsupport plugging in your own ES6-compatible promises library. Mongoose 5.0will not support mpromise.</p></section>	http://mongoosejs.com/docs/api.html#ES6Promise_ES6Promise
Model-$where	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#$where(argument)</code></pre><p>Creates a Query and specifies a $where condition.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>argument</code> <code>String, Function</code> is a javascript string or anonymous function</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul><p>Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via find({ $where: javascript }), or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.</p><pre><code>Blog.$where('this.username.indexOf("val") !== -1').exec(function (err, docs) {});</code></pre></section>	http://mongoosejs.com/docs/api.html#model_Model-%24where
Model-increment	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#increment()</code></pre><p>Signal that we desire an increment of this documents version.</p><span class="prog__sub">Example:</span><pre><code>Model.findById(id, function (err, doc) {\n  doc.increment();\n  doc.save(function (err) { .. })\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#model_Model-increment
Model-model	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#model(name)</code></pre><p>Returns another Model instance.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String</code> model name</p></li></ul><span class="prog__sub">Example:</span><pre><code>var doc = new Tank;\ndoc.model('User').findById(id, callback);</code></pre></section>	http://mongoosejs.com/docs/api.html#model_Model-model
=Model	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model(doc)</code></pre><p>Model constructor</p><span class="prog__sub">Events:</span><ul><li><p><code>error</code>: If listening to this event, it is emitted when a document was saved without passing a callback and an <code>error</code> occurred. If not listening, the event bubbles to the connection used to create this Model.</p></li><li><p><code>index</code>: Emitted after <code>Model#ensureIndexes</code> completes. If an error occurred it is passed with the event.</p></li><li><p><code>index-single-start</code>: Emitted when an individual index starts within <code>Model#ensureIndexes</code>. The fields and options being used to build the index are also passed with the event.</p></li><li><p><code>index-single-done</code>: Emitted when an individual index finishes within <code>Model#ensureIndexes</code>. If an error occurred it is passed with the event. The fields, options, and index name are also passed.</p></li></ul><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>doc</code> <code>Object</code> values with which to create the document</p></li></ul><p>Provides the interface to MongoDB collections as well as creates document instances.</p></section>	http://mongoosejs.com/docs/api.html#model_Model
Model-remove	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#remove([fn])</code></pre><p>Removes this document from the db.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[fn]</code> <code>function(err, product)</code> optional callback</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> Promise</p></li></ul><span class="prog__sub">Example:</span><pre><code>product.remove(function (err, product) {\n  if (err) return handleError(err);\n  Product.findById(product._id, function (err, product) {\n    console.log(product) // null\n  })\n})</code></pre><p>As an extra measure of flow control, remove will return a Promise (bound to fn if passed) so it could be chained, or hooked to recive errors</p><span class="prog__sub">Example:</span><pre><code>product.remove().then(function (product) {\n   ...\n}).onRejected(function (err) {\n   assert.ok(err)\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#model_Model-remove
Model-save	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#save([options], [options.safe], [options.validateBeforeSave], [fn])</code></pre><p>Saves this document.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[options]</code> <code>Object</code> options optional options</p></li><li><p><code>[options.safe]</code> <code>Object</code> overrides schema's safe option</p></li><li><p><code>[options.validateBeforeSave]</code> <code>Boolean</code> set to false to save without validating.</p></li><li><p><code>[fn]</code> <code>Function</code> optional callback</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> Promise</p></li></ul><span class="prog__sub">Example:</span><pre><code>product.sold = Date.now();\nproduct.save(function (err, product, numAffected) {\n  if (err) ..\n})</code></pre><p>The callback will receive three parameters</p><p>As an extra measure of flow control, save will return a Promise.</p><span class="prog__sub">Example:</span><pre><code>product.save().then(function(product) {\n   ...\n});</code></pre><p>For legacy reasons, mongoose stores object keys in reverse order on initialsave. That is, { a: 1, b: 2 } will be saved as { b: 2, a: 1 } inMongoDB. To override this behavior, setthe toObject.retainKeyOrder optionto true on your schema.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-save
Model.aggregate	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.aggregate([...], [callback])</code></pre><p>Performs aggregations on the models collection.</p><p>If a callback is passed, the aggregate is executed and a Promise is returned. If a callback is not passed, the aggregate itself is returned.</p><span class="prog__sub">Example:</span><pre><code>// Find the max balance of all accounts\nUsers.aggregate(\n  { $group: { _id: null, maxBalance: { $max: '$balance' }}},\n  { $project: { _id: 0, maxBalance: 1 }},\n  function (err, res) {\n    if (err) return handleError(err);\n    console.log(res); // [ { maxBalance: 98000 } ]\n  });\n\n// Or use the aggregation pipeline builder.\nUsers.aggregate()\n  .group({ _id: null, maxBalance: { $max: '$balance' } })\n  .select('-id maxBalance')\n  .exec(function (err, res) {\n    if (err) return handleError(err);\n    console.log(res); // [ { maxBalance: 98 } ]\n});</code></pre><span class="prog__sub">NOTE:</span><ul class="prog__ul>"\n<li>Arguments are not cast to the model&apos;s schema because <code>$project</code> operators allow redefining the &quot;shape&quot; of the documents at any stage of the pipeline, which may leave documents in an incompatible format.</li>\n<li>The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).</li>\n<li>Requires MongoDB &gt;= 2.1</li>\n</ul><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[...]</code> <code>Object, Array</code> aggregation pipeline operator(s) or operator array</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Aggregate, Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.aggregate
Model.count	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.count(conditions, [callback])</code></pre><p>Counts number of matching documents in a database collection.</p><span class="prog__sub">Example:</span><pre><code>Adventure.count({ type: 'jungle' }, function (err, count) {\n  if (err) ..\n  console.log('there are %d jungle adventures', count);\n});</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>conditions</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.count
Model.create	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.create(doc(s), [callback])</code></pre><p>Shortcut for saving one or more documents to the database.MyModel.create(docs) does new MyModel(doc).save() for every doc indocs.</p><ul class="prog__ul>"\n<li><code>save()</code></li>\n</ul><span class="prog__sub">Example:</span><pre><code>// pass individual docs\nCandy.create({ type: 'jelly bean' }, { type: 'snickers' }, function (err, jellybean, snickers) {\n  if (err) // ...\n});\n\n// pass an array\nvar array = [{ type: 'jelly bean' }, { type: 'snickers' }];\nCandy.create(array, function (err, candies) {\n  if (err) // ...\n\n  var jellybean = candies[0];\n  var snickers = candies[1];\n  // ...\n});\n\n// callback is optional; use the returned promise if you like:\nvar promise = Candy.create({ type: 'jawbreaker' });\npromise.then(function (jawbreaker) {\n  // ...\n})</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>doc(s)</code> <code>Array, Object, *</code> </p></li><li><p><code>[callback]</code> <code>Function</code> callback</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.create
Model.discriminator	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.discriminator(name, schema)</code></pre><p>Adds a discriminator type.</p><span class="prog__sub">Example:</span><pre><code>function BaseSchema() {\n  Schema.apply(this, arguments);\n\n  this.add({\n    name: String,\n    createdAt: Date\n  });\n}\nutil.inherits(BaseSchema, Schema);\n\nvar PersonSchema = new BaseSchema();\nvar BossSchema = new BaseSchema({ department: String });\n\nvar Person = mongoose.model('Person', PersonSchema);\nvar Boss = Person.discriminator('Boss', BossSchema);</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String</code> discriminator model name</p></li><li><p><code>schema</code> <code>Schema</code> discriminator model schema</p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.discriminator
Model.distinct	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.distinct(field, [conditions], [callback])</code></pre><p>Creates a Query for a distinct operation.</p><p>Passing a callback immediately executes the query.</p><span class="prog__sub">Example</span><pre><code>Link.distinct('url', { clicks: {$gt: 100}}, function (err, result) {\n  if (err) return handleError(err);\n\n  assert(Array.isArray(result));\n  console.log('unique urls with more than 100 clicks', result);\n})\n\nvar query = Link.distinct('url');\nquery.exec(callback);</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>field</code> <code>String</code> </p></li><li><p><code>[conditions]</code> <code>Object</code> optional</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.distinct
Model.ensureIndexes	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.ensureIndexes([options], [cb])</code></pre><p>Sends ensureIndex commands to mongo for each index declared in the schema.</p><span class="prog__sub">Example:</span><pre><code>Event.ensureIndexes(function (err) {\n  if (err) return handleError(err);\n});</code></pre><p>After completion, an index event is emitted on this Model passing an error if one occurred.</p><span class="prog__sub">Example:</span><pre><code>var eventSchema = new Schema({ thing: { type: 'string', unique: true }})\nvar Event = mongoose.model('Event', eventSchema);\n\nEvent.on('index', function (err) {\n  if (err) console.error(err); // error occurred during index creation\n})</code></pre><p>NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution.</p><p>The ensureIndex commands are not sent in parallel. This is to avoid the MongoError: cannot add index with a background operation in progress error. See this ticket for more information.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[options]</code> <code>Object</code> internal options</p></li><li><p><code>[cb]</code> <code>Function</code> optional callback</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.ensureIndexes
Model.find	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.find(conditions, [projection], [options], [callback])</code></pre><p>Finds documents</p><p>The conditions are cast to their respective SchemaTypes before the command is sent.</p><span class="prog__sub">Examples:</span><pre><code>// named john and at least 18\nMyModel.find({ name: 'john', age: { $gte: 18 }});\n\n// executes immediately, passing results to callback\nMyModel.find({ name: 'john', age: { $gte: 18 }}, function (err, docs) {});\n\n// name LIKE john and only selecting the "name" and "friends" fields, executing immediately\nMyModel.find({ name: /john/i }, 'name friends', function (err, docs) { })\n\n// passing options\nMyModel.find({ name: /john/i }, null, { skip: 10 })\n\n// passing options and executing immediately\nMyModel.find({ name: /john/i }, null, { skip: 10 }, function (err, docs) {});\n\n// executing a query explicitly\nvar query = MyModel.find({ name: /john/i }, null, { skip: 10 })\nquery.exec(function (err, docs) {});\n\n// using the promise returned from executing a query\nvar query = MyModel.find({ name: /john/i }, null, { skip: 10 });\nvar promise = query.exec();\npromise.addBack(function (err, docs) {});</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>conditions</code> <code>Object</code> </p></li><li><p><code>[projection]</code> <code>Object</code> optional fields to return (http://bit.ly/1HotzBo)</p></li><li><p><code>[options]</code> <code>Object</code> optional</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.find
Model.findById	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findById(id, [projection], [options], [callback])</code></pre><p>Finds a single document by its _id field. findById(id) is almost*equivalent to findOne({ _id: id }). If you want to query by a document's_id, use findById() instead of findOne().</p><p>The id is cast based on the Schema before sending the command.</p><p>Note: findById() triggers findOne hooks.</p><ul class="prog__ul>"\n<li>Except for how it treats <code>undefined</code>. If you use <code>findOne()</code>, you&apos;ll see\nthat <code>findOne(undefined)</code> and <code>findOne({ _id: undefined })</code> are equivalent\nto <code>findOne({})</code> and return arbitrary documents. However, mongoose\ntranslates <code>findById(undefined)</code> into <code>findOne({ _id: null })</code>.</li>\n</ul><span class="prog__sub">Example:</span><pre><code>// find adventure by id and execute immediately\nAdventure.findById(id, function (err, adventure) {});\n\n// same as above\nAdventure.findById(id).exec(callback);\n\n// select only the adventures name and length\nAdventure.findById(id, 'name length', function (err, adventure) {});\n\n// same as above\nAdventure.findById(id, 'name length').exec(callback);\n\n// include all properties except for `length`\nAdventure.findById(id, '-length').exec(function (err, adventure) {});\n\n// passing options (in this case return the raw js objects, not mongoose documents by passing `lean`\nAdventure.findById(id, 'name', { lean: true }, function (err, doc) {});\n\n// same as above\nAdventure.findById(id, 'name').lean().exec(function (err, doc) {});</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>id</code> <code>Object, String, Number</code> value of <code>code</code>_id</code> to query by</p></li><li><p><code>[projection]</code> <code>Object</code> optional fields to return (http://bit.ly/1HotzBo)</p></li><li><p><code>[options]</code> <code>Object</code> optional</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.findById
Model.findByIdAndRemove	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findByIdAndRemove(id, [options], [callback])</code></pre><p>Issue a mongodb findAndModify remove command by a document's _id field. findByIdAndRemove(id, ...) is equivalent to findOneAndRemove({ _id: id }, ...).</p><p>Finds a matching document, removes it, passing the found document (if any) to the callback.</p><p>Executes immediately if callback is passed, else a Query object is returned.</p><span class="prog__sub">Options:</span><ul class="prog__ul>"\n<li><code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li>\n<li><code>select</code>: sets the document fields to return</li>\n</ul><span class="prog__sub">Examples:</span><pre><code>A.findByIdAndRemove(id, options, callback) // executes\nA.findByIdAndRemove(id, options)  // return Query\nA.findByIdAndRemove(id, callback) // executes\nA.findByIdAndRemove(id) // returns Query\nA.findByIdAndRemove()           // returns Query</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>id</code> <code>Object, Number, String</code> value of <code>code</code>_id</code> to query by</p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.findByIdAndRemove
Model.findByIdAndUpdate	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findByIdAndUpdate(id, [update], [options], [callback])</code></pre><p>Issues a mongodb findAndModify update command by a document's _id field.findByIdAndUpdate(id, ...) is equivalent to findOneAndUpdate({ _id: id }, ...).</p><p>Finds a matching document, updates it according to the update arg,passing any options, and returns the found document (if any) to thecallback. The query executes immediately if callback is passed else aQuery object is returned.</p><p>This function triggers findOneAndUpdate middleware.</p><span class="prog__sub">Options:</span><ul class="prog__ul>"\n<li><code>new</code>: bool - true to return the modified document rather than the original. defaults to false</li>\n<li><code>upsert</code>: bool - creates the object if it doesn&apos;t exist. defaults to false.</li>\n<li><code>runValidators</code>: if true, runs update validators on this command. Update validators validate the update operation against the model&apos;s schema.</li>\n<li><code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the defaults specified in the model&apos;s schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on MongoDB&apos;s <code>$setOnInsert</code> operator.</li>\n<li><code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li>\n<li><code>select</code>: sets the document fields to return</li>\n</ul><span class="prog__sub">Examples:</span><pre><code>A.findByIdAndUpdate(id, update, options, callback) // executes\nA.findByIdAndUpdate(id, update, options)  // returns Query\nA.findByIdAndUpdate(id, update, callback) // executes\nA.findByIdAndUpdate(id, update)           // returns Query\nA.findByIdAndUpdate()                     // returns Query</code></pre><span class="prog__sub">Note:</span><p>All top level update keys which are not atomic operation names are treated as set operations:</p><span class="prog__sub">Example:</span><pre><code>Model.findByIdAndUpdate(id, { name: 'jason borne' }, options, callback)\n\n// is sent as\nModel.findByIdAndUpdate(id, { $set: { name: 'jason borne' }}, options, callback)</code></pre><p>This helps prevent accidentally overwriting your document with { name: 'jason borne' }.</p><span class="prog__sub">Note:</span><p>Values are cast to their appropriate types when using the findAndModify helpers.However, the below are never executed.</p><ul class="prog__ul>"\n<li>defaults</li>\n<li>setters</li>\n</ul><p>findAndModify helpers support limited defaults and validation. You canenable these by setting the setDefaultsOnInsert and runValidators options,respectively.</p><p>If you need full-fledged validation, use the traditional approach of firstretrieving the document.</p><pre><code>Model.findById(id, function (err, doc) {\n  if (err) ..\n  doc.name = 'jason borne';\n  doc.save(callback);\n});</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>id</code> <code>Object, Number, String</code> value of <code>code</code>_id</code> to query by</p></li><li><p><code>[update]</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate
Model.findOne	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findOne([conditions], [projection], [options], [callback])</code></pre><p>Finds one document.</p><p>The conditions are cast to their respective SchemaTypes before the command is sent.</p><p>Note: conditions is optional, and if conditions is null or undefined,mongoose will send an empty findOne command to MongoDB, which will returnan arbitrary document. If you're querying by _id, use findById() instead.</p><span class="prog__sub">Example:</span><pre><code>// find one iphone adventures - iphone adventures??\nAdventure.findOne({ type: 'iphone' }, function (err, adventure) {});\n\n// same as above\nAdventure.findOne({ type: 'iphone' }).exec(function (err, adventure) {});\n\n// select only the adventures name\nAdventure.findOne({ type: 'iphone' }, 'name', function (err, adventure) {});\n\n// same as above\nAdventure.findOne({ type: 'iphone' }, 'name').exec(function (err, adventure) {});\n\n// specify options, in this case lean\nAdventure.findOne({ type: 'iphone' }, 'name', { lean: true }, callback);\n\n// same as above\nAdventure.findOne({ type: 'iphone' }, 'name', { lean: true }).exec(callback);\n\n// chaining findOne queries (same as above)\nAdventure.findOne({ type: 'iphone' }).select('name').lean().exec(callback);</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[conditions]</code> <code>Object</code> </p></li><li><p><code>[projection]</code> <code>Object</code> optional fields to return (http://bit.ly/1HotzBo)</p></li><li><p><code>[options]</code> <code>Object</code> optional</p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.findOne
Model.findOneAndRemove	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findOneAndRemove(conditions, [options], [callback])</code></pre><p>Issue a mongodb findAndModify remove command.</p><p>Finds a matching document, removes it, passing the found document (if any) to the callback.</p><p>Executes immediately if callback is passed else a Query object is returned.</p><span class="prog__sub">Options:</span><ul class="prog__ul>"\n<li><code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li>\n<li><code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li>\n<li><code>select</code>: sets the document fields to return</li>\n</ul><span class="prog__sub">Examples:</span><pre><code>A.findOneAndRemove(conditions, options, callback) // executes\nA.findOneAndRemove(conditions, options)  // return Query\nA.findOneAndRemove(conditions, callback) // executes\nA.findOneAndRemove(conditions) // returns Query\nA.findOneAndRemove()           // returns Query</code></pre><p>Values are cast to their appropriate types when using the findAndModify helpers.However, the below are never executed.</p><ul class="prog__ul>"\n<li>defaults</li>\n<li>setters</li>\n</ul><p>findAndModify helpers support limited defaults and validation. You canenable these by setting the setDefaultsOnInsert and runValidators options,respectively.</p><p>If you need full-fledged validation, use the traditional approach of firstretrieving the document.</p><pre><code>Model.findById(id, function (err, doc) {\n  if (err) ..\n  doc.name = 'jason borne';\n  doc.save(callback);\n});</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>conditions</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.findOneAndRemove
Model.findOneAndUpdate	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findOneAndUpdate([conditions], [update], [options], [callback])</code></pre><p>Issues a mongodb findAndModify update command.</p><p>Finds a matching document, updates it according to the update arg, passing any options, and returns the found document (if any) to the callback. The query executes immediately if callback is passed else a Query object is returned.</p><span class="prog__sub">Options:</span><ul class="prog__ul>"\n<li><code>new</code>: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)</li>\n<li><code>upsert</code>: bool - creates the object if it doesn&apos;t exist. defaults to false.</li>\n<li><code>fields</code>: {Object|String} - Field selection. Equivalent to <code>.select(fields).findOneAndUpdate()</code></li>\n<li><code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li>\n<li><code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li>\n<li><code>runValidators</code>: if true, runs update validators on this command. Update validators validate the update operation against the model&apos;s schema.</li>\n<li><code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the defaults specified in the model&apos;s schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on MongoDB&apos;s <code>$setOnInsert</code> operator.</li>\n<li><code>passRawResult</code>: if true, passes the raw result from the MongoDB driver as the third callback parameter</li>\n</ul><span class="prog__sub">Examples:</span><pre><code>A.findOneAndUpdate(conditions, update, options, callback) // executes\nA.findOneAndUpdate(conditions, update, options)  // returns Query\nA.findOneAndUpdate(conditions, update, callback) // executes\nA.findOneAndUpdate(conditions, update)           // returns Query\nA.findOneAndUpdate()                             // returns Query</code></pre><span class="prog__sub">Note:</span><p>All top level update keys which are not atomic operation names are treated as set operations:</p><span class="prog__sub">Example:</span><pre><code>var query = { name: 'borne' };\nModel.findOneAndUpdate(query, { name: 'jason borne' }, options, callback)\n\n// is sent as\nModel.findOneAndUpdate(query, { $set: { name: 'jason borne' }}, options, callback)</code></pre><p>This helps prevent accidentally overwriting your document with { name: 'jason borne' }.</p><span class="prog__sub">Note:</span><p>Values are cast to their appropriate types when using the findAndModify helpers.However, the below are never executed.</p><ul class="prog__ul>"\n<li>defaults</li>\n<li>setters</li>\n</ul><p>findAndModify helpers support limited defaults and validation. You canenable these by setting the setDefaultsOnInsert and runValidators options,respectively.</p><p>If you need full-fledged validation, use the traditional approach of firstretrieving the document.</p><pre><code>Model.findById(id, function (err, doc) {\n  if (err) ..\n  doc.name = 'jason borne';\n  doc.save(callback);\n});</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>[conditions]</code> <code>Object</code> </p></li><li><p><code>[update]</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.findOneAndUpdate
Model.geoNear	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.geoNear(GeoJSON, options, [callback])</code></pre><p>geoNear support for Mongoose</p><span class="prog__sub">Options:</span><ul class="prog__ul>"\n<li><code>lean</code> {Boolean} return the raw object</li>\n<li>All options supported by the driver are also supported</li>\n</ul><span class="prog__sub">Example:</span><pre><code>// Legacy point\nModel.geoNear([1,3], { maxDistance : 5, spherical : true }, function(err, results, stats) {\n   console.log(results);\n});\n\n// geoJson\nvar point = { type : "Point", coordinates : [9,9] };\nModel.geoNear(point, { maxDistance : 5, spherical : true }, function(err, results, stats) {\n   console.log(results);\n});</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>GeoJSON</code> <code>Object, Array</code> point or legacy coordinate pair [x,y] to search near</p></li><li><p><code>options</code> <code>Object</code> for the query</p></li><li><p><code>[callback]</code> <code>Function</code> optional callback for the query</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.geoNear
Model.geoSearch	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.geoSearch(conditions, options, [callback])</code></pre><p>Implements $geoSearch functionality for Mongoose</p><span class="prog__sub">Example:</span><pre><code>var options = { near: [10, 10], maxDistance: 5 };\nLocations.geoSearch({ type : "house" }, options, function(err, res) {\n  console.log(res);\n});</code></pre><span class="prog__sub">Options:</span><ul class="prog__ul>"\n<li><code>near</code> {Array} x,y point to search for</li>\n<li><code>maxDistance</code> {Number} the maximum distance from the point near that a result can be</li>\n<li><code>limit</code> {Number} The maximum number of results to return</li>\n<li><code>lean</code> {Boolean} return the raw object instead of the Mongoose Model</li>\n</ul><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>conditions</code> <code>Object</code> an object that specifies the match condition (required)</p></li><li><p><code>options</code> <code>Object</code> for the geoSearch, some (near, maxDistance) are required</p></li><li><p><code>[callback]</code> <code>Function</code> optional callback</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.geoSearch
Model.hydrate	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.hydrate(obj)</code></pre><p>Shortcut for creating a new Document from existing raw data, pre-saved in the DB.The document returned has no paths marked as modified initially.</p><span class="prog__sub">Example:</span><pre><code>// hydrate previous data into a Mongoose document\nvar mongooseCandy = Candy.hydrate({ _id: '54108337212ffb6d459f854c', type: 'jelly bean' });</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>obj</code> <code>Object</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Document</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.hydrate
Model.insertMany	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.insertMany(doc(s), [options], [callback])</code></pre><p>Shortcut for validating an array of documents and inserting them intoMongoDB if they're all valid. This function is faster than .create()because it only sends one operation to the server, rather than one for eachdocument.</p><p>This function does not trigger save middleware.</p><span class="prog__sub">Example:</span><pre><code>var arr = [{ name: 'Star Wars' }, { name: 'The Empire Strikes Back' }];\nMovies.insertMany(arr, function(error, docs) {});</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>doc(s)</code> <code>Array, Object, *</code> </p></li><li><p><code>[options]</code> <code>Object</code> see the <code>a href="http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#insertMany"</code>mongodb driver options</p></li><li><p><code>[callback]</code> <code>Function</code> callback</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.insertMany
Model.mapReduce	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.mapReduce(o, [callback])</code></pre><p>Executes a mapReduce command.</p><p>o is an object specifying all mapReduce options as well as the map and reduce functions. All options are delegated to the driver implementation. See node-mongodb-native mapReduce() documentation for more detail about options.</p><span class="prog__sub">Example:</span><pre><code>var o = {};\no.map = function () { emit(this.name, 1) }\no.reduce = function (k, vals) { return vals.length }\nUser.mapReduce(o, function (err, results) {\n  console.log(results)\n})</code></pre><span class="prog__sub">Other options:</span><ul class="prog__ul>"\n<li><code>query</code> {Object} query filter object.</li>\n<li><code>sort</code> {Object} sort input objects using this key</li>\n<li><code>limit</code> {Number} max number of documents</li>\n<li><code>keeptemp</code> {Boolean, default:false} keep temporary data</li>\n<li><code>finalize</code> {Function} finalize function</li>\n<li><code>scope</code> {Object} scope variables exposed to map/reduce/finalize during execution</li>\n<li><code>jsMode</code> {Boolean, default:false} it is possible to make the execution stay in JS. Provided in MongoDB &gt; 2.0.X</li>\n<li><code>verbose</code> {Boolean, default:false} provide statistics on job execution time.</li>\n<li><code>readPreference</code> {String}</li>\n<li><code>out*</code> {Object, default: {inline:1}} sets the output target for the map reduce job.</li>\n</ul><span class="prog__sub">* out options:</span><ul class="prog__ul>"\n<li><code>{inline:1}</code> the results are returned in an array</li>\n<li><code>{replace: &apos;collectionName&apos;}</code> add the results to collectionName: the results replace the collection</li>\n<li><code>{reduce: &apos;collectionName&apos;}</code> add the results to collectionName: if dups are detected, uses the reducer / finalize functions</li>\n<li><code>{merge: &apos;collectionName&apos;}</code> add the results to collectionName: if dups exist the new docs overwrite the old</li>\n</ul><p>If options.out is set to replace, merge, or reduce, a Model instance is returned that can be used for further querying. Queries run against this model are all executed with the lean option; meaning only the js object is returned and no Mongoose magic is applied (getters, setters, etc).</p><span class="prog__sub">Example:</span><pre><code>var o = {};\no.map = function () { emit(this.name, 1) }\no.reduce = function (k, vals) { return vals.length }\no.out = { replace: 'createdCollectionNameForResults' }\no.verbose = true;\n\nUser.mapReduce(o, function (err, model, stats) {\n  console.log('map reduce took %d ms', stats.processtime)\n  model.find().where('value').gt(10).exec(function (err, docs) {\n    console.log(docs);\n  });\n})\n\n// a promise is returned so you may instead write\nvar promise = User.mapReduce(o);\npromise.then(function (model, stats) {\n  console.log('map reduce took %d ms', stats.processtime)\n  return model.find().where('value').gt(10).exec();\n}).then(function (docs) {\n   console.log(docs);\n}).then(null, handleError).end()</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>o</code> <code>Object</code> an object specifying map-reduce options</p></li><li><p><code>[callback]</code> <code>Function</code> optional callback</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.mapReduce
Model.populate	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.populate(docs, options, [callback(err,doc)])</code></pre><p>Populates document references.</p><span class="prog__sub">Available options:</span><ul class="prog__ul>"\n<li>path: space delimited path(s) to populate</li>\n<li>select: optional fields to select</li>\n<li>match: optional query conditions to match</li>\n<li>model: optional name of the model to use for population</li>\n<li>options: optional query options like sort, limit, etc</li>\n</ul><span class="prog__sub">Examples:</span><pre><code>// populates a single object\nUser.findById(id, function (err, user) {\n  var opts = [\n      { path: 'company', match: { x: 1 }, select: 'name' }\n    , { path: 'notes', options: { limit: 10 }, model: 'override' }\n  ]\n\n  User.populate(user, opts, function (err, user) {\n    console.log(user);\n  });\n});\n\n// populates an array of objects\nUser.find(match, function (err, users) {\n  var opts = [{ path: 'company', match: { x: 1 }, select: 'name' }]\n\n  var promise = User.populate(users, opts);\n  promise.then(console.log).end();\n})\n\n// imagine a Weapon model exists with two saved documents:\n//   { _id: 389, name: 'whip' }\n//   { _id: 8921, name: 'boomerang' }\n// and this schema:\n// new Schema({\n//   name: String,\n//   weapon: { type: ObjectId, ref: 'Weapon' }\n// });\n\nvar user = { name: 'Indiana Jones', weapon: 389 }\nWeapon.populate(user, { path: 'weapon', model: 'Weapon' }, function (err, user) {\n  console.log(user.weapon.name) // whip\n})\n\n// populate many plain objects\nvar users = [{ name: 'Indiana Jones', weapon: 389 }]\nusers.push({ name: 'Batman', weapon: 8921 })\nWeapon.populate(users, { path: 'weapon' }, function (err, users) {\n  users.forEach(function (user) {\n    console.log('%s uses a %s', users.name, user.weapon.name)\n    // Indiana Jones uses a whip\n    // Batman uses a boomerang\n  });\n});\n// Note that we didn't need to specify the Weapon model because\n// it is in the schema's ref</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>docs</code> <code>Document, Array</code> Either a single document or array of documents to populate.</p></li><li><p><code>options</code> <code>Object</code> A hash of key/val (path, options) used for population.</p></li><li><p><code>[callback(err,doc)]</code> <code>Function</code> Optional callback, executed upon completion. Receives <code>code</code>err</code> and the <code>doc(s)</code>.</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Promise</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.populate
Model.remove	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.remove(conditions, [callback])</code></pre><p>Removes documents from the collection.</p><span class="prog__sub">Example:</span><pre><code>Comment.remove({ title: 'baby born from alien father' }, function (err) {\n\n});</code></pre><span class="prog__sub">Note:</span><p>To remove documents without waiting for a response from MongoDB, do not pass a callback, then call exec on the returned Query:</p><pre><code>var query = Comment.remove({ _id: id });\nquery.exec();</code></pre><span class="prog__sub">Note:</span><p>This method sends a remove command directly to MongoDB, no Mongoose documents are involved. Because no Mongoose documents are involved, no middleware (hooks) are executed.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>conditions</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.remove
Model.update	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.update(conditions, doc, [options], [callback])</code></pre><p>Updates documents in the database without returning them.</p><span class="prog__sub">Examples:</span><pre><code>MyModel.update({ age: { $gt: 18 } }, { oldEnough: true }, fn);\nMyModel.update({ name: 'Tobi' }, { ferret: true }, { multi: true }, function (err, raw) {\n  if (err) return handleError(err);\n  console.log('The raw response from Mongo was ', raw);\n});</code></pre><span class="prog__sub">Valid options:</span><ul class="prog__ul>"\n<li><code>safe</code> (boolean) safe mode (defaults to value set in schema (true))</li>\n<li><code>upsert</code> (boolean) whether to create the doc if it doesn&apos;t match (false)</li>\n<li><code>multi</code> (boolean) whether multiple documents should be updated (false)</li>\n<li><code>runValidators</code>: if true, runs update validators on this command. Update validators validate the update operation against the model&apos;s schema.</li>\n<li><code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the defaults specified in the model&apos;s schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on MongoDB&apos;s <code>$setOnInsert</code> operator.</li>\n<li><code>strict</code> (boolean) overrides the <code>strict</code> option for this update</li>\n<li><code>overwrite</code> (boolean) disables update-only mode, allowing you to overwrite the doc (false)</li>\n</ul><p>All update values are cast to their appropriate SchemaTypes before being sent.</p><p>The callback function receives (err, rawResponse).</p><ul class="prog__ul>"\n<li><code>err</code> is the error if any occurred</li>\n<li><code>rawResponse</code> is the full response from Mongo</li>\n</ul><span class="prog__sub">Note:</span><p>All top level keys which are not atomic operation names are treated as set operations:</p><span class="prog__sub">Example:</span><pre><code>var query = { name: 'borne' };\nModel.update(query, { name: 'jason borne' }, options, callback)\n\n// is sent as\nModel.update(query, { $set: { name: 'jason borne' }}, options, callback)\n// if overwrite option is false. If overwrite is true, sent without the $set wrapper.</code></pre><p>This helps prevent accidentally overwriting all documents in your collection with { name: 'jason borne' }.</p><span class="prog__sub">Note:</span><p>Be careful to not use an existing model instance for the update clause (this won't work and can cause weird behavior like infinite loops). Also, ensure that the update clause does not have an _id property, which causes Mongo to return a "Mod on _id not allowed" error.</p><span class="prog__sub">Note:</span><p>To update documents without waiting for a response from MongoDB, do not pass a callback, then call exec on the returned Query:</p><pre><code>Comment.update({ _id: id }, { $set: { text: 'changed' }}).exec();</code></pre><span class="prog__sub">Note:</span><p>Although values are casted to their appropriate types when using update, the following are not applied:</p><ul class="prog__ul>"\n<li>defaults</li>\n<li>setters</li>\n<li>validators</li>\n<li>middleware</li>\n</ul><p>If you need those features, use the traditional approach of first retrieving the document.</p><pre><code>Model.findOne({ name: 'borne' }, function (err, doc) {\n  if (err) ..\n  doc.name = 'jason borne';\n  doc.save(callback);\n})</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>conditions</code> <code>Object</code> </p></li><li><p><code>doc</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.update
Model.updateMany	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.updateMany(conditions, doc, [options], [callback])</code></pre><p>Same as update(), except MongoDB will update all documents that matchcriteria (as opposed to just the first one) regardless of the value ofthe multi option.</p><p>Note updateMany will not fire update middleware. Use pre('updateMany')and post('updateMany') instead.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>conditions</code> <code>Object</code> </p></li><li><p><code>doc</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.updateMany
Model.updateOne	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.updateOne(conditions, doc, [options], [callback])</code></pre><p>Same as update(), except MongoDB will update only the first document thatmatches criteria regardless of the value of the multi option.</p><p>Note updateMany will not fire update middleware. Use pre('updateMany')and post('updateMany') instead.</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>conditions</code> <code>Object</code> </p></li><li><p><code>doc</code> <code>Object</code> </p></li><li><p><code>[options]</code> <code>Object</code> </p></li><li><p><code>[callback]</code> <code>Function</code> </p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.updateOne
Model.where	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.where(path, [val])</code></pre><p>Creates a Query, applies the passed conditions, and returns the Query.</p><p>For example, instead of writing:</p><pre><code>User.find({age: {$gte: 21, $lte: 65}}, callback);</code></pre><p>we can instead write:</p><pre><code>User.where('age').gte(21).lte(65).exec(callback);</code></pre><p>Since the Query class also supports where you can continue chaining</p><pre><code>User\n.where('age').gte(21).lte(65)\n.where('name', /^b/i)\n... etc</code></pre><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>path</code> <code>String</code> </p></li><li><p><code>[val]</code> <code>Object</code> optional value</p></li></ul><span class="prog__sub">Returns:</span><ul class="prog__ul"><li><p><code></code> <code>Query</code> </p></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.where
Model-%2524where	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#$where</code></pre><p>Additional properties to attach to the query when calling save() andisNew is false.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-%2524where
Model-base	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#base</code></pre><p>Base Mongoose instance the model uses.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-base
Model-baseModelName	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#baseModelName</code></pre><p>If this is a discriminator model, baseModelName is the name ofthe base model.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-baseModelName
Model-collection	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#collection</code></pre><p>Collection the model uses.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-collection
Model-db	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#db</code></pre><p>Connection the model uses.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-db
Model-discriminators	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#discriminators</code></pre><p>Registered discriminators for this model.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-discriminators
Model-modelName	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#modelName</code></pre><p>The name of the model</p></section>	http://mongoosejs.com/docs/api.html#model_Model-modelName
Model-schema	A			Model						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#schema</code></pre><p>Schema the model uses.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-schema
=Collection	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection(name, conn, opts)</code></pre><p>Abstract Collection constructor</p><span class="prog__sub">Parameters:</span><ul class="prog__ul"><li><p><code>name</code> <code>String</code> name of the collection</p></li><li><p><code>conn</code> <code>Connection</code> A MongooseConnection instance</p></li><li><p><code>opts</code> <code>Object</code> optional collection options</p></li></ul><p>This is the base class that drivers inherit from and implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection
Collection-ensureIndex	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#ensureIndex()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-ensureIndex
Collection-find	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#find()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-find
Collection-findAndModify	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#findAndModify()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-findAndModify
Collection-findOne	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#findOne()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-findOne
Collection-getIndexes	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#getIndexes()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-getIndexes
Collection-insert	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#insert()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-insert
Collection-mapReduce	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#mapReduce()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-mapReduce
Collection-save	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#save()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-save
Collection-update	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#update()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-update
Collection-collectionName	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#collectionName</code></pre><p>The collection name</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-collectionName
Collection-conn	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#conn</code></pre><p>The Connection instance</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-conn
Collection-name	A			Collection						http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#name</code></pre><p>The collection name</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-name
Aggregate	D								*[[Mongoose-Aggregate]], The Mongoose Aggregate constructor\n*[[=Aggregate]], Aggregate constructor used for building aggregation pipelines.			
Collection	D								*[[Mongoose-Collection]], The Mongoose Collection constructor\n*[[=Collection]], Abstract Collection constructor			
Connection	D								*[[Mongoose-Connection]], The Mongoose Connection constructor\n*[[=Connection]], Connection constructor			
Document	D								*[[Mongoose-Document]], The Mongoose Document constructor.\n*[[exports.Document]], The Mongoose browser Document constructor.			
Error	D								*[[Mongoose-Error]], The MongooseError constructor.\n*[[exports.Error]], The MongooseError constructor.			
get	D								*[[Mongoose-get]], Gets mongoose options\n*[[VirtualType-get]], Defines a getter.\n*[[Schema-get]], Gets a schema option.\n*[[Document-get]], Returns the value of a path.\n*[[SchemaType-get]], Adds a getter to this schematype.			
model	D								*[[Mongoose-model]], Defines a model or retrieves it.\n*[[Connection-model]], Defines or retrieves a model.\n*[[Aggregate-model]], Binds this aggregate to a model.\n*[[Model-model]], Returns another Model instance.			
Model	D								*[[Mongoose-Model]], The Mongoose Model constructor.\n*[[=Model]], Model constructor			
modelNames	D								*[[Mongoose-modelNames]], Returns an array of model names created on this instance of Mongoose.\n*[[Connection-modelNames]], Returns an array of model names created on this connection.			
Mongoose	D								*[[=Mongoose]], Mongoose constructor.\n*[[Mongoose-Mongoose]], The Mongoose constructor			
plugin	D								*[[Mongoose-plugin]], Declares a global plugin executed on all Schemas.\n*[[Schema-plugin]], Registers a plugin for this schema.			
PromiseProvider	D								*[[Mongoose-PromiseProvider]], Storage layer for mongoose promises\n*[[exports.PromiseProvider]], Storage layer for mongoose promises			
Schema	D								*[[Mongoose-Schema]], The Mongoose Schema constructor\n*[[exports.Schema]], The Mongoose Schema constructor\n*[[=Schema]], Schema constructor.			
SchemaType	D								*[[Mongoose-SchemaType]], The Mongoose SchemaType constructor\n*[[=SchemaType]], SchemaType constructor			
set	D								*[[Mongoose-set]], Sets mongoose options\n*[[VirtualType-set]], Defines a setter.\n*[[Schema-set]], Sets/gets a schema option.\n*[[Document-set]], Sets the value of a path, or many paths.\n*[[MongooseArray.set]], Sets the casted val at index i and marks the array modified.\n*[[SchemaType-set]], Adds a setter to this schematype.			
VirtualType	D								*[[Mongoose-VirtualType]], The Mongoose VirtualType constructor\n*[[exports.VirtualType]], The Mongoose VirtualType constructor\n*[[=VirtualType]], VirtualType constructor			
SchemaTypes	D								*[[Mongoose-SchemaTypes]], The various Mongoose SchemaTypes.\n*[[exports-SchemaTypes]], The various Mongoose SchemaTypes.			
Types	D								*[[Mongoose-Types]], The various Mongoose Types.\n*[[exports-Types]], The various Mongoose Types.\n*[[Schema.Types]], The various built-in Mongoose Schema Types.			
close	D								*[[Connection-close]], Closes the connection\n*[[QueryCursor-close]], Marks this cursor as closed. Will stop streaming and subsequent calls tonext() will error.			
collection	D								*[[Connection-collection]], Retrieves a collection, creating it if not cached.\n*[[Model-collection]], Collection the model uses.			
db	D								*[[Connection-db]], The mongodb.Db instance, set when the connection is opened\n*[[Model-db]], Connection the model uses.			
getIndexes	D								*[[NativeCollection-getIndexes]], Retreives information about this collections indexes.\n*[[Collection-getIndexes]], Abstract method that drivers must implement.			
messages	D								*[[MongooseError.messages]], The default built-in validator error messages. These may be customized.\n*[[MongooseError.messages]], The default built-in validator error messages.			
toString	D								*[[ValidationError-toString]], Console.log helper\n*[[Document-toString]], Helper for console.log			
index	D								*[[Schema-index]], Defines an index (most likely compound) for this schema.\n*[[SchemaType-index]], Declares the index options for this schematype.			
remove	D								*[[Schema-remove]], Removes the given path (or [paths]).\n*[[Subdocument-remove]], Null-out this subdoc\n*[[MongooseArray-remove]], Alias of pull\n*[[EmbeddedDocument-remove]], Removes the subdocument from its parent array.\n*[[Query-remove]], Declare and/or execute this query as a remove() operation.\n*[[Model-remove]], Removes this document from the db.\n*[[Model.remove]], Removes documents from the collection.			
equals	D								*[[Document-equals]], Returns true if the Document stores the same data as doc.\n*[[MongooseBuffer.equals]], Determines if this buffer is equals to other buffer\n*[[Query-equals]], Specifies the complementary comparison value for paths specified with where()			
inspect	D								*[[Document-inspect]], Helper for console.log\n*[[MongooseArray.inspect]], Helper for console.log\n*[[MongooseDocumentArray.inspect]], Helper for console.log\n*[[EmbeddedDocument-inspect]], Helper for console.log			
invalidate	D								*[[Document-invalidate]], Marks a path as invalid, causing validation to fail.\n*[[EmbeddedDocument-invalidate]], Marks a path as invalid, causing validation to fail.			
markModified	D								*[[Document-markModified]], Marks the path as having pending changes to write to the db.\n*[[EmbeddedDocument.markModified]], Marks the embedded doc modified.			
populate	D								*[[Document-populate]], Populates document references, executing the callback when complete.If you want to use promises instead, use this function withexecPopulate()\n*[[Query-populate]], Specifies paths which should be populated with other documents.\n*[[Model.populate]], Populates document references.			
toObject	D								*[[Document-toObject]], Converts this document into a plain javascript object, ready for storage in MongoDB.\n*[[MongooseArray.toObject]], Returns a native js Array.\n*[[MongooseDocumentArray.toObject]], Returns a native js Array of plain js objects\n*[[MongooseBuffer.toObject]], Converts this buffer to its Binary type representation.			
update	D								*[[Document-update]], Sends an update command with this document _id as the query selector.\n*[[Query-update]], Declare and/or execute this query as an update() operation.\n*[[Model.update]], Updates documents in the database without returning them.\n*[[Collection-update]], Abstract method that drivers must implement.			
validate	D								*[[Document-validate]], Executes registered validation rules for this document.\n*[[SchemaType-validate]], Adds validator(s) for this document path.			
id	D								*[[Document-id]], The string version of this documents _id.\n*[[MongooseDocumentArray.id]], Searches array items for the first document with a matching _id.			
schema	D								*[[Document-schema]], The documents schema.\n*[[Model-schema]], Schema the model uses.			
ownerDocument	D								*[[Subdocument-ownerDocument]], Returns the top level document of this sub-document.\n*[[EmbeddedDocument-ownerDocument]], Returns the top level document of this sub-document.			
sort	D								*[[MongooseArray.sort]], Wraps Array#sort with proper change tracking.\n*[[Query-sort]], Sets the sort order\n*[[Aggregate-sort]], Appends a new $sort operator to this aggregate pipeline.			
create	D								*[[MongooseDocumentArray.create]], Creates a subdocument casted to this schema.\n*[[Model.create]], Shortcut for saving one or more documents to the database.MyModel.create(docs) does new MyModel(doc).save() for every doc indocs.			
ObjectId	D								*[[=ObjectId]], ObjectId type constructor\n*[[=ObjectId]], ObjectId SchemaType constructor.			
catch	D								*[[Query-catch]], Executes the query returning a Promise which will beresolved with either the doc(s) or rejected with the error.Like .then(), but only takes a rejection handler.\n*[[Promise-catch]], ES6-style .catch() shorthand			
collation	D								*[[Query-collation]], Adds a collation to this op (MongoDB 3.4 and up)\n*[[Aggregate-collation]], Adds a collation			
count	D								*[[Query-count]], Specifying this query as a count query.\n*[[Model.count]], Counts number of matching documents in a database collection.			
cursor	D								*[[Query-cursor]], Returns a wrapper around a mongodb driver cursor.A QueryCursor exposes a Streams3-compatibleinterface, as well as a .next() function.\n*[[Aggregate-cursor]], Sets the cursor option option for the aggregation query (ignored for < 2.6.0).Note the different syntax below: .exec() returns a cursor object, and no callbackis necessary.			
distinct	D								*[[Query-distinct]], Declares or executes a distict() operation.\n*[[Model.distinct]], Creates a Query for a distinct operation.			
exec	D								*[[Query-exec]], Executes the query\n*[[Aggregate-exec]], Executes the aggregate pipeline on the currently bound Model.			
find	D								*[[Query-find]], Finds documents.\n*[[Model.find]], Finds documents\n*[[Collection-find]], Abstract method that drivers must implement.			
findOne	D								*[[Query-findOne]], Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n*[[Model.findOne]], Finds one document.\n*[[Collection-findOne]], Abstract method that drivers must implement.			
findOneAndRemove	D								*[[Query-findOneAndRemove]], Issues a mongodb findAndModify remove command.\n*[[Model.findOneAndRemove]], Issue a mongodb findAndModify remove command.			
findOneAndUpdate	D								*[[Query-findOneAndUpdate]], Issues a mongodb findAndModify update command.\n*[[Model.findOneAndUpdate]], Issues a mongodb findAndModify update command.			
limit	D								*[[Query-limit]], Specifies the maximum number of documents the query will return.\n*[[Aggregate-limit]], Appends a new $limit operator to this aggregate pipeline.			
merge	D								*[[Query-merge]], Merges another Query or conditions object into this one.\n*[[Query-merge]], Merges another Query or conditions object into this one.			
near	D								*[[Query-near]], Specifies a $near or $nearSphere condition\n*[[Aggregate-near]], Appends a new $geoNear operator to this aggregate pipeline.			
read	D								*[[Query-read]], Determines the MongoDB nodes from which to read.\n*[[Aggregate-read]], Sets the readPreference option for the aggregation query.			
select	D								*[[Query-select]], Specifies which document fields to include or exclude (also known as the query "projection")\n*[[SchemaType-select]], Sets default select() behavior for this path.			
skip	D								*[[Query-skip]], Specifies the number of documents to skip.\n*[[Aggregate-skip]], Appends a new $skip operator to this aggregate pipeline.			
then	D								*[[Query-then]], Executes the query returning a Promise which will beresolved with either the doc(s) or rejected with the error.\n*[[Aggregate-then]], Provides promise for aggregate.\n*[[Promise-then]], Creates a new promise and returns it. If onFulfill or onReject are passed, they are added as SUCCESS/ERROR callbacks to this promise after the nextTick.			
updateMany	D								*[[Query-updateMany]], Declare and/or execute this query as an updateMany() operation. Same asupdate(), except MongoDB will update all documents that matchcriteria (as opposed to just the first one) regardless of the value ofthe multi option.\n*[[Model.updateMany]], Same as update(), except MongoDB will update all documents that matchcriteria (as opposed to just the first one) regardless of the value ofthe multi option.			
updateOne	D								*[[Query-updateOne]], Declare and/or execute this query as an updateOne() operation. Same asupdate(), except MongoDB will update only the first document thatmatches criteria regardless of the value of the multi option.\n*[[Model.updateOne]], Same as update(), except MongoDB will update only the first document thatmatches criteria regardless of the value of the multi option.			
where	D								*[[Query-where]], Specifies a path for use with chaining.\n*[[Model.where]], Creates a Query, applies the passed conditions, and returns the Query.			
checkRequired	D								*[[Decimal128-checkRequired]], Check if the given value satisfies a required validator.\n*[[SchemaArray-checkRequired]], Check if the given value satisfies a required validator. The given valuemust be not null nor undefined, and have a non-zero length.\n*[[SchemaString-checkRequired]], Check if the given value satisfies a required validator.\n*[[SchemaNumber-checkRequired]], Check if the given value satisfies a required validator.\n*[[SchemaDate-checkRequired]], Check if the given value satisfies a required validator. To satisfya required validator, the given value must be an instance of Date.\n*[[SchemaBuffer-checkRequired]], Check if the given value satisfies a required validator. To satisfy arequired validator, a buffer must not be null or undefined and havenon-zero length.\n*[[SchemaBoolean-checkRequired]], Check if the given value satisfies a required validator. For a booleanto satisfy a required validator, it must be strictly equal to true or tofalse.\n*[[ObjectId-checkRequired]], Check if the given value satisfies a required validator.			
schemaName	D								*[[Decimal128.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.\n*[[SchemaArray.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.\n*[[SchemaString.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.\n*[[DocumentArray.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.\n*[[SchemaNumber.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.\n*[[SchemaDate.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.\n*[[SchemaBuffer.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.\n*[[SchemaBoolean.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.\n*[[ObjectId.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.\n*[[Mixed.schemaName]], This schema type's name, to defend against minifiers that manglefunction names.			
match	D								*[[SchemaString-match]], Sets a regexp validator.\n*[[Aggregate-match]], Appends a new custom $match operator to this aggregate pipeline.			
max	D								*[[SchemaNumber-max]], Sets a maximum number validator.\n*[[SchemaDate-max]], Sets a maximum date validator.			
min	D								*[[SchemaNumber-min]], Sets a minimum number validator.\n*[[SchemaDate-min]], Sets a minimum date validator.			
save	D								*[[Model-save]], Saves this document.\n*[[Collection-save]], Abstract method that drivers must implement.			
mapReduce	D								*[[Model.mapReduce]], Executes a mapReduce command.\n*[[Collection-mapReduce]], Abstract method that drivers must implement.			
CastError	R	Mongoose-CastError										
connect	R	Mongoose-connect										
createConnection	R	Mongoose-createConnection										
disconnect	R	Mongoose-disconnect										
DocumentProvider	R	Mongoose-DocumentProvider										
Query	R	Mongoose-Query										
connection	R	Mongoose-connection										
mongo	R	Mongoose-mongo										
mquery	R	Mongoose-mquery										
version	R	Mongoose-version										
destroy	R	QueryStream-destroy										
pause	R	QueryStream-pause										
pipe	R	QueryStream-pipe										
QueryStream	R	=QueryStream										
resume	R	QueryStream-resume										
paused	R	QueryStream-paused										
readable	R	QueryStream-readable										
open	R	Connection-open										
dropDatabase	R	Connection-dropDatabase										
openSet	R	Connection-openSet										
config	R	Connection-config										
collections	R	Connection-collections										
readyState	R	Connection-readyState										
pluralization	R	exports.pluralization										
uncountables	R	exports.uncountables										
useDb	R	NativeConnection-useDb										
STATES	R	NativeConnection.STATES										
MongooseError	R	=MongooseError										
eachAsync	R	QueryCursor-eachAsync										
map	R	QueryCursor-map										
next	R	QueryCursor-next										
QueryCursor	R	=QueryCursor										
applyGetters	R	VirtualType-applyGetters										
applySetters	R	VirtualType-applySetters										
add	R	Schema-add										
eachPath	R	Schema-eachPath										
indexes	R	Schema-indexes										
loadClass	R	Schema-loadClass										
method	R	Schema-method										
path	R	Schema-path										
pathType	R	Schema-pathType										
post	R	Schema-post										
pre	R	Schema-pre										
queue	R	Schema-queue										
requiredPaths	R	Schema-requiredPaths										
static	R	Schema-static										
virtual	R	Schema-virtual										
virtualpath	R	Schema-virtualpath										
indexTypes	R	Schema.indexTypes										
reserved	R	Schema.reserved										
obj	R	Schema-obj										
depopulate	R	Document-depopulate										
execPopulate	R	Document-execPopulate										
init	R	Document-init										
isDirectModified	R	Document-isDirectModified										
isInit	R	Document-isInit										
isModified	R	Document-isModified										
isSelected	R	Document-isSelected										
modifiedPaths	R	Document-modifiedPaths										
populated	R	Document-populated										
toJSON	R	Document-toJSON										
unmarkModified	R	Document-unmarkModified										
validateSync	R	Document-validateSync										
errors	R	Document-errors										
isNew	R	Document-isNew										
exports	R	=exports										
addToSet	R	MongooseArray.addToSet										
indexOf	R	MongooseArray.indexOf										
nonAtomicPush	R	MongooseArray.nonAtomicPush										
pop	R	MongooseArray.pop										
pull	R	MongooseArray.pull										
push	R	MongooseArray.push										
shift	R	MongooseArray.shift										
splice	R	MongooseArray.splice										
unshift	R	MongooseArray.unshift										
copy	R	MongooseBuffer.copy										
subtype	R	MongooseBuffer.subtype										
write	R	MongooseBuffer.write										
parent	R	EmbeddedDocument-parent										
parentArray	R	EmbeddedDocument-parentArray										
all	R	Query-all										
and	R	Query-and										
batchSize	R	Query-batchSize										
box	R	Query-box										
cast	R	Query-cast										
center	R	Query-center										
centerSphere	R	Query-centerSphere										
circle	R	Query-circle										
comment	R	Query-comment										
elemMatch	R	Query-elemMatch										
exists	R	Query-exists										
geometry	R	Query-geometry										
getQuery	R	Query-getQuery										
getUpdate	R	Query-getUpdate										
gt	R	Query-gt										
gte	R	Query-gte										
hint	R	Query-hint										
in	R	Query-in										
intersects	R	Query-intersects										
lean	R	Query-lean										
lt	R	Query-lt										
lte	R	Query-lte										
maxDistance	R	Query-maxDistance										
maxscan	R	Query-maxscan										
maxScan	R	Query-maxScan										
mod	R	Query-mod										
mongooseOptions	R	Query-mongooseOptions										
ne	R	Query-ne										
nearSphere	R	Query-nearSphere										
nin	R	Query-nin										
nor	R	Query-nor										
or	R	Query-or										
polygon	R	Query-polygon										
regex	R	Query-regex										
selected	R	Query-selected										
selectedExclusively	R	Query-selectedExclusively										
selectedInclusively	R	Query-selectedInclusively										
setOptions	R	Query-setOptions										
size	R	Query-size										
slaveOk	R	Query-slaveOk										
slice	R	Query-slice										
snapshot	R	Query-snapshot										
stream	R	Query-stream										
tailable	R	Query-tailable										
toConstructor	R	Query-toConstructor										
within	R	Query-within										
use%2524geoWithin	R	Query-use%2524geoWithin										
Decimal128	R	=Decimal128										
SchemaArray	R	=SchemaArray										
enum	R	SchemaString-enum										
lowercase	R	SchemaString-lowercase										
maxlength	R	SchemaString-maxlength										
minlength	R	SchemaString-minlength										
SchemaString	R	=SchemaString										
trim	R	SchemaString-trim										
uppercase	R	SchemaString-uppercase										
DocumentArray	R	=DocumentArray										
SchemaNumber	R	=SchemaNumber										
expires	R	SchemaDate-expires										
SchemaDate	R	=SchemaDate										
SchemaBuffer	R	=SchemaBuffer										
SchemaBoolean	R	=SchemaBoolean										
auto	R	ObjectId-auto										
Mixed	R	=Mixed										
Embedded	R	=Embedded										
addCursorFlag	R	Aggregate-addCursorFlag										
allowDiskUse	R	Aggregate-allowDiskUse										
append	R	Aggregate-append										
explain	R	Aggregate-explain										
facet	R	Aggregate-facet										
graphLookup	R	Aggregate-graphLookup										
group	R	Aggregate-group										
lookup	R	Aggregate-lookup										
project	R	Aggregate-project										
sample	R	Aggregate-sample										
unwind	R	Aggregate-unwind										
default	R	SchemaType-default										
required	R	SchemaType-required										
sparse	R	SchemaType-sparse										
text	R	SchemaType-text										
unique	R	SchemaType-unique										
addBack	R	Promise-addBack										
addCallback	R	Promise-addCallback										
addErrback	R	Promise-addErrback										
end	R	Promise-end										
error	R	Promise-error										
on	R	Promise-on										
Promise	R	=Promise										
reject	R	Promise-reject										
resolve	R	Promise-resolve										
complete	R	Promise.complete										
ES6	R	Promise.ES6										
fulfill	R	Promise.fulfill										
ES6Promise	R	=ES6Promise										
increment	R	Model-increment										
aggregate	R	Model.aggregate										
discriminator	R	Model.discriminator										
ensureIndexes	R	Model.ensureIndexes										
findById	R	Model.findById										
findByIdAndRemove	R	Model.findByIdAndRemove										
findByIdAndUpdate	R	Model.findByIdAndUpdate										
geoNear	R	Model.geoNear										
geoSearch	R	Model.geoSearch										
hydrate	R	Model.hydrate										
insertMany	R	Model.insertMany										
%2524where	R	Model-%2524where										
base	R	Model-base										
baseModelName	R	Model-baseModelName										
discriminators	R	Model-discriminators										
modelName	R	Model-modelName										
ensureIndex	R	Collection-ensureIndex										
findAndModify	R	Collection-findAndModify										
insert	R	Collection-insert										
collectionName	R	Collection-collectionName										
conn	R	Collection-conn										
name	R	Collection-name										
