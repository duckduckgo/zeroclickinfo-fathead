Mongoose-Aggregate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Aggregate()</code></pre><p>The Mongoose Aggregate constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Aggregate
Mongoose.Aggregate	R	Mongoose-Aggregate										
Mongoose Aggregate	R	Mongoose-Aggregate										
Mongoose-CastError	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#CastError(<code>type</code>, <code>value</code>, <code>path</code>, <code>[reason]</code>)</code></pre><p>The Mongoose CastError constructor</p><span class="prog__sub">Parameters:</span><ul><li><code>type</code><span class="types"> &lt;String&gt; </span><span>The name of the type</span></li><li><code>value</code><span class="types"> &lt;Any&gt; </span><span>The value that failed to cast</span></li><li><code>path</code><span class="types"> &lt;String&gt; </span><span>The path <code>a.b.c</code> in the doc where this cast error occurred</span></li><li><code>[reason]</code><span class="types"> &lt;Error&gt; </span><span>The original error that was thrown</span></li></ul></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-CastError
Mongoose.CastError	R	Mongoose-CastError										
Mongoose CastError	R	Mongoose-CastError										
Mongoose-Collection	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Collection()</code></pre><p>The Mongoose Collection constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Collection
Mongoose.Collection	R	Mongoose-Collection										
Mongoose Collection	R	Mongoose-Collection										
Mongoose-connect	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#connect(<code>uri(s)</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Opens the default mongoose connection.</p><p>If arguments are passed, they are proxied to either<br>Connection#open or<br>Connection#openSet appropriately.</p>\n\n<p><em>Options passed take precedence over options included in connection strings.</em></p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code>mongoose.connect(<span class="string">&apos;mongodb://user:pass@localhost:port/database&apos;</span>);\n\n<span class="comment">// replica sets</span>\n<span class="keyword">var</span> uri = <span class="string">&apos;mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/mydatabase&apos;</span>;\nmongoose.connect(uri);\n\n<span class="comment">// with options</span>\nmongoose.connect(uri, options);\n\n<span class="comment">// connecting to multiple mongos</span>\n<span class="keyword">var</span> uri = <span class="string">&apos;mongodb://hostA:27501,hostB:27501&apos;</span>;\n<span class="keyword">var</span> opts = { mongos: <span class="literal">true</span> };\nmongoose.connect(uri, opts);\n\n<span class="comment">// optional callback that gets fired when initial connection completed</span>\n<span class="keyword">var</span> uri = <span class="string">&apos;mongodb://nonexistent.domain:27000&apos;</span>;\nmongoose.connect(uri, <span class="keyword">function</span>(error) {\n  <span class="comment">// if error is truthy, the initial connection failed.</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>uri(s)</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;MongooseThenable&gt; </span><span>pseudo-promise wrapper around this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-connect
Mongoose.connect	R	Mongoose-connect										
Mongoose connect	R	Mongoose-connect										
Mongoose-Connection	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Connection()</code></pre><p>The Mongoose Connection constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Connection
Mongoose.Connection	R	Mongoose-Connection										
Mongoose Connection	R	Mongoose-Connection										
Mongoose-createConnection	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#createConnection(<code>[uri]</code>, <code>[options]</code>, <code>[options.config]</code>, <code>[options.config.autoIndex]</code>)</code></pre><p>Creates a Connection instance.</p><p>Each <code>connection</code> instance maps to a single database. This method is helpful when mangaging multiple db connections.</p>\n\n<p>If arguments are passed, they are proxied to either Connection#open or Connection#openSet appropriately. This means we can pass <code>db</code>, <code>server</code>, and <code>replset</code> options to the driver. <em>Note that the <code>safe</code> option specified in your schema will overwrite the <code>safe</code> db option specified here unless you set your schemas <code>safe</code> option to <code>undefined</code>. See this for more information.</em></p>\n\n<p><em>Options passed take precedence over options included in connection strings.</em></p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="comment">// with mongodb:// URI</span>\ndb = mongoose.createConnection(<span class="string">&apos;mongodb://user:pass@localhost:port/database&apos;</span>);\n\n<span class="comment">// and options</span>\n<span class="keyword">var</span> opts = { db: { native_parser: <span class="literal">true</span> }}\ndb = mongoose.createConnection(<span class="string">&apos;mongodb://user:pass@localhost:port/database&apos;</span>, opts);\n\n<span class="comment">// replica sets</span>\ndb = mongoose.createConnection(<span class="string">&apos;mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database&apos;</span>);\n\n<span class="comment">// and options</span>\n<span class="keyword">var</span> opts = { replset: { strategy: <span class="string">&apos;ping&apos;</span>, rs_name: <span class="string">&apos;testSet&apos;</span> }}\ndb = mongoose.createConnection(<span class="string">&apos;mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database&apos;</span>, opts);\n\n<span class="comment">// with [host, database_name[, port] signature</span>\ndb = mongoose.createConnection(<span class="string">&apos;localhost&apos;</span>, <span class="string">&apos;database&apos;</span>, port)\n\n<span class="comment">// and options</span>\n<span class="keyword">var</span> opts = { server: { auto_reconnect: <span class="literal">false</span> }, user: <span class="string">&apos;username&apos;</span>, pass: <span class="string">&apos;mypassword&apos;</span> }\ndb = mongoose.createConnection(<span class="string">&apos;localhost&apos;</span>, <span class="string">&apos;database&apos;</span>, port, opts)\n\n<span class="comment">// initialize now, connect later</span>\ndb = mongoose.createConnection();\ndb.open(<span class="string">&apos;localhost&apos;</span>, <span class="string">&apos;database&apos;</span>, port, [opts]);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[uri]</code><span class="types"> &lt;String&gt; </span><span>a mongodb:// URI</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>options to pass to the driver</span></li><li><code>[options.config]</code><span class="types"> &lt;Object&gt; </span><span>mongoose-specific options</span></li><li><code>[options.config.autoIndex]</code><span class="types"> &lt;Boolean&gt; </span><span>set to false to disable automatic index creation for all models associated with this connection.</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Connection&gt; </span><span>the created Connection object</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-createConnection
Mongoose.createConnection	R	Mongoose-createConnection										
Mongoose createConnection	R	Mongoose-createConnection										
Mongoose-disconnect	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#disconnect(<code>[fn]</code>)</code></pre><p>Disconnects all connections.</p><span class="prog__sub">Parameters:</span><ul><li><code>[fn]</code><span class="types"> &lt;Function&gt; </span><span>called after all connection close.</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;MongooseThenable&gt; </span><span>pseudo-promise wrapper around this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-disconnect
Mongoose.disconnect	R	Mongoose-disconnect										
Mongoose disconnect	R	Mongoose-disconnect										
Mongoose-Document	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Document()</code></pre><p>The Mongoose Document constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Document
Mongoose.Document	R	Mongoose-Document										
Mongoose Document	R	Mongoose-Document										
Mongoose-DocumentProvider	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#DocumentProvider()</code></pre><p>The Mongoose DocumentProvider constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-DocumentProvider
Mongoose.DocumentProvider	R	Mongoose-DocumentProvider										
Mongoose DocumentProvider	R	Mongoose-DocumentProvider										
Mongoose-Error	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Error()</code></pre><p>The MongooseError constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Error
Mongoose.Error	R	Mongoose-Error										
Mongoose Error	R	Mongoose-Error										
Mongoose-get	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#get(<code>key</code>)</code></pre><p>Gets mongoose options</p><span class="prog__sub">Example:</span>\n\n<pre><code>mongoose.get(<span class="string">&apos;test&apos;</span>) <span class="comment">// returns the &apos;test&apos; value</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-get
Mongoose.get	R	Mongoose-get										
Mongoose get	R	Mongoose-get										
Mongoose-model	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#model(<code>name</code>, <code>[schema]</code>, <code>[collection]</code>, <code>[skipInit]</code>)</code></pre><p>Defines a model or retrieves it.</p><p>Models defined on the <code>mongoose</code> instance are available to all connection created by the same <code>mongoose</code> instance.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> mongoose = require(<span class="string">&apos;mongoose&apos;</span>);\n\n<span class="comment">// define an Actor model with this mongoose instance</span>\nmongoose.model(<span class="string">&apos;Actor&apos;</span>, <span class="keyword">new</span> Schema({ name: String }));\n\n<span class="comment">// create a new connection</span>\n<span class="keyword">var</span> conn = mongoose.createConnection(..);\n\n<span class="comment">// retrieve the Actor model</span>\n<span class="keyword">var</span> Actor = conn.model(<span class="string">&apos;Actor&apos;</span>);</code></pre>\n\n<p><em>When no <code>collection</code> argument is passed, Mongoose produces a collection name by passing the model <code>name</code> to the utils.toCollectionName method. This method pluralizes the name. If you don&apos;t like this behavior, either pass a collection name or set your schemas collection name option.</em></p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ name: String }, { collection: <span class="string">&apos;actor&apos;</span> });\n\n<span class="comment">// or</span>\n\nschema.set(<span class="string">&apos;collection&apos;</span>, <span class="string">&apos;actor&apos;</span>);\n\n<span class="comment">// or</span>\n\n<span class="keyword">var</span> collectionName = <span class="string">&apos;actor&apos;</span>\n<span class="keyword">var</span> M = mongoose.model(<span class="string">&apos;Actor&apos;</span>, schema, collectionName)</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String, Function&gt; </span><span>model name or class extending Model</span></li><li><code>[schema]</code><span class="types"> &lt;Schema&gt; </span><span></span></li><li><code>[collection]</code><span class="types"> &lt;String&gt; </span><span>name (optional, inferred from model name)</span></li><li><code>[skipInit]</code><span class="types"> &lt;Boolean&gt; </span><span>whether to skip initialization (defaults to false)</span></li></ul></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-model
Mongoose.model	R	Mongoose-model										
Mongoose model	R	Mongoose-model										
Mongoose-Model	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Model()</code></pre><p>The Mongoose Model constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Model
Mongoose.Model	R	Mongoose-Model										
Mongoose Model	R	Mongoose-Model										
Mongoose-modelNames	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#modelNames()</code></pre><p>Returns an array of model names created on this instance of Mongoose.</p><span class="prog__sub">Note:</span>\n\n<p><em>Does not include names of models created using <code>connection.model()</code>.</em></p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Array&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-modelNames
Mongoose.modelNames	R	Mongoose-modelNames										
Mongoose modelNames	R	Mongoose-modelNames										
Mongoose	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose()</code></pre><p>Mongoose constructor.</p><p>The exports object of the <code>mongoose</code> module is an instance of this class.<br>Most apps will only use this one instance.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose
Mongoose-Mongoose	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Mongoose()</code></pre><p>The Mongoose constructor</p><p>The exports of the mongoose module is an instance of this class.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> mongoose = require(<span class="string">&apos;mongoose&apos;</span>);\n<span class="keyword">var</span> mongoose2 = <span class="keyword">new</span> mongoose.Mongoose();</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Mongoose
Mongoose.Mongoose	R	Mongoose-Mongoose										
Mongoose Mongoose	R	Mongoose-Mongoose										
Mongoose-plugin	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#plugin(<code>fn</code>, <code>[opts]</code>)</code></pre><p>Declares a global plugin executed on all Schemas.</p><p>Equivalent to calling <code>.plugin(fn)</code> on each Schema you create.</p><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span>plugin callback</span></li><li><code>[opts]</code><span class="types"> &lt;Object&gt; </span><span>optional options</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Mongoose&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-plugin
Mongoose.plugin	R	Mongoose-plugin										
Mongoose plugin	R	Mongoose-plugin										
Mongoose-PromiseProvider	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#PromiseProvider()</code></pre><p>Storage layer for mongoose promises</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-PromiseProvider
Mongoose.PromiseProvider	R	Mongoose-PromiseProvider										
Mongoose PromiseProvider	R	Mongoose-PromiseProvider										
Mongoose-Query	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Query()</code></pre><p>The Mongoose Query constructor.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Query
Mongoose.Query	R	Mongoose-Query										
Mongoose Query	R	Mongoose-Query										
Mongoose-Schema	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#Schema()</code></pre><p>The Mongoose Schema constructor</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> mongoose = require(<span class="string">&apos;mongoose&apos;</span>);\n<span class="keyword">var</span> Schema = mongoose.Schema;\n<span class="keyword">var</span> CatSchema = <span class="keyword">new</span> Schema(..);</code></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Schema
Mongoose.Schema	R	Mongoose-Schema										
Mongoose Schema	R	Mongoose-Schema										
Mongoose-SchemaType	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#SchemaType()</code></pre><p>The Mongoose SchemaType constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-SchemaType
Mongoose.SchemaType	R	Mongoose-SchemaType										
Mongoose SchemaType	R	Mongoose-SchemaType										
Mongoose-set	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#set(<code>key</code>, <code>value</code>)</code></pre><p>Sets mongoose options</p><span class="prog__sub">Example:</span>\n\n<pre><code>mongoose.set(<span class="string">&apos;test&apos;</span>, value) <span class="comment">// sets the &apos;test&apos; option to `value`</span>\n\nmongoose.set(<span class="string">&apos;debug&apos;</span>, <span class="literal">true</span>) <span class="comment">// enable logging collection methods + arguments to the console</span>\n\nmongoose.set(<span class="string">&apos;debug&apos;</span>, <span class="keyword">function</span>(collectionName, methodName, arg1, arg2...) {}); <span class="comment">// use custom function to log collection methods + arguments</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>value</code><span class="types"> &lt;String, Function&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-set
Mongoose.set	R	Mongoose-set										
Mongoose set	R	Mongoose-set										
	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>()</code></pre><p>Expose connection states for user-land</p></section>	http://mongoosejs.com/docs/api.html#index_
Mongoose-VirtualType	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#VirtualType()</code></pre><p>The Mongoose VirtualType constructor</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-VirtualType
Mongoose.VirtualType	R	Mongoose-VirtualType										
Mongoose VirtualType	R	Mongoose-VirtualType										
Mongoose-connection	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#<span>connection</span></code></pre><p>The default connection of the mongoose module.</p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Connection&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-connection
Mongoose.connection	R	Mongoose-connection										
Mongoose connection	R	Mongoose-connection										
Mongoose-mongo	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#<span>mongo</span></code></pre><p>The node-mongodb-native driver Mongoose uses.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-mongo
Mongoose.mongo	R	Mongoose-mongo										
Mongoose mongo	R	Mongoose-mongo										
Mongoose-mquery	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#<span>mquery</span></code></pre><p>The mquery query builder Mongoose uses.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-mquery
Mongoose.mquery	R	Mongoose-mquery										
Mongoose mquery	R	Mongoose-mquery										
Mongoose-SchemaTypes	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#<span>SchemaTypes</span></code></pre><p>The various Mongoose SchemaTypes.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-SchemaTypes
Mongoose.SchemaTypes	R	Mongoose-SchemaTypes										
Mongoose SchemaTypes	R	Mongoose-SchemaTypes										
Mongoose-Types	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#<span>Types</span></code></pre><p>The various Mongoose Types.</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-Types
Mongoose.Types	R	Mongoose-Types										
Mongoose Types	R	Mongoose-Types										
Mongoose-version	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mongoose#<span>version</span></code></pre><p>The Mongoose version</p></section>	http://mongoosejs.com/docs/api.html#index_Mongoose-version
Mongoose.version	R	Mongoose-version										
Mongoose version	R	Mongoose-version										
QueryStream-destroy	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#destroy(<code>[err]</code>)</code></pre><p>Destroys the stream, closing the underlying cursor, which emits the close event. No more events will be emitted after the close event.</p><span class="prog__sub">Parameters:</span><ul><li><code>[err]</code><span class="types"> &lt;Error&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-destroy
QueryStream.destroy	R	QueryStream-destroy										
QueryStream destroy	R	QueryStream-destroy										
QueryStream-pause	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#pause()</code></pre><p>Pauses this stream.</p></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-pause
QueryStream.pause	R	QueryStream-pause										
QueryStream pause	R	QueryStream-pause										
QueryStream-pipe	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#pipe()</code></pre><p>Pipes this query stream into another stream. This method is inherited from NodeJS Streams.</p><span class="prog__sub">Example:</span>\n\n<pre><code>query.stream().pipe(writeStream [, options])</code></pre></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-pipe
QueryStream.pipe	R	QueryStream-pipe										
QueryStream pipe	R	QueryStream-pipe										
QueryStream	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream(<code>query</code>, <code>[options]</code>)</code></pre><p>Provides a Node.js 0.8 style ReadStream interface for Queries.</p><pre><code><span class="keyword">var</span> stream = Model.find().stream();\n\nstream.on(<span class="string">&apos;data&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(doc)</span> {</span>\n  <span class="comment">// do something with the mongoose document</span>\n}).on(<span class="string">&apos;error&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  <span class="comment">// handle the error</span>\n}).on(<span class="string">&apos;close&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n  <span class="comment">// the stream is closed</span>\n});</code></pre>\n\n<p>The stream interface allows us to simply &quot;plug-in&quot; to other <em>Node.js 0.8</em> style write streams.</p>\n\n<pre><code>Model.where(<span class="string">&apos;created&apos;</span>).gte(twoWeeksAgo).stream().pipe(writeStream);</code></pre>\n\n<span class="prog__sub">Valid options</span>\n\n<ul>\n<li><code>transform</code>: optional function which accepts a mongoose document. The return value of the function will be emitted on <code>data</code>.</li>\n</ul>\n\n<span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// JSON.stringify all documents before emitting</span>\n<span class="keyword">var</span> stream = Thing.find().stream({ transform: JSON.stringify });\nstream.pipe(writeStream);</code></pre>\n\n<p><em>NOTE: plugging into an HTTP response will *not* work out of the box. Those streams expect only strings or buffers to be emitted, so first formatting our documents as strings/buffers is necessary.</em></p>\n\n<p><em>NOTE: these streams are Node.js 0.8 style read streams which differ from Node.js 0.10 style. Node.js 0.10 streams are not well tested yet and are not guaranteed to work.</em></p><span class="prog__sub">Events:</span><ul><li><p><code>data</code>: emits a single Mongoose document</p></li><li><p><code>error</code>: emits when an error occurs during streaming. This will emit <em>before</em> the <code>close</code> event.</p></li><li><p><code>close</code>: emits when the stream reaches the end of the cursor or an error occurs, or the stream is manually <code>destroy</code>ed. After this event, no more events are emitted.</p></li></ul><span class="prog__sub">Parameters:</span><ul><li><code>query</code><span class="types"> &lt;Query&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream
QueryStream-resume	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#resume()</code></pre><p>Resumes this stream.</p></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-resume
QueryStream.resume	R	QueryStream-resume										
QueryStream resume	R	QueryStream-resume										
QueryStream-paused	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#<span>paused</span></code></pre><p>Flag stating whether or not this stream is paused.</p></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-paused
QueryStream.paused	R	QueryStream-paused										
QueryStream paused	R	QueryStream-paused										
QueryStream-readable	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryStream#<span>readable</span></code></pre><p>Flag stating whether or not this stream is readable.</p></section>	http://mongoosejs.com/docs/api.html#querystream_QueryStream-readable
QueryStream.readable	R	QueryStream-readable										
QueryStream readable	R	QueryStream-readable										
Connection	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection(<code>base</code>)</code></pre><p>Connection constructor</p><p>For practical reasons, a Connection equals a Db.</p><span class="prog__sub">Events:</span><ul><li><p><code>connecting</code>: Emitted when <code>connection.{open,openSet}()</code> is executed on this connection.</p></li><li><p><code>connected</code>: Emitted when this connection successfully connects to the db. May be emitted <em>multiple</em> times in <code>reconnected</code> scenarios.</p></li><li><p><code>open</code>: Emitted after we <code>connected</code> and <code>onOpen</code> is executed on all of this connections models.</p></li><li><p><code>disconnecting</code>: Emitted when <code>connection.close()</code> was executed.</p></li><li><p><code>disconnected</code>: Emitted after getting disconnected from the db.</p></li><li><p><code>close</code>: Emitted after we <code>disconnected</code> and <code>onClose</code> executed on all of this connections models.</p></li><li><p><code>reconnected</code>: Emitted after we <code>connected</code> and subsequently <code>disconnected</code>, followed by successfully another successfull connection.</p></li><li><p><code>error</code>: Emitted when an error occurs on this connection.</p></li><li><p><code>fullsetup</code>: Emitted in a replica-set scenario, when primary and at least one seconaries specified in the connection string are connected.</p></li><li><p><code>all</code>: Emitted in a replica-set scenario, when all nodes specified in the connection string are connected.</p></li></ul><span class="prog__sub">Parameters:</span><ul><li><code>base</code><span class="types"> &lt;Mongoose&gt; </span><span>a mongoose instance</span></li></ul></section>	http://mongoosejs.com/docs/api.html#connection_Connection
Connection-open	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#open(<code>connection_string</code>, <code>[database]</code>, <code>[port]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Opens the connection to MongoDB.</p><p><code>options</code> is a hash with the following possible properties:</p>\n\n<pre><code>config  - passed to the connection config instance\ndb      - passed to the connection db instance\nserver  - passed to the connection server instance(s)\nreplset - passed to the connection ReplSet instance\nuser    - username for authentication\npass    - password for authentication\nauth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\n</code></pre>\n\n<span class="prog__sub">Notes:</span>\n\n<p>Mongoose forces the db option <code>forceServerObjectId</code> false and cannot be overridden.<br>Mongoose defaults the server <code>auto_reconnect</code> options to true which can be overridden.<br>See the node-mongodb-native driver instance for options that it understands.</p>\n\n<p><em>Options passed take precedence over options included in connection strings.</em></p><span class="prog__sub">Parameters:</span><ul><li><code>connection_string</code><span class="types"> &lt;String&gt; </span><span>mongodb://uri or the host to which you are connecting</span></li><li><code>[database]</code><span class="types"> &lt;String&gt; </span><span>database name</span></li><li><code>[port]</code><span class="types"> &lt;Number&gt; </span><span>database port</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>options</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#connection_Connection-open
Connection.open	R	Connection-open										
Connection open	R	Connection-open										
Connection-dropDatabase	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#dropDatabase(<code>callback</code>)</code></pre><p>Helper for <code>dropDatabase()</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>callback</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#connection_Connection-dropDatabase
Connection.dropDatabase	R	Connection-dropDatabase										
Connection dropDatabase	R	Connection-dropDatabase										
Connection-openSet	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#openSet(<code>uris</code>, <code>[database]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Opens the connection to a replica set.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> db = mongoose.createConnection();\ndb.openSet(<span class="string">&quot;mongodb://user:pwd@localhost:27020,localhost:27021,localhost:27012/mydb&quot;</span>);</code></pre>\n\n<p>The database name and/or auth need only be included in one URI.<br>The <code>options</code> is a hash which is passed to the internal driver connection object.</p>\n\n<p>Valid <code>options</code></p>\n\n<pre><code>db      - passed to the connection db instance\nserver  - passed to the connection server instance(s)\nreplset - passed to the connection ReplSetServer instance\nuser    - username for authentication\npass    - password for authentication\nauth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\nmongos  - Boolean - if true, enables High Availability support for mongos\n</code></pre>\n\n<p><em>Options passed take precedence over options included in connection strings.</em></p>\n\n<span class="prog__sub">Notes:</span>\n\n<p><em>If connecting to multiple mongos servers, set the <code>mongos</code> option to true.</em></p>\n\n<pre><code>conn.open(<span class="string">&apos;mongodb://mongosA:27501,mongosB:27501&apos;</span>, { mongos: <span class="literal">true</span> }, cb);</code></pre>\n\n<p>Mongoose forces the db option <code>forceServerObjectId</code> false and cannot be overridden.<br>Mongoose defaults the server <code>auto_reconnect</code> options to true which can be overridden.<br>See the node-mongodb-native driver instance for options that it understands.</p>\n\n<p><em>Options passed take precedence over options included in connection strings.</em></p><span class="prog__sub">Parameters:</span><ul><li><code>uris</code><span class="types"> &lt;String&gt; </span><span>MongoDB connection string</span></li><li><code>[database]</code><span class="types"> &lt;String&gt; </span><span>database name if not included in <code>uris</code></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>passed to the internal driver</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#connection_Connection-openSet
Connection.openSet	R	Connection-openSet										
Connection openSet	R	Connection-openSet										
Connection-close	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#close(<code>[callback]</code>)</code></pre><p>Closes the connection</p><span class="prog__sub">Parameters:</span><ul><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span>optional</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Connection&gt; </span><span>self</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#connection_Connection-close
Connection.close	R	Connection-close										
Connection close	R	Connection-close										
Connection-collection	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#collection(<code>name</code>, <code>[options]</code>)</code></pre><p>Retrieves a collection, creating it if not cached.</p><p>Not typically needed by applications. Just talk to your collection through your model.</p><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String&gt; </span><span>of the collection</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>optional collection options</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Collection&gt; </span><span>collection instance</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#connection_Connection-collection
Connection.collection	R	Connection-collection										
Connection collection	R	Connection-collection										
Connection-model	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#model(<code>name</code>, <code>[schema]</code>, <code>[collection]</code>)</code></pre><p>Defines or retrieves a model.</p><pre><code><span class="keyword">var</span> mongoose = require(<span class="string">&apos;mongoose&apos;</span>);\n<span class="keyword">var</span> db = mongoose.createConnection(..);\ndb.model(<span class="string">&apos;Venue&apos;</span>, <span class="keyword">new</span> Schema(..));\n<span class="keyword">var</span> Ticket = db.model(<span class="string">&apos;Ticket&apos;</span>, <span class="keyword">new</span> Schema(..));\n<span class="keyword">var</span> Venue = db.model(<span class="string">&apos;Venue&apos;</span>);</code></pre>\n\n<p><em>When no <code>collection</code> argument is passed, Mongoose produces a collection name by passing the model <code>name</code> to the utils.toCollectionName method. This method pluralizes the name. If you don&apos;t like this behavior, either pass a collection name or set your schemas collection name option.</em></p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ name: String }, { collection: <span class="string">&apos;actor&apos;</span> });\n\n<span class="comment">// or</span>\n\nschema.set(<span class="string">&apos;collection&apos;</span>, <span class="string">&apos;actor&apos;</span>);\n\n<span class="comment">// or</span>\n\n<span class="keyword">var</span> collectionName = <span class="string">&apos;actor&apos;</span>\n<span class="keyword">var</span> M = conn.model(<span class="string">&apos;Actor&apos;</span>, schema, collectionName)</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String&gt; </span><span>the model name</span></li><li><code>[schema]</code><span class="types"> &lt;Schema&gt; </span><span>a schema. necessary when defining a model</span></li><li><code>[collection]</code><span class="types"> &lt;String&gt; </span><span>name of mongodb collection (optional) if not given it will be induced from model name</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Model&gt; </span><span>The compiled model</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#connection_Connection-model
Connection.model	R	Connection-model										
Connection model	R	Connection-model										
Connection-modelNames	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#modelNames()</code></pre><p>Returns an array of model names created on this connection.</p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Array&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#connection_Connection-modelNames
Connection.modelNames	R	Connection-modelNames										
Connection modelNames	R	Connection-modelNames										
Connection-config	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#<span>config</span></code></pre><p>A hash of the global options that are associated with this connection</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-config
Connection.config	R	Connection-config										
Connection config	R	Connection-config										
Connection-db	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#<span>db</span></code></pre><p>The mongodb.Db instance, set when the connection is opened</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-db
Connection.db	R	Connection-db										
Connection db	R	Connection-db										
Connection-collections	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#<span>collections</span></code></pre><p>A hash of the collections associated with this connection</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-collections
Connection.collections	R	Connection-collections										
Connection collections	R	Connection-collections										
Connection-readyState	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Connection#<span>readyState</span></code></pre><p>Connection ready state</p></section>	http://mongoosejs.com/docs/api.html#connection_Connection-readyState
Connection.readyState	R	Connection-readyState										
Connection readyState	R	Connection-readyState										
exports.pluralization	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.pluralization</code></pre><p>Pluralization rules.</p></section>	http://mongoosejs.com/docs/api.html#utils_exports.pluralization
exports pluralization	R	exports.pluralization										
exports.uncountables	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.uncountables</code></pre><p>Uncountable words.</p></section>	http://mongoosejs.com/docs/api.html#utils_exports.uncountables
exports uncountables	R	exports.uncountables										
exports.Document	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.Document()</code></pre><p>The Mongoose browser Document constructor.</p></section>	http://mongoosejs.com/docs/api.html#browser_exports.Document
exports Document	R	exports.Document										
exports.Error	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.Error()</code></pre><p>The MongooseError constructor.</p></section>	http://mongoosejs.com/docs/api.html#browser_exports.Error
exports Error	R	exports.Error										
exports.PromiseProvider	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.PromiseProvider()</code></pre><p>Storage layer for mongoose promises</p></section>	http://mongoosejs.com/docs/api.html#browser_exports.PromiseProvider
exports PromiseProvider	R	exports.PromiseProvider										
exports.Schema	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.Schema()</code></pre><p>The Mongoose Schema constructor</p></section>	http://mongoosejs.com/docs/api.html#browser_exports.Schema
exports Schema	R	exports.Schema										
exports.VirtualType	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports.VirtualType()</code></pre><p>The Mongoose VirtualType constructor</p></section>	http://mongoosejs.com/docs/api.html#browser_exports.VirtualType
exports VirtualType	R	exports.VirtualType										
exports-SchemaTypes	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports#<span>SchemaTypes</span></code></pre><p>The various Mongoose SchemaTypes.</p></section>	http://mongoosejs.com/docs/api.html#browser_exports-SchemaTypes
exports.SchemaTypes	R	exports-SchemaTypes										
exports SchemaTypes	R	exports-SchemaTypes										
exports-Types	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports#<span>Types</span></code></pre><p>The various Mongoose Types.</p></section>	http://mongoosejs.com/docs/api.html#browser_exports-Types
exports.Types	R	exports-Types										
exports Types	R	exports-Types										
NativeCollection-getIndexes	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>NativeCollection#getIndexes(<code>callback</code>)</code></pre><p>Retreives information about this collections indexes.</p><span class="prog__sub">Parameters:</span><ul><li><code>callback</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#drivers_node-mongodb-native_collection_NativeCollection-getIndexes
NativeCollection.getIndexes	R	NativeCollection-getIndexes										
NativeCollection getIndexes	R	NativeCollection-getIndexes										
NativeConnection-useDb	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>NativeConnection#useDb(<code>name</code>)</code></pre><p>Switches to a different database using the same connection pool.</p><p>Returns a new connection object, with the new db.</p><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String&gt; </span><span>The database name</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Connection&gt; </span><span>New Connection Object</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#drivers_node-mongodb-native_connection_NativeConnection-useDb
NativeConnection.useDb	R	NativeConnection-useDb										
NativeConnection useDb	R	NativeConnection-useDb										
NativeConnection.STATES	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>NativeConnection.STATES</code></pre><p>Expose the possible connection states.</p></section>	http://mongoosejs.com/docs/api.html#drivers_node-mongodb-native_connection_NativeConnection.STATES
NativeConnection STATES	R	NativeConnection.STATES										
MongooseError.messages	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseError.messages()</code></pre><p>The default built-in validator error messages. These may be customized.</p></section>	http://mongoosejs.com/docs/api.html#error_messages_MongooseError.messages
MongooseError messages	R	MongooseError.messages										
ValidationError-toString	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ValidationError#toString()</code></pre><p>Console.log helper</p></section>	http://mongoosejs.com/docs/api.html#error_validation_ValidationError-toString
ValidationError.toString	R	ValidationError-toString										
ValidationError toString	R	ValidationError-toString										
MongooseError	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseError(<code>msg</code>)</code></pre><p>MongooseError constructor</p><span class="prog__sub">Parameters:</span><ul><li><code>msg</code><span class="types"> &lt;String&gt; </span><span>Error message</span></li></ul></section>	http://mongoosejs.com/docs/api.html#error_MongooseError
MongooseError.messages	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseError.messages</code></pre><p>The default built-in validator error messages.</p></section>	http://mongoosejs.com/docs/api.html#error_MongooseError.messages
MongooseError messages	R	MongooseError.messages										
QueryCursor-close	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor#close(<code>callback</code>)</code></pre><p>Marks this cursor as closed. Will stop streaming and subsequent calls to<br><code>next()</code> will error.</p><span class="prog__sub">Parameters:</span><ul><li><code>callback</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor-close
QueryCursor.close	R	QueryCursor-close										
QueryCursor close	R	QueryCursor-close										
QueryCursor-eachAsync	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor#eachAsync(<code>fn</code>, <code>[callback]</code>)</code></pre><p>Execute <code>fn</code> for every document in the cursor. If <code>fn</code> returns a promise,<br>will wait for the promise to resolve before iterating on to the next one.<br>Returns a promise that resolves when done.</p><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span>executed when all docs have been processed</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor-eachAsync
QueryCursor.eachAsync	R	QueryCursor-eachAsync										
QueryCursor eachAsync	R	QueryCursor-eachAsync										
QueryCursor-map	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor#map(<code>fn</code>)</code></pre><p>Registers a transform function which subsequently maps documents retrieved<br>via the streams interface or <code>.next()</code></p><span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// Map documents returned by `data` events</span>\nThing.\n  find({ name: <span class="regexp">/^hello/</span> }).\n  cursor().\n  map(<span class="function"><span class="keyword">function</span> <span class="params">(doc)</span> {</span>\n   doc.foo = <span class="string">&quot;bar&quot;</span>;\n   <span class="keyword">return</span> doc;\n  })\n  on(<span class="string">&apos;data&apos;</span>, <span class="keyword">function</span>(doc) { console.log(doc.foo); });\n\n<span class="comment">// Or map documents returned by `.next()`</span>\n<span class="keyword">var</span> cursor = Thing.find({ name: <span class="regexp">/^hello/</span> }).\n  cursor().\n  map(<span class="function"><span class="keyword">function</span> <span class="params">(doc)</span> {</span>\n    doc.foo = <span class="string">&quot;bar&quot;</span>;\n    <span class="keyword">return</span> doc;\n  });\ncursor.next(<span class="keyword">function</span>(error, doc) {\n  console.log(doc.foo);\n});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;QueryCursor&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor-map
QueryCursor.map	R	QueryCursor-map										
QueryCursor map	R	QueryCursor-map										
QueryCursor-next	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor#next(<code>callback</code>)</code></pre><p>Get the next document from this cursor. Will return <code>null</code> when there are<br>no documents left.</p><span class="prog__sub">Parameters:</span><ul><li><code>callback</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor-next
QueryCursor.next	R	QueryCursor-next										
QueryCursor next	R	QueryCursor-next										
QueryCursor	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>QueryCursor(<code>query</code>, <code>options</code>)</code></pre><p>A QueryCursor is a concurrency primitive for processing query results<br>one document at a time. A QueryCursor fulfills the Node.js streams3 API,<br>in addition to several other mechanisms for loading documents from MongoDB<br>one at a time.</p><p>Unless you&apos;re an advanced user, do <strong>not</strong> instantiate this class directly.<br>Use <code>Query#cursor()</code> instead.</p><span class="prog__sub">Events:</span><ul><li><p><code>cursor</code>: Emitted when the cursor is created</p></li><li><p><code>error</code>: Emitted when an error occurred</p></li><li><p><code>data</code>: Emitted when the stream is flowing and the next doc is ready</p></li><li><p><code>end</code>: Emitted when the stream is exhausted</p></li></ul><span class="prog__sub">Parameters:</span><ul><li><code>query</code><span class="types"> &lt;Query&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span>query options passed to <code>.find()</code></span></li></ul></section>	http://mongoosejs.com/docs/api.html#querycursor_QueryCursor
VirtualType-applyGetters	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType#applyGetters(<code>value</code>, <code>scope</code>)</code></pre><p>Applies getters to <code>value</code> using optional <code>scope</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>scope</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;T&gt; </span><span>the value after applying all getters</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType-applyGetters
VirtualType.applyGetters	R	VirtualType-applyGetters										
VirtualType applyGetters	R	VirtualType-applyGetters										
VirtualType-applySetters	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType#applySetters(<code>value</code>, <code>scope</code>)</code></pre><p>Applies setters to <code>value</code> using optional <code>scope</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>scope</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;T&gt; </span><span>the value after applying all setters</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType-applySetters
VirtualType.applySetters	R	VirtualType-applySetters										
VirtualType applySetters	R	VirtualType-applySetters										
VirtualType-get	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType#get(<code>fn</code>)</code></pre><p>Defines a getter.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> virtual = schema.virtual(<span class="string">&apos;fullname&apos;</span>);\nvirtual.get(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n  <span class="keyword">return</span> <span class="keyword">this</span>.name.first + <span class="string">&apos; &apos;</span> + <span class="keyword">this</span>.name.last;\n});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;VirtualType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType-get
VirtualType.get	R	VirtualType-get										
VirtualType get	R	VirtualType-get										
VirtualType-set	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType#set(<code>fn</code>)</code></pre><p>Defines a setter.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> virtual = schema.virtual(<span class="string">&apos;fullname&apos;</span>);\nvirtual.set(<span class="function"><span class="keyword">function</span> <span class="params">(v)</span> {</span>\n  <span class="keyword">var</span> parts = v.split(<span class="string">&apos; &apos;</span>);\n  <span class="keyword">this</span>.name.first = parts[<span class="number">0</span>];\n  <span class="keyword">this</span>.name.last = parts[<span class="number">1</span>];\n});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;VirtualType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType-set
VirtualType.set	R	VirtualType-set										
VirtualType set	R	VirtualType-set										
VirtualType	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>VirtualType()</code></pre><p>VirtualType constructor</p><p>This is what mongoose uses to define virtual attributes via <code>Schema.prototype.virtual</code>.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> fullname = schema.virtual(<span class="string">&apos;fullname&apos;</span>);\nfullname <span class="keyword">instanceof</span> mongoose.VirtualType <span class="comment">// true</span></code></pre></section>	http://mongoosejs.com/docs/api.html#virtualtype_VirtualType
Schema-add	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#add(<code>obj</code>, <code>prefix</code>)</code></pre><p>Adds key path / schema type pairs to this schema.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> ToySchema = <span class="keyword">new</span> Schema;\nToySchema.add({ name: <span class="string">&apos;string&apos;</span>, color: <span class="string">&apos;string&apos;</span>, price: <span class="string">&apos;number&apos;</span> });</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>obj</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>prefix</code><span class="types"> &lt;String&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-add
Schema.add	R	Schema-add										
Schema add	R	Schema-add										
Schema-eachPath	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#eachPath(<code>fn</code>)</code></pre><p>Iterates the schemas paths similar to Array#forEach.</p><p>The callback is passed the pathname and schemaType as arguments on each iteration.</p><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span>callback function</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Schema&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-eachPath
Schema.eachPath	R	Schema-eachPath										
Schema eachPath	R	Schema-eachPath										
Schema-get	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#get(<code>key</code>)</code></pre><p>Gets a schema option.</p><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span>option name</span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-get
Schema.get	R	Schema-get										
Schema get	R	Schema-get										
Schema-index	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#index(<code>fields</code>, <code>[options]</code>, <code>[options.expires=null]</code>)</code></pre><p>Defines an index (most likely compound) for this schema.</p><span class="prog__sub">Example</span>\n\n<pre><code>schema.index({ first: <span class="number">1</span>, last: -<span class="number">1</span> })</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>fields</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>Options to pass to MongoDB driver&apos;s <code>createIndex()</code> function</span></li><li><code>[options.expires=null]</code><span class="types"> &lt;String&gt; </span><span>Mongoose-specific syntactic sugar, uses ms to convert <code>expires</code> option into seconds for the <code>expireAfterSeconds</code> in the above link.</span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-index
Schema.index	R	Schema-index										
Schema index	R	Schema-index										
Schema-indexes	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#indexes()</code></pre><p>Compiles indexes from fields and schema-level indexes</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema-indexes
Schema.indexes	R	Schema-indexes										
Schema indexes	R	Schema-indexes										
Schema-loadClass	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#loadClass(<code>model</code>)</code></pre><p>Loads an ES6 class into a schema. Maps setters + getters, static methods, and instance methods to schema virtuals, statics, and methods.</p><span class="prog__sub">Parameters:</span><ul><li><code>model</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-loadClass
Schema.loadClass	R	Schema-loadClass										
Schema loadClass	R	Schema-loadClass										
Schema-method	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#method(<code>method</code>, <code>[fn]</code>)</code></pre><p>Adds an instance method to documents constructed from Models compiled from this schema.</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="keyword">var</span> schema = kittySchema = <span class="keyword">new</span> Schema(..);\n\nschema.method(<span class="string">&apos;meow&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n  console.log(<span class="string">&apos;meeeeeoooooooooooow&apos;</span>);\n})\n\n<span class="keyword">var</span> Kitty = mongoose.model(<span class="string">&apos;Kitty&apos;</span>, schema);\n\n<span class="keyword">var</span> fizz = <span class="keyword">new</span> Kitty;\nfizz.meow(); <span class="comment">// meeeeeooooooooooooow</span></code></pre>\n\n<p>If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.</p>\n\n<pre><code>schema.method({\n    purr: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>}\n  , scratch: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>}\n});\n\n<span class="comment">// later</span>\nfizz.purr();\nfizz.scratch();</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>method</code><span class="types"> &lt;String, Object&gt; </span><span>name</span></li><li><code>[fn]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-method
Schema.method	R	Schema-method										
Schema method	R	Schema-method										
Schema-path	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#path(<code>path</code>, <code>constructor</code>)</code></pre><p>Gets/sets schema paths.</p><p>Sets a path (if arity 2)<br>Gets a path (if arity 1)</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code>schema.path(<span class="string">&apos;name&apos;</span>) <span class="comment">// returns a SchemaType</span>\nschema.path(<span class="string">&apos;name&apos;</span>, Number) <span class="comment">// changes the schemaType of `name` to Number</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>constructor</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-path
Schema.path	R	Schema-path										
Schema path	R	Schema-path										
Schema-pathType	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#pathType(<code>path</code>)</code></pre><p>Returns the pathType of <code>path</code> for this schema.</p><p>Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;String&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-pathType
Schema.pathType	R	Schema-pathType										
Schema pathType	R	Schema-pathType										
Schema-plugin	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#plugin(<code>plugin</code>, <code>[opts]</code>)</code></pre><p>Registers a plugin for this schema.</p><span class="prog__sub">Parameters:</span><ul><li><code>plugin</code><span class="types"> &lt;Function&gt; </span><span>callback</span></li><li><code>[opts]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-plugin
Schema.plugin	R	Schema-plugin										
Schema plugin	R	Schema-plugin										
Schema-post	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#post(<code>method</code>, <code>fn</code>)</code></pre><p>Defines a post hook for the document</p><pre><code><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema(..);\nschema.post(<span class="string">&apos;save&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(doc)</span> {</span>\n  console.log(<span class="string">&apos;this fired after a document was saved&apos;</span>);\n});\n\nshema.post(<span class="string">&apos;find&apos;</span>, <span class="keyword">function</span>(docs) {\n  console.log(<span class="string">&apos;this fired after you run a find query&apos;</span>);\n});\n\n<span class="keyword">var</span> Model = mongoose.model(<span class="string">&apos;Model&apos;</span>, schema);\n\n<span class="keyword">var</span> m = <span class="keyword">new</span> Model(..);\nm.save(<span class="keyword">function</span>(err) {\n  console.log(<span class="string">&apos;this fires after the `post` hook&apos;</span>);\n});\n\nm.find(<span class="keyword">function</span>(err, docs) {\n  console.log(<span class="string">&apos;this fires after the post find hook&apos;</span>);\n});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>method</code><span class="types"> &lt;String&gt; </span><span>name of the method to hook</span></li><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span>callback</span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-post
Schema.post	R	Schema-post										
Schema post	R	Schema-post										
Schema-pre	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#pre(<code>method</code>, <code>callback</code>)</code></pre><p>Defines a pre hook for the document.</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="keyword">var</span> toySchema = <span class="keyword">new</span> Schema(..);\n\ntoySchema.pre(<span class="string">&apos;save&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(next)</span> {</span>\n  <span class="keyword">if</span> (!<span class="keyword">this</span>.created) <span class="keyword">this</span>.created = <span class="keyword">new</span> Date;\n  next();\n})\n\ntoySchema.pre(<span class="string">&apos;validate&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(next)</span> {</span>\n  <span class="keyword">if</span> (<span class="keyword">this</span>.name !== <span class="string">&apos;Woody&apos;</span>) <span class="keyword">this</span>.name = <span class="string">&apos;Woody&apos;</span>;\n  next();\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>method</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>callback</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-pre
Schema.pre	R	Schema-pre										
Schema pre	R	Schema-pre										
Schema-queue	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#queue(<code>name</code>, <code>args</code>)</code></pre><p>Adds a method call to the queue.</p><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String&gt; </span><span>name of the document method to call later</span></li><li><code>args</code><span class="types"> &lt;Array&gt; </span><span>arguments to pass to the method</span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-queue
Schema.queue	R	Schema-queue										
Schema queue	R	Schema-queue										
Schema-remove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#remove(<code>path</code>)</code></pre><p>Removes the given <code>path</code> (or [<code>paths</code>]).</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String, Array&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-remove
Schema.remove	R	Schema-remove										
Schema remove	R	Schema-remove										
Schema-requiredPaths	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#requiredPaths(<code>invalidate</code>)</code></pre><p>Returns an Array of path strings that are required by this schema.</p><span class="prog__sub">Parameters:</span><ul><li><code>invalidate</code><span class="types"> &lt;Boolean&gt; </span><span>refresh the cache</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Array&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-requiredPaths
Schema.requiredPaths	R	Schema-requiredPaths										
Schema requiredPaths	R	Schema-requiredPaths										
Schema	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema(<code>definition</code>, <code>[options]</code>)</code></pre><p>Schema constructor.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> child = <span class="keyword">new</span> Schema({ name: String });\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ name: String, age: Number, children: [child] });\n<span class="keyword">var</span> Tree = mongoose.model(<span class="string">&apos;Tree&apos;</span>, schema);\n\n<span class="comment">// setting schema options</span>\n<span class="keyword">new</span> Schema({ name: String }, { _id: <span class="literal">false</span>, autoIndex: <span class="literal">false</span> })</code></pre>\n\n<span class="prog__sub">Options:</span>\n\n<ul>\n<li>autoIndex: bool - defaults to null (which means use the connection&apos;s autoIndex option)</li>\n<li>bufferCommands: bool - defaults to true</li>\n<li>capped: bool - defaults to false</li>\n<li>collection: string - no default</li>\n<li>emitIndexErrors: bool - defaults to false.</li>\n<li>id: bool - defaults to true</li>\n<li>_id: bool - defaults to true</li>\n<li><code>minimize</code>: bool - controls document#toObject behavior when called manually - defaults to true</li>\n<li>read: string</li>\n<li>safe: bool - defaults to true.</li>\n<li>shardKey: bool - defaults to <code>null</code></li>\n<li>strict: bool - defaults to true</li>\n<li>toJSON - object - no default</li>\n<li>toObject - object - no default</li>\n<li>typeKey - string - defaults to &apos;type&apos;</li>\n<li>useNestedStrict - boolean - defaults to false</li>\n<li>validateBeforeSave - bool - defaults to <code>true</code></li>\n<li>versionKey: string - defaults to &quot;__v&quot;</li>\n</ul>\n\n<span class="prog__sub">Note:</span>\n\n<p><em>When nesting schemas, (<code>children</code> in the example above), always declare the child schema first before passing it into its parent.</em></p><span class="prog__sub">Events:</span><ul><li><p><code>init</code>: Emitted after the schema is compiled into a <code>Model</code>.</p></li></ul><span class="prog__sub">Parameters:</span><ul><li><code>definition</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema
Schema-set	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#set(<code>key</code>, <code>[value]</code>)</code></pre><p>Sets/gets a schema option.</p><span class="prog__sub">Example</span>\n\n<pre><code>schema.set(<span class="string">&apos;strict&apos;</span>); <span class="comment">// &apos;true&apos; by default</span>\nschema.set(<span class="string">&apos;strict&apos;</span>, <span class="literal">false</span>); <span class="comment">// Sets &apos;strict&apos; to false</span>\nschema.set(<span class="string">&apos;strict&apos;</span>); <span class="comment">// &apos;false&apos;</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span>option name</span></li><li><code>[value]</code><span class="types"> &lt;Object&gt; </span><span>if not passed, the current option value is returned</span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-set
Schema.set	R	Schema-set										
Schema set	R	Schema-set										
Schema-static	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#static(<code>name</code>, <code>[fn]</code>)</code></pre><p>Adds static &quot;class&quot; methods to Models compiled from this schema.</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema(..);\nschema.static(<span class="string">&apos;findByName&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(name, callback)</span> {</span>\n  <span class="keyword">return</span> <span class="keyword">this</span>.find({ name: name }, callback);\n});\n\n<span class="keyword">var</span> Drink = mongoose.model(<span class="string">&apos;Drink&apos;</span>, schema);\nDrink.findByName(<span class="string">&apos;sanpellegrino&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err, drinks)</span> {</span>\n  <span class="comment">//</span>\n});</code></pre>\n\n<p>If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.</p><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String, Object&gt; </span><span></span></li><li><code>[fn]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_Schema-static
Schema.static	R	Schema-static										
Schema static	R	Schema-static										
Schema-virtual	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#virtual(<code>name</code>, <code>[options]</code>)</code></pre><p>Creates a virtual type with the given name.</p><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;VirtualType&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-virtual
Schema.virtual	R	Schema-virtual										
Schema virtual	R	Schema-virtual										
Schema-virtualpath	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#virtualpath(<code>name</code>)</code></pre><p>Returns the virtual type with the given <code>name</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;VirtualType&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_Schema-virtualpath
Schema.virtualpath	R	Schema-virtualpath										
Schema virtualpath	R	Schema-virtualpath										
Schema.indexTypes	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema.indexTypes()</code></pre><p>The allowed index types</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema.indexTypes
Schema indexTypes	R	Schema.indexTypes										
Schema.reserved	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema.reserved</code></pre><p>Reserved document keys.</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema.reserved
Schema reserved	R	Schema.reserved										
Schema.Types	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema.Types</code></pre><p>The various built-in Mongoose Schema Types.</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema.Types
Schema Types	R	Schema.Types										
Schema-obj	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Schema#<span>obj</span></code></pre><p>The original object passed to the schema constructor</p></section>	http://mongoosejs.com/docs/api.html#schema_Schema-obj
Schema.obj	R	Schema-obj										
Schema obj	R	Schema-obj										
Document-depopulate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#depopulate(<code>path</code>)</code></pre><p>Takes a populated field and returns it to its unpopulated state.</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.findOne().populate(<span class="string">&apos;author&apos;</span>).exec(<span class="function"><span class="keyword">function</span> <span class="params">(err, doc)</span> {</span>\n  console.log(doc.author.name); <span class="comment">// Dr.Seuss</span>\n  console.log(doc.depopulate(<span class="string">&apos;author&apos;</span>));\n  console.log(doc.author); <span class="comment">// &apos;5144cf8050f071d979c118a7&apos;</span>\n})</code></pre>\n\n<p>If the path was not populated, this is a no-op.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#document_Document-depopulate
Document.depopulate	R	Document-depopulate										
Document depopulate	R	Document-depopulate										
Document-equals	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#equals(<code>doc</code>)</code></pre><p>Returns true if the Document stores the same data as doc.</p><p>Documents are considered equal when they have matching <code>_id</code>s, unless neither<br>document has an <code>_id</code>, in which case this function falls back to using<br><code>deepEqual()</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>doc</code><span class="types"> &lt;Document&gt; </span><span>a document to compare</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-equals
Document.equals	R	Document-equals										
Document equals	R	Document-equals										
Document-execPopulate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#execPopulate()</code></pre><p>Explicitly executes population and returns a promise. Useful for ES2015<br>integration.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> promise = doc.\n  populate(<span class="string">&apos;company&apos;</span>).\n  populate({\n    path: <span class="string">&apos;notes&apos;</span>,\n    match: <span class="regexp">/airline/</span>,\n    select: <span class="string">&apos;text&apos;</span>,\n    model: <span class="string">&apos;modelName&apos;</span>\n    options: opts\n  }).\n  execPopulate();\n\n<span class="comment">// summary</span>\ndoc.execPopulate().then(resolve, reject);</code></pre><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>promise that resolves to the document when population is done</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-execPopulate
Document.execPopulate	R	Document-execPopulate										
Document execPopulate	R	Document-execPopulate										
Document-get	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#get(<code>path</code>, <code>[type]</code>)</code></pre><p>Returns the value of a path.</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// path</span>\ndoc.get(<span class="string">&apos;age&apos;</span>) <span class="comment">// 47</span>\n\n<span class="comment">// dynamic casting to a string</span>\ndoc.get(<span class="string">&apos;age&apos;</span>, String) <span class="comment">// &quot;47&quot;</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>[type]</code><span class="types"> &lt;Schema, String, Number, Buffer, *&gt; </span><span>optionally specify a type for on-the-fly attributes</span></li></ul></section>	http://mongoosejs.com/docs/api.html#document_Document-get
Document.get	R	Document-get										
Document get	R	Document-get										
Document-init	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#init(<code>doc</code>, <code>fn</code>)</code></pre><p>Initializes the document without setters or marking anything modified.</p><p>Called internally after a document is returned from mongodb.</p><span class="prog__sub">Parameters:</span><ul><li><code>doc</code><span class="types"> &lt;Object&gt; </span><span>document returned by mongo</span></li><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span>callback</span></li></ul></section>	http://mongoosejs.com/docs/api.html#document_Document-init
Document.init	R	Document-init										
Document init	R	Document-init										
Document-inspect	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#inspect()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#document_Document-inspect
Document.inspect	R	Document-inspect										
Document inspect	R	Document-inspect										
Document-invalidate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#invalidate(<code>path</code>, <code>errorMsg</code>, <code>value</code>, <code>[kind]</code>)</code></pre><p>Marks a path as invalid, causing validation to fail.</p><p>The <code>errorMsg</code> argument will become the message of the <code>ValidationError</code>.</p>\n\n<p>The <code>value</code> argument (if passed) will be available through the <code>ValidationError.value</code> property.</p>\n\n<pre><code>doc.invalidate(<span class="string">&apos;size&apos;</span>, <span class="string">&apos;must be less than 20&apos;</span>, <span class="number">14</span>);\n\ndoc.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.log(err)\n  <span class="comment">// prints</span>\n  { message: <span class="string">&apos;Validation failed&apos;</span>,\n    name: <span class="string">&apos;ValidationError&apos;</span>,\n    errors:\n     { size:\n        { message: <span class="string">&apos;must be less than 20&apos;</span>,\n          name: <span class="string">&apos;ValidatorError&apos;</span>,\n          path: <span class="string">&apos;size&apos;</span>,\n          type: <span class="string">&apos;user defined&apos;</span>,\n          value: <span class="number">14</span> } } }\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span>the field to invalidate</span></li><li><code>errorMsg</code><span class="types"> &lt;String, Error&gt; </span><span>the error which states the reason <code>path</code> was invalid</span></li><li><code>value</code><span class="types"> &lt;Object, String, Number, T&gt; </span><span>optional invalid value</span></li><li><code>[kind]</code><span class="types"> &lt;String&gt; </span><span>optional <code>kind</code> property for the error</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;ValidationError&gt; </span><span>the current ValidationError, with all currently invalidated paths</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-invalidate
Document.invalidate	R	Document-invalidate										
Document invalidate	R	Document-invalidate										
Document-isDirectModified	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#isDirectModified(<code>path</code>)</code></pre><p>Returns true if <code>path</code> was directly set and modified, else false.</p><span class="prog__sub">Example</span>\n\n<pre><code>doc.set(<span class="string">&apos;documents.0.title&apos;</span>, <span class="string">&apos;changed&apos;</span>);\ndoc.isDirectModified(<span class="string">&apos;documents.0.title&apos;</span>) <span class="comment">// true</span>\ndoc.isDirectModified(<span class="string">&apos;documents&apos;</span>) <span class="comment">// false</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-isDirectModified
Document.isDirectModified	R	Document-isDirectModified										
Document isDirectModified	R	Document-isDirectModified										
Document-isInit	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#isInit(<code>path</code>)</code></pre><p>Checks if <code>path</code> was initialized.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-isInit
Document.isInit	R	Document-isInit										
Document isInit	R	Document-isInit										
Document-isModified	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#isModified(<code>[path]</code>)</code></pre><p>Returns true if this document was modified, else false.</p><p>If <code>path</code> is given, checks if a path or any full path containing <code>path</code> as part of its path chain has been modified.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code>doc.set(<span class="string">&apos;documents.0.title&apos;</span>, <span class="string">&apos;changed&apos;</span>);\ndoc.isModified()                      <span class="comment">// true</span>\ndoc.isModified(<span class="string">&apos;documents&apos;</span>)           <span class="comment">// true</span>\ndoc.isModified(<span class="string">&apos;documents.0.title&apos;</span>)   <span class="comment">// true</span>\ndoc.isModified(<span class="string">&apos;documents otherProp&apos;</span>) <span class="comment">// true</span>\ndoc.isDirectModified(<span class="string">&apos;documents&apos;</span>)     <span class="comment">// false</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span>optional</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-isModified
Document.isModified	R	Document-isModified										
Document isModified	R	Document-isModified										
Document-isSelected	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#isSelected(<code>path</code>)</code></pre><p>Checks if <code>path</code> was selected in the source query which initialized this document.</p><span class="prog__sub">Example</span>\n\n<pre><code>Thing.findOne().select(<span class="string">&apos;name&apos;</span>).exec(<span class="function"><span class="keyword">function</span> <span class="params">(err, doc)</span> {</span>\n   doc.isSelected(<span class="string">&apos;name&apos;</span>) <span class="comment">// true</span>\n   doc.isSelected(<span class="string">&apos;age&apos;</span>)  <span class="comment">// false</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-isSelected
Document.isSelected	R	Document-isSelected										
Document isSelected	R	Document-isSelected										
Document-markModified	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#markModified(<code>path</code>)</code></pre><p>Marks the path as having pending changes to write to the db.</p><p><em>Very helpful when using Mixed types.</em></p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code>doc.mixed.type = <span class="string">&apos;changed&apos;</span>;\ndoc.markModified(<span class="string">&apos;mixed.type&apos;</span>);\ndoc.save() <span class="comment">// changes to mixed.type are now persisted</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span>the path to mark modified</span></li></ul></section>	http://mongoosejs.com/docs/api.html#document_Document-markModified
Document.markModified	R	Document-markModified										
Document markModified	R	Document-markModified										
Document-modifiedPaths	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#modifiedPaths()</code></pre><p>Returns the list of paths that have been modified.</p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Array&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-modifiedPaths
Document.modifiedPaths	R	Document-modifiedPaths										
Document modifiedPaths	R	Document-modifiedPaths										
Document-populate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#populate(<code>[path]</code>, <code>[callback]</code>)</code></pre><p>Populates document references, executing the <code>callback</code> when complete.<br>If you want to use promises instead, use this function with<br><code>execPopulate()</code></p><span class="prog__sub">Example:</span>\n\n<pre><code>doc\n.populate(<span class="string">&apos;company&apos;</span>)\n.populate({\n  path: <span class="string">&apos;notes&apos;</span>,\n  match: <span class="regexp">/airline/</span>,\n  select: <span class="string">&apos;text&apos;</span>,\n  model: <span class="string">&apos;modelName&apos;</span>\n  options: opts\n}, <span class="function"><span class="keyword">function</span> <span class="params">(err, user)</span> {</span>\n  assert(doc._id === user._id) <span class="comment">// the document itself is passed</span>\n})\n\n<span class="comment">// summary</span>\ndoc.populate(path)                   <span class="comment">// not executed</span>\ndoc.populate(options);               <span class="comment">// not executed</span>\ndoc.populate(path, callback)         <span class="comment">// executed</span>\ndoc.populate(options, callback);     <span class="comment">// executed</span>\ndoc.populate(callback);              <span class="comment">// executed</span>\ndoc.populate(options).execPopulate() <span class="comment">// executed, returns promise</span></code></pre>\n\n<span class="prog__sub">NOTE:</span>\n\n<p>Population does not occur unless a <code>callback</code> is passed <em>or</em> you explicitly<br>call <code>execPopulate()</code>.<br>Passing the same path a second time will overwrite the previous path options.<br>See Model.populate() for explaination of options.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String, Object&gt; </span><span>The path to populate or an options object</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span>When passed, population is invoked</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Document&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-populate
Document.populate	R	Document-populate										
Document populate	R	Document-populate										
Document-populated	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#populated(<code>path</code>)</code></pre><p>Gets _id(s) used during population of the given <code>path</code>.</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.findOne().populate(<span class="string">&apos;author&apos;</span>).exec(<span class="function"><span class="keyword">function</span> <span class="params">(err, doc)</span> {</span>\n  console.log(doc.author.name)         <span class="comment">// Dr.Seuss</span>\n  console.log(doc.populated(<span class="string">&apos;author&apos;</span>)) <span class="comment">// &apos;5144cf8050f071d979c118a7&apos;</span>\n})</code></pre>\n\n<p>If the path was not populated, undefined is returned.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Array, ObjectId, Number, Buffer, String, undefined&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-populated
Document.populated	R	Document-populated										
Document populated	R	Document-populated										
Document-set	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#set(<code>path</code>, <code>val</code>, <code>[type]</code>, <code>[options]</code>)</code></pre><p>Sets the value of a path, or many paths.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="comment">// path, value</span>\ndoc.set(path, value)\n\n<span class="comment">// object</span>\ndoc.set({\n    path  : value\n  , path2 : {\n       path  : value\n    }\n})\n\n<span class="comment">// on-the-fly cast to number</span>\ndoc.set(path, value, Number)\n\n<span class="comment">// on-the-fly cast to string</span>\ndoc.set(path, value, String)\n\n<span class="comment">// changing strict mode behavior</span>\ndoc.set(path, value, { strict: <span class="literal">false</span> });</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String, Object&gt; </span><span>path or object of key/vals to set</span></li><li><code>val</code><span class="types"> &lt;Any&gt; </span><span>the value to set</span></li><li><code>[type]</code><span class="types"> &lt;Schema, String, Number, Buffer, *&gt; </span><span>optionally specify a type for &quot;on-the-fly&quot; attributes</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>optionally specify options that modify the behavior of the set</span></li></ul></section>	http://mongoosejs.com/docs/api.html#document_Document-set
Document.set	R	Document-set										
Document set	R	Document-set										
Document-toJSON	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#toJSON(<code>options</code>)</code></pre><p>The return value of this method is used in calls to JSON.stringify(doc).</p><p>This method accepts the same options as Document#toObject. To apply the options to every document of your schema by default, set your schemas <code>toJSON</code> option to the same argument.</p>\n\n<pre><code>schema.set(<span class="string">&apos;toJSON&apos;</span>, { virtuals: <span class="literal">true</span> })</code></pre>\n\n<p>See schema options for details.</p><span class="prog__sub">Parameters:</span><ul><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Object&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-toJSON
Document.toJSON	R	Document-toJSON										
Document toJSON	R	Document-toJSON										
Document-toObject	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#toObject(<code>[options]</code>)</code></pre><p>Converts this document into a plain javascript object, ready for storage in MongoDB.</p><p>Buffers are converted to instances of mongodb.Binary for proper storage.</p>\n\n<span class="prog__sub">Options:</span>\n\n<ul>\n<li><code>getters</code> apply all getters (path and virtual getters)</li>\n<li><code>virtuals</code> apply virtual getters (can override <code>getters</code> option)</li>\n<li><code>minimize</code> remove empty objects (defaults to true)</li>\n<li><code>transform</code> a transform function to apply to the resulting document before returning</li>\n<li><code>depopulate</code> depopulate any populated paths, replacing them with their original refs (defaults to false)</li>\n<li><code>versionKey</code> whether to include the version key (defaults to true)</li>\n<li><code>retainKeyOrder</code> keep the order of object keys. If this is set to true, <code>Object.keys(new Doc({ a: 1, b: 2}).toObject())</code> will always produce <code>[&apos;a&apos;, &apos;b&apos;]</code> (defaults to false)</li>\n</ul>\n\n<span class="prog__sub">Getters/Virtuals</span>\n\n<p>Example of only applying path getters</p>\n\n<pre><code>doc.toObject({ getters: <span class="literal">true</span>, virtuals: <span class="literal">false</span> })</code></pre>\n\n<p>Example of only applying virtual getters</p>\n\n<pre><code>doc.toObject({ virtuals: <span class="literal">true</span> })</code></pre>\n\n<p>Example of applying both path and virtual getters</p>\n\n<pre><code>doc.toObject({ getters: <span class="literal">true</span> })</code></pre>\n\n<p>To apply these options to every document of your schema by default, set your schemas <code>toObject</code> option to the same argument.</p>\n\n<pre><code>schema.set(<span class="string">&apos;toObject&apos;</span>, { virtuals: <span class="literal">true</span> })</code></pre>\n\n<span class="prog__sub">Transform</span>\n\n<p>We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional <code>transform</code> function.</p>\n\n<p>Transform functions receive three arguments</p>\n\n<pre><code><span class="function"><span class="keyword">function</span> <span class="params">(doc, ret, options)</span> {</span>}</code></pre>\n\n<ul>\n<li><code>doc</code> The mongoose document which is being converted</li>\n<li><code>ret</code> The plain object representation which has been converted</li>\n<li><code>options</code> The options in use (either schema options or the options passed inline)</li>\n</ul>\n\n<span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// specify the transform schema option</span>\n<span class="keyword">if</span> (!schema.options.toObject) schema.options.toObject = {};\nschema.options.toObject.transform = <span class="function"><span class="keyword">function</span> <span class="params">(doc, ret, options)</span> {</span>\n  <span class="comment">// remove the _id of every document before returning the result</span>\n  <span class="keyword">delete</span> ret._id;\n  <span class="keyword">return</span> ret;\n}\n\n<span class="comment">// without the transformation in the schema</span>\ndoc.toObject(); <span class="comment">// { _id: &apos;anId&apos;, name: &apos;Wreck-it Ralph&apos; }</span>\n\n<span class="comment">// with the transformation</span>\ndoc.toObject(); <span class="comment">// { name: &apos;Wreck-it Ralph&apos; }</span></code></pre>\n\n<p>With transformations we can do a lot more than remove properties. We can even return completely new customized objects:</p>\n\n<pre><code><span class="keyword">if</span> (!schema.options.toObject) schema.options.toObject = {};\nschema.options.toObject.transform = <span class="function"><span class="keyword">function</span> <span class="params">(doc, ret, options)</span> {</span>\n  <span class="keyword">return</span> { movie: ret.name }\n}\n\n<span class="comment">// without the transformation in the schema</span>\ndoc.toObject(); <span class="comment">// { _id: &apos;anId&apos;, name: &apos;Wreck-it Ralph&apos; }</span>\n\n<span class="comment">// with the transformation</span>\ndoc.toObject(); <span class="comment">// { movie: &apos;Wreck-it Ralph&apos; }</span></code></pre>\n\n<p><em>Note: if a transform function returns <code>undefined</code>, the return value will be ignored.</em></p>\n\n<p>Transformations may also be applied inline, overridding any transform set in the options:</p>\n\n<pre><code><span class="function"><span class="keyword">function</span> <span class="title">xform</span> <span class="params">(doc, ret, options)</span> {</span>\n  <span class="keyword">return</span> { inline: ret.name, custom: <span class="literal">true</span> }\n}\n\n<span class="comment">// pass the transform as an inline option</span>\ndoc.toObject({ transform: xform }); <span class="comment">// { inline: &apos;Wreck-it Ralph&apos;, custom: true }</span></code></pre>\n\n<p><em>Note: if you call <code>toObject</code> and pass any options, the transform declared in your schema options will <strong>not</strong> be applied. To force its application pass <code>transform: true</code></em></p>\n\n<pre><code><span class="keyword">if</span> (!schema.options.toObject) schema.options.toObject = {};\nschema.options.toObject.hide = <span class="string">&apos;_id&apos;</span>;\nschema.options.toObject.transform = <span class="function"><span class="keyword">function</span> <span class="params">(doc, ret, options)</span> {</span>\n  <span class="keyword">if</span> (options.hide) {\n    options.hide.split(<span class="string">&apos; &apos;</span>).forEach(<span class="function"><span class="keyword">function</span> <span class="params">(prop)</span> {</span>\n      <span class="keyword">delete</span> ret[prop];\n    });\n  }\n  <span class="keyword">return</span> ret;\n}\n\n<span class="keyword">var</span> doc = <span class="keyword">new</span> Doc({ _id: <span class="string">&apos;anId&apos;</span>, secret: <span class="number">47</span>, name: <span class="string">&apos;Wreck-it Ralph&apos;</span> });\ndoc.toObject();                                        <span class="comment">// { secret: 47, name: &apos;Wreck-it Ralph&apos; }</span>\ndoc.toObject({ hide: <span class="string">&apos;secret _id&apos;</span> });                  <span class="comment">// { _id: &apos;anId&apos;, secret: 47, name: &apos;Wreck-it Ralph&apos; }</span>\ndoc.toObject({ hide: <span class="string">&apos;secret _id&apos;</span>, transform: <span class="literal">true</span> }); <span class="comment">// { name: &apos;Wreck-it Ralph&apos; }</span></code></pre>\n\n<p>Transforms are applied <em>only to the document and are not applied to sub-documents</em>.</p>\n\n<p>Transforms, like all of these options, are also available for <code>toJSON</code>.</p>\n\n<p>See schema options for some more details.</p>\n\n<p><em>During save, no custom options are applied to the document before being sent to the database.</em></p><span class="prog__sub">Parameters:</span><ul><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Object&gt; </span><span>js object</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-toObject
Document.toObject	R	Document-toObject										
Document toObject	R	Document-toObject										
Document-toString	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#toString()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#document_Document-toString
Document.toString	R	Document-toString										
Document toString	R	Document-toString										
Document-unmarkModified	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#unmarkModified(<code>path</code>)</code></pre><p>Clears the modified state on the specified path.</p><span class="prog__sub">Example:</span>\n\n<pre><code>doc.foo = <span class="string">&apos;bar&apos;</span>;\ndoc.unmarkModified(<span class="string">&apos;foo&apos;</span>);\ndoc.save() <span class="comment">// changes to foo will not be persisted</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span>the path to unmark modified</span></li></ul></section>	http://mongoosejs.com/docs/api.html#document_Document-unmarkModified
Document.unmarkModified	R	Document-unmarkModified										
Document unmarkModified	R	Document-unmarkModified										
Document-update	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#update(<code>doc</code>, <code>options</code>, <code>callback</code>)</code></pre><p>Sends an update command with this document <code>_id</code> as the query selector.</p><span class="prog__sub">Example:</span>\n\n<pre><code>weirdCar.update({$inc: {wheels:<span class="number">1</span>}}, { w: <span class="number">1</span> }, callback);</code></pre>\n\n<span class="prog__sub">Valid options:</span>\n\n<ul>\n<li>same as in Model.update</li>\n</ul><span class="prog__sub">Parameters:</span><ul><li><code>doc</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>callback</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-update
Document.update	R	Document-update										
Document update	R	Document-update										
Document-validate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#validate(<code>optional</code>, <code>callback</code>)</code></pre><p>Executes registered validation rules for this document.</p><span class="prog__sub">Note:</span>\n\n<p>This method is called <code>pre</code> save and if a validation rule is violated, save is aborted and the error is returned to your <code>callback</code>.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code>doc.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  <span class="keyword">if</span> (err) handleError(err);\n  <span class="keyword">else</span> <span class="comment">// validation passed</span>\n});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>optional</code><span class="types"> &lt;Object&gt; </span><span>options internal options</span></li><li><code>callback</code><span class="types"> &lt;Function&gt; </span><span>optional callback called after validation completes, passing an error if one occurred</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>Promise</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-validate
Document.validate	R	Document-validate										
Document validate	R	Document-validate										
Document-validateSync	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#validateSync(<code>pathsToValidate</code>)</code></pre><p>Executes registered validation rules (skipping asynchronous validators) for this document.</p><span class="prog__sub">Note:</span>\n\n<p>This method is useful if you need synchronous validation.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> err = doc.validateSync();\n<span class="keyword">if</span> ( err ){\n  handleError( err );\n} <span class="keyword">else</span> {\n  <span class="comment">// validation passed</span>\n}</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>pathsToValidate</code><span class="types"> &lt;Array, string&gt; </span><span>only validate the given paths</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;MongooseError, undefined&gt; </span><span>MongooseError if there are errors during validation, or undefined if there is no error.</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#document_Document-validateSync
Document.validateSync	R	Document-validateSync										
Document validateSync	R	Document-validateSync										
Document-errors	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#<span>errors</span></code></pre><p>Hash containing current validation errors.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-errors
Document.errors	R	Document-errors										
Document errors	R	Document-errors										
Document-id	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#<span>id</span></code></pre><p>The string version of this documents _id.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-id
Document.id	R	Document-id										
Document id	R	Document-id										
Document-isNew	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#<span>isNew</span></code></pre><p>Boolean flag specifying if the document is new.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-isNew
Document.isNew	R	Document-isNew										
Document isNew	R	Document-isNew										
Document-schema	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Document#<span>schema</span></code></pre><p>The documents schema.</p></section>	http://mongoosejs.com/docs/api.html#document_Document-schema
Document.schema	R	Document-schema										
Document schema	R	Document-schema										
exports	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>exports()</code></pre><p>ObjectId type constructor</p></section>	http://mongoosejs.com/docs/api.html#types_decimal128_exports
Subdocument-ownerDocument	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Subdocument#ownerDocument()</code></pre><p>Returns the top level document of this sub-document.</p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Document&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_subdocument_Subdocument-ownerDocument
Subdocument.ownerDocument	R	Subdocument-ownerDocument										
Subdocument ownerDocument	R	Subdocument-ownerDocument										
Subdocument-remove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Subdocument#remove(<code>[options]</code>, <code>[callback]</code>)</code></pre><p>Null-out this subdoc</p><span class="prog__sub">Parameters:</span><ul><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span>optional callback for compatibility with Document.prototype.remove</span></li></ul></section>	http://mongoosejs.com/docs/api.html#types_subdocument_Subdocument-remove
Subdocument.remove	R	Subdocument-remove										
Subdocument remove	R	Subdocument-remove										
MongooseArray-$shift	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray#$shift()</code></pre><p>Atomically shifts the array at most one time per document <code>save()</code>.</p><span class="prog__sub">NOTE:</span>\n\n<p><em>Calling this mulitple times on an array before saving sends the same command as calling it once.</em><br><em>This update is implemented using the MongoDB $pop method which enforces this restriction.</em></p>\n\n<pre><code>doc.array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];\n\n <span class="keyword">var</span> shifted = doc.array.$shift();\n console.log(shifted); <span class="comment">// 1</span>\n console.log(doc.array); <span class="comment">// [2,3]</span>\n\n <span class="comment">// no affect</span>\n shifted = doc.array.$shift();\n console.log(doc.array); <span class="comment">// [2,3]</span>\n\n doc.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n   <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);\n\n   <span class="comment">// we saved, now $shift works again</span>\n   shifted = doc.array.$shift();\n   console.log(shifted ); <span class="comment">// 2</span>\n   console.log(doc.array); <span class="comment">// [3]</span>\n })</code></pre></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray-%24shift
MongooseArray.$shift	R	MongooseArray-$shift										
MongooseArray $shift	R	MongooseArray-$shift										
MongooseArray-remove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray#remove()</code></pre><p>Alias of pull</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray-remove
MongooseArray.remove	R	MongooseArray-remove										
MongooseArray remove	R	MongooseArray-remove										
MongooseArray.$pop	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.$pop()</code></pre><p>Pops the array atomically at most one time per document <code>save()</code>.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.%24pop
MongooseArray $pop	R	MongooseArray.$pop										
MongooseArray.addToSet	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.addToSet(<code>[args...]</code>)</code></pre><p>Adds values to the array if not already present.</p><span class="prog__sub">Parameters:</span><ul><li><code>[args...]</code><span class="types"> &lt;T&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Array&gt; </span><span>the values that were added</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.addToSet
MongooseArray addToSet	R	MongooseArray.addToSet										
MongooseArray.indexOf	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.indexOf(<code>obj</code>)</code></pre><p>Return the index of <code>obj</code> or <code>-1</code> if not found.</p><span class="prog__sub">Parameters:</span><ul><li><code>obj</code><span class="types"> &lt;Object&gt; </span><span>the item to look for</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Number&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.indexOf
MongooseArray indexOf	R	MongooseArray.indexOf										
MongooseArray.inspect	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.inspect()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.inspect
MongooseArray inspect	R	MongooseArray.inspect										
MongooseArray.nonAtomicPush	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.nonAtomicPush(<code>[args...]</code>)</code></pre><p>Pushes items to the array non-atomically.</p><span class="prog__sub">Parameters:</span><ul><li><code>[args...]</code><span class="types"> &lt;T&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.nonAtomicPush
MongooseArray nonAtomicPush	R	MongooseArray.nonAtomicPush										
MongooseArray.pop	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.pop()</code></pre><p>Wraps <code>Array#pop</code> with proper change tracking.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.pop
MongooseArray pop	R	MongooseArray.pop										
MongooseArray.pull	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.pull(<code>[args...]</code>)</code></pre><p>Pulls items from the array atomically. Equality is determined by casting<br>the provided value to an embedded document and comparing using<br>the <code>Document.equals()</code> function.</p><span class="prog__sub">Parameters:</span><ul><li><code>[args...]</code><span class="types"> &lt;T&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.pull
MongooseArray pull	R	MongooseArray.pull										
MongooseArray.push	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.push(<code>[args...]</code>)</code></pre><p>Wraps <code>Array#push</code> with proper change tracking.</p><span class="prog__sub">Parameters:</span><ul><li><code>[args...]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.push
MongooseArray push	R	MongooseArray.push										
MongooseArray.set	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.set()</code></pre><p>Sets the casted <code>val</code> at index <code>i</code> and marks the array modified.</p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Array&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.set
MongooseArray set	R	MongooseArray.set										
MongooseArray.shift	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.shift()</code></pre><p>Wraps <code>Array#shift</code> with proper change tracking.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.shift
MongooseArray shift	R	MongooseArray.shift										
MongooseArray.sort	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.sort()</code></pre><p>Wraps <code>Array#sort</code> with proper change tracking.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.sort
MongooseArray sort	R	MongooseArray.sort										
MongooseArray.splice	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.splice()</code></pre><p>Wraps <code>Array#splice</code> with proper change tracking and casting.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.splice
MongooseArray splice	R	MongooseArray.splice										
MongooseArray.toObject	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.toObject(<code>options</code>)</code></pre><p>Returns a native js Array.</p><span class="prog__sub">Parameters:</span><ul><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Array&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.toObject
MongooseArray toObject	R	MongooseArray.toObject										
MongooseArray.unshift	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseArray.unshift()</code></pre><p>Wraps <code>Array#unshift</code> with proper change tracking.</p></section>	http://mongoosejs.com/docs/api.html#types_array_MongooseArray.unshift
MongooseArray unshift	R	MongooseArray.unshift										
MongooseDocumentArray.create	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseDocumentArray.create(<code>obj</code>)</code></pre><p>Creates a subdocument casted to this schema.</p><span class="prog__sub">Parameters:</span><ul><li><code>obj</code><span class="types"> &lt;Object&gt; </span><span>the value to cast to this arrays SubDocument schema</span></li></ul></section>	http://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray.create
MongooseDocumentArray create	R	MongooseDocumentArray.create										
MongooseDocumentArray.id	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseDocumentArray.id(<code>id</code>)</code></pre><p>Searches array items for the first document with a matching _id.</p><span class="prog__sub">Parameters:</span><ul><li><code>id</code><span class="types"> &lt;ObjectId, String, Number, Buffer&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;EmbeddedDocument, null&gt; </span><span>the subdocument or null if not found.</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray.id
MongooseDocumentArray id	R	MongooseDocumentArray.id										
MongooseDocumentArray.inspect	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseDocumentArray.inspect()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray.inspect
MongooseDocumentArray inspect	R	MongooseDocumentArray.inspect										
MongooseDocumentArray.toObject	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseDocumentArray.toObject(<code>[options]</code>)</code></pre><p>Returns a native js Array of plain js objects</p><span class="prog__sub">Parameters:</span><ul><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>optional options to pass to each documents &lt;code&gt;toObject&lt;/code&gt; method call during conversion</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Array&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray.toObject
MongooseDocumentArray toObject	R	MongooseDocumentArray.toObject										
MongooseBuffer.copy	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.copy(<code>target</code>)</code></pre><p>Copies the buffer.</p><span class="prog__sub">Parameters:</span><ul><li><code>target</code><span class="types"> &lt;Buffer&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Number&gt; </span><span>The number of bytes copied.</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.copy
MongooseBuffer copy	R	MongooseBuffer.copy										
MongooseBuffer.equals	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.equals(<code>other</code>)</code></pre><p>Determines if this buffer is equals to <code>other</code> buffer</p><span class="prog__sub">Parameters:</span><ul><li><code>other</code><span class="types"> &lt;Buffer&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.equals
MongooseBuffer equals	R	MongooseBuffer.equals										
MongooseBuffer.subtype	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.subtype(<code>subtype</code>)</code></pre><p>Sets the subtype option and marks the buffer modified.</p><span class="prog__sub">Parameters:</span><ul><li><code>subtype</code><span class="types"> &lt;Hex&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.subtype
MongooseBuffer subtype	R	MongooseBuffer.subtype										
MongooseBuffer.toObject	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.toObject(<code>[subtype]</code>)</code></pre><p>Converts this buffer to its Binary type representation.</p><span class="prog__sub">Parameters:</span><ul><li><code>[subtype]</code><span class="types"> &lt;Hex&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Binary&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.toObject
MongooseBuffer toObject	R	MongooseBuffer.toObject										
MongooseBuffer.write	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>MongooseBuffer.write()</code></pre><p>Writes the buffer.</p></section>	http://mongoosejs.com/docs/api.html#types_buffer_MongooseBuffer.write
MongooseBuffer write	R	MongooseBuffer.write										
ObjectId	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId()</code></pre><p>ObjectId type constructor</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="keyword">var</span> id = <span class="keyword">new</span> mongoose.Types.ObjectId;</code></pre></section>	http://mongoosejs.com/docs/api.html#types_objectid_ObjectId
EmbeddedDocument-inspect	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#inspect()</code></pre><p>Helper for console.log</p></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-inspect
EmbeddedDocument.inspect	R	EmbeddedDocument-inspect										
EmbeddedDocument inspect	R	EmbeddedDocument-inspect										
EmbeddedDocument-invalidate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#invalidate(<code>path</code>, <code>err</code>)</code></pre><p>Marks a path as invalid, causing validation to fail.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span>the field to invalidate</span></li><li><code>err</code><span class="types"> &lt;String, Error&gt; </span><span>error which states the reason <code>path</code> was invalid</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-invalidate
EmbeddedDocument.invalidate	R	EmbeddedDocument-invalidate										
EmbeddedDocument invalidate	R	EmbeddedDocument-invalidate										
EmbeddedDocument-ownerDocument	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#ownerDocument()</code></pre><p>Returns the top level document of this sub-document.</p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Document&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-ownerDocument
EmbeddedDocument.ownerDocument	R	EmbeddedDocument-ownerDocument										
EmbeddedDocument ownerDocument	R	EmbeddedDocument-ownerDocument										
EmbeddedDocument-parent	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#parent()</code></pre><p>Returns this sub-documents parent document.</p></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-parent
EmbeddedDocument.parent	R	EmbeddedDocument-parent										
EmbeddedDocument parent	R	EmbeddedDocument-parent										
EmbeddedDocument-parentArray	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#parentArray()</code></pre><p>Returns this sub-documents parent array.</p></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-parentArray
EmbeddedDocument.parentArray	R	EmbeddedDocument-parentArray										
EmbeddedDocument parentArray	R	EmbeddedDocument-parentArray										
EmbeddedDocument-remove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument#remove(<code>[options]</code>, <code>[fn]</code>)</code></pre><p>Removes the subdocument from its parent array.</p><span class="prog__sub">Parameters:</span><ul><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[fn]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-remove
EmbeddedDocument.remove	R	EmbeddedDocument-remove										
EmbeddedDocument remove	R	EmbeddedDocument-remove										
EmbeddedDocument.markModified	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>EmbeddedDocument.markModified(<code>path</code>)</code></pre><p>Marks the embedded doc modified.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span>the path which changed</span></li></ul></section>	http://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument.markModified
EmbeddedDocument markModified	R	EmbeddedDocument.markModified										
Query-$where	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#$where(<code>js</code>)</code></pre><p>Specifies a javascript function or expression to pass to MongoDBs query system.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.$where(<span class="string">&apos;this.comments.length === 10 || this.name.length === 5&apos;</span>)\n\n<span class="comment">// or</span>\n\nquery.$where(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n  <span class="keyword">return</span> <span class="keyword">this</span>.comments.length === <span class="number">10</span> || <span class="keyword">this</span>.name.length === <span class="number">5</span>;\n})</code></pre>\n\n<span class="prog__sub">NOTE:</span>\n\n<p>Only use <code>$where</code> when you have a condition that cannot be met using other MongoDB operators like <code>$lt</code>.<br><strong>Be sure to read about all of its caveats before using.</strong></p><span class="prog__sub">Parameters:</span><ul><li><code>js</code><span class="types"> &lt;String, Function&gt; </span><span>javascript string or function</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-%24where
Query.$where	R	Query-$where										
Query $where	R	Query-$where										
Query-all	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#all(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies an $all query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-all
Query.all	R	Query-all										
Query all	R	Query-all										
Query-and	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#and(<code>array</code>)</code></pre><p>Specifies arguments for a <code>$and</code> condition.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.and([{ color: <span class="string">&apos;green&apos;</span> }, { status: <span class="string">&apos;ok&apos;</span> }])</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>array</code><span class="types"> &lt;Array&gt; </span><span>array of conditions</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-and
Query.and	R	Query-and										
Query and	R	Query-and										
Query-batchSize	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#batchSize(<code>val</code>)</code></pre><p>Specifies the batchSize option.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.batchSize(<span class="number">100</span>)</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>Cannot be used with <code>distinct()</code></p><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-batchSize
Query.batchSize	R	Query-batchSize										
Query batchSize	R	Query-batchSize										
Query-box	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#box(<code>val</code>, <code>Upper</code>)</code></pre><p>Specifies a $box condition</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="keyword">var</span> lowerLeft = [<span class="number">40.73083</span>, -<span class="number">73.99756</span>]\n<span class="keyword">var</span> upperRight= [<span class="number">40.741404</span>,  -<span class="number">73.988135</span>]\n\nquery.where(<span class="string">&apos;loc&apos;</span>).within().box(lowerLeft, upperRight)\nquery.box({ ll : lowerLeft, ur : upperRight })</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>Upper</code><span class="types"> &lt;[Array]&gt; </span><span>Right Coords</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-box
Query.box	R	Query-box										
Query box	R	Query-box										
Query-cast	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#cast(<code>model</code>, <code>[obj]</code>)</code></pre><p>Casts this query to the schema of <code>model</code></p><span class="prog__sub">Note</span>\n\n<p>If <code>obj</code> is present, it is cast instead of this query.</p><span class="prog__sub">Parameters:</span><ul><li><code>model</code><span class="types"> &lt;Model&gt; </span><span></span></li><li><code>[obj]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Object&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-cast
Query.cast	R	Query-cast										
Query cast	R	Query-cast										
Query-catch	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#catch(<code>[reject]</code>)</code></pre><p>Executes the query returning a <code>Promise</code> which will be<br>resolved with either the doc(s) or rejected with the error.<br>Like <code>.then()</code>, but only takes a rejection handler.</p><span class="prog__sub">Parameters:</span><ul><li><code>[reject]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-catch
Query.catch	R	Query-catch										
Query catch	R	Query-catch										
Query-center	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#center()</code></pre><p><em>DEPRECATED</em> Alias for circle</p><p><strong>Deprecated.</strong> Use circle instead.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-center
Query.center	R	Query-center										
Query center	R	Query-center										
Query-centerSphere	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#centerSphere(<code>[path]</code>, <code>val</code>)</code></pre><p><em>DEPRECATED</em> Specifies a $centerSphere condition</p><p><strong>Deprecated.</strong> Use circle instead.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code><span class="keyword">var</span> area = { center: [<span class="number">50</span>, <span class="number">50</span>], radius: <span class="number">10</span> };\nquery.where(<span class="string">&apos;loc&apos;</span>).within().centerSphere(area);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-centerSphere
Query.centerSphere	R	Query-centerSphere										
Query centerSphere	R	Query-centerSphere										
Query-circle	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#circle(<code>[path]</code>, <code>area</code>)</code></pre><p>Specifies a $center or $centerSphere condition.</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="keyword">var</span> area = { center: [<span class="number">50</span>, <span class="number">50</span>], radius: <span class="number">10</span>, unique: <span class="literal">true</span> }\nquery.where(<span class="string">&apos;loc&apos;</span>).within().circle(area)\n<span class="comment">// alternatively</span>\nquery.circle(<span class="string">&apos;loc&apos;</span>, area);\n\n<span class="comment">// spherical calculations</span>\n<span class="keyword">var</span> area = { center: [<span class="number">50</span>, <span class="number">50</span>], radius: <span class="number">10</span>, unique: <span class="literal">true</span>, spherical: <span class="literal">true</span> }\nquery.where(<span class="string">&apos;loc&apos;</span>).within().circle(area)\n<span class="comment">// alternatively</span>\nquery.circle(<span class="string">&apos;loc&apos;</span>, area);</code></pre>\n\n<p>New in 3.7.0</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>area</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-circle
Query.circle	R	Query-circle										
Query circle	R	Query-circle										
Query-collation	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#collation(<code>value</code>)</code></pre><p>Adds a collation to this op (MongoDB 3.4 and up)</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-collation
Query.collation	R	Query-collation										
Query collation	R	Query-collation										
Query-comment	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#comment(<code>val</code>)</code></pre><p>Specifies the <code>comment</code> option.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.comment(<span class="string">&apos;login query&apos;</span>)</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>Cannot be used with <code>distinct()</code></p><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-comment
Query.comment	R	Query-comment										
Query comment	R	Query-comment										
Query-count	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#count(<code>[criteria]</code>, <code>[callback]</code>)</code></pre><p>Specifying this query as a <code>count</code> query.</p><p>Passing a <code>callback</code> executes the query.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> countQuery = model.where({ <span class="string">&apos;color&apos;</span>: <span class="string">&apos;black&apos;</span> }).count();\n\nquery.count({ color: <span class="string">&apos;black&apos;</span> }).count(callback)\n\nquery.count({ color: <span class="string">&apos;black&apos;</span> }, callback)\n\nquery.where(<span class="string">&apos;color&apos;</span>, <span class="string">&apos;black&apos;</span>).count(<span class="function"><span class="keyword">function</span> <span class="params">(err, count)</span> {</span>\n  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);\n  console.log(<span class="string">&apos;there are %d kittens&apos;</span>, count);\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[criteria]</code><span class="types"> &lt;Object&gt; </span><span>mongodb selector</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-count
Query.count	R	Query-count										
Query count	R	Query-count										
Query-cursor	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#cursor(<code>[options]</code>)</code></pre><p>Returns a wrapper around a mongodb driver cursor.<br>A QueryCursor exposes a Streams3-compatible<br>interface, as well as a <code>.next()</code> function.</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// There are 2 ways to use a cursor. First, as a stream:</span>\nThing.\n  find({ name: <span class="regexp">/^hello/</span> }).\n  cursor().\n  on(<span class="string">&apos;data&apos;</span>, <span class="keyword">function</span>(doc) { console.log(doc); }).\n  on(<span class="string">&apos;end&apos;</span>, <span class="keyword">function</span>() { console.log(<span class="string">&apos;Done!&apos;</span>); });\n\n<span class="comment">// Or you can use `.next()` to manually get the next doc in the stream.</span>\n<span class="comment">// `.next()` returns a promise, so you can use promises or callbacks.</span>\n<span class="keyword">var</span> cursor = Thing.find({ name: <span class="regexp">/^hello/</span> }).cursor();\ncursor.next(<span class="keyword">function</span>(error, doc) {\n  console.log(doc);\n});\n\n<span class="comment">// Because `.next()` returns a promise, you can use co</span>\n<span class="comment">// to easily iterate through all documents without loading them</span>\n<span class="comment">// all into memory.</span>\nco(<span class="keyword">function</span>*() {\n  const cursor = Thing.find({ name: <span class="regexp">/^hello/</span> }).cursor();\n  <span class="keyword">for</span> (let doc = yield cursor.next(); doc != <span class="literal">null</span>; doc = yield cursor.next()) {\n    console.log(doc);\n  }\n});</code></pre>\n\n<span class="prog__sub">Valid options</span>\n\n<ul>\n<li><code>transform</code>: optional function which accepts a mongoose document. The return value of the function will be emitted on <code>data</code> and returned by <code>.next()</code>.</li>\n</ul><span class="prog__sub">Parameters:</span><ul><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;QueryCursor&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-cursor
Query.cursor	R	Query-cursor										
Query cursor	R	Query-cursor										
Query-distinct	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#distinct(<code>[field]</code>, <code>[criteria]</code>, <code>[callback]</code>)</code></pre><p>Declares or executes a distict() operation.</p><p>Passing a <code>callback</code> executes the query.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code>distinct(field, conditions, callback)\ndistinct(field, conditions)\ndistinct(field, callback)\ndistinct(field)\ndistinct(callback)\ndistinct()</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[field]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>[criteria]</code><span class="types"> &lt;Object, Query&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-distinct
Query.distinct	R	Query-distinct										
Query distinct	R	Query-distinct										
Query-elemMatch	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#elemMatch(<code>path</code>, <code>criteria</code>)</code></pre><p>Specifies an <code>$elemMatch</code> condition</p><span class="prog__sub">Example</span>\n\n<pre><code>query.elemMatch(<span class="string">&apos;comment&apos;</span>, { author: <span class="string">&apos;autobot&apos;</span>, votes: {$gte: <span class="number">5</span>}})\n\nquery.where(<span class="string">&apos;comment&apos;</span>).elemMatch({ author: <span class="string">&apos;autobot&apos;</span>, votes: {$gte: <span class="number">5</span>}})\n\nquery.elemMatch(<span class="string">&apos;comment&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(elem)</span> {</span>\n  elem.where(<span class="string">&apos;author&apos;</span>).equals(<span class="string">&apos;autobot&apos;</span>);\n  elem.where(<span class="string">&apos;votes&apos;</span>).gte(<span class="number">5</span>);\n})\n\nquery.where(<span class="string">&apos;comment&apos;</span>).elemMatch(<span class="function"><span class="keyword">function</span> <span class="params">(elem)</span> {</span>\n  elem.where({ author: <span class="string">&apos;autobot&apos;</span> });\n  elem.where(<span class="string">&apos;votes&apos;</span>).gte(<span class="number">5</span>);\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String, Object, Function&gt; </span><span></span></li><li><code>criteria</code><span class="types"> &lt;Object, Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-elemMatch
Query.elemMatch	R	Query-elemMatch										
Query elemMatch	R	Query-elemMatch										
Query-equals	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#equals(<code>val</code>)</code></pre><p>Specifies the complementary comparison value for paths specified with <code>where()</code></p><span class="prog__sub">Example</span>\n\n<pre><code>User.where(<span class="string">&apos;age&apos;</span>).equals(<span class="number">49</span>);\n\n<span class="comment">// is the same as</span>\n\nUser.where(<span class="string">&apos;age&apos;</span>, <span class="number">49</span>);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-equals
Query.equals	R	Query-equals										
Query equals	R	Query-equals										
Query-exec	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#exec(<code>[operation]</code>, <code>[callback]</code>)</code></pre><p>Executes the query</p><span class="prog__sub">Examples:</span>\n\n<pre><code><span class="keyword">var</span> promise = query.exec();\n<span class="keyword">var</span> promise = query.exec(<span class="string">&apos;update&apos;</span>);\n\nquery.exec(callback);\nquery.exec(<span class="string">&apos;find&apos;</span>, callback);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[operation]</code><span class="types"> &lt;String, Function&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-exec
Query.exec	R	Query-exec										
Query exec	R	Query-exec										
Query-exists	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#exists(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies an <code>$exists</code> condition</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// { name: { $exists: true }}</span>\nThing.where(<span class="string">&apos;name&apos;</span>).exists()\nThing.where(<span class="string">&apos;name&apos;</span>).exists(<span class="literal">true</span>)\nThing.find().exists(<span class="string">&apos;name&apos;</span>)\n\n<span class="comment">// { name: { $exists: false }}</span>\nThing.where(<span class="string">&apos;name&apos;</span>).exists(<span class="literal">false</span>);\nThing.find().exists(<span class="string">&apos;name&apos;</span>, <span class="literal">false</span>);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-exists
Query.exists	R	Query-exists										
Query exists	R	Query-exists										
Query-find	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#find(<code>[criteria]</code>, <code>[callback]</code>)</code></pre><p>Finds documents.</p><p>When no <code>callback</code> is passed, the query is not executed. When the query is executed, the result will be an array of documents.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code>query.find({ name: <span class="string">&apos;Los Pollos Hermanos&apos;</span> }).find(callback)</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[criteria]</code><span class="types"> &lt;Object&gt; </span><span>mongodb selector</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-find
Query.find	R	Query-find										
Query find	R	Query-find										
Query-findOne	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#findOne(<code>[criteria]</code>, <code>[projection]</code>, <code>[callback]</code>)</code></pre><p>Declares the query a findOne operation. When executed, the first found document is passed to the callback.</p><p>Passing a <code>callback</code> executes the query. The result of the query is a single document.</p>\n\n<ul>\n<li><em>Note:</em> <code>conditions</code> is optional, and if <code>conditions</code> is null or undefined,\nmongoose will send an empty <code>findOne</code> command to MongoDB, which will return\nan arbitrary document. If you&apos;re querying by <code>_id</code>, use <code>Model.findById()</code>\ninstead.</li>\n</ul>\n\n<span class="prog__sub">Example</span>\n\n<pre><code><span class="keyword">var</span> query  = Kitten.where({ color: <span class="string">&apos;white&apos;</span> });\nquery.findOne(<span class="function"><span class="keyword">function</span> <span class="params">(err, kitten)</span> {</span>\n  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);\n  <span class="keyword">if</span> (kitten) {\n    <span class="comment">// doc may be null if no document matched</span>\n  }\n});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[criteria]</code><span class="types"> &lt;Object, Query&gt; </span><span>mongodb selector</span></li><li><code>[projection]</code><span class="types"> &lt;Object&gt; </span><span>optional fields to return</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-findOne
Query.findOne	R	Query-findOne										
Query findOne	R	Query-findOne										
Query-findOneAndRemove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#findOneAndRemove(<code>[conditions]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Issues a mongodb findAndModify remove command.</p><p>Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if <code>callback</code> is passed.</p>\n\n<span class="prog__sub">Available options</span>\n\n<ul>\n<li><code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li>\n<li><code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li>\n<li><code>passRawResult</code>: if true, passes the raw result from the MongoDB driver as the third callback parameter</li>\n</ul>\n\n<span class="prog__sub">Callback Signature</span>\n\n<pre><code>function(error, doc, result) {\n  // error: any errors that occurred\n  // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n  // result: [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n}\n</code></pre>\n\n<span class="prog__sub">Examples</span>\n\n<pre><code>A.where().findOneAndRemove(conditions, options, callback) <span class="comment">// executes</span>\nA.where().findOneAndRemove(conditions, options)  <span class="comment">// return Query</span>\nA.where().findOneAndRemove(conditions, callback) <span class="comment">// executes</span>\nA.where().findOneAndRemove(conditions) <span class="comment">// returns Query</span>\nA.where().findOneAndRemove(callback)   <span class="comment">// executes</span>\nA.where().findOneAndRemove()           <span class="comment">// returns Query</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[conditions]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-findOneAndRemove
Query.findOneAndRemove	R	Query-findOneAndRemove										
Query findOneAndRemove	R	Query-findOneAndRemove										
Query-findOneAndUpdate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#findOneAndUpdate(<code>[query]</code>, <code>[doc]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Issues a mongodb findAndModify update command.</p><p>Finds a matching document, updates it according to the <code>update</code> arg, passing any <code>options</code>, and returns the found document (if any) to the callback. The query executes immediately if <code>callback</code> is passed.</p>\n\n<span class="prog__sub">Available options</span>\n\n<ul>\n<li><code>new</code>: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)</li>\n<li><code>upsert</code>: bool - creates the object if it doesn&apos;t exist. defaults to false.</li>\n<li><code>fields</code>: {Object|String} - Field selection. Equivalent to <code>.select(fields).findOneAndUpdate()</code></li>\n<li><code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li>\n<li><code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li>\n<li><code>runValidators</code>: if true, runs update validators on this command. Update validators validate the update operation against the model&apos;s schema.</li>\n<li><code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the defaults specified in the model&apos;s schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on MongoDB&apos;s <code>$setOnInsert</code> operator.</li>\n<li><code>passRawResult</code>: if true, passes the raw result from the MongoDB driver as the third callback parameter</li>\n<li><code>context</code> (string) if set to &apos;query&apos; and <code>runValidators</code> is on, <code>this</code> will refer to the query in custom validator functions that update validation runs. Does nothing if <code>runValidators</code> is false.</li>\n</ul>\n\n<span class="prog__sub">Callback Signature</span>\n\n<pre><code><span class="keyword">function</span>(error, doc) {\n  <span class="comment">// error: any errors that occurred</span>\n  <span class="comment">// doc: the document before updates are applied if `new: false`, or after updates if `new = true`</span>\n}</code></pre>\n\n<span class="prog__sub">Examples</span>\n\n<pre><code>query.findOneAndUpdate(conditions, update, options, callback) <span class="comment">// executes</span>\nquery.findOneAndUpdate(conditions, update, options)  <span class="comment">// returns Query</span>\nquery.findOneAndUpdate(conditions, update, callback) <span class="comment">// executes</span>\nquery.findOneAndUpdate(conditions, update)           <span class="comment">// returns Query</span>\nquery.findOneAndUpdate(update, callback)             <span class="comment">// returns Query</span>\nquery.findOneAndUpdate(update)                       <span class="comment">// returns Query</span>\nquery.findOneAndUpdate(callback)                     <span class="comment">// executes</span>\nquery.findOneAndUpdate()                             <span class="comment">// returns Query</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[query]</code><span class="types"> &lt;Object, Query&gt; </span><span></span></li><li><code>[doc]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-findOneAndUpdate
Query.findOneAndUpdate	R	Query-findOneAndUpdate										
Query findOneAndUpdate	R	Query-findOneAndUpdate										
Query-geometry	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#geometry(<code>object</code>)</code></pre><p>Specifies a <code>$geometry</code> condition</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="keyword">var</span> polyA = [[[ <span class="number">10</span>, <span class="number">20</span> ], [ <span class="number">10</span>, <span class="number">40</span> ], [ <span class="number">30</span>, <span class="number">40</span> ], [ <span class="number">30</span>, <span class="number">20</span> ]]]\nquery.where(<span class="string">&apos;loc&apos;</span>).within().geometry({ type: <span class="string">&apos;Polygon&apos;</span>, coordinates: polyA })\n\n<span class="comment">// or</span>\n<span class="keyword">var</span> polyB = [[ <span class="number">0</span>, <span class="number">0</span> ], [ <span class="number">1</span>, <span class="number">1</span> ]]\nquery.where(<span class="string">&apos;loc&apos;</span>).within().geometry({ type: <span class="string">&apos;LineString&apos;</span>, coordinates: polyB })\n\n<span class="comment">// or</span>\n<span class="keyword">var</span> polyC = [ <span class="number">0</span>, <span class="number">0</span> ]\nquery.where(<span class="string">&apos;loc&apos;</span>).within().geometry({ type: <span class="string">&apos;Point&apos;</span>, coordinates: polyC })\n\n<span class="comment">// or</span>\nquery.where(<span class="string">&apos;loc&apos;</span>).intersects().geometry({ type: <span class="string">&apos;Point&apos;</span>, coordinates: polyC })</code></pre>\n\n<p>The argument is assigned to the most recent path passed to <code>where()</code>.</p>\n\n<span class="prog__sub">NOTE:</span>\n\n<p><code>geometry()</code> <strong>must</strong> come after either <code>intersects()</code> or <code>within()</code>.</p>\n\n<p>The <code>object</code> argument must contain <code>type</code> and <code>coordinates</code> properties.<br>- type {String}<br>- coordinates {Array}</p><span class="prog__sub">Parameters:</span><ul><li><code>object</code><span class="types"> &lt;Object&gt; </span><span>Must contain a <code>type</code> property which is a String and a <code>coordinates</code> property which is an Array. See the examples.</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-geometry
Query.geometry	R	Query-geometry										
Query geometry	R	Query-geometry										
Query-getQuery	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#getQuery()</code></pre><p>Returns the current query conditions as a JSON object.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> query = <span class="keyword">new</span> Query();\nquery.find({ a: <span class="number">1</span> }).where(<span class="string">&apos;b&apos;</span>).gt(<span class="number">2</span>);\nquery.getQuery(); <span class="comment">// { a: 1, b: { $gt: 2 } }</span></code></pre><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Object&gt; </span><span>current query conditions</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-getQuery
Query.getQuery	R	Query-getQuery										
Query getQuery	R	Query-getQuery										
Query-getUpdate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#getUpdate()</code></pre><p>Returns the current update operations as a JSON object.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> query = <span class="keyword">new</span> Query();\nquery.update({}, { $set: { a: <span class="number">5</span> } });\nquery.getUpdate(); <span class="comment">// { $set: { a: 5 } }</span></code></pre><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Object&gt; </span><span>current update operations</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-getUpdate
Query.getUpdate	R	Query-getUpdate										
Query getUpdate	R	Query-getUpdate										
Query-gt	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#gt(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a $gt query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code>Thing.find().where(<span class="string">&apos;age&apos;</span>).gt(<span class="number">21</span>)\n\n<span class="comment">// or</span>\nThing.find().gt(<span class="string">&apos;age&apos;</span>, <span class="number">21</span>)</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-gt
Query.gt	R	Query-gt										
Query gt	R	Query-gt										
Query-gte	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#gte(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a $gte query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-gte
Query.gte	R	Query-gte										
Query gte	R	Query-gte										
Query-hint	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#hint(<code>val</code>)</code></pre><p>Sets query hints.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.hint({ indexA: <span class="number">1</span>, indexB: -<span class="number">1</span>})</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>Cannot be used with <code>distinct()</code></p><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Object&gt; </span><span>a hint object</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-hint
Query.hint	R	Query-hint										
Query hint	R	Query-hint										
Query-in	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#in(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies an $in query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-in
Query.in	R	Query-in										
Query in	R	Query-in										
Query-intersects	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#intersects(<code>[arg]</code>)</code></pre><p>Declares an intersects query for <code>geometry()</code>.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.where(<span class="string">&apos;path&apos;</span>).intersects().geometry({\n    type: <span class="string">&apos;LineString&apos;</span>\n  , coordinates: [[<span class="number">180.0</span>, <span class="number">11.0</span>], [<span class="number">180</span>, <span class="number">9.0</span>]]\n})\n\nquery.where(<span class="string">&apos;path&apos;</span>).intersects({\n    type: <span class="string">&apos;LineString&apos;</span>\n  , coordinates: [[<span class="number">180.0</span>, <span class="number">11.0</span>], [<span class="number">180</span>, <span class="number">9.0</span>]]\n})</code></pre>\n\n<span class="prog__sub">NOTE:</span>\n\n<p><strong>MUST</strong> be used after <code>where()</code>.</p>\n\n<span class="prog__sub">NOTE:</span>\n\n<p>In Mongoose 3.7, <code>intersects</code> changed from a getter to a function. If you need the old syntax, use this.</p><span class="prog__sub">Parameters:</span><ul><li><code>[arg]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-intersects
Query.intersects	R	Query-intersects										
Query intersects	R	Query-intersects										
Query-lean	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#lean(<code>bool</code>)</code></pre><p>Sets the lean option.</p><p>Documents returned from queries with the <code>lean</code> option enabled are plain javascript objects, not MongooseDocuments. They have no <code>save</code> method, getters/setters or other Mongoose magic applied.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">new</span> Query().lean() <span class="comment">// true</span>\n<span class="keyword">new</span> Query().lean(<span class="literal">true</span>)\n<span class="keyword">new</span> Query().lean(<span class="literal">false</span>)\n\nModel.find().lean().exec(<span class="function"><span class="keyword">function</span> <span class="params">(err, docs)</span> {</span>\n  docs[<span class="number">0</span>] <span class="keyword">instanceof</span> mongoose.Document <span class="comment">// false</span>\n});</code></pre>\n\n<p>This is a great option in high-performance read-only scenarios, especially when combined with stream.</p><span class="prog__sub">Parameters:</span><ul><li><code>bool</code><span class="types"> &lt;Boolean&gt; </span><span>defaults to true</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-lean
Query.lean	R	Query-lean										
Query lean	R	Query-lean										
Query-limit	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#limit(<code>val</code>)</code></pre><p>Specifies the maximum number of documents the query will return.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.limit(<span class="number">20</span>)</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>Cannot be used with <code>distinct()</code></p><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-limit
Query.limit	R	Query-limit										
Query limit	R	Query-limit										
Query-lt	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#lt(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a $lt query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-lt
Query.lt	R	Query-lt										
Query lt	R	Query-lt										
Query-lte	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#lte(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a $lte query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-lte
Query.lte	R	Query-lte										
Query lte	R	Query-lte										
Query-maxDistance	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#maxDistance(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a $maxDistance query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-maxDistance
Query.maxDistance	R	Query-maxDistance										
Query maxDistance	R	Query-maxDistance										
Query-maxscan	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#maxscan()</code></pre><p><em>DEPRECATED</em> Alias of <code>maxScan</code></p></section>	http://mongoosejs.com/docs/api.html#query_Query-maxscan
Query.maxscan	R	Query-maxscan										
Query maxscan	R	Query-maxscan										
Query-maxScan	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#maxScan(<code>val</code>)</code></pre><p>Specifies the maxScan option.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.maxScan(<span class="number">100</span>)</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>Cannot be used with <code>distinct()</code></p><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-maxScan
Query.maxScan	R	Query-maxScan										
Query maxScan	R	Query-maxScan										
Query-merge	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#merge(<code>source</code>)</code></pre><p>Merges another Query or conditions object into this one.</p><p>When a Query is passed, conditions, field selection and options are merged.</p><span class="prog__sub">Parameters:</span><ul><li><code>source</code><span class="types"> &lt;Query, Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-merge
Query.merge	R	Query-merge										
Query merge	R	Query-merge										
Query-merge	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#merge(<code>source</code>)</code></pre><p>Merges another Query or conditions object into this one.</p><p>When a Query is passed, conditions, field selection and options are merged.</p>\n\n<p>New in 3.7.0</p><span class="prog__sub">Parameters:</span><ul><li><code>source</code><span class="types"> &lt;Query, Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-merge
Query.merge	R	Query-merge										
Query merge	R	Query-merge										
Query-mod	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#mod(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a <code>$mod</code> condition</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-mod
Query.mod	R	Query-mod										
Query mod	R	Query-mod										
Query-mongooseOptions	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#mongooseOptions(<code>options</code>)</code></pre><p>Getter/setter around the current mongoose-specific options for this query<br>(populate, lean, etc.)</p><span class="prog__sub">Parameters:</span><ul><li><code>options</code><span class="types"> &lt;Object&gt; </span><span>if specified, overwrites the current options</span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-mongooseOptions
Query.mongooseOptions	R	Query-mongooseOptions										
Query mongooseOptions	R	Query-mongooseOptions										
Query-ne	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#ne(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a $ne query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-ne
Query.ne	R	Query-ne										
Query ne	R	Query-ne										
Query-near	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#near(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a <code>$near</code> or <code>$nearSphere</code> condition</p><p>These operators return documents sorted by distance.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code>query.where(<span class="string">&apos;loc&apos;</span>).near({ center: [<span class="number">10</span>, <span class="number">10</span>] });\nquery.where(<span class="string">&apos;loc&apos;</span>).near({ center: [<span class="number">10</span>, <span class="number">10</span>], maxDistance: <span class="number">5</span> });\nquery.where(<span class="string">&apos;loc&apos;</span>).near({ center: [<span class="number">10</span>, <span class="number">10</span>], maxDistance: <span class="number">5</span>, spherical: <span class="literal">true</span> });\nquery.near(<span class="string">&apos;loc&apos;</span>, { center: [<span class="number">10</span>, <span class="number">10</span>], maxDistance: <span class="number">5</span> });</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-near
Query.near	R	Query-near										
Query near	R	Query-near										
Query-nearSphere	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#nearSphere()</code></pre><p><em>DEPRECATED</em> Specifies a <code>$nearSphere</code> condition</p><span class="prog__sub">Example</span>\n\n<pre><code>query.where(<span class="string">&apos;loc&apos;</span>).nearSphere({ center: [<span class="number">10</span>, <span class="number">10</span>], maxDistance: <span class="number">5</span> });</code></pre>\n\n<p><strong>Deprecated.</strong> Use <code>query.near()</code> instead with the <code>spherical</code> option set to <code>true</code>.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code>query.where(<span class="string">&apos;loc&apos;</span>).near({ center: [<span class="number">10</span>, <span class="number">10</span>], spherical: <span class="literal">true</span> });</code></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-nearSphere
Query.nearSphere	R	Query-nearSphere										
Query nearSphere	R	Query-nearSphere										
Query-nin	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#nin(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies an $nin query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-nin
Query.nin	R	Query-nin										
Query nin	R	Query-nin										
Query-nor	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#nor(<code>array</code>)</code></pre><p>Specifies arguments for a <code>$nor</code> condition.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.nor([{ color: <span class="string">&apos;green&apos;</span> }, { status: <span class="string">&apos;ok&apos;</span> }])</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>array</code><span class="types"> &lt;Array&gt; </span><span>array of conditions</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-nor
Query.nor	R	Query-nor										
Query nor	R	Query-nor										
Query-or	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#or(<code>array</code>)</code></pre><p>Specifies arguments for an <code>$or</code> condition.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.or([{ color: <span class="string">&apos;red&apos;</span> }, { status: <span class="string">&apos;emergency&apos;</span> }])</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>array</code><span class="types"> &lt;Array&gt; </span><span>array of conditions</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-or
Query.or	R	Query-or										
Query or	R	Query-or										
Query-polygon	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#polygon(<code>[path]</code>, <code>[coordinatePairs...]</code>)</code></pre><p>Specifies a $polygon condition</p><span class="prog__sub">Example</span>\n\n<pre><code>query.where(<span class="string">&apos;loc&apos;</span>).within().polygon([<span class="number">10</span>,<span class="number">20</span>], [<span class="number">13</span>, <span class="number">25</span>], [<span class="number">7</span>,<span class="number">15</span>])\nquery.polygon(<span class="string">&apos;loc&apos;</span>, [<span class="number">10</span>,<span class="number">20</span>], [<span class="number">13</span>, <span class="number">25</span>], [<span class="number">7</span>,<span class="number">15</span>])</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String, Array&gt; </span><span></span></li><li><code>[coordinatePairs...]</code><span class="types"> &lt;Array, Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-polygon
Query.polygon	R	Query-polygon										
Query polygon	R	Query-polygon										
Query-populate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#populate(<code>path</code>, <code>[select]</code>, <code>[model]</code>, <code>[match]</code>, <code>[options]</code>)</code></pre><p>Specifies paths which should be populated with other documents.</p><span class="prog__sub">Example:</span>\n\n<pre><code>Kitten.findOne().populate(<span class="string">&apos;owner&apos;</span>).exec(<span class="function"><span class="keyword">function</span> <span class="params">(err, kitten)</span> {</span>\n  console.log(kitten.owner.name) <span class="comment">// Max</span>\n})\n\nKitten.find().populate({\n    path: <span class="string">&apos;owner&apos;</span>\n  , select: <span class="string">&apos;name&apos;</span>\n  , match: { color: <span class="string">&apos;black&apos;</span> }\n  , options: { sort: { name: -<span class="number">1</span> }}\n}).exec(<span class="function"><span class="keyword">function</span> <span class="params">(err, kittens)</span> {</span>\n  console.log(kittens[<span class="number">0</span>].owner.name) <span class="comment">// Zoopa</span>\n})\n\n<span class="comment">// alternatively</span>\nKitten.find().populate(<span class="string">&apos;owner&apos;</span>, <span class="string">&apos;name&apos;</span>, <span class="literal">null</span>, {sort: { name: -<span class="number">1</span> }}).exec(<span class="function"><span class="keyword">function</span> <span class="params">(err, kittens)</span> {</span>\n  console.log(kittens[<span class="number">0</span>].owner.name) <span class="comment">// Zoopa</span>\n})</code></pre>\n\n<p>Paths are populated after the query executes and a response is received. A separate query is then executed for each path specified for population. After a response for each query has also been returned, the results are passed to the callback.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;Object, String&gt; </span><span>either the path to populate or an object specifying all parameters</span></li><li><code>[select]</code><span class="types"> &lt;Object, String&gt; </span><span>Field selection for the population query</span></li><li><code>[model]</code><span class="types"> &lt;Model&gt; </span><span>The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema&apos;s <code>ref</code> field.</span></li><li><code>[match]</code><span class="types"> &lt;Object&gt; </span><span>Conditions for the population query</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>Options for the population query (sort, etc)</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-populate
Query.populate	R	Query-populate										
Query populate	R	Query-populate										
Query-read	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#read(<code>pref</code>, <code>[tags]</code>)</code></pre><p>Determines the MongoDB nodes from which to read.</p><span class="prog__sub">Preferences:</span>\n\n<pre><code>primary - (<span class="keyword">default</span>) Read from primary only. Operations will produce an error <span class="keyword">if</span> primary is unavailable. Cannot be combined <span class="keyword">with</span> tags.\nsecondary            Read from secondary <span class="keyword">if</span> available, otherwise error.\nprimaryPreferred     Read from primary <span class="keyword">if</span> available, otherwise a secondary.\nsecondaryPreferred   Read from a secondary <span class="keyword">if</span> available, otherwise read from the primary.\nnearest              All operations read from among the nearest candidates, but unlike other modes, <span class="keyword">this</span> option will include both the primary and all secondaries <span class="keyword">in</span> the random selection.</code></pre>\n\n<p>Aliases</p>\n\n<pre><code>p   primary\npp  primaryPreferred\ns   secondary\nsp  secondaryPreferred\nn   nearest</code></pre>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">new</span> Query().read(<span class="string">&apos;primary&apos;</span>)\n<span class="keyword">new</span> Query().read(<span class="string">&apos;p&apos;</span>)  <span class="comment">// same as primary</span>\n\n<span class="keyword">new</span> Query().read(<span class="string">&apos;primaryPreferred&apos;</span>)\n<span class="keyword">new</span> Query().read(<span class="string">&apos;pp&apos;</span>) <span class="comment">// same as primaryPreferred</span>\n\n<span class="keyword">new</span> Query().read(<span class="string">&apos;secondary&apos;</span>)\n<span class="keyword">new</span> Query().read(<span class="string">&apos;s&apos;</span>)  <span class="comment">// same as secondary</span>\n\n<span class="keyword">new</span> Query().read(<span class="string">&apos;secondaryPreferred&apos;</span>)\n<span class="keyword">new</span> Query().read(<span class="string">&apos;sp&apos;</span>) <span class="comment">// same as secondaryPreferred</span>\n\n<span class="keyword">new</span> Query().read(<span class="string">&apos;nearest&apos;</span>)\n<span class="keyword">new</span> Query().read(<span class="string">&apos;n&apos;</span>)  <span class="comment">// same as nearest</span>\n\n<span class="comment">// read from secondaries with matching tags</span>\n<span class="keyword">new</span> Query().read(<span class="string">&apos;s&apos;</span>, [{ dc:<span class="string">&apos;sf&apos;</span>, s: <span class="number">1</span> },{ dc:<span class="string">&apos;ma&apos;</span>, s: <span class="number">2</span> }])</code></pre>\n\n<p>Read more about how to use read preferrences here and here.</p><span class="prog__sub">Parameters:</span><ul><li><code>pref</code><span class="types"> &lt;String&gt; </span><span>one of the listed preference options or aliases</span></li><li><code>[tags]</code><span class="types"> &lt;Array&gt; </span><span>optional tags for this query</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-read
Query.read	R	Query-read										
Query read	R	Query-read										
Query-regex	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#regex(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a $regex query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-regex
Query.regex	R	Query-regex										
Query regex	R	Query-regex										
Query-remove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#remove(<code>[criteria]</code>, <code>[callback]</code>)</code></pre><p>Declare and/or execute this query as a remove() operation.</p><span class="prog__sub">Example</span>\n\n<pre><code>Model.remove({ artist: <span class="string">&apos;Anne Murray&apos;</span> }, callback)</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>The operation is only executed when a callback is passed. To force execution without a callback, you must first call <code>remove()</code> and then execute it by using the <code>exec()</code> method.</p>\n\n<pre><code><span class="comment">// not executed</span>\n<span class="keyword">var</span> query = Model.find().remove({ name: <span class="string">&apos;Anne Murray&apos;</span> })\n\n<span class="comment">// executed</span>\nquery.remove({ name: <span class="string">&apos;Anne Murray&apos;</span> }, callback)\nquery.remove({ name: <span class="string">&apos;Anne Murray&apos;</span> }).remove(callback)\n\n<span class="comment">// executed without a callback</span>\nquery.exec()\n\n<span class="comment">// summary</span>\nquery.remove(conds, fn); <span class="comment">// executes</span>\nquery.remove(conds)\nquery.remove(fn) <span class="comment">// executes</span>\nquery.remove()</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[criteria]</code><span class="types"> &lt;Object, Query&gt; </span><span>mongodb selector</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-remove
Query.remove	R	Query-remove										
Query remove	R	Query-remove										
Query-select	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#select(<code>arg</code>)</code></pre><p>Specifies which document fields to include or exclude (also known as the query &quot;projection&quot;)</p><p>When using string syntax, prefixing a path with <code>-</code> will flag that path as excluded. When a path does not have the <code>-</code> prefix, it is included. Lastly, if a path is prefixed with <code>+</code>, it forces inclusion of the path, which is useful for paths excluded at the schema level.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// include a and b, exclude other fields</span>\nquery.select(<span class="string">&apos;a b&apos;</span>);\n\n<span class="comment">// exclude c and d, include other fields</span>\nquery.select(<span class="string">&apos;-c -d&apos;</span>);\n\n<span class="comment">// or you may use object notation, useful when</span>\n<span class="comment">// you have keys already prefixed with a &quot;-&quot;</span>\nquery.select({ a: <span class="number">1</span>, b: <span class="number">1</span> });\nquery.select({ c: <span class="number">0</span>, d: <span class="number">0</span> });\n\n<span class="comment">// force inclusion of field excluded at schema level</span>\nquery.select(<span class="string">&apos;+path&apos;</span>)</code></pre>\n\n<span class="prog__sub">NOTE:</span>\n\n<p>Cannot be used with <code>distinct()</code>.</p>\n\n<p><em>v2 had slightly different syntax such as allowing arrays of field names. This support was removed in v3.</em></p><span class="prog__sub">Parameters:</span><ul><li><code>arg</code><span class="types"> &lt;Object, String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-select
Query.select	R	Query-select										
Query select	R	Query-select										
Query-selected	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#selected()</code></pre><p>Determines if field selection has been made.</p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-selected
Query.selected	R	Query-selected										
Query selected	R	Query-selected										
Query-selectedExclusively	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#selectedExclusively()</code></pre><p>Determines if exclusive field selection has been made.</p><pre><code>query.selectedExclusively() <span class="comment">// false</span>\nquery.select(<span class="string">&apos;-name&apos;</span>)\nquery.selectedExclusively() <span class="comment">// true</span>\nquery.selectedInclusively() <span class="comment">// false</span></code></pre><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-selectedExclusively
Query.selectedExclusively	R	Query-selectedExclusively										
Query selectedExclusively	R	Query-selectedExclusively										
Query-selectedInclusively	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#selectedInclusively()</code></pre><p>Determines if inclusive field selection has been made.</p><pre><code>query.selectedInclusively() <span class="comment">// false</span>\nquery.select(<span class="string">&apos;name&apos;</span>)\nquery.selectedInclusively() <span class="comment">// true</span></code></pre><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-selectedInclusively
Query.selectedInclusively	R	Query-selectedInclusively										
Query selectedInclusively	R	Query-selectedInclusively										
Query-setOptions	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#setOptions(<code>options</code>)</code></pre><p>Sets query options.</p><span class="prog__sub">Options:</span>\n\n<ul>\n<li>tailable *</li>\n<li>sort *</li>\n<li>limit *</li>\n<li>skip *</li>\n<li>maxscan *</li>\n<li>batchSize *</li>\n<li>comment *</li>\n<li>snapshot *</li>\n<li>hint *</li>\n<li>readPreference **</li>\n<li>lean *</li>\n<li>safe</li>\n</ul>\n\n<p><em>* denotes a query helper method is also available</em><br><em>** query helper method to set <code>readPreference</code> is <code>read()</code></em></p><span class="prog__sub">Parameters:</span><ul><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-setOptions
Query.setOptions	R	Query-setOptions										
Query setOptions	R	Query-setOptions										
Query-size	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#size(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a $size query condition.</p><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code>MyModel.where(<span class="string">&apos;tags&apos;</span>).size(<span class="number">0</span>).exec(<span class="function"><span class="keyword">function</span> <span class="params">(err, docs)</span> {</span>\n  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);\n\n  assert(Array.isArray(docs));\n  console.log(<span class="string">&apos;documents with 0 tags&apos;</span>, docs);\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-size
Query.size	R	Query-size										
Query size	R	Query-size										
Query-skip	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#skip(<code>val</code>)</code></pre><p>Specifies the number of documents to skip.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.skip(<span class="number">100</span>).limit(<span class="number">20</span>)</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>Cannot be used with <code>distinct()</code></p><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Number&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-skip
Query.skip	R	Query-skip										
Query skip	R	Query-skip										
Query-slaveOk	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#slaveOk(<code>v</code>)</code></pre><p><em>DEPRECATED</em> Sets the slaveOk option.</p><p><strong>Deprecated</strong> in MongoDB 2.2 in favor of read preferences.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code>query.slaveOk() <span class="comment">// true</span>\nquery.slaveOk(<span class="literal">true</span>)\nquery.slaveOk(<span class="literal">false</span>)</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>v</code><span class="types"> &lt;Boolean&gt; </span><span>defaults to true</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-slaveOk
Query.slaveOk	R	Query-slaveOk										
Query slaveOk	R	Query-slaveOk										
Query-slice	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#slice(<code>[path]</code>, <code>val</code>)</code></pre><p>Specifies a $slice projection for an array.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.slice(<span class="string">&apos;comments&apos;</span>, <span class="number">5</span>)\nquery.slice(<span class="string">&apos;comments&apos;</span>, -<span class="number">5</span>)\nquery.slice(<span class="string">&apos;comments&apos;</span>, [<span class="number">10</span>, <span class="number">5</span>])\nquery.where(<span class="string">&apos;comments&apos;</span>).slice(<span class="number">5</span>)\nquery.where(<span class="string">&apos;comments&apos;</span>).slice([-<span class="number">10</span>, <span class="number">5</span>])</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>val</code><span class="types"> &lt;Number&gt; </span><span>number/range of elements to slice</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-slice
Query.slice	R	Query-slice										
Query slice	R	Query-slice										
Query-snapshot	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#snapshot()</code></pre><p>Specifies this query as a <code>snapshot</code> query.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.snapshot() <span class="comment">// true</span>\nquery.snapshot(<span class="literal">true</span>)\nquery.snapshot(<span class="literal">false</span>)</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>Cannot be used with <code>distinct()</code></p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-snapshot
Query.snapshot	R	Query-snapshot										
Query snapshot	R	Query-snapshot										
Query-sort	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#sort(<code>arg</code>)</code></pre><p>Sets the sort order</p><p>If an object is passed, values allowed are <code>asc</code>, <code>desc</code>, <code>ascending</code>, <code>descending</code>, <code>1</code>, and <code>-1</code>.</p>\n\n<p>If a string is passed, it must be a space delimited list of path names. The<br>sort order of each path is ascending unless the path name is prefixed with <code>-</code><br>which will be treated as descending.</p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// sort by &quot;field&quot; ascending and &quot;test&quot; descending</span>\nquery.sort({ field: <span class="string">&apos;asc&apos;</span>, test: -<span class="number">1</span> });\n\n<span class="comment">// equivalent</span>\nquery.sort(<span class="string">&apos;field -test&apos;</span>);</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>Cannot be used with <code>distinct()</code></p><span class="prog__sub">Parameters:</span><ul><li><code>arg</code><span class="types"> &lt;Object, String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-sort
Query.sort	R	Query-sort										
Query sort	R	Query-sort										
Query-stream	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#stream(<code>[options]</code>)</code></pre><p>Returns a Node.js 0.8 style read stream interface.</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// follows the nodejs 0.8 stream api</span>\nThing.find({ name: <span class="regexp">/^hello/</span> }).stream().pipe(res)\n\n<span class="comment">// manual streaming</span>\n<span class="keyword">var</span> stream = Thing.find({ name: <span class="regexp">/^hello/</span> }).stream();\n\nstream.on(<span class="string">&apos;data&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(doc)</span> {</span>\n  <span class="comment">// do something with the mongoose document</span>\n}).on(<span class="string">&apos;error&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  <span class="comment">// handle the error</span>\n}).on(<span class="string">&apos;close&apos;</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n  <span class="comment">// the stream is closed</span>\n});</code></pre>\n\n<span class="prog__sub">Valid options</span>\n\n<ul>\n<li><code>transform</code>: optional function which accepts a mongoose document. The return value of the function will be emitted on <code>data</code>.</li>\n</ul>\n\n<span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// JSON.stringify all documents before emitting</span>\n<span class="keyword">var</span> stream = Thing.find().stream({ transform: JSON.stringify });\nstream.pipe(writeStream);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;QueryStream&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-stream
Query.stream	R	Query-stream										
Query stream	R	Query-stream										
Query-tailable	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#tailable(<code>bool</code>, <code>[opts]</code>, <code>[opts.numberOfRetries]</code>, <code>[opts.tailableRetryInterval]</code>)</code></pre><p>Sets the tailable option (for use with capped collections).</p><span class="prog__sub">Example</span>\n\n<pre><code>query.tailable() <span class="comment">// true</span>\nquery.tailable(<span class="literal">true</span>)\nquery.tailable(<span class="literal">false</span>)</code></pre>\n\n<span class="prog__sub">Note</span>\n\n<p>Cannot be used with <code>distinct()</code></p><span class="prog__sub">Parameters:</span><ul><li><code>bool</code><span class="types"> &lt;Boolean&gt; </span><span>defaults to true</span></li><li><code>[opts]</code><span class="types"> &lt;Object&gt; </span><span>options to set</span></li><li><code>[opts.numberOfRetries]</code><span class="types"> &lt;Number&gt; </span><span>if cursor is exhausted, retry this many times before giving up</span></li><li><code>[opts.tailableRetryInterval]</code><span class="types"> &lt;Number&gt; </span><span>if cursor is exhausted, wait this many milliseconds before retrying</span></li></ul></section>	http://mongoosejs.com/docs/api.html#query_Query-tailable
Query.tailable	R	Query-tailable										
Query tailable	R	Query-tailable										
Query-then	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#then(<code>[resolve]</code>, <code>[reject]</code>)</code></pre><p>Executes the query returning a <code>Promise</code> which will be<br>resolved with either the doc(s) or rejected with the error.</p><span class="prog__sub">Parameters:</span><ul><li><code>[resolve]</code><span class="types"> &lt;Function&gt; </span><span></span></li><li><code>[reject]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-then
Query.then	R	Query-then										
Query then	R	Query-then										
Query-toConstructor	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#toConstructor()</code></pre><p>Converts this query to a customized, reusable query constructor with all arguments and options retained.</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// Create a query for adventure movies and read from the primary</span>\n<span class="comment">// node in the replica-set unless it is down, in which case we&apos;ll</span>\n<span class="comment">// read from a secondary node.</span>\n<span class="keyword">var</span> query = Movie.find({ tags: <span class="string">&apos;adventure&apos;</span> }).read(<span class="string">&apos;primaryPreferred&apos;</span>);\n\n<span class="comment">// create a custom Query constructor based off these settings</span>\n<span class="keyword">var</span> Adventure = query.toConstructor();\n\n<span class="comment">// Adventure is now a subclass of mongoose.Query and works the same way but with the</span>\n<span class="comment">// default query parameters and options set.</span>\nAdventure().exec(callback)\n\n<span class="comment">// further narrow down our query results while still using the previous settings</span>\nAdventure().where({ name: <span class="regexp">/^Life/</span> }).exec(callback);\n\n<span class="comment">// since Adventure is a stand-alone constructor we can also add our own</span>\n<span class="comment">// helper methods and getters without impacting global queries</span>\nAdventure.prototype.startsWith = <span class="function"><span class="keyword">function</span> <span class="params">(prefix)</span> {</span>\n  <span class="keyword">this</span>.where({ name: <span class="keyword">new</span> RegExp(<span class="string">&apos;^&apos;</span> + prefix) })\n  <span class="keyword">return</span> <span class="keyword">this</span>;\n}\nObject.defineProperty(Adventure.prototype, <span class="string">&apos;highlyRated&apos;</span>, {\n  get: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n    <span class="keyword">this</span>.where({ rating: { $gt: <span class="number">4.5</span> }});\n    <span class="keyword">return</span> <span class="keyword">this</span>;\n  }\n})\nAdventure().highlyRated.startsWith(<span class="string">&apos;Life&apos;</span>).exec(callback)</code></pre>\n\n<p>New in 3.7.3</p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>subclass-of-Query</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-toConstructor
Query.toConstructor	R	Query-toConstructor										
Query toConstructor	R	Query-toConstructor										
Query-update	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#update(<code>[criteria]</code>, <code>[doc]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Declare and/or execute this query as an update() operation.</p><p><em>All paths passed that are not $atomic operations will become $set ops.</em></p>\n\n<span class="prog__sub">Example</span>\n\n<pre><code>Model.where({ _id: id }).update({ title: <span class="string">&apos;words&apos;</span> })\n\n<span class="comment">// becomes</span>\n\nModel.where({ _id: id }).update({ $set: { title: <span class="string">&apos;words&apos;</span> }})</code></pre>\n\n<span class="prog__sub">Valid options:</span>\n\n<ul>\n<li><code>safe</code> (boolean) safe mode (defaults to value set in schema (true))</li>\n<li><code>upsert</code> (boolean) whether to create the doc if it doesn&apos;t match (false)</li>\n<li><code>multi</code> (boolean) whether multiple documents should be updated (false)</li>\n<li><code>runValidators</code>: if true, runs update validators on this command. Update validators validate the update operation against the model&apos;s schema.</li>\n<li><code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the defaults specified in the model&apos;s schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on MongoDB&apos;s <code>$setOnInsert</code> operator.</li>\n<li><code>strict</code> (boolean) overrides the <code>strict</code> option for this update</li>\n<li><code>overwrite</code> (boolean) disables update-only mode, allowing you to overwrite the doc (false)</li>\n<li><code>context</code> (string) if set to &apos;query&apos; and <code>runValidators</code> is on, <code>this</code> will refer to the query in custom validator functions that update validation runs. Does nothing if <code>runValidators</code> is false.</li>\n</ul>\n\n<span class="prog__sub">Note</span>\n\n<p>Passing an empty object <code>{}</code> as the doc will result in a no-op unless the <code>overwrite</code> option is passed. Without the <code>overwrite</code> option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.</p>\n\n<span class="prog__sub">Note</span>\n\n<p>The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the <code>exec()</code> method.</p>\n\n<pre><code>var q = Model.where({ _id: id });\nq.update({ $set: { name: &apos;bob&apos; }}).update(); // not executed\n\nq.update({ $set: { name: &apos;bob&apos; }}).exec(); // executed\n\n// keys that are not $atomic ops become $set.\n// this executes the same command as the previous example.\nq.update({ name: &apos;bob&apos; }).exec();\n\n// overwriting with empty docs\nvar q = Model.where({ _id: id }).setOptions({ overwrite: true })\nq.update({ }, callback); // executes\n\n// multi update with overwrite to empty doc\nvar q = Model.where({ _id: id });\nq.setOptions({ multi: true, overwrite: true })\nq.update({ });\nq.update(callback); // executed\n\n// multi updates\nModel.where()\n     .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n\n// more multi updates\nModel.where()\n     .setOptions({ multi: true })\n     .update({ $set: { arr: [] }}, callback)\n\n// single update by default\nModel.where({ email: &apos;address@example.com&apos; })\n     .update({ $inc: { counter: 1 }}, callback)\n</code></pre>\n\n<p>API summary</p>\n\n<pre><code>update(criteria, doc, options, cb) <span class="comment">// executes</span>\nupdate(criteria, doc, options)\nupdate(criteria, doc, cb) <span class="comment">// executes</span>\nupdate(criteria, doc)\nupdate(doc, cb) <span class="comment">// executes</span>\nupdate(doc)\nupdate(cb) <span class="comment">// executes</span>\nupdate(<span class="literal">true</span>) <span class="comment">// executes</span>\nupdate()</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[criteria]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[doc]</code><span class="types"> &lt;Object&gt; </span><span>the update command</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-update
Query.update	R	Query-update										
Query update	R	Query-update										
Query-updateMany	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#updateMany(<code>[criteria]</code>, <code>[doc]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Declare and/or execute this query as an updateMany() operation. Same as<br><code>update()</code>, except MongoDB will update <em>all</em> documents that match<br><code>criteria</code> (as opposed to just the first one) regardless of the value of<br>the <code>multi</code> option.</p><p><strong>Note</strong> updateMany will <em>not</em> fire update middleware. Use <code>pre(&apos;updateMany&apos;)</code><br>and <code>post(&apos;updateMany&apos;)</code> instead.</p><span class="prog__sub">Parameters:</span><ul><li><code>[criteria]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[doc]</code><span class="types"> &lt;Object&gt; </span><span>the update command</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-updateMany
Query.updateMany	R	Query-updateMany										
Query updateMany	R	Query-updateMany										
Query-updateOne	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#updateOne(<code>[criteria]</code>, <code>[doc]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Declare and/or execute this query as an updateOne() operation. Same as<br><code>update()</code>, except MongoDB will update <em>only</em> the first document that<br>matches <code>criteria</code> regardless of the value of the <code>multi</code> option.</p><p><strong>Note</strong> updateOne will <em>not</em> fire update middleware. Use <code>pre(&apos;updateOne&apos;)</code><br>and <code>post(&apos;updateOne&apos;)</code> instead.</p><span class="prog__sub">Parameters:</span><ul><li><code>[criteria]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[doc]</code><span class="types"> &lt;Object&gt; </span><span>the update command</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-updateOne
Query.updateOne	R	Query-updateOne										
Query updateOne	R	Query-updateOne										
Query-where	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#where(<code>[path]</code>, <code>[val]</code>)</code></pre><p>Specifies a <code>path</code> for use with chaining.</p><span class="prog__sub">Example</span>\n\n<pre><code><span class="comment">// instead of writing:</span>\nUser.find({age: {$gte: <span class="number">21</span>, $lte: <span class="number">65</span>}}, callback);\n\n<span class="comment">// we can instead write:</span>\nUser.where(<span class="string">&apos;age&apos;</span>).gte(<span class="number">21</span>).lte(<span class="number">65</span>);\n\n<span class="comment">// passing query conditions is permitted</span>\nUser.find().where({ name: <span class="string">&apos;vonderful&apos;</span> })\n\n<span class="comment">// chaining</span>\nUser\n.where(<span class="string">&apos;age&apos;</span>).gte(<span class="number">21</span>).lte(<span class="number">65</span>)\n.where(<span class="string">&apos;name&apos;</span>, <span class="regexp">/^vonderful/i</span>)\n.where(<span class="string">&apos;friends&apos;</span>).slice(<span class="number">10</span>)\n.exec(callback)</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[path]</code><span class="types"> &lt;String, Object&gt; </span><span></span></li><li><code>[val]</code><span class="types"> &lt;T&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-where
Query.where	R	Query-where										
Query where	R	Query-where										
Query-within	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#within()</code></pre><p>Defines a <code>$within</code> or <code>$geoWithin</code> argument for geo-spatial queries.</p><span class="prog__sub">Example</span>\n\n<pre><code>query.where(path).within().box()\nquery.where(path).within().circle()\nquery.where(path).within().geometry()\n\nquery.where(<span class="string">&apos;loc&apos;</span>).within({ center: [<span class="number">50</span>,<span class="number">50</span>], radius: <span class="number">10</span>, unique: <span class="literal">true</span>, spherical: <span class="literal">true</span> });\nquery.where(<span class="string">&apos;loc&apos;</span>).within({ box: [[<span class="number">40.73</span>, -<span class="number">73.9</span>], [<span class="number">40.7</span>, -<span class="number">73.988</span>]] });\nquery.where(<span class="string">&apos;loc&apos;</span>).within({ polygon: [[],[],[],[]] });\n\nquery.where(<span class="string">&apos;loc&apos;</span>).within([], [], []) <span class="comment">// polygon</span>\nquery.where(<span class="string">&apos;loc&apos;</span>).within([], []) <span class="comment">// box</span>\nquery.where(<span class="string">&apos;loc&apos;</span>).within({ type: <span class="string">&apos;LineString&apos;</span>, coordinates: [...] }); <span class="comment">// geometry</span></code></pre>\n\n<p><strong>MUST</strong> be used after <code>where()</code>.</p>\n\n<span class="prog__sub">NOTE:</span>\n\n<p>As of Mongoose 3.7, <code>$geoWithin</code> is always used for queries. To change this behavior, see Query.use$geoWithin.</p>\n\n<span class="prog__sub">NOTE:</span>\n\n<p>In Mongoose 3.7, <code>within</code> changed from a getter to a function. If you need the old syntax, use this.</p><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#query_Query-within
Query.within	R	Query-within										
Query within	R	Query-within										
Query-use%2524geoWithin	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Query#<span>use$geoWithin</span></code></pre><p>Flag to opt out of using <code>$geoWithin</code>.</p></section>	http://mongoosejs.com/docs/api.html#query_Query-use%2524geoWithin
Query.use%2524geoWithin	R	Query-use%2524geoWithin										
Query use%2524geoWithin	R	Query-use%2524geoWithin										
Decimal128-checkRequired	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Decimal128#checkRequired(<code>value</code>, <code>doc</code>)</code></pre><p>Check if the given value satisfies a required validator.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Any&gt; </span><span></span></li><li><code>doc</code><span class="types"> &lt;Document&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_decimal128_Decimal128-checkRequired
Decimal128.checkRequired	R	Decimal128-checkRequired										
Decimal128 checkRequired	R	Decimal128-checkRequired										
Decimal128	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Decimal128(<code>key</code>, <code>options</code>)</code></pre><p>Decimal128 SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_decimal128_Decimal128
Decimal128.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Decimal128.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_decimal128_Decimal128.schemaName
Decimal128 schemaName	R	Decimal128.schemaName										
SchemaArray-checkRequired	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaArray#checkRequired(<code>value</code>)</code></pre><p>Check if the given value satisfies a required validator. The given value<br>must be not null nor undefined, and have a non-zero length.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Any&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_array_SchemaArray-checkRequired
SchemaArray.checkRequired	R	SchemaArray-checkRequired										
SchemaArray checkRequired	R	SchemaArray-checkRequired										
SchemaArray	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaArray(<code>key</code>, <code>cast</code>, <code>options</code>)</code></pre><p>Array SchemaType constructor</p><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>cast</code><span class="types"> &lt;SchemaType&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_array_SchemaArray
SchemaArray.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaArray.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_array_SchemaArray.schemaName
SchemaArray schemaName	R	SchemaArray.schemaName										
SchemaString-checkRequired	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#checkRequired(<code>value</code>, <code>doc</code>)</code></pre><p>Check if the given value satisfies a required validator.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Any&gt; </span><span></span></li><li><code>doc</code><span class="types"> &lt;Document&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-checkRequired
SchemaString.checkRequired	R	SchemaString-checkRequired										
SchemaString checkRequired	R	SchemaString-checkRequired										
SchemaString-enum	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#enum(<code>[args...]</code>)</code></pre><p>Adds an enum validator</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> states = [<span class="string">&apos;opening&apos;</span>, <span class="string">&apos;open&apos;</span>, <span class="string">&apos;closing&apos;</span>, <span class="string">&apos;closed&apos;</span>]\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ state: { type: String, enum: states }})\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s)\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ state: <span class="string">&apos;invalid&apos;</span> })\nm.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.error(String(err)) <span class="comment">// ValidationError: `invalid` is not a valid enum value for path `state`.</span>\n  m.state = <span class="string">&apos;open&apos;</span>\n  m.save(callback) <span class="comment">// success</span>\n})\n\n<span class="comment">// or with custom error messages</span>\n<span class="keyword">var</span> enum = {\n  values: [<span class="string">&apos;opening&apos;</span>, <span class="string">&apos;open&apos;</span>, <span class="string">&apos;closing&apos;</span>, <span class="string">&apos;closed&apos;</span>],\n  message: <span class="string">&apos;enum validator failed for path `{PATH}` with value `{VALUE}`&apos;</span>\n}\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ state: { type: String, enum: enum })\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s)\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ state: <span class="string">&apos;invalid&apos;</span> })\nm.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.error(String(err)) <span class="comment">// ValidationError: enum validator failed for path `state` with value `invalid`</span>\n  m.state = <span class="string">&apos;open&apos;</span>\n  m.save(callback) <span class="comment">// success</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[args...]</code><span class="types"> &lt;String, Object&gt; </span><span>enumeration values</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-enum
SchemaString.enum	R	SchemaString-enum										
SchemaString enum	R	SchemaString-enum										
SchemaString-lowercase	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#lowercase()</code></pre><p>Adds a lowercase setter.</p><span class="prog__sub">Example:</span>\n\n<pre><code>var s = new Schema({ email: { type: String, lowercase: true }})\nvar M = db.model(&apos;M&apos;, s);\nvar m = new M({ email: &apos;SomeEmail@example.COM&apos; });\nconsole.log(m.email) // someemail@example.com\n</code></pre><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-lowercase
SchemaString.lowercase	R	SchemaString-lowercase										
SchemaString lowercase	R	SchemaString-lowercase										
SchemaString-match	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#match(<code>regExp</code>, <code>[message]</code>)</code></pre><p>Sets a regexp validator.</p><p>Any value that does not pass <code>regExp</code>.test(val) will fail validation.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ name: { type: String, match: <span class="regexp">/^a/</span> }})\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s)\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ name: <span class="string">&apos;I am invalid&apos;</span> })\nm.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.error(String(err)) <span class="comment">// &quot;ValidationError: Path `name` is invalid (I am invalid).&quot;</span>\n  m.name = <span class="string">&apos;apples&apos;</span>\n  m.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n    assert.ok(err) <span class="comment">// success</span>\n  })\n})\n\n<span class="comment">// using a custom error message</span>\n<span class="keyword">var</span> match = [ <span class="regexp">/\.html$/</span>, <span class="string">&quot;That file doesn&apos;t end in .html ({VALUE})&quot;</span> ];\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ file: { type: String, match: match }})\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s);\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ file: <span class="string">&apos;invalid&apos;</span> });\nm.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.log(String(err)) <span class="comment">// &quot;ValidationError: That file doesn&apos;t end in .html (invalid)&quot;</span>\n})</code></pre>\n\n<p>Empty strings, <code>undefined</code>, and <code>null</code> values always pass the match validator. If you require these values, enable the <code>required</code> validator also.</p>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ name: { type: String, match: <span class="regexp">/^a/</span>, required: <span class="literal">true</span> }})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>regExp</code><span class="types"> &lt;RegExp&gt; </span><span>regular expression to test against</span></li><li><code>[message]</code><span class="types"> &lt;String&gt; </span><span>optional custom error message</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-match
SchemaString.match	R	SchemaString-match										
SchemaString match	R	SchemaString-match										
SchemaString-maxlength	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#maxlength(<code>value</code>, <code>[message]</code>)</code></pre><p>Sets a maximum length validator.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ postalCode: { type: String, maxlength: <span class="number">9</span> })\n<span class="keyword">var</span> Address = db.model(<span class="string">&apos;Address&apos;</span>, schema)\n<span class="keyword">var</span> address = <span class="keyword">new</span> Address({ postalCode: <span class="string">&apos;9512512345&apos;</span> })\naddress.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.error(err) <span class="comment">// validator error</span>\n  address.postalCode = <span class="string">&apos;95125&apos;</span>;\n  address.save() <span class="comment">// success</span>\n})\n\n<span class="comment">// custom error messages</span>\n<span class="comment">// We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length</span>\n<span class="keyword">var</span> maxlength = [<span class="number">9</span>, <span class="string">&apos;The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).&apos;</span>];\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ postalCode: { type: String, maxlength: maxlength })\n<span class="keyword">var</span> Address = mongoose.model(<span class="string">&apos;Address&apos;</span>, schema);\n<span class="keyword">var</span> address = <span class="keyword">new</span> Address({ postalCode: <span class="string">&apos;9512512345&apos;</span> });\naddress.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.log(String(err)) <span class="comment">// ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Number&gt; </span><span>maximum string length</span></li><li><code>[message]</code><span class="types"> &lt;String&gt; </span><span>optional custom error message</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-maxlength
SchemaString.maxlength	R	SchemaString-maxlength										
SchemaString maxlength	R	SchemaString-maxlength										
SchemaString-minlength	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#minlength(<code>value</code>, <code>[message]</code>)</code></pre><p>Sets a minimum length validator.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ postalCode: { type: String, minlength: <span class="number">5</span> })\n<span class="keyword">var</span> Address = db.model(<span class="string">&apos;Address&apos;</span>, schema)\n<span class="keyword">var</span> address = <span class="keyword">new</span> Address({ postalCode: <span class="string">&apos;9512&apos;</span> })\naddress.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.error(err) <span class="comment">// validator error</span>\n  address.postalCode = <span class="string">&apos;95125&apos;</span>;\n  address.save() <span class="comment">// success</span>\n})\n\n<span class="comment">// custom error messages</span>\n<span class="comment">// We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length</span>\n<span class="keyword">var</span> minlength = [<span class="number">5</span>, <span class="string">&apos;The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).&apos;</span>];\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ postalCode: { type: String, minlength: minlength })\n<span class="keyword">var</span> Address = mongoose.model(<span class="string">&apos;Address&apos;</span>, schema);\n<span class="keyword">var</span> address = <span class="keyword">new</span> Address({ postalCode: <span class="string">&apos;9512&apos;</span> });\naddress.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.log(String(err)) <span class="comment">// ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Number&gt; </span><span>minimum string length</span></li><li><code>[message]</code><span class="types"> &lt;String&gt; </span><span>optional custom error message</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-minlength
SchemaString.minlength	R	SchemaString-minlength										
SchemaString minlength	R	SchemaString-minlength										
SchemaString	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString(<code>key</code>, <code>options</code>)</code></pre><p>String SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString
SchemaString-trim	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#trim()</code></pre><p>Adds a trim setter.</p><p>The string value will be trimmed when set.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ name: { type: String, trim: <span class="literal">true</span> }})\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s)\n<span class="keyword">var</span> string = <span class="string">&apos; some name &apos;</span>\nconsole.log(string.length) <span class="comment">// 11</span>\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ name: string })\nconsole.log(m.name.length) <span class="comment">// 9</span></code></pre><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-trim
SchemaString.trim	R	SchemaString-trim										
SchemaString trim	R	SchemaString-trim										
SchemaString-uppercase	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString#uppercase()</code></pre><p>Adds an uppercase setter.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ caps: { type: String, uppercase: <span class="literal">true</span> }})\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s);\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ caps: <span class="string">&apos;an example&apos;</span> });\nconsole.log(m.caps) <span class="comment">// AN EXAMPLE</span></code></pre><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString-uppercase
SchemaString.uppercase	R	SchemaString-uppercase										
SchemaString uppercase	R	SchemaString-uppercase										
SchemaString.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaString.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_string_SchemaString.schemaName
SchemaString schemaName	R	SchemaString.schemaName										
DocumentArray	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>DocumentArray(<code>key</code>, <code>schema</code>, <code>options</code>)</code></pre><p>SubdocsArray SchemaType constructor</p><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>schema</code><span class="types"> &lt;Schema&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_documentarray_DocumentArray
DocumentArray.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>DocumentArray.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_documentarray_DocumentArray.schemaName
DocumentArray schemaName	R	DocumentArray.schemaName										
SchemaNumber-checkRequired	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber#checkRequired(<code>value</code>, <code>doc</code>)</code></pre><p>Check if the given value satisfies a required validator.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Any&gt; </span><span></span></li><li><code>doc</code><span class="types"> &lt;Document&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-checkRequired
SchemaNumber.checkRequired	R	SchemaNumber-checkRequired										
SchemaNumber checkRequired	R	SchemaNumber-checkRequired										
SchemaNumber-max	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber#max(<code>maximum</code>, <code>[message]</code>)</code></pre><p>Sets a maximum number validator.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ n: { type: Number, max: <span class="number">10</span> })\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s)\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ n: <span class="number">11</span> })\nm.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.error(err) <span class="comment">// validator error</span>\n  m.n = <span class="number">10</span>;\n  m.save() <span class="comment">// success</span>\n})\n\n<span class="comment">// custom error messages</span>\n<span class="comment">// We can also use the special {MAX} token which will be replaced with the invalid value</span>\n<span class="keyword">var</span> max = [<span class="number">10</span>, <span class="string">&apos;The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).&apos;</span>];\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ n: { type: Number, max: max })\n<span class="keyword">var</span> M = mongoose.model(<span class="string">&apos;Measurement&apos;</span>, schema);\n<span class="keyword">var</span> s= <span class="keyword">new</span> M({ n: <span class="number">4</span> });\ns.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.log(String(err)) <span class="comment">// ValidationError: The value of path `n` (4) exceeds the limit (10).</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>maximum</code><span class="types"> &lt;Number&gt; </span><span>number</span></li><li><code>[message]</code><span class="types"> &lt;String&gt; </span><span>optional custom error message</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-max
SchemaNumber.max	R	SchemaNumber-max										
SchemaNumber max	R	SchemaNumber-max										
SchemaNumber-min	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber#min(<code>value</code>, <code>[message]</code>)</code></pre><p>Sets a minimum number validator.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ n: { type: Number, min: <span class="number">10</span> })\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s)\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ n: <span class="number">9</span> })\nm.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.error(err) <span class="comment">// validator error</span>\n  m.n = <span class="number">10</span>;\n  m.save() <span class="comment">// success</span>\n})\n\n<span class="comment">// custom error messages</span>\n<span class="comment">// We can also use the special {MIN} token which will be replaced with the invalid value</span>\n<span class="keyword">var</span> min = [<span class="number">10</span>, <span class="string">&apos;The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).&apos;</span>];\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ n: { type: Number, min: min })\n<span class="keyword">var</span> M = mongoose.model(<span class="string">&apos;Measurement&apos;</span>, schema);\n<span class="keyword">var</span> s= <span class="keyword">new</span> M({ n: <span class="number">4</span> });\ns.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.log(String(err)) <span class="comment">// ValidationError: The value of path `n` (4) is beneath the limit (10).</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Number&gt; </span><span>minimum number</span></li><li><code>[message]</code><span class="types"> &lt;String&gt; </span><span>optional custom error message</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-min
SchemaNumber.min	R	SchemaNumber-min										
SchemaNumber min	R	SchemaNumber-min										
SchemaNumber	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber(<code>key</code>, <code>options</code>)</code></pre><p>Number SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber
SchemaNumber.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaNumber.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber.schemaName
SchemaNumber schemaName	R	SchemaNumber.schemaName										
SchemaDate-checkRequired	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate#checkRequired(<code>value</code>, <code>doc</code>)</code></pre><p>Check if the given value satisfies a required validator. To satisfy<br>a required validator, the given value must be an instance of <code>Date</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Any&gt; </span><span></span></li><li><code>doc</code><span class="types"> &lt;Document&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate-checkRequired
SchemaDate.checkRequired	R	SchemaDate-checkRequired										
SchemaDate checkRequired	R	SchemaDate-checkRequired										
SchemaDate-expires	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate#expires(<code>when</code>)</code></pre><p>Declares a TTL index (rounded to the nearest second) for <em>Date</em> types only.</p><p>This sets the <code>expireAfterSeconds</code> index option available in MongoDB &gt;= 2.1.2.<br>This index type is only compatible with Date types.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="comment">// expire in 24 hours</span>\n<span class="keyword">new</span> Schema({ createdAt: { type: Date, expires: <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span> }});</code></pre>\n\n<p><code>expires</code> utilizes the <code>ms</code> module from guille allowing us to use a friendlier syntax:</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="comment">// expire in 24 hours</span>\n<span class="keyword">new</span> Schema({ createdAt: { type: Date, expires: <span class="string">&apos;24h&apos;</span> }});\n\n<span class="comment">// expire in 1.5 hours</span>\n<span class="keyword">new</span> Schema({ createdAt: { type: Date, expires: <span class="string">&apos;1.5h&apos;</span> }});\n\n<span class="comment">// expire in 7 days</span>\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ createdAt: Date });\nschema.path(<span class="string">&apos;createdAt&apos;</span>).expires(<span class="string">&apos;7d&apos;</span>);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>when</code><span class="types"> &lt;Number, String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate-expires
SchemaDate.expires	R	SchemaDate-expires										
SchemaDate expires	R	SchemaDate-expires										
SchemaDate-max	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate#max(<code>maximum</code>, <code>[message]</code>)</code></pre><p>Sets a maximum date validator.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ d: { type: Date, max: Date(<span class="string">&apos;2014-01-01&apos;</span>) })\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s)\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ d: Date(<span class="string">&apos;2014-12-08&apos;</span>) })\nm.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.error(err) <span class="comment">// validator error</span>\n  m.d = Date(<span class="string">&apos;2013-12-31&apos;</span>);\n  m.save() <span class="comment">// success</span>\n})\n\n<span class="comment">// custom error messages</span>\n<span class="comment">// We can also use the special {MAX} token which will be replaced with the invalid value</span>\n<span class="keyword">var</span> max = [Date(<span class="string">&apos;2014-01-01&apos;</span>), <span class="string">&apos;The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).&apos;</span>];\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ d: { type: Date, max: max })\n<span class="keyword">var</span> M = mongoose.model(<span class="string">&apos;M&apos;</span>, schema);\n<span class="keyword">var</span> s= <span class="keyword">new</span> M({ d: Date(<span class="string">&apos;2014-12-08&apos;</span>) });\ns.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.log(String(err)) <span class="comment">// ValidationError: The value of path `d` (2014-12-08) exceeds the limit (2014-01-01).</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>maximum</code><span class="types"> &lt;Date&gt; </span><span>date</span></li><li><code>[message]</code><span class="types"> &lt;String&gt; </span><span>optional custom error message</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate-max
SchemaDate.max	R	SchemaDate-max										
SchemaDate max	R	SchemaDate-max										
SchemaDate-min	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate#min(<code>value</code>, <code>[message]</code>)</code></pre><p>Sets a minimum date validator.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ d: { type: Date, min: Date(<span class="string">&apos;1970-01-01&apos;</span>) })\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, s)\n<span class="keyword">var</span> m = <span class="keyword">new</span> M({ d: Date(<span class="string">&apos;1969-12-31&apos;</span>) })\nm.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.error(err) <span class="comment">// validator error</span>\n  m.d = Date(<span class="string">&apos;2014-12-08&apos;</span>);\n  m.save() <span class="comment">// success</span>\n})\n\n<span class="comment">// custom error messages</span>\n<span class="comment">// We can also use the special {MIN} token which will be replaced with the invalid value</span>\n<span class="keyword">var</span> min = [Date(<span class="string">&apos;1970-01-01&apos;</span>), <span class="string">&apos;The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).&apos;</span>];\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ d: { type: Date, min: min })\n<span class="keyword">var</span> M = mongoose.model(<span class="string">&apos;M&apos;</span>, schema);\n<span class="keyword">var</span> s= <span class="keyword">new</span> M({ d: Date(<span class="string">&apos;1969-12-31&apos;</span>) });\ns.validate(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  console.log(String(err)) <span class="comment">// ValidationError: The value of path `d` (1969-12-31) is before the limit (1970-01-01).</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Date&gt; </span><span>minimum date</span></li><li><code>[message]</code><span class="types"> &lt;String&gt; </span><span>optional custom error message</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate-min
SchemaDate.min	R	SchemaDate-min										
SchemaDate min	R	SchemaDate-min										
SchemaDate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate(<code>key</code>, <code>options</code>)</code></pre><p>Date SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate
SchemaDate.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaDate.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_date_SchemaDate.schemaName
SchemaDate schemaName	R	SchemaDate.schemaName										
SchemaBuffer-checkRequired	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBuffer#checkRequired(<code>value</code>, <code>doc</code>)</code></pre><p>Check if the given value satisfies a required validator. To satisfy a<br>required validator, a buffer must not be null or undefined and have<br>non-zero length.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Any&gt; </span><span></span></li><li><code>doc</code><span class="types"> &lt;Document&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_buffer_SchemaBuffer-checkRequired
SchemaBuffer.checkRequired	R	SchemaBuffer-checkRequired										
SchemaBuffer checkRequired	R	SchemaBuffer-checkRequired										
SchemaBuffer	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBuffer(<code>key</code>, <code>options</code>)</code></pre><p>Buffer SchemaType constructor</p><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_buffer_SchemaBuffer
SchemaBuffer.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBuffer.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_buffer_SchemaBuffer.schemaName
SchemaBuffer schemaName	R	SchemaBuffer.schemaName										
SchemaBoolean-checkRequired	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBoolean#checkRequired(<code>value</code>)</code></pre><p>Check if the given value satisfies a required validator. For a boolean<br>to satisfy a required validator, it must be strictly equal to true or to<br>false.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Any&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_boolean_SchemaBoolean-checkRequired
SchemaBoolean.checkRequired	R	SchemaBoolean-checkRequired										
SchemaBoolean checkRequired	R	SchemaBoolean-checkRequired										
SchemaBoolean	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBoolean(<code>path</code>, <code>options</code>)</code></pre><p>Boolean SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_boolean_SchemaBoolean
SchemaBoolean.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaBoolean.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_boolean_SchemaBoolean.schemaName
SchemaBoolean schemaName	R	SchemaBoolean.schemaName										
ObjectId-auto	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId#auto(<code>turnOn</code>)</code></pre><p>Adds an auto-generated ObjectId default if turnOn is true.</p><span class="prog__sub">Parameters:</span><ul><li><code>turnOn</code><span class="types"> &lt;Boolean&gt; </span><span>auto generated ObjectId defaults</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_objectid_ObjectId-auto
ObjectId.auto	R	ObjectId-auto										
ObjectId auto	R	ObjectId-auto										
ObjectId-checkRequired	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId#checkRequired(<code>value</code>, <code>doc</code>)</code></pre><p>Check if the given value satisfies a required validator.</p><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Any&gt; </span><span></span></li><li><code>doc</code><span class="types"> &lt;Document&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schema_objectid_ObjectId-checkRequired
ObjectId.checkRequired	R	ObjectId-checkRequired										
ObjectId checkRequired	R	ObjectId-checkRequired										
ObjectId	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId(<code>key</code>, <code>options</code>)</code></pre><p>ObjectId SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_objectid_ObjectId
ObjectId.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ObjectId.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_objectid_ObjectId.schemaName
ObjectId schemaName	R	ObjectId.schemaName										
Mixed	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mixed(<code>path</code>, <code>options</code>)</code></pre><p>Mixed SchemaType constructor.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_mixed_Mixed
Mixed.schemaName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Mixed.schemaName</code></pre><p>This schema type&apos;s name, to defend against minifiers that mangle<br>function names.</p></section>	http://mongoosejs.com/docs/api.html#schema_mixed_Mixed.schemaName
Mixed schemaName	R	Mixed.schemaName										
Embedded	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Embedded(<code>schema</code>, <code>key</code>, <code>options</code>)</code></pre><p>Sub-schema schematype constructor</p><span class="prog__sub">Parameters:</span><ul><li><code>schema</code><span class="types"> &lt;Schema&gt; </span><span></span></li><li><code>key</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schema_embedded_Embedded
Aggregate-addCursorFlag	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#addCursorFlag(<code>flag</code>, <code>value</code>)</code></pre><p>Adds a cursor flag</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.aggregate(..).addCursorFlag(<span class="string">&apos;noCursorTimeout&apos;</span>, <span class="literal">true</span>).exec();</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>flag</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>value</code><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-addCursorFlag
Aggregate.addCursorFlag	R	Aggregate-addCursorFlag										
Aggregate addCursorFlag	R	Aggregate-addCursorFlag										
Aggregate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate(<code>[ops]</code>)</code></pre><p>Aggregate constructor used for building aggregation pipelines.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">new</span> Aggregate();\n<span class="keyword">new</span> Aggregate({ $project: { a: <span class="number">1</span>, b: <span class="number">1</span> } });\n<span class="keyword">new</span> Aggregate({ $project: { a: <span class="number">1</span>, b: <span class="number">1</span> } }, { $skip: <span class="number">5</span> });\n<span class="keyword">new</span> Aggregate([{ $project: { a: <span class="number">1</span>, b: <span class="number">1</span> } }, { $skip: <span class="number">5</span> }]);</code></pre>\n\n<p>Returned when calling Model.aggregate().</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code>Model\n.aggregate({ $match: { age: { $gte: <span class="number">21</span> }}})\n.unwind(<span class="string">&apos;tags&apos;</span>)\n.exec(callback)</code></pre>\n\n<span class="prog__sub">Note:</span>\n\n<ul>\n<li>The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).</li>\n<li>Requires MongoDB &gt;= 2.1</li>\n<li>Mongoose does <strong>not</strong> cast pipeline stages. <code>new Aggregate({ $match: { _id: &apos;00000000000000000000000a&apos; } });</code> will not work unless <code>_id</code> is a string in the database. Use <code>new Aggregate({ $match: { _id: mongoose.Types.ObjectId(&apos;00000000000000000000000a&apos;) } });</code> instead.</li>\n</ul><span class="prog__sub">Parameters:</span><ul><li><code>[ops]</code><span class="types"> &lt;Object, Array&gt; </span><span>aggregation operator(s) or operator array</span></li></ul></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate
Aggregate-allowDiskUse	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#allowDiskUse(<code>value</code>, <code>[tags]</code>)</code></pre><p>Sets the allowDiskUse option for the aggregation query (ignored for &lt; 2.6.0)</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.aggregate(..).allowDiskUse(<span class="literal">true</span>).exec(callback)</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>value</code><span class="types"> &lt;Boolean&gt; </span><span>Should tell server it can use hard drive to store data during aggregation.</span></li><li><code>[tags]</code><span class="types"> &lt;Array&gt; </span><span>optional tags for this query</span></li></ul></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-allowDiskUse
Aggregate.allowDiskUse	R	Aggregate-allowDiskUse										
Aggregate allowDiskUse	R	Aggregate-allowDiskUse										
Aggregate-append	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#append(<code>ops</code>)</code></pre><p>Appends new operators to this aggregate pipeline</p><span class="prog__sub">Examples:</span>\n\n<pre><code>aggregate.append({ $project: { field: <span class="number">1</span> }}, { $limit: <span class="number">2</span> });\n\n<span class="comment">// or pass an array</span>\n<span class="keyword">var</span> pipeline = [{ $match: { daw: <span class="string">&apos;Logic Audio X&apos;</span> }} ];\naggregate.append(pipeline);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>ops</code><span class="types"> &lt;Object&gt; </span><span>operator(s) to append</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-append
Aggregate.append	R	Aggregate-append										
Aggregate append	R	Aggregate-append										
Aggregate-collation	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#collation(<code>collation</code>, <code>value</code>)</code></pre><p>Adds a collation</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.aggregate(..).collation({ locale: <span class="string">&apos;en_US&apos;</span>, strength: <span class="number">1</span> }).exec();</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>collation</code><span class="types"> &lt;Object&gt; </span><span>options</span></li><li><code>value</code><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-collation
Aggregate.collation	R	Aggregate-collation										
Aggregate collation	R	Aggregate-collation										
Aggregate-cursor	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#cursor(<code>options</code>)</code></pre><p>Sets the cursor option option for the aggregation query (ignored for &lt; 2.6.0).<br>Note the different syntax below: .exec() returns a cursor object, and no callback<br>is necessary.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> cursor = Model.aggregate(..).cursor({ batchSize: <span class="number">1000</span> }).exec();\ncursor.each(<span class="keyword">function</span>(error, doc) {\n  <span class="comment">// use doc</span>\n});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>options</code><span class="types"> &lt;Object&gt; </span><span>set the cursor batch size</span></li></ul></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-cursor
Aggregate.cursor	R	Aggregate-cursor										
Aggregate cursor	R	Aggregate-cursor										
Aggregate-exec	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#exec(<code>[callback]</code>)</code></pre><p>Executes the aggregate pipeline on the currently bound Model.</p><span class="prog__sub">Example:</span>\n\n<pre><code>aggregate.exec(callback);\n\n<span class="comment">// Because a promise is returned, the `callback` is optional.</span>\n<span class="keyword">var</span> promise = aggregate.exec();\npromise.then(..);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-exec
Aggregate.exec	R	Aggregate-exec										
Aggregate exec	R	Aggregate-exec										
Aggregate-explain	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#explain(<code>callback</code>)</code></pre><p>Execute the aggregation with explain</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.aggregate(..).explain(callback)</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>callback</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-explain
Aggregate.explain	R	Aggregate-explain										
Aggregate explain	R	Aggregate-explain										
Aggregate-facet	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#facet(<code>facet</code>)</code></pre><p>Combines multiple aggregation pipelines.</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.aggregate(...)\n .facet({\n   books: [{ groupBy: <span class="string">&apos;$author&apos;</span> }],\n   price: [{ $bucketAuto: { groupBy: <span class="string">&apos;$price&apos;</span>, buckets: <span class="number">2</span> } }]\n })\n .exec();\n\n<span class="comment">// Output: { books: [...], price: [{...}, {...}] }</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>facet</code><span class="types"> &lt;Object&gt; </span><span>options</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-facet
Aggregate.facet	R	Aggregate-facet										
Aggregate facet	R	Aggregate-facet										
Aggregate-graphLookup	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#graphLookup(<code>options</code>)</code></pre><p>Appends new custom $graphLookup operator(s) to this aggregate pipeline, performing a recursive search on a collection.</p><p>Note that graphLookup can only consume at most 100MB of memory, and does not allow disk use even if <code>{ allowDiskUse: true }</code> is specified.</p>\n\n<span class="prog__sub">Examples:</span>\n\n<pre><code><span class="comment">// Suppose we have a collection of courses, where a document might look like `{ _id: 0, name: &apos;Calculus&apos;, prerequisite: &apos;Trigonometry&apos;}` and `{ _id: 0, name: &apos;Trigonometry&apos;, prerequisite: &apos;Algebra&apos; }`</span>\n aggregate.graphLookup({ from: <span class="string">&apos;courses&apos;</span>, startWith: <span class="string">&apos;$prerequisite&apos;</span>, connectFromField: <span class="string">&apos;prerequisite&apos;</span>, connectToField: <span class="string">&apos;name&apos;</span>, as: <span class="string">&apos;prerequisites&apos;</span>, maxDepth: <span class="number">3</span> }) <span class="comment">// this will recursively search the &apos;courses&apos; collection up to 3 prerequisites</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>options</code><span class="types"> &lt;Object&gt; </span><span>to $graphLookup as described in the above link</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-graphLookup
Aggregate.graphLookup	R	Aggregate-graphLookup										
Aggregate graphLookup	R	Aggregate-graphLookup										
Aggregate-group	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#group(<code>arg</code>)</code></pre><p>Appends a new custom $group operator to this aggregate pipeline.</p><span class="prog__sub">Examples:</span>\n\n<pre><code>aggregate.group({ _id: <span class="string">&quot;$department&quot;</span> });</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>arg</code><span class="types"> &lt;Object&gt; </span><span>$group operator contents</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-group
Aggregate.group	R	Aggregate-group										
Aggregate group	R	Aggregate-group										
Aggregate-limit	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#limit(<code>num</code>)</code></pre><p>Appends a new $limit operator to this aggregate pipeline.</p><span class="prog__sub">Examples:</span>\n\n<pre><code>aggregate.limit(<span class="number">10</span>);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>num</code><span class="types"> &lt;Number&gt; </span><span>maximum number of records to pass to the next stage</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-limit
Aggregate.limit	R	Aggregate-limit										
Aggregate limit	R	Aggregate-limit										
Aggregate-lookup	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#lookup(<code>options</code>)</code></pre><p>Appends new custom $lookup operator(s) to this aggregate pipeline.</p><span class="prog__sub">Examples:</span>\n\n<pre><code>aggregate.lookup({ from: <span class="string">&apos;users&apos;</span>, localField: <span class="string">&apos;userId&apos;</span>, foreignField: <span class="string">&apos;_id&apos;</span>, as: <span class="string">&apos;users&apos;</span> });</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>options</code><span class="types"> &lt;Object&gt; </span><span>to $lookup as described in the above link</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-lookup
Aggregate.lookup	R	Aggregate-lookup										
Aggregate lookup	R	Aggregate-lookup										
Aggregate-match	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#match(<code>arg</code>)</code></pre><p>Appends a new custom $match operator to this aggregate pipeline.</p><span class="prog__sub">Examples:</span>\n\n<pre><code>aggregate.match({ department: { $<span class="keyword">in</span>: [ <span class="string">&quot;sales&quot;</span>, <span class="string">&quot;engineering&quot;</span> } } });</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>arg</code><span class="types"> &lt;Object&gt; </span><span>$match operator contents</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-match
Aggregate.match	R	Aggregate-match										
Aggregate match	R	Aggregate-match										
Aggregate-model	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#model(<code>model</code>)</code></pre><p>Binds this aggregate to a model.</p><span class="prog__sub">Parameters:</span><ul><li><code>model</code><span class="types"> &lt;Model&gt; </span><span>the model to which the aggregate is to be bound</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-model
Aggregate.model	R	Aggregate-model										
Aggregate model	R	Aggregate-model										
Aggregate-near	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#near(<code>parameters</code>)</code></pre><p>Appends a new $geoNear operator to this aggregate pipeline.</p><span class="prog__sub">NOTE:</span>\n\n<p><strong>MUST</strong> be used as the first operator in the pipeline.</p>\n\n<span class="prog__sub">Examples:</span>\n\n<pre><code>aggregate.near({\n  near: [<span class="number">40.724</span>, -<span class="number">73.997</span>],\n  distanceField: <span class="string">&quot;dist.calculated&quot;</span>, <span class="comment">// required</span>\n  maxDistance: <span class="number">0.008</span>,\n  query: { type: <span class="string">&quot;public&quot;</span> },\n  includeLocs: <span class="string">&quot;dist.location&quot;</span>,\n  uniqueDocs: <span class="literal">true</span>,\n  num: <span class="number">5</span>\n});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>parameters</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-near
Aggregate.near	R	Aggregate-near										
Aggregate near	R	Aggregate-near										
Aggregate-project	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#project(<code>arg</code>)</code></pre><p>Appends a new $project operator to this aggregate pipeline.</p><p>Mongoose query selection syntax is also supported.</p>\n\n<span class="prog__sub">Examples:</span>\n\n<pre><code><span class="comment">// include a, include b, exclude _id</span>\naggregate.project(<span class="string">&quot;a b -_id&quot;</span>);\n\n<span class="comment">// or you may use object notation, useful when</span>\n<span class="comment">// you have keys already prefixed with a &quot;-&quot;</span>\naggregate.project({a: <span class="number">1</span>, b: <span class="number">1</span>, _id: <span class="number">0</span>});\n\n<span class="comment">// reshaping documents</span>\naggregate.project({\n    newField: <span class="string">&apos;$b.nested&apos;</span>\n  , plusTen: { $add: [<span class="string">&apos;$val&apos;</span>, <span class="number">10</span>]}\n  , sub: {\n       name: <span class="string">&apos;$a&apos;</span>\n    }\n})\n\n<span class="comment">// etc</span>\naggregate.project({ salary_k: { $divide: [ <span class="string">&quot;$salary&quot;</span>, <span class="number">1000</span> ] } });</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>arg</code><span class="types"> &lt;Object, String&gt; </span><span>field specification</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-project
Aggregate.project	R	Aggregate-project										
Aggregate project	R	Aggregate-project										
Aggregate-read	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#read(<code>pref</code>, <code>[tags]</code>)</code></pre><p>Sets the readPreference option for the aggregation query.</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.aggregate(..).read(<span class="string">&apos;primaryPreferred&apos;</span>).exec(callback)</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>pref</code><span class="types"> &lt;String&gt; </span><span>one of the listed preference options or their aliases</span></li><li><code>[tags]</code><span class="types"> &lt;Array&gt; </span><span>optional tags for this query</span></li></ul></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-read
Aggregate.read	R	Aggregate-read										
Aggregate read	R	Aggregate-read										
Aggregate-sample	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#sample(<code>size</code>)</code></pre><p>Appepnds new custom $sample operator(s) to this aggregate pipeline.</p><span class="prog__sub">Examples:</span>\n\n<pre><code>aggregate.sample(<span class="number">3</span>); <span class="comment">// Add a pipeline that picks 3 random documents</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>size</code><span class="types"> &lt;Number&gt; </span><span>number of random documents to pick</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-sample
Aggregate.sample	R	Aggregate-sample										
Aggregate sample	R	Aggregate-sample										
Aggregate-skip	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#skip(<code>num</code>)</code></pre><p>Appends a new $skip operator to this aggregate pipeline.</p><span class="prog__sub">Examples:</span>\n\n<pre><code>aggregate.skip(<span class="number">10</span>);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>num</code><span class="types"> &lt;Number&gt; </span><span>number of records to skip before next stage</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-skip
Aggregate.skip	R	Aggregate-skip										
Aggregate skip	R	Aggregate-skip										
Aggregate-sort	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#sort(<code>arg</code>)</code></pre><p>Appends a new $sort operator to this aggregate pipeline.</p><p>If an object is passed, values allowed are <code>asc</code>, <code>desc</code>, <code>ascending</code>, <code>descending</code>, <code>1</code>, and <code>-1</code>.</p>\n\n<p>If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with <code>-</code> which will be treated as descending.</p>\n\n<span class="prog__sub">Examples:</span>\n\n<pre><code><span class="comment">// these are equivalent</span>\naggregate.sort({ field: <span class="string">&apos;asc&apos;</span>, test: -<span class="number">1</span> });\naggregate.sort(<span class="string">&apos;field -test&apos;</span>);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>arg</code><span class="types"> &lt;Object, String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-sort
Aggregate.sort	R	Aggregate-sort										
Aggregate sort	R	Aggregate-sort										
Aggregate-then	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#then(<code>[resolve]</code>, <code>[reject]</code>)</code></pre><p>Provides promise for aggregate.</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.aggregate(..).then(successCallback, errorCallback);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[resolve]</code><span class="types"> &lt;Function&gt; </span><span>successCallback</span></li><li><code>[reject]</code><span class="types"> &lt;Function&gt; </span><span>errorCallback</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-then
Aggregate.then	R	Aggregate-then										
Aggregate then	R	Aggregate-then										
Aggregate-unwind	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Aggregate#unwind(<code>fields</code>)</code></pre><p>Appends new custom $unwind operator(s) to this aggregate pipeline.</p><p>Note that the <code>$unwind</code> operator requires the path name to start with &apos;$&apos;.<br>Mongoose will prepend &apos;$&apos; if the specified field doesn&apos;t start &apos;$&apos;.</p>\n\n<span class="prog__sub">Examples:</span>\n\n<pre><code>aggregate.unwind(<span class="string">&quot;tags&quot;</span>);\naggregate.unwind(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>fields</code><span class="types"> &lt;String&gt; </span><span>the field(s) to unwind</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#aggregate_Aggregate-unwind
Aggregate.unwind	R	Aggregate-unwind										
Aggregate unwind	R	Aggregate-unwind										
SchemaType-default	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#default(<code>val</code>)</code></pre><p>Sets a default value for this SchemaType.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ n: { type: Number, <span class="keyword">default</span>: <span class="number">10</span> })\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, schema)\n<span class="keyword">var</span> m = <span class="keyword">new</span> M;\nconsole.log(m.n) <span class="comment">// 10</span></code></pre>\n\n<p>Defaults can be either <code>functions</code> which return the value to use as the default or the literal value itself. Either way, the value will be cast based on its schema type before being set during document creation.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="comment">// values are cast:</span>\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ aNumber: { type: Number, <span class="keyword">default</span>: <span class="number">4.815162342</span> }})\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, schema)\n<span class="keyword">var</span> m = <span class="keyword">new</span> M;\nconsole.log(m.aNumber) <span class="comment">// 4.815162342</span>\n\n<span class="comment">// default unique objects for Mixed types:</span>\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ mixed: Schema.Types.Mixed });\nschema.path(<span class="string">&apos;mixed&apos;</span>).<span class="keyword">default</span>(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n  <span class="keyword">return</span> {};\n});\n\n<span class="comment">// if we don&apos;t use a function to return object literals for Mixed defaults,</span>\n<span class="comment">// each document will receive a reference to the same object literal creating</span>\n<span class="comment">// a &quot;shared&quot; object instance:</span>\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ mixed: Schema.Types.Mixed });\nschema.path(<span class="string">&apos;mixed&apos;</span>).<span class="keyword">default</span>({});\n<span class="keyword">var</span> M = db.model(<span class="string">&apos;M&apos;</span>, schema);\n<span class="keyword">var</span> m1 = <span class="keyword">new</span> M;\nm1.mixed.added = <span class="number">1</span>;\nconsole.log(m1.mixed); <span class="comment">// { added: 1 }</span>\n<span class="keyword">var</span> m2 = <span class="keyword">new</span> M;\nconsole.log(m2.mixed); <span class="comment">// { added: 1 }</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Function, T&gt; </span><span>the default value</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;defaultValue&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-default
SchemaType.default	R	SchemaType-default										
SchemaType default	R	SchemaType-default										
SchemaType-get	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#get(<code>fn</code>)</code></pre><p>Adds a getter to this schematype.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="function"><span class="keyword">function</span> <span class="title">dob</span> <span class="params">(val)</span> {</span>\n  <span class="keyword">if</span> (!val) <span class="keyword">return</span> val;\n  <span class="keyword">return</span> (val.getMonth() + <span class="number">1</span>) + <span class="string">&quot;/&quot;</span> + val.getDate() + <span class="string">&quot;/&quot;</span> + val.getFullYear();\n}\n\n<span class="comment">// defining within the schema</span>\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ born: { type: Date, get: dob })\n\n<span class="comment">// or by retreiving its SchemaType</span>\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ born: Date })\ns.path(<span class="string">&apos;born&apos;</span>).get(dob)</code></pre>\n\n<p>Getters allow you to transform the representation of the data as it travels from the raw mongodb document to the value that you see.</p>\n\n<p>Suppose you are storing credit card numbers and you want to hide everything except the last 4 digits to the mongoose user. You can do so by defining a getter in the following way:</p>\n\n<pre><code><span class="function"><span class="keyword">function</span> <span class="title">obfuscate</span> <span class="params">(cc)</span> {</span>\n  <span class="keyword">return</span> <span class="string">&apos;****-****-****-&apos;</span> + cc.slice(cc.length-<span class="number">4</span>, cc.length);\n}\n\n<span class="keyword">var</span> AccountSchema = <span class="keyword">new</span> Schema({\n  creditCardNumber: { type: String, get: obfuscate }\n});\n\n<span class="keyword">var</span> Account = db.model(<span class="string">&apos;Account&apos;</span>, AccountSchema);\n\nAccount.findById(id, <span class="function"><span class="keyword">function</span> <span class="params">(err, found)</span> {</span>\n  console.log(found.creditCardNumber); <span class="comment">// &apos;****-****-****-1234&apos;</span>\n});</code></pre>\n\n<p>Getters are also passed a second argument, the schematype on which the getter was defined. This allows for tailored behavior based on options passed in the schema.</p>\n\n<pre><code><span class="function"><span class="keyword">function</span> <span class="title">inspector</span> <span class="params">(val, schematype)</span> {</span>\n  <span class="keyword">if</span> (schematype.options.required) {\n    <span class="keyword">return</span> schematype.path + <span class="string">&apos; is required&apos;</span>;\n  } <span class="keyword">else</span> {\n    <span class="keyword">return</span> schematype.path + <span class="string">&apos; is not&apos;</span>;\n  }\n}\n\n<span class="keyword">var</span> VirusSchema = <span class="keyword">new</span> Schema({\n  name: { type: String, required: <span class="literal">true</span>, get: inspector },\n  taxonomy: { type: String, get: inspector }\n})\n\n<span class="keyword">var</span> Virus = db.model(<span class="string">&apos;Virus&apos;</span>, VirusSchema);\n\nVirus.findById(id, <span class="function"><span class="keyword">function</span> <span class="params">(err, virus)</span> {</span>\n  console.log(virus.name);     <span class="comment">// name is required</span>\n  console.log(virus.taxonomy); <span class="comment">// taxonomy is not</span>\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-get
SchemaType.get	R	SchemaType-get										
SchemaType get	R	SchemaType-get										
SchemaType-index	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#index(<code>options</code>)</code></pre><p>Declares the index options for this schematype.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ name: { type: String, index: <span class="literal">true</span> })\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ loc: { type: [Number], index: <span class="string">&apos;hashed&apos;</span> })\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ loc: { type: [Number], index: <span class="string">&apos;2d&apos;</span>, sparse: <span class="literal">true</span> })\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ loc: { type: [Number], index: { type: <span class="string">&apos;2dsphere&apos;</span>, sparse: <span class="literal">true</span> }})\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ date: { type: Date, index: { unique: <span class="literal">true</span>, expires: <span class="string">&apos;1d&apos;</span> }})\nSchema.path(<span class="string">&apos;my.path&apos;</span>).index(<span class="literal">true</span>);\nSchema.path(<span class="string">&apos;my.date&apos;</span>).index({ expires: <span class="number">60</span> });\nSchema.path(<span class="string">&apos;my.path&apos;</span>).index({ unique: <span class="literal">true</span>, sparse: <span class="literal">true</span> });</code></pre>\n\n<span class="prog__sub">NOTE:</span>\n\n<p><em>Indexes are created in the background by default. Specify <code>background: false</code> to override.</em></p>\n\n<p>Direction doesn&apos;t matter for single key indexes</p><span class="prog__sub">Parameters:</span><ul><li><code>options</code><span class="types"> &lt;Object, Boolean, String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-index
SchemaType.index	R	SchemaType-index										
SchemaType index	R	SchemaType-index										
SchemaType-required	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#required(<code>required</code>, <code>[message]</code>)</code></pre><p>Adds a required validator to this SchemaType. The validator gets added<br>to the front of this SchemaType&apos;s validators array using <code>unshift()</code>.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ born: { type: Date, required: <span class="literal">true</span> })\n\n<span class="comment">// or with custom error message</span>\n\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ born: { type: Date, required: <span class="string">&apos;{PATH} is required!&apos;</span> })\n\n<span class="comment">// or through the path API</span>\n\nSchema.path(<span class="string">&apos;name&apos;</span>).required(<span class="literal">true</span>);\n\n<span class="comment">// with custom error messaging</span>\n\nSchema.path(<span class="string">&apos;name&apos;</span>).required(<span class="literal">true</span>, <span class="string">&apos;grrr :( &apos;</span>);\n\n<span class="comment">// or make a path conditionally required based on a function</span>\n<span class="keyword">var</span> isOver18 = <span class="keyword">function</span>() { <span class="keyword">return</span> <span class="keyword">this</span>.age &amp;gt;= <span class="number">18</span>; };\nSchema.path(<span class="string">&apos;voterRegistrationId&apos;</span>).required(isOver18);</code></pre>\n\n<p>The required validator uses the SchemaType&apos;s <code>checkRequired</code> function to<br>determine whether a given value satisfies the required validator. By default,<br>a value satisfies the required validator if <code>val != null</code> (that is, if<br>the value is not null nor undefined). However, most built-in mongoose schema<br>types override the default <code>checkRequired</code> function:</p><span class="prog__sub">Parameters:</span><ul><li><code>required</code><span class="types"> &lt;Boolean&gt; </span><span>enable/disable the validator</span></li><li><code>[message]</code><span class="types"> &lt;String&gt; </span><span>optional custom error message</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-required
SchemaType.required	R	SchemaType-required										
SchemaType required	R	SchemaType-required										
SchemaType	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType(<code>path</code>, <code>[options]</code>, <code>[instance]</code>)</code></pre><p>SchemaType constructor</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[instance]</code><span class="types"> &lt;String&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType
SchemaType-select	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#select(<code>val</code>)</code></pre><p>Sets default <code>select()</code> behavior for this path.</p><p>Set to <code>true</code> if this path should always be included in the results, <code>false</code> if it should be excluded by default. This setting can be overridden at the query level.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code>T = db.model(<span class="string">&apos;T&apos;</span>, <span class="keyword">new</span> Schema({ x: { type: String, select: <span class="literal">true</span> }}));\nT.find(..); <span class="comment">// field x will always be selected ..</span>\n<span class="comment">// .. unless overridden;</span>\nT.find().select(<span class="string">&apos;-x&apos;</span>).exec(callback);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>val</code><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-select
SchemaType.select	R	SchemaType-select										
SchemaType select	R	SchemaType-select										
SchemaType-set	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#set(<code>fn</code>)</code></pre><p>Adds a setter to this schematype.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span> <span class="params">(val)</span> {</span>\n  <span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">&apos;string&apos;</span>) val = <span class="string">&apos;&apos;</span>;\n  <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toUpperCase() + val.substring(<span class="number">1</span>);\n}\n\n<span class="comment">// defining within the schema</span>\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ name: { type: String, set: capitalize }})\n\n<span class="comment">// or by retreiving its SchemaType</span>\n<span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ name: String })\ns.path(<span class="string">&apos;name&apos;</span>).set(capitalize)</code></pre>\n\n<p>Setters allow you to transform the data before it gets to the raw mongodb document and is set as a value on an actual key.</p>\n\n<p>Suppose you are implementing user registration for a website. Users provide an email and password, which gets saved to mongodb. The email is a string that you will want to normalize to lower case, in order to avoid one email having more than one account -- e.g., otherwise, avenue@q.com can be registered for 2 accounts via avenue@q.com and AvEnUe@Q.CoM.</p>\n\n<p>You can set up email lower case normalization easily via a Mongoose setter.</p>\n\n<pre><code>function toLower (v) {\n  return v.toLowerCase();\n}\n\nvar UserSchema = new Schema({\n  email: { type: String, set: toLower }\n})\n\nvar User = db.model(&apos;User&apos;, UserSchema)\n\nvar user = new User({email: &apos;AVENUE@Q.COM&apos;})\nconsole.log(user.email); // &apos;avenue@q.com&apos;\n\n// or\nvar user = new User\nuser.email = &apos;Avenue@Q.com&apos;\nconsole.log(user.email) // &apos;avenue@q.com&apos;\n</code></pre>\n\n<p>As you can see above, setters allow you to transform the data before it gets to the raw mongodb document and is set as a value on an actual key.</p>\n\n<p><em>NOTE: we could have also just used the built-in <code>lowercase: true</code> SchemaType option instead of defining our own function.</em></p>\n\n<pre><code><span class="keyword">new</span> Schema({ email: { type: String, lowercase: <span class="literal">true</span> }})</code></pre>\n\n<p>Setters are also passed a second argument, the schematype on which the setter was defined. This allows for tailored behavior based on options passed in the schema.</p>\n\n<pre><code><span class="function"><span class="keyword">function</span> <span class="title">inspector</span> <span class="params">(val, schematype)</span> {</span>\n  <span class="keyword">if</span> (schematype.options.required) {\n    <span class="keyword">return</span> schematype.path + <span class="string">&apos; is required&apos;</span>;\n  } <span class="keyword">else</span> {\n    <span class="keyword">return</span> val;\n  }\n}\n\n<span class="keyword">var</span> VirusSchema = <span class="keyword">new</span> Schema({\n  name: { type: String, required: <span class="literal">true</span>, set: inspector },\n  taxonomy: { type: String, set: inspector }\n})\n\n<span class="keyword">var</span> Virus = db.model(<span class="string">&apos;Virus&apos;</span>, VirusSchema);\n<span class="keyword">var</span> v = <span class="keyword">new</span> Virus({ name: <span class="string">&apos;Parvoviridae&apos;</span>, taxonomy: <span class="string">&apos;Parvovirinae&apos;</span> });\n\nconsole.log(v.name);     <span class="comment">// name is required</span>\nconsole.log(v.taxonomy); <span class="comment">// Parvovirinae</span></code></pre><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-set
SchemaType.set	R	SchemaType-set										
SchemaType set	R	SchemaType-set										
SchemaType-sparse	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#sparse(<code>bool</code>)</code></pre><p>Declares a sparse index.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ name: { type: String, sparse: <span class="literal">true</span> })\nSchema.path(<span class="string">&apos;name&apos;</span>).index({ sparse: <span class="literal">true</span> });</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>bool</code><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-sparse
SchemaType.sparse	R	SchemaType-sparse										
SchemaType sparse	R	SchemaType-sparse										
SchemaType-text	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#text(<code>bool</code>)</code></pre><p>Declares a full text index.</p><h3>Example:</h3>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({name : {type: String, text : <span class="literal">true</span> })\n Schema.path(<span class="string">&apos;name&apos;</span>).index({text : <span class="literal">true</span>});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>bool</code><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-text
SchemaType.text	R	SchemaType-text										
SchemaType text	R	SchemaType-text										
SchemaType-unique	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#unique(<code>bool</code>)</code></pre><p>Declares an unique index.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> s = <span class="keyword">new</span> Schema({ name: { type: String, unique: <span class="literal">true</span> }});\nSchema.path(<span class="string">&apos;name&apos;</span>).index({ unique: <span class="literal">true</span> });</code></pre>\n\n<p><em>NOTE: violating the constraint returns an <code>E11000</code> error from MongoDB when saving, not a Mongoose validation error.</em></p><span class="prog__sub">Parameters:</span><ul><li><code>bool</code><span class="types"> &lt;Boolean&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-unique
SchemaType.unique	R	SchemaType-unique										
SchemaType unique	R	SchemaType-unique										
SchemaType-validate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>SchemaType#validate(<code>obj</code>, <code>[errorMsg]</code>, <code>[type]</code>)</code></pre><p>Adds validator(s) for this document path.</p><p>Validators always receive the value to validate as their first argument and must return <code>Boolean</code>. Returning <code>false</code> means validation failed.</p>\n\n<p>The error message argument is optional. If not passed, the default generic error message template will be used.</p>\n\n<span class="prog__sub">Examples:</span>\n\n<pre><code><span class="comment">// make sure every value is equal to &quot;something&quot;</span>\n<span class="function"><span class="keyword">function</span> <span class="title">validator</span> <span class="params">(val)</span> {</span>\n  <span class="keyword">return</span> val == <span class="string">&apos;something&apos;</span>;\n}\n<span class="keyword">new</span> Schema({ name: { type: String, validate: validator }});\n\n<span class="comment">// with a custom error message</span>\n\n<span class="keyword">var</span> custom = [validator, <span class="string">&apos;Uh oh, {PATH} does not equal &quot;something&quot;.&apos;</span>]\n<span class="keyword">new</span> Schema({ name: { type: String, validate: custom }});\n\n<span class="comment">// adding many validators at a time</span>\n\n<span class="keyword">var</span> many = [\n    { validator: validator, msg: <span class="string">&apos;uh oh&apos;</span> }\n  , { validator: anotherValidator, msg: <span class="string">&apos;failed&apos;</span> }\n]\n<span class="keyword">new</span> Schema({ name: { type: String, validate: many }});\n\n<span class="comment">// or utilizing SchemaType methods directly:</span>\n\n<span class="keyword">var</span> schema = <span class="keyword">new</span> Schema({ name: <span class="string">&apos;string&apos;</span> });\nschema.path(<span class="string">&apos;name&apos;</span>).validate(validator, <span class="string">&apos;validation of `{PATH}` failed with value `{VALUE}`&apos;</span>);</code></pre>\n\n<span class="prog__sub">Error message templates:</span>\n\n<p>From the examples above, you may have noticed that error messages support basic templating. There are a few other template keywords besides <code>{PATH}</code> and <code>{VALUE}</code> too. To find out more, details are available here</p>\n\n<span class="prog__sub">Asynchronous validation:</span>\n\n<p>Passing a validator function that receives two arguments tells mongoose that the validator is an asynchronous validator. The first argument passed to the validator function is the value being validated. The second argument is a callback function that must called when you finish validating the value and passed either <code>true</code> or <code>false</code> to communicate either success or failure respectively.</p>\n\n<pre><code>schema.path(<span class="string">&apos;name&apos;</span>).validate(<span class="function"><span class="keyword">function</span> <span class="params">(value, respond)</span> {</span>\n  doStuff(value, <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n    ...\n    respond(<span class="literal">false</span>); <span class="comment">// validation failed</span>\n  })\n}, <span class="string">&apos;{PATH} failed validation.&apos;</span>);\n\n<span class="comment">// or with dynamic message</span>\n\nschema.path(<span class="string">&apos;name&apos;</span>).validate(<span class="function"><span class="keyword">function</span> <span class="params">(value, respond)</span> {</span>\n  doStuff(value, <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n    ...\n    respond(<span class="literal">false</span>, <span class="string">&apos;this message gets to the validation error&apos;</span>);\n  });\n}, <span class="string">&apos;this message does not matter&apos;</span>);</code></pre>\n\n<p>You might use asynchronous validators to retreive other documents from the database to validate against or to meet other I/O bound validation needs.</p>\n\n<p>Validation occurs <code>pre(&apos;save&apos;)</code> or whenever you manually execute document#validate.</p>\n\n<p>If validation fails during <code>pre(&apos;save&apos;)</code> and no callback was passed to receive the error, an <code>error</code> event will be emitted on your Models associated db connection, passing the validation error object along.</p>\n\n<pre><code><span class="keyword">var</span> conn = mongoose.createConnection(..);\nconn.on(<span class="string">&apos;error&apos;</span>, handleError);\n\n<span class="keyword">var</span> Product = conn.model(<span class="string">&apos;Product&apos;</span>, yourSchema);\n<span class="keyword">var</span> dvd = <span class="keyword">new</span> Product(..);\ndvd.save(); <span class="comment">// emits error on the `conn` above</span></code></pre>\n\n<p>If you desire handling these errors at the Model level, attach an <code>error</code> listener to your Model and the event will instead be emitted there.</p>\n\n<pre><code><span class="comment">// registering an error listener on the Model lets us handle errors more locally</span>\nProduct.on(<span class="string">&apos;error&apos;</span>, handleError);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>obj</code><span class="types"> &lt;RegExp, Function, Object&gt; </span><span>validator</span></li><li><code>[errorMsg]</code><span class="types"> &lt;String&gt; </span><span>optional error message</span></li><li><code>[type]</code><span class="types"> &lt;String&gt; </span><span>optional validator type</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;SchemaType&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#schematype_SchemaType-validate
SchemaType.validate	R	SchemaType-validate										
SchemaType validate	R	SchemaType-validate										
Promise-addBack	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#addBack(<code>listener</code>)</code></pre><p>Adds a single function as a listener to both err and complete.</p><p>It will be executed with traditional node.js argument position when the promise is resolved.</p>\n\n<pre><code>promise.addBack(<span class="function"><span class="keyword">function</span> <span class="params">(err, args...)</span> {</span>\n  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);\n  console.log(<span class="string">&apos;success&apos;</span>);\n})</code></pre>\n\n<p>Alias of mpromise#onResolve.</p>\n\n<p><em>Deprecated. Use <code>onResolve</code> instead.</em></p><span class="prog__sub">Parameters:</span><ul><li><code>listener</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-addBack
Promise.addBack	R	Promise-addBack										
Promise addBack	R	Promise-addBack										
Promise-addCallback	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#addCallback(<code>listener</code>)</code></pre><p>Adds a listener to the <code>complete</code> (success) event.</p><p>Alias of mpromise#onFulfill.</p>\n\n<p><em>Deprecated. Use <code>onFulfill</code> instead.</em></p><span class="prog__sub">Parameters:</span><ul><li><code>listener</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-addCallback
Promise.addCallback	R	Promise-addCallback										
Promise addCallback	R	Promise-addCallback										
Promise-addErrback	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#addErrback(<code>listener</code>)</code></pre><p>Adds a listener to the <code>err</code> (rejected) event.</p><p>Alias of mpromise#onReject.</p>\n\n<p><em>Deprecated. Use <code>onReject</code> instead.</em></p><span class="prog__sub">Parameters:</span><ul><li><code>listener</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-addErrback
Promise.addErrback	R	Promise-addErrback										
Promise addErrback	R	Promise-addErrback										
Promise-catch	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#catch(<code>onReject</code>)</code></pre><p>ES6-style <code>.catch()</code> shorthand</p><span class="prog__sub">Parameters:</span><ul><li><code>onReject</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-catch
Promise.catch	R	Promise-catch										
Promise catch	R	Promise-catch										
Promise-end	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#end()</code></pre><p>Signifies that this promise was the last in a chain of <code>then()s</code>: if a handler passed to the call to <code>then</code> which produced this promise throws, the exception will go uncaught.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> p = <span class="keyword">new</span> Promise;\np.then(<span class="keyword">function</span>(){ <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&apos;shucks&apos;</span>) });\nsetTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n  p.fulfill();\n  <span class="comment">// error was caught and swallowed by the promise returned from</span>\n  <span class="comment">// p.then(). we either have to always register handlers on</span>\n  <span class="comment">// the returned promises or we can do the following...</span>\n}, <span class="number">10</span>);\n\n<span class="comment">// this time we use .end() which prevents catching thrown errors</span>\n<span class="keyword">var</span> p = <span class="keyword">new</span> Promise;\n<span class="keyword">var</span> p2 = p.then(<span class="keyword">function</span>(){ <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&apos;shucks&apos;</span>) }).end(); <span class="comment">// &amp;lt;--</span>\nsetTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>\n  p.fulfill(); <span class="comment">// throws &quot;shucks&quot;</span>\n}, <span class="number">10</span>);</code></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-end
Promise.end	R	Promise-end										
Promise end	R	Promise-end										
Promise-error	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#error(<code>err</code>)</code></pre><p>Rejects this promise with <code>err</code>.</p><p>If the promise has already been fulfilled or rejected, not action is taken.</p>\n\n<p>Differs from #reject by first casting <code>err</code> to an <code>Error</code> if it is not <code>instanceof Error</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>err</code><span class="types"> &lt;Error, String&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-error
Promise.error	R	Promise-error										
Promise error	R	Promise-error										
Promise-on	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#on(<code>event</code>, <code>listener</code>)</code></pre><p>Adds <code>listener</code> to the <code>event</code>.</p><p>If <code>event</code> is either the success or failure event and the event has already been emitted, the<code>listener</code> is called immediately and passed the results of the original emitted event.</p><span class="prog__sub">Parameters:</span><ul><li><code>event</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>listener</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-on
Promise.on	R	Promise-on										
Promise on	R	Promise-on										
Promise	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise(<code>fn</code>)</code></pre><p>Promise constructor.</p><p>Promises are returned from executed queries. Example:</p>\n\n<pre><code><span class="keyword">var</span> query = Candy.find({ bar: <span class="literal">true</span> });\n<span class="keyword">var</span> promise = query.exec();</code></pre>\n\n<p>DEPRECATED. Mongoose 5.0 will use native promises by default (or bluebird,<br>if native promises are not present) but still<br>support plugging in your own ES6-compatible promises library. Mongoose 5.0<br>will <strong>not</strong> support mpromise.</p><span class="prog__sub">Events:</span><ul><li><p><code>err</code>: Emits when the promise is rejected</p></li><li><p><code>complete</code>: Emits when the promise is fulfilled</p></li></ul><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span>a function which will be called when the promise is resolved that accepts <code>fn(err, ...){}</code> as signature</span></li></ul></section>	http://mongoosejs.com/docs/api.html#promise_Promise
Promise-reject	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#reject(<code>reason</code>)</code></pre><p>Rejects this promise with <code>reason</code>.</p><p>If the promise has already been fulfilled or rejected, not action is taken.</p><span class="prog__sub">Parameters:</span><ul><li><code>reason</code><span class="types"> &lt;Object, String, Error&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>this</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-reject
Promise.reject	R	Promise-reject										
Promise reject	R	Promise-reject										
Promise-resolve	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#resolve(<code>[err]</code>, <code>[val]</code>)</code></pre><p>Resolves this promise to a rejected state if <code>err</code> is passed or a fulfilled state if no <code>err</code> is passed.</p><p>If the promise has already been fulfilled or rejected, not action is taken.</p>\n\n<p><code>err</code> will be cast to an Error if not already instanceof Error.</p>\n\n<p><em>NOTE: overrides mpromise#resolve to provide error casting.</em></p><span class="prog__sub">Parameters:</span><ul><li><code>[err]</code><span class="types"> &lt;Error&gt; </span><span>error or null</span></li><li><code>[val]</code><span class="types"> &lt;Object&gt; </span><span>value to fulfill the promise with</span></li></ul></section>	http://mongoosejs.com/docs/api.html#promise_Promise-resolve
Promise.resolve	R	Promise-resolve										
Promise resolve	R	Promise-resolve										
Promise-then	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise#then(<code>onFulFill</code>, <code>onReject</code>)</code></pre><p>Creates a new promise and returns it. If <code>onFulfill</code> or <code>onReject</code> are passed, they are added as SUCCESS/ERROR callbacks to this promise after the nextTick.</p><p>Conforms to promises/A+ specification.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> promise = Meetups.find({ tags: <span class="string">&apos;javascript&apos;</span> }).select(<span class="string">&apos;_id&apos;</span>).exec();\npromise.then(<span class="function"><span class="keyword">function</span> <span class="params">(meetups)</span> {</span>\n  <span class="keyword">var</span> ids = meetups.map(<span class="function"><span class="keyword">function</span> <span class="params">(m)</span> {</span>\n    <span class="keyword">return</span> m._id;\n  });\n  <span class="keyword">return</span> People.find({ meetups: { $<span class="keyword">in</span>: ids } }).exec();\n}).then(<span class="function"><span class="keyword">function</span> <span class="params">(people)</span> {</span>\n  <span class="keyword">if</span> (people.length &amp;lt; <span class="number">10000</span>) {\n    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&apos;Too few people!!!&apos;</span>);\n  } <span class="keyword">else</span> {\n    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&apos;Still need more people!!!&apos;</span>);\n  }\n}).then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n  assert.ok(err <span class="keyword">instanceof</span> Error);\n});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>onFulFill</code><span class="types"> &lt;Function&gt; </span><span></span></li><li><code>onReject</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>newPromise</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise-then
Promise.then	R	Promise-then										
Promise then	R	Promise-then										
Promise.complete	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise.complete(<code>args</code>)</code></pre><p>Fulfills this promise with passed arguments.</p><span class="prog__sub">Parameters:</span><ul><li><code>args</code><span class="types"> &lt;T&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#promise_Promise.complete
Promise complete	R	Promise.complete										
Promise.ES6	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise.ES6(<code>resolver</code>)</code></pre><p>ES6-style promise constructor wrapper around mpromise.</p><span class="prog__sub">Parameters:</span><ul><li><code>resolver</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>new promise</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#promise_Promise.ES6
Promise ES6	R	Promise.ES6										
Promise.fulfill	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Promise.fulfill(<code>args</code>)</code></pre><p>Fulfills this promise with passed arguments.</p><span class="prog__sub">Parameters:</span><ul><li><code>args</code><span class="types"> &lt;T&gt; </span><span></span></li></ul></section>	http://mongoosejs.com/docs/api.html#promise_Promise.fulfill
Promise fulfill	R	Promise.fulfill										
ES6Promise	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>ES6Promise(<code>fn</code>)</code></pre><p>ES6 Promise wrapper constructor.</p><p>Promises are returned from executed queries. Example:</p>\n\n<pre><code><span class="keyword">var</span> query = Candy.find({ bar: <span class="literal">true</span> });\n<span class="keyword">var</span> promise = query.exec();</code></pre>\n\n<p>DEPRECATED. Mongoose 5.0 will use native promises by default (or bluebird,<br>if native promises are not present) but still<br>support plugging in your own ES6-compatible promises library. Mongoose 5.0<br>will <strong>not</strong> support mpromise.</p><span class="prog__sub">Parameters:</span><ul><li><code>fn</code><span class="types"> &lt;Function&gt; </span><span>a function which will be called when the promise is resolved that accepts <code>fn(err, ...){}</code> as signature</span></li></ul></section>	http://mongoosejs.com/docs/api.html#ES6Promise_ES6Promise
Model-$where	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#$where(<code>argument</code>)</code></pre><p>Creates a <code>Query</code> and specifies a <code>$where</code> condition.</p><p>Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via <code>find({ $where: javascript })</code>, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.</p>\n\n<pre><code>Blog.$where(<span class="string">&apos;this.username.indexOf(&quot;val&quot;) !== -1&apos;</span>).exec(<span class="function"><span class="keyword">function</span> <span class="params">(err, docs)</span> {</span>});</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>argument</code><span class="types"> &lt;String, Function&gt; </span><span>is a javascript string or anonymous function</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model-%24where
Model.$where	R	Model-$where										
Model $where	R	Model-$where										
Model-increment	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#increment()</code></pre><p>Signal that we desire an increment of this documents version.</p><span class="prog__sub">Example:</span>\n\n<pre><code>Model.findById(id, <span class="function"><span class="keyword">function</span> <span class="params">(err, doc)</span> {</span>\n  doc.increment();\n  doc.save(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span> .. })\n})</code></pre></section>	http://mongoosejs.com/docs/api.html#model_Model-increment
Model.increment	R	Model-increment										
Model increment	R	Model-increment										
Model-model	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#model(<code>name</code>)</code></pre><p>Returns another Model instance.</p><span class="prog__sub">Example:</span>\n\n<pre><code><span class="keyword">var</span> doc = <span class="keyword">new</span> Tank;\ndoc.model(<span class="string">&apos;User&apos;</span>).findById(id, callback);</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String&gt; </span><span>model name</span></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model-model
Model.model	R	Model-model										
Model model	R	Model-model										
Model	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model(<code>doc</code>)</code></pre><p>Model constructor</p><p>Provides the interface to MongoDB collections as well as creates document instances.</p><span class="prog__sub">Events:</span><ul><li><p><code>error</code>: If listening to this event, it is emitted when a document was saved without passing a callback and an <code>error</code> occurred. If not listening, the event bubbles to the connection used to create this Model.</p></li><li><p><code>index</code>: Emitted after <code>Model#ensureIndexes</code> completes. If an error occurred it is passed with the event.</p></li><li><p><code>index-single-start</code>: Emitted when an individual index starts within <code>Model#ensureIndexes</code>. The fields and options being used to build the index are also passed with the event.</p></li><li><p><code>index-single-done</code>: Emitted when an individual index finishes within <code>Model#ensureIndexes</code>. If an error occurred it is passed with the event. The fields, options, and index name are also passed.</p></li></ul><span class="prog__sub">Parameters:</span><ul><li><code>doc</code><span class="types"> &lt;Object&gt; </span><span>values with which to create the document</span></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model
Model-remove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#remove(<code>[fn]</code>)</code></pre><p>Removes this document from the db.</p><span class="prog__sub">Example:</span>\n\n<pre><code>product.remove(<span class="function"><span class="keyword">function</span> <span class="params">(err, product)</span> {</span>\n  <span class="keyword">if</span> (err) <span class="keyword">return</span> handleError(err);\n  Product.findById(product._id, <span class="function"><span class="keyword">function</span> <span class="params">(err, product)</span> {</span>\n    console.log(product) <span class="comment">// null</span>\n  })\n})</code></pre>\n\n<p>As an extra measure of flow control, remove will return a Promise (bound to <code>fn</code> if passed) so it could be chained, or hooked to recive errors</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code>product.remove().then(<span class="function"><span class="keyword">function</span> <span class="params">(product)</span> {</span>\n   ...\n}).onRejected(<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> {</span>\n   assert.ok(err)\n})</code></pre><span class="prog__sub">Parameters:</span><ul><li><code>[fn]</code><span class="types"> &lt;function(err, product)&gt; </span><span>optional callback</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>Promise</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model-remove
Model.remove	R	Model-remove										
Model remove	R	Model-remove										
Model-save	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#save(<code>[options]</code>, <code>[options.safe]</code>, <code>[options.validateBeforeSave]</code>, <code>[fn]</code>)</code></pre><p>Saves this document.</p><span class="prog__sub">Example:</span>\n\n<pre><code>product.sold = Date.now();\nproduct.save(<span class="function"><span class="keyword">function</span> <span class="params">(err, product, numAffected)</span> {</span>\n  <span class="keyword">if</span> (err) ..\n})</code></pre>\n\n<p>The callback will receive three parameters</p>\n\n<ol>\n<li><code>err</code> if an error occurred</li>\n<li><code>product</code> which is the saved <code>product</code></li>\n<li><code>numAffected</code> will be 1 when the document was successfully persisted to MongoDB, otherwise 0. Unless you tweak mongoose&apos;s internals, you don&apos;t need to worry about checking this parameter for errors - checking <code>err</code> is sufficient to make sure your document was properly saved.</li>\n</ol>\n\n<p>As an extra measure of flow control, save will return a Promise.</p>\n\n<span class="prog__sub">Example:</span>\n\n<pre><code>product.save().then(<span class="keyword">function</span>(product) {\n   ...\n});</code></pre>\n\n<p>For legacy reasons, mongoose stores object keys in reverse order on initial<br>save. That is, <code>{ a: 1, b: 2 }</code> will be saved as <code>{ b: 2, a: 1 }</code> in<br>MongoDB. To override this behavior, set<br>the <code>toObject.retainKeyOrder</code> option<br>to true on your schema.</p><span class="prog__sub">Parameters:</span><ul><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>options optional options</span></li><li><code>[options.safe]</code><span class="types"> &lt;Object&gt; </span><span>overrides schema&apos;s safe option</span></li><li><code>[options.validateBeforeSave]</code><span class="types"> &lt;Boolean&gt; </span><span>set to false to save without validating.</span></li><li><code>[fn]</code><span class="types"> &lt;Function&gt; </span><span>optional callback</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span>Promise</span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model-save
Model.save	R	Model-save										
Model save	R	Model-save										
Model.aggregate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.aggregate(<code>[...]</code>, <code>[callback]</code>)</code></pre><p>Performs aggregations on the models collection.</p><span class="prog__sub">Parameters:</span><ul><li><code>[...]</code><span class="types"> &lt;Object, Array&gt; </span><span>aggregation pipeline operator(s) or operator array</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Aggregate, Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.aggregate
Model aggregate	R	Model.aggregate										
Model.count	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.count(<code>conditions</code>, <code>[callback]</code>)</code></pre><p>Counts number of matching documents in a database collection.</p><span class="prog__sub">Parameters:</span><ul><li><code>conditions</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.count
Model count	R	Model.count										
Model.create	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.create(<code>doc(s)</code>, <code>[callback]</code>)</code></pre><p>Shortcut for saving one or more documents to the database.<br><code>MyModel.create(docs)</code> does <code>new MyModel(doc).save()</code> for every doc in<br>docs.</p><span class="prog__sub">Parameters:</span><ul><li><code>doc(s)</code><span class="types"> &lt;Array, Object, *&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span>callback</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.create
Model create	R	Model.create										
Model.discriminator	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.discriminator(<code>name</code>, <code>schema</code>)</code></pre><p>Adds a discriminator type.</p><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String&gt; </span><span>discriminator model name</span></li><li><code>schema</code><span class="types"> &lt;Schema&gt; </span><span>discriminator model schema</span></li></ul></section>	http://mongoosejs.com/docs/api.html#model_Model.discriminator
Model discriminator	R	Model.discriminator										
Model.distinct	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.distinct(<code>field</code>, <code>[conditions]</code>, <code>[callback]</code>)</code></pre><p>Creates a Query for a <code>distinct</code> operation.</p><span class="prog__sub">Parameters:</span><ul><li><code>field</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>[conditions]</code><span class="types"> &lt;Object&gt; </span><span>optional</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.distinct
Model distinct	R	Model.distinct										
Model.ensureIndexes	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.ensureIndexes(<code>[options]</code>, <code>[cb]</code>)</code></pre><p>Sends <code>ensureIndex</code> commands to mongo for each index declared in the schema.</p><span class="prog__sub">Parameters:</span><ul><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>internal options</span></li><li><code>[cb]</code><span class="types"> &lt;Function&gt; </span><span>optional callback</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.ensureIndexes
Model ensureIndexes	R	Model.ensureIndexes										
Model.find	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.find(<code>conditions</code>, <code>[projection]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Finds documents</p><span class="prog__sub">Parameters:</span><ul><li><code>conditions</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[projection]</code><span class="types"> &lt;Object&gt; </span><span>optional fields to return (http://bit.ly/1HotzBo)</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>optional</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.find
Model find	R	Model.find										
Model.findById	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findById(<code>id</code>, <code>[projection]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Finds a single document by its _id field. <code>findById(id)</code> is almost*<br>equivalent to <code>findOne({ _id: id })</code>. If you want to query by a document&apos;s<br><code>_id</code>, use <code>findById()</code> instead of <code>findOne()</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>id</code><span class="types"> &lt;Object, String, Number&gt; </span><span>value of &lt;code&gt;_id&lt;/code&gt; to query by</span></li><li><code>[projection]</code><span class="types"> &lt;Object&gt; </span><span>optional fields to return (http://bit.ly/1HotzBo)</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>optional</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.findById
Model findById	R	Model.findById										
Model.findByIdAndRemove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findByIdAndRemove(<code>id</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Issue a mongodb findAndModify remove command by a document&apos;s _id field. <code>findByIdAndRemove(id, ...)</code> is equivalent to <code>findOneAndRemove({ _id: id }, ...)</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>id</code><span class="types"> &lt;Object, Number, String&gt; </span><span>value of &lt;code&gt;_id&lt;/code&gt; to query by</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.findByIdAndRemove
Model findByIdAndRemove	R	Model.findByIdAndRemove										
Model.findByIdAndUpdate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findByIdAndUpdate(<code>id</code>, <code>[update]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Issues a mongodb findAndModify update command by a document&apos;s _id field.<br><code>findByIdAndUpdate(id, ...)</code> is equivalent to <code>findOneAndUpdate({ _id: id }, ...)</code>.</p><span class="prog__sub">Parameters:</span><ul><li><code>id</code><span class="types"> &lt;Object, Number, String&gt; </span><span>value of &lt;code&gt;_id&lt;/code&gt; to query by</span></li><li><code>[update]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate
Model findByIdAndUpdate	R	Model.findByIdAndUpdate										
Model.findOne	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findOne(<code>[conditions]</code>, <code>[projection]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Finds one document.</p><span class="prog__sub">Parameters:</span><ul><li><code>[conditions]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[projection]</code><span class="types"> &lt;Object&gt; </span><span>optional fields to return (http://bit.ly/1HotzBo)</span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>optional</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.findOne
Model findOne	R	Model.findOne										
Model.findOneAndRemove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findOneAndRemove(<code>conditions</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Issue a mongodb findAndModify remove command.</p><span class="prog__sub">Parameters:</span><ul><li><code>conditions</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.findOneAndRemove
Model findOneAndRemove	R	Model.findOneAndRemove										
Model.findOneAndUpdate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.findOneAndUpdate(<code>[conditions]</code>, <code>[update]</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Issues a mongodb findAndModify update command.</p><span class="prog__sub">Parameters:</span><ul><li><code>[conditions]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[update]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.findOneAndUpdate
Model findOneAndUpdate	R	Model.findOneAndUpdate										
Model.geoNear	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.geoNear(<code>GeoJSON</code>, <code>options</code>, <code>[callback]</code>)</code></pre><p>geoNear support for Mongoose</p><span class="prog__sub">Parameters:</span><ul><li><code>GeoJSON</code><span class="types"> &lt;Object, Array&gt; </span><span>point or legacy coordinate pair [x,y] to search near</span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span>for the query</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span>optional callback for the query</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.geoNear
Model geoNear	R	Model.geoNear										
Model.geoSearch	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.geoSearch(<code>conditions</code>, <code>options</code>, <code>[callback]</code>)</code></pre><p>Implements <code>$geoSearch</code> functionality for Mongoose</p><span class="prog__sub">Parameters:</span><ul><li><code>conditions</code><span class="types"> &lt;Object&gt; </span><span>an object that specifies the match condition (required)</span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span>for the geoSearch, some (near, maxDistance) are required</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span>optional callback</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.geoSearch
Model geoSearch	R	Model.geoSearch										
Model.hydrate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.hydrate(<code>obj</code>)</code></pre><p>Shortcut for creating a new Document from existing raw data, pre-saved in the DB.<br>The document returned has no paths marked as modified initially.</p><span class="prog__sub">Parameters:</span><ul><li><code>obj</code><span class="types"> &lt;Object&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Document&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.hydrate
Model hydrate	R	Model.hydrate										
Model.insertMany	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.insertMany(<code>doc(s)</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Shortcut for validating an array of documents and inserting them into<br>MongoDB if they&apos;re all valid. This function is faster than <code>.create()</code><br>because it only sends one operation to the server, rather than one for each<br>document.</p><span class="prog__sub">Parameters:</span><ul><li><code>doc(s)</code><span class="types"> &lt;Array, Object, *&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span>see the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#insertMany&quot;&gt;mongodb driver options&lt;/a&gt;</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span>callback</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.insertMany
Model insertMany	R	Model.insertMany										
Model.mapReduce	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.mapReduce(<code>o</code>, <code>[callback]</code>)</code></pre><p>Executes a mapReduce command.</p><span class="prog__sub">Parameters:</span><ul><li><code>o</code><span class="types"> &lt;Object&gt; </span><span>an object specifying map-reduce options</span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span>optional callback</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.mapReduce
Model mapReduce	R	Model.mapReduce										
Model.populate	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.populate(<code>docs</code>, <code>options</code>, <code>[callback(err,doc)]</code>)</code></pre><p>Populates document references.</p><span class="prog__sub">Parameters:</span><ul><li><code>docs</code><span class="types"> &lt;Document, Array&gt; </span><span>Either a single document or array of documents to populate.</span></li><li><code>options</code><span class="types"> &lt;Object&gt; </span><span>A hash of key/val (path, options) used for population.</span></li><li><code>[callback(err,doc)]</code><span class="types"> &lt;Function&gt; </span><span>Optional callback, executed upon completion. Receives &lt;code&gt;err&lt;/code&gt; and the &lt;code&gt;doc(s)&lt;/code&gt;.</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Promise&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.populate
Model populate	R	Model.populate										
Model.remove	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.remove(<code>conditions</code>, <code>[callback]</code>)</code></pre><p>Removes documents from the collection.</p><span class="prog__sub">Parameters:</span><ul><li><code>conditions</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.remove
Model remove	R	Model.remove										
Model.update	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.update(<code>conditions</code>, <code>doc</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Updates documents in the database without returning them.</p><span class="prog__sub">Parameters:</span><ul><li><code>conditions</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>doc</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.update
Model update	R	Model.update										
Model.updateMany	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.updateMany(<code>conditions</code>, <code>doc</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Same as <code>update()</code>, except MongoDB will update <em>all</em> documents that match<br><code>criteria</code> (as opposed to just the first one) regardless of the value of<br>the <code>multi</code> option.</p><span class="prog__sub">Parameters:</span><ul><li><code>conditions</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>doc</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.updateMany
Model updateMany	R	Model.updateMany										
Model.updateOne	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.updateOne(<code>conditions</code>, <code>doc</code>, <code>[options]</code>, <code>[callback]</code>)</code></pre><p>Same as <code>update()</code>, except MongoDB will update <em>only</em> the first document that<br>matches <code>criteria</code> regardless of the value of the <code>multi</code> option.</p><span class="prog__sub">Parameters:</span><ul><li><code>conditions</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>doc</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[options]</code><span class="types"> &lt;Object&gt; </span><span></span></li><li><code>[callback]</code><span class="types"> &lt;Function&gt; </span><span></span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.updateOne
Model updateOne	R	Model.updateOne										
Model.where	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model.where(<code>path</code>, <code>[val]</code>)</code></pre><p>Creates a Query, applies the passed conditions, and returns the Query.</p><span class="prog__sub">Parameters:</span><ul><li><code>path</code><span class="types"> &lt;String&gt; </span><span></span></li><li><code>[val]</code><span class="types"> &lt;Object&gt; </span><span>optional value</span></li></ul><pre><span class="prog__sub">Returns:</span><ul><li><span class="types"> &lt;Query&gt; </span><span></span></li></ul></pre></section>	http://mongoosejs.com/docs/api.html#model_Model.where
Model where	R	Model.where										
Model-%2524where	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#<span>$where</span></code></pre><p>Additional properties to attach to the query when calling <code>save()</code> and<br><code>isNew</code> is false.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-%2524where
Model.%2524where	R	Model-%2524where										
Model %2524where	R	Model-%2524where										
Model-base	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#<span>base</span></code></pre><p>Base Mongoose instance the model uses.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-base
Model.base	R	Model-base										
Model base	R	Model-base										
Model-baseModelName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#<span>baseModelName</span></code></pre><p>If this is a discriminator model, <code>baseModelName</code> is the name of<br>the base model.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-baseModelName
Model.baseModelName	R	Model-baseModelName										
Model baseModelName	R	Model-baseModelName										
Model-collection	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#<span>collection</span></code></pre><p>Collection the model uses.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-collection
Model.collection	R	Model-collection										
Model collection	R	Model-collection										
Model-db	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#<span>db</span></code></pre><p>Connection the model uses.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-db
Model.db	R	Model-db										
Model db	R	Model-db										
Model-discriminators	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#<span>discriminators</span></code></pre><p>Registered discriminators for this model.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-discriminators
Model.discriminators	R	Model-discriminators										
Model discriminators	R	Model-discriminators										
Model-modelName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#<span>modelName</span></code></pre><p>The name of the model</p></section>	http://mongoosejs.com/docs/api.html#model_Model-modelName
Model.modelName	R	Model-modelName										
Model modelName	R	Model-modelName										
Model-schema	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Model#<span>schema</span></code></pre><p>Schema the model uses.</p></section>	http://mongoosejs.com/docs/api.html#model_Model-schema
Model.schema	R	Model-schema										
Model schema	R	Model-schema										
Collection	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection(<code>name</code>, <code>conn</code>, <code>opts</code>)</code></pre><p>Abstract Collection constructor</p><p>This is the base class that drivers inherit from and implement.</p><span class="prog__sub">Parameters:</span><ul><li><code>name</code><span class="types"> &lt;String&gt; </span><span>name of the collection</span></li><li><code>conn</code><span class="types"> &lt;Connection&gt; </span><span>A MongooseConnection instance</span></li><li><code>opts</code><span class="types"> &lt;Object&gt; </span><span>optional collection options</span></li></ul></section>	http://mongoosejs.com/docs/api.html#collection_Collection
Collection-ensureIndex	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#ensureIndex()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-ensureIndex
Collection.ensureIndex	R	Collection-ensureIndex										
Collection ensureIndex	R	Collection-ensureIndex										
Collection-find	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#find()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-find
Collection.find	R	Collection-find										
Collection find	R	Collection-find										
Collection-findAndModify	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#findAndModify()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-findAndModify
Collection.findAndModify	R	Collection-findAndModify										
Collection findAndModify	R	Collection-findAndModify										
Collection-findOne	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#findOne()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-findOne
Collection.findOne	R	Collection-findOne										
Collection findOne	R	Collection-findOne										
Collection-getIndexes	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#getIndexes()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-getIndexes
Collection.getIndexes	R	Collection-getIndexes										
Collection getIndexes	R	Collection-getIndexes										
Collection-insert	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#insert()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-insert
Collection.insert	R	Collection-insert										
Collection insert	R	Collection-insert										
Collection-mapReduce	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#mapReduce()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-mapReduce
Collection.mapReduce	R	Collection-mapReduce										
Collection mapReduce	R	Collection-mapReduce										
Collection-save	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#save()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-save
Collection.save	R	Collection-save										
Collection save	R	Collection-save										
Collection-update	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#update()</code></pre><p>Abstract method that drivers must implement.</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-update
Collection.update	R	Collection-update										
Collection update	R	Collection-update										
Collection-collectionName	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#<span>collectionName</span></code></pre><p>The collection name</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-collectionName
Collection.collectionName	R	Collection-collectionName										
Collection collectionName	R	Collection-collectionName										
Collection-conn	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#<span>conn</span></code></pre><p>The Connection instance</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-conn
Collection.conn	R	Collection-conn										
Collection conn	R	Collection-conn										
Collection-name	A									http://mongodb-tools.com/img/mongoose.png	<section class="prog__container"><pre><code>Collection#<span>name</span></code></pre><p>The collection name</p></section>	http://mongoosejs.com/docs/api.html#collection_Collection-name
Collection.name	R	Collection-name										
Collection name	R	Collection-name										
