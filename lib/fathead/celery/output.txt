AsyncResult	A			celery.app.task Functions							<section class="prog__container"><pre><code>AsyncResult(task_id, **kwargs)</code></pre><p>Get AsyncResult instance for this kind of task.</p><span class="prog__sub">Parameters</span><p>task_id (str) – Task id to get result for.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.AsyncResult
Task.add_to_chord	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.add_to_chord(sig, lazy=False)</code></pre><p>Add signature to the chord the current task is a member of.</p><p>Currently only supported by the Redis result backend.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>sig (~@Signature) – Signature to extend chord with.</li><li>lazy (bool) – If enabled the new task won’t actually be called,</li><li>and sig.delay() must be called manually.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.add_to_chord
add to chord	R	Task.add_to_chord										
Task.after_return	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.after_return(status, retval, task_id, args, kwargs, einfo)</code></pre><p>Handler called after the task returns.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>status (str) – Current task state.</li><li>retval (Any) – Task return value/exception.</li><li>task_id (str) – Unique id of the task.</li><li>args (Tuple) – Original arguments for the task.</li><li>kwargs (Dict) – Original keyword arguments for the task.</li><li>einfo (ExceptionInfo) – Exception information.</li></ul><span class="prog__sub">Returns</span><p>The return value of this handler is ignored.</p><span class="prog__sub">Return type</span><p>None</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.after_return
after return	R	Task.after_return										
Task.apply	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.apply(args=None, kwargs=None, link=None, link_error=None, task_id=None, retries=None, throw=None, logfile=None, loglevel=None, headers=None, **options)</code></pre><p>Execute this task locally, by blocking until the task returns.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>args (Tuple) – positional arguments passed on to the task.</li><li>kwargs (Dict) – keyword arguments passed on to the task.</li><li>throw (bool) – Re-raise task exceptions.</li><li>Defaults to the task_eager_propagates setting.</li></ul><span class="prog__sub">Returns</span><p>pre-evaluated result.</p><span class="prog__sub">Return type</span><p>celery.result.EagerResult</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.apply
apply	R	Task.apply										
Task.apply_async	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.apply_async(args=None, kwargs=None, task_id=None, producer=None, link=None, link_error=None, shadow=None, **options)</code></pre><p>Apply tasks asynchronously by sending a message.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>args (Tuple) – The positional arguments to pass on to the task.</li><li>kwargs (Dict) – The keyword arguments to pass on to the task.</li><li>countdown (float) – Number of seconds into the future that the</li><li>task should execute.  Defaults to immediate execution.</li><li>eta (datetime) – Absolute time and date of when the task</li><li>should be executed.  May not be specified if countdown</li><li>is also supplied.</li><li>expires (float, datetime) – Datetime or</li><li>seconds in the future for the task should expire.</li><li>The task won’t be executed after the expiration time.</li><li>shadow (str) – Override task name used in logs/monitoring.</li><li>Default is retrieved from shadow_name().</li><li>connection (kombu.Connection) – Re-use existing broker connection</li><li>instead of acquiring one from the connection pool.</li><li>retry (bool) – If enabled sending of the task message will be</li><li>retried in the event of connection loss or failure.</li><li>Default is taken from the task_publish_retry</li><li>setting.  Note that you need to handle the</li><li>producer/connection manually for this to work.</li><li>retry_policy (Mapping) – Override the retry policy used.</li><li>See the task_publish_retry_policy setting.</li><li>queue (str, kombu.Queue) – The queue to route the task to.</li><li>This must be a key present in task_queues, or</li><li>task_create_missing_queues must be</li><li>enabled.  See Routing Tasks for more</li><li>information.</li><li>exchange (str, kombu.Exchange) – Named custom exchange to send the</li><li>task to.  Usually not used in combination with the queue</li><li>argument.</li><li>routing_key (str) – Custom routing key used to route the task to a</li><li>worker server.  If in combination with a queue argument</li><li>only used to specify custom routing keys to topic exchanges.</li><li>priority (int) – The task priority, a number between 0 and 9.</li><li>Defaults to the priority attribute.</li><li>serializer (str) – Serialization method to use.</li><li>Can be pickle, json, yaml, msgpack or any custom</li><li>serialization method that’s been registered</li><li>with kombu.serialization.registry.</li><li>Defaults to the serializer attribute.</li><li>compression (str) – Optional compression method</li><li>to use.  Can be one of zlib, bzip2,</li><li>or any custom compression methods registered with</li><li>kombu.compression.register().</li><li>Defaults to the task_compression setting.</li><li>link (~@Signature) – A single, or a list of tasks signatures</li><li>to apply if the task returns successfully.</li><li>link_error (~@Signature) – A single, or a list of task signatures</li><li>to apply if an error occurs while executing the task.</li><li>producer (kombu.Producer) – custom producer to use when publishing</li><li>the task.</li><li>add_to_parent (bool) – If set to True (default) and the task</li><li>is applied while executing another task, then the result</li><li>will be appended to the parent tasks request.children</li><li>attribute.  Trailing can also be disabled by default using the</li><li>trail attribute</li><li>publisher (kombu.Producer) – Deprecated alias to producer.</li><li>headers (Dict) – Message headers to be included in the message.</li></ul><span class="prog__sub">Returns</span><p>Promise of future evaluation.</p><span class="prog__sub">Return type</span><p>~@AsyncResult</p><span class="prog__sub">Raises</span><ul class="prog__ul"><li>TypeError – If not enough arguments are passed, or too many</li><li>arguments are passed.  Note that signature checks may</li><li>be disabled by specifying @task(typing=False).</li><li>kombu.exceptions.OperationalError – If a connection to the</li><li>transport cannot be made, or if the connection is lost.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.apply_async
apply async	R	Task.apply_async										
Task.chunks	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.chunks(it, n)</code></pre><p>Create a chunks task for this task.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.chunks
chunks	R	Task.chunks										
Task.delay	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.delay(*args, **kwargs)</code></pre><p>Star argument version of apply_async().</p><p>Does not support the extra options enabled by apply_async().</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>*args (Any) – Positional arguments passed on to the task.</li><li>**kwargs (Any) – Keyword arguments passed on to the task.</li></ul><span class="prog__sub">Returns</span><p>Future promise.</p><span class="prog__sub">Return type</span><p>celery.result.AsyncResult</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.delay
delay	R	Task.delay										
Task.map	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.map(it)</code></pre><p>Create a xmap task from it.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.map
map	R	Task.map										
Task.on_bound	A			celery.app.task Functions							<section class="prog__container"><pre><code>classmethod Task.on_bound(app)</code></pre><p>Called when the task is bound to an app.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.on_bound
on bound	R	Task.on_bound										
Task.on_failure	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.on_failure(exc, task_id, args, kwargs, einfo)</code></pre><p>Error handler.</p><p>This is run by the worker when the task fails.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>exc (Exception) – The exception raised by the task.</li><li>task_id (str) – Unique id of the failed task.</li><li>args (Tuple) – Original arguments for the task that failed.</li><li>kwargs (Dict) – Original keyword arguments for the task that failed.</li><li>einfo (ExceptionInfo) – Exception information.</li></ul><span class="prog__sub">Returns</span><p>The return value of this handler is ignored.</p><span class="prog__sub">Return type</span><p>None</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.on_failure
on failure	R	Task.on_failure										
Task.on_retry	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.on_retry(exc, task_id, args, kwargs, einfo)</code></pre><p>Retry handler.</p><p>This is run by the worker when the task is to be retried.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>exc (Exception) – The exception sent to retry().</li><li>task_id (str) – Unique id of the retried task.</li><li>args (Tuple) – Original arguments for the retried task.</li><li>kwargs (Dict) – Original keyword arguments for the retried task.</li><li>einfo (ExceptionInfo) – Exception information.</li></ul><span class="prog__sub">Returns</span><p>The return value of this handler is ignored.</p><span class="prog__sub">Return type</span><p>None</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.on_retry
on retry	R	Task.on_retry										
Task.on_success	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.on_success(retval, task_id, args, kwargs)</code></pre><p>Success handler.</p><p>Run by the worker if the task executes successfully.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>retval (Any) – The return value of the task.</li><li>task_id (str) – Unique id of the executed task.</li><li>args (Tuple) – Original arguments for the executed task.</li><li>kwargs (Dict) – Original keyword arguments for the executed task.</li></ul><span class="prog__sub">Returns</span><p>The return value of this handler is ignored.</p><span class="prog__sub">Return type</span><p>None</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.on_success
on success	R	Task.on_success										
Task.replace	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.replace(sig)</code></pre><p>Replace this task, with a new task inheriting the task id.</p><span class="prog__sub">Parameters</span><p>sig (~@Signature) – signature to replace with.</p><span class="prog__sub">Raises</span><ul class="prog__ul"><li>Ignore – This is always raised, so the best practice</li><li>is to always use raise self.replace(...) to convey</li><li>to the reader that the task won’t continue after being replaced.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.replace
replace	R	Task.replace										
Task.retry	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.retry(args=None, kwargs=None, exc=None, throw=True, eta=None, countdown=None, max_retries=None, **options)</code></pre><p>Retry the task.</p><span class="prog__sub">Example</span><pre><code>>>> from imaginary_twitter_lib import Twitter>>> from proj.celery import app>>> @app.task(bind=True) def tweet(self, auth, message):     twitter = Twitter(oauth=auth)     try:         twitter.post_status_update(message)     except twitter.FailWhale as exc:         # Retry in 5 minutes.         raise self.retry(countdown=60 * 5, exc=exc)</code></pre><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>args (Tuple) – Positional arguments to retry with.</li><li>kwargs (Dict) – Keyword arguments to retry with.</li><li>exc (Exception) – Custom exception to report when the max restart</li><li>limit has been exceeded (default:</li><li>MaxRetriesExceededError).</li><li>If this argument is set and retry is called while</li><li>an exception was raised (sys.exc_info() is set)</li><li>it will attempt to re-raise the current exception.</li><li>If no exception was raised it will raise the exc</li><li>argument provided.</li><li>countdown (float) – Time in seconds to delay the retry for.</li><li>eta (dateime) – Explicit time and date to run the</li><li>retry at.</li><li>max_retries (int) – If set, overrides the default retry limit for</li><li>this execution.  Changes to this parameter don’t propagate to</li><li>subsequent task retry attempts.  A value of None,</li><li>means “use the default”, so if you want infinite retries you’d</li><li>have to set the max_retries attribute of the task to</li><li>None first.</li><li>time_limit (int) – If set, overrides the default time limit.</li><li>soft_time_limit (int) – If set, overrides the default soft</li><li>time limit.</li><li>throw (bool) – If this is False, don’t raise the</li><li>Retry exception, that tells the worker to mark</li><li>the task as being retried.  Note that this means the task</li><li>will be marked as failed if the task raises an exception,</li><li>or successful if it returns after the retry call.</li><li>**options (Any) – Extra options to pass on to apply_async().</li></ul><span class="prog__sub">Raises</span><p>celery.exceptions.Retry – To tell the worker that the task has been re-sent for retry.This always happens, unless the throw keyword argumenthas been explicitly set to False, and is considerednormal operation.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.retry
retry	R	Task.retry										
Task.run	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.run(*args, **kwargs)</code></pre><p>The body of the task executed by workers.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.run
run	R	Task.run										
Task.s	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.s(*args, **kwargs)</code></pre><p>Create signature.</p><p>Shortcut for .s(*a, **k) -> .signature(a, k).</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.s
s	R	Task.s										
Task.send_event	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.send_event(type_, retry=True, retry_policy=None, **fields)</code></pre><p>Send monitoring event message.</p><p>This can be used to add custom event types in Flowerand other monitors.</p><span class="prog__sub">Parameters</span><p>type (str) – Type of event, e.g. "task-failed".</p><span class="prog__sub">Keyword Arguments</span><ul class="prog__ul"><li>retry (bool) – Retry sending the message</li><li>if the connection is lost.  Default is taken from the</li><li>task_publish_retry setting.</li><li>retry_policy (Mapping) – Retry settings.  Default is taken</li><li>from the task_publish_retry_policy setting.</li><li>**fields (Any) – Map containing information about the event.</li><li>Must be JSON serializable.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.send_event
send event	R	Task.send_event										
Task.shadow_name	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.shadow_name(args, kwargs, options)</code></pre><p>Override for custom task name in worker logs/monitoring.</p><span class="prog__sub">Example</span><pre><code>from celery.utils.imports import qualnamedef shadow_name(task, args, kwargs, options):    return qualname(args[0])@app.task(shadow_name=shadow_name, serializer='pickle')def apply_function_async(fun, *args, **kwargs):    return fun(*args, **kwargs)</code></pre><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>args (Tuple) – Task positional arguments.</li><li>kwargs (Dict) – Task keyword arguments.</li><li>options (Dict) – Task execution options.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.shadow_name
shadow name	R	Task.shadow_name										
Task.si	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.si(*args, **kwargs)</code></pre><p>Create immutable signature.</p><p>Shortcut for .si(*a, **k) -> .signature(a, k, immutable=True).</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.si
si	R	Task.si										
Task.signature	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.signature(args=None, *starargs, **starkwargs)object for</code></pre><p>Create signature.</p><span class="prog__sub">Returns</span><p>object forthis task, wrapping arguments and execution optionsfor a single task invocation.</p><span class="prog__sub">Return type</span><p>signature</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.signature
signature	R	Task.signature										
Task.starmap	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.starmap(it)</code></pre><p>Create a xstarmap task from it.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.starmap
starmap	R	Task.starmap										
Task.subtask	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.subtask(args=None, *starargs, **starkwargs)object for</code></pre><p>Create signature.</p><span class="prog__sub">Returns</span><p>object forthis task, wrapping arguments and execution optionsfor a single task invocation.</p><span class="prog__sub">Return type</span><p>signature</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.subtask
subtask	R	Task.subtask										
Task.update_state	A			celery.app.task Functions							<section class="prog__container"><pre><code>Task.update_state(task_id=None, state=None, meta=None)</code></pre><p>Update task state.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>task_id (str) – Id of the task to update.</li><li>Defaults to the id of the current task.</li><li>state (str) – New state.</li><li>meta (Dict) – State meta-data.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.task.html#celery.app.task.Task.update_state
update state	R	Task.update_state										
Queues	A			amqp Functions							<section class="prog__container"><pre><code>Queues(queues, create_missing=None, ha_policy=None, autoexchange=None, max_priority=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/amqp.html#celery.app.amqp.AMQP.Queues
Router	A			amqp Functions							<section class="prog__container"><pre><code>Router(queues=None, create_missing=None)</code></pre><p>Return the current task router.</p></section>	http://docs.celeryproject.org/en/stable/reference/amqp.html#celery.app.amqp.AMQP.Router
flush_routes	A			amqp Functions							<section class="prog__container"><pre><code>flush_routes()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/amqp.html#celery.app.amqp.AMQP.flush_routes
add	A			queues Functions							<section class="prog__container"><pre><code>add(queue, **kwargs)</code></pre><p>Add new queue.</p><p>The first argument can either be a kombu.Queue instance,or the name of a queue.  If the former the rest of the keywordarguments are ignored, and options are simply taken from the queueinstance.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>queue (kombu.Queue, str) – Queue to add.</li><li>exchange (kombu.Exchange, str) – if queue is str, specifies exchange name.</li><li>routing_key (str) – if queue is str, specifies binding key.</li><li>exchange_type (str) – if queue is str, specifies type of exchange.</li><li>**options (Any) – Additional declaration options used when</li><li>queue is a str.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/queues.html#celery.app.amqp.Queues.add
add_compat	A			queues Functions							<section class="prog__container"><pre><code>add_compat(name, **options)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/queues.html#celery.app.amqp.Queues.add_compat
deselect	A			queues Functions							<section class="prog__container"><pre><code>deselect(exclude)</code></pre><p>Deselect queues so that they won’t be consumed from.</p><span class="prog__sub">Parameters</span><p>exclude (Sequence[str], str) – Names of queues to avoidconsuming from.</p></section>	http://docs.celeryproject.org/en/stable/reference/queues.html#celery.app.amqp.Queues.deselect
format	A			queues Functions							<section class="prog__container"><pre><code>format(indent=0, indent_first=True)</code></pre><p>Format routing table into string for log dumps.</p></section>	http://docs.celeryproject.org/en/stable/reference/queues.html#celery.app.amqp.Queues.format
new_missing	A			queues Functions							<section class="prog__container"><pre><code>new_missing(name)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/queues.html#celery.app.amqp.Queues.new_missing
select	A			queues Functions							<section class="prog__container"><pre><code>select(include)</code></pre><p>Select a subset of currently defined queues to consume from.</p><span class="prog__sub">Parameters</span><p>include (Sequence[str], str) – Names of queues to consume from.</p></section>	http://docs.celeryproject.org/en/stable/reference/queues.html#celery.app.amqp.Queues.select
select_add	A			queues Functions							<section class="prog__container"><pre><code>select_add(queue, **kwargs)</code></pre><p>Add new task queue that’ll be consumed from.</p><p>The queue will be active even when a subset has been selectedusing the celery worker -Q option.</p></section>	http://docs.celeryproject.org/en/stable/reference/queues.html#celery.app.amqp.Queues.select_add
to_python	A			celery.app.defaults Functions							<section class="prog__container"><pre><code>to_python(value)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.defaults.html#celery.app.defaults.Option.to_python
active	A			celery.app.control Functions							<section class="prog__container"><pre><code>active(safe=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.active
active_queues	A			celery.app.control Functions							<section class="prog__container"><pre><code>active_queues()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.active_queues
clock	A			celery.app.control Functions							<section class="prog__container"><pre><code>clock()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.clock
conf	A			celery.app.control Functions							<section class="prog__container"><pre><code>conf(with_defaults=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.conf
hello	A			celery.app.control Functions							<section class="prog__container"><pre><code>hello(from_node, revoked=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.hello
memdump	A			celery.app.control Functions							<section class="prog__container"><pre><code>memdump(samples=10)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.memdump
memsample	A			celery.app.control Functions							<section class="prog__container"><pre><code>memsample()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.memsample
objgraph	A			celery.app.control Functions							<section class="prog__container"><pre><code>objgraph(type=u'Request', n=200, max_depth=10)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.objgraph
ping	A			celery.app.control Functions							<section class="prog__container"><pre><code>ping(destination=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.ping
query_task	A			celery.app.control Functions							<section class="prog__container"><pre><code>query_task(*ids)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.query_task
registered	A			celery.app.control Functions							<section class="prog__container"><pre><code>registered(*taskinfoitems)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.registered
registered_tasks	A			celery.app.control Functions							<section class="prog__container"><pre><code>registered_tasks(*taskinfoitems)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.registered_tasks
report	A			celery.app.control Functions							<section class="prog__container"><pre><code>report()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.report
reserved	A			celery.app.control Functions							<section class="prog__container"><pre><code>reserved(safe=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.reserved
revoked	A			celery.app.control Functions							<section class="prog__container"><pre><code>revoked()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.revoked
scheduled	A			celery.app.control Functions							<section class="prog__container"><pre><code>scheduled(safe=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.scheduled
stats	A			celery.app.control Functions							<section class="prog__container"><pre><code>stats()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Inspect.stats
Control.add_consumer	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.add_consumer(queue, exchange=None, exchange_type=u'direct', routing_key=None, options=None, destination=None, **kwargs)</code></pre><p>Tell all (or specific) workers to start consuming from a new queue.</p><p>Only the queue name is required as if only the queue is specifiedthen the exchange/routing key will be set to the same name (like automatic queues do).</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>queue (str) – Name of queue to start consuming from.</li><li>exchange (str) – Optional name of exchange.</li><li>exchange_type (str) – Type of exchange (defaults to ‘direct’)</li><li>command to, when empty broadcast to all workers.</li><li>routing_key (str) – Optional routing key.</li><li>options (Dict) – Additional options as supported</li><li>by kombu.entitiy.Queue.from_dict().</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.add_consumer
add consumer	R	Control.add_consumer										
Control.autoscale	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.autoscale(max, min, destination=None, **kwargs)</code></pre><p>Change worker(s) autoscale setting.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.autoscale
autoscale	R	Control.autoscale										
Control.broadcast	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.broadcast(command, arguments=None, destination=None, connection=None, reply=False, timeout=1.0, limit=None, callback=None, channel=None, **extra_kwargs)</code></pre><p>Broadcast a control command to the celery workers.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>command (str) – Name of command to send.</li><li>arguments (Dict) – Keyword arguments for the command.</li><li>destination (List) – If set, a list of the hosts to send the</li><li>command to, when empty broadcast to all workers.</li><li>connection (kombu.Connection) – Custom broker connection to use,</li><li>if not set, a connection will be acquired from the pool.</li><li>reply (bool) – Wait for and return the reply.</li><li>timeout (float) – Timeout in seconds to wait for the reply.</li><li>limit (int) – Limit number of replies.</li><li>callback (Callable) – Callback called immediately for</li><li>each reply received.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.broadcast
broadcast	R	Control.broadcast										
Control.cancel_consumer	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.cancel_consumer(queue, destination=None, **kwargs)</code></pre><p>Tell all (or specific) workers to stop consuming from queue.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.cancel_consumer
cancel consumer	R	Control.cancel_consumer										
Control.disable_events	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.disable_events(destination=None, **kwargs)</code></pre><p>Tell all (or specific) workers to disable events.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.disable_events
disable events	R	Control.disable_events										
Control.discard_all	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.discard_all(connection=None)</code></pre><p>Discard all waiting tasks.</p><p>This will ignore all tasks waiting for execution, and they willbe deleted from the messaging server.</p><span class="prog__sub">Parameters</span><p>connection (kombu.Connection) – Optional specific connectioninstance to use.  If not provided a connection willbe acquired from the connection pool.</p><span class="prog__sub">Returns</span><p>the number of tasks discarded.</p><span class="prog__sub">Return type</span><p>int</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.discard_all
discard all	R	Control.discard_all										
Control.election	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.election(id, topic, action=None, connection=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.election
election	R	Control.election										
Control.enable_events	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.enable_events(destination=None, **kwargs)</code></pre><p>Tell all (or specific) workers to enable events.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.enable_events
enable events	R	Control.enable_events										
Control.heartbeat	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.heartbeat(destination=None, **kwargs)</code></pre><p>Tell worker(s) to send a heartbeat immediately.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.heartbeat
heartbeat	R	Control.heartbeat										
Control.ping	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.ping(destination=None, timeout=1.0, **kwargs)</code></pre><p>Ping all (or specific) workers.</p><span class="prog__sub">Returns</span><p>List of {'hostname': reply} dictionaries.</p><span class="prog__sub">Return type</span><p>List[Dict]</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.ping
ping	R	Control.ping										
Control.pool_grow	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.pool_grow(n=1, destination=None, **kwargs)</code></pre><p>Tell all (or specific) workers to grow the pool by n.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.pool_grow
pool grow	R	Control.pool_grow										
Control.pool_restart	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.pool_restart(modules=None, reload=False, reloader=None, destination=None, **kwargs)</code></pre><p>Restart the execution pools of all or specific workers.</p><span class="prog__sub">Keyword Arguments</span><ul class="prog__ul"><li>modules (Sequence[str]) – List of modules to reload.</li><li>reload (bool) – Flag to enable module reloading.  Default is False.</li><li>reloader (Any) – Function to reload a module.</li><li>destination (Sequence[str]) – List of worker names to send this</li><li>command to.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.pool_restart
pool restart	R	Control.pool_restart										
Control.pool_shrink	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.pool_shrink(n=1, destination=None, **kwargs)</code></pre><p>Tell all (or specific) workers to shrink the pool by n.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.pool_shrink
pool shrink	R	Control.pool_shrink										
Control.purge	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.purge(connection=None)</code></pre><p>Discard all waiting tasks.</p><p>This will ignore all tasks waiting for execution, and they willbe deleted from the messaging server.</p><span class="prog__sub">Parameters</span><p>connection (kombu.Connection) – Optional specific connectioninstance to use.  If not provided a connection willbe acquired from the connection pool.</p><span class="prog__sub">Returns</span><p>the number of tasks discarded.</p><span class="prog__sub">Return type</span><p>int</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.purge
purge	R	Control.purge										
Control.rate_limit	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.rate_limit(task_name, rate_limit, destination=None, **kwargs)</code></pre><p>Tell workers to set a new rate limit for task by type.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>task_name (str) – Name of task to change rate limit for.</li><li>rate_limit (int, str) – The rate limit as tasks per second,</li><li>or a rate limit string (‘100/m’, etc.</li><li>see celery.task.base.Task.rate_limit for</li><li>more information).</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.rate_limit
rate limit	R	Control.rate_limit										
Control.revoke	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.revoke(task_id, destination=None, terminate=False, signal='SIGTERM', **kwargs)</code></pre><p>Tell all (or specific) workers to revoke a task by id.</p><p>If a task is revoked, the workers will ignore the task andnot execute it after all.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>task_id (str) – Id of the task to revoke.</li><li>terminate (bool) – Also terminate the process currently working</li><li>on the task (if any).</li><li>signal (str) – Name of signal to send to process if terminate.</li><li>Default is TERM.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.revoke
revoke	R	Control.revoke										
Control.shutdown	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.shutdown(destination=None, **kwargs)</code></pre><p>Shutdown worker(s).</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.shutdown
shutdown	R	Control.shutdown										
Control.terminate	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.terminate(task_id, destination=None, signal='SIGTERM', **kwargs)</code></pre><p>Tell all (or specific) workers to terminate a task by id.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.terminate
terminate	R	Control.terminate										
Control.time_limit	A			celery.app.control Functions							<section class="prog__container"><pre><code>Control.time_limit(task_name, soft=None, hard=None, destination=None, **kwargs)</code></pre><p>Tell workers to set time limits for a task by type.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>task_name (str) – Name of task to change time limits for.</li><li>soft (float) – New soft time limit (in seconds).</li><li>hard (float) – New hard time limit (in seconds).</li><li>**kwargs (Any) – arguments passed on to broadcast().</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.control.html#celery.app.control.Control.time_limit
time limit	R	Control.time_limit										
TaskRegistry.filter_types	A			celery.app.registry Functions							<section class="prog__container"><pre><code>TaskRegistry.filter_types(type)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.registry.html#celery.app.registry.TaskRegistry.filter_types
filter types	R	TaskRegistry.filter_types										
TaskRegistry.periodic	A			celery.app.registry Functions							<section class="prog__container"><pre><code>TaskRegistry.periodic()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.registry.html#celery.app.registry.TaskRegistry.periodic
periodic	R	TaskRegistry.periodic										
TaskRegistry.register	A			celery.app.registry Functions							<section class="prog__container"><pre><code>TaskRegistry.register(task)</code></pre><p>Register a task in the task registry.</p><p>The task will be automatically instantiated if not already aninstance. Name must be configured prior to registration.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.registry.html#celery.app.registry.TaskRegistry.register
register	R	TaskRegistry.register										
TaskRegistry.regular	A			celery.app.registry Functions							<section class="prog__container"><pre><code>TaskRegistry.regular()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.registry.html#celery.app.registry.TaskRegistry.regular
regular	R	TaskRegistry.regular										
TaskRegistry.unregister	A			celery.app.registry Functions							<section class="prog__container"><pre><code>TaskRegistry.unregister(name)</code></pre><p>Unregister task by name.</p><span class="prog__sub">Parameters</span><p>name (str) – name of the task to unregister, or acelery.task.base.Task with a valid name attribute.</p><span class="prog__sub">Raises</span><p>celery.exceptions.NotRegistered – if the task is not registered.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.registry.html#celery.app.registry.TaskRegistry.unregister
unregister	R	TaskRegistry.unregister										
default_dispatcher	A			celery.app.events Functions							<section class="prog__container"><pre><code>default_dispatcher(*args, **kwds)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.events.html#celery.app.events.Events.default_dispatcher
format	A			celery.app.log Functions							<section class="prog__container"><pre><code>format(record)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.TaskFormatter.format
colored	A			celery.app.log Functions							<section class="prog__container"><pre><code>colored(logfile=None, enabled=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.colored
get_default_logger	A			celery.app.log Functions							<section class="prog__container"><pre><code>get_default_logger(name=u'celery', **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.get_default_logger
redirect_stdouts	A			celery.app.log Functions							<section class="prog__container"><pre><code>redirect_stdouts(loglevel=None, name=u'celery.redirected')</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.redirect_stdouts
redirect_stdouts_to_logger	A			celery.app.log Functions							<section class="prog__container"><pre><code>redirect_stdouts_to_logger(logger, loglevel=None, stdout=True, stderr=True)</code></pre><p>Redirect sys.stdout and sys.stderr to logger.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>logger (logging.Logger) – Logger instance to redirect to.</li><li>loglevel (int, str) – The loglevel redirected message</li><li>will be logged as.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.redirect_stdouts_to_logger
setup	A			celery.app.log Functions							<section class="prog__container"><pre><code>setup(loglevel=None, logfile=None, redirect_stdouts=False, redirect_level=u'WARNING', colorize=None, hostname=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.setup
setup_handlers	A			celery.app.log Functions							<section class="prog__container"><pre><code>setup_handlers(logger, logfile, format, colorize, formatter=<class 'celery.utils.log.ColorFormatter'>, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.setup_handlers
setup_logger	A			celery.app.log Functions							<section class="prog__container"><pre><code>setup_logger(name=u'celery', *args, **kwargs)</code></pre><p>Deprecated: No longer used.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.setup_logger
setup_logging_subsystem	A			celery.app.log Functions							<section class="prog__container"><pre><code>setup_logging_subsystem(loglevel=None, logfile=None, format=None, colorize=None, hostname=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.setup_logging_subsystem
setup_task_loggers	A			celery.app.log Functions							<section class="prog__container"><pre><code>setup_task_loggers(loglevel=None, logfile=None, format=None, colorize=None, propagate=False, **kwargs)</code></pre><p>Setup the task logger.</p><p>If logfile is not specified, then sys.stderr is used.</p><p>Will return the base task logger object.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.setup_task_loggers
supports_color	A			celery.app.log Functions							<section class="prog__container"><pre><code>supports_color(colorize=None, logfile=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.log.html#celery.app.log.Logging.supports_color
finalize	A			celery.app.utils Functions							<section class="prog__container"><pre><code>finalize()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.utils.html#celery.app.utils.Settings.finalize
find_option	A			celery.app.utils Functions							<section class="prog__container"><pre><code>find_option(name, namespace=u'')</code></pre><p>Search for option by name.</p><span class="prog__sub">Example</span><pre><code>>>> from proj.celery import app>>> app.conf.find_option('disable_rate_limits')('worker', 'prefetch_multiplier', <Option: type->bool default->False>))</code></pre><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>name (str) – Name of option, cannot be partial.</li><li>namespace (str) – Preferred name-space (None by default).</li></ul><span class="prog__sub">Returns</span><p>of (namespace, key, type).</p><span class="prog__sub">Return type</span><p>Tuple</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.utils.html#celery.app.utils.Settings.find_option
find_value_for_key	A			celery.app.utils Functions							<section class="prog__container"><pre><code>find_value_for_key(name, namespace=u'celery')</code></pre><p>Shortcut to get_by_parts(*find_option(name)[:-1]).</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.utils.html#celery.app.utils.Settings.find_value_for_key
get_by_parts	A			celery.app.utils Functions							<section class="prog__container"><pre><code>get_by_parts(*parts)</code></pre><p>Return the current value for setting specified as a path.</p><span class="prog__sub">Example</span><pre><code>>>> from proj.celery import app>>> app.conf.get_by_parts('worker', 'disable_rate_limits')False</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.utils.html#celery.app.utils.Settings.get_by_parts
humanize	A			celery.app.utils Functions							<section class="prog__container"><pre><code>humanize(with_defaults=False, censored=True)</code></pre><p>Return a human readable text showing configuration changes.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.utils.html#celery.app.utils.Settings.humanize
table	A			celery.app.utils Functions							<section class="prog__container"><pre><code>table(with_defaults=False, censored=True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.utils.html#celery.app.utils.Settings.table
value_set_for	A			celery.app.utils Functions							<section class="prog__container"><pre><code>value_set_for(key)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.utils.html#celery.app.utils.Settings.value_set_for
without_defaults	A			celery.app.utils Functions							<section class="prog__container"><pre><code>without_defaults()</code></pre><p>Return the current configuration, but without defaults.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.app.utils.html#celery.app.utils.Settings.without_defaults
apply	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>apply(parent, **kwargs)</code></pre><p>Apply the steps in this blueprint to an object.</p><p>This will apply the __init__ and include methodsof each step, with the object as argument:</p><p>For StartStopStep the services createdwill also be added to the objects steps attribute.</p><pre><code>step = Step(obj)step.include(obj)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.apply
claim_steps	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>claim_steps()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.claim_steps
close	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>close(parent)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.close
connect_with	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>connect_with(other)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.connect_with
human_state	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>human_state()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.human_state
info	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>info(parent)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.info
join	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>join(timeout=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.join
load_step	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>load_step(step)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.load_step
restart	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>restart(parent, method=u'stop', description=u'restarting', propagate=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.restart
send_all	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>send_all(parent, method, description=None, reverse=True, propagate=True, args=())</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.send_all
start	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>start(parent)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.start
stop	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>stop(parent, close=True, terminate=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Blueprint.stop
create	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>create(parent)</code></pre><p>Create the step.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Step.create
include	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>include(parent)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Step.include
include_if	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>include_if(parent)</code></pre><p>Return true if bootstep should be included.</p><p>You can define this as an optional predicate that decides whetherthis step should be created.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Step.include_if
info	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>info(obj)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Step.info
instantiate	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>instantiate(name, *args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.Step.instantiate
close	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>close(parent)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.StartStopStep.close
include	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>include(parent)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.StartStopStep.include
start	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>start(parent)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.StartStopStep.start
stop	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>stop(parent)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.StartStopStep.stop
terminate	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>terminate(parent)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.StartStopStep.terminate
get_consumers	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>get_consumers(channel)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.ConsumerStep.get_consumers
shutdown	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>shutdown(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.ConsumerStep.shutdown
start	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.ConsumerStep.start
stop	A			celery.bootsteps Functions							<section class="prog__container"><pre><code>stop(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bootsteps.html#celery.bootsteps.ConsumerStep.stop
AsyncResult.as_tuple	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.as_tuple()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.as_tuple
as tuple	R	AsyncResult.as_tuple										
AsyncResult.build_graph	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.build_graph(intermediate=False, formatter=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.build_graph
build graph	R	AsyncResult.build_graph										
AsyncResult.collect	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.collect(intermediate=False, **kwargs)</code></pre><p>Collect results as they return.</p><p>Iterator, like get() will wait for the task to complete,but will also follow AsyncResult and ResultSetreturned by the task, yielding (result, value) tuples for eachresult in the tree.</p><p>An example would be having the following tasks:</p><pre><code>from celery import groupfrom proj.celery import app@app.task(trail=True)def A(how_many):    return group(B.s(i) for i in range(how_many))()@app.task(trail=True)def B(i):    return pow2.delay(i)@app.task(trail=True)def pow2(i):    return i ** 2>>> from celery.result import ResultBase>>> from proj.tasks import A>>> result = A.delay(10)>>> [v for v in result.collect()  if not isinstance(v, (ResultBase, tuple))][0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</code></pre><span class="prog__sub">Yields</span><p>Tuple[AsyncResult, Any] – tuples containing the result instanceof the child task, and the return value of that task.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.collect
collect	R	AsyncResult.collect										
AsyncResult.failed	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.failed()</code></pre><p>Return True if the task failed.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.failed
failed	R	AsyncResult.failed										
AsyncResult.forget	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.forget()</code></pre><p>Forget about (and possibly remove the result of) this task.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.forget
forget	R	AsyncResult.forget										
AsyncResult.get	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.get(timeout=None, propagate=True, interval=0.5, no_ack=True, follow_parents=True, callback=None, on_message=None, on_interval=None, EXCEPTION_STATES=frozenset([u'FAILURE', u'RETRY', u'REVOKED']), PROPAGATE_STATES=frozenset([u'FAILURE', u'REVOKED']))</code></pre><p>Wait until task is ready, and return its result.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>timeout (float) – How long to wait, in seconds, before the</li><li>operation times out.</li><li>propagate (bool) – Re-raise exception if the task failed.</li><li>interval (float) – Time to wait (in seconds) before retrying to</li><li>retrieve the result.  Note that this does not have any effect</li><li>when using the RPC/redis result store backends, as they don’t</li><li>use polling.</li><li>no_ack (bool) – Enable amqp no ack (automatically acknowledge</li><li>message).  If this is False then the message will</li><li>not be acked.</li><li>follow_parents (bool) – Re-raise any exception raised by</li><li>parent tasks.</li></ul><span class="prog__sub">Raises</span><ul class="prog__ul"><li>celery.exceptions.TimeoutError – if timeout isn’t</li><li>None and the result does not arrive within</li><li>timeout seconds.</li><li>Exception – If the remote call raised an exception then that</li><li>exception will be re-raised in the caller process.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.get
get	R	AsyncResult.get										
AsyncResult.get_leaf	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.get_leaf()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.get_leaf
get leaf	R	AsyncResult.get_leaf										
AsyncResult.iterdeps	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.iterdeps(intermediate=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.iterdeps
iterdeps	R	AsyncResult.iterdeps										
AsyncResult.maybe_reraise	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.maybe_reraise(propagate=True, callback=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.maybe_reraise
maybe reraise	R	AsyncResult.maybe_reraise										
AsyncResult.maybe_throw	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.maybe_throw(propagate=True, callback=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.maybe_throw
maybe throw	R	AsyncResult.maybe_throw										
AsyncResult.ready	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.ready()</code></pre><p>Return True if the task started executing.</p><p>If the task is still running, pending, or is waitingfor retry then False is returned.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.ready
ready	R	AsyncResult.ready										
AsyncResult.revoke	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.revoke(connection=None, terminate=False, signal=None, wait=False, timeout=None)</code></pre><p>Send revoke signal to all workers.</p><p>Any worker receiving the task, or having reserved thetask, must ignore it.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>terminate (bool) – Also terminate the process currently working</li><li>on the task (if any).</li><li>signal (str) – Name of signal to send to process if terminate.</li><li>Default is TERM.</li><li>wait (bool) – Wait for replies from workers.</li><li>The timeout argument specifies the seconds to wait.</li><li>Disabled by default.</li><li>timeout (float) – Time in seconds to wait for replies when</li><li>wait is enabled.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.revoke
revoke	R	AsyncResult.revoke										
AsyncResult.successful	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.successful()</code></pre><p>Return True if the task executed successfully.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.successful
successful	R	AsyncResult.successful										
AsyncResult.then	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.then(callback, on_error=None, weak=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.then
then	R	AsyncResult.then										
AsyncResult.throw	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.throw(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.throw
throw	R	AsyncResult.throw										
AsyncResult.wait	A			celery.result Functions							<section class="prog__container"><pre><code>AsyncResult.wait(timeout=None, propagate=True, interval=0.5, no_ack=True, follow_parents=True, callback=None, on_message=None, on_interval=None, EXCEPTION_STATES=frozenset([u'FAILURE', u'RETRY', u'REVOKED']), PROPAGATE_STATES=frozenset([u'FAILURE', u'REVOKED']))</code></pre><p>Wait until task is ready, and return its result.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>timeout (float) – How long to wait, in seconds, before the</li><li>operation times out.</li><li>propagate (bool) – Re-raise exception if the task failed.</li><li>interval (float) – Time to wait (in seconds) before retrying to</li><li>retrieve the result.  Note that this does not have any effect</li><li>when using the RPC/redis result store backends, as they don’t</li><li>use polling.</li><li>no_ack (bool) – Enable amqp no ack (automatically acknowledge</li><li>message).  If this is False then the message will</li><li>not be acked.</li><li>follow_parents (bool) – Re-raise any exception raised by</li><li>parent tasks.</li></ul><span class="prog__sub">Raises</span><ul class="prog__ul"><li>celery.exceptions.TimeoutError – if timeout isn’t</li><li>None and the result does not arrive within</li><li>timeout seconds.</li><li>Exception – If the remote call raised an exception then that</li><li>exception will be re-raised in the caller process.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.AsyncResult.wait
wait	R	AsyncResult.wait										
add	A			celery.result Functions							<section class="prog__container"><pre><code>add(result)</code></pre><p>Add AsyncResult as a new member of the set.</p><p>Does nothing if the result is already a member.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.add
clear	A			celery.result Functions							<section class="prog__container"><pre><code>clear()</code></pre><p>Remove all results from this set.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.clear
completed_count	A			celery.result Functions							<section class="prog__container"><pre><code>completed_count()</code></pre><p>Task completion count.</p><span class="prog__sub">Returns</span><p>the number of tasks completed.</p><span class="prog__sub">Return type</span><p>int</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.completed_count
discard	A			celery.result Functions							<section class="prog__container"><pre><code>discard(result)</code></pre><p>Remove result from the set if it is a member.</p><p>Does nothing if it’s not a member.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.discard
failed	A			celery.result Functions							<section class="prog__container"><pre><code>failed()true if one of the tasks failed.</code></pre><p>Return true if any of the tasks failed.</p><span class="prog__sub">Returns</span><p>true if one of the tasks failed.(i.e., raised an exception)</p><span class="prog__sub">Return type</span><p>bool</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.failed
forget	A			celery.result Functions							<section class="prog__container"><pre><code>forget()</code></pre><p>Forget about (and possible remove the result of) all the tasks.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.forget
get	A			celery.result Functions							<section class="prog__container"><pre><code>get(timeout=None, propagate=True, interval=0.5, callback=None, no_ack=True, on_message=None)</code></pre><p>See join().</p><p>This is here for API compatibility with AsyncResult,in addition it uses join_native() if available for thecurrent result backend.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.get
iter_native	A			celery.result Functions							<section class="prog__container"><pre><code>iter_native(timeout=None, interval=0.5, no_ack=True, on_message=None, on_interval=None)</code></pre><p>Backend optimized version of iterate().</p><p>Note that this does not support collecting the resultsfor different task types using different backends.</p><p>This is currently only supported by the amqp, Redis and cacheresult backends.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.iter_native
iterate	A			celery.result Functions							<section class="prog__container"><pre><code>iterate(timeout=None, propagate=True, interval=0.5)</code></pre><p>Deprecated method, use get() with a callback argument.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.iterate
join	A			celery.result Functions							<section class="prog__container"><pre><code>join(timeout=None, propagate=True, interval=0.5, callback=None, no_ack=True, on_message=None, on_interval=None)</code></pre><p>Gather the results of all tasks as a list in order.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>timeout (float) – The number of seconds to wait for results</li><li>before the operation times out.</li><li>propagate (bool) – If any of the tasks raises an exception,</li><li>the exception will be re-raised when this flag is set.</li><li>interval (float) – Time to wait (in seconds) before retrying to</li><li>retrieve a result from the set.  Note that this does not have</li><li>any effect when using the amqp result store backend,</li><li>as it does not use polling.</li><li>callback (Callable) – Optional callback to be called for every</li><li>result received.  Must have signature (task_id, value)</li><li>No results will be returned by this function if a callback</li><li>is specified.  The order of results is also arbitrary when a</li><li>callback is used.  To get access to the result object for</li><li>a particular id you’ll have to generate an index first:</li><li>index = {r.id: r for r in gres.results.values()}</li><li>Or you can create new result objects on the fly:</li><li>result = app.AsyncResult(task_id) (both will</li><li>take advantage of the backend cache anyway).</li><li>no_ack (bool) – Automatic message acknowledgment (Note that if this</li><li>is set to False then the messages</li><li>will not be acknowledged).</li></ul><span class="prog__sub">Raises</span><p>celery.exceptions.TimeoutError – if timeout isn’tNone and the operation takes longer than timeoutseconds.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.join
join_native	A			celery.result Functions							<section class="prog__container"><pre><code>join_native(timeout=None, propagate=True, interval=0.5, callback=None, no_ack=True, on_message=None, on_interval=None)</code></pre><p>Backend optimized version of join().</p><p>Note that this does not support collecting the resultsfor different task types using different backends.</p><p>This is currently only supported by the amqp, Redis and cacheresult backends.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.join_native
maybe_reraise	A			celery.result Functions							<section class="prog__container"><pre><code>maybe_reraise(callback=None, propagate=True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.maybe_reraise
maybe_throw	A			celery.result Functions							<section class="prog__container"><pre><code>maybe_throw(callback=None, propagate=True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.maybe_throw
ready	A			celery.result Functions							<section class="prog__container"><pre><code>ready()</code></pre><p>Did all of the tasks complete? (either by success of failure).</p><span class="prog__sub">Returns</span><p>true if all of the tasks have been executed.</p><span class="prog__sub">Return type</span><p>bool</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.ready
remove	A			celery.result Functions							<section class="prog__container"><pre><code>remove(result)</code></pre><p>Remove result from the set; it must be a member.</p><span class="prog__sub">Raises</span><p>KeyError – if the result isn’t a member.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.remove
revoke	A			celery.result Functions							<section class="prog__container"><pre><code>revoke(connection=None, terminate=False, signal=None, wait=False, timeout=None)</code></pre><p>Send revoke signal to all workers for all tasks in the set.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>terminate (bool) – Also terminate the process currently working</li><li>on the task (if any).</li><li>signal (str) – Name of signal to send to process if terminate.</li><li>Default is TERM.</li><li>wait (bool) – Wait for replies from worker.</li><li>The timeout argument specifies the number of seconds</li><li>to wait.  Disabled by default.</li><li>timeout (float) – Time in seconds to wait for replies when</li><li>the wait argument is enabled.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.revoke
successful	A			celery.result Functions							<section class="prog__container"><pre><code>successful()true if all of the tasks finished</code></pre><p>Return true if all tasks successful.</p><span class="prog__sub">Returns</span><p>true if all of the tasks finishedsuccessfully (i.e. didn’t raise an exception).</p><span class="prog__sub">Return type</span><p>bool</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.successful
then	A			celery.result Functions							<section class="prog__container"><pre><code>then(callback, on_error=None, weak=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.then
update	A			celery.result Functions							<section class="prog__container"><pre><code>update(results)</code></pre><p>Extend from iterable of results.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.update
waiting	A			celery.result Functions							<section class="prog__container"><pre><code>waiting()true if one of the tasks are still</code></pre><p>Return true if any of the tasks are incomplate.</p><span class="prog__sub">Returns</span><p>true if one of the tasks are stillwaiting for execution.</p><span class="prog__sub">Return type</span><p>bool</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.ResultSet.waiting
as_tuple	A			celery.result Functions							<section class="prog__container"><pre><code>as_tuple()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.GroupResult.as_tuple
delete	A			celery.result Functions							<section class="prog__container"><pre><code>delete(backend=None)</code></pre><p>Remove this result if it was previously saved.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.GroupResult.delete
restore	A			celery.result Functions							<section class="prog__container"><pre><code>classmethod restore(id, backend=None, app=None)</code></pre><p>Restore previously saved group result.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.GroupResult.restore
save	A			celery.result Functions							<section class="prog__container"><pre><code>save(backend=None)</code></pre><p>Save group-result for later retrieval using restore().</p><span class="prog__sub">Example</span><pre><code>>>> def save_and_restore(result):     result.save()     result = GroupResult.restore(result.id)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.GroupResult.save
forget	A			celery.result Functions							<section class="prog__container"><pre><code>forget()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.EagerResult.forget
get	A			celery.result Functions							<section class="prog__container"><pre><code>get(timeout=None, propagate=True, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.EagerResult.get
ready	A			celery.result Functions							<section class="prog__container"><pre><code>ready()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.EagerResult.ready
revoke	A			celery.result Functions							<section class="prog__container"><pre><code>revoke(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.EagerResult.revoke
then	A			celery.result Functions							<section class="prog__container"><pre><code>then(callback, on_error=None, weak=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.EagerResult.then
wait	A			celery.result Functions							<section class="prog__container"><pre><code>wait(timeout=None, propagate=True, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.result.html#celery.result.EagerResult.wait
is_due	A			celery.schedules Functions							<section class="prog__container"><pre><code>is_due(last_run_at)(True, 20), means the task should be run now, and the next</code></pre><p>Return tuple of (is_due, next_time_to_check).</p><span class="prog__sub">Notes</span><p>The next time to check is used to save energy/CPU cycles,it does not need to be accurate but will influence the precisionof your schedule.  You must also keep in mindthe value of beat_max_loop_interval,that decides the maximum number of seconds the scheduler cansleep between re-checking the periodic task intervals.  So if youhave a task that changes schedule at run-time then your next_run_atcheck will decide how long it will take before a change to theschedule takes effect.  The max loop interval takes precedenceover the next check at value returned.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.schedules.html#celery.schedules.schedule.is_due
remaining_estimate	A			celery.schedules Functions							<section class="prog__container"><pre><code>remaining_estimate(last_run_at)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.schedules.html#celery.schedules.schedule.remaining_estimate
is_due	A			celery.schedules Functions							<section class="prog__container"><pre><code>is_due(last_run_at)SeeAlso:</code></pre><p>Return tuple of (is_due, next_time_to_run).</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.schedules.html#celery.schedules.crontab.is_due
remaining_delta	A			celery.schedules Functions							<section class="prog__container"><pre><code>remaining_delta(last_run_at, tz=None, ffwd=<class 'celery.utils.time.ffwd'>)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.schedules.html#celery.schedules.crontab.remaining_delta
remaining_estimate	A			celery.schedules Functions							<section class="prog__container"><pre><code>remaining_estimate(last_run_at, ffwd=<class 'celery.utils.time.ffwd'>)</code></pre><p>Estimate of next run time.</p><p>Returns when the periodic task should run next as atimedelta.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.schedules.html#celery.schedules.crontab.remaining_estimate
crontab_parser.parse	A			celery.schedules Functions							<section class="prog__container"><pre><code>crontab_parser.parse(spec)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.schedules.html#celery.schedules.crontab_parser.parse
parse	R	crontab_parser.parse										
is_due	A			celery.schedules Functions							<section class="prog__container"><pre><code>is_due(last_run_at)</code></pre><p>Return tuple of (is_due, next_time_to_run).</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.schedules.html#celery.schedules.solar.is_due
remaining_estimate	A			celery.schedules Functions							<section class="prog__container"><pre><code>remaining_estimate(last_run_at)when the periodic task should</code></pre><p>Return estimate of next time to run.</p><span class="prog__sub">Returns</span><p>when the periodic task shouldrun next, or if it shouldn’t run today (e.g., the sun doesnot rise today), returns the time when the next checkshould take place.</p><span class="prog__sub">Return type</span><p>timedelta</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.schedules.html#celery.schedules.solar.remaining_estimate
read_configuration	A			celery.loaders.default Functions							<section class="prog__container"><pre><code>read_configuration(fail_silently=True)</code></pre><p>Read configuration from celeryconfig.py.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.default.html#celery.loaders.default.Loader.read_configuration
setup_settings	A			celery.loaders.default Functions							<section class="prog__container"><pre><code>setup_settings(settingsdict)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.default.html#celery.loaders.default.Loader.setup_settings
autodiscover_tasks	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>autodiscover_tasks(packages, related_name=u'tasks')</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.autodiscover_tasks
cmdline_config_parser	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>cmdline_config_parser(args, namespace=u'celery', re_type=<_sre.SRE_Pattern object>, extra_types={u'json': <function loads>}, override_types={u'dict': u'json', u'list': u'json', u'tuple': u'json'})</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.cmdline_config_parser
config_from_object	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>config_from_object(obj, silent=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.config_from_object
find_module	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>find_module(module)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.find_module
import_default_modules	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>import_default_modules()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.import_default_modules
import_from_cwd	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>import_from_cwd(module, imp=None, package=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.import_from_cwd
import_module	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>import_module(module, package=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.import_module
import_task_module	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>import_task_module(module)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.import_task_module
init_worker	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>init_worker()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.init_worker
init_worker_process	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>init_worker_process()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.init_worker_process
now	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>now(utc=True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.now
on_process_cleanup	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>on_process_cleanup()</code></pre><p>Called after a task is executed.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.on_process_cleanup
on_task_init	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>on_task_init(task_id, task)</code></pre><p>Called before a task is executed.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.on_task_init
on_worker_init	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>on_worker_init()</code></pre><p>Called when the worker (celery worker) starts.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.on_worker_init
on_worker_process_init	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>on_worker_process_init()</code></pre><p>Called when a child process starts.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.on_worker_process_init
on_worker_shutdown	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>on_worker_shutdown()</code></pre><p>Called when the worker (celery worker) shuts down.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.on_worker_shutdown
read_configuration	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>read_configuration(env=u'CELERY_CONFIG_MODULE')</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.read_configuration
shutdown_worker	A			celery.loaders.base Functions							<section class="prog__container"><pre><code>shutdown_worker()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.loaders.base.html#celery.loaders.base.BaseLoader.shutdown_worker
close	A			celery.events Functions							<section class="prog__container"><pre><code>close()</code></pre><p>Close the event dispatcher.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventDispatcher.close
disable	A			celery.events Functions							<section class="prog__container"><pre><code>disable()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventDispatcher.disable
enable	A			celery.events Functions							<section class="prog__container"><pre><code>enable()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventDispatcher.enable
extend_buffer	A			celery.events Functions							<section class="prog__container"><pre><code>extend_buffer(other)</code></pre><p>Copy the outbound buffer of another instance.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventDispatcher.extend_buffer
flush	A			celery.events Functions							<section class="prog__container"><pre><code>flush(errors=True, groups=True)</code></pre><p>Flush the outbound buffer.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventDispatcher.flush
publish	A			celery.events Functions							<section class="prog__container"><pre><code>publish(type, fields, producer, blind=False, Event=<function Event>, **kwargs)</code></pre><p>Publish event using custom Producer.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>type (str) – Event type name, with group separated by dash (-).</li><li>fields: Dictionary of event fields, must be json serializable.</li><li>producer (kombu.Producer) – Producer instance to use:</li><li>only the publish method will be called.</li><li>retry (bool) – Retry in the event of connection failure.</li><li>retry_policy (Mapping) – Map of custom retry policy options.</li><li>See ensure().</li><li>blind (bool) – Don’t set logical clock value (also don’t forward</li><li>the internal logical clock).</li><li>Event (Callable) – Event type used to create event.</li><li>Defaults to Event().</li><li>utcoffset (Callable) – Function returning the current</li><li>utc offset in hours.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventDispatcher.publish
send	A			celery.events Functions							<section class="prog__container"><pre><code>send(type, blind=False, utcoffset=<function utcoffset>, retry=False, retry_policy=None, Event=<function Event>, **fields)</code></pre><p>Send event.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>type (str) – Event type name, with group separated by dash (-).</li><li>retry (bool) – Retry in the event of connection failure.</li><li>retry_policy (Mapping) – Map of custom retry policy options.</li><li>See ensure().</li><li>blind (bool) – Don’t set logical clock value (also don’t forward</li><li>the internal logical clock).</li><li>Event (Callable) – Event type used to create event,</li><li>defaults to Event().</li><li>utcoffset (Callable) – unction returning the current utc offset</li><li>in hours.</li><li>**fields (Any) – Event fields – must be json serializable.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventDispatcher.send
capture	A			celery.events Functions							<section class="prog__container"><pre><code>capture(limit=None, timeout=None, wakeup=True)</code></pre><p>Open up a consumer capturing events.</p><p>This has to run in the main process, and it will never stopunless EventDispatcher.should_stop is set to True, orforced via KeyboardInterrupt or SystemExit.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventReceiver.capture
event_from_message	A			celery.events Functions							<section class="prog__container"><pre><code>event_from_message(body, localize=True, now=<built-in function time>, tzfields=<operator.itemgetter object>, adjust_timestamp=<function adjust_timestamp>, CLIENT_CLOCK_SKEW=-1)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventReceiver.event_from_message
get_consumers	A			celery.events Functions							<section class="prog__container"><pre><code>get_consumers(Consumer, channel)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventReceiver.get_consumers
itercapture	A			celery.events Functions							<section class="prog__container"><pre><code>itercapture(limit=None, timeout=None, wakeup=True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventReceiver.itercapture
on_consume_ready	A			celery.events Functions							<section class="prog__container"><pre><code>on_consume_ready(connection, channel, consumers, wakeup=True, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventReceiver.on_consume_ready
process	A			celery.events Functions							<section class="prog__container"><pre><code>process(type, event)</code></pre><p>Process event by dispatching to configured handler.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventReceiver.process
wakeup_workers	A			celery.events Functions							<section class="prog__container"><pre><code>wakeup_workers(channel=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.html#celery.events.EventReceiver.wakeup_workers
capture	A			celery.events.receiver Functions							<section class="prog__container"><pre><code>capture(limit=None, timeout=None, wakeup=True)</code></pre><p>Open up a consumer capturing events.</p><p>This has to run in the main process, and it will never stopunless EventDispatcher.should_stop is set to True, orforced via KeyboardInterrupt or SystemExit.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.receiver.html#celery.events.receiver.EventReceiver.capture
event_from_message	A			celery.events.receiver Functions							<section class="prog__container"><pre><code>event_from_message(body, localize=True, now=<built-in function time>, tzfields=<operator.itemgetter object>, adjust_timestamp=<function adjust_timestamp>, CLIENT_CLOCK_SKEW=-1)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.receiver.html#celery.events.receiver.EventReceiver.event_from_message
get_consumers	A			celery.events.receiver Functions							<section class="prog__container"><pre><code>get_consumers(Consumer, channel)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.receiver.html#celery.events.receiver.EventReceiver.get_consumers
itercapture	A			celery.events.receiver Functions							<section class="prog__container"><pre><code>itercapture(limit=None, timeout=None, wakeup=True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.receiver.html#celery.events.receiver.EventReceiver.itercapture
on_consume_ready	A			celery.events.receiver Functions							<section class="prog__container"><pre><code>on_consume_ready(connection, channel, consumers, wakeup=True, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.receiver.html#celery.events.receiver.EventReceiver.on_consume_ready
process	A			celery.events.receiver Functions							<section class="prog__container"><pre><code>process(type, event)</code></pre><p>Process event by dispatching to configured handler.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.receiver.html#celery.events.receiver.EventReceiver.process
wakeup_workers	A			celery.events.receiver Functions							<section class="prog__container"><pre><code>wakeup_workers(channel=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.receiver.html#celery.events.receiver.EventReceiver.wakeup_workers
close	A			celery.events.state Functions							<section class="prog__container"><pre><code>close()</code></pre><p>Close the event dispatcher.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.dispatcher.EventDispatcher.close
disable	A			celery.events.state Functions							<section class="prog__container"><pre><code>disable()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.dispatcher.EventDispatcher.disable
enable	A			celery.events.state Functions							<section class="prog__container"><pre><code>enable()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.dispatcher.EventDispatcher.enable
extend_buffer	A			celery.events.state Functions							<section class="prog__container"><pre><code>extend_buffer(other)</code></pre><p>Copy the outbound buffer of another instance.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.dispatcher.EventDispatcher.extend_buffer
flush	A			celery.events.state Functions							<section class="prog__container"><pre><code>flush(errors=True, groups=True)</code></pre><p>Flush the outbound buffer.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.dispatcher.EventDispatcher.flush
publish	A			celery.events.state Functions							<section class="prog__container"><pre><code>publish(type, fields, producer, blind=False, Event=<function Event>, **kwargs)</code></pre><p>Publish event using custom Producer.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>type (str) – Event type name, with group separated by dash (-).</li><li>fields: Dictionary of event fields, must be json serializable.</li><li>producer (kombu.Producer) – Producer instance to use:</li><li>only the publish method will be called.</li><li>retry (bool) – Retry in the event of connection failure.</li><li>retry_policy (Mapping) – Map of custom retry policy options.</li><li>See ensure().</li><li>blind (bool) – Don’t set logical clock value (also don’t forward</li><li>the internal logical clock).</li><li>Event (Callable) – Event type used to create event.</li><li>Defaults to Event().</li><li>utcoffset (Callable) – Function returning the current</li><li>utc offset in hours.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.dispatcher.EventDispatcher.publish
send	A			celery.events.state Functions							<section class="prog__container"><pre><code>send(type, blind=False, utcoffset=<function utcoffset>, retry=False, retry_policy=None, Event=<function Event>, **fields)</code></pre><p>Send event.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>type (str) – Event type name, with group separated by dash (-).</li><li>retry (bool) – Retry in the event of connection failure.</li><li>retry_policy (Mapping) – Map of custom retry policy options.</li><li>See ensure().</li><li>blind (bool) – Don’t set logical clock value (also don’t forward</li><li>the internal logical clock).</li><li>Event (Callable) – Event type used to create event,</li><li>defaults to Event().</li><li>utcoffset (Callable) – unction returning the current utc offset</li><li>in hours.</li><li>**fields (Any) – Event fields – must be json serializable.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.dispatcher.EventDispatcher.send
update	A			celery.events.state Functions							<section class="prog__container"><pre><code>update(f, **kw)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.Worker.update
as_dict	A			celery.events.state Functions							<section class="prog__container"><pre><code>as_dict()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.Task.as_dict
event	A			celery.events.state Functions							<section class="prog__container"><pre><code>event(type_, timestamp=None, local_received=None, fields=None, precedence=<function precedence>, items=<function items>, setattr=<built-in function setattr>, task_event_to_state=<built-in method get of dict object>, RETRY=u'RETRY')</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.Task.event
info	A			celery.events.state Functions							<section class="prog__container"><pre><code>info(fields=None, extra=[])</code></pre><p>Information about this task suitable for on-screen display.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.Task.info
State.alive_workers	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.alive_workers()</code></pre><p>Return a list of (seemingly) alive workers.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.alive_workers
alive workers	R	State.alive_workers										
State.clear	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.clear(ready=True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.clear
clear	R	State.clear										
State.clear_tasks	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.clear_tasks(ready=True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.clear_tasks
clear tasks	R	State.clear_tasks										
State.event	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.event(event)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.event
event	R	State.event										
State.freeze_while	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.freeze_while(fun, *args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.freeze_while
freeze while	R	State.freeze_while										
State.get_or_create_task	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.get_or_create_task(uuid)</code></pre><p>Get or create task by uuid.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.get_or_create_task
get or create task	R	State.get_or_create_task										
State.get_or_create_worker	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.get_or_create_worker(hostname, **kwargs)</code></pre><p>Get or create worker by hostname.</p><span class="prog__sub">Returns</span><p>of (worker, was_created) pairs.</p><span class="prog__sub">Return type</span><p>Tuple</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.get_or_create_worker
get or create worker	R	State.get_or_create_worker										
State.itertasks	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.itertasks(limit=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.itertasks
itertasks	R	State.itertasks										
State.rebuild_taskheap	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.rebuild_taskheap(timetuple=<class 'kombu.clocks.timetuple'>)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.rebuild_taskheap
rebuild taskheap	R	State.rebuild_taskheap										
State.task_event	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.task_event(type_, fields)</code></pre><p>Deprecated, use event().</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.task_event
task event	R	State.task_event										
State.task_types	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.task_types()</code></pre><p>Return a list of all seen task types.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.task_types
task types	R	State.task_types										
State.tasks_by_time	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.tasks_by_time(limit=None, reverse=True)</code></pre><p>Generator yielding tasks ordered by time.</p><span class="prog__sub">Yields</span><p>Tuples of (uuid, Task).</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.tasks_by_time
tasks by time	R	State.tasks_by_time										
State.tasks_by_timestamp	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.tasks_by_timestamp(limit=None, reverse=True)</code></pre><p>Generator yielding tasks ordered by time.</p><span class="prog__sub">Yields</span><p>Tuples of (uuid, Task).</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.tasks_by_timestamp
tasks by timestamp	R	State.tasks_by_timestamp										
State.worker_event	A			celery.events.state Functions							<section class="prog__container"><pre><code>State.worker_event(type_, fields)</code></pre><p>Deprecated, use event().</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.events.state.html#celery.events.state.State.worker_event
worker event	R	State.worker_event										
is_due	A			celery.beat Functions							<section class="prog__container"><pre><code>is_due()</code></pre><p>See is_due().</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.ScheduleEntry.is_due
next	A			celery.beat Functions							<section class="prog__container"><pre><code>next(last_run_at=None)</code></pre><p>Return new instance, with date and count fields updated.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.ScheduleEntry.next
update	A			celery.beat Functions							<section class="prog__container"><pre><code>update(other)Will only update “editable” fields:</code></pre><p>Update values from another entry.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.ScheduleEntry.update
add	A			celery.beat Functions							<section class="prog__container"><pre><code>add(**kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.add
adjust	A			celery.beat Functions							<section class="prog__container"><pre><code>adjust(n, drift=-0.01)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.adjust
apply_async	A			celery.beat Functions							<section class="prog__container"><pre><code>apply_async(entry, producer=None, advance=True, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.apply_async
apply_entry	A			celery.beat Functions							<section class="prog__container"><pre><code>apply_entry(entry, producer=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.apply_entry
close	A			celery.beat Functions							<section class="prog__container"><pre><code>close()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.close
get_schedule	A			celery.beat Functions							<section class="prog__container"><pre><code>get_schedule()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.get_schedule
install_default_entries	A			celery.beat Functions							<section class="prog__container"><pre><code>install_default_entries(data)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.install_default_entries
is_due	A			celery.beat Functions							<section class="prog__container"><pre><code>is_due(entry)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.is_due
merge_inplace	A			celery.beat Functions							<section class="prog__container"><pre><code>merge_inplace(b)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.merge_inplace
reserve	A			celery.beat Functions							<section class="prog__container"><pre><code>reserve(entry)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.reserve
send_task	A			celery.beat Functions							<section class="prog__container"><pre><code>send_task(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.send_task
set_schedule	A			celery.beat Functions							<section class="prog__container"><pre><code>set_schedule(schedule)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.set_schedule
setup_schedule	A			celery.beat Functions							<section class="prog__container"><pre><code>setup_schedule()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.setup_schedule
should_sync	A			celery.beat Functions							<section class="prog__container"><pre><code>should_sync()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.should_sync
sync	A			celery.beat Functions							<section class="prog__container"><pre><code>sync()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.sync
tick	A			celery.beat Functions							<section class="prog__container"><pre><code>tick(event_t=<class 'celery.beat.event_t'>, min=<built-in function min>, heappop=<built-in function heappop>, heappush=<built-in function heappush>, heapify=<built-in function heapify>, mktime=<built-in function mktime>)</code></pre><p>Run a tick - one iteration of the scheduler.</p><p>Executes one due task per call.</p><span class="prog__sub">Returns</span><p>preferred delay in seconds for next call.</p><span class="prog__sub">Return type</span><p>float</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.tick
update_from_dict	A			celery.beat Functions							<section class="prog__container"><pre><code>update_from_dict(dict_)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Scheduler.update_from_dict
close	A			celery.beat Functions							<section class="prog__container"><pre><code>close()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.PersistentScheduler.close
get_schedule	A			celery.beat Functions							<section class="prog__container"><pre><code>get_schedule()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.PersistentScheduler.get_schedule
set_schedule	A			celery.beat Functions							<section class="prog__container"><pre><code>set_schedule(schedule)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.PersistentScheduler.set_schedule
setup_schedule	A			celery.beat Functions							<section class="prog__container"><pre><code>setup_schedule()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.PersistentScheduler.setup_schedule
sync	A			celery.beat Functions							<section class="prog__container"><pre><code>sync()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.PersistentScheduler.sync
get_scheduler	A			celery.beat Functions							<section class="prog__container"><pre><code>get_scheduler(lazy=False, extension_namespace=u'celery.beat_schedulers')</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Service.get_scheduler
start	A			celery.beat Functions							<section class="prog__container"><pre><code>start(embedded_process=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Service.start
stop	A			celery.beat Functions							<section class="prog__container"><pre><code>stop(wait=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Service.stop
sync	A			celery.beat Functions							<section class="prog__container"><pre><code>sync()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.beat.html#celery.beat.Service.sync
emit_banner	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>emit_banner()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.emit_banner
extra_info	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>extra_info()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.extra_info
install_platform_tweaks	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>install_platform_tweaks(worker)</code></pre><p>Install platform specific tweaks and workarounds.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.install_platform_tweaks
macOS_proxy_detection_workaround	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>macOS_proxy_detection_workaround()</code></pre><p>See https://github.com/celery/celery/issues#issue/161.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.macOS_proxy_detection_workaround
on_after_init	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>on_after_init(purge=False, no_color=None, redirect_stdouts=None, redirect_stdouts_level=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.on_after_init
on_before_init	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>on_before_init(quiet=False, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.on_before_init
on_consumer_ready	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>on_consumer_ready(consumer)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.on_consumer_ready
on_init_blueprint	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>on_init_blueprint()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.on_init_blueprint
on_start	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>on_start()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.on_start
purge_messages	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>purge_messages()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.purge_messages
set_process_status	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>set_process_status(info)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.set_process_status
setup_logging	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>setup_logging(colorize=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.setup_logging
startup_info	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>startup_info(artlines=True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.startup_info
tasklist	A			celery.apps.worker Functions							<section class="prog__container"><pre><code>tasklist(include_builtins=True, sep=u'\n', int_=u'celery.')</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.worker.html#celery.apps.worker.Worker.tasklist
Beat.banner	A			celery.apps.beat Functions							<section class="prog__container"><pre><code>Beat.banner(service)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.beat.html#celery.apps.beat.Beat.banner
banner	R	Beat.banner										
Beat.init_loader	A			celery.apps.beat Functions							<section class="prog__container"><pre><code>Beat.init_loader()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.beat.html#celery.apps.beat.Beat.init_loader
init loader	R	Beat.init_loader										
Beat.install_sync_handler	A			celery.apps.beat Functions							<section class="prog__container"><pre><code>Beat.install_sync_handler(service)</code></pre><p>Install a SIGTERM + SIGINT handler saving the schedule.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.beat.html#celery.apps.beat.Beat.install_sync_handler
install sync handler	R	Beat.install_sync_handler										
Beat.run	A			celery.apps.beat Functions							<section class="prog__container"><pre><code>Beat.run()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.beat.html#celery.apps.beat.Beat.run
run	R	Beat.run										
Beat.set_process_title	A			celery.apps.beat Functions							<section class="prog__container"><pre><code>Beat.set_process_title()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.beat.html#celery.apps.beat.Beat.set_process_title
set process title	R	Beat.set_process_title										
Beat.setup_logging	A			celery.apps.beat Functions							<section class="prog__container"><pre><code>Beat.setup_logging(colorize=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.beat.html#celery.apps.beat.Beat.setup_logging
setup logging	R	Beat.setup_logging										
Beat.start_scheduler	A			celery.apps.beat Functions							<section class="prog__container"><pre><code>Beat.start_scheduler()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.beat.html#celery.apps.beat.Beat.start_scheduler
start scheduler	R	Beat.start_scheduler										
Beat.startup_info	A			celery.apps.beat Functions							<section class="prog__container"><pre><code>Beat.startup_info(service)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.beat.html#celery.apps.beat.Beat.startup_info
startup info	R	Beat.startup_info										
find	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>find(name)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.find
getpids	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>getpids(on_down=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.getpids
kill	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>kill()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.kill
restart	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>restart(sig=15)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.restart
send_all	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>send_all(sig)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.send_all
shutdown_nodes	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>shutdown_nodes(nodes, sig=15, retry=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.shutdown_nodes
start	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>start()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.start
start_node	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>start_node(node)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.start_node
stop	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>stop(retry=None, callback=None, sig=15)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.stop
stopwait	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>stopwait(retry=2, callback=None, sig=15)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Cluster.stopwait
alive	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>alive()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Node.alive
from_kwargs	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>classmethod from_kwargs(name, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Node.from_kwargs
getopt	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>getopt(*alt)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Node.getopt
handle_process_exit	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>handle_process_exit(retcode, on_signalled=None, on_failure=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Node.handle_process_exit
prepare_argv	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>prepare_argv(argv, path)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Node.prepare_argv
send	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>send(sig, on_error=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Node.send
start	A			celery.apps.multi Functions							<section class="prog__container"><pre><code>start(env=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.apps.multi.html#celery.apps.multi.Node.start
WorkController.info	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.info()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.info
info	R	WorkController.info										
WorkController.on_after_init	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.on_after_init(**kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.on_after_init
on after init	R	WorkController.on_after_init										
WorkController.on_before_init	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.on_before_init(**kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.on_before_init
on before init	R	WorkController.on_before_init										
WorkController.on_close	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.on_close()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.on_close
on close	R	WorkController.on_close										
WorkController.on_consumer_ready	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.on_consumer_ready(consumer)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.on_consumer_ready
on consumer ready	R	WorkController.on_consumer_ready										
WorkController.on_init_blueprint	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.on_init_blueprint()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.on_init_blueprint
on init blueprint	R	WorkController.on_init_blueprint										
WorkController.on_start	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.on_start()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.on_start
on start	R	WorkController.on_start										
WorkController.on_stopped	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.on_stopped()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.on_stopped
on stopped	R	WorkController.on_stopped										
WorkController.prepare_args	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.prepare_args(**kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.prepare_args
prepare args	R	WorkController.prepare_args										
WorkController.register_with_event_loop	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.register_with_event_loop(hub)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.register_with_event_loop
register with event loop	R	WorkController.register_with_event_loop										
WorkController.reload	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.reload(modules=None, reload=False, reloader=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.reload
reload	R	WorkController.reload										
WorkController.rusage	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.rusage()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.rusage
rusage	R	WorkController.rusage										
WorkController.setup_defaults	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.setup_defaults(concurrency=None, loglevel=u'WARN', logfile=None, task_events=None, pool=None, consumer_cls=None, timer_cls=None, timer_precision=None, autoscaler_cls=None, pool_putlocks=None, pool_restarts=None, optimization=None, O=None, statedb=None, time_limit=None, soft_time_limit=None, scheduler=None, pool_cls=None, state_db=None, task_time_limit=None, task_soft_time_limit=None, scheduler_cls=None, schedule_filename=None, max_tasks_per_child=None, prefetch_multiplier=None, disable_rate_limits=None, worker_lost_wait=None, max_memory_per_child=None, **_kw)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.setup_defaults
setup defaults	R	WorkController.setup_defaults										
WorkController.setup_includes	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.setup_includes(includes)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.setup_includes
setup includes	R	WorkController.setup_includes										
WorkController.setup_instance	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.setup_instance(queues=None, ready_callback=None, pidfile=None, include=None, use_eventloop=None, exclude_queues=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.setup_instance
setup instance	R	WorkController.setup_instance										
WorkController.setup_queues	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.setup_queues(include, exclude=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.setup_queues
setup queues	R	WorkController.setup_queues										
WorkController.should_use_eventloop	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.should_use_eventloop()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.should_use_eventloop
should use eventloop	R	WorkController.should_use_eventloop										
WorkController.signal_consumer_close	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.signal_consumer_close()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.signal_consumer_close
signal consumer close	R	WorkController.signal_consumer_close										
WorkController.start	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.start()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.start
start	R	WorkController.start										
WorkController.stats	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.stats()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.stats
stats	R	WorkController.stats										
WorkController.stop	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.stop(in_sighandler=False, exitcode=None)</code></pre><p>Graceful shutdown of the worker server.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.stop
stop	R	WorkController.stop										
WorkController.terminate	A			celery.worker Functions							<section class="prog__container"><pre><code>WorkController.terminate(in_sighandler=False)</code></pre><p>Not so graceful shutdown of the worker server.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.html#celery.worker.WorkController.terminate
terminate	R	WorkController.terminate										
acknowledge	A			celery.worker.request Functions							<section class="prog__container"><pre><code>acknowledge()</code></pre><p>Acknowledge task.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.acknowledge
execute	A			celery.worker.request Functions							<section class="prog__container"><pre><code>execute(loglevel=None, logfile=None)</code></pre><p>Execute the task in a trace_task().</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>loglevel (int) – The loglevel used by the task.</li><li>logfile (str) – The logfile used by the task.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.execute
execute_using_pool	A			celery.worker.request Functions							<section class="prog__container"><pre><code>execute_using_pool(pool, **kwargs)</code></pre><p>Used by the worker to send this task to the pool.</p><span class="prog__sub">Parameters</span><p>pool (TaskPool) – The execution poolused to execute this request.</p><span class="prog__sub">Raises</span><p>celery.exceptions.TaskRevokedError – if the task was revoked.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.execute_using_pool
humaninfo	A			celery.worker.request Functions							<section class="prog__container"><pre><code>humaninfo()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.humaninfo
info	A			celery.worker.request Functions							<section class="prog__container"><pre><code>info(safe=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.info
maybe_expire	A			celery.worker.request Functions							<section class="prog__container"><pre><code>maybe_expire()</code></pre><p>If expired, mark the task as revoked.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.maybe_expire
on_accepted	A			celery.worker.request Functions							<section class="prog__container"><pre><code>on_accepted(pid, time_accepted)</code></pre><p>Handler called when task is accepted by worker pool.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.on_accepted
on_failure	A			celery.worker.request Functions							<section class="prog__container"><pre><code>on_failure(exc_info, send_failed_event=True, return_ok=False)</code></pre><p>Handler called if the task raised an exception.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.on_failure
on_retry	A			celery.worker.request Functions							<section class="prog__container"><pre><code>on_retry(exc_info)</code></pre><p>Handler called if the task should be retried.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.on_retry
on_success	A			celery.worker.request Functions							<section class="prog__container"><pre><code>on_success(failed__retval__runtime, **kwargs)</code></pre><p>Handler called if the task was successfully processed.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.on_success
on_timeout	A			celery.worker.request Functions							<section class="prog__container"><pre><code>on_timeout(soft, timeout)</code></pre><p>Handler called if the task times out.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.on_timeout
reject	A			celery.worker.request Functions							<section class="prog__container"><pre><code>reject(requeue=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.reject
revoked	A			celery.worker.request Functions							<section class="prog__container"><pre><code>revoked()</code></pre><p>If revoked, skip task and mark state.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.revoked
send_event	A			celery.worker.request Functions							<section class="prog__container"><pre><code>send_event(type, **fields)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.send_event
terminate	A			celery.worker.request Functions							<section class="prog__container"><pre><code>terminate(pool, signal=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.request.html#celery.worker.request.Request.terminate
close	A			celery.worker.state Functions							<section class="prog__container"><pre><code>close()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.state.html#celery.worker.state.Persistent.close
compress	A			celery.worker.state Functions							<section class="prog__container"><pre><code>compress()</code></pre><p>compress(string[, level]) – Returned compressed string.</p><p>Optional arg level is the compression level, in 0-9.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.state.html#celery.worker.state.Persistent.compress
decompress	A			celery.worker.state Functions							<section class="prog__container"><pre><code>decompress()</code></pre><p>decompress(string[, wbits[, bufsize]]) – Return decompressed string.</p><p>Optional arg wbits is the window buffer size.  Optional arg bufsize isthe initial output buffer size.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.state.html#celery.worker.state.Persistent.decompress
merge	A			celery.worker.state Functions							<section class="prog__container"><pre><code>merge()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.state.html#celery.worker.state.Persistent.merge
open	A			celery.worker.state Functions							<section class="prog__container"><pre><code>open()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.state.html#celery.worker.state.Persistent.open
save	A			celery.worker.state Functions							<section class="prog__container"><pre><code>save()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.state.html#celery.worker.state.Persistent.save
sync	A			celery.worker.state Functions							<section class="prog__container"><pre><code>sync()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.state.html#celery.worker.state.Persistent.sync
Consumer.add_task_queue	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.add_task_queue(queue, exchange=None, exchange_type=None, routing_key=None, **options)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.add_task_queue
add task queue	R	Consumer.add_task_queue										
Consumer.apply_eta_task	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.apply_eta_task(task)</code></pre><p>Method called by the timer to apply a task with an ETA/countdown.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.apply_eta_task
apply eta task	R	Consumer.apply_eta_task										
Consumer.bucket_for_task	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.bucket_for_task(type)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.bucket_for_task
bucket for task	R	Consumer.bucket_for_task										
Consumer.call_soon	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.call_soon(p, *args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.call_soon
call soon	R	Consumer.call_soon										
Consumer.cancel_task_queue	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.cancel_task_queue(queue)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.cancel_task_queue
cancel task queue	R	Consumer.cancel_task_queue										
Consumer.connect	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.connect()</code></pre><p>Establish the broker connection used for consuming tasks.</p><p>Retries establishing the connection if thebroker_connection_retry setting is enabled</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.connect
connect	R	Consumer.connect										
Consumer.connection_for_read	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.connection_for_read(heartbeat=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.connection_for_read
connection for read	R	Consumer.connection_for_read										
Consumer.connection_for_write	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.connection_for_write(heartbeat=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.connection_for_write
connection for write	R	Consumer.connection_for_write										
Consumer.create_task_handler	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.create_task_handler(promise=<class 'vine.promises.promise'>)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.create_task_handler
create task handler	R	Consumer.create_task_handler										
Consumer.ensure_connected	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.ensure_connected(conn)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.ensure_connected
ensure connected	R	Consumer.ensure_connected										
Consumer.loop_args	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.loop_args()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.loop_args
loop args	R	Consumer.loop_args										
Consumer.on_close	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_close()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.on_close
on close	R	Consumer.on_close										
Consumer.on_connection_error_after_connected	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_connection_error_after_connected(exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.on_connection_error_after_connected
on connection error after connected	R	Consumer.on_connection_error_after_connected										
Consumer.on_connection_error_before_connected	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_connection_error_before_connected(exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.on_connection_error_before_connected
on connection error before connected	R	Consumer.on_connection_error_before_connected										
Consumer.on_decode_error	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_decode_error(message, exc)</code></pre><p>Callback called if an error occurs while decoding a message.</p><p>Simply logs the error and acknowledges the message so itdoesn’t enter a loop.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>message (kombu.Message) – The message received.</li><li>exc (Exception) – The exception being handled.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.on_decode_error
on decode error	R	Consumer.on_decode_error										
Consumer.on_invalid_task	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_invalid_task(body, message, exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.on_invalid_task
on invalid task	R	Consumer.on_invalid_task										
Consumer.on_ready	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_ready()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.on_ready
on ready	R	Consumer.on_ready										
Consumer.on_send_event_buffered	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_send_event_buffered()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.on_send_event_buffered
on send event buffered	R	Consumer.on_send_event_buffered										
Consumer.on_unknown_message	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_unknown_message(body, message)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.on_unknown_message
on unknown message	R	Consumer.on_unknown_message										
Consumer.on_unknown_task	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_unknown_task(body, message, exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.on_unknown_task
on unknown task	R	Consumer.on_unknown_task										
Consumer.perform_pending_operations	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.perform_pending_operations()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.perform_pending_operations
perform pending operations	R	Consumer.perform_pending_operations										
Consumer.register_with_event_loop	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.register_with_event_loop(hub)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.register_with_event_loop
register with event loop	R	Consumer.register_with_event_loop										
Consumer.reset_rate_limits	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.reset_rate_limits()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.reset_rate_limits
reset rate limits	R	Consumer.reset_rate_limits										
Consumer.shutdown	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.shutdown()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.shutdown
shutdown	R	Consumer.shutdown										
Consumer.start	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.start()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.start
start	R	Consumer.start										
Consumer.stop	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.stop()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.stop
stop	R	Consumer.stop										
Consumer.update_strategies	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>Consumer.update_strategies()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Consumer.update_strategies
update strategies	R	Consumer.update_strategies										
create	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>create(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Agent.create
info	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>info(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Connection.info
shutdown	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>shutdown(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Connection.shutdown
start	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Connection.start
include_if	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>include_if(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Control.include_if
shutdown	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>shutdown(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Events.shutdown
start	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Events.start
stop	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>stop(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Events.stop
call_task	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>call_task(task)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.call_task
compatible_transport	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>compatible_transport(app)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.compatible_transport
election	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>election(id, topic, action=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.election
get_consumers	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>get_consumers(channel)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.get_consumers
on_elect	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>on_elect(event)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.on_elect
on_elect_ack	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>on_elect_ack(event)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.on_elect_ack
on_message	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>on_message(prepare, message)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.on_message
on_node_join	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>on_node_join(worker)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.on_node_join
on_node_leave	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>on_node_leave(worker)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.on_node_leave
on_node_lost	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>on_node_lost(worker)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.on_node_lost
periodic	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>periodic()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.periodic
register_timer	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>register_timer()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.register_timer
start	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Gossip.start
shutdown	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>shutdown(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Heart.shutdown
start	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Heart.start
stop	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>stop(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Heart.stop
compatible_transport	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>compatible_transport(app)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Mingle.compatible_transport
on_clock_event	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>on_clock_event(c, clock)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Mingle.on_clock_event
on_node_reply	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>on_node_reply(c, nodename, reply)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Mingle.on_node_reply
on_revoked_received	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>on_revoked_received(c, revoked)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Mingle.on_revoked_received
send_hello	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>send_hello(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Mingle.send_hello
start	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Mingle.start
sync	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>sync(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Mingle.sync
sync_with_node	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>sync_with_node(c, clock=None, revoked=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Mingle.sync_with_node
info	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>info(c)</code></pre><p>Return task consumer info.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Tasks.info
shutdown	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>shutdown(c)</code></pre><p>Shutdown task consumer.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Tasks.shutdown
start	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>start(c)</code></pre><p>Start task consumer.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Tasks.start
stop	A			celery.worker.consumer Functions							<section class="prog__container"><pre><code>stop(c)</code></pre><p>Stop task consumer.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.html#celery.worker.consumer.Tasks.stop
create	A			celery.worker.consumer.agent Functions							<section class="prog__container"><pre><code>create(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.agent.html#celery.worker.consumer.agent.Agent.create
info	A			celery.worker.consumer.connection Functions							<section class="prog__container"><pre><code>info(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.connection.html#celery.worker.consumer.connection.Connection.info
shutdown	A			celery.worker.consumer.connection Functions							<section class="prog__container"><pre><code>shutdown(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.connection.html#celery.worker.consumer.connection.Connection.shutdown
start	A			celery.worker.consumer.connection Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.connection.html#celery.worker.consumer.connection.Connection.start
Consumer.add_task_queue	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.add_task_queue(queue, exchange=None, exchange_type=None, routing_key=None, **options)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.add_task_queue
add task queue	R	Consumer.add_task_queue										
Consumer.apply_eta_task	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.apply_eta_task(task)</code></pre><p>Method called by the timer to apply a task with an ETA/countdown.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.apply_eta_task
apply eta task	R	Consumer.apply_eta_task										
Consumer.bucket_for_task	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.bucket_for_task(type)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.bucket_for_task
bucket for task	R	Consumer.bucket_for_task										
Consumer.call_soon	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.call_soon(p, *args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.call_soon
call soon	R	Consumer.call_soon										
Consumer.cancel_task_queue	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.cancel_task_queue(queue)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.cancel_task_queue
cancel task queue	R	Consumer.cancel_task_queue										
Consumer.connect	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.connect()</code></pre><p>Establish the broker connection used for consuming tasks.</p><p>Retries establishing the connection if thebroker_connection_retry setting is enabled</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.connect
connect	R	Consumer.connect										
Consumer.connection_for_read	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.connection_for_read(heartbeat=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.connection_for_read
connection for read	R	Consumer.connection_for_read										
Consumer.connection_for_write	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.connection_for_write(heartbeat=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.connection_for_write
connection for write	R	Consumer.connection_for_write										
Consumer.create_task_handler	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.create_task_handler(promise=<class 'vine.promises.promise'>)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.create_task_handler
create task handler	R	Consumer.create_task_handler										
Consumer.ensure_connected	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.ensure_connected(conn)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.ensure_connected
ensure connected	R	Consumer.ensure_connected										
Consumer.loop_args	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.loop_args()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.loop_args
loop args	R	Consumer.loop_args										
Consumer.on_close	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_close()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.on_close
on close	R	Consumer.on_close										
Consumer.on_connection_error_after_connected	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_connection_error_after_connected(exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.on_connection_error_after_connected
on connection error after connected	R	Consumer.on_connection_error_after_connected										
Consumer.on_connection_error_before_connected	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_connection_error_before_connected(exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.on_connection_error_before_connected
on connection error before connected	R	Consumer.on_connection_error_before_connected										
Consumer.on_decode_error	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_decode_error(message, exc)</code></pre><p>Callback called if an error occurs while decoding a message.</p><p>Simply logs the error and acknowledges the message so itdoesn’t enter a loop.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>message (kombu.Message) – The message received.</li><li>exc (Exception) – The exception being handled.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.on_decode_error
on decode error	R	Consumer.on_decode_error										
Consumer.on_invalid_task	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_invalid_task(body, message, exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.on_invalid_task
on invalid task	R	Consumer.on_invalid_task										
Consumer.on_ready	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_ready()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.on_ready
on ready	R	Consumer.on_ready										
Consumer.on_send_event_buffered	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_send_event_buffered()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.on_send_event_buffered
on send event buffered	R	Consumer.on_send_event_buffered										
Consumer.on_unknown_message	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_unknown_message(body, message)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.on_unknown_message
on unknown message	R	Consumer.on_unknown_message										
Consumer.on_unknown_task	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.on_unknown_task(body, message, exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.on_unknown_task
on unknown task	R	Consumer.on_unknown_task										
Consumer.perform_pending_operations	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.perform_pending_operations()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.perform_pending_operations
perform pending operations	R	Consumer.perform_pending_operations										
Consumer.register_with_event_loop	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.register_with_event_loop(hub)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.register_with_event_loop
register with event loop	R	Consumer.register_with_event_loop										
Consumer.reset_rate_limits	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.reset_rate_limits()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.reset_rate_limits
reset rate limits	R	Consumer.reset_rate_limits										
Consumer.shutdown	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.shutdown()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.shutdown
shutdown	R	Consumer.shutdown										
Consumer.start	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.start()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.start
start	R	Consumer.start										
Consumer.stop	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.stop()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.stop
stop	R	Consumer.stop										
Consumer.update_strategies	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>Consumer.update_strategies()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Consumer.update_strategies
update strategies	R	Consumer.update_strategies										
patch_all	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>patch_all(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Evloop.patch_all
start	A			celery.worker.consumer.consumer Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.consumer.html#celery.worker.consumer.consumer.Evloop.start
include_if	A			celery.worker.consumer.control Functions							<section class="prog__container"><pre><code>include_if(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.control.html#celery.worker.consumer.control.Control.include_if
shutdown	A			celery.worker.consumer.events Functions							<section class="prog__container"><pre><code>shutdown(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.events.html#celery.worker.consumer.events.Events.shutdown
start	A			celery.worker.consumer.events Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.events.html#celery.worker.consumer.events.Events.start
stop	A			celery.worker.consumer.events Functions							<section class="prog__container"><pre><code>stop(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.events.html#celery.worker.consumer.events.Events.stop
call_task	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>call_task(task)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.call_task
compatible_transport	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>compatible_transport(app)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.compatible_transport
election	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>election(id, topic, action=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.election
get_consumers	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>get_consumers(channel)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.get_consumers
on_elect	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>on_elect(event)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.on_elect
on_elect_ack	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>on_elect_ack(event)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.on_elect_ack
on_message	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>on_message(prepare, message)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.on_message
on_node_join	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>on_node_join(worker)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.on_node_join
on_node_leave	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>on_node_leave(worker)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.on_node_leave
on_node_lost	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>on_node_lost(worker)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.on_node_lost
periodic	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>periodic()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.periodic
register_timer	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>register_timer()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.register_timer
start	A			celery.worker.consumer.gossip Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.gossip.html#celery.worker.consumer.gossip.Gossip.start
shutdown	A			celery.worker.consumer.heart Functions							<section class="prog__container"><pre><code>shutdown(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.heart.html#celery.worker.consumer.heart.Heart.shutdown
start	A			celery.worker.consumer.heart Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.heart.html#celery.worker.consumer.heart.Heart.start
stop	A			celery.worker.consumer.heart Functions							<section class="prog__container"><pre><code>stop(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.heart.html#celery.worker.consumer.heart.Heart.stop
compatible_transport	A			celery.worker.consumer.mingle Functions							<section class="prog__container"><pre><code>compatible_transport(app)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.mingle.html#celery.worker.consumer.mingle.Mingle.compatible_transport
on_clock_event	A			celery.worker.consumer.mingle Functions							<section class="prog__container"><pre><code>on_clock_event(c, clock)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.mingle.html#celery.worker.consumer.mingle.Mingle.on_clock_event
on_node_reply	A			celery.worker.consumer.mingle Functions							<section class="prog__container"><pre><code>on_node_reply(c, nodename, reply)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.mingle.html#celery.worker.consumer.mingle.Mingle.on_node_reply
on_revoked_received	A			celery.worker.consumer.mingle Functions							<section class="prog__container"><pre><code>on_revoked_received(c, revoked)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.mingle.html#celery.worker.consumer.mingle.Mingle.on_revoked_received
send_hello	A			celery.worker.consumer.mingle Functions							<section class="prog__container"><pre><code>send_hello(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.mingle.html#celery.worker.consumer.mingle.Mingle.send_hello
start	A			celery.worker.consumer.mingle Functions							<section class="prog__container"><pre><code>start(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.mingle.html#celery.worker.consumer.mingle.Mingle.start
sync	A			celery.worker.consumer.mingle Functions							<section class="prog__container"><pre><code>sync(c)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.mingle.html#celery.worker.consumer.mingle.Mingle.sync
sync_with_node	A			celery.worker.consumer.mingle Functions							<section class="prog__container"><pre><code>sync_with_node(c, clock=None, revoked=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.mingle.html#celery.worker.consumer.mingle.Mingle.sync_with_node
info	A			celery.worker.consumer.tasks Functions							<section class="prog__container"><pre><code>info(c)</code></pre><p>Return task consumer info.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.tasks.html#celery.worker.consumer.tasks.Tasks.info
shutdown	A			celery.worker.consumer.tasks Functions							<section class="prog__container"><pre><code>shutdown(c)</code></pre><p>Shutdown task consumer.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.tasks.html#celery.worker.consumer.tasks.Tasks.shutdown
start	A			celery.worker.consumer.tasks Functions							<section class="prog__container"><pre><code>start(c)</code></pre><p>Start task consumer.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.tasks.html#celery.worker.consumer.tasks.Tasks.start
stop	A			celery.worker.consumer.tasks Functions							<section class="prog__container"><pre><code>stop(c)</code></pre><p>Stop task consumer.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.consumer.tasks.html#celery.worker.consumer.tasks.Tasks.stop
WorkController.info	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.info()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.info
info	R	WorkController.info										
WorkController.on_after_init	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.on_after_init(**kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.on_after_init
on after init	R	WorkController.on_after_init										
WorkController.on_before_init	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.on_before_init(**kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.on_before_init
on before init	R	WorkController.on_before_init										
WorkController.on_close	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.on_close()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.on_close
on close	R	WorkController.on_close										
WorkController.on_consumer_ready	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.on_consumer_ready(consumer)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.on_consumer_ready
on consumer ready	R	WorkController.on_consumer_ready										
WorkController.on_init_blueprint	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.on_init_blueprint()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.on_init_blueprint
on init blueprint	R	WorkController.on_init_blueprint										
WorkController.on_start	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.on_start()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.on_start
on start	R	WorkController.on_start										
WorkController.on_stopped	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.on_stopped()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.on_stopped
on stopped	R	WorkController.on_stopped										
WorkController.prepare_args	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.prepare_args(**kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.prepare_args
prepare args	R	WorkController.prepare_args										
WorkController.register_with_event_loop	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.register_with_event_loop(hub)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.register_with_event_loop
register with event loop	R	WorkController.register_with_event_loop										
WorkController.reload	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.reload(modules=None, reload=False, reloader=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.reload
reload	R	WorkController.reload										
WorkController.rusage	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.rusage()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.rusage
rusage	R	WorkController.rusage										
WorkController.setup_defaults	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.setup_defaults(concurrency=None, loglevel=u'WARN', logfile=None, task_events=None, pool=None, consumer_cls=None, timer_cls=None, timer_precision=None, autoscaler_cls=None, pool_putlocks=None, pool_restarts=None, optimization=None, O=None, statedb=None, time_limit=None, soft_time_limit=None, scheduler=None, pool_cls=None, state_db=None, task_time_limit=None, task_soft_time_limit=None, scheduler_cls=None, schedule_filename=None, max_tasks_per_child=None, prefetch_multiplier=None, disable_rate_limits=None, worker_lost_wait=None, max_memory_per_child=None, **_kw)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.setup_defaults
setup defaults	R	WorkController.setup_defaults										
WorkController.setup_includes	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.setup_includes(includes)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.setup_includes
setup includes	R	WorkController.setup_includes										
WorkController.setup_instance	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.setup_instance(queues=None, ready_callback=None, pidfile=None, include=None, use_eventloop=None, exclude_queues=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.setup_instance
setup instance	R	WorkController.setup_instance										
WorkController.setup_queues	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.setup_queues(include, exclude=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.setup_queues
setup queues	R	WorkController.setup_queues										
WorkController.should_use_eventloop	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.should_use_eventloop()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.should_use_eventloop
should use eventloop	R	WorkController.should_use_eventloop										
WorkController.signal_consumer_close	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.signal_consumer_close()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.signal_consumer_close
signal consumer close	R	WorkController.signal_consumer_close										
WorkController.start	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.start()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.start
start	R	WorkController.start										
WorkController.stats	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.stats()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.stats
stats	R	WorkController.stats										
WorkController.stop	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.stop(in_sighandler=False, exitcode=None)</code></pre><p>Graceful shutdown of the worker server.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.stop
stop	R	WorkController.stop										
WorkController.terminate	A			celery.worker.worker Functions							<section class="prog__container"><pre><code>WorkController.terminate(in_sighandler=False)</code></pre><p>Not so graceful shutdown of the worker server.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.worker.worker.html#celery.worker.worker.WorkController.terminate
terminate	R	WorkController.terminate										
add	A			celery.bin.base Functions							<section class="prog__container"><pre><code>add(cls, name)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Extensions.add
load	A			celery.bin.base Functions							<section class="prog__container"><pre><code>load()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Extensions.load
Command.add_append_opt	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.add_append_opt(acc, opt, value)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.add_append_opt
add append opt	R	Command.add_append_opt										
Command.add_arguments	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.add_arguments
add arguments	R	Command.add_arguments										
Command.add_compat_options	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.add_compat_options(parser, options)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.add_compat_options
add compat options	R	Command.add_compat_options										
Command.add_preload_arguments	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.add_preload_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.add_preload_arguments
add preload arguments	R	Command.add_preload_arguments										
Command.ask	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.ask(q, choices, default=None)</code></pre><p>Prompt user to choose from a tuple of string values.</p><p>If a default is not specified the question will be repeateduntil the user gives a valid choice.</p><p>Matching is case insensitive.</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>q (str) – the question to ask (don’t include questionark)</li><li>choice (Tuple[str]) – tuple of possible choices, must be lowercase.</li><li>default (Any) – Default value if any.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.ask
ask	R	Command.ask										
Command.check_args	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.check_args(args)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.check_args
check args	R	Command.check_args										
Command.create_parser	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.create_parser(prog_name, command=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.create_parser
create parser	R	Command.create_parser										
Command.die	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.die(msg, status=1)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.die
die	R	Command.die										
Command.early_version	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.early_version(argv)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.early_version
early version	R	Command.early_version										
Command.error	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.error(s)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.error
error	R	Command.error										
Command.execute_from_commandline	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.execute_from_commandline(argv=None)</code></pre><p>Execute application from command-line.</p><span class="prog__sub">Parameters</span><p>argv (List[str]) – The list of command-line arguments.Defaults to sys.argv.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.execute_from_commandline
execute from commandline	R	Command.execute_from_commandline										
Command.expanduser	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.expanduser(value)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.expanduser
expanduser	R	Command.expanduser										
Command.find_app	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.find_app(app)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.find_app
find app	R	Command.find_app										
Command.get_cls_by_name	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.get_cls_by_name(name, imp=<function import_from_cwd>)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.get_cls_by_name
get cls by name	R	Command.get_cls_by_name										
Command.get_options	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.get_options()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.get_options
get options	R	Command.get_options										
Command.handle_argv	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.handle_argv(prog_name, argv, command=None)</code></pre><p>Parse arguments from argv and dispatch to run().</p><span class="prog__sub">Parameters</span><ul class="prog__ul"><li>prog_name (str) – The program name (argv[0]).</li><li>argv (List[str]) – Rest of command-line arguments.</li></ul></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.handle_argv
handle argv	R	Command.handle_argv										
Command.host_format	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.host_format(s, **extra)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.host_format
host format	R	Command.host_format										
Command.maybe_patch_concurrency	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.maybe_patch_concurrency(argv=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.maybe_patch_concurrency
maybe patch concurrency	R	Command.maybe_patch_concurrency										
Command.node_format	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.node_format(s, nodename, **extra)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.node_format
node format	R	Command.node_format										
Command.on_concurrency_setup	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.on_concurrency_setup()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.on_concurrency_setup
on concurrency setup	R	Command.on_concurrency_setup										
Command.on_error	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.on_error(exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.on_error
on error	R	Command.on_error										
Command.on_usage_error	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.on_usage_error(exc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.on_usage_error
on usage error	R	Command.on_usage_error										
Command.out	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.out(s, fh=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.out
out	R	Command.out										
Command.parse_doc	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.parse_doc(doc)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.parse_doc
parse doc	R	Command.parse_doc										
Command.parse_options	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.parse_options(prog_name, arguments, command=None)</code></pre><p>Parse the available options.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.parse_options
parse options	R	Command.parse_options										
Command.parse_preload_options	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.parse_preload_options(args)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.parse_preload_options
parse preload options	R	Command.parse_preload_options										
Command.prepare_args	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.prepare_args(options, args)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.prepare_args
prepare args	R	Command.prepare_args										
Command.prepare_arguments	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.prepare_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.prepare_arguments
prepare arguments	R	Command.prepare_arguments										
Command.prepare_parser	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.prepare_parser(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.prepare_parser
prepare parser	R	Command.prepare_parser										
Command.pretty	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.pretty(n)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.pretty
pretty	R	Command.pretty										
Command.pretty_dict_ok_error	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.pretty_dict_ok_error(n)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.pretty_dict_ok_error
pretty dict ok error	R	Command.pretty_dict_ok_error										
Command.pretty_list	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.pretty_list(n)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.pretty_list
pretty list	R	Command.pretty_list										
Command.process_cmdline_config	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.process_cmdline_config(argv)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.process_cmdline_config
process cmdline config	R	Command.process_cmdline_config										
Command.run	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.run(*args, **options)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.run
run	R	Command.run										
Command.run_from_argv	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.run_from_argv(prog_name, argv=None, command=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.run_from_argv
run from argv	R	Command.run_from_argv										
Command.say_chat	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.say_chat(direction, title, body=u'')</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.say_chat
say chat	R	Command.say_chat										
Command.say_remote_command_reply	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.say_remote_command_reply(replies)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.say_remote_command_reply
say remote command reply	R	Command.say_remote_command_reply										
Command.setup_app_from_commandline	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.setup_app_from_commandline(argv)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.setup_app_from_commandline
setup app from commandline	R	Command.setup_app_from_commandline										
Command.symbol_by_name	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.symbol_by_name(name, imp=<function import_from_cwd>)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.symbol_by_name
symbol by name	R	Command.symbol_by_name										
Command.usage	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.usage(command)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.usage
usage	R	Command.usage										
Command.verify_args	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.verify_args(given, _index=0)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.verify_args
verify args	R	Command.verify_args										
Command.with_pool_option	A			celery.bin.base Functions							<section class="prog__container"><pre><code>Command.with_pool_option(argv)</code></pre><p>Return tuple of (short_opts, long_opts).</p><p>Returns only if the commandsupports a pool argument, and used to monkey patch eventlet/geventenvironments as early as possible.</p><span class="prog__sub">Example</span><pre><code>>>> has_pool_option = (['-P'], ['--pool'])</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Command.with_pool_option
with pool option	R	Command.with_pool_option										
check_value	A			celery.bin.base Functions							<section class="prog__container"><pre><code>check_value(opt, value)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Option.check_value
convert_value	A			celery.bin.base Functions							<section class="prog__container"><pre><code>convert_value(opt, value)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Option.convert_value
get_opt_string	A			celery.bin.base Functions							<section class="prog__container"><pre><code>get_opt_string()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Option.get_opt_string
process	A			celery.bin.base Functions							<section class="prog__container"><pre><code>process(opt, value, values, parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Option.process
take_action	A			celery.bin.base Functions							<section class="prog__container"><pre><code>take_action(action, dest, opt, value, values, parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Option.take_action
takes_value	A			celery.bin.base Functions							<section class="prog__container"><pre><code>takes_value()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.base.html#celery.bin.base.Option.takes_value
add_arguments	A			celery.bin.worker Functions							<section class="prog__container"><pre><code>add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.worker.html#celery.bin.worker.worker.add_arguments
maybe_detach	A			celery.bin.worker Functions							<section class="prog__container"><pre><code>maybe_detach(argv, dopts=[u'-D', u'--detach'])</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.worker.html#celery.bin.worker.worker.maybe_detach
run	A			celery.bin.worker Functions							<section class="prog__container"><pre><code>run(hostname=None, pool_cls=None, app=None, uid=None, gid=None, loglevel=None, logfile=None, pidfile=None, statedb=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.worker.html#celery.bin.worker.worker.run
run_from_argv	A			celery.bin.worker Functions							<section class="prog__container"><pre><code>run_from_argv(prog_name, argv=None, command=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.worker.html#celery.bin.worker.worker.run_from_argv
with_pool_option	A			celery.bin.worker Functions							<section class="prog__container"><pre><code>with_pool_option(argv)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.worker.html#celery.bin.worker.worker.with_pool_option
add_arguments	A			celery.bin.beat Functions							<section class="prog__container"><pre><code>add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.beat.html#celery.bin.beat.beat.add_arguments
run	A			celery.bin.beat Functions							<section class="prog__container"><pre><code>run(detach=False, logfile=None, pidfile=None, uid=None, gid=None, umask=None, workdir=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.beat.html#celery.bin.beat.beat.run
add_arguments	A			celery.bin.events Functions							<section class="prog__container"><pre><code>add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.events.html#celery.bin.events.events.add_arguments
run	A			celery.bin.events Functions							<section class="prog__container"><pre><code>run(dump=False, camera=None, frequency=1.0, maxrate=None, loglevel=u'INFO', logfile=None, prog_name=u'celery events', pidfile=None, uid=None, gid=None, umask=None, workdir=None, detach=False, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.events.html#celery.bin.events.events.run
run_evcam	A			celery.bin.events Functions							<section class="prog__container"><pre><code>run_evcam(camera, logfile=None, pidfile=None, uid=None, gid=None, umask=None, workdir=None, detach=False, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.events.html#celery.bin.events.events.run_evcam
run_evdump	A			celery.bin.events Functions							<section class="prog__container"><pre><code>run_evdump()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.events.html#celery.bin.events.events.run_evdump
run_evtop	A			celery.bin.events Functions							<section class="prog__container"><pre><code>run_evtop()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.events.html#celery.bin.events.events.run_evtop
set_process_status	A			celery.bin.events Functions							<section class="prog__container"><pre><code>set_process_status(prog, info=u'')</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.events.html#celery.bin.events.events.set_process_status
debug	A			celery.bin.logtool Functions							<section class="prog__container"><pre><code>debug(files)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.logtool.html#celery.bin.logtool.logtool.debug
errors	A			celery.bin.logtool Functions							<section class="prog__container"><pre><code>errors(files)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.logtool.html#celery.bin.logtool.logtool.errors
incomplete	A			celery.bin.logtool Functions							<section class="prog__container"><pre><code>incomplete(files)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.logtool.html#celery.bin.logtool.logtool.incomplete
run	A			celery.bin.logtool Functions							<section class="prog__container"><pre><code>run(what=None, *files, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.logtool.html#celery.bin.logtool.logtool.run
say1	A			celery.bin.logtool Functions							<section class="prog__container"><pre><code>say1(line, *_)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.logtool.html#celery.bin.logtool.logtool.say1
stats	A			celery.bin.logtool Functions							<section class="prog__container"><pre><code>stats(files)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.logtool.html#celery.bin.logtool.logtool.stats
traces	A			celery.bin.logtool Functions							<section class="prog__container"><pre><code>traces(files)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.logtool.html#celery.bin.logtool.logtool.traces
connect	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>connect(conn=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQPAdmin.connect
note	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>note(m)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQPAdmin.note
run	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>run()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQPAdmin.run
completenames	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>completenames(text, *ignored)</code></pre><p>Return all commands starting with text, for tab-completion.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.completenames
default	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>default(line)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.default
dispatch	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>dispatch(cmd, arglist)</code></pre><p>Dispatch and execute the command.</p><p>Look-up order is: builtins -> amqp.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.dispatch
display_command_help	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>display_command_help(cmd, short=False)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.display_command_help
do_exit	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>do_exit(*args)</code></pre><p>The ‘exit’ command.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.do_exit
do_help	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>do_help(*args)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.do_help
get_amqp_api_command	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>get_amqp_api_command(cmd, arglist)</code></pre><p>Get AMQP command wrapper.</p><p>With a command name and a list of arguments, convert the argumentsto Python values and find the corresponding method on the AMQP channelobject.</p><span class="prog__sub">Returns</span><p>of (method, processed_args) pairs.</p><span class="prog__sub">Return type</span><p>Tuple</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.get_amqp_api_command
get_names	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>get_names()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.get_names
note	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>note(m)</code></pre><p>Say something to the user.  Disabled if silent.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.note
onecmd	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>onecmd(line)</code></pre><p>Parse line and execute command.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.onecmd
parseline	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>parseline(parts)of three items:</code></pre><p>Parse input line.</p><span class="prog__sub">Returns</span><p>of three items:(command_name, arglist, original_line)</p><span class="prog__sub">Return type</span><p>Tuple</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.parseline
respond	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>respond(retval)</code></pre><p>What to do with the return value of a command.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.respond
say	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>say(m)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.AMQShell.say
coerce	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>coerce(index, value)</code></pre><p>Coerce value for argument at index.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.Spec.coerce
format_arg	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>format_arg(name, type, default_value=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.Spec.format_arg
format_response	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>format_response(response)</code></pre><p>Format the return value of this command in a human-friendly way.</p></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.Spec.format_response
format_signature	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>format_signature()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.Spec.format_signature
str_args_to_python	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>str_args_to_python(arglist)</code></pre><p>Process list of string arguments to values according to spec.</p><span class="prog__sub">Example</span><pre><code>>>> spec = Spec([('queue', str), ('if_unused', bool)])>>> spec.str_args_to_python('pobox', 'true')('pobox', True)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.Spec.str_args_to_python
run	A			celery.bin.amqp Functions							<section class="prog__container"><pre><code>run(*args, **options)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.amqp.html#celery.bin.amqp.amqp.run
bootsteps	A			celery.bin.graph Functions							<section class="prog__container"><pre><code>bootsteps(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.graph.html#celery.bin.graph.graph.bootsteps
run	A			celery.bin.graph Functions							<section class="prog__container"><pre><code>run(what=None, *args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.graph.html#celery.bin.graph.graph.run
workers	A			celery.bin.graph Functions							<section class="prog__container"><pre><code>workers(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.graph.html#celery.bin.graph.graph.workers
Cluster	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>Cluster(nodes, cmd=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.Cluster
MultiTool.call_command	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.call_command(command, argv)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.call_command
call command	R	MultiTool.call_command										
MultiTool.cluster_from_argv	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.cluster_from_argv(argv, cmd=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.cluster_from_argv
cluster from argv	R	MultiTool.cluster_from_argv										
MultiTool.execute_from_commandline	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.execute_from_commandline(argv, cmd=None)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.execute_from_commandline
execute from commandline	R	MultiTool.execute_from_commandline										
MultiTool.expand	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.expand(template, *argv)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.expand
expand	R	MultiTool.expand										
MultiTool.get	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.get(wanted, *argv)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.get
get	R	MultiTool.get										
MultiTool.help	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.help(*argv)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.help
help	R	MultiTool.help										
MultiTool.kill	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.kill(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.kill
kill	R	MultiTool.kill										
MultiTool.names	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.names(*argv, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.names
names	R	MultiTool.names										
MultiTool.on_child_failure	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_child_failure(node, retcode)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_child_failure
on child failure	R	MultiTool.on_child_failure										
MultiTool.on_child_signalled	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_child_signalled(node, signum)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_child_signalled
on child signalled	R	MultiTool.on_child_signalled										
MultiTool.on_child_spawn	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_child_spawn(node, argstr, env)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_child_spawn
on child spawn	R	MultiTool.on_child_spawn										
MultiTool.on_node_down	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_node_down(node)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_node_down
on node down	R	MultiTool.on_node_down										
MultiTool.on_node_restart	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_node_restart(node)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_node_restart
on node restart	R	MultiTool.on_node_restart										
MultiTool.on_node_shutdown_ok	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_node_shutdown_ok(node)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_node_shutdown_ok
on node shutdown ok	R	MultiTool.on_node_shutdown_ok										
MultiTool.on_node_signal	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_node_signal(node, sig)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_node_signal
on node signal	R	MultiTool.on_node_signal										
MultiTool.on_node_signal_dead	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_node_signal_dead(node)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_node_signal_dead
on node signal dead	R	MultiTool.on_node_signal_dead										
MultiTool.on_node_start	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_node_start(node)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_node_start
on node start	R	MultiTool.on_node_start										
MultiTool.on_node_status	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_node_status(node, retval)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_node_status
on node status	R	MultiTool.on_node_status										
MultiTool.on_send_signal	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_send_signal(node, sig)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_send_signal
on send signal	R	MultiTool.on_send_signal										
MultiTool.on_still_waiting_end	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_still_waiting_end()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_still_waiting_end
on still waiting end	R	MultiTool.on_still_waiting_end										
MultiTool.on_still_waiting_for	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_still_waiting_for(nodes)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_still_waiting_for
on still waiting for	R	MultiTool.on_still_waiting_for										
MultiTool.on_still_waiting_progress	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_still_waiting_progress(nodes)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_still_waiting_progress
on still waiting progress	R	MultiTool.on_still_waiting_progress										
MultiTool.on_stopping_preamble	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.on_stopping_preamble(nodes)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.on_stopping_preamble
on stopping preamble	R	MultiTool.on_stopping_preamble										
MultiTool.restart	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.restart(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.restart
restart	R	MultiTool.restart										
MultiTool.show	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.show(*argv, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.show
show	R	MultiTool.show										
MultiTool.start	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.start(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.start
start	R	MultiTool.start										
MultiTool.stop	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.stop(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.stop
stop	R	MultiTool.stop										
MultiTool.stop_verify	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.stop_verify(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.stop_verify
stop verify	R	MultiTool.stop_verify										
MultiTool.stopwait	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.stopwait(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.stopwait
stopwait	R	MultiTool.stopwait										
MultiTool.validate_arguments	A			celery.bin.multi Functions							<section class="prog__container"><pre><code>MultiTool.validate_arguments(argv)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.multi.html#celery.bin.multi.MultiTool.validate_arguments
validate arguments	R	MultiTool.validate_arguments										
add_arguments	A			celery.bin.call Functions							<section class="prog__container"><pre><code>add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.call.html#celery.bin.call.call.add_arguments
run	A			celery.bin.call Functions							<section class="prog__container"><pre><code>run(name, *_, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.call.html#celery.bin.call.call.run
call	A			celery.bin.control Functions							<section class="prog__container"><pre><code>call(method, arguments, **options)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.control.html#celery.bin.control.control.call
call	A			celery.bin.control Functions							<section class="prog__container"><pre><code>call(method, arguments, **options)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.control.html#celery.bin.control.inspect.call
run	A			celery.bin.control Functions							<section class="prog__container"><pre><code>run(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.control.html#celery.bin.control.status.run
list_bindings	A			celery.bin.list Functions							<section class="prog__container"><pre><code>list_bindings(management)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.list.html#celery.bin.list.list_.list_bindings
run	A			celery.bin.list Functions							<section class="prog__container"><pre><code>run(what=None, *_, **kw)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.list.html#celery.bin.list.list_.run
add_arguments	A			celery.bin.migrate Functions							<section class="prog__container"><pre><code>add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.migrate.html#celery.bin.migrate.migrate.add_arguments
on_migrate_task	A			celery.bin.migrate Functions							<section class="prog__container"><pre><code>on_migrate_task(state, body, message)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.migrate.html#celery.bin.migrate.migrate.on_migrate_task
run	A			celery.bin.migrate Functions							<section class="prog__container"><pre><code>run(source, destination, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.migrate.html#celery.bin.migrate.migrate.run
add_arguments	A			celery.bin.purge Functions							<section class="prog__container"><pre><code>add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.purge.html#celery.bin.purge.purge.add_arguments
run	A			celery.bin.purge Functions							<section class="prog__container"><pre><code>run(force=False, queues=None, exclude_queues=None, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.purge.html#celery.bin.purge.purge.run
add_arguments	A			celery.bin.result Functions							<section class="prog__container"><pre><code>add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.result.html#celery.bin.result.result.add_arguments
run	A			celery.bin.result Functions							<section class="prog__container"><pre><code>run(task_id, *args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.result.html#celery.bin.result.result.run
add_arguments	A			celery.bin.shell Functions							<section class="prog__container"><pre><code>add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.shell.html#celery.bin.shell.shell.add_arguments
invoke_bpython_shell	A			celery.bin.shell Functions							<section class="prog__container"><pre><code>invoke_bpython_shell()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.shell.html#celery.bin.shell.shell.invoke_bpython_shell
invoke_default_shell	A			celery.bin.shell Functions							<section class="prog__container"><pre><code>invoke_default_shell()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.shell.html#celery.bin.shell.shell.invoke_default_shell
invoke_fallback_shell	A			celery.bin.shell Functions							<section class="prog__container"><pre><code>invoke_fallback_shell()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.shell.html#celery.bin.shell.shell.invoke_fallback_shell
invoke_ipython_shell	A			celery.bin.shell Functions							<section class="prog__container"><pre><code>invoke_ipython_shell()</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.shell.html#celery.bin.shell.shell.invoke_ipython_shell
run	A			celery.bin.shell Functions							<section class="prog__container"><pre><code>run(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.shell.html#celery.bin.shell.shell.run
add_arguments	A			celery.bin.upgrade Functions							<section class="prog__container"><pre><code>add_arguments(parser)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.upgrade.html#celery.bin.upgrade.upgrade.add_arguments
run	A			celery.bin.upgrade Functions							<section class="prog__container"><pre><code>run(*args, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.upgrade.html#celery.bin.upgrade.upgrade.run
settings	A			celery.bin.upgrade Functions							<section class="prog__container"><pre><code>settings(command, filename, no_backup=False, django=False, compat=False, **kwargs)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.upgrade.html#celery.bin.upgrade.upgrade.settings
usage	A			celery.bin.upgrade Functions							<section class="prog__container"><pre><code>usage(command)</code></pre></section>	http://docs.celeryproject.org/en/stable/reference/celery.bin.upgrade.html#celery.bin.upgrade.upgrade.usage
