._chunk()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.chunk(array, [size=1])</code></pre><p>Creates an array of elements split into groups the length of <code>size</code>. If <code>array</code> can&apos;t be split evenly, the final chunk will be the remaining elements.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to process.</li><li><code>[size=1]</code> <em>(number)</em>: The length of each chunk</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of chunks.</p></pre><span class="prog__sub">Example</span><pre><code>_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n \n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#chunk
chunk	R	._chunk()										
._chunk	R	._chunk()										
._compact()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.compact(array)</code></pre><p>Creates an array with all falsey values removed. The values <code>false</code>, <code>null</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>, and <code>NaN</code> are falsey.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to compact.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre><span class="prog__sub">Example</span><pre><code>_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#compact
compact	R	._compact()										
._compact	R	._compact()										
._concat()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.concat(array, [values])</code></pre><p>Creates a new array concatenating <code>array</code> with any additional arrays and/or values.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to concatenate.</li><li><code>[values]</code> <em>(...*)</em>: The values to concatenate.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new concatenated array.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [1];\nvar other = _.concat(array, 2, [3], [[4]]);\n \nconsole.log(other);\n// => [1, 2, 3, [4]]\n \nconsole.log(array);\n// => [1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#concat
concat	R	._concat()										
._concat	R	._concat()										
._difference()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.difference(array, [values])</code></pre><p>Creates an array of <code>array</code> values not included in the other given arrays using <code>SameValueZero</code> for equality comparisons. The order and references of result values are determined by the first array.<br><br><strong>Note:</strong> Unlike <code>_.pullAll</code>  this method returns a new array.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[values]</code> <em>(...Array)</em>: The values to exclude.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre><span class="prog__sub">Example</span><pre><code>_.difference([2, 1], [2, 3]);\n// => [1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#difference
difference	R	._difference()										
._difference	R	._difference()										
._differenceBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.differenceBy(array, [values], [iteratee=_.identity])</code></pre><p>This method is like <code>_.difference</code> except that it accepts <code>iteratee</code> which is invoked for each element of <code>array</code> and <code>values</code> to generate the criterion by which they&apos;re compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:<br><em>(value)</em>.<br><br><strong>Note:</strong> Unlike <code>_.pullAllBy</code>  this method returns a new array.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[values]</code> <em>(...Array)</em>: The values to exclude.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre><span class="prog__sub">Example</span><pre><code>_.differenceBy([2, 1], [2, 3], Math.floor);\n// => [1.2]\n \n// The `_.property` iteratee shorthand.\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#differenceBy
differenceBy	R	._differenceBy()										
._differenceBy	R	._differenceBy()										
._differenceWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.differenceWith(array, [values], [comparator])</code></pre><p>This method is like <code>_.difference</code> except that it accepts <code>comparator</code> which is invoked to compare elements of <code>array</code> to <code>values</code>. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: <em>(arrVal, othVal)</em>.<br><br><strong>Note:</strong> Unlike <code>_.pullAllWith</code>  this method returns a new array.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[values]</code> <em>(...Array)</em>: The values to exclude.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n \n_.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n// => [{ 'x': 2, 'y': 1 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#differenceWith
differenceWith	R	._differenceWith()										
._differenceWith	R	._differenceWith()										
._drop()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.drop(array, [n=1])</code></pre><p>Creates a slice of <code>array</code> with <code>n</code> elements dropped from the beginning.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to drop.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.drop([1, 2, 3]);\n// => [2, 3]\n \n_.drop([1, 2, 3], 2);\n// => [3]\n \n_.drop([1, 2, 3], 5);\n// => []\n \n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#drop
drop	R	._drop()										
._drop	R	._drop()										
._dropRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.dropRight(array, [n=1])</code></pre><p>Creates a slice of <code>array</code> with <code>n</code> elements dropped from the end.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to drop.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.dropRight([1, 2, 3]);\n// => [1, 2]\n \n_.dropRight([1, 2, 3], 2);\n// => [1]\n \n_.dropRight([1, 2, 3], 5);\n// => []\n \n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#dropRight
dropRight	R	._dropRight()										
._dropRight	R	._dropRight()										
._dropRightWhile()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.dropRightWhile(array, [predicate=_.identity])</code></pre><p>Creates a slice of <code>array</code> excluding elements dropped from the end. Elements are dropped until <code>predicate</code> returns falsey. The predicate is invoked with three arguments: <em>(value, index, array)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n \n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n \n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#dropRightWhile
dropRightWhile	R	._dropRightWhile()										
._dropRightWhile	R	._dropRightWhile()										
._dropWhile()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.dropWhile(array, [predicate=_.identity])</code></pre><p>Creates a slice of <code>array</code> excluding elements dropped from the beginning. Elements are dropped until <code>predicate</code> returns falsey. The predicate is invoked with three arguments: <em>(value, index, array)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.dropWhile(users, function(o) { return !o.active; });\n// => objects for ['pebbles']\n \n// The `_.matches` iteratee shorthand.\n_.dropWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['fred', 'pebbles']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.dropWhile(users, ['active', false]);\n// => objects for ['pebbles']\n \n// The `_.property` iteratee shorthand.\n_.dropWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#dropWhile
dropWhile	R	._dropWhile()										
._dropWhile	R	._dropWhile()										
._fill()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.fill(array, value, [start=0], [end=array.length])</code></pre><p>Fills elements of <code>array</code> with <code>value</code> from <code>start</code> up to, but not including, <code>end</code>.<br><br><strong>Note:</strong> This method mutates <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to fill.</li><li><code>value</code> <em>(*)</em>: The value to fill <code>array</code> with.</li><li><code>[start=0]</code> <em>(number)</em>: The start position.</li><li><code>[end=array.length]</code> <em>(number)</em>: The end position.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [1, 2, 3];\n \n_.fill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n \n_.fill(Array(3), 2);\n// => [2, 2, 2]\n \n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#fill
fill	R	._fill()										
._fill	R	._fill()										
._findIndex()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.findIndex(array, [predicate=_.identity], [fromIndex=0])</code></pre><p>This method is like <code>_.find</code> except that it returns the index of the first element <code>predicate</code> returns truthy for instead of the element itself.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[fromIndex=0]</code> <em>(number)</em>: The index to search from.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index of the found element, else <code>-1</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n \n// The `_.matches` iteratee shorthand.\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findIndex(users, ['active', false]);\n// => 0\n \n// The `_.property` iteratee shorthand.\n_.findIndex(users, 'active');\n// => 2\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#findIndex
findIndex	R	._findIndex()										
._findIndex	R	._findIndex()										
._findLastIndex()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length-1])</code></pre><p>This method is like <code>_.findIndex</code> except that it iterates over elements of <code>collection</code> from right to left.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[fromIndex=array.length-1]</code> <em>(number)</em>: The index to search from.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index of the found element, else <code>-1</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n \n// The `_.matches` iteratee shorthand.\n_.findLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findLastIndex(users, ['active', false]);\n// => 2\n \n// The `_.property` iteratee shorthand.\n_.findLastIndex(users, 'active');\n// => 0\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#findLastIndex
findLastIndex	R	._findLastIndex()										
._findLastIndex	R	._findLastIndex()										
._flatten()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.flatten(array)</code></pre><p>Flattens <code>array</code> a single level deep.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to flatten.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre><span class="prog__sub">Example</span><pre><code>_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#flatten
flatten	R	._flatten()										
._flatten	R	._flatten()										
._flattenDeep()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.flattenDeep(array)</code></pre><p>Recursively flattens <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to flatten.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre><span class="prog__sub">Example</span><pre><code>_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#flattenDeep
flattenDeep	R	._flattenDeep()										
._flattenDeep	R	._flattenDeep()										
._flattenDepth()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.flattenDepth(array, [depth=1])</code></pre><p>Recursively flatten <code>array</code> up to <code>depth</code> times.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to flatten.</li><li><code>[depth=1]</code> <em>(number)</em>: The maximum recursion depth.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [1, [2, [3, [4]], 5]];\n \n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n \n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#flattenDepth
flattenDepth	R	._flattenDepth()										
._flattenDepth	R	._flattenDepth()										
._fromPairs()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.fromPairs(pairs)</code></pre><p>The inverse of <code>_.toPairs</code>  this method returns an object composed from key-value <code>pairs</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>pairs</code> <em>(Array)</em>: The key-value pairs.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new object.</p></pre><span class="prog__sub">Example</span><pre><code>_.fromPairs([['a', 1], ['b', 2]]);\n// => { 'a': 1, 'b': 2 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#fromPairs
fromPairs	R	._fromPairs()										
._fromPairs	R	._fromPairs()										
._head()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.head(array)</code></pre><p>Gets the first element of <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>_.first</em></p></pre><span class="prog__sub">Example</span><pre><code>_.head([1, 2, 3]);\n// => 1\n \n_.head([]);\n// => undefined\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#head
head	R	._head()										
._head	R	._head()										
._indexOf()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.indexOf(array, value, [fromIndex=0])</code></pre><p>Gets the index at which the first occurrence of <code>value</code> is found in <code>array</code> using <code>SameValueZero</code> for equality comparisons. If <code>fromIndex</code> is negative, it&apos;s used as the offset from the end of <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li><li><code>[fromIndex=0]</code> <em>(number)</em>: The index to search from.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index of the matched value, else <code>-1</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.indexOf([1, 2, 1, 2], 2);\n// => 1\n \n// Search from the `fromIndex`.\n_.indexOf([1, 2, 1, 2], 2, 2);\n// => 3\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#indexOf
indexOf	R	._indexOf()										
._indexOf	R	._indexOf()										
._initial()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.initial(array)</code></pre><p>Gets all but the last element of <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.initial([1, 2, 3]);\n// => [1, 2]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#initial
initial	R	._initial()										
._initial	R	._initial()										
._intersection()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.intersection([arrays])</code></pre><p>Creates an array of unique values that are included in all given arrays using <code>SameValueZero</code> for equality comparisons. The order and references of result values are determined by the first array.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of intersecting values.</p></pre><span class="prog__sub">Example</span><pre><code>_.intersection([2, 1], [2, 3]);\n// => [2]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#intersection
intersection	R	._intersection()										
._intersection	R	._intersection()										
._intersectionBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.intersectionBy([arrays], [iteratee=_.identity])</code></pre><p>This method is like <code>_.intersection</code> except that it accepts <code>iteratee</code> which is invoked for each element of each <code>arrays</code> to generate the criterion by which they&apos;re compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:<br><em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of intersecting values.</p></pre><span class="prog__sub">Example</span><pre><code>_.intersectionBy([2, 1], [2, 3], Math.floor);\n// => [2.1]\n \n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#intersectionBy
intersectionBy	R	._intersectionBy()										
._intersectionBy	R	._intersectionBy()										
._intersectionWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.intersectionWith([arrays], [comparator])</code></pre><p>This method is like <code>_.intersection</code> except that it accepts <code>comparator</code> which is invoked to compare elements of <code>arrays</code>. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: <em>(arrVal, othVal)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of intersecting values.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.intersectionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#intersectionWith
intersectionWith	R	._intersectionWith()										
._intersectionWith	R	._intersectionWith()										
._join()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.join(array, [separator=&apos;,&apos;])</code></pre><p>Converts all elements in <code>array</code> into a string separated by <code>separator</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to convert.</li><li><code>[separator=&apos;,&apos;]</code> <em>(string)</em>: The element separator.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the joined string.</p></pre><span class="prog__sub">Example</span><pre><code>_.join(['a', 'b', 'c'], '~');\n// => 'a~b~c'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#join
join	R	._join()										
._join	R	._join()										
._last()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.last(array)</code></pre><p>Gets the last element of <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the last element of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.last([1, 2, 3]);\n// => 3\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#last
last	R	._last()										
._last	R	._last()										
._lastIndexOf()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.lastIndexOf(array, value, [fromIndex=array.length-1])</code></pre><p>This method is like <code>_.indexOf</code> except that it iterates over elements of <code>array</code> from right to left.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li><li><code>[fromIndex=array.length-1]</code> <em>(number)</em>: The index to search from.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index of the matched value, else <code>-1</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n \n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#lastIndexOf
lastIndexOf	R	._lastIndexOf()										
._lastIndexOf	R	._lastIndexOf()										
._nth()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.nth(array, [n=0])</code></pre><p>Gets the element at index <code>n</code> of <code>array</code>. If <code>n</code> is negative, the nth element from the end is returned.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=0]</code> <em>(number)</em>: The index of the element to return.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the nth element of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var array = ['a', 'b', 'c', 'd'];\n \n_.nth(array, 1);\n// => 'b'\n \n_.nth(array, -2);\n// => 'c';\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#nth
nth	R	._nth()										
._nth	R	._nth()										
._pull()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.pull(array, [values])</code></pre><p>Removes all given values from <code>array</code> using <code>SameValueZero</code> for equality comparisons.<br><br><strong>Note:</strong> Unlike <code>_.without</code>  this method mutates <code>array</code>. Use <code>_.remove</code> to remove elements from an array by predicate.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>[values]</code> <em>(...*)</em>: The values to remove.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n \n_.pull(array, 'a', 'c');\nconsole.log(array);\n// => ['b', 'b']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#pull
pull	R	._pull()										
._pull	R	._pull()										
._pullAll()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.pullAll(array, values)</code></pre><p>This method is like <code>_.pull</code> except that it accepts an array of values to remove.<br><br><strong>Note:</strong> Unlike <code>_.difference</code>  this method mutates <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>values</code> <em>(Array)</em>: The values to remove.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n \n_.pullAll(array, ['a', 'c']);\nconsole.log(array);\n// => ['b', 'b']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#pullAll
pullAll	R	._pullAll()										
._pullAll	R	._pullAll()										
._pullAllBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.pullAllBy(array, values, [iteratee=_.identity])</code></pre><p>This method is like <code>_.pullAll</code> except that it accepts <code>iteratee</code> which is invoked for each element of <code>array</code> and <code>values</code> to generate the criterion by which they&apos;re compared. The iteratee is invoked with one argument: <em>(value)</em>.<br><br><strong>Note:</strong> Unlike <code>_.differenceBy</code>  this method mutates <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>values</code> <em>(Array)</em>: The values to remove.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n \n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#pullAllBy
pullAllBy	R	._pullAllBy()										
._pullAllBy	R	._pullAllBy()										
._pullAllWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.pullAllWith(array, values, [comparator])</code></pre><p>This method is like <code>_.pullAll</code> except that it accepts <code>comparator</code> which is invoked to compare elements of <code>array</code> to <code>values</code>. The comparator is invoked with two arguments: <em>(arrVal, othVal)</em>.<br><br><strong>Note:</strong> Unlike <code>_.differenceWith</code>  this method mutates <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>values</code> <em>(Array)</em>: The values to remove.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n \n_.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#pullAllWith
pullAllWith	R	._pullAllWith()										
._pullAllWith	R	._pullAllWith()										
._pullAt()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.pullAt(array, [indexes])</code></pre><p>Removes elements from <code>array</code> corresponding to <code>indexes</code> and returns an array of removed elements.<br><br><strong>Note:</strong> Unlike <code>_.at</code>  this method mutates <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>[indexes]</code> <em>(...(number|number[]))</em>: The indexes of elements to remove.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of removed elements.</p></pre><span class="prog__sub">Example</span><pre><code>var array = ['a', 'b', 'c', 'd'];\nvar pulled = _.pullAt(array, [1, 3]);\n \nconsole.log(array);\n// => ['a', 'c']\n \nconsole.log(pulled);\n// => ['b', 'd']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#pullAt
pullAt	R	._pullAt()										
._pullAt	R	._pullAt()										
._remove()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.remove(array, [predicate=_.identity])</code></pre><p>Removes all elements from <code>array</code> that <code>predicate</code> returns truthy for and returns an array of the removed elements. The predicate is invoked with three arguments: <em>(value, index, array)</em>.<br><br><strong>Note:</strong> Unlike <code>_.filter</code>  this method mutates <code>array</code>. Use <code>_.pull</code> to pull elements from an array by value.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of removed elements.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n \nconsole.log(array);\n// => [1, 3]\n \nconsole.log(evens);\n// => [2, 4]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#remove
remove	R	._remove()										
._remove	R	._remove()										
._reverse()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.reverse(array)</code></pre><p>Reverses <code>array</code> so that the first element becomes the last, the second element becomes the second to last, and so on.<br><br><strong>Note:</strong> This method mutates <code>array</code> and is based on <code>Array#reverse</code> </p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [1, 2, 3];\n \n_.reverse(array);\n// => [3, 2, 1]\n \nconsole.log(array);\n// => [3, 2, 1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#reverse
reverse	R	._reverse()										
._reverse	R	._reverse()										
._slice()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.slice(array, [start=0], [end=array.length])</code></pre><p>Creates a slice of <code>array</code> from <code>start</code> up to, but not including, <code>end</code>.<br><br><strong>Note:</strong> This method is used instead of <code>Array#slice</code> to ensure dense arrays are returned.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to slice.</li><li><code>[start=0]</code> <em>(number)</em>: The start position.</li><li><code>[end=array.length]</code> <em>(number)</em>: The end position.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code></code>\n</pre></section>	https://lodash.com/docs/4.17.4#slice
slice	R	._slice()										
._slice	R	._slice()										
._sortedIndex()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sortedIndex(array, value)</code></pre><p>Uses a binary search to determine the lowest index at which <code>value</code> should be inserted into <code>array</code> in order to maintain its sort order.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The sorted array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to evaluate.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index at which <code>value</code> should be inserted into <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.sortedIndex([30, 50], 40);\n// => 1\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sortedIndex
sortedIndex	R	._sortedIndex()										
._sortedIndex	R	._sortedIndex()										
._sortedIndexBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sortedIndexBy(array, value, [iteratee=_.identity])</code></pre><p>This method is like <code>_.sortedIndex</code> except that it accepts <code>iteratee</code> which is invoked for <code>value</code> and each element of <code>array</code> to compute their sort ranking. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The sorted array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to evaluate.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index at which <code>value</code> should be inserted into <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n \n// The `_.property` iteratee shorthand.\n_.sortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sortedIndexBy
sortedIndexBy	R	._sortedIndexBy()										
._sortedIndexBy	R	._sortedIndexBy()										
._sortedIndexOf()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sortedIndexOf(array, value)</code></pre><p>This method is like <code>_.indexOf</code> except that it performs a binary search on a sorted <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index of the matched value, else <code>-1</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sortedIndexOf
sortedIndexOf	R	._sortedIndexOf()										
._sortedIndexOf	R	._sortedIndexOf()										
._sortedLastIndex()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sortedLastIndex(array, value)</code></pre><p>This method is like <code>_.sortedIndex</code> except that it returns the highest index at which <code>value</code> should be inserted into <code>array</code> in order to maintain its sort order.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The sorted array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to evaluate.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index at which <code>value</code> should be inserted into <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sortedLastIndex
sortedLastIndex	R	._sortedLastIndex()										
._sortedLastIndex	R	._sortedLastIndex()										
._sortedLastIndexBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sortedLastIndexBy(array, value, [iteratee=_.identity])</code></pre><p>This method is like <code>_.sortedLastIndex</code> except that it accepts <code>iteratee</code> which is invoked for <code>value</code> and each element of <code>array</code> to compute their sort ranking. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The sorted array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to evaluate.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index at which <code>value</code> should be inserted into <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'x': 4 }, { 'x': 5 }];\n \n_.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n \n// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sortedLastIndexBy
sortedLastIndexBy	R	._sortedLastIndexBy()										
._sortedLastIndexBy	R	._sortedLastIndexBy()										
._sortedLastIndexOf()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sortedLastIndexOf(array, value)</code></pre><p>This method is like <code>_.lastIndexOf</code> except that it performs a binary search on a sorted <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the index of the matched value, else <code>-1</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sortedLastIndexOf
sortedLastIndexOf	R	._sortedLastIndexOf()										
._sortedLastIndexOf	R	._sortedLastIndexOf()										
._sortedUniq()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sortedUniq(array)</code></pre><p>This method is like <code>_.uniq</code> except that it&apos;s designed and optimized for sorted arrays.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre><span class="prog__sub">Example</span><pre><code>_.sortedUniq([1, 1, 2]);\n// => [1, 2]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sortedUniq
sortedUniq	R	._sortedUniq()										
._sortedUniq	R	._sortedUniq()										
._sortedUniqBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sortedUniqBy(array, [iteratee])</code></pre><p>This method is like <code>_.uniqBy</code> except that it&apos;s designed and optimized for sorted arrays.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[iteratee]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre><span class="prog__sub">Example</span><pre><code>_.sortedUniqBy([1, 1, 2, 2], Math.floor);\n// => [1.1, 2.3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sortedUniqBy
sortedUniqBy	R	._sortedUniqBy()										
._sortedUniqBy	R	._sortedUniqBy()										
._tail()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.tail(array)</code></pre><p>Gets all but the first element of <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.tail([1, 2, 3]);\n// => [2, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#tail
tail	R	._tail()										
._tail	R	._tail()										
._take()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.take(array, [n=1])</code></pre><p>Creates a slice of <code>array</code> with <code>n</code> elements taken from the beginning.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to take.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.take([1, 2, 3]);\n// => [1]\n \n_.take([1, 2, 3], 2);\n// => [1, 2]\n \n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.take([1, 2, 3], 0);\n// => []\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#take
take	R	._take()										
._take	R	._take()										
._takeRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.takeRight(array, [n=1])</code></pre><p>Creates a slice of <code>array</code> with <code>n</code> elements taken from the end.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to take.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.takeRight([1, 2, 3]);\n// => [3]\n \n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n \n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n \n_.takeRight([1, 2, 3], 0);\n// => []\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#takeRight
takeRight	R	._takeRight()										
._takeRight	R	._takeRight()										
._takeRightWhile()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.takeRightWhile(array, [predicate=_.identity])</code></pre><p>Creates a slice of <code>array</code> with elements taken from the end. Elements are taken until <code>predicate</code> returns falsey. The predicate is invoked with three arguments: <em>(value, index, array)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n \n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n \n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n \n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#takeRightWhile
takeRightWhile	R	._takeRightWhile()										
._takeRightWhile	R	._takeRightWhile()										
._takeWhile()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.takeWhile(array, [predicate=_.identity])</code></pre><p>Creates a slice of <code>array</code> with elements taken from the beginning. Elements are taken until <code>predicate</code> returns falsey. The predicate is invoked with three arguments: <em>(value, index, array)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n \n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n \n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n \n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#takeWhile
takeWhile	R	._takeWhile()										
._takeWhile	R	._takeWhile()										
._union()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.union([arrays])</code></pre><p>Creates an array of unique values, in order, from all given arrays using <code>SameValueZero</code> for equality comparisons.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of combined values.</p></pre><span class="prog__sub">Example</span><pre><code>_.union([2], [1, 2]);\n// => [2, 1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#union
union	R	._union()										
._union	R	._union()										
._unionBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.unionBy([arrays], [iteratee=_.identity])</code></pre><p>This method is like <code>_.union</code> except that it accepts <code>iteratee</code> which is invoked for each element of each <code>arrays</code> to generate the criterion by which uniqueness is computed. Result values are chosen from the first array in which the value occurs. The iteratee is invoked with one argument:<br><em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of combined values.</p></pre><span class="prog__sub">Example</span><pre><code>_.unionBy([2], [1, 2], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#unionBy
unionBy	R	._unionBy()										
._unionBy	R	._unionBy()										
._unionWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.unionWith([arrays], [comparator])</code></pre><p>This method is like <code>_.union</code> except that it accepts <code>comparator</code> which is invoked to compare elements of <code>arrays</code>. Result values are chosen from the first array in which the value occurs. The comparator is invoked with two arguments: <em>(arrVal, othVal)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of combined values.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.unionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#unionWith
unionWith	R	._unionWith()										
._unionWith	R	._unionWith()										
._uniq()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.uniq(array)</code></pre><p>Creates a duplicate-free version of an array, using <code>SameValueZero</code> for equality comparisons, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre><span class="prog__sub">Example</span><pre><code>_.uniq([2, 1, 2]);\n// => [2, 1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#uniq
uniq	R	._uniq()										
._uniq	R	._uniq()										
._uniqBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.uniqBy(array, [iteratee=_.identity])</code></pre><p>This method is like <code>_.uniq</code> except that it accepts <code>iteratee</code> which is invoked for each element in <code>array</code> to generate the criterion by which uniqueness is computed. The order of result values is determined by the order they occur in the array. The iteratee is invoked with one argument:<br><em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre><span class="prog__sub">Example</span><pre><code>_.uniqBy([2, 1, 2], Math.floor);\n// => [2.1, 1.2]\n \n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#uniqBy
uniqBy	R	._uniqBy()										
._uniqBy	R	._uniqBy()										
._uniqWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.uniqWith(array, [comparator])</code></pre><p>This method is like <code>_.uniq</code> except that it accepts <code>comparator</code> which is invoked to compare elements of <code>array</code>. The order of result values is determined by the order they occur in the array.The comparator is invoked with two arguments: <em>(arrVal, othVal)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.uniqWith(objects, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#uniqWith
uniqWith	R	._uniqWith()										
._uniqWith	R	._uniqWith()										
._unzip()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.unzip(array)</code></pre><p>This method is like <code>_.zip</code> except that it accepts an array of grouped elements and creates an array regrouping the elements to their pre-zip configuration.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array of grouped elements to process.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of regrouped elements.</p></pre><span class="prog__sub">Example</span><pre><code>var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n \n_.unzip(zipped);\n// => [['a', 'b'], [1, 2], [true, false]]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#unzip
unzip	R	._unzip()										
._unzip	R	._unzip()										
._unzipWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.unzipWith(array, [iteratee=_.identity])</code></pre><p>This method is like <code>_.unzip</code> except that it accepts <code>iteratee</code> to specify how regrouped values should be combined. The iteratee is invoked with the elements of each group: <em>(...group)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array of grouped elements to process.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function to combine regrouped values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of regrouped elements.</p></pre><span class="prog__sub">Example</span><pre><code>var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n \n_.unzipWith(zipped, _.add);\n// => [3, 30, 300]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#unzipWith
unzipWith	R	._unzipWith()										
._unzipWith	R	._unzipWith()										
._without()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.without(array, [values])</code></pre><p>Creates an array excluding all given values using <code>SameValueZero</code> for equality comparisons.<br><br><strong>Note:</strong> Unlike <code>_.pull</code>  this method returns a new array.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[values]</code> <em>(...*)</em>: The values to exclude.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre><span class="prog__sub">Example</span><pre><code>_.without([2, 1, 2, 3], 1, 2);\n// => [3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#without
without	R	._without()										
._without	R	._without()										
._xor()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.xor([arrays])</code></pre><p>Creates an array of unique values that is the  of the given arrays. The order of result values is determined by the order they occur in the arrays.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre><span class="prog__sub">Example</span><pre><code>_.xor([2, 1], [2, 3]);\n// => [1, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#xor
xor	R	._xor()										
._xor	R	._xor()										
._xorBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.xorBy([arrays], [iteratee=_.identity])</code></pre><p>This method is like <code>_.xor</code> except that it accepts <code>iteratee</code> which is invoked for each element of each <code>arrays</code> to generate the criterion by which by which they&apos;re compared. The order of result values is determined by the order they occur in the arrays. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre><span class="prog__sub">Example</span><pre><code>_.xorBy([2, 1], [2, 3], Math.floor);\n// => [1.2, 3.4]\n \n// The `_.property` iteratee shorthand.\n_.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#xorBy
xorBy	R	._xorBy()										
._xorBy	R	._xorBy()										
._xorWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.xorWith([arrays], [comparator])</code></pre><p>This method is like <code>_.xor</code> except that it accepts <code>comparator</code> which is invoked to compare elements of <code>arrays</code>. The order of result values is determined by the order they occur in the arrays. The comparator is invoked with two arguments: <em>(arrVal, othVal)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n \n_.xorWith(objects, others, _.isEqual);\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#xorWith
xorWith	R	._xorWith()										
._xorWith	R	._xorWith()										
._zip()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.zip([arrays])</code></pre><p>Creates an array of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to process.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of grouped elements.</p></pre><span class="prog__sub">Example</span><pre><code>_.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#zip
zip	R	._zip()										
._zip	R	._zip()										
._zipObject()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.zipObject([props=[]], [values=[]])</code></pre><p>This method is like <code>_.fromPairs</code> except that it accepts two arrays, one of property identifiers and one of corresponding values.</p><span class="prog__sub">Arguments</span><ol><li><code>[props=[]]</code> <em>(Array)</em>: The property identifiers.</li><li><code>[values=[]]</code> <em>(Array)</em>: The property values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new object.</p></pre><span class="prog__sub">Example</span><pre><code>_.zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#zipObject
zipObject	R	._zipObject()										
._zipObject	R	._zipObject()										
._zipObjectDeep()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.zipObjectDeep([props=[]], [values=[]])</code></pre><p>This method is like <code>_.zipObject</code> except that it supports property paths.</p><span class="prog__sub">Arguments</span><ol><li><code>[props=[]]</code> <em>(Array)</em>: The property identifiers.</li><li><code>[values=[]]</code> <em>(Array)</em>: The property values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new object.</p></pre><span class="prog__sub">Example</span><pre><code>_.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#zipObjectDeep
zipObjectDeep	R	._zipObjectDeep()										
._zipObjectDeep	R	._zipObjectDeep()										
._zipWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.zipWith([arrays], [iteratee=_.identity])</code></pre><p>This method is like <code>_.zip</code> except that it accepts <code>iteratee</code> to specify how grouped values should be combined. The iteratee is invoked with the elements of each group: <em>(...group)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to process.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function to combine grouped values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new array of grouped elements.</p></pre><span class="prog__sub">Example</span><pre><code>_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n  return a + b + c;\n});\n// => [111, 222]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#zipWith
zipWith	R	._zipWith()										
._zipWith	R	._zipWith()										
._countBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.countBy(collection, [iteratee=_.identity])</code></pre><p>Creates an object composed of keys generated from the results of running each element of <code>collection</code> thru <code>iteratee</code>. The corresponding value of each key is the number of times the key was returned by <code>iteratee</code>. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee to transform keys.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the composed aggregate object.</p></pre><span class="prog__sub">Example</span><pre><code>_.countBy([6, 4, 6], Math.floor);\n// => { '4': 1, '6': 2 }\n \n// The `_.property` iteratee shorthand.\n_.countBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#countBy
countBy	R	._countBy()										
._countBy	R	._countBy()										
._every()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.every(collection, [predicate=_.identity])</code></pre><p>Checks if <code>predicate</code> returns truthy for <strong>all</strong> elements of <code>collection</code>. Iteration is stopped once <code>predicate</code> returns falsey. The predicate is invoked with three arguments: <em>(value, index|key, collection)</em>.<br><br><strong>Note:</strong> This method returns <code>true</code> for  because  of elements of empty collections.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if all elements pass the predicate check, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.every([true, 1, null, 'yes'], Boolean);\n// => false\n \nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n \n// The `_.matches` iteratee shorthand.\n_.every(users, { 'user': 'barney', 'active': false });\n// => false\n \n// The `_.matchesProperty` iteratee shorthand.\n_.every(users, ['active', false]);\n// => true\n \n// The `_.property` iteratee shorthand.\n_.every(users, 'active');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#every
every	R	._every()										
._every	R	._every()										
._filter()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.filter(collection, [predicate=_.identity])</code></pre><p>Iterates over elements of <code>collection</code>, returning an array of all elements <code>predicate</code> returns truthy for. The predicate is invoked with three arguments: <em>(value, index|key, collection)</em>.<br><br><strong>Note:</strong> Unlike <code>_.remove</code>  this method returns a new array.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new filtered array.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n \n_.filter(users, function(o) { return !o.active; });\n// => objects for ['fred']\n \n// The `_.matches` iteratee shorthand.\n_.filter(users, { 'age': 36, 'active': true });\n// => objects for ['barney']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, ['active', false]);\n// => objects for ['fred']\n \n// The `_.property` iteratee shorthand.\n_.filter(users, 'active');\n// => objects for ['barney']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#filter
filter	R	._filter()										
._filter	R	._filter()										
._find()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.find(collection, [predicate=_.identity], [fromIndex=0])</code></pre><p>Iterates over elements of <code>collection</code>, returning the first element <code>predicate</code> returns truthy for. The predicate is invoked with three arguments: <em>(value, index|key, collection)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[fromIndex=0]</code> <em>(number)</em>: The index to search from.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the matched element, else <code>undefined</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n];\n \n_.find(users, function(o) { return o.age < 40; });\n// => object for 'barney'\n \n// The `_.matches` iteratee shorthand.\n_.find(users, { 'age': 1, 'active': true });\n// => object for 'pebbles'\n \n// The `_.matchesProperty` iteratee shorthand.\n_.find(users, ['active', false]);\n// => object for 'fred'\n \n// The `_.property` iteratee shorthand.\n_.find(users, 'active');\n// => object for 'barney'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#find
find	R	._find()										
._find	R	._find()										
._findLast()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.findLast(collection, [predicate=_.identity], [fromIndex=collection.length-1])</code></pre><p>This method is like <code>_.find</code> except that it iterates over elements of <code>collection</code> from right to left.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[fromIndex=collection.length-1]</code> <em>(number)</em>: The index to search from.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the matched element, else <code>undefined</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.findLast([1, 2, 3, 4], function(n) {\n  return n % 2 == 1;\n});\n// => 3\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#findLast
findLast	R	._findLast()										
._findLast	R	._findLast()										
._flatMap()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.flatMap(collection, [iteratee=_.identity])</code></pre><p>Creates a flattened array of values by running each element in <code>collection</code> thru <code>iteratee</code> and flattening the mapped results. The iteratee is invoked with three arguments: <em>(value, index|key, collection)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre><span class="prog__sub">Example</span><pre><code>function duplicate(n) {\n  return [n, n];\n}\n \n_.flatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#flatMap
flatMap	R	._flatMap()										
._flatMap	R	._flatMap()										
._flatMapDeep()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.flatMapDeep(collection, [iteratee=_.identity])</code></pre><p>This method is like <code>_.flatMap</code> except that it recursively flattens the mapped results.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre><span class="prog__sub">Example</span><pre><code>function duplicate(n) {\n  return [[[n, n]]];\n}\n \n_.flatMapDeep([1, 2], duplicate);\n// => [1, 1, 2, 2]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#flatMapDeep
flatMapDeep	R	._flatMapDeep()										
._flatMapDeep	R	._flatMapDeep()										
._flatMapDepth()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.flatMapDepth(collection, [iteratee=_.identity], [depth=1])</code></pre><p>This method is like <code>_.flatMap</code> except that it recursively flattens the mapped results up to <code>depth</code> times.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[depth=1]</code> <em>(number)</em>: The maximum recursion depth.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre><span class="prog__sub">Example</span><pre><code>function duplicate(n) {\n  return [[[n, n]]];\n}\n \n_.flatMapDepth([1, 2], duplicate, 2);\n// => [[1, 1], [2, 2]]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#flatMapDepth
flatMapDepth	R	._flatMapDepth()										
._flatMapDepth	R	._flatMapDepth()										
._forEach()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.forEach(collection, [iteratee=_.identity])</code></pre><p>Iterates over elements of <code>collection</code> and invokes <code>iteratee</code> for each element. The iteratee is invoked with three arguments: <em>(value, index|key, collection)</em>. Iteratee functions may exit iteration early by explicitly returning <code>false</code>.<br><br><strong>Note:</strong> As with other &quot;Collections&quot; methods, objects with a &quot;length&quot; property are iterated like arrays. To avoid this behavior use <code>_.forIn</code> or <code>_.forOwn</code> for object iteration.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>_.each</em></p></pre><span class="prog__sub">Example</span><pre><code>_.forEach([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `1` then `2`.\n \n_.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed).\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#forEach
forEach	R	._forEach()										
._forEach	R	._forEach()										
._forEachRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.forEachRight(collection, [iteratee=_.identity])</code></pre><p>This method is like <code>_.forEach</code> except that it iterates over elements of <code>collection</code> from right to left.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>_.eachRight</em></p></pre><span class="prog__sub">Example</span><pre><code>_.forEachRight([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `2` then `1`.\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#forEachRight
forEachRight	R	._forEachRight()										
._forEachRight	R	._forEachRight()										
._groupBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.groupBy(collection, [iteratee=_.identity])</code></pre><p>Creates an object composed of keys generated from the results of running each element of <code>collection</code> thru <code>iteratee</code>. The order of grouped values is determined by the order they occur in <code>collection</code>. The corresponding value of each key is an array of elements responsible for generating the key. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee to transform keys.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the composed aggregate object.</p></pre><span class="prog__sub">Example</span><pre><code>_.groupBy([6, 4, 6], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n \n// The `_.property` iteratee shorthand.\n_.groupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#groupBy
groupBy	R	._groupBy()										
._groupBy	R	._groupBy()										
._includes()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.includes(collection, value, [fromIndex=0])</code></pre><p>Checks if <code>value</code> is in <code>collection</code>. If <code>collection</code> is a string, it&apos;s checked for a substring of <code>value</code>, otherwise <code>SameValueZero</code> is used for equality comparisons. If <code>fromIndex</code> is negative, it&apos;s used as the offset from the end of <code>collection</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object|string)</em>: The collection to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li><li><code>[fromIndex=0]</code> <em>(number)</em>: The index to search from.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is found, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.includes([1, 2, 3], 1);\n// => true\n \n_.includes([1, 2, 3], 1, 2);\n// => false\n \n_.includes({ 'a': 1, 'b': 2 }, 1);\n// => true\n \n_.includes('abcd', 'bc');\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#includes
includes	R	._includes()										
._includes	R	._includes()										
._invokeMap()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.invokeMap(collection, path, [args])</code></pre><p>Invokes the method at <code>path</code> of each element in <code>collection</code>, returning an array of the results of each invoked method. Any additional arguments are provided to each invoked method. If <code>path</code> is a function, it&apos;s invoked for, and <code>this</code> bound to, each element in <code>collection</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>path</code> <em>(Array|Function|string)</em>: The path of the method to invoke or the function invoked per iteration.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke each method with.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the array of results.</p></pre><span class="prog__sub">Example</span><pre><code>_.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n \n_.invokeMap([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#invokeMap
invokeMap	R	._invokeMap()										
._invokeMap	R	._invokeMap()										
._keyBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.keyBy(collection, [iteratee=_.identity])</code></pre><p>Creates an object composed of keys generated from the results of running each element of <code>collection</code> thru <code>iteratee</code>. The corresponding value of each key is the last element responsible for generating the key. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee to transform keys.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the composed aggregate object.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [\n  { 'dir': 'left', 'code': 97 },\n  { 'dir': 'right', 'code': 100 }\n];\n \n_.keyBy(array, function(o) {\n  return String.fromCharCode(o.code);\n});\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n \n_.keyBy(array, 'dir');\n// => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#keyBy
keyBy	R	._keyBy()										
._keyBy	R	._keyBy()										
._map()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.map(collection, [iteratee=_.identity])</code></pre><p>Creates an array of values by running each element in <code>collection</code> thru <code>iteratee</code>. The iteratee is invoked with three arguments:<br><em>(value, index|key, collection)</em>.<br><br>Many lodash methods are guarded to work as iteratees for methods like <code>_.every</code>  <code>_.filter</code>  <code>_.map</code>  <code>_.mapValues</code>  <code>_.reject</code>  and <code>_.some</code> <br><br>The guarded methods are:<br><code>ary</code>, <code>chunk</code>, <code>curry</code>, <code>curryRight</code>, <code>drop</code>, <code>dropRight</code>, <code>every</code>, <code>fill</code>, <code>invert</code>, <code>parseInt</code>, <code>random</code>, <code>range</code>, <code>rangeRight</code>, <code>repeat</code>, <code>sampleSize</code>, <code>slice</code>, <code>some</code>, <code>sortBy</code>, <code>split</code>, <code>take</code>, <code>takeRight</code>, <code>template</code>, <code>trim</code>, <code>trimEnd</code>, <code>trimStart</code>, and <code>words</code></p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new mapped array.</p></pre><span class="prog__sub">Example</span><pre><code>function square(n) {\n  return n * n;\n}\n \n_.map([4, 8], square);\n// => [16, 64]\n \n_.map({ 'a': 4, 'b': 8 }, square);\n// => [16, 64] (iteration order is not guaranteed)\n \nvar users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n \n// The `_.property` iteratee shorthand.\n_.map(users, 'user');\n// => ['barney', 'fred']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#map
map	R	._map()										
._map	R	._map()										
._orderBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.orderBy(collection, [iteratees=[_.identity]], [orders])</code></pre><p>This method is like <code>_.sortBy</code> except that it allows specifying the sort orders of the iteratees to sort by. If <code>orders</code> is unspecified, all values are sorted in ascending order. Otherwise, specify an order of &quot;desc&quot; for descending or &quot;asc&quot; for ascending sort order of corresponding values.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratees=[_.identity]]</code> <em>(Array[]|Function[]|Object[]|string[])</em>: The iteratees to sort by.</li><li><code>[orders]</code> <em>(string[])</em>: The sort orders of <code>iteratees</code>.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new sorted array.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 34 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n];\n \n// Sort by `user` in ascending order and by `age` in descending order.\n_.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#orderBy
orderBy	R	._orderBy()										
._orderBy	R	._orderBy()										
._partition()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.partition(collection, [predicate=_.identity])</code></pre><p>Creates an array of elements split into two groups, the first of which contains elements <code>predicate</code> returns truthy for, the second of which contains elements <code>predicate</code> returns falsey for. The predicate is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the array of grouped elements.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n \n_.partition(users, function(o) { return o.active; });\n// => objects for [['fred'], ['barney', 'pebbles']]\n \n// The `_.matches` iteratee shorthand.\n_.partition(users, { 'age': 1, 'active': false });\n// => objects for [['pebbles'], ['barney', 'fred']]\n \n// The `_.matchesProperty` iteratee shorthand.\n_.partition(users, ['active', false]);\n// => objects for [['barney', 'pebbles'], ['fred']]\n \n// The `_.property` iteratee shorthand.\n_.partition(users, 'active');\n// => objects for [['fred'], ['barney', 'pebbles']]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#partition
partition	R	._partition()										
._partition	R	._partition()										
._reduce()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.reduce(collection, [iteratee=_.identity], [accumulator])</code></pre><p>Reduces <code>collection</code> to a value which is the accumulated result of running each element in <code>collection</code> thru <code>iteratee</code>, where each successive invocation is supplied the return value of the previous. If <code>accumulator</code> is not given, the first element of <code>collection</code> is used as the initial value. The iteratee is invoked with four arguments:<br><em>(accumulator, value, index|key, collection)</em>.<br><br>Many lodash methods are guarded to work as iteratees for methods like <code>_.reduce</code>  <code>_.reduceRight</code>  and <code>_.transform</code> <br><br>The guarded methods are:<br><code>assign</code>, <code>defaults</code>, <code>defaultsDeep</code>, <code>includes</code>, <code>merge</code>, <code>orderBy</code>, and <code>sortBy</code></p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[accumulator]</code> <em>(*)</em>: The initial value.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the accumulated value.</p></pre><span class="prog__sub">Example</span><pre><code>_.reduce([1, 2], function(sum, n) {\n  return sum + n;\n}, 0);\n// => 3\n \n_.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n  return result;\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#reduce
reduce	R	._reduce()										
._reduce	R	._reduce()										
._reduceRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.reduceRight(collection, [iteratee=_.identity], [accumulator])</code></pre><p>This method is like <code>_.reduce</code> except that it iterates over elements of <code>collection</code> from right to left.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[accumulator]</code> <em>(*)</em>: The initial value.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the accumulated value.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [[0, 1], [2, 3], [4, 5]];\n \n_.reduceRight(array, function(flattened, other) {\n  return flattened.concat(other);\n}, []);\n// => [4, 5, 2, 3, 0, 1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#reduceRight
reduceRight	R	._reduceRight()										
._reduceRight	R	._reduceRight()										
._reject()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.reject(collection, [predicate=_.identity])</code></pre><p>The opposite of <code>_.filter</code>  this method returns the elements of <code>collection</code> that <code>predicate</code> does <strong>not</strong> return truthy for.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new filtered array.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n \n_.reject(users, function(o) { return !o.active; });\n// => objects for ['fred']\n \n// The `_.matches` iteratee shorthand.\n_.reject(users, { 'age': 40, 'active': true });\n// => objects for ['barney']\n \n// The `_.matchesProperty` iteratee shorthand.\n_.reject(users, ['active', false]);\n// => objects for ['fred']\n \n// The `_.property` iteratee shorthand.\n_.reject(users, 'active');\n// => objects for ['barney']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#reject
reject	R	._reject()										
._reject	R	._reject()										
._sample()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sample(collection)</code></pre><p>Gets a random element from <code>collection</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to sample.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the random element.</p></pre><span class="prog__sub">Example</span><pre><code>_.sample([1, 2, 3, 4]);\n// => 2\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sample
sample	R	._sample()										
._sample	R	._sample()										
._sampleSize()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sampleSize(collection, [n=1])</code></pre><p>Gets <code>n</code> random elements at unique keys from <code>collection</code> up to the size of <code>collection</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to sample.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to sample.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the random elements.</p></pre><span class="prog__sub">Example</span><pre><code>_.sampleSize([1, 2, 3], 2);\n// => [3, 1]\n \n_.sampleSize([1, 2, 3], 4);\n// => [2, 3, 1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sampleSize
sampleSize	R	._sampleSize()										
._sampleSize	R	._sampleSize()										
._shuffle()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.shuffle(collection)</code></pre><p>Creates an array of shuffled values, using a version of the  </p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to shuffle.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new shuffled array.</p></pre><span class="prog__sub">Example</span><pre><code>_.shuffle([1, 2, 3, 4]);\n// => [4, 1, 3, 2]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#shuffle
shuffle	R	._shuffle()										
._shuffle	R	._shuffle()										
._size()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.size(collection)</code></pre><p>Gets the size of <code>collection</code> by returning its length for array-like values or the number of own enumerable string keyed properties for objects.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object|string)</em>: The collection to inspect.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the collection size.</p></pre><span class="prog__sub">Example</span><pre><code>_.size([1, 2, 3]);\n// => 3\n \n_.size({ 'a': 1, 'b': 2 });\n// => 2\n \n_.size('pebbles');\n// => 7\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#size
size	R	._size()										
._size	R	._size()										
._some()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.some(collection, [predicate=_.identity])</code></pre><p>Checks if <code>predicate</code> returns truthy for <strong>any</strong> element of <code>collection</code>. Iteration is stopped once <code>predicate</code> returns truthy. The predicate is invoked with three arguments: <em>(value, index|key, collection)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if any element passes the predicate check, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.some([null, 0, 'yes', false], Boolean);\n// => true\n \nvar users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\n \n// The `_.matches` iteratee shorthand.\n_.some(users, { 'user': 'barney', 'active': false });\n// => false\n \n// The `_.matchesProperty` iteratee shorthand.\n_.some(users, ['active', false]);\n// => true\n \n// The `_.property` iteratee shorthand.\n_.some(users, 'active');\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#some
some	R	._some()										
._some	R	._some()										
._sortBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sortBy(collection, [iteratees=[_.identity]])</code></pre><p>Creates an array of elements, sorted in ascending order by the results of running each element in a collection thru each iteratee. This method performs a stable sort, that is, it preserves the original sort order of equal elements. The iteratees are invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratees=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The iteratees to sort by.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new sorted array.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 34 }\n];\n \n_.sortBy(users, [function(o) { return o.user; }]);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n \n_.sortBy(users, ['user', 'age']);\n// => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sortBy
sortBy	R	._sortBy()										
._sortBy	R	._sortBy()										
._now()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.now()</code></pre><p>Gets the timestamp of the number of milliseconds that have elapsed since the Unix epoch <em>(1 January 1970 00:00:00 UTC)</em>.</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the timestamp.</p></pre><span class="prog__sub">Example</span><pre><code>_.defer(function(stamp) {\n  console.log(_.now() - stamp);\n}, _.now());\n// => Logs the number of milliseconds it took for the deferred invocation.\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#now
now	R	._now()										
._now	R	._now()										
._after()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.after(n, func)</code></pre><p>The opposite of <code>_.before</code>  this method creates a function that invokes <code>func</code> once it&apos;s called <code>n</code> or more times.</p><span class="prog__sub">Arguments</span><ol><li><code>n</code> <em>(number)</em>: The number of calls before <code>func</code> is invoked.</li><li><code>func</code> <em>(Function)</em>: The function to restrict.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new restricted function.</p></pre><span class="prog__sub">Example</span><pre><code>var saves = ['profile', 'settings'];\n \nvar done = _.after(saves.length, function() {\n  console.log('done saving!');\n});\n \n_.forEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => Logs 'done saving!' after the two async saves have completed.\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#after
after	R	._after()										
._after	R	._after()										
._ary()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.ary(func, [n=func.length])</code></pre><p>Creates a function that invokes <code>func</code>, with up to <code>n</code> arguments, ignoring any additional arguments.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to cap arguments for.</li><li><code>[n=func.length]</code> <em>(number)</em>: The arity cap.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new capped function.</p></pre><span class="prog__sub">Example</span><pre><code>_.map(['6', '8', '10'], _.ary(parseInt, 1));\n// => [6, 8, 10]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#ary
ary	R	._ary()										
._ary	R	._ary()										
._before()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.before(n, func)</code></pre><p>Creates a function that invokes <code>func</code>, with the <code>this</code> binding and arguments of the created function, while it&apos;s called less than <code>n</code> times. Subsequent calls to the created function return the result of the last <code>func</code> invocation.</p><span class="prog__sub">Arguments</span><ol><li><code>n</code> <em>(number)</em>: The number of calls at which <code>func</code> is no longer invoked.</li><li><code>func</code> <em>(Function)</em>: The function to restrict.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new restricted function.</p></pre><span class="prog__sub">Example</span><pre><code>jQuery(element).on('click', _.before(5, addContactToList));\n// => Allows adding up to 4 contacts to the list.\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#before
before	R	._before()										
._before	R	._before()										
._bind()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.bind(func, thisArg, [partials])</code></pre><p>Creates a function that invokes <code>func</code> with the <code>this</code> binding of <code>thisArg</code> and <code>partials</code> prepended to the arguments it receives.<br><br>The <code>_.bind.placeholder</code> value, which defaults to <code>_</code> in monolithic builds, may be used as a placeholder for partially applied arguments.<br><br><strong>Note:</strong> Unlike native <code>Function#bind</code>, this method doesn&apos;t set the &quot;length&quot; property of bound functions.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to bind.</li><li><code>thisArg</code> <em>(*)</em>: The <code>this</code> binding of <code>func</code>.</li><li><code>[partials]</code> <em>(...*)</em>: The arguments to be partially applied.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new bound function.</p></pre><span class="prog__sub">Example</span><pre><code>function greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n \nvar object = { 'user': 'fred' };\n \nvar bound = _.bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n \n// Bound with placeholders.\nvar bound = _.bind(greet, object, _, '!');\nbound('hi');\n// => 'hi fred!'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#bind
bind	R	._bind()										
._bind	R	._bind()										
._bindKey()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.bindKey(object, key, [partials])</code></pre><p>Creates a function that invokes the method at <code>object[key]</code> with <code>partials</code> prepended to the arguments it receives.<br><br>This method differs from <code>_.bind</code> by allowing bound functions to reference methods that may be redefined or don&apos;t yet exist. See  for more details.<br><br>The <code>_.bindKey.placeholder</code> value, which defaults to <code>_</code> in monolithic builds, may be used as a placeholder for partially applied arguments.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to invoke the method on.</li><li><code>key</code> <em>(string)</em>: The key of the method.</li><li><code>[partials]</code> <em>(...*)</em>: The arguments to be partially applied.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new bound function.</p></pre><span class="prog__sub">Example</span><pre><code>var object = {\n  'user': 'fred',\n  'greet': function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\n \nvar bound = _.bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n \nobject.greet = function(greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n \nbound('!');\n// => 'hiya fred!'\n \n// Bound with placeholders.\nvar bound = _.bindKey(object, 'greet', _, '!');\nbound('hi');\n// => 'hiya fred!'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#bindKey
bindKey	R	._bindKey()										
._bindKey	R	._bindKey()										
._curry()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.curry(func, [arity=func.length])</code></pre><p>Creates a function that accepts arguments of <code>func</code> and either invokes <code>func</code> returning its result, if at least <code>arity</code> number of arguments have been provided, or returns a function that accepts the remaining <code>func</code> arguments, and so on. The arity of <code>func</code> may be specified if <code>func.length</code> is not sufficient.<br><br>The <code>_.curry.placeholder</code> value, which defaults to <code>_</code> in monolithic builds, may be used as a placeholder for provided arguments.<br><br><strong>Note:</strong> This method doesn&apos;t set the &quot;length&quot; property of curried functions.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to curry.</li><li><code>[arity=func.length]</code> <em>(number)</em>: The arity of <code>func</code>.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new curried function.</p></pre><span class="prog__sub">Example</span><pre><code>var abc = function(a, b, c) {\n  return [a, b, c];\n};\n \nvar curried = _.curry(abc);\n \ncurried(1)(2)(3);\n// => [1, 2, 3]\n \ncurried(1, 2)(3);\n// => [1, 2, 3]\n \ncurried(1, 2, 3);\n// => [1, 2, 3]\n \n// Curried with placeholders.\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#curry
curry	R	._curry()										
._curry	R	._curry()										
._curryRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.curryRight(func, [arity=func.length])</code></pre><p>This method is like <code>_.curry</code> except that arguments are applied to <code>func</code> in the manner of <code>_.partialRight</code> instead of <code>_.partial</code> <br><br>The <code>_.curryRight.placeholder</code> value, which defaults to <code>_</code> in monolithic builds, may be used as a placeholder for provided arguments.<br><br><strong>Note:</strong> This method doesn&apos;t set the &quot;length&quot; property of curried functions.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to curry.</li><li><code>[arity=func.length]</code> <em>(number)</em>: The arity of <code>func</code>.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new curried function.</p></pre><span class="prog__sub">Example</span><pre><code>var abc = function(a, b, c) {\n  return [a, b, c];\n};\n \nvar curried = _.curryRight(abc);\n \ncurried(3)(2)(1);\n// => [1, 2, 3]\n \ncurried(2, 3)(1);\n// => [1, 2, 3]\n \ncurried(1, 2, 3);\n// => [1, 2, 3]\n \n// Curried with placeholders.\ncurried(3)(1, _)(2);\n// => [1, 2, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#curryRight
curryRight	R	._curryRight()										
._curryRight	R	._curryRight()										
._debounce()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.debounce(func, [wait=0], [options={}])</code></pre><p>Creates a debounced function that delays invoking <code>func</code> until after <code>wait</code> milliseconds have elapsed since the last time the debounced function was invoked. The debounced function comes with a <code>cancel</code> method to cancel delayed <code>func</code> invocations and a <code>flush</code> method to immediately invoke them. Provide <code>options</code> to indicate whether <code>func</code> should be invoked on the leading and/or trailing edge of the <code>wait</code> timeout. The <code>func</code> is invoked with the last arguments provided to the debounced function. Subsequent calls to the debounced function return the result of the last <code>func</code> invocation.<br><br><strong>Note:</strong> If <code>leading</code> and <code>trailing</code> options are <code>true</code>, <code>func</code> is invoked on the trailing edge of the timeout only if the debounced function is invoked more than once during the <code>wait</code> timeout.<br><br>If <code>wait</code> is <code>0</code> and <code>leading</code> is <code>false</code>, <code>func</code> invocation is deferred until to the next tick, similar to <code>setTimeout</code> with a timeout of <code>0</code>.<br><br>See  for details over the differences between <code>_.debounce</code> and <code>_.throttle</code> </p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to debounce.</li><li><code>[wait=0]</code> <em>(number)</em>: The number of milliseconds to delay.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.leading=false]</code> <em>(boolean)</em>: Specify invoking on the leading edge of the timeout.</li><li><code>[options.maxWait]</code> <em>(number)</em>: The maximum time <code>func</code> is allowed to be delayed before it&apos;s invoked.</li><li><code>[options.trailing=true]</code> <em>(boolean)</em>: Specify invoking on the trailing edge of the timeout.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new debounced function.</p></pre><span class="prog__sub">Example</span><pre><code>// Avoid costly calculations while the window size is in flux.\njQuery(window).on('resize', _.debounce(calculateLayout, 150));\n \n// Invoke `sendMail` when clicked, debouncing subsequent calls.\njQuery(element).on('click', _.debounce(sendMail, 300, {\n  'leading': true,\n  'trailing': false\n}));\n \n// Ensure `batchLog` is invoked once after 1 second of debounced calls.\nvar debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\nvar source = new EventSource('/stream');\njQuery(source).on('message', debounced);\n \n// Cancel the trailing debounced invocation.\njQuery(window).on('popstate', debounced.cancel);\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#debounce
debounce	R	._debounce()										
._debounce	R	._debounce()										
._defer()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.defer(func, [args])</code></pre><p>Defers invoking the <code>func</code> until the current call stack has cleared. Any additional arguments are provided to <code>func</code> when it&apos;s invoked.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to defer.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke <code>func</code> with.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the timer id.</p></pre><span class="prog__sub">Example</span><pre><code>_.defer(function(text) {\n  console.log(text);\n}, 'deferred');\n// => Logs 'deferred' after one millisecond.\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#defer
defer	R	._defer()										
._defer	R	._defer()										
._delay()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.delay(func, wait, [args])</code></pre><p>Invokes <code>func</code> after <code>wait</code> milliseconds. Any additional arguments are provided to <code>func</code> when it&apos;s invoked.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to delay.</li><li><code>wait</code> <em>(number)</em>: The number of milliseconds to delay invocation.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke <code>func</code> with.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the timer id.</p></pre><span class="prog__sub">Example</span><pre><code>_.delay(function(text) {\n  console.log(text);\n}, 1000, 'later');\n// => Logs 'later' after one second.\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#delay
delay	R	._delay()										
._delay	R	._delay()										
._flip()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.flip(func)</code></pre><p>Creates a function that invokes <code>func</code> with arguments reversed.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to flip arguments for.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new flipped function.</p></pre><span class="prog__sub">Example</span><pre><code>var flipped = _.flip(function() {\n  return _.toArray(arguments);\n});\n \nflipped('a', 'b', 'c', 'd');\n// => ['d', 'c', 'b', 'a']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#flip
flip	R	._flip()										
._flip	R	._flip()										
._memoize()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.memoize(func, [resolver])</code></pre><p>Creates a function that memoizes the result of <code>func</code>. If <code>resolver</code> is provided, it determines the cache key for storing the result based on the arguments provided to the memoized function. By default, the first argument provided to the memoized function is used as the map cache key. The <code>func</code> is invoked with the <code>this</code> binding of the memoized function.<br><br><strong>Note:</strong> The cache is exposed as the <code>cache</code> property on the memoized function. Its creation may be customized by replacing the <code>_.memoize.Cache</code> constructor with one whose instances implement the <code>Map</code> method interface of <code>clear</code>, <code>delete</code>, <code>get</code>, <code>has</code>, and <code>set</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to have its output memoized.</li><li><code>[resolver]</code> <em>(Function)</em>: The function to resolve the cache key.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new memoized function.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1, 'b': 2 };\nvar other = { 'c': 3, 'd': 4 };\n \nvar values = _.memoize(_.values);\nvalues(object);\n// => [1, 2]\n \nvalues(other);\n// => [3, 4]\n \nobject.a = 2;\nvalues(object);\n// => [1, 2]\n \n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b']);\nvalues(object);\n// => ['a', 'b']\n \n// Replace `_.memoize.Cache`.\n_.memoize.Cache = WeakMap;\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#memoize
memoize	R	._memoize()										
._memoize	R	._memoize()										
._negate()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.negate(predicate)</code></pre><p>Creates a function that negates the result of the predicate <code>func</code>. The <code>func</code> predicate is invoked with the <code>this</code> binding and arguments of the created function.</p><span class="prog__sub">Arguments</span><ol><li><code>predicate</code> <em>(Function)</em>: The predicate to negate.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new negated function.</p></pre><span class="prog__sub">Example</span><pre><code>function isEven(n) {\n  return n % 2 == 0;\n}\n \n_.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n// => [1, 3, 5]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#negate
negate	R	._negate()										
._negate	R	._negate()										
._once()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.once(func)</code></pre><p>Creates a function that is restricted to invoking <code>func</code> once. Repeat calls to the function return the value of the first invocation. The <code>func</code> is invoked with the <code>this</code> binding and arguments of the created function.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to restrict.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new restricted function.</p></pre><span class="prog__sub">Example</span><pre><code>var initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// => `createApplication` is invoked once\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#once
once	R	._once()										
._once	R	._once()										
._overArgs()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.overArgs(func, [transforms=[_.identity]])</code></pre><p>Creates a function that invokes <code>func</code> with its arguments transformed.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to wrap.</li><li><code>[transforms=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The argument transforms.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new function.</p></pre><span class="prog__sub">Example</span><pre><code>function doubled(n) {\n  return n * 2;\n}\n \nfunction square(n) {\n  return n * n;\n}\n \nvar func = _.overArgs(function(x, y) {\n  return [x, y];\n}, [square, doubled]);\n \nfunc(9, 3);\n// => [81, 6]\n \nfunc(10, 5);\n// => [100, 10]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#overArgs
overArgs	R	._overArgs()										
._overArgs	R	._overArgs()										
._partial()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.partial(func, [partials])</code></pre><p>Creates a function that invokes <code>func</code> with <code>partials</code> prepended to the arguments it receives. This method is like <code>_.bind</code> except it does <strong>not</strong> alter the <code>this</code> binding.<br><br>The <code>_.partial.placeholder</code> value, which defaults to <code>_</code> in monolithic builds, may be used as a placeholder for partially applied arguments.<br><br><strong>Note:</strong> This method doesn&apos;t set the &quot;length&quot; property of partially applied functions.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to partially apply arguments to.</li><li><code>[partials]</code> <em>(...*)</em>: The arguments to be partially applied.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new partially applied function.</p></pre><span class="prog__sub">Example</span><pre><code>function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n \nvar sayHelloTo = _.partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n \n// Partially applied with placeholders.\nvar greetFred = _.partial(greet, _, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#partial
partial	R	._partial()										
._partial	R	._partial()										
._partialRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.partialRight(func, [partials])</code></pre><p>This method is like <code>_.partial</code> except that partially applied arguments are appended to the arguments it receives.<br><br>The <code>_.partialRight.placeholder</code> value, which defaults to <code>_</code> in monolithic builds, may be used as a placeholder for partially applied arguments.<br><br><strong>Note:</strong> This method doesn&apos;t set the &quot;length&quot; property of partially applied functions.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to partially apply arguments to.</li><li><code>[partials]</code> <em>(...*)</em>: The arguments to be partially applied.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new partially applied function.</p></pre><span class="prog__sub">Example</span><pre><code>function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n \nvar greetFred = _.partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n \n// Partially applied with placeholders.\nvar sayHelloTo = _.partialRight(greet, 'hello', _);\nsayHelloTo('fred');\n// => 'hello fred'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#partialRight
partialRight	R	._partialRight()										
._partialRight	R	._partialRight()										
._rearg()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.rearg(func, indexes)</code></pre><p>Creates a function that invokes <code>func</code> with arguments arranged according to the specified <code>indexes</code> where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to rearrange arguments for.</li><li><code>indexes</code> <em>(...(number|number[]))</em>: The arranged argument indexes.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new function.</p></pre><span class="prog__sub">Example</span><pre><code>var rearged = _.rearg(function(a, b, c) {\n  return [a, b, c];\n}, [2, 0, 1]);\n \nrearged('b', 'c', 'a')\n// => ['a', 'b', 'c']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#rearg
rearg	R	._rearg()										
._rearg	R	._rearg()										
._rest()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.rest(func, [start=func.length-1])</code></pre><p>Creates a function that invokes <code>func</code> with the <code>this</code> binding of the created function and arguments from <code>start</code> and beyond provided as an array.<br><br><strong>Note:</strong> This method is based on the  </p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to apply a rest parameter to.</li><li><code>[start=func.length-1]</code> <em>(number)</em>: The start position of the rest parameter.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new function.</p></pre><span class="prog__sub">Example</span><pre><code>var say = _.rest(function(what, names) {\n  return what + ' ' + _.initial(names).join(', ') +\n    (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n});\n \nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#rest
rest	R	._rest()										
._rest	R	._rest()										
._spread()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.spread(func, [start=0])</code></pre><p>Creates a function that invokes <code>func</code> with the <code>this</code> binding of the create function and an array of arguments much like <code>Function#apply</code> <br><br><strong>Note:</strong> This method is based on the  </p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to spread arguments over.</li><li><code>[start=0]</code> <em>(number)</em>: The start position of the spread.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new function.</p></pre><span class="prog__sub">Example</span><pre><code>var say = _.spread(function(who, what) {\n  return who + ' says ' + what;\n});\n \nsay(['fred', 'hello']);\n// => 'fred says hello'\n \nvar numbers = Promise.all([\n  Promise.resolve(40),\n  Promise.resolve(36)\n]);\n \nnumbers.then(_.spread(function(x, y) {\n  return x + y;\n}));\n// => a Promise of 76\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#spread
spread	R	._spread()										
._spread	R	._spread()										
._throttle()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.throttle(func, [wait=0], [options={}])</code></pre><p>Creates a throttled function that only invokes <code>func</code> at most once per every <code>wait</code> milliseconds. The throttled function comes with a <code>cancel</code> method to cancel delayed <code>func</code> invocations and a <code>flush</code> method to immediately invoke them. Provide <code>options</code> to indicate whether <code>func</code> should be invoked on the leading and/or trailing edge of the <code>wait</code> timeout. The <code>func</code> is invoked with the last arguments provided to the throttled function. Subsequent calls to the throttled function return the result of the last <code>func</code> invocation.<br><br><strong>Note:</strong> If <code>leading</code> and <code>trailing</code> options are <code>true</code>, <code>func</code> is invoked on the trailing edge of the timeout only if the throttled function is invoked more than once during the <code>wait</code> timeout.<br><br>If <code>wait</code> is <code>0</code> and <code>leading</code> is <code>false</code>, <code>func</code> invocation is deferred until to the next tick, similar to <code>setTimeout</code> with a timeout of <code>0</code>.<br><br>See  for details over the differences between <code>_.throttle</code> and <code>_.debounce</code> </p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to throttle.</li><li><code>[wait=0]</code> <em>(number)</em>: The number of milliseconds to throttle invocations to.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.leading=true]</code> <em>(boolean)</em>: Specify invoking on the leading edge of the timeout.</li><li><code>[options.trailing=true]</code> <em>(boolean)</em>: Specify invoking on the trailing edge of the timeout.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new throttled function.</p></pre><span class="prog__sub">Example</span><pre><code>// Avoid excessively updating the position while scrolling.\njQuery(window).on('scroll', _.throttle(updatePosition, 100));\n \n// Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\nvar throttled = _.throttle(renewToken, 300000, { 'trailing': false });\njQuery(element).on('click', throttled);\n \n// Cancel the trailing throttled invocation.\njQuery(window).on('popstate', throttled.cancel);\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#throttle
throttle	R	._throttle()										
._throttle	R	._throttle()										
._unary()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.unary(func)</code></pre><p>Creates a function that accepts up to one argument, ignoring any additional arguments.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to cap arguments for.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new capped function.</p></pre><span class="prog__sub">Example</span><pre><code>_.map(['6', '8', '10'], _.unary(parseInt));\n// => [6, 8, 10]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#unary
unary	R	._unary()										
._unary	R	._unary()										
._wrap()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.wrap(value, [wrapper=identity])</code></pre><p>Creates a function that provides <code>value</code> to <code>wrapper</code> as its first argument. Any additional arguments provided to the function are appended to those provided to the <code>wrapper</code>. The wrapper is invoked with the <code>this</code> binding of the created function.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to wrap.</li><li><code>[wrapper=identity]</code> <em>(Function)</em>: The wrapper function.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new function.</p></pre><span class="prog__sub">Example</span><pre><code>var p = _.wrap(_.escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n \np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#wrap
wrap	R	._wrap()										
._wrap	R	._wrap()										
._castArray()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.castArray(value)</code></pre><p>Casts <code>value</code> as an array if it&apos;s not one.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to inspect.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the cast array.</p></pre><span class="prog__sub">Example</span><pre><code>_.castArray(1);\n// => [1]\n \n_.castArray({ 'a': 1 });\n// => [{ 'a': 1 }]\n \n_.castArray('abc');\n// => ['abc']\n \n_.castArray(null);\n// => [null]\n \n_.castArray(undefined);\n// => [undefined]\n \n_.castArray();\n// => []\n \nvar array = [1, 2, 3];\nconsole.log(_.castArray(array) === array);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#castArray
castArray	R	._castArray()										
._castArray	R	._castArray()										
._clone()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.clone(value)</code></pre><p>Creates a shallow clone of <code>value</code>.<br><br><strong>Note:</strong> This method is loosely based on the  and supports cloning arrays, array buffers, booleans, date objects, maps, numbers, <code>Object</code> objects, regexes, sets, strings, symbols, and typed arrays. The own enumerable properties of <code>arguments</code> objects are cloned as plain objects. An empty object is returned for uncloneable values such as error objects, functions, DOM nodes, and WeakMaps.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to clone.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the cloned value.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'a': 1 }, { 'b': 2 }];\n \nvar shallow = _.clone(objects);\nconsole.log(shallow[0] === objects[0]);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#clone
clone	R	._clone()										
._clone	R	._clone()										
._cloneDeep()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.cloneDeep(value)</code></pre><p>This method is like <code>_.clone</code> except that it recursively clones <code>value</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to recursively clone.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the deep cloned value.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'a': 1 }, { 'b': 2 }];\n \nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#cloneDeep
cloneDeep	R	._cloneDeep()										
._cloneDeep	R	._cloneDeep()										
._cloneDeepWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.cloneDeepWith(value, [customizer])</code></pre><p>This method is like <code>_.cloneWith</code> except that it recursively clones <code>value</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to recursively clone.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize cloning.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the deep cloned value.</p></pre><span class="prog__sub">Example</span><pre><code>function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(true);\n  }\n}\n \nvar el = _.cloneDeepWith(document.body, customizer);\n \nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 20\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#cloneDeepWith
cloneDeepWith	R	._cloneDeepWith()										
._cloneDeepWith	R	._cloneDeepWith()										
._cloneWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.cloneWith(value, [customizer])</code></pre><p>This method is like <code>_.clone</code> except that it accepts <code>customizer</code> which is invoked to produce the cloned value. If <code>customizer</code> returns <code>undefined</code>, cloning is handled by the method instead. The <code>customizer</code> is invoked with up to four arguments; <em>(value [, index|key, object, stack])</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to clone.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize cloning.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the cloned value.</p></pre><span class="prog__sub">Example</span><pre><code>function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(false);\n  }\n}\n \nvar el = _.cloneWith(document.body, customizer);\n \nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 0\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#cloneWith
cloneWith	R	._cloneWith()										
._cloneWith	R	._cloneWith()										
._conformsTo()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.conformsTo(object, source)</code></pre><p>Checks if <code>object</code> conforms to <code>source</code> by invoking the predicate properties of <code>source</code> with the corresponding property values of <code>object</code>.<br><br><strong>Note:</strong> This method is equivalent to <code>_.conforms</code> when <code>source</code> is partially applied.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>source</code> <em>(Object)</em>: The object of property predicates to conform to.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>object</code> conforms, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1, 'b': 2 };\n \n_.conformsTo(object, { 'b': function(n) { return n > 1; } });\n// => true\n \n_.conformsTo(object, { 'b': function(n) { return n > 2; } });\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#conformsTo
conformsTo	R	._conformsTo()										
._conformsTo	R	._conformsTo()										
._eq()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.eq(value, other)</code></pre><p>Performs a <code>SameValueZero</code> comparison between two values to determine if they are equivalent.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if the values are equivalent, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1 };\nvar other = { 'a': 1 };\n \n_.eq(object, object);\n// => true\n \n_.eq(object, other);\n// => false\n \n_.eq('a', 'a');\n// => true\n \n_.eq('a', Object('a'));\n// => false\n \n_.eq(NaN, NaN);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#eq
eq	R	._eq()										
._eq	R	._eq()										
._gt()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.gt(value, other)</code></pre><p>Checks if <code>value</code> is greater than <code>other</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is greater than <code>other</code>, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.gt(3, 1);\n// => true\n \n_.gt(3, 3);\n// => false\n \n_.gt(1, 3);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#gt
gt	R	._gt()										
._gt	R	._gt()										
._gte()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.gte(value, other)</code></pre><p>Checks if <code>value</code> is greater than or equal to <code>other</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is greater than or equal to <code>other</code>, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.gte(3, 1);\n// => true\n \n_.gte(3, 3);\n// => true\n \n_.gte(1, 3);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#gte
gte	R	._gte()										
._gte	R	._gte()										
._isArguments()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isArguments(value)</code></pre><p>Checks if <code>value</code> is likely an <code>arguments</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an <code>arguments</code> object, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isArguments(function() { return arguments; }());\n// => true\n \n_.isArguments([1, 2, 3]);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isArguments
isArguments	R	._isArguments()										
._isArguments	R	._isArguments()										
._isArray()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isArray(value)</code></pre><p>Checks if <code>value</code> is classified as an <code>Array</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an array, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isArray([1, 2, 3]);\n// => true\n \n_.isArray(document.body.children);\n// => false\n \n_.isArray('abc');\n// => false\n \n_.isArray(_.noop);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isArray
isArray	R	._isArray()										
._isArray	R	._isArray()										
._isArrayBuffer()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isArrayBuffer(value)</code></pre><p>Checks if <code>value</code> is classified as an <code>ArrayBuffer</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an array buffer, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isArrayBuffer(new ArrayBuffer(2));\n// => true\n \n_.isArrayBuffer(new Array(2));\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isArrayBuffer
isArrayBuffer	R	._isArrayBuffer()										
._isArrayBuffer	R	._isArrayBuffer()										
._isArrayLike()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isArrayLike(value)</code></pre><p>Checks if <code>value</code> is array-like. A value is considered array-like if it&apos;s not a function and has a <code>value.length</code> that&apos;s an integer greater than or equal to <code>0</code> and less than or equal to <code>Number.MAX_SAFE_INTEGER</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is array-like, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isArrayLike([1, 2, 3]);\n// => true\n \n_.isArrayLike(document.body.children);\n// => true\n \n_.isArrayLike('abc');\n// => true\n \n_.isArrayLike(_.noop);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isArrayLike
isArrayLike	R	._isArrayLike()										
._isArrayLike	R	._isArrayLike()										
._isArrayLikeObject()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isArrayLikeObject(value)</code></pre><p>This method is like <code>_.isArrayLike</code> except that it also checks if <code>value</code> is an object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an array-like object, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isArrayLikeObject([1, 2, 3]);\n// => true\n \n_.isArrayLikeObject(document.body.children);\n// => true\n \n_.isArrayLikeObject('abc');\n// => false\n \n_.isArrayLikeObject(_.noop);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isArrayLikeObject
isArrayLikeObject	R	._isArrayLikeObject()										
._isArrayLikeObject	R	._isArrayLikeObject()										
._isBoolean()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isBoolean(value)</code></pre><p>Checks if <code>value</code> is classified as a boolean primitive or object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a boolean, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isBoolean(false);\n// => true\n \n_.isBoolean(null);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isBoolean
isBoolean	R	._isBoolean()										
._isBoolean	R	._isBoolean()										
._isBuffer()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isBuffer(value)</code></pre><p>Checks if <code>value</code> is a buffer.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a buffer, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isBuffer(new Buffer(2));\n// => true\n \n_.isBuffer(new Uint8Array(2));\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isBuffer
isBuffer	R	._isBuffer()										
._isBuffer	R	._isBuffer()										
._isDate()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isDate(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>Date</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a date object, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isDate(new Date);\n// => true\n \n_.isDate('Mon April 23 2012');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isDate
isDate	R	._isDate()										
._isDate	R	._isDate()										
._isElement()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isElement(value)</code></pre><p>Checks if <code>value</code> is likely a DOM element.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a DOM element, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isElement(document.body);\n// => true\n \n_.isElement('<body>');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isElement
isElement	R	._isElement()										
._isElement	R	._isElement()										
._isEmpty()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isEmpty(value)</code></pre><p>Checks if <code>value</code> is an empty object, collection, map, or set.<br><br>Objects are considered empty if they have no own enumerable string keyed properties.<br><br>Array-like values such as <code>arguments</code> objects, arrays, buffers, strings, or jQuery-like collections are considered empty if they have a <code>length</code> of <code>0</code>. Similarly, maps and sets are considered empty if they have a <code>size</code> of <code>0</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is empty, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isEmpty(null);\n// => true\n \n_.isEmpty(true);\n// => true\n \n_.isEmpty(1);\n// => true\n \n_.isEmpty([1, 2, 3]);\n// => false\n \n_.isEmpty({ 'a': 1 });\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isEmpty
isEmpty	R	._isEmpty()										
._isEmpty	R	._isEmpty()										
._isEqual()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isEqual(value, other)</code></pre><p>Performs a deep comparison between two values to determine if they are equivalent.<br><br><strong>Note:</strong> This method supports comparing arrays, array buffers, booleans, date objects, error objects, maps, numbers, <code>Object</code> objects, regexes, sets, strings, symbols, and typed arrays. <code>Object</code> objects are compared by their own, not inherited, enumerable properties. Functions and DOM nodes are compared by strict equality, i.e. <code>===</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if the values are equivalent, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1 };\nvar other = { 'a': 1 };\n \n_.isEqual(object, other);\n// => true\n \nobject === other;\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isEqual
isEqual	R	._isEqual()										
._isEqual	R	._isEqual()										
._isEqualWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isEqualWith(value, other, [customizer])</code></pre><p>This method is like <code>_.isEqual</code> except that it accepts <code>customizer</code> which is invoked to compare values. If <code>customizer</code> returns <code>undefined</code>, comparisons are handled by the method instead. The <code>customizer</code> is invoked with up to six arguments: <em>(objValue, othValue [, index|key, object, other, stack])</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize comparisons.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if the values are equivalent, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n \nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n \nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n \n_.isEqualWith(array, other, customizer);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isEqualWith
isEqualWith	R	._isEqualWith()										
._isEqualWith	R	._isEqualWith()										
._isError()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isError(value)</code></pre><p>Checks if <code>value</code> is an <code>Error</code>, <code>EvalError</code>, <code>RangeError</code>, <code>ReferenceError</code>, <code>SyntaxError</code>, <code>TypeError</code>, or <code>URIError</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an error object, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isError(new Error);\n// => true\n \n_.isError(Error);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isError
isError	R	._isError()										
._isError	R	._isError()										
._isFinite()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isFinite(value)</code></pre><p>Checks if <code>value</code> is a finite primitive number.<br><br><strong>Note:</strong> This method is based on <code>Number.isFinite</code> </p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a finite number, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isFinite(3);\n// => true\n \n_.isFinite(Number.MIN_VALUE);\n// => true\n \n_.isFinite(Infinity);\n// => false\n \n_.isFinite('3');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isFinite
isFinite	R	._isFinite()										
._isFinite	R	._isFinite()										
._isFunction()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isFunction(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>Function</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a function, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isFunction(_);\n// => true\n \n_.isFunction(/abc/);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isFunction
isFunction	R	._isFunction()										
._isFunction	R	._isFunction()										
._isInteger()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isInteger(value)</code></pre><p>Checks if <code>value</code> is an integer.<br><br><strong>Note:</strong> This method is based on <code>Number.isInteger</code> </p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an integer, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isInteger(3);\n// => true\n \n_.isInteger(Number.MIN_VALUE);\n// => false\n \n_.isInteger(Infinity);\n// => false\n \n_.isInteger('3');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isInteger
isInteger	R	._isInteger()										
._isInteger	R	._isInteger()										
._isLength()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isLength(value)</code></pre><p>Checks if <code>value</code> is a valid array-like length.<br><br><strong>Note:</strong> This method is loosely based on <code>ToLength</code> </p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a valid length, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isLength(3);\n// => true\n \n_.isLength(Number.MIN_VALUE);\n// => false\n \n_.isLength(Infinity);\n// => false\n \n_.isLength('3');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isLength
isLength	R	._isLength()										
._isLength	R	._isLength()										
._isMap()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isMap(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>Map</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a map, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isMap(new Map);\n// => true\n \n_.isMap(new WeakMap);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isMap
isMap	R	._isMap()										
._isMap	R	._isMap()										
._isMatch()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isMatch(object, source)</code></pre><p>Performs a partial deep comparison between <code>object</code> and <code>source</code> to determine if <code>object</code> contains equivalent property values.<br><br><strong>Note:</strong> This method is equivalent to <code>_.matches</code> when <code>source</code> is partially applied.<br><br>Partial comparisons will match empty array and empty object <code>source</code> values against any array or object value, respectively. See <code>_.isEqual</code> for a list of supported value comparisons.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>source</code> <em>(Object)</em>: The object of property values to match.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>object</code> is a match, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1, 'b': 2 };\n \n_.isMatch(object, { 'b': 2 });\n// => true\n \n_.isMatch(object, { 'b': 1 });\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isMatch
isMatch	R	._isMatch()										
._isMatch	R	._isMatch()										
._isMatchWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isMatchWith(object, source, [customizer])</code></pre><p>This method is like <code>_.isMatch</code> except that it accepts <code>customizer</code> which is invoked to compare values. If <code>customizer</code> returns <code>undefined</code>, comparisons are handled by the method instead. The <code>customizer</code> is invoked with five arguments: <em>(objValue, srcValue, index|key, object, source)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>source</code> <em>(Object)</em>: The object of property values to match.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize comparisons.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>object</code> is a match, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n \nfunction customizer(objValue, srcValue) {\n  if (isGreeting(objValue) && isGreeting(srcValue)) {\n    return true;\n  }\n}\n \nvar object = { 'greeting': 'hello' };\nvar source = { 'greeting': 'hi' };\n \n_.isMatchWith(object, source, customizer);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isMatchWith
isMatchWith	R	._isMatchWith()										
._isMatchWith	R	._isMatchWith()										
._isNaN()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isNaN(value)</code></pre><p>Checks if <code>value</code> is <code>NaN</code>.<br><br><strong>Note:</strong> This method is based on <code>Number.isNaN</code> and is not the same as global <code>isNaN</code> which returns <code>true</code> for <code>undefined</code> and other non-number values.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is <code>NaN</code>, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isNaN(NaN);\n// => true\n \n_.isNaN(new Number(NaN));\n// => true\n \nisNaN(undefined);\n// => true\n \n_.isNaN(undefined);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isNaN
isNaN	R	._isNaN()										
._isNaN	R	._isNaN()										
._isNative()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isNative(value)</code></pre><p>Checks if <code>value</code> is a pristine native function.<br><br><strong>Note:</strong> This method can&apos;t reliably detect native functions in the presence of the core-js package because core-js circumvents this kind of detection. Despite multiple requests, the core-js maintainer has made it clear: any attempt to fix the detection will be obstructed. As a result, we&apos;re left with little choice but to throw an error. Unfortunately, this also affects packages, like   which rely on core-js.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a native function, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isNative(Array.prototype.push);\n// => true\n \n_.isNative(_);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isNative
isNative	R	._isNative()										
._isNative	R	._isNative()										
._isNil()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isNil(value)</code></pre><p>Checks if <code>value</code> is <code>null</code> or <code>undefined</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is nullish, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isNil(null);\n// => true\n \n_.isNil(void 0);\n// => true\n \n_.isNil(NaN);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isNil
isNil	R	._isNil()										
._isNil	R	._isNil()										
._isNull()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isNull(value)</code></pre><p>Checks if <code>value</code> is <code>null</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is <code>null</code>, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isNull(null);\n// => true\n \n_.isNull(void 0);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isNull
isNull	R	._isNull()										
._isNull	R	._isNull()										
._isNumber()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isNumber(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>Number</code> primitive or object.<br><br><strong>Note:</strong> To exclude <code>Infinity</code>, <code>-Infinity</code>, and <code>NaN</code>, which are classified as numbers, use the <code>_.isFinite</code> method.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a number, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isNumber(3);\n// => true\n \n_.isNumber(Number.MIN_VALUE);\n// => true\n \n_.isNumber(Infinity);\n// => true\n \n_.isNumber('3');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isNumber
isNumber	R	._isNumber()										
._isNumber	R	._isNumber()										
._isObject()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isObject(value)</code></pre><p>Checks if <code>value</code> is the  of <code>Object</code>. <em>(e.g. arrays, functions, objects, regexes, <code>new Number(0)</code>, and <code>new String(&apos;&apos;)</code>)</em></p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an object, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isObject({});\n// => true\n \n_.isObject([1, 2, 3]);\n// => true\n \n_.isObject(_.noop);\n// => true\n \n_.isObject(null);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isObject
isObject	R	._isObject()										
._isObject	R	._isObject()										
._isObjectLike()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isObjectLike(value)</code></pre><p>Checks if <code>value</code> is object-like. A value is object-like if it&apos;s not <code>null</code> and has a <code>typeof</code> result of &quot;object&quot;.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is object-like, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isObjectLike({});\n// => true\n \n_.isObjectLike([1, 2, 3]);\n// => true\n \n_.isObjectLike(_.noop);\n// => false\n \n_.isObjectLike(null);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isObjectLike
isObjectLike	R	._isObjectLike()										
._isObjectLike	R	._isObjectLike()										
._isPlainObject()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isPlainObject(value)</code></pre><p>Checks if <code>value</code> is a plain object, that is, an object created by the <code>Object</code> constructor or one with a <code>[[Prototype]]</code> of <code>null</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a plain object, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n}\n \n_.isPlainObject(new Foo);\n// => false\n \n_.isPlainObject([1, 2, 3]);\n// => false\n \n_.isPlainObject({ 'x': 0, 'y': 0 });\n// => true\n \n_.isPlainObject(Object.create(null));\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isPlainObject
isPlainObject	R	._isPlainObject()										
._isPlainObject	R	._isPlainObject()										
._isRegExp()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isRegExp(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>RegExp</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a regexp, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isRegExp(/abc/);\n// => true\n \n_.isRegExp('/abc/');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isRegExp
isRegExp	R	._isRegExp()										
._isRegExp	R	._isRegExp()										
._isSafeInteger()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isSafeInteger(value)</code></pre><p>Checks if <code>value</code> is a safe integer. An integer is safe if it&apos;s an IEEE-754 double precision number which isn&apos;t the result of a rounded unsafe integer.<br><br><strong>Note:</strong> This method is based on <code>Number.isSafeInteger</code> </p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a safe integer, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isSafeInteger(3);\n// => true\n \n_.isSafeInteger(Number.MIN_VALUE);\n// => false\n \n_.isSafeInteger(Infinity);\n// => false\n \n_.isSafeInteger('3');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isSafeInteger
isSafeInteger	R	._isSafeInteger()										
._isSafeInteger	R	._isSafeInteger()										
._isSet()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isSet(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>Set</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a set, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isSet(new Set);\n// => true\n \n_.isSet(new WeakSet);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isSet
isSet	R	._isSet()										
._isSet	R	._isSet()										
._isString()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isString(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>String</code> primitive or object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a string, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isString('abc');\n// => true\n \n_.isString(1);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isString
isString	R	._isString()										
._isString	R	._isString()										
._isSymbol()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isSymbol(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>Symbol</code> primitive or object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a symbol, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isSymbol(Symbol.iterator);\n// => true\n \n_.isSymbol('abc');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isSymbol
isSymbol	R	._isSymbol()										
._isSymbol	R	._isSymbol()										
._isTypedArray()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isTypedArray(value)</code></pre><p>Checks if <code>value</code> is classified as a typed array.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a typed array, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isTypedArray(new Uint8Array);\n// => true\n \n_.isTypedArray([]);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isTypedArray
isTypedArray	R	._isTypedArray()										
._isTypedArray	R	._isTypedArray()										
._isUndefined()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isUndefined(value)</code></pre><p>Checks if <code>value</code> is <code>undefined</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is <code>undefined</code>, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isUndefined(void 0);\n// => true\n \n_.isUndefined(null);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isUndefined
isUndefined	R	._isUndefined()										
._isUndefined	R	._isUndefined()										
._isWeakMap()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isWeakMap(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>WeakMap</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a weak map, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isWeakMap(new WeakMap);\n// => true\n \n_.isWeakMap(new Map);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isWeakMap
isWeakMap	R	._isWeakMap()										
._isWeakMap	R	._isWeakMap()										
._isWeakSet()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.isWeakSet(value)</code></pre><p>Checks if <code>value</code> is classified as a <code>WeakSet</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a weak set, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.isWeakSet(new WeakSet);\n// => true\n \n_.isWeakSet(new Set);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#isWeakSet
isWeakSet	R	._isWeakSet()										
._isWeakSet	R	._isWeakSet()										
._lt()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.lt(value, other)</code></pre><p>Checks if <code>value</code> is less than <code>other</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is less than <code>other</code>, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.lt(1, 3);\n// => true\n \n_.lt(3, 3);\n// => false\n \n_.lt(3, 1);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#lt
lt	R	._lt()										
._lt	R	._lt()										
._lte()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.lte(value, other)</code></pre><p>Checks if <code>value</code> is less than or equal to <code>other</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is less than or equal to <code>other</code>, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.lte(1, 3);\n// => true\n \n_.lte(3, 3);\n// => true\n \n_.lte(3, 1);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#lte
lte	R	._lte()										
._lte	R	._lte()										
._toArray()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toArray(value)</code></pre><p>Converts <code>value</code> to an array.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the converted array.</p></pre><span class="prog__sub">Example</span><pre><code>_.toArray({ 'a': 1, 'b': 2 });\n// => [1, 2]\n \n_.toArray('abc');\n// => ['a', 'b', 'c']\n \n_.toArray(1);\n// => []\n \n_.toArray(null);\n// => []\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toArray
toArray	R	._toArray()										
._toArray	R	._toArray()										
._toFinite()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toFinite(value)</code></pre><p>Converts <code>value</code> to a finite number.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the converted number.</p></pre><span class="prog__sub">Example</span><pre><code>_.toFinite(3);\n// => 3.2\n \n_.toFinite(Number.MIN_VALUE);\n// => 5e-324\n \n_.toFinite(Infinity);\n// => 1.7976931348623157e+308\n \n_.toFinite('3.2');\n// => 3.2\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toFinite
toFinite	R	._toFinite()										
._toFinite	R	._toFinite()										
._toInteger()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toInteger(value)</code></pre><p>Converts <code>value</code> to an integer.<br><br><strong>Note:</strong> This method is loosely based on <code>ToInteger</code> </p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the converted integer.</p></pre><span class="prog__sub">Example</span><pre><code>_.toInteger(3);\n// => 3\n \n_.toInteger(Number.MIN_VALUE);\n// => 0\n \n_.toInteger(Infinity);\n// => 1.7976931348623157e+308\n \n_.toInteger('3.2');\n// => 3\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toInteger
toInteger	R	._toInteger()										
._toInteger	R	._toInteger()										
._toLength()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toLength(value)</code></pre><p>Converts <code>value</code> to an integer suitable for use as the length of an array-like object.<br><br><strong>Note:</strong> This method is based on <code>ToLength</code> </p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the converted integer.</p></pre><span class="prog__sub">Example</span><pre><code>_.toLength(3);\n// => 3\n \n_.toLength(Number.MIN_VALUE);\n// => 0\n \n_.toLength(Infinity);\n// => 4294967295\n \n_.toLength('3.2');\n// => 3\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toLength
toLength	R	._toLength()										
._toLength	R	._toLength()										
._toNumber()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toNumber(value)</code></pre><p>Converts <code>value</code> to a number.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to process.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the number.</p></pre><span class="prog__sub">Example</span><pre><code>_.toNumber(3);\n// => 3.2\n \n_.toNumber(Number.MIN_VALUE);\n// => 5e-324\n \n_.toNumber(Infinity);\n// => Infinity\n \n_.toNumber('3.2');\n// => 3.2\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toNumber
toNumber	R	._toNumber()										
._toNumber	R	._toNumber()										
._toPlainObject()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toPlainObject(value)</code></pre><p>Converts <code>value</code> to a plain object flattening inherited enumerable string keyed properties of <code>value</code> to own properties of the plain object.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the converted plain object.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.assign({ 'a': 1 }, new Foo);\n// => { 'a': 1, 'b': 2 }\n \n_.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n// => { 'a': 1, 'b': 2, 'c': 3 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toPlainObject
toPlainObject	R	._toPlainObject()										
._toPlainObject	R	._toPlainObject()										
._toSafeInteger()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toSafeInteger(value)</code></pre><p>Converts <code>value</code> to a safe integer. A safe integer can be compared and represented correctly.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the converted integer.</p></pre><span class="prog__sub">Example</span><pre><code>_.toSafeInteger(3);\n// => 3\n \n_.toSafeInteger(Number.MIN_VALUE);\n// => 0\n \n_.toSafeInteger(Infinity);\n// => 9007199254740991\n \n_.toSafeInteger('3.2');\n// => 3\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toSafeInteger
toSafeInteger	R	._toSafeInteger()										
._toSafeInteger	R	._toSafeInteger()										
._toString()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toString(value)</code></pre><p>Converts <code>value</code> to a string. An empty string is returned for <code>null</code> and <code>undefined</code> values. The sign of <code>-0</code> is preserved.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the converted string.</p></pre><span class="prog__sub">Example</span><pre><code>_.toString(null);\n// => ''\n \n_.toString(-0);\n// => '-0'\n \n_.toString([1, 2, 3]);\n// => '1,2,3'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toString
toString	R	._toString()										
._toString	R	._toString()										
._add()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.add(augend, addend)</code></pre><p>Adds two numbers.</p><span class="prog__sub">Arguments</span><ol><li><code>augend</code> <em>(number)</em>: The first number in an addition.</li><li><code>addend</code> <em>(number)</em>: The second number in an addition.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the total.</p></pre><span class="prog__sub">Example</span><pre><code>_.add(6, 4);\n// => 10\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#add
add	R	._add()										
._add	R	._add()										
._ceil()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.ceil(number, [precision=0])</code></pre><p>Computes <code>number</code> rounded up to <code>precision</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>number</code> <em>(number)</em>: The number to round up.</li><li><code>[precision=0]</code> <em>(number)</em>: The precision to round up to.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the rounded up number.</p></pre><span class="prog__sub">Example</span><pre><code>_.ceil(4);\n// => 5\n \n_.ceil(6, 2);\n// => 6.01\n \n_.ceil(6040, -2);\n// => 6100\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#ceil
ceil	R	._ceil()										
._ceil	R	._ceil()										
._divide()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.divide(dividend, divisor)</code></pre><p>Divide two numbers.</p><span class="prog__sub">Arguments</span><ol><li><code>dividend</code> <em>(number)</em>: The first number in a division.</li><li><code>divisor</code> <em>(number)</em>: The second number in a division.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the quotient.</p></pre><span class="prog__sub">Example</span><pre><code>_.divide(6, 4);\n// => 1.5\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#divide
divide	R	._divide()										
._divide	R	._divide()										
._floor()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.floor(number, [precision=0])</code></pre><p>Computes <code>number</code> rounded down to <code>precision</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>number</code> <em>(number)</em>: The number to round down.</li><li><code>[precision=0]</code> <em>(number)</em>: The precision to round down to.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the rounded down number.</p></pre><span class="prog__sub">Example</span><pre><code>_.floor(4);\n// => 4\n \n_.floor(0, 2);\n// => 0.04\n \n_.floor(4060, -2);\n// => 4000\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#floor
floor	R	._floor()										
._floor	R	._floor()										
._max()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.max(array)</code></pre><p>Computes the maximum value of <code>array</code>. If <code>array</code> is empty or falsey, <code>undefined</code> is returned.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the maximum value.</p></pre><span class="prog__sub">Example</span><pre><code>_.max([4, 2, 8, 6]);\n// => 8\n \n_.max([]);\n// => undefined\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#max
max	R	._max()										
._max	R	._max()										
._maxBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.maxBy(array, [iteratee=_.identity])</code></pre><p>This method is like <code>_.max</code> except that it accepts <code>iteratee</code> which is invoked for each element in <code>array</code> to generate the criterion by which the value is ranked. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the maximum value.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'n': 1 }, { 'n': 2 }];\n \n_.maxBy(objects, function(o) { return o.n; });\n// => { 'n': 2 }\n \n// The `_.property` iteratee shorthand.\n_.maxBy(objects, 'n');\n// => { 'n': 2 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#maxBy
maxBy	R	._maxBy()										
._maxBy	R	._maxBy()										
._mean()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.mean(array)</code></pre><p>Computes the mean of the values in <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the mean.</p></pre><span class="prog__sub">Example</span><pre><code>_.mean([4, 2, 8, 6]);\n// => 5\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#mean
mean	R	._mean()										
._mean	R	._mean()										
._meanBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.meanBy(array, [iteratee=_.identity])</code></pre><p>This method is like <code>_.mean</code> except that it accepts <code>iteratee</code> which is invoked for each element in <code>array</code> to generate the value to be averaged. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the mean.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n \n_.meanBy(objects, function(o) { return o.n; });\n// => 5\n \n// The `_.property` iteratee shorthand.\n_.meanBy(objects, 'n');\n// => 5\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#meanBy
meanBy	R	._meanBy()										
._meanBy	R	._meanBy()										
._min()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.min(array)</code></pre><p>Computes the minimum value of <code>array</code>. If <code>array</code> is empty or falsey, <code>undefined</code> is returned.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the minimum value.</p></pre><span class="prog__sub">Example</span><pre><code>_.min([4, 2, 8, 6]);\n// => 2\n \n_.min([]);\n// => undefined\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#min
min	R	._min()										
._min	R	._min()										
._minBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.minBy(array, [iteratee=_.identity])</code></pre><p>This method is like <code>_.min</code> except that it accepts <code>iteratee</code> which is invoked for each element in <code>array</code> to generate the criterion by which the value is ranked. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the minimum value.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'n': 1 }, { 'n': 2 }];\n \n_.minBy(objects, function(o) { return o.n; });\n// => { 'n': 1 }\n \n// The `_.property` iteratee shorthand.\n_.minBy(objects, 'n');\n// => { 'n': 1 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#minBy
minBy	R	._minBy()										
._minBy	R	._minBy()										
._multiply()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.multiply(multiplier, multiplicand)</code></pre><p>Multiply two numbers.</p><span class="prog__sub">Arguments</span><ol><li><code>multiplier</code> <em>(number)</em>: The first number in a multiplication.</li><li><code>multiplicand</code> <em>(number)</em>: The second number in a multiplication.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the product.</p></pre><span class="prog__sub">Example</span><pre><code>_.multiply(6, 4);\n// => 24\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#multiply
multiply	R	._multiply()										
._multiply	R	._multiply()										
._round()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.round(number, [precision=0])</code></pre><p>Computes <code>number</code> rounded to <code>precision</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>number</code> <em>(number)</em>: The number to round.</li><li><code>[precision=0]</code> <em>(number)</em>: The precision to round to.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the rounded number.</p></pre><span class="prog__sub">Example</span><pre><code>_.round(4);\n// => 4\n \n_.round(4, 2);\n// => 4.01\n \n_.round(4060, -2);\n// => 4100\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#round
round	R	._round()										
._round	R	._round()										
._subtract()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.subtract(minuend, subtrahend)</code></pre><p>Subtract two numbers.</p><span class="prog__sub">Arguments</span><ol><li><code>minuend</code> <em>(number)</em>: The first number in a subtraction.</li><li><code>subtrahend</code> <em>(number)</em>: The second number in a subtraction.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the difference.</p></pre><span class="prog__sub">Example</span><pre><code>_.subtract(6, 4);\n// => 2\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#subtract
subtract	R	._subtract()										
._subtract	R	._subtract()										
._sum()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sum(array)</code></pre><p>Computes the sum of the values in <code>array</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the sum.</p></pre><span class="prog__sub">Example</span><pre><code>_.sum([4, 2, 8, 6]);\n// => 20\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sum
sum	R	._sum()										
._sum	R	._sum()										
._sumBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.sumBy(array, [iteratee=_.identity])</code></pre><p>This method is like <code>_.sum</code> except that it accepts <code>iteratee</code> which is invoked for each element in <code>array</code> to generate the value to be summed. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the sum.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n \n_.sumBy(objects, function(o) { return o.n; });\n// => 20\n \n// The `_.property` iteratee shorthand.\n_.sumBy(objects, 'n');\n// => 20\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#sumBy
sumBy	R	._sumBy()										
._sumBy	R	._sumBy()										
._clamp()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.clamp(number, [lower], upper)</code></pre><p>Clamps <code>number</code> within the inclusive <code>lower</code> and <code>upper</code> bounds.</p><span class="prog__sub">Arguments</span><ol><li><code>number</code> <em>(number)</em>: The number to clamp.</li><li><code>[lower]</code> <em>(number)</em>: The lower bound.</li><li><code>upper</code> <em>(number)</em>: The upper bound.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the clamped number.</p></pre><span class="prog__sub">Example</span><pre><code>_.clamp(-10, -5, 5);\n// => -5\n \n_.clamp(10, -5, 5);\n// => 5\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#clamp
clamp	R	._clamp()										
._clamp	R	._clamp()										
._inRange()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.inRange(number, [start=0], end)</code></pre><p>Checks if <code>n</code> is between <code>start</code> and up to, but not including, <code>end</code>. If <code>end</code> is not specified, it&apos;s set to <code>start</code> with <code>start</code> then set to <code>0</code>. If <code>start</code> is greater than <code>end</code> the params are swapped to support negative ranges.</p><span class="prog__sub">Arguments</span><ol><li><code>number</code> <em>(number)</em>: The number to check.</li><li><code>[start=0]</code> <em>(number)</em>: The start of the range.</li><li><code>end</code> <em>(number)</em>: The end of the range.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>number</code> is in the range, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.inRange(3, 2, 4);\n// => true\n \n_.inRange(4, 8);\n// => true\n \n_.inRange(4, 2);\n// => false\n \n_.inRange(2, 2);\n// => false\n \n_.inRange(1, 2);\n// => true\n \n_.inRange(5, 4);\n// => false\n \n_.inRange(-3, -2, -6);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#inRange
inRange	R	._inRange()										
._inRange	R	._inRange()										
._random()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.random([lower=0], [upper=1], [floating])</code></pre><p>Produces a random number between the inclusive <code>lower</code> and <code>upper</code> bounds. If only one argument is provided a number between <code>0</code> and the given number is returned. If <code>floating</code> is <code>true</code>, or either <code>lower</code> or <code>upper</code> are floats, a floating-point number is returned instead of an integer.<br><br><strong>Note:</strong> JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.</p><span class="prog__sub">Arguments</span><ol><li><code>[lower=0]</code> <em>(number)</em>: The lower bound.</li><li><code>[upper=1]</code> <em>(number)</em>: The upper bound.</li><li><code>[floating]</code> <em>(boolean)</em>: Specify returning a floating-point number.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the random number.</p></pre><span class="prog__sub">Example</span><pre><code>_.random(0, 5);\n// => an integer between 0 and 5\n \n_.random(5);\n// => also an integer between 0 and 5\n \n_.random(5, true);\n// => a floating-point number between 0 and 5\n \n_.random(1, 5);\n// => a floating-point number between 1.2 and 5.2\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#random
random	R	._random()										
._random	R	._random()										
._assign()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.assign(object, [sources])</code></pre><p>Assigns own enumerable string keyed properties of source objects to the destination object. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.<br><br><strong>Note:</strong> This method mutates <code>object</code> and is loosely based on <code>Object.assign</code> </p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n}\n \nfunction Bar() {\n  this.c = 3;\n}\n \nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n \n_.assign({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'c': 3 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#assign
assign	R	._assign()										
._assign	R	._assign()										
._assignIn()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.assignIn(object, [sources])</code></pre><p>This method is like <code>_.assign</code> except that it iterates over own and inherited source properties.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol><span class="prog__sub">Returns</span><pre><p><em>_.extend</em></p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n}\n \nfunction Bar() {\n  this.c = 3;\n}\n \nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n \n_.assignIn({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#assignIn
assignIn	R	._assignIn()										
._assignIn	R	._assignIn()										
._assignInWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.assignInWith(object, sources, [customizer])</code></pre><p>This method is like <code>_.assignIn</code> except that it accepts <code>customizer</code> which is invoked to produce the assigned values. If <code>customizer</code> returns <code>undefined</code>, assignment is handled by the method instead. The <code>customizer</code> is invoked with five arguments: <em>(objValue, srcValue, key, object, source)</em>.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>sources</code> <em>(...Object)</em>: The source objects.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize assigned values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>_.extendWith</em></p></pre><span class="prog__sub">Example</span><pre><code>function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n \nvar defaults = _.partialRight(_.assignInWith, customizer);\n \ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#assignInWith
assignInWith	R	._assignInWith()										
._assignInWith	R	._assignInWith()										
._assignWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.assignWith(object, sources, [customizer])</code></pre><p>This method is like <code>_.assign</code> except that it accepts <code>customizer</code> which is invoked to produce the assigned values. If <code>customizer</code> returns <code>undefined</code>, assignment is handled by the method instead. The <code>customizer</code> is invoked with five arguments: <em>(objValue, srcValue, key, object, source)</em>.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>sources</code> <em>(...Object)</em>: The source objects.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize assigned values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n \nvar defaults = _.partialRight(_.assignWith, customizer);\n \ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#assignWith
assignWith	R	._assignWith()										
._assignWith	R	._assignWith()										
._at()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.at(object, [paths])</code></pre><p>Creates an array of values corresponding to <code>paths</code> of <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[paths]</code> <em>(...(string|string[]))</em>: The property paths to pick.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the picked values.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n \n_.at(object, ['a[0].b.c', 'a[1]']);\n// => [3, 4]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#at
at	R	._at()										
._at	R	._at()										
._create()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.create(prototype, [properties])</code></pre><p>Creates an object that inherits from the <code>prototype</code> object. If a <code>properties</code> object is given, its own enumerable string keyed properties are assigned to the created object.</p><span class="prog__sub">Arguments</span><ol><li><code>prototype</code> <em>(Object)</em>: The object to inherit from.</li><li><code>[properties]</code> <em>(Object)</em>: The properties to assign to the object.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new object.</p></pre><span class="prog__sub">Example</span><pre><code>function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n \nfunction Circle() {\n  Shape.call(this);\n}\n \nCircle.prototype = _.create(Shape.prototype, {\n  'constructor': Circle\n});\n \nvar circle = new Circle;\ncircle instanceof Circle;\n// => true\n \ncircle instanceof Shape;\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#create
create	R	._create()										
._create	R	._create()										
._defaults()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.defaults(object, [sources])</code></pre><p>Assigns own and inherited enumerable string keyed properties of source objects to the destination object for all destination properties that resolve to <code>undefined</code>. Source objects are applied from left to right. Once a property is set, additional values of the same property are ignored.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#defaults
defaults	R	._defaults()										
._defaults	R	._defaults()										
._defaultsDeep()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.defaultsDeep(object, [sources])</code></pre><p>This method is like <code>_.defaults</code> except that it recursively assigns default properties.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n// => { 'a': { 'b': 2, 'c': 3 } }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#defaultsDeep
defaultsDeep	R	._defaultsDeep()										
._defaultsDeep	R	._defaultsDeep()										
._findKey()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.findKey(object, [predicate=_.identity])</code></pre><p>This method is like <code>_.find</code> except that it returns the key of the first element <code>predicate</code> returns truthy for instead of the element itself.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the key of the matched element, else <code>undefined</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n \n_.findKey(users, function(o) { return o.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n \n// The `_.matches` iteratee shorthand.\n_.findKey(users, { 'age': 1, 'active': true });\n// => 'pebbles'\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findKey(users, ['active', false]);\n// => 'fred'\n \n// The `_.property` iteratee shorthand.\n_.findKey(users, 'active');\n// => 'barney'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#findKey
findKey	R	._findKey()										
._findKey	R	._findKey()										
._findLastKey()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.findLastKey(object, [predicate=_.identity])</code></pre><p>This method is like <code>_.findKey</code> except that it iterates over elements of a collection in the opposite order.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the key of the matched element, else <code>undefined</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n \n_.findLastKey(users, function(o) { return o.age < 40; });\n// => returns 'pebbles' assuming `_.findKey` returns 'barney'\n \n// The `_.matches` iteratee shorthand.\n_.findLastKey(users, { 'age': 36, 'active': true });\n// => 'barney'\n \n// The `_.matchesProperty` iteratee shorthand.\n_.findLastKey(users, ['active', false]);\n// => 'fred'\n \n// The `_.property` iteratee shorthand.\n_.findLastKey(users, 'active');\n// => 'pebbles'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#findLastKey
findLastKey	R	._findLastKey()										
._findLastKey	R	._findLastKey()										
._forIn()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.forIn(object, [iteratee=_.identity])</code></pre><p>Iterates over own and inherited enumerable string keyed properties of an object and invokes <code>iteratee</code> for each property. The iteratee is invoked with three arguments: <em>(value, key, object)</em>. Iteratee functions may exit iteration early by explicitly returning <code>false</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.forIn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#forIn
forIn	R	._forIn()										
._forIn	R	._forIn()										
._forInRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.forInRight(object, [iteratee=_.identity])</code></pre><p>This method is like <code>_.forIn</code> except that it iterates over properties of <code>object</code> in the opposite order.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.forInRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#forInRight
forInRight	R	._forInRight()										
._forInRight	R	._forInRight()										
._forOwn()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.forOwn(object, [iteratee=_.identity])</code></pre><p>Iterates over own enumerable string keyed properties of an object and invokes <code>iteratee</code> for each property. The iteratee is invoked with three arguments: <em>(value, key, object)</em>. Iteratee functions may exit iteration early by explicitly returning <code>false</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.forOwn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed).\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#forOwn
forOwn	R	._forOwn()										
._forOwn	R	._forOwn()										
._forOwnRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.forOwnRight(object, [iteratee=_.identity])</code></pre><p>This method is like <code>_.forOwn</code> except that it iterates over properties of <code>object</code> in the opposite order.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.forOwnRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#forOwnRight
forOwnRight	R	._forOwnRight()										
._forOwnRight	R	._forOwnRight()										
._functions()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.functions(object)</code></pre><p>Creates an array of function property names from own enumerable properties of <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the function names.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n \nFoo.prototype.c = _.constant('c');\n \n_.functions(new Foo);\n// => ['a', 'b']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#functions
functions	R	._functions()										
._functions	R	._functions()										
._functionsIn()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.functionsIn(object)</code></pre><p>Creates an array of function property names from own and inherited enumerable properties of <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the function names.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n \nFoo.prototype.c = _.constant('c');\n \n_.functionsIn(new Foo);\n// => ['a', 'b', 'c']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#functionsIn
functionsIn	R	._functionsIn()										
._functionsIn	R	._functionsIn()										
._get()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.get(object, path, [defaultValue])</code></pre><p>Gets the value at <code>path</code> of <code>object</code>. If the resolved value is <code>undefined</code>, the <code>defaultValue</code> is returned in its place.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to get.</li><li><code>[defaultValue]</code> <em>(*)</em>: The value returned for <code>undefined</code> resolved values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the resolved value.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': [{ 'b': { 'c': 3 } }] };\n \n_.get(object, 'a[0].b.c');\n// => 3\n \n_.get(object, ['a', '0', 'b', 'c']);\n// => 3\n \n_.get(object, 'a.b.c', 'default');\n// => 'default'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#get
get	R	._get()										
._get	R	._get()										
._has()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.has(object, path)</code></pre><p>Checks if <code>path</code> is a direct property of <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>path</code> exists, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': { 'b': 2 } };\nvar other = _.create({ 'a': _.create({ 'b': 2 }) });\n \n_.has(object, 'a');\n// => true\n \n_.has(object, 'a.b');\n// => true\n \n_.has(object, ['a', 'b']);\n// => true\n \n_.has(other, 'a');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#has
has	R	._has()										
._has	R	._has()										
._hasIn()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.hasIn(object, path)</code></pre><p>Checks if <code>path</code> is a direct or inherited property of <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>path</code> exists, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = _.create({ 'a': _.create({ 'b': 2 }) });\n \n_.hasIn(object, 'a');\n// => true\n \n_.hasIn(object, 'a.b');\n// => true\n \n_.hasIn(object, ['a', 'b']);\n// => true\n \n_.hasIn(object, 'b');\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#hasIn
hasIn	R	._hasIn()										
._hasIn	R	._hasIn()										
._invert()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.invert(object)</code></pre><p>Creates an object composed of the inverted keys and values of <code>object</code>. If <code>object</code> contains duplicate values, subsequent values overwrite property assignments of previous values.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to invert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new inverted object.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1, 'b': 2, 'c': 1 };\n \n_.invert(object);\n// => { '1': 'c', '2': 'b' }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#invert
invert	R	._invert()										
._invert	R	._invert()										
._invertBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.invertBy(object, [iteratee=_.identity])</code></pre><p>This method is like <code>_.invert</code> except that the inverted object is generated from the results of running each element of <code>object</code> thru <code>iteratee</code>. The corresponding inverted value of each inverted key is an array of keys responsible for generating the inverted value. The iteratee is invoked with one argument: <em>(value)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to invert.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new inverted object.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1, 'b': 2, 'c': 1 };\n \n_.invertBy(object);\n// => { '1': ['a', 'c'], '2': ['b'] }\n \n_.invertBy(object, function(value) {\n  return 'group' + value;\n});\n// => { 'group1': ['a', 'c'], 'group2': ['b'] }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#invertBy
invertBy	R	._invertBy()										
._invertBy	R	._invertBy()										
._invoke()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.invoke(object, path, [args])</code></pre><p>Invokes the method at <code>path</code> of <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path of the method to invoke.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke the method with.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the result of the invoked method.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n \n_.invoke(object, 'a[0].b.c.slice', 1, 3);\n// => [2, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#invoke
invoke	R	._invoke()										
._invoke	R	._invoke()										
._keys()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.keys(object)</code></pre><p>Creates an array of the own enumerable property names of <code>object</code>.<br><br><strong>Note:</strong> Non-object values are coerced to objects. See the  for more details.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the array of property names.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.keys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed)\n \n_.keys('hi');\n// => ['0', '1']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#keys
keys	R	._keys()										
._keys	R	._keys()										
._keysIn()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.keysIn(object)</code></pre><p>Creates an array of the own and inherited enumerable property names of <code>object</code>.<br><br><strong>Note:</strong> Non-object values are coerced to objects.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the array of property names.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.keysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#keysIn
keysIn	R	._keysIn()										
._keysIn	R	._keysIn()										
._mapKeys()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.mapKeys(object, [iteratee=_.identity])</code></pre><p>The opposite of <code>_.mapValues</code>  this method creates an object with the same values as <code>object</code> and keys generated by running each own enumerable string keyed property of <code>object</code> thru <code>iteratee</code>. The iteratee is invoked with three arguments: <em>(value, key, object)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new mapped object.</p></pre><span class="prog__sub">Example</span><pre><code>_.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n  return key + value;\n});\n// => { 'a1': 1, 'b2': 2 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#mapKeys
mapKeys	R	._mapKeys()										
._mapKeys	R	._mapKeys()										
._mapValues()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.mapValues(object, [iteratee=_.identity])</code></pre><p>Creates an object with the same keys as <code>object</code> and values generated by running each own enumerable string keyed property of <code>object</code> thru <code>iteratee</code>. The iteratee is invoked with three arguments:<br><em>(value, key, object)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new mapped object.</p></pre><span class="prog__sub">Example</span><pre><code>var users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n \n_.mapValues(users, function(o) { return o.age; });\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n \n// The `_.property` iteratee shorthand.\n_.mapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#mapValues
mapValues	R	._mapValues()										
._mapValues	R	._mapValues()										
._merge()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.merge(object, [sources])</code></pre><p>This method is like <code>_.assign</code> except that it recursively merges own and inherited enumerable string keyed properties of source objects into the destination object. Source properties that resolve to <code>undefined</code> are skipped if a destination value exists. Array and plain object properties are merged recursively. Other objects and value types are overridden by assignment. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n};\n \nvar other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n};\n \n_.merge(object, other);\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#merge
merge	R	._merge()										
._merge	R	._merge()										
._mergeWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.mergeWith(object, sources, customizer)</code></pre><p>This method is like <code>_.merge</code> except that it accepts <code>customizer</code> which is invoked to produce the merged values of the destination and source properties. If <code>customizer</code> returns <code>undefined</code>, merging is handled by the method instead. The <code>customizer</code> is invoked with six arguments:<br><em>(objValue, srcValue, key, object, source, stack)</em>.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>sources</code> <em>(...Object)</em>: The source objects.</li><li><code>customizer</code> <em>(Function)</em>: The function to customize assigned values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function customizer(objValue, srcValue) {\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n \nvar object = { 'a': [1], 'b': [2] };\nvar other = { 'a': [3], 'b': [4] };\n \n_.mergeWith(object, other, customizer);\n// => { 'a': [1, 3], 'b': [2, 4] }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#mergeWith
mergeWith	R	._mergeWith()										
._mergeWith	R	._mergeWith()										
._omit()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.omit(object, [paths])</code></pre><p>The opposite of <code>_.pick</code>  this method creates an object composed of the own and inherited enumerable property paths of <code>object</code> that are not omitted.<br><br><strong>Note:</strong> This method is considerably slower than <code>_.pick</code> </p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The source object.</li><li><code>[paths]</code> <em>(...(string|string[]))</em>: The property paths to omit.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new object.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.omit(object, ['a', 'c']);\n// => { 'b': '2' }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#omit
omit	R	._omit()										
._omit	R	._omit()										
._omitBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.omitBy(object, [predicate=_.identity])</code></pre><p>The opposite of <code>_.pickBy</code>  this method creates an object composed of the own and inherited enumerable string keyed properties of <code>object</code> that <code>predicate</code> doesn&apos;t return truthy for. The predicate is invoked with two arguments: <em>(value, key)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The source object.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per property.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new object.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.omitBy(object, _.isNumber);\n// => { 'b': '2' }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#omitBy
omitBy	R	._omitBy()										
._omitBy	R	._omitBy()										
._pick()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.pick(object, [paths])</code></pre><p>Creates an object composed of the picked <code>object</code> properties.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The source object.</li><li><code>[paths]</code> <em>(...(string|string[]))</em>: The property paths to pick.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new object.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.pick(object, ['a', 'c']);\n// => { 'a': 1, 'c': 3 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#pick
pick	R	._pick()										
._pick	R	._pick()										
._pickBy()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.pickBy(object, [predicate=_.identity])</code></pre><p>Creates an object composed of the <code>object</code> properties <code>predicate</code> returns truthy for. The predicate is invoked with two arguments: <em>(value, key)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The source object.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per property.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new object.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1, 'b': '2', 'c': 3 };\n \n_.pickBy(object, _.isNumber);\n// => { 'a': 1, 'c': 3 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#pickBy
pickBy	R	._pickBy()										
._pickBy	R	._pickBy()										
._result()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.result(object, path, [defaultValue])</code></pre><p>This method is like <code>_.get</code> except that if the resolved value is a function it&apos;s invoked with the <code>this</code> binding of its parent object and its result is returned.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to resolve.</li><li><code>[defaultValue]</code> <em>(*)</em>: The value returned for <code>undefined</code> resolved values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the resolved value.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n \n_.result(object, 'a[0].b.c1');\n// => 3\n \n_.result(object, 'a[0].b.c2');\n// => 4\n \n_.result(object, 'a[0].b.c3', 'default');\n// => 'default'\n \n_.result(object, 'a[0].b.c3', _.constant('default'));\n// => 'default'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#result
result	R	._result()										
._result	R	._result()										
._set()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.set(object, path, value)</code></pre><p>Sets the value at <code>path</code> of <code>object</code>. If a portion of <code>path</code> doesn&apos;t exist, it&apos;s created. Arrays are created for missing index properties while objects are created for all other missing properties. Use <code>_.setWith</code> to customize <code>path</code> creation.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to set.</li><li><code>value</code> <em>(*)</em>: The value to set.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': [{ 'b': { 'c': 3 } }] };\n \n_.set(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\n \n_.set(object, ['x', '0', 'y', 'z'], 5);\nconsole.log(object.x[0].y.z);\n// => 5\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#set
set	R	._set()										
._set	R	._set()										
._setWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.setWith(object, path, value, [customizer])</code></pre><p>This method is like <code>_.set</code> except that it accepts <code>customizer</code> which is invoked to produce the objects of <code>path</code>. If <code>customizer</code> returns <code>undefined</code> path creation is handled by the method instead. The <code>customizer</code> is invoked with three arguments: <em>(nsValue, key, nsObject)</em>.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to set.</li><li><code>value</code> <em>(*)</em>: The value to set.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize assigned values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = {};\n \n_.setWith(object, '[0][1]', 'a', Object);\n// => { '0': { '1': 'a' } }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#setWith
setWith	R	._setWith()										
._setWith	R	._setWith()										
._toPairs()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toPairs(object)</code></pre><p>Creates an array of own enumerable string keyed-value pairs for <code>object</code> which can be consumed by <code>_.fromPairs</code>  If <code>object</code> is a map or set, its entries are returned.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>_.entries</em></p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.toPairs(new Foo);\n// => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toPairs
toPairs	R	._toPairs()										
._toPairs	R	._toPairs()										
._toPairsIn()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toPairsIn(object)</code></pre><p>Creates an array of own and inherited enumerable string keyed-value pairs for <code>object</code> which can be consumed by <code>_.fromPairs</code>  If <code>object</code> is a map or set, its entries are returned.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>_.entriesIn</em></p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.toPairsIn(new Foo);\n// => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toPairsIn
toPairsIn	R	._toPairsIn()										
._toPairsIn	R	._toPairsIn()										
._transform()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.transform(object, [iteratee=_.identity], [accumulator])</code></pre><p>An alternative to <code>_.reduce</code>  this method transforms <code>object</code> to a new <code>accumulator</code> object which is the result of running each of its own enumerable string keyed properties thru <code>iteratee</code>, with each invocation potentially mutating the <code>accumulator</code> object. If <code>accumulator</code> is not provided, a new object with the same <code>[[Prototype]]</code> will be used. The iteratee is invoked with four arguments: <em>(accumulator, value, key, object)</em>. Iteratee functions may exit iteration early by explicitly returning <code>false</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[accumulator]</code> <em>(*)</em>: The custom accumulator value.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the accumulated value.</p></pre><span class="prog__sub">Example</span><pre><code>_.transform([2, 3, 4], function(result, n) {\n  result.push(n *= n);\n  return n % 2 == 0;\n}, []);\n// => [4, 9]\n \n_.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#transform
transform	R	._transform()										
._transform	R	._transform()										
._unset()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.unset(object, path)</code></pre><p>Removes the property at <code>path</code> of <code>object</code>.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to unset.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if the property is deleted, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': [{ 'b': { 'c': 7 } }] };\n_.unset(object, 'a[0].b.c');\n// => true\n \nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n \n_.unset(object, ['a', '0', 'b', 'c']);\n// => true\n \nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#unset
unset	R	._unset()										
._unset	R	._unset()										
._update()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.update(object, path, updater)</code></pre><p>This method is like <code>_.set</code> except that accepts <code>updater</code> to produce the value to set. Use <code>_.updateWith</code> to customize <code>path</code> creation. The <code>updater</code> is invoked with one argument: <em>(value)</em>.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to set.</li><li><code>updater</code> <em>(Function)</em>: The function to produce the updated value.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': [{ 'b': { 'c': 3 } }] };\n \n_.update(object, 'a[0].b.c', function(n) { return n * n; });\nconsole.log(object.a[0].b.c);\n// => 9\n \n_.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\nconsole.log(object.x[0].y.z);\n// => 0\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#update
update	R	._update()										
._update	R	._update()										
._updateWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.updateWith(object, path, updater, [customizer])</code></pre><p>This method is like <code>_.update</code> except that it accepts <code>customizer</code> which is invoked to produce the objects of <code>path</code>. If <code>customizer</code> returns <code>undefined</code> path creation is handled by the method instead. The <code>customizer</code> is invoked with three arguments: <em>(nsValue, key, nsObject)</em>.<br><br><strong>Note:</strong> This method mutates <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to set.</li><li><code>updater</code> <em>(Function)</em>: The function to produce the updated value.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize assigned values.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = {};\n \n_.updateWith(object, '[0][1]', _.constant('a'), Object);\n// => { '0': { '1': 'a' } }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#updateWith
updateWith	R	._updateWith()										
._updateWith	R	._updateWith()										
._values()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.values(object)</code></pre><p>Creates an array of the own enumerable string keyed property values of <code>object</code>.<br><br><strong>Note:</strong> Non-object values are coerced to objects.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the array of property values.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.values(new Foo);\n// => [1, 2] (iteration order is not guaranteed)\n \n_.values('hi');\n// => ['h', 'i']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#values
values	R	._values()										
._values	R	._values()										
._valuesIn()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.valuesIn(object)</code></pre><p>Creates an array of the own and inherited enumerable string keyed property values of <code>object</code>.<br><br><strong>Note:</strong> Non-object values are coerced to objects.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the array of property values.</p></pre><span class="prog__sub">Example</span><pre><code>function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n \nFoo.prototype.c = 3;\n \n_.valuesIn(new Foo);\n// => [1, 2, 3] (iteration order is not guaranteed)\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#valuesIn
valuesIn	R	._valuesIn()										
._valuesIn	R	._valuesIn()										
._lodash()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_(value)</code></pre><p><em>(Object)</em>: Returns the new <code>lodash</code> wrapper instance.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to wrap in a <code>lodash</code> instance.</li></ol><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>function square(n) {\n  return n * n;\n}\n \nvar wrapped = _([1, 2, 3]);\n \n// Returns an unwrapped value.\nwrapped.reduce(_.add);\n// => 6\n \n// Returns a wrapped value.\nvar squares = wrapped.map(square);\n \n_.isArray(squares);\n// => false\n \n_.isArray(squares.value());\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#lodash
lodash	R	._lodash()										
._lodash	R	._lodash()										
._chain()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.chain(value)</code></pre><p>1.3.0</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to wrap.</li></ol><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney',  'age': 36 },\n  { 'user': 'fred',    'age': 40 },\n  { 'user': 'pebbles', 'age': 1 }\n];\n \nvar youngest = _\n  .chain(users)\n  .sortBy('age')\n  .map(function(o) {\n    return o.user + ' is ' + o.age;\n  })\n  .head()\n  .value();\n// => 'pebbles is 1'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#chain
chain	R	._chain()										
._chain	R	._chain()										
._tap()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.tap(value, interceptor)</code></pre><p>0.1.0</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to provide to <code>interceptor</code>.</li><li><code>interceptor</code> <em>(Function)</em>: The function to invoke.</li></ol><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>_([1, 2, 3])\n .tap(function(array) {\nundefined// Mutate input array.\n   array.pop();\n })\n .reverse()\n .value();\n// => [2, 1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#tap
tap	R	._tap()										
._tap	R	._tap()										
._thru()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.thru(value, interceptor)</code></pre><p>3.0.0</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to provide to <code>interceptor</code>.</li><li><code>interceptor</code> <em>(Function)</em>: The function to invoke.</li></ol><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>_('  abc  ')\n .chain()\n .trim()\n .thru(function(value) {\n   return [value];\n })\n .value();\n// => ['abc']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#thru
thru	R	._thru()										
._thru	R	._thru()										
._prototype-Symbol-iterator()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.prototype[Symbol.iterator]()</code></pre><p>4.0.0</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>var wrapped = _([1, 2]);\n \nwrapped[Symbol.iterator]() === wrapped;\n// => true\n \nArray.from(wrapped);\n// => [1, 2]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#prototype-Symbol-iterator
prototype-Symbol-iterator	R	._prototype-Symbol-iterator()										
._prototype-Symbol-iterator	R	._prototype-Symbol-iterator()										
._prototype-at()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.prototype.at([paths])</code></pre><p>1.0.0</p><span class="prog__sub">Arguments</span><ol><li><code>[paths]</code> <em>(...(string|string[]))</em>: The property paths to pick.</li></ol><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n \n_(object).at(['a[0].b.c', 'a[1]']).value();\n// => [3, 4]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#prototype-at
prototype-at	R	._prototype-at()										
._prototype-at	R	._prototype-at()										
._prototype-chain()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.prototype.chain()</code></pre><p>0.1.0</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n \n// A sequence without explicit chaining.\n_(users).head();\n// => { 'user': 'barney', 'age': 36 }\n \n// A sequence with explicit chaining.\n_(users)\n  .chain()\n  .head()\n  .pick('user')\n  .value();\n// => { 'user': 'barney' }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#prototype-chain
prototype-chain	R	._prototype-chain()										
._prototype-chain	R	._prototype-chain()										
._prototype-commit()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.prototype.commit()</code></pre><p>3.2.0</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>var array = [1, 2];\nvar wrapped = _(array).push(3);\n \nconsole.log(array);\n// => [1, 2]\n \nwrapped = wrapped.commit();\nconsole.log(array);\n// => [1, 2, 3]\n \nwrapped.last();\n// => 3\n \nconsole.log(array);\n// => [1, 2, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#prototype-commit
prototype-commit	R	._prototype-commit()										
._prototype-commit	R	._prototype-commit()										
._prototype-next()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.prototype.next()</code></pre><p>4.0.0</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>var wrapped = _([1, 2]);\n \nwrapped.next();\n// => { 'done': false, 'value': 1 }\n \nwrapped.next();\n// => { 'done': false, 'value': 2 }\n \nwrapped.next();\n// => { 'done': true, 'value': undefined }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#prototype-next
prototype-next	R	._prototype-next()										
._prototype-next	R	._prototype-next()										
._prototype-plant()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.prototype.plant(value)</code></pre><p>3.2.0</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to plant.</li></ol><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>function square(n) {\n  return n * n;\n}\n \nvar wrapped = _([1, 2]).map(square);\nvar other = wrapped.plant([3, 4]);\n \nother.value();\n// => [9, 16]\n \nwrapped.value();\n// => [1, 4]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#prototype-plant
prototype-plant	R	._prototype-plant()										
._prototype-plant	R	._prototype-plant()										
._prototype-reverse()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.prototype.reverse()</code></pre><p>0.1.0</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>var array = [1, 2, 3];\n \n_(array).reverse().value()\n// => [3, 2, 1]\n \nconsole.log(array);\n// => [3, 2, 1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#prototype-reverse
prototype-reverse	R	._prototype-reverse()										
._prototype-reverse	R	._prototype-reverse()										
._prototype-value()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.prototype.value()</code></pre><p>0.1.0</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the resolved unwrapped value.</p></pre><span class="prog__sub">Example</span><pre><code>_([1, 2, 3]).value();\n// => [1, 2, 3]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#prototype-value
prototype-value	R	._prototype-value()										
._prototype-value	R	._prototype-value()										
._camelCase()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.camelCase([string=&apos;&apos;])</code></pre><p>Converts <code>string</code> to  </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the camel cased string.</p></pre><span class="prog__sub">Example</span><pre><code>_.camelCase('Foo Bar');\n// => 'fooBar'\n \n_.camelCase('--foo-bar--');\n// => 'fooBar'\n \n_.camelCase('__FOO_BAR__');\n// => 'fooBar'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#camelCase
camelCase	R	._camelCase()										
._camelCase	R	._camelCase()										
._capitalize()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.capitalize([string=&apos;&apos;])</code></pre><p>Converts the first character of <code>string</code> to upper case and the remaining to lower case.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to capitalize.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the capitalized string.</p></pre><span class="prog__sub">Example</span><pre><code>_.capitalize('FRED');\n// => 'Fred'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#capitalize
capitalize	R	._capitalize()										
._capitalize	R	._capitalize()										
._deburr()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.deburr([string=&apos;&apos;])</code></pre><p>Deburrs <code>string</code> by converting  and  letters to basic Latin letters and removing  </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to deburr.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the deburred string.</p></pre><span class="prog__sub">Example</span><pre><code>_.deburr('déjà vu');\n// => 'deja vu'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#deburr
deburr	R	._deburr()										
._deburr	R	._deburr()										
._endsWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.endsWith([string=&apos;&apos;], [target], [position=string.length])</code></pre><p>Checks if <code>string</code> ends with the given target string.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to inspect.</li><li><code>[target]</code> <em>(string)</em>: The string to search for.</li><li><code>[position=string.length]</code> <em>(number)</em>: The position to search up to.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>string</code> ends with <code>target</code>, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.endsWith('abc', 'c');\n// => true\n \n_.endsWith('abc', 'b');\n// => false\n \n_.endsWith('abc', 'b', 2);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#endsWith
endsWith	R	._endsWith()										
._endsWith	R	._endsWith()										
._escape()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.escape([string=&apos;&apos;])</code></pre><p>Converts the characters &quot;&amp;&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &apos;&quot;&apos;, and &quot;&apos;&quot; in <code>string</code> to their corresponding HTML entities.<br><br><strong>Note:</strong> No other characters are escaped. To escape additional characters use a third-party library like  <br><br>Though the &quot;&gt;&quot; character is escaped for symmetry, characters like &quot;&gt;&quot; and &quot;/&quot; don&apos;t need escaping in HTML and have no special meaning unless they&apos;re part of a tag or unquoted attribute value. See  <em>(under &quot;semi-related fun fact&quot;)</em> for more details.<br><br>When working with HTML you should always  to reduce XSS vectors.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to escape.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the escaped string.</p></pre><span class="prog__sub">Example</span><pre><code>_.escape('fred, barney, & pebbles');\n// => 'fred, barney, &amp; pebbles'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#escape
escape	R	._escape()										
._escape	R	._escape()										
._escapeRegExp()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.escapeRegExp([string=&apos;&apos;])</code></pre><p>Escapes the <code>RegExp</code> special characters &quot;^&quot;, &quot;$&quot;, &quot;&quot;, &quot;.&quot;, &quot;*&quot;, &quot;+&quot;, &quot;?&quot;, &quot;(&quot;, &quot;)&quot;, &quot;[&quot;, &quot;]&quot;, &quot;{&quot;, &quot;}&quot;, and &quot;|&quot; in <code>string</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to escape.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the escaped string.</p></pre><span class="prog__sub">Example</span><pre><code>_.escapeRegExp('[lodash](https://lodash.com/)');\n// => '\[lodash\]\(https://lodash\.com/\)'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#escapeRegExp
escapeRegExp	R	._escapeRegExp()										
._escapeRegExp	R	._escapeRegExp()										
._kebabCase()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.kebabCase([string=&apos;&apos;])</code></pre><p>Converts <code>string</code> to  </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the kebab cased string.</p></pre><span class="prog__sub">Example</span><pre><code>_.kebabCase('Foo Bar');\n// => 'foo-bar'\n \n_.kebabCase('fooBar');\n// => 'foo-bar'\n \n_.kebabCase('__FOO_BAR__');\n// => 'foo-bar'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#kebabCase
kebabCase	R	._kebabCase()										
._kebabCase	R	._kebabCase()										
._lowerCase()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.lowerCase([string=&apos;&apos;])</code></pre><p>Converts <code>string</code>, as space separated words, to lower case.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the lower cased string.</p></pre><span class="prog__sub">Example</span><pre><code>_.lowerCase('--Foo-Bar--');\n// => 'foo bar'\n \n_.lowerCase('fooBar');\n// => 'foo bar'\n \n_.lowerCase('__FOO_BAR__');\n// => 'foo bar'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#lowerCase
lowerCase	R	._lowerCase()										
._lowerCase	R	._lowerCase()										
._lowerFirst()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.lowerFirst([string=&apos;&apos;])</code></pre><p>Converts the first character of <code>string</code> to lower case.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the converted string.</p></pre><span class="prog__sub">Example</span><pre><code>_.lowerFirst('Fred');\n// => 'fred'\n \n_.lowerFirst('FRED');\n// => 'fRED'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#lowerFirst
lowerFirst	R	._lowerFirst()										
._lowerFirst	R	._lowerFirst()										
._pad()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.pad([string=&apos;&apos;], [length=0], [chars=&apos; &apos;])</code></pre><p>Pads <code>string</code> on the left and right sides if it&apos;s shorter than <code>length</code>. Padding characters are truncated if they can&apos;t be evenly divided by <code>length</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to pad.</li><li><code>[length=0]</code> <em>(number)</em>: The padding length.</li><li><code>[chars=&apos; &apos;]</code> <em>(string)</em>: The string used as padding.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the padded string.</p></pre><span class="prog__sub">Example</span><pre><code>_.pad('abc', 8);\n// => '  abc   '\n \n_.pad('abc', 8, '_-');\n// => '_-abc_-_'\n \n_.pad('abc', 3);\n// => 'abc'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#pad
pad	R	._pad()										
._pad	R	._pad()										
._padEnd()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.padEnd([string=&apos;&apos;], [length=0], [chars=&apos; &apos;])</code></pre><p>Pads <code>string</code> on the right side if it&apos;s shorter than <code>length</code>. Padding characters are truncated if they exceed <code>length</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to pad.</li><li><code>[length=0]</code> <em>(number)</em>: The padding length.</li><li><code>[chars=&apos; &apos;]</code> <em>(string)</em>: The string used as padding.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the padded string.</p></pre><span class="prog__sub">Example</span><pre><code>_.padEnd('abc', 6);\n// => 'abc   '\n \n_.padEnd('abc', 6, '_-');\n// => 'abc_-_'\n \n_.padEnd('abc', 3);\n// => 'abc'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#padEnd
padEnd	R	._padEnd()										
._padEnd	R	._padEnd()										
._padStart()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.padStart([string=&apos;&apos;], [length=0], [chars=&apos; &apos;])</code></pre><p>Pads <code>string</code> on the left side if it&apos;s shorter than <code>length</code>. Padding characters are truncated if they exceed <code>length</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to pad.</li><li><code>[length=0]</code> <em>(number)</em>: The padding length.</li><li><code>[chars=&apos; &apos;]</code> <em>(string)</em>: The string used as padding.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the padded string.</p></pre><span class="prog__sub">Example</span><pre><code>_.padStart('abc', 6);\n// => '   abc'\n \n_.padStart('abc', 6, '_-');\n// => '_-_abc'\n \n_.padStart('abc', 3);\n// => 'abc'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#padStart
padStart	R	._padStart()										
._padStart	R	._padStart()										
._parseInt()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.parseInt(string, [radix=10])</code></pre><p>Converts <code>string</code> to an integer of the specified radix. If <code>radix</code> is <code>undefined</code> or <code>0</code>, a <code>radix</code> of <code>10</code> is used unless <code>value</code> is a hexadecimal, in which case a <code>radix</code> of <code>16</code> is used.<br><br><strong>Note:</strong> This method aligns with the  of <code>parseInt</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>string</code> <em>(string)</em>: The string to convert.</li><li><code>[radix=10]</code> <em>(number)</em>: The radix to interpret <code>value</code> by.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(number)</em>: Returns the converted integer.</p></pre><span class="prog__sub">Example</span><pre><code>_.parseInt('08');\n// => 8\n \n_.map(['6', '08', '10'], _.parseInt);\n// => [6, 8, 10]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#parseInt
parseInt	R	._parseInt()										
._parseInt	R	._parseInt()										
._repeat()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.repeat([string=&apos;&apos;], [n=1])</code></pre><p>Repeats the given string <code>n</code> times.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to repeat.</li><li><code>[n=1]</code> <em>(number)</em>: The number of times to repeat the string.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the repeated string.</p></pre><span class="prog__sub">Example</span><pre><code>_.repeat('*', 3);\n// => '***'\n \n_.repeat('abc', 2);\n// => 'abcabc'\n \n_.repeat('abc', 0);\n// => ''\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#repeat
repeat	R	._repeat()										
._repeat	R	._repeat()										
._replace()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.replace([string=&apos;&apos;], pattern, replacement)</code></pre><p>Replaces matches for <code>pattern</code> in <code>string</code> with <code>replacement</code>.<br><br><strong>Note:</strong> This method is based on <code>String#replace</code> </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to modify.</li><li><code>pattern</code> <em>(RegExp|string)</em>: The pattern to replace.</li><li><code>replacement</code> <em>(Function|string)</em>: The match replacement.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the modified string.</p></pre><span class="prog__sub">Example</span><pre><code>_.replace('Hi Fred', 'Fred', 'Barney');\n// => 'Hi Barney'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#replace
replace	R	._replace()										
._replace	R	._replace()										
._snakeCase()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.snakeCase([string=&apos;&apos;])</code></pre><p>Converts <code>string</code> to  </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the snake cased string.</p></pre><span class="prog__sub">Example</span><pre><code>_.snakeCase('Foo Bar');\n// => 'foo_bar'\n \n_.snakeCase('fooBar');\n// => 'foo_bar'\n \n_.snakeCase('--FOO-BAR--');\n// => 'foo_bar'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#snakeCase
snakeCase	R	._snakeCase()										
._snakeCase	R	._snakeCase()										
._split()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.split([string=&apos;&apos;], separator, [limit])</code></pre><p>Splits <code>string</code> by <code>separator</code>.<br><br><strong>Note:</strong> This method is based on <code>String#split</code> </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to split.</li><li><code>separator</code> <em>(RegExp|string)</em>: The separator pattern to split by.</li><li><code>[limit]</code> <em>(number)</em>: The length to truncate results to.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the string segments.</p></pre><span class="prog__sub">Example</span><pre><code>_.split('a-b-c', '-', 2);\n// => ['a', 'b']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#split
split	R	._split()										
._split	R	._split()										
._startCase()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.startCase([string=&apos;&apos;])</code></pre><p>Converts <code>string</code> to  </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the start cased string.</p></pre><span class="prog__sub">Example</span><pre><code>_.startCase('--foo-bar--');\n// => 'Foo Bar'\n \n_.startCase('fooBar');\n// => 'Foo Bar'\n \n_.startCase('__FOO_BAR__');\n// => 'FOO BAR'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#startCase
startCase	R	._startCase()										
._startCase	R	._startCase()										
._startsWith()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.startsWith([string=&apos;&apos;], [target], [position=0])</code></pre><p>Checks if <code>string</code> starts with the given target string.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to inspect.</li><li><code>[target]</code> <em>(string)</em>: The string to search for.</li><li><code>[position=0]</code> <em>(number)</em>: The position to search from.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>string</code> starts with <code>target</code>, else <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.startsWith('abc', 'a');\n// => true\n \n_.startsWith('abc', 'b');\n// => false\n \n_.startsWith('abc', 'b', 1);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#startsWith
startsWith	R	._startsWith()										
._startsWith	R	._startsWith()										
._template()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.template([string=&apos;&apos;], [options={}])</code></pre><p>Creates a compiled template function that can interpolate data properties in &quot;interpolate&quot; delimiters, HTML-escape interpolated data properties in &quot;escape&quot; delimiters, and execute JavaScript in &quot;evaluate&quot; delimiters. Data properties may be accessed as free variables in the template. If a setting object is given, it takes precedence over <code>_.templateSettings</code> values.<br><br><strong>Note:</strong> In the development build <code>_.template</code> utilizes  for easier debugging.<br><br>For more information on precompiling templates see  <br><br>For more information on Chrome extension sandboxes see  </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The template string.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.escape=_.templateSettings.escape]</code> <em>(RegExp)</em>: The HTML &quot;escape&quot; delimiter.</li><li><code>[options.evaluate=_.templateSettings.evaluate]</code> <em>(RegExp)</em>: The &quot;evaluate&quot; delimiter.</li><li><code>[options.imports=_.templateSettings.imports]</code> <em>(Object)</em>: An object to import into the template as free variables.</li><li><code>[options.interpolate=_.templateSettings.interpolate]</code> <em>(RegExp)</em>: The &quot;interpolate&quot; delimiter.</li><li><code>[options.sourceURL=&apos;lodash.templateSources[n]&apos;]</code> <em>(string)</em>: The sourceURL of the compiled template.</li><li><code>[options.variable=&apos;obj&apos;]</code> <em>(string)</em>: The data object variable name.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the compiled template function.</p></pre><span class="prog__sub">Example</span><pre><code>// Use the "interpolate" delimiter to create a compiled template.\nvar compiled = _.template('hello <%= user %>!');\ncompiled({ 'user': 'fred' });\n// => 'hello fred!'\n \n// Use the HTML "escape" delimiter to escape data property values.\nvar compiled = _.template('<b><%- value %></b>');\ncompiled({ 'value': '<script>' });\n// => '<b>&lt;script&gt;</b>'\n \n// Use the "evaluate" delimiter to execute JavaScript and generate HTML.\nvar compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n \n// Use the internal `print` function in "evaluate" delimiters.\nvar compiled = _.template('<% print("hello " + user); %>!');\ncompiled({ 'user': 'barney' });\n// => 'hello barney!'\n \n// Use the ES template literal delimiter as an "interpolate" delimiter.\n// Disable support by replacing the "interpolate" delimiter.\nvar compiled = _.template('hello ${ user }!');\ncompiled({ 'user': 'pebbles' });\n// => 'hello pebbles!'\n \n// Use backslashes to treat delimiters as plain text.\nvar compiled = _.template('<%= "\\<%- value %\\>" %>');\ncompiled({ 'value': 'ignored' });\n// => '<%- value %>'\n \n// Use the `imports` option to import `jQuery` as `jq`.\nvar text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\nvar compiled = _.template(text, { 'imports': { 'jq': jQuery } });\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n \n// Use the `sourceURL` option to specify a custom sourceURL for the template.\nvar compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\ncompiled(data);\n// => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.\n \n// Use the `variable` option to ensure a with-statement isn't used in the compiled template.\nvar compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n//   var __t, __p = '';\n//   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n//   return __p;\n// }\n \n// Use custom template delimiters.\n_.templateSettings.interpolate = /{{([\s\S]+?)}}/g;\nvar compiled = _.template('hello {{ user }}!');\ncompiled({ 'user': 'mustache' });\n// => 'hello mustache!'\n \n// Use the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and stack traces.\nfs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\n  var JST = {\\n    "main": ' + _.template(mainText).source + '\\n  };\\n');\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#template
template	R	._template()										
._template	R	._template()										
._toLower()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toLower([string=&apos;&apos;])</code></pre><p>Converts <code>string</code>, as a whole, to lower case just like  </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the lower cased string.</p></pre><span class="prog__sub">Example</span><pre><code>_.toLower('--Foo-Bar--');\n// => '--foo-bar--'\n \n_.toLower('fooBar');\n// => 'foobar'\n \n_.toLower('__FOO_BAR__');\n// => '__foo_bar__'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toLower
toLower	R	._toLower()										
._toLower	R	._toLower()										
._toUpper()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toUpper([string=&apos;&apos;])</code></pre><p>Converts <code>string</code>, as a whole, to upper case just like  </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the upper cased string.</p></pre><span class="prog__sub">Example</span><pre><code>_.toUpper('--foo-bar--');\n// => '--FOO-BAR--'\n \n_.toUpper('fooBar');\n// => 'FOOBAR'\n \n_.toUpper('__foo_bar__');\n// => '__FOO_BAR__'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toUpper
toUpper	R	._toUpper()										
._toUpper	R	._toUpper()										
._trim()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.trim([string=&apos;&apos;], [chars=whitespace])</code></pre><p>Removes leading and trailing whitespace or specified characters from <code>string</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to trim.</li><li><code>[chars=whitespace]</code> <em>(string)</em>: The characters to trim.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the trimmed string.</p></pre><span class="prog__sub">Example</span><pre><code>_.trim('  abc  ');\n// => 'abc'\n \n_.trim('-_-abc-_-', '_-');\n// => 'abc'\n \n_.map(['  foo  ', '  bar  '], _.trim);\n// => ['foo', 'bar']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#trim
trim	R	._trim()										
._trim	R	._trim()										
._trimEnd()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.trimEnd([string=&apos;&apos;], [chars=whitespace])</code></pre><p>Removes trailing whitespace or specified characters from <code>string</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to trim.</li><li><code>[chars=whitespace]</code> <em>(string)</em>: The characters to trim.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the trimmed string.</p></pre><span class="prog__sub">Example</span><pre><code>_.trimEnd('  abc  ');\n// => '  abc'\n \n_.trimEnd('-_-abc-_-', '_-');\n// => '-_-abc'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#trimEnd
trimEnd	R	._trimEnd()										
._trimEnd	R	._trimEnd()										
._trimStart()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.trimStart([string=&apos;&apos;], [chars=whitespace])</code></pre><p>Removes leading whitespace or specified characters from <code>string</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to trim.</li><li><code>[chars=whitespace]</code> <em>(string)</em>: The characters to trim.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the trimmed string.</p></pre><span class="prog__sub">Example</span><pre><code>_.trimStart('  abc  ');\n// => 'abc  '\n \n_.trimStart('-_-abc-_-', '_-');\n// => 'abc-_-'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#trimStart
trimStart	R	._trimStart()										
._trimStart	R	._trimStart()										
._truncate()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.truncate([string=&apos;&apos;], [options={}])</code></pre><p>Truncates <code>string</code> if it&apos;s longer than the given maximum string length. The last characters of the truncated string are replaced with the omission string which defaults to &quot;...&quot;.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to truncate.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.length=30]</code> <em>(number)</em>: The maximum string length.</li><li><code>[options.omission=&apos;...&apos;]</code> <em>(string)</em>: The string to indicate text is omitted.</li><li><code>[options.separator]</code> <em>(RegExp|string)</em>: The separator pattern to truncate to.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the truncated string.</p></pre><span class="prog__sub">Example</span><pre><code>_.truncate('hi-diddly-ho there, neighborino');\n// => 'hi-diddly-ho there, neighbo...'\n \n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': ' '\n});\n// => 'hi-diddly-ho there,...'\n \n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': /,? +/\n});\n// => 'hi-diddly-ho there...'\n \n_.truncate('hi-diddly-ho there, neighborino', {\n  'omission': ' [...]'\n});\n// => 'hi-diddly-ho there, neig [...]'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#truncate
truncate	R	._truncate()										
._truncate	R	._truncate()										
._unescape()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.unescape([string=&apos;&apos;])</code></pre><p>The inverse of <code>_.escape</code>  this method converts the HTML entities <code>&amp;amp;</code>, <code>&amp;lt;</code>, <code>&amp;gt;</code>, <code>&amp;quot;</code>, and <code>&amp;#39;</code> in <code>string</code> to their corresponding characters.<br><br><strong>Note:</strong> No other HTML entities are unescaped. To unescape additional HTML entities use a third-party library like  </p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to unescape.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the unescaped string.</p></pre><span class="prog__sub">Example</span><pre><code>_.unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#unescape
unescape	R	._unescape()										
._unescape	R	._unescape()										
._upperCase()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.upperCase([string=&apos;&apos;])</code></pre><p>Converts <code>string</code>, as space separated words, to upper case.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the upper cased string.</p></pre><span class="prog__sub">Example</span><pre><code>_.upperCase('--foo-bar');\n// => 'FOO BAR'\n \n_.upperCase('fooBar');\n// => 'FOO BAR'\n \n_.upperCase('__foo_bar__');\n// => 'FOO BAR'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#upperCase
upperCase	R	._upperCase()										
._upperCase	R	._upperCase()										
._upperFirst()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.upperFirst([string=&apos;&apos;])</code></pre><p>Converts the first character of <code>string</code> to upper case.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the converted string.</p></pre><span class="prog__sub">Example</span><pre><code>_.upperFirst('fred');\n// => 'Fred'\n \n_.upperFirst('FRED');\n// => 'FRED'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#upperFirst
upperFirst	R	._upperFirst()										
._upperFirst	R	._upperFirst()										
._words()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.words([string=&apos;&apos;], [pattern])</code></pre><p>Splits <code>string</code> into an array of its words.</p><span class="prog__sub">Arguments</span><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to inspect.</li><li><code>[pattern]</code> <em>(RegExp|string)</em>: The pattern to match words.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the words of <code>string</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.words('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n \n_.words('fred, barney, & pebbles', /[^, ]+/g);\n// => ['fred', 'barney', '&', 'pebbles']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#words
words	R	._words()										
._words	R	._words()										
._attempt()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.attempt(func, [args])</code></pre><p>Attempts to invoke <code>func</code>, returning either the result or the caught error object. Any additional arguments are provided to <code>func</code> when it&apos;s invoked.</p><span class="prog__sub">Arguments</span><ol><li><code>func</code> <em>(Function)</em>: The function to attempt.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke <code>func</code> with.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the <code>func</code> result or error object.</p></pre><span class="prog__sub">Example</span><pre><code>// Avoid throwing errors for invalid selectors.\nvar elements = _.attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '>_>');\n \nif (_.isError(elements)) {\n  elements = [];\n}\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#attempt
attempt	R	._attempt()										
._attempt	R	._attempt()										
._bindAll()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.bindAll(object, methodNames)</code></pre><p>Binds methods of an object to the object itself, overwriting the existing method.<br><br><strong>Note:</strong> This method doesn&apos;t set the &quot;length&quot; property of bound functions.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to bind and assign the bound methods to.</li><li><code>methodNames</code> <em>(...(string|string[]))</em>: The object method names to bind.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var view = {\n  'label': 'docs',\n  'click': function() {\n    console.log('clicked ' + this.label);\n  }\n};\n \n_.bindAll(view, ['click']);\njQuery(element).on('click', view.click);\n// => Logs 'clicked docs' when clicked.\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#bindAll
bindAll	R	._bindAll()										
._bindAll	R	._bindAll()										
._cond()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.cond(pairs)</code></pre><p>Creates a function that iterates over <code>pairs</code> and invokes the corresponding function of the first predicate to return truthy. The predicate-function pairs are invoked with the <code>this</code> binding and arguments of the created function.</p><span class="prog__sub">Arguments</span><ol><li><code>pairs</code> <em>(Array)</em>: The predicate-function pairs.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new composite function.</p></pre><span class="prog__sub">Example</span><pre><code>var func = _.cond([\n  [_.matches({ 'a': 1 }),           _.constant('matches A')],\n  [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n  [_.stubTrue,                      _.constant('no match')]\n]);\n \nfunc({ 'a': 1, 'b': 2 });\n// => 'matches A'\n \nfunc({ 'a': 0, 'b': 1 });\n// => 'matches B'\n \nfunc({ 'a': '1', 'b': '2' });\n// => 'no match'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#cond
cond	R	._cond()										
._cond	R	._cond()										
._conforms()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.conforms(source)</code></pre><p>Creates a function that invokes the predicate properties of <code>source</code> with the corresponding property values of a given object, returning <code>true</code> if all predicates return truthy, else <code>false</code>.<br><br><strong>Note:</strong> The created function is equivalent to <code>_.conformsTo</code> with <code>source</code> partially applied.</p><span class="prog__sub">Arguments</span><ol><li><code>source</code> <em>(Object)</em>: The object of property predicates to conform to.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new spec function.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [\n  { 'a': 2, 'b': 1 },\n  { 'a': 1, 'b': 2 }\n];\n \n_.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n// => [{ 'a': 1, 'b': 2 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#conforms
conforms	R	._conforms()										
._conforms	R	._conforms()										
._constant()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.constant(value)</code></pre><p>Creates a function that returns <code>value</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to return from the new function.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new constant function.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = _.times(2, _.constant({ 'a': 1 }));\n \nconsole.log(objects);\n// => [{ 'a': 1 }, { 'a': 1 }]\n \nconsole.log(objects[0] === objects[1]);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#constant
constant	R	._constant()										
._constant	R	._constant()										
._defaultTo()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.defaultTo(value, defaultValue)</code></pre><p>Checks <code>value</code> to determine whether a default value should be returned in its place. The <code>defaultValue</code> is returned if <code>value</code> is <code>NaN</code>, <code>null</code>, or <code>undefined</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to check.</li><li><code>defaultValue</code> <em>(*)</em>: The default value.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns the resolved value.</p></pre><span class="prog__sub">Example</span><pre><code>_.defaultTo(1, 10);\n// => 1\n \n_.defaultTo(undefined, 10);\n// => 10\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#defaultTo
defaultTo	R	._defaultTo()										
._defaultTo	R	._defaultTo()										
._flow()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.flow([funcs])</code></pre><p>Creates a function that returns the result of invoking the given functions with the <code>this</code> binding of the created function, where each successive invocation is supplied the return value of the previous.</p><span class="prog__sub">Arguments</span><ol><li><code>[funcs]</code> <em>(...(Function|Function[]))</em>: The functions to invoke.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new composite function.</p></pre><span class="prog__sub">Example</span><pre><code>function square(n) {\n  return n * n;\n}\n \nvar addSquare = _.flow([_.add, square]);\naddSquare(1, 2);\n// => 9\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#flow
flow	R	._flow()										
._flow	R	._flow()										
._flowRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.flowRight([funcs])</code></pre><p>This method is like <code>_.flow</code> except that it creates a function that invokes the given functions from right to left.</p><span class="prog__sub">Arguments</span><ol><li><code>[funcs]</code> <em>(...(Function|Function[]))</em>: The functions to invoke.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new composite function.</p></pre><span class="prog__sub">Example</span><pre><code>function square(n) {\n  return n * n;\n}\n \nvar addSquare = _.flowRight([square, _.add]);\naddSquare(1, 2);\n// => 9\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#flowRight
flowRight	R	._flowRight()										
._flowRight	R	._flowRight()										
._identity()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.identity(value)</code></pre><p>This method returns the first argument it receives.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: Any value.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns <code>value</code>.</p></pre><span class="prog__sub">Example</span><pre><code>var object = { 'a': 1 };\n \nconsole.log(_.identity(object) === object);\n// => true\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#identity
identity	R	._identity()										
._identity	R	._identity()										
._iteratee()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.iteratee([func=_.identity])</code></pre><p>Creates a function that invokes <code>func</code> with the arguments of the created function. If <code>func</code> is a property name, the created function returns the property value for a given element. If <code>func</code> is an array or object, the created function returns <code>true</code> for elements that contain the equivalent source properties, otherwise it returns <code>false</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>[func=_.identity]</code> <em>(*)</em>: The value to convert to a callback.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the callback.</p></pre><span class="prog__sub">Example</span><pre><code>var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n \n// The `_.matches` iteratee shorthand.\n_.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n// => [{ 'user': 'barney', 'age': 36, 'active': true }]\n \n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, _.iteratee(['user', 'fred']));\n// => [{ 'user': 'fred', 'age': 40 }]\n \n// The `_.property` iteratee shorthand.\n_.map(users, _.iteratee('user'));\n// => ['barney', 'fred']\n \n// Create custom iteratee shorthands.\n_.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n  return !_.isRegExp(func) ? iteratee(func) : function(string) {\n    return func.test(string);\n  };\n});\n \n_.filter(['abc', 'def'], /ef/);\n// => ['def']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#iteratee
iteratee	R	._iteratee()										
._iteratee	R	._iteratee()										
._matches()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.matches(source)</code></pre><p>Creates a function that performs a partial deep comparison between a given object and <code>source</code>, returning <code>true</code> if the given object has equivalent property values, else <code>false</code>.<br><br><strong>Note:</strong> The created function is equivalent to <code>_.isMatch</code> with <code>source</code> partially applied.<br><br>Partial comparisons will match empty array and empty object <code>source</code> values against any array or object value, respectively. See <code>_.isEqual</code> for a list of supported value comparisons.</p><span class="prog__sub">Arguments</span><ol><li><code>source</code> <em>(Object)</em>: The object of property values to match.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new spec function.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n \n_.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n// => [{ 'a': 4, 'b': 5, 'c': 6 }]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#matches
matches	R	._matches()										
._matches	R	._matches()										
._matchesProperty()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.matchesProperty(path, srcValue)</code></pre><p>Creates a function that performs a partial deep comparison between the value at <code>path</code> of a given object to <code>srcValue</code>, returning <code>true</code> if the object value is equivalent, else <code>false</code>.<br><br><strong>Note:</strong> Partial comparisons will match empty array and empty object <code>srcValue</code> values against any array or object value, respectively. See <code>_.isEqual</code> for a list of supported value comparisons.</p><span class="prog__sub">Arguments</span><ol><li><code>path</code> <em>(Array|string)</em>: The path of the property to get.</li><li><code>srcValue</code> <em>(*)</em>: The value to match.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new spec function.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n \n_.find(objects, _.matchesProperty('a', 4));\n// => { 'a': 4, 'b': 5, 'c': 6 }\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#matchesProperty
matchesProperty	R	._matchesProperty()										
._matchesProperty	R	._matchesProperty()										
._method()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.method(path, [args])</code></pre><p>Creates a function that invokes the method at <code>path</code> of a given object. Any additional arguments are provided to the invoked method.</p><span class="prog__sub">Arguments</span><ol><li><code>path</code> <em>(Array|string)</em>: The path of the method to invoke.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke the method with.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new invoker function.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [\n  { 'a': { 'b': _.constant(2) } },\n  { 'a': { 'b': _.constant(1) } }\n];\n \n_.map(objects, _.method('a.b'));\n// => [2, 1]\n \n_.map(objects, _.method(['a', 'b']));\n// => [2, 1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#method
method	R	._method()										
._method	R	._method()										
._methodOf()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.methodOf(object, [args])</code></pre><p>The opposite of <code>_.method</code>  this method creates a function that invokes the method at a given path of <code>object</code>. Any additional arguments are provided to the invoked method.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke the method with.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new invoker function.</p></pre><span class="prog__sub">Example</span><pre><code>var array = _.times(3, _.constant),\n    object = { 'a': array, 'b': array, 'c': array };\n \n_.map(['a[2]', 'c[0]'], _.methodOf(object));\n// => [2, 0]\n \n_.map([['a', '2'], ['c', '0']], _.methodOf(object));\n// => [2, 0]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#methodOf
methodOf	R	._methodOf()										
._methodOf	R	._methodOf()										
._mixin()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.mixin([object=lodash], source, [options={}])</code></pre><p>Adds all own enumerable string keyed function properties of a source object to the destination object. If <code>object</code> is a function, then methods are added to its prototype as well.<br><br><strong>Note:</strong> Use <code>_.runInContext</code> to create a pristine <code>lodash</code> function to avoid conflicts caused by modifying the original.</p><span class="prog__sub">Arguments</span><ol><li><code>[object=lodash]</code> <em>(Function|Object)</em>: The destination object.</li><li><code>source</code> <em>(Object)</em>: The object of functions to add.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.chain=true]</code> <em>(boolean)</em>: Specify whether mixins are chainable.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(*)</em>: Returns <code>object</code>.</p></pre><span class="prog__sub">Example</span><pre><code>function vowels(string) {\n  return _.filter(string, function(v) {\n    return /[aeiou]/i.test(v);\n  });\n}\n \n_.mixin({ 'vowels': vowels });\n_.vowels('fred');\n// => ['e']\n \n_('fred').vowels().value();\n// => ['e']\n \n_.mixin({ 'vowels': vowels }, { 'chain': false });\n_('fred').vowels();\n// => ['e']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#mixin
mixin	R	._mixin()										
._mixin	R	._mixin()										
._noConflict()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.noConflict()</code></pre><p>Reverts the <code>_</code> variable to its previous value and returns a reference to the <code>lodash</code> function.</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the <code>lodash</code> function.</p></pre><span class="prog__sub">Example</span><pre><code></code>\n</pre></section>	https://lodash.com/docs/4.17.4#noConflict
noConflict	R	._noConflict()										
._noConflict	R	._noConflict()										
._noop()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.noop()</code></pre><p>This method returns <code>undefined</code>.</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre></pre><span class="prog__sub">Example</span><pre><code>_.times(2, _.noop);\n// => [undefined, undefined]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#noop
noop	R	._noop()										
._noop	R	._noop()										
._nthArg()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.nthArg([n=0])</code></pre><p>Creates a function that gets the argument at index <code>n</code>. If <code>n</code> is negative, the nth argument from the end is returned.</p><span class="prog__sub">Arguments</span><ol><li><code>[n=0]</code> <em>(number)</em>: The index of the argument to return.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new pass-thru function.</p></pre><span class="prog__sub">Example</span><pre><code>var func = _.nthArg(1);\nfunc('a', 'b', 'c', 'd');\n// => 'b'\n \nvar func = _.nthArg(-2);\nfunc('a', 'b', 'c', 'd');\n// => 'c'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#nthArg
nthArg	R	._nthArg()										
._nthArg	R	._nthArg()										
._over()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.over([iteratees=[_.identity]])</code></pre><p>Creates a function that invokes <code>iteratees</code> with the arguments it receives and returns their results.</p><span class="prog__sub">Arguments</span><ol><li><code>[iteratees=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The iteratees to invoke.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new function.</p></pre><span class="prog__sub">Example</span><pre><code>var func = _.over([Math.max, Math.min]);\n \nfunc(1, 2, 3, 4);\n// => [4, 1]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#over
over	R	._over()										
._over	R	._over()										
._overEvery()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.overEvery([predicates=[_.identity]])</code></pre><p>Creates a function that checks if <strong>all</strong> of the <code>predicates</code> return truthy when invoked with the arguments it receives.</p><span class="prog__sub">Arguments</span><ol><li><code>[predicates=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The predicates to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new function.</p></pre><span class="prog__sub">Example</span><pre><code>var func = _.overEvery([Boolean, isFinite]);\n \nfunc('1');\n// => true\n \nfunc(null);\n// => false\n \nfunc(NaN);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#overEvery
overEvery	R	._overEvery()										
._overEvery	R	._overEvery()										
._overSome()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.overSome([predicates=[_.identity]])</code></pre><p>Creates a function that checks if <strong>any</strong> of the <code>predicates</code> return truthy when invoked with the arguments it receives.</p><span class="prog__sub">Arguments</span><ol><li><code>[predicates=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The predicates to check.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new function.</p></pre><span class="prog__sub">Example</span><pre><code>var func = _.overSome([Boolean, isFinite]);\n \nfunc('1');\n// => true\n \nfunc(null);\n// => true\n \nfunc(NaN);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#overSome
overSome	R	._overSome()										
._overSome	R	._overSome()										
._property()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.property(path)</code></pre><p>Creates a function that returns the value at <code>path</code> of a given object.</p><span class="prog__sub">Arguments</span><ol><li><code>path</code> <em>(Array|string)</em>: The path of the property to get.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new accessor function.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = [\n  { 'a': { 'b': 2 } },\n  { 'a': { 'b': 1 } }\n];\n \n_.map(objects, _.property('a.b'));\n// => [2, 1]\n \n_.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n// => [1, 2]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#property
property	R	._property()										
._property	R	._property()										
._propertyOf()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.propertyOf(object)</code></pre><p>The opposite of <code>_.property</code>  this method creates a function that returns the value at a given path of <code>object</code>.</p><span class="prog__sub">Arguments</span><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns the new accessor function.</p></pre><span class="prog__sub">Example</span><pre><code>var array = [0, 1, 2],\n    object = { 'a': array, 'b': array, 'c': array };\n \n_.map(['a[2]', 'c[0]'], _.propertyOf(object));\n// => [2, 0]\n \n_.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n// => [2, 0]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#propertyOf
propertyOf	R	._propertyOf()										
._propertyOf	R	._propertyOf()										
._range()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.range([start=0], end, [step=1])</code></pre><p>Creates an array of numbers <em>(positive and/or negative)</em> progressing from <code>start</code> up to, but not including, <code>end</code>. A step of <code>-1</code> is used if a negative <code>start</code> is specified without an <code>end</code> or <code>step</code>. If <code>end</code> is not specified, it&apos;s set to <code>start</code> with <code>start</code> then set to <code>0</code>.<br><br><strong>Note:</strong> JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.</p><span class="prog__sub">Arguments</span><ol><li><code>[start=0]</code> <em>(number)</em>: The start of the range.</li><li><code>end</code> <em>(number)</em>: The end of the range.</li><li><code>[step=1]</code> <em>(number)</em>: The value to increment or decrement by.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the range of numbers.</p></pre><span class="prog__sub">Example</span><pre><code>_.range(4);\n// => [0, 1, 2, 3]\n \n_.range(-4);\n// => [0, -1, -2, -3]\n \n_.range(1, 5);\n// => [1, 2, 3, 4]\n \n_.range(0, 20, 5);\n// => [0, 5, 10, 15]\n \n_.range(0, -4, -1);\n// => [0, -1, -2, -3]\n \n_.range(1, 4, 0);\n// => [1, 1, 1]\n \n_.range(0);\n// => []\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#range
range	R	._range()										
._range	R	._range()										
._rangeRight()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.rangeRight([start=0], end, [step=1])</code></pre><p>This method is like <code>_.range</code> except that it populates values in descending order.</p><span class="prog__sub">Arguments</span><ol><li><code>[start=0]</code> <em>(number)</em>: The start of the range.</li><li><code>end</code> <em>(number)</em>: The end of the range.</li><li><code>[step=1]</code> <em>(number)</em>: The value to increment or decrement by.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the range of numbers.</p></pre><span class="prog__sub">Example</span><pre><code>_.rangeRight(4);\n// => [3, 2, 1, 0]\n \n_.rangeRight(-4);\n// => [-3, -2, -1, 0]\n \n_.rangeRight(1, 5);\n// => [4, 3, 2, 1]\n \n_.rangeRight(0, 20, 5);\n// => [15, 10, 5, 0]\n \n_.rangeRight(0, -4, -1);\n// => [-3, -2, -1, 0]\n \n_.rangeRight(1, 4, 0);\n// => [1, 1, 1]\n \n_.rangeRight(0);\n// => []\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#rangeRight
rangeRight	R	._rangeRight()										
._rangeRight	R	._rangeRight()										
._runInContext()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.runInContext([context=root])</code></pre><p>Create a new pristine <code>lodash</code> function using the <code>context</code> object.</p><span class="prog__sub">Arguments</span><ol><li><code>[context=root]</code> <em>(Object)</em>: The context object.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Function)</em>: Returns a new <code>lodash</code> function.</p></pre><span class="prog__sub">Example</span><pre><code>_.mixin({ 'foo': _.constant('foo') });\n \nvar lodash = _.runInContext();\nlodash.mixin({ 'bar': lodash.constant('bar') });\n \n_.isFunction(_.foo);\n// => true\n_.isFunction(_.bar);\n// => false\n \nlodash.isFunction(lodash.foo);\n// => false\nlodash.isFunction(lodash.bar);\n// => true\n \n// Create a suped-up `defer` in Node.js.\nvar defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#runInContext
runInContext	R	._runInContext()										
._runInContext	R	._runInContext()										
._stubArray()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.stubArray()</code></pre><p>This method returns a new empty array.</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new empty array.</p></pre><span class="prog__sub">Example</span><pre><code>var arrays = _.times(2, _.stubArray);\n \nconsole.log(arrays);\n// => [[], []]\n \nconsole.log(arrays[0] === arrays[1]);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#stubArray
stubArray	R	._stubArray()										
._stubArray	R	._stubArray()										
._stubFalse()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.stubFalse()</code></pre><p>This method returns <code>false</code>.</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>false</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.times(2, _.stubFalse);\n// => [false, false]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#stubFalse
stubFalse	R	._stubFalse()										
._stubFalse	R	._stubFalse()										
._stubObject()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.stubObject()</code></pre><p>This method returns a new empty object.</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre><p><em>(Object)</em>: Returns the new empty object.</p></pre><span class="prog__sub">Example</span><pre><code>var objects = _.times(2, _.stubObject);\n \nconsole.log(objects);\n// => [{}, {}]\n \nconsole.log(objects[0] === objects[1]);\n// => false\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#stubObject
stubObject	R	._stubObject()										
._stubObject	R	._stubObject()										
._stubString()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.stubString()</code></pre><p>This method returns an empty string.</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the empty string.</p></pre><span class="prog__sub">Example</span><pre><code>_.times(2, _.stubString);\n// => ['', '']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#stubString
stubString	R	._stubString()										
._stubString	R	._stubString()										
._stubTrue()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.stubTrue()</code></pre><p>This method returns <code>true</code>.</p><span class="prog__sub">Arguments</span><span class="prog__sub">Returns</span><pre><p><em>(boolean)</em>: Returns <code>true</code>.</p></pre><span class="prog__sub">Example</span><pre><code>_.times(2, _.stubTrue);\n// => [true, true]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#stubTrue
stubTrue	R	._stubTrue()										
._stubTrue	R	._stubTrue()										
._times()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.times(n, [iteratee=_.identity])</code></pre><p>Invokes the iteratee <code>n</code> times, returning an array of the results of each invocation. The iteratee is invoked with one argument; <em>(index)</em>.</p><span class="prog__sub">Arguments</span><ol><li><code>n</code> <em>(number)</em>: The number of times to invoke <code>iteratee</code>.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the array of results.</p></pre><span class="prog__sub">Example</span><pre><code>_.times(3, String);\n// => ['0', '1', '2']\n \n _.times(4, _.constant(0));\n// => [0, 0, 0, 0]\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#times
times	R	._times()										
._times	R	._times()										
._toPath()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.toPath(value)</code></pre><p>Converts <code>value</code> to a property path array.</p><span class="prog__sub">Arguments</span><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(Array)</em>: Returns the new property path array.</p></pre><span class="prog__sub">Example</span><pre><code>_.toPath('a.b.c');\n// => ['a', 'b', 'c']\n \n_.toPath('a[0].b.c');\n// => ['a', '0', 'b', 'c']\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#toPath
toPath	R	._toPath()										
._toPath	R	._toPath()										
._uniqueId()	A									https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container"><pre><code>_.uniqueId([prefix=&apos;&apos;])</code></pre><p>Generates a unique ID. If <code>prefix</code> is given, the ID is appended to it.</p><span class="prog__sub">Arguments</span><ol><li><code>[prefix=&apos;&apos;]</code> <em>(string)</em>: The value to prefix the ID with.</li></ol><span class="prog__sub">Returns</span><pre><p><em>(string)</em>: Returns the unique ID.</p></pre><span class="prog__sub">Example</span><pre><code>_.uniqueId('contact_');\n// => 'contact_104'\n \n_.uniqueId();\n// => '105'\n</code>\n</pre></section>	https://lodash.com/docs/4.17.4#uniqueId
uniqueId	R	._uniqueId()										
._uniqueId	R	._uniqueId()										
