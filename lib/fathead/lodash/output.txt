add	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Adds two numbers.</p>\n        <pre><code>_.add(augend, addend)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>augend</code> <em>(number)</em>: The first number in an addition.</li><li><code>addend</code> <em>(number)</em>: The second number in an addition.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the total.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="support">add</span>(<span class="numeric">6</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;10</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#add
after	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>The opposite of _.before; this method creates a function that invokes func once it's called n or more times.</p>\n        <pre><code>_.after(n, func)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>n</code> <em>(number)</em>: The number of calls before <code>func</code> is invoked.</li><li><code>func</code> <em>(Function)</em>: The function to restrict.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new restricted function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;saves&#xA0;=&#xA0;[<span class="string">&apos;profile&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;settings&apos;</span>];</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;done&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">after</span>(saves<span class="delimiter">.</span><span class="support">length</span><span class="delimiter">,</span>&#xA0;<span class="type">function</span>()&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(<span class="string">&apos;done&#xA0;saving!&apos;</span>);</div><div>});</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">forEach</span>(saves<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(type)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name">asyncSave</span>({&#xA0;<span class="string">&apos;type&apos;</span>:&#xA0;type<span class="delimiter">,</span>&#xA0;<span class="string">&apos;complete&apos;</span>:&#xA0;done&#xA0;});</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;&apos;done&#xA0;saving!&apos;&#xA0;after&#xA0;the&#xA0;two&#xA0;async&#xA0;saves&#xA0;have&#xA0;completed.</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#after
ary	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func, with up to n arguments, ignoring any additional arguments.</p>\n        <pre><code>_.ary(func, [n=func.length])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to cap arguments for.</li><li><code>[n=func.length]</code> <em>(number)</em>: The arity cap.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new capped function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">map</span>([<span class="string">&apos;6&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;8&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;10&apos;</span>]<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">ary</span>(parseInt<span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[6,&#xA0;8,&#xA0;10]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#ary
assign	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Assigns own enumerable string keyed properties of source objects to the destination object. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.Note: This method mutates object and is loosely based on Object.assign.</p>\n        <pre><code>_.assign(object, [sources])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>}</div><div>&#xA0;</div><div><span class="type">function</span>&#xA0;<span class="name">Bar</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>Bar<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>d&#xA0;=&#xA0;<span class="numeric">4</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">assign</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">0</span>&#xA0;}<span class="delimiter">,</span>&#xA0;new&#xA0;<span class="name type">Foo</span><span class="delimiter">,</span>&#xA0;new&#xA0;<span class="name type">Bar</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;c&apos;:&#xA0;3&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#assign
assignIn	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.assign except that it iterates over own and inherited source properties.Note: This method mutates object.</p>\n        <pre><code>_.assignIn(object, [sources])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>_.extend</em></p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>}</div><div>&#xA0;</div><div><span class="type">function</span>&#xA0;<span class="name">Bar</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>Bar<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>d&#xA0;=&#xA0;<span class="numeric">4</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">assignIn</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">0</span>&#xA0;}<span class="delimiter">,</span>&#xA0;new&#xA0;<span class="name type">Foo</span><span class="delimiter">,</span>&#xA0;new&#xA0;<span class="name type">Bar</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;b&apos;:&#xA0;2,&#xA0;&apos;c&apos;:&#xA0;3,&#xA0;&apos;d&apos;:&#xA0;4&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#assignIn
assignInWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.assignIn except that it accepts customizer which is invoked to produce the assigned values. If customizer returns undefined, assignment is handled by the method instead. The customizer is invoked with five arguments: (objValue, srcValue, key, object, source).Note: This method mutates object.</p>\n        <pre><code>_.assignInWith(object, sources, [customizer])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>sources</code> <em>(...Object)</em>: The source objects.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize assigned values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>_.extendWith</em></p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">customizer</span>(objValue<span class="delimiter">,</span>&#xA0;srcValue)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;_<span class="delimiter method">.</span><span class="name">isUndefined</span>(objValue)&#xA0;?&#xA0;srcValue&#xA0;:&#xA0;objValue;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;defaults&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">partialRight</span>(_<span class="delimiter">.</span>assignInWith<span class="delimiter">,</span>&#xA0;customizer);</div><div>&#xA0;</div><div><span class="name">defaults</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;b&apos;:&#xA0;2&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#assignInWith
assignWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.assign except that it accepts customizer which is invoked to produce the assigned values. If customizer returns undefined, assignment is handled by the method instead. The customizer is invoked with five arguments: (objValue, srcValue, key, object, source).Note: This method mutates object.</p>\n        <pre><code>_.assignWith(object, sources, [customizer])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>sources</code> <em>(...Object)</em>: The source objects.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize assigned values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">customizer</span>(objValue<span class="delimiter">,</span>&#xA0;srcValue)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;_<span class="delimiter method">.</span><span class="name">isUndefined</span>(objValue)&#xA0;?&#xA0;srcValue&#xA0;:&#xA0;objValue;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;defaults&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">partialRight</span>(_<span class="delimiter">.</span>assignWith<span class="delimiter">,</span>&#xA0;customizer);</div><div>&#xA0;</div><div><span class="name">defaults</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;b&apos;:&#xA0;2&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#assignWith
at	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of values corresponding to paths of object.</p>\n        <pre><code>_.at(object, [paths])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[paths]</code> <em>(...(string|string[]))</em>: The property paths to pick.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the picked values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>]&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">at</span>(object<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;a[0].b.c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[1]&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;4]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#at
attempt	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Attempts to invoke func, returning either the result or the caught error object. Any additional arguments are provided to func when it's invoked.</p>\n        <pre><code>_.attempt(func, [args])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to attempt.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke <code>func</code> with.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the <code>func</code> result or error object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="comment">//&#xA0;Avoid&#xA0;throwing&#xA0;errors&#xA0;for&#xA0;invalid&#xA0;selectors.</span></div><div><span class="type">var</span>&#xA0;elements&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">attempt</span>(<span class="type">function</span>(selector)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;<span class="support">document</span><span class="delimiter method">.</span><span class="name">querySelectorAll</span>(selector);</div><div>}<span class="delimiter">,</span>&#xA0;<span class="string">&apos;&gt;_&gt;&apos;</span>);</div><div>&#xA0;</div><div>if&#xA0;(_<span class="delimiter method">.</span><span class="name">isError</span>(elements))&#xA0;{</div><div>&#xA0;&#xA0;elements&#xA0;=&#xA0;[];</div><div>}</div></pre>\n    </section>	https://lodash.com/docs/4.17.4#attempt
before	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func, with the this binding and arguments of the created function, while it's called less than n times. Subsequent calls to the created function return the result of the last func invocation.</p>\n        <pre><code>_.before(n, func)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>n</code> <em>(number)</em>: The number of calls at which <code>func</code> is no longer invoked.</li><li><code>func</code> <em>(Function)</em>: The function to restrict.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new restricted function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="name">jQuery</span>(element)<span class="delimiter method">.</span><span class="name">on</span>(<span class="string">&apos;click&apos;</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">before</span>(<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;addContactToList));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Allows&#xA0;adding&#xA0;up&#xA0;to&#xA0;4&#xA0;contacts&#xA0;to&#xA0;the&#xA0;list.</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#before
bind	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives.The _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.Note: Unlike native Function#bind, this method doesn't set the "length" property of bound functions.</p>\n        <pre><code>_.bind(func, thisArg, [partials])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to bind.</li><li><code>thisArg</code> <em>(*)</em>: The <code>this</code> binding of <code>func</code>.</li><li><code>[partials]</code> <em>(...*)</em>: The arguments to be partially applied.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new bound function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">greet</span>(greeting<span class="delimiter">,</span>&#xA0;punctuation)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;greeting&#xA0;+&#xA0;<span class="string">&apos;&#xA0;&apos;</span>&#xA0;+&#xA0;this<span class="delimiter">.</span>user&#xA0;+&#xA0;punctuation;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span>&#xA0;};</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;bound&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">bind</span>(greet<span class="delimiter">,</span>&#xA0;object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;hi&apos;</span>);</div><div><span class="name">bound</span>(<span class="string">&apos;!&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hi&#xA0;fred!&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Bound&#xA0;with&#xA0;placeholders.</span></div><div><span class="type">var</span>&#xA0;bound&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">bind</span>(greet<span class="delimiter">,</span>&#xA0;object<span class="delimiter">,</span>&#xA0;_<span class="delimiter">,</span>&#xA0;<span class="string">&apos;!&apos;</span>);</div><div><span class="name">bound</span>(<span class="string">&apos;hi&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hi&#xA0;fred!&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#bind
bindAll	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Binds methods of an object to the object itself, overwriting the existing method.Note: This method doesn't set the "length" property of bound functions.</p>\n        <pre><code>_.bindAll(object, methodNames)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to bind and assign the bound methods to.</li><li><code>methodNames</code> <em>(...(string|string[]))</em>: The object method names to bind.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;view&#xA0;=&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;label&apos;</span>:&#xA0;<span class="string">&apos;docs&apos;</span><span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;click&apos;</span>:&#xA0;<span class="type">function</span>()&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(<span class="string">&apos;clicked&#xA0;&apos;</span>&#xA0;+&#xA0;this<span class="delimiter">.</span><span class="support">label</span>);</div><div>&#xA0;&#xA0;}</div><div>};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">bindAll</span>(view<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;click&apos;</span>]);</div><div><span class="name">jQuery</span>(element)<span class="delimiter method">.</span><span class="name">on</span>(<span class="string">&apos;click&apos;</span><span class="delimiter">,</span>&#xA0;view<span class="delimiter">.</span>click);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;&apos;clicked&#xA0;docs&apos;&#xA0;when&#xA0;clicked.</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#bindAll
bindKey	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes the method at object[key] with partials prepended to the arguments it receives.This method differs from _.bind by allowing bound functions to reference methods that may be redefined or don't yet exist. See Peter Michaux's article for more details.The _.bindKey.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.</p>\n        <pre><code>_.bindKey(object, key, [partials])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to invoke the method on.</li><li><code>key</code> <em>(string)</em>: The key of the method.</li><li><code>[partials]</code> <em>(...*)</em>: The arguments to be partially applied.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new bound function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;greet&apos;</span>:&#xA0;<span class="type">function</span>(greeting<span class="delimiter">,</span>&#xA0;punctuation)&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;greeting&#xA0;+&#xA0;<span class="string">&apos;&#xA0;&apos;</span>&#xA0;+&#xA0;this<span class="delimiter">.</span>user&#xA0;+&#xA0;punctuation;</div><div>&#xA0;&#xA0;}</div><div>};</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;bound&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">bindKey</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;greet&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;hi&apos;</span>);</div><div><span class="name">bound</span>(<span class="string">&apos;!&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hi&#xA0;fred!&apos;</span></div><div>&#xA0;</div><div>object<span class="delimiter method">.</span><span class="name">greet</span>&#xA0;=&#xA0;<span class="type">function</span>(greeting<span class="delimiter">,</span>&#xA0;punctuation)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;greeting&#xA0;+&#xA0;<span class="string">&apos;ya&#xA0;&apos;</span>&#xA0;+&#xA0;this<span class="delimiter">.</span>user&#xA0;+&#xA0;punctuation;</div><div>};</div><div>&#xA0;</div><div><span class="name">bound</span>(<span class="string">&apos;!&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hiya&#xA0;fred!&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Bound&#xA0;with&#xA0;placeholders.</span></div><div><span class="type">var</span>&#xA0;bound&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">bindKey</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;greet&apos;</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter">,</span>&#xA0;<span class="string">&apos;!&apos;</span>);</div><div><span class="name">bound</span>(<span class="string">&apos;hi&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hiya&#xA0;fred!&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#bindKey
camelCase	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts string to camel case.</p>\n        <pre><code>_.camelCase([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the camel cased string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">camelCase</span>(<span class="string">&apos;Foo&#xA0;Bar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fooBar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">camelCase</span>(<span class="string">&apos;--foo-bar--&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fooBar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">camelCase</span>(<span class="string">&apos;__FOO_BAR__&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fooBar&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#camelCase
capitalize	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts the first character of string to upper case and the remaining to lower case.</p>\n        <pre><code>_.capitalize([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to capitalize.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the capitalized string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">capitalize</span>(<span class="string">&apos;FRED&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;Fred&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#capitalize
castArray	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Casts value as an array if it's not one.</p>\n        <pre><code>_.castArray(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to inspect.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the cast array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">castArray</span>(<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">castArray</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;a&apos;:&#xA0;1&#xA0;}]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">castArray</span>(<span class="string">&apos;abc&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;abc&apos;]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">castArray</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[null]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">castArray</span>(undefined);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[undefined]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">castArray</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>];</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(_<span class="delimiter method">.</span><span class="name">castArray</span>(array)&#xA0;===&#xA0;array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#castArray
ceil	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Computes number rounded up to precision.</p>\n        <pre><code>_.ceil(number, [precision=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>number</code> <em>(number)</em>: The number to round up.</li><li><code>[precision=0]</code> <em>(number)</em>: The precision to round up to.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the rounded up number.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">ceil</span>(<span class="numeric">4<span class="delimiter">.</span>006</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;5</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">ceil</span>(<span class="numeric">6<span class="delimiter">.</span>004</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;6.01</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">ceil</span>(<span class="numeric">6040</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;6100</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#ceil
chain	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>1.3.0</p>\n        <pre><code>_.chain(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to wrap.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}</div><div>];</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;youngest&#xA0;=&#xA0;_</div><div>&#xA0;&#xA0;<span class="delimiter method">.</span><span class="name">chain</span>(users)</div><div>&#xA0;&#xA0;<span class="delimiter method">.</span><span class="name">sortBy</span>(<span class="string">&apos;age&apos;</span>)</div><div>&#xA0;&#xA0;<span class="delimiter method">.</span><span class="name">map</span>(<span class="type">function</span>(o)&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;o<span class="delimiter">.</span>user&#xA0;+&#xA0;<span class="string">&apos;&#xA0;is&#xA0;&apos;</span>&#xA0;+&#xA0;o<span class="delimiter">.</span>age;</div><div>&#xA0;&#xA0;})</div><div>&#xA0;&#xA0;<span class="delimiter method">.</span><span class="name">head</span>()</div><div>&#xA0;&#xA0;<span class="delimiter">.</span><span class="support">value</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;pebbles&#xA0;is&#xA0;1&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#chain
chunk	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements.</p>\n        <pre><code>_.chunk(array, [size=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to process.</li><li><code>[size=1]</code> <em>(number)</em>: The length of each chunk</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of chunks.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">chunk</span>([<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;d&apos;</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[&apos;a&apos;,&#xA0;&apos;b&apos;],&#xA0;[&apos;c&apos;,&#xA0;&apos;d&apos;]]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">chunk</span>([<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;d&apos;</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[&apos;a&apos;,&#xA0;&apos;b&apos;,&#xA0;&apos;c&apos;],&#xA0;[&apos;d&apos;]]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#chunk
clamp	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Clamps number within the inclusive lower and upper bounds.</p>\n        <pre><code>_.clamp(number, [lower], upper)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>number</code> <em>(number)</em>: The number to clamp.</li><li><code>[lower]</code> <em>(number)</em>: The lower bound.</li><li><code>upper</code> <em>(number)</em>: The upper bound.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the clamped number.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">clamp</span>(-<span class="numeric">10</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;-5</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">clamp</span>(<span class="numeric">10</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;5</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#clamp
clone	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a shallow clone of value.Note: This method is loosely based on the structured clone algorithm and supports cloning arrays, array buffers, booleans, date objects, maps, numbers, Object objects, regexes, sets, strings, symbols, and typed arrays. The own enumerable properties of arguments objects are cloned as plain objects. An empty object is returned for uncloneable values such as error objects, functions, DOM nodes, and WeakMaps.</p>\n        <pre><code>_.clone(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to clone.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the cloned value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}];</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;shallow&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">clone</span>(objects);</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(shallow[<span class="numeric">0</span>]&#xA0;===&#xA0;objects[<span class="numeric">0</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#clone
cloneDeep	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.clone except that it recursively clones value.</p>\n        <pre><code>_.cloneDeep(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to recursively clone.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the deep cloned value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}];</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;deep&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">cloneDeep</span>(objects);</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(deep[<span class="numeric">0</span>]&#xA0;===&#xA0;objects[<span class="numeric">0</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#cloneDeep
cloneDeepWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.cloneWith except that it recursively clones value.</p>\n        <pre><code>_.cloneDeepWith(value, [customizer])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to recursively clone.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize cloning.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the deep cloned value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">customizer</span>(value)&#xA0;{</div><div>&#xA0;&#xA0;if&#xA0;(_<span class="delimiter method">.</span><span class="name">isElement</span>(value))&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;value<span class="delimiter method">.</span><span class="support">cloneNode</span>(true);</div><div>&#xA0;&#xA0;}</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;el&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">cloneDeepWith</span>(<span class="support">document</span><span class="delimiter">.</span><span class="support">body</span><span class="delimiter">,</span>&#xA0;customizer);</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(el&#xA0;===&#xA0;<span class="support">document</span><span class="delimiter">.</span><span class="support">body</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(el<span class="delimiter">.</span><span class="support">nodeName</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;BODY&apos;</span></div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(el<span class="delimiter">.</span><span class="support">childNodes</span><span class="delimiter">.</span><span class="support">length</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;20</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#cloneDeepWith
cloneWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.clone except that it accepts customizer which is invoked to produce the cloned value. If customizer returns undefined, cloning is handled by the method instead. The customizer is invoked with up to four arguments; (value [, index|key, object, stack]).</p>\n        <pre><code>_.cloneWith(value, [customizer])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to clone.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize cloning.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the cloned value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">customizer</span>(value)&#xA0;{</div><div>&#xA0;&#xA0;if&#xA0;(_<span class="delimiter method">.</span><span class="name">isElement</span>(value))&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;value<span class="delimiter method">.</span><span class="support">cloneNode</span>(false);</div><div>&#xA0;&#xA0;}</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;el&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">cloneWith</span>(<span class="support">document</span><span class="delimiter">.</span><span class="support">body</span><span class="delimiter">,</span>&#xA0;customizer);</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(el&#xA0;===&#xA0;<span class="support">document</span><span class="delimiter">.</span><span class="support">body</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(el<span class="delimiter">.</span><span class="support">nodeName</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;BODY&apos;</span></div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(el<span class="delimiter">.</span><span class="support">childNodes</span><span class="delimiter">.</span><span class="support">length</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#cloneWith
compact	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array with all falsey values removed. The values false, null, 0, "", undefined, and NaN are falsey.</p>\n        <pre><code>_.compact(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to compact.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter">.</span><span class="support">compact</span>([<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;false<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#compact
concat	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a new array concatenating array with any additional arrays and/or values.</p>\n        <pre><code>_.concat(array, [values])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to concatenate.</li><li><code>[values]</code> <em>(...*)</em>: The values to concatenate.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new concatenated array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="numeric">1</span>];</div><div><span class="type">var</span>&#xA0;other&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="support">concat</span>(array<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;[[<span class="numeric">4</span>]]);</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(other);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3,&#xA0;[4]]</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#concat
cond	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that iterates over pairs and invokes the corresponding function of the first predicate to return truthy. The predicate-function pairs are invoked with the this binding and arguments of the created function.</p>\n        <pre><code>_.cond(pairs)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>pairs</code> <em>(Array)</em>: The predicate-function pairs.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new composite function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;func&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">cond</span>([</div><div>&#xA0;&#xA0;[_<span class="delimiter method">.</span><span class="name">matches</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;})<span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;matches&#xA0;A&apos;</span>)]<span class="delimiter">,</span></div><div>&#xA0;&#xA0;[_<span class="delimiter method">.</span><span class="name">conforms</span>({&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;_<span class="delimiter">.</span>isNumber&#xA0;})<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;matches&#xA0;B&apos;</span>)]<span class="delimiter">,</span></div><div>&#xA0;&#xA0;[_<span class="delimiter">.</span>stubTrue<span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;no&#xA0;match&apos;</span>)]</div><div>]);</div><div>&#xA0;</div><div><span class="name">func</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;matches&#xA0;A&apos;</span></div><div>&#xA0;</div><div><span class="name">func</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;matches&#xA0;B&apos;</span></div><div>&#xA0;</div><div><span class="name">func</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="string">&apos;1&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="string">&apos;2&apos;</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;no&#xA0;match&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#cond
conforms	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes the predicate properties of source with the corresponding property values of a given object, returning true if all predicates return truthy, else false.Note: The created function is equivalent to _.conformsTo with source partially applied.</p>\n        <pre><code>_.conforms(source)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>source</code> <em>(Object)</em>: The object of property predicates to conform to.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new spec function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">filter</span>(objects<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">conforms</span>({&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="type">function</span>(n)&#xA0;{&#xA0;return&#xA0;n&#xA0;&gt;&#xA0;<span class="numeric">1</span>;&#xA0;}&#xA0;}));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;b&apos;:&#xA0;2&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#conforms
conformsTo	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if object conforms to source by invoking the predicate properties of source with the corresponding property values of object.Note: This method is equivalent to _.conforms when source is partially applied.</p>\n        <pre><code>_.conformsTo(object, source)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>source</code> <em>(Object)</em>: The object of property predicates to conform to.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>object</code> conforms, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">conformsTo</span>(object<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="type">function</span>(n)&#xA0;{&#xA0;return&#xA0;n&#xA0;&gt;&#xA0;<span class="numeric">1</span>;&#xA0;}&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">conformsTo</span>(object<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="type">function</span>(n)&#xA0;{&#xA0;return&#xA0;n&#xA0;&gt;&#xA0;<span class="numeric">2</span>;&#xA0;}&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#conformsTo
constant	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that returns value.</p>\n        <pre><code>_.constant(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to return from the new function.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new constant function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}));</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(objects);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;a&apos;:&#xA0;1&#xA0;},&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1&#xA0;}]</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(objects[<span class="numeric">0</span>]&#xA0;===&#xA0;objects[<span class="numeric">1</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#constant
countBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an object composed of keys generated from the results of running each element of collection thru iteratee. The corresponding value of each key is the number of times the key was returned by iteratee. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.countBy(collection, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee to transform keys.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the composed aggregate object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">countBy</span>([<span class="numeric">6<span class="delimiter">.</span>1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4<span class="delimiter">.</span>2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6<span class="delimiter">.</span>3</span>]<span class="delimiter">,</span>&#xA0;<span class="support">Math</span><span class="delimiter">.</span>floor);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;4&apos;:&#xA0;1,&#xA0;&apos;6&apos;:&#xA0;2&#xA0;}</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">countBy</span>([<span class="string">&apos;one&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;two&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;three&apos;</span>]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;length&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;3&apos;:&#xA0;2,&#xA0;&apos;5&apos;:&#xA0;1&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#countBy
create	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an object that inherits from the prototype object. If a properties object is given, its own enumerable string keyed properties are assigned to the created object.</p>\n        <pre><code>_.create(prototype, [properties])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>prototype</code> <em>(Object)</em>: The object to inherit from.</li><li><code>[properties]</code> <em>(Object)</em>: The properties to assign to the object.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Shape</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span><span class="support">x</span>&#xA0;=&#xA0;<span class="numeric">0</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span><span class="support">y</span>&#xA0;=&#xA0;<span class="numeric">0</span>;</div><div>}</div><div>&#xA0;</div><div><span class="type">function</span>&#xA0;<span class="name">Circle</span>()&#xA0;{</div><div>&#xA0;&#xA0;Shape<span class="delimiter method">.</span><span class="support">call</span>(this);</div><div>}</div><div>&#xA0;</div><div>Circle<span class="delimiter">.</span><span class="support">prototype</span>&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">create</span>(Shape<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">,</span>&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;constructor&apos;</span>:&#xA0;Circle</div><div>});</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;circle&#xA0;=&#xA0;new&#xA0;<span class="name type">Circle</span>;</div><div>circle&#xA0;instanceof&#xA0;Circle;</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>circle&#xA0;instanceof&#xA0;Shape;</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#create
curry	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that accepts arguments of func and either invokes func returning its result, if at least arity number of arguments have been provided, or returns a function that accepts the remaining func arguments, and so on. The arity of func may be specified if func.length is not sufficient.The _.curry.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for provided arguments.Note: This method doesn't set the "length" property of curried functions.</p>\n        <pre><code>_.curry(func, [arity=func.length])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to curry.</li><li><code>[arity=func.length]</code> <em>(number)</em>: The arity of <code>func</code>.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new curried function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;<span class="name">abc</span>&#xA0;=&#xA0;<span class="type">function</span>(a<span class="delimiter">,</span>&#xA0;b<span class="delimiter">,</span>&#xA0;c)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;[a<span class="delimiter">,</span>&#xA0;b<span class="delimiter">,</span>&#xA0;c];</div><div>};</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;curried&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">curry</span>(abc);</div><div>&#xA0;</div><div><span class="name">curried</span>(<span class="numeric">1</span>)(<span class="numeric">2</span>)(<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div><span class="name">curried</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>)(<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div><span class="name">curried</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Curried&#xA0;with&#xA0;placeholders.</span></div><div><span class="name">curried</span>(<span class="numeric">1</span>)(_<span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>)(<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#curry
curryRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.curry except that arguments are applied to func in the manner of _.partialRight instead of _.partial.The _.curryRight.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for provided arguments.Note: This method doesn't set the "length" property of curried functions.</p>\n        <pre><code>_.curryRight(func, [arity=func.length])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to curry.</li><li><code>[arity=func.length]</code> <em>(number)</em>: The arity of <code>func</code>.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new curried function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;<span class="name">abc</span>&#xA0;=&#xA0;<span class="type">function</span>(a<span class="delimiter">,</span>&#xA0;b<span class="delimiter">,</span>&#xA0;c)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;[a<span class="delimiter">,</span>&#xA0;b<span class="delimiter">,</span>&#xA0;c];</div><div>};</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;curried&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">curryRight</span>(abc);</div><div>&#xA0;</div><div><span class="name">curried</span>(<span class="numeric">3</span>)(<span class="numeric">2</span>)(<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div><span class="name">curried</span>(<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>)(<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div><span class="name">curried</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Curried&#xA0;with&#xA0;placeholders.</span></div><div><span class="name">curried</span>(<span class="numeric">3</span>)(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;_)(<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#curryRight
debounce	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since the last time the debounced function was invoked. The debounced function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the debounced function. Subsequent calls to the debounced function return the result of the last func invocation.Note: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if the debounced function is invoked more than once during the wait timeout.If wait is 0 and leading is false, func invocation is deferred until to the next tick, similar to setTimeout with a timeout of 0.See David Corbacho's article for details over the differences between _.debounce and _.throttle.</p>\n        <pre><code>_.debounce(func, [wait=0], [options={}])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to debounce.</li><li><code>[wait=0]</code> <em>(number)</em>: The number of milliseconds to delay.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.leading=false]</code> <em>(boolean)</em>: Specify invoking on the leading edge of the timeout.</li><li><code>[options.maxWait]</code> <em>(number)</em>: The maximum time <code>func</code> is allowed to be delayed before it&apos;s invoked.</li><li><code>[options.trailing=true]</code> <em>(boolean)</em>: Specify invoking on the trailing edge of the timeout.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new debounced function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="comment">//&#xA0;Avoid&#xA0;costly&#xA0;calculations&#xA0;while&#xA0;the&#xA0;window&#xA0;size&#xA0;is&#xA0;in&#xA0;flux.</span></div><div><span class="name">jQuery</span>(<span class="support">window</span>)<span class="delimiter method">.</span><span class="name">on</span>(<span class="string">&apos;resize&apos;</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">debounce</span>(calculateLayout<span class="delimiter">,</span>&#xA0;<span class="numeric">150</span>));</div><div>&#xA0;</div><div><span class="comment">//&#xA0;Invoke&#xA0;`sendMail`&#xA0;when&#xA0;clicked,&#xA0;debouncing&#xA0;subsequent&#xA0;calls.</span></div><div><span class="name">jQuery</span>(element)<span class="delimiter method">.</span><span class="name">on</span>(<span class="string">&apos;click&apos;</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">debounce</span>(sendMail<span class="delimiter">,</span>&#xA0;<span class="numeric">300</span><span class="delimiter">,</span>&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;leading&apos;</span>:&#xA0;true<span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;trailing&apos;</span>:&#xA0;false</div><div>}));</div><div>&#xA0;</div><div><span class="comment">//&#xA0;Ensure&#xA0;`batchLog`&#xA0;is&#xA0;invoked&#xA0;once&#xA0;after&#xA0;1&#xA0;second&#xA0;of&#xA0;debounced&#xA0;calls.</span></div><div><span class="type">var</span>&#xA0;debounced&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">debounce</span>(batchLog<span class="delimiter">,</span>&#xA0;<span class="numeric">250</span><span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;maxWait&apos;</span>:&#xA0;<span class="numeric">1000</span>&#xA0;});</div><div><span class="type">var</span>&#xA0;source&#xA0;=&#xA0;new&#xA0;<span class="name type">EventSource</span>(<span class="string">&apos;/stream&apos;</span>);</div><div><span class="name">jQuery</span>(source)<span class="delimiter method">.</span><span class="name">on</span>(<span class="string">&apos;message&apos;</span><span class="delimiter">,</span>&#xA0;debounced);</div><div>&#xA0;</div><div><span class="comment">//&#xA0;Cancel&#xA0;the&#xA0;trailing&#xA0;debounced&#xA0;invocation.</span></div><div><span class="name">jQuery</span>(<span class="support">window</span>)<span class="delimiter method">.</span><span class="name">on</span>(<span class="string">&apos;popstate&apos;</span><span class="delimiter">,</span>&#xA0;debounced<span class="delimiter">.</span>cancel);</div></pre>\n    </section>	https://lodash.com/docs/4.17.4#debounce
deburr	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Deburrs string by converting Latin-1 Supplement and Latin Extended-A letters to basic Latin letters and removing combining diacritical marks.</p>\n        <pre><code>_.deburr([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to deburr.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the deburred string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">deburr</span>(<span class="string">&apos;d&#xE9;j&#xE0;&#xA0;vu&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;deja&#xA0;vu&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#deburr
defaultTo	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks value to determine whether a default value should be returned in its place. The defaultValue is returned if value is NaN, null, or undefined.</p>\n        <pre><code>_.defaultTo(value, defaultValue)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li><li><code>defaultValue</code> <em>(*)</em>: The default value.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the resolved value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">defaultTo</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">10</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">defaultTo</span>(undefined<span class="delimiter">,</span>&#xA0;<span class="numeric">10</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;10</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#defaultTo
defaults	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Assigns own and inherited enumerable string keyed properties of source objects to the destination object for all destination properties that resolve to undefined. Source objects are applied from left to right. Once a property is set, additional values of the same property are ignored.Note: This method mutates object.</p>\n        <pre><code>_.defaults(object, [sources])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">defaults</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;b&apos;:&#xA0;2&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#defaults
defaultsDeep	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.defaults except that it recursively assigns default properties.Note: This method mutates object.</p>\n        <pre><code>_.defaultsDeep(object, [sources])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">defaultsDeep</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;{&#xA0;&apos;b&apos;:&#xA0;2,&#xA0;&apos;c&apos;:&#xA0;3&#xA0;}&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#defaultsDeep
defer	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Defers invoking the func until the current call stack has cleared. Any additional arguments are provided to func when it's invoked.</p>\n        <pre><code>_.defer(func, [args])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to defer.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke <code>func</code> with.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the timer id.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter">.</span><span class="support">defer</span>(<span class="type">function</span>(text)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(text);</div><div>}<span class="delimiter">,</span>&#xA0;<span class="string">&apos;deferred&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;&apos;deferred&apos;&#xA0;after&#xA0;one&#xA0;millisecond.</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#defer
delay	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Invokes func after wait milliseconds. Any additional arguments are provided to func when it's invoked.</p>\n        <pre><code>_.delay(func, wait, [args])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to delay.</li><li><code>wait</code> <em>(number)</em>: The number of milliseconds to delay invocation.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke <code>func</code> with.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the timer id.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">delay</span>(<span class="type">function</span>(text)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(text);</div><div>}<span class="delimiter">,</span>&#xA0;<span class="numeric">1000</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;later&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;&apos;later&apos;&#xA0;after&#xA0;one&#xA0;second.</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#delay
difference	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of array values not included in the other given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array.Note: Unlike _.pullAll, this method returns a new array.</p>\n        <pre><code>_.difference(array, [values])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[values]</code> <em>(...Array)</em>: The values to exclude.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">difference</span>([<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#difference
differenceBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.difference except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:(value).Note: Unlike _.pullAllBy, this method returns a new array.</p>\n        <pre><code>_.differenceBy(array, [values], [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[values]</code> <em>(...Array)</em>: The values to exclude.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">differenceBy</span>([<span class="numeric">2<span class="delimiter">.</span>1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1<span class="delimiter">.</span>2</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">2<span class="delimiter">.</span>3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3<span class="delimiter">.</span>4</span>]<span class="delimiter">,</span>&#xA0;<span class="support">Math</span><span class="delimiter">.</span>floor);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1.2]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">differenceBy</span>([{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;x&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;2&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#differenceBy
differenceWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.difference except that it accepts comparator which is invoked to compare elements of array to values. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal).Note: Unlike _.pullAllWith, this method returns a new array.</p>\n        <pre><code>_.differenceWith(array, [values], [comparator])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[values]</code> <em>(...Array)</em>: The values to exclude.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">differenceWith</span>(objects<span class="delimiter">,</span>&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>isEqual);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;2,&#xA0;&apos;y&apos;:&#xA0;1&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#differenceWith
divide	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Divide two numbers.</p>\n        <pre><code>_.divide(dividend, divisor)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>dividend</code> <em>(number)</em>: The first number in a division.</li><li><code>divisor</code> <em>(number)</em>: The second number in a division.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the quotient.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">divide</span>(<span class="numeric">6</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1.5</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#divide
drop	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a slice of array with n elements dropped from the beginning.</p>\n        <pre><code>_.drop(array, [n=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to drop.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">drop</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;3]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">drop</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">drop</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">drop</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#drop
dropRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a slice of array with n elements dropped from the end.</p>\n        <pre><code>_.dropRight(array, [n=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to drop.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">dropRight</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">dropRight</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">dropRight</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">dropRight</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#dropRight
dropRightWhile	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a slice of array excluding elements dropped from the end. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).</p>\n        <pre><code>_.dropRightWhile(array, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">dropRightWhile</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;!o<span class="delimiter">.</span>active;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">dropRightWhile</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;,&#xA0;&apos;fred&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">dropRightWhile</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">dropRightWhile</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;,&#xA0;&apos;fred&apos;,&#xA0;&apos;pebbles&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#dropRightWhile
dropWhile	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a slice of array excluding elements dropped from the beginning. Elements are dropped until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).</p>\n        <pre><code>_.dropWhile(array, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">dropWhile</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;!o<span class="delimiter">.</span>active;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;pebbles&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">dropWhile</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;fred&apos;,&#xA0;&apos;pebbles&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">dropWhile</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;pebbles&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">dropWhile</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;,&#xA0;&apos;fred&apos;,&#xA0;&apos;pebbles&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#dropWhile
endsWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if string ends with the given target string.</p>\n        <pre><code>_.endsWith([string=&apos;&apos;], [target], [position=string.length])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to inspect.</li><li><code>[target]</code> <em>(string)</em>: The string to search for.</li><li><code>[position=string.length]</code> <em>(number)</em>: The position to search up to.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>string</code> ends with <code>target</code>, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">endsWith</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">endsWith</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">endsWith</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#endsWith
eq	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Performs a SameValueZero comparison between two values to determine if they are equivalent.</p>\n        <pre><code>_.eq(value, other)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if the values are equivalent, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;};</div><div><span class="type">var</span>&#xA0;other&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">eq</span>(object<span class="delimiter">,</span>&#xA0;object);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">eq</span>(object<span class="delimiter">,</span>&#xA0;other);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">eq</span>(<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">eq</span>(<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="support">Object</span>(<span class="string">&apos;a&apos;</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">eq</span>(NaN<span class="delimiter">,</span>&#xA0;NaN);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#eq
escape	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts the characters "&", "<", ">", '"', and "'" in string to their corresponding HTML entities.Note: No other characters are escaped. To escape additional characters use a third-party library like he.Though the ">" character is escaped for symmetry, characters like ">" and "/" don't need escaping in HTML and have no special meaning unless they're part of a tag or unquoted attribute value. See Mathias Bynens's article (under "semi-related fun fact") for more details.When working with HTML you should always quote attribute values to reduce XSS vectors.</p>\n        <pre><code>_.escape([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to escape.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the escaped string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">escape</span>(<span class="string">&apos;fred,&#xA0;barney,&#xA0;&amp;&#xA0;pebbles&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fred,&#xA0;barney,&#xA0;&amp;amp;&#xA0;pebbles&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#escape
escapeRegExp	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Escapes the RegExp special characters "^", "$", "", ".", "*", "+", "?", "(", ")", "[", "]", "{", "}", and "|" in string.</p>\n        <pre><code>_.escapeRegExp([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to escape.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the escaped string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">escapeRegExp</span>(<span class="string">&apos;[lodash](https://lodash.com/)&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;\[lodash\]\(https://lodash\.com/\)&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#escapeRegExp
every	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if predicate returns truthy for all elements of collection. Iteration is stopped once predicate returns falsey. The predicate is invoked with three arguments: (value, index|key, collection).Note: This method returns true for empty collections because everything is true of elements of empty collections.</p>\n        <pre><code>_.every(collection, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if all elements pass the predicate check, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">every</span>([true<span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;null<span class="delimiter">,</span>&#xA0;<span class="string">&apos;yes&apos;</span>]<span class="delimiter">,</span>&#xA0;<span class="support">Boolean</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}</div><div>];</div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">every</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">every</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">every</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#every
fill	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Fills elements of array with value from start up to, but not including, end.Note: This method mutates array.</p>\n        <pre><code>_.fill(array, value, [start=0], [end=array.length])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to fill.</li><li><code>value</code> <em>(*)</em>: The value to fill <code>array</code> with.</li><li><code>[start=0]</code> <em>(number)</em>: The start position.</li><li><code>[end=array.length]</code> <em>(number)</em>: The end position.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">fill</span>(array<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span>);</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;a&apos;,&#xA0;&apos;a&apos;]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">fill</span>(<span class="support">Array</span>(<span class="numeric">3</span>)<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;2,&#xA0;2]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">fill</span>([<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span><span class="delimiter">,</span>&#xA0;<span class="numeric">8</span><span class="delimiter">,</span>&#xA0;<span class="numeric">10</span>]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;*&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[4,&#xA0;&apos;*&apos;,&#xA0;&apos;*&apos;,&#xA0;10]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#fill
filter	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Iterates over elements of collection, returning an array of all elements predicate returns truthy for. The predicate is invoked with three arguments: (value, index|key, collection).Note: Unlike _.remove, this method returns a new array.</p>\n        <pre><code>_.filter(collection, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new filtered array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">filter</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;!o<span class="delimiter">.</span>active;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;fred&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">filter</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">filter</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;fred&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">filter</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#filter
find	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Iterates over elements of collection, returning the first element predicate returns truthy for. The predicate is invoked with three arguments: (value, index|key, collection).</p>\n        <pre><code>_.find(collection, [predicate=_.identity], [fromIndex=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[fromIndex=0]</code> <em>(number)</em>: The index to search from.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the matched element, else <code>undefined</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="support">find</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>age&#xA0;&lt;&#xA0;<span class="numeric">40</span>;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;object&#xA0;for&#xA0;&apos;barney&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="support">find</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;object&#xA0;for&#xA0;&apos;pebbles&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="support">find</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;object&#xA0;for&#xA0;&apos;fred&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="support">find</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;object&#xA0;for&#xA0;&apos;barney&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#find
findIndex	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.find except that it returns the index of the first element predicate returns truthy for instead of the element itself.</p>\n        <pre><code>_.findIndex(array, [predicate=_.identity], [fromIndex=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[fromIndex=0]</code> <em>(number)</em>: The index to search from.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index of the found element, else <code>-1</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">findIndex</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>user&#xA0;==&#xA0;<span class="string">&apos;barney&apos;</span>;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findIndex</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findIndex</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findIndex</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;2</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#findIndex
findKey	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.find except that it returns the key of the first element predicate returns truthy for instead of the element itself.</p>\n        <pre><code>_.findKey(object, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the key of the matched element, else <code>undefined</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;barney&apos;</span>:&#xA0;&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;fred&apos;</span>:&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;pebbles&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}</div><div>};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">findKey</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>age&#xA0;&lt;&#xA0;<span class="numeric">40</span>;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;barney&apos;&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findKey</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;pebbles&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findKey</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fred&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findKey</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;barney&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#findKey
findLast	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.find except that it iterates over elements of collection from right to left.</p>\n        <pre><code>_.findLast(collection, [predicate=_.identity], [fromIndex=collection.length-1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[fromIndex=collection.length-1]</code> <em>(number)</em>: The index to search from.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the matched element, else <code>undefined</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">findLast</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>]<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;%&#xA0;<span class="numeric">2</span>&#xA0;==&#xA0;<span class="numeric">1</span>;</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#findLast
findLastIndex	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.findIndex except that it iterates over elements of collection from right to left.</p>\n        <pre><code>_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length-1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[fromIndex=array.length-1]</code> <em>(number)</em>: The index to search from.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index of the found element, else <code>-1</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">findLastIndex</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>user&#xA0;==&#xA0;<span class="string">&apos;pebbles&apos;</span>;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;2</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findLastIndex</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findLastIndex</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;2</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findLastIndex</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#findLastIndex
findLastKey	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.findKey except that it iterates over elements of a collection in the opposite order.</p>\n        <pre><code>_.findLastKey(object, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the key of the matched element, else <code>undefined</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;barney&apos;</span>:&#xA0;&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;fred&apos;</span>:&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;pebbles&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}</div><div>};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">findLastKey</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>age&#xA0;&lt;&#xA0;<span class="numeric">40</span>;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;returns&#xA0;&apos;pebbles&apos;&#xA0;assuming&#xA0;`_.findKey`&#xA0;returns&#xA0;&apos;barney&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findLastKey</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;barney&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findLastKey</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fred&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">findLastKey</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;pebbles&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#findLastKey
flatMap	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a flattened array of values by running each element in collection thru iteratee and flattening the mapped results. The iteratee is invoked with three arguments: (value, index|key, collection).</p>\n        <pre><code>_.flatMap(collection, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">duplicate</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;[n<span class="delimiter">,</span>&#xA0;n];</div><div>}</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">flatMap</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;duplicate);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;1,&#xA0;2,&#xA0;2]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#flatMap
flatMapDeep	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.flatMap except that it recursively flattens the mapped results.</p>\n        <pre><code>_.flatMapDeep(collection, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">duplicate</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;[[[n<span class="delimiter">,</span>&#xA0;n]]];</div><div>}</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">flatMapDeep</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;duplicate);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;1,&#xA0;2,&#xA0;2]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#flatMapDeep
flatMapDepth	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.flatMap except that it recursively flattens the mapped results up to depth times.</p>\n        <pre><code>_.flatMapDepth(collection, [iteratee=_.identity], [depth=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[depth=1]</code> <em>(number)</em>: The maximum recursion depth.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">duplicate</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;[[[n<span class="delimiter">,</span>&#xA0;n]]];</div><div>}</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">flatMapDepth</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;duplicate<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[1,&#xA0;1],&#xA0;[2,&#xA0;2]]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#flatMapDepth
flatten	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Flattens array a single level deep.</p>\n        <pre><code>_.flatten(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to flatten.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">flatten</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">4</span>]]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>]]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;[3,&#xA0;[4]],&#xA0;5]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#flatten
flattenDeep	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Recursively flattens array.</p>\n        <pre><code>_.flattenDeep(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to flatten.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">flattenDeep</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">4</span>]]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>]]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3,&#xA0;4,&#xA0;5]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#flattenDeep
flattenDepth	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Recursively flatten array up to depth times.</p>\n        <pre><code>_.flattenDepth(array, [depth=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to flatten.</li><li><code>[depth=1]</code> <em>(number)</em>: The maximum recursion depth.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new flattened array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;[<span class="numeric">4</span>]]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>]];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">flattenDepth</span>(array<span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;[3,&#xA0;[4]],&#xA0;5]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">flattenDepth</span>(array<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3,&#xA0;[4],&#xA0;5]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#flattenDepth
flip	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func with arguments reversed.</p>\n        <pre><code>_.flip(func)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to flip arguments for.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new flipped function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;flipped&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">flip</span>(<span class="type">function</span>()&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;_<span class="delimiter method">.</span><span class="name">toArray</span>(arguments);</div><div>});</div><div>&#xA0;</div><div><span class="name">flipped</span>(<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;d&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;d&apos;,&#xA0;&apos;c&apos;,&#xA0;&apos;b&apos;,&#xA0;&apos;a&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#flip
floor	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Computes number rounded down to precision.</p>\n        <pre><code>_.floor(number, [precision=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>number</code> <em>(number)</em>: The number to round down.</li><li><code>[precision=0]</code> <em>(number)</em>: The precision to round down to.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the rounded down number.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">floor</span>(<span class="numeric">4<span class="delimiter">.</span>006</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;4</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">floor</span>(<span class="numeric">0<span class="delimiter">.</span>046</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0.04</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">floor</span>(<span class="numeric">4060</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;4000</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#floor
flow	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that returns the result of invoking the given functions with the this binding of the created function, where each successive invocation is supplied the return value of the previous.</p>\n        <pre><code>_.flow([funcs])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[funcs]</code> <em>(...(Function|Function[]))</em>: The functions to invoke.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new composite function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">square</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;*&#xA0;n;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;addSquare&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">flow</span>([_<span class="delimiter">.</span>add<span class="delimiter">,</span>&#xA0;square]);</div><div><span class="name">addSquare</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;9</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#flow
flowRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.flow except that it creates a function that invokes the given functions from right to left.</p>\n        <pre><code>_.flowRight([funcs])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[funcs]</code> <em>(...(Function|Function[]))</em>: The functions to invoke.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new composite function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">square</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;*&#xA0;n;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;addSquare&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">flowRight</span>([square<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>add]);</div><div><span class="name">addSquare</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;9</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#flowRight
forEach	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Iterates over elements of collection and invokes iteratee for each element. The iteratee is invoked with three arguments: (value, index|key, collection). Iteratee functions may exit iteration early by explicitly returning false.Note: As with other "Collections" methods, objects with a "length" property are iterated like arrays. To avoid this behavior use _.forIn or _.forOwn for object iteration.</p>\n        <pre><code>_.forEach(collection, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>_.each</em></p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">forEach</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(value)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(value);</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;`1`&#xA0;then&#xA0;`2`.</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">forEach</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(value<span class="delimiter">,</span>&#xA0;key)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(key);</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;&apos;a&apos;&#xA0;then&#xA0;&apos;b&apos;&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed).</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#forEach
forEachRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.forEach except that it iterates over elements of collection from right to left.</p>\n        <pre><code>_.forEachRight(collection, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>_.eachRight</em></p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">forEachRight</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(value)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(value);</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;`2`&#xA0;then&#xA0;`1`.</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#forEachRight
forIn	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Iterates over own and inherited enumerable string keyed properties of an object and invokes iteratee for each property. The iteratee is invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning false.</p>\n        <pre><code>_.forIn(object, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">forIn</span>(new&#xA0;<span class="name type">Foo</span><span class="delimiter">,</span>&#xA0;<span class="type">function</span>(value<span class="delimiter">,</span>&#xA0;key)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(key);</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;&apos;a&apos;,&#xA0;&apos;b&apos;,&#xA0;then&#xA0;&apos;c&apos;&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed).</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#forIn
forInRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.forIn except that it iterates over properties of object in the opposite order.</p>\n        <pre><code>_.forInRight(object, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">forInRight</span>(new&#xA0;<span class="name type">Foo</span><span class="delimiter">,</span>&#xA0;<span class="type">function</span>(value<span class="delimiter">,</span>&#xA0;key)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(key);</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;&apos;c&apos;,&#xA0;&apos;b&apos;,&#xA0;then&#xA0;&apos;a&apos;&#xA0;assuming&#xA0;`_.forIn`&#xA0;logs&#xA0;&apos;a&apos;,&#xA0;&apos;b&apos;,&#xA0;then&#xA0;&apos;c&apos;.</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#forInRight
forOwn	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Iterates over own enumerable string keyed properties of an object and invokes iteratee for each property. The iteratee is invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning false.</p>\n        <pre><code>_.forOwn(object, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">forOwn</span>(new&#xA0;<span class="name type">Foo</span><span class="delimiter">,</span>&#xA0;<span class="type">function</span>(value<span class="delimiter">,</span>&#xA0;key)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(key);</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;&apos;a&apos;&#xA0;then&#xA0;&apos;b&apos;&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed).</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#forOwn
forOwnRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.forOwn except that it iterates over properties of object in the opposite order.</p>\n        <pre><code>_.forOwnRight(object, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">forOwnRight</span>(new&#xA0;<span class="name type">Foo</span><span class="delimiter">,</span>&#xA0;<span class="type">function</span>(value<span class="delimiter">,</span>&#xA0;key)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(key);</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;&apos;b&apos;&#xA0;then&#xA0;&apos;a&apos;&#xA0;assuming&#xA0;`_.forOwn`&#xA0;logs&#xA0;&apos;a&apos;&#xA0;then&#xA0;&apos;b&apos;.</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#forOwnRight
fromPairs	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>The inverse of _.toPairs; this method returns an object composed from key-value pairs.</p>\n        <pre><code>_.fromPairs(pairs)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>pairs</code> <em>(Array)</em>: The key-value pairs.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">fromPairs</span>([[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>]<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;b&apos;:&#xA0;2&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#fromPairs
functions	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of function property names from own enumerable properties of object.</p>\n        <pre><code>_.functions(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the function names.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;a&apos;</span>);</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;b&apos;</span>);</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;c&apos;</span>);</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">functions</span>(new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;b&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#functions
functionsIn	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of function property names from own and inherited enumerable properties of object.</p>\n        <pre><code>_.functionsIn(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the function names.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;a&apos;</span>);</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;b&apos;</span>);</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;c&apos;</span>);</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">functionsIn</span>(new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;b&apos;,&#xA0;&apos;c&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#functionsIn
get	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets the value at path of object. If the resolved value is undefined, the defaultValue is returned in its place.</p>\n        <pre><code>_.get(object, path, [defaultValue])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to get.</li><li><code>[defaultValue]</code> <em>(*)</em>: The value returned for <code>undefined</code> resolved values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the resolved value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}&#xA0;}]&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">get</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[0].b.c&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">get</span>(object<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;0&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">get</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a.b.c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;default&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;default&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#get
groupBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an object composed of keys generated from the results of running each element of collection thru iteratee. The order of grouped values is determined by the order they occur in collection. The corresponding value of each key is an array of elements responsible for generating the key. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.groupBy(collection, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee to transform keys.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the composed aggregate object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">groupBy</span>([<span class="numeric">6<span class="delimiter">.</span>1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4<span class="delimiter">.</span>2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6<span class="delimiter">.</span>3</span>]<span class="delimiter">,</span>&#xA0;<span class="support">Math</span><span class="delimiter">.</span>floor);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;4&apos;:&#xA0;[4.2],&#xA0;&apos;6&apos;:&#xA0;[6.1,&#xA0;6.3]&#xA0;}</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">groupBy</span>([<span class="string">&apos;one&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;two&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;three&apos;</span>]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;length&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;3&apos;:&#xA0;[&apos;one&apos;,&#xA0;&apos;two&apos;],&#xA0;&apos;5&apos;:&#xA0;[&apos;three&apos;]&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#groupBy
gt	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is greater than other.</p>\n        <pre><code>_.gt(value, other)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is greater than <code>other</code>, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">gt</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">gt</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">gt</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#gt
gte	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is greater than or equal to other.</p>\n        <pre><code>_.gte(value, other)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is greater than or equal to <code>other</code>, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">gte</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">gte</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">gte</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#gte
has	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if path is a direct property of object.</p>\n        <pre><code>_.has(object, path)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>path</code> exists, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}&#xA0;};</div><div><span class="type">var</span>&#xA0;other&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">create</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;_<span class="delimiter method">.</span><span class="name">create</span>({&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;})&#xA0;});</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">has</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">has</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a.b&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">has</span>(object<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">has</span>(other<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#has
hasIn	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if path is a direct or inherited property of object.</p>\n        <pre><code>_.hasIn(object, path)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>path</code> exists, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">create</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;_<span class="delimiter method">.</span><span class="name">create</span>({&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;})&#xA0;});</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">hasIn</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">hasIn</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a.b&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">hasIn</span>(object<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">hasIn</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#hasIn
head	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets the first element of array.</p>\n        <pre><code>_.head(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>_.first</em></p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">head</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">head</span>([]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;undefined</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#head
identity	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method returns the first argument it receives.</p>\n        <pre><code>_.identity(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: Any value.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns <code>value</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;};</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(_<span class="delimiter method">.</span><span class="name">identity</span>(object)&#xA0;===&#xA0;object);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#identity
inRange	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if n is between start and up to, but not including, end. If end is not specified, it's set to start with start then set to 0. If start is greater than end the params are swapped to support negative ranges.</p>\n        <pre><code>_.inRange(number, [start=0], end)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>number</code> <em>(number)</em>: The number to check.</li><li><code>[start=0]</code> <em>(number)</em>: The start of the range.</li><li><code>end</code> <em>(number)</em>: The end of the range.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>number</code> is in the range, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">inRange</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">inRange</span>(<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">8</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">inRange</span>(<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">inRange</span>(<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">inRange</span>(<span class="numeric">1<span class="delimiter">.</span>2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">inRange</span>(<span class="numeric">5<span class="delimiter">.</span>2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">inRange</span>(-<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">6</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#inRange
includes	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is in collection. If collection is a string, it's checked for a substring of value, otherwise SameValueZero is used for equality comparisons. If fromIndex is negative, it's used as the offset from the end of collection.</p>\n        <pre><code>_.includes(collection, value, [fromIndex=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object|string)</em>: The collection to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li><li><code>[fromIndex=0]</code> <em>(number)</em>: The index to search from.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is found, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">includes</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">includes</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">includes</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">includes</span>(<span class="string">&apos;abcd&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;bc&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#includes
indexOf	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets the index at which the first occurrence of value is found in array using SameValueZero for equality comparisons. If fromIndex is negative, it's used as the offset from the end of array.</p>\n        <pre><code>_.indexOf(array, value, [fromIndex=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li><li><code>[fromIndex=0]</code> <em>(number)</em>: The index to search from.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index of the matched value, else <code>-1</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="support">indexOf</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Search&#xA0;from&#xA0;the&#xA0;`fromIndex`.</span></div><div>_<span class="delimiter method">.</span><span class="support">indexOf</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#indexOf
initial	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets all but the last element of array.</p>\n        <pre><code>_.initial(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">initial</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#initial
intersection	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of unique values that are included in all given arrays using SameValueZero for equality comparisons. The order and references of result values are determined by the first array.</p>\n        <pre><code>_.intersection([arrays])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of intersecting values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">intersection</span>([<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#intersection
intersectionBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.intersection except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:(value).</p>\n        <pre><code>_.intersectionBy([arrays], [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of intersecting values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">intersectionBy</span>([<span class="numeric">2<span class="delimiter">.</span>1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1<span class="delimiter">.</span>2</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">2<span class="delimiter">.</span>3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3<span class="delimiter">.</span>4</span>]<span class="delimiter">,</span>&#xA0;<span class="support">Math</span><span class="delimiter">.</span>floor);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2.1]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">intersectionBy</span>([{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;x&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;1&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#intersectionBy
intersectionWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.intersection except that it accepts comparator which is invoked to compare elements of arrays. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: (arrVal, othVal).</p>\n        <pre><code>_.intersectionWith([arrays], [comparator])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of intersecting values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}];</div><div><span class="type">var</span>&#xA0;others&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">intersectionWith</span>(objects<span class="delimiter">,</span>&#xA0;others<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>isEqual);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;1,&#xA0;&apos;y&apos;:&#xA0;2&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#intersectionWith
invert	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an object composed of the inverted keys and values of object. If object contains duplicate values, subsequent values overwrite property assignments of previous values.</p>\n        <pre><code>_.invert(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to invert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new inverted object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">invert</span>(object);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;1&apos;:&#xA0;&apos;c&apos;,&#xA0;&apos;2&apos;:&#xA0;&apos;b&apos;&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#invert
invertBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.invert except that the inverted object is generated from the results of running each element of object thru iteratee. The corresponding inverted value of each inverted key is an array of keys responsible for generating the inverted value. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.invertBy(object, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to invert.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new inverted object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">invertBy</span>(object);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;1&apos;:&#xA0;[&apos;a&apos;,&#xA0;&apos;c&apos;],&#xA0;&apos;2&apos;:&#xA0;[&apos;b&apos;]&#xA0;}</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">invertBy</span>(object<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(value)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;<span class="string">&apos;group&apos;</span>&#xA0;+&#xA0;value;</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;group1&apos;:&#xA0;[&apos;a&apos;,&#xA0;&apos;c&apos;],&#xA0;&apos;group2&apos;:&#xA0;[&apos;b&apos;]&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#invertBy
invoke	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Invokes the method at path of object.</p>\n        <pre><code>_.invoke(object, path, [args])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path of the method to invoke.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke the method with.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the result of the invoked method.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>]&#xA0;}&#xA0;}]&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">invoke</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[0].b.c.slice&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#invoke
invokeMap	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Invokes the method at path of each element in collection, returning an array of the results of each invoked method. Any additional arguments are provided to each invoked method. If path is a function, it's invoked for, and this bound to, each element in collection.</p>\n        <pre><code>_.invokeMap(collection, path, [args])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>path</code> <em>(Array|Function|string)</em>: The path of the method to invoke or the function invoked per iteration.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke each method with.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the array of results.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">invokeMap</span>([[<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">7</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>]]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;sort&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[1,&#xA0;5,&#xA0;7],&#xA0;[1,&#xA0;2,&#xA0;3]]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">invokeMap</span>([<span class="numeric">123</span><span class="delimiter">,</span>&#xA0;<span class="numeric">456</span>]<span class="delimiter">,</span>&#xA0;<span class="support">String</span><span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>split<span class="delimiter">,</span>&#xA0;<span class="string">&apos;&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[&apos;1&apos;,&#xA0;&apos;2&apos;,&#xA0;&apos;3&apos;],&#xA0;[&apos;4&apos;,&#xA0;&apos;5&apos;,&#xA0;&apos;6&apos;]]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#invokeMap
isArguments	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is likely an arguments object.</p>\n        <pre><code>_.isArguments(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an <code>arguments</code> object, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isArguments</span>(<span class="type">function</span>()&#xA0;{&#xA0;return&#xA0;arguments;&#xA0;}());</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArguments</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isArguments
isArray	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as an Array object.</p>\n        <pre><code>_.isArray(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an array, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isArray</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArray</span>(<span class="support">document</span><span class="delimiter">.</span><span class="support">body</span><span class="delimiter">.</span>children);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArray</span>(<span class="string">&apos;abc&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArray</span>(_<span class="delimiter">.</span>noop);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isArray
isArrayBuffer	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as an ArrayBuffer object.</p>\n        <pre><code>_.isArrayBuffer(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an array buffer, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isArrayBuffer</span>(new&#xA0;<span class="name type">ArrayBuffer</span>(<span class="numeric">2</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArrayBuffer</span>(new&#xA0;<span class="name type">Array</span>(<span class="numeric">2</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isArrayBuffer
isArrayLike	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is array-like. A value is considered array-like if it's not a function and has a value.length that's an integer greater than or equal to 0 and less than or equal to Number.MAX_SAFE_INTEGER.</p>\n        <pre><code>_.isArrayLike(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is array-like, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isArrayLike</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArrayLike</span>(<span class="support">document</span><span class="delimiter">.</span><span class="support">body</span><span class="delimiter">.</span>children);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArrayLike</span>(<span class="string">&apos;abc&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArrayLike</span>(_<span class="delimiter">.</span>noop);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isArrayLike
isArrayLikeObject	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.isArrayLike except that it also checks if value is an object.</p>\n        <pre><code>_.isArrayLikeObject(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an array-like object, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isArrayLikeObject</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArrayLikeObject</span>(<span class="support">document</span><span class="delimiter">.</span><span class="support">body</span><span class="delimiter">.</span>children);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArrayLikeObject</span>(<span class="string">&apos;abc&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArrayLikeObject</span>(_<span class="delimiter">.</span>noop);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isArrayLikeObject
isBoolean	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a boolean primitive or object.</p>\n        <pre><code>_.isBoolean(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a boolean, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isBoolean</span>(false);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isBoolean</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isBoolean
isBuffer	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is a buffer.</p>\n        <pre><code>_.isBuffer(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a buffer, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isBuffer</span>(new&#xA0;<span class="name type">Buffer</span>(<span class="numeric">2</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isBuffer</span>(new&#xA0;<span class="name type">Uint8Array</span>(<span class="numeric">2</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isBuffer
isDate	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a Date object.</p>\n        <pre><code>_.isDate(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a date object, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isDate</span>(new&#xA0;<span class="name type">Date</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isDate</span>(<span class="string">&apos;Mon&#xA0;April&#xA0;23&#xA0;2012&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isDate
isElement	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is likely a DOM element.</p>\n        <pre><code>_.isElement(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a DOM element, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isElement</span>(<span class="support">document</span><span class="delimiter">.</span><span class="support">body</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isElement</span>(<span class="string">&apos;&lt;body&gt;&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isElement
isEmpty	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is an empty object, collection, map, or set.Objects are considered empty if they have no own enumerable string keyed properties.Array-like values such as arguments objects, arrays, buffers, strings, or jQuery-like collections are considered empty if they have a length of 0. Similarly, maps and sets are considered empty if they have a size of 0.</p>\n        <pre><code>_.isEmpty(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is empty, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isEmpty</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isEmpty</span>(true);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isEmpty</span>(<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isEmpty</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isEmpty</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isEmpty
isEqual	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Performs a deep comparison between two values to determine if they are equivalent.Note: This method supports comparing arrays, array buffers, booleans, date objects, error objects, maps, numbers, Object objects, regexes, sets, strings, symbols, and typed arrays. Object objects are compared by their own, not inherited, enumerable properties. Functions and DOM nodes are compared by strict equality, i.e. ===.</p>\n        <pre><code>_.isEqual(value, other)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if the values are equivalent, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;};</div><div><span class="type">var</span>&#xA0;other&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isEqual</span>(object<span class="delimiter">,</span>&#xA0;other);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>object&#xA0;===&#xA0;other;</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isEqual
isEqualWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.isEqual except that it accepts customizer which is invoked to compare values. If customizer returns undefined, comparisons are handled by the method instead. The customizer is invoked with up to six arguments: (objValue, othValue [, index|key, object, other, stack]).</p>\n        <pre><code>_.isEqualWith(value, other, [customizer])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize comparisons.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if the values are equivalent, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">isGreeting</span>(value)&#xA0;{</div><div>&#xA0;&#xA0;return<span class="string">&#xA0;/^h(?:i|ello)$/</span><span class="delimiter method">.</span><span class="support">test</span>(value);</div><div>}</div><div>&#xA0;</div><div><span class="type">function</span>&#xA0;<span class="name">customizer</span>(objValue<span class="delimiter">,</span>&#xA0;othValue)&#xA0;{</div><div>&#xA0;&#xA0;if&#xA0;(<span class="name">isGreeting</span>(objValue)&#xA0;&amp;&amp;&#xA0;<span class="name">isGreeting</span>(othValue))&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;true;</div><div>&#xA0;&#xA0;}</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="string">&apos;hello&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;goodbye&apos;</span>];</div><div><span class="type">var</span>&#xA0;other&#xA0;=&#xA0;[<span class="string">&apos;hi&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;goodbye&apos;</span>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isEqualWith</span>(array<span class="delimiter">,</span>&#xA0;other<span class="delimiter">,</span>&#xA0;customizer);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isEqualWith
isError	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError object.</p>\n        <pre><code>_.isError(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an error object, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isError</span>(new&#xA0;<span class="name type">Error</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isError</span>(Error);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isError
isFinite	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is a finite primitive number.Note: This method is based on Number.isFinite.</p>\n        <pre><code>_.isFinite(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a finite number, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isFinite</span>(<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isFinite</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isFinite</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isFinite</span>(<span class="string">&apos;3&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isFinite
isFunction	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a Function object.</p>\n        <pre><code>_.isFunction(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a function, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isFunction</span>(_);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isFunction</span>(<span class="string">/abc/</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isFunction
isInteger	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is an integer.Note: This method is based on Number.isInteger.</p>\n        <pre><code>_.isInteger(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an integer, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isInteger</span>(<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isInteger</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isInteger</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isInteger</span>(<span class="string">&apos;3&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isInteger
isLength	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is a valid array-like length.Note: This method is loosely based on ToLength.</p>\n        <pre><code>_.isLength(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a valid length, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isLength</span>(<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isLength</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isLength</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isLength</span>(<span class="string">&apos;3&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isLength
isMap	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a Map object.</p>\n        <pre><code>_.isMap(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a map, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter">.</span><span class="support">isMap</span>(new&#xA0;<span class="name type">Map</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter">.</span><span class="support">isMap</span>(new&#xA0;<span class="name type">WeakMap</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isMap
isMatch	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Performs a partial deep comparison between object and source to determine if object contains equivalent property values.Note: This method is equivalent to _.matches when source is partially applied.Partial comparisons will match empty array and empty object source values against any array or object value, respectively. See _.isEqual for a list of supported value comparisons.</p>\n        <pre><code>_.isMatch(object, source)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>source</code> <em>(Object)</em>: The object of property values to match.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>object</code> is a match, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isMatch</span>(object<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isMatch</span>(object<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isMatch
isMatchWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.isMatch except that it accepts customizer which is invoked to compare values. If customizer returns undefined, comparisons are handled by the method instead. The customizer is invoked with five arguments: (objValue, srcValue, index|key, object, source).</p>\n        <pre><code>_.isMatchWith(object, source, [customizer])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to inspect.</li><li><code>source</code> <em>(Object)</em>: The object of property values to match.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize comparisons.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>object</code> is a match, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">isGreeting</span>(value)&#xA0;{</div><div>&#xA0;&#xA0;return<span class="string">&#xA0;/^h(?:i|ello)$/</span><span class="delimiter method">.</span><span class="support">test</span>(value);</div><div>}</div><div>&#xA0;</div><div><span class="type">function</span>&#xA0;<span class="name">customizer</span>(objValue<span class="delimiter">,</span>&#xA0;srcValue)&#xA0;{</div><div>&#xA0;&#xA0;if&#xA0;(<span class="name">isGreeting</span>(objValue)&#xA0;&amp;&amp;&#xA0;<span class="name">isGreeting</span>(srcValue))&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;true;</div><div>&#xA0;&#xA0;}</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;greeting&apos;</span>:&#xA0;<span class="string">&apos;hello&apos;</span>&#xA0;};</div><div><span class="type">var</span>&#xA0;source&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;greeting&apos;</span>:&#xA0;<span class="string">&apos;hi&apos;</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isMatchWith</span>(object<span class="delimiter">,</span>&#xA0;source<span class="delimiter">,</span>&#xA0;customizer);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isMatchWith
isNaN	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is NaN.Note: This method is based on Number.isNaN and is not the same as global isNaN which returns true for undefined and other non-number values.</p>\n        <pre><code>_.isNaN(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is <code>NaN</code>, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isNaN</span>(NaN);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isNaN</span>(new&#xA0;<span class="name type">Number</span>(NaN));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="support">isNaN</span>(undefined);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isNaN</span>(undefined);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isNaN
isNative	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is a pristine native function.Note: This method can't reliably detect native functions in the presence of the core-js package because core-js circumvents this kind of detection. Despite multiple requests, the core-js maintainer has made it clear: any attempt to fix the detection will be obstructed. As a result, we're left with little choice but to throw an error. Unfortunately, this also affects packages, like babel-polyfill, which rely on core-js.</p>\n        <pre><code>_.isNative(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a native function, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isNative</span>(<span class="support">Array</span><span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>push);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isNative</span>(_);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isNative
isNil	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is null or undefined.</p>\n        <pre><code>_.isNil(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is nullish, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isNil</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isNil</span>(void&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isNil</span>(NaN);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isNil
isNull	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is null.</p>\n        <pre><code>_.isNull(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is <code>null</code>, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isNull</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isNull</span>(void&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isNull
isNumber	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a Number primitive or object.Note: To exclude Infinity, -Infinity, and NaN, which are classified as numbers, use the _.isFinite method.</p>\n        <pre><code>_.isNumber(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a number, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isNumber</span>(<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isNumber</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isNumber</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isNumber</span>(<span class="string">&apos;3&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isNumber
isObject	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is the language type of Object. (e.g. arrays, functions, objects, regexes, new Number(0), and new String(''))</p>\n        <pre><code>_.isObject(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is an object, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isObject</span>({});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isObject</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isObject</span>(_<span class="delimiter">.</span>noop);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isObject</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isObject
isObjectLike	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is object-like. A value is object-like if it's not null and has a typeof result of "object".</p>\n        <pre><code>_.isObjectLike(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is object-like, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isObjectLike</span>({});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isObjectLike</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isObjectLike</span>(_<span class="delimiter">.</span>noop);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isObjectLike</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isObjectLike
isPlainObject	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is a plain object, that is, an object created by the Object constructor or one with a [[Prototype]] of null.</p>\n        <pre><code>_.isPlainObject(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a plain object, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>}</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isPlainObject</span>(new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isPlainObject</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isPlainObject</span>({&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">0</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isPlainObject</span>(<span class="support">Object</span><span class="delimiter method">.</span><span class="name">create</span>(null));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isPlainObject
isRegExp	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a RegExp object.</p>\n        <pre><code>_.isRegExp(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a regexp, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isRegExp</span>(<span class="string">/abc/</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isRegExp</span>(<span class="string">&apos;/abc/&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isRegExp
isSafeInteger	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is a safe integer. An integer is safe if it's an IEEE-754 double precision number which isn't the result of a rounded unsafe integer.Note: This method is based on Number.isSafeInteger.</p>\n        <pre><code>_.isSafeInteger(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a safe integer, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isSafeInteger</span>(<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isSafeInteger</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isSafeInteger</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isSafeInteger</span>(<span class="string">&apos;3&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isSafeInteger
isSet	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a Set object.</p>\n        <pre><code>_.isSet(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a set, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isSet</span>(new&#xA0;<span class="name type">Set</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isSet</span>(new&#xA0;<span class="name type">WeakSet</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isSet
isString	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a String primitive or object.</p>\n        <pre><code>_.isString(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a string, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isString</span>(<span class="string">&apos;abc&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isString</span>(<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isString
isSymbol	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a Symbol primitive or object.</p>\n        <pre><code>_.isSymbol(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a symbol, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isSymbol</span>(<span class="support">Symbol</span><span class="delimiter">.</span>iterator);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isSymbol</span>(<span class="string">&apos;abc&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isSymbol
isTypedArray	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a typed array.</p>\n        <pre><code>_.isTypedArray(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a typed array, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isTypedArray</span>(new&#xA0;<span class="name type">Uint8Array</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isTypedArray</span>([]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isTypedArray
isUndefined	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is undefined.</p>\n        <pre><code>_.isUndefined(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is <code>undefined</code>, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isUndefined</span>(void&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isUndefined</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isUndefined
isWeakMap	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a WeakMap object.</p>\n        <pre><code>_.isWeakMap(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a weak map, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isWeakMap</span>(new&#xA0;<span class="name type">WeakMap</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isWeakMap</span>(new&#xA0;<span class="name type">Map</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isWeakMap
isWeakSet	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is classified as a WeakSet object.</p>\n        <pre><code>_.isWeakSet(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is a weak set, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">isWeakSet</span>(new&#xA0;<span class="name type">WeakSet</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isWeakSet</span>(new&#xA0;<span class="name type">Set</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#isWeakSet
iteratee	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func with the arguments of the created function. If func is a property name, the created function returns the property value for a given element. If func is an array or object, the created function returns true for elements that contain the equivalent source properties, otherwise it returns false.</p>\n        <pre><code>_.iteratee([func=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[func=_.identity]</code> <em>(*)</em>: The value to convert to a callback.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the callback.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}</div><div>];</div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">filter</span>(users<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">iteratee</span>({&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;user&apos;:&#xA0;&apos;barney&apos;,&#xA0;&apos;age&apos;:&#xA0;36,&#xA0;&apos;active&apos;:&#xA0;true&#xA0;}]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">filter</span>(users<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">iteratee</span>([<span class="string">&apos;user&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;fred&apos;</span>]));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;user&apos;:&#xA0;&apos;fred&apos;,&#xA0;&apos;age&apos;:&#xA0;40&#xA0;}]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">map</span>(users<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">iteratee</span>(<span class="string">&apos;user&apos;</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;barney&apos;,&#xA0;&apos;fred&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Create&#xA0;custom&#xA0;iteratee&#xA0;shorthands.</span></div><div>_<span class="delimiter">.</span>iteratee&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">wrap</span>(_<span class="delimiter">.</span>iteratee<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(iteratee<span class="delimiter">,</span>&#xA0;func)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;!_<span class="delimiter method">.</span><span class="name">isRegExp</span>(func)&#xA0;?&#xA0;<span class="name">iteratee</span>(func)&#xA0;:&#xA0;<span class="type">function</span>(string)&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;func<span class="delimiter method">.</span><span class="support">test</span>(string);</div><div>&#xA0;&#xA0;};</div><div>});</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">filter</span>([<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;def&apos;</span>]<span class="delimiter">,</span><span class="string">&#xA0;/ef/</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;def&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#iteratee
join	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts all elements in array into a string separated by separator.</p>\n        <pre><code>_.join(array, [separator=&apos;,&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to convert.</li><li><code>[separator=&apos;,&apos;]</code> <em>(string)</em>: The element separator.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the joined string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="support">join</span>([<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;~&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;a~b~c&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#join
kebabCase	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts string to kebab case.</p>\n        <pre><code>_.kebabCase([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the kebab cased string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">kebabCase</span>(<span class="string">&apos;Foo&#xA0;Bar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foo-bar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">kebabCase</span>(<span class="string">&apos;fooBar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foo-bar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">kebabCase</span>(<span class="string">&apos;__FOO_BAR__&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foo-bar&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#kebabCase
keyBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an object composed of keys generated from the results of running each element of collection thru iteratee. The corresponding value of each key is the last element responsible for generating the key. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.keyBy(collection, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee to transform keys.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the composed aggregate object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;dir&apos;</span>:&#xA0;<span class="string">&apos;left&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;code&apos;</span>:&#xA0;<span class="numeric">97</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;dir&apos;</span>:&#xA0;<span class="string">&apos;right&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;code&apos;</span>:&#xA0;<span class="numeric">100</span>&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">keyBy</span>(array<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;<span class="support">String</span><span class="delimiter method">.</span><span class="support">fromCharCode</span>(o<span class="delimiter">.</span><span class="support">code</span>);</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;{&#xA0;&apos;dir&apos;:&#xA0;&apos;left&apos;,&#xA0;&apos;code&apos;:&#xA0;97&#xA0;},&#xA0;&apos;d&apos;:&#xA0;{&#xA0;&apos;dir&apos;:&#xA0;&apos;right&apos;,&#xA0;&apos;code&apos;:&#xA0;100&#xA0;}&#xA0;}</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">keyBy</span>(array<span class="delimiter">,</span>&#xA0;<span class="string">&apos;dir&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;left&apos;:&#xA0;{&#xA0;&apos;dir&apos;:&#xA0;&apos;left&apos;,&#xA0;&apos;code&apos;:&#xA0;97&#xA0;},&#xA0;&apos;right&apos;:&#xA0;{&#xA0;&apos;dir&apos;:&#xA0;&apos;right&apos;,&#xA0;&apos;code&apos;:&#xA0;100&#xA0;}&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#keyBy
keys	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of the own enumerable property names of object.Note: Non-object values are coerced to objects. See the ES spec for more details.</p>\n        <pre><code>_.keys(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the array of property names.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">keys</span>(new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;b&apos;]&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">keys</span>(<span class="string">&apos;hi&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;0&apos;,&#xA0;&apos;1&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#keys
keysIn	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of the own and inherited enumerable property names of object.Note: Non-object values are coerced to objects.</p>\n        <pre><code>_.keysIn(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the array of property names.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">keysIn</span>(new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;b&apos;,&#xA0;&apos;c&apos;]&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#keysIn
last	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets the last element of array.</p>\n        <pre><code>_.last(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the last element of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">last</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#last
lastIndexOf	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.indexOf except that it iterates over elements of array from right to left.</p>\n        <pre><code>_.lastIndexOf(array, value, [fromIndex=array.length-1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li><li><code>[fromIndex=array.length-1]</code> <em>(number)</em>: The index to search from.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index of the matched value, else <code>-1</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="support">lastIndexOf</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Search&#xA0;from&#xA0;the&#xA0;`fromIndex`.</span></div><div>_<span class="delimiter method">.</span><span class="support">lastIndexOf</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#lastIndexOf
lodash	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>(Object): Returns the new lodash wrapper instance.</p>\n        <pre><code>_(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to wrap in a <code>lodash</code> instance.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">square</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;*&#xA0;n;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;wrapped&#xA0;=&#xA0;<span class="name">_</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div>&#xA0;</div><div><span class="comment">//&#xA0;Returns&#xA0;an&#xA0;unwrapped&#xA0;value.</span></div><div>wrapped<span class="delimiter method">.</span><span class="name">reduce</span>(_<span class="delimiter">.</span>add);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;6</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Returns&#xA0;a&#xA0;wrapped&#xA0;value.</span></div><div><span class="type">var</span>&#xA0;squares&#xA0;=&#xA0;wrapped<span class="delimiter method">.</span><span class="name">map</span>(square);</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArray</span>(squares);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isArray</span>(squares<span class="delimiter">.</span><span class="support">value</span>());</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#lodash
lowerCase	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts string, as space separated words, to lower case.</p>\n        <pre><code>_.lowerCase([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the lower cased string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">lowerCase</span>(<span class="string">&apos;--Foo-Bar--&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foo&#xA0;bar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">lowerCase</span>(<span class="string">&apos;fooBar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foo&#xA0;bar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">lowerCase</span>(<span class="string">&apos;__FOO_BAR__&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foo&#xA0;bar&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#lowerCase
lowerFirst	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts the first character of string to lower case.</p>\n        <pre><code>_.lowerFirst([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the converted string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">lowerFirst</span>(<span class="string">&apos;Fred&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fred&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">lowerFirst</span>(<span class="string">&apos;FRED&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fRED&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#lowerFirst
lt	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is less than other.</p>\n        <pre><code>_.lt(value, other)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is less than <code>other</code>, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">lt</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">lt</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">lt</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#lt
lte	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if value is less than or equal to other.</p>\n        <pre><code>_.lte(value, other)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to compare.</li><li><code>other</code> <em>(*)</em>: The other value to compare.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>value</code> is less than or equal to <code>other</code>, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">lte</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">lte</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">lte</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#lte
map	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of values by running each element in collection thru iteratee. The iteratee is invoked with three arguments:(value, index|key, collection).Many lodash methods are guarded to work as iteratees for methods like _.every, _.filter, _.map, _.mapValues, _.reject, and _.some.The guarded methods are:ary, chunk, curry, curryRight, drop, dropRight, every, fill, invert, parseInt, random, range, rangeRight, repeat, sampleSize, slice, some, sortBy, split, take, takeRight, template, trim, trimEnd, trimStart, and words</p>\n        <pre><code>_.map(collection, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new mapped array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">square</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;*&#xA0;n;</div><div>}</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>([<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">8</span>]<span class="delimiter">,</span>&#xA0;square);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[16,&#xA0;64]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">8</span>&#xA0;}<span class="delimiter">,</span>&#xA0;square);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[16,&#xA0;64]&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span>&#xA0;}</div><div>];</div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">map</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;user&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;barney&apos;,&#xA0;&apos;fred&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#map
mapKeys	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>The opposite of _.mapValues; this method creates an object with the same values as object and keys generated by running each own enumerable string keyed property of object thru iteratee. The iteratee is invoked with three arguments: (value, key, object).</p>\n        <pre><code>_.mapKeys(object, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new mapped object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">mapKeys</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(value<span class="delimiter">,</span>&#xA0;key)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;key&#xA0;+&#xA0;value;</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a1&apos;:&#xA0;1,&#xA0;&apos;b2&apos;:&#xA0;2&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#mapKeys
mapValues	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an object with the same keys as object and values generated by running each own enumerable string keyed property of object thru iteratee. The iteratee is invoked with three arguments:(value, key, object).</p>\n        <pre><code>_.mapValues(object, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new mapped object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;fred&apos;</span>:&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;pebbles&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}</div><div>};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">mapValues</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>age;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;fred&apos;:&#xA0;40,&#xA0;&apos;pebbles&apos;:&#xA0;1&#xA0;}&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">mapValues</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;fred&apos;:&#xA0;40,&#xA0;&apos;pebbles&apos;:&#xA0;1&#xA0;}&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#mapValues
matches	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that performs a partial deep comparison between a given object and source, returning true if the given object has equivalent property values, else false.Note: The created function is equivalent to _.isMatch with source partially applied.Partial comparisons will match empty array and empty object source values against any array or object value, respectively. See _.isEqual for a list of supported value comparisons.</p>\n        <pre><code>_.matches(source)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>source</code> <em>(Object)</em>: The object of property values to match.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new spec function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">6</span>&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">filter</span>(objects<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">matches</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">6</span>&#xA0;}));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;a&apos;:&#xA0;4,&#xA0;&apos;b&apos;:&#xA0;5,&#xA0;&apos;c&apos;:&#xA0;6&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#matches
matchesProperty	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that performs a partial deep comparison between the value at path of a given object to srcValue, returning true if the object value is equivalent, else false.Note: Partial comparisons will match empty array and empty object srcValue values against any array or object value, respectively. See _.isEqual for a list of supported value comparisons.</p>\n        <pre><code>_.matchesProperty(path, srcValue)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>path</code> <em>(Array|string)</em>: The path of the property to get.</li><li><code>srcValue</code> <em>(*)</em>: The value to match.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new spec function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">6</span>&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="support">find</span>(objects<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">matchesProperty</span>(<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;4,&#xA0;&apos;b&apos;:&#xA0;5,&#xA0;&apos;c&apos;:&#xA0;6&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#matchesProperty
max	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Computes the maximum value of array. If array is empty or falsey, undefined is returned.</p>\n        <pre><code>_.max(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the maximum value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">max</span>([<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">8</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;8</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">max</span>([]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;undefined</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#max
maxBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.max except that it accepts iteratee which is invoked for each element in array to generate the criterion by which the value is ranked. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.maxBy(array, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the maximum value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">maxBy</span>(objects<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>n;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;n&apos;:&#xA0;2&#xA0;}</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">maxBy</span>(objects<span class="delimiter">,</span>&#xA0;<span class="string">&apos;n&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;n&apos;:&#xA0;2&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#maxBy
mean	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Computes the mean of the values in array.</p>\n        <pre><code>_.mean(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the mean.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">mean</span>([<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">8</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;5</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#mean
meanBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.mean except that it accepts iteratee which is invoked for each element in array to generate the value to be averaged. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.meanBy(array, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the mean.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">8</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">6</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">meanBy</span>(objects<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>n;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;5</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">meanBy</span>(objects<span class="delimiter">,</span>&#xA0;<span class="string">&apos;n&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;5</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#meanBy
memoize	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that memoizes the result of func. If resolver is provided, it determines the cache key for storing the result based on the arguments provided to the memoized function. By default, the first argument provided to the memoized function is used as the map cache key. The func is invoked with the this binding of the memoized function.Note: The cache is exposed as the cache property on the memoized function. Its creation may be customized by replacing the _.memoize.Cache constructor with one whose instances implement the Map method interface of clear, delete, get, has, and set.</p>\n        <pre><code>_.memoize(func, [resolver])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to have its output memoized.</li><li><code>[resolver]</code> <em>(Function)</em>: The function to resolve the cache key.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new memoized function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;};</div><div><span class="type">var</span>&#xA0;other&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;d&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;};</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;values&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">memoize</span>(_<span class="delimiter">.</span>values);</div><div><span class="name">values</span>(object);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div><div>&#xA0;</div><div><span class="name">values</span>(other);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;4]</span></div><div>&#xA0;</div><div>object<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div><span class="name">values</span>(object);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Modify&#xA0;the&#xA0;result&#xA0;cache.</span></div><div>values<span class="delimiter">.</span>cache<span class="delimiter method">.</span><span class="name">set</span>(object<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>]);</div><div><span class="name">values</span>(object);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;b&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Replace&#xA0;`_.memoize.Cache`.</span></div><div>_<span class="delimiter">.</span>memoize<span class="delimiter">.</span>Cache&#xA0;=&#xA0;<span class="support">WeakMap</span>;</div></pre>\n    </section>	https://lodash.com/docs/4.17.4#memoize
merge	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.assign except that it recursively merges own and inherited enumerable string keyed properties of source objects into the destination object. Source properties that resolve to undefined are skipped if a destination value exists. Array and plain object properties are merged recursively. Other objects and value types are overridden by assignment. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.Note: This method mutates object.</p>\n        <pre><code>_.merge(object, [sources])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>[sources]</code> <em>(...Object)</em>: The source objects.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;d&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}]</div><div>};</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;other&#xA0;=&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;e&apos;</span>:&#xA0;<span class="numeric">5</span>&#xA0;}]</div><div>};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">merge</span>(object<span class="delimiter">,</span>&#xA0;other);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;[{&#xA0;&apos;b&apos;:&#xA0;2,&#xA0;&apos;c&apos;:&#xA0;3&#xA0;},&#xA0;{&#xA0;&apos;d&apos;:&#xA0;4,&#xA0;&apos;e&apos;:&#xA0;5&#xA0;}]&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#merge
mergeWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.merge except that it accepts customizer which is invoked to produce the merged values of the destination and source properties. If customizer returns undefined, merging is handled by the method instead. The customizer is invoked with six arguments:(objValue, srcValue, key, object, source, stack).Note: This method mutates object.</p>\n        <pre><code>_.mergeWith(object, sources, customizer)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The destination object.</li><li><code>sources</code> <em>(...Object)</em>: The source objects.</li><li><code>customizer</code> <em>(Function)</em>: The function to customize assigned values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">customizer</span>(objValue<span class="delimiter">,</span>&#xA0;srcValue)&#xA0;{</div><div>&#xA0;&#xA0;if&#xA0;(_<span class="delimiter method">.</span><span class="name">isArray</span>(objValue))&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;objValue<span class="delimiter method">.</span><span class="support">concat</span>(srcValue);</div><div>&#xA0;&#xA0;}</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[<span class="numeric">1</span>]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;[<span class="numeric">2</span>]&#xA0;};</div><div><span class="type">var</span>&#xA0;other&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;[<span class="numeric">4</span>]&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">mergeWith</span>(object<span class="delimiter">,</span>&#xA0;other<span class="delimiter">,</span>&#xA0;customizer);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;[1,&#xA0;3],&#xA0;&apos;b&apos;:&#xA0;[2,&#xA0;4]&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#mergeWith
method	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes the method at path of a given object. Any additional arguments are provided to the invoked method.</p>\n        <pre><code>_.method(path, [args])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>path</code> <em>(Array|string)</em>: The path of the method to invoke.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke the method with.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new invoker function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="numeric">2</span>)&#xA0;}&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="numeric">1</span>)&#xA0;}&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>(objects<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span><span class="support">method</span>(<span class="string">&apos;a.b&apos;</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;1]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>(objects<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span><span class="support">method</span>([<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>]));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#method
methodOf	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>The opposite of _.method; this method creates a function that invokes the method at a given path of object. Any additional arguments are provided to the invoked method.</p>\n        <pre><code>_.methodOf(object, [args])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>[args]</code> <em>(...*)</em>: The arguments to invoke the method with.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new invoker function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>constant)<span class="delimiter">,</span></div><div>&#xA0;&#xA0;&#xA0;&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;array<span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;array<span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;array&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>([<span class="string">&apos;a[2]&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c[0]&apos;</span>]<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">methodOf</span>(object));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;0]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>([[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;2&apos;</span>]<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;0&apos;</span>]]<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">methodOf</span>(object));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;0]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#methodOf
min	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Computes the minimum value of array. If array is empty or falsey, undefined is returned.</p>\n        <pre><code>_.min(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the minimum value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">min</span>([<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">8</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;2</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">min</span>([]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;undefined</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#min
minBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.min except that it accepts iteratee which is invoked for each element in array to generate the criterion by which the value is ranked. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.minBy(array, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the minimum value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">minBy</span>(objects<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>n;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;n&apos;:&#xA0;1&#xA0;}</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">minBy</span>(objects<span class="delimiter">,</span>&#xA0;<span class="string">&apos;n&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;n&apos;:&#xA0;1&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#minBy
mixin	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Adds all own enumerable string keyed function properties of a source object to the destination object. If object is a function, then methods are added to its prototype as well.Note: Use _.runInContext to create a pristine lodash function to avoid conflicts caused by modifying the original.</p>\n        <pre><code>_.mixin([object=lodash], source, [options={}])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[object=lodash]</code> <em>(Function|Object)</em>: The destination object.</li><li><code>source</code> <em>(Object)</em>: The object of functions to add.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.chain=true]</code> <em>(boolean)</em>: Specify whether mixins are chainable.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">vowels</span>(string)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;_<span class="delimiter method">.</span><span class="name">filter</span>(string<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(v)&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;&#xA0;return<span class="string">&#xA0;/[aeiou]/i</span><span class="delimiter method">.</span><span class="support">test</span>(v);</div><div>&#xA0;&#xA0;});</div><div>}</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">mixin</span>({&#xA0;<span class="string">&apos;vowels&apos;</span>:&#xA0;vowels&#xA0;});</div><div>_<span class="delimiter method">.</span><span class="name">vowels</span>(<span class="string">&apos;fred&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;e&apos;]</span></div><div>&#xA0;</div><div><span class="name">_</span>(<span class="string">&apos;fred&apos;</span>)<span class="delimiter method">.</span><span class="name">vowels</span>()<span class="delimiter">.</span><span class="support">value</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;e&apos;]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">mixin</span>({&#xA0;<span class="string">&apos;vowels&apos;</span>:&#xA0;vowels&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;chain&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="name">_</span>(<span class="string">&apos;fred&apos;</span>)<span class="delimiter method">.</span><span class="name">vowels</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;e&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#mixin
multiply	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Multiply two numbers.</p>\n        <pre><code>_.multiply(multiplier, multiplicand)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>multiplier</code> <em>(number)</em>: The first number in a multiplication.</li><li><code>multiplicand</code> <em>(number)</em>: The second number in a multiplication.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the product.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">multiply</span>(<span class="numeric">6</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;24</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#multiply
negate	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that negates the result of the predicate func. The func predicate is invoked with the this binding and arguments of the created function.</p>\n        <pre><code>_.negate(predicate)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>predicate</code> <em>(Function)</em>: The predicate to negate.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new negated function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">isEven</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;%&#xA0;<span class="numeric">2</span>&#xA0;==&#xA0;<span class="numeric">0</span>;</div><div>}</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">filter</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>]<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">negate</span>(isEven));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;3,&#xA0;5]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#negate
noConflict	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Reverts the _ variable to its previous value and returns a reference to the lodash function.</p>\n        <pre><code>_.noConflict()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the <code>lodash</code> function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><span class="type">var</span>&#xA0;lodash&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">noConflict</span>();</pre>\n    </section>	https://lodash.com/docs/4.17.4#noConflict
noop	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method returns undefined.</p>\n        <pre><code>_.noop()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>noop);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[undefined,&#xA0;undefined]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#noop
now	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets the timestamp of the number of milliseconds that have elapsed since the Unix epoch (1 January 1970 00:00:00 UTC).</p>\n        <pre><code>_.now()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the timestamp.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter">.</span><span class="support">defer</span>(<span class="type">function</span>(stamp)&#xA0;{</div><div>&#xA0;&#xA0;<span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(_<span class="delimiter method">.</span><span class="name">now</span>()&#xA0;-&#xA0;stamp);</div><div>}<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">now</span>());</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Logs&#xA0;the&#xA0;number&#xA0;of&#xA0;milliseconds&#xA0;it&#xA0;took&#xA0;for&#xA0;the&#xA0;deferred&#xA0;invocation.</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#now
nth	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets the element at index n of array. If n is negative, the nth element from the end is returned.</p>\n        <pre><code>_.nth(array, [n=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=0]</code> <em>(number)</em>: The index of the element to return.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the nth element of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;d&apos;</span>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">nth</span>(array<span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;b&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">nth</span>(array<span class="delimiter">,</span>&#xA0;-<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;c&apos;;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#nth
nthArg	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that gets the argument at index n. If n is negative, the nth argument from the end is returned.</p>\n        <pre><code>_.nthArg([n=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[n=0]</code> <em>(number)</em>: The index of the argument to return.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new pass-thru function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;func&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">nthArg</span>(<span class="numeric">1</span>);</div><div><span class="name">func</span>(<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;d&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;b&apos;</span></div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;func&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">nthArg</span>(-<span class="numeric">2</span>);</div><div><span class="name">func</span>(<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;d&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;c&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#nthArg
omit	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>The opposite of _.pick; this method creates an object composed of the own and inherited enumerable property paths of object that are not omitted.Note: This method is considerably slower than _.pick.</p>\n        <pre><code>_.omit(object, [paths])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The source object.</li><li><code>[paths]</code> <em>(...(string|string[]))</em>: The property paths to omit.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="string">&apos;2&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">omit</span>(object<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;b&apos;:&#xA0;&apos;2&apos;&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#omit
omitBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>The opposite of _.pickBy; this method creates an object composed of the own and inherited enumerable string keyed properties of object that predicate doesn't return truthy for. The predicate is invoked with two arguments: (value, key).</p>\n        <pre><code>_.omitBy(object, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The source object.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per property.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="string">&apos;2&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">omitBy</span>(object<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>isNumber);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;b&apos;:&#xA0;&apos;2&apos;&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#omitBy
once	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that is restricted to invoking func once. Repeat calls to the function return the value of the first invocation. The func is invoked with the this binding and arguments of the created function.</p>\n        <pre><code>_.once(func)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to restrict.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new restricted function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;initialize&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">once</span>(createApplication);</div><div><span class="name">initialize</span>();</div><div><span class="name">initialize</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;`createApplication`&#xA0;is&#xA0;invoked&#xA0;once</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#once
orderBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.sortBy except that it allows specifying the sort orders of the iteratees to sort by. If orders is unspecified, all values are sorted in ascending order. Otherwise, specify an order of "desc" for descending or "asc" for ascending sort order of corresponding values.</p>\n        <pre><code>_.orderBy(collection, [iteratees=[_.identity]], [orders])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratees=[_.identity]]</code> <em>(Array[]|Function[]|Object[]|string[])</em>: The iteratees to sort by.</li><li><code>[orders]</code> <em>(string[])</em>: The sort orders of <code>iteratees</code>.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new sorted array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">48</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">34</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span>&#xA0;}</div><div>];</div><div>&#xA0;</div><div><span class="comment">//&#xA0;Sort&#xA0;by&#xA0;`user`&#xA0;in&#xA0;ascending&#xA0;order&#xA0;and&#xA0;by&#xA0;`age`&#xA0;in&#xA0;descending&#xA0;order.</span></div><div>_<span class="delimiter method">.</span><span class="name">orderBy</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;user&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>]<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;asc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;desc&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[[&apos;barney&apos;,&#xA0;36],&#xA0;[&apos;barney&apos;,&#xA0;34],&#xA0;[&apos;fred&apos;,&#xA0;48],&#xA0;[&apos;fred&apos;,&#xA0;40]]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#orderBy
over	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes iteratees with the arguments it receives and returns their results.</p>\n        <pre><code>_.over([iteratees=[_.identity]])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[iteratees=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The iteratees to invoke.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;func&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">over</span>([<span class="support">Math</span><span class="delimiter">.</span>max<span class="delimiter">,</span>&#xA0;<span class="support">Math</span><span class="delimiter">.</span>min]);</div><div>&#xA0;</div><div><span class="name">func</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[4,&#xA0;1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#over
overArgs	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func with its arguments transformed.</p>\n        <pre><code>_.overArgs(func, [transforms=[_.identity]])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to wrap.</li><li><code>[transforms=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The argument transforms.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">doubled</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;*&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div><span class="type">function</span>&#xA0;<span class="name">square</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;*&#xA0;n;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;func&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">overArgs</span>(<span class="type">function</span>(x<span class="delimiter">,</span>&#xA0;y)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;[x<span class="delimiter">,</span>&#xA0;y];</div><div>}<span class="delimiter">,</span>&#xA0;[square<span class="delimiter">,</span>&#xA0;doubled]);</div><div>&#xA0;</div><div><span class="name">func</span>(<span class="numeric">9</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[81,&#xA0;6]</span></div><div>&#xA0;</div><div><span class="name">func</span>(<span class="numeric">10</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[100,&#xA0;10]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#overArgs
overEvery	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that checks if all of the predicates return truthy when invoked with the arguments it receives.</p>\n        <pre><code>_.overEvery([predicates=[_.identity]])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[predicates=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The predicates to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;func&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">overEvery</span>([<span class="support">Boolean</span><span class="delimiter">,</span>&#xA0;isFinite]);</div><div>&#xA0;</div><div><span class="name">func</span>(<span class="string">&apos;1&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="name">func</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div><span class="name">func</span>(NaN);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#overEvery
overSome	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that checks if any of the predicates return truthy when invoked with the arguments it receives.</p>\n        <pre><code>_.overSome([predicates=[_.identity]])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[predicates=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The predicates to check.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;func&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">overSome</span>([<span class="support">Boolean</span><span class="delimiter">,</span>&#xA0;isFinite]);</div><div>&#xA0;</div><div><span class="name">func</span>(<span class="string">&apos;1&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="name">func</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="name">func</span>(NaN);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#overSome
pad	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Pads string on the left and right sides if it's shorter than length. Padding characters are truncated if they can't be evenly divided by length.</p>\n        <pre><code>_.pad([string=&apos;&apos;], [length=0], [chars=&apos; &apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to pad.</li><li><code>[length=0]</code> <em>(number)</em>: The padding length.</li><li><code>[chars=&apos; &apos;]</code> <em>(string)</em>: The string used as padding.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the padded string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">pad</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">8</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&#xA0;&#xA0;abc&#xA0;&#xA0;&#xA0;&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">pad</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">8</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;_-&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;_-abc_-_&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">pad</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abc&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#pad
padEnd	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Pads string on the right side if it's shorter than length. Padding characters are truncated if they exceed length.</p>\n        <pre><code>_.padEnd([string=&apos;&apos;], [length=0], [chars=&apos; &apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to pad.</li><li><code>[length=0]</code> <em>(number)</em>: The padding length.</li><li><code>[chars=&apos; &apos;]</code> <em>(string)</em>: The string used as padding.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the padded string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">padEnd</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abc&#xA0;&#xA0;&#xA0;&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">padEnd</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;_-&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abc_-_&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">padEnd</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abc&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#padEnd
padStart	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Pads string on the left side if it's shorter than length. Padding characters are truncated if they exceed length.</p>\n        <pre><code>_.padStart([string=&apos;&apos;], [length=0], [chars=&apos; &apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to pad.</li><li><code>[length=0]</code> <em>(number)</em>: The padding length.</li><li><code>[chars=&apos; &apos;]</code> <em>(string)</em>: The string used as padding.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the padded string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">padStart</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&#xA0;&#xA0;&#xA0;abc&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">padStart</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;_-&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;_-_abc&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">padStart</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abc&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#padStart
parseInt	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts string to an integer of the specified radix. If radix is undefined or 0, a radix of 10 is used unless value is a hexadecimal, in which case a radix of 16 is used.Note: This method aligns with the ES5 implementation of parseInt.</p>\n        <pre><code>_.parseInt(string, [radix=10])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>string</code> <em>(string)</em>: The string to convert.</li><li><code>[radix=10]</code> <em>(number)</em>: The radix to interpret <code>value</code> by.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the converted integer.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">parseInt</span>(<span class="string">&apos;08&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;8</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>([<span class="string">&apos;6&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;08&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;10&apos;</span>]<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>parseInt);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[6,&#xA0;8,&#xA0;10]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#parseInt
partial	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func with partials prepended to the arguments it receives. This method is like _.bind except it does not alter the this binding.The _.partial.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.Note: This method doesn't set the "length" property of partially applied functions.</p>\n        <pre><code>_.partial(func, [partials])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to partially apply arguments to.</li><li><code>[partials]</code> <em>(...*)</em>: The arguments to be partially applied.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new partially applied function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">greet</span>(greeting<span class="delimiter">,</span>&#xA0;name)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;greeting&#xA0;+&#xA0;<span class="string">&apos;&#xA0;&apos;</span>&#xA0;+&#xA0;name;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;sayHelloTo&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">partial</span>(greet<span class="delimiter">,</span>&#xA0;<span class="string">&apos;hello&apos;</span>);</div><div><span class="name">sayHelloTo</span>(<span class="string">&apos;fred&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hello&#xA0;fred&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Partially&#xA0;applied&#xA0;with&#xA0;placeholders.</span></div><div><span class="type">var</span>&#xA0;greetFred&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">partial</span>(greet<span class="delimiter">,</span>&#xA0;_<span class="delimiter">,</span>&#xA0;<span class="string">&apos;fred&apos;</span>);</div><div><span class="name">greetFred</span>(<span class="string">&apos;hi&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hi&#xA0;fred&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#partial
partialRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.partial except that partially applied arguments are appended to the arguments it receives.The _.partialRight.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.Note: This method doesn't set the "length" property of partially applied functions.</p>\n        <pre><code>_.partialRight(func, [partials])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to partially apply arguments to.</li><li><code>[partials]</code> <em>(...*)</em>: The arguments to be partially applied.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new partially applied function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">greet</span>(greeting<span class="delimiter">,</span>&#xA0;name)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;greeting&#xA0;+&#xA0;<span class="string">&apos;&#xA0;&apos;</span>&#xA0;+&#xA0;name;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;greetFred&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">partialRight</span>(greet<span class="delimiter">,</span>&#xA0;<span class="string">&apos;fred&apos;</span>);</div><div><span class="name">greetFred</span>(<span class="string">&apos;hi&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hi&#xA0;fred&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Partially&#xA0;applied&#xA0;with&#xA0;placeholders.</span></div><div><span class="type">var</span>&#xA0;sayHelloTo&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">partialRight</span>(greet<span class="delimiter">,</span>&#xA0;<span class="string">&apos;hello&apos;</span><span class="delimiter">,</span>&#xA0;_);</div><div><span class="name">sayHelloTo</span>(<span class="string">&apos;fred&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hello&#xA0;fred&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#partialRight
partition	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of elements split into two groups, the first of which contains elements predicate returns truthy for, the second of which contains elements predicate returns falsey for. The predicate is invoked with one argument: (value).</p>\n        <pre><code>_.partition(collection, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the array of grouped elements.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">partition</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>active;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[[&apos;fred&apos;],&#xA0;[&apos;barney&apos;,&#xA0;&apos;pebbles&apos;]]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">partition</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[[&apos;pebbles&apos;],&#xA0;[&apos;barney&apos;,&#xA0;&apos;fred&apos;]]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">partition</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[[&apos;barney&apos;,&#xA0;&apos;pebbles&apos;],&#xA0;[&apos;fred&apos;]]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">partition</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[[&apos;fred&apos;],&#xA0;[&apos;barney&apos;,&#xA0;&apos;pebbles&apos;]]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#partition
pick	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an object composed of the picked object properties.</p>\n        <pre><code>_.pick(object, [paths])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The source object.</li><li><code>[paths]</code> <em>(...(string|string[]))</em>: The property paths to pick.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="string">&apos;2&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">pick</span>(object<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;c&apos;:&#xA0;3&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#pick
pickBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an object composed of the object properties predicate returns truthy for. The predicate is invoked with two arguments: (value, key).</p>\n        <pre><code>_.pickBy(object, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The source object.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per property.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="string">&apos;2&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">pickBy</span>(object<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>isNumber);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;c&apos;:&#xA0;3&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#pickBy
property	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that returns the value at path of a given object.</p>\n        <pre><code>_.property(path)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>path</code> <em>(Array|string)</em>: The path of the property to get.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new accessor function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>(objects<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">property</span>(<span class="string">&apos;a.b&apos;</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;1]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>(_<span class="delimiter method">.</span><span class="name">sortBy</span>(objects<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">property</span>([<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>]))<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a.b&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#property
propertyOf	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>The opposite of _.property; this method creates a function that returns the value at a given path of object.</p>\n        <pre><code>_.propertyOf(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new accessor function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span></div><div>&#xA0;&#xA0;&#xA0;&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;array<span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;array<span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;array&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>([<span class="string">&apos;a[2]&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c[0]&apos;</span>]<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">propertyOf</span>(object));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;0]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>([[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;2&apos;</span>]<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;0&apos;</span>]]<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">propertyOf</span>(object));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;0]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#propertyOf
prototype-Symbol-iterator	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>4.0.0</p>\n        <pre><code>_.prototype[Symbol.iterator]()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;wrapped&#xA0;=&#xA0;<span class="name">_</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]);</div><div>&#xA0;</div><div>wrapped[<span class="support">Symbol</span><span class="delimiter">.</span>iterator]()&#xA0;===&#xA0;wrapped;</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="support">Array</span><span class="delimiter method">.</span><span class="name">from</span>(wrapped);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#prototype-Symbol-iterator
prototype-at	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>1.0.0</p>\n        <pre><code>_.prototype.at([paths])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[paths]</code> <em>(...(string|string[]))</em>: The property paths to pick.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>]&#xA0;};</div><div>&#xA0;</div><div><span class="name">_</span>(object)<span class="delimiter method">.</span><span class="name">at</span>([<span class="string">&apos;a[0].b.c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[1]&apos;</span>])<span class="delimiter">.</span><span class="support">value</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;4]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#prototype-at
prototype-chain	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>0.1.0</p>\n        <pre><code>_.prototype.chain()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span>&#xA0;}</div><div>];</div><div>&#xA0;</div><div><span class="comment">//&#xA0;A&#xA0;sequence&#xA0;without&#xA0;explicit&#xA0;chaining.</span></div><div><span class="name">_</span>(users)<span class="delimiter method">.</span><span class="name">head</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;user&apos;:&#xA0;&apos;barney&apos;,&#xA0;&apos;age&apos;:&#xA0;36&#xA0;}</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;A&#xA0;sequence&#xA0;with&#xA0;explicit&#xA0;chaining.</span></div><div><span class="name">_</span>(users)</div><div>&#xA0;&#xA0;<span class="delimiter method">.</span><span class="name">chain</span>()</div><div>&#xA0;&#xA0;<span class="delimiter method">.</span><span class="name">head</span>()</div><div>&#xA0;&#xA0;<span class="delimiter method">.</span><span class="name">pick</span>(<span class="string">&apos;user&apos;</span>)</div><div>&#xA0;&#xA0;<span class="delimiter">.</span><span class="support">value</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;user&apos;:&#xA0;&apos;barney&apos;&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#prototype-chain
prototype-commit	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>3.2.0</p>\n        <pre><code>_.prototype.commit()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>];</div><div><span class="type">var</span>&#xA0;wrapped&#xA0;=&#xA0;<span class="name">_</span>(array)<span class="delimiter method">.</span><span class="support">push</span>(<span class="numeric">3</span>);</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div><div>&#xA0;</div><div>wrapped&#xA0;=&#xA0;wrapped<span class="delimiter method">.</span><span class="name">commit</span>();</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div>wrapped<span class="delimiter method">.</span><span class="name">last</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#prototype-commit
prototype-next	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>4.0.0</p>\n        <pre><code>_.prototype.next()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;wrapped&#xA0;=&#xA0;<span class="name">_</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]);</div><div>&#xA0;</div><div>wrapped<span class="delimiter">.</span><span class="support">next</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;done&apos;:&#xA0;false,&#xA0;&apos;value&apos;:&#xA0;1&#xA0;}</span></div><div>&#xA0;</div><div>wrapped<span class="delimiter">.</span><span class="support">next</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;done&apos;:&#xA0;false,&#xA0;&apos;value&apos;:&#xA0;2&#xA0;}</span></div><div>&#xA0;</div><div>wrapped<span class="delimiter">.</span><span class="support">next</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;done&apos;:&#xA0;true,&#xA0;&apos;value&apos;:&#xA0;undefined&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#prototype-next
prototype-plant	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>3.2.0</p>\n        <pre><code>_.prototype.plant(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to plant.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">square</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;*&#xA0;n;</div><div>}</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;wrapped&#xA0;=&#xA0;<span class="name">_</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>])<span class="delimiter method">.</span><span class="name">map</span>(square);</div><div><span class="type">var</span>&#xA0;other&#xA0;=&#xA0;wrapped<span class="delimiter method">.</span><span class="name">plant</span>([<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>]);</div><div>&#xA0;</div><div>other<span class="delimiter">.</span><span class="support">value</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[9,&#xA0;16]</span></div><div>&#xA0;</div><div>wrapped<span class="delimiter">.</span><span class="support">value</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;4]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#prototype-plant
prototype-reverse	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>0.1.0</p>\n        <pre><code>_.prototype.reverse()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>];</div><div>&#xA0;</div><div><span class="name">_</span>(array)<span class="delimiter method">.</span><span class="support">reverse</span>()<span class="delimiter">.</span><span class="support">value</span>()</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;2,&#xA0;1]</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;2,&#xA0;1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#prototype-reverse
prototype-value	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>0.1.0</p>\n        <pre><code>_.prototype.value()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the resolved unwrapped value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="name">_</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>])<span class="delimiter">.</span><span class="support">value</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#prototype-value
pull	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Removes all given values from array using SameValueZero for equality comparisons.Note: Unlike _.without, this method mutates array. Use _.remove to remove elements from an array by predicate.</p>\n        <pre><code>_.pull(array, [values])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>[values]</code> <em>(...*)</em>: The values to remove.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">pull</span>(array<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>);</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;b&apos;,&#xA0;&apos;b&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#pull
pullAll	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.pull except that it accepts an array of values to remove.Note: Unlike _.difference, this method mutates array.</p>\n        <pre><code>_.pullAll(array, values)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>values</code> <em>(Array)</em>: The values to remove.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">pullAll</span>(array<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>]);</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;b&apos;,&#xA0;&apos;b&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#pullAll
pullAllBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.pullAll except that it accepts iteratee which is invoked for each element of array and values to generate the criterion by which they're compared. The iteratee is invoked with one argument: (value).Note: Unlike _.differenceBy, this method mutates array.</p>\n        <pre><code>_.pullAllBy(array, values, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>values</code> <em>(Array)</em>: The values to remove.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">pullAllBy</span>(array<span class="delimiter">,</span>&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;x&apos;</span>);</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;2&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#pullAllBy
pullAllWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.pullAll except that it accepts comparator which is invoked to compare elements of array to values. The comparator is invoked with two arguments: (arrVal, othVal).Note: Unlike _.differenceWith, this method mutates array.</p>\n        <pre><code>_.pullAllWith(array, values, [comparator])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>values</code> <em>(Array)</em>: The values to remove.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">6</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">pullAllWith</span>(array<span class="delimiter">,</span>&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>isEqual);</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;1,&#xA0;&apos;y&apos;:&#xA0;2&#xA0;},&#xA0;{&#xA0;&apos;x&apos;:&#xA0;5,&#xA0;&apos;y&apos;:&#xA0;6&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#pullAllWith
pullAt	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Removes elements from array corresponding to indexes and returns an array of removed elements.Note: Unlike _.at, this method mutates array.</p>\n        <pre><code>_.pullAt(array, [indexes])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>[indexes]</code> <em>(...(number|number[]))</em>: The indexes of elements to remove.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of removed elements.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;d&apos;</span>];</div><div><span class="type">var</span>&#xA0;pulled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">pullAt</span>(array<span class="delimiter">,</span>&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;c&apos;]</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(pulled);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;b&apos;,&#xA0;&apos;d&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#pullAt
random	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Produces a random number between the inclusive lower and upper bounds. If only one argument is provided a number between 0 and the given number is returned. If floating is true, or either lower or upper are floats, a floating-point number is returned instead of an integer.Note: JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.</p>\n        <pre><code>_.random([lower=0], [upper=1], [floating])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[lower=0]</code> <em>(number)</em>: The lower bound.</li><li><code>[upper=1]</code> <em>(number)</em>: The upper bound.</li><li><code>[floating]</code> <em>(boolean)</em>: Specify returning a floating-point number.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the random number.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">random</span>(<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;an&#xA0;integer&#xA0;between&#xA0;0&#xA0;and&#xA0;5</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">random</span>(<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;also&#xA0;an&#xA0;integer&#xA0;between&#xA0;0&#xA0;and&#xA0;5</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">random</span>(<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;true);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;a&#xA0;floating-point&#xA0;number&#xA0;between&#xA0;0&#xA0;and&#xA0;5</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">random</span>(<span class="numeric">1<span class="delimiter">.</span>2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5<span class="delimiter">.</span>2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;a&#xA0;floating-point&#xA0;number&#xA0;between&#xA0;1.2&#xA0;and&#xA0;5.2</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#random
range	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end. A step of -1 is used if a negative start is specified without an end or step. If end is not specified, it's set to start with start then set to 0.Note: JavaScript follows the IEEE-754 standard for resolving floating-point values which can produce unexpected results.</p>\n        <pre><code>_.range([start=0], end, [step=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[start=0]</code> <em>(number)</em>: The start of the range.</li><li><code>end</code> <em>(number)</em>: The end of the range.</li><li><code>[step=1]</code> <em>(number)</em>: The value to increment or decrement by.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the range of numbers.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">range</span>(<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[0,&#xA0;1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">range</span>(-<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[0,&#xA0;-1,&#xA0;-2,&#xA0;-3]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">range</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3,&#xA0;4]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">range</span>(<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="numeric">20</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[0,&#xA0;5,&#xA0;10,&#xA0;15]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">range</span>(<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[0,&#xA0;-1,&#xA0;-2,&#xA0;-3]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">range</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;1,&#xA0;1]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">range</span>(<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#range
rangeRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.range except that it populates values in descending order.</p>\n        <pre><code>_.rangeRight([start=0], end, [step=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[start=0]</code> <em>(number)</em>: The start of the range.</li><li><code>end</code> <em>(number)</em>: The end of the range.</li><li><code>[step=1]</code> <em>(number)</em>: The value to increment or decrement by.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the range of numbers.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">rangeRight</span>(<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;2,&#xA0;1,&#xA0;0]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">rangeRight</span>(-<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[-3,&#xA0;-2,&#xA0;-1,&#xA0;0]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">rangeRight</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[4,&#xA0;3,&#xA0;2,&#xA0;1]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">rangeRight</span>(<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="numeric">20</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[15,&#xA0;10,&#xA0;5,&#xA0;0]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">rangeRight</span>(<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[-3,&#xA0;-2,&#xA0;-1,&#xA0;0]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">rangeRight</span>(<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;1,&#xA0;1]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">rangeRight</span>(<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#rangeRight
rearg	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func with arguments arranged according to the specified indexes where the argument value at the first index is provided as the first argument, the argument value at the second index is provided as the second argument, and so on.</p>\n        <pre><code>_.rearg(func, indexes)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to rearrange arguments for.</li><li><code>indexes</code> <em>(...(number|number[]))</em>: The arranged argument indexes.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;rearged&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">rearg</span>(<span class="type">function</span>(a<span class="delimiter">,</span>&#xA0;b<span class="delimiter">,</span>&#xA0;c)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;[a<span class="delimiter">,</span>&#xA0;b<span class="delimiter">,</span>&#xA0;c];</div><div>}<span class="delimiter">,</span>&#xA0;[<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>]);</div><div>&#xA0;</div><div><span class="name">rearged</span>(<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span>)</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;b&apos;,&#xA0;&apos;c&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#rearg
reduce	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Reduces collection to a value which is the accumulated result of running each element in collection thru iteratee, where each successive invocation is supplied the return value of the previous. If accumulator is not given, the first element of collection is used as the initial value. The iteratee is invoked with four arguments:(accumulator, value, index|key, collection).Many lodash methods are guarded to work as iteratees for methods like _.reduce, _.reduceRight, and _.transform.The guarded methods are:assign, defaults, defaultsDeep, includes, merge, orderBy, and sortBy</p>\n        <pre><code>_.reduce(collection, [iteratee=_.identity], [accumulator])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[accumulator]</code> <em>(*)</em>: The initial value.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the accumulated value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">reduce</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(sum<span class="delimiter">,</span>&#xA0;n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;sum&#xA0;+&#xA0;n;</div><div>}<span class="delimiter">,</span>&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">reduce</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(result<span class="delimiter">,</span>&#xA0;value<span class="delimiter">,</span>&#xA0;key)&#xA0;{</div><div>&#xA0;&#xA0;(result[value]&#xA0;||&#xA0;(result[value]&#xA0;=&#xA0;[]))<span class="delimiter method">.</span><span class="support">push</span>(key);</div><div>&#xA0;&#xA0;return&#xA0;result;</div><div>}<span class="delimiter">,</span>&#xA0;{});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;1&apos;:&#xA0;[&apos;a&apos;,&#xA0;&apos;c&apos;],&#xA0;&apos;2&apos;:&#xA0;[&apos;b&apos;]&#xA0;}&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#reduce
reduceRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.reduce except that it iterates over elements of collection from right to left.</p>\n        <pre><code>_.reduceRight(collection, [iteratee=_.identity], [accumulator])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[accumulator]</code> <em>(*)</em>: The initial value.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the accumulated value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[[<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>]];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">reduceRight</span>(array<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(flattened<span class="delimiter">,</span>&#xA0;other)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;flattened<span class="delimiter method">.</span><span class="support">concat</span>(other);</div><div>}<span class="delimiter">,</span>&#xA0;[]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[4,&#xA0;5,&#xA0;2,&#xA0;3,&#xA0;0,&#xA0;1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#reduceRight
reject	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>The opposite of _.filter; this method returns the elements of collection that predicate does not return truthy for.</p>\n        <pre><code>_.reject(collection, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new filtered array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">reject</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;!o<span class="delimiter">.</span>active;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;fred&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">reject</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">reject</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;fred&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">reject</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#reject
remove	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Removes all elements from array that predicate returns truthy for and returns an array of the removed elements. The predicate is invoked with three arguments: (value, index, array).Note: Unlike _.filter, this method mutates array. Use _.pull to pull elements from an array by value.</p>\n        <pre><code>_.remove(array, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of removed elements.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>];</div><div><span class="type">var</span>&#xA0;evens&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">remove</span>(array<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(n)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;%&#xA0;<span class="numeric">2</span>&#xA0;==&#xA0;<span class="numeric">0</span>;</div><div>});</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;3]</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(evens);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;4]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#remove
repeat	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Repeats the given string n times.</p>\n        <pre><code>_.repeat([string=&apos;&apos;], [n=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to repeat.</li><li><code>[n=1]</code> <em>(number)</em>: The number of times to repeat the string.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the repeated string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">repeat</span>(<span class="string">&apos;*&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;***&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">repeat</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abcabc&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">repeat</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#repeat
replace	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Replaces matches for pattern in string with replacement.Note: This method is based on String#replace.</p>\n        <pre><code>_.replace([string=&apos;&apos;], pattern, replacement)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to modify.</li><li><code>pattern</code> <em>(RegExp|string)</em>: The pattern to replace.</li><li><code>replacement</code> <em>(Function|string)</em>: The match replacement.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the modified string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="support">replace</span>(<span class="string">&apos;Hi&#xA0;Fred&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;Fred&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;Barney&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;Hi&#xA0;Barney&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#replace
rest	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func with the this binding of the created function and arguments from start and beyond provided as an array.Note: This method is based on the rest parameter.</p>\n        <pre><code>_.rest(func, [start=func.length-1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to apply a rest parameter to.</li><li><code>[start=func.length-1]</code> <em>(number)</em>: The start position of the rest parameter.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;say&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">rest</span>(<span class="type">function</span>(what<span class="delimiter">,</span>&#xA0;names)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;what&#xA0;+&#xA0;<span class="string">&apos;&#xA0;&apos;</span>&#xA0;+&#xA0;_<span class="delimiter method">.</span><span class="name">initial</span>(names)<span class="delimiter method">.</span><span class="support">join</span>(<span class="string">&apos;,&#xA0;&apos;</span>)&#xA0;+</div><div>&#xA0;&#xA0;&#xA0;&#xA0;(_<span class="delimiter">.</span><span class="support">size</span>(names)&#xA0;&gt;&#xA0;<span class="numeric">1</span>&#xA0;?&#xA0;<span class="string">&apos;,&#xA0;&amp;&#xA0;&apos;</span>&#xA0;:&#xA0;<span class="string">&apos;&apos;</span>)&#xA0;+&#xA0;_<span class="delimiter method">.</span><span class="name">last</span>(names);</div><div>});</div><div>&#xA0;</div><div><span class="name">say</span>(<span class="string">&apos;hello&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;pebbles&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hello&#xA0;fred,&#xA0;barney,&#xA0;&amp;&#xA0;pebbles&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#rest
result	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.get except that if the resolved value is a function it's invoked with the this binding of its parent object and its result is returned.</p>\n        <pre><code>_.result(object, path, [defaultValue])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to resolve.</li><li><code>[defaultValue]</code> <em>(*)</em>: The value returned for <code>undefined</code> resolved values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the resolved value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;c1&apos;</span>:&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c2&apos;</span>:&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="numeric">4</span>)&#xA0;}&#xA0;}]&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">result</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[0].b.c1&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">result</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[0].b.c2&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;4</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">result</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[0].b.c3&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;default&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;default&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">result</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[0].b.c3&apos;</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;default&apos;</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;default&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#result
reverse	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Reverses array so that the first element becomes the last, the second element becomes the second to last, and so on.Note: This method mutates array and is based on Array#reverse.</p>\n        <pre><code>_.reverse(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to modify.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;array&#xA0;=&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="support">reverse</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;2,&#xA0;1]</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(array);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;2,&#xA0;1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#reverse
round	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Computes number rounded to precision.</p>\n        <pre><code>_.round(number, [precision=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>number</code> <em>(number)</em>: The number to round.</li><li><code>[precision=0]</code> <em>(number)</em>: The precision to round to.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the rounded number.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">round</span>(<span class="numeric">4<span class="delimiter">.</span>006</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;4</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">round</span>(<span class="numeric">4<span class="delimiter">.</span>006</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;4.01</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">round</span>(<span class="numeric">4060</span><span class="delimiter">,</span>&#xA0;-<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;4100</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#round
runInContext	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Create a new pristine lodash function using the context object.</p>\n        <pre><code>_.runInContext([context=root])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[context=root]</code> <em>(Object)</em>: The context object.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns a new <code>lodash</code> function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">mixin</span>({&#xA0;<span class="string">&apos;foo&apos;</span>:&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;foo&apos;</span>)&#xA0;});</div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;lodash&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">runInContext</span>();</div><div>lodash<span class="delimiter method">.</span><span class="name">mixin</span>({&#xA0;<span class="string">&apos;bar&apos;</span>:&#xA0;lodash<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;bar&apos;</span>)&#xA0;});</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">isFunction</span>(_<span class="delimiter">.</span>foo);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>_<span class="delimiter method">.</span><span class="name">isFunction</span>(_<span class="delimiter">.</span>bar);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>lodash<span class="delimiter method">.</span><span class="name">isFunction</span>(lodash<span class="delimiter">.</span>foo);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>lodash<span class="delimiter method">.</span><span class="name">isFunction</span>(lodash<span class="delimiter">.</span>bar);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Create&#xA0;a&#xA0;suped-up&#xA0;`defer`&#xA0;in&#xA0;Node.js.</span></div><div><span class="type">var</span>&#xA0;defer&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">runInContext</span>({&#xA0;<span class="string">&apos;setTimeout&apos;</span>:&#xA0;setImmediate&#xA0;})<span class="delimiter">.</span><span class="support">defer</span>;</div></pre>\n    </section>	https://lodash.com/docs/4.17.4#runInContext
sample	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets a random element from collection.</p>\n        <pre><code>_.sample(collection)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to sample.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the random element.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">sample</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;2</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sample
sampleSize	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets n random elements at unique keys from collection up to the size of collection.</p>\n        <pre><code>_.sampleSize(collection, [n=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to sample.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to sample.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the random elements.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">sampleSize</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;1]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">sampleSize</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;3,&#xA0;1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sampleSize
set	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Sets the value at path of object. If a portion of path doesn't exist, it's created. Arrays are created for missing index properties while objects are created for all other missing properties. Use _.setWith to customize path creation.Note: This method mutates object.</p>\n        <pre><code>_.set(object, path, value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to set.</li><li><code>value</code> <em>(*)</em>: The value to set.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}&#xA0;}]&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">set</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[0].b.c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>);</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(object<span class="delimiter">.</span>a[<span class="numeric">0</span>]<span class="delimiter">.</span>b<span class="delimiter">.</span>c);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;4</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">set</span>(object<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;x&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;0&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;z&apos;</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(object<span class="delimiter">.</span><span class="support">x</span>[<span class="numeric">0</span>]<span class="delimiter">.</span><span class="support">y</span><span class="delimiter">.</span><span class="support">z</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;5</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#set
setWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.set except that it accepts customizer which is invoked to produce the objects of path. If customizer returns undefined path creation is handled by the method instead. The customizer is invoked with three arguments: (nsValue, key, nsObject).Note: This method mutates object.</p>\n        <pre><code>_.setWith(object, path, value, [customizer])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to set.</li><li><code>value</code> <em>(*)</em>: The value to set.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize assigned values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">setWith</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;[0][1]&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="support">Object</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;0&apos;:&#xA0;{&#xA0;&apos;1&apos;:&#xA0;&apos;a&apos;&#xA0;}&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#setWith
shuffle	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.</p>\n        <pre><code>_.shuffle(collection)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to shuffle.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new shuffled array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">shuffle</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[4,&#xA0;1,&#xA0;3,&#xA0;2]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#shuffle
size	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets the size of collection by returning its length for array-like values or the number of own enumerable string keyed properties for objects.</p>\n        <pre><code>_.size(collection)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object|string)</em>: The collection to inspect.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the collection size.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter">.</span><span class="support">size</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div>_<span class="delimiter">.</span><span class="support">size</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;2</span></div><div>&#xA0;</div><div>_<span class="delimiter">.</span><span class="support">size</span>(<span class="string">&apos;pebbles&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;7</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#size
slice	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a slice of array from start up to, but not including, end.Note: This method is used instead of Array#slice to ensure dense arrays are returned.</p>\n        <pre><code>_.slice(array, [start=0], [end=array.length])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to slice.</li><li><code>[start=0]</code> <em>(number)</em>: The start position.</li><li><code>[end=array.length]</code> <em>(number)</em>: The end position.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        null\n    </section>	https://lodash.com/docs/4.17.4#slice
snakeCase	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts string to snake case.</p>\n        <pre><code>_.snakeCase([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the snake cased string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">snakeCase</span>(<span class="string">&apos;Foo&#xA0;Bar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foo_bar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">snakeCase</span>(<span class="string">&apos;fooBar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foo_bar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">snakeCase</span>(<span class="string">&apos;--FOO-BAR--&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foo_bar&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#snakeCase
some	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if predicate returns truthy for any element of collection. Iteration is stopped once predicate returns truthy. The predicate is invoked with three arguments: (value, index|key, collection).</p>\n        <pre><code>_.some(collection, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if any element passes the predicate check, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">some</span>([null<span class="delimiter">,</span>&#xA0;<span class="numeric">0</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;yes&apos;</span><span class="delimiter">,</span>&#xA0;false]<span class="delimiter">,</span>&#xA0;<span class="support">Boolean</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}</div><div>];</div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">some</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">some</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">some</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#some
sortBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of elements, sorted in ascending order by the results of running each element in a collection thru each iteratee. This method performs a stable sort, that is, it preserves the original sort order of equal elements. The iteratees are invoked with one argument: (value).</p>\n        <pre><code>_.sortBy(collection, [iteratees=[_.identity]])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>collection</code> <em>(Array|Object)</em>: The collection to iterate over.</li><li><code>[iteratees=[_.identity]]</code> <em>(...(Function|Function[]))</em>: The iteratees to sort by.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new sorted array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">48</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">36</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">40</span>&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>:&#xA0;<span class="numeric">34</span>&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">sortBy</span>(users<span class="delimiter">,</span>&#xA0;[<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>user;&#xA0;}]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[[&apos;barney&apos;,&#xA0;36],&#xA0;[&apos;barney&apos;,&#xA0;34],&#xA0;[&apos;fred&apos;,&#xA0;48],&#xA0;[&apos;fred&apos;,&#xA0;40]]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">sortBy</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;user&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;age&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[[&apos;barney&apos;,&#xA0;34],&#xA0;[&apos;barney&apos;,&#xA0;36],&#xA0;[&apos;fred&apos;,&#xA0;40],&#xA0;[&apos;fred&apos;,&#xA0;48]]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sortBy
sortedIndex	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Uses a binary search to determine the lowest index at which value should be inserted into array in order to maintain its sort order.</p>\n        <pre><code>_.sortedIndex(array, value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The sorted array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to evaluate.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index at which <code>value</code> should be inserted into <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">sortedIndex</span>([<span class="numeric">30</span><span class="delimiter">,</span>&#xA0;<span class="numeric">50</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">40</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sortedIndex
sortedIndexBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.sortedIndex except that it accepts iteratee which is invoked for value and each element of array to compute their sort ranking. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.sortedIndexBy(array, value, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The sorted array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to evaluate.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index at which <code>value</code> should be inserted into <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">5</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">sortedIndexBy</span>(objects<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span><span class="support">x</span>;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">sortedIndexBy</span>(objects<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="string">&apos;x&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sortedIndexBy
sortedIndexOf	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.indexOf except that it performs a binary search on a sorted array.</p>\n        <pre><code>_.sortedIndexOf(array, value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index of the matched value, else <code>-1</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">sortedIndexOf</span>([<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sortedIndexOf
sortedLastIndex	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.sortedIndex except that it returns the highest index at which value should be inserted into array in order to maintain its sort order.</p>\n        <pre><code>_.sortedLastIndex(array, value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The sorted array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to evaluate.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index at which <code>value</code> should be inserted into <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">sortedLastIndex</span>([<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;4</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sortedLastIndex
sortedLastIndexBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.sortedLastIndex except that it accepts iteratee which is invoked for value and each element of array to compute their sort ranking. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.sortedLastIndexBy(array, value, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The sorted array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to evaluate.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index at which <code>value</code> should be inserted into <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">5</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">sortedLastIndexBy</span>(objects<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span><span class="support">x</span>;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">sortedLastIndexBy</span>(objects<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="string">&apos;x&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sortedLastIndexBy
sortedLastIndexOf	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.lastIndexOf except that it performs a binary search on a sorted array.</p>\n        <pre><code>_.sortedLastIndexOf(array, value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>value</code> <em>(*)</em>: The value to search for.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the index of the matched value, else <code>-1</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">sortedLastIndexOf</span>([<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">5</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sortedLastIndexOf
sortedUniq	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.uniq except that it's designed and optimized for sorted arrays.</p>\n        <pre><code>_.sortedUniq(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">sortedUniq</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sortedUniq
sortedUniqBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.uniqBy except that it's designed and optimized for sorted arrays.</p>\n        <pre><code>_.sortedUniqBy(array, [iteratee])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[iteratee]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">sortedUniqBy</span>([<span class="numeric">1<span class="delimiter">.</span>1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1<span class="delimiter">.</span>2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2<span class="delimiter">.</span>3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2<span class="delimiter">.</span>4</span>]<span class="delimiter">,</span>&#xA0;<span class="support">Math</span><span class="delimiter">.</span>floor);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1.1,&#xA0;2.3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sortedUniqBy
split	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Splits string by separator.Note: This method is based on String#split.</p>\n        <pre><code>_.split([string=&apos;&apos;], separator, [limit])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to split.</li><li><code>separator</code> <em>(RegExp|string)</em>: The separator pattern to split by.</li><li><code>[limit]</code> <em>(number)</em>: The length to truncate results to.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the string segments.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="support">split</span>(<span class="string">&apos;a-b-c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;-&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;b&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#split
spread	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that invokes func with the this binding of the create function and an array of arguments much like Function#apply.Note: This method is based on the spread operator.</p>\n        <pre><code>_.spread(func, [start=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to spread arguments over.</li><li><code>[start=0]</code> <em>(number)</em>: The start position of the spread.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;say&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">spread</span>(<span class="type">function</span>(who<span class="delimiter">,</span>&#xA0;what)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;who&#xA0;+&#xA0;<span class="string">&apos;&#xA0;says&#xA0;&apos;</span>&#xA0;+&#xA0;what;</div><div>});</div><div>&#xA0;</div><div><span class="name">say</span>([<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;hello&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fred&#xA0;says&#xA0;hello&apos;</span></div><div>&#xA0;</div><div><span class="type">var</span>&#xA0;numbers&#xA0;=&#xA0;Promise<span class="delimiter">.</span><span class="support">all</span>([</div><div>&#xA0;&#xA0;Promise<span class="delimiter method">.</span><span class="name">resolve</span>(<span class="numeric">40</span>)<span class="delimiter">,</span></div><div>&#xA0;&#xA0;Promise<span class="delimiter method">.</span><span class="name">resolve</span>(<span class="numeric">36</span>)</div><div>]);</div><div>&#xA0;</div><div>numbers<span class="delimiter method">.</span><span class="name">then</span>(_<span class="delimiter method">.</span><span class="name">spread</span>(<span class="type">function</span>(x<span class="delimiter">,</span>&#xA0;y)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;x&#xA0;+&#xA0;y;</div><div>}));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;a&#xA0;Promise&#xA0;of&#xA0;76</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#spread
startCase	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts string to start case.</p>\n        <pre><code>_.startCase([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the start cased string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">startCase</span>(<span class="string">&apos;--foo-bar--&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;Foo&#xA0;Bar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">startCase</span>(<span class="string">&apos;fooBar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;Foo&#xA0;Bar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">startCase</span>(<span class="string">&apos;__FOO_BAR__&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;FOO&#xA0;BAR&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#startCase
startsWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Checks if string starts with the given target string.</p>\n        <pre><code>_.startsWith([string=&apos;&apos;], [target], [position=0])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to inspect.</li><li><code>[target]</code> <em>(string)</em>: The string to search for.</li><li><code>[position=0]</code> <em>(number)</em>: The position to search from.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if <code>string</code> starts with <code>target</code>, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">startsWith</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;a&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">startsWith</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">startsWith</span>(<span class="string">&apos;abc&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#startsWith
stubArray	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method returns a new empty array.</p>\n        <pre><code>_.stubArray()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new empty array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;arrays&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>stubArray);</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(arrays);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[],&#xA0;[]]</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(arrays[<span class="numeric">0</span>]&#xA0;===&#xA0;arrays[<span class="numeric">1</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#stubArray
stubFalse	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method returns false.</p>\n        <pre><code>_.stubFalse()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>stubFalse);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[false,&#xA0;false]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#stubFalse
stubObject	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method returns a new empty object.</p>\n        <pre><code>_.stubObject()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new empty object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>stubObject);</div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(objects);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{},&#xA0;{}]</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(objects[<span class="numeric">0</span>]&#xA0;===&#xA0;objects[<span class="numeric">1</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;false</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#stubObject
stubString	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method returns an empty string.</p>\n        <pre><code>_.stubString()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the empty string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>stubString);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;&apos;,&#xA0;&apos;&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#stubString
stubTrue	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method returns true.</p>\n        <pre><code>_.stubTrue()</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>stubTrue);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[true,&#xA0;true]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#stubTrue
subtract	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Subtract two numbers.</p>\n        <pre><code>_.subtract(minuend, subtrahend)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>minuend</code> <em>(number)</em>: The first number in a subtraction.</li><li><code>subtrahend</code> <em>(number)</em>: The second number in a subtraction.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the difference.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">subtract</span>(<span class="numeric">6</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;2</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#subtract
sum	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Computes the sum of the values in array.</p>\n        <pre><code>_.sum(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the sum.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">sum</span>([<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">8</span><span class="delimiter">,</span>&#xA0;<span class="numeric">6</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;20</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sum
sumBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.sum except that it accepts iteratee which is invoked for each element in array to generate the value to be summed. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.sumBy(array, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the sum.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">4</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">8</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;n&apos;</span>:&#xA0;<span class="numeric">6</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">sumBy</span>(objects<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;o<span class="delimiter">.</span>n;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;20</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">sumBy</span>(objects<span class="delimiter">,</span>&#xA0;<span class="string">&apos;n&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;20</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#sumBy
tail	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Gets all but the first element of array.</p>\n        <pre><code>_.tail(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">tail</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#tail
take	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a slice of array with n elements taken from the beginning.</p>\n        <pre><code>_.take(array, [n=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to take.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">take</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">take</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">take</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">take</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#take
takeRight	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a slice of array with n elements taken from the end.</p>\n        <pre><code>_.takeRight(array, [n=1])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[n=1]</code> <em>(number)</em>: The number of elements to take.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">takeRight</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">takeRight</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;3]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">takeRight</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">5</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">takeRight</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#takeRight
takeRightWhile	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a slice of array with elements taken from the end. Elements are taken until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).</p>\n        <pre><code>_.takeRightWhile(array, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">takeRightWhile</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;!o<span class="delimiter">.</span>active;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;fred&apos;,&#xA0;&apos;pebbles&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">takeRightWhile</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;pebbles&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">takeRightWhile</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;fred&apos;,&#xA0;&apos;pebbles&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">takeRightWhile</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#takeRightWhile
takeWhile	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a slice of array with elements taken from the beginning. Elements are taken until predicate returns falsey. The predicate is invoked with three arguments: (value, index, array).</p>\n        <pre><code>_.takeWhile(array, [predicate=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to query.</li><li><code>[predicate=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the slice of <code>array</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;users&#xA0;=&#xA0;[</div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;&#xA0;&#xA0;&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;}<span class="delimiter">,</span></div><div>&#xA0;&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;true&#xA0;}</div><div>];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">takeWhile</span>(users<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(o)&#xA0;{&#xA0;return&#xA0;!o<span class="delimiter">.</span>active;&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;,&#xA0;&apos;fred&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matches`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">takeWhile</span>(users<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.matchesProperty`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">takeWhile</span>(users<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;active&apos;</span><span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;objects&#xA0;for&#xA0;[&apos;barney&apos;,&#xA0;&apos;fred&apos;]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">takeWhile</span>(users<span class="delimiter">,</span>&#xA0;<span class="string">&apos;active&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#takeWhile
tap	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>0.1.0</p>\n        <pre><code>_.tap(value, interceptor)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to provide to <code>interceptor</code>.</li><li><code>interceptor</code> <em>(Function)</em>: The function to invoke.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="name">_</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>])</div><div>&#xA0;<span class="delimiter method">.</span><span class="name">tap</span>(<span class="type">function</span>(array)&#xA0;{</div><div><span class="comment"></span><span class="comment">//&#xA0;Mutate&#xA0;input&#xA0;array.</span></div><div>&#xA0;&#xA0;&#xA0;array<span class="delimiter method">.</span><span class="support">pop</span>();</div><div>&#xA0;})</div><div>&#xA0;<span class="delimiter method">.</span><span class="support">reverse</span>()</div><div>&#xA0;<span class="delimiter">.</span><span class="support">value</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#tap
template	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a compiled template function that can interpolate data properties in "interpolate" delimiters, HTML-escape interpolated data properties in "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data properties may be accessed as free variables in the template. If a setting object is given, it takes precedence over _.templateSettings values.Note: In the development build _.template utilizes sourceURLs for easier debugging.For more information on precompiling templates see lodash's custom builds documentation.For more information on Chrome extension sandboxes see Chrome's extensions documentation.</p>\n        <pre><code>_.template([string=&apos;&apos;], [options={}])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The template string.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.escape=_.templateSettings.escape]</code> <em>(RegExp)</em>: The HTML &quot;escape&quot; delimiter.</li><li><code>[options.evaluate=_.templateSettings.evaluate]</code> <em>(RegExp)</em>: The &quot;evaluate&quot; delimiter.</li><li><code>[options.imports=_.templateSettings.imports]</code> <em>(Object)</em>: An object to import into the template as free variables.</li><li><code>[options.interpolate=_.templateSettings.interpolate]</code> <em>(RegExp)</em>: The &quot;interpolate&quot; delimiter.</li><li><code>[options.sourceURL=&apos;lodash.templateSources[n]&apos;]</code> <em>(string)</em>: The sourceURL of the compiled template.</li><li><code>[options.variable=&apos;obj&apos;]</code> <em>(string)</em>: The data object variable name.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the compiled template function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="comment">//&#xA0;Use&#xA0;the&#xA0;&quot;interpolate&quot;&#xA0;delimiter&#xA0;to&#xA0;create&#xA0;a&#xA0;compiled&#xA0;template.</span></div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(<span class="string">&apos;hello&#xA0;&lt;%=&#xA0;user&#xA0;%&gt;!&apos;</span>);</div><div><span class="name">compiled</span>({&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;fred&apos;</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hello&#xA0;fred!&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;the&#xA0;HTML&#xA0;&quot;escape&quot;&#xA0;delimiter&#xA0;to&#xA0;escape&#xA0;data&#xA0;property&#xA0;values.</span></div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(<span class="string">&apos;&lt;b&gt;&lt;%-&#xA0;value&#xA0;%&gt;&lt;/b&gt;&apos;</span>);</div><div><span class="name">compiled</span>({&#xA0;<span class="string">&apos;value&apos;</span>:&#xA0;<span class="string">&apos;&lt;script&gt;&apos;</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&lt;b&gt;&amp;lt;script&amp;gt;&lt;/b&gt;&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;the&#xA0;&quot;evaluate&quot;&#xA0;delimiter&#xA0;to&#xA0;execute&#xA0;JavaScript&#xA0;and&#xA0;generate&#xA0;HTML.</span></div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(<span class="string">&apos;&lt;%&#xA0;_.forEach(users,&#xA0;function(user)&#xA0;{&#xA0;%&gt;&lt;li&gt;&lt;%-&#xA0;user&#xA0;%&gt;&lt;/li&gt;&lt;%&#xA0;});&#xA0;%&gt;&apos;</span>);</div><div><span class="name">compiled</span>({&#xA0;<span class="string">&apos;users&apos;</span>:&#xA0;[<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;barney&apos;</span>]&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&lt;li&gt;fred&lt;/li&gt;&lt;li&gt;barney&lt;/li&gt;&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;the&#xA0;internal&#xA0;`print`&#xA0;function&#xA0;in&#xA0;&quot;evaluate&quot;&#xA0;delimiters.</span></div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(<span class="string">&apos;&lt;%&#xA0;print(&quot;hello&#xA0;&quot;&#xA0;+&#xA0;user);&#xA0;%&gt;!&apos;</span>);</div><div><span class="name">compiled</span>({&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;barney&apos;</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hello&#xA0;barney!&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;the&#xA0;ES&#xA0;template&#xA0;literal&#xA0;delimiter&#xA0;as&#xA0;an&#xA0;&quot;interpolate&quot;&#xA0;delimiter.</span></div><div><span class="comment">//&#xA0;Disable&#xA0;support&#xA0;by&#xA0;replacing&#xA0;the&#xA0;&quot;interpolate&quot;&#xA0;delimiter.</span></div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(<span class="string">&apos;hello&#xA0;${&#xA0;user&#xA0;}!&apos;</span>);</div><div><span class="name">compiled</span>({&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;pebbles&apos;</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hello&#xA0;pebbles!&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;backslashes&#xA0;to&#xA0;treat&#xA0;delimiters&#xA0;as&#xA0;plain&#xA0;text.</span></div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(<span class="string">&apos;&lt;%=&#xA0;&quot;\\&lt;%-&#xA0;value&#xA0;%\\&gt;&quot;&#xA0;%&gt;&apos;</span>);</div><div><span class="name">compiled</span>({&#xA0;<span class="string">&apos;value&apos;</span>:&#xA0;<span class="string">&apos;ignored&apos;</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&lt;%-&#xA0;value&#xA0;%&gt;&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;the&#xA0;`imports`&#xA0;option&#xA0;to&#xA0;import&#xA0;`jQuery`&#xA0;as&#xA0;`jq`.</span></div><div><span class="type">var</span>&#xA0;text&#xA0;=&#xA0;<span class="string">&apos;&lt;%&#xA0;jq.each(users,&#xA0;function(user)&#xA0;{&#xA0;%&gt;&lt;li&gt;&lt;%-&#xA0;user&#xA0;%&gt;&lt;/li&gt;&lt;%&#xA0;});&#xA0;%&gt;&apos;</span>;</div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(text<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;imports&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;jq&apos;</span>:&#xA0;jQuery&#xA0;}&#xA0;});</div><div><span class="name">compiled</span>({&#xA0;<span class="string">&apos;users&apos;</span>:&#xA0;[<span class="string">&apos;fred&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;barney&apos;</span>]&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&lt;li&gt;fred&lt;/li&gt;&lt;li&gt;barney&lt;/li&gt;&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;the&#xA0;`sourceURL`&#xA0;option&#xA0;to&#xA0;specify&#xA0;a&#xA0;custom&#xA0;sourceURL&#xA0;for&#xA0;the&#xA0;template.</span></div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(<span class="string">&apos;hello&#xA0;&lt;%=&#xA0;user&#xA0;%&gt;!&apos;</span><span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;sourceURL&apos;</span>:&#xA0;<span class="string">&apos;/basic/greeting.jst&apos;</span>&#xA0;});</div><div><span class="name">compiled</span>(data);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Find&#xA0;the&#xA0;source&#xA0;of&#xA0;&quot;greeting.jst&quot;&#xA0;under&#xA0;the&#xA0;Sources&#xA0;tab&#xA0;or&#xA0;Resources&#xA0;panel&#xA0;of&#xA0;the&#xA0;web&#xA0;inspector.</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;the&#xA0;`variable`&#xA0;option&#xA0;to&#xA0;ensure&#xA0;a&#xA0;with-statement&#xA0;isn&apos;t&#xA0;used&#xA0;in&#xA0;the&#xA0;compiled&#xA0;template.</span></div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(<span class="string">&apos;hi&#xA0;&lt;%=&#xA0;data.user&#xA0;%&gt;!&apos;</span><span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;variable&apos;</span>:&#xA0;<span class="string">&apos;data&apos;</span>&#xA0;});</div><div>compiled<span class="delimiter">.</span><span class="support">source</span>;</div><div><span class="comment">//&#xA0;=&gt;&#xA0;function(data)&#xA0;{</span></div><div><span class="comment">//&#xA0;&#xA0;&#xA0;var&#xA0;__t,&#xA0;__p&#xA0;=&#xA0;&apos;&apos;;</span></div><div><span class="comment">//&#xA0;&#xA0;&#xA0;__p&#xA0;+=&#xA0;&apos;hi&#xA0;&apos;&#xA0;+&#xA0;((__t&#xA0;=&#xA0;(&#xA0;data.user&#xA0;))&#xA0;==&#xA0;null&#xA0;?&#xA0;&apos;&apos;&#xA0;:&#xA0;__t)&#xA0;+&#xA0;&apos;!&apos;;</span></div><div><span class="comment">//&#xA0;&#xA0;&#xA0;return&#xA0;__p;</span></div><div><span class="comment">//&#xA0;}</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;custom&#xA0;template&#xA0;delimiters.</span></div><div>_<span class="delimiter">.</span>templateSettings<span class="delimiter">.</span>interpolate&#xA0;=&#xA0;/{{([\s\S]+?)}}/g;</div><div><span class="type">var</span>&#xA0;compiled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(<span class="string">&apos;hello&#xA0;{{&#xA0;user&#xA0;}}!&apos;</span>);</div><div><span class="name">compiled</span>({&#xA0;<span class="string">&apos;user&apos;</span>:&#xA0;<span class="string">&apos;mustache&apos;</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hello&#xA0;mustache!&apos;</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;Use&#xA0;the&#xA0;`source`&#xA0;property&#xA0;to&#xA0;inline&#xA0;compiled&#xA0;templates&#xA0;for&#xA0;meaningful</span></div><div><span class="comment">//&#xA0;line&#xA0;numbers&#xA0;in&#xA0;error&#xA0;messages&#xA0;and&#xA0;stack&#xA0;traces.</span></div><div>fs<span class="delimiter method">.</span><span class="name">writeFileSync</span>(path<span class="delimiter method">.</span><span class="support">join</span>(<span class="support">process</span><span class="delimiter method">.</span><span class="name">cwd</span>()<span class="delimiter">,</span>&#xA0;<span class="string">&apos;jst.js&apos;</span>)<span class="delimiter">,</span>&#xA0;<span class="string">&apos;\</span></div><div><span class="string">&#xA0;&#xA0;var&#xA0;JST&#xA0;=&#xA0;{\</span></div><div><span class="string">&#xA0;&#xA0;&#xA0;&#xA0;&quot;main&quot;:&#xA0;&apos;</span>&#xA0;+&#xA0;_<span class="delimiter method">.</span><span class="name">template</span>(mainText)<span class="delimiter">.</span><span class="support">source</span>&#xA0;+&#xA0;<span class="string">&apos;\</span></div><div><span class="string">&#xA0;&#xA0;};\</span></div><div><span class="string">&apos;</span>);</div></pre>\n    </section>	https://lodash.com/docs/4.17.4#template
throttle	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a throttled function that only invokes func at most once per every wait milliseconds. The throttled function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the throttled function. Subsequent calls to the throttled function return the result of the last func invocation.Note: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if the throttled function is invoked more than once during the wait timeout.If wait is 0 and leading is false, func invocation is deferred until to the next tick, similar to setTimeout with a timeout of 0.See David Corbacho's article for details over the differences between _.throttle and _.debounce.</p>\n        <pre><code>_.throttle(func, [wait=0], [options={}])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to throttle.</li><li><code>[wait=0]</code> <em>(number)</em>: The number of milliseconds to throttle invocations to.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.leading=true]</code> <em>(boolean)</em>: Specify invoking on the leading edge of the timeout.</li><li><code>[options.trailing=true]</code> <em>(boolean)</em>: Specify invoking on the trailing edge of the timeout.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new throttled function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="comment">//&#xA0;Avoid&#xA0;excessively&#xA0;updating&#xA0;the&#xA0;position&#xA0;while&#xA0;scrolling.</span></div><div><span class="name">jQuery</span>(<span class="support">window</span>)<span class="delimiter method">.</span><span class="name">on</span>(<span class="string">&apos;scroll&apos;</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">throttle</span>(updatePosition<span class="delimiter">,</span>&#xA0;<span class="numeric">100</span>));</div><div>&#xA0;</div><div><span class="comment">//&#xA0;Invoke&#xA0;`renewToken`&#xA0;when&#xA0;the&#xA0;click&#xA0;event&#xA0;is&#xA0;fired,&#xA0;but&#xA0;not&#xA0;more&#xA0;than&#xA0;once&#xA0;every&#xA0;5&#xA0;minutes.</span></div><div><span class="type">var</span>&#xA0;throttled&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">throttle</span>(renewToken<span class="delimiter">,</span>&#xA0;<span class="numeric">300000</span><span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;trailing&apos;</span>:&#xA0;false&#xA0;});</div><div><span class="name">jQuery</span>(element)<span class="delimiter method">.</span><span class="name">on</span>(<span class="string">&apos;click&apos;</span><span class="delimiter">,</span>&#xA0;throttled);</div><div>&#xA0;</div><div><span class="comment">//&#xA0;Cancel&#xA0;the&#xA0;trailing&#xA0;throttled&#xA0;invocation.</span></div><div><span class="name">jQuery</span>(<span class="support">window</span>)<span class="delimiter method">.</span><span class="name">on</span>(<span class="string">&apos;popstate&apos;</span><span class="delimiter">,</span>&#xA0;throttled<span class="delimiter">.</span>cancel);</div></pre>\n    </section>	https://lodash.com/docs/4.17.4#throttle
thru	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>3.0.0</p>\n        <pre><code>_.thru(value, interceptor)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to provide to <code>interceptor</code>.</li><li><code>interceptor</code> <em>(Function)</em>: The function to invoke.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="name">_</span>(<span class="string">&apos;&#xA0;&#xA0;abc&#xA0;&#xA0;&apos;</span>)</div><div>&#xA0;<span class="delimiter method">.</span><span class="name">chain</span>()</div><div>&#xA0;<span class="delimiter method">.</span><span class="name">trim</span>()</div><div>&#xA0;<span class="delimiter method">.</span><span class="name">thru</span>(<span class="type">function</span>(value)&#xA0;{</div><div>&#xA0;&#xA0;&#xA0;return&#xA0;[value];</div><div>&#xA0;})</div><div>&#xA0;<span class="delimiter">.</span><span class="support">value</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;abc&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#thru
times	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Invokes the iteratee n times, returning an array of the results of each invocation. The iteratee is invoked with one argument; (index).</p>\n        <pre><code>_.times(n, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>n</code> <em>(number)</em>: The number of times to invoke <code>iteratee</code>.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the array of results.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="support">String</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;0&apos;,&#xA0;&apos;1&apos;,&#xA0;&apos;2&apos;]</span></div><div>&#xA0;</div><div>&#xA0;_<span class="delimiter method">.</span><span class="name">times</span>(<span class="numeric">4</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="numeric">0</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[0,&#xA0;0,&#xA0;0,&#xA0;0]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#times
toArray	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts value to an array.</p>\n        <pre><code>_.toArray(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the converted array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">toArray</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toArray</span>(<span class="string">&apos;abc&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;b&apos;,&#xA0;&apos;c&apos;]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toArray</span>(<span class="numeric">1</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toArray</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toArray
toFinite	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts value to a finite number.</p>\n        <pre><code>_.toFinite(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the converted number.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">toFinite</span>(<span class="numeric">3<span class="delimiter">.</span>2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3.2</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toFinite</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;5e-324</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toFinite</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1.7976931348623157e+308</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toFinite</span>(<span class="string">&apos;3.2&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3.2</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toFinite
toInteger	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts value to an integer.Note: This method is loosely based on ToInteger.</p>\n        <pre><code>_.toInteger(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the converted integer.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">toInteger</span>(<span class="numeric">3<span class="delimiter">.</span>2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toInteger</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toInteger</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;1.7976931348623157e+308</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toInteger</span>(<span class="string">&apos;3.2&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toInteger
toLength	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts value to an integer suitable for use as the length of an array-like object.Note: This method is based on ToLength.</p>\n        <pre><code>_.toLength(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the converted integer.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">toLength</span>(<span class="numeric">3<span class="delimiter">.</span>2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toLength</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toLength</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;4294967295</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toLength</span>(<span class="string">&apos;3.2&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toLength
toLower	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts string, as a whole, to lower case just like String#toLowerCase.</p>\n        <pre><code>_.toLower([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the lower cased string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">toLower</span>(<span class="string">&apos;--Foo-Bar--&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;--foo-bar--&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toLower</span>(<span class="string">&apos;fooBar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;foobar&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toLower</span>(<span class="string">&apos;__FOO_BAR__&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;__foo_bar__&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toLower
toNumber	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts value to a number.</p>\n        <pre><code>_.toNumber(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to process.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the number.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">toNumber</span>(<span class="numeric">3<span class="delimiter">.</span>2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3.2</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toNumber</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;5e-324</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toNumber</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;Infinity</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toNumber</span>(<span class="string">&apos;3.2&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3.2</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toNumber
toPairs	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of own enumerable string keyed-value pairs for object which can be consumed by _.fromPairs. If object is a map or set, its entries are returned.</p>\n        <pre><code>_.toPairs(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>_.entries</em></p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toPairs</span>(new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[&apos;a&apos;,&#xA0;1],&#xA0;[&apos;b&apos;,&#xA0;2]]&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toPairs
toPairsIn	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of own and inherited enumerable string keyed-value pairs for object which can be consumed by _.fromPairs. If object is a map or set, its entries are returned.</p>\n        <pre><code>_.toPairsIn(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>_.entriesIn</em></p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toPairsIn</span>(new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[&apos;a&apos;,&#xA0;1],&#xA0;[&apos;b&apos;,&#xA0;2],&#xA0;[&apos;c&apos;,&#xA0;3]]&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toPairsIn
toPath	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts value to a property path array.</p>\n        <pre><code>_.toPath(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new property path array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">toPath</span>(<span class="string">&apos;a.b.c&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;b&apos;,&#xA0;&apos;c&apos;]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toPath</span>(<span class="string">&apos;a[0].b.c&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;a&apos;,&#xA0;&apos;0&apos;,&#xA0;&apos;b&apos;,&#xA0;&apos;c&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toPath
toPlainObject	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts value to a plain object flattening inherited enumerable string keyed properties of value to own properties of the plain object.</p>\n        <pre><code>_.toPlainObject(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the converted plain object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">assign</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;b&apos;:&#xA0;2&#xA0;}</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">assign</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">toPlainObject</span>(new&#xA0;<span class="name type">Foo</span>));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;b&apos;:&#xA0;2,&#xA0;&apos;c&apos;:&#xA0;3&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toPlainObject
toSafeInteger	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts value to a safe integer. A safe integer can be compared and represented correctly.</p>\n        <pre><code>_.toSafeInteger(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(number)</em>: Returns the converted integer.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">toSafeInteger</span>(<span class="numeric">3<span class="delimiter">.</span>2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toSafeInteger</span>(<span class="support">Number</span><span class="delimiter">.</span><span class="support">MIN_VALUE</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toSafeInteger</span>(Infinity);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;9007199254740991</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toSafeInteger</span>(<span class="string">&apos;3.2&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;3</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toSafeInteger
toString	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts value to a string. An empty string is returned for null and undefined values. The sign of -0 is preserved.</p>\n        <pre><code>_.toString(value)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the converted string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="support">toString</span>(null);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="support">toString</span>(-<span class="numeric">0</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;-0&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="support">toString</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;1,2,3&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toString
toUpper	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts string, as a whole, to upper case just like String#toUpperCase.</p>\n        <pre><code>_.toUpper([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the upper cased string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">toUpper</span>(<span class="string">&apos;--foo-bar--&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;--FOO-BAR--&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toUpper</span>(<span class="string">&apos;fooBar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;FOOBAR&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">toUpper</span>(<span class="string">&apos;__foo_bar__&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;__FOO_BAR__&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#toUpper
transform	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>An alternative to _.reduce; this method transforms object to a new accumulator object which is the result of running each of its own enumerable string keyed properties thru iteratee, with each invocation potentially mutating the accumulator object. If accumulator is not provided, a new object with the same [[Prototype]] will be used. The iteratee is invoked with four arguments: (accumulator, value, key, object). Iteratee functions may exit iteration early by explicitly returning false.</p>\n        <pre><code>_.transform(object, [iteratee=_.identity], [accumulator])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to iterate over.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function invoked per iteration.</li><li><code>[accumulator]</code> <em>(*)</em>: The custom accumulator value.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(*)</em>: Returns the accumulated value.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">transform</span>([<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">4</span>]<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(result<span class="delimiter">,</span>&#xA0;n)&#xA0;{</div><div>&#xA0;&#xA0;result<span class="delimiter method">.</span><span class="support">push</span>(n&#xA0;*=&#xA0;n);</div><div>&#xA0;&#xA0;return&#xA0;n&#xA0;%&#xA0;<span class="numeric">2</span>&#xA0;==&#xA0;<span class="numeric">0</span>;</div><div>}<span class="delimiter">,</span>&#xA0;[]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[4,&#xA0;9]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">transform</span>({&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(result<span class="delimiter">,</span>&#xA0;value<span class="delimiter">,</span>&#xA0;key)&#xA0;{</div><div>&#xA0;&#xA0;(result[value]&#xA0;||&#xA0;(result[value]&#xA0;=&#xA0;[]))<span class="delimiter method">.</span><span class="support">push</span>(key);</div><div>}<span class="delimiter">,</span>&#xA0;{});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;1&apos;:&#xA0;[&apos;a&apos;,&#xA0;&apos;c&apos;],&#xA0;&apos;2&apos;:&#xA0;[&apos;b&apos;]&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#transform
trim	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Removes leading and trailing whitespace or specified characters from string.</p>\n        <pre><code>_.trim([string=&apos;&apos;], [chars=whitespace])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to trim.</li><li><code>[chars=whitespace]</code> <em>(string)</em>: The characters to trim.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the trimmed string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">trim</span>(<span class="string">&apos;&#xA0;&#xA0;abc&#xA0;&#xA0;&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abc&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">trim</span>(<span class="string">&apos;-_-abc-_-&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;_-&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abc&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">map</span>([<span class="string">&apos;&#xA0;&#xA0;foo&#xA0;&#xA0;&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;&#xA0;&#xA0;bar&#xA0;&#xA0;&apos;</span>]<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>trim);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;foo&apos;,&#xA0;&apos;bar&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#trim
trimEnd	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Removes trailing whitespace or specified characters from string.</p>\n        <pre><code>_.trimEnd([string=&apos;&apos;], [chars=whitespace])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to trim.</li><li><code>[chars=whitespace]</code> <em>(string)</em>: The characters to trim.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the trimmed string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">trimEnd</span>(<span class="string">&apos;&#xA0;&#xA0;abc&#xA0;&#xA0;&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&#xA0;&#xA0;abc&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">trimEnd</span>(<span class="string">&apos;-_-abc-_-&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;_-&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;-_-abc&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#trimEnd
trimStart	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Removes leading whitespace or specified characters from string.</p>\n        <pre><code>_.trimStart([string=&apos;&apos;], [chars=whitespace])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to trim.</li><li><code>[chars=whitespace]</code> <em>(string)</em>: The characters to trim.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the trimmed string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">trimStart</span>(<span class="string">&apos;&#xA0;&#xA0;abc&#xA0;&#xA0;&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abc&#xA0;&#xA0;&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">trimStart</span>(<span class="string">&apos;-_-abc-_-&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;_-&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;abc-_-&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#trimStart
truncate	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Truncates string if it's longer than the given maximum string length. The last characters of the truncated string are replaced with the omission string which defaults to "...".</p>\n        <pre><code>_.truncate([string=&apos;&apos;], [options={}])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to truncate.</li><li><code>[options={}]</code> <em>(Object)</em>: The options object.</li><li><code>[options.length=30]</code> <em>(number)</em>: The maximum string length.</li><li><code>[options.omission=&apos;...&apos;]</code> <em>(string)</em>: The string to indicate text is omitted.</li><li><code>[options.separator]</code> <em>(RegExp|string)</em>: The separator pattern to truncate to.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the truncated string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">truncate</span>(<span class="string">&apos;hi-diddly-ho&#xA0;there,&#xA0;neighborino&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hi-diddly-ho&#xA0;there,&#xA0;neighbo...&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">truncate</span>(<span class="string">&apos;hi-diddly-ho&#xA0;there,&#xA0;neighborino&apos;</span><span class="delimiter">,</span>&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;length&apos;</span>:&#xA0;<span class="numeric">24</span><span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;separator&apos;</span>:&#xA0;<span class="string">&apos;&#xA0;&apos;</span></div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hi-diddly-ho&#xA0;there,...&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">truncate</span>(<span class="string">&apos;hi-diddly-ho&#xA0;there,&#xA0;neighborino&apos;</span><span class="delimiter">,</span>&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;length&apos;</span>:&#xA0;<span class="numeric">24</span><span class="delimiter">,</span></div><div>&#xA0;&#xA0;<span class="string">&apos;separator&apos;</span>:<span class="string">&#xA0;/,?&#xA0;+/</span></div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hi-diddly-ho&#xA0;there...&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">truncate</span>(<span class="string">&apos;hi-diddly-ho&#xA0;there,&#xA0;neighborino&apos;</span><span class="delimiter">,</span>&#xA0;{</div><div>&#xA0;&#xA0;<span class="string">&apos;omission&apos;</span>:&#xA0;<span class="string">&apos;&#xA0;[...]&apos;</span></div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;hi-diddly-ho&#xA0;there,&#xA0;neig&#xA0;[...]&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#truncate
unary	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that accepts up to one argument, ignoring any additional arguments.</p>\n        <pre><code>_.unary(func)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>func</code> <em>(Function)</em>: The function to cap arguments for.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new capped function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">map</span>([<span class="string">&apos;6&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;8&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;10&apos;</span>]<span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">unary</span>(parseInt));</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[6,&#xA0;8,&#xA0;10]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#unary
unescape	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>The inverse of _.escape; this method converts the HTML entities &amp;, &lt;, &gt;, &quot;, and &#39; in string to their corresponding characters.Note: No other HTML entities are unescaped. To unescape additional HTML entities use a third-party library like he.</p>\n        <pre><code>_.unescape([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to unescape.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the unescaped string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">unescape</span>(<span class="string">&apos;fred,&#xA0;barney,&#xA0;&amp;amp;&#xA0;pebbles&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;fred,&#xA0;barney,&#xA0;&amp;&#xA0;pebbles&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#unescape
union	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of unique values, in order, from all given arrays using SameValueZero for equality comparisons.</p>\n        <pre><code>_.union([arrays])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of combined values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">union</span>([<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#union
unionBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.union except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which uniqueness is computed. Result values are chosen from the first array in which the value occurs. The iteratee is invoked with one argument:(value).</p>\n        <pre><code>_.unionBy([arrays], [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of combined values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">unionBy</span>([<span class="numeric">2<span class="delimiter">.</span>1</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">1<span class="delimiter">.</span>2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2<span class="delimiter">.</span>3</span>]<span class="delimiter">,</span>&#xA0;<span class="support">Math</span><span class="delimiter">.</span>floor);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2.1,&#xA0;1.2]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">unionBy</span>([{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;x&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;1&#xA0;},&#xA0;{&#xA0;&apos;x&apos;:&#xA0;2&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#unionBy
unionWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.union except that it accepts comparator which is invoked to compare elements of arrays. Result values are chosen from the first array in which the value occurs. The comparator is invoked with two arguments: (arrVal, othVal).</p>\n        <pre><code>_.unionWith([arrays], [comparator])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of combined values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}];</div><div><span class="type">var</span>&#xA0;others&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">unionWith</span>(objects<span class="delimiter">,</span>&#xA0;others<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>isEqual);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;1,&#xA0;&apos;y&apos;:&#xA0;2&#xA0;},&#xA0;{&#xA0;&apos;x&apos;:&#xA0;2,&#xA0;&apos;y&apos;:&#xA0;1&#xA0;},&#xA0;{&#xA0;&apos;x&apos;:&#xA0;1,&#xA0;&apos;y&apos;:&#xA0;1&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#unionWith
uniq	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a duplicate-free version of an array, using SameValueZero for equality comparisons, in which only the first occurrence of each element is kept. The order of result values is determined by the order they occur in the array.</p>\n        <pre><code>_.uniq(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">uniq</span>([<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2,&#xA0;1]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#uniq
uniqBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.uniq except that it accepts iteratee which is invoked for each element in array to generate the criterion by which uniqueness is computed. The order of result values is determined by the order they occur in the array. The iteratee is invoked with one argument:(value).</p>\n        <pre><code>_.uniqBy(array, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">uniqBy</span>([<span class="numeric">2<span class="delimiter">.</span>1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1<span class="delimiter">.</span>2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2<span class="delimiter">.</span>3</span>]<span class="delimiter">,</span>&#xA0;<span class="support">Math</span><span class="delimiter">.</span>floor);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[2.1,&#xA0;1.2]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">uniqBy</span>([{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;x&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;1&#xA0;},&#xA0;{&#xA0;&apos;x&apos;:&#xA0;2&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#uniqBy
uniqWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.uniq except that it accepts comparator which is invoked to compare elements of array. The order of result values is determined by the order they occur in the array.The comparator is invoked with two arguments: (arrVal, othVal).</p>\n        <pre><code>_.uniqWith(array, [comparator])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new duplicate free array.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">uniqWith</span>(objects<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>isEqual);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;1,&#xA0;&apos;y&apos;:&#xA0;2&#xA0;},&#xA0;{&#xA0;&apos;x&apos;:&#xA0;2,&#xA0;&apos;y&apos;:&#xA0;1&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#uniqWith
uniqueId	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Generates a unique ID. If prefix is given, the ID is appended to it.</p>\n        <pre><code>_.uniqueId([prefix=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[prefix=&apos;&apos;]</code> <em>(string)</em>: The value to prefix the ID with.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the unique ID.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">uniqueId</span>(<span class="string">&apos;contact_&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;contact_104&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">uniqueId</span>();</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;105&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#uniqueId
unset	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Removes the property at path of object.Note: This method mutates object.</p>\n        <pre><code>_.unset(object, path)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to unset.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(boolean)</em>: Returns <code>true</code> if the property is deleted, else <code>false</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">7</span>&#xA0;}&#xA0;}]&#xA0;};</div><div>_<span class="delimiter method">.</span><span class="name">unset</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[0].b.c&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(object);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;[{&#xA0;&apos;b&apos;:&#xA0;{}&#xA0;}]&#xA0;};</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">unset</span>(object<span class="delimiter">,</span>&#xA0;[<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;0&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;c&apos;</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;true</span></div><div>&#xA0;</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(object);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;[{&#xA0;&apos;b&apos;:&#xA0;{}&#xA0;}]&#xA0;};</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#unset
unzip	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.zip except that it accepts an array of grouped elements and creates an array regrouping the elements to their pre-zip configuration.</p>\n        <pre><code>_.unzip(array)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array of grouped elements to process.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of regrouped elements.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;zipped&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">zip</span>([<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;[true<span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[&apos;a&apos;,&#xA0;1,&#xA0;true],&#xA0;[&apos;b&apos;,&#xA0;2,&#xA0;false]]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">unzip</span>(zipped);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[&apos;a&apos;,&#xA0;&apos;b&apos;],&#xA0;[1,&#xA0;2],&#xA0;[true,&#xA0;false]]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#unzip
unzipWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.unzip except that it accepts iteratee to specify how regrouped values should be combined. The iteratee is invoked with the elements of each group: (...group).</p>\n        <pre><code>_.unzipWith(array, [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array of grouped elements to process.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function to combine regrouped values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of regrouped elements.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;zipped&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">zip</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">10</span><span class="delimiter">,</span>&#xA0;<span class="numeric">20</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">100</span><span class="delimiter">,</span>&#xA0;<span class="numeric">200</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[1,&#xA0;10,&#xA0;100],&#xA0;[2,&#xA0;20,&#xA0;200]]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">unzipWith</span>(zipped<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>add);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3,&#xA0;30,&#xA0;300]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#unzipWith
update	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.set except that accepts updater to produce the value to set. Use _.updateWith to customize path creation. The updater is invoked with one argument: (value).Note: This method mutates object.</p>\n        <pre><code>_.update(object, path, updater)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to set.</li><li><code>updater</code> <em>(Function)</em>: The function to produce the updated value.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{&#xA0;<span class="string">&apos;a&apos;</span>:&#xA0;[{&#xA0;<span class="string">&apos;b&apos;</span>:&#xA0;{&#xA0;<span class="string">&apos;c&apos;</span>:&#xA0;<span class="numeric">3</span>&#xA0;}&#xA0;}]&#xA0;};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">update</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;a[0].b.c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="type">function</span>(n)&#xA0;{&#xA0;return&#xA0;n&#xA0;*&#xA0;n;&#xA0;});</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(object<span class="delimiter">.</span>a[<span class="numeric">0</span>]<span class="delimiter">.</span>b<span class="delimiter">.</span>c);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;9</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">update</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;x[0].y.z&apos;</span><span class="delimiter">,</span>&#xA0;<span class="type">function</span>(n)&#xA0;{&#xA0;return&#xA0;n&#xA0;?&#xA0;n&#xA0;+&#xA0;<span class="numeric">1</span>&#xA0;:&#xA0;<span class="numeric">0</span>;&#xA0;});</div><div><span class="name type console">console</span><span class="delimiter method">.</span><span class="support console">log</span>(object<span class="delimiter">.</span><span class="support">x</span>[<span class="numeric">0</span>]<span class="delimiter">.</span><span class="support">y</span><span class="delimiter">.</span><span class="support">z</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;0</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#update
updateWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.update except that it accepts customizer which is invoked to produce the objects of path. If customizer returns undefined path creation is handled by the method instead. The customizer is invoked with three arguments: (nsValue, key, nsObject).Note: This method mutates object.</p>\n        <pre><code>_.updateWith(object, path, updater, [customizer])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to modify.</li><li><code>path</code> <em>(Array|string)</em>: The path of the property to set.</li><li><code>updater</code> <em>(Function)</em>: The function to produce the updated value.</li><li><code>[customizer]</code> <em>(Function)</em>: The function to customize assigned values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns <code>object</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;object&#xA0;=&#xA0;{};</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">updateWith</span>(object<span class="delimiter">,</span>&#xA0;<span class="string">&apos;[0][1]&apos;</span><span class="delimiter">,</span>&#xA0;_<span class="delimiter method">.</span><span class="name">constant</span>(<span class="string">&apos;a&apos;</span>)<span class="delimiter">,</span>&#xA0;<span class="support">Object</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;0&apos;:&#xA0;{&#xA0;&apos;1&apos;:&#xA0;&apos;a&apos;&#xA0;}&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#updateWith
upperCase	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts string, as space separated words, to upper case.</p>\n        <pre><code>_.upperCase([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the upper cased string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">upperCase</span>(<span class="string">&apos;--foo-bar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;FOO&#xA0;BAR&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">upperCase</span>(<span class="string">&apos;fooBar&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;FOO&#xA0;BAR&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">upperCase</span>(<span class="string">&apos;__foo_bar__&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;FOO&#xA0;BAR&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#upperCase
upperFirst	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Converts the first character of string to upper case.</p>\n        <pre><code>_.upperFirst([string=&apos;&apos;])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to convert.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(string)</em>: Returns the converted string.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">upperFirst</span>(<span class="string">&apos;fred&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;Fred&apos;</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">upperFirst</span>(<span class="string">&apos;FRED&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;FRED&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#upperFirst
values	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of the own enumerable string keyed property values of object.Note: Non-object values are coerced to objects.</p>\n        <pre><code>_.values(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the array of property values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">values</span>(new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2]&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">values</span>(<span class="string">&apos;hi&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;h&apos;,&#xA0;&apos;i&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#values
valuesIn	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of the own and inherited enumerable string keyed property values of object.Note: Non-object values are coerced to objects.</p>\n        <pre><code>_.valuesIn(object)</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>object</code> <em>(Object)</em>: The object to query.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the array of property values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">function</span>&#xA0;<span class="name">Foo</span>()&#xA0;{</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>a&#xA0;=&#xA0;<span class="numeric">1</span>;</div><div>&#xA0;&#xA0;this<span class="delimiter">.</span>b&#xA0;=&#xA0;<span class="numeric">2</span>;</div><div>}</div><div>&#xA0;</div><div>Foo<span class="delimiter">.</span><span class="support">prototype</span><span class="delimiter">.</span>c&#xA0;=&#xA0;<span class="numeric">3</span>;</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">valuesIn</span>(new&#xA0;<span class="name type">Foo</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;2,&#xA0;3]&#xA0;(iteration&#xA0;order&#xA0;is&#xA0;not&#xA0;guaranteed)</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#valuesIn
without	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array excluding all given values using SameValueZero for equality comparisons.Note: Unlike _.pull, this method returns a new array.</p>\n        <pre><code>_.without(array, [values])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>array</code> <em>(Array)</em>: The array to inspect.</li><li><code>[values]</code> <em>(...*)</em>: The values to exclude.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">without</span>([<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]<span class="delimiter">,</span>&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#without
words	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Splits string into an array of its words.</p>\n        <pre><code>_.words([string=&apos;&apos;], [pattern])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[string=&apos;&apos;]</code> <em>(string)</em>: The string to inspect.</li><li><code>[pattern]</code> <em>(RegExp|string)</em>: The pattern to match words.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the words of <code>string</code>.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">words</span>(<span class="string">&apos;fred,&#xA0;barney,&#xA0;&amp;&#xA0;pebbles&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;fred&apos;,&#xA0;&apos;barney&apos;,&#xA0;&apos;pebbles&apos;]</span></div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">words</span>(<span class="string">&apos;fred,&#xA0;barney,&#xA0;&amp;&#xA0;pebbles&apos;</span><span class="delimiter">,</span><span class="string">&#xA0;/[^,&#xA0;]+/g</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[&apos;fred&apos;,&#xA0;&apos;barney&apos;,&#xA0;&apos;&amp;&apos;,&#xA0;&apos;pebbles&apos;]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#words
wrap	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates a function that provides value to wrapper as its first argument. Any additional arguments provided to the function are appended to those provided to the wrapper. The wrapper is invoked with the this binding of the created function.</p>\n        <pre><code>_.wrap(value, [wrapper=identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>value</code> <em>(*)</em>: The value to wrap.</li><li><code>[wrapper=identity]</code> <em>(Function)</em>: The wrapper function.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Function)</em>: Returns the new function.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;p&#xA0;=&#xA0;_<span class="delimiter method">.</span><span class="name">wrap</span>(_<span class="delimiter">.</span>escape<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(func<span class="delimiter">,</span>&#xA0;text)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;<span class="string">&apos;&lt;p&gt;&apos;</span>&#xA0;+&#xA0;<span class="name">func</span>(text)&#xA0;+&#xA0;<span class="string">&apos;&lt;/p&gt;&apos;</span>;</div><div>});</div><div>&#xA0;</div><div><span class="name">p</span>(<span class="string">&apos;fred,&#xA0;barney,&#xA0;&amp;&#xA0;pebbles&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;&apos;&lt;p&gt;fred,&#xA0;barney,&#xA0;&amp;amp;&#xA0;pebbles&lt;/p&gt;&apos;</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#wrap
xor	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of unique values that is the symmetric difference of the given arrays. The order of result values is determined by the order they occur in the arrays.</p>\n        <pre><code>_.xor([arrays])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">xor</span>([<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1,&#xA0;3]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#xor
xorBy	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.xor except that it accepts iteratee which is invoked for each element of each arrays to generate the criterion by which by which they're compared. The order of result values is determined by the order they occur in the arrays. The iteratee is invoked with one argument: (value).</p>\n        <pre><code>_.xorBy([arrays], [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The iteratee invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">xorBy</span>([<span class="numeric">2<span class="delimiter">.</span>1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">1<span class="delimiter">.</span>2</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">2<span class="delimiter">.</span>3</span><span class="delimiter">,</span>&#xA0;<span class="numeric">3<span class="delimiter">.</span>4</span>]<span class="delimiter">,</span>&#xA0;<span class="support">Math</span><span class="delimiter">.</span>floor);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[1.2,&#xA0;3.4]</span></div><div>&#xA0;</div><div><span class="comment">//&#xA0;The&#xA0;`_.property`&#xA0;iteratee&#xA0;shorthand.</span></div><div>_<span class="delimiter method">.</span><span class="name">xorBy</span>([{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}]<span class="delimiter">,</span>&#xA0;<span class="string">&apos;x&apos;</span>);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;2&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#xorBy
xorWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.xor except that it accepts comparator which is invoked to compare elements of arrays. The order of result values is determined by the order they occur in the arrays. The comparator is invoked with two arguments: (arrVal, othVal).</p>\n        <pre><code>_.xorWith([arrays], [comparator])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to inspect.</li><li><code>[comparator]</code> <em>(Function)</em>: The comparator invoked per element.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of filtered values.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div><span class="type">var</span>&#xA0;objects&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">2</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}];</div><div><span class="type">var</span>&#xA0;others&#xA0;=&#xA0;[{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">1</span>&#xA0;}<span class="delimiter">,</span>&#xA0;{&#xA0;<span class="string">&apos;x&apos;</span>:&#xA0;<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;y&apos;</span>:&#xA0;<span class="numeric">2</span>&#xA0;}];</div><div>&#xA0;</div><div>_<span class="delimiter method">.</span><span class="name">xorWith</span>(objects<span class="delimiter">,</span>&#xA0;others<span class="delimiter">,</span>&#xA0;_<span class="delimiter">.</span>isEqual);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[{&#xA0;&apos;x&apos;:&#xA0;2,&#xA0;&apos;y&apos;:&#xA0;1&#xA0;},&#xA0;{&#xA0;&apos;x&apos;:&#xA0;1,&#xA0;&apos;y&apos;:&#xA0;1&#xA0;}]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#xorWith
zip	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>Creates an array of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements of the given arrays, and so on.</p>\n        <pre><code>_.zip([arrays])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to process.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of grouped elements.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">zip</span>([<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;[true<span class="delimiter">,</span>&#xA0;false]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[[&apos;a&apos;,&#xA0;1,&#xA0;true],&#xA0;[&apos;b&apos;,&#xA0;2,&#xA0;false]]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#zip
zipObject	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.fromPairs except that it accepts two arrays, one of property identifiers and one of corresponding values.</p>\n        <pre><code>_.zipObject([props=[]], [values=[]])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[props=[]]</code> <em>(Array)</em>: The property identifiers.</li><li><code>[values=[]]</code> <em>(Array)</em>: The property values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">zipObject</span>([<span class="string">&apos;a&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;b&apos;</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;1,&#xA0;&apos;b&apos;:&#xA0;2&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#zipObject
zipObjectDeep	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.zipObject except that it supports property paths.</p>\n        <pre><code>_.zipObjectDeep([props=[]], [values=[]])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[props=[]]</code> <em>(Array)</em>: The property identifiers.</li><li><code>[values=[]]</code> <em>(Array)</em>: The property values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Object)</em>: Returns the new object.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">zipObjectDeep</span>([<span class="string">&apos;a.b[0].c&apos;</span><span class="delimiter">,</span>&#xA0;<span class="string">&apos;a.b[1].d&apos;</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]);</div><div><span class="comment">//&#xA0;=&gt;&#xA0;{&#xA0;&apos;a&apos;:&#xA0;{&#xA0;&apos;b&apos;:&#xA0;[{&#xA0;&apos;c&apos;:&#xA0;1&#xA0;},&#xA0;{&#xA0;&apos;d&apos;:&#xA0;2&#xA0;}]&#xA0;}&#xA0;}</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#zipObjectDeep
zipWith	A								https://www.drupal.org/files/project-images/logo%20(2).png	<section class="prog__container">\n        <p>This method is like _.zip except that it accepts iteratee to specify how grouped values should be combined. The iteratee is invoked with the elements of each group: (...group).</p>\n        <pre><code>_.zipWith([arrays], [iteratee=_.identity])</code></pre>\n        <span class="prog__sub">Arguments</span>\n        <pre><ol><li><code>[arrays]</code> <em>(...Array)</em>: The arrays to process.</li><li><code>[iteratee=_.identity]</code> <em>(Function)</em>: The function to combine grouped values.</li></ol></pre>\n        <span class="prog__sub">Returns</span>\n        <pre><p><em>(Array)</em>: Returns the new array of grouped elements.</p></pre>\n        <span class="prog__sub">Example</span>\n        <pre><div>_<span class="delimiter method">.</span><span class="name">zipWith</span>([<span class="numeric">1</span><span class="delimiter">,</span>&#xA0;<span class="numeric">2</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">10</span><span class="delimiter">,</span>&#xA0;<span class="numeric">20</span>]<span class="delimiter">,</span>&#xA0;[<span class="numeric">100</span><span class="delimiter">,</span>&#xA0;<span class="numeric">200</span>]<span class="delimiter">,</span>&#xA0;<span class="type">function</span>(a<span class="delimiter">,</span>&#xA0;b<span class="delimiter">,</span>&#xA0;c)&#xA0;{</div><div>&#xA0;&#xA0;return&#xA0;a&#xA0;+&#xA0;b&#xA0;+&#xA0;c;</div><div>});</div><div><span class="comment">//&#xA0;=&gt;&#xA0;[111,&#xA0;222]</span></div></pre>\n    </section>	https://lodash.com/docs/4.17.4#zipWith
