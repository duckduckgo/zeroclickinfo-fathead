Version check	A										<section class="prog__container"><p>A quick check to verify that we are on at least version 1.1 of SQLAlchemy:</p><pre><code>>>> import sqlalchemy\n>>> sqlalchemy.__version__ \n1.1.0</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Connecting	A										<section class="prog__container"><p>For this tutorial we will use an in-memory-only SQLite database. To connect we\\nuse create_engine():</p><pre><code>>>> from sqlalchemy import create_engine\n>>> engine = create_engine('sqlite:///:memory:', echo=True)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Declare a mapping	A										<section class="prog__container"><p>When using the ORM, the configurational process starts by describing the database\\ntables well be dealing with, and then by defining our own classes which will\\nbe mapped to those tables.   In modern SQLAlchemy,\\nthese two tasks are usually performed together,\\nusing a system known as Declarative, which allows us to create\\nclasses that include directives to describe the actual database table they will\\nbe mapped to.Classes mapped using the Declarative system are defined in terms of a base class which\\nmaintains a catalog of classes and\\ntables relative to that base - this is known as the declarative base class.  Our\\napplication will usually have just one instance of this base in a commonly\\nimported module.   We create the base class using the declarative_base()\\nfunction, as follows:</p><pre><code>>>> from sqlalchemy.ext.declarative import declarative_base\n\n>>> Base = declarative_base()</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Create a schema	A										<section class="prog__container"><p>With our User class constructed via the Declarative system, we have defined information about\\nour table, known as table metadata.   The object used by SQLAlchemy to represent\\nthis information for a specific table is called the Table object, and here Declarative has made\\none for us.  We can see this object by inspecting the __table__ attribute:</p><pre><code>>>> User.__table__ \nTable('users', MetaData(bind=None),\n            Column('id', Integer(), table=<users>, primary_key=True, nullable=False),\n            Column('name', String(), table=<users>),\n            Column('fullname', String(), table=<users>),\n            Column('password', String(), table=<users>), schema=None)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Create an instance of the mapped class	A										<section class="prog__container"><p>With mappings complete, lets now create and inspect a User object:</p><pre><code>>>> ed_user = User(name='ed', fullname='Ed Jones', password='edspassword')\n>>> ed_user.name\n'ed'\n>>> ed_user.password\n'edspassword'\n>>> str(ed_user.id)\n'None'</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Creating a session	A										<section class="prog__container"><p>Were now ready to start talking to the database. The ORMs handle to the\\ndatabase is the Session. When we first set up\\nthe application, at the same level as our create_engine()\\nstatement, we define a Session class which\\nwill serve as a factory for new Session\\nobjects:</p><pre><code>>>> from sqlalchemy.orm import sessionmaker\n>>> Session = sessionmaker(bind=engine)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Adding and updating objects	A										<section class="prog__container"><p>To persist our User object, we add() it to our Session:</p><pre><code>>>> ed_user = User(name='ed', fullname='Ed Jones', password='edspassword')\n>>> session.add(ed_user)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Rolling back	A										<section class="prog__container"><p>Since the Session works within a transaction,\\nwe can roll back changes made too. Lets make two changes that well revert;\\ned_users user name gets set to Edwardo:</p><pre><code>>>> ed_user.name = 'Edwardo'</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Querying	A										<section class="prog__container"><p>A Query object is created using the\\nquery() method on\\nSession. This function takes a variable\\nnumber of arguments, which can be any combination of classes and\\nclass-instrumented descriptors. Below, we indicate a\\nQuery which loads User instances. When\\nevaluated in an iterative context, the list of User objects present is\\nreturned:</p><pre><code>sql>>> for instance in session.query(User).order_by(User.id):\n...     print(instance.name, instance.fullname)\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password\nFROM users ORDER BY users.id\n()\ned Ed Jones\nwendy Wendy Williams\nmary Mary Contrary\nfred Fred Flinstone</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Common filter operators	A										<section class="prog__container"><p>Heres a rundown of some of the most common operators used in\\nfilter():</p><pre><code>query.filter(User.name == 'ed')</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Returning lists and scalars	A										<section class="prog__container"><p>A number of methods on Query\\nimmediately issue SQL and return a value containing loaded\\ndatabase results.  Heres a brief tour:</p><pre><code>>>> query = session.query(User).filter(User.name.like('%ed')).order_by(User.id)\nsql>>> query.all()\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password\nFROM users\nWHERE users.name LIKE ? ORDER BY users.id\n('%ed',)\n[<User(name='ed', fullname='Ed Jones', password='f8s7ccs')>,\n      <User(name='fred', fullname='Fred Flinstone', password='blah')>]</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Using textual sql	A										<section class="prog__container"><p>Literal strings can be used flexibly with\\nQuery, by specifying their use\\nwith the text() construct, which is accepted\\nby most applicable methods.  For example,\\nfilter() and\\norder_by():</p><pre><code>>>> from sqlalchemy import text\nsql>>> for user in session.query(User).\\n...             filter(text("id<224")).\\n...             order_by(text("id")).all():\n...     print(user.name)\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password\nFROM users\nWHERE id<224 ORDER BY id\n()\ned\nwendy\nmary\nfred</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Counting	A										<section class="prog__container"><p>Query includes a convenience method for\\ncounting called count():</p><pre><code>sql>>> session.query(User).filter(User.name.like('%ed')).count()\nSELECT count(*) AS count_1\nFROM (SELECT users.id AS users_id,\n                users.name AS users_name,\n                users.fullname AS users_fullname,\n                users.password AS users_password\nFROM users\nWHERE users.name LIKE ?) AS anon_1\n('%ed',)\n2</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Building a relationship	A										<section class="prog__container"><p>Lets consider how a second table, related to User, can be mapped and\\nqueried.  Users in our system\\ncan store any number of email addresses associated with their username. This\\nimplies a basic one to many association from the users to a new\\ntable which stores email addresses, which we will call addresses. Using\\ndeclarative, we define this table along with its mapped class, Address:</p><pre><code>>>> from sqlalchemy import ForeignKey\n>>> from sqlalchemy.orm import relationship\n\n>>> class Address(Base):\n...     __tablename__ = 'addresses'\n...     id = Column(Integer, primary_key=True)\n...     email_address = Column(String, nullable=False)\n...     user_id = Column(Integer, ForeignKey('users.id'))\n...\n...     user = relationship("User", back_populates="addresses")\n...\n...     def __repr__(self):\n...         return "<Address(email_address='%s')>" % self.email_address\n\n>>> User.addresses = relationship(\n...     "Address", order_by=Address.id, back_populates="user")</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Working with related objects	A										<section class="prog__container"><p>Now when we create a User, a blank addresses collection will be\\npresent. Various collection types, such as sets and dictionaries, are possible\\nhere (see Customizing Collection Access for details), but by\\ndefault, the collection is a Python list.</p><pre><code>>>> jack = User(name='jack', fullname='Jack Bean', password='gjffdd')\n>>> jack.addresses\n[]</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Querying with joins	A										<section class="prog__container"><p>Now that we have two tables, we can show some more features of Query,\\nspecifically how to create queries that deal with both tables at the same time.\\nThe Wikipedia page on SQL JOIN offers a good introduction to\\njoin techniques, several of which well illustrate here.To construct a simple implicit join between User and Address,\\nwe can use Query.filter() to equate their related columns together.\\nBelow we load the User and Address entities at once using this method:</p><pre><code>sql>>> for u, a in session.query(User, Address).\\n...                     filter(User.id==Address.user_id).\\n...                     filter(Address.email_address=='jack@google.com').\\n...                     all():\n...     print(u)\n...     print(a)\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password,\n        addresses.id AS addresses_id,\n        addresses.email_address AS addresses_email_address,\n        addresses.user_id AS addresses_user_id\nFROM users, addresses\nWHERE users.id = addresses.user_id\n        AND addresses.email_address = ?\n('jack@google.com',)\n<User(name='jack', fullname='Jack Bean', password='gjffdd')>\n<Address(email_address='jack@google.com')></code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Using aliases	A										<section class="prog__container"><p>When querying across multiple tables, if the same table needs to be referenced\\nmore than once, SQL typically requires that the table be aliased with\\nanother name, so that it can be distinguished against other occurrences of\\nthat table. The Query supports this most\\nexplicitly using the aliased construct. Below we join to the Address\\nentity twice, to locate a user who has two distinct email addresses at the\\nsame time:</p><pre><code>>>> from sqlalchemy.orm import aliased\n>>> adalias1 = aliased(Address)\n>>> adalias2 = aliased(Address)\nsql>>> for username, email1, email2 in \\n...     session.query(User.name, adalias1.email_address, adalias2.email_address).\\n...     join(adalias1, User.addresses).\\n...     join(adalias2, User.addresses).\\n...     filter(adalias1.email_address=='jack@google.com').\\n...     filter(adalias2.email_address=='j25@yahoo.com'):\n...     print(username, email1, email2)\nSELECT users.name AS users_name,\n        addresses_1.email_address AS addresses_1_email_address,\n        addresses_2.email_address AS addresses_2_email_address\nFROM users JOIN addresses AS addresses_1\n        ON users.id = addresses_1.user_id\nJOIN addresses AS addresses_2\n        ON users.id = addresses_2.user_id\nWHERE addresses_1.email_address = ?\n        AND addresses_2.email_address = ?\n('jack@google.com', 'j25@yahoo.com')\njack jack@google.com j25@yahoo.com</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Using subqueries	A										<section class="prog__container"><p>The Query is suitable for generating statements\\nwhich can be used as subqueries. Suppose we wanted to load User objects\\nalong with a count of how many Address records each user has. The best way\\nto generate SQL like this is to get the count of addresses grouped by user\\nids, and JOIN to the parent. In this case we use a LEFT OUTER JOIN so that we\\nget rows back for those users who dont have any addresses, e.g.:</p><pre><code>SELECT users.*, adr_count.address_count FROM users LEFT OUTER JOIN\n    (SELECT user_id, count(*) AS address_count\n        FROM addresses GROUP BY user_id) AS adr_count\n    ON users.id=adr_count.user_id</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Selecting entities from subqueries	A										<section class="prog__container"><p>Above, we just selected a result that included a column from a subquery. What\\nif we wanted our subquery to map to an entity ? For this we use aliased()\\nto associate an alias of a mapped class to a subquery:</p><pre><code>sql>>> stmt = session.query(Address).\\n...                 filter(Address.email_address != 'j25@yahoo.com').\\n...                 subquery()\n>>> adalias = aliased(Address, stmt)\n>>> for user, address in session.query(User, adalias).\\n...         join(adalias, User.addresses):\n...     print(user)\n...     print(address)\nSELECT users.id AS users_id,\n            users.name AS users_name,\n            users.fullname AS users_fullname,\n            users.password AS users_password,\n            anon_1.id AS anon_1_id,\n            anon_1.email_address AS anon_1_email_address,\n            anon_1.user_id AS anon_1_user_id\nFROM users JOIN\n    (SELECT addresses.id AS id,\n            addresses.email_address AS email_address,\n            addresses.user_id AS user_id\n    FROM addresses\n    WHERE addresses.email_address != ?) AS anon_1\n    ON users.id = anon_1.user_id\n('j25@yahoo.com',)\n<User(name='jack', fullname='Jack Bean', password='gjffdd')>\n<Address(email_address='jack@google.com')></code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Using exists	A										<section class="prog__container"><p>The EXISTS keyword in SQL is a boolean operator which returns True if the\\ngiven expression contains any rows. It may be used in many scenarios in place\\nof joins, and is also useful for locating rows which do not have a\\ncorresponding row in a related table.There is an explicit EXISTS construct, which looks like this:</p><pre><code>>>> from sqlalchemy.sql import exists\n>>> stmt = exists().where(Address.user_id==User.id)\nsql>>> for name, in session.query(User.name).filter(stmt):\n...     print(name)\nSELECT users.name AS users_name\nFROM users\nWHERE EXISTS (SELECT *\nFROM addresses\nWHERE addresses.user_id = users.id)\n()\njack</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Common relationship operators	A										<section class="prog__container"><p>Heres all the operators which build on relationships - each one\\nis linked to its API documentation which includes full details on usage\\nand behavior:</p><pre><code>query.filter(Address.user == someuser)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Eager loading	A										<section class="prog__container"><p>Recall earlier that we illustrated a lazy loading operation, when\\nwe accessed the User.addresses collection of a User and SQL\\nwas emitted.  If you want to reduce the number of queries (dramatically, in many cases),\\nwe can apply an eager load to the query operation.   SQLAlchemy\\noffers three types of eager loading, two of which are automatic, and a third\\nwhich involves custom criterion.   All three are usually invoked via functions known\\nas query options which give additional instructions to the Query on how\\nwe would like various attributes to be loaded, via the Query.options() method.</p><pre><code>>>> from sqlalchemy.orm import subqueryload\nsql>>> jack = session.query(User).\\n...                 options(subqueryload(User.addresses)).\\n...                 filter_by(name='jack').one()\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password\nFROM users\nWHERE users.name = ?\n('jack',)\nSELECT addresses.id AS addresses_id,\n        addresses.email_address AS addresses_email_address,\n        addresses.user_id AS addresses_user_id,\n        anon_1.users_id AS anon_1_users_id\nFROM (SELECT users.id AS users_id\n    FROM users WHERE users.name = ?) AS anon_1\nJOIN addresses ON anon_1.users_id = addresses.user_id\nORDER BY anon_1.users_id, addresses.id\n('jack',)\n>>> jack\n<User(name='jack', fullname='Jack Bean', password='gjffdd')>\n\n>>> jack.addresses\n[<Address(email_address='jack@google.com')>, <Address(email_address='j25@yahoo.com')>]</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Subquery load	A										<section class="prog__container"><p>In this case wed like to indicate that User.addresses should load eagerly.\\nA good choice for loading a set of objects as well as their related collections\\nis the orm.subqueryload() option, which emits a second SELECT statement\\nthat fully loads the collections associated with the results just loaded.\\nThe name subquery originates from the fact that the SELECT statement\\nconstructed directly via the Query is re-used, embedded as a subquery\\ninto a SELECT against the related table.   This is a little elaborate but\\nvery easy to use:</p><pre><code>>>> from sqlalchemy.orm import subqueryload\nsql>>> jack = session.query(User).\\n...                 options(subqueryload(User.addresses)).\\n...                 filter_by(name='jack').one()\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password\nFROM users\nWHERE users.name = ?\n('jack',)\nSELECT addresses.id AS addresses_id,\n        addresses.email_address AS addresses_email_address,\n        addresses.user_id AS addresses_user_id,\n        anon_1.users_id AS anon_1_users_id\nFROM (SELECT users.id AS users_id\n    FROM users WHERE users.name = ?) AS anon_1\nJOIN addresses ON anon_1.users_id = addresses.user_id\nORDER BY anon_1.users_id, addresses.id\n('jack',)\n>>> jack\n<User(name='jack', fullname='Jack Bean', password='gjffdd')>\n\n>>> jack.addresses\n[<Address(email_address='jack@google.com')>, <Address(email_address='j25@yahoo.com')>]</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Joined load	A										<section class="prog__container"><p>The other automatic eager loading function is more well known and is called\\norm.joinedload().   This style of loading emits a JOIN, by default\\na LEFT OUTER JOIN, so that the lead object as well as the related object\\nor collection is loaded in one step.   We illustrate loading the same\\naddresses collection in this way - note that even though the User.addresses\\ncollection on jack is actually populated right now, the query\\nwill emit the extra join regardless:</p><pre><code>>>> from sqlalchemy.orm import joinedload\n\nsql>>> jack = session.query(User).\\n...                        options(joinedload(User.addresses)).\\n...                        filter_by(name='jack').one()\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password,\n        addresses_1.id AS addresses_1_id,\n        addresses_1.email_address AS addresses_1_email_address,\n        addresses_1.user_id AS addresses_1_user_id\nFROM users\n    LEFT OUTER JOIN addresses AS addresses_1 ON users.id = addresses_1.user_id\nWHERE users.name = ? ORDER BY addresses_1.id\n('jack',)\n\n>>> jack\n<User(name='jack', fullname='Jack Bean', password='gjffdd')>\n\n>>> jack.addresses\n[<Address(email_address='jack@google.com')>, <Address(email_address='j25@yahoo.com')>]</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Explicit join + eagerload	A										<section class="prog__container"><p>A third style of eager loading is when we are constructing a JOIN explicitly in\\norder to locate the primary rows, and would like to additionally apply the extra\\ntable to a related object or collection on the primary object.   This feature\\nis supplied via the orm.contains_eager() function, and is most\\ntypically useful for pre-loading the many-to-one object on a query that needs\\nto filter on that same object.  Below we illustrate loading an Address\\nrow as well as the related User object, filtering on the User named\\njack and using orm.contains_eager() to apply the user columns to the Address.user\\nattribute:</p><pre><code>>>> from sqlalchemy.orm import contains_eager\nsql>>> jacks_addresses = session.query(Address).\\n...                             join(Address.user).\\n...                             filter(User.name=='jack').\\n...                             options(contains_eager(Address.user)).\\n...                             all()\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password,\n        addresses.id AS addresses_id,\n        addresses.email_address AS addresses_email_address,\n        addresses.user_id AS addresses_user_id\nFROM addresses JOIN users ON users.id = addresses.user_id\nWHERE users.name = ?\n('jack',)\n\n>>> jacks_addresses\n[<Address(email_address='jack@google.com')>, <Address(email_address='j25@yahoo.com')>]\n\n>>> jacks_addresses[0].user\n<User(name='jack', fullname='Jack Bean', password='gjffdd')></code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Deleting	A										<section class="prog__container"><p>Lets try to delete jack and see how that goes. Well mark the object as deleted\\nin the session, then well issue a count query to see that no rows remain:</p><pre><code>>>> session.delete(jack)\nsql>>> session.query(User).filter_by(name='jack').count()\nUPDATE addresses SET user_id=? WHERE addresses.id = ?\n((None, 1), (None, 2))\nDELETE FROM users WHERE users.id = ?\n(5,)\nSELECT count(*) AS count_1\nFROM (SELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password\nFROM users\nWHERE users.name = ?) AS anon_1\n('jack',)\n0</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Configuring delete/delete-orphan cascade	A										<section class="prog__container"><p>We will configure cascade options on the User.addresses relationship\\nto change the behavior. While SQLAlchemy allows you to add new attributes and\\nrelationships to mappings at any point in time, in this case the existing\\nrelationship needs to be removed, so we need to tear down the mappings\\ncompletely and start again - well close the Session:</p><pre><code>>>> session.close()\nROLLBACK</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Building a many to many relationship	A										<section class="prog__container"><p>Were moving into the bonus round here, but lets show off a many-to-many\\nrelationship. Well sneak in some other features too, just to take a tour.\\nWell make our application a blog application, where users can write\\nBlogPost items, which have Keyword items associated with them.For a plain many-to-many, we need to create an un-mapped Table construct\\nto serve as the association table.  This looks like the following:</p><pre><code>>>> from sqlalchemy import Table, Text\n>>> # association table\n>>> post_keywords = Table('post_keywords', Base.metadata,\n...     Column('post_id', ForeignKey('posts.id'), primary_key=True),\n...     Column('keyword_id', ForeignKey('keywords.id'), primary_key=True)\n... )</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Common filter operators	A										<section class="prog__container"><p>Heres a rundown of some of the most common operators used in\\nfilter():</p><pre><code>query.filter(User.name == 'ed')</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Returning lists and scalars	A										<section class="prog__container"><p>A number of methods on Query\\nimmediately issue SQL and return a value containing loaded\\ndatabase results.  Heres a brief tour:</p><pre><code>>>> query = session.query(User).filter(User.name.like('%ed')).order_by(User.id)\nsql>>> query.all()\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password\nFROM users\nWHERE users.name LIKE ? ORDER BY users.id\n('%ed',)\n[<User(name='ed', fullname='Ed Jones', password='f8s7ccs')>,\n      <User(name='fred', fullname='Fred Flinstone', password='blah')>]</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Using textual sql	A										<section class="prog__container"><p>Literal strings can be used flexibly with\\nQuery, by specifying their use\\nwith the text() construct, which is accepted\\nby most applicable methods.  For example,\\nfilter() and\\norder_by():</p><pre><code>>>> from sqlalchemy import text\nsql>>> for user in session.query(User).\\n...             filter(text("id<224")).\\n...             order_by(text("id")).all():\n...     print(user.name)\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password\nFROM users\nWHERE id<224 ORDER BY id\n()\ned\nwendy\nmary\nfred</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Counting	A										<section class="prog__container"><p>Query includes a convenience method for\\ncounting called count():</p><pre><code>sql>>> session.query(User).filter(User.name.like('%ed')).count()\nSELECT count(*) AS count_1\nFROM (SELECT users.id AS users_id,\n                users.name AS users_name,\n                users.fullname AS users_fullname,\n                users.password AS users_password\nFROM users\nWHERE users.name LIKE ?) AS anon_1\n('%ed',)\n2</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Using aliases	A										<section class="prog__container"><p>When querying across multiple tables, if the same table needs to be referenced\\nmore than once, SQL typically requires that the table be aliased with\\nanother name, so that it can be distinguished against other occurrences of\\nthat table. The Query supports this most\\nexplicitly using the aliased construct. Below we join to the Address\\nentity twice, to locate a user who has two distinct email addresses at the\\nsame time:</p><pre><code>>>> from sqlalchemy.orm import aliased\n>>> adalias1 = aliased(Address)\n>>> adalias2 = aliased(Address)\nsql>>> for username, email1, email2 in \\n...     session.query(User.name, adalias1.email_address, adalias2.email_address).\\n...     join(adalias1, User.addresses).\\n...     join(adalias2, User.addresses).\\n...     filter(adalias1.email_address=='jack@google.com').\\n...     filter(adalias2.email_address=='j25@yahoo.com'):\n...     print(username, email1, email2)\nSELECT users.name AS users_name,\n        addresses_1.email_address AS addresses_1_email_address,\n        addresses_2.email_address AS addresses_2_email_address\nFROM users JOIN addresses AS addresses_1\n        ON users.id = addresses_1.user_id\nJOIN addresses AS addresses_2\n        ON users.id = addresses_2.user_id\nWHERE addresses_1.email_address = ?\n        AND addresses_2.email_address = ?\n('jack@google.com', 'j25@yahoo.com')\njack jack@google.com j25@yahoo.com</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Using subqueries	A										<section class="prog__container"><p>The Query is suitable for generating statements\\nwhich can be used as subqueries. Suppose we wanted to load User objects\\nalong with a count of how many Address records each user has. The best way\\nto generate SQL like this is to get the count of addresses grouped by user\\nids, and JOIN to the parent. In this case we use a LEFT OUTER JOIN so that we\\nget rows back for those users who dont have any addresses, e.g.:</p><pre><code>SELECT users.*, adr_count.address_count FROM users LEFT OUTER JOIN\n    (SELECT user_id, count(*) AS address_count\n        FROM addresses GROUP BY user_id) AS adr_count\n    ON users.id=adr_count.user_id</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Selecting entities from subqueries	A										<section class="prog__container"><p>Above, we just selected a result that included a column from a subquery. What\\nif we wanted our subquery to map to an entity ? For this we use aliased()\\nto associate an alias of a mapped class to a subquery:</p><pre><code>sql>>> stmt = session.query(Address).\\n...                 filter(Address.email_address != 'j25@yahoo.com').\\n...                 subquery()\n>>> adalias = aliased(Address, stmt)\n>>> for user, address in session.query(User, adalias).\\n...         join(adalias, User.addresses):\n...     print(user)\n...     print(address)\nSELECT users.id AS users_id,\n            users.name AS users_name,\n            users.fullname AS users_fullname,\n            users.password AS users_password,\n            anon_1.id AS anon_1_id,\n            anon_1.email_address AS anon_1_email_address,\n            anon_1.user_id AS anon_1_user_id\nFROM users JOIN\n    (SELECT addresses.id AS id,\n            addresses.email_address AS email_address,\n            addresses.user_id AS user_id\n    FROM addresses\n    WHERE addresses.email_address != ?) AS anon_1\n    ON users.id = anon_1.user_id\n('j25@yahoo.com',)\n<User(name='jack', fullname='Jack Bean', password='gjffdd')>\n<Address(email_address='jack@google.com')></code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Using exists	A										<section class="prog__container"><p>The EXISTS keyword in SQL is a boolean operator which returns True if the\\ngiven expression contains any rows. It may be used in many scenarios in place\\nof joins, and is also useful for locating rows which do not have a\\ncorresponding row in a related table.There is an explicit EXISTS construct, which looks like this:</p><pre><code>>>> from sqlalchemy.sql import exists\n>>> stmt = exists().where(Address.user_id==User.id)\nsql>>> for name, in session.query(User.name).filter(stmt):\n...     print(name)\nSELECT users.name AS users_name\nFROM users\nWHERE EXISTS (SELECT *\nFROM addresses\nWHERE addresses.user_id = users.id)\n()\njack</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Common relationship operators	A										<section class="prog__container"><p>Heres all the operators which build on relationships - each one\\nis linked to its API documentation which includes full details on usage\\nand behavior:</p><pre><code>query.filter(Address.user == someuser)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Subquery load	A										<section class="prog__container"><p>In this case wed like to indicate that User.addresses should load eagerly.\\nA good choice for loading a set of objects as well as their related collections\\nis the orm.subqueryload() option, which emits a second SELECT statement\\nthat fully loads the collections associated with the results just loaded.\\nThe name subquery originates from the fact that the SELECT statement\\nconstructed directly via the Query is re-used, embedded as a subquery\\ninto a SELECT against the related table.   This is a little elaborate but\\nvery easy to use:</p><pre><code>>>> from sqlalchemy.orm import subqueryload\nsql>>> jack = session.query(User).\\n...                 options(subqueryload(User.addresses)).\\n...                 filter_by(name='jack').one()\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password\nFROM users\nWHERE users.name = ?\n('jack',)\nSELECT addresses.id AS addresses_id,\n        addresses.email_address AS addresses_email_address,\n        addresses.user_id AS addresses_user_id,\n        anon_1.users_id AS anon_1_users_id\nFROM (SELECT users.id AS users_id\n    FROM users WHERE users.name = ?) AS anon_1\nJOIN addresses ON anon_1.users_id = addresses.user_id\nORDER BY anon_1.users_id, addresses.id\n('jack',)\n>>> jack\n<User(name='jack', fullname='Jack Bean', password='gjffdd')>\n\n>>> jack.addresses\n[<Address(email_address='jack@google.com')>, <Address(email_address='j25@yahoo.com')>]</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Joined load	A										<section class="prog__container"><p>The other automatic eager loading function is more well known and is called\\norm.joinedload().   This style of loading emits a JOIN, by default\\na LEFT OUTER JOIN, so that the lead object as well as the related object\\nor collection is loaded in one step.   We illustrate loading the same\\naddresses collection in this way - note that even though the User.addresses\\ncollection on jack is actually populated right now, the query\\nwill emit the extra join regardless:</p><pre><code>>>> from sqlalchemy.orm import joinedload\n\nsql>>> jack = session.query(User).\\n...                        options(joinedload(User.addresses)).\\n...                        filter_by(name='jack').one()\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password,\n        addresses_1.id AS addresses_1_id,\n        addresses_1.email_address AS addresses_1_email_address,\n        addresses_1.user_id AS addresses_1_user_id\nFROM users\n    LEFT OUTER JOIN addresses AS addresses_1 ON users.id = addresses_1.user_id\nWHERE users.name = ? ORDER BY addresses_1.id\n('jack',)\n\n>>> jack\n<User(name='jack', fullname='Jack Bean', password='gjffdd')>\n\n>>> jack.addresses\n[<Address(email_address='jack@google.com')>, <Address(email_address='j25@yahoo.com')>]</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Explicit join + eagerload	A										<section class="prog__container"><p>A third style of eager loading is when we are constructing a JOIN explicitly in\\norder to locate the primary rows, and would like to additionally apply the extra\\ntable to a related object or collection on the primary object.   This feature\\nis supplied via the orm.contains_eager() function, and is most\\ntypically useful for pre-loading the many-to-one object on a query that needs\\nto filter on that same object.  Below we illustrate loading an Address\\nrow as well as the related User object, filtering on the User named\\njack and using orm.contains_eager() to apply the user columns to the Address.user\\nattribute:</p><pre><code>>>> from sqlalchemy.orm import contains_eager\nsql>>> jacks_addresses = session.query(Address).\\n...                             join(Address.user).\\n...                             filter(User.name=='jack').\\n...                             options(contains_eager(Address.user)).\\n...                             all()\nSELECT users.id AS users_id,\n        users.name AS users_name,\n        users.fullname AS users_fullname,\n        users.password AS users_password,\n        addresses.id AS addresses_id,\n        addresses.email_address AS addresses_email_address,\n        addresses.user_id AS addresses_user_id\nFROM addresses JOIN users ON users.id = addresses.user_id\nWHERE users.name = ?\n('jack',)\n\n>>> jacks_addresses\n[<Address(email_address='jack@google.com')>, <Address(email_address='j25@yahoo.com')>]\n\n>>> jacks_addresses[0].user\n<User(name='jack', fullname='Jack Bean', password='gjffdd')></code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
Configuring delete/delete-orphan cascade	A										<section class="prog__container"><p>We will configure cascade options on the User.addresses relationship\\nto change the behavior. While SQLAlchemy allows you to add new attributes and\\nrelationships to mappings at any point in time, in this case the existing\\nrelationship needs to be removed, so we need to tear down the mappings\\ncompletely and start again - well close the Session:</p><pre><code>>>> session.close()\nROLLBACK</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/tutorial.html
