properties.RelationshipProperty.mapper	A										<section class="prog__container"><pre><code>RelationshipProperty.mapper</code></pre><p>Return the targeted <code>Mapper</code> for this\n<code>RelationshipProperty</code>.</p><p>This is a lazy-initializing static attribute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.mapper
interfaces.MapperProperty.merge	A										<section class="prog__container"><pre><code>merge(session, source_state, source_dict, dest_state, dest_dict, load, _recursive, _resolve_conflict_map)</code></pre><p>Merge the attribute represented by this <code>MapperProperty</code>\nfrom source to destination object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.merge
properties.RelationshipProperty.Comparator.like	A										<section class="prog__container"><pre><code>like(other, escape=None)</code></pre>\ninherited from the like() method of ColumnOperators<p>Implement the <code>like</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p><p>E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.like("%foobar%"))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>optional escape character, renders the ESCAPE\nkeyword, e.g.:</p><ul><li><strong>other</strong> &#8211; expression to be compared</li><li><strong>escape</strong> &#8211; <p>optional escape character, renders the <code>ESCAPE</code>\nkeyword, e.g.:</p>\n<pre><code>somecolumn.like("foo/%bar", escape="/")\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.like
properties.RelationshipProperty.Comparator.between	A										<section class="prog__container"><pre><code>between(cleft, cright, symmetric=False)</code></pre>\ninherited from the between() method of ColumnOperators<p>Produce a <code>between()</code> clause against\nthe parent object, given the lower and upper range.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.between
attrs	A										<section class="prog__container"><pre><code>attrs</code></pre><p>Return a namespace representing each attribute on\nthe mapped object, including its current value\nand history.</p><p>The returned object is an instance of <code>AttributeState</code>.\nThis object allows inspection of the current data\nwithin an attribute as well as attribute history\nsince the last flush.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.attrs
InspectionAttrInfo	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.base.InspectionAttrInfo</code></pre><p>Bases: <code>sqlalchemy.orm.base.InspectionAttr</code></p><p>Adds the <code>.info</code> attribute to <code>InspectionAttr</code>.</p><p>The rationale for <code>InspectionAttr</code> vs. <code>InspectionAttrInfo</code>\nis that the former is compatible as a mixin for classes that specify\n<code>__slots__</code>; this is essentially an implementation artifact.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttrInfo
properties.ComparableProperty.__init__	A										<section class="prog__container"><pre><code>__init__(comparator_factory, descriptor=None, doc=None, info=None)</code></pre><p>Construct a new <code>ComparableProperty</code> object.</p><p>This constructor is mirrored as a public API function; see <code>comparable_property()</code> for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ComparableProperty.__init__
properties.ColumnProperty.extension_type	A										<section class="prog__container"><pre><code>ColumnProperty.extension_type = symbol('NOT_EXTENSION')</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.extension_type
init	D								*[[properties.ColumnProperty.init]], Called after all mappers are created to assemble relationships between mappers and perform other post-mapper-creation initialization steps. \n*[[interfaces.MapperProperty.init]], Called after all mappers are created to assemble relationships between mappers and perform other post-mapper-creation initialization steps. \n*[[properties.RelationshipProperty.init]], Called after all mappers are created to assemble relationships between mappers and perform other post-mapper-creation initialization steps. \n*[[descriptor_props.SynonymProperty.init]], Called after all mappers are created to assemble relationships between mappers and perform other post-mapper-creation initialization steps. \n*[[events.InstanceEvents.init]], Receive an instance when its constructor is called. \n
properties.RelationshipProperty.Comparator.contains	A										<section class="prog__container"><pre><code>contains(other, **kwargs)</code></pre><p>Return a simple expression that tests a collection for\ncontainment of a particular item.</p><p><code>contains()</code> is\nonly valid for a collection, i.e. a\n<code>relationship()</code> that implements\none-to-many or many-to-many with <code>uselist=True</code>.</p><p>When used in a simple one-to-many context, an\nexpression like:</p><pre><code>MyClass.contains(other)\n</code></pre><p>Produces a clause like:</p><pre><code>mytable.id == <some id>\n</code></pre><p>Where <code>None</code> is the value of the foreign key\nattribute on <code>other</code> which refers to the primary\nkey of its parent object. From this it follows that\n<code>contains()</code> is\nvery useful when used with simple one-to-many\noperations.</p><p>For many-to-many operations, the behavior of\n<code>contains()</code>\nhas more caveats. The association table will be\nrendered in the statement, producing an &#8220;implicit&#8221;\njoin, that is, includes multiple tables in the FROM\nclause which are equated in the WHERE clause:</p><pre><code>query(MyClass).filter(MyClass.contains(other))\n</code></pre><p>Produces a query like:</p><pre><code>SELECT * FROM my_table, my_association_table AS\nmy_association_table_1 WHERE\nmy_table.id = my_association_table_1.parent_id\nAND my_association_table_1.child_id = <some id>\n</code></pre><p>Where <code>None</code> would be the primary key of\n<code>other</code>. From the above, it is clear that\n<code>contains()</code>\nwill not work with many-to-many collections when\nused in queries that move beyond simple AND\nconjunctions, such as multiple\n<code>contains()</code>\nexpressions joined by OR. In such cases subqueries or\nexplicit &#8220;outer joins&#8221; will need to be used instead.\nSee <code>any()</code> for\na less-performant alternative using EXISTS, or refer\nto <code>Query.outerjoin()</code> as well as <code>Querying with Joins</code>\nfor more details on constructing outer joins.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains
attributes.QueryableAttribute.isnot	A										<section class="prog__container"><pre><code>isnot(other)</code></pre>\ninherited from the isnot() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Normally, <code>None</code> is generated automatically when comparing to a\nvalue of <code>None</code>, which resolves to <code>NULL</code>.  However, explicit\nusage of <code>None</code> may be desirable if comparing to boolean values\non certain platforms.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.isnot
interfaces.MapperProperty.post_instrument_class	A										<section class="prog__container"><pre><code>post_instrument_class(mapper)</code></pre><p>Perform instrumentation adjustments that need to occur\nafter init() has completed.</p><p>The given Mapper is the Mapper invoking the operation, which\nmay not be the same Mapper as self.parent in an inheritance\nscenario; however, Mapper will always at least be a sub-mapper of\nself.parent.</p><p>This method is typically used by StrategizedProperty, which delegates\nit to LoaderStrategy.init_class_attribute() to perform final setup\non the class-bound InstrumentedAttribute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.post_instrument_class
attributes.QueryableAttribute.in_	A										<section class="prog__container"><pre><code>in_(other)</code></pre>\ninherited from the in_() method of ColumnOperators<p>Implement the <code>in</code> operator.</p><p>In a column context, produces the clause <code>None</code>.\n&#8220;other&#8221; may be a tuple/list of column expressions,\nor a <code>select()</code> construct.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.in_
InstrumentedAttribute	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.attributes.InstrumentedAttribute(class_, key, impl=None, comparator=None, parententity=None, of_type=None)</code></pre><p>Bases: <code>sqlalchemy.orm.attributes.QueryableAttribute</code></p><p>Class bound instrumented attribute which adds basic\n<code>descriptor</code> methods.</p><p>See <code>QueryableAttribute</code> for a description of most features.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.InstrumentedAttribute
after_configured	A										<section class="prog__container"><pre><code>after_configured()</code></pre><p>Called after a series of mappers have been configured.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'after_configured')\ndef receive_after_configured():\n    "listen for the 'after_configured' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>The <code>MapperEvents.after_configured()</code> event is invoked\neach time the <code>orm.configure_mappers()</code> function is\ninvoked, after the function has completed its work.\n<code>orm.configure_mappers()</code> is typically invoked\nautomatically as mappings are first used, as well as each time\nnew mappers have been made available and new mapper use is\ndetected.</p><p>Contrast this event to the <code>MapperEvents.mapper_configured()</code>\nevent, which is called on a per-mapper basis while the configuration\noperation proceeds; unlike that event, when this event is invoked,\nall cross-configurations (e.g. backrefs) will also have been made\navailable for any mappers that were pending.\nAlso constrast to <code>MapperEvents.before_configured()</code>,\nwhich is invoked before the series of mappers has been configured.</p><p>This event can only be applied to the <code>Mapper</code> class\nor <code>mapper()</code> function, and not to individual mappings or\nmapped classes.  It is only invoked for all mappings as a whole:</p><pre><code>from sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, "after_configured")\ndef go():\n    # ...\n</code></pre><p>Theoretically this event is called once per\napplication, but is actually called any time new mappers\nhave been affected by a <code>orm.configure_mappers()</code>\ncall.   If new mappings are constructed after existing ones have\nalready been used, this event will likely be called again.  To ensure\nthat a particular event is only called once and no further, the\n<code>once=True</code> argument (new in 0.9.4) can be applied:</p><pre><code>from sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, "after_configured", once=True)\ndef go():\n    # ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.after_configured
interfaces.PropComparator.match	A										<section class="prog__container"><pre><code>match(other, **kwargs)</code></pre>\ninherited from the match() method of ColumnOperators<p>Implements a database-specific &#8216;match&#8217; operator.</p><p><code>match()</code> attempts to resolve to\na MATCH-like function or operator provided by the backend.\nExamples include:</p><ul><li>PostgreSQL - renders <code>x @@ to_tsquery(y)</code></li><li>MySQL - renders <code>MATCH (x) AGAINST (y IN BOOLEAN MODE)</code></li><li>Oracle - renders <code>CONTAINS(x, y)</code></li><li>other backends may provide special implementations.</li><li>Backends without any special implementation will emit\nthe operator as &#8220;MATCH&#8221;.  This is compatible with SQlite, for\nexample.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.match
detached_to_persistent	A										<section class="prog__container"><pre><code>detached_to_persistent(session, instance)</code></pre><p>Intercept the &#8220;detached to persistent&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'detached_to_persistent')\ndef receive_detached_to_persistent(session, instance):\n    "listen for the 'detached_to_persistent' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is a specialization of the\n<code>SessionEvents.after_attach()</code> event which is only invoked\nfor this specific transition.  It is invoked typically during the\n<code>Session.add()</code> call, as well as during the\n<code>Session.delete()</code> call if the object was not previously\nassociated with the\n<code>Session</code> (note that an object marked as &#8220;deleted&#8221; remains\nin the &#8220;persistent&#8221; state until the flush proceeds).</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; target <code>Session</code></li><li><strong>instance</strong> &#8211; the ORM-mapped instance being operated upon.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.detached_to_persistent
properties.ColumnProperty.Comparator.all_	A										<section class="prog__container"><pre><code>all_()</code></pre>\ninherited from the all_() method of ColumnOperators<p>Produce a <code>all_()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.all_
properties.ColumnProperty.__init__	A										<section class="prog__container"><pre><code>ColumnProperty.__init__(*columns, **kwargs)</code></pre><p>Construct a new <code>ColumnProperty</code> object.</p><p>This constructor is mirrored as a public API function; see <code>column_property()</code> for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.__init__
interfaces.PropComparator.any	A										<section class="prog__container"><pre><code>any(criterion=None, **kwargs)</code></pre><p>Return true if this collection contains any member that meets the\ngiven criterion.</p><p>The usual implementation of <code>any()</code> is\n<code>RelationshipProperty.Comparator.any()</code>.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>criterion</strong> &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.</li><li><strong>**kwargs</strong> &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.any
attributes.QueryableAttribute.notlike	A										<section class="prog__container"><pre><code>notlike(other, escape=None)</code></pre>\ninherited from the notlike() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.like()</code>, i.e. <code>~x.like(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.notlike
create_row_processor	D								*[[interfaces.MapperProperty.create_row_processor]], Produce row processing functions and append to the given set of populators lists. \n*[[descriptor_props.SynonymProperty.create_row_processor]], Produce row processing functions and append to the given set of populators lists. \n
session	A										<section class="prog__container"><pre><code>session</code></pre><p>Return the owning <code>Session</code> for this instance,\nor <code>None</code> if none available.</p><p>Note that the result here can in some cases be different\nfrom that of <code>None</code>; an object that&#8217;s been deleted\nwill report as not <code>None</code>, however if the transaction is\nstill in progress, this attribute will still refer to that session.\nOnly when the transaction is completed does the object become\nfully detached under normal circumstances.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.session
attributes.QueryableAttribute.distinct	A										<section class="prog__container"><pre><code>distinct()</code></pre>\ninherited from the distinct() method of ColumnOperators<p>Produce a <code>distinct()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.distinct
properties.ColumnProperty.Comparator.distinct	A										<section class="prog__container"><pre><code>distinct()</code></pre>\ninherited from the distinct() method of ColumnOperators<p>Produce a <code>distinct()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.distinct
properties.ColumnProperty.init	A										<section class="prog__container"><pre><code>ColumnProperty.init()</code></pre>\ninherited from the init() method of MapperProperty<p>Called after all mappers are created to assemble\nrelationships between mappers and perform other post-mapper-creation\ninitialization steps.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.init
attributes.QueryableAttribute.asc	A										<section class="prog__container"><pre><code>asc()</code></pre>\ninherited from the asc() method of ColumnOperators<p>Produce a <code>asc()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.asc
interfaces.PropComparator.ilike	A										<section class="prog__container"><pre><code>ilike(other, escape=None)</code></pre>\ninherited from the ilike() method of ColumnOperators<p>Implement the <code>ilike</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p><p>E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.ilike("%foobar%"))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>optional escape character, renders the ESCAPE\nkeyword, e.g.:</p><ul><li><strong>other</strong> &#8211; expression to be compared</li><li><strong>escape</strong> &#8211; <p>optional escape character, renders the <code>ESCAPE</code>\nkeyword, e.g.:</p>\n<pre><code>somecolumn.ilike("foo/%bar", escape="/")\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.ilike
after_update	A										<section class="prog__container"><pre><code>after_update(mapper, connection, target)</code></pre><p>Receive an object instance after an UPDATE statement\nis emitted corresponding to that instance.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'after_update')\ndef receive_after_update(mapper, connection, target):\n    "listen for the 'after_update' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to modify in-Python-only\nstate on the instance after an UPDATE occurs, as well\nas to emit additional SQL statements on the given\nconnection.</p><p>This method is called for all instances that are\nmarked as &#8220;dirty&#8221;, even those which have no net changes\nto their column-based attributes, and for which\nno UPDATE statement has proceeded. An object is marked\nas dirty when any of its column-based attributes have a\n&#8220;set attribute&#8221; operation called or when any of its\ncollections are modified. If, at update time, no\ncolumn-based attributes have any net changes, no UPDATE\nstatement will be issued. This means that an instance\nbeing sent to <code>after_update()</code> is\nnot a guarantee that an UPDATE statement has been\nissued.</p><p>To detect if the column-based attributes on the object have net\nchanges, and therefore resulted in an UPDATE statement, use\n<code>None</code>.</p><p>The event is often called for a batch of objects of the\nsame class after their UPDATE statements have been emitted at\nonce in a previous step. In the extremely rare case that\nthis is not desirable, the <code>mapper()</code> can be\nconfigured with <code>batch=False</code>, which will cause\nbatches of instances to be broken up into individual\n(and more poorly performing) event->persist->event\nsteps.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>mapper</strong> &#8211; the <code>Mapper</code> which is the target\nof this event.</li><li><strong>connection</strong> &#8211; the <code>Connection</code> being used to\nemit UPDATE statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.</li><li><strong>target</strong> &#8211; the mapped instance being persisted.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li></ul>\n\n<span class="prog__sub">Returns:</span><p>No return value is supported by this event.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.after_update
after_flush	A										<section class="prog__container"><pre><code>after_flush(session, flush_context)</code></pre><p>Execute after flush has completed, but before commit has been\ncalled.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_flush')\ndef receive_after_flush(session, flush_context):\n    "listen for the 'after_flush' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>Note that the session&#8217;s state is still in pre-flush, i.e. &#8216;new&#8217;,\n&#8216;dirty&#8217;, and &#8216;deleted&#8217; lists still show pre-flush state as well\nas the history settings on instance attributes.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; The target <code>Session</code>.</li><li><strong>flush_context</strong> &#8211; Internal <code>UOWTransaction</code> object\nwhich handles the details of the flush.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_flush
append	A										<section class="prog__container"><pre><code>append(target, value, initiator)</code></pre><p>Receive a collection append event.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'append')\ndef receive_append(target, value, initiator):\n    "listen for the 'append' event"\n\n    # ... (event handling logic) ...\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>An instance of attributes.Event\nrepresenting the initiation of the event.  May be modified\nfrom its original value by backref handlers in order to control\nchained event propagation.</p><p>Changed in version 0.9.0: the initiator argument is now\npassed as a attributes.Event object, and may be\nmodified by backref handlers within a chain of backref-linked\nevents.</p><ul><li><strong>target</strong> &#8211; the object instance receiving the event.\nIf the listener is registered with <code>raw=True</code>, this will\nbe the <code>InstanceState</code> object.</li><li><strong>value</strong> &#8211; the value being appended.  If this listener\nis registered with <code>retval=True</code>, the listener\nfunction must return this value, or a new value which\nreplaces it.</li><li><strong>initiator</strong> &#8211; <p>An instance of <code>attributes.Event</code>\nrepresenting the initiation of the event.  May be modified\nfrom its original value by backref handlers in order to control\nchained event propagation.</p>\n\n</li></ul>\n\n<span class="prog__sub">Returns:</span><p>if the event was registered with retval=True,\nthe given value, or a new effective value, should be returned.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.append
properties.ColumnProperty.Comparator.adapter	A										<section class="prog__container"><pre><code>adapter</code></pre>\ninherited from the adapter attribute of PropComparator<p>Produce a callable that adapts column expressions\nto suit an aliased version of this comparator.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.adapter
mapper_configured	A										<section class="prog__container"><pre><code>mapper_configured(mapper, class_)</code></pre><p>Called when a specific mapper has completed its own configuration\nwithin the scope of the <code>configure_mappers()</code> call.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'mapper_configured')\ndef receive_mapper_configured(mapper, class_):\n    "listen for the 'mapper_configured' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>The <code>MapperEvents.mapper_configured()</code> event is invoked\nfor each mapper that is encountered when the\n<code>orm.configure_mappers()</code> function proceeds through the current\nlist of not-yet-configured mappers.\n<code>orm.configure_mappers()</code> is typically invoked\nautomatically as mappings are first used, as well as each time\nnew mappers have been made available and new mapper use is\ndetected.</p><p>When the event is called, the mapper should be in its final\nstate, but not including backrefs that may be invoked from\nother mappers; they might still be pending within the\nconfiguration operation.    Bidirectional relationships that\nare instead configured via the\n<code>orm.relationship.back_populates</code> argument\nwill be fully available, since this style of relationship does not\nrely upon other possibly-not-configured mappers to know that they\nexist.</p><p>For an event that is guaranteed to have all mappers ready\nto go including backrefs that are defined only on other\nmappings, use the <code>MapperEvents.after_configured()</code>\nevent; this event invokes only after all known mappings have been\nfully configured.</p><p>The <code>MapperEvents.mapper_configured()</code> event, unlike\n<code>MapperEvents.before_configured()</code> or\n<code>MapperEvents.after_configured()</code>,\nis called for each mapper/class individually, and the mapper is\npassed to the event itself.  It also is called exactly once for\na particular mapper.  The event is therefore useful for\nconfigurational steps that benefit from being invoked just once\non a specific mapper basis, which don&#8217;t require that &#8220;backref&#8221;\nconfigurations are necessarily ready yet.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>mapper</strong> &#8211; the <code>Mapper</code> which is the target\nof this event.</li><li><strong>class_</strong> &#8211; the mapped class.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.mapper_configured
loaded_value	A										<section class="prog__container"><pre><code>loaded_value</code></pre><p>The current value of this attribute as loaded from the database.</p><p>If the value has not been loaded, or is otherwise not present\nin the object&#8217;s dictionary, returns NO_VALUE.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState.loaded_value
after_soft_rollback	A										<section class="prog__container"><pre><code>after_soft_rollback(session, previous_transaction)</code></pre><p>Execute after any rollback has occurred, including &#8220;soft&#8221;\nrollbacks that don&#8217;t actually emit at the DBAPI level.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_soft_rollback')\ndef receive_after_soft_rollback(session, previous_transaction):\n    "listen for the 'after_soft_rollback' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This corresponds to both nested and outer rollbacks, i.e.\nthe innermost rollback that calls the DBAPI&#8217;s\nrollback() method, as well as the enclosing rollback\ncalls that only pop themselves from the transaction stack.</p><p>The given <code>Session</code> can be used to invoke SQL and\n<code>Session.query()</code> operations after an outermost rollback\nby first checking the <code>Session.is_active</code> flag:</p><pre><code>@event.listens_for(Session, "after_soft_rollback")\ndef do_something(session, previous_transaction):\n    if session.is_active:\n        session.execute("select * from some_table")\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; The target <code>Session</code>.</li><li><strong>previous_transaction</strong> &#8211; The <code>SessionTransaction</code>\ntransactional marker object which was just closed.   The current\n<code>SessionTransaction</code> for the given <code>Session</code> is\navailable via the <code>Session.transaction</code> attribute.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_soft_rollback
nullsfirst	D								*[[properties.ColumnProperty.Comparator.nullsfirst]], Produce a nullsfirst() clause against the parent object. \n*[[interfaces.PropComparator.nullsfirst]], Produce a nullsfirst() clause against the parent object. \n*[[properties.RelationshipProperty.Comparator.nullsfirst]], Produce a nullsfirst() clause against the parent object. \n*[[attributes.QueryableAttribute.nullsfirst]], Produce a nullsfirst() clause against the parent object. \n
properties.ColumnProperty.Comparator.startswith	A										<section class="prog__container"><pre><code>startswith(other, **kwargs)</code></pre>\ninherited from the startswith() method of ColumnOperators<p>Implement the <code>startwith</code> operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith
base.InspectionAttr.is_property	A										<section class="prog__container"><pre><code>is_property = False</code></pre><p>True if this object is an instance of <code>MapperProperty</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_property
identity_key	A										<section class="prog__container"><pre><code>identity_key</code></pre><p>Return the identity key for the mapped object.</p><p>This is the key used to locate the object within\nthe <code>Session.identity_map</code> mapping.   It contains\nthe identity as returned by <code>identity</code> within it.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.identity_key
isnot_distinct_from	D								*[[properties.ColumnProperty.Comparator.isnot_distinct_from]], Implement the IS NOT DISTINCT FROM operator. \n*[[interfaces.PropComparator.isnot_distinct_from]], Implement the IS NOT DISTINCT FROM operator. \n*[[properties.RelationshipProperty.Comparator.isnot_distinct_from]], Implement the IS NOT DISTINCT FROM operator. \n*[[attributes.QueryableAttribute.isnot_distinct_from]], Implement the IS NOT DISTINCT FROM operator. \n
interfaces.PropComparator.any_	A										<section class="prog__container"><pre><code>any_()</code></pre>\ninherited from the any_() method of ColumnOperators<p>Produce a <code>any_()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.any_
MultipleResultsFound	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.MultipleResultsFound</code></pre><p>A single database result was required but more than one were found.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.MultipleResultsFound
items	A										<section class="prog__container"><pre><code>items() &#8594; list of D's (key, value) pairs, as 2-tuples</code></pre>\ninherited from the items() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.items
attributes.QueryableAttribute.match	A										<section class="prog__container"><pre><code>match(other, **kwargs)</code></pre>\ninherited from the match() method of ColumnOperators<p>Implements a database-specific &#8216;match&#8217; operator.</p><p><code>match()</code> attempts to resolve to\na MATCH-like function or operator provided by the backend.\nExamples include:</p><ul><li>PostgreSQL - renders <code>x @@ to_tsquery(y)</code></li><li>MySQL - renders <code>MATCH (x) AGAINST (y IN BOOLEAN MODE)</code></li><li>Oracle - renders <code>CONTAINS(x, y)</code></li><li>other backends may provide special implementations.</li><li>Backends without any special implementation will emit\nthe operator as &#8220;MATCH&#8221;.  This is compatible with SQlite, for\nexample.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.match
InspectionAttr	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.base.InspectionAttr</code></pre><p>A base class applied to all ORM objects that can be returned\nby the <code>inspect()</code> function.</p><p>The attributes defined here allow the usage of simple boolean\nchecks to test basic facts about the object returned.</p><p>While the boolean checks here are basically the same as using\nthe Python isinstance() function, the flags here can be used without\nthe need to import all of these classes, and also such that\nthe SQLAlchemy class system can change while leaving the flags\nhere intact for forwards-compatibility.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr
interfaces.PropComparator.in_	A										<section class="prog__container"><pre><code>in_(other)</code></pre>\ninherited from the in_() method of ColumnOperators<p>Implement the <code>in</code> operator.</p><p>In a column context, produces the clause <code>None</code>.\n&#8220;other&#8221; may be a tuple/list of column expressions,\nor a <code>select()</code> construct.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.in_
properties.RelationshipProperty.Comparator.desc	A										<section class="prog__container"><pre><code>desc()</code></pre>\ninherited from the desc() method of ColumnOperators<p>Produce a <code>desc()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.desc
base.InspectionAttr.extension_type	A										<section class="prog__container"><pre><code>extension_type = symbol('NOT_EXTENSION')</code></pre><p>The extension type, if any.\nDefaults to <code>interfaces.NOT_EXTENSION</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.extension_type
persistent_to_transient	A										<section class="prog__container"><pre><code>persistent_to_transient(session, instance)</code></pre><p>Intercept the &#8220;persistent to transient&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'persistent_to_transient')\ndef receive_persistent_to_transient(session, instance):\n    "listen for the 'persistent_to_transient' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This less common transition occurs when an pending object that has\nhas been flushed is evicted from the session; this can occur\nwhen the <code>Session.rollback()</code> method rolls back the transaction.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; target <code>Session</code></li><li><strong>instance</strong> &#8211; the ORM-mapped instance being operated upon.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.persistent_to_transient
after_delete	A										<section class="prog__container"><pre><code>after_delete(mapper, connection, target)</code></pre><p>Receive an object instance after a DELETE statement\nhas been emitted corresponding to that instance.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'after_delete')\ndef receive_after_delete(mapper, connection, target):\n    "listen for the 'after_delete' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to emit additional SQL statements on\nthe given connection as well as to perform application\nspecific bookkeeping related to a deletion event.</p><p>The event is often called for a batch of objects of the\nsame class after their DELETE statements have been emitted at\nonce in a previous step.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>mapper</strong> &#8211; the <code>Mapper</code> which is the target\nof this event.</li><li><strong>connection</strong> &#8211; the <code>Connection</code> being used to\nemit DELETE statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.</li><li><strong>target</strong> &#8211; the mapped instance being deleted.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li></ul>\n\n<span class="prog__sub">Returns:</span><p>No return value is supported by this event.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.after_delete
notin_	D								*[[properties.ColumnProperty.Comparator.notin_]], implement the NOT IN operator. \n*[[interfaces.PropComparator.notin_]], implement the NOT IN operator. \n*[[properties.RelationshipProperty.Comparator.notin_]], implement the NOT IN operator. \n*[[attributes.QueryableAttribute.notin_]], implement the NOT IN operator. \n
descriptor_props.SynonymProperty.post_instrument_class	A										<section class="prog__container"><pre><code>post_instrument_class(mapper)</code></pre>\ninherited from the post_instrument_class() method of MapperProperty<p>Perform instrumentation adjustments that need to occur\nafter init() has completed.</p><p>The given Mapper is the Mapper invoking the operation, which\nmay not be the same Mapper as self.parent in an inheritance\nscenario; however, Mapper will always at least be a sub-mapper of\nself.parent.</p><p>This method is typically used by StrategizedProperty, which delegates\nit to LoaderStrategy.init_class_attribute() to perform final setup\non the class-bound InstrumentedAttribute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.post_instrument_class
filter_states_for_dep	A										<section class="prog__container"><pre><code>filter_states_for_dep(dep, states)</code></pre><p>Filter the given list of InstanceStates to those relevant to the\ngiven DependencyProcessor.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.filter_states_for_dep
properties.ColumnProperty.Comparator.is_	A										<section class="prog__container"><pre><code>is_(other)</code></pre>\ninherited from the is_() method of ColumnOperators<p>Implement the <code>IS</code> operator.</p><p>Normally, <code>IS</code> is generated automatically when comparing to a\nvalue of <code>None</code>, which resolves to <code>NULL</code>.  However, explicit\nusage of <code>IS</code> may be desirable if comparing to boolean values\non certain platforms.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.is_
DetachedInstanceError	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.DetachedInstanceError</code></pre><p>An attempt to access unloaded attributes on a\nmapped instance that is detached.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.DetachedInstanceError
distinct	D								*[[properties.ColumnProperty.Comparator.distinct]], Produce a distinct() clause against the parent object. \n*[[interfaces.PropComparator.distinct]], Produce a distinct() clause against the parent object. \n*[[properties.RelationshipProperty.Comparator.distinct]], Produce a distinct() clause against the parent object. \n*[[attributes.QueryableAttribute.distinct]], Produce a distinct() clause against the parent object. \n
ObjectDereferencedError	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.ObjectDereferencedError</code></pre><p>An operation cannot complete due to an object being garbage\ncollected.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.ObjectDereferencedError
contains	D								*[[properties.ColumnProperty.Comparator.contains]], Implement the &#8216;contains&#8217; operator. \n*[[interfaces.PropComparator.contains]], Implement the &#8216;contains&#8217; operator. \n*[[properties.RelationshipProperty.Comparator.contains]], Return a simple expression that tests a collection for containment of a particular item. \n*[[attributes.QueryableAttribute.contains]], Implement the &#8216;contains&#8217; operator. \n
properties.ColumnProperty.Comparator.notilike	A										<section class="prog__container"><pre><code>notilike(other, escape=None)</code></pre>\ninherited from the notilike() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.ilike()</code>, i.e. <code>~x.ilike(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.notilike
properties.RelationshipProperty.Comparator.any_	A										<section class="prog__container"><pre><code>any_()</code></pre>\ninherited from the any_() method of ColumnOperators<p>Produce a <code>any_()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.any_
AttributeEvents	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.events.AttributeEvents</code></pre><p>Bases: <code>sqlalchemy.event.base.Events</code></p><p>Define events for object attributes.</p><p>These are typically defined on the class-bound descriptor for the\ntarget class.</p><p>e.g.:</p><pre><code>from sqlalchemy import event\n\ndef my_append_listener(target, value, initiator):\n    print "received append event for target: %s" % target\n\nevent.listen(MyClass.collection, 'append', my_append_listener)\n</code></pre><p>Listeners have the option to return a possibly modified version\nof the value, when the <code>retval=True</code> flag is passed\nto <code>listen()</code>:</p><pre><code>def validate_phone(target, value, oldvalue, initiator):\n    "Strip non-numeric characters from a phone number"\n\n    return re.sub(r'(?![0-9])', '', value)\n\n# setup listener on UserContact.phone attribute, instructing\n# it to use the return value\nlisten(UserContact.phone, 'set', validate_phone, retval=True)\n</code></pre><p>A validation function like the above can also raise an exception\nsuch as <code>ValueError</code> to halt the operation.</p><p>Several modifiers are available to the <code>listen()</code> function.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>active_history=False</strong> &#8211; When True, indicates that the\n&#8220;set&#8221; event would like to receive the &#8220;old&#8221; value being\nreplaced unconditionally, even if this requires firing off\ndatabase loads. Note that <code>active_history</code> can also be\nset directly via <code>column_property()</code> and\n<code>relationship()</code>.</li><li><strong>propagate=False</strong> &#8211; When True, the listener function will\nbe established not just for the class attribute given, but\nfor attributes of the same name on all current subclasses\nof that class, as well as all future subclasses of that\nclass, using an additional listener that listens for\ninstrumentation events.</li><li><strong>raw=False</strong> &#8211; When True, the &#8220;target&#8221; argument to the\nevent will be the <code>InstanceState</code> management\nobject, rather than the mapped instance itself.</li><li><strong>retval=False</strong> &#8211; when True, the user-defined event\nlistening must return the &#8220;value&#8221; argument from the\nfunction.  This gives the listening function the opportunity\nto change the value that is ultimately used for a &#8220;set&#8221;\nor &#8220;append&#8221; event.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents
interfaces.MapperProperty.setup	A										<section class="prog__container"><pre><code>setup(context, entity, path, adapter, **kwargs)</code></pre><p>Called by Query for the purposes of constructing a SQL statement.</p><p>Each MapperProperty associated with the target mapper processes the\nstatement referenced by the query context, adding columns and/or\ncriterion as appropriate.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.setup
after_bulk_update	A										<section class="prog__container"><pre><code>after_bulk_update(update_context)</code></pre><p>Execute after a bulk update operation to the session.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style (arguments as of 0.9)\n@event.listens_for(SomeSessionOrFactory, 'after_bulk_update')\ndef receive_after_bulk_update(update_context):\n    "listen for the 'after_bulk_update' event"\n\n    # ... (event handling logic) ...\n\n# legacy calling style (pre-0.9)\n@event.listens_for(SomeSessionOrFactory, 'after_bulk_update')\ndef receive_after_bulk_update(session, query, query_context, result):\n    "listen for the 'after_bulk_update' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This is called as a result of the <code>Query.update()</code> method.</p>\n\n<span class="prog__sub">Parameters:</span><p><strong>update_context</strong></p><p>an &#8220;update context&#8221; object which contains\ndetails about the update, including these attributes:</p><ul><li><code>session</code> - the <code>Session</code> involved</li><li><code>query</code> -the <code>Query</code> object that this update operation\nwas called upon.</li><li><code>context</code> The <code>QueryContext</code> object, corresponding\nto the invocation of an ORM query.</li><li><code>result</code> the <code>ResultProxy</code> returned as a result of the\nbulk UPDATE operation.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_bulk_update
properties.RelationshipProperty.Comparator.match	A										<section class="prog__container"><pre><code>match(other, **kwargs)</code></pre>\ninherited from the match() method of ColumnOperators<p>Implements a database-specific &#8216;match&#8217; operator.</p><p><code>match()</code> attempts to resolve to\na MATCH-like function or operator provided by the backend.\nExamples include:</p><ul><li>PostgreSQL - renders <code>x @@ to_tsquery(y)</code></li><li>MySQL - renders <code>MATCH (x) AGAINST (y IN BOOLEAN MODE)</code></li><li>Oracle - renders <code>CONTAINS(x, y)</code></li><li>other backends may provide special implementations.</li><li>Backends without any special implementation will emit\nthe operator as &#8220;MATCH&#8221;.  This is compatible with SQlite, for\nexample.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.match
transient	A										<section class="prog__container"><pre><code>transient</code></pre><p>Return true if the object is <code>transient</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.transient
of_type	D								*[[properties.ColumnProperty.Comparator.of_type]], Redefine this object in terms of a polymorphic subclass. \n*[[interfaces.PropComparator.of_type]], Redefine this object in terms of a polymorphic subclass. \n*[[properties.RelationshipProperty.Comparator.of_type]], Produce a construct that represents a particular &#8216;subtype&#8217; of attribute for the parent class. \n
attributes.QueryableAttribute.concat	A										<section class="prog__container"><pre><code>concat(other)</code></pre>\ninherited from the concat() method of ColumnOperators<p>Implement the &#8216;concat&#8217; operator.</p><p>In a column context, produces the clause <code>None</code>,\nor uses the <code>concat()</code> operator on MySQL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.concat
fromkeys	A										<section class="prog__container"><pre><code>fromkeys(S[, v]) &#8594; New dict with keys from S and values equal to v.</code></pre>\ninherited from the fromkeys() method of dict<p>v defaults to None.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.fromkeys
is_distinct_from	D								*[[properties.ColumnProperty.Comparator.is_distinct_from]], Implement the IS DISTINCT FROM operator. \n*[[interfaces.PropComparator.is_distinct_from]], Implement the IS DISTINCT FROM operator. \n*[[properties.RelationshipProperty.Comparator.is_distinct_from]], Implement the IS DISTINCT FROM operator. \n*[[attributes.QueryableAttribute.is_distinct_from]], Implement the IS DISTINCT FROM operator. \n
setup	D								*[[interfaces.MapperProperty.setup]], Called by Query for the purposes of constructing a SQL statement. \n*[[descriptor_props.SynonymProperty.setup]], Called by Query for the purposes of constructing a SQL statement. \n
values	A										<section class="prog__container"><pre><code>values() &#8594; list of D's values</code></pre>\ninherited from the values() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.values
detached	A										<section class="prog__container"><pre><code>detached</code></pre><p>Return true if the object is <code>detached</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.detached
pickle	A										<section class="prog__container"><pre><code>pickle(target, state_dict)</code></pre><p>Receive an object instance when its associated state is\nbeing pickled.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'pickle')\ndef receive_pickle(target, state_dict):\n    "listen for the 'pickle' event"\n\n    # ... (event handling logic) ...\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the mapped instance.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li><li><strong>state_dict</strong> &#8211; the dictionary returned by\n<code>InstanceState.__getstate__</code>, containing the state\nto be pickled.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.pickle
history	A										<section class="prog__container"><pre><code>history</code></pre><p>Return the current pre-flush change history for\nthis attribute, via the <code>History</code> interface.</p><p>This method will not emit loader callables if the value of the\nattribute is unloaded.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState.history
interfaces.PropComparator.distinct	A										<section class="prog__container"><pre><code>distinct()</code></pre>\ninherited from the distinct() method of ColumnOperators<p>Produce a <code>distinct()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.distinct
descriptor_props.SynonymProperty.cascade_iterator	A										<section class="prog__container"><pre><code>cascade_iterator(type_, state, visited_instances=None, halt_on=None)</code></pre>\ninherited from the cascade_iterator() method of MapperProperty<p>Iterate through instances related to the given instance for\na particular &#8216;cascade&#8217;, starting with this MapperProperty.</p><p>Return an iterator3-tuples (instance, mapper, state).</p><p>Note that the &#8216;cascade&#8217; collection on this MapperProperty is\nchecked first for the given type before cascade_iterator is called.</p><p>This method typically only applies to RelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.cascade_iterator
after_transaction_create	A										<section class="prog__container"><pre><code>after_transaction_create(session, transaction)</code></pre><p>Execute when a new <code>SessionTransaction</code> is created.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_transaction_create')\ndef receive_after_transaction_create(session, transaction):\n    "listen for the 'after_transaction_create' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event differs from <code>after_begin()</code>\nin that it occurs for each <code>SessionTransaction</code>\noverall, as opposed to when transactions are begun\non individual database connections.  It is also invoked\nfor nested transactions and subtransactions, and is always\nmatched by a corresponding\n<code>after_transaction_end()</code> event\n(assuming normal operation of the <code>Session</code>).</p>\n\n<span class="prog__sub">Parameters:</span><p>the target SessionTransaction.</p><p>To detect if this is the outermost\nSessionTransaction, as opposed to a &#8220;subtransaction&#8221; or a\nSAVEPOINT, test that the SessionTransaction.parent attribute\nis None:</p><p>To detect if the SessionTransaction is a SAVEPOINT, use the\nSessionTransaction.nested attribute:</p><ul><li><strong>session</strong> &#8211; the target <code>Session</code>.</li><li><strong>transaction</strong> &#8211; <p>the target <code>SessionTransaction</code>.</p>\n<p>To detect if this is the outermost\n<code>SessionTransaction</code>, as opposed to a &#8220;subtransaction&#8221; or a\nSAVEPOINT, test that the <code>SessionTransaction.parent</code> attribute\nis <code>None</code>:</p>\n<pre><code>@event.listens_for(session, "after_transaction_create")\ndef after_transaction_create(session, transaction):\n    if transaction.parent is None:\n        # work with top-level transaction\n</code></pre>\n<p>To detect if the <code>SessionTransaction</code> is a SAVEPOINT, use the\n<code>SessionTransaction.nested</code> attribute:</p>\n<pre><code>@event.listens_for(session, "after_transaction_create")\ndef after_transaction_create(session, transaction):\n    if transaction.nested:\n        # work with SAVEPOINT transaction\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_transaction_create
UnmappedInstanceError	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.UnmappedInstanceError(obj, msg=None)</code></pre><p>An mapping operation was requested for an unknown instance.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
class_attribute	D								*[[properties.ColumnProperty.class_attribute]], Return the class-bound descriptor corresponding to this MapperProperty. \n*[[interfaces.MapperProperty.class_attribute]], Return the class-bound descriptor corresponding to this MapperProperty. \n*[[properties.RelationshipProperty.class_attribute]], Return the class-bound descriptor corresponding to this MapperProperty. \n*[[descriptor_props.SynonymProperty.class_attribute]], Return the class-bound descriptor corresponding to this MapperProperty. \n
properties.ColumnProperty.Comparator.concat	A										<section class="prog__container"><pre><code>concat(other)</code></pre>\ninherited from the concat() method of ColumnOperators<p>Implement the &#8216;concat&#8217; operator.</p><p>In a column context, produces the clause <code>None</code>,\nor uses the <code>concat()</code> operator on MySQL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.concat
descriptor_props.SynonymProperty.__init__	A										<section class="prog__container"><pre><code>__init__(name, map_column=None, descriptor=None, comparator_factory=None, doc=None, info=None)</code></pre><p>Construct a new <code>SynonymProperty</code> object.</p><p>This constructor is mirrored as a public API function; see <code>synonym()</code> for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.__init__
properties.RelationshipProperty.Comparator	A										<section class="prog__container"><pre><code>class Comparator(prop, parentmapper, adapt_to_entity=None, of_type=None)</code></pre><p>Bases: <code>sqlalchemy.orm.interfaces.PropComparator</code></p><p>Produce boolean, comparison, and other operators for\n<code>RelationshipProperty</code> attributes.</p><p>See the documentation for <code>PropComparator</code> for a brief\noverview of ORM level operator definition.</p><p>See also:</p><p><code>PropComparator</code></p><p><code>ColumnProperty.Comparator</code></p><p><code>ColumnOperators</code></p><p><code>Redefining and Creating New Operators</code></p><p><code>TypeEngine.comparator_factory</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator
after_begin	A										<section class="prog__container"><pre><code>after_begin(session, transaction, connection)</code></pre><p>Execute after a transaction is begun on a connection</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_begin')\ndef receive_after_begin(session, transaction, connection):\n    "listen for the 'after_begin' event"\n\n    # ... (event handling logic) ...\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; The target <code>Session</code>.</li><li><strong>transaction</strong> &#8211; The <code>SessionTransaction</code>.</li><li><strong>connection</strong> &#8211; The <code>Connection</code> object\nwhich will be used for SQL statements.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_begin
properties.RelationshipProperty.Comparator.all_	A										<section class="prog__container"><pre><code>all_()</code></pre>\ninherited from the all_() method of ColumnOperators<p>Produce a <code>all_()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.all_
interfaces.PropComparator.desc	A										<section class="prog__container"><pre><code>desc()</code></pre>\ninherited from the desc() method of ColumnOperators<p>Produce a <code>desc()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.desc
UnmappedError	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.UnmappedError</code></pre><p>Base for exceptions that involve expected mappings not present.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.UnmappedError
properties.ColumnProperty.Comparator.contains	A										<section class="prog__container"><pre><code>contains(other, **kwargs)</code></pre>\ninherited from the contains() method of ColumnOperators<p>Implement the &#8216;contains&#8217; operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.contains
class_uninstrument	A										<section class="prog__container"><pre><code>class_uninstrument(cls)</code></pre><p>Called before the given class is uninstrumented.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeBaseClass, 'class_uninstrument')\ndef receive_class_uninstrument(cls):\n    "listen for the 'class_uninstrument' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>To get at the <code>ClassManager</code>, use\n<code>manager_of_class()</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstrumentationEvents.class_uninstrument
properties.ColumnProperty.Comparator.collate	A										<section class="prog__container"><pre><code>collate(collation)</code></pre>\ninherited from the collate() method of ColumnOperators<p>Produce a <code>collate()</code> clause against\nthe parent object, given the collation string.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.collate
is_instance	A										<section class="prog__container"><pre><code>is_instance = False</code></pre><p>True if this object is an instance of <code>InstanceState</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_instance
persistent_to_detached	A										<section class="prog__container"><pre><code>persistent_to_detached(session, instance)</code></pre><p>Intercept the &#8220;persistent to detached&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'persistent_to_detached')\ndef receive_persistent_to_detached(session, instance):\n    "listen for the 'persistent_to_detached' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked when a persistent object is evicted\nfrom the session.  There are many conditions that cause this\nto happen, including:</p><ul><li>using a method such as <code>Session.expunge()</code>\nor <code>Session.close()</code></li><li>Calling the <code>Session.rollback()</code> method, when the object\nwas part of an INSERT statement for that session&#8217;s transaction</li></ul>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; target <code>Session</code></li><li><strong>instance</strong> &#8211; the ORM-mapped instance being operated upon.</li><li><strong>deleted</strong> &#8211; boolean.  If True, indicates this object moved\nto the detached state because it was marked as deleted and flushed.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.persistent_to_detached
attributes.QueryableAttribute.all_	A										<section class="prog__container"><pre><code>all_()</code></pre>\ninherited from the all_() method of ColumnOperators<p>Produce a <code>all_()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.all_
is_mapper	A										<section class="prog__container"><pre><code>is_mapper = False</code></pre><p>True if this object is an instance of <code>Mapper</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_mapper
before_compile	A										<section class="prog__container"><pre><code>before_compile(query)</code></pre><p>Receive the <code>Query</code> object before it is composed into a\ncore <code>Select</code> object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeQuery, 'before_compile')\ndef receive_before_compile(query):\n    "listen for the 'before_compile' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is intended to allow changes to the query given:</p><pre><code>@event.listens_for(Query, "before_compile", retval=True)\ndef no_deleted(query):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n    return query\n</code></pre><p>The event should normally be listened with the <code>retval=True</code>\nparameter set, so that the modified query may be returned.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.QueryEvents.before_compile
interfaces.PropComparator.between	A										<section class="prog__container"><pre><code>between(cleft, cright, symmetric=False)</code></pre>\ninherited from the between() method of ColumnOperators<p>Produce a <code>between()</code> clause against\nthe parent object, given the lower and upper range.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.between
before_insert	A										<section class="prog__container"><pre><code>before_insert(mapper, connection, target)</code></pre><p>Receive an object instance before an INSERT statement\nis emitted corresponding to that instance.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'before_insert')\ndef receive_before_insert(mapper, connection, target):\n    "listen for the 'before_insert' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to modify local, non-object related\nattributes on the instance before an INSERT occurs, as well\nas to emit additional SQL statements on the given\nconnection.</p><p>The event is often called for a batch of objects of the\nsame class before their INSERT statements are emitted at\nonce in a later step. In the extremely rare case that\nthis is not desirable, the <code>mapper()</code> can be\nconfigured with <code>batch=False</code>, which will cause\nbatches of instances to be broken up into individual\n(and more poorly performing) event->persist->event\nsteps.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>mapper</strong> &#8211; the <code>Mapper</code> which is the target\nof this event.</li><li><strong>connection</strong> &#8211; the <code>Connection</code> being used to\nemit INSERT statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.</li><li><strong>target</strong> &#8211; the mapped instance being persisted.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li></ul>\n\n<span class="prog__sub">Returns:</span><p>No return value is supported by this event.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.before_insert
cascade	D								*[[interfaces.MapperProperty.cascade]], The set of &#8216;cascade&#8217; attribute names. \n*[[properties.RelationshipProperty.cascade]], Return the current cascade setting for this RelationshipProperty. \n
callables	A										<section class="prog__container"><pre><code>callables = ()</code></pre><p>A namespace where a per-state loader callable can be associated.</p><p>In SQLAlchemy 1.0, this is only used for lazy loaders / deferred\nloaders that were set up via query option.</p><p>Previously, callables was used also to indicate expired attributes\nby storing a link to the InstanceState itself in this dictionary.\nThis role is now handled by the expired_attributes set.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.callables
interfaces.PropComparator.of_type	A										<section class="prog__container"><pre><code>of_type(class_)</code></pre><p>Redefine this object in terms of a polymorphic subclass.</p><p>Returns a new PropComparator from which further criterion can be\nevaluated.</p><p>e.g.:</p><pre><code>query.join(Company.employees.of_type(Engineer)).\\n   filter(Engineer.name=='foo')\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p><strong>class_</strong></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.of_type
operate	D								*[[interfaces.PropComparator.operate]], Operate on an argument. \n*[[properties.RelationshipProperty.Comparator.operate]], Operate on an argument. \n
interfaces.PropComparator.startswith	A										<section class="prog__container"><pre><code>startswith(other, **kwargs)</code></pre>\ninherited from the startswith() method of ColumnOperators<p>Implement the <code>startwith</code> operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.startswith
descriptor_props.CompositeProperty.do_init	A										<section class="prog__container"><pre><code>CompositeProperty.do_init()</code></pre><p>Initialization which occurs after the <code>CompositeProperty</code>\nhas been associated with its parent mapper.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty.do_init
instrumentation.ClassManager.__lt__	A										<section class="prog__container"><pre><code>__lt__</code></pre>\ninherited from the __lt__ attribute of dict<p>x.__lt__(y) <==> x<y</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.__lt__
properties.ColumnProperty.Comparator.adapt_to_entity	A										<section class="prog__container"><pre><code>adapt_to_entity(adapt_to_entity)</code></pre>\ninherited from the adapt_to_entity() method of PropComparator<p>Return a copy of this PropComparator which will use the given\n<code>AliasedInsp</code> to produce corresponding expressions.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.adapt_to_entity
iteritems	A										<section class="prog__container"><pre><code>iteritems() &#8594; an iterator over the (key, value) items of D</code></pre>\ninherited from the iteritems() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.iteritems
UOWTransaction	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.session.UOWTransaction(session)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction
properties.RelationshipProperty.Comparator.collate	A										<section class="prog__container"><pre><code>collate(collation)</code></pre>\ninherited from the collate() method of ColumnOperators<p>Produce a <code>collate()</code> clause against\nthe parent object, given the collation string.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.collate
all_	D								*[[properties.ColumnProperty.Comparator.all_]], Produce a all_() clause against the parent object. \n*[[interfaces.PropComparator.all_]], Produce a all_() clause against the parent object. \n*[[properties.RelationshipProperty.Comparator.all_]], Produce a all_() clause against the parent object. \n*[[attributes.QueryableAttribute.all_]], Produce a all_() clause against the parent object. \n
properties.RelationshipProperty.Comparator.asc	A										<section class="prog__container"><pre><code>asc()</code></pre>\ninherited from the asc() method of ColumnOperators<p>Produce a <code>asc()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.asc
loaded_as_persistent	A										<section class="prog__container"><pre><code>loaded_as_persistent(session, instance)</code></pre><p>Intercept the &#8220;loaded as persistent&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'loaded_as_persistent')\ndef receive_loaded_as_persistent(session, instance):\n    "listen for the 'loaded_as_persistent' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked within the ORM loading process, and is invoked\nvery similarly to the <code>InstanceEvents.load()</code> event.  However,\nthe event here is linkable to a <code>Session</code> class or instance,\nrather than to a mapper or class hierarchy, and integrates\nwith the other session lifecycle events smoothly.  The object\nis guaranteed to be present in the session&#8217;s identity map when\nthis event is called.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; target <code>Session</code></li><li><strong>instance</strong> &#8211; the ORM-mapped instance being operated upon.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.loaded_as_persistent
dispose	A										<section class="prog__container"><pre><code>dispose()</code></pre><p>Dissasociate this manager from its class.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.dispose
interfaces.PropComparator.notlike	A										<section class="prog__container"><pre><code>notlike(other, escape=None)</code></pre>\ninherited from the notlike() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.like()</code>, i.e. <code>~x.like(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.notlike
descriptor_props.SynonymProperty.merge	A										<section class="prog__container"><pre><code>merge(session, source_state, source_dict, dest_state, dest_dict, load, _recursive, _resolve_conflict_map)</code></pre>\ninherited from the merge() method of MapperProperty<p>Merge the attribute represented by this <code>MapperProperty</code>\nfrom source to destination object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.merge
interfaces.PropComparator.all_	A										<section class="prog__container"><pre><code>all_()</code></pre>\ninherited from the all_() method of ColumnOperators<p>Produce a <code>all_()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.all_
pending	A										<section class="prog__container"><pre><code>pending</code></pre><p>Return true if the object is <code>pending</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.pending
properties.RelationshipProperty.Comparator.isnot_distinct_from	A										<section class="prog__container"><pre><code>isnot_distinct_from(other)</code></pre>\ninherited from the isnot_distinct_from() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Renders &#8220;a IS NOT DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS b&#8221;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.isnot_distinct_from
after_attach	A										<section class="prog__container"><pre><code>after_attach(session, instance)</code></pre><p>Execute after an instance is attached to a session.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_attach')\ndef receive_after_attach(session, instance):\n    "listen for the 'after_attach' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This is called after an add, delete or merge.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_attach
adapt_to_entity	D								*[[properties.ColumnProperty.Comparator.adapt_to_entity]], Return a copy of this PropComparator which will use the given AliasedInsp to produce corresponding expressions. \n*[[interfaces.PropComparator.adapt_to_entity]], Return a copy of this PropComparator which will use the given AliasedInsp to produce corresponding expressions. \n
events.MapperEvents.instrument_class	A										<section class="prog__container"><pre><code>instrument_class(mapper, class_)</code></pre><p>Receive a class when the mapper is first constructed,\nbefore instrumentation is applied to the mapped class.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'instrument_class')\ndef receive_instrument_class(mapper, class_):\n    "listen for the 'instrument_class' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is the earliest phase of mapper construction.\nMost attributes of the mapper are not yet initialized.</p><p>This listener can either be applied to the <code>Mapper</code>\nclass overall, or to any un-mapped class which serves as a base\nfor classes that will be mapped (using the <code>propagate=True</code> flag):</p><pre><code>Base = declarative_base()\n\n@event.listens_for(Base, "instrument_class", propagate=True)\ndef on_new_class(mapper, cls_):\n    " ... "\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>mapper</strong> &#8211; the <code>Mapper</code> which is the target\nof this event.</li><li><strong>class_</strong> &#8211; the mapped class.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.instrument_class
iterkeys	A										<section class="prog__container"><pre><code>iterkeys() &#8594; an iterator over the keys of D</code></pre>\ninherited from the iterkeys() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.iterkeys
properties.RelationshipProperty.Comparator.startswith	A										<section class="prog__container"><pre><code>startswith(other, **kwargs)</code></pre>\ninherited from the startswith() method of ColumnOperators<p>Implement the <code>startwith</code> operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith
unregister	A										<section class="prog__container"><pre><code>unregister()</code></pre><p>remove all instrumentation established by this ClassManager.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.unregister
properties.ColumnProperty.Comparator.ilike	A										<section class="prog__container"><pre><code>ilike(other, escape=None)</code></pre>\ninherited from the ilike() method of ColumnOperators<p>Implement the <code>ilike</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p><p>E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.ilike("%foobar%"))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>optional escape character, renders the ESCAPE\nkeyword, e.g.:</p><ul><li><strong>other</strong> &#8211; expression to be compared</li><li><strong>escape</strong> &#8211; <p>optional escape character, renders the <code>ESCAPE</code>\nkeyword, e.g.:</p>\n<pre><code>somecolumn.ilike("foo/%bar", escape="/")\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike
refresh	A										<section class="prog__container"><pre><code>refresh(target, context, attrs)</code></pre><p>Receive an object instance after one or more attributes have\nbeen refreshed from a query.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'refresh')\ndef receive_refresh(target, context, attrs):\n    "listen for the 'refresh' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>Contrast this to the <code>InstanceEvents.load()</code> method, which\nis invoked when the object is first loaded from a query.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the mapped instance.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li><li><strong>context</strong> &#8211; the <code>QueryContext</code> corresponding to the\ncurrent <code>Query</code> in progress.</li><li><strong>attrs</strong> &#8211; sequence of attribute names which\nwere populated, or None if all column-mapped, non-deferred\nattributes were populated.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.refresh
merge	D								*[[interfaces.MapperProperty.merge]], Merge the attribute represented by this MapperProperty from source to destination object. \n*[[descriptor_props.SynonymProperty.merge]], Merge the attribute represented by this MapperProperty from source to destination object. \n
properties.ColumnProperty.Comparator.any_	A										<section class="prog__container"><pre><code>any_()</code></pre>\ninherited from the any_() method of ColumnOperators<p>Produce a <code>any_()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.any_
Event	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.attributes.Event(attribute_impl, op)</code></pre><p>A token propagated throughout the course of a chain of attribute\nevents.</p><p>Serves as an indicator of the source of the event and also provides\na means of controlling propagation across a chain of attribute\noperations.</p><p>The <code>Event</code> object is sent as the <code>initiator</code> argument\nwhen dealing with the <code>AttributeEvents.append()</code>,\n<code>AttributeEvents.set()</code>,\nand <code>AttributeEvents.remove()</code> events.</p><p>The <code>Event</code> object is currently interpreted by the backref\nevent handlers, and is used to control the propagation of operations\nacross two mutually-dependent attributes.</p>\n\n<span class="prog__sub">Variables:</span><ul><li> &#8211; The <code>AttributeImpl</code> which is the current event\ninitiator.</li><li> &#8211; The symbol <code>OP_APPEND</code>, <code>OP_REMOVE</code> or\n<code>OP_REPLACE</code>, indicating the source operation.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.Event
unloaded	A										<section class="prog__container"><pre><code>unloaded</code></pre><p>Return the set of keys which do not have a loaded value.</p><p>This includes expired attributes and any other attribute that\nwas never populated or modified.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.unloaded
was_already_deleted	A										<section class="prog__container"><pre><code>was_already_deleted(state)</code></pre><p>return true if the given state is expired and was deleted\npreviously.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.was_already_deleted
has_identity	A										<section class="prog__container"><pre><code>has_identity</code></pre><p>Return <code>True</code> if this object has an identity key.</p><p>This should always have the same value as the\nexpression <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.has_identity
state.InstanceState.mapper	A										<section class="prog__container"><pre><code>mapper</code></pre><p>Return the <code>Mapper</code> used for this mapepd object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.mapper
ComparableProperty	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.properties.ComparableProperty(comparator_factory, descriptor=None, doc=None, info=None)</code></pre><p>Bases: <code>sqlalchemy.orm.descriptor_props.DescriptorProperty</code></p><p>Instruments a Python property for use in query expressions.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ComparableProperty
viewkeys	A										<section class="prog__container"><pre><code>viewkeys() &#8594; a set-like object providing a view on D's keys</code></pre>\ninherited from the viewkeys() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.viewkeys
is_selectable	A										<section class="prog__container"><pre><code>is_selectable = False</code></pre><p>Return True if this object is an instance of <code>Selectable</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_selectable
init_scalar	A										<section class="prog__container"><pre><code>init_scalar(target, value, dict_)</code></pre><p>Receive a scalar &#8220;init&#8221; event.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'init_scalar')\ndef receive_init_scalar(target, value, dict_):\n    "listen for the 'init_scalar' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked when an uninitialized, unpersisted scalar\nattribute is accessed.  A value of <code>None</code> is typically returned\nin this case; no changes are made to the object&#8217;s state.</p><p>The event handler can alter this behavior in two ways.\nOne is that a value other than <code>None</code> may be returned.  The other\nis that the value may be established as part of the object&#8217;s state,\nwhich will also have the effect that it is persisted.</p><p>Typical use is to establish a specific default value of an attribute\nupon access:</p><pre><code>SOME_CONSTANT = 3.1415926\n\n@event.listens_for(\n    MyClass.some_attribute, "init_scalar",\n    retval=True, propagate=True)\ndef _init_some_attribute(target, dict_, value):\n    dict_['some_attribute'] = SOME_CONSTANT\n    return SOME_CONSTANT\n</code></pre><p>Above, we initialize the attribute <code>MyClass.some_attribute</code> to the\nvalue of <code>SOME_CONSTANT</code>.   The above code includes the following\nfeatures:</p><ul><li>By setting the value <code>SOME_CONSTANT</code> in the given <code>dict_</code>,\nwe indicate that the value is to be persisted to the database.\n<strong>The given value is only persisted to the database if we\nexplicitly associate it with the object</strong>.  The <code>dict_</code> given\nis the <code>__dict__</code> element of the mapped object, assuming the\ndefault attribute instrumentation system is in place.</li><li>By establishing the <code>retval=True</code> flag, the value we return\nfrom the function will be returned by the attribute getter.\nWithout this flag, the event is assumed to be a passive observer\nand the return value of our function is ignored.</li><li>The <code>propagate=True</code> flag is significant if the mapped class\nincludes inheriting subclasses, which would also make use of this\nevent listener.  Without this flag, an inheriting subclass will\nnot use our event handler.</li></ul><p>When we establish the value in the given dictionary, the value will\nbe used in the INSERT statement established by the unit of work.\nNormally, the default returned value of <code>None</code> is not established as\npart of the object, to avoid the issue of mutations occurring to the\nobject in response to a normally passive &#8220;get&#8221; operation, and also\nsidesteps the issue of whether or not the <code>AttributeEvents.set()</code>\nevent should be awkwardly fired off during an attribute access\noperation.  This does not impact the INSERT operation since the\n<code>None</code> value matches the value of <code>NULL</code> that goes into the\ndatabase in any case; note that <code>None</code> is skipped during the INSERT\nto ensure that column and SQL-level default functions can fire off.</p><p>The attribute set event <code>AttributeEvents.set()</code> as well as the\nrelated validation feature provided by <code>orm.validates</code> is\nnot invoked when we apply our value to the given <code>dict_</code>.  To\nhave these events to invoke in response to our newly generated\nvalue, apply the value to the given object as a normal attribute\nset operation:</p><pre><code>SOME_CONSTANT = 3.1415926\n\n@event.listens_for(\n    MyClass.some_attribute, "init_scalar",\n    retval=True, propagate=True)\ndef _init_some_attribute(target, dict_, value):\n    # will also fire off attribute set events\n    target.some_attribute = SOME_CONSTANT\n    return SOME_CONSTANT\n</code></pre><p>When multiple listeners are set up, the generation of the value\nis &#8220;chained&#8221; from one listener to the next by passing the value\nreturned by the previous listener that specifies <code>retval=True</code>\nas the <code>value</code> argument of the next listener.</p><p>The <code>AttributeEvents.init_scalar()</code> event may be used to\nextract values from the default values and/or callables established on\nmapped <code>Column</code> objects.  See the &#8220;active column defaults&#8221;\nexample in <code>Attribute Instrumentation</code> for an example of this.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the object instance receiving the event.\nIf the listener is registered with <code>raw=True</code>, this will\nbe the <code>InstanceState</code> object.</li><li><strong>value</strong> &#8211; the value that is to be returned before this event\nlistener were invoked.  This value begins as the value <code>None</code>,\nhowever will be the return value of the previous event handler\nfunction if multiple listeners are present.</li><li><strong>dict_</strong> &#8211; the attribute dictionary of this mapped object.\nThis is normally the <code>__dict__</code> of the object, but in all cases\nrepresents the destination that the attribute system uses to get\nat the actual value of this attribute.  Placing the value in this\ndictionary has the effect that the value will be used in the\nINSERT statement generated by the unit of work.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.init_scalar
is_property	D								*[[base.InspectionAttr.is_property]], True if this object is an instance of MapperProperty. \n*[[interfaces.MapperProperty.is_property]], Part of the InspectionAttr interface; states this object is a mapper property. \n
collate	D								*[[properties.ColumnProperty.Comparator.collate]], Produce a collate() clause against the parent object, given the collation string. \n*[[interfaces.PropComparator.collate]], Produce a collate() clause against the parent object, given the collation string. \n*[[properties.RelationshipProperty.Comparator.collate]], Produce a collate() clause against the parent object, given the collation string. \n*[[attributes.QueryableAttribute.collate]], Produce a collate() clause against the parent object, given the collation string. \n
interfaces.PropComparator.__le__	A										<section class="prog__container"><pre><code>__le__(other)</code></pre>\ninherited from the __le__() method of ColumnOperators<p>Implement the <code><=</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.__le__
properties.RelationshipProperty.Comparator.operate	A										<section class="prog__container"><pre><code>operate(op, *other, **kwargs)</code></pre>\ninherited from the operate() method of Operators<p>Operate on an argument.</p><p>This is the lowest level of operation, raises\n<code>NotImplementedError</code> by default.</p><p>Overriding this on a subclass can allow common\nbehavior to be applied to all operations.\nFor example, overriding <code>ColumnOperators</code>\nto apply <code>func.lower()</code> to the left and right\nside:</p><pre><code>class MyComparator(ColumnOperators):\n    def operate(self, op, other):\n        return op(func.lower(self), func.lower(other))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>op</strong> &#8211; Operator callable.</li><li><strong>*other</strong> &#8211; the &#8216;other&#8217; side of the operation. Will\nbe a single scalar for most operations.</li><li><strong>**kwargs</strong> &#8211; modifiers.  These may be passed by special\noperators such as <code>ColumnOperators.contains()</code>.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.operate
is_	D								*[[properties.ColumnProperty.Comparator.is_]], Implement the IS operator. \n*[[interfaces.PropComparator.is_]], Implement the IS operator. \n*[[properties.RelationshipProperty.Comparator.is_]], Implement the IS operator. \n*[[attributes.QueryableAttribute.is_]], Implement the IS operator. \n
properties.ColumnProperty.Comparator.nullslast	A										<section class="prog__container"><pre><code>nullslast()</code></pre>\ninherited from the nullslast() method of ColumnOperators<p>Produce a <code>nullslast()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.nullslast
asc	D								*[[properties.ColumnProperty.Comparator.asc]], Produce a asc() clause against the parent object. \n*[[interfaces.PropComparator.asc]], Produce a asc() clause against the parent object. \n*[[properties.RelationshipProperty.Comparator.asc]], Produce a asc() clause against the parent object. \n*[[attributes.QueryableAttribute.asc]], Produce a asc() clause against the parent object. \n
check_modified	A										<section class="prog__container"><pre><code>check_modified()</code></pre><p>return True if any InstanceStates present have been marked\nas &#8216;modified&#8217;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.identity.IdentityMap.check_modified
pending_to_transient	A										<section class="prog__container"><pre><code>pending_to_transient(session, instance)</code></pre><p>Intercept the &#8220;pending to transient&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'pending_to_transient')\ndef receive_pending_to_transient(session, instance):\n    "listen for the 'pending_to_transient' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This less common transition occurs when an pending object that has\nnot been flushed is evicted from the session; this can occur\nwhen the <code>Session.rollback()</code> method rolls back the transaction,\nor when the <code>Session.expunge()</code> method is used.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; target <code>Session</code></li><li><strong>instance</strong> &#8211; the ORM-mapped instance being operated upon.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.pending_to_transient
properties.RelationshipProperty.set_parent	A										<section class="prog__container"><pre><code>RelationshipProperty.set_parent(parent, init)</code></pre>\ninherited from the set_parent() method of MapperProperty<p>Set the parent mapper that references this MapperProperty.</p><p>This method is overridden by some subclasses to perform extra\nsetup when the mapper is first known.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.set_parent
setdefault	A										<section class="prog__container"><pre><code>setdefault(k[, d]) &#8594; D.get(k,d), also set D[k]=d if k not in D</code></pre>\ninherited from the setdefault() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.setdefault
ColumnProperty	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.properties.ColumnProperty(*columns, **kwargs)</code></pre><p>Bases: <code>sqlalchemy.orm.interfaces.StrategizedProperty</code></p><p>Describes an object attribute that corresponds to a table column.</p><p>Public constructor is the <code>orm.column_property()</code> function.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty
attributes.QueryableAttribute.isnot_distinct_from	A										<section class="prog__container"><pre><code>isnot_distinct_from(other)</code></pre>\ninherited from the isnot_distinct_from() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Renders &#8220;a IS NOT DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS b&#8221;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.isnot_distinct_from
attributes.QueryableAttribute.like	A										<section class="prog__container"><pre><code>like(other, escape=None)</code></pre>\ninherited from the like() method of ColumnOperators<p>Implement the <code>like</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p><p>E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.like("%foobar%"))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>optional escape character, renders the ESCAPE\nkeyword, e.g.:</p><ul><li><strong>other</strong> &#8211; expression to be compared</li><li><strong>escape</strong> &#8211; <p>optional escape character, renders the <code>ESCAPE</code>\nkeyword, e.g.:</p>\n<pre><code>somecolumn.like("foo/%bar", escape="/")\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.like
attributes.QueryableAttribute.desc	A										<section class="prog__container"><pre><code>desc()</code></pre>\ninherited from the desc() method of ColumnOperators<p>Produce a <code>desc()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.desc
properties.ColumnProperty.Comparator.in_	A										<section class="prog__container"><pre><code>in_(other)</code></pre>\ninherited from the in_() method of ColumnOperators<p>Implement the <code>in</code> operator.</p><p>In a column context, produces the clause <code>None</code>.\n&#8220;other&#8221; may be a tuple/list of column expressions,\nor a <code>select()</code> construct.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.in_
properties.RelationshipProperty.Comparator.adapter	A										<section class="prog__container"><pre><code>adapter</code></pre>\ninherited from the adapter attribute of PropComparator<p>Produce a callable that adapts column expressions\nto suit an aliased version of this comparator.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.adapter
__delete__	A										<section class="prog__container"><pre><code>__delete__(instance)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.InstrumentedAttribute.__delete__
properties.ColumnProperty.Comparator.like	A										<section class="prog__container"><pre><code>like(other, escape=None)</code></pre>\ninherited from the like() method of ColumnOperators<p>Implement the <code>like</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p><p>E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.like("%foobar%"))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>optional escape character, renders the ESCAPE\nkeyword, e.g.:</p><ul><li><strong>other</strong> &#8211; expression to be compared</li><li><strong>escape</strong> &#8211; <p>optional escape character, renders the <code>ESCAPE</code>\nkeyword, e.g.:</p>\n<pre><code>somecolumn.like("foo/%bar", escape="/")\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.like
instrumentation.ClassManager.__le__	A										<section class="prog__container"><pre><code>__le__</code></pre>\ninherited from the __le__ attribute of dict<p>x.__le__(y) <==> x<=y</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.__le__
interfaces.PropComparator.adapter	A										<section class="prog__container"><pre><code>adapter</code></pre><p>Produce a callable that adapts column expressions\nto suit an aliased version of this comparator.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.adapter
properties.RelationshipProperty.Comparator.has	A										<section class="prog__container"><pre><code>has(criterion=None, **kwargs)</code></pre><p>Produce an expression that tests a scalar reference against\nparticular criterion, using EXISTS.</p><p>An expression like:</p><pre><code>session.query(MyClass).filter(\n    MyClass.somereference.has(SomeRelated.x==2)\n)\n</code></pre><p>Will produce a query like:</p><pre><code>SELECT * FROM my_table WHERE\nEXISTS (SELECT 1 FROM related WHERE\nrelated.id==my_table.related_id AND related.x=2)\n</code></pre><p>Because <code>has()</code> uses\na correlated subquery, its performance is not nearly as\ngood when compared against large target tables as that of\nusing a join.</p><p><code>has()</code> is only\nvalid for scalar references, i.e. a <code>relationship()</code>\nthat has <code>uselist=False</code>.  For collection references,\nuse <code>any()</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.has
isnot	D								*[[properties.ColumnProperty.Comparator.isnot]], Implement the IS NOT operator. \n*[[interfaces.PropComparator.isnot]], Implement the IS NOT operator. \n*[[properties.RelationshipProperty.Comparator.isnot]], Implement the IS NOT operator. \n*[[attributes.QueryableAttribute.isnot]], Implement the IS NOT operator. \n
interfaces.MapperProperty.class_attribute	A										<section class="prog__container"><pre><code>class_attribute</code></pre><p>Return the class-bound descriptor corresponding to this\n<code>MapperProperty</code>.</p><p>This is basically a <code>getattr()</code> call:</p><pre><code>return getattr(self.parent.class_, self.key)\n</code></pre><p>I.e. if this <code>MapperProperty</code> were named <code>addresses</code>,\nand the class to which it is mapped is <code>User</code>, this sequence\nis possible:</p><pre><code>>>> from sqlalchemy import inspect\n>>> mapper = inspect(User)\n>>> addresses_property = mapper.attrs.addresses\n>>> addresses_property.class_attribute is User.addresses\nTrue\n>>> User.addresses.property is addresses_property\nTrue\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.class_attribute
attributes.QueryableAttribute.__le__	A										<section class="prog__container"><pre><code>__le__(other)</code></pre>\ninherited from the __le__() method of ColumnOperators<p>Implement the <code><=</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.__le__
load_history	A										<section class="prog__container"><pre><code>load_history()</code></pre><p>Return the current pre-flush change history for\nthis attribute, via the <code>History</code> interface.</p><p>This method will emit loader callables if the value of the\nattribute is unloaded.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState.load_history
attributes.QueryableAttribute.__lt__	A										<section class="prog__container"><pre><code>__lt__(other)</code></pre>\ninherited from the __lt__() method of ColumnOperators<p>Implement the <code><</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.__lt__
copy	A										<section class="prog__container"><pre><code>copy() &#8594; a shallow copy of D</code></pre>\ninherited from the copy() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.copy
descriptor_props.CompositeProperty.Comparator	A										<section class="prog__container"><pre><code>class Comparator(prop, parentmapper, adapt_to_entity=None)</code></pre><p>Bases: <code>sqlalchemy.orm.interfaces.PropComparator</code></p><p>Produce boolean, comparison, and other operators for\n<code>CompositeProperty</code> attributes.</p><p>See the example in <code>Redefining Comparison Operations for Composites</code> for an overview\nof usage , as well as the documentation for <code>PropComparator</code>.</p><p>See also:</p><p><code>PropComparator</code></p><p><code>ColumnOperators</code></p><p><code>Redefining and Creating New Operators</code></p><p><code>TypeEngine.comparator_factory</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty.Comparator
properties.ColumnProperty.Comparator.op	A										<section class="prog__container"><pre><code>op(opstring, precedence=0, is_comparison=False)</code></pre>\ninherited from the op() method of Operators<p>produce a generic operator function.</p><p>e.g.:</p><pre><code>somecolumn.op("*")(5)\n</code></pre><p>produces:</p><pre><code>somecolumn * 5\n</code></pre><p>This function can also be used to make bitwise operators explicit. For\nexample:</p><pre><code>somecolumn.op('&')(0xff)\n</code></pre><p>is a bitwise AND of the value in <code>somecolumn</code>.</p>\n\n<span class="prog__sub">Parameters:</span><p>precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of 0 is lower than all\noperators except for the comma (,) and AS operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.</p><p>New in version 0.8: - added the &#8216;precedence&#8217; argument.</p><p>if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like ==, >, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.</p><p>New in version 0.9.2: - added the\nOperators.op.is_comparison flag.</p><ul><li><strong>operator</strong> &#8211; a string which will be output as the infix operator\nbetween this element and the expression passed to the\ngenerated function.</li><li><strong>precedence</strong> &#8211; <p>precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of <code>0</code> is lower than all\noperators except for the comma (<code>,</code>) and <code>AS</code> operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.</p>\n\n</li><li><strong>is_comparison</strong> &#8211; <p>if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like <code>==</code>, <code>></code>, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.</p>\n\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.op
attributes.QueryableAttribute.endswith	A										<section class="prog__container"><pre><code>endswith(other, **kwargs)</code></pre>\ninherited from the endswith() method of ColumnOperators<p>Implement the &#8216;endswith&#8217; operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.endswith
attributes.QueryableAttribute.__ne__	A										<section class="prog__container"><pre><code>__ne__(other)</code></pre>\ninherited from the __ne__() method of ColumnOperators<p>Implement the <code>!=</code> operator.</p><p>In a column context, produces the clause <code>None</code>.\nIf the target is <code>None</code>, produces <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.__ne__
MapperProperty.info	A										<section class="prog__container"><pre><code>info</code></pre><p>Info dictionary associated with the object, allowing user-defined\ndata to be associated with this <code>InspectionAttr</code>.</p><p>The dictionary is generated when first accessed.  Alternatively,\nit can be specified as a constructor argument to the\n<code>column_property()</code>, <code>relationship()</code>, or <code>composite()</code>\nfunctions.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#MapperProperty.info
get_history	A										<section class="prog__container"><pre><code>CompositeProperty.get_history(state, dict_, passive=symbol('PASSIVE_OFF'))</code></pre><p>Provided for userland code that uses attributes.get_history().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty.get_history
descriptor_props.SynonymProperty.init	A										<section class="prog__container"><pre><code>init()</code></pre>\ninherited from the init() method of MapperProperty<p>Called after all mappers are created to assemble\nrelationships between mappers and perform other post-mapper-creation\ninitialization steps.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.init
before_flush	A										<section class="prog__container"><pre><code>before_flush(session, flush_context, instances)</code></pre><p>Execute before flush process has started.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'before_flush')\ndef receive_before_flush(session, flush_context, instances):\n    "listen for the 'before_flush' event"\n\n    # ... (event handling logic) ...\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; The target <code>Session</code>.</li><li><strong>flush_context</strong> &#8211; Internal <code>UOWTransaction</code> object\nwhich handles the details of the flush.</li><li><strong>instances</strong> &#8211; Usually <code>None</code>, this is the collection of\nobjects which can be passed to the <code>Session.flush()</code> method\n(note this usage is deprecated).</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.before_flush
properties.RelationshipProperty.__init__	A										<section class="prog__container"><pre><code>RelationshipProperty.__init__(argument, secondary=None, primaryjoin=None, secondaryjoin=None, foreign_keys=None, uselist=None, order_by=False, backref=None, back_populates=None, post_update=False, cascade=False, extension=None, viewonly=False, lazy=True, collection_class=None, passive_deletes=False, passive_updates=True, remote_side=None, enable_typechecks=True, join_depth=None, comparator_factory=None, single_parent=False, innerjoin=False, distinct_target_key=None, doc=None, active_history=False, cascade_backrefs=True, load_on_pending=False, bake_queries=True, _local_remote_pairs=None, query_class=None, info=None)</code></pre><p>Construct a new <code>RelationshipProperty</code> object.</p><p>This constructor is mirrored as a public API function; see <code>relationship()</code> for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.__init__
interfaces.MapperProperty.do_init	A										<section class="prog__container"><pre><code>do_init()</code></pre><p>Perform subclass-specific initialization post-mapper-creation\nsteps.</p><p>This is a template method called by the <code>MapperProperty</code>\nobject&#8217;s init() method.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.do_init
is_aliased_class	A										<section class="prog__container"><pre><code>is_aliased_class = False</code></pre><p>True if this object is an instance of <code>AliasedClass</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_aliased_class
properties.RelationshipProperty.cascade	A										<section class="prog__container"><pre><code>RelationshipProperty.cascade</code></pre><p>Return the current cascade setting for this\n<code>RelationshipProperty</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.cascade
interfaces.PropComparator.collate	A										<section class="prog__container"><pre><code>collate(collation)</code></pre>\ninherited from the collate() method of ColumnOperators<p>Produce a <code>collate()</code> clause against\nthe parent object, given the collation string.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.collate
any	D								*[[properties.ColumnProperty.Comparator.any]], Return true if this collection contains any member that meets the given criterion. \n*[[interfaces.PropComparator.any]], Return true if this collection contains any member that meets the given criterion. \n*[[properties.RelationshipProperty.Comparator.any]], Produce an expression that tests a collection against particular criterion, using EXISTS. \n*[[attributes.QueryableAttribute.any]], Return true if this collection contains any member that meets the given criterion. \n
before_configured	A										<section class="prog__container"><pre><code>before_configured()</code></pre><p>Called before a series of mappers have been configured.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'before_configured')\ndef receive_before_configured():\n    "listen for the 'before_configured' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>The <code>MapperEvents.before_configured()</code> event is invoked\neach time the <code>orm.configure_mappers()</code> function is\ninvoked, before the function has done any of its work.\n<code>orm.configure_mappers()</code> is typically invoked\nautomatically as mappings are first used, as well as each time\nnew mappers have been made available and new mapper use is\ndetected.</p><p>This event can only be applied to the <code>Mapper</code> class\nor <code>mapper()</code> function, and not to individual mappings or\nmapped classes.  It is only invoked for all mappings as a whole:</p><pre><code>from sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, "before_configured")\ndef go():\n    # ...\n</code></pre><p>Constrast this event to <code>MapperEvents.after_configured()</code>,\nwhich is invoked after the series of mappers has been configured,\nas well as <code>MapperEvents.mapper_configured()</code>, which is invoked\non a per-mapper basis as each one is configured to the extent possible.</p><p>Theoretically this event is called once per\napplication, but is actually called any time new mappers\nare to be affected by a <code>orm.configure_mappers()</code>\ncall.   If new mappings are constructed after existing ones have\nalready been used, this event will likely be called again.  To ensure\nthat a particular event is only called once and no further, the\n<code>once=True</code> argument (new in 0.9.4) can be applied:</p><pre><code>from sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, "before_configured", once=True)\ndef go():\n    # ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.before_configured
UnmappedColumnError	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.UnmappedColumnError</code></pre><p>Mapping operation was requested on an unknown column.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.UnmappedColumnError
FlushError	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.FlushError</code></pre><p>A invalid condition was detected during flush().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.FlushError
instrumentation.ClassManager.__ne__	A										<section class="prog__container"><pre><code>__ne__</code></pre>\ninherited from the __ne__ attribute of dict<p>x.__ne__(y) <==> x!=y</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.__ne__
ObjectDeletedError	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.ObjectDeletedError(state, msg=None)</code></pre><p>A refresh operation failed to retrieve the database\nrow corresponding to an object&#8217;s known primary key identity.</p><p>A refresh operation proceeds when an expired attribute is\naccessed on an object, or when <code>Query.get()</code> is\nused to retrieve an object which is, upon retrieval, detected\nas expired.   A SELECT is emitted for the target row\nbased on primary key; if no row is returned, this\nexception is raised.</p><p>The true meaning of this exception is simply that\nno row exists for the primary key identifier associated\nwith a persistent object.   The row may have been\ndeleted, or in some cases the primary key updated\nto a new value, outside of the ORM&#8217;s management of the target\nobject.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
first_init	A										<section class="prog__container"><pre><code>first_init(manager, cls)</code></pre><p>Called when the first instance of a particular mapping is called.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'first_init')\ndef receive_first_init(manager, cls):\n    "listen for the 'first_init' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is called when the <code>__init__</code> method of a class\nis called the first time for that particular class.    The event\ninvokes before <code>__init__</code> actually proceeds as well as before\nthe <code>InstanceEvents.init()</code> event is invoked.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.first_init
Comparator	D								*[[properties.ColumnProperty.Comparator]], Bases: sqlalchemy.util.langhelpers.MemoizedSlots, sqlalchemy.orm.interfaces.PropComparator \n*[[descriptor_props.CompositeProperty.Comparator]], Bases: sqlalchemy.orm.interfaces.PropComparator \n*[[properties.RelationshipProperty.Comparator]], Bases: sqlalchemy.orm.interfaces.PropComparator \n
object	A										<section class="prog__container"><pre><code>object</code></pre><p>Return the mapped object represented by this\n<code>InstanceState</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.object
interfaces.PropComparator.__lt__	A										<section class="prog__container"><pre><code>__lt__(other)</code></pre>\ninherited from the __lt__() method of ColumnOperators<p>Implement the <code><</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.__lt__
interfaces.PropComparator.nullslast	A										<section class="prog__container"><pre><code>nullslast()</code></pre>\ninherited from the nullslast() method of ColumnOperators<p>Produce a <code>nullslast()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.nullslast
MANYTOONE	A										<section class="prog__container"><pre><code>sqlalchemy.orm.interfaces.MANYTOONE = symbol('MANYTOONE')</code></pre><p>Indicates the many-to-one direction for a <code>relationship()</code>.</p><p>This symbol is typically used by the internals but may be exposed within\ncertain API features.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MANYTOONE
interfaces.PropComparator.notilike	A										<section class="prog__container"><pre><code>notilike(other, escape=None)</code></pre>\ninherited from the notilike() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.ilike()</code>, i.e. <code>~x.ilike(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.notilike
is_clause_element	A										<section class="prog__container"><pre><code>is_clause_element = False</code></pre><p>True if this object is an instance of <code>ClauseElement</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_clause_element
was_deleted	A										<section class="prog__container"><pre><code>was_deleted</code></pre><p>Return True if this object is or was previously in the\n&#8220;deleted&#8221; state and has not been reverted to persistent.</p><p>This flag returns True once the object was deleted in flush.\nWhen the object is expunged from the session either explicitly\nor via transaction commit and enters the &#8220;detached&#8221; state,\nthis flag will continue to report True.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.was_deleted
interfaces.PropComparator.is_	A										<section class="prog__container"><pre><code>is_(other)</code></pre>\ninherited from the is_() method of ColumnOperators<p>Implement the <code>IS</code> operator.</p><p>Normally, <code>IS</code> is generated automatically when comparing to a\nvalue of <code>None</code>, which resolves to <code>NULL</code>.  However, explicit\nusage of <code>IS</code> may be desirable if comparing to boolean values\non certain platforms.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.is_
properties.ColumnProperty.Comparator.is_distinct_from	A										<section class="prog__container"><pre><code>is_distinct_from(other)</code></pre>\ninherited from the is_distinct_from() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Renders &#8220;a IS DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS NOT b&#8221;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.is_distinct_from
viewvalues	A										<section class="prog__container"><pre><code>viewvalues() &#8594; an object providing a view on D's values</code></pre>\ninherited from the viewvalues() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.viewvalues
interfaces.MapperProperty.init	A										<section class="prog__container"><pre><code>init()</code></pre><p>Called after all mappers are created to assemble\nrelationships between mappers and perform other post-mapper-creation\ninitialization steps.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.init
clear	A										<section class="prog__container"><pre><code>clear() &#8594; None.  Remove all items from D.</code></pre>\ninherited from the clear() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.clear
StaleDataError	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.StaleDataError</code></pre><p>An operation encountered database state that is unaccounted for.</p><p>Conditions which cause this to happen include:</p><ul><li><p>A flush may have attempted to update or delete rows\nand an unexpected number of rows were matched during\nthe UPDATE or DELETE statement.   Note that when\nversion_id_col is used, rows in UPDATE or DELETE statements\nare also matched against the current known version\nidentifier.</p>\n</li><li><p>A mapped object with version_id_col was refreshed,\nand the version number coming back from the database does\nnot match that of the object itself.</p>\n</li><li><p>A object is detached from its parent object, however\nthe object was previously attached to a different parent\nidentity which was garbage collected, and a decision\ncannot be made if the new parent was really the most\nrecent &#8220;parent&#8221;.</p>\n\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.StaleDataError
attributes.QueryableAttribute.notin_	A										<section class="prog__container"><pre><code>notin_(other)</code></pre>\ninherited from the notin_() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.in_()</code>, i.e. <code>~x.in_(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.notin_
interfaces.PropComparator.concat	A										<section class="prog__container"><pre><code>concat(other)</code></pre>\ninherited from the concat() method of ColumnOperators<p>Implement the &#8216;concat&#8217; operator.</p><p>In a column context, produces the clause <code>None</code>,\nor uses the <code>concat()</code> operator on MySQL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.concat
transient_to_pending	A										<section class="prog__container"><pre><code>transient_to_pending(session, instance)</code></pre><p>Intercept the &#8220;transient to pending&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'transient_to_pending')\ndef receive_transient_to_pending(session, instance):\n    "listen for the 'transient_to_pending' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is a specialization of the\n<code>SessionEvents.after_attach()</code> event which is only invoked\nfor this specific transition.  It is invoked typically during the\n<code>Session.add()</code> call.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; target <code>Session</code></li><li><strong>instance</strong> &#8211; the ORM-mapped instance being operated upon.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.transient_to_pending
properties.RelationshipProperty.Comparator.notin_	A										<section class="prog__container"><pre><code>notin_(other)</code></pre>\ninherited from the notin_() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.in_()</code>, i.e. <code>~x.in_(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.notin_
dispose_collection	A										<section class="prog__container"><pre><code>dispose_collection(target, collection, collection_adpater)</code></pre><p>Receive a &#8216;collection dispose&#8217; event.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'dispose_collection')\ndef receive_dispose_collection(target, collection, collection_adpater):\n    "listen for the 'dispose_collection' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is triggered for a collection-based attribute when\na collection is replaced, that is:</p><pre><code>u1.addresses.append(a1)\n\nu1.addresses = [a2, a3]  # <- old collection is disposed\n</code></pre><p>The mechanics of the event will typically include that the given\ncollection is empty, even if it stored objects while being replaced.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.dispose_collection
has_key	A										<section class="prog__container"><pre><code>has_key(k) &#8594; True if D has a key k, else False</code></pre>\ninherited from the has_key() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.has_key
base.InspectionAttrInfo.info	A										<section class="prog__container"><pre><code>info</code></pre><p>Info dictionary associated with the object, allowing user-defined\ndata to be associated with this <code>InspectionAttr</code>.</p><p>The dictionary is generated when first accessed.  Alternatively,\nit can be specified as a constructor argument to the\n<code>column_property()</code>, <code>relationship()</code>, or <code>composite()</code>\nfunctions.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttrInfo.info
reverse_operate	D								*[[interfaces.PropComparator.reverse_operate]], Reverse operate on an argument. \n*[[properties.RelationshipProperty.Comparator.reverse_operate]], Reverse operate on an argument. \n
attributes.QueryableAttribute.__eq__	A										<section class="prog__container"><pre><code>__eq__(other)</code></pre>\ninherited from the __eq__() method of ColumnOperators<p>Implement the <code>==</code> operator.</p><p>In a column context, produces the clause <code>None</code>.\nIf the target is <code>None</code>, produces <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.__eq__
InstrumentationEvents	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.events.InstrumentationEvents</code></pre><p>Bases: <code>sqlalchemy.event.base.Events</code></p><p>Events related to class instrumentation events.</p><p>The listeners here support being established against\nany new style class, that is any object that is a subclass\nof &#8216;type&#8217;.  Events will then be fired off for events\nagainst that class.  If the &#8220;propagate=True&#8221; flag is passed\nto event.listen(), the event will fire off for subclasses\nof that class as well.</p><p>The Python <code>type</code> builtin is also accepted as a target,\nwhich when used has the effect of events being emitted\nfor all classes.</p><p>Note the &#8220;propagate&#8221; flag here is defaulted to <code>True</code>,\nunlike the other class level events where it defaults\nto <code>False</code>.  This means that new subclasses will also\nbe the subject of these events, when a listener\nis established on a superclass.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstrumentationEvents
NOT_EXTENSION	A										<section class="prog__container"><pre><code>sqlalchemy.orm.interfaces.NOT_EXTENSION = symbol('NOT_EXTENSION')</code></pre><p>Symbol indicating an <code>InspectionAttr</code> that&#8217;s\nnot part of sqlalchemy.ext.</p><p>Is assigned to the <code>InspectionAttr.extension_type</code>\nattibute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.NOT_EXTENSION
init_failure	A										<section class="prog__container"><pre><code>init_failure(target, args, kwargs)</code></pre><p>Receive an instance when its constructor has been called,\nand raised an exception.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'init_failure')\ndef receive_init_failure(target, args, kwargs):\n    "listen for the 'init_failure' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This method is only called during a userland construction of\nan object, in conjunction with the object&#8217;s constructor, e.g.\nits <code>__init__</code> method. It is not called when an object is loaded\nfrom the database.</p><p>The event is invoked after an exception raised by the <code>__init__</code>\nmethod is caught.  After the event\nis invoked, the original exception is re-raised outwards, so that\nthe construction of the object still raises an exception.   The\nactual exception and stack trace raised should be present in\n<code>sys.exc_info()</code>.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the mapped instance.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li><li><strong>args</strong> &#8211; positional arguments that were passed to the <code>__init__</code>\nmethod.</li><li><strong>kwargs</strong> &#8211; keyword arguments that were passed to the <code>__init__</code>\nmethod.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.init_failure
interfaces.PropComparator.isnot	A										<section class="prog__container"><pre><code>isnot(other)</code></pre>\ninherited from the isnot() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Normally, <code>None</code> is generated automatically when comparing to a\nvalue of <code>None</code>, which resolves to <code>NULL</code>.  However, explicit\nusage of <code>None</code> may be desirable if comparing to boolean values\non certain platforms.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.isnot
dict	A										<section class="prog__container"><pre><code>dict</code></pre><p>Return the instance dict used by the object.</p><p>Under normal circumstances, this is always synonymous\nwith the <code>__dict__</code> attribute of the mapped object,\nunless an alternative instrumentation system has been\nconfigured.</p><p>In the case that the actual object has been garbage\ncollected, this accessor returns a blank dictionary.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.dict
InstanceState	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.state.InstanceState(obj, manager)</code></pre><p>Bases: <code>sqlalchemy.orm.base.InspectionAttr</code></p><p>tracks state information at the instance level.</p><p>The <code>InstanceState</code> is a key object used by the\nSQLAlchemy ORM in order to track the state of an object;\nit is created the moment an object is instantiated, typically\nas a result of <code>instrumentation</code> which SQLAlchemy applies\nto the <code>__init__()</code> method of the class.</p><p><code>InstanceState</code> is also a semi-public object,\navailable for runtime inspection as to the state of a\nmapped instance, including information such as its current\nstatus within a particular <code>Session</code> and details\nabout data on individual attributes.  The public API\nin order to acquire a <code>InstanceState</code> object\nis to use the <code>inspect()</code> system:</p><pre><code>>>> from sqlalchemy import inspect\n>>> insp = inspect(some_mapped_object)\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState
get_attribute_history	A										<section class="prog__container"><pre><code>get_attribute_history(state, key, passive=symbol('PASSIVE_NO_INITIALIZE'))</code></pre><p>facade to attributes.get_state_history(), including\ncaching of results.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.get_attribute_history
startswith	D								*[[properties.ColumnProperty.Comparator.startswith]], Implement the startwith operator. \n*[[interfaces.PropComparator.startswith]], Implement the startwith operator. \n*[[properties.RelationshipProperty.Comparator.startswith]], Implement the startwith operator. \n*[[attributes.QueryableAttribute.startswith]], Implement the startwith operator. \n
init_collection	A										<section class="prog__container"><pre><code>init_collection(target, collection, collection_adapter)</code></pre><p>Receive a &#8216;collection init&#8217; event.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'init_collection')\ndef receive_init_collection(target, collection, collection_adapter):\n    "listen for the 'init_collection' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is triggered for a collection-based attribute, when\nthe initial &#8220;empty collection&#8221; is first generated for a blank\nattribute, as well as for when the collection is replaced with\na new one, such as via a set event.</p><p>E.g., given that <code>User.addresses</code> is a relationship-based\ncollection, the event is triggered here:</p><pre><code>u1 = User()\nu1.addresses.append(a1)  #  <- new collection\n</code></pre><p>and also during replace operations:</p><pre><code>u1.addresses = [a2, a3]  #  <- new collection\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the object instance receiving the event.\nIf the listener is registered with <code>raw=True</code>, this will\nbe the <code>InstanceState</code> object.</li><li><strong>collection</strong> &#8211; the new collection.  This will always be generated\nfrom what was specified as\n<code>RelationshipProperty.collection_class</code>, and will always\nbe empty.</li><li><strong>collection_adpater</strong> &#8211; the <code>CollectionAdapter</code> that will\nmediate internal access to the collection.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.init_collection
properties.ColumnProperty.Comparator.isnot_distinct_from	A										<section class="prog__container"><pre><code>isnot_distinct_from(other)</code></pre>\ninherited from the isnot_distinct_from() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Renders &#8220;a IS NOT DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS b&#8221;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.isnot_distinct_from
descriptor_props.SynonymProperty.class_attribute	A										<section class="prog__container"><pre><code>class_attribute</code></pre>\ninherited from the class_attribute attribute of MapperProperty<p>Return the class-bound descriptor corresponding to this\n<code>MapperProperty</code>.</p><p>This is basically a <code>getattr()</code> call:</p><pre><code>return getattr(self.parent.class_, self.key)\n</code></pre><p>I.e. if this <code>MapperProperty</code> were named <code>addresses</code>,\nand the class to which it is mapped is <code>User</code>, this sequence\nis possible:</p><pre><code>>>> from sqlalchemy import inspect\n>>> mapper = inspect(User)\n>>> addresses_property = mapper.attrs.addresses\n>>> addresses_property.class_attribute is User.addresses\nTrue\n>>> User.addresses.property is addresses_property\nTrue\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.class_attribute
get	A										<section class="prog__container"><pre><code>get(k[, d]) &#8594; D[k] if k in D, else d.  d defaults to None.</code></pre>\ninherited from the get() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.get
after_bulk_delete	A										<section class="prog__container"><pre><code>after_bulk_delete(delete_context)</code></pre><p>Execute after a bulk delete operation to the session.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style (arguments as of 0.9)\n@event.listens_for(SomeSessionOrFactory, 'after_bulk_delete')\ndef receive_after_bulk_delete(delete_context):\n    "listen for the 'after_bulk_delete' event"\n\n    # ... (event handling logic) ...\n\n# legacy calling style (pre-0.9)\n@event.listens_for(SomeSessionOrFactory, 'after_bulk_delete')\ndef receive_after_bulk_delete(session, query, query_context, result):\n    "listen for the 'after_bulk_delete' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This is called as a result of the <code>Query.delete()</code> method.</p>\n\n<span class="prog__sub">Parameters:</span><p><strong>delete_context</strong></p><p>a &#8220;delete context&#8221; object which contains\ndetails about the update, including these attributes:</p><ul><li><code>session</code> - the <code>Session</code> involved</li><li><code>query</code> -the <code>Query</code> object that this update operation\nwas called upon.</li><li><code>context</code> The <code>QueryContext</code> object, corresponding\nto the invocation of an ORM query.</li><li><code>result</code> the <code>ResultProxy</code> returned as a result of the\nbulk DELETE operation.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_bulk_delete
CompositeProperty	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.descriptor_props.CompositeProperty(class_, *attrs, **kwargs)</code></pre><p>Bases: <code>sqlalchemy.orm.descriptor_props.DescriptorProperty</code></p><p>Defines a &#8220;composite&#8221; mapped attribute, representing a collection\nof columns as one attribute.</p><p><code>CompositeProperty</code> is constructed using the <code>composite()</code>\nfunction.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty
QueryEvents	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.events.QueryEvents</code></pre><p>Bases: <code>sqlalchemy.event.base.Events</code></p><p>Represent events within the construction of a <code>Query</code> object.</p><p>The events here are intended to be used with an as-yet-unreleased\ninspection system for <code>Query</code>.   Some very basic operations\nare possible now, however the inspection system is intended to allow\ncomplex query manipulations to be automated.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.QueryEvents
popitem	A										<section class="prog__container"><pre><code>popitem() &#8594; (k, v), remove and return some (key, value) pair as a</code></pre>\ninherited from the popitem() method of dict<p>2-tuple; but raise KeyError if D is empty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.popitem
properties.ColumnProperty.Comparator.match	A										<section class="prog__container"><pre><code>match(other, **kwargs)</code></pre>\ninherited from the match() method of ColumnOperators<p>Implements a database-specific &#8216;match&#8217; operator.</p><p><code>match()</code> attempts to resolve to\na MATCH-like function or operator provided by the backend.\nExamples include:</p><ul><li>PostgreSQL - renders <code>x @@ to_tsquery(y)</code></li><li>MySQL - renders <code>MATCH (x) AGAINST (y IN BOOLEAN MODE)</code></li><li>Oracle - renders <code>CONTAINS(x, y)</code></li><li>other backends may provide special implementations.</li><li>Backends without any special implementation will emit\nthe operator as &#8220;MATCH&#8221;.  This is compatible with SQlite, for\nexample.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.match
do_init	D								*[[descriptor_props.CompositeProperty.do_init]], Initialization which occurs after the CompositeProperty has been associated with its parent mapper. \n*[[interfaces.MapperProperty.do_init]], Perform subclass-specific initialization post-mapper-creation steps. \n*[[descriptor_props.SynonymProperty.do_init]], Perform subclass-specific initialization post-mapper-creation steps. \n
mapper	D								*[[state.InstanceState.mapper]], Return the Mapper used for this mapepd object. \n*[[properties.RelationshipProperty.Comparator.mapper]], The target Mapper referred to by this RelationshipProperty.Comparator. \n*[[properties.RelationshipProperty.mapper]], Return the targeted Mapper for this RelationshipProperty. \n
properties.ColumnProperty.Comparator.__ne__	A										<section class="prog__container"><pre><code>__ne__(other)</code></pre>\ninherited from the __ne__() method of ColumnOperators<p>Implement the <code>!=</code> operator.</p><p>In a column context, produces the clause <code>None</code>.\nIf the target is <code>None</code>, produces <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.__ne__
remove	A										<section class="prog__container"><pre><code>remove(target, value, initiator)</code></pre><p>Receive a collection remove event.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'remove')\ndef receive_remove(target, value, initiator):\n    "listen for the 'remove' event"\n\n    # ... (event handling logic) ...\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>An instance of attributes.Event\nrepresenting the initiation of the event.  May be modified\nfrom its original value by backref handlers in order to control\nchained event propagation.</p><p>Changed in version 0.9.0: the initiator argument is now\npassed as a attributes.Event object, and may be\nmodified by backref handlers within a chain of backref-linked\nevents.</p><ul><li><strong>target</strong> &#8211; the object instance receiving the event.\nIf the listener is registered with <code>raw=True</code>, this will\nbe the <code>InstanceState</code> object.</li><li><strong>value</strong> &#8211; the value being removed.</li><li><strong>initiator</strong> &#8211; <p>An instance of <code>attributes.Event</code>\nrepresenting the initiation of the event.  May be modified\nfrom its original value by backref handlers in order to control\nchained event propagation.</p>\n\n</li></ul>\n\n<span class="prog__sub">Returns:</span><p>No return value is defined for this event.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.remove
set	A										<section class="prog__container"><pre><code>set(target, value, oldvalue, initiator)</code></pre><p>Receive a scalar set event.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'set')\ndef receive_set(target, value, oldvalue, initiator):\n    "listen for the 'set' event"\n\n    # ... (event handling logic) ...\n\n# named argument style (new in 0.9)\n@event.listens_for(SomeClass.some_attribute, 'set', named=True)\ndef receive_set(**kw):\n    "listen for the 'set' event"\n    target = kw['target']\n    value = kw['value']\n\n    # ... (event handling logic) ...\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>An instance of attributes.Event\nrepresenting the initiation of the event.  May be modified\nfrom its original value by backref handlers in order to control\nchained event propagation.</p><p>Changed in version 0.9.0: the initiator argument is now\npassed as a attributes.Event object, and may be\nmodified by backref handlers within a chain of backref-linked\nevents.</p><ul><li><strong>target</strong> &#8211; the object instance receiving the event.\nIf the listener is registered with <code>raw=True</code>, this will\nbe the <code>InstanceState</code> object.</li><li><strong>value</strong> &#8211; the value being set.  If this listener\nis registered with <code>retval=True</code>, the listener\nfunction must return this value, or a new value which\nreplaces it.</li><li><strong>oldvalue</strong> &#8211; the previous value being replaced.  This\nmay also be the symbol <code>NEVER_SET</code> or <code>NO_VALUE</code>.\nIf the listener is registered with <code>active_history=True</code>,\nthe previous value of the attribute will be loaded from\nthe database if the existing value is currently unloaded\nor expired.</li><li><strong>initiator</strong> &#8211; <p>An instance of <code>attributes.Event</code>\nrepresenting the initiation of the event.  May be modified\nfrom its original value by backref handlers in order to control\nchained event propagation.</p>\n\n</li></ul>\n\n<span class="prog__sub">Returns:</span><p>if the event was registered with retval=True,\nthe given value, or a new effective value, should be returned.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.set
after_flush_postexec	A										<section class="prog__container"><pre><code>after_flush_postexec(session, flush_context)</code></pre><p>Execute after flush has completed, and after the post-exec\nstate occurs.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_flush_postexec')\ndef receive_after_flush_postexec(session, flush_context):\n    "listen for the 'after_flush_postexec' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This will be when the &#8216;new&#8217;, &#8216;dirty&#8217;, and &#8216;deleted&#8217; lists are in\ntheir final state.  An actual commit() may or may not have\noccurred, depending on whether or not the flush started its own\ntransaction or participated in a larger transaction.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; The target <code>Session</code>.</li><li><strong>flush_context</strong> &#8211; Internal <code>UOWTransaction</code> object\nwhich handles the details of the flush.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_flush_postexec
properties.ColumnProperty.Comparator.notin_	A										<section class="prog__container"><pre><code>notin_(other)</code></pre>\ninherited from the notin_() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.in_()</code>, i.e. <code>~x.in_(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.notin_
interfaces.PropComparator.__eq__	A										<section class="prog__container"><pre><code>__eq__(other)</code></pre>\ninherited from the __eq__() method of ColumnOperators<p>Implement the <code>==</code> operator.</p><p>In a column context, produces the clause <code>None</code>.\nIf the target is <code>None</code>, produces <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.__eq__
after_rollback	A										<section class="prog__container"><pre><code>after_rollback(session)</code></pre><p>Execute after a real DBAPI rollback has occurred.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_rollback')\ndef receive_after_rollback(session):\n    "listen for the 'after_rollback' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>Note that this event only fires when the actual rollback against\nthe database occurs - it does not fire each time the\n<code>Session.rollback()</code> method is called, if the underlying\nDBAPI transaction has already been rolled back.  In many\ncases, the <code>Session</code> will not be in\nan &#8220;active&#8221; state during this event, as the current\ntransaction is not valid.   To acquire a <code>Session</code>\nwhich is active after the outermost rollback has proceeded,\nuse the <code>SessionEvents.after_soft_rollback()</code> event, checking the\n<code>Session.is_active</code> flag.</p>\n\n<span class="prog__sub">Parameters:</span><p><strong>session</strong></p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_rollback
attributes.QueryableAttribute.contains	A										<section class="prog__container"><pre><code>contains(other, **kwargs)</code></pre>\ninherited from the contains() method of ColumnOperators<p>Implement the &#8216;contains&#8217; operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.contains
interfaces.PropComparator.adapt_to_entity	A										<section class="prog__container"><pre><code>adapt_to_entity(adapt_to_entity)</code></pre><p>Return a copy of this PropComparator which will use the given\n<code>AliasedInsp</code> to produce corresponding expressions.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.adapt_to_entity
viewitems	A										<section class="prog__container"><pre><code>viewitems() &#8594; a set-like object providing a view on D's items</code></pre>\ninherited from the viewitems() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.viewitems
notilike	D								*[[properties.ColumnProperty.Comparator.notilike]], implement the NOT ILIKE operator. \n*[[interfaces.PropComparator.notilike]], implement the NOT ILIKE operator. \n*[[properties.RelationshipProperty.Comparator.notilike]], implement the NOT ILIKE operator. \n*[[attributes.QueryableAttribute.notilike]], implement the NOT ILIKE operator. \n
parent	A										<section class="prog__container"><pre><code>parent</code></pre><p>Return an inspection instance representing the parent.</p><p>This will be either an instance of <code>Mapper</code>\nor <code>AliasedInsp</code>, depending upon the nature\nof the parent entity which this attribute is associated\nwith.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.parent
persistent_to_deleted	A										<section class="prog__container"><pre><code>persistent_to_deleted(session, instance)</code></pre><p>Intercept the &#8220;persistent to deleted&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'persistent_to_deleted')\ndef receive_persistent_to_deleted(session, instance):\n    "listen for the 'persistent_to_deleted' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked when a persistent object&#8217;s identity\nis deleted from the database within a flush, however the object\nstill remains associated with the <code>Session</code> until the\ntransaction completes.</p><p>If the transaction is rolled back, the object moves again\nto the persistent state, and the\n<code>SessionEvents.deleted_to_persistent()</code> event is called.\nIf the transaction is committed, the object becomes detached,\nwhich will emit the <code>SessionEvents.deleted_to_detached()</code>\nevent.</p><p>Note that while the <code>Session.delete()</code> method is the primary\npublic interface to mark an object as deleted, many objects\nget deleted due to cascade rules, which are not always determined\nuntil flush time.  Therefore, there&#8217;s no way to catch\nevery object that will be deleted until the flush has proceeded.\nthe <code>SessionEvents.persistent_to_deleted()</code> event is therefore\ninvoked at the end of a flush.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.persistent_to_deleted
descriptor_props.SynonymProperty.create_row_processor	A										<section class="prog__container"><pre><code>create_row_processor(context, path, mapper, result, adapter, populators)</code></pre>\ninherited from the create_row_processor() method of MapperProperty<p>Produce row processing functions and append to the given\nset of populators lists.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.create_row_processor
between	D								*[[properties.ColumnProperty.Comparator.between]], Produce a between() clause against the parent object, given the lower and upper range. \n*[[interfaces.PropComparator.between]], Produce a between() clause against the parent object, given the lower and upper range. \n*[[properties.RelationshipProperty.Comparator.between]], Produce a between() clause against the parent object, given the lower and upper range. \n*[[attributes.QueryableAttribute.between]], Produce a between() clause against the parent object, given the lower and upper range. \n
instrument_class	D								*[[interfaces.MapperProperty.instrument_class]], Hook called by the Mapper to the property to initiate instrumentation of the class attribute managed by this MapperProperty. \n*[[events.MapperEvents.instrument_class]], Receive a class when the mapper is first constructed, before instrumentation is applied to the mapped class. \n
properties.ColumnProperty.Comparator.__lt__	A										<section class="prog__container"><pre><code>__lt__(other)</code></pre>\ninherited from the __lt__() method of ColumnOperators<p>Implement the <code><</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.__lt__
properties.ColumnProperty.Comparator.between	A										<section class="prog__container"><pre><code>between(cleft, cright, symmetric=False)</code></pre>\ninherited from the between() method of ColumnOperators<p>Produce a <code>between()</code> clause against\nthe parent object, given the lower and upper range.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.between
QueryableAttribute	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.attributes.QueryableAttribute(class_, key, impl=None, comparator=None, parententity=None, of_type=None)</code></pre><p>Bases: <code>sqlalchemy.orm.base._MappedAttribute</code>, <code>sqlalchemy.orm.base.InspectionAttr</code>, <code>sqlalchemy.orm.interfaces.PropComparator</code></p><p>Base class for <code>descriptor</code> objects that intercept\nattribute events on behalf of a <code>MapperProperty</code>\nobject.  The actual <code>MapperProperty</code> is accessible\nvia the <code>QueryableAttribute.property</code>\nattribute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute
cascade_iterator	D								*[[properties.ColumnProperty.cascade_iterator]], Iterate through instances related to the given instance for a particular &#8216;cascade&#8217;, starting with this MapperProperty. \n*[[interfaces.MapperProperty.cascade_iterator]], Iterate through instances related to the given instance for a particular &#8216;cascade&#8217;, starting with this MapperProperty. \n*[[descriptor_props.SynonymProperty.cascade_iterator]], Iterate through instances related to the given instance for a particular &#8216;cascade&#8217;, starting with this MapperProperty. \n
after_transaction_end	A										<section class="prog__container"><pre><code>after_transaction_end(session, transaction)</code></pre><p>Execute when the span of a <code>SessionTransaction</code> ends.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_transaction_end')\ndef receive_after_transaction_end(session, transaction):\n    "listen for the 'after_transaction_end' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event differs from <code>after_commit()</code>\nin that it corresponds to all <code>SessionTransaction</code>\nobjects in use, including those for nested transactions\nand subtransactions, and is always matched by a corresponding\n<code>after_transaction_create()</code> event.</p>\n\n<span class="prog__sub">Parameters:</span><p>the target SessionTransaction.</p><p>To detect if this is the outermost\nSessionTransaction, as opposed to a &#8220;subtransaction&#8221; or a\nSAVEPOINT, test that the SessionTransaction.parent attribute\nis None:</p><p>To detect if the SessionTransaction is a SAVEPOINT, use the\nSessionTransaction.nested attribute:</p><ul><li><strong>session</strong> &#8211; the target <code>Session</code>.</li><li><strong>transaction</strong> &#8211; <p>the target <code>SessionTransaction</code>.</p>\n<p>To detect if this is the outermost\n<code>SessionTransaction</code>, as opposed to a &#8220;subtransaction&#8221; or a\nSAVEPOINT, test that the <code>SessionTransaction.parent</code> attribute\nis <code>None</code>:</p>\n<pre><code>@event.listens_for(session, "after_transaction_create")\ndef after_transaction_end(session, transaction):\n    if transaction.parent is None:\n        # work with top-level transaction\n</code></pre>\n<p>To detect if the <code>SessionTransaction</code> is a SAVEPOINT, use the\n<code>SessionTransaction.nested</code> attribute:</p>\n<pre><code>@event.listens_for(session, "after_transaction_create")\ndef after_transaction_end(session, transaction):\n    if transaction.nested:\n        # work with SAVEPOINT transaction\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_transaction_end
pending_to_persistent	A										<section class="prog__container"><pre><code>pending_to_persistent(session, instance)</code></pre><p>Intercept the &#8220;pending to persistent&#8221;&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'pending_to_persistent')\ndef receive_pending_to_persistent(session, instance):\n    "listen for the 'pending_to_persistent' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked within the flush process, and is\nsimilar to scanning the <code>Session.new</code> collection within\nthe <code>SessionEvents.after_flush()</code> event.  However, in this\ncase the object has already been moved to the persistent state\nwhen the event is called.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>session</strong> &#8211; target <code>Session</code></li><li><strong>instance</strong> &#8211; the ORM-mapped instance being operated upon.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.pending_to_persistent
attributes.QueryableAttribute.adapter	A										<section class="prog__container"><pre><code>adapter</code></pre>\ninherited from the adapter attribute of PropComparator<p>Produce a callable that adapts column expressions\nto suit an aliased version of this comparator.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.adapter
adapter	D								*[[properties.ColumnProperty.Comparator.adapter]], Produce a callable that adapts column expressions to suit an aliased version of this comparator. \n*[[interfaces.PropComparator.adapter]], Produce a callable that adapts column expressions to suit an aliased version of this comparator. \n*[[properties.RelationshipProperty.Comparator.adapter]], Produce a callable that adapts column expressions to suit an aliased version of this comparator. \n*[[attributes.QueryableAttribute.adapter]], Produce a callable that adapts column expressions to suit an aliased version of this comparator. \n
interfaces.MapperProperty.set_parent	A										<section class="prog__container"><pre><code>set_parent(parent, init)</code></pre><p>Set the parent mapper that references this MapperProperty.</p><p>This method is overridden by some subclasses to perform extra\nsetup when the mapper is first known.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.set_parent
expression	A										<section class="prog__container"><pre><code>ColumnProperty.expression</code></pre><p>Return the primary column or expression for this ColumnProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.expression
properties.RelationshipProperty.Comparator.distinct	A										<section class="prog__container"><pre><code>distinct()</code></pre>\ninherited from the distinct() method of ColumnOperators<p>Produce a <code>distinct()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.distinct
load	A										<section class="prog__container"><pre><code>load(target, context)</code></pre><p>Receive an object instance after it has been created via\n<code>__new__</code>, and after initial attribute population has\noccurred.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'load')\ndef receive_load(target, context):\n    "listen for the 'load' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This typically occurs when the instance is created based on\nincoming result rows, and is only called once for that\ninstance&#8217;s lifetime.</p><p>Note that during a result-row load, this method is called upon\nthe first row received for this instance.  Note that some\nattributes and collections may or may not be loaded or even\ninitialized, depending on what&#8217;s present in the result rows.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the mapped instance.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li><li><strong>context</strong> &#8211; the <code>QueryContext</code> corresponding to the\ncurrent <code>Query</code> in progress.  This argument may be\n<code>None</code> if the load does not correspond to a <code>Query</code>,\nsuch as during <code>Session.merge()</code>.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.load
attributes.QueryableAttribute.has	A										<section class="prog__container"><pre><code>has(criterion=None, **kwargs)</code></pre>\ninherited from the has() method of PropComparator<p>Return true if this element references a member which meets the\ngiven criterion.</p><p>The usual implementation of <code>has()</code> is\n<code>RelationshipProperty.Comparator.has()</code>.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>criterion</strong> &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.</li><li><strong>**kwargs</strong> &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.has
properties.ColumnProperty.Comparator	A										<section class="prog__container"><pre><code>class Comparator(prop, parentmapper, adapt_to_entity=None)</code></pre><p>Bases: <code>sqlalchemy.util.langhelpers.MemoizedSlots</code>, <code>sqlalchemy.orm.interfaces.PropComparator</code></p><p>Produce boolean, comparison, and other operators for\n<code>ColumnProperty</code> attributes.</p><p>See the documentation for <code>PropComparator</code> for a brief\noverview.</p><p>See also:</p><p><code>PropComparator</code></p><p><code>ColumnOperators</code></p><p><code>Redefining and Creating New Operators</code></p><p><code>TypeEngine.comparator_factory</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator
before_commit	A										<section class="prog__container"><pre><code>before_commit(session)</code></pre><p>Execute before commit is called.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'before_commit')\ndef receive_before_commit(session):\n    "listen for the 'before_commit' event"\n\n    # ... (event handling logic) ...\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p><strong>session</strong></p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.before_commit
post_instrument_class	D								*[[interfaces.MapperProperty.post_instrument_class]], Perform instrumentation adjustments that need to occur after init() has completed. \n*[[descriptor_props.SynonymProperty.post_instrument_class]], Perform instrumentation adjustments that need to occur after init() has completed. \n
table	A										<section class="prog__container"><pre><code>RelationshipProperty.table</code></pre><p>Return the selectable linked to this\n<code>RelationshipProperty</code> object&#8217;s target\n<code>Mapper</code>.</p>\nDeprecated since version 0.7: Use .target\n</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.table
descriptor_props.SynonymProperty.setup	A										<section class="prog__container"><pre><code>setup(context, entity, path, adapter, **kwargs)</code></pre>\ninherited from the setup() method of MapperProperty<p>Called by Query for the purposes of constructing a SQL statement.</p><p>Each MapperProperty associated with the target mapper processes the\nstatement referenced by the query context, adding columns and/or\ncriterion as appropriate.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.setup
__set__	A										<section class="prog__container"><pre><code>__set__(instance, value)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.InstrumentedAttribute.__set__
MANYTOMANY	A										<section class="prog__container"><pre><code>sqlalchemy.orm.interfaces.MANYTOMANY = symbol('MANYTOMANY')</code></pre><p>Indicates the many-to-many direction for a <code>relationship()</code>.</p><p>This symbol is typically used by the internals but may be exposed within\ncertain API features.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MANYTOMANY
interfaces.PropComparator.__ne__	A										<section class="prog__container"><pre><code>__ne__(other)</code></pre>\ninherited from the __ne__() method of ColumnOperators<p>Implement the <code>!=</code> operator.</p><p>In a column context, produces the clause <code>None</code>.\nIf the target is <code>None</code>, produces <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.__ne__
notlike	D								*[[properties.ColumnProperty.Comparator.notlike]], implement the NOT LIKE operator. \n*[[interfaces.PropComparator.notlike]], implement the NOT LIKE operator. \n*[[properties.RelationshipProperty.Comparator.notlike]], implement the NOT LIKE operator. \n*[[attributes.QueryableAttribute.notlike]], implement the NOT LIKE operator. \n
before_update	A										<section class="prog__container"><pre><code>before_update(mapper, connection, target)</code></pre><p>Receive an object instance before an UPDATE statement\nis emitted corresponding to that instance.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'before_update')\ndef receive_before_update(mapper, connection, target):\n    "listen for the 'before_update' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to modify local, non-object related\nattributes on the instance before an UPDATE occurs, as well\nas to emit additional SQL statements on the given\nconnection.</p><p>This method is called for all instances that are\nmarked as &#8220;dirty&#8221;, even those which have no net changes\nto their column-based attributes. An object is marked\nas dirty when any of its column-based attributes have a\n&#8220;set attribute&#8221; operation called or when any of its\ncollections are modified. If, at update time, no\ncolumn-based attributes have any net changes, no UPDATE\nstatement will be issued. This means that an instance\nbeing sent to <code>before_update()</code> is\nnot a guarantee that an UPDATE statement will be\nissued, although you can affect the outcome here by\nmodifying attributes so that a net change in value does\nexist.</p><p>To detect if the column-based attributes on the object have net\nchanges, and will therefore generate an UPDATE statement, use\n<code>None</code>.</p><p>The event is often called for a batch of objects of the\nsame class before their UPDATE statements are emitted at\nonce in a later step. In the extremely rare case that\nthis is not desirable, the <code>mapper()</code> can be\nconfigured with <code>batch=False</code>, which will cause\nbatches of instances to be broken up into individual\n(and more poorly performing) event->persist->event\nsteps.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>mapper</strong> &#8211; the <code>Mapper</code> which is the target\nof this event.</li><li><strong>connection</strong> &#8211; the <code>Connection</code> being used to\nemit UPDATE statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.</li><li><strong>target</strong> &#8211; the mapped instance being persisted.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li></ul>\n\n<span class="prog__sub">Returns:</span><p>No return value is supported by this event.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.before_update
InstanceEvents	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.events.InstanceEvents</code></pre><p>Bases: <code>sqlalchemy.event.base.Events</code></p><p>Define events specific to object lifecycle.</p><p>e.g.:</p><pre><code>from sqlalchemy import event\n\ndef my_load_listener(target, context):\n    print "on load!"\n\nevent.listen(SomeClass, 'load', my_load_listener)\n</code></pre><p>Available targets include:</p><ul><li>mapped classes</li><li>unmapped superclasses of mapped or to-be-mapped classes\n(using the <code>propagate=True</code> flag)</li><li><code>Mapper</code> objects</li><li>the <code>Mapper</code> class itself and the <code>mapper()</code>\nfunction indicate listening for all mappers.</li></ul><p>Instance events are closely related to mapper events, but\nare more specific to the instance and its instrumentation,\nrather than its system of persistence.</p><p>When using <code>InstanceEvents</code>, several modifiers are\navailable to the <code>event.listen()</code> function.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>propagate=False</strong> &#8211; When True, the event listener should\nbe applied to all inheriting classes as well as the\nclass which is the target of this listener.</li><li><strong>raw=False</strong> &#8211; When True, the &#8220;target&#8221; argument passed\nto applicable event listener functions will be the\ninstance&#8217;s <code>InstanceState</code> management\nobject, rather than the mapped instance itself.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents
itervalues	A										<section class="prog__container"><pre><code>itervalues() &#8594; an iterator over the values of D</code></pre>\ninherited from the itervalues() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.itervalues
interfaces.MapperProperty.cascade_iterator	A										<section class="prog__container"><pre><code>cascade_iterator(type_, state, visited_instances=None, halt_on=None)</code></pre><p>Iterate through instances related to the given instance for\na particular &#8216;cascade&#8217;, starting with this MapperProperty.</p><p>Return an iterator3-tuples (instance, mapper, state).</p><p>Note that the &#8216;cascade&#8217; collection on this MapperProperty is\nchecked first for the given type before cascade_iterator is called.</p><p>This method typically only applies to RelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.cascade_iterator
set_parent	D								*[[properties.ColumnProperty.set_parent]], Set the parent mapper that references this MapperProperty. \n*[[interfaces.MapperProperty.set_parent]], Set the parent mapper that references this MapperProperty. \n*[[properties.RelationshipProperty.set_parent]], Set the parent mapper that references this MapperProperty. \n
state_getter	A										<section class="prog__container"><pre><code>state_getter()</code></pre><p>Return a (instance) -> InstanceState callable.</p><p>&#8220;state getter&#8221; callables should raise either KeyError or\nAttributeError if no InstanceState could be found for the\ninstance.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.state_getter
SessionEvents	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.events.SessionEvents</code></pre><p>Bases: <code>sqlalchemy.event.base.Events</code></p><p>Define events specific to <code>Session</code> lifecycle.</p><p>e.g.:</p><pre><code>from sqlalchemy import event\nfrom sqlalchemy.orm import sessionmaker\n\ndef my_before_commit(session):\n    print "before commit!"\n\nSession = sessionmaker()\n\nevent.listen(Session, "before_commit", my_before_commit)\n</code></pre><p>The <code>listen()</code> function will accept\n<code>Session</code> objects as well as the return result\nof <code>sessionmaker()</code> and <code>scoped_session()</code>.</p><p>Additionally, it accepts the <code>Session</code> class which\nwill apply listeners to all <code>Session</code> instances\nglobally.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents
properties.ColumnProperty.Comparator.isnot	A										<section class="prog__container"><pre><code>isnot(other)</code></pre>\ninherited from the isnot() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Normally, <code>None</code> is generated automatically when comparing to a\nvalue of <code>None</code>, which resolves to <code>NULL</code>.  However, explicit\nusage of <code>None</code> may be desirable if comparing to boolean values\non certain platforms.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.isnot
extension_type	D								*[[properties.ColumnProperty.extension_type]], \n*[[base.InspectionAttr.extension_type]], The extension type, if any. Defaults to interfaces.NOT_EXTENSION \n*[[properties.RelationshipProperty.extension_type]], \n*[[descriptor_props.SynonymProperty.extension_type]], \n*[[attributes.QueryableAttribute.extension_type]], \n
attributes.QueryableAttribute.nullslast	A										<section class="prog__container"><pre><code>nullslast()</code></pre>\ninherited from the nullslast() method of ColumnOperators<p>Produce a <code>nullslast()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.nullslast
interfaces.PropComparator.like	A										<section class="prog__container"><pre><code>like(other, escape=None)</code></pre>\ninherited from the like() method of ColumnOperators<p>Implement the <code>like</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p><p>E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.like("%foobar%"))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>optional escape character, renders the ESCAPE\nkeyword, e.g.:</p><ul><li><strong>other</strong> &#8211; expression to be compared</li><li><strong>escape</strong> &#8211; <p>optional escape character, renders the <code>ESCAPE</code>\nkeyword, e.g.:</p>\n<pre><code>somecolumn.like("foo/%bar", escape="/")\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.like
__eq__	D								*[[properties.ColumnProperty.Comparator.__eq__]], Implement the == operator. \n*[[interfaces.PropComparator.__eq__]], Implement the == operator. \n*[[properties.RelationshipProperty.Comparator.__eq__]], Implement the == operator. \n*[[attributes.QueryableAttribute.__eq__]], Implement the == operator. \n
is_deleted	A										<section class="prog__container"><pre><code>is_deleted(state)</code></pre><p>return true if the given state is marked as deleted\nwithin this uowtransaction.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.is_deleted
attributes.QueryableAttribute.nullsfirst	A										<section class="prog__container"><pre><code>nullsfirst()</code></pre>\ninherited from the nullsfirst() method of ColumnOperators<p>Produce a <code>nullsfirst()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.nullsfirst
value	A										<section class="prog__container"><pre><code>value</code></pre><p>Return the value of this attribute.</p><p>This operation is equivalent to accessing the object&#8217;s\nattribute directly or via <code>getattr()</code>, and will fire\noff any pending loader callables if needed.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState.value
interfaces.PropComparator.notin_	A										<section class="prog__container"><pre><code>notin_(other)</code></pre>\ninherited from the notin_() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.in_()</code>, i.e. <code>~x.in_(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.notin_
property	A										<section class="prog__container"><pre><code>property</code></pre><p>Return the <code>MapperProperty</code> associated with this\n<code>QueryableAttribute</code>.</p><p>Return values here will commonly be instances of\n<code>ColumnProperty</code> or <code>RelationshipProperty</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.property
attributes.QueryableAttribute.any	A										<section class="prog__container"><pre><code>any(criterion=None, **kwargs)</code></pre>\ninherited from the any() method of PropComparator<p>Return true if this collection contains any member that meets the\ngiven criterion.</p><p>The usual implementation of <code>any()</code> is\n<code>RelationshipProperty.Comparator.any()</code>.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>criterion</strong> &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.</li><li><strong>**kwargs</strong> &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.any
attributes.QueryableAttribute.between	A										<section class="prog__container"><pre><code>between(cleft, cright, symmetric=False)</code></pre>\ninherited from the between() method of ColumnOperators<p>Produce a <code>between()</code> clause against\nthe parent object, given the lower and upper range.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.between
endswith	D								*[[properties.ColumnProperty.Comparator.endswith]], Implement the &#8216;endswith&#8217; operator. \n*[[interfaces.PropComparator.endswith]], Implement the &#8216;endswith&#8217; operator. \n*[[properties.RelationshipProperty.Comparator.endswith]], Implement the &#8216;endswith&#8217; operator. \n*[[attributes.QueryableAttribute.endswith]], Implement the &#8216;endswith&#8217; operator. \n
__init__	D								*[[properties.ColumnProperty.__init__]], Construct a new ColumnProperty object. \n*[[properties.ComparableProperty.__init__]], Construct a new ComparableProperty object. \n*[[descriptor_props.CompositeProperty.__init__]], Construct a new CompositeProperty object. \n*[[properties.RelationshipProperty.Comparator.__init__]], Construction of RelationshipProperty.Comparator is internal to the ORM&#8217;s attribute mechanics. \n*[[properties.RelationshipProperty.__init__]], Construct a new RelationshipProperty object. \n*[[descriptor_props.SynonymProperty.__init__]], Construct a new SynonymProperty object. \n
interfaces.PropComparator.op	A										<section class="prog__container"><pre><code>op(opstring, precedence=0, is_comparison=False)</code></pre>\ninherited from the op() method of Operators<p>produce a generic operator function.</p><p>e.g.:</p><pre><code>somecolumn.op("*")(5)\n</code></pre><p>produces:</p><pre><code>somecolumn * 5\n</code></pre><p>This function can also be used to make bitwise operators explicit. For\nexample:</p><pre><code>somecolumn.op('&')(0xff)\n</code></pre><p>is a bitwise AND of the value in <code>somecolumn</code>.</p>\n\n<span class="prog__sub">Parameters:</span><p>precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of 0 is lower than all\noperators except for the comma (,) and AS operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.</p><p>New in version 0.8: - added the &#8216;precedence&#8217; argument.</p><p>if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like ==, >, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.</p><p>New in version 0.9.2: - added the\nOperators.op.is_comparison flag.</p><ul><li><strong>operator</strong> &#8211; a string which will be output as the infix operator\nbetween this element and the expression passed to the\ngenerated function.</li><li><strong>precedence</strong> &#8211; <p>precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of <code>0</code> is lower than all\noperators except for the comma (<code>,</code>) and <code>AS</code> operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.</p>\n\n</li><li><strong>is_comparison</strong> &#8211; <p>if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like <code>==</code>, <code>></code>, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.</p>\n\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.op
attributes.QueryableAttribute.info	A										<section class="prog__container"><pre><code>info</code></pre><p>Return the &#8216;info&#8217; dictionary for the underlying SQL element.</p><p>The behavior here is as follows:</p><ul><li>If the attribute is a column-mapped property, i.e.\n<code>ColumnProperty</code>, which is mapped directly\nto a schema-level <code>Column</code> object, this attribute\nwill return the <code>SchemaItem.info</code> dictionary associated\nwith the core-level <code>Column</code> object.</li><li>If the attribute is a <code>ColumnProperty</code> but is mapped to\nany other kind of SQL expression other than a <code>Column</code>,\nthe attribute will refer to the <code>MapperProperty.info</code>\ndictionary associated directly with the <code>ColumnProperty</code>,\nassuming the SQL expression itself does not have its own <code>.info</code>\nattribute (which should be the case, unless a user-defined SQL\nconstruct has defined one).</li><li>If the attribute refers to any other kind of\n<code>MapperProperty</code>, including <code>RelationshipProperty</code>,\nthe attribute will refer to the <code>MapperProperty.info</code>\ndictionary associated with that <code>MapperProperty</code>.</li><li>To access the <code>MapperProperty.info</code> dictionary of the\n<code>MapperProperty</code> unconditionally, including for a\n<code>ColumnProperty</code> that&#8217;s associated directly with a\n<code>schema.Column</code>, the attribute can be referred to using\n<code>QueryableAttribute.property</code> attribute, as\n<code>MyClass.someattribute.property.info</code>.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.info
attributes.QueryableAttribute.extension_type	A										<section class="prog__container"><pre><code>extension_type = symbol('NOT_EXTENSION')</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.extension_type
keys	A										<section class="prog__container"><pre><code>keys() &#8594; list of D's keys</code></pre>\ninherited from the keys() method of dict</section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.keys
NO_STATE	A										<section class="prog__container"><pre><code>sqlalchemy.orm.exc.NO_STATE = (<type 'exceptions.AttributeError'>, <type 'exceptions.KeyError'>)</code></pre><p>Exception types that may be raised by instrumentation implementations.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.NO_STATE
properties.RelationshipProperty.Comparator.in_	A										<section class="prog__container"><pre><code>in_(other)</code></pre><p>Produce an IN clause - this is not implemented\nfor <code>relationship()</code>-based attributes at this time.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.in_
properties.RelationshipProperty.init	A										<section class="prog__container"><pre><code>RelationshipProperty.init()</code></pre>\ninherited from the init() method of MapperProperty<p>Called after all mappers are created to assemble\nrelationships between mappers and perform other post-mapper-creation\ninitialization steps.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.init
unpickle	A										<section class="prog__container"><pre><code>unpickle(target, state_dict)</code></pre><p>Receive an object instance after its associated state has\nbeen unpickled.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'unpickle')\ndef receive_unpickle(target, state_dict):\n    "listen for the 'unpickle' event"\n\n    # ... (event handling logic) ...\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the mapped instance.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li><li><strong>state_dict</strong> &#8211; the dictionary sent to\n<code>InstanceState.__setstate__</code>, containing the state\ndictionary which was pickled.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.unpickle
properties.ColumnProperty.Comparator.nullsfirst	A										<section class="prog__container"><pre><code>nullsfirst()</code></pre>\ninherited from the nullsfirst() method of ColumnOperators<p>Produce a <code>nullsfirst()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.nullsfirst
properties.ColumnProperty.Comparator.of_type	A										<section class="prog__container"><pre><code>of_type(class_)</code></pre>\ninherited from the of_type() method of PropComparator<p>Redefine this object in terms of a polymorphic subclass.</p><p>Returns a new PropComparator from which further criterion can be\nevaluated.</p><p>e.g.:</p><pre><code>query.join(Company.employees.of_type(Engineer)).\\n   filter(Engineer.name=='foo')\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p><strong>class_</strong></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.of_type
interfaces.PropComparator.is_distinct_from	A										<section class="prog__container"><pre><code>is_distinct_from(other)</code></pre>\ninherited from the is_distinct_from() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Renders &#8220;a IS DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS NOT b&#8221;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.is_distinct_from
identity	A										<section class="prog__container"><pre><code>identity</code></pre><p>Return the mapped identity of the mapped object.\nThis is the primary key identity as persisted by the ORM\nwhich can always be passed directly to\n<code>Query.get()</code>.</p><p>Returns <code>None</code> if the object has no primary key identity.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.identity
class_instrument	A										<section class="prog__container"><pre><code>class_instrument(cls)</code></pre><p>Called after the given class is instrumented.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeBaseClass, 'class_instrument')\ndef receive_class_instrument(cls):\n    "listen for the 'class_instrument' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>To get at the <code>ClassManager</code>, use\n<code>manager_of_class()</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstrumentationEvents.class_instrument
nullslast	D								*[[properties.ColumnProperty.Comparator.nullslast]], Produce a nullslast() clause against the parent object. \n*[[interfaces.PropComparator.nullslast]], Produce a nullslast() clause against the parent object. \n*[[properties.RelationshipProperty.Comparator.nullslast]], Produce a nullslast() clause against the parent object. \n*[[attributes.QueryableAttribute.nullslast]], Produce a nullslast() clause against the parent object. \n
properties.ColumnProperty.Comparator.__le__	A										<section class="prog__container"><pre><code>__le__(other)</code></pre>\ninherited from the __le__() method of ColumnOperators<p>Implement the <code><=</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.__le__
attributes.QueryableAttribute.ilike	A										<section class="prog__container"><pre><code>ilike(other, escape=None)</code></pre>\ninherited from the ilike() method of ColumnOperators<p>Implement the <code>ilike</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p><p>E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.ilike("%foobar%"))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>optional escape character, renders the ESCAPE\nkeyword, e.g.:</p><ul><li><strong>other</strong> &#8211; expression to be compared</li><li><strong>escape</strong> &#8211; <p>optional escape character, renders the <code>ESCAPE</code>\nkeyword, e.g.:</p>\n<pre><code>somecolumn.ilike("foo/%bar", escape="/")\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.ilike
properties.RelationshipProperty.Comparator.any	A										<section class="prog__container"><pre><code>any(criterion=None, **kwargs)</code></pre><p>Produce an expression that tests a collection against\nparticular criterion, using EXISTS.</p><p>An expression like:</p><pre><code>session.query(MyClass).filter(\n    MyClass.somereference.any(SomeRelated.x==2)\n)\n</code></pre><p>Will produce a query like:</p><pre><code>SELECT * FROM my_table WHERE\nEXISTS (SELECT 1 FROM related WHERE related.my_id=my_table.id\nAND related.x=2)\n</code></pre><p>Because <code>any()</code> uses\na correlated subquery, its performance is not nearly as\ngood when compared against large target tables as that of\nusing a join.</p><p><code>any()</code> is particularly\nuseful for testing for empty collections:</p><pre><code>session.query(MyClass).filter(\n    ~MyClass.somereference.any()\n)\n</code></pre><p>will produce:</p><pre><code>SELECT * FROM my_table WHERE\nNOT EXISTS (SELECT 1 FROM related WHERE\nrelated.my_id=my_table.id)\n</code></pre><p><code>any()</code> is only\nvalid for collections, i.e. a <code>relationship()</code>\nthat has <code>uselist=True</code>.  For scalar references,\nuse <code>has()</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.any
properties.RelationshipProperty.Comparator.notlike	A										<section class="prog__container"><pre><code>notlike(other, escape=None)</code></pre>\ninherited from the notlike() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.like()</code>, i.e. <code>~x.like(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.notlike
attributes.QueryableAttribute.notilike	A										<section class="prog__container"><pre><code>notilike(other, escape=None)</code></pre>\ninherited from the notilike() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.ilike()</code>, i.e. <code>~x.ilike(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.notilike
any_	D								*[[properties.ColumnProperty.Comparator.any_]], Produce a any_() clause against the parent object. \n*[[interfaces.PropComparator.any_]], Produce a any_() clause against the parent object. \n*[[properties.RelationshipProperty.Comparator.any_]], Produce a any_() clause against the parent object. \n*[[attributes.QueryableAttribute.any_]], Produce a any_() clause against the parent object. \n
descriptor_props.CompositeProperty.__init__	A										<section class="prog__container"><pre><code>CompositeProperty.__init__(class_, *attrs, **kwargs)</code></pre><p>Construct a new <code>CompositeProperty</code> object.</p><p>This constructor is mirrored as a public API function; see <code>composite()</code> for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty.__init__
is_attribute	A										<section class="prog__container"><pre><code>is_attribute = False</code></pre><p>True if this object is a Python <code>descriptor</code>.</p><p>This can refer to one of many types.   Usually a\n<code>QueryableAttribute</code> which handles attributes events on behalf\nof a <code>MapperProperty</code>.   But can also be an extension type\nsuch as <code>AssociationProxy</code> or <code>hybrid_property</code>.\nThe <code>InspectionAttr.extension_type</code> will refer to a constant\nidentifying the specific subtype.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_attribute
properties.ColumnProperty.Comparator.__eq__	A										<section class="prog__container"><pre><code>__eq__(other)</code></pre>\ninherited from the __eq__() method of ColumnOperators<p>Implement the <code>==</code> operator.</p><p>In a column context, produces the clause <code>None</code>.\nIf the target is <code>None</code>, produces <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.__eq__
expired_attributes	A										<section class="prog__container"><pre><code>expired_attributes = None</code></pre><p>The set of keys which are &#8216;expired&#8217; to be loaded by\nthe manager&#8217;s deferred scalar loader, assuming no pending\nchanges.</p><p>see also the <code>unmodified</code> collection which is intersected\nagainst this set when a refresh operation occurs.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.expired_attributes
__lt__	D								*[[instrumentation.ClassManager.__lt__]], x.__lt__(y) <==> x<y \n*[[properties.ColumnProperty.Comparator.__lt__]], Implement the < operator. \n*[[interfaces.PropComparator.__lt__]], Implement the < operator. \n*[[properties.RelationshipProperty.Comparator.__lt__]], Implement the < operator. \n*[[attributes.QueryableAttribute.__lt__]], Implement the < operator. \n
after_commit	A										<section class="prog__container"><pre><code>after_commit(session)</code></pre><p>Execute after a commit has occurred.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_commit')\ndef receive_after_commit(session):\n    "listen for the 'after_commit' event"\n\n    # ... (event handling logic) ...\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p><strong>session</strong></p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_commit
before_attach	A										<section class="prog__container"><pre><code>before_attach(session, instance)</code></pre><p>Execute before an instance is attached to a session.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'before_attach')\ndef receive_before_attach(session, instance):\n    "listen for the 'before_attach' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This is called before an add, delete or merge causes\nthe object to be part of the session.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.before_attach
properties.RelationshipProperty.extension_type	A										<section class="prog__container"><pre><code>RelationshipProperty.extension_type = symbol('NOT_EXTENSION')</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.extension_type
AttributeState	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.state.AttributeState(state, key)</code></pre><p>Provide an inspection interface corresponding\nto a particular attribute on a particular mapped object.</p><p>The <code>AttributeState</code> object is accessed\nvia the <code>InstanceState.attrs</code> collection\nof a particular <code>InstanceState</code>:</p><pre><code>from sqlalchemy import inspect\n\ninsp = inspect(some_mapped_object)\nattr_state = insp.attrs.some_attribute\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState
has	D								*[[properties.ColumnProperty.Comparator.has]], Return true if this element references a member which meets the given criterion. \n*[[interfaces.PropComparator.has]], Return true if this element references a member which meets the given criterion. \n*[[properties.RelationshipProperty.Comparator.has]], Produce an expression that tests a scalar reference against particular criterion, using EXISTS. \n*[[attributes.QueryableAttribute.has]], Return true if this element references a member which meets the given criterion. \n
match	D								*[[properties.ColumnProperty.Comparator.match]], Implements a database-specific &#8216;match&#8217; operator. \n*[[interfaces.PropComparator.match]], Implements a database-specific &#8216;match&#8217; operator. \n*[[properties.RelationshipProperty.Comparator.match]], Implements a database-specific &#8216;match&#8217; operator. \n*[[attributes.QueryableAttribute.match]], Implements a database-specific &#8216;match&#8217; operator. \n
IdentityMap	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.identity.IdentityMap</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.identity.IdentityMap
manage	A										<section class="prog__container"><pre><code>manage()</code></pre><p>Mark this instance as the manager for its class.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.manage
attributes.QueryableAttribute.op	A										<section class="prog__container"><pre><code>op(opstring, precedence=0, is_comparison=False)</code></pre>\ninherited from the op() method of Operators<p>produce a generic operator function.</p><p>e.g.:</p><pre><code>somecolumn.op("*")(5)\n</code></pre><p>produces:</p><pre><code>somecolumn * 5\n</code></pre><p>This function can also be used to make bitwise operators explicit. For\nexample:</p><pre><code>somecolumn.op('&')(0xff)\n</code></pre><p>is a bitwise AND of the value in <code>somecolumn</code>.</p>\n\n<span class="prog__sub">Parameters:</span><p>precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of 0 is lower than all\noperators except for the comma (,) and AS operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.</p><p>New in version 0.8: - added the &#8216;precedence&#8217; argument.</p><p>if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like ==, >, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.</p><p>New in version 0.9.2: - added the\nOperators.op.is_comparison flag.</p><ul><li><strong>operator</strong> &#8211; a string which will be output as the infix operator\nbetween this element and the expression passed to the\ngenerated function.</li><li><strong>precedence</strong> &#8211; <p>precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of <code>0</code> is lower than all\noperators except for the comma (<code>,</code>) and <code>AS</code> operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.</p>\n\n</li><li><strong>is_comparison</strong> &#8211; <p>if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like <code>==</code>, <code>></code>, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.</p>\n\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.op
pop	A										<section class="prog__container"><pre><code>pop(k[, d]) &#8594; v, remove specified key and return the corresponding value.</code></pre>\ninherited from the pop() method of dict<p>If key is not found, d is returned if given, otherwise KeyError is raised</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.pop
desc	D								*[[properties.ColumnProperty.Comparator.desc]], Produce a desc() clause against the parent object. \n*[[interfaces.PropComparator.desc]], Produce a desc() clause against the parent object. \n*[[properties.RelationshipProperty.Comparator.desc]], Produce a desc() clause against the parent object. \n*[[attributes.QueryableAttribute.desc]], Produce a desc() clause against the parent object. \n
like	D								*[[properties.ColumnProperty.Comparator.like]], Implement the like operator. \n*[[interfaces.PropComparator.like]], Implement the like operator. \n*[[properties.RelationshipProperty.Comparator.like]], Implement the like operator. \n*[[attributes.QueryableAttribute.like]], Implement the like operator. \n
RelationshipProperty	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.properties.RelationshipProperty(argument, secondary=None, primaryjoin=None, secondaryjoin=None, foreign_keys=None, uselist=None, order_by=False, backref=None, back_populates=None, post_update=False, cascade=False, extension=None, viewonly=False, lazy=True, collection_class=None, passive_deletes=False, passive_updates=True, remote_side=None, enable_typechecks=True, join_depth=None, comparator_factory=None, single_parent=False, innerjoin=False, distinct_target_key=None, doc=None, active_history=False, cascade_backrefs=True, load_on_pending=False, bake_queries=True, _local_remote_pairs=None, query_class=None, info=None)</code></pre><p>Bases: <code>sqlalchemy.orm.interfaces.StrategizedProperty</code></p><p>Describes an object property that holds a single item or list\nof items that correspond to a related database table.</p><p>Public constructor is the <code>orm.relationship()</code> function.</p><p>See also:</p><p><code>Relationship Configuration</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty
properties.ColumnProperty.Comparator.has	A										<section class="prog__container"><pre><code>has(criterion=None, **kwargs)</code></pre>\ninherited from the has() method of PropComparator<p>Return true if this element references a member which meets the\ngiven criterion.</p><p>The usual implementation of <code>has()</code> is\n<code>RelationshipProperty.Comparator.has()</code>.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>criterion</strong> &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.</li><li><strong>**kwargs</strong> &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.has
interfaces.PropComparator.nullsfirst	A										<section class="prog__container"><pre><code>nullsfirst()</code></pre>\ninherited from the nullsfirst() method of ColumnOperators<p>Produce a <code>nullsfirst()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.nullsfirst
descriptor_props.SynonymProperty.extension_type	A										<section class="prog__container"><pre><code>extension_type = symbol('NOT_EXTENSION')</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.extension_type
properties.RelationshipProperty.Comparator.__lt__	A										<section class="prog__container"><pre><code>__lt__(other)</code></pre>\ninherited from the __lt__() method of ColumnOperators<p>Implement the <code><</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__lt__
descriptor_props.SynonymProperty.do_init	A										<section class="prog__container"><pre><code>do_init()</code></pre>\ninherited from the do_init() method of MapperProperty<p>Perform subclass-specific initialization post-mapper-creation\nsteps.</p><p>This is a template method called by the <code>MapperProperty</code>\nobject&#8217;s init() method.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.do_init
SynonymProperty	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.descriptor_props.SynonymProperty(name, map_column=None, descriptor=None, comparator_factory=None, doc=None, info=None)</code></pre><p>Bases: <code>sqlalchemy.orm.descriptor_props.DescriptorProperty</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty
has_parent	A										<section class="prog__container"><pre><code>has_parent(state, key, optimistic=False)</code></pre><p>TODO</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.has_parent
interfaces.PropComparator.operate	A										<section class="prog__container"><pre><code>operate(op, *other, **kwargs)</code></pre>\ninherited from the operate() method of Operators<p>Operate on an argument.</p><p>This is the lowest level of operation, raises\n<code>NotImplementedError</code> by default.</p><p>Overriding this on a subclass can allow common\nbehavior to be applied to all operations.\nFor example, overriding <code>ColumnOperators</code>\nto apply <code>func.lower()</code> to the left and right\nside:</p><pre><code>class MyComparator(ColumnOperators):\n    def operate(self, op, other):\n        return op(func.lower(self), func.lower(other))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>op</strong> &#8211; Operator callable.</li><li><strong>*other</strong> &#8211; the &#8216;other&#8217; side of the operation. Will\nbe a single scalar for most operations.</li><li><strong>**kwargs</strong> &#8211; modifiers.  These may be passed by special\noperators such as <code>ColumnOperators.contains()</code>.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.operate
properties.RelationshipProperty.Comparator.__init__	A										<section class="prog__container"><pre><code>__init__(prop, parentmapper, adapt_to_entity=None, of_type=None)</code></pre><p>Construction of <code>RelationshipProperty.Comparator</code>\nis internal to the ORM&#8217;s attribute mechanics.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__init__
properties.ColumnProperty.class_attribute	A										<section class="prog__container"><pre><code>ColumnProperty.class_attribute</code></pre>\ninherited from the class_attribute attribute of MapperProperty<p>Return the class-bound descriptor corresponding to this\n<code>MapperProperty</code>.</p><p>This is basically a <code>getattr()</code> call:</p><pre><code>return getattr(self.parent.class_, self.key)\n</code></pre><p>I.e. if this <code>MapperProperty</code> were named <code>addresses</code>,\nand the class to which it is mapped is <code>User</code>, this sequence\nis possible:</p><pre><code>>>> from sqlalchemy import inspect\n>>> mapper = inspect(User)\n>>> addresses_property = mapper.attrs.addresses\n>>> addresses_property.class_attribute is User.addresses\nTrue\n>>> User.addresses.property is addresses_property\nTrue\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.class_attribute
finalize_flush_changes	A										<section class="prog__container"><pre><code>finalize_flush_changes()</code></pre><p>mark processed objects as clean / deleted after a successful\nflush().</p><p>this method is called within the flush() method after the\nexecute() method has succeeded and the transaction has been committed.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.finalize_flush_changes
ilike	D								*[[properties.ColumnProperty.Comparator.ilike]], Implement the ilike operator. \n*[[interfaces.PropComparator.ilike]], Implement the ilike operator. \n*[[properties.RelationshipProperty.Comparator.ilike]], Implement the ilike operator. \n*[[attributes.QueryableAttribute.ilike]], Implement the ilike operator. \n
interfaces.PropComparator.isnot_distinct_from	A										<section class="prog__container"><pre><code>isnot_distinct_from(other)</code></pre>\ninherited from the isnot_distinct_from() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Renders &#8220;a IS NOT DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS b&#8221;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.isnot_distinct_from
ClassManager	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.instrumentation.ClassManager(class_)</code></pre><p>Bases: <code>__builtin__.dict</code></p><p>tracks state information at the class level.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager
interfaces.PropComparator.has	A										<section class="prog__container"><pre><code>has(criterion=None, **kwargs)</code></pre><p>Return true if this element references a member which meets the\ngiven criterion.</p><p>The usual implementation of <code>has()</code> is\n<code>RelationshipProperty.Comparator.has()</code>.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>criterion</strong> &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.</li><li><strong>**kwargs</strong> &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.has
deleted_to_detached	A										<section class="prog__container"><pre><code>deleted_to_detached(session, instance)</code></pre><p>Intercept the &#8220;deleted to detached&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'deleted_to_detached')\ndef receive_deleted_to_detached(session, instance):\n    "listen for the 'deleted_to_detached' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked when a deleted object is evicted\nfrom the session.   The typical case when this occurs is when\nthe transaction for a <code>Session</code> in which the object\nwas deleted is committed; the object moves from the deleted\nstate to the detached state.</p><p>It is also invoked for objects that were deleted in a flush\nwhen the <code>Session.expunge_all()</code> or <code>Session.close()</code>\nevents are called, as well as if the object is individually\nexpunged from its deleted state via <code>Session.expunge()</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.deleted_to_detached
__ne__	D								*[[instrumentation.ClassManager.__ne__]], x.__ne__(y) <==> x!=y \n*[[properties.ColumnProperty.Comparator.__ne__]], Implement the != operator. \n*[[interfaces.PropComparator.__ne__]], Implement the != operator. \n*[[properties.RelationshipProperty.Comparator.__ne__]], Implement the != operator. \n*[[attributes.QueryableAttribute.__ne__]], Implement the != operator. \n
properties.RelationshipProperty.Comparator.__le__	A										<section class="prog__container"><pre><code>__le__(other)</code></pre>\ninherited from the __le__() method of ColumnOperators<p>Implement the <code><=</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__le__
deleted	A										<section class="prog__container"><pre><code>deleted</code></pre><p>Return true if the object is <code>deleted</code>.</p><p>An object that is in the deleted state is guaranteed to\nnot be within the <code>Session.identity_map</code> of its parent\n<code>Session</code>; however if the session&#8217;s transaction is rolled\nback, the object will be restored to the persistent state and\nthe identity map.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.deleted
properties.RelationshipProperty.Comparator.op	A										<section class="prog__container"><pre><code>op(opstring, precedence=0, is_comparison=False)</code></pre>\ninherited from the op() method of Operators<p>produce a generic operator function.</p><p>e.g.:</p><pre><code>somecolumn.op("*")(5)\n</code></pre><p>produces:</p><pre><code>somecolumn * 5\n</code></pre><p>This function can also be used to make bitwise operators explicit. For\nexample:</p><pre><code>somecolumn.op('&')(0xff)\n</code></pre><p>is a bitwise AND of the value in <code>somecolumn</code>.</p>\n\n<span class="prog__sub">Parameters:</span><p>precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of 0 is lower than all\noperators except for the comma (,) and AS operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.</p><p>New in version 0.8: - added the &#8216;precedence&#8217; argument.</p><p>if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like ==, >, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.</p><p>New in version 0.9.2: - added the\nOperators.op.is_comparison flag.</p><ul><li><strong>operator</strong> &#8211; a string which will be output as the infix operator\nbetween this element and the expression passed to the\ngenerated function.</li><li><strong>precedence</strong> &#8211; <p>precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of <code>0</code> is lower than all\noperators except for the comma (<code>,</code>) and <code>AS</code> operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.</p>\n\n</li><li><strong>is_comparison</strong> &#8211; <p>if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like <code>==</code>, <code>></code>, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.</p>\n\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.op
expire	A										<section class="prog__container"><pre><code>expire(target, attrs)</code></pre><p>Receive an object instance after its attributes or some subset\nhave been expired.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'expire')\ndef receive_expire(target, attrs):\n    "listen for the 'expire' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>&#8216;keys&#8217; is a list of attribute names.  If None, the entire\nstate was expired.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the mapped instance.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li><li><strong>attrs</strong> &#8211; sequence of attribute\nnames which were expired, or None if all attributes were\nexpired.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.expire
properties.ColumnProperty.set_parent	A										<section class="prog__container"><pre><code>ColumnProperty.set_parent(parent, init)</code></pre>\ninherited from the set_parent() method of MapperProperty<p>Set the parent mapper that references this MapperProperty.</p><p>This method is overridden by some subclasses to perform extra\nsetup when the mapper is first known.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.set_parent
interfaces.MapperProperty.instrument_class	A										<section class="prog__container"><pre><code>instrument_class(mapper)</code></pre><p>Hook called by the Mapper to the property to initiate\ninstrumentation of the class attribute managed by this\nMapperProperty.</p><p>The MapperProperty here will typically call out to the\nattributes module to set up an InstrumentedAttribute.</p><p>This step is the first of two steps to set up an InstrumentedAttribute,\nand is called early in the mapper setup process.</p><p>The second step is typically the init_class_attribute step,\ncalled from StrategizedProperty via the post_instrument_class()\nhook.  This step assigns additional state to the InstrumentedAttribute\n(specifically the &#8220;impl&#8221;) which has been determined after the\nMapperProperty has determined what kind of persistence\nmanagement it needs to do (e.g. scalar, object, collection, etc).</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.instrument_class
ConcurrentModificationError	A										<section class="prog__container"><pre><code>sqlalchemy.orm.exc.ConcurrentModificationError</code></pre><p>alias of <code>StaleDataError</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.ConcurrentModificationError
ONETOMANY	A										<section class="prog__container"><pre><code>sqlalchemy.orm.interfaces.ONETOMANY = symbol('ONETOMANY')</code></pre><p>Indicates the one-to-many direction for a <code>relationship()</code>.</p><p>This symbol is typically used by the internals but may be exposed within\ncertain API features.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.ONETOMANY
properties.ColumnProperty.Comparator.desc	A										<section class="prog__container"><pre><code>desc()</code></pre>\ninherited from the desc() method of ColumnOperators<p>Produce a <code>desc()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.desc
PropComparator	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.interfaces.PropComparator(prop, parentmapper, adapt_to_entity=None)</code></pre><p>Bases: <code>sqlalchemy.sql.operators.ColumnOperators</code></p><p>Defines SQL operators for <code>MapperProperty</code> objects.</p><p>SQLAlchemy allows for operators to\nbe redefined at both the Core and ORM level.  <code>PropComparator</code>\nis the base class of operator redefinition for ORM-level operations,\nincluding those of <code>ColumnProperty</code>,\n<code>RelationshipProperty</code>, and <code>CompositeProperty</code>.</p><p>User-defined subclasses of <code>PropComparator</code> may be created. The\nbuilt-in Python comparison and math operator methods, such as\n<code>operators.ColumnOperators.__eq__()</code>,\n<code>operators.ColumnOperators.__lt__()</code>, and\n<code>operators.ColumnOperators.__add__()</code>, can be overridden to provide\nnew operator behavior. The custom <code>PropComparator</code> is passed to\nthe <code>MapperProperty</code> instance via the <code>comparator_factory</code>\nargument. In each case,\nthe appropriate subclass of <code>PropComparator</code> should be used:</p><pre><code># definition of custom PropComparator subclasses\n\nfrom sqlalchemy.orm.properties import \\n                        ColumnProperty,\\n                        CompositeProperty,\\n                        RelationshipProperty\n\nclass MyColumnComparator(ColumnProperty.Comparator):\n    def __eq__(self, other):\n        return self.__clause_element__() == other\n\nclass MyRelationshipComparator(RelationshipProperty.Comparator):\n    def any(self, expression):\n        "define the 'any' operation"\n        # ...\n\nclass MyCompositeComparator(CompositeProperty.Comparator):\n    def __gt__(self, other):\n        "redefine the 'greater than' operation"\n\n        return sql.and_(*[a>b for a, b in\n                          zip(self.__clause_element__().clauses,\n                              other.__composite_values__())])\n\n\n# application of custom PropComparator subclasses\n\nfrom sqlalchemy.orm import column_property, relationship, composite\nfrom sqlalchemy import Column, String\n\nclass SomeMappedClass(Base):\n    some_column = column_property(Column("some_column", String),\n                        comparator_factory=MyColumnComparator)\n\n    some_relationship = relationship(SomeOtherClass,\n                        comparator_factory=MyRelationshipComparator)\n\n    some_composite = composite(\n            Column("a", String), Column("b", String),\n            comparator_factory=MyCompositeComparator\n        )\n</code></pre><p>Note that for column-level operator redefinition, it&#8217;s usually\nsimpler to define the operators at the Core level, using the\n<code>TypeEngine.comparator_factory</code> attribute.  See\n<code>Redefining and Creating New Operators</code> for more detail.</p><p>See also:</p><p><code>ColumnProperty.Comparator</code></p><p><code>RelationshipProperty.Comparator</code></p><p><code>CompositeProperty.Comparator</code></p><p><code>ColumnOperators</code></p><p><code>Redefining and Creating New Operators</code></p><p><code>TypeEngine.comparator_factory</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator
interfaces.MapperProperty.cascade	A										<section class="prog__container"><pre><code>cascade = frozenset([])</code></pre><p>The set of &#8216;cascade&#8217; attribute names.</p><p>This collection is checked before the &#8216;cascade_iterator&#8217; method is called.</p><p>The collection typically only applies to a RelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.cascade
properties.RelationshipProperty.Comparator.is_	A										<section class="prog__container"><pre><code>is_(other)</code></pre>\ninherited from the is_() method of ColumnOperators<p>Implement the <code>IS</code> operator.</p><p>Normally, <code>IS</code> is generated automatically when comparing to a\nvalue of <code>None</code>, which resolves to <code>NULL</code>.  However, explicit\nusage of <code>IS</code> may be desirable if comparing to boolean values\non certain platforms.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.is_
interfaces.PropComparator.endswith	A										<section class="prog__container"><pre><code>endswith(other, **kwargs)</code></pre>\ninherited from the endswith() method of ColumnOperators<p>Implement the &#8216;endswith&#8217; operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.endswith
CascadeOptions	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.util.CascadeOptions</code></pre><p>Bases: <code>__builtin__.frozenset</code></p><p>Keeps track of the options sent to relationship().cascade</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.util.CascadeOptions
op	D								*[[properties.ColumnProperty.Comparator.op]], produce a generic operator function. \n*[[interfaces.PropComparator.op]], produce a generic operator function. \n*[[properties.RelationshipProperty.Comparator.op]], produce a generic operator function. \n*[[attributes.QueryableAttribute.op]], produce a generic operator function. \n
properties.RelationshipProperty.Comparator.reverse_operate	A										<section class="prog__container"><pre><code>reverse_operate(op, other, **kwargs)</code></pre>\ninherited from the reverse_operate() method of Operators<p>Reverse operate on an argument.</p><p>Usage is the same as <code>operate()</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.reverse_operate
interfaces.PropComparator.contains	A										<section class="prog__container"><pre><code>contains(other, **kwargs)</code></pre>\ninherited from the contains() method of ColumnOperators<p>Implement the &#8216;contains&#8217; operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.contains
properties.RelationshipProperty.Comparator.endswith	A										<section class="prog__container"><pre><code>endswith(other, **kwargs)</code></pre>\ninherited from the endswith() method of ColumnOperators<p>Implement the &#8216;endswith&#8217; operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith
MapperProperty	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.interfaces.MapperProperty</code></pre><p>Bases: <code>sqlalchemy.orm.base._MappedAttribute</code>, <code>sqlalchemy.orm.base.InspectionAttr</code>, <code>sqlalchemy.util.langhelpers.MemoizedSlots</code></p><p>Represent a particular class attribute mapped by <code>Mapper</code>.</p><p>The most common occurrences of <code>MapperProperty</code> are the\nmapped <code>Column</code>, which is represented in a mapping as\nan instance of <code>ColumnProperty</code>,\nand a reference to another class produced by <code>relationship()</code>,\nrepresented in the mapping as an instance of\n<code>RelationshipProperty</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty
properties.ColumnProperty.Comparator.asc	A										<section class="prog__container"><pre><code>asc()</code></pre>\ninherited from the asc() method of ColumnOperators<p>Produce a <code>asc()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.asc
properties.RelationshipProperty.Comparator.ilike	A										<section class="prog__container"><pre><code>ilike(other, escape=None)</code></pre>\ninherited from the ilike() method of ColumnOperators<p>Implement the <code>ilike</code> operator.</p><p>In a column context, produces the clause <code>None</code>.</p><p>E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.ilike("%foobar%"))\n</code></pre>\n\n<span class="prog__sub">Parameters:</span><p>optional escape character, renders the ESCAPE\nkeyword, e.g.:</p><ul><li><strong>other</strong> &#8211; expression to be compared</li><li><strong>escape</strong> &#8211; <p>optional escape character, renders the <code>ESCAPE</code>\nkeyword, e.g.:</p>\n<pre><code>somecolumn.ilike("foo/%bar", escape="/")\n</code></pre>\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike
UnmappedClassError	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.UnmappedClassError(cls, msg=None)</code></pre><p>An mapping operation was requested for an unknown class.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.UnmappedClassError
unmodified	A										<section class="prog__container"><pre><code>unmodified</code></pre><p>Return the set of keys which have no uncommitted changes</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.unmodified
properties.RelationshipProperty.Comparator.concat	A										<section class="prog__container"><pre><code>concat(other)</code></pre>\ninherited from the concat() method of ColumnOperators<p>Implement the &#8216;concat&#8217; operator.</p><p>In a column context, produces the clause <code>None</code>,\nor uses the <code>concat()</code> operator on MySQL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.concat
attributes.QueryableAttribute.startswith	A										<section class="prog__container"><pre><code>startswith(other, **kwargs)</code></pre>\ninherited from the startswith() method of ColumnOperators<p>Implement the <code>startwith</code> operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.startswith
QueryContext	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.query.QueryContext(query)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.query.QueryContext
properties.RelationshipProperty.Comparator.__ne__	A										<section class="prog__container"><pre><code>__ne__(other)</code></pre><p>Implement the <code>!=</code> operator.</p><p>In a many-to-one context, such as:</p><pre><code>MyClass.some_prop != <some object>\n</code></pre><p>This will typically produce a clause such as:</p><pre><code>mytable.related_id != <some id>\n</code></pre><p>Where <code>None</code> is the primary key of the\ngiven object.</p><p>The <code>!=</code> operator provides partial functionality for non-\nmany-to-one comparisons:</p><ul><li>Comparisons against collections are not supported.\nUse\n<code>contains()</code>\nin conjunction with <code>not_()</code>.</li><li>Compared to a scalar one-to-many, will produce a\nclause that compares the target columns in the parent to\nthe given target.</li><li>Compared to a scalar many-to-many, an alias\nof the association table will be rendered as\nwell, forming a natural join that is part of the\nmain body of the query. This will not work for\nqueries that go beyond simple AND conjunctions of\ncomparisons, such as those which use OR. Use\nexplicit joins, outerjoins, or\n<code>has()</code> in\nconjunction with <code>not_()</code> for\nmore comprehensive non-many-to-one scalar\nmembership tests.</li><li>Comparisons against <code>None</code> given in a one-to-many\nor many-to-many context produce an EXISTS clause.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__ne__
properties.RelationshipProperty.Comparator.is_distinct_from	A										<section class="prog__container"><pre><code>is_distinct_from(other)</code></pre>\ninherited from the is_distinct_from() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Renders &#8220;a IS DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS NOT b&#8221;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.is_distinct_from
properties.RelationshipProperty.Comparator.nullsfirst	A										<section class="prog__container"><pre><code>nullsfirst()</code></pre>\ninherited from the nullsfirst() method of ColumnOperators<p>Produce a <code>nullsfirst()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.nullsfirst
interfaces.MapperProperty.create_row_processor	A										<section class="prog__container"><pre><code>create_row_processor(context, path, mapper, result, adapter, populators)</code></pre><p>Produce row processing functions and append to the given\nset of populators lists.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.create_row_processor
__get__	A										<section class="prog__container"><pre><code>__get__(instance, owner)</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.InstrumentedAttribute.__get__
info	D								*[[base.InspectionAttrInfo.info]], Info dictionary associated with the object, allowing user-defined data to be associated with this InspectionAttr. \n*[[MapperProperty.info]], Info dictionary associated with the object, allowing user-defined data to be associated with this InspectionAttr. \n*[[attributes.QueryableAttribute.info]], Return the &#8216;info&#8217; dictionary for the underlying SQL element. \n
unmodified_intersection	A										<section class="prog__container"><pre><code>unmodified_intersection(keys)</code></pre><p>Return self.unmodified.intersection(keys).</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.unmodified_intersection
properties.ColumnProperty.Comparator.endswith	A										<section class="prog__container"><pre><code>endswith(other, **kwargs)</code></pre>\ninherited from the endswith() method of ColumnOperators<p>Implement the &#8216;endswith&#8217; operator.</p><p>In a column context, produces the clause <code>None</code></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith
properties.RelationshipProperty.Comparator.notilike	A										<section class="prog__container"><pre><code>notilike(other, escape=None)</code></pre>\ninherited from the notilike() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.ilike()</code>, i.e. <code>~x.ilike(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.notilike
__le__	D								*[[instrumentation.ClassManager.__le__]], x.__le__(y) <==> x<=y \n*[[properties.ColumnProperty.Comparator.__le__]], Implement the <= operator. \n*[[interfaces.PropComparator.__le__]], Implement the <= operator. \n*[[properties.RelationshipProperty.Comparator.__le__]], Implement the <= operator. \n*[[attributes.QueryableAttribute.__le__]], Implement the <= operator. \n
interfaces.MapperProperty.is_property	A										<section class="prog__container"><pre><code>is_property = True</code></pre><p>Part of the InspectionAttr interface; states this object is a\nmapper property.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.is_property
properties.RelationshipProperty.class_attribute	A										<section class="prog__container"><pre><code>RelationshipProperty.class_attribute</code></pre>\ninherited from the class_attribute attribute of MapperProperty<p>Return the class-bound descriptor corresponding to this\n<code>MapperProperty</code>.</p><p>This is basically a <code>getattr()</code> call:</p><pre><code>return getattr(self.parent.class_, self.key)\n</code></pre><p>I.e. if this <code>MapperProperty</code> were named <code>addresses</code>,\nand the class to which it is mapped is <code>User</code>, this sequence\nis possible:</p><pre><code>>>> from sqlalchemy import inspect\n>>> mapper = inspect(User)\n>>> addresses_property = mapper.attrs.addresses\n>>> addresses_property.class_attribute is User.addresses\nTrue\n>>> User.addresses.property is addresses_property\nTrue\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.class_attribute
properties.ColumnProperty.Comparator.any	A										<section class="prog__container"><pre><code>any(criterion=None, **kwargs)</code></pre>\ninherited from the any() method of PropComparator<p>Return true if this collection contains any member that meets the\ngiven criterion.</p><p>The usual implementation of <code>any()</code> is\n<code>RelationshipProperty.Comparator.any()</code>.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>criterion</strong> &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.</li><li><strong>**kwargs</strong> &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.any
properties.RelationshipProperty.Comparator.isnot	A										<section class="prog__container"><pre><code>isnot(other)</code></pre>\ninherited from the isnot() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Normally, <code>None</code> is generated automatically when comparing to a\nvalue of <code>None</code>, which resolves to <code>NULL</code>.  However, explicit\nusage of <code>None</code> may be desirable if comparing to boolean values\non certain platforms.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.isnot
after_insert	A										<section class="prog__container"><pre><code>after_insert(mapper, connection, target)</code></pre><p>Receive an object instance after an INSERT statement\nis emitted corresponding to that instance.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'after_insert')\ndef receive_after_insert(mapper, connection, target):\n    "listen for the 'after_insert' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to modify in-Python-only\nstate on the instance after an INSERT occurs, as well\nas to emit additional SQL statements on the given\nconnection.</p><p>The event is often called for a batch of objects of the\nsame class after their INSERT statements have been\nemitted at once in a previous step. In the extremely\nrare case that this is not desirable, the\n<code>mapper()</code> can be configured with <code>batch=False</code>,\nwhich will cause batches of instances to be broken up\ninto individual (and more poorly performing)\nevent->persist->event steps.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>mapper</strong> &#8211; the <code>Mapper</code> which is the target\nof this event.</li><li><strong>connection</strong> &#8211; the <code>Connection</code> being used to\nemit INSERT statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.</li><li><strong>target</strong> &#8211; the mapped instance being persisted.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li></ul>\n\n<span class="prog__sub">Returns:</span><p>No return value is supported by this event.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.after_insert
attributes.QueryableAttribute.collate	A										<section class="prog__container"><pre><code>collate(collation)</code></pre>\ninherited from the collate() method of ColumnOperators<p>Produce a <code>collate()</code> clause against\nthe parent object, given the collation string.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.collate
before_delete	A										<section class="prog__container"><pre><code>before_delete(mapper, connection, target)</code></pre><p>Receive an object instance before a DELETE statement\nis emitted corresponding to that instance.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'before_delete')\ndef receive_before_delete(mapper, connection, target):\n    "listen for the 'before_delete' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to emit additional SQL statements on\nthe given connection as well as to perform application\nspecific bookkeeping related to a deletion event.</p><p>The event is often called for a batch of objects of the\nsame class before their DELETE statements are emitted at\nonce in a later step.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>mapper</strong> &#8211; the <code>Mapper</code> which is the target\nof this event.</li><li><strong>connection</strong> &#8211; the <code>Connection</code> being used to\nemit DELETE statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.</li><li><strong>target</strong> &#8211; the mapped instance being deleted.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li></ul>\n\n<span class="prog__sub">Returns:</span><p>No return value is supported by this event.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.before_delete
in_	D								*[[properties.ColumnProperty.Comparator.in_]], Implement the in operator. \n*[[interfaces.PropComparator.in_]], Implement the in operator. \n*[[properties.RelationshipProperty.Comparator.in_]], Produce an IN clause - this is not implemented for relationship()-based attributes at this time. \n*[[attributes.QueryableAttribute.in_]], Implement the in operator. \n
properties.ColumnProperty.cascade_iterator	A										<section class="prog__container"><pre><code>ColumnProperty.cascade_iterator(type_, state, visited_instances=None, halt_on=None)</code></pre>\ninherited from the cascade_iterator() method of MapperProperty<p>Iterate through instances related to the given instance for\na particular &#8216;cascade&#8217;, starting with this MapperProperty.</p><p>Return an iterator3-tuples (instance, mapper, state).</p><p>Note that the &#8216;cascade&#8217; collection on this MapperProperty is\nchecked first for the given type before cascade_iterator is called.</p><p>This method typically only applies to RelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.cascade_iterator
properties.RelationshipProperty.Comparator.of_type	A										<section class="prog__container"><pre><code>of_type(cls)</code></pre><p>Produce a construct that represents a particular &#8216;subtype&#8217; of\nattribute for the parent class.</p><p>Currently this is usable in conjunction with <code>Query.join()</code>\nand <code>Query.outerjoin()</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.of_type
MapperEvents	A										<section class="prog__container"><pre><code>class sqlalchemy.orm.events.MapperEvents</code></pre><p>Bases: <code>sqlalchemy.event.base.Events</code></p><p>Define events specific to mappings.</p><p>e.g.:</p><pre><code>from sqlalchemy import event\n\ndef my_before_insert_listener(mapper, connection, target):\n    # execute a stored procedure upon INSERT,\n    # apply the value to the row to be inserted\n    target.calculated_value = connection.scalar(\n                                "select my_special_function(%d)"\n                                % target.special_number)\n\n# associate the listener function with SomeClass,\n# to execute during the "before_insert" hook\nevent.listen(\n    SomeClass, 'before_insert', my_before_insert_listener)\n</code></pre><p>Available targets include:</p><ul><li>mapped classes</li><li>unmapped superclasses of mapped or to-be-mapped classes\n(using the <code>propagate=True</code> flag)</li><li><code>Mapper</code> objects</li><li>the <code>Mapper</code> class itself and the <code>mapper()</code>\nfunction indicate listening for all mappers.</li></ul><p>Mapper events provide hooks into critical sections of the\nmapper, including those related to object instrumentation,\nobject loading, and object persistence. In particular, the\npersistence methods <code>before_insert()</code>,\nand <code>before_update()</code> are popular\nplaces to augment the state being persisted - however, these\nmethods operate with several significant restrictions. The\nuser is encouraged to evaluate the\n<code>SessionEvents.before_flush()</code> and\n<code>SessionEvents.after_flush()</code> methods as more\nflexible and user-friendly hooks in which to apply\nadditional database state during a flush.</p><p>When using <code>MapperEvents</code>, several modifiers are\navailable to the <code>event.listen()</code> function.</p>\n\n<span class="prog__sub">Parameters:</span><p>when True, the user-defined event function\nmust have a return value, the purpose of which is either to\ncontrol subsequent event propagation, or to otherwise alter\nthe operation in progress by the mapper.   Possible return\nvalues are:</p><ul><li><strong>propagate=False</strong> &#8211; When True, the event listener should\nbe applied to all inheriting mappers and/or the mappers of\ninheriting classes, as well as any\nmapper which is the target of this listener.</li><li><strong>raw=False</strong> &#8211; When True, the &#8220;target&#8221; argument passed\nto applicable event listener functions will be the\ninstance&#8217;s <code>InstanceState</code> management\nobject, rather than the mapped instance itself.</li><li><strong>retval=False</strong> &#8211; <p>when True, the user-defined event function\nmust have a return value, the purpose of which is either to\ncontrol subsequent event propagation, or to otherwise alter\nthe operation in progress by the mapper.   Possible return\nvalues are:</p>\n\n</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents
properties.RelationshipProperty.Comparator.__eq__	A										<section class="prog__container"><pre><code>__eq__(other)</code></pre><p>Implement the <code>==</code> operator.</p><p>In a many-to-one context, such as:</p><pre><code>MyClass.some_prop == <some object>\n</code></pre><p>this will typically produce a\nclause such as:</p><pre><code>mytable.related_id == <some id>\n</code></pre><p>Where <code>None</code> is the primary key of the given\nobject.</p><p>The <code>==</code> operator provides partial functionality for non-\nmany-to-one comparisons:</p><ul><li>Comparisons against collections are not supported.\nUse <code>contains()</code>.</li><li>Compared to a scalar one-to-many, will produce a\nclause that compares the target columns in the parent to\nthe given target.</li><li>Compared to a scalar many-to-many, an alias\nof the association table will be rendered as\nwell, forming a natural join that is part of the\nmain body of the query. This will not work for\nqueries that go beyond simple AND conjunctions of\ncomparisons, such as those which use OR. Use\nexplicit joins, outerjoins, or\n<code>has()</code> for\nmore comprehensive non-many-to-one scalar\nmembership tests.</li><li>Comparisons against <code>None</code> given in a one-to-many\nor many-to-many context produce a NOT EXISTS clause.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__eq__
NoResultFound	A										<section class="prog__container"><pre><code>exception sqlalchemy.orm.exc.NoResultFound</code></pre><p>A database result was required but none was found.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.NoResultFound
update	A										<section class="prog__container"><pre><code>update([E, ]**F) &#8594; None.  Update D from dict/iterable E and F.</code></pre>\ninherited from the update() method of dict<p>If E present and has a .keys() method, does:     for k in E: D[k] = E[k]\nIf E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\nIn either case, this is followed by: for k in F: D[k] = F[k]</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.update
remove_state_actions	A										<section class="prog__container"><pre><code>remove_state_actions(state)</code></pre><p>remove pending actions for a state from the uowtransaction.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.remove_state_actions
attributes.QueryableAttribute.is_	A										<section class="prog__container"><pre><code>is_(other)</code></pre>\ninherited from the is_() method of ColumnOperators<p>Implement the <code>IS</code> operator.</p><p>Normally, <code>IS</code> is generated automatically when comparing to a\nvalue of <code>None</code>, which resolves to <code>NULL</code>.  However, explicit\nusage of <code>IS</code> may be desirable if comparing to boolean values\non certain platforms.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.is_
properties.ColumnProperty.Comparator.notlike	A										<section class="prog__container"><pre><code>notlike(other, escape=None)</code></pre>\ninherited from the notlike() method of ColumnOperators<p>implement the <code>None</code> operator.</p><p>This is equivalent to using negation with\n<code>ColumnOperators.like()</code>, i.e. <code>~x.like(y)</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.notlike
attributes.QueryableAttribute.is_distinct_from	A										<section class="prog__container"><pre><code>is_distinct_from(other)</code></pre>\ninherited from the is_distinct_from() method of ColumnOperators<p>Implement the <code>None</code> operator.</p><p>Renders &#8220;a IS DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS NOT b&#8221;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.is_distinct_from
attributes.QueryableAttribute.any_	A										<section class="prog__container"><pre><code>any_()</code></pre>\ninherited from the any_() method of ColumnOperators<p>Produce a <code>any_()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.any_
events.InstanceEvents.init	A										<section class="prog__container"><pre><code>init(target, args, kwargs)</code></pre><p>Receive an instance when its constructor is called.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'init')\ndef receive_init(target, args, kwargs):\n    "listen for the 'init' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This method is only called during a userland construction of\nan object, in conjunction with the object&#8217;s constructor, e.g.\nits <code>__init__</code> method.  It is not called when an object is\nloaded from the database; see the <code>InstanceEvents.load()</code>\nevent in order to intercept a database load.</p><p>The event is called before the actual <code>__init__</code> constructor\nof the object is called.  The <code>kwargs</code> dictionary may be\nmodified in-place in order to affect what is passed to\n<code>__init__</code>.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the mapped instance.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li><li><strong>args</strong> &#8211; positional arguments passed to the <code>__init__</code> method.\nThis is passed as a tuple and is currently immutable.</li><li><strong>kwargs</strong> &#8211; keyword arguments passed to the <code>__init__</code> method.\nThis structure  be altered in place.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.init
concat	D								*[[properties.ColumnProperty.Comparator.concat]], Implement the &#8216;concat&#8217; operator. \n*[[interfaces.PropComparator.concat]], Implement the &#8216;concat&#8217; operator. \n*[[properties.RelationshipProperty.Comparator.concat]], Implement the &#8216;concat&#8217; operator. \n*[[attributes.QueryableAttribute.concat]], Implement the &#8216;concat&#8217; operator. \n
interfaces.PropComparator.reverse_operate	A										<section class="prog__container"><pre><code>reverse_operate(op, other, **kwargs)</code></pre>\ninherited from the reverse_operate() method of Operators<p>Reverse operate on an argument.</p><p>Usage is the same as <code>operate()</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.reverse_operate
properties.RelationshipProperty.Comparator.mapper	A										<section class="prog__container"><pre><code>mapper</code></pre><p>The target <code>Mapper</code> referred to by this\n<code>RelationshipProperty.Comparator</code>.</p><p>This is the &#8220;target&#8221; or &#8220;remote&#8221; side of the\n<code>relationship()</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.mapper
refresh_flush	A										<section class="prog__container"><pre><code>refresh_flush(target, flush_context, attrs)</code></pre><p>Receive an object instance after one or more attributes have\nbeen refreshed within the persistence of the object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'refresh_flush')\ndef receive_refresh_flush(target, flush_context, attrs):\n    "listen for the 'refresh_flush' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is the same as <code>InstanceEvents.refresh()</code> except\nit is invoked within the unit of work flush process, and the values\nhere typically come from the process of handling an INSERT or\nUPDATE, such as via the RETURNING clause or from Python-side default\nvalues.</p>\n\n<span class="prog__sub">Parameters:</span><ul><li><strong>target</strong> &#8211; the mapped instance.  If\nthe event is configured with <code>raw=True</code>, this will\ninstead be the <code>InstanceState</code> state-management\nobject associated with the instance.</li><li><strong>flush_context</strong> &#8211; Internal <code>UOWTransaction</code> object\nwhich handles the details of the flush.</li><li><strong>attrs</strong> &#8211; sequence of attribute names which\nwere populated.</li></ul></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.refresh_flush
attribute_instrument	A										<section class="prog__container"><pre><code>attribute_instrument(cls, key, inst)</code></pre><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeBaseClass, 'attribute_instrument')\ndef receive_attribute_instrument(cls, key, inst):\n    "listen for the 'attribute_instrument' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>Called when an attribute is instrumented.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstrumentationEvents.attribute_instrument
persistent	A										<section class="prog__container"><pre><code>persistent</code></pre><p>Return true if the object is <code>persistent</code>.</p><p>An object that is in the persistent state is guaranteed to\nbe within the <code>Session.identity_map</code> of its parent\n<code>Session</code>.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.persistent
interfaces.PropComparator.asc	A										<section class="prog__container"><pre><code>asc()</code></pre>\ninherited from the asc() method of ColumnOperators<p>Produce a <code>asc()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.asc
deleted_to_persistent	A										<section class="prog__container"><pre><code>deleted_to_persistent(session, instance)</code></pre><p>Intercept the &#8220;deleted to persistent&#8221; transition for a specific object.</p><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'deleted_to_persistent')\ndef receive_deleted_to_persistent(session, instance):\n    "listen for the 'deleted_to_persistent' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This transition occurs only when an object that&#8217;s been deleted\nsuccessfully in a flush is restored due to a call to\n<code>Session.rollback()</code>.   The event is not called under\nany other circumstances.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.deleted_to_persistent
properties.RelationshipProperty.Comparator.nullslast	A										<section class="prog__container"><pre><code>nullslast()</code></pre>\ninherited from the nullslast() method of ColumnOperators<p>Produce a <code>nullslast()</code> clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.nullslast
original_init	A										<section class="prog__container"><pre><code>original_init</code></pre><p>x.__init__(...) initializes x; see help(type(x)) for signature</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.original_init
