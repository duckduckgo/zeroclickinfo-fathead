properties.RelationshipProperty.mapper	A										<section class="prog__container"><pre><code>\nRelationshipProperty.mapper</code></pre><p>Return the targeted Mapper for this\nRelationshipProperty.This is a lazy-initializing static attribute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.mapper
interfaces.MapperProperty.merge	A										<section class="prog__container"><pre><code>\nmerge(session, source_state, source_dict, dest_state, dest_dict, load, _recursive, _resolve_conflict_map)</code></pre><p>Merge the attribute represented by this MapperProperty\nfrom source to destination object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.merge
properties.RelationshipProperty.Comparator.like	A										<section class="prog__container"><pre><code>\nlike(other, escape=None)</code></pre><p>\ninherited from the like() method of ColumnOperatorsImplement the like operator.In a column context, produces the clause a LIKE other.E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.like("%foobar%"))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.like
properties.RelationshipProperty.Comparator.between	A										<section class="prog__container"><pre><code>\nbetween(cleft, cright, symmetric=False)</code></pre><p>\ninherited from the between() method of ColumnOperatorsProduce a between() clause against\nthe parent object, given the lower and upper range.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.between
attrs	A										<section class="prog__container"><pre><code>\nattrs</code></pre><p>Return a namespace representing each attribute on\nthe mapped object, including its current value\nand history.The returned object is an instance of AttributeState.\nThis object allows inspection of the current data\nwithin an attribute as well as attribute history\nsince the last flush.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.attrs
InspectionAttrInfo	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.base.InspectionAttrInfo</code></pre><p>Bases: sqlalchemy.orm.base.InspectionAttrAdds the .info attribute to InspectionAttr.The rationale for InspectionAttr vs. InspectionAttrInfo\nis that the former is compatible as a mixin for classes that specify\n__slots__; this is essentially an implementation artifact.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttrInfo
properties.ComparableProperty.__init__	A										<section class="prog__container"><pre><code>\n__init__(comparator_factory, descriptor=None, doc=None, info=None)</code></pre><p>Construct a new ComparableProperty object.This constructor is mirrored as a public API function; see comparable_property() for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ComparableProperty.__init__
properties.ColumnProperty.extension_type	A										<section class="prog__container"><pre><code>\nColumnProperty.extension_type = symbol('NOT_EXTENSION')</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.extension_type
init	D								*[[properties.ColumnProperty.init]], inherited from the init() method of MapperProperty \n*[[interfaces.MapperProperty.init]], Called after all mappers are created to assemble relationships between mappers and perform other post-mapper-creation initialization steps. \n*[[properties.RelationshipProperty.init]], inherited from the init() method of MapperProperty \n*[[descriptor_props.SynonymProperty.init]], inherited from the init() method of MapperProperty \n*[[events.InstanceEvents.init]], Receive an instance when its constructor is called. \n
properties.RelationshipProperty.Comparator.contains	A										<section class="prog__container"><pre><code>\ncontains(other, **kwargs)</code></pre><p>Return a simple expression that tests a collection for\ncontainment of a particular item.contains() is\nonly valid for a collection, i.e. a\nrelationship() that implements\none-to-many or many-to-many with uselist=True.When used in a simple one-to-many context, an\nexpression like:</p><pre><code>MyClass.contains(other)\n</code></pre><p>Produces a clause like:</p><pre><code>mytable.id == <some id>\n</code></pre><p>Where <some id> is the value of the foreign key\nattribute on other which refers to the primary\nkey of its parent object. From this it follows that\ncontains() is\nvery useful when used with simple one-to-many\noperations.For many-to-many operations, the behavior of\ncontains()\nhas more caveats. The association table will be\nrendered in the statement, producing an &#8220;implicit&#8221;\njoin, that is, includes multiple tables in the FROM\nclause which are equated in the WHERE clause:</p><pre><code>query(MyClass).filter(MyClass.contains(other))\n</code></pre><p>Produces a query like:</p><pre><code>SELECT * FROM my_table, my_association_table AS\nmy_association_table_1 WHERE\nmy_table.id = my_association_table_1.parent_id\nAND my_association_table_1.child_id = <some id>\n</code></pre><p>Where <some id> would be the primary key of\nother. From the above, it is clear that\ncontains()\nwill not work with many-to-many collections when\nused in queries that move beyond simple AND\nconjunctions, such as multiple\ncontains()\nexpressions joined by OR. In such cases subqueries or\nexplicit &#8220;outer joins&#8221; will need to be used instead.\nSee any() for\na less-performant alternative using EXISTS, or refer\nto Query.outerjoin() as well as Querying with Joins\nfor more details on constructing outer joins.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains
attributes.QueryableAttribute.isnot	A										<section class="prog__container"><pre><code>\nisnot(other)</code></pre><p>\ninherited from the isnot() method of ColumnOperatorsImplement the IS NOT operator.Normally, IS NOT is generated automatically when comparing to a\nvalue of None, which resolves to NULL.  However, explicit\nusage of IS NOT may be desirable if comparing to boolean values\non certain platforms.\nNew in version 0.7.9.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.isnot
interfaces.MapperProperty.post_instrument_class	A										<section class="prog__container"><pre><code>\npost_instrument_class(mapper)</code></pre><p>Perform instrumentation adjustments that need to occur\nafter init() has completed.The given Mapper is the Mapper invoking the operation, which\nmay not be the same Mapper as self.parent in an inheritance\nscenario; however, Mapper will always at least be a sub-mapper of\nself.parent.This method is typically used by StrategizedProperty, which delegates\nit to LoaderStrategy.init_class_attribute() to perform final setup\non the class-bound InstrumentedAttribute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.post_instrument_class
attributes.QueryableAttribute.in_	A										<section class="prog__container"><pre><code>\nin_(other)</code></pre><p>\ninherited from the in_() method of ColumnOperatorsImplement the in operator.In a column context, produces the clause a IN other.\n&#8220;other&#8221; may be a tuple/list of column expressions,\nor a select() construct.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.in_
InstrumentedAttribute	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.attributes.InstrumentedAttribute(class_, key, impl=None, comparator=None, parententity=None, of_type=None)</code></pre><p>Bases: sqlalchemy.orm.attributes.QueryableAttributeClass bound instrumented attribute which adds basic\ndescriptor methods.See QueryableAttribute for a description of most features.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.InstrumentedAttribute
after_configured	A										<section class="prog__container"><pre><code>\nafter_configured()</code></pre><p>Called after a series of mappers have been configured.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'after_configured')\ndef receive_after_configured():\n    "listen for the 'after_configured' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>The MapperEvents.after_configured() event is invoked\neach time the orm.configure_mappers() function is\ninvoked, after the function has completed its work.\norm.configure_mappers() is typically invoked\nautomatically as mappings are first used, as well as each time\nnew mappers have been made available and new mapper use is\ndetected.Contrast this event to the MapperEvents.mapper_configured()\nevent, which is called on a per-mapper basis while the configuration\noperation proceeds; unlike that event, when this event is invoked,\nall cross-configurations (e.g. backrefs) will also have been made\navailable for any mappers that were pending.\nAlso constrast to MapperEvents.before_configured(),\nwhich is invoked before the series of mappers has been configured.This event can only be applied to the Mapper class\nor mapper() function, and not to individual mappings or\nmapped classes.  It is only invoked for all mappings as a whole:</p><pre><code>from sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, "after_configured")\ndef go():\n    # ...\n</code></pre><p>Theoretically this event is called once per\napplication, but is actually called any time new mappers\nhave been affected by a orm.configure_mappers()\ncall.   If new mappings are constructed after existing ones have\nalready been used, this event will likely be called again.  To ensure\nthat a particular event is only called once and no further, the\nonce=True argument (new in 0.9.4) can be applied:</p><pre><code>from sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, "after_configured", once=True)\ndef go():\n    # ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.after_configured
interfaces.PropComparator.match	A										<section class="prog__container"><pre><code>\nmatch(other, **kwargs)</code></pre><p>\ninherited from the match() method of ColumnOperatorsImplements a database-specific &#8216;match&#8217; operator.match() attempts to resolve to\na MATCH-like function or operator provided by the backend.\nExamples include:\nPostgreSQL - renders x @@ to_tsquery(y)\nMySQL - renders MATCH (x) AGAINST (y IN BOOLEAN MODE)\nOracle - renders CONTAINS(x, y)\nother backends may provide special implementations.\nBackends without any special implementation will emit\nthe operator as &#8220;MATCH&#8221;.  This is compatible with SQlite, for\nexample.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.match
detached_to_persistent	A										<section class="prog__container"><pre><code>\ndetached_to_persistent(session, instance)</code></pre><p>Intercept the &#8220;detached to persistent&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'detached_to_persistent')\ndef receive_detached_to_persistent(session, instance):\n    "listen for the 'detached_to_persistent' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is a specialization of the\nSessionEvents.after_attach() event which is only invoked\nfor this specific transition.  It is invoked typically during the\nSession.add() call, as well as during the\nSession.delete() call if the object was not previously\nassociated with the\nSession (note that an object marked as &#8220;deleted&#8221; remains\nin the &#8220;persistent&#8221; state until the flush proceeds).\nNote\nIf the object becomes persistent as part of a call to\nSession.delete(), the object is not yet marked as\ndeleted when this event is called.  To detect deleted objects,\ncheck the deleted flag sent to the\nSessionEvents.persistent_to_detached() to event after the\nflush proceeds, or check the Session.deleted collection\nwithin the SessionEvents.before_flush() event if deleted\nobjects need to be intercepted before the flush.\n\n\n\n\nParameters:\nsession &#8211; target Session\ninstance &#8211; the ORM-mapped instance being operated upon.\n\n\n\n\n\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.detached_to_persistent
properties.ColumnProperty.Comparator.all_	A										<section class="prog__container"><pre><code>\nall_()</code></pre><p>\ninherited from the all_() method of ColumnOperatorsProduce a all_() clause against the\nparent object.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.all_
properties.ColumnProperty.__init__	A										<section class="prog__container"><pre><code>\nColumnProperty.__init__(*columns, **kwargs)</code></pre><p>Construct a new ColumnProperty object.This constructor is mirrored as a public API function; see column_property() for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.__init__
interfaces.PropComparator.any	A										<section class="prog__container"><pre><code>\nany(criterion=None, **kwargs)</code></pre><p>Return true if this collection contains any member that meets the\ngiven criterion.The usual implementation of any() is\nRelationshipProperty.Comparator.any().\n\n\n\nParameters:\ncriterion &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.\n**kwargs &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.any
attributes.QueryableAttribute.notlike	A										<section class="prog__container"><pre><code>\nnotlike(other, escape=None)</code></pre><p>\ninherited from the notlike() method of ColumnOperatorsimplement the NOT LIKE operator.This is equivalent to using negation with\nColumnOperators.like(), i.e. ~x.like(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.notlike
create_row_processor	D								*[[interfaces.MapperProperty.create_row_processor]], Produce row processing functions and append to the given set of populators lists. \n*[[descriptor_props.SynonymProperty.create_row_processor]], inherited from the create_row_processor() method of MapperProperty \n
session	A										<section class="prog__container"><pre><code>\nsession</code></pre><p>Return the owning Session for this instance,\nor None if none available.Note that the result here can in some cases be different\nfrom that of obj in session; an object that&#8217;s been deleted\nwill report as not in session, however if the transaction is\nstill in progress, this attribute will still refer to that session.\nOnly when the transaction is completed does the object become\nfully detached under normal circumstances.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.session
attributes.QueryableAttribute.distinct	A										<section class="prog__container"><pre><code>\ndistinct()</code></pre><p>\ninherited from the distinct() method of ColumnOperatorsProduce a distinct() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.distinct
properties.ColumnProperty.Comparator.distinct	A										<section class="prog__container"><pre><code>\ndistinct()</code></pre><p>\ninherited from the distinct() method of ColumnOperatorsProduce a distinct() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.distinct
properties.ColumnProperty.init	A										<section class="prog__container"><pre><code>\nColumnProperty.init()</code></pre><p>\ninherited from the init() method of MapperPropertyCalled after all mappers are created to assemble\nrelationships between mappers and perform other post-mapper-creation\ninitialization steps.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.init
attributes.QueryableAttribute.asc	A										<section class="prog__container"><pre><code>\nasc()</code></pre><p>\ninherited from the asc() method of ColumnOperatorsProduce a asc() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.asc
interfaces.PropComparator.ilike	A										<section class="prog__container"><pre><code>\nilike(other, escape=None)</code></pre><p>\ninherited from the ilike() method of ColumnOperatorsImplement the ilike operator.In a column context, produces the clause a ILIKE other.E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.ilike("%foobar%"))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.ilike
after_update	A										<section class="prog__container"><pre><code>\nafter_update(mapper, connection, target)</code></pre><p>Receive an object instance after an UPDATE statement\nis emitted corresponding to that instance.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'after_update')\ndef receive_after_update(mapper, connection, target):\n    "listen for the 'after_update' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to modify in-Python-only\nstate on the instance after an UPDATE occurs, as well\nas to emit additional SQL statements on the given\nconnection.This method is called for all instances that are\nmarked as &#8220;dirty&#8221;, even those which have no net changes\nto their column-based attributes, and for which\nno UPDATE statement has proceeded. An object is marked\nas dirty when any of its column-based attributes have a\n&#8220;set attribute&#8221; operation called or when any of its\ncollections are modified. If, at update time, no\ncolumn-based attributes have any net changes, no UPDATE\nstatement will be issued. This means that an instance\nbeing sent to after_update() is\nnot a guarantee that an UPDATE statement has been\nissued.To detect if the column-based attributes on the object have net\nchanges, and therefore resulted in an UPDATE statement, use\nobject_session(instance).is_modified(instance,\ninclude_collections=False).The event is often called for a batch of objects of the\nsame class after their UPDATE statements have been emitted at\nonce in a previous step. In the extremely rare case that\nthis is not desirable, the mapper() can be\nconfigured with batch=False, which will cause\nbatches of instances to be broken up into individual\n(and more poorly performing) event->persist->event\nsteps.\nWarning\nMapper-level flush events only allow very limited operations,\non attributes local to the row being operated upon only,\nas well as allowing any SQL to be emitted on the given\nConnection.  Please read fully the notes\nat Mapper-level Events for guidelines on using\nthese methods; generally, the SessionEvents.before_flush()\nmethod should be preferred for general on-flush changes.\n\n\n\n\nParameters:\nmapper &#8211; the Mapper which is the target\nof this event.\nconnection &#8211; the Connection being used to\nemit UPDATE statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.\ntarget &#8211; the mapped instance being persisted.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\n\n\n\nReturns:No return value is supported by this event.\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.after_update
after_flush	A										<section class="prog__container"><pre><code>\nafter_flush(session, flush_context)</code></pre><p>Execute after flush has completed, but before commit has been\ncalled.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_flush')\ndef receive_after_flush(session, flush_context):\n    "listen for the 'after_flush' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>Note that the session&#8217;s state is still in pre-flush, i.e. &#8216;new&#8217;,\n&#8216;dirty&#8217;, and &#8216;deleted&#8217; lists still show pre-flush state as well\nas the history settings on instance attributes.\n\n\n\nParameters:\nsession &#8211; The target Session.\nflush_context &#8211; Internal UOWTransaction object\nwhich handles the details of the flush.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_flush
append	A										<section class="prog__container"><pre><code>\nappend(target, value, initiator)</code></pre><p>Receive a collection append event.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'append')\ndef receive_append(target, value, initiator):\n    "listen for the 'append' event"\n\n    # ... (event handling logic) ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.append
properties.ColumnProperty.Comparator.adapter	A										<section class="prog__container"><pre><code>\nadapter</code></pre><p>\ninherited from the adapter attribute of PropComparatorProduce a callable that adapts column expressions\nto suit an aliased version of this comparator.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.adapter
mapper_configured	A										<section class="prog__container"><pre><code>\nmapper_configured(mapper, class_)</code></pre><p>Called when a specific mapper has completed its own configuration\nwithin the scope of the configure_mappers() call.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'mapper_configured')\ndef receive_mapper_configured(mapper, class_):\n    "listen for the 'mapper_configured' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>The MapperEvents.mapper_configured() event is invoked\nfor each mapper that is encountered when the\norm.configure_mappers() function proceeds through the current\nlist of not-yet-configured mappers.\norm.configure_mappers() is typically invoked\nautomatically as mappings are first used, as well as each time\nnew mappers have been made available and new mapper use is\ndetected.When the event is called, the mapper should be in its final\nstate, but not including backrefs that may be invoked from\nother mappers; they might still be pending within the\nconfiguration operation.    Bidirectional relationships that\nare instead configured via the\norm.relationship.back_populates argument\nwill be fully available, since this style of relationship does not\nrely upon other possibly-not-configured mappers to know that they\nexist.For an event that is guaranteed to have all mappers ready\nto go including backrefs that are defined only on other\nmappings, use the MapperEvents.after_configured()\nevent; this event invokes only after all known mappings have been\nfully configured.The MapperEvents.mapper_configured() event, unlike\nMapperEvents.before_configured() or\nMapperEvents.after_configured(),\nis called for each mapper/class individually, and the mapper is\npassed to the event itself.  It also is called exactly once for\na particular mapper.  The event is therefore useful for\nconfigurational steps that benefit from being invoked just once\non a specific mapper basis, which don&#8217;t require that &#8220;backref&#8221;\nconfigurations are necessarily ready yet.\n\n\n\nParameters:\nmapper &#8211; the Mapper which is the target\nof this event.\nclass_ &#8211; the mapped class.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.mapper_configured
loaded_value	A										<section class="prog__container"><pre><code>\nloaded_value</code></pre><p>The current value of this attribute as loaded from the database.If the value has not been loaded, or is otherwise not present\nin the object&#8217;s dictionary, returns NO_VALUE.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState.loaded_value
after_soft_rollback	A										<section class="prog__container"><pre><code>\nafter_soft_rollback(session, previous_transaction)</code></pre><p>Execute after any rollback has occurred, including &#8220;soft&#8221;\nrollbacks that don&#8217;t actually emit at the DBAPI level.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_soft_rollback')\ndef receive_after_soft_rollback(session, previous_transaction):\n    "listen for the 'after_soft_rollback' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This corresponds to both nested and outer rollbacks, i.e.\nthe innermost rollback that calls the DBAPI&#8217;s\nrollback() method, as well as the enclosing rollback\ncalls that only pop themselves from the transaction stack.The given Session can be used to invoke SQL and\nSession.query() operations after an outermost rollback\nby first checking the Session.is_active flag:</p><pre><code>@event.listens_for(Session, "after_soft_rollback")\ndef do_something(session, previous_transaction):\n    if session.is_active:\n        session.execute("select * from some_table")\n</code></pre><p>\n\n\n\nParameters:\nsession &#8211; The target Session.\nprevious_transaction &#8211; The SessionTransaction\ntransactional marker object which was just closed.   The current\nSessionTransaction for the given Session is\navailable via the Session.transaction attribute.\n\n\n\n\n\nNew in version 0.7.3.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_soft_rollback
nullsfirst	D								*[[properties.ColumnProperty.Comparator.nullsfirst]], inherited from the nullsfirst() method of ColumnOperators \n*[[interfaces.PropComparator.nullsfirst]], inherited from the nullsfirst() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.nullsfirst]], inherited from the nullsfirst() method of ColumnOperators \n*[[attributes.QueryableAttribute.nullsfirst]], inherited from the nullsfirst() method of ColumnOperators \n
properties.ColumnProperty.Comparator.startswith	A										<section class="prog__container"><pre><code>\nstartswith(other, **kwargs)</code></pre><p>\ninherited from the startswith() method of ColumnOperatorsImplement the startwith operator.In a column context, produces the clause LIKE '<other>%'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith
base.InspectionAttr.is_property	A										<section class="prog__container"><pre><code>\nis_property = False</code></pre><p>True if this object is an instance of MapperProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_property
identity_key	A										<section class="prog__container"><pre><code>\nidentity_key</code></pre><p>Return the identity key for the mapped object.This is the key used to locate the object within\nthe Session.identity_map mapping.   It contains\nthe identity as returned by identity within it.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.identity_key
isnot_distinct_from	D								*[[properties.ColumnProperty.Comparator.isnot_distinct_from]], inherited from the isnot_distinct_from() method of ColumnOperators \n*[[interfaces.PropComparator.isnot_distinct_from]], inherited from the isnot_distinct_from() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.isnot_distinct_from]], inherited from the isnot_distinct_from() method of ColumnOperators \n*[[attributes.QueryableAttribute.isnot_distinct_from]], inherited from the isnot_distinct_from() method of ColumnOperators \n
interfaces.PropComparator.any_	A										<section class="prog__container"><pre><code>\nany_()</code></pre><p>\ninherited from the any_() method of ColumnOperatorsProduce a any_() clause against the\nparent object.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.any_
MultipleResultsFound	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.MultipleResultsFound</code></pre><p>A single database result was required but more than one were found.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.MultipleResultsFound
items	A										<section class="prog__container"><pre><code>\nitems() &#8594; list of D's (key, value) pairs, as 2-tuples</code></pre><p>\ninherited from the items() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.items
attributes.QueryableAttribute.match	A										<section class="prog__container"><pre><code>\nmatch(other, **kwargs)</code></pre><p>\ninherited from the match() method of ColumnOperatorsImplements a database-specific &#8216;match&#8217; operator.match() attempts to resolve to\na MATCH-like function or operator provided by the backend.\nExamples include:\nPostgreSQL - renders x @@ to_tsquery(y)\nMySQL - renders MATCH (x) AGAINST (y IN BOOLEAN MODE)\nOracle - renders CONTAINS(x, y)\nother backends may provide special implementations.\nBackends without any special implementation will emit\nthe operator as &#8220;MATCH&#8221;.  This is compatible with SQlite, for\nexample.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.match
InspectionAttr	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.base.InspectionAttr</code></pre><p>A base class applied to all ORM objects that can be returned\nby the inspect() function.The attributes defined here allow the usage of simple boolean\nchecks to test basic facts about the object returned.While the boolean checks here are basically the same as using\nthe Python isinstance() function, the flags here can be used without\nthe need to import all of these classes, and also such that\nthe SQLAlchemy class system can change while leaving the flags\nhere intact for forwards-compatibility.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr
interfaces.PropComparator.in_	A										<section class="prog__container"><pre><code>\nin_(other)</code></pre><p>\ninherited from the in_() method of ColumnOperatorsImplement the in operator.In a column context, produces the clause a IN other.\n&#8220;other&#8221; may be a tuple/list of column expressions,\nor a select() construct.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.in_
properties.RelationshipProperty.Comparator.desc	A										<section class="prog__container"><pre><code>\ndesc()</code></pre><p>\ninherited from the desc() method of ColumnOperatorsProduce a desc() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.desc
base.InspectionAttr.extension_type	A										<section class="prog__container"><pre><code>\nextension_type = symbol('NOT_EXTENSION')</code></pre><p>The extension type, if any.\nDefaults to interfaces.NOT_EXTENSION\nNew in version 0.8.0.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.extension_type
persistent_to_transient	A										<section class="prog__container"><pre><code>\npersistent_to_transient(session, instance)</code></pre><p>Intercept the &#8220;persistent to transient&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'persistent_to_transient')\ndef receive_persistent_to_transient(session, instance):\n    "listen for the 'persistent_to_transient' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This less common transition occurs when an pending object that has\nhas been flushed is evicted from the session; this can occur\nwhen the Session.rollback() method rolls back the transaction.\n\n\n\nParameters:\nsession &#8211; target Session\ninstance &#8211; the ORM-mapped instance being operated upon.\n\n\n\n\n\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.persistent_to_transient
after_delete	A										<section class="prog__container"><pre><code>\nafter_delete(mapper, connection, target)</code></pre><p>Receive an object instance after a DELETE statement\nhas been emitted corresponding to that instance.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'after_delete')\ndef receive_after_delete(mapper, connection, target):\n    "listen for the 'after_delete' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to emit additional SQL statements on\nthe given connection as well as to perform application\nspecific bookkeeping related to a deletion event.The event is often called for a batch of objects of the\nsame class after their DELETE statements have been emitted at\nonce in a previous step.\nWarning\nMapper-level flush events only allow very limited operations,\non attributes local to the row being operated upon only,\nas well as allowing any SQL to be emitted on the given\nConnection.  Please read fully the notes\nat Mapper-level Events for guidelines on using\nthese methods; generally, the SessionEvents.before_flush()\nmethod should be preferred for general on-flush changes.\n\n\n\n\nParameters:\nmapper &#8211; the Mapper which is the target\nof this event.\nconnection &#8211; the Connection being used to\nemit DELETE statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.\ntarget &#8211; the mapped instance being deleted.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\n\n\n\nReturns:No return value is supported by this event.\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.after_delete
notin_	D								*[[properties.ColumnProperty.Comparator.notin_]], inherited from the notin_() method of ColumnOperators \n*[[interfaces.PropComparator.notin_]], inherited from the notin_() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.notin_]], inherited from the notin_() method of ColumnOperators \n*[[attributes.QueryableAttribute.notin_]], inherited from the notin_() method of ColumnOperators \n
descriptor_props.SynonymProperty.post_instrument_class	A										<section class="prog__container"><pre><code>\npost_instrument_class(mapper)</code></pre><p>\ninherited from the post_instrument_class() method of MapperPropertyPerform instrumentation adjustments that need to occur\nafter init() has completed.The given Mapper is the Mapper invoking the operation, which\nmay not be the same Mapper as self.parent in an inheritance\nscenario; however, Mapper will always at least be a sub-mapper of\nself.parent.This method is typically used by StrategizedProperty, which delegates\nit to LoaderStrategy.init_class_attribute() to perform final setup\non the class-bound InstrumentedAttribute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.post_instrument_class
filter_states_for_dep	A										<section class="prog__container"><pre><code>\nfilter_states_for_dep(dep, states)</code></pre><p>Filter the given list of InstanceStates to those relevant to the\ngiven DependencyProcessor.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.filter_states_for_dep
properties.ColumnProperty.Comparator.is_	A										<section class="prog__container"><pre><code>\nis_(other)</code></pre><p>\ninherited from the is_() method of ColumnOperatorsImplement the IS operator.Normally, IS is generated automatically when comparing to a\nvalue of None, which resolves to NULL.  However, explicit\nusage of IS may be desirable if comparing to boolean values\non certain platforms.\nNew in version 0.7.9.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.is_
DetachedInstanceError	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.DetachedInstanceError</code></pre><p>An attempt to access unloaded attributes on a\nmapped instance that is detached.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.DetachedInstanceError
distinct	D								*[[properties.ColumnProperty.Comparator.distinct]], inherited from the distinct() method of ColumnOperators \n*[[interfaces.PropComparator.distinct]], inherited from the distinct() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.distinct]], inherited from the distinct() method of ColumnOperators \n*[[attributes.QueryableAttribute.distinct]], inherited from the distinct() method of ColumnOperators \n
ObjectDereferencedError	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.ObjectDereferencedError</code></pre><p>An operation cannot complete due to an object being garbage\ncollected.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.ObjectDereferencedError
contains	D								*[[properties.ColumnProperty.Comparator.contains]], inherited from the contains() method of ColumnOperators \n*[[interfaces.PropComparator.contains]], inherited from the contains() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.contains]], Return a simple expression that tests a collection for containment of a particular item. \n*[[attributes.QueryableAttribute.contains]], inherited from the contains() method of ColumnOperators \n
properties.ColumnProperty.Comparator.notilike	A										<section class="prog__container"><pre><code>\nnotilike(other, escape=None)</code></pre><p>\ninherited from the notilike() method of ColumnOperatorsimplement the NOT ILIKE operator.This is equivalent to using negation with\nColumnOperators.ilike(), i.e. ~x.ilike(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.notilike
properties.RelationshipProperty.Comparator.any_	A										<section class="prog__container"><pre><code>\nany_()</code></pre><p>\ninherited from the any_() method of ColumnOperatorsProduce a any_() clause against the\nparent object.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.any_
AttributeEvents	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.events.AttributeEvents</code></pre><p>Bases: sqlalchemy.event.base.EventsDefine events for object attributes.These are typically defined on the class-bound descriptor for the\ntarget class.e.g.:</p><pre><code>from sqlalchemy import event\n\ndef my_append_listener(target, value, initiator):\n    print "received append event for target: %s" % target\n\nevent.listen(MyClass.collection, 'append', my_append_listener)\n</code></pre><p>Listeners have the option to return a possibly modified version\nof the value, when the retval=True flag is passed\nto listen():</p><pre><code>def validate_phone(target, value, oldvalue, initiator):\n    "Strip non-numeric characters from a phone number"\n\n    return re.sub(r'(?![0-9])', '', value)\n\n# setup listener on UserContact.phone attribute, instructing\n# it to use the return value\nlisten(UserContact.phone, 'set', validate_phone, retval=True)\n</code></pre><p>A validation function like the above can also raise an exception\nsuch as ValueError to halt the operation.Several modifiers are available to the listen() function.\n\n\n\nParameters:\nactive_history=False &#8211; When True, indicates that the\n&#8220;set&#8221; event would like to receive the &#8220;old&#8221; value being\nreplaced unconditionally, even if this requires firing off\ndatabase loads. Note that active_history can also be\nset directly via column_property() and\nrelationship().\npropagate=False &#8211; When True, the listener function will\nbe established not just for the class attribute given, but\nfor attributes of the same name on all current subclasses\nof that class, as well as all future subclasses of that\nclass, using an additional listener that listens for\ninstrumentation events.\nraw=False &#8211; When True, the &#8220;target&#8221; argument to the\nevent will be the InstanceState management\nobject, rather than the mapped instance itself.\nretval=False &#8211; when True, the user-defined event\nlistening must return the &#8220;value&#8221; argument from the\nfunction.  This gives the listening function the opportunity\nto change the value that is ultimately used for a &#8220;set&#8221;\nor &#8220;append&#8221; event.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents
interfaces.MapperProperty.setup	A										<section class="prog__container"><pre><code>\nsetup(context, entity, path, adapter, **kwargs)</code></pre><p>Called by Query for the purposes of constructing a SQL statement.Each MapperProperty associated with the target mapper processes the\nstatement referenced by the query context, adding columns and/or\ncriterion as appropriate.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.setup
after_bulk_update	A										<section class="prog__container"><pre><code>\nafter_bulk_update(update_context)</code></pre><p>Execute after a bulk update operation to the session.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style (arguments as of 0.9)\n@event.listens_for(SomeSessionOrFactory, 'after_bulk_update')\ndef receive_after_bulk_update(update_context):\n    "listen for the 'after_bulk_update' event"\n\n    # ... (event handling logic) ...\n\n# legacy calling style (pre-0.9)\n@event.listens_for(SomeSessionOrFactory, 'after_bulk_update')\ndef receive_after_bulk_update(session, query, query_context, result):\n    "listen for the 'after_bulk_update' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>\nChanged in version 0.9: The after_bulk_update event now accepts the \narguments update_context.\nListener functions which accept the previous argument \nsignature(s) listed above will be automatically \nadapted to the new signature.\nThis is called as a result of the Query.update() method.\n\n\n\nParameters:update_context &#8211; an &#8220;update context&#8221; object which contains\ndetails about the update, including these attributes:\n\n\nsession - the Session involved\nquery -the Query object that this update operation\nwas called upon.\ncontext The QueryContext object, corresponding\nto the invocation of an ORM query.\nresult the ResultProxy returned as a result of the\nbulk UPDATE operation.\n\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_bulk_update
properties.RelationshipProperty.Comparator.match	A										<section class="prog__container"><pre><code>\nmatch(other, **kwargs)</code></pre><p>\ninherited from the match() method of ColumnOperatorsImplements a database-specific &#8216;match&#8217; operator.match() attempts to resolve to\na MATCH-like function or operator provided by the backend.\nExamples include:\nPostgreSQL - renders x @@ to_tsquery(y)\nMySQL - renders MATCH (x) AGAINST (y IN BOOLEAN MODE)\nOracle - renders CONTAINS(x, y)\nother backends may provide special implementations.\nBackends without any special implementation will emit\nthe operator as &#8220;MATCH&#8221;.  This is compatible with SQlite, for\nexample.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.match
transient	A										<section class="prog__container"><pre><code>\ntransient</code></pre><p>Return true if the object is transient.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.transient
of_type	D								*[[properties.ColumnProperty.Comparator.of_type]], inherited from the of_type() method of PropComparator \n*[[interfaces.PropComparator.of_type]], Redefine this object in terms of a polymorphic subclass. \n*[[properties.RelationshipProperty.Comparator.of_type]], Produce a construct that represents a particular &#8216;subtype&#8217; of attribute for the parent class. \n
attributes.QueryableAttribute.concat	A										<section class="prog__container"><pre><code>\nconcat(other)</code></pre><p>\ninherited from the concat() method of ColumnOperatorsImplement the &#8216;concat&#8217; operator.In a column context, produces the clause a || b,\nor uses the concat() operator on MySQL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.concat
fromkeys	A										<section class="prog__container"><pre><code>\nfromkeys(S[, v]) &#8594; New dict with keys from S and values equal to v.</code></pre><p>\ninherited from the fromkeys() method of dictv defaults to None.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.fromkeys
is_distinct_from	D								*[[properties.ColumnProperty.Comparator.is_distinct_from]], inherited from the is_distinct_from() method of ColumnOperators \n*[[interfaces.PropComparator.is_distinct_from]], inherited from the is_distinct_from() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.is_distinct_from]], inherited from the is_distinct_from() method of ColumnOperators \n*[[attributes.QueryableAttribute.is_distinct_from]], inherited from the is_distinct_from() method of ColumnOperators \n
setup	D								*[[interfaces.MapperProperty.setup]], Called by Query for the purposes of constructing a SQL statement. \n*[[descriptor_props.SynonymProperty.setup]], inherited from the setup() method of MapperProperty \n
values	A										<section class="prog__container"><pre><code>\nvalues() &#8594; list of D's values</code></pre><p>\ninherited from the values() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.values
detached	A										<section class="prog__container"><pre><code>\ndetached</code></pre><p>Return true if the object is detached.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.detached
pickle	A										<section class="prog__container"><pre><code>\npickle(target, state_dict)</code></pre><p>Receive an object instance when its associated state is\nbeing pickled.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'pickle')\ndef receive_pickle(target, state_dict):\n    "listen for the 'pickle' event"\n\n    # ... (event handling logic) ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.pickle
history	A										<section class="prog__container"><pre><code>\nhistory</code></pre><p>Return the current pre-flush change history for\nthis attribute, via the History interface.This method will not emit loader callables if the value of the\nattribute is unloaded.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState.history
interfaces.PropComparator.distinct	A										<section class="prog__container"><pre><code>\ndistinct()</code></pre><p>\ninherited from the distinct() method of ColumnOperatorsProduce a distinct() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.distinct
descriptor_props.SynonymProperty.cascade_iterator	A										<section class="prog__container"><pre><code>\ncascade_iterator(type_, state, visited_instances=None, halt_on=None)</code></pre><p>\ninherited from the cascade_iterator() method of MapperPropertyIterate through instances related to the given instance for\na particular &#8216;cascade&#8217;, starting with this MapperProperty.Return an iterator3-tuples (instance, mapper, state).Note that the &#8216;cascade&#8217; collection on this MapperProperty is\nchecked first for the given type before cascade_iterator is called.This method typically only applies to RelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.cascade_iterator
after_transaction_create	A										<section class="prog__container"><pre><code>\nafter_transaction_create(session, transaction)</code></pre><p>Execute when a new SessionTransaction is created.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_transaction_create')\ndef receive_after_transaction_create(session, transaction):\n    "listen for the 'after_transaction_create' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event differs from after_begin()\nin that it occurs for each SessionTransaction\noverall, as opposed to when transactions are begun\non individual database connections.  It is also invoked\nfor nested transactions and subtransactions, and is always\nmatched by a corresponding\nafter_transaction_end() event\n(assuming normal operation of the Session).\n\n<span class="prog__sub">Parameters:</span><ul><li></li>\n<li>session &#8211; the target Session.</li>\n<li></li>\n<li>transaction &#8211; the target SessionTransaction.\nTo detect if this is the outermost\nSessionTransaction, as opposed to a &#8220;subtransaction&#8221; or a\nSAVEPOINT, test that the SessionTransaction.parent attribute\nis None:\n<pre><code>@event.listens_for(session, "after_transaction_create")\ndef after_transaction_create(session, transaction):\n    if transaction.parent is None:\n        # work with top-level transaction\n</code></pre>\nTo detect if the SessionTransaction is a SAVEPOINT, use the\nSessionTransaction.nested attribute:\n<pre><code>@event.listens_for(session, "after_transaction_create")\ndef after_transaction_create(session, transaction):\n    if transaction.nested:\n        # work with SAVEPOINT transaction\n</code></pre>\n</li>\n<li></li>\n</ul></p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_transaction_create
UnmappedInstanceError	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.UnmappedInstanceError(obj, msg=None)</code></pre><p>An mapping operation was requested for an unknown instance.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
class_attribute	D								*[[properties.ColumnProperty.class_attribute]], inherited from the class_attribute attribute of MapperProperty \n*[[interfaces.MapperProperty.class_attribute]], Return the class-bound descriptor corresponding to this MapperProperty. \n*[[properties.RelationshipProperty.class_attribute]], inherited from the class_attribute attribute of MapperProperty \n*[[descriptor_props.SynonymProperty.class_attribute]], inherited from the class_attribute attribute of MapperProperty \n
properties.ColumnProperty.Comparator.concat	A										<section class="prog__container"><pre><code>\nconcat(other)</code></pre><p>\ninherited from the concat() method of ColumnOperatorsImplement the &#8216;concat&#8217; operator.In a column context, produces the clause a || b,\nor uses the concat() operator on MySQL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.concat
descriptor_props.SynonymProperty.__init__	A										<section class="prog__container"><pre><code>\n__init__(name, map_column=None, descriptor=None, comparator_factory=None, doc=None, info=None)</code></pre><p>Construct a new SynonymProperty object.This constructor is mirrored as a public API function; see synonym() for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.__init__
properties.RelationshipProperty.Comparator	A										<section class="prog__container"><pre><code>\nclass Comparator(prop, parentmapper, adapt_to_entity=None, of_type=None)</code></pre><p>Bases: sqlalchemy.orm.interfaces.PropComparatorProduce boolean, comparison, and other operators for\nRelationshipProperty attributes.See the documentation for PropComparator for a brief\noverview of ORM level operator definition.See also:PropComparatorColumnProperty.ComparatorColumnOperatorsRedefining and Creating New OperatorsTypeEngine.comparator_factory</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator
after_begin	A										<section class="prog__container"><pre><code>\nafter_begin(session, transaction, connection)</code></pre><p>Execute after a transaction is begun on a connectionExample argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_begin')\ndef receive_after_begin(session, transaction, connection):\n    "listen for the 'after_begin' event"\n\n    # ... (event handling logic) ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_begin
properties.RelationshipProperty.Comparator.all_	A										<section class="prog__container"><pre><code>\nall_()</code></pre><p>\ninherited from the all_() method of ColumnOperatorsProduce a all_() clause against the\nparent object.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.all_
interfaces.PropComparator.desc	A										<section class="prog__container"><pre><code>\ndesc()</code></pre><p>\ninherited from the desc() method of ColumnOperatorsProduce a desc() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.desc
UnmappedError	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.UnmappedError</code></pre><p>Base for exceptions that involve expected mappings not present.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.UnmappedError
properties.ColumnProperty.Comparator.contains	A										<section class="prog__container"><pre><code>\ncontains(other, **kwargs)</code></pre><p>\ninherited from the contains() method of ColumnOperatorsImplement the &#8216;contains&#8217; operator.In a column context, produces the clause LIKE '%<other>%'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.contains
class_uninstrument	A										<section class="prog__container"><pre><code>\nclass_uninstrument(cls)</code></pre><p>Called before the given class is uninstrumented.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeBaseClass, 'class_uninstrument')\ndef receive_class_uninstrument(cls):\n    "listen for the 'class_uninstrument' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>To get at the ClassManager, use\nmanager_of_class().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstrumentationEvents.class_uninstrument
properties.ColumnProperty.Comparator.collate	A										<section class="prog__container"><pre><code>\ncollate(collation)</code></pre><p>\ninherited from the collate() method of ColumnOperatorsProduce a collate() clause against\nthe parent object, given the collation string.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.collate
is_instance	A										<section class="prog__container"><pre><code>\nis_instance = False</code></pre><p>True if this object is an instance of InstanceState.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_instance
persistent_to_detached	A										<section class="prog__container"><pre><code>\npersistent_to_detached(session, instance)</code></pre><p>Intercept the &#8220;persistent to detached&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'persistent_to_detached')\ndef receive_persistent_to_detached(session, instance):\n    "listen for the 'persistent_to_detached' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked when a persistent object is evicted\nfrom the session.  There are many conditions that cause this\nto happen, including:\nusing a method such as Session.expunge()\nor Session.close()\nCalling the Session.rollback() method, when the object\nwas part of an INSERT statement for that session&#8217;s transaction\n\n\n\n\nParameters:\nsession &#8211; target Session\ninstance &#8211; the ORM-mapped instance being operated upon.\ndeleted &#8211; boolean.  If True, indicates this object moved\nto the detached state because it was marked as deleted and flushed.\n\n\n\n\n\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.persistent_to_detached
attributes.QueryableAttribute.all_	A										<section class="prog__container"><pre><code>\nall_()</code></pre><p>\ninherited from the all_() method of ColumnOperatorsProduce a all_() clause against the\nparent object.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.all_
is_mapper	A										<section class="prog__container"><pre><code>\nis_mapper = False</code></pre><p>True if this object is an instance of Mapper.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_mapper
before_compile	A										<section class="prog__container"><pre><code>\nbefore_compile(query)</code></pre><p>Receive the Query object before it is composed into a\ncore Select object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeQuery, 'before_compile')\ndef receive_before_compile(query):\n    "listen for the 'before_compile' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is intended to allow changes to the query given:</p><pre><code>@event.listens_for(Query, "before_compile", retval=True)\ndef no_deleted(query):\n    for desc in query.column_descriptions:\n        if desc['type'] is User:\n            entity = desc['entity']\n            query = query.filter(entity.deleted == False)\n    return query\n</code></pre><p>The event should normally be listened with the retval=True\nparameter set, so that the modified query may be returned.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.QueryEvents.before_compile
interfaces.PropComparator.between	A										<section class="prog__container"><pre><code>\nbetween(cleft, cright, symmetric=False)</code></pre><p>\ninherited from the between() method of ColumnOperatorsProduce a between() clause against\nthe parent object, given the lower and upper range.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.between
before_insert	A										<section class="prog__container"><pre><code>\nbefore_insert(mapper, connection, target)</code></pre><p>Receive an object instance before an INSERT statement\nis emitted corresponding to that instance.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'before_insert')\ndef receive_before_insert(mapper, connection, target):\n    "listen for the 'before_insert' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to modify local, non-object related\nattributes on the instance before an INSERT occurs, as well\nas to emit additional SQL statements on the given\nconnection.The event is often called for a batch of objects of the\nsame class before their INSERT statements are emitted at\nonce in a later step. In the extremely rare case that\nthis is not desirable, the mapper() can be\nconfigured with batch=False, which will cause\nbatches of instances to be broken up into individual\n(and more poorly performing) event->persist->event\nsteps.\nWarning\nMapper-level flush events only allow very limited operations,\non attributes local to the row being operated upon only,\nas well as allowing any SQL to be emitted on the given\nConnection.  Please read fully the notes\nat Mapper-level Events for guidelines on using\nthese methods; generally, the SessionEvents.before_flush()\nmethod should be preferred for general on-flush changes.\n\n\n\n\nParameters:\nmapper &#8211; the Mapper which is the target\nof this event.\nconnection &#8211; the Connection being used to\nemit INSERT statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.\ntarget &#8211; the mapped instance being persisted.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\n\n\n\nReturns:No return value is supported by this event.\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.before_insert
cascade	D								*[[interfaces.MapperProperty.cascade]], The set of &#8216;cascade&#8217; attribute names. \n*[[properties.RelationshipProperty.cascade]], Return the current cascade setting for this RelationshipProperty. \n
callables	A										<section class="prog__container"><pre><code>\ncallables = ()</code></pre><p>A namespace where a per-state loader callable can be associated.In SQLAlchemy 1.0, this is only used for lazy loaders / deferred\nloaders that were set up via query option.Previously, callables was used also to indicate expired attributes\nby storing a link to the InstanceState itself in this dictionary.\nThis role is now handled by the expired_attributes set.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.callables
interfaces.PropComparator.of_type	A										<section class="prog__container"><pre><code>\nof_type(class_)</code></pre><p>Redefine this object in terms of a polymorphic subclass.Returns a new PropComparator from which further criterion can be\nevaluated.e.g.:</p><pre><code>query.join(Company.employees.of_type(Engineer)).\\n   filter(Engineer.name=='foo')\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.of_type
operate	D								*[[interfaces.PropComparator.operate]], inherited from the operate() method of Operators \n*[[properties.RelationshipProperty.Comparator.operate]], inherited from the operate() method of Operators \n
interfaces.PropComparator.startswith	A										<section class="prog__container"><pre><code>\nstartswith(other, **kwargs)</code></pre><p>\ninherited from the startswith() method of ColumnOperatorsImplement the startwith operator.In a column context, produces the clause LIKE '<other>%'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.startswith
descriptor_props.CompositeProperty.do_init	A										<section class="prog__container"><pre><code>\nCompositeProperty.do_init()</code></pre><p>Initialization which occurs after the CompositeProperty\nhas been associated with its parent mapper.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty.do_init
instrumentation.ClassManager.__lt__	A										<section class="prog__container"><pre><code>\n__lt__</code></pre><p>\ninherited from the __lt__ attribute of dictx.__lt__(y) <==> x<y</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.__lt__
properties.ColumnProperty.Comparator.adapt_to_entity	A										<section class="prog__container"><pre><code>\nadapt_to_entity(adapt_to_entity)</code></pre><p>\ninherited from the adapt_to_entity() method of PropComparatorReturn a copy of this PropComparator which will use the given\nAliasedInsp to produce corresponding expressions.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.adapt_to_entity
iteritems	A										<section class="prog__container"><pre><code>\niteritems() &#8594; an iterator over the (key, value) items of D</code></pre><p>\ninherited from the iteritems() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.iteritems
UOWTransaction	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.session.UOWTransaction(session)</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction
properties.RelationshipProperty.Comparator.collate	A										<section class="prog__container"><pre><code>\ncollate(collation)</code></pre><p>\ninherited from the collate() method of ColumnOperatorsProduce a collate() clause against\nthe parent object, given the collation string.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.collate
all_	D								*[[properties.ColumnProperty.Comparator.all_]], inherited from the all_() method of ColumnOperators \n*[[interfaces.PropComparator.all_]], inherited from the all_() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.all_]], inherited from the all_() method of ColumnOperators \n*[[attributes.QueryableAttribute.all_]], inherited from the all_() method of ColumnOperators \n
properties.RelationshipProperty.Comparator.asc	A										<section class="prog__container"><pre><code>\nasc()</code></pre><p>\ninherited from the asc() method of ColumnOperatorsProduce a asc() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.asc
loaded_as_persistent	A										<section class="prog__container"><pre><code>\nloaded_as_persistent(session, instance)</code></pre><p>Intercept the &#8220;loaded as persistent&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'loaded_as_persistent')\ndef receive_loaded_as_persistent(session, instance):\n    "listen for the 'loaded_as_persistent' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked within the ORM loading process, and is invoked\nvery similarly to the InstanceEvents.load() event.  However,\nthe event here is linkable to a Session class or instance,\nrather than to a mapper or class hierarchy, and integrates\nwith the other session lifecycle events smoothly.  The object\nis guaranteed to be present in the session&#8217;s identity map when\nthis event is called.\n\n\n\nParameters:\nsession &#8211; target Session\ninstance &#8211; the ORM-mapped instance being operated upon.\n\n\n\n\n\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.loaded_as_persistent
dispose	A										<section class="prog__container"><pre><code>\ndispose()</code></pre><p>Dissasociate this manager from its class.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.dispose
interfaces.PropComparator.notlike	A										<section class="prog__container"><pre><code>\nnotlike(other, escape=None)</code></pre><p>\ninherited from the notlike() method of ColumnOperatorsimplement the NOT LIKE operator.This is equivalent to using negation with\nColumnOperators.like(), i.e. ~x.like(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.notlike
descriptor_props.SynonymProperty.merge	A										<section class="prog__container"><pre><code>\nmerge(session, source_state, source_dict, dest_state, dest_dict, load, _recursive, _resolve_conflict_map)</code></pre><p>\ninherited from the merge() method of MapperPropertyMerge the attribute represented by this MapperProperty\nfrom source to destination object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.merge
interfaces.PropComparator.all_	A										<section class="prog__container"><pre><code>\nall_()</code></pre><p>\ninherited from the all_() method of ColumnOperatorsProduce a all_() clause against the\nparent object.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.all_
pending	A										<section class="prog__container"><pre><code>\npending</code></pre><p>Return true if the object is pending.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.pending
properties.RelationshipProperty.Comparator.isnot_distinct_from	A										<section class="prog__container"><pre><code>\nisnot_distinct_from(other)</code></pre><p>\ninherited from the isnot_distinct_from() method of ColumnOperatorsImplement the IS NOT DISTINCT FROM operator.Renders &#8220;a IS NOT DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS b&#8221;.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.isnot_distinct_from
after_attach	A										<section class="prog__container"><pre><code>\nafter_attach(session, instance)</code></pre><p>Execute after an instance is attached to a session.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_attach')\ndef receive_after_attach(session, instance):\n    "listen for the 'after_attach' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This is called after an add, delete or merge.\nNote\nAs of 0.8, this event fires off after the item\nhas been fully associated with the session, which is\ndifferent than previous releases.  For event\nhandlers that require the object not yet\nbe part of session state (such as handlers which\nmay autoflush while the target object is not\nyet complete) consider the\nnew before_attach() event.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_attach
adapt_to_entity	D								*[[properties.ColumnProperty.Comparator.adapt_to_entity]], inherited from the adapt_to_entity() method of PropComparator \n*[[interfaces.PropComparator.adapt_to_entity]], Return a copy of this PropComparator which will use the given AliasedInsp to produce corresponding expressions. \n
events.MapperEvents.instrument_class	A										<section class="prog__container"><pre><code>\ninstrument_class(mapper, class_)</code></pre><p>Receive a class when the mapper is first constructed,\nbefore instrumentation is applied to the mapped class.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'instrument_class')\ndef receive_instrument_class(mapper, class_):\n    "listen for the 'instrument_class' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is the earliest phase of mapper construction.\nMost attributes of the mapper are not yet initialized.This listener can either be applied to the Mapper\nclass overall, or to any un-mapped class which serves as a base\nfor classes that will be mapped (using the propagate=True flag):</p><pre><code>Base = declarative_base()\n\n@event.listens_for(Base, "instrument_class", propagate=True)\ndef on_new_class(mapper, cls_):\n    " ... "\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.instrument_class
iterkeys	A										<section class="prog__container"><pre><code>\niterkeys() &#8594; an iterator over the keys of D</code></pre><p>\ninherited from the iterkeys() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.iterkeys
properties.RelationshipProperty.Comparator.startswith	A										<section class="prog__container"><pre><code>\nstartswith(other, **kwargs)</code></pre><p>\ninherited from the startswith() method of ColumnOperatorsImplement the startwith operator.In a column context, produces the clause LIKE '<other>%'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith
unregister	A										<section class="prog__container"><pre><code>\nunregister()</code></pre><p>remove all instrumentation established by this ClassManager.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.unregister
properties.ColumnProperty.Comparator.ilike	A										<section class="prog__container"><pre><code>\nilike(other, escape=None)</code></pre><p>\ninherited from the ilike() method of ColumnOperatorsImplement the ilike operator.In a column context, produces the clause a ILIKE other.E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.ilike("%foobar%"))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike
refresh	A										<section class="prog__container"><pre><code>\nrefresh(target, context, attrs)</code></pre><p>Receive an object instance after one or more attributes have\nbeen refreshed from a query.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'refresh')\ndef receive_refresh(target, context, attrs):\n    "listen for the 'refresh' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>Contrast this to the InstanceEvents.load() method, which\nis invoked when the object is first loaded from a query.\n\n\n\nParameters:\ntarget &#8211; the mapped instance.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\ncontext &#8211; the QueryContext corresponding to the\ncurrent Query in progress.\nattrs &#8211; sequence of attribute names which\nwere populated, or None if all column-mapped, non-deferred\nattributes were populated.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.refresh
merge	D								*[[interfaces.MapperProperty.merge]], Merge the attribute represented by this MapperProperty from source to destination object. \n*[[descriptor_props.SynonymProperty.merge]], inherited from the merge() method of MapperProperty \n
properties.ColumnProperty.Comparator.any_	A										<section class="prog__container"><pre><code>\nany_()</code></pre><p>\ninherited from the any_() method of ColumnOperatorsProduce a any_() clause against the\nparent object.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.any_
Event	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.attributes.Event(attribute_impl, op)</code></pre><p>A token propagated throughout the course of a chain of attribute\nevents.Serves as an indicator of the source of the event and also provides\na means of controlling propagation across a chain of attribute\noperations.The Event object is sent as the initiator argument\nwhen dealing with the AttributeEvents.append(),\nAttributeEvents.set(),\nand AttributeEvents.remove() events.The Event object is currently interpreted by the backref\nevent handlers, and is used to control the propagation of operations\nacross two mutually-dependent attributes.\nNew in version 0.9.0.\n\n\n\n\nVariables:\nimpl &#8211; The AttributeImpl which is the current event\ninitiator.\nop &#8211; The symbol OP_APPEND, OP_REMOVE or\nOP_REPLACE, indicating the source operation.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.Event
unloaded	A										<section class="prog__container"><pre><code>\nunloaded</code></pre><p>Return the set of keys which do not have a loaded value.This includes expired attributes and any other attribute that\nwas never populated or modified.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.unloaded
was_already_deleted	A										<section class="prog__container"><pre><code>\nwas_already_deleted(state)</code></pre><p>return true if the given state is expired and was deleted\npreviously.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.was_already_deleted
has_identity	A										<section class="prog__container"><pre><code>\nhas_identity</code></pre><p>Return True if this object has an identity key.This should always have the same value as the\nexpression state.persistent or state.detached.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.has_identity
state.InstanceState.mapper	A										<section class="prog__container"><pre><code>\nmapper</code></pre><p>Return the Mapper used for this mapepd object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.mapper
ComparableProperty	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.properties.ComparableProperty(comparator_factory, descriptor=None, doc=None, info=None)</code></pre><p>Bases: sqlalchemy.orm.descriptor_props.DescriptorPropertyInstruments a Python property for use in query expressions.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ComparableProperty
viewkeys	A										<section class="prog__container"><pre><code>\nviewkeys() &#8594; a set-like object providing a view on D's keys</code></pre><p>\ninherited from the viewkeys() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.viewkeys
is_selectable	A										<section class="prog__container"><pre><code>\nis_selectable = False</code></pre><p>Return True if this object is an instance of Selectable.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_selectable
init_scalar	A										<section class="prog__container"><pre><code>\ninit_scalar(target, value, dict_)</code></pre><p>Receive a scalar &#8220;init&#8221; event.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'init_scalar')\ndef receive_init_scalar(target, value, dict_):\n    "listen for the 'init_scalar' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked when an uninitialized, unpersisted scalar\nattribute is accessed.  A value of None is typically returned\nin this case; no changes are made to the object&#8217;s state.The event handler can alter this behavior in two ways.\nOne is that a value other than None may be returned.  The other\nis that the value may be established as part of the object&#8217;s state,\nwhich will also have the effect that it is persisted.Typical use is to establish a specific default value of an attribute\nupon access:</p><pre><code>SOME_CONSTANT = 3.1415926\n\n@event.listens_for(\n    MyClass.some_attribute, "init_scalar",\n    retval=True, propagate=True)\ndef _init_some_attribute(target, dict_, value):\n    dict_['some_attribute'] = SOME_CONSTANT\n    return SOME_CONSTANT\n</code></pre><p>Above, we initialize the attribute MyClass.some_attribute to the\nvalue of SOME_CONSTANT.   The above code includes the following\nfeatures:\nBy setting the value SOME_CONSTANT in the given dict_,\nwe indicate that the value is to be persisted to the database.\nThe given value is only persisted to the database if we\nexplicitly associate it with the object.  The dict_ given\nis the __dict__ element of the mapped object, assuming the\ndefault attribute instrumentation system is in place.\nBy establishing the retval=True flag, the value we return\nfrom the function will be returned by the attribute getter.\nWithout this flag, the event is assumed to be a passive observer\nand the return value of our function is ignored.\nThe propagate=True flag is significant if the mapped class\nincludes inheriting subclasses, which would also make use of this\nevent listener.  Without this flag, an inheriting subclass will\nnot use our event handler.\nWhen we establish the value in the given dictionary, the value will\nbe used in the INSERT statement established by the unit of work.\nNormally, the default returned value of None is not established as\npart of the object, to avoid the issue of mutations occurring to the\nobject in response to a normally passive &#8220;get&#8221; operation, and also\nsidesteps the issue of whether or not the AttributeEvents.set()\nevent should be awkwardly fired off during an attribute access\noperation.  This does not impact the INSERT operation since the\nNone value matches the value of NULL that goes into the\ndatabase in any case; note that None is skipped during the INSERT\nto ensure that column and SQL-level default functions can fire off.The attribute set event AttributeEvents.set() as well as the\nrelated validation feature provided by orm.validates is\nnot invoked when we apply our value to the given dict_.  To\nhave these events to invoke in response to our newly generated\nvalue, apply the value to the given object as a normal attribute\nset operation:</p><pre><code>SOME_CONSTANT = 3.1415926\n\n@event.listens_for(\n    MyClass.some_attribute, "init_scalar",\n    retval=True, propagate=True)\ndef _init_some_attribute(target, dict_, value):\n    # will also fire off attribute set events\n    target.some_attribute = SOME_CONSTANT\n    return SOME_CONSTANT\n</code></pre><p>When multiple listeners are set up, the generation of the value\nis &#8220;chained&#8221; from one listener to the next by passing the value\nreturned by the previous listener that specifies retval=True\nas the value argument of the next listener.The AttributeEvents.init_scalar() event may be used to\nextract values from the default values and/or callables established on\nmapped Column objects.  See the &#8220;active column defaults&#8221;\nexample in Attribute Instrumentation for an example of this.\nNew in version 1.1.\n\n\n\n\nParameters:\ntarget &#8211; the object instance receiving the event.\nIf the listener is registered with raw=True, this will\nbe the InstanceState object.\nvalue &#8211; the value that is to be returned before this event\nlistener were invoked.  This value begins as the value None,\nhowever will be the return value of the previous event handler\nfunction if multiple listeners are present.\ndict_ &#8211; the attribute dictionary of this mapped object.\nThis is normally the __dict__ of the object, but in all cases\nrepresents the destination that the attribute system uses to get\nat the actual value of this attribute.  Placing the value in this\ndictionary has the effect that the value will be used in the\nINSERT statement generated by the unit of work.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.init_scalar
is_property	D								*[[base.InspectionAttr.is_property]], True if this object is an instance of MapperProperty. \n*[[interfaces.MapperProperty.is_property]], Part of the InspectionAttr interface; states this object is a mapper property. \n
collate	D								*[[properties.ColumnProperty.Comparator.collate]], inherited from the collate() method of ColumnOperators \n*[[interfaces.PropComparator.collate]], inherited from the collate() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.collate]], inherited from the collate() method of ColumnOperators \n*[[attributes.QueryableAttribute.collate]], inherited from the collate() method of ColumnOperators \n
interfaces.PropComparator.__le__	A										<section class="prog__container"><pre><code>\n__le__(other)</code></pre><p>\ninherited from the __le__() method of ColumnOperatorsImplement the <= operator.In a column context, produces the clause a <= b.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.__le__
properties.RelationshipProperty.Comparator.operate	A										<section class="prog__container"><pre><code>\noperate(op, *other, **kwargs)</code></pre><p>\ninherited from the operate() method of OperatorsOperate on an argument.This is the lowest level of operation, raises\nNotImplementedError by default.Overriding this on a subclass can allow common\nbehavior to be applied to all operations.\nFor example, overriding ColumnOperators\nto apply func.lower() to the left and right\nside:</p><pre><code>class MyComparator(ColumnOperators):\n    def operate(self, op, other):\n        return op(func.lower(self), func.lower(other))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.operate
is_	D								*[[properties.ColumnProperty.Comparator.is_]], inherited from the is_() method of ColumnOperators \n*[[interfaces.PropComparator.is_]], inherited from the is_() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.is_]], inherited from the is_() method of ColumnOperators \n*[[attributes.QueryableAttribute.is_]], inherited from the is_() method of ColumnOperators \n
properties.ColumnProperty.Comparator.nullslast	A										<section class="prog__container"><pre><code>\nnullslast()</code></pre><p>\ninherited from the nullslast() method of ColumnOperatorsProduce a nullslast() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.nullslast
asc	D								*[[properties.ColumnProperty.Comparator.asc]], inherited from the asc() method of ColumnOperators \n*[[interfaces.PropComparator.asc]], inherited from the asc() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.asc]], inherited from the asc() method of ColumnOperators \n*[[attributes.QueryableAttribute.asc]], inherited from the asc() method of ColumnOperators \n
check_modified	A										<section class="prog__container"><pre><code>\ncheck_modified()</code></pre><p>return True if any InstanceStates present have been marked\nas &#8216;modified&#8217;.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.identity.IdentityMap.check_modified
pending_to_transient	A										<section class="prog__container"><pre><code>\npending_to_transient(session, instance)</code></pre><p>Intercept the &#8220;pending to transient&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'pending_to_transient')\ndef receive_pending_to_transient(session, instance):\n    "listen for the 'pending_to_transient' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This less common transition occurs when an pending object that has\nnot been flushed is evicted from the session; this can occur\nwhen the Session.rollback() method rolls back the transaction,\nor when the Session.expunge() method is used.\n\n\n\nParameters:\nsession &#8211; target Session\ninstance &#8211; the ORM-mapped instance being operated upon.\n\n\n\n\n\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.pending_to_transient
properties.RelationshipProperty.set_parent	A										<section class="prog__container"><pre><code>\nRelationshipProperty.set_parent(parent, init)</code></pre><p>\ninherited from the set_parent() method of MapperPropertySet the parent mapper that references this MapperProperty.This method is overridden by some subclasses to perform extra\nsetup when the mapper is first known.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.set_parent
setdefault	A										<section class="prog__container"><pre><code>\nsetdefault(k[, d]) &#8594; D.get(k,d), also set D[k]=d if k not in D</code></pre><p>\ninherited from the setdefault() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.setdefault
ColumnProperty	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.properties.ColumnProperty(*columns, **kwargs)</code></pre><p>Bases: sqlalchemy.orm.interfaces.StrategizedPropertyDescribes an object attribute that corresponds to a table column.Public constructor is the orm.column_property() function.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty
attributes.QueryableAttribute.isnot_distinct_from	A										<section class="prog__container"><pre><code>\nisnot_distinct_from(other)</code></pre><p>\ninherited from the isnot_distinct_from() method of ColumnOperatorsImplement the IS NOT DISTINCT FROM operator.Renders &#8220;a IS NOT DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS b&#8221;.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.isnot_distinct_from
attributes.QueryableAttribute.like	A										<section class="prog__container"><pre><code>\nlike(other, escape=None)</code></pre><p>\ninherited from the like() method of ColumnOperatorsImplement the like operator.In a column context, produces the clause a LIKE other.E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.like("%foobar%"))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.like
attributes.QueryableAttribute.desc	A										<section class="prog__container"><pre><code>\ndesc()</code></pre><p>\ninherited from the desc() method of ColumnOperatorsProduce a desc() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.desc
properties.ColumnProperty.Comparator.in_	A										<section class="prog__container"><pre><code>\nin_(other)</code></pre><p>\ninherited from the in_() method of ColumnOperatorsImplement the in operator.In a column context, produces the clause a IN other.\n&#8220;other&#8221; may be a tuple/list of column expressions,\nor a select() construct.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.in_
properties.RelationshipProperty.Comparator.adapter	A										<section class="prog__container"><pre><code>\nadapter</code></pre><p>\ninherited from the adapter attribute of PropComparatorProduce a callable that adapts column expressions\nto suit an aliased version of this comparator.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.adapter
__delete__	A										<section class="prog__container"><pre><code>\n__delete__(instance)</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.InstrumentedAttribute.__delete__
properties.ColumnProperty.Comparator.like	A										<section class="prog__container"><pre><code>\nlike(other, escape=None)</code></pre><p>\ninherited from the like() method of ColumnOperatorsImplement the like operator.In a column context, produces the clause a LIKE other.E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.like("%foobar%"))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.like
instrumentation.ClassManager.__le__	A										<section class="prog__container"><pre><code>\n__le__</code></pre><p>\ninherited from the __le__ attribute of dictx.__le__(y) <==> x<=y</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.__le__
interfaces.PropComparator.adapter	A										<section class="prog__container"><pre><code>\nadapter</code></pre><p>Produce a callable that adapts column expressions\nto suit an aliased version of this comparator.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.adapter
properties.RelationshipProperty.Comparator.has	A										<section class="prog__container"><pre><code>\nhas(criterion=None, **kwargs)</code></pre><p>Produce an expression that tests a scalar reference against\nparticular criterion, using EXISTS.An expression like:</p><pre><code>session.query(MyClass).filter(\n    MyClass.somereference.has(SomeRelated.x==2)\n)\n</code></pre><p>Will produce a query like:</p><pre><code>SELECT * FROM my_table WHERE\nEXISTS (SELECT 1 FROM related WHERE\nrelated.id==my_table.related_id AND related.x=2)\n</code></pre><p>Because has() uses\na correlated subquery, its performance is not nearly as\ngood when compared against large target tables as that of\nusing a join.has() is only\nvalid for scalar references, i.e. a relationship()\nthat has uselist=False.  For collection references,\nuse any().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.has
isnot	D								*[[properties.ColumnProperty.Comparator.isnot]], inherited from the isnot() method of ColumnOperators \n*[[interfaces.PropComparator.isnot]], inherited from the isnot() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.isnot]], inherited from the isnot() method of ColumnOperators \n*[[attributes.QueryableAttribute.isnot]], inherited from the isnot() method of ColumnOperators \n
interfaces.MapperProperty.class_attribute	A										<section class="prog__container"><pre><code>\nclass_attribute</code></pre><p>Return the class-bound descriptor corresponding to this\nMapperProperty.This is basically a getattr() call:</p><pre><code>return getattr(self.parent.class_, self.key)\n</code></pre><p>I.e. if this MapperProperty were named addresses,\nand the class to which it is mapped is User, this sequence\nis possible:</p><pre><code>>>> from sqlalchemy import inspect\n>>> mapper = inspect(User)\n>>> addresses_property = mapper.attrs.addresses\n>>> addresses_property.class_attribute is User.addresses\nTrue\n>>> User.addresses.property is addresses_property\nTrue\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.class_attribute
attributes.QueryableAttribute.__le__	A										<section class="prog__container"><pre><code>\n__le__(other)</code></pre><p>\ninherited from the __le__() method of ColumnOperatorsImplement the <= operator.In a column context, produces the clause a <= b.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.__le__
load_history	A										<section class="prog__container"><pre><code>\nload_history()</code></pre><p>Return the current pre-flush change history for\nthis attribute, via the History interface.This method will emit loader callables if the value of the\nattribute is unloaded.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState.load_history
attributes.QueryableAttribute.__lt__	A										<section class="prog__container"><pre><code>\n__lt__(other)</code></pre><p>\ninherited from the __lt__() method of ColumnOperatorsImplement the < operator.In a column context, produces the clause a < b.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.__lt__
copy	A										<section class="prog__container"><pre><code>\ncopy() &#8594; a shallow copy of D</code></pre><p>\ninherited from the copy() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.copy
descriptor_props.CompositeProperty.Comparator	A										<section class="prog__container"><pre><code>\nclass Comparator(prop, parentmapper, adapt_to_entity=None)</code></pre><p>Bases: sqlalchemy.orm.interfaces.PropComparatorProduce boolean, comparison, and other operators for\nCompositeProperty attributes.See the example in Redefining Comparison Operations for Composites for an overview\nof usage , as well as the documentation for PropComparator.See also:PropComparatorColumnOperatorsRedefining and Creating New OperatorsTypeEngine.comparator_factory</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty.Comparator
properties.ColumnProperty.Comparator.op	A										<section class="prog__container"><pre><code>\nop(opstring, precedence=0, is_comparison=False)</code></pre><p>\ninherited from the op() method of Operatorsproduce a generic operator function.e.g.:</p><pre><code>somecolumn.op("*")(5)\n</code></pre><p>produces:</p><pre><code>somecolumn * 5\n</code></pre><p>This function can also be used to make bitwise operators explicit. For\nexample:</p><pre><code>somecolumn.op('&')(0xff)\n</code></pre><p>is a bitwise AND of the value in somecolumn.\n\n\n\nParameters:\noperator &#8211; a string which will be output as the infix operator\nbetween this element and the expression passed to the\ngenerated function.\nprecedence &#8211; precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of 0 is lower than all\noperators except for the comma (,) and AS operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.\n\nNew in version 0.8: - added the &#8216;precedence&#8217; argument.\n\n\nis_comparison &#8211; if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like ==, >, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.\n\nNew in version 0.9.2: - added the\nOperators.op.is_comparison flag.\n\n\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.op
attributes.QueryableAttribute.endswith	A										<section class="prog__container"><pre><code>\nendswith(other, **kwargs)</code></pre><p>\ninherited from the endswith() method of ColumnOperatorsImplement the &#8216;endswith&#8217; operator.In a column context, produces the clause LIKE '%<other>'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.endswith
attributes.QueryableAttribute.__ne__	A										<section class="prog__container"><pre><code>\n__ne__(other)</code></pre><p>\ninherited from the __ne__() method of ColumnOperatorsImplement the != operator.In a column context, produces the clause a != b.\nIf the target is None, produces a IS NOT NULL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.__ne__
MapperProperty.info	A										<section class="prog__container"><pre><code>\ninfo</code></pre><p>Info dictionary associated with the object, allowing user-defined\ndata to be associated with this InspectionAttr.The dictionary is generated when first accessed.  Alternatively,\nit can be specified as a constructor argument to the\ncolumn_property(), relationship(), or composite()\nfunctions.\nNew in version 0.8: Added support for .info to all\nMapperProperty subclasses.\n\nChanged in version 1.0.0: InspectionAttr.info moved\nfrom MapperProperty so that it can apply to a wider\nvariety of ORM and extension constructs.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#MapperProperty.info
get_history	A										<section class="prog__container"><pre><code>\nCompositeProperty.get_history(state, dict_, passive=symbol('PASSIVE_OFF'))</code></pre><p>Provided for userland code that uses attributes.get_history().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty.get_history
descriptor_props.SynonymProperty.init	A										<section class="prog__container"><pre><code>\ninit()</code></pre><p>\ninherited from the init() method of MapperPropertyCalled after all mappers are created to assemble\nrelationships between mappers and perform other post-mapper-creation\ninitialization steps.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.init
before_flush	A										<section class="prog__container"><pre><code>\nbefore_flush(session, flush_context, instances)</code></pre><p>Execute before flush process has started.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'before_flush')\ndef receive_before_flush(session, flush_context, instances):\n    "listen for the 'before_flush' event"\n\n    # ... (event handling logic) ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.before_flush
properties.RelationshipProperty.__init__	A										<section class="prog__container"><pre><code>\nRelationshipProperty.__init__(argument, secondary=None, primaryjoin=None, secondaryjoin=None, foreign_keys=None, uselist=None, order_by=False, backref=None, back_populates=None, post_update=False, cascade=False, extension=None, viewonly=False, lazy=True, collection_class=None, passive_deletes=False, passive_updates=True, remote_side=None, enable_typechecks=True, join_depth=None, comparator_factory=None, single_parent=False, innerjoin=False, distinct_target_key=None, doc=None, active_history=False, cascade_backrefs=True, load_on_pending=False, bake_queries=True, _local_remote_pairs=None, query_class=None, info=None)</code></pre><p>Construct a new RelationshipProperty object.This constructor is mirrored as a public API function; see relationship() for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.__init__
interfaces.MapperProperty.do_init	A										<section class="prog__container"><pre><code>\ndo_init()</code></pre><p>Perform subclass-specific initialization post-mapper-creation\nsteps.This is a template method called by the MapperProperty\nobject&#8217;s init() method.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.do_init
is_aliased_class	A										<section class="prog__container"><pre><code>\nis_aliased_class = False</code></pre><p>True if this object is an instance of AliasedClass.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_aliased_class
properties.RelationshipProperty.cascade	A										<section class="prog__container"><pre><code>\nRelationshipProperty.cascade</code></pre><p>Return the current cascade setting for this\nRelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.cascade
interfaces.PropComparator.collate	A										<section class="prog__container"><pre><code>\ncollate(collation)</code></pre><p>\ninherited from the collate() method of ColumnOperatorsProduce a collate() clause against\nthe parent object, given the collation string.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.collate
any	D								*[[properties.ColumnProperty.Comparator.any]], inherited from the any() method of PropComparator \n*[[interfaces.PropComparator.any]], Return true if this collection contains any member that meets the given criterion. \n*[[properties.RelationshipProperty.Comparator.any]], Produce an expression that tests a collection against particular criterion, using EXISTS. \n*[[attributes.QueryableAttribute.any]], inherited from the any() method of PropComparator \n
before_configured	A										<section class="prog__container"><pre><code>\nbefore_configured()</code></pre><p>Called before a series of mappers have been configured.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'before_configured')\ndef receive_before_configured():\n    "listen for the 'before_configured' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>The MapperEvents.before_configured() event is invoked\neach time the orm.configure_mappers() function is\ninvoked, before the function has done any of its work.\norm.configure_mappers() is typically invoked\nautomatically as mappings are first used, as well as each time\nnew mappers have been made available and new mapper use is\ndetected.This event can only be applied to the Mapper class\nor mapper() function, and not to individual mappings or\nmapped classes.  It is only invoked for all mappings as a whole:</p><pre><code>from sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, "before_configured")\ndef go():\n    # ...\n</code></pre><p>Constrast this event to MapperEvents.after_configured(),\nwhich is invoked after the series of mappers has been configured,\nas well as MapperEvents.mapper_configured(), which is invoked\non a per-mapper basis as each one is configured to the extent possible.Theoretically this event is called once per\napplication, but is actually called any time new mappers\nare to be affected by a orm.configure_mappers()\ncall.   If new mappings are constructed after existing ones have\nalready been used, this event will likely be called again.  To ensure\nthat a particular event is only called once and no further, the\nonce=True argument (new in 0.9.4) can be applied:</p><pre><code>from sqlalchemy.orm import mapper\n\n@event.listens_for(mapper, "before_configured", once=True)\ndef go():\n    # ...\n</code></pre><p>\nNew in version 0.9.3.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.before_configured
UnmappedColumnError	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.UnmappedColumnError</code></pre><p>Mapping operation was requested on an unknown column.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.UnmappedColumnError
FlushError	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.FlushError</code></pre><p>A invalid condition was detected during flush().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.FlushError
instrumentation.ClassManager.__ne__	A										<section class="prog__container"><pre><code>\n__ne__</code></pre><p>\ninherited from the __ne__ attribute of dictx.__ne__(y) <==> x!=y</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.__ne__
ObjectDeletedError	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.ObjectDeletedError(state, msg=None)</code></pre><p>A refresh operation failed to retrieve the database\nrow corresponding to an object&#8217;s known primary key identity.A refresh operation proceeds when an expired attribute is\naccessed on an object, or when Query.get() is\nused to retrieve an object which is, upon retrieval, detected\nas expired.   A SELECT is emitted for the target row\nbased on primary key; if no row is returned, this\nexception is raised.The true meaning of this exception is simply that\nno row exists for the primary key identifier associated\nwith a persistent object.   The row may have been\ndeleted, or in some cases the primary key updated\nto a new value, outside of the ORM&#8217;s management of the target\nobject.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
first_init	A										<section class="prog__container"><pre><code>\nfirst_init(manager, cls)</code></pre><p>Called when the first instance of a particular mapping is called.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'first_init')\ndef receive_first_init(manager, cls):\n    "listen for the 'first_init' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is called when the __init__ method of a class\nis called the first time for that particular class.    The event\ninvokes before __init__ actually proceeds as well as before\nthe InstanceEvents.init() event is invoked.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.first_init
Comparator	D								*[[properties.ColumnProperty.Comparator]], Bases: sqlalchemy.util.langhelpers.MemoizedSlots, sqlalchemy.orm.interfaces.PropComparator \n*[[descriptor_props.CompositeProperty.Comparator]], Bases: sqlalchemy.orm.interfaces.PropComparator \n*[[properties.RelationshipProperty.Comparator]], Bases: sqlalchemy.orm.interfaces.PropComparator \n
object	A										<section class="prog__container"><pre><code>\nobject</code></pre><p>Return the mapped object represented by this\nInstanceState.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.object
interfaces.PropComparator.__lt__	A										<section class="prog__container"><pre><code>\n__lt__(other)</code></pre><p>\ninherited from the __lt__() method of ColumnOperatorsImplement the < operator.In a column context, produces the clause a < b.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.__lt__
interfaces.PropComparator.nullslast	A										<section class="prog__container"><pre><code>\nnullslast()</code></pre><p>\ninherited from the nullslast() method of ColumnOperatorsProduce a nullslast() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.nullslast
MANYTOONE	A										<section class="prog__container"><pre><code>\nsqlalchemy.orm.interfaces.MANYTOONE = symbol('MANYTOONE')</code></pre><p>Indicates the many-to-one direction for a relationship().This symbol is typically used by the internals but may be exposed within\ncertain API features.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MANYTOONE
interfaces.PropComparator.notilike	A										<section class="prog__container"><pre><code>\nnotilike(other, escape=None)</code></pre><p>\ninherited from the notilike() method of ColumnOperatorsimplement the NOT ILIKE operator.This is equivalent to using negation with\nColumnOperators.ilike(), i.e. ~x.ilike(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.notilike
is_clause_element	A										<section class="prog__container"><pre><code>\nis_clause_element = False</code></pre><p>True if this object is an instance of ClauseElement.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_clause_element
was_deleted	A										<section class="prog__container"><pre><code>\nwas_deleted</code></pre><p>Return True if this object is or was previously in the\n&#8220;deleted&#8221; state and has not been reverted to persistent.This flag returns True once the object was deleted in flush.\nWhen the object is expunged from the session either explicitly\nor via transaction commit and enters the &#8220;detached&#8221; state,\nthis flag will continue to report True.\nNew in version 1.1: - added a local method form of\norm.util.was_deleted().\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.was_deleted
interfaces.PropComparator.is_	A										<section class="prog__container"><pre><code>\nis_(other)</code></pre><p>\ninherited from the is_() method of ColumnOperatorsImplement the IS operator.Normally, IS is generated automatically when comparing to a\nvalue of None, which resolves to NULL.  However, explicit\nusage of IS may be desirable if comparing to boolean values\non certain platforms.\nNew in version 0.7.9.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.is_
properties.ColumnProperty.Comparator.is_distinct_from	A										<section class="prog__container"><pre><code>\nis_distinct_from(other)</code></pre><p>\ninherited from the is_distinct_from() method of ColumnOperatorsImplement the IS DISTINCT FROM operator.Renders &#8220;a IS DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS NOT b&#8221;.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.is_distinct_from
viewvalues	A										<section class="prog__container"><pre><code>\nviewvalues() &#8594; an object providing a view on D's values</code></pre><p>\ninherited from the viewvalues() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.viewvalues
interfaces.MapperProperty.init	A										<section class="prog__container"><pre><code>\ninit()</code></pre><p>Called after all mappers are created to assemble\nrelationships between mappers and perform other post-mapper-creation\ninitialization steps.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.init
clear	A										<section class="prog__container"><pre><code>\nclear() &#8594; None.  Remove all items from D.</code></pre><p>\ninherited from the clear() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.clear
StaleDataError	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.StaleDataError</code></pre><p>An operation encountered database state that is unaccounted for.Conditions which cause this to happen include:\nA flush may have attempted to update or delete rows\nand an unexpected number of rows were matched during\nthe UPDATE or DELETE statement.   Note that when\nversion_id_col is used, rows in UPDATE or DELETE statements\nare also matched against the current known version\nidentifier.\n\nA mapped object with version_id_col was refreshed,\nand the version number coming back from the database does\nnot match that of the object itself.\n\nA object is detached from its parent object, however\nthe object was previously attached to a different parent\nidentity which was garbage collected, and a decision\ncannot be made if the new parent was really the most\nrecent &#8220;parent&#8221;.\n\nNew in version 0.7.4.\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.StaleDataError
attributes.QueryableAttribute.notin_	A										<section class="prog__container"><pre><code>\nnotin_(other)</code></pre><p>\ninherited from the notin_() method of ColumnOperatorsimplement the NOT IN operator.This is equivalent to using negation with\nColumnOperators.in_(), i.e. ~x.in_(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.notin_
interfaces.PropComparator.concat	A										<section class="prog__container"><pre><code>\nconcat(other)</code></pre><p>\ninherited from the concat() method of ColumnOperatorsImplement the &#8216;concat&#8217; operator.In a column context, produces the clause a || b,\nor uses the concat() operator on MySQL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.concat
transient_to_pending	A										<section class="prog__container"><pre><code>\ntransient_to_pending(session, instance)</code></pre><p>Intercept the &#8220;transient to pending&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'transient_to_pending')\ndef receive_transient_to_pending(session, instance):\n    "listen for the 'transient_to_pending' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is a specialization of the\nSessionEvents.after_attach() event which is only invoked\nfor this specific transition.  It is invoked typically during the\nSession.add() call.\n\n\n\nParameters:\nsession &#8211; target Session\ninstance &#8211; the ORM-mapped instance being operated upon.\n\n\n\n\n\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.transient_to_pending
properties.RelationshipProperty.Comparator.notin_	A										<section class="prog__container"><pre><code>\nnotin_(other)</code></pre><p>\ninherited from the notin_() method of ColumnOperatorsimplement the NOT IN operator.This is equivalent to using negation with\nColumnOperators.in_(), i.e. ~x.in_(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.notin_
dispose_collection	A										<section class="prog__container"><pre><code>\ndispose_collection(target, collection, collection_adpater)</code></pre><p>Receive a &#8216;collection dispose&#8217; event.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'dispose_collection')\ndef receive_dispose_collection(target, collection, collection_adpater):\n    "listen for the 'dispose_collection' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is triggered for a collection-based attribute when\na collection is replaced, that is:</p><pre><code>u1.addresses.append(a1)\n\nu1.addresses = [a2, a3]  # <- old collection is disposed\n</code></pre><p>The mechanics of the event will typically include that the given\ncollection is empty, even if it stored objects while being replaced.\nNew in version 1.0.0: the AttributeEvents.init_collection()\nand AttributeEvents.dispose_collection() events supersede\nthe collection.linker hook.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.dispose_collection
has_key	A										<section class="prog__container"><pre><code>\nhas_key(k) &#8594; True if D has a key k, else False</code></pre><p>\ninherited from the has_key() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.has_key
base.InspectionAttrInfo.info	A										<section class="prog__container"><pre><code>\ninfo</code></pre><p>Info dictionary associated with the object, allowing user-defined\ndata to be associated with this InspectionAttr.The dictionary is generated when first accessed.  Alternatively,\nit can be specified as a constructor argument to the\ncolumn_property(), relationship(), or composite()\nfunctions.\nNew in version 0.8: Added support for .info to all\nMapperProperty subclasses.\n\nChanged in version 1.0.0: MapperProperty.info is also\navailable on extension types via the\nInspectionAttrInfo.info attribute, so that it can apply\nto a wider variety of ORM and extension constructs.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttrInfo.info
reverse_operate	D								*[[interfaces.PropComparator.reverse_operate]], inherited from the reverse_operate() method of Operators \n*[[properties.RelationshipProperty.Comparator.reverse_operate]], inherited from the reverse_operate() method of Operators \n
attributes.QueryableAttribute.__eq__	A										<section class="prog__container"><pre><code>\n__eq__(other)</code></pre><p>\ninherited from the __eq__() method of ColumnOperatorsImplement the == operator.In a column context, produces the clause a = b.\nIf the target is None, produces a IS NULL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.__eq__
InstrumentationEvents	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.events.InstrumentationEvents</code></pre><p>Bases: sqlalchemy.event.base.EventsEvents related to class instrumentation events.The listeners here support being established against\nany new style class, that is any object that is a subclass\nof &#8216;type&#8217;.  Events will then be fired off for events\nagainst that class.  If the &#8220;propagate=True&#8221; flag is passed\nto event.listen(), the event will fire off for subclasses\nof that class as well.The Python type builtin is also accepted as a target,\nwhich when used has the effect of events being emitted\nfor all classes.Note the &#8220;propagate&#8221; flag here is defaulted to True,\nunlike the other class level events where it defaults\nto False.  This means that new subclasses will also\nbe the subject of these events, when a listener\nis established on a superclass.\nChanged in version 0.8: - events here will emit based\non comparing the incoming class to the type of class\npassed to event.listen().  Previously, the\nevent would fire for any class unconditionally regardless\nof what class was sent for listening, despite\ndocumentation which stated the contrary.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstrumentationEvents
NOT_EXTENSION	A										<section class="prog__container"><pre><code>\nsqlalchemy.orm.interfaces.NOT_EXTENSION = symbol('NOT_EXTENSION')</code></pre><p>Symbol indicating an InspectionAttr that&#8217;s\nnot part of sqlalchemy.ext.Is assigned to the InspectionAttr.extension_type\nattibute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.NOT_EXTENSION
init_failure	A										<section class="prog__container"><pre><code>\ninit_failure(target, args, kwargs)</code></pre><p>Receive an instance when its constructor has been called,\nand raised an exception.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'init_failure')\ndef receive_init_failure(target, args, kwargs):\n    "listen for the 'init_failure' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This method is only called during a userland construction of\nan object, in conjunction with the object&#8217;s constructor, e.g.\nits __init__ method. It is not called when an object is loaded\nfrom the database.The event is invoked after an exception raised by the __init__\nmethod is caught.  After the event\nis invoked, the original exception is re-raised outwards, so that\nthe construction of the object still raises an exception.   The\nactual exception and stack trace raised should be present in\nsys.exc_info().\n\n\n\nParameters:\ntarget &#8211; the mapped instance.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\nargs &#8211; positional arguments that were passed to the __init__\nmethod.\nkwargs &#8211; keyword arguments that were passed to the __init__\nmethod.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.init_failure
interfaces.PropComparator.isnot	A										<section class="prog__container"><pre><code>\nisnot(other)</code></pre><p>\ninherited from the isnot() method of ColumnOperatorsImplement the IS NOT operator.Normally, IS NOT is generated automatically when comparing to a\nvalue of None, which resolves to NULL.  However, explicit\nusage of IS NOT may be desirable if comparing to boolean values\non certain platforms.\nNew in version 0.7.9.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.isnot
dict	A										<section class="prog__container"><pre><code>\ndict</code></pre><p>Return the instance dict used by the object.Under normal circumstances, this is always synonymous\nwith the __dict__ attribute of the mapped object,\nunless an alternative instrumentation system has been\nconfigured.In the case that the actual object has been garbage\ncollected, this accessor returns a blank dictionary.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.dict
InstanceState	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.state.InstanceState(obj, manager)</code></pre><p>Bases: sqlalchemy.orm.base.InspectionAttrtracks state information at the instance level.The InstanceState is a key object used by the\nSQLAlchemy ORM in order to track the state of an object;\nit is created the moment an object is instantiated, typically\nas a result of instrumentation which SQLAlchemy applies\nto the __init__() method of the class.InstanceState is also a semi-public object,\navailable for runtime inspection as to the state of a\nmapped instance, including information such as its current\nstatus within a particular Session and details\nabout data on individual attributes.  The public API\nin order to acquire a InstanceState object\nis to use the inspect() system:</p><pre><code>>>> from sqlalchemy import inspect\n>>> insp = inspect(some_mapped_object)\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState
get_attribute_history	A										<section class="prog__container"><pre><code>\nget_attribute_history(state, key, passive=symbol('PASSIVE_NO_INITIALIZE'))</code></pre><p>facade to attributes.get_state_history(), including\ncaching of results.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.get_attribute_history
startswith	D								*[[properties.ColumnProperty.Comparator.startswith]], inherited from the startswith() method of ColumnOperators \n*[[interfaces.PropComparator.startswith]], inherited from the startswith() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.startswith]], inherited from the startswith() method of ColumnOperators \n*[[attributes.QueryableAttribute.startswith]], inherited from the startswith() method of ColumnOperators \n
init_collection	A										<section class="prog__container"><pre><code>\ninit_collection(target, collection, collection_adapter)</code></pre><p>Receive a &#8216;collection init&#8217; event.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'init_collection')\ndef receive_init_collection(target, collection, collection_adapter):\n    "listen for the 'init_collection' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is triggered for a collection-based attribute, when\nthe initial &#8220;empty collection&#8221; is first generated for a blank\nattribute, as well as for when the collection is replaced with\na new one, such as via a set event.E.g., given that User.addresses is a relationship-based\ncollection, the event is triggered here:</p><pre><code>u1 = User()\nu1.addresses.append(a1)  #  <- new collection\n</code></pre><p>and also during replace operations:</p><pre><code>u1.addresses = [a2, a3]  #  <- new collection\n</code></pre><p>\n\n\n\nParameters:\ntarget &#8211; the object instance receiving the event.\nIf the listener is registered with raw=True, this will\nbe the InstanceState object.\ncollection &#8211; the new collection.  This will always be generated\nfrom what was specified as\nRelationshipProperty.collection_class, and will always\nbe empty.\ncollection_adpater &#8211; the CollectionAdapter that will\nmediate internal access to the collection.\n\n\n\n\n\nNew in version 1.0.0: the AttributeEvents.init_collection()\nand AttributeEvents.dispose_collection() events supersede\nthe collection.linker hook.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.init_collection
properties.ColumnProperty.Comparator.isnot_distinct_from	A										<section class="prog__container"><pre><code>\nisnot_distinct_from(other)</code></pre><p>\ninherited from the isnot_distinct_from() method of ColumnOperatorsImplement the IS NOT DISTINCT FROM operator.Renders &#8220;a IS NOT DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS b&#8221;.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.isnot_distinct_from
descriptor_props.SynonymProperty.class_attribute	A										<section class="prog__container"><pre><code>\nclass_attribute</code></pre><p>\ninherited from the class_attribute attribute of MapperPropertyReturn the class-bound descriptor corresponding to this\nMapperProperty.This is basically a getattr() call:</p><pre><code>return getattr(self.parent.class_, self.key)\n</code></pre><p>I.e. if this MapperProperty were named addresses,\nand the class to which it is mapped is User, this sequence\nis possible:</p><pre><code>>>> from sqlalchemy import inspect\n>>> mapper = inspect(User)\n>>> addresses_property = mapper.attrs.addresses\n>>> addresses_property.class_attribute is User.addresses\nTrue\n>>> User.addresses.property is addresses_property\nTrue\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.class_attribute
get	A										<section class="prog__container"><pre><code>\nget(k[, d]) &#8594; D[k] if k in D, else d.  d defaults to None.</code></pre><p>\ninherited from the get() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.get
after_bulk_delete	A										<section class="prog__container"><pre><code>\nafter_bulk_delete(delete_context)</code></pre><p>Execute after a bulk delete operation to the session.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style (arguments as of 0.9)\n@event.listens_for(SomeSessionOrFactory, 'after_bulk_delete')\ndef receive_after_bulk_delete(delete_context):\n    "listen for the 'after_bulk_delete' event"\n\n    # ... (event handling logic) ...\n\n# legacy calling style (pre-0.9)\n@event.listens_for(SomeSessionOrFactory, 'after_bulk_delete')\ndef receive_after_bulk_delete(session, query, query_context, result):\n    "listen for the 'after_bulk_delete' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>\nChanged in version 0.9: The after_bulk_delete event now accepts the \narguments delete_context.\nListener functions which accept the previous argument \nsignature(s) listed above will be automatically \nadapted to the new signature.\nThis is called as a result of the Query.delete() method.\n\n\n\nParameters:delete_context &#8211; a &#8220;delete context&#8221; object which contains\ndetails about the update, including these attributes:\n\n\nsession - the Session involved\nquery -the Query object that this update operation\nwas called upon.\ncontext The QueryContext object, corresponding\nto the invocation of an ORM query.\nresult the ResultProxy returned as a result of the\nbulk DELETE operation.\n\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_bulk_delete
CompositeProperty	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.descriptor_props.CompositeProperty(class_, *attrs, **kwargs)</code></pre><p>Bases: sqlalchemy.orm.descriptor_props.DescriptorPropertyDefines a &#8220;composite&#8221; mapped attribute, representing a collection\nof columns as one attribute.CompositeProperty is constructed using the composite()\nfunction.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty
QueryEvents	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.events.QueryEvents</code></pre><p>Bases: sqlalchemy.event.base.EventsRepresent events within the construction of a Query object.The events here are intended to be used with an as-yet-unreleased\ninspection system for Query.   Some very basic operations\nare possible now, however the inspection system is intended to allow\ncomplex query manipulations to be automated.\nNew in version 1.0.0.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.QueryEvents
popitem	A										<section class="prog__container"><pre><code>\npopitem() &#8594; (k, v), remove and return some (key, value) pair as a</code></pre><p>\ninherited from the popitem() method of dict2-tuple; but raise KeyError if D is empty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.popitem
properties.ColumnProperty.Comparator.match	A										<section class="prog__container"><pre><code>\nmatch(other, **kwargs)</code></pre><p>\ninherited from the match() method of ColumnOperatorsImplements a database-specific &#8216;match&#8217; operator.match() attempts to resolve to\na MATCH-like function or operator provided by the backend.\nExamples include:\nPostgreSQL - renders x @@ to_tsquery(y)\nMySQL - renders MATCH (x) AGAINST (y IN BOOLEAN MODE)\nOracle - renders CONTAINS(x, y)\nother backends may provide special implementations.\nBackends without any special implementation will emit\nthe operator as &#8220;MATCH&#8221;.  This is compatible with SQlite, for\nexample.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.match
do_init	D								*[[descriptor_props.CompositeProperty.do_init]], Initialization which occurs after the CompositeProperty has been associated with its parent mapper. \n*[[interfaces.MapperProperty.do_init]], Perform subclass-specific initialization post-mapper-creation steps. \n*[[descriptor_props.SynonymProperty.do_init]], inherited from the do_init() method of MapperProperty \n
mapper	D								*[[state.InstanceState.mapper]], Return the Mapper used for this mapepd object. \n*[[properties.RelationshipProperty.Comparator.mapper]], The target Mapper referred to by this RelationshipProperty.Comparator. \n*[[properties.RelationshipProperty.mapper]], Return the targeted Mapper for this RelationshipProperty. \n
properties.ColumnProperty.Comparator.__ne__	A										<section class="prog__container"><pre><code>\n__ne__(other)</code></pre><p>\ninherited from the __ne__() method of ColumnOperatorsImplement the != operator.In a column context, produces the clause a != b.\nIf the target is None, produces a IS NOT NULL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.__ne__
remove	A										<section class="prog__container"><pre><code>\nremove(target, value, initiator)</code></pre><p>Receive a collection remove event.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'remove')\ndef receive_remove(target, value, initiator):\n    "listen for the 'remove' event"\n\n    # ... (event handling logic) ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.remove
set	A										<section class="prog__container"><pre><code>\nset(target, value, oldvalue, initiator)</code></pre><p>Receive a scalar set event.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass.some_attribute, 'set')\ndef receive_set(target, value, oldvalue, initiator):\n    "listen for the 'set' event"\n\n    # ... (event handling logic) ...\n\n# named argument style (new in 0.9)\n@event.listens_for(SomeClass.some_attribute, 'set', named=True)\ndef receive_set(**kw):\n    "listen for the 'set' event"\n    target = kw['target']\n    value = kw['value']\n\n    # ... (event handling logic) ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.AttributeEvents.set
after_flush_postexec	A										<section class="prog__container"><pre><code>\nafter_flush_postexec(session, flush_context)</code></pre><p>Execute after flush has completed, and after the post-exec\nstate occurs.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_flush_postexec')\ndef receive_after_flush_postexec(session, flush_context):\n    "listen for the 'after_flush_postexec' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This will be when the &#8216;new&#8217;, &#8216;dirty&#8217;, and &#8216;deleted&#8217; lists are in\ntheir final state.  An actual commit() may or may not have\noccurred, depending on whether or not the flush started its own\ntransaction or participated in a larger transaction.\n\n\n\nParameters:\nsession &#8211; The target Session.\nflush_context &#8211; Internal UOWTransaction object\nwhich handles the details of the flush.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_flush_postexec
properties.ColumnProperty.Comparator.notin_	A										<section class="prog__container"><pre><code>\nnotin_(other)</code></pre><p>\ninherited from the notin_() method of ColumnOperatorsimplement the NOT IN operator.This is equivalent to using negation with\nColumnOperators.in_(), i.e. ~x.in_(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.notin_
interfaces.PropComparator.__eq__	A										<section class="prog__container"><pre><code>\n__eq__(other)</code></pre><p>\ninherited from the __eq__() method of ColumnOperatorsImplement the == operator.In a column context, produces the clause a = b.\nIf the target is None, produces a IS NULL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.__eq__
after_rollback	A										<section class="prog__container"><pre><code>\nafter_rollback(session)</code></pre><p>Execute after a real DBAPI rollback has occurred.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_rollback')\ndef receive_after_rollback(session):\n    "listen for the 'after_rollback' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>Note that this event only fires when the actual rollback against\nthe database occurs - it does not fire each time the\nSession.rollback() method is called, if the underlying\nDBAPI transaction has already been rolled back.  In many\ncases, the Session will not be in\nan &#8220;active&#8221; state during this event, as the current\ntransaction is not valid.   To acquire a Session\nwhich is active after the outermost rollback has proceeded,\nuse the SessionEvents.after_soft_rollback() event, checking the\nSession.is_active flag.\n\n\n\nParameters:session &#8211; The target Session.\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_rollback
attributes.QueryableAttribute.contains	A										<section class="prog__container"><pre><code>\ncontains(other, **kwargs)</code></pre><p>\ninherited from the contains() method of ColumnOperatorsImplement the &#8216;contains&#8217; operator.In a column context, produces the clause LIKE '%<other>%'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.contains
interfaces.PropComparator.adapt_to_entity	A										<section class="prog__container"><pre><code>\nadapt_to_entity(adapt_to_entity)</code></pre><p>Return a copy of this PropComparator which will use the given\nAliasedInsp to produce corresponding expressions.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.adapt_to_entity
viewitems	A										<section class="prog__container"><pre><code>\nviewitems() &#8594; a set-like object providing a view on D's items</code></pre><p>\ninherited from the viewitems() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.viewitems
notilike	D								*[[properties.ColumnProperty.Comparator.notilike]], inherited from the notilike() method of ColumnOperators \n*[[interfaces.PropComparator.notilike]], inherited from the notilike() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.notilike]], inherited from the notilike() method of ColumnOperators \n*[[attributes.QueryableAttribute.notilike]], inherited from the notilike() method of ColumnOperators \n
parent	A										<section class="prog__container"><pre><code>\nparent</code></pre><p>Return an inspection instance representing the parent.This will be either an instance of Mapper\nor AliasedInsp, depending upon the nature\nof the parent entity which this attribute is associated\nwith.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.parent
persistent_to_deleted	A										<section class="prog__container"><pre><code>\npersistent_to_deleted(session, instance)</code></pre><p>Intercept the &#8220;persistent to deleted&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'persistent_to_deleted')\ndef receive_persistent_to_deleted(session, instance):\n    "listen for the 'persistent_to_deleted' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked when a persistent object&#8217;s identity\nis deleted from the database within a flush, however the object\nstill remains associated with the Session until the\ntransaction completes.If the transaction is rolled back, the object moves again\nto the persistent state, and the\nSessionEvents.deleted_to_persistent() event is called.\nIf the transaction is committed, the object becomes detached,\nwhich will emit the SessionEvents.deleted_to_detached()\nevent.Note that while the Session.delete() method is the primary\npublic interface to mark an object as deleted, many objects\nget deleted due to cascade rules, which are not always determined\nuntil flush time.  Therefore, there&#8217;s no way to catch\nevery object that will be deleted until the flush has proceeded.\nthe SessionEvents.persistent_to_deleted() event is therefore\ninvoked at the end of a flush.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.persistent_to_deleted
descriptor_props.SynonymProperty.create_row_processor	A										<section class="prog__container"><pre><code>\ncreate_row_processor(context, path, mapper, result, adapter, populators)</code></pre><p>\ninherited from the create_row_processor() method of MapperPropertyProduce row processing functions and append to the given\nset of populators lists.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.create_row_processor
between	D								*[[properties.ColumnProperty.Comparator.between]], inherited from the between() method of ColumnOperators \n*[[interfaces.PropComparator.between]], inherited from the between() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.between]], inherited from the between() method of ColumnOperators \n*[[attributes.QueryableAttribute.between]], inherited from the between() method of ColumnOperators \n
instrument_class	D								*[[interfaces.MapperProperty.instrument_class]], Hook called by the Mapper to the property to initiate instrumentation of the class attribute managed by this MapperProperty. \n*[[events.MapperEvents.instrument_class]], Receive a class when the mapper is first constructed, before instrumentation is applied to the mapped class. \n
properties.ColumnProperty.Comparator.__lt__	A										<section class="prog__container"><pre><code>\n__lt__(other)</code></pre><p>\ninherited from the __lt__() method of ColumnOperatorsImplement the < operator.In a column context, produces the clause a < b.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.__lt__
properties.ColumnProperty.Comparator.between	A										<section class="prog__container"><pre><code>\nbetween(cleft, cright, symmetric=False)</code></pre><p>\ninherited from the between() method of ColumnOperatorsProduce a between() clause against\nthe parent object, given the lower and upper range.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.between
QueryableAttribute	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.attributes.QueryableAttribute(class_, key, impl=None, comparator=None, parententity=None, of_type=None)</code></pre><p>Bases: sqlalchemy.orm.base._MappedAttribute, sqlalchemy.orm.base.InspectionAttr, sqlalchemy.orm.interfaces.PropComparatorBase class for descriptor objects that intercept\nattribute events on behalf of a MapperProperty\nobject.  The actual MapperProperty is accessible\nvia the QueryableAttribute.property\nattribute.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute
cascade_iterator	D								*[[properties.ColumnProperty.cascade_iterator]], inherited from the cascade_iterator() method of MapperProperty \n*[[interfaces.MapperProperty.cascade_iterator]], Iterate through instances related to the given instance for a particular &#8216;cascade&#8217;, starting with this MapperProperty. \n*[[descriptor_props.SynonymProperty.cascade_iterator]], inherited from the cascade_iterator() method of MapperProperty \n
after_transaction_end	A										<section class="prog__container"><pre><code>\nafter_transaction_end(session, transaction)</code></pre><p>Execute when the span of a SessionTransaction ends.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_transaction_end')\ndef receive_after_transaction_end(session, transaction):\n    "listen for the 'after_transaction_end' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event differs from after_commit()\nin that it corresponds to all SessionTransaction\nobjects in use, including those for nested transactions\nand subtransactions, and is always matched by a corresponding\nafter_transaction_create() event.\n\n<span class="prog__sub">Parameters:</span><ul><li></li>\n<li>session &#8211; the target Session.</li>\n<li></li>\n<li>transaction &#8211; the target SessionTransaction.\nTo detect if this is the outermost\nSessionTransaction, as opposed to a &#8220;subtransaction&#8221; or a\nSAVEPOINT, test that the SessionTransaction.parent attribute\nis None:\n<pre><code>@event.listens_for(session, "after_transaction_create")\ndef after_transaction_end(session, transaction):\n    if transaction.parent is None:\n        # work with top-level transaction\n</code></pre>\nTo detect if the SessionTransaction is a SAVEPOINT, use the\nSessionTransaction.nested attribute:\n<pre><code>@event.listens_for(session, "after_transaction_create")\ndef after_transaction_end(session, transaction):\n    if transaction.nested:\n        # work with SAVEPOINT transaction\n</code></pre>\n</li>\n<li></li>\n</ul></p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_transaction_end
pending_to_persistent	A										<section class="prog__container"><pre><code>\npending_to_persistent(session, instance)</code></pre><p>Intercept the &#8220;pending to persistent&#8221;&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'pending_to_persistent')\ndef receive_pending_to_persistent(session, instance):\n    "listen for the 'pending_to_persistent' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked within the flush process, and is\nsimilar to scanning the Session.new collection within\nthe SessionEvents.after_flush() event.  However, in this\ncase the object has already been moved to the persistent state\nwhen the event is called.\n\n\n\nParameters:\nsession &#8211; target Session\ninstance &#8211; the ORM-mapped instance being operated upon.\n\n\n\n\n\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.pending_to_persistent
attributes.QueryableAttribute.adapter	A										<section class="prog__container"><pre><code>\nadapter</code></pre><p>\ninherited from the adapter attribute of PropComparatorProduce a callable that adapts column expressions\nto suit an aliased version of this comparator.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.adapter
adapter	D								*[[properties.ColumnProperty.Comparator.adapter]], inherited from the adapter attribute of PropComparator \n*[[interfaces.PropComparator.adapter]], Produce a callable that adapts column expressions to suit an aliased version of this comparator. \n*[[properties.RelationshipProperty.Comparator.adapter]], inherited from the adapter attribute of PropComparator \n*[[attributes.QueryableAttribute.adapter]], inherited from the adapter attribute of PropComparator \n
interfaces.MapperProperty.set_parent	A										<section class="prog__container"><pre><code>\nset_parent(parent, init)</code></pre><p>Set the parent mapper that references this MapperProperty.This method is overridden by some subclasses to perform extra\nsetup when the mapper is first known.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.set_parent
expression	A										<section class="prog__container"><pre><code>\nColumnProperty.expression</code></pre><p>Return the primary column or expression for this ColumnProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.expression
properties.RelationshipProperty.Comparator.distinct	A										<section class="prog__container"><pre><code>\ndistinct()</code></pre><p>\ninherited from the distinct() method of ColumnOperatorsProduce a distinct() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.distinct
load	A										<section class="prog__container"><pre><code>\nload(target, context)</code></pre><p>Receive an object instance after it has been created via\n__new__, and after initial attribute population has\noccurred.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'load')\ndef receive_load(target, context):\n    "listen for the 'load' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This typically occurs when the instance is created based on\nincoming result rows, and is only called once for that\ninstance&#8217;s lifetime.Note that during a result-row load, this method is called upon\nthe first row received for this instance.  Note that some\nattributes and collections may or may not be loaded or even\ninitialized, depending on what&#8217;s present in the result rows.\n\n\n\nParameters:\ntarget &#8211; the mapped instance.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\ncontext &#8211; the QueryContext corresponding to the\ncurrent Query in progress.  This argument may be\nNone if the load does not correspond to a Query,\nsuch as during Session.merge().\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.load
attributes.QueryableAttribute.has	A										<section class="prog__container"><pre><code>\nhas(criterion=None, **kwargs)</code></pre><p>\ninherited from the has() method of PropComparatorReturn true if this element references a member which meets the\ngiven criterion.The usual implementation of has() is\nRelationshipProperty.Comparator.has().\n\n\n\nParameters:\ncriterion &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.\n**kwargs &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.has
properties.ColumnProperty.Comparator	A										<section class="prog__container"><pre><code>\nclass Comparator(prop, parentmapper, adapt_to_entity=None)</code></pre><p>Bases: sqlalchemy.util.langhelpers.MemoizedSlots, sqlalchemy.orm.interfaces.PropComparatorProduce boolean, comparison, and other operators for\nColumnProperty attributes.See the documentation for PropComparator for a brief\noverview.See also:PropComparatorColumnOperatorsRedefining and Creating New OperatorsTypeEngine.comparator_factory</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator
before_commit	A										<section class="prog__container"><pre><code>\nbefore_commit(session)</code></pre><p>Execute before commit is called.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'before_commit')\ndef receive_before_commit(session):\n    "listen for the 'before_commit' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>\nNote\nThe before_commit() hook is not per-flush,\nthat is, the Session can emit SQL to the database\nmany times within the scope of a transaction.\nFor interception of these events, use the\nbefore_flush(),\nafter_flush(), or\nafter_flush_postexec()\nevents.\n\n\n\n\nParameters:session &#8211; The target Session.\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.before_commit
post_instrument_class	D								*[[interfaces.MapperProperty.post_instrument_class]], Perform instrumentation adjustments that need to occur after init() has completed. \n*[[descriptor_props.SynonymProperty.post_instrument_class]], inherited from the post_instrument_class() method of MapperProperty \n
table	A										<section class="prog__container"><pre><code>\nRelationshipProperty.table</code></pre><p>Return the selectable linked to this\nRelationshipProperty object&#8217;s target\nMapper.\nDeprecated since version 0.7: Use .target\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.table
descriptor_props.SynonymProperty.setup	A										<section class="prog__container"><pre><code>\nsetup(context, entity, path, adapter, **kwargs)</code></pre><p>\ninherited from the setup() method of MapperPropertyCalled by Query for the purposes of constructing a SQL statement.Each MapperProperty associated with the target mapper processes the\nstatement referenced by the query context, adding columns and/or\ncriterion as appropriate.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.setup
__set__	A										<section class="prog__container"><pre><code>\n__set__(instance, value)</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.InstrumentedAttribute.__set__
MANYTOMANY	A										<section class="prog__container"><pre><code>\nsqlalchemy.orm.interfaces.MANYTOMANY = symbol('MANYTOMANY')</code></pre><p>Indicates the many-to-many direction for a relationship().This symbol is typically used by the internals but may be exposed within\ncertain API features.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MANYTOMANY
interfaces.PropComparator.__ne__	A										<section class="prog__container"><pre><code>\n__ne__(other)</code></pre><p>\ninherited from the __ne__() method of ColumnOperatorsImplement the != operator.In a column context, produces the clause a != b.\nIf the target is None, produces a IS NOT NULL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.__ne__
notlike	D								*[[properties.ColumnProperty.Comparator.notlike]], inherited from the notlike() method of ColumnOperators \n*[[interfaces.PropComparator.notlike]], inherited from the notlike() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.notlike]], inherited from the notlike() method of ColumnOperators \n*[[attributes.QueryableAttribute.notlike]], inherited from the notlike() method of ColumnOperators \n
before_update	A										<section class="prog__container"><pre><code>\nbefore_update(mapper, connection, target)</code></pre><p>Receive an object instance before an UPDATE statement\nis emitted corresponding to that instance.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'before_update')\ndef receive_before_update(mapper, connection, target):\n    "listen for the 'before_update' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to modify local, non-object related\nattributes on the instance before an UPDATE occurs, as well\nas to emit additional SQL statements on the given\nconnection.This method is called for all instances that are\nmarked as &#8220;dirty&#8221;, even those which have no net changes\nto their column-based attributes. An object is marked\nas dirty when any of its column-based attributes have a\n&#8220;set attribute&#8221; operation called or when any of its\ncollections are modified. If, at update time, no\ncolumn-based attributes have any net changes, no UPDATE\nstatement will be issued. This means that an instance\nbeing sent to before_update() is\nnot a guarantee that an UPDATE statement will be\nissued, although you can affect the outcome here by\nmodifying attributes so that a net change in value does\nexist.To detect if the column-based attributes on the object have net\nchanges, and will therefore generate an UPDATE statement, use\nobject_session(instance).is_modified(instance,\ninclude_collections=False).The event is often called for a batch of objects of the\nsame class before their UPDATE statements are emitted at\nonce in a later step. In the extremely rare case that\nthis is not desirable, the mapper() can be\nconfigured with batch=False, which will cause\nbatches of instances to be broken up into individual\n(and more poorly performing) event->persist->event\nsteps.\nWarning\nMapper-level flush events only allow very limited operations,\non attributes local to the row being operated upon only,\nas well as allowing any SQL to be emitted on the given\nConnection.  Please read fully the notes\nat Mapper-level Events for guidelines on using\nthese methods; generally, the SessionEvents.before_flush()\nmethod should be preferred for general on-flush changes.\n\n\n\n\nParameters:\nmapper &#8211; the Mapper which is the target\nof this event.\nconnection &#8211; the Connection being used to\nemit UPDATE statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.\ntarget &#8211; the mapped instance being persisted.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\n\n\n\nReturns:No return value is supported by this event.\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.before_update
InstanceEvents	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.events.InstanceEvents</code></pre><p>Bases: sqlalchemy.event.base.EventsDefine events specific to object lifecycle.e.g.:</p><pre><code>from sqlalchemy import event\n\ndef my_load_listener(target, context):\n    print "on load!"\n\nevent.listen(SomeClass, 'load', my_load_listener)\n</code></pre><p>Available targets include:\nmapped classes\nunmapped superclasses of mapped or to-be-mapped classes\n(using the propagate=True flag)\nMapper objects\nthe Mapper class itself and the mapper()\nfunction indicate listening for all mappers.\n\nChanged in version 0.8.0: instance events can be associated with\nunmapped superclasses of mapped classes.\nInstance events are closely related to mapper events, but\nare more specific to the instance and its instrumentation,\nrather than its system of persistence.When using InstanceEvents, several modifiers are\navailable to the event.listen() function.\n\n\n\nParameters:\npropagate=False &#8211; When True, the event listener should\nbe applied to all inheriting classes as well as the\nclass which is the target of this listener.\nraw=False &#8211; When True, the &#8220;target&#8221; argument passed\nto applicable event listener functions will be the\ninstance&#8217;s InstanceState management\nobject, rather than the mapped instance itself.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents
itervalues	A										<section class="prog__container"><pre><code>\nitervalues() &#8594; an iterator over the values of D</code></pre><p>\ninherited from the itervalues() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.itervalues
interfaces.MapperProperty.cascade_iterator	A										<section class="prog__container"><pre><code>\ncascade_iterator(type_, state, visited_instances=None, halt_on=None)</code></pre><p>Iterate through instances related to the given instance for\na particular &#8216;cascade&#8217;, starting with this MapperProperty.Return an iterator3-tuples (instance, mapper, state).Note that the &#8216;cascade&#8217; collection on this MapperProperty is\nchecked first for the given type before cascade_iterator is called.This method typically only applies to RelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.cascade_iterator
set_parent	D								*[[properties.ColumnProperty.set_parent]], inherited from the set_parent() method of MapperProperty \n*[[interfaces.MapperProperty.set_parent]], Set the parent mapper that references this MapperProperty. \n*[[properties.RelationshipProperty.set_parent]], inherited from the set_parent() method of MapperProperty \n
state_getter	A										<section class="prog__container"><pre><code>\nstate_getter()</code></pre><p>Return a (instance) -> InstanceState callable.&#8220;state getter&#8221; callables should raise either KeyError or\nAttributeError if no InstanceState could be found for the\ninstance.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.state_getter
SessionEvents	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.events.SessionEvents</code></pre><p>Bases: sqlalchemy.event.base.EventsDefine events specific to Session lifecycle.e.g.:</p><pre><code>from sqlalchemy import event\nfrom sqlalchemy.orm import sessionmaker\n\ndef my_before_commit(session):\n    print "before commit!"\n\nSession = sessionmaker()\n\nevent.listen(Session, "before_commit", my_before_commit)\n</code></pre><p>The listen() function will accept\nSession objects as well as the return result\nof sessionmaker() and scoped_session().Additionally, it accepts the Session class which\nwill apply listeners to all Session instances\nglobally.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents
properties.ColumnProperty.Comparator.isnot	A										<section class="prog__container"><pre><code>\nisnot(other)</code></pre><p>\ninherited from the isnot() method of ColumnOperatorsImplement the IS NOT operator.Normally, IS NOT is generated automatically when comparing to a\nvalue of None, which resolves to NULL.  However, explicit\nusage of IS NOT may be desirable if comparing to boolean values\non certain platforms.\nNew in version 0.7.9.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.isnot
extension_type	D								*[[properties.ColumnProperty.extension_type]], \n*[[base.InspectionAttr.extension_type]], The extension type, if any. Defaults to interfaces.NOT_EXTENSION \n*[[properties.RelationshipProperty.extension_type]], \n*[[descriptor_props.SynonymProperty.extension_type]], \n*[[attributes.QueryableAttribute.extension_type]], \n
attributes.QueryableAttribute.nullslast	A										<section class="prog__container"><pre><code>\nnullslast()</code></pre><p>\ninherited from the nullslast() method of ColumnOperatorsProduce a nullslast() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.nullslast
interfaces.PropComparator.like	A										<section class="prog__container"><pre><code>\nlike(other, escape=None)</code></pre><p>\ninherited from the like() method of ColumnOperatorsImplement the like operator.In a column context, produces the clause a LIKE other.E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.like("%foobar%"))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.like
__eq__	D								*[[properties.ColumnProperty.Comparator.__eq__]], inherited from the __eq__() method of ColumnOperators \n*[[interfaces.PropComparator.__eq__]], inherited from the __eq__() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.__eq__]], Implement the == operator. \n*[[attributes.QueryableAttribute.__eq__]], inherited from the __eq__() method of ColumnOperators \n
is_deleted	A										<section class="prog__container"><pre><code>\nis_deleted(state)</code></pre><p>return true if the given state is marked as deleted\nwithin this uowtransaction.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.is_deleted
attributes.QueryableAttribute.nullsfirst	A										<section class="prog__container"><pre><code>\nnullsfirst()</code></pre><p>\ninherited from the nullsfirst() method of ColumnOperatorsProduce a nullsfirst() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.nullsfirst
value	A										<section class="prog__container"><pre><code>\nvalue</code></pre><p>Return the value of this attribute.This operation is equivalent to accessing the object&#8217;s\nattribute directly or via getattr(), and will fire\noff any pending loader callables if needed.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState.value
interfaces.PropComparator.notin_	A										<section class="prog__container"><pre><code>\nnotin_(other)</code></pre><p>\ninherited from the notin_() method of ColumnOperatorsimplement the NOT IN operator.This is equivalent to using negation with\nColumnOperators.in_(), i.e. ~x.in_(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.notin_
property	A										<section class="prog__container"><pre><code>\nproperty</code></pre><p>Return the MapperProperty associated with this\nQueryableAttribute.Return values here will commonly be instances of\nColumnProperty or RelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.property
attributes.QueryableAttribute.any	A										<section class="prog__container"><pre><code>\nany(criterion=None, **kwargs)</code></pre><p>\ninherited from the any() method of PropComparatorReturn true if this collection contains any member that meets the\ngiven criterion.The usual implementation of any() is\nRelationshipProperty.Comparator.any().\n\n\n\nParameters:\ncriterion &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.\n**kwargs &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.any
attributes.QueryableAttribute.between	A										<section class="prog__container"><pre><code>\nbetween(cleft, cright, symmetric=False)</code></pre><p>\ninherited from the between() method of ColumnOperatorsProduce a between() clause against\nthe parent object, given the lower and upper range.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.between
endswith	D								*[[properties.ColumnProperty.Comparator.endswith]], inherited from the endswith() method of ColumnOperators \n*[[interfaces.PropComparator.endswith]], inherited from the endswith() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.endswith]], inherited from the endswith() method of ColumnOperators \n*[[attributes.QueryableAttribute.endswith]], inherited from the endswith() method of ColumnOperators \n
__init__	D								*[[properties.ColumnProperty.__init__]], Construct a new ColumnProperty object. \n*[[properties.ComparableProperty.__init__]], Construct a new ComparableProperty object. \n*[[descriptor_props.CompositeProperty.__init__]], Construct a new CompositeProperty object. \n*[[properties.RelationshipProperty.Comparator.__init__]], Construction of RelationshipProperty.Comparator is internal to the ORM&#8217;s attribute mechanics. \n*[[properties.RelationshipProperty.__init__]], Construct a new RelationshipProperty object. \n*[[descriptor_props.SynonymProperty.__init__]], Construct a new SynonymProperty object. \n
interfaces.PropComparator.op	A										<section class="prog__container"><pre><code>\nop(opstring, precedence=0, is_comparison=False)</code></pre><p>\ninherited from the op() method of Operatorsproduce a generic operator function.e.g.:</p><pre><code>somecolumn.op("*")(5)\n</code></pre><p>produces:</p><pre><code>somecolumn * 5\n</code></pre><p>This function can also be used to make bitwise operators explicit. For\nexample:</p><pre><code>somecolumn.op('&')(0xff)\n</code></pre><p>is a bitwise AND of the value in somecolumn.\n\n\n\nParameters:\noperator &#8211; a string which will be output as the infix operator\nbetween this element and the expression passed to the\ngenerated function.\nprecedence &#8211; precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of 0 is lower than all\noperators except for the comma (,) and AS operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.\n\nNew in version 0.8: - added the &#8216;precedence&#8217; argument.\n\n\nis_comparison &#8211; if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like ==, >, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.\n\nNew in version 0.9.2: - added the\nOperators.op.is_comparison flag.\n\n\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.op
attributes.QueryableAttribute.info	A										<section class="prog__container"><pre><code>\ninfo</code></pre><p>Return the &#8216;info&#8217; dictionary for the underlying SQL element.The behavior here is as follows:\nIf the attribute is a column-mapped property, i.e.\nColumnProperty, which is mapped directly\nto a schema-level Column object, this attribute\nwill return the SchemaItem.info dictionary associated\nwith the core-level Column object.\nIf the attribute is a ColumnProperty but is mapped to\nany other kind of SQL expression other than a Column,\nthe attribute will refer to the MapperProperty.info\ndictionary associated directly with the ColumnProperty,\nassuming the SQL expression itself does not have its own .info\nattribute (which should be the case, unless a user-defined SQL\nconstruct has defined one).\nIf the attribute refers to any other kind of\nMapperProperty, including RelationshipProperty,\nthe attribute will refer to the MapperProperty.info\ndictionary associated with that MapperProperty.\nTo access the MapperProperty.info dictionary of the\nMapperProperty unconditionally, including for a\nColumnProperty that&#8217;s associated directly with a\nschema.Column, the attribute can be referred to using\nQueryableAttribute.property attribute, as\nMyClass.someattribute.property.info.\n\nNew in version 0.8.0.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.info
attributes.QueryableAttribute.extension_type	A										<section class="prog__container"><pre><code>\nextension_type = symbol('NOT_EXTENSION')</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.extension_type
keys	A										<section class="prog__container"><pre><code>\nkeys() &#8594; list of D's keys</code></pre><p>\ninherited from the keys() method of dict</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.keys
NO_STATE	A										<section class="prog__container"><pre><code>\nsqlalchemy.orm.exc.NO_STATE = (<type 'exceptions.AttributeError'>, <type 'exceptions.KeyError'>)</code></pre><p>Exception types that may be raised by instrumentation implementations.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.NO_STATE
properties.RelationshipProperty.Comparator.in_	A										<section class="prog__container"><pre><code>\nin_(other)</code></pre><p>Produce an IN clause - this is not implemented\nfor relationship()-based attributes at this time.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.in_
properties.RelationshipProperty.init	A										<section class="prog__container"><pre><code>\nRelationshipProperty.init()</code></pre><p>\ninherited from the init() method of MapperPropertyCalled after all mappers are created to assemble\nrelationships between mappers and perform other post-mapper-creation\ninitialization steps.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.init
unpickle	A										<section class="prog__container"><pre><code>\nunpickle(target, state_dict)</code></pre><p>Receive an object instance after its associated state has\nbeen unpickled.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'unpickle')\ndef receive_unpickle(target, state_dict):\n    "listen for the 'unpickle' event"\n\n    # ... (event handling logic) ...\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.unpickle
properties.ColumnProperty.Comparator.nullsfirst	A										<section class="prog__container"><pre><code>\nnullsfirst()</code></pre><p>\ninherited from the nullsfirst() method of ColumnOperatorsProduce a nullsfirst() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.nullsfirst
properties.ColumnProperty.Comparator.of_type	A										<section class="prog__container"><pre><code>\nof_type(class_)</code></pre><p>\ninherited from the of_type() method of PropComparatorRedefine this object in terms of a polymorphic subclass.Returns a new PropComparator from which further criterion can be\nevaluated.e.g.:</p><pre><code>query.join(Company.employees.of_type(Engineer)).\\n   filter(Engineer.name=='foo')\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.of_type
interfaces.PropComparator.is_distinct_from	A										<section class="prog__container"><pre><code>\nis_distinct_from(other)</code></pre><p>\ninherited from the is_distinct_from() method of ColumnOperatorsImplement the IS DISTINCT FROM operator.Renders &#8220;a IS DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS NOT b&#8221;.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.is_distinct_from
identity	A										<section class="prog__container"><pre><code>\nidentity</code></pre><p>Return the mapped identity of the mapped object.\nThis is the primary key identity as persisted by the ORM\nwhich can always be passed directly to\nQuery.get().Returns None if the object has no primary key identity.\nNote\nAn object which is transient or pending\ndoes not have a mapped identity until it is flushed,\neven if its attributes include primary key values.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.identity
class_instrument	A										<section class="prog__container"><pre><code>\nclass_instrument(cls)</code></pre><p>Called after the given class is instrumented.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeBaseClass, 'class_instrument')\ndef receive_class_instrument(cls):\n    "listen for the 'class_instrument' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>To get at the ClassManager, use\nmanager_of_class().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstrumentationEvents.class_instrument
nullslast	D								*[[properties.ColumnProperty.Comparator.nullslast]], inherited from the nullslast() method of ColumnOperators \n*[[interfaces.PropComparator.nullslast]], inherited from the nullslast() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.nullslast]], inherited from the nullslast() method of ColumnOperators \n*[[attributes.QueryableAttribute.nullslast]], inherited from the nullslast() method of ColumnOperators \n
properties.ColumnProperty.Comparator.__le__	A										<section class="prog__container"><pre><code>\n__le__(other)</code></pre><p>\ninherited from the __le__() method of ColumnOperatorsImplement the <= operator.In a column context, produces the clause a <= b.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.__le__
attributes.QueryableAttribute.ilike	A										<section class="prog__container"><pre><code>\nilike(other, escape=None)</code></pre><p>\ninherited from the ilike() method of ColumnOperatorsImplement the ilike operator.In a column context, produces the clause a ILIKE other.E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.ilike("%foobar%"))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.ilike
properties.RelationshipProperty.Comparator.any	A										<section class="prog__container"><pre><code>\nany(criterion=None, **kwargs)</code></pre><p>Produce an expression that tests a collection against\nparticular criterion, using EXISTS.An expression like:</p><pre><code>session.query(MyClass).filter(\n    MyClass.somereference.any(SomeRelated.x==2)\n)\n</code></pre><p>Will produce a query like:</p><pre><code>SELECT * FROM my_table WHERE\nEXISTS (SELECT 1 FROM related WHERE related.my_id=my_table.id\nAND related.x=2)\n</code></pre><p>Because any() uses\na correlated subquery, its performance is not nearly as\ngood when compared against large target tables as that of\nusing a join.any() is particularly\nuseful for testing for empty collections:</p><pre><code>session.query(MyClass).filter(\n    ~MyClass.somereference.any()\n)\n</code></pre><p>will produce:</p><pre><code>SELECT * FROM my_table WHERE\nNOT EXISTS (SELECT 1 FROM related WHERE\nrelated.my_id=my_table.id)\n</code></pre><p>any() is only\nvalid for collections, i.e. a relationship()\nthat has uselist=True.  For scalar references,\nuse has().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.any
properties.RelationshipProperty.Comparator.notlike	A										<section class="prog__container"><pre><code>\nnotlike(other, escape=None)</code></pre><p>\ninherited from the notlike() method of ColumnOperatorsimplement the NOT LIKE operator.This is equivalent to using negation with\nColumnOperators.like(), i.e. ~x.like(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.notlike
attributes.QueryableAttribute.notilike	A										<section class="prog__container"><pre><code>\nnotilike(other, escape=None)</code></pre><p>\ninherited from the notilike() method of ColumnOperatorsimplement the NOT ILIKE operator.This is equivalent to using negation with\nColumnOperators.ilike(), i.e. ~x.ilike(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.notilike
any_	D								*[[properties.ColumnProperty.Comparator.any_]], inherited from the any_() method of ColumnOperators \n*[[interfaces.PropComparator.any_]], inherited from the any_() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.any_]], inherited from the any_() method of ColumnOperators \n*[[attributes.QueryableAttribute.any_]], inherited from the any_() method of ColumnOperators \n
descriptor_props.CompositeProperty.__init__	A										<section class="prog__container"><pre><code>\nCompositeProperty.__init__(class_, *attrs, **kwargs)</code></pre><p>Construct a new CompositeProperty object.This constructor is mirrored as a public API function; see composite() for a full usage and argument description.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.CompositeProperty.__init__
is_attribute	A										<section class="prog__container"><pre><code>\nis_attribute = False</code></pre><p>True if this object is a Python descriptor.This can refer to one of many types.   Usually a\nQueryableAttribute which handles attributes events on behalf\nof a MapperProperty.   But can also be an extension type\nsuch as AssociationProxy or hybrid_property.\nThe InspectionAttr.extension_type will refer to a constant\nidentifying the specific subtype.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.is_attribute
properties.ColumnProperty.Comparator.__eq__	A										<section class="prog__container"><pre><code>\n__eq__(other)</code></pre><p>\ninherited from the __eq__() method of ColumnOperatorsImplement the == operator.In a column context, produces the clause a = b.\nIf the target is None, produces a IS NULL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.__eq__
expired_attributes	A										<section class="prog__container"><pre><code>\nexpired_attributes = None</code></pre><p>The set of keys which are &#8216;expired&#8217; to be loaded by\nthe manager&#8217;s deferred scalar loader, assuming no pending\nchanges.see also the unmodified collection which is intersected\nagainst this set when a refresh operation occurs.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.expired_attributes
__lt__	D								*[[instrumentation.ClassManager.__lt__]], inherited from the __lt__ attribute of dict \n*[[properties.ColumnProperty.Comparator.__lt__]], inherited from the __lt__() method of ColumnOperators \n*[[interfaces.PropComparator.__lt__]], inherited from the __lt__() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.__lt__]], inherited from the __lt__() method of ColumnOperators \n*[[attributes.QueryableAttribute.__lt__]], inherited from the __lt__() method of ColumnOperators \n
after_commit	A										<section class="prog__container"><pre><code>\nafter_commit(session)</code></pre><p>Execute after a commit has occurred.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'after_commit')\ndef receive_after_commit(session):\n    "listen for the 'after_commit' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>\nNote\nThe after_commit() hook is not per-flush,\nthat is, the Session can emit SQL to the database\nmany times within the scope of a transaction.\nFor interception of these events, use the\nbefore_flush(),\nafter_flush(), or\nafter_flush_postexec()\nevents.\n\nNote\nThe Session is not in an active transaction\nwhen the after_commit() event is invoked,\nand therefore can not emit SQL.  To emit SQL corresponding to\nevery transaction, use the before_commit()\nevent.\n\n\n\n\nParameters:session &#8211; The target Session.\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.after_commit
before_attach	A										<section class="prog__container"><pre><code>\nbefore_attach(session, instance)</code></pre><p>Execute before an instance is attached to a session.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'before_attach')\ndef receive_before_attach(session, instance):\n    "listen for the 'before_attach' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This is called before an add, delete or merge causes\nthe object to be part of the session.\nNew in version 0.8.: Note that after_attach()\nnow fires off after the item is part of the session.\nbefore_attach() is provided for those cases where\nthe item should not yet be part of the session state.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.before_attach
properties.RelationshipProperty.extension_type	A										<section class="prog__container"><pre><code>\nRelationshipProperty.extension_type = symbol('NOT_EXTENSION')</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.extension_type
AttributeState	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.state.AttributeState(state, key)</code></pre><p>Provide an inspection interface corresponding\nto a particular attribute on a particular mapped object.The AttributeState object is accessed\nvia the InstanceState.attrs collection\nof a particular InstanceState:</p><pre><code>from sqlalchemy import inspect\n\ninsp = inspect(some_mapped_object)\nattr_state = insp.attrs.some_attribute\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.AttributeState
has	D								*[[properties.ColumnProperty.Comparator.has]], inherited from the has() method of PropComparator \n*[[interfaces.PropComparator.has]], Return true if this element references a member which meets the given criterion. \n*[[properties.RelationshipProperty.Comparator.has]], Produce an expression that tests a scalar reference against particular criterion, using EXISTS. \n*[[attributes.QueryableAttribute.has]], inherited from the has() method of PropComparator \n
match	D								*[[properties.ColumnProperty.Comparator.match]], inherited from the match() method of ColumnOperators \n*[[interfaces.PropComparator.match]], inherited from the match() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.match]], inherited from the match() method of ColumnOperators \n*[[attributes.QueryableAttribute.match]], inherited from the match() method of ColumnOperators \n
IdentityMap	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.identity.IdentityMap</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.identity.IdentityMap
manage	A										<section class="prog__container"><pre><code>\nmanage()</code></pre><p>Mark this instance as the manager for its class.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.manage
attributes.QueryableAttribute.op	A										<section class="prog__container"><pre><code>\nop(opstring, precedence=0, is_comparison=False)</code></pre><p>\ninherited from the op() method of Operatorsproduce a generic operator function.e.g.:</p><pre><code>somecolumn.op("*")(5)\n</code></pre><p>produces:</p><pre><code>somecolumn * 5\n</code></pre><p>This function can also be used to make bitwise operators explicit. For\nexample:</p><pre><code>somecolumn.op('&')(0xff)\n</code></pre><p>is a bitwise AND of the value in somecolumn.\n\n\n\nParameters:\noperator &#8211; a string which will be output as the infix operator\nbetween this element and the expression passed to the\ngenerated function.\nprecedence &#8211; precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of 0 is lower than all\noperators except for the comma (,) and AS operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.\n\nNew in version 0.8: - added the &#8216;precedence&#8217; argument.\n\n\nis_comparison &#8211; if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like ==, >, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.\n\nNew in version 0.9.2: - added the\nOperators.op.is_comparison flag.\n\n\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.op
pop	A										<section class="prog__container"><pre><code>\npop(k[, d]) &#8594; v, remove specified key and return the corresponding value.</code></pre><p>\ninherited from the pop() method of dictIf key is not found, d is returned if given, otherwise KeyError is raised</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.pop
desc	D								*[[properties.ColumnProperty.Comparator.desc]], inherited from the desc() method of ColumnOperators \n*[[interfaces.PropComparator.desc]], inherited from the desc() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.desc]], inherited from the desc() method of ColumnOperators \n*[[attributes.QueryableAttribute.desc]], inherited from the desc() method of ColumnOperators \n
like	D								*[[properties.ColumnProperty.Comparator.like]], inherited from the like() method of ColumnOperators \n*[[interfaces.PropComparator.like]], inherited from the like() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.like]], inherited from the like() method of ColumnOperators \n*[[attributes.QueryableAttribute.like]], inherited from the like() method of ColumnOperators \n
RelationshipProperty	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.properties.RelationshipProperty(argument, secondary=None, primaryjoin=None, secondaryjoin=None, foreign_keys=None, uselist=None, order_by=False, backref=None, back_populates=None, post_update=False, cascade=False, extension=None, viewonly=False, lazy=True, collection_class=None, passive_deletes=False, passive_updates=True, remote_side=None, enable_typechecks=True, join_depth=None, comparator_factory=None, single_parent=False, innerjoin=False, distinct_target_key=None, doc=None, active_history=False, cascade_backrefs=True, load_on_pending=False, bake_queries=True, _local_remote_pairs=None, query_class=None, info=None)</code></pre><p>Bases: sqlalchemy.orm.interfaces.StrategizedPropertyDescribes an object property that holds a single item or list\nof items that correspond to a related database table.Public constructor is the orm.relationship() function.See also:Relationship Configuration</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty
properties.ColumnProperty.Comparator.has	A										<section class="prog__container"><pre><code>\nhas(criterion=None, **kwargs)</code></pre><p>\ninherited from the has() method of PropComparatorReturn true if this element references a member which meets the\ngiven criterion.The usual implementation of has() is\nRelationshipProperty.Comparator.has().\n\n\n\nParameters:\ncriterion &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.\n**kwargs &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.has
interfaces.PropComparator.nullsfirst	A										<section class="prog__container"><pre><code>\nnullsfirst()</code></pre><p>\ninherited from the nullsfirst() method of ColumnOperatorsProduce a nullsfirst() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.nullsfirst
descriptor_props.SynonymProperty.extension_type	A										<section class="prog__container"><pre><code>\nextension_type = symbol('NOT_EXTENSION')</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.extension_type
properties.RelationshipProperty.Comparator.__lt__	A										<section class="prog__container"><pre><code>\n__lt__(other)</code></pre><p>\ninherited from the __lt__() method of ColumnOperatorsImplement the < operator.In a column context, produces the clause a < b.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__lt__
descriptor_props.SynonymProperty.do_init	A										<section class="prog__container"><pre><code>\ndo_init()</code></pre><p>\ninherited from the do_init() method of MapperPropertyPerform subclass-specific initialization post-mapper-creation\nsteps.This is a template method called by the MapperProperty\nobject&#8217;s init() method.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty.do_init
SynonymProperty	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.descriptor_props.SynonymProperty(name, map_column=None, descriptor=None, comparator_factory=None, doc=None, info=None)</code></pre><p>Bases: sqlalchemy.orm.descriptor_props.DescriptorProperty</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.descriptor_props.SynonymProperty
has_parent	A										<section class="prog__container"><pre><code>\nhas_parent(state, key, optimistic=False)</code></pre><p>TODO</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.has_parent
interfaces.PropComparator.operate	A										<section class="prog__container"><pre><code>\noperate(op, *other, **kwargs)</code></pre><p>\ninherited from the operate() method of OperatorsOperate on an argument.This is the lowest level of operation, raises\nNotImplementedError by default.Overriding this on a subclass can allow common\nbehavior to be applied to all operations.\nFor example, overriding ColumnOperators\nto apply func.lower() to the left and right\nside:</p><pre><code>class MyComparator(ColumnOperators):\n    def operate(self, op, other):\n        return op(func.lower(self), func.lower(other))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.operate
properties.RelationshipProperty.Comparator.__init__	A										<section class="prog__container"><pre><code>\n__init__(prop, parentmapper, adapt_to_entity=None, of_type=None)</code></pre><p>Construction of RelationshipProperty.Comparator\nis internal to the ORM&#8217;s attribute mechanics.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__init__
properties.ColumnProperty.class_attribute	A										<section class="prog__container"><pre><code>\nColumnProperty.class_attribute</code></pre><p>\ninherited from the class_attribute attribute of MapperPropertyReturn the class-bound descriptor corresponding to this\nMapperProperty.This is basically a getattr() call:</p><pre><code>return getattr(self.parent.class_, self.key)\n</code></pre><p>I.e. if this MapperProperty were named addresses,\nand the class to which it is mapped is User, this sequence\nis possible:</p><pre><code>>>> from sqlalchemy import inspect\n>>> mapper = inspect(User)\n>>> addresses_property = mapper.attrs.addresses\n>>> addresses_property.class_attribute is User.addresses\nTrue\n>>> User.addresses.property is addresses_property\nTrue\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.class_attribute
finalize_flush_changes	A										<section class="prog__container"><pre><code>\nfinalize_flush_changes()</code></pre><p>mark processed objects as clean / deleted after a successful\nflush().this method is called within the flush() method after the\nexecute() method has succeeded and the transaction has been committed.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.finalize_flush_changes
ilike	D								*[[properties.ColumnProperty.Comparator.ilike]], inherited from the ilike() method of ColumnOperators \n*[[interfaces.PropComparator.ilike]], inherited from the ilike() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.ilike]], inherited from the ilike() method of ColumnOperators \n*[[attributes.QueryableAttribute.ilike]], inherited from the ilike() method of ColumnOperators \n
interfaces.PropComparator.isnot_distinct_from	A										<section class="prog__container"><pre><code>\nisnot_distinct_from(other)</code></pre><p>\ninherited from the isnot_distinct_from() method of ColumnOperatorsImplement the IS NOT DISTINCT FROM operator.Renders &#8220;a IS NOT DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS b&#8221;.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.isnot_distinct_from
ClassManager	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.instrumentation.ClassManager(class_)</code></pre><p>Bases: __builtin__.dicttracks state information at the class level.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager
interfaces.PropComparator.has	A										<section class="prog__container"><pre><code>\nhas(criterion=None, **kwargs)</code></pre><p>Return true if this element references a member which meets the\ngiven criterion.The usual implementation of has() is\nRelationshipProperty.Comparator.has().\n\n\n\nParameters:\ncriterion &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.\n**kwargs &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.has
deleted_to_detached	A										<section class="prog__container"><pre><code>\ndeleted_to_detached(session, instance)</code></pre><p>Intercept the &#8220;deleted to detached&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'deleted_to_detached')\ndef receive_deleted_to_detached(session, instance):\n    "listen for the 'deleted_to_detached' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is invoked when a deleted object is evicted\nfrom the session.   The typical case when this occurs is when\nthe transaction for a Session in which the object\nwas deleted is committed; the object moves from the deleted\nstate to the detached state.It is also invoked for objects that were deleted in a flush\nwhen the Session.expunge_all() or Session.close()\nevents are called, as well as if the object is individually\nexpunged from its deleted state via Session.expunge().\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.deleted_to_detached
__ne__	D								*[[instrumentation.ClassManager.__ne__]], inherited from the __ne__ attribute of dict \n*[[properties.ColumnProperty.Comparator.__ne__]], inherited from the __ne__() method of ColumnOperators \n*[[interfaces.PropComparator.__ne__]], inherited from the __ne__() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.__ne__]], Implement the != operator. \n*[[attributes.QueryableAttribute.__ne__]], inherited from the __ne__() method of ColumnOperators \n
properties.RelationshipProperty.Comparator.__le__	A										<section class="prog__container"><pre><code>\n__le__(other)</code></pre><p>\ninherited from the __le__() method of ColumnOperatorsImplement the <= operator.In a column context, produces the clause a <= b.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__le__
deleted	A										<section class="prog__container"><pre><code>\ndeleted</code></pre><p>Return true if the object is deleted.An object that is in the deleted state is guaranteed to\nnot be within the Session.identity_map of its parent\nSession; however if the session&#8217;s transaction is rolled\nback, the object will be restored to the persistent state and\nthe identity map.\nNote\nThe InstanceState.deleted attribute refers to a specific\nstate of the object that occurs between the &#8220;persistent&#8221; and\n&#8220;detached&#8221; states; once the object is detached, the\nInstanceState.deleted attribute no longer returns\nTrue; in order to detect that a state was deleted, regardless\nof whether or not the object is associated with a Session,\nuse the InstanceState.was_deleted accessor.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.deleted
properties.RelationshipProperty.Comparator.op	A										<section class="prog__container"><pre><code>\nop(opstring, precedence=0, is_comparison=False)</code></pre><p>\ninherited from the op() method of Operatorsproduce a generic operator function.e.g.:</p><pre><code>somecolumn.op("*")(5)\n</code></pre><p>produces:</p><pre><code>somecolumn * 5\n</code></pre><p>This function can also be used to make bitwise operators explicit. For\nexample:</p><pre><code>somecolumn.op('&')(0xff)\n</code></pre><p>is a bitwise AND of the value in somecolumn.\n\n\n\nParameters:\noperator &#8211; a string which will be output as the infix operator\nbetween this element and the expression passed to the\ngenerated function.\nprecedence &#8211; precedence to apply to the operator, when\nparenthesizing expressions.  A lower number will cause the expression\nto be parenthesized when applied against another operator with\nhigher precedence.  The default value of 0 is lower than all\noperators except for the comma (,) and AS operators.\nA value of 100 will be higher or equal to all operators, and -100\nwill be lower than or equal to all operators.\n\nNew in version 0.8: - added the &#8216;precedence&#8217; argument.\n\n\nis_comparison &#8211; if True, the operator will be considered as a\n&#8220;comparison&#8221; operator, that is which evaluates to a boolean\ntrue/false value, like ==, >, etc.  This flag should be set\nso that ORM relationships can establish that the operator is a\ncomparison operator when used in a custom join condition.\n\nNew in version 0.9.2: - added the\nOperators.op.is_comparison flag.\n\n\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.op
expire	A										<section class="prog__container"><pre><code>\nexpire(target, attrs)</code></pre><p>Receive an object instance after its attributes or some subset\nhave been expired.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'expire')\ndef receive_expire(target, attrs):\n    "listen for the 'expire' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>&#8216;keys&#8217; is a list of attribute names.  If None, the entire\nstate was expired.\n\n\n\nParameters:\ntarget &#8211; the mapped instance.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\nattrs &#8211; sequence of attribute\nnames which were expired, or None if all attributes were\nexpired.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.expire
properties.ColumnProperty.set_parent	A										<section class="prog__container"><pre><code>\nColumnProperty.set_parent(parent, init)</code></pre><p>\ninherited from the set_parent() method of MapperPropertySet the parent mapper that references this MapperProperty.This method is overridden by some subclasses to perform extra\nsetup when the mapper is first known.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.set_parent
interfaces.MapperProperty.instrument_class	A										<section class="prog__container"><pre><code>\ninstrument_class(mapper)</code></pre><p>Hook called by the Mapper to the property to initiate\ninstrumentation of the class attribute managed by this\nMapperProperty.The MapperProperty here will typically call out to the\nattributes module to set up an InstrumentedAttribute.This step is the first of two steps to set up an InstrumentedAttribute,\nand is called early in the mapper setup process.The second step is typically the init_class_attribute step,\ncalled from StrategizedProperty via the post_instrument_class()\nhook.  This step assigns additional state to the InstrumentedAttribute\n(specifically the &#8220;impl&#8221;) which has been determined after the\nMapperProperty has determined what kind of persistence\nmanagement it needs to do (e.g. scalar, object, collection, etc).</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.instrument_class
ConcurrentModificationError	A										<section class="prog__container"><pre><code>\nsqlalchemy.orm.exc.ConcurrentModificationError</code></pre><p>alias of StaleDataError</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.ConcurrentModificationError
ONETOMANY	A										<section class="prog__container"><pre><code>\nsqlalchemy.orm.interfaces.ONETOMANY = symbol('ONETOMANY')</code></pre><p>Indicates the one-to-many direction for a relationship().This symbol is typically used by the internals but may be exposed within\ncertain API features.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.ONETOMANY
properties.ColumnProperty.Comparator.desc	A										<section class="prog__container"><pre><code>\ndesc()</code></pre><p>\ninherited from the desc() method of ColumnOperatorsProduce a desc() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.desc
PropComparator	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.interfaces.PropComparator(prop, parentmapper, adapt_to_entity=None)</code></pre><p>Bases: sqlalchemy.sql.operators.ColumnOperatorsDefines SQL operators for MapperProperty objects.SQLAlchemy allows for operators to\nbe redefined at both the Core and ORM level.  PropComparator\nis the base class of operator redefinition for ORM-level operations,\nincluding those of ColumnProperty,\nRelationshipProperty, and CompositeProperty.\nNote\nWith the advent of Hybrid properties introduced in SQLAlchemy\n0.7, as well as Core-level operator redefinition in\nSQLAlchemy 0.8, the use case for user-defined PropComparator\ninstances is extremely rare.  See Hybrid Attributes as well\nas Redefining and Creating New Operators.\nUser-defined subclasses of PropComparator may be created. The\nbuilt-in Python comparison and math operator methods, such as\noperators.ColumnOperators.__eq__(),\noperators.ColumnOperators.__lt__(), and\noperators.ColumnOperators.__add__(), can be overridden to provide\nnew operator behavior. The custom PropComparator is passed to\nthe MapperProperty instance via the comparator_factory\nargument. In each case,\nthe appropriate subclass of PropComparator should be used:</p><pre><code># definition of custom PropComparator subclasses\n\nfrom sqlalchemy.orm.properties import \\n                        ColumnProperty,\\n                        CompositeProperty,\\n                        RelationshipProperty\n\nclass MyColumnComparator(ColumnProperty.Comparator):\n    def __eq__(self, other):\n        return self.__clause_element__() == other\n\nclass MyRelationshipComparator(RelationshipProperty.Comparator):\n    def any(self, expression):\n        "define the 'any' operation"\n        # ...\n\nclass MyCompositeComparator(CompositeProperty.Comparator):\n    def __gt__(self, other):\n        "redefine the 'greater than' operation"\n\n        return sql.and_(*[a>b for a, b in\n                          zip(self.__clause_element__().clauses,\n                              other.__composite_values__())])\n\n\n# application of custom PropComparator subclasses\n\nfrom sqlalchemy.orm import column_property, relationship, composite\nfrom sqlalchemy import Column, String\n\nclass SomeMappedClass(Base):\n    some_column = column_property(Column("some_column", String),\n                        comparator_factory=MyColumnComparator)\n\n    some_relationship = relationship(SomeOtherClass,\n                        comparator_factory=MyRelationshipComparator)\n\n    some_composite = composite(\n            Column("a", String), Column("b", String),\n            comparator_factory=MyCompositeComparator\n        )\n</code></pre><p>Note that for column-level operator redefinition, it&#8217;s usually\nsimpler to define the operators at the Core level, using the\nTypeEngine.comparator_factory attribute.  See\nRedefining and Creating New Operators for more detail.See also:ColumnProperty.ComparatorRelationshipProperty.ComparatorCompositeProperty.ComparatorColumnOperatorsRedefining and Creating New OperatorsTypeEngine.comparator_factory</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator
interfaces.MapperProperty.cascade	A										<section class="prog__container"><pre><code>\ncascade = frozenset([])</code></pre><p>The set of &#8216;cascade&#8217; attribute names.This collection is checked before the &#8216;cascade_iterator&#8217; method is called.The collection typically only applies to a RelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.cascade
properties.RelationshipProperty.Comparator.is_	A										<section class="prog__container"><pre><code>\nis_(other)</code></pre><p>\ninherited from the is_() method of ColumnOperatorsImplement the IS operator.Normally, IS is generated automatically when comparing to a\nvalue of None, which resolves to NULL.  However, explicit\nusage of IS may be desirable if comparing to boolean values\non certain platforms.\nNew in version 0.7.9.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.is_
interfaces.PropComparator.endswith	A										<section class="prog__container"><pre><code>\nendswith(other, **kwargs)</code></pre><p>\ninherited from the endswith() method of ColumnOperatorsImplement the &#8216;endswith&#8217; operator.In a column context, produces the clause LIKE '%<other>'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.endswith
CascadeOptions	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.util.CascadeOptions</code></pre><p>Bases: __builtin__.frozensetKeeps track of the options sent to relationship().cascade</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.util.CascadeOptions
op	D								*[[properties.ColumnProperty.Comparator.op]], inherited from the op() method of Operators \n*[[interfaces.PropComparator.op]], inherited from the op() method of Operators \n*[[properties.RelationshipProperty.Comparator.op]], inherited from the op() method of Operators \n*[[attributes.QueryableAttribute.op]], inherited from the op() method of Operators \n
properties.RelationshipProperty.Comparator.reverse_operate	A										<section class="prog__container"><pre><code>\nreverse_operate(op, other, **kwargs)</code></pre><p>\ninherited from the reverse_operate() method of OperatorsReverse operate on an argument.Usage is the same as operate().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.reverse_operate
interfaces.PropComparator.contains	A										<section class="prog__container"><pre><code>\ncontains(other, **kwargs)</code></pre><p>\ninherited from the contains() method of ColumnOperatorsImplement the &#8216;contains&#8217; operator.In a column context, produces the clause LIKE '%<other>%'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.contains
properties.RelationshipProperty.Comparator.endswith	A										<section class="prog__container"><pre><code>\nendswith(other, **kwargs)</code></pre><p>\ninherited from the endswith() method of ColumnOperatorsImplement the &#8216;endswith&#8217; operator.In a column context, produces the clause LIKE '%<other>'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith
MapperProperty	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.interfaces.MapperProperty</code></pre><p>Bases: sqlalchemy.orm.base._MappedAttribute, sqlalchemy.orm.base.InspectionAttr, sqlalchemy.util.langhelpers.MemoizedSlotsRepresent a particular class attribute mapped by Mapper.The most common occurrences of MapperProperty are the\nmapped Column, which is represented in a mapping as\nan instance of ColumnProperty,\nand a reference to another class produced by relationship(),\nrepresented in the mapping as an instance of\nRelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty
properties.ColumnProperty.Comparator.asc	A										<section class="prog__container"><pre><code>\nasc()</code></pre><p>\ninherited from the asc() method of ColumnOperatorsProduce a asc() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.asc
properties.RelationshipProperty.Comparator.ilike	A										<section class="prog__container"><pre><code>\nilike(other, escape=None)</code></pre><p>\ninherited from the ilike() method of ColumnOperatorsImplement the ilike operator.In a column context, produces the clause a ILIKE other.E.g.:</p><pre><code>select([sometable]).where(sometable.c.column.ilike("%foobar%"))\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike
UnmappedClassError	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.UnmappedClassError(cls, msg=None)</code></pre><p>An mapping operation was requested for an unknown class.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.UnmappedClassError
unmodified	A										<section class="prog__container"><pre><code>\nunmodified</code></pre><p>Return the set of keys which have no uncommitted changes</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.unmodified
properties.RelationshipProperty.Comparator.concat	A										<section class="prog__container"><pre><code>\nconcat(other)</code></pre><p>\ninherited from the concat() method of ColumnOperatorsImplement the &#8216;concat&#8217; operator.In a column context, produces the clause a || b,\nor uses the concat() operator on MySQL.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.concat
attributes.QueryableAttribute.startswith	A										<section class="prog__container"><pre><code>\nstartswith(other, **kwargs)</code></pre><p>\ninherited from the startswith() method of ColumnOperatorsImplement the startwith operator.In a column context, produces the clause LIKE '<other>%'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.startswith
QueryContext	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.query.QueryContext(query)</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.query.QueryContext
properties.RelationshipProperty.Comparator.__ne__	A										<section class="prog__container"><pre><code>\n__ne__(other)</code></pre><p>Implement the != operator.In a many-to-one context, such as:</p><pre><code>MyClass.some_prop != <some object>\n</code></pre><p>This will typically produce a clause such as:</p><pre><code>mytable.related_id != <some id>\n</code></pre><p>Where <some id> is the primary key of the\ngiven object.The != operator provides partial functionality for non-\nmany-to-one comparisons:\nComparisons against collections are not supported.\nUse\ncontains()\nin conjunction with not_().\nCompared to a scalar one-to-many, will produce a\nclause that compares the target columns in the parent to\nthe given target.\nCompared to a scalar many-to-many, an alias\nof the association table will be rendered as\nwell, forming a natural join that is part of the\nmain body of the query. This will not work for\nqueries that go beyond simple AND conjunctions of\ncomparisons, such as those which use OR. Use\nexplicit joins, outerjoins, or\nhas() in\nconjunction with not_() for\nmore comprehensive non-many-to-one scalar\nmembership tests.\nComparisons against None given in a one-to-many\nor many-to-many context produce an EXISTS clause.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__ne__
properties.RelationshipProperty.Comparator.is_distinct_from	A										<section class="prog__container"><pre><code>\nis_distinct_from(other)</code></pre><p>\ninherited from the is_distinct_from() method of ColumnOperatorsImplement the IS DISTINCT FROM operator.Renders &#8220;a IS DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS NOT b&#8221;.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.is_distinct_from
properties.RelationshipProperty.Comparator.nullsfirst	A										<section class="prog__container"><pre><code>\nnullsfirst()</code></pre><p>\ninherited from the nullsfirst() method of ColumnOperatorsProduce a nullsfirst() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.nullsfirst
interfaces.MapperProperty.create_row_processor	A										<section class="prog__container"><pre><code>\ncreate_row_processor(context, path, mapper, result, adapter, populators)</code></pre><p>Produce row processing functions and append to the given\nset of populators lists.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.create_row_processor
__get__	A										<section class="prog__container"><pre><code>\n__get__(instance, owner)</code></pre><p></p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.InstrumentedAttribute.__get__
info	D								*[[base.InspectionAttrInfo.info]], Info dictionary associated with the object, allowing user-defined data to be associated with this InspectionAttr. \n*[[MapperProperty.info]], Info dictionary associated with the object, allowing user-defined data to be associated with this InspectionAttr. \n*[[attributes.QueryableAttribute.info]], Return the &#8216;info&#8217; dictionary for the underlying SQL element. \n
unmodified_intersection	A										<section class="prog__container"><pre><code>\nunmodified_intersection(keys)</code></pre><p>Return self.unmodified.intersection(keys).</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.unmodified_intersection
properties.ColumnProperty.Comparator.endswith	A										<section class="prog__container"><pre><code>\nendswith(other, **kwargs)</code></pre><p>\ninherited from the endswith() method of ColumnOperatorsImplement the &#8216;endswith&#8217; operator.In a column context, produces the clause LIKE '%<other>'</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith
properties.RelationshipProperty.Comparator.notilike	A										<section class="prog__container"><pre><code>\nnotilike(other, escape=None)</code></pre><p>\ninherited from the notilike() method of ColumnOperatorsimplement the NOT ILIKE operator.This is equivalent to using negation with\nColumnOperators.ilike(), i.e. ~x.ilike(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.notilike
__le__	D								*[[instrumentation.ClassManager.__le__]], inherited from the __le__ attribute of dict \n*[[properties.ColumnProperty.Comparator.__le__]], inherited from the __le__() method of ColumnOperators \n*[[interfaces.PropComparator.__le__]], inherited from the __le__() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.__le__]], inherited from the __le__() method of ColumnOperators \n*[[attributes.QueryableAttribute.__le__]], inherited from the __le__() method of ColumnOperators \n
interfaces.MapperProperty.is_property	A										<section class="prog__container"><pre><code>\nis_property = True</code></pre><p>Part of the InspectionAttr interface; states this object is a\nmapper property.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.MapperProperty.is_property
properties.RelationshipProperty.class_attribute	A										<section class="prog__container"><pre><code>\nRelationshipProperty.class_attribute</code></pre><p>\ninherited from the class_attribute attribute of MapperPropertyReturn the class-bound descriptor corresponding to this\nMapperProperty.This is basically a getattr() call:</p><pre><code>return getattr(self.parent.class_, self.key)\n</code></pre><p>I.e. if this MapperProperty were named addresses,\nand the class to which it is mapped is User, this sequence\nis possible:</p><pre><code>>>> from sqlalchemy import inspect\n>>> mapper = inspect(User)\n>>> addresses_property = mapper.attrs.addresses\n>>> addresses_property.class_attribute is User.addresses\nTrue\n>>> User.addresses.property is addresses_property\nTrue\n</code></pre></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.class_attribute
properties.ColumnProperty.Comparator.any	A										<section class="prog__container"><pre><code>\nany(criterion=None, **kwargs)</code></pre><p>\ninherited from the any() method of PropComparatorReturn true if this collection contains any member that meets the\ngiven criterion.The usual implementation of any() is\nRelationshipProperty.Comparator.any().\n\n\n\nParameters:\ncriterion &#8211; an optional ClauseElement formulated against the\nmember class&#8217; table or attributes.\n**kwargs &#8211; key/value pairs corresponding to member class\nattribute names which will be compared via equality to the\ncorresponding values.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.any
properties.RelationshipProperty.Comparator.isnot	A										<section class="prog__container"><pre><code>\nisnot(other)</code></pre><p>\ninherited from the isnot() method of ColumnOperatorsImplement the IS NOT operator.Normally, IS NOT is generated automatically when comparing to a\nvalue of None, which resolves to NULL.  However, explicit\nusage of IS NOT may be desirable if comparing to boolean values\non certain platforms.\nNew in version 0.7.9.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.isnot
after_insert	A										<section class="prog__container"><pre><code>\nafter_insert(mapper, connection, target)</code></pre><p>Receive an object instance after an INSERT statement\nis emitted corresponding to that instance.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'after_insert')\ndef receive_after_insert(mapper, connection, target):\n    "listen for the 'after_insert' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to modify in-Python-only\nstate on the instance after an INSERT occurs, as well\nas to emit additional SQL statements on the given\nconnection.The event is often called for a batch of objects of the\nsame class after their INSERT statements have been\nemitted at once in a previous step. In the extremely\nrare case that this is not desirable, the\nmapper() can be configured with batch=False,\nwhich will cause batches of instances to be broken up\ninto individual (and more poorly performing)\nevent->persist->event steps.\nWarning\nMapper-level flush events only allow very limited operations,\non attributes local to the row being operated upon only,\nas well as allowing any SQL to be emitted on the given\nConnection.  Please read fully the notes\nat Mapper-level Events for guidelines on using\nthese methods; generally, the SessionEvents.before_flush()\nmethod should be preferred for general on-flush changes.\n\n\n\n\nParameters:\nmapper &#8211; the Mapper which is the target\nof this event.\nconnection &#8211; the Connection being used to\nemit INSERT statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.\ntarget &#8211; the mapped instance being persisted.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\n\n\n\nReturns:No return value is supported by this event.\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.after_insert
attributes.QueryableAttribute.collate	A										<section class="prog__container"><pre><code>\ncollate(collation)</code></pre><p>\ninherited from the collate() method of ColumnOperatorsProduce a collate() clause against\nthe parent object, given the collation string.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.collate
before_delete	A										<section class="prog__container"><pre><code>\nbefore_delete(mapper, connection, target)</code></pre><p>Receive an object instance before a DELETE statement\nis emitted corresponding to that instance.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'before_delete')\ndef receive_before_delete(mapper, connection, target):\n    "listen for the 'before_delete' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is used to emit additional SQL statements on\nthe given connection as well as to perform application\nspecific bookkeeping related to a deletion event.The event is often called for a batch of objects of the\nsame class before their DELETE statements are emitted at\nonce in a later step.\nWarning\nMapper-level flush events only allow very limited operations,\non attributes local to the row being operated upon only,\nas well as allowing any SQL to be emitted on the given\nConnection.  Please read fully the notes\nat Mapper-level Events for guidelines on using\nthese methods; generally, the SessionEvents.before_flush()\nmethod should be preferred for general on-flush changes.\n\n\n\n\nParameters:\nmapper &#8211; the Mapper which is the target\nof this event.\nconnection &#8211; the Connection being used to\nemit DELETE statements for this instance.  This\nprovides a handle into the current transaction on the\ntarget database specific to this instance.\ntarget &#8211; the mapped instance being deleted.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\n\n\n\nReturns:No return value is supported by this event.\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents.before_delete
in_	D								*[[properties.ColumnProperty.Comparator.in_]], inherited from the in_() method of ColumnOperators \n*[[interfaces.PropComparator.in_]], inherited from the in_() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.in_]], Produce an IN clause - this is not implemented for relationship()-based attributes at this time. \n*[[attributes.QueryableAttribute.in_]], inherited from the in_() method of ColumnOperators \n
properties.ColumnProperty.cascade_iterator	A										<section class="prog__container"><pre><code>\nColumnProperty.cascade_iterator(type_, state, visited_instances=None, halt_on=None)</code></pre><p>\ninherited from the cascade_iterator() method of MapperPropertyIterate through instances related to the given instance for\na particular &#8216;cascade&#8217;, starting with this MapperProperty.Return an iterator3-tuples (instance, mapper, state).Note that the &#8216;cascade&#8217; collection on this MapperProperty is\nchecked first for the given type before cascade_iterator is called.This method typically only applies to RelationshipProperty.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.cascade_iterator
properties.RelationshipProperty.Comparator.of_type	A										<section class="prog__container"><pre><code>\nof_type(cls)</code></pre><p>Produce a construct that represents a particular &#8216;subtype&#8217; of\nattribute for the parent class.Currently this is usable in conjunction with Query.join()\nand Query.outerjoin().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.of_type
MapperEvents	A										<section class="prog__container"><pre><code>\nclass sqlalchemy.orm.events.MapperEvents</code></pre><p>Bases: sqlalchemy.event.base.EventsDefine events specific to mappings.e.g.:</p><pre><code>from sqlalchemy import event\n\ndef my_before_insert_listener(mapper, connection, target):\n    # execute a stored procedure upon INSERT,\n    # apply the value to the row to be inserted\n    target.calculated_value = connection.scalar(\n                                "select my_special_function(%d)"\n                                % target.special_number)\n\n# associate the listener function with SomeClass,\n# to execute during the "before_insert" hook\nevent.listen(\n    SomeClass, 'before_insert', my_before_insert_listener)\n</code></pre><p>Available targets include:\nmapped classes\nunmapped superclasses of mapped or to-be-mapped classes\n(using the propagate=True flag)\nMapper objects\nthe Mapper class itself and the mapper()\nfunction indicate listening for all mappers.\n\nChanged in version 0.8.0: mapper events can be associated with\nunmapped superclasses of mapped classes.\nMapper events provide hooks into critical sections of the\nmapper, including those related to object instrumentation,\nobject loading, and object persistence. In particular, the\npersistence methods before_insert(),\nand before_update() are popular\nplaces to augment the state being persisted - however, these\nmethods operate with several significant restrictions. The\nuser is encouraged to evaluate the\nSessionEvents.before_flush() and\nSessionEvents.after_flush() methods as more\nflexible and user-friendly hooks in which to apply\nadditional database state during a flush.When using MapperEvents, several modifiers are\navailable to the event.listen() function.\n\n\n\nParameters:\npropagate=False &#8211; When True, the event listener should\nbe applied to all inheriting mappers and/or the mappers of\ninheriting classes, as well as any\nmapper which is the target of this listener.\nraw=False &#8211; When True, the &#8220;target&#8221; argument passed\nto applicable event listener functions will be the\ninstance&#8217;s InstanceState management\nobject, rather than the mapped instance itself.\nretval=False &#8211; when True, the user-defined event function\nmust have a return value, the purpose of which is either to\ncontrol subsequent event propagation, or to otherwise alter\nthe operation in progress by the mapper.   Possible return\nvalues are:\n\nsqlalchemy.orm.interfaces.EXT_CONTINUE - continue event\nprocessing normally.\nsqlalchemy.orm.interfaces.EXT_STOP - cancel all subsequent\nevent handlers in the chain.\nother values - the return value specified by specific listeners.\n\n\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.MapperEvents
properties.RelationshipProperty.Comparator.__eq__	A										<section class="prog__container"><pre><code>\n__eq__(other)</code></pre><p>Implement the == operator.In a many-to-one context, such as:</p><pre><code>MyClass.some_prop == <some object>\n</code></pre><p>this will typically produce a\nclause such as:</p><pre><code>mytable.related_id == <some id>\n</code></pre><p>Where <some id> is the primary key of the given\nobject.The == operator provides partial functionality for non-\nmany-to-one comparisons:\nComparisons against collections are not supported.\nUse contains().\nCompared to a scalar one-to-many, will produce a\nclause that compares the target columns in the parent to\nthe given target.\nCompared to a scalar many-to-many, an alias\nof the association table will be rendered as\nwell, forming a natural join that is part of the\nmain body of the query. This will not work for\nqueries that go beyond simple AND conjunctions of\ncomparisons, such as those which use OR. Use\nexplicit joins, outerjoins, or\nhas() for\nmore comprehensive non-many-to-one scalar\nmembership tests.\nComparisons against None given in a one-to-many\nor many-to-many context produce a NOT EXISTS clause.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.__eq__
NoResultFound	A										<section class="prog__container"><pre><code>\nexception sqlalchemy.orm.exc.NoResultFound</code></pre><p>A database result was required but none was found.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.NoResultFound
update	A										<section class="prog__container"><pre><code>\nupdate([E, ]**F) &#8594; None.  Update D from dict/iterable E and F.</code></pre><p>\ninherited from the update() method of dictIf E present and has a .keys() method, does:     for k in E: D[k] = E[k]\nIf E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\nIn either case, this is followed by: for k in F: D[k] = F[k]</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.update
remove_state_actions	A										<section class="prog__container"><pre><code>\nremove_state_actions(state)</code></pre><p>remove pending actions for a state from the uowtransaction.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.session.UOWTransaction.remove_state_actions
attributes.QueryableAttribute.is_	A										<section class="prog__container"><pre><code>\nis_(other)</code></pre><p>\ninherited from the is_() method of ColumnOperatorsImplement the IS operator.Normally, IS is generated automatically when comparing to a\nvalue of None, which resolves to NULL.  However, explicit\nusage of IS may be desirable if comparing to boolean values\non certain platforms.\nNew in version 0.7.9.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.is_
properties.ColumnProperty.Comparator.notlike	A										<section class="prog__container"><pre><code>\nnotlike(other, escape=None)</code></pre><p>\ninherited from the notlike() method of ColumnOperatorsimplement the NOT LIKE operator.This is equivalent to using negation with\nColumnOperators.like(), i.e. ~x.like(y).\nNew in version 0.8.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.ColumnProperty.Comparator.notlike
attributes.QueryableAttribute.is_distinct_from	A										<section class="prog__container"><pre><code>\nis_distinct_from(other)</code></pre><p>\ninherited from the is_distinct_from() method of ColumnOperatorsImplement the IS DISTINCT FROM operator.Renders &#8220;a IS DISTINCT FROM b&#8221; on most platforms;\non some such as SQLite may render &#8220;a IS NOT b&#8221;.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.is_distinct_from
attributes.QueryableAttribute.any_	A										<section class="prog__container"><pre><code>\nany_()</code></pre><p>\ninherited from the any_() method of ColumnOperatorsProduce a any_() clause against the\nparent object.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.attributes.QueryableAttribute.any_
events.InstanceEvents.init	A										<section class="prog__container"><pre><code>\ninit(target, args, kwargs)</code></pre><p>Receive an instance when its constructor is called.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'init')\ndef receive_init(target, args, kwargs):\n    "listen for the 'init' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This method is only called during a userland construction of\nan object, in conjunction with the object&#8217;s constructor, e.g.\nits __init__ method.  It is not called when an object is\nloaded from the database; see the InstanceEvents.load()\nevent in order to intercept a database load.The event is called before the actual __init__ constructor\nof the object is called.  The kwargs dictionary may be\nmodified in-place in order to affect what is passed to\n__init__.\n\n\n\nParameters:\ntarget &#8211; the mapped instance.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\nargs &#8211; positional arguments passed to the __init__ method.\nThis is passed as a tuple and is currently immutable.\nkwargs &#8211; keyword arguments passed to the __init__ method.\nThis structure can be altered in place.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.init
concat	D								*[[properties.ColumnProperty.Comparator.concat]], inherited from the concat() method of ColumnOperators \n*[[interfaces.PropComparator.concat]], inherited from the concat() method of ColumnOperators \n*[[properties.RelationshipProperty.Comparator.concat]], inherited from the concat() method of ColumnOperators \n*[[attributes.QueryableAttribute.concat]], inherited from the concat() method of ColumnOperators \n
interfaces.PropComparator.reverse_operate	A										<section class="prog__container"><pre><code>\nreverse_operate(op, other, **kwargs)</code></pre><p>\ninherited from the reverse_operate() method of OperatorsReverse operate on an argument.Usage is the same as operate().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.reverse_operate
properties.RelationshipProperty.Comparator.mapper	A										<section class="prog__container"><pre><code>\nmapper</code></pre><p>The target Mapper referred to by this\nRelationshipProperty.Comparator.This is the &#8220;target&#8221; or &#8220;remote&#8221; side of the\nrelationship().</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.mapper
refresh_flush	A										<section class="prog__container"><pre><code>\nrefresh_flush(target, flush_context, attrs)</code></pre><p>Receive an object instance after one or more attributes have\nbeen refreshed within the persistence of the object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeClass, 'refresh_flush')\ndef receive_refresh_flush(target, flush_context, attrs):\n    "listen for the 'refresh_flush' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This event is the same as InstanceEvents.refresh() except\nit is invoked within the unit of work flush process, and the values\nhere typically come from the process of handling an INSERT or\nUPDATE, such as via the RETURNING clause or from Python-side default\nvalues.\nNew in version 1.0.5.\n\n\n\n\nParameters:\ntarget &#8211; the mapped instance.  If\nthe event is configured with raw=True, this will\ninstead be the InstanceState state-management\nobject associated with the instance.\nflush_context &#8211; Internal UOWTransaction object\nwhich handles the details of the flush.\nattrs &#8211; sequence of attribute names which\nwere populated.\n\n\n\n\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstanceEvents.refresh_flush
attribute_instrument	A										<section class="prog__container"><pre><code>\nattribute_instrument(cls, key, inst)</code></pre><p>Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeBaseClass, 'attribute_instrument')\ndef receive_attribute_instrument(cls, key, inst):\n    "listen for the 'attribute_instrument' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>Called when an attribute is instrumented.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.InstrumentationEvents.attribute_instrument
persistent	A										<section class="prog__container"><pre><code>\npersistent</code></pre><p>Return true if the object is persistent.An object that is in the persistent state is guaranteed to\nbe within the Session.identity_map of its parent\nSession.\nChanged in version 1.1: The InstanceState.persistent\naccessor no longer returns True for an object that was\n&#8220;deleted&#8221; within a flush; use the InstanceState.deleted\naccessor to detect this state.   This allows the &#8220;persistent&#8221;\nstate to guarantee membership in the identity map.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.state.InstanceState.persistent
interfaces.PropComparator.asc	A										<section class="prog__container"><pre><code>\nasc()</code></pre><p>\ninherited from the asc() method of ColumnOperatorsProduce a asc() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.interfaces.PropComparator.asc
deleted_to_persistent	A										<section class="prog__container"><pre><code>\ndeleted_to_persistent(session, instance)</code></pre><p>Intercept the &#8220;deleted to persistent&#8221; transition for a specific object.Example argument forms:</p><pre><code>from sqlalchemy import event\n\n# standard decorator style\n@event.listens_for(SomeSessionOrFactory, 'deleted_to_persistent')\ndef receive_deleted_to_persistent(session, instance):\n    "listen for the 'deleted_to_persistent' event"\n\n    # ... (event handling logic) ...\n</code></pre><p>This transition occurs only when an object that&#8217;s been deleted\nsuccessfully in a flush is restored due to a call to\nSession.rollback().   The event is not called under\nany other circumstances.\nNew in version 1.1.\n</p></section>	http://docs.sqlalchemy.org/en/latest/orm/events.html#sqlalchemy.orm.events.SessionEvents.deleted_to_persistent
properties.RelationshipProperty.Comparator.nullslast	A										<section class="prog__container"><pre><code>\nnullslast()</code></pre><p>\ninherited from the nullslast() method of ColumnOperatorsProduce a nullslast() clause against the\nparent object.</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.properties.RelationshipProperty.Comparator.nullslast
original_init	A										<section class="prog__container"><pre><code>\noriginal_init</code></pre><p>x.__init__(...) initializes x; see help(type(x)) for signature</p></section>	http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.instrumentation.ClassManager.original_init
