Animation Events	A										<section class="prog__container"><p>Event names:</p><p>Properties:</p>\n<pre><code>string animationName\nstring pseudoElement\nfloat elapsedTime\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#animation-events
Clipboard Events	A										<section class="prog__container"><p>Event names:</p><p>Properties:</p>\n<pre><code>DOMDataTransfer clipboardData\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#clipboard-events
Composition Events	A										<section class="prog__container"><p>Event names:</p><p>Properties:</p>\n<pre><code>string data\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#composition-events
Focus Events	A										<section class="prog__container"><p>Event names:</p><p>These focus events work on all elements in the React DOM, not just form elements.</p><p>Properties:</p>\n<pre><code>DOMEventTarget relatedTarget\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#focus-events
Form Events	A										<section class="prog__container"><p>Event names:</p><p>For more information about the onChange event, see Forms.</p>\n<pre><code>onChange onInput onSubmit\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#form-events
Image Events	A										<section class="prog__container"><p>Event names:</p>\n<pre><code>onLoad onError\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#image-events
Keyboard Events	A										<section class="prog__container"><p>Event names:</p><p>Properties:</p>\n<pre><code>boolean altKey\nnumber charCode\nboolean ctrlKey\nboolean getModifierState(key)\nstring key\nnumber keyCode\nstring locale\nnumber location\nboolean metaKey\nboolean repeat\nboolean shiftKey\nnumber which\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#keyboard-events
Media Events	A										<section class="prog__container"><p>Event names:</p>\n<pre><code>onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted \nonEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay \nonPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend \nonTimeUpdate onVolumeChange onWaiting\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#media-events
Mouse Events	A										<section class="prog__container"><p>Event names:</p><p>The <code>onMouseEnter</code> and <code>onMouseLeave</code> events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.</p><p>Properties:</p>\n<pre><code>boolean altKey\nnumber button\nnumber buttons\nnumber clientX\nnumber clientY\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nnumber pageX\nnumber pageY\nDOMEventTarget relatedTarget\nnumber screenX\nnumber screenY\nboolean shiftKey\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#mouse-events
React.Children	A										<section class="prog__container"><p><code>React.Children</code> provides utilities for dealing with the <code>this.props.children</code> opaque data structure.</p><h4><code>React.Children.map</code> </h4><p>Invokes a function on every immediate child contained within <code>children</code> with <code>this</code> set to <code>thisArg</code>. If <code>children</code> is a keyed fragment or array it will be traversed: the function will never be passed the container objects. If children is <code>null</code> or <code>undefined</code>, returns <code>null</code> or <code>undefined</code> rather than an array.</p><h4><code>React.Children.forEach</code> </h4><p>Like React.Children.map() but does not return an array.</p><h4><code>React.Children.count</code> </h4><p>Returns the total number of components in <code>children</code>, equal to the number of times that a callback passed to <code>map</code> or <code>forEach</code> would be invoked.</p><h4><code>React.Children.only</code> </h4><p>Returns the only child in <code>children</code>. Throws otherwise.</p><h4><code>React.Children.toArray</code> </h4><p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p>\n<pre><code>React.Children.toArray(children)\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children
React.Children.count	A										<section class="prog__container"><p>Returns the total number of components in <code>children</code>, equal to the number of times that a callback passed to <code>map</code> or <code>forEach</code> would be invoked.</p><h4><code>React.Children.only</code> </h4><p>Returns the only child in <code>children</code>. Throws otherwise.</p><h4><code>React.Children.toArray</code> </h4><p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p>\n<pre><code>React.Children.toArray(children)\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.count
React.Children.forEach	A										<section class="prog__container"><p>Like React.Children.map() but does not return an array.</p><h4><code>React.Children.count</code> </h4><p>Returns the total number of components in <code>children</code>, equal to the number of times that a callback passed to <code>map</code> or <code>forEach</code> would be invoked.</p><h4><code>React.Children.only</code> </h4><p>Returns the only child in <code>children</code>. Throws otherwise.</p><h4><code>React.Children.toArray</code> </h4><p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p>\n<pre><code>React.Children.toArray(children)\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.foreach
React.Children.map	A										<section class="prog__container"><p>Invokes a function on every immediate child contained within <code>children</code> with <code>this</code> set to <code>thisArg</code>. If <code>children</code> is a keyed fragment or array it will be traversed: the function will never be passed the container objects. If children is <code>null</code> or <code>undefined</code>, returns <code>null</code> or <code>undefined</code> rather than an array.</p><h4><code>React.Children.forEach</code> </h4><p>Like React.Children.map() but does not return an array.</p><h4><code>React.Children.count</code> </h4><p>Returns the total number of components in <code>children</code>, equal to the number of times that a callback passed to <code>map</code> or <code>forEach</code> would be invoked.</p><h4><code>React.Children.only</code> </h4><p>Returns the only child in <code>children</code>. Throws otherwise.</p><h4><code>React.Children.toArray</code> </h4><p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p>\n<pre><code>React.Children.toArray(children)\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.map
React.Children.only	A										<section class="prog__container"><p>Returns the only child in <code>children</code>. Throws otherwise.</p><h4><code>React.Children.toArray</code> </h4><p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p>\n<pre><code>React.Children.toArray(children)\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.only
React.Children.toArray	A										<section class="prog__container"><p>Returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>this.props.children</code> before passing it down.</p>\n<pre><code>React.Children.toArray(children)\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.children.toarray
React.Component	A										<section class="prog__container"><p><code>React.Component</code> is the base class for React components when they are defined using ES6 classes.</p><p>See the React.Component API Reference for a list of methods and properties related to the base <code>React.Component</code> class.</p>\n<pre><code>class Greeting extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.component
React.PropTypes	A										<section class="prog__container"><p><code>React.PropTypes</code> exports a range of validators that can be used with a component's <code>propTypes</code> object to validate props being passed to your components.</p><p>For more information about <code>PropTypes</code>, see Typechecking with PropTypes.</p><h4><code>React.PropTypes.array</code> </h4><p>Validates that a prop is a JavaScript array primitive.</p><h4><code>React.PropTypes.bool</code> </h4><p>Validates that a prop is a JavaScript bool primitive.</p><h4><code>React.PropTypes.func</code> </h4><p>Validates that a prop is a JavaScript function.</p><h4><code>React.PropTypes.number</code> </h4><p>Validates that a prop is a JavaScript number primitive.</p><h4><code>React.PropTypes.object</code> </h4><p>Validates that a prop is a JavaScript object.</p><h4><code>React.PropTypes.string</code> </h4><p>Validates that a prop is a JavaScript string primitive.</p><h4><code>React.PropTypes.symbol</code> </h4><p>Validates that a prop is a JavaScript symbol.</p><h4><code>React.PropTypes.node</code> </h4><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p><h4><code>React.PropTypes.element</code> </h4><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes
React.PropTypes.any	A										<section class="prog__container"><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.any
React.PropTypes.array	A										<section class="prog__container"><p>Validates that a prop is a JavaScript array primitive.</p><h4><code>React.PropTypes.bool</code> </h4><p>Validates that a prop is a JavaScript bool primitive.</p><h4><code>React.PropTypes.func</code> </h4><p>Validates that a prop is a JavaScript function.</p><h4><code>React.PropTypes.number</code> </h4><p>Validates that a prop is a JavaScript number primitive.</p><h4><code>React.PropTypes.object</code> </h4><p>Validates that a prop is a JavaScript object.</p><h4><code>React.PropTypes.string</code> </h4><p>Validates that a prop is a JavaScript string primitive.</p><h4><code>React.PropTypes.symbol</code> </h4><p>Validates that a prop is a JavaScript symbol.</p><h4><code>React.PropTypes.node</code> </h4><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p><h4><code>React.PropTypes.element</code> </h4><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.array
React.PropTypes.arrayOf()	A										<section class="prog__container"><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.arrayof
React.PropTypes.bool	A										<section class="prog__container"><p>Validates that a prop is a JavaScript bool primitive.</p><h4><code>React.PropTypes.func</code> </h4><p>Validates that a prop is a JavaScript function.</p><h4><code>React.PropTypes.number</code> </h4><p>Validates that a prop is a JavaScript number primitive.</p><h4><code>React.PropTypes.object</code> </h4><p>Validates that a prop is a JavaScript object.</p><h4><code>React.PropTypes.string</code> </h4><p>Validates that a prop is a JavaScript string primitive.</p><h4><code>React.PropTypes.symbol</code> </h4><p>Validates that a prop is a JavaScript symbol.</p><h4><code>React.PropTypes.node</code> </h4><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p><h4><code>React.PropTypes.element</code> </h4><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.bool
React.PropTypes.element	A										<section class="prog__container"><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.element
React.PropTypes.func	A										<section class="prog__container"><p>Validates that a prop is a JavaScript function.</p><h4><code>React.PropTypes.number</code> </h4><p>Validates that a prop is a JavaScript number primitive.</p><h4><code>React.PropTypes.object</code> </h4><p>Validates that a prop is a JavaScript object.</p><h4><code>React.PropTypes.string</code> </h4><p>Validates that a prop is a JavaScript string primitive.</p><h4><code>React.PropTypes.symbol</code> </h4><p>Validates that a prop is a JavaScript symbol.</p><h4><code>React.PropTypes.node</code> </h4><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p><h4><code>React.PropTypes.element</code> </h4><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.func
React.PropTypes.instanceOf()	A										<section class="prog__container"><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.instanceof
React.PropTypes.node	A										<section class="prog__container"><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p><h4><code>React.PropTypes.element</code> </h4><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.node
React.PropTypes.number	A										<section class="prog__container"><p>Validates that a prop is a JavaScript number primitive.</p><h4><code>React.PropTypes.object</code> </h4><p>Validates that a prop is a JavaScript object.</p><h4><code>React.PropTypes.string</code> </h4><p>Validates that a prop is a JavaScript string primitive.</p><h4><code>React.PropTypes.symbol</code> </h4><p>Validates that a prop is a JavaScript symbol.</p><h4><code>React.PropTypes.node</code> </h4><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p><h4><code>React.PropTypes.element</code> </h4><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.number
React.PropTypes.object	A										<section class="prog__container"><p>Validates that a prop is a JavaScript object.</p><h4><code>React.PropTypes.string</code> </h4><p>Validates that a prop is a JavaScript string primitive.</p><h4><code>React.PropTypes.symbol</code> </h4><p>Validates that a prop is a JavaScript symbol.</p><h4><code>React.PropTypes.node</code> </h4><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p><h4><code>React.PropTypes.element</code> </h4><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.object
React.PropTypes.objectOf()	A										<section class="prog__container"><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.objectof
React.PropTypes.oneOf()	A										<section class="prog__container"><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.oneof
React.PropTypes.oneOfType()	A										<section class="prog__container"><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.oneoftype
React.PropTypes.shape()	A										<section class="prog__container"><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.shape
React.PropTypes.string	A										<section class="prog__container"><p>Validates that a prop is a JavaScript string primitive.</p><h4><code>React.PropTypes.symbol</code> </h4><p>Validates that a prop is a JavaScript symbol.</p><h4><code>React.PropTypes.node</code> </h4><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p><h4><code>React.PropTypes.element</code> </h4><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.string
React.PropTypes.symbol	A										<section class="prog__container"><p>Validates that a prop is a JavaScript symbol.</p><h4><code>React.PropTypes.node</code> </h4><p>Validates that a prop is anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.</p><h4><code>React.PropTypes.element</code> </h4><p>Validates that a prop is a React element.</p><h4><code>React.PropTypes.instanceOf()</code> </h4><p>Validates that a prop is an instance of a class. This uses JavaScript's <code>instanceof</code> operator.</p><h4><code>React.PropTypes.oneOf()</code> </h4><p>Validates that a prop is limited to specific values by treating it as an enum.</p><h4><code>React.PropTypes.oneOfType()</code> </h4><p>Validates that a prop is an object that could be one of many types.</p><h4><code>React.PropTypes.arrayOf()</code> </h4><p>Validates that a prop is an an array of a certain type.</p><h4><code>React.PropTypes.objectOf()</code> </h4><p>Validates that a prop is an object with property values of a certain type.</p><h4><code>React.PropTypes.shape()</code> </h4><p>Validates that a prop is an object taking on a particular shape.</p><h4><code>React.PropTypes.any</code> </h4><p>Validates that a prop has a value of any data type. Usually followed by <code>isRequired</code>.</p><h3><code>isRequired</code> </h3><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.proptypes.symbol
React.PureComponent	A										<section class="prog__container"><p><code>React.PureComponent</code> is exactly like React.Component but implements shouldComponentUpdate() with a shallow prop and state comparison.</p><p>If your React component's <code>render()</code> function renders the same result given the same props and state, you can use <code>React.PureComponent</code> for a performance boost in some cases.</p>\n<pre><code>\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.purecomponent
React.addons	A										<section class="prog__container"><p><code>React.addons</code> exports a range of add-ons when using react-with-addons.js.</p>\n<pre><code>React.addons\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#react.addons
Selection Events	A										<section class="prog__container"><p>Event names:</p>\n<pre><code>onSelect\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#selection-events
Simulate	A										<section class="prog__container"><p>Simulate an event dispatch on a DOM node with optional <code>eventData</code> event data.</p><p><code>Simulate</code> has a method for every event that React understands.</p><p><strong>Clicking an element</strong></p><p><strong>Changing the value of an input field and then pressing ENTER.</strong></p>\n<pre><code>// <input ref="input" />\nconst node = this.refs.input;\nnode.value = 'giraffe';\nReactTestUtils.Simulate.change(node);\nReactTestUtils.Simulate.keyDown(node, {key: "Enter", keyCode: 13, which: 13});\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#simulate
Touch Events	A										<section class="prog__container"><p>Event names:</p><p>Properties:</p>\n<pre><code>boolean altKey\nDOMTouchList changedTouches\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nboolean shiftKey\nDOMTouchList targetTouches\nDOMTouchList touches\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#touch-events
Transition Events	A										<section class="prog__container"><p>Event names:</p><p>Properties:</p>\n<pre><code>string propertyName\nstring pseudoElement\nfloat elapsedTime\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#transition-events
UI Events	A										<section class="prog__container"><p>Event names:</p><p>Properties:</p>\n<pre><code>number detail\nDOMAbstractView view\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#ui-events
Wheel Events	A										<section class="prog__container"><p>Event names:</p><p>Properties:</p>\n<pre><code>number deltaMode\nnumber deltaX\nnumber deltaY\nnumber deltaZ\n</code></pre></section>	https://facebook.github.io/react/docs/events.html#wheel-events
cloneElement()	A										<section class="prog__container"><p>Clone and return a new React element using <code>element</code> as the starting point. The resulting element will have the original element's props with the new props merged in shallowly. New children will replace existing children. <code>key</code> and <code>ref</code> from the original element will be preserved.</p><p><code>React.cloneElement()</code> is almost equivalent to:</p><p>However, it also preserves <code>ref</code>s. This means that if you get a child with a <code>ref</code> on it, you won't accidentally steal it from your ancestor. You will get the same <code>ref</code> attached to your new element.</p><p>This API was introduced as a replacement of the deprecated <code>React.addons.cloneWithProps()</code>.</p>\n<pre><code><element.type {...element.props} {...props}>{children}</element.type>\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#cloneelement
componentDidAppear()	A										<section class="prog__container"><p>This is called after the <code>callback</code> function that was passed to <code>componentWillAppear</code> is called.</p>\n<pre><code>componentDidAppear()\n</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentdidappear
componentDidEnter()	A										<section class="prog__container"><p>This is called after the <code>callback</code> function that was passed to componentWillEnter() is called.</p>\n<pre><code>componentDidEnter()\n</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentdidenter
componentDidLeave()	A										<section class="prog__container"><p>This is called when the <code>willLeave</code> <code>callback</code> is called (at the same time as <code>componentWillUnmount()</code>).</p>\n<pre><code>componentDidLeave()\n</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentdidleave
componentDidMount()	A										<section class="prog__container"><p><code>componentDidMount()</code> is invoked immediately after a component is mounted. Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request. Setting state in this method will trigger a re-rendering.</p>\n<pre><code>componentDidMount()\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentdidmount
componentDidUpdate()	A										<section class="prog__container"><p><code>componentDidUpdate()</code> is invoked immediately after updating occurs. This method is not called for the initial render.</p><p>Use this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).</p>\n<pre><code>componentDidUpdate(prevProps, prevState)\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentdidupdate
componentWillAppear()	A										<section class="prog__container"><p>This is called at the same time as <code>componentDidMount()</code> for components that are initially mounted in a <code>TransitionGroup</code>. It will block other animations from occurring until <code>callback</code> is called. It is only called on the initial render of a <code>TransitionGroup</code>.</p>\n<pre><code>componentWillAppear(callback)\n</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentwillappear
componentWillEnter()	A										<section class="prog__container"><p>This is called at the same time as <code>componentDidMount()</code> for components added to an existing <code>TransitionGroup</code>. It will block other animations from occurring until <code>callback</code> is called. It will not be called on the initial render of a <code>TransitionGroup</code>.</p>\n<pre><code>componentWillEnter(callback)\n</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentwillenter
componentWillLeave()	A										<section class="prog__container"><p>This is called when the child has been removed from the <code>ReactTransitionGroup</code>. Though the child has been removed, <code>ReactTransitionGroup</code> will keep it in the DOM until <code>callback</code> is called.</p>\n<pre><code>componentWillLeave(callback)\n</code></pre></section>	https://facebook.github.io/react/docs/animation.html#componentwillleave
componentWillMount()	A										<section class="prog__container"><p><code>componentWillMount()</code> is invoked immediately before mounting occurs. It is called before <code>render()</code>, therefore setting state in this method will not trigger a re-rendering. Avoid introducing any side-effects or subscriptions in this method.</p><p>This is the only lifecycle hook called on server rendering. Generally, we recommend using the <code>constructor()</code> instead.</p>\n<pre><code>componentWillMount()\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentwillmount
componentWillReceiveProps()	A										<section class="prog__container"><p><code>componentWillReceiveProps()</code> is invoked before a mounted component receives new props. If you need to update the state in response to prop changes (for example, to reset it), you may compare <code>this.props</code> and <code>nextProps</code> and perform state transitions using <code>this.setState()</code> in this method.</p><p>Note that React may call this method even if the props have not changed, so make sure to compare the current and next values if you only want to handle changes. This may occur when the parent component causes your component to re-render.</p><p>React doesn't call <code>componentWillReceiveProps</code> with initial props during mounting. It only calls this method if some of component's props may update. Calling <code>this.setState</code> generally doesn't trigger <code>componentWillReceiveProps</code>.</p>\n<pre><code>componentWillReceiveProps(nextProps)\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentwillreceiveprops
componentWillUnmount()	A										<section class="prog__container"><p><code>componentWillUnmount()</code> is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any DOM elements that were created in <code>componentDidMount</code></p>\n<pre><code>componentWillUnmount()\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentwillunmount
componentWillUpdate()	A										<section class="prog__container"><p><code>componentWillUpdate()</code> is invoked immediately before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.</p><p>Note that you cannot call <code>this.setState()</code> here. If you need to update state in response to a prop change, use <code>componentWillReceiveProps()</code> instead.</p>\n<pre><code>componentWillUpdate(nextProps, nextState)\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#componentwillupdate
constructor()	A										<section class="prog__container"><p>The constructor for a React component is called before it is mounted. When implementing the constructor for a <code>React.Component</code> subclass, you should call <code>super(props)</code> before any other statement. Otherwise, <code>this.props</code> will be undefined in the constructor, which can lead to bugs.</p><p>The constructor is the right place to initialize state. If you don't initialize state and you don't bind methods, you don't need to implement a constructor for your React component.</p><p>It's okay to initialize state based on props if you know what you're doing. Here's an example of a valid <code>React.Component</code> subclass constructor:</p><p>Beware of this pattern, as it effectively "forks" the props and can lead to bugs. Instead of syncing props to state, you often want to lift the state up.</p><p>If you "fork" props by using them for state, you might also want to implement componentWillReceiveProps(nextProps) to keep the state up-to-date with them. But lifting state up is often easier and less bug-prone.</p>\n<pre><code>constructor(props) {\n  super(props);\n  this.state = {\n    color: props.initialColor\n  };\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#constructor
createClass()	A										<section class="prog__container"><p>If you don't use ES6 yet, you may use the <code>React.createClass()</code> helper instead to create a component class.</p><p>See Using React without ES6 for more information.</p>\n<pre><code>var Greeting = React.createClass({\n  render: function() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n});\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#createclass
createElement()	A										<section class="prog__container"><p>Create and return a new React element of the given type. The type argument can be either a tag name string (such as <code>'div'</code> or <code>'span'</code>), or a React component type (a class or a function).</p><p>Convenience wrappers around <code>React.createElement()</code> for DOM components are provided by <code>React.DOM</code>. For example, <code>React.DOM.a(...)</code> is a convenience wrapper for <code>React.createElement('a', ...)</code>. They are considered legacy, and we encourage you to either use JSX or use <code>React.createElement()</code> directly instead.</p><p>Code written with JSX will be converted to use <code>React.createElement()</code>. You will not typically invoke <code>React.createElement()</code> directly if you are using JSX. See React Without JSX to learn more.</p>\n<pre><code>React.createElement(\n  type,\n  [props],\n  [...children]\n)\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#createelement
createFactory()	A										<section class="prog__container"><p>Return a function that produces React elements of a given type. Like React.createElement(), the type argument can be either a tag name string (such as <code>'div'</code> or <code>'span'</code>), or a React component type (a class or a function).</p><p>This helper is considered legacy, and we encourage you to either use JSX or use <code>React.createElement()</code> directly instead.</p><p>You will not typically invoke <code>React.createFactory()</code> directly if you are using JSX. See React Without JSX to learn more.</p>\n<pre><code>React.createFactory(type)\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#createfactory
createRenderer()	A										<section class="prog__container"><p>Call this in your tests to create a shallow renderer.</p>\n<pre><code>createRenderer()\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#createrenderer
defaultProps	A										<section class="prog__container"><p><code>defaultProps</code> can be defined as a property on the component class itself, to set the default props for the class. This is used for undefined props, but not for null props. For example:</p><p>If <code>props.color</code> is not provided, it will be set by default to <code>'blue'</code>:</p><p>If <code>props.color</code> is set to null, it will remain null:</p>\n<pre><code>render() {\n    return <CustomButton color={null} /> ; // props.color will remain null\n  }\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#defaultprops
displayName	A										<section class="prog__container"><p>The <code>displayName</code> string is used in debugging messages. JSX sets this value automatically; see JSX in Depth.</p>\n<pre><code>\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#displayname
findAllInRenderedTree()	A										<section class="prog__container"><p>Traverse all components in <code>tree</code> and accumulate all components where <code>test(component)</code> is <code>true</code>. This is not that useful on its own, but it's used as a primitive for other test utils.</p>\n<pre><code>findAllInRenderedTree(\n  tree,\n  test\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#findallinrenderedtree
findDOMNode()	A										<section class="prog__container"><p>If this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements. <strong>In most cases, you can attach a ref to the DOM node and avoid using <code>findDOMNode</code> at all.</strong> When <code>render</code> returns <code>null</code> or <code>false</code>, <code>findDOMNode</code> returns <code>null</code>.</p>\n<pre><code>ReactDOM.findDOMNode(component)\n</code></pre></section>	https://facebook.github.io/react/docs/react-dom.html#finddomnode
findRenderedComponentWithType()	A										<section class="prog__container"><p>Same as scryRenderedComponentsWithType() but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one.</p>\n<pre><code>findRenderedComponentWithType(\n  tree,\n  componentClass\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#findrenderedcomponentwithtype
findRenderedDOMComponentWithClass()	A										<section class="prog__container"><p>Like scryRenderedDOMComponentsWithClass() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</p>\n<pre><code>findRenderedDOMComponentWithClass(\n  tree,\n  className\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#findrendereddomcomponentwithclass
findRenderedDOMComponentWithTag()	A										<section class="prog__container"><p>Like scryRenderedDOMComponentsWithTag() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.</p>\n<pre><code>findRenderedDOMComponentWithTag(\n  tree,\n  tagName\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#findrendereddomcomponentwithtag
forceUpdate()	A										<section class="prog__container"><p>By default, when your component's state or props change, your component will re-render. If your <code>render()</code> method depends on some other data, you can tell React that the component needs re-rendering by calling <code>forceUpdate()</code>.</p><p>Calling <code>forceUpdate()</code> will cause <code>render()</code> to be called on the component, skipping <code>shouldComponentUpdate()</code>. This will trigger the normal lifecycle methods for child components, including the <code>shouldComponentUpdate()</code> method of each child. React will still only update the DOM if the markup changes.</p><p>Normally you should try to avoid all uses of <code>forceUpdate()</code> and only read from <code>this.props</code> and <code>this.state</code> in <code>render()</code>.</p>\n<pre><code>component.forceUpdate(callback)\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#forceupdate
getLastMeasurements()	A										<section class="prog__container"><p>Get the opaque data structure describing measurements from the last start-stop session. You can save it and pass it to the other print methods in Perf to analyze past measurements.</p>\n<pre><code>Perf.getLastMeasurements()\n</code></pre></section>	https://facebook.github.io/react/docs/perf.html#getlastmeasurements
isCompositeComponent()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>instance</code> is a user-defined component, such as a class or a function.</p>\n<pre><code>isCompositeComponent(instance)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#iscompositecomponent
isCompositeComponentWithType()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>instance</code> is a component whose type is of a React <code>componentClass</code>.</p>\n<pre><code>isCompositeComponentWithType(\n  instance,\n  componentClass\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#iscompositecomponentwithtype
isDOMComponent()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>instance</code> is a DOM component (such as a <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code>).</p>\n<pre><code>isDOMComponent(instance)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#isdomcomponent
isElement()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>element</code> is any React element.</p>\n<pre><code>isElement(element)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#iselement
isElementOfType()	A										<section class="prog__container"><p>Returns <code>true</code> if <code>element</code> is a React element whose type is of a React <code>componentClass</code>.</p>\n<pre><code>isElementOfType(\n  element,\n  componentClass\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#iselementoftype
isRequired	A										<section class="prog__container"><p>You can chain any of the above validators with <code>isRequired</code> to make sure a warning is shown if the prop is not provided.</p>\n<pre><code>MyComponent.propTypes = {\n  requiredFunc: React.PropTypes.func.isRequired,\n}\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#isrequired
isValidElement()	A										<section class="prog__container"><p>Verifies the object is a React element. Returns <code>true</code> or <code>false</code>.</p>\n<pre><code>React.isValidElement(object)\n</code></pre></section>	https://facebook.github.io/react/docs/react-api.html#isvalidelement
mockComponent()	A										<section class="prog__container"><p>Pass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple <code>&lt;div&gt;</code> (or other tag if <code>mockTagName</code> is provided) containing any provided children.</p>\n<pre><code>mockComponent(\n  componentClass,\n  [mockTagName]\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#mockcomponent
printDOM()	A										<section class="prog__container"><p>This method has been renamed to printOperations(). Currently <code>printDOM()</code> still exists as an alias but it prints a deprecation warning and will eventually be removed.</p>\n<pre><code>Perf.printDOM(measurements)\n</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printdom
printExclusive()	A										<section class="prog__container"><p>"Exclusive" times don't include the times taken to mount the components: processing props, calling <code>componentWillMount</code> and <code>componentDidMount</code>, etc.</p><p><img alt="" src="/react/img/docs/perf-exclusive.png"/></p>\n<pre><code>Perf.printExclusive(measurements)\n</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printexclusive
printInclusive()	A										<section class="prog__container"><p>Prints the overall time taken. If no argument's passed, defaults to all the measurements from the last recording. This prints a nicely formatted table in the console, like so:</p><p><img alt="" src="/react/img/docs/perf-inclusive.png"/></p>\n<pre><code>Perf.printInclusive(measurements)\n</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printinclusive
printOperations()	A										<section class="prog__container"><p>Prints the underlying DOM manipulations, e.g. "set innerHTML" and "remove".</p><p><img alt="" src="/react/img/docs/perf-dom.png"/></p>\n<pre><code>Perf.printOperations(measurements)\n</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printoperations
printWasted()	A										<section class="prog__container"><p><strong>The most useful part of the profiler</strong>.</p><p>"Wasted" time is spent on components that didn't actually render anything, e.g. the render stayed the same, so the DOM wasn't touched.</p><p><img alt="" src="/react/img/docs/perf-wasted.png"/></p>\n<pre><code>Perf.printWasted(measurements)\n</code></pre></section>	https://facebook.github.io/react/docs/perf.html#printwasted
propTypes	A										<section class="prog__container"><p><code>propTypes</code> can be defined as a property on the component class itself, to define what types the props should be. It should be a map from prop names to types as defined in React.PropTypes. In development mode, when an invalid value is provided for a prop, a warning will be shown in the JavaScript console. In production mode, <code>propTypes</code> checks are skipped for efficiency.</p><p>For example, this code ensures that the <code>color</code> prop is a string:</p><p>We recommend using Flow when possible, to get compile-time typechecking instead of runtime typechecking. Flow has built-in support for React so it's easy to run static analysis on a React app.</p>\n<pre><code>class CustomButton extends React.Component {\n  // ...\n}\n\nCustomButton.propTypes = {\n  color: React.PropTypes.string\n};\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#proptypes
props	A										<section class="prog__container"><p><code>this.props</code> contains the props that were defined by the caller of this component. See Components and Props for an introduction to props.</p><p>In particular, <code>this.props.children</code> is a special prop, typically defined by the child tags in the JSX expression rather than in the tag itself.</p><h3><code>state</code> </h3><p>The state contains data specific to this component that may change over time. The state is user-defined, and it should be a plain JavaScript object.</p><p>If you don't use it in <code>render()</code>, it shouldn't be on the state. For example, you can put timer IDs directly on the instance.</p><p>See State and Lifecycle for more information about the state.</p><p>Never mutate <code>this.state</code> directly, as calling <code>setState()</code> afterwards may replace the mutation you made. Treat <code>this.state</code> as if it were immutable.</p>\n<pre><code>\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#props
render()	A										<section class="prog__container"><p>The <code>render()</code> method is required.</p><p>When called, it should examine <code>this.props</code> and <code>this.state</code> and return a single React element. This element can be either a representation of a native DOM component, such as <code>&lt;div /&gt;</code>, or another composite component that you've defined yourself.</p><p>You can also return <code>null</code> or <code>false</code> to indicate that you don't want anything rendered. When returning <code>null</code> or <code>false</code>, <code>ReactDOM.findDOMNode(this)</code> will return <code>null</code>.</p><p>The <code>render()</code> function should be pure, meaning that it does not modify component state, it returns the same result each time it's invoked, and it does not directly interact with the browser. If you need to interact with the browser, perform your work in <code>componentDidMount()</code> or the other lifecycle methods instead. Keeping <code>render()</code> pure makes components easier to think about.</p>\n<pre><code>render()\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#render
renderIntoDocument()	A										<section class="prog__container"><p>Render a React element into a detached DOM node in the document. <strong>This function requires a DOM.</strong></p>\n<pre><code>renderIntoDocument(element)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#renderintodocument
renderToStaticMarkup()	A										<section class="prog__container"><p>Similar to renderToString, except this doesn't create extra DOM attributes such as <code>data-reactid</code>, that React uses internally. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save lots of bytes.</p>\n<pre><code>ReactDOMServer.renderToStaticMarkup(element)\n</code></pre></section>	https://facebook.github.io/react/docs/react-dom-server.html#rendertostaticmarkup
renderToString()	A										<section class="prog__container"><p>Render a React element to its initial HTML. This should only be used on the server. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.</p><p>If you call ReactDOM.render() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.</p>\n<pre><code>ReactDOMServer.renderToString(element)\n</code></pre></section>	https://facebook.github.io/react/docs/react-dom-server.html#rendertostring
scryRenderedComponentsWithType()	A										<section class="prog__container"><p>Finds all instances of components with type equal to <code>componentClass</code>.</p>\n<pre><code>scryRenderedComponentsWithType(\n  tree,\n  componentClass\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#scryrenderedcomponentswithtype
scryRenderedDOMComponentsWithClass()	A										<section class="prog__container"><p>Finds all DOM elements of components in the rendered tree that are DOM components with the class name matching <code>className</code>.</p>\n<pre><code>scryRenderedDOMComponentsWithClass(\n  tree,\n  className\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#scryrendereddomcomponentswithclass
scryRenderedDOMComponentsWithTag()	A										<section class="prog__container"><p>Finds all DOM elements of components in the rendered tree that are DOM components with the tag name matching <code>tagName</code>.</p>\n<pre><code>scryRenderedDOMComponentsWithTag(\n  tree,\n  tagName\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#scryrendereddomcomponentswithtag
setState()	A										<section class="prog__container"><p>Performs a shallow merge of nextState into current state. This is the primary method you use to trigger UI updates from event handlers and server request callbacks.</p><p>The first argument can be an object (containing zero or more keys to update) or a function (of state and props) that returns an object containing keys to update.</p><p>Here is the simple object usage:</p><p>It's also possible to pass a function with the signature <code>function(state, props) =&gt; newState</code>. This enqueues an atomic update that consults the previous value of state and props before setting any values. For instance, suppose we wanted to increment a value in state by <code>props.step</code>:</p><p>The second parameter is an optional callback function that will be executed once <code>setState</code> is completed and the component is re-rendered. Generally we recommend using <code>componentDidUpdate()</code> for such logic instead.</p><p><code>setState()</code> does not immediately mutate <code>this.state</code> but creates a pending state transition. Accessing <code>this.state</code> after calling this method can potentially return the existing value.</p><p>There is no guarantee of synchronous operation of calls to <code>setState</code> and calls may be batched for performance gains.</p><p><code>setState()</code> will always lead to a re-render unless <code>shouldComponentUpdate()</code> returns <code>false</code>. If mutable objects are being used and conditional rendering logic cannot be implemented in <code>shouldComponentUpdate()</code>, calling <code>setState()</code> only when the new state differs from the previous state will avoid unnecessary re-renders.</p>\n<pre><code>this.setState((prevState, props) => {\n  return {myInteger: prevState.myInteger + props.step};\n});\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#setstate
shallowRenderer.getRenderOutput()	A										<section class="prog__container"><p>After shallowRenderer.render() has been called, returns shallowly rendered output.</p>\n<pre><code>shallowRenderer.getRenderOutput()\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#shallowrenderer.getrenderoutput
shallowRenderer.render()	A										<section class="prog__container"><p>Similar to ReactDOM.render but it doesn't require DOM and only renders a single level deep. See Shallow Rendering.</p>\n<pre><code>shallowRenderer.render(\n  element\n)\n</code></pre></section>	https://facebook.github.io/react/docs/test-utils.html#shallowrenderer.render
shouldComponentUpdate()	A										<section class="prog__container"><p>Use <code>shouldComponentUpdate()</code> to let React know if a component's output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.</p><p><code>shouldComponentUpdate()</code> is invoked before rendering when new props or state are being received. Defaults to <code>true</code>. This method is not called for the initial render or when <code>forceUpdate()</code> is used.</p><p>Returning <code>false</code> does not prevent child components from re-rendering when <em>their</em> state changes.</p><p>Currently, if <code>shouldComponentUpdate()</code> returns <code>false</code>, then componentWillUpdate(), render(), and componentDidUpdate() will not be invoked. Note that in the future React may treat <code>shouldComponentUpdate()</code> as a hint rather than a strict directive, and returning <code>false</code> may still result in a re-rendering of the component.</p><p>If you determine a specific component is slow after profiling, you may change it to inherit from React.PureComponent which implements <code>shouldComponentUpdate()</code> with a shallow prop and state comparison. If you are confident you want to write it by hand, you may compare <code>this.props</code> with <code>nextProps</code> and <code>this.state</code> with <code>nextState</code> and return <code>false</code> to tell React the update can be skipped.</p>\n<pre><code>shouldComponentUpdate(nextProps, nextState)\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#shouldcomponentupdate
start()	A										<section class="prog__container"><h3><code>stop()</code> </h3><p>Start/stop the measurement. The React operations in-between are recorded for analyses below. Operations that took an insignificant amount of time are ignored.</p><p>After stopping, you will need Perf.getLastMeasurements() to get the measurements.</p>\n<pre><code>Perf.start()\n// ...\nPerf.stop()\n</code></pre></section>	https://facebook.github.io/react/docs/perf.html#start
state	A										<section class="prog__container"><p>The state contains data specific to this component that may change over time. The state is user-defined, and it should be a plain JavaScript object.</p><p>If you don't use it in <code>render()</code>, it shouldn't be on the state. For example, you can put timer IDs directly on the instance.</p><p>See State and Lifecycle for more information about the state.</p><p>Never mutate <code>this.state</code> directly, as calling <code>setState()</code> afterwards may replace the mutation you made. Treat <code>this.state</code> as if it were immutable.</p>\n<pre><code>\n</code></pre></section>	https://facebook.github.io/react/docs/react-component.html#state
stop()	A										<section class="prog__container"><p>Start/stop the measurement. The React operations in-between are recorded for analyses below. Operations that took an insignificant amount of time are ignored.</p><p>After stopping, you will need Perf.getLastMeasurements() to get the measurements.</p>\n<pre><code>Perf.start()\n// ...\nPerf.stop()\n</code></pre></section>	https://facebook.github.io/react/docs/perf.html#stop
unmountComponentAtNode()	A										<section class="prog__container"><p>Remove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns <code>true</code> if a component was unmounted and <code>false</code> if there was no component to unmount.</p>\n<pre><code>ReactDOM.unmountComponentAtNode(container)\n</code></pre></section>	https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode
