Web APIs	A										When writing code for the Web with JavaScript, there are a great many APIs available. Below is a list of all the interfaces (that is, types of objects) that you may be able to use while developing your Web app or site.	https://developer.mozilla.org/en-US/docs/Web/API
AbstractWorker	A										The AbstractWorker interface of the Web Workers API abstracts properties and methods common to all kind of workers, being Worker or SharedWorker.	https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker
AbstractWorker.onerror	A										<pre><code>myWorker.onerror = function() { ... };</code></pre>The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker.	https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror
Ambient Light Events	A										The ambient light events are a handy way to make a web page or an application aware of any change in the light intensity. It allows them to react to such a change, for example by changing the color contrast of the User Interface (UI) or by changing the exposure necessary to take a picture.	https://developer.mozilla.org/en-US/docs/Web/API/Ambient_Light_Events
AnalyserNode	A										The AnalyserNode interface represents a node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode
AnalyserNode.fftSize	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nanalyser.fftSize = 2048;\n</code></pre>The fftSize property of the AnalyserNode interface is an unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain.	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize
AnalyserNode.frequencyBinCount	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nvar bufferLength = analyser.frequencyBinCount;\n</code></pre>The frequencyBinCount property of the AnalyserNode interface is an unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization.	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount
AnalyserNode.getByteFrequencyData()	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nvar dataArray = new Uint8Array(analyser.frequencyBinCount); // Uint8Array should be the same length as the frequencyBinCount \nanalyser.getByteFrequencyData(dataArray); // fill the Uint8Array with data returned from getByteFrequencyData() \n</code></pre>A Uint8Array.	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData
AnalyserNode.getByteTimeDomainData()	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nvar dataArray = new Uint8Array(analyser.fftSize); // Uint8Array should be the same length as the fftSize \nanalyser.getByteTimeDomainData(dataArray); // fill the Uint8Array with data returned from getByteTimeDomainData() \n</code></pre>A Uint8Array.	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData
AnalyserNode.getFloatFrequencyData()	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nvar myDataArray = new Float32Array(analyser.frequencyBinCount); // Float32Array should be the same length as the frequencyBinCount \nanalyser.getFloatFrequencyData(myDataArray); // fill the Float32Array with data returned from getFloatFrequencyData() \n</code></pre>A Float32Array.	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData
AnalyserNode.getFloatTimeDomainData()	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nvar dataArray = new Float32Array(analyser.fftSize); // Float32Array needs to be the same length as the fftSize \nanalyser.getFloatTimeDomainData(myDataArray); // fill the Float32Array with data returned from getFloatTimeDomainData() \n</code></pre>A Float32Array.	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData
AnalyserNode.maxDecibels	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nanalyser.maxDecibels = -10;\n</code></pre>The maxDecibels property of the AnalyserNode interface Is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values — basically, this specifies the maximum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData().	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels
AnalyserNode.minDecibels	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nanalyser.minDecibels = -90;\n</code></pre>The minDecibels property of the AnalyserNode interface Is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values — basically, this specifies the minimum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData().	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels
AnalyserNode.smoothingTimeConstant	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nanalyser.smoothingTimeConstant = 1;\n</code></pre>The smoothingTimeConstant property of the AnalyserNode interface is a double value representing the averaging constant with the last analysis frame. It's basically an average between the current buffer and the last buffer the AnalyserNode processed, and results in a much smoother set of value changes over time.	https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant
ANGLE_instanced_arrays	A										The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.	https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays
ANGLE_instanced_arrays.drawArraysInstancedANGLE()	A										<pre><code>void ext.drawArraysInstancedANGLE(mode, first, count, primcount);\n</code></pre>The ANGLE_instanced_arrays.drawArraysInstancedANGLE() method of the WebGL API renders primitives from array data like the gl.drawArrays() method. In addition, it can execute multiple instances of the range of elements.	https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/drawArraysInstancedANGLE
ANGLE_instanced_arrays.drawElementsInstancedANGLE()	A										<pre><code>void ext.drawElementsInstancedANGLE(mode, count, type, offset, primcount);\n</code></pre>The ANGLE_instanced_arrays.drawElementsInstancedANGLE() method of the WebGL API renders primitives from array data like the gl.drawElements() method. In addition, it can execute multiple instances of a set of elements.	https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/drawElementsInstancedANGLE
ANGLE_instanced_arrays.vertexAttribDivisorANGLE()	A										<pre><code>void ext.vertexAttribDivisorANGLE(index, divisor);\n</code></pre>The ANGLE_instanced_arrays.vertexAttribDivisorANGLE() method of the WebGL API modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with ext.drawArraysInstancedANGLE() and ext.drawElementsInstancedANGLE().	https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/vertexAttribDivisorANGLE
Animation	A										The Animation interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.	https://developer.mozilla.org/en-US/docs/Web/API/Animation
Animation.Animation()	A										<pre><code>var rabbitDownAnimation = new Animation(rabbitDownKeyframes, document.timeline);\n</code></pre>The Animation() constructor of the Web Animations API returns a new Animation object instance.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/Animation
Animation.cancel()	A										The Animation.cancel() method of the Animation interface clears all keyframeEffects caused by this animation and aborts its playback.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/cancel
Animation.currentTime	A										<pre><code>var currentTime = element.currentTime;\nelement.currentTime = someValue;</code></pre>The Animation.currentTime property of the Web Animations API returns and sets the current time value of the animation in milliseconds, whether running or paused.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/currentTime
Animation.effect	A										The Animation.effect property of the Web Animations API gets and sets the target effect of an animation. The target effect may be either a KeyframeEffect object or null.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/effect
Animation.finish()	A										<pre><code>animation.finish(); </code></pre>None.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/finish
Animation.finished	A										<pre><code>Promise.all(\n  elem.getAnimations().map( \n    function(animation) { \n      return animation.finished \n    }\n  )\n).then(\n  function() {\n    return elem.remove();\n  }\n);</code></pre>The Animation.finished read-only property of the Web Animations API allows you to return the finished state of the animation so that further code can be run after it has finished.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/finished
Animation.id	A										<pre><code>rabbitDownAnimation.effect.id = "rabbitGo";\n</code></pre>The Animation.id property of the Web Animations API returns or sets a string used to identify the animation.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/id
Animation.oncancel	A										<pre><code>animation.oncancel = animation.effect.target.remove();\n</code></pre>The Animation.oncancel property of the Web Animations API is the event handler for the cancel event.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/oncancel
Animation.onfinish	A										<pre><code>// Add an animation to the game's ending credits\nvar endingUI = document.getElementById("ending-ui");\nvar bringUI = endingUI.animate(keysFade, timingFade);\n\n// Pause said animation's credits\nbringUI.pause();\n\n// This function removes pointer events on the credits.\nhide(endingUI);\n\n// When the credits are later faded in, \n// we re-add the pointer events when they're done\nbringUI.onfinish = function() {\n&#160; endingUI.style.pointerEvents = 'auto';\n};\n\n</code></pre>The Animation.onfinish property of the Web Animations API is the event handler for the finish event.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/onfinish
Animation.pause()	A										<pre><code>animation.pause(); \n</code></pre>The Animation.pause() method of the Animation interface suspends playback of the animation.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/pause
Animation.play()	A										<pre><code>animation.play(); \n</code></pre>None.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/play
Animation.playbackRate	A										<pre><code>// getting the playbackRate\nvar currentPlaybackRate = element.playbackRate;\n\n// setting playbackRate\nelement.playbackRate = 1;\n</code></pre>The Animation.playbackRate property of the Web Animations API returns or sets the playback rate of the animation.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/playbackRate
Animation.playState	A										<pre><code>// getting playState\nvar currentPlayState = anAnimationPlayer.playState;\n\n// setting playState\nanAnimationPlayer.playState = 'paused';\n</code></pre>The Animation.playState property of the Web Animations API returns and sets an enumerated value describing the playback state of an animation.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/playState
Animation.ready	A										<pre><code>animation.pause();\nanimation.ready.then(function() {\n  // Displays 'running'\n  alert(animation.playState);\n});\nanimation.play();\n</code></pre>The Animation.ready property of the Web Animations API returns the current ready Promise for this object. The object is replaced with a new Promise object every time the animation enters the pending play state as well as when the animation is canceled.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/ready
Animation.reverse()	A										<pre><code>animation.reverse(); \n</code></pre>None.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/reverse
Animation.startTime	A										<pre><code>var catRunning = document.getElementById ("withWAAPI").animate(keyframes, timing);\n\n/* A function that makes new cats. */\nfunction addCat(){\n&#160; var newCat = document.createElement("div");\n&#160; newCat.classList.add("cat");\n&#160; return newCat;\n}\n\n/* This is the function that adds a cat to the WAAPI column */\nfunction animateNewCatWithWAAPI() {\n\n&#160; // make a new cat\n&#160; var newCat = addCat();\n\n&#160; // animate said cat with the WAAPI's "animate" function\n&#160; var newAnimationPlayer = newCat.animate(keyframes, timing);\n\n&#160; // set the animation's start time to be the same as the original .cat#withWAAPI\n&#160; newAnimationPlayer.startTime = catRunning.startTime;\n\n&#160; // Add the cat to the pile.\n&#160; WAAPICats.appendChild(newCat);\n}\n</code></pre>The Animation.startTime property of the Animation interface returns or sets the scheduled time when an animation's playback should begin.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/startTime
Animation.timeline	A										<pre><code>animation.timeline = document.timeline;\n</code></pre>The Animation.timeline property of the Animation interface returns or sets the timeline associated with this animation.	https://developer.mozilla.org/en-US/docs/Web/API/Animation/timeline
AnimationEffectReadOnly	A										The AnimationEffectReadOnly interface of the Web Animations API defines current and future "Animation Effects" like KeyframeEffect, which can be passed to Animation.Animation objects for playing, and KeyframeEffectReadOnly (which is used by CSS Animations and Transitions).	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly
AnimationEffectReadOnly.getComputedTiming()	A										The getComputedTiming() method of the AnimationEffectReadOnly interface returns the calculated timing properties for this animation effect.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly/getComputedTiming
AnimationEffectReadOnly.timing	A										The AnimationEffectReadOnly.timing read-only attribute of the AnimationEffectReadOnly interface returns an AnimationEffectTimingReadOnly object containing the timing properties for the Animation Effect.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly/timing
AnimationEffectTiming	A										<pre><code>aliceChange.currentTime = aliceChange.effect.timing.duration / 2 ;\n</code></pre>The AnimationEffectTiming interface of the Web Animations API is comprised of timing properties. It is returned by the timing attribute of a KeyframeEffect.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTiming
Animation Effect Timing Properties	A										<pre><code>var timingProperties = {\n  delay: 1000,\n&#160; direction: "alternate",\n&#160; duration: 3000,\n&#160; easing: "ease-in",\n&#160; endDelay: 100, \n&#160; fill: "both",\n&#160; iterationStart: 1.5, \n&#160; iterations: Infinity\n}\n</code></pre>Element.animate(), KeyframeEffectReadOnly.KeyframeEffectReadOnly(), and KeyframeEffect.KeyframeEffect() all accept a dictionary object containing the following timing properties. These properties are all optional, although without setting a duration the animation will not play.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingProperties
Delay	A										<pre><code>// Randomizer function\nvar getRandomMsRange = function(min, max) {\n&#160; return Math.random() * (max - min) + min;\n}\n\n// Loop through each tear\ntears.forEach(function(el) { &#160;\n\n  // Animate each tear\n&#160; el.animate(\n&#160; &#160; tearsFalling,&#160;\n&#160; &#160; {\n&#160; &#160; &#160; delay: getRandomMsRange(-1000, 1000), // randomized for each tear\n&#160; &#160; &#160; duration: getRandomMsRange(2000, 6000), // randomized for each tear\n&#160; &#160; &#160; iterations: Infinity,\n&#160; &#160; &#160; easing: "cubic-bezier(0.6, 0.04, 0.98, 0.335)"\n&#160; &#160; });\n});</code></pre>The delay property of the Web Animations API represents the number of milliseconds to delay the start of the animation.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingProperties/delay
Direction	A										<pre><code>// Get Alice's arm, and wave it up and down\ndocument.getElementById("alice_arm").animate([ \n  { transform: 'rotate(10deg)' },&#160;\n  { transform: 'rotate(-40deg)' }\n], {\n  easing: 'steps(2, end)',\n  iterations: Infinity,\n  direction: 'alternate',\n  duration: 600\n});</code></pre>The direction property of the Web Animations API represents the direction of the animation's playback along its timeline and its behavior after completing each iteration.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingProperties/direction
Duration	A										<pre><code>// Randomizer function\nvar getRandomMsRange = function(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n// Loop through each tear\ntears.forEach(function(el) { \n\n  // Animate each tear\n  el.animate(\n    tearsFalling,&#160;\n    {\n       delay: getRandomMsRange(-1000, 1000), // randomized for each tear\n       duration: getRandomMsRange(2000, 6000), // randomized for each tear\n       iterations: Infinity,\n       easing: "cubic-bezier(0.6, 0.04, 0.98, 0.335)"\n    });\n});</code></pre>The duration property of the Web Animations API represents the duration in milliseconds to complete a single iteration of the animation.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingProperties/duration
Easing	A										<pre><code>// Define the key frames\nvar spriteFrames = [\n  { transform: 'translateY(0)' },\n  { transform: 'translateY(-100%)' } &#160;&#160;\n];\n\n// Get the element that represents Alice and the Red Queen\nvar redQueen_alice_sprite = document.getElementById('red-queen_and_alice_sprite');\n\n// Animate Alice and the Red Queen using steps()\nvar redQueen_alice = redQueen_alice_sprite.animate(\nspriteFrames, {\n  easing: 'steps(7, end)',\n  direction: "reverse",\n  duration: 600,\n  playbackRate: 1,\n  iterations: Infinity\n});</code></pre>The easing property of the Web Animations API represents the timing function used to scale the time to produce easing effects. Easing is the rate of the animation's change over time.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingProperties/easing
EndDelay	A										The endDelay property of the Web Animations API represents the number of milliseconds to delay after the end time of an animation. The end time of an animation effect is simply the sum of its delay, duration, and endDelay.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingProperties/endDelay
Fill	A										<pre><code>// Create a set of keyframes to slide the rabbit down the hole--and keep him down with 'fill'!\nvar rabbitDownKeyframes = new KeyframeEffect(\n  whiteRabbit,\n  [\n    { transform: 'translateY(0%)' },&#160;\n    { transform: 'translateY(100%)' }\n  ], {\n    duration: 3000,&#160;\n    fill: 'forwards'&#160;\n  }\n);\n\n// Set up the rabbit's animation to play on command by calling rabbitDownAnimation.play() later\nvar rabbitDownAnimation = new Animation(rabbitDownKeyframes, document.timeline);\n</code></pre>The fill property of the Web Animations API dictates how and when the animation's effects should be reflected by the element(s) visual state.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingProperties/fill
Iterations	A										<pre><code>// Get Alice's arm, and wave it up and down\ndocument.getElementById("alice_arm").animate([ \n  { transform: 'rotate(10deg)' },&#160;\n  { transform: 'rotate(-40deg)' }\n], {\n  easing: 'steps(2, end)',\n  iterations: Infinity,\n  direction: 'alternate',\n  duration: 600\n});</code></pre>The iterations property of the Web Animations API the number of times the animation should repeat. It defaults to 1, and can also take a value of Infinity to make it loop infinitely.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingProperties/iterations
IterationStart	A										The iterationStart property of the Web Animations API represents which repetition the animation begins at and its progress through it.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingProperties/iterationStart
AnimationEffectTimingReadOnly	A										The AnimationEffectTimingReadOnly interface of the Web Animations API is comprised of timing properties.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly
AnimationEffectTimingReadOnly.delay	A										<pre><code>bringUI.effect.timing.delay = 2000;\nbringUI.play();\n</code></pre>The delay property of the AnimationEffectTimingReadOnly object represents the number of milliseconds to delay the start of the animation.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/delay
AnimationEffectTimingReadOnly.direction	A										<pre><code>// Returns "reverse" because the sprite was created upside down!\nreturn redQueen_alice.effect.timing.direction;</code></pre>The direction property of the AnimationEffectTimingReadOnly dictionary object represents the direction of the animation's playback along its timeline and its behavior after completing each iteration.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/direction
AnimationEffectTimingReadOnly.duration	A										<pre><code>var sceneryTimingBackground = {\n  duration: 36000,\n  iterations: Infinity\n};\n\nvar sceneryTimingForeground = {\n  duration: 12000,\n  iterations: Infinity\n};\n\nvar background1 = document.getElementById('background1');\n\n// Animating the background\nvar background1Movement = background1.animate( sceneryFrames, sceneryTimingBackground );\n\n// Setting the background animation's start position based on its duration\nbackground1Movement.currentTime = background1Movement.effect.timing.duration / 2;\n</code></pre>The duration property of AnimationEffectTimingReadOnly represents the duration in milliseconds to complete a single iteration of the animation.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/duration
AnimationEffectTimingReadOnly.easing	A										<pre><code>// Returns "steps(7, end)"\nreturn redQueen_alice.effect.timing.easing;\n</code></pre>The easing property of the AnimationEffectTimingReadOnly object represents the timing function used to scale the time to produce easing effects. Easing is the rate of the animation's change over time.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/easing
AnimationEffectTimingReadOnly.endDelay	A										The endDelay property of AnimationEffectTimingReadOnly represents the number of milliseconds to delay after the end time of an animation. The end time of an animation effect is simply the sum of its delay, duration, and endDelay.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/endDelay
AnimationEffectTimingReadOnly.fill	A										<pre><code>var nommingCake = document.getElementById('eat-me_sprite').animate(\n [\n   { transform: 'translateY(0)' },\n   { transform: 'translateY(-80%)' } &#160;&#160;\n ], {\n   fill: 'forwards',\n   easing: 'steps(4, end)',\n   duration: aliceChange.effect.timing.duration / 2\n });\n nommingCake.pause();</code></pre>The fill property of AnimationEffectTimingReadOnly dictates how and when the animation's effects should be reflected by the element(s) visual state.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/fill
AnimationEffectTimingReadOnly.iterations	A										<pre><code>// Infinity\nreturn redQueen_alice.effect.timing.iterations;\n</code></pre>The iterations property of AnimationEffectTimingReadOnly represents the number of times the animation should repeat. It defaults to 1, and can also take a value of Infinity to make it loop infinitely.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/iterations
AnimationEffectTimingReadOnly.iterationStart	A										The iterationStart property of AnimationEffectTimingReadOnly represents which repetition the animation begins at and its progress through it.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/iterationStart
AnimationEvent	A										The AnimationEvent interface represents events providing information related to animations.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
AnimationEvent()	A										<pre><code>animationEvent = new AnimationEvent(type, {animationName: aPropertyName, \n                                           elapsedTime  : aFloat, \n                                           pseudoElement: aPseudoElementName});\n</code></pre>The AnimationEvent() constructor returns a newly created AnimationEvent, representing an event in relation with an animation.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/AnimationEvent
AnimationEvent.animationName	A										<pre><code>name = AnimationEvent.animationName</code></pre>The AnimationEvent.animationName read-only property is a DOMString containing the value of the animation-name CSS property associated with the transition.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/animationName
AnimationEvent.elapsedTime	A										<pre><code>time = AnimationEvent.elapsedTime</code></pre>The AnimationEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an "animationstart" event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing&#160; (-1 * delay).	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/elapsedTime
AnimationEvent.pseudoElement	A										<pre><code>name = AnimationEvent.pseudoElement</code></pre>The AnimationEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: ''.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/pseudoElement
AnimationPlaybackEvent	A										The AnimationPlaybackEvent interface of the Web Animations API represents animation events.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent
AnimationPlaybackEvent.AnimationPlaybackEvent()	A										The AnimationPlaybackEvent() constructor of the Web Animations API returns a new AnimationPlaybackEvent object instance.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent/AnimationPlaybackEvent
AnimationPlaybackEvent.currentTime	A										The currentTime read-only property of the AnimationPlaybackEvent interface represents the current time of the animation that generated the event at the moment the event is queued. This will be unresolved if the animation was idle at the time the event was generated.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent/currentTime
AnimationPlaybackEvent.timelineTime	A										The timelineTime read-only property of the AnimationPlaybackEvent interface represents the time value of the animation's timeline at the moment the event is queued. This will be unresolved if the animation was not associated with a timeline at the time the event was generated or if the associated timeline was inactive.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationPlaybackEvent/timelineTime
AnimationTimeline	A										The AnimationTimeline interface of the Web Animations API represents the timeline of animation. This interface exists to define timeline features (inherited by DocumentTimeline and future timeline objects) and is not itself accessed by developers.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline
AnimationTimeline.currentTime	A										The currentTime read only property of the AnimationTimeline interface returns the current time value for the associated timeline in milliseconds or null if the timeline is inactive.	https://developer.mozilla.org/en-US/docs/Web/API/AnimationTimeline/currentTime
Apps.mgmt	A										Provides support for controlling Open Web apps in a browser.	https://developer.mozilla.org/en-US/docs/Web/API/Apps/mgmt
ArrayBufferView	A										ArrayBufferView is a helper type representing any of the following JavaScript TypedArray types:	https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView
Attr	A										This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types.	https://developer.mozilla.org/en-US/docs/Web/API/Attr
Attr.localName	A										<pre><code>name = attribute.localName\n</code></pre>The Attr.localName read-only property returns the local part of the qualified name of an element.	https://developer.mozilla.org/en-US/docs/Web/API/Attr/localName
Attr.namespaceURI	A										<pre><code>namespace = attribute.namespaceURI</code></pre>The Attr.namespaceURI read-only property returns the namespace URI of the attribute, or null if the element is not in a namespace.	https://developer.mozilla.org/en-US/docs/Web/API/Attr/namespaceURI
Attr.prefix	A										<pre><code>string = attribute.prefix\n</code></pre>The Attr.prefix read-only property returns the namespace prefix of the specified attribute, or null if no prefix is specified.	https://developer.mozilla.org/en-US/docs/Web/API/Attr/prefix
AudioBuffer	A										Objects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the MediaElementAudioSourceNode are more suitable. The buffer contains data in the following format:  non-interleaved IEEE754 32-bit linear PCM with a nominal range between -1 and +1, that is, 32bits floating point buffer, with each samples between -1.0 and 1.0. If the AudioBuffer has multiple channels, they are stored in separate buffer.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer
AudioBuffer.copyFromChannel()	A										<pre><code>myArrayBuffer.copyFromChannel(destination,channelNumber,startInChannel);</code></pre>The copyFromChannel() method of the AudioBuffer interface copies the samples from the specified channel of the AudioBuffer to the destination array.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyFromChannel
AudioBuffer.copyToChannel()	A										<pre><code>myArrayBuffer.copyToChannel(source, channelNumber, startInChannel);</code></pre>The copyToChannel() method of the AudioBuffer interface copies the samples to the specified channel of the AudioBuffer, from the source array.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyToChannel
AudioBuffer.duration	A										<pre><code>var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\nmyArrayBuffer.duration;</code></pre>A double.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/duration
AudioBuffer.getChannelData()	A										<pre><code>var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\nvar nowBuffering = myArrayBuffer.getChannelData(channel);</code></pre>A Float32Array.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData
AudioBuffer.length	A										<pre><code>var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\nmyArrayBuffer.length;</code></pre>A float.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/length
AudioBuffer.numberOfChannels	A										<pre><code>var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\nmyArrayBuffer.numberOfChannels;</code></pre>An integer.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/numberOfChannels
AudioBuffer.sampleRate	A										<pre><code>var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\nmyArrayBuffer.sampleRate;</code></pre>A float.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/sampleRate
AudioBufferSourceNode	A										The AudioBufferSourceNode interface represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It is an AudioNode that acts as an audio source.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode
AudioBufferSourceNode.buffer	A										<pre><code>var source = audioCtx.createBufferSource();\n// from audioCtx.createBuffer, or audioCtx.decodeAudioData\nsource.buffer = myBuffer; \n</code></pre>If the buffer property is set to the value NULL, it defines a single channel of silence.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer
AudioBufferSourceNode.detune	A										<pre><code>var source = audioCtx.createBufferSource();\nsource.detune.value = 100; // value in cents</code></pre>The detune property of the AudioBufferSourceNode interface is an k-rate AudioParam representing detuning of oscillation in cents.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune
AudioBufferSourceNode.loop	A										<pre><code>var source = audioCtx.createBufferSource();\nsource.loop = true;\n</code></pre>The loop property's default value is false.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop
AudioBufferSourceNode.loopEnd	A										<pre><code>var source = audioCtx.createBufferSource();\nsource.loopEnd = 3;\n</code></pre>The loopEnd property's default value is 0.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd
AudioBufferSourceNode.loopStart	A										<pre><code>var source = audioCtx.createBufferSource();\nsource.loopStart = 3;\n</code></pre>The loopStart property's default value is 0.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart
AudioBufferSourceNode.onended	A										<pre><code>var source = audioCtx.createBufferSource();\nsource.onended = function() { ... };\n</code></pre>The onended event handler of the AudioBufferSourceNode contains the callback associated with the ended event: this allows you to run code in response to the audio track finishing playback.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/onended
AudioBufferSourceNode.playbackRate	A										<pre><code>var source = audioCtx.createBufferSource();\nsource.playbackRate.value = 1.25; // play 25% faster than normal speed (1)\n</code></pre>The default value is 1.0. When set to another value, the AudioBufferSourceNode resamples the audio before sending it to the output.	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate
AudioBufferSourceNode.start()	A										<pre><code>var source = audioCtx.createBufferSource();\nsource.start(audioCtx.currentTime + 1,3,10);\n</code></pre>The most simple example just starts the audio buffer playing from the beginning — you don't need to specify any parameters in this case:	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start
AudioBufferSourceNode.stop()	A										<pre><code>var source = audioCtx.createBufferSource();\nsource.stop(audioCtx.currentTime + 3);\n</code></pre>The most simple example just stops the audio buffer playing immediately — you don't need to specify any parameters in this case:	https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/stop
AudioContext	A										An AudioContext can be a target of events, therefore it implements the EventTarget interface.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext
AudioContext.close()	A										<pre><code>var audioCtx = new AudioContext();\naudioCtx.close().then(function() { ... });\n</code></pre>The close() method of the AudioContext Interface closes the audio context, releasing any system audio resources that it uses.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close
AudioContext.createAnalyser()	A										<pre><code>var audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();</code></pre>An AnalyserNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createAnalyser
AudioContext.createBiquadFilter()	A										<pre><code>var audioCtx = new AudioContext();\nvar biquadFilter = audioCtx.createBiquadFilter();</code></pre>A BiquadFilterNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBiquadFilter
AudioContext.createBuffer()	A										<pre><code>var audioCtx = new AudioContext();\nvar buffer = audioCtx.createBuffer(2, 22050, 44100);</code></pre>An AudioBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBuffer
AudioContext.createBufferSource()	A										<pre><code>var audioCtx = new AudioContext();\nvar source = audioCtx.createBufferSource();</code></pre>An AudioBufferSourceNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource
AudioContext.createChannelMerger()	A										<pre><code>var audioCtx = new AudioContext();\nvar merger = audioCtx.createChannelMerger(2);</code></pre>A ChannelMergerNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createChannelMerger
AudioContext.createChannelSplitter()	A										<pre><code>var audioCtx = new AudioContext();\nvar splitter = audioCtx.createChannelSplitter(2);</code></pre>A ChannelSplitterNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createChannelSplitter
AudioContext.createConvolver()	A										<pre><code>var audioCtx = new AudioContext();\nvar convolver = audioCtx.createConvolver();</code></pre>A ConvolverNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createConvolver
AudioContext.createDelay()	A										<pre><code>var audioCtx = new AudioContext();\nvar synthDelay = audioCtx.createDelay(5.0);</code></pre>A DelayNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createDelay
AudioContext.createDynamicsCompressor()	A										<pre><code>var audioCtx = new AudioContext();\nvar compressor = audioCtx.createDynamicsCompressor();</code></pre>Compression lowers the volume of the loudest parts of the signal and raises the volume of the softest parts. Overall, a louder, richer, and fuller sound can be achieved. It is especially important in games and musical applications where large numbers of individual sounds are played simultaneously, where you want to control the overall signal level and help avoid clipping (distorting) of the audio output.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createDynamicsCompressor
AudioContext.createGain()	A										<pre><code>var audioCtx = new AudioContext();\nvar gainNode = audioCtx.createGain();</code></pre>A GainNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createGain
AudioContext.createIIRFilter()	A										<pre><code>var iirFilter = AudioContext.createIIRFilter(feedforward, feedback);</code></pre>The createIIRFilter() method of the AudioContext interface creates an IIRFilterNode, which represents a general infinite impulse response (IIR) filter which can be configured to serve as various types of filter.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createIIRFilter
AudioContext.createMediaElementSource()	A										<pre><code>var audioCtx = new AudioContext();\nvar source = audioCtx.createMediaElementSource(myMediaElement);</code></pre>For more details about media element audio source nodes, check out the MediaElementAudioSourceNode reference page.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource
AudioContext.createMediaStreamDestination()	A										<pre><code>var audioCtx = new AudioContext();\nvar destination = audioCtx.createMediaStreamDestination();</code></pre>The MediaStream is created when the node is created and is accessible via the MediaStreamAudioDestinationNode 's strea m attribute. This stream can be used in a similar way as a MediaStream obtained via navigator.getUserMedia — it can, for example, be sent to a remote peer using the RTCPeerConnection addStream() method.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamDestination
AudioContext.createMediaStreamSource()	A										<pre><code>var audioCtx = new AudioContext();\nvar source = audioCtx.createMediaStreamSource(stream);</code></pre>For more details about media stream audio source nodes, check out the MediaStreamAudioSourceNode reference page.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource
AudioContext.createOscillator()	A										<pre><code>var audioCtx = new AudioContext();\nvar oscillator = audioCtx.createOscillator();</code></pre>An OscillatorNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createOscillator
AudioContext.createPanner()	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();</code></pre>The panner node is spatialized in relation to the AudioContext's AudioListener (defined by the AudioContext.listener attribute), which represents the position and orientation of the person listening to the audio.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createPanner
AudioContext.createPeriodicWave()	A										<pre><code>var audioCtx = new AudioContext();\nvar wave = audioCtx.createPeriodicWave(real, imag, constraints);</code></pre>A PeriodicWave.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createPeriodicWave
AudioContext.createScriptProcessor()	A										<pre><code>var audioCtx = new AudioContext();\nmyScriptProcessor = audioCtx.createScriptProcessor(1024, 1, 1);</code></pre>A ScriptProcessorNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor
AudioContext.createStereoPanner()	A										<pre><code>var audioCtx = new AudioContext();\nvar panNode = audioCtx.createStereoPanner();</code></pre>A StereoPannerNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createStereoPanner
AudioContext.createWaveShaper()	A										<pre><code>var audioCtx = new AudioContext();\nvar distortion = audioCtx.createWaveShaper();</code></pre>A WaveShaperNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createWaveShaper
AudioContext.decodeAudioData()	A										<pre><code>audioCtx.decodeAudioData(audioData, function(decodedData) {\n  // use the dec&#8203;oded data here\n});</code></pre>This is the preferred method of creating an audio source for Web Audio API from an audio track.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData
AudioContext.destination	A										<pre><code>var audioCtx = new AudioContext();\ngainNode.connect(audioCtx.destination);</code></pre>An AudioDestinationNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/destination
AudioContext.listener	A										<pre><code>var audioCtx = new AudioContext();\nvar myListener = audioCtx.listener;</code></pre>An AudioListener object.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/listener
AudioContext.mozAudioChannelType	A										<pre><code>var audioCtx = new AudioContext();\nvar myAudioChannelType = audioCtx.mozAudioChannelType;\n</code></pre>The readonly mozAudioChannelType property of the AudioContext interface can be used to set the audio channel that the sound playing in an audio context element will play in, on a Firefox OS device.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/mozAudioChannelType
AudioContext.onstatechange	A										<pre><code>var audioCtx = new AudioContext();\naudioCtx.onstatechange = function() { ... };</code></pre>The following snippet is taken from our AudioContext states demo (see it running live.) The onstatechange hander is used to log the current state to the console every time it changes.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/onstatechange
AudioContext.resume()	A										<pre><code>var audioCtx = new AudioContext();\naudioCtx.resume().then(function() { ... });\n</code></pre>The resume() method of the AudioContext Interface resumes the progression of time in an audio context that has previously been suspended.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume
AudioContext.sampleRate	A										<pre><code>var audioCtx = new AudioContext();\nvar mySampleRate = audioCtx.sampleRate;</code></pre>A floating point number.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/sampleRate
AudioContext.state	A										<pre><code>var audioCtx = new AudioContext();\nvar myState = audioCtx.state;</code></pre>A DOMString. Possible values are:	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/state
AudioContext.suspend()	A										<pre><code>var audioCtx = new AudioContext();\naudioCtx.suspend().then(function() { ... });\n</code></pre>The suspend() method of the AudioContext Interface suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process — this is useful if you want an application to power down the audio hardware when it will not be using an audio context for a while.	https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend
AudioDestinationNode	A										AudioDestinationNode has no output (as it is the output, no more AudioNode can be linked after it in the audio graph) and one input. The amount of channels in the input must be between 0 and the maxChannelCount value or an exception is raised.	https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode
AudioDestinationNode.maxChannelCount	A										<pre><code>var audioCtx = new AudioContext();\nvar myDestination = audioCtx.destination;\nmyDestination.maxChannelCount = 2;\n</code></pre>An unsigned long.	https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode/maxChannelCount
AudioListener	A										It is important to note that there is only one listener per context and that it isn't an AudioNode.	https://developer.mozilla.org/en-US/docs/Web/API/AudioListener
AudioListener.dopplerFactor	A										<pre><code>var audioCtx = new AudioContext();\nvar myListener = audioCtx.listener;\nmyListener.dopplerFactor = 1;\n</code></pre>A double.	https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/dopplerFactor
AudioListener.setOrientation()	A										<pre><code>var audioCtx = new AudioContext();\nvar myListener = audioCtx.listener;\nmyListener.setOrientation(0,0,-1,0,1,0);</code></pre>Void.	https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setOrientation
AudioListener.setPosition()	A										<pre><code>var audioCtx = new AudioContext();\nvar myListener = audioCtx.listener;\nmyListener.setPosition(1,1,1);</code></pre>Void.	https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/setPosition
AudioListener.speedOfSound	A										<pre><code>var audioCtx = new AudioContext();\nvar myListener = audioCtx.listener;\nmyListener.speedOfSound = 343.3;\n</code></pre>The speedOfSound property of the AudioListener interface is a double value representing the speed of sound, in meters per second.	https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/speedOfSound
AudioNode	A										The AudioNode interface is a generic interface for representing an audio processing module like an audio source (e.g. an HTML audio or video element, an OscillatorNode, etc.), the audio destination, intermediate processing module (e.g. a filter like BiquadFilterNode or ConvolverNode), or volume control (like GainNode).	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode
AudioNode.channelCount	A										<pre><code>var oscillator = audioCtx.createOscillator();\nvar channels = oscillator.channelCount;</code></pre>channelCount 's usage and precise definition depend on the value of AudioNode.channelCountMode :	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount
AudioNode.channelCountMode	A										<pre><code>var oscillator = audioCtx.createOscillator();\noscillator.channelCountMode = 'explicit';</code></pre>The possible values of channelCountMode and their meanings are:	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode
AudioNode.channelInterpretation	A										<pre><code>var oscillator = audioCtx.createOscillator();\noscillator.channelInterpretation = 'discrete';</code></pre>When the amount of channels doesn't match between an input and an output, up- or down-mixing happens according the following rules. This can be somewhat controlled by setting the AudioNode.channelInterpretation property to speakers or discrete.	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation
AudioNode.connect(AudioNode)	A										<pre><code>var AudioNode = AudioNode.connect(destination, output, input)</code></pre>A reference to the destination AudioNode object. In some browsers older implementations of this interface return void.	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect(AudioNode)
AudioNode.connect(AudioParam)	A										<pre><code>var lfo = audioCtx.createOscillator();\nlfo.frequency.value = 2.0; // Hz, two times per second\n\nvar lfoGain = audioCtx.createGain();\nlfoGain.gain.value = 0.5;\n\n// this is the parameter that is going to be modulated\nvar gain = audioCtx.createGain();\ngain.gain.value = 0.5;\n\n// Oscillators go from -1 to 1\n// Make it go from -0.5 to +0.5 by connecting it to a GainNode with a gain value of 0.5\nlfo.connect(lfoGain);\n\n// because the value of the gain.gain AudioParam is originaly 0.5, the value is added, and it will go from 0.0 to 1.0\nlfoGain.connect(gain.gain);\n\nlfo.connect(gain.gain);</code></pre>It is possible to connect an AudioNode output to more than one AudioParam, and more than one AudioNode output to a single AudioParam, with multiple calls to connect(). Fan-in and fan-out are therefore supported.	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect(AudioParam)
AudioNode.context	A										<pre><code>var aContext = anAudioNode.context;</code></pre>An AudioContext object.	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context
AudioNode.disconnect()	A										<pre><code>AudioNode.disconnect();\n\nAudioNode.disconnect(output);\n\nAudioNode.disconnect(destination);\n\nAudioNode.disconnect(destination, output);\n\nAudioNode.disconnect(destination, output, input);\n</code></pre>undefined	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect
AudioNode.numberOfInputs	A										<pre><code>var oscillator = audioCtx.createOscillator();\nvar inputs = oscillator.numberOfInputs;</code></pre>An integer.	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs
AudioNode.numberOfOutputs	A										<pre><code>var oscillator = audioCtx.createOscillator();\nvar outputs = oscillator.numberOfOutputs;</code></pre>An integer.	https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs
AudioParam	A										There are two kinds of AudioParam, a-rate and k-rate parameters:	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam
AudioParam.cancelScheduledValues()	A										<pre><code>var AudioParam = AudioParam.cancelScheduledValues(startTime)</code></pre>A reference to this AudioParam object. In some browsers older implementations of this interface return void.	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelScheduledValues
AudioParam.defaultValue	A										<pre><code>var gainNode = audioCtx.createGain();\nvar gainDefault = gainNode.gain.defaultValue; //'gain' is the AudioParam</code></pre>A float.	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/defaultValue
AudioParam.exponentialRampToValueAtTime()	A										<pre><code>var AudioParam = AudioParam.exponentialRampToValueAtTime(value, endTime)</code></pre>A reference to this AudioParam object. In some browsers older implementations of this interface return void.	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime
AudioParam.linearRampToValueAtTime()	A										<pre><code>var AudioParam = AudioParam.linearRampToValueAtTime(value, endTime)</code></pre>NOTE: both the example and live example are incorrect, see https://github.com/WebAudio/web-audio-api/issues/34	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime
maxValue	A										<pre><code>var maxVal = AudioParam.maxValue</code></pre>The maxValue property of the AudioParam interface represents the maximum possible value for the parameter's nominal (effective) range.	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/maxValue
minValue	A										<pre><code>var minVal = AudioParam.minValue</code></pre>The minValue property of the AudioParam interface represents the minimum possible value for the parameter's nominal (effective) range.	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/minValue
AudioParam.setTargetAtTime()	A										<pre><code>var AudioParam = AudioParam.setTargetAtTime(target, startTime, timeConstant)</code></pre>The change starts at the time specified in startTime and exponentially moves towards the value given by the target parameter. The exponential decay rate is defined by the timeConstant parameter. This is the time it takes a first-order linear continuous time-invariant system to reach the value 1 - 1/e (around 63.2%) given a step input response (transition from 0 to 1 value): basically, the larger it is, the slower the transition will be.  This is useful for decay or release portions of envelopes.	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime
AudioParam.setValueAtTime()	A										<pre><code>var AudioParam = AudioParam.setValueAtTime(value, startTime)</code></pre>A reference to this AudioParam object. In some browsers older implementations of this interface return void.	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueAtTime
AudioParam.setValueCurveAtTime()	A										<pre><code>var AudioParam = AudioParam.setValueCurveAtTime(values, startTime, duration)</code></pre>A reference to this AudioParam object. In some browsers older implementations of this interface return void.	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueCurveAtTime
AudioParam.value	A										<pre><code>var gainNode = audioCtx.createGain();\ngainNode.gain.value = 0; //'gain' is the AudioParam</code></pre>Though value can be set, any modifications happening while there are automation events scheduled — that is, events scheduled using the methods of the AudioParam — are ignored, without raising any exception.	https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/value
AudioProcessingEvent	A										The Web Audio API AudioProcessingEvent represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.	https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent
BatteryManager	A										The BatteryManager interface provides ways to get information about the system's battery charge level.	https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager
BatteryManager.charging	A										<pre><code>var charging = battery.charging</code></pre>A Boolean value indicating whether or not the device's battery is currently being charged.	https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/charging
BatteryManager.chargingTime	A										<pre><code>var time = battery.chargingTime</code></pre>Indicates the amount of time, in seconds, that remain until the battery is fully charged.	https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/chargingTime
BatteryManager.dischargingTime	A										<pre><code>var time = battery.dischargingTime</code></pre>Indicates the amount of time, in seconds, that remains until the battery is fully discharged.	https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/dischargingTime
BatteryManager.level	A										<pre><code>var level = battery.level</code></pre>Indicates the current battery charge level as a value between 0.0 and 1.0.	https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/level
BatteryManager.onchargingchange	A										<pre><code>battery.onchargingchange = funcRef</code></pre>Specifies an event listener to receive chargingchange events. These events occur when the battery charging state is updated.	https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingchange
BatteryManager.onchargingtimechange	A										<pre><code>battery.onchargingtimechange = funcRef</code></pre>Specifies an event listener to receive chargingtimechange events. These events occur when the battery chargingTime is updated.	https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingtimechange
BatteryManager.ondischargingtimechange	A										<pre><code>battery.ondischargingtimechange = funcRef</code></pre>Specifies an event listener to receive dischargingtimechange events. These events occur when the battery dischargingTime is updated.	https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/ondischargingtimechange
BatteryManager.onlevelchange	A										<pre><code>navigator.battery.onlevelchange = funcRef</code></pre>Specifies an event listener to receive levelchange events. These events occur when the battery level is updated.	https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onlevelchange
Battery Status API	A										The Battery Status API, more often referred to as the Battery API, provides information about the system's battery charge level and lets you be notified by events that are sent when the battery level or charging status change. This can be used to adjust your app's resource usage to reduce battery drain when the battery is low, or to save changes before the battery runs out in order to prevent data loss.	https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API
Beacon API	A										The Beacon interface is used to schedule an asynchronous and non-blocking request to a web server. Beacon requests use the HTTP PUT method and requests typically do not require a response. Requests are guaranteed to be initiated before a page is unloaded and they are run to completion without requiring a blocking request (for example XMLHttpRequest).	https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API
Using the Beacon API	A										The Beacon interface schedules an asynchronous and non-blocking request to a web server. Beacon requests use HTTP PUT and requests do not require a response. Requests are guaranteed to be initiated before a page is unloaded and they are run to completion without requiring a blocking request (for example XMLHttpRequest).	https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API/Using_the_Beacon_API
BeforeInstallPrompt	A										The BeforeInstallPromptEvent is passed into the Window.onbeforeinstallprompt handler and displatched when a web manifest exists, but before a user is prompted to save a web site to a home screen on mobile.	https://developer.mozilla.org/en-US/docs/Web/API/BeforeInstallPromptEvent
BeforeInstallPromptEvent.prompt()	A										<pre><code>BeforeInstallPromptEvent.prompt()</code></pre>The prompt() method of the BeforeInstallPromptEvent interface allows a developer to show the install prompt at a time of their own choosing.	https://developer.mozilla.org/en-US/docs/Web/API/BeforeInstallPromptEvent/prompt
BeforeUnloadEvent	A										The beforeunload event is fired when the window, the document and its resources are about to be unloaded.	https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent
BiquadFilterNode	A										The BiquadFilterNode interface represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers.	https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode
BiquadFilterNode.detune	A										<pre><code>var audioCtx = new AudioContext();\nvar biquadFilter = audioCtx.createBiquadFilter();\nbiquadFilter.detune.value = 100;</code></pre>An a-rate AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/detune
BiquadFilterNode.frequency	A										<pre><code>var audioCtx = new AudioContext();\nvar biquadFilter = audioCtx.createBiquadFilter();\nbiquadFilter.frequency.value = 3000;</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/frequency
BiquadFilterNode.gain	A										<pre><code>var audioCtx = new AudioContext();\nvar biquadFilter = audioCtx.createBiquadFilter();\nbiquadfilter.gain.value = 25;</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/gain
BiquadFilterNode.getFrequencyResponse()	A										<pre><code>BiquadFilterNode.getFrequencyResponse(frequencyArray, magResponseOutput, phaseResponseOutput);\n</code></pre>undefined	https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse
BiquadFilterNode.Q	A										<pre><code>var audioCtx = new AudioContext();\nvar biquadFilter = audioCtx.createBiquadFilter();\nbiquadfilter.Q.value = 100;</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/Q
BiquadFilterNode.type	A										<pre><code>var audioCtx = new AudioContext();\nvar biquadFilter = audioCtx.createBiquadFilter();\nbiquadfilter.type = 'lowpass';</code></pre>A string (enum) representing a BiquadFilterType.	https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type
Blob	A										A Blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.	https://developer.mozilla.org/en-US/docs/Web/API/Blob
Blob()	A										<pre><code>var aBlob = new Blob( array, options );\n</code></pre>The Blob() constructor returns a new Blob object. The content of the blob consists of the concatenation of the values given in the parameter array.	https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob
Blob.size	A										<pre><code>var sizeInBytes = blob.size\n</code></pre>The Blob.size property returns the size in bytes of the Blob or a File.	https://developer.mozilla.org/en-US/docs/Web/API/Blob/size
Blob.slice()	A										<pre><code>var blob = instanceOfBlob.slice([start [, end [, contentType]]]);</code></pre>The slice is used to create a new Blob object containing the data in the specified range of bytes of the source Blob.	https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice
Blob.type	A										<pre><code>var mimetype = instanceOfFile.type</code></pre>The type property of a Blob object provides the MIME type of the file. It returns an empty string if the type couldn't determined.	https://developer.mozilla.org/en-US/docs/Web/API/Blob/type
BlobEvent	A										The BlobEvent interface represents events associated with a Blob. These blobs are typically, but not necessarily,  associated with media content.	https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent
BlobEvent()	A										<pre><code>blobEvent = new BlobEvent({data: aSpecificBlob});\n</code></pre>The BlobEvent() constructor returns a newly created BlobEvent object with an associated Blob.	https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent/BlobEvent
BlobEvent.data	A										<pre><code>associatedBlob = BlobEvent.data</code></pre>The BlobEvent.data read-only property represents a Blob associated with the event.	https://developer.mozilla.org/en-US/docs/Web/API/BlobEvent/data
Bluetooth	A										The Bluetooth interface of the Web Bluetooth API returns a Promise to a BluetoothDevice object with the specified options.	https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth
Bluetooth.requestDevice()	A										<pre><code>Bluetooth.requestDevice(options).then(function(bluetoothDevice) { ... })</code></pre>The Bluetooth.requestDevice() method of the Bluetooth interface returns a Promise to a BluetoothDevice object with the specified options. If there is no chooser UI, this method returns the first device matching the criteria.	https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth/requestDevice
BluetoothAdvertisingData	A										The BluetoothDevice interface of the Web Bluetooth API provides advertising data about a particular Bluetooth device.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingData
BluetoothAdvertisingData.appearance	A										<pre><code>var appearance = BluetoothAdvertisingData.appearance;</code></pre>The appearance read-only property of the BluetoothAdvertisingData interface returns one of the values defined by the org.bluetooth.characteristic.gap.appearance characteristic.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingData/appearance
manufacturerData	A										<pre><code>varmanufacturerData = BluetoothAdvertisingData.manufacturerData;</code></pre>The manufacturerData read-only property of the BluetoothAdvertisingData interface returns a map that relates Company Identifier Codes to ArrayBuffers.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingData/manufacturerData
rssi	A										<pre><code>var rssi = BluetoothAdvertisingData.rssi;</code></pre>The rssi read-only property of the BluetoothAdvertisingData interface returns the power at which the device’s packets are being received, measured in dBm. This is used to compute the path loss as this.txPower - this.rssi.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingData/rssi
serviceData	A										<pre><code>var serviceData = BluetoothAdvertisingData.serviceData;</code></pre>The serviceData read-only property of the BluetoothAdvertisingData interface returns a map that relates UUIDs to ArrayBuffers.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingData/serviceData
txPower	A										<pre><code>var power = BluetoothAdvertisingData.txPower;</code></pre>The txPower read-only property of the BluetoothAdvertisingData interface returns the transmission power at which the device is broadcasting, measured in dBm. This is used to compute the path loss as this.txPower - this.rssi.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothAdvertisingData/txPower
BluetoothCharacteristicProperties	A										The BluetoothCharacteristicProperties interface of the the Web Bluetooth API provides an object provides propertieds of a particular BluetoothRemoteGATTCharacteristic. This interface is returned by calling BluetoothRemoteGATTCharacteristic.properties.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothCharacteristicProperties
BluetoothDevice	A										The BluetoothDevice interface of the Web Bluetooth API represents a Bluetooth device inside a particular script execution environment.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice
connectGATT()	A										<pre><code>instanceOfBluetoothDevice.connectGATT().then(function(BluetoothGATTRemoteServer) { ... })</code></pre>The BluetoothDevice.connectGATT() method returns a Promise that resolves to an instance of BluetoothGATTRemoteServer.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/connectGATT
BluetoothDevice.gatt	A										<pre><code>var gattServer = instanceOfBluetoothDevice.gatt</code></pre>The BluetoothDevice.gatt read-only property returns a reference to the device's BluetoothRemoteGATTServer.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/gatt
id	A										<pre><code>var id = instanceOfBluetoothDevice.id</code></pre>The BluetoothDevice.id read-only property returns a DOMString that uniquely identifies a device.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/id
BluetoothDevice.name	A										<pre><code>var name = instanceOfBluetoothDevice.name</code></pre>The BluetoothDevice.name read-only property returns a DOMString that provides a human-readable name for the device.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/name
BluetoothDevice.uuids	A										<pre><code>var uuids[] =&#8203; instanceOfBluetoothDevice.uuids</code></pre>The BluetoothDevice.uuids read-only property lists the UUIDs of GATT services provided by the device, that the current origin is allowed to access.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/uuids
BluetoothGATTDescriptor	A										The BluetoothGATTDescriptor interface of the Web Bluetooth API provides a GATT Descriptor, which provides further information about a characteristic’s value.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattDescriptor
characteristic	A										<pre><code>var characteristic = BluetoothGATTDescriptor.characteristic</code></pre>The BluetoothGATTDescriptor.characteristic read-only property returns the BluetoothGATTCharacteristic this descriptor belongs to.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattDescriptor/characteristic
readValue()	A										<pre><code>BluetoothGATTDescriptor.readValue().then(function(value[]) { ... })</code></pre>The BluetoothGATTDescriptor.readValue() method returns a Promise that resolves to an ArrayBuffer holding a duplicate  of the value property if it is available and supported. Otherwise it throws an error.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattDescriptor/readValue
uuid	A										<pre><code>var uuid = BluetoothGATTDescriptor.uuid</code></pre>The BluetoothGATTDescriptor.uuid read-only property returns the UUID of the characteristic descriptor, for example ' 00002902-0000-1000-8000-00805f9b34fb ' for theClient Characteristic Configuration descriptor.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattDescriptor/uuid
value	A										<pre><code>var characteristic = BluetoothGATTDescriptor.characteristic</code></pre>The BluetoothGATTDescriptor.value read-only property returns an ArrayBuffer containing the currently cached descriptor value. This value gets updated when the value of the descriptor is read.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattDescriptor/value
writeValue()	A										<pre><code>BluetoothGATTDescriptor.readValue(value[]).then(function() { ... })</code></pre>The BluetoothGATTDescriptor.writeValue() method sets the value property to the bytes contained in an ArrayBuffer and returns a Promise.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattDescriptor/writeValue
BluetoothGATTService	A										The BluetoothGattService interface of the Web Bluetooth API represents a service provided by a GATT server, including a device, a list of referenced services, and a list of the characteristics of this service.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattService
device	A										<pre><code>var bluetoothDeviceInstance = BluetoothGATTService.device</code></pre>The BluetoothGATTService.device read-only property returns information about a Bluetooth device through an instance of BluetoothDevice.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattService/device
getCharacteristic()	A										<pre><code>bluetoothGATTServiceInstance.getCharacteristic(characteristic).then(function(BluetoothGATTCharacteristic) { ... } )</code></pre>The BluetoothGATTService.getCharacteristic() method returns a Promise to an instance of BluetoothGATTCharacteristic for a given universally unique identifier (UUID).	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattService/getCharacteristic
getCharacteristics()	A										<pre><code>bluetoothGATTServiceInstance.getCharacteristics(characteristics).then(function(BluetoothGATTCharacteristic[]) { ... } )</code></pre>The BluetoothGATTService.getCharacteristics() method returns a Promise to a list of BluetoothGATTCharacteristic instances for a given universally unique identifier (UUID).	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattService/getCharacteristics
getIncludedService()	A										<pre><code>bluetoothGATTServiceInstance.getIncludedService(service).then(function(BluetoothGATTService) { ... } )</code></pre>The BluetoothGATTService.getIncludedService() method returns a Promise to an instance of BluetoothGATTService for a given universally unique identifier (UUID).	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattService/getIncludedService
getIncludedServices()	A										<pre><code>bluetoothGATTServiceInstance.getIncludedService(service).then(function(BluetoothGATTService) { ... } )</code></pre>The BluetoothGATTService.getIncludedServices() method returns a Promise to an Array of BluetoothGATTService instances for an optional universally unique identifier (UUID).	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattService/getIncludedServices
isPrimary	A										<pre><code>var isPrimary = BluetoothGATTService.isPrimary</code></pre>The BluetoothGATTService.isPrimary read-only property returns a Boolean that indicates whether this is a primary service. If it is not a primary service, it is a secondary service.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattService/isPrimary
uuid	A										<pre><code>var uuid = BluetoothGATTService.uuid</code></pre>The BluetoothGATTService.uuid read-only property returns a DOMString representing the UUID of this service.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothGattService/uuid
BluetoothRemoteGATTCharacteristic	A										The BluetoothRemoteGattCharacteristic interface of the Web Bluetooth API represents a GATT Characteristic, which is a basic data element that provides further information about a peripheral’s service.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic
BluetoothRemoteGATTCharacteristic.getDescriptor()	A										<pre><code>BluetoothRemoteGATTCharacteristic.getDescriptor(bluetoothDescriptorUUID).then(function(bluetoothGATTDescriptor) { ... })</code></pre>The BluetoothRemoteGATTCharacteristic.getDescriptor() method returns a Promise that resolves to the first BluetoothGATTDescriptor for a given descriptor UUID.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/getDescriptor
BluetoothRemoteGATTCharacteristic.getDescriptors()	A										<pre><code>BluetoothRemoteGATTCharacteristic.getDescriptors(bluetoothDescriptorUUID).then(function(bluetoothGATTDescriptors[]) { ... })</code></pre>The BluetoothRemoteGATTCharacteristic.getDescriptors() method returns a Promise that resolves to an Array of all BluetoothGATTDescriptor objects for a given descriptor UUID.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/getDescriptors
BluetoothRemoteGATTCharacteristic.properties	A										<pre><code>var properties = BluetoothRemoteGATTCharacteristic.properties</code></pre>The BluetoothRemoteGATTCharacteristic.properties read-only property returns a BluetoothCharacteristicProperties instance containing the properties of this characteristic.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/properties
BluetoothRemoteGATTCharacteristic.readValue()	A										<pre><code>BluetoothRemoteGATTCharacteristic.readValue().then(function(dataView) { ... })</code></pre>The BluetoothRemoteGATTCharacteristic.readValue() method returns a Promise that resolves to an DataView holding a duplicate of the value property if it is available and supported. Otherwise it throws an error.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/readValue
BluetoothRemoteGATTCharacteristic.service	A										<pre><code>var bluetoothRemoteGATTServiceInstance = BluetoothRemoteGATTCharacteristic.service</code></pre>The BluetoothRemoteGATTCharacteristic.service read-only property returns the BluetoothGATTService this characteristic belongs to.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/service
BluetoothRemoteGATTCharacteristic.startNotifications()	A										<pre><code>BluetoothRemoteGATTCharacteristic.startNotifications().then(function(BluetoothRemoteGATTCharacteristic) { ... })</code></pre>The BluetoothRemoteGATTCharacteristic.startNotifications() method returns a Promise to the BluetoothRemoteGATTCharacteristic instance when there is an active notification on it.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/startNotifications
BluetoothRemoteGATTCharacteristic.stopNotifications()	A										<pre><code>BluetoothRemoteGATTCharacteristic.stopNotifications().then(function(BluetoothRemoteGATTCharacteristic) { ... })</code></pre>The BluetoothRemoteGATTCharacteristic.stopNotifications() method returns a Promise to the BluetoothRemoteGATTCharacteristic instance when there is no longer an active notification on it.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/stopNotifications
BluetoothRemoteGATTCharacteristic.uuid	A										<pre><code>var uuid = BluetoothRemoteGATTCharacteristic.uuid</code></pre>The BluetoothRemoteGATTCharacteristic.uuid read-only property returns DOMString containing the UUID of the characteristic, for example '00002a37-0000-1000-8000-00805f9b34fb' for the Heart Rate Measurement characteristic.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/uuid
BluetoothRemoteGATTCharacteristic.value	A										<pre><code>var value = BluetoothRemoteGATTCharacteristic.value</code></pre>The BluetoothRemoteGATTCharacteristic.value read-only property returns currently cached characteristic value. This value gets updated when the value of the characteristic is read or updated via a notification or indication.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/value
BluetoothRemoteGATTCharacteristic.writeValue()	A										<pre><code>BluetoothRemoteGATTCharacteristic.writeValue(value).then(function() { ... })</code></pre>The BluetoothRemoteGATTCharacteristic.writeValue() method sets the value property to the bytes contained in an ArrayBuffer and returns a Promise.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTCharacteristic/writeValue
BluetoothRemoteGATTServer	A										The BluetoothRemoteGATTServer interface of the Web Bluetooth API represents a GATT Server on a remote device.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer
BluetoothRemoteGATTServer.connect()	A										<pre><code>BluetoothRemoteGATTServer.connect()\n&#160; .then(function(bluetoothRemoteGATTServer) { ... })</code></pre>The BluetoothRemoteGATTServer.connect() method causes the script execution environment to disconnect from this.device.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/connect
BluetoothRemoteGATTServer.connected	A										<pre><code>var connected = BluetoothRemoteGATTServer.connected</code></pre>The BluetoothRemoteGATTServer.connected read-only property returns a boolean value that returns true while this script execution environment is connected to this.device. It can be false while the user agent is physically connected.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/connected
BluetoothRemoteGATTServer.device	A										<pre><code>var device = BluetoothRemoteGATTServer.device</code></pre>The BluetoothRemoteGATTServer.device read-only property returns a reference to the BluetoothDevice running the server.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/device
BluetoothRemoteGATTServer.disconnect()	A										<pre><code>BluetoothRemoteGATTServer.disconnect()</code></pre>The BluetoothRemoteGATTServer.disconnect() method causes the script execution environment to disconnect from this.device.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/disconnect
BluetoothRemoteGATTServer.getPrimaryService()	A										<pre><code>BluetoothRemoteGATTServer.getPrimaryService(bluetoothServiceUUID).then(function(bluetoothGATTService) { ... })</code></pre>The BluetoothRemoteGATTServer.getPrimaryService() method returns a promise to the primary BluetoothGATTService offered by the bluetooth device for a specified BluetoothServiceUUID.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/getPrimaryService
BluetoothRemoteGATTServer.getPrimaryServices()	A										<pre><code>BluetoothRemoteGATTServer.getPrimaryServices(bluetoothServiceUUID).then(function(bluetoothGATTServices) { ... })</code></pre>The BluetoothRemoteGATTServer.getPrimaryServices() method returns a promise to a list of primary BluetoothGATTService objects offered by the bluetooth device for a specified BluetoothServiceUUID.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothRemoteGATTServer/getPrimaryServices
BluetoothStatusChangedEvent	A										The BluetoothStatusChangedEvent API provides access to information regarding any change to the status of a Bluetooth device.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothStatusChangedEvent
BluetoothStatusChangedEvent.address	A										<pre><code>var address = instanceOfBluetoothStatusChangedEvent.address</code></pre>The address property represents the address of the device for which the status has changed in the Bluetooth micro-network.	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothStatusChangedEvent/address
BluetoothStatusChangedEvent.status	A										<pre><code>var status = instanceOfBluetoothStatusChangedEvent.status</code></pre>The status property indicates if the connection is active (true) or not (false).	https://developer.mozilla.org/en-US/docs/Web/API/BluetoothStatusChangedEvent/status
Body	A										The Body mixin of the Fetch API represents the body of the response/request, allowing you to declare what its content type is and how it should be handled.	https://developer.mozilla.org/en-US/docs/Web/API/Body
Body.arrayBuffer()	A										<pre><code>response.arrayBuffer().then(function(buffer) {\n  // do something with buffer\n});</code></pre>The arrayBuffer() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an ArrayBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer
Body.blob()	A										<pre><code>response.blob().then(function(myBlob) {\n  // do something with myBlob\n});</code></pre>The blob() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a Blob.	https://developer.mozilla.org/en-US/docs/Web/API/Body/blob
Body.bodyUsed	A										<pre><code>var myBodyUsed = response.bodyUsed;</code></pre>The bodyUsed read-only property of the Body mixin contains a Boolean that indicates whether the body has been read yet.	https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed
Body.formData()	A										<pre><code>response.formData().then(function(formdata) {\n  // do something with your formdata\n});</code></pre>The formData() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a FormData object.	https://developer.mozilla.org/en-US/docs/Web/API/Body/formData
Body.json()	A										<pre><code>response.json().then(function(json) {\n  // do something with your JSON\n});</code></pre>The json() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an object literal containing the JSON data.	https://developer.mozilla.org/en-US/docs/Web/API/Body/json
Body.text()	A										<pre><code>response.text().then(function (text) {\n  // do something with the text response \n});</code></pre>The text() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a USVString object (text).	https://developer.mozilla.org/en-US/docs/Web/API/Body/text
BroadcastChannel	A										The BroadcastChannel interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message event fired at all BroadcastChannel objects listening to the channel.	https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel
BroadcastChannel()	A										<pre><code> channel = new BroadcastChannel(channel);</code></pre>The BroadcastChannel() constructor creates a new BroadcastChannel and connects it to the underlying channel.	https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/BroadcastChannel
BroadcastChannel.close()	A										<pre><code>var str = channel.close();\n</code></pre>The BroadcastChannel.close() terminates the connection to the underlying channel, allowing the object to be garbage collected. This is a necessary step to perform as there is no other way for a browser to know that this channel is not needed anymore.	https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/close
BroadcastChannel.name	A										<pre><code>var str = channel.name;\n</code></pre>The read-only BroadcastChannel.name property returns a DOMString, which uniquely identifies the given channel with its name. This name is passed to the BroadcastChannel() constructor at creation time and is therefore read-only.	https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/name
BroadcastChannel.onmessage	A										<pre><code>channel.onmessage = function;\n</code></pre>The BroadcastChannel.onmessage event handler is a property that specifies the function to execute when a message event, of type MessageEvent, is received by this BroadcastChannel. Such an event is sent by the browser with a message broadcasted to the channel.	https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessage
BroadcastChannel.postMessage()	A										<pre><code>var str = channel.postMessage(object);\n</code></pre>The BroadcastChannel.postMessage() sends a message, which can be of any kind of Object, to each listener in any browser context with the same origin. The message is transmitted as a message event targeted at each BroadcastChannel bound to the channel.	https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/postMessage
Broadcast Channel API	A										The Broadcast Channel API allows simple communication between browsing contexts (that is windows, tabs, frames, or iframes) with the same origin (usually pages from the same site).	https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API
BufferSource	A										BufferSource is a helper type representing objects that are either themselves an ArrayBuffer, or conform to ArrayBufferView.	https://developer.mozilla.org/en-US/docs/Web/API/BufferSource
ByteString	A										ByteString is a UTF-8 String that corresponds to the set of all possible sequences of bytes. ByteString maps to a String when returned in JavaScript; generally, it's only used when interfacing with protocols that use bytes and strings interchangably, such as HTTP.	https://developer.mozilla.org/en-US/docs/Web/API/ByteString
Cache	A										The Cache interface provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.	https://developer.mozilla.org/en-US/docs/Web/API/Cache
Cache.add()	A										<pre><code>cache.add(request).then(function() {\n  //request has been added to the cache\n});\n</code></pre>The add() method of the Cache interface takes a URL, retrieves it and adds the resulting response object to the given cache. The add() method is functionally equivalent to the following:	https://developer.mozilla.org/en-US/docs/Web/API/Cache/add
Cache.addAll()	A										<pre><code>cache.addAll(requests[]).then(function() {\n  //requests have been added to the cache\n});\n</code></pre>The addAll() method of the Cache interface takes an array of URLS, retrieves them, and adds the resulting response objects to the given cache. The request objects created during retrieval become keys to the stored response operations.&#160;	https://developer.mozilla.org/en-US/docs/Web/API/Cache/addAll
Cache.delete()	A										<pre><code>cache.delete(request,{options}).then(function(true) {\n  //your cache entry has been deleted\n});\n</code></pre>The delete() method of the Cache interface finds the Cache entry whose key is the request, and if found, deletes the Cache entry and returns a Promise that resolves to true. If no Cache entry is found, it returns false.	https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete
Cache.keys()	A										<pre><code>cache.keys(request,{options}).then(function(keys) {\n  //do something with your array of requests\n});\n</code></pre>The keys() method of the Cache interface returns a Promise that resolves to an array of Cache keys.	https://developer.mozilla.org/en-US/docs/Web/API/Cache/keys
Cache.match()	A										<pre><code>cache.match(request,{options}).then(function(response) {\n  //do something with the response\n});\n</code></pre>The match() method of the Cache interface returns a Promise that resolves to the Response associated with the first matching request in the Cache object. If no match is found, the Promise resolves to undefined.	https://developer.mozilla.org/en-US/docs/Web/API/Cache/match
Cache.matchAll()	A										<pre><code>cache.matchAll(request,{options}).then(function(response) {\n  //do something with the response array\n});\n</code></pre>The matchAll() method of the Cache interface returns a Promise that resolves to an array of all matching requests in the Cache object.	https://developer.mozilla.org/en-US/docs/Web/API/Cache/matchAll
Cache.put()	A										<pre><code>cache.put(request, response).then(function() {\n  // request/response pair has been added to the cache\n});\n</code></pre>The put() method of the Cache interface allows key/value pairs to be added to the current Cache object.	https://developer.mozilla.org/en-US/docs/Web/API/Cache/put
CacheStorage	A										The CacheStorage interface represents the storage for Cache objects. It provides a master directory of all the named caches that a ServiceWorker, other type of worker or window scope can access (you don't have to use it with service workers, even though that is the spec that defines it) and maintains a mapping of string names to corresponding Cache objects.	https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage
CacheStorage.delete()	A										<pre><code>caches.delete(cacheName).then(function(true) {\n  //your cache is now deleted\n});\n</code></pre>The delete () method of the CacheStorage interface finds the Cache object matching the cacheName, and if found, deletes the Cache object and returns a Promise that resolves to true. If no Cache object is found, it returns false.	https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/delete
CacheStorage.has()	A										<pre><code>caches.has(cacheName).then(function(true) {\n  // your cache exists!\n});\n</code></pre>The has() method of the CacheStorage interface returns a Promise that resolves to true if a Cache object matches the cacheName.	https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/has
CacheStorage.keys()	A										<pre><code>caches.keys().then(function(keyList) {\n  //do something with your keyList\n});\n</code></pre>The keys () method of the CacheStorage interface returns a Promise that will resolve with an array containing strings corresponding to all of the named Cache objects tracked by the CacheStorage object in the order they were created. Use this method to iterate over a list of all Cache objects.	https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/keys
CacheStorage.match()	A										<pre><code>caches.match(request,{options}).then(function(response) {\n  //do something with the request\n});\n</code></pre>The match() method of the CacheStorage interface checks if a given Request is a key in any of the Cache objects that the CacheStorage object tracks and returns a Promise that resolves to the matching Response.	https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/match
CacheStorage.open()	A										<pre><code>caches.open(cacheName).then(function(cache) {\n  //do something with your cache\n});\n</code></pre>The open() method of the CacheStorage interface returns a Promise that resolves to the Cache object matching the cacheName.	https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/open
CanvasCaptureMediaStream	A										The CanvasCaptureMediaStream interface represents a MediaStream capturing in real-time the surface of an HTMLCanvasElement.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasCaptureMediaStream
CanvasCaptureMediaStream.canvas	A										<pre><code>var elt = stream.canvas;\n</code></pre>The CanvasCaptureMediaStream.canvas read-only property returns the HTMLCanvasElement associated with the stream.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasCaptureMediaStream/canvas
CanvasCaptureMediaStream.requestFrame()	A										<pre><code>stream.requestFrame();\n</code></pre>The CanvasCaptureMediaStream.requestFrame() method forces a frame to be captured and sent to the stream. This allows to capture partially rendered frames.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasCaptureMediaStream/requestFrame
CanvasGradient	A										The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().	https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient
CanvasGradient.addColorStop()	A										<pre><code>void gradient.addColorStop(offset, color);\n</code></pre>The CanvasGradient.addColorStop() method adds a new stop, defined by an offset and a color, to the gradient. If the offset is not between 0 and 1, an INDEX_SIZE_ERR is raised, if the color can't be parsed as a CSS color, a SYNTAX_ERR is raised.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient/addColorStop
CanvasImageSource	A										CanvasImageSource is a helper type representing any objects of one of the following types: HTMLImageElement, HTMLVideoElement, HTMLCanvasElement, or ImageBitmap.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasImageSource
CanvasPattern	A										The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas or a video, created by the CanvasRenderingContext2D.createPattern() method.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern
CanvasPattern.setTransform()	A										<pre><code>void pattern.setTransform(matrix);\n</code></pre>The CanvasPattern.setTransform() method uses an SVGMatrix object as the pattern's transformation matrix and invokes it on the pattern.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern/setTransform
CanvasRenderingContext2D	A										To get an object of this interface, call getContext() on a canvas element, supplying "2d" as the argument:	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D
CanvasRenderingContext2D.addHitRegion()	A										<pre><code>void ctx.addHitRegion(options);\n</code></pre>The CanvasRenderingContext2D.addHitRegion() method of the Canvas 2D API adds a hit region to the bitmap. This allows you to make hit detection easier, lets you route events to DOM elements, and makes it possible for users to explore the canvas without seeing it.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion
CanvasRenderingContext2D.arc()	A										<pre><code>void ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n</code></pre>The CanvasRenderingContext2D.arc() method of the Canvas 2D API adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc
CanvasRenderingContext2D.arcTo()	A										<pre><code>void ctx.arcTo(x1, y1, x2, y2, radius);\n</code></pre>The CanvasRenderingContext2D.arcTo() method of the Canvas 2D API adds an arc to the path with the given control points and radius, connected to the previous point by a straight line.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo
CanvasRenderingContext2D.asyncDrawXULElement()	A										<pre><code>void ctx.asyncDrawXULElement(element, x, y, w, h, bgColor, flags = 0);\n</code></pre>The non-standard and internal only CanvasRenderingContext2D.asyncDrawXULElement() method of the Canvas 2D API renders a region of a XUL element into the canvas.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/asyncDrawXULElement
CanvasRenderingContext2D.beginPath()	A										<pre><code>void ctx.beginPath();\n</code></pre>The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath
CanvasRenderingContext2D.bezierCurveTo()	A										<pre><code>void ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n</code></pre>The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the Bézier curve.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo
CanvasRenderingContext2D.canvas	A										<pre><code>ctx.canvas;</code></pre>The CanvasRenderingContext2D.canvas property is a read-only reference to the HTMLCanvasElement object that is associated with the context. It might be null if there is no association with an canvas element.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas
CanvasRenderingContext2D.clearHitRegions()	A										<pre><code>void ctx.clearHitRegions();\n</code></pre>The CanvasRenderingContext2D.clearHitRegions() method of the Canvas 2D API removes all hit regions from the canvas.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions
CanvasRenderingContext2D.clearRect()	A										<pre><code>void ctx.clearRect(x, y, width, height);\n</code></pre>The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API sets all pixels in the rectangle defined by starting point (x, y) and size (width, height) to transparent black, erasing any previously drawn content.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect
CanvasRenderingContext2D.clip()	A										<pre><code>void ctx.clip();\nvoid ctx.clip(fillRule);\nvoid ctx.clip(path, fillRule);\n</code></pre>The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the path currently being built into the current clipping path.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip
CanvasRenderingContext2D.closePath()	A										<pre><code>void ctx.closePath();\n</code></pre>The CanvasRenderingContext2D.closePath() method of the Canvas 2D API causes the point of the pen to move back to the start of the current sub-path. It tries to add a straight line (but does not actually draw it) from the current point to the start. If the shape has already been closed or has only one point, this function does nothing.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath
CanvasRenderingContext2D.createImageData()	A										<pre><code>ImageData ctx.createImageData(width, height);\nImageData ctx.createImageData(imagedata);\n</code></pre>The CanvasRenderingContext2D.createImageData() method of the Canvas 2D API creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData
CanvasRenderingContext2D.createLinearGradient()	A										<pre><code>CanvasGradient ctx.createLinearGradient(x0, y0, x1, y1);\n</code></pre>The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a gradient along the line given by the coordinates represented by the parameters. This method returns a linear CanvasGradient.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient
CanvasRenderingContext2D.createPattern()	A										<pre><code>CanvasPattern ctx.createPattern(image, repetition);\n</code></pre>The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern using the specified image (a CanvasImageSource). It repeats the source in the directions specified by the repetition argument. This method returns a CanvasPattern.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern
CanvasRenderingContext2D.createRadialGradient()	A										<pre><code>CanvasGradient ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n</code></pre>The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a radial gradient given by the coordinates of the two circles represented by the parameters. This method returns a CanvasGradient.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient
CanvasRenderingContext2D.currentTransform	A										<pre><code>ctx.currentTransform [= value];\n</code></pre>The CanvasRenderingContext2D.currentTransform property of the Canvas 2D API returns or sets an SVGMatrix object for the current transformation matrix.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/currentTransform
CanvasRenderingContext2D.direction	A										<pre><code>ctx.direction = "ltr" || "rtl" || "inherit";\n</code></pre>The CanvasRenderingContext2D.direction property of the Canvas 2D API specifies the current text direction used when drawing text.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction
CanvasRenderingContext2D.drawFocusIfNeeded()	A										<pre><code>void ctx.drawFocusIfNeeded(element);\nvoid ctx.drawFocusIfNeeded(path, element);\n</code></pre>The CanvasRenderingContext2D.drawFocusIfNeeded() method of the Canvas 2D API draws a focus ring around the current path or given path, If a given element is focused.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded
CanvasRenderingContext2D.drawImage()	A										<pre><code>void ctx.drawImage(image, dx, dy);\nvoid ctx.drawImage(image, dx, dy, dWidth, dHeight);\nvoid ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n</code></pre>The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to draw an image onto the canvas.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage
CanvasRenderingContext2D.drawWidgetAsOnScreen()	A										<pre><code>void ctx.drawWidgetAsOnScreen(window);\n</code></pre>The non-standard and internal only CanvasRenderingContext2D.drawWidgetAsOnScreen() method of the Canvas 2D API renders the root widget of a window into the canvas. Unlike drawWindow(), this API uses the operating system to snapshot the widget on-screen, rather than reading from Gecko's own compositor.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWidgetAsOnScreen
CanvasRenderingContext2D.drawWindow()	A										<pre><code>void ctx.drawWindow(window, x, y, w, h, bgColor, flags = 0);\n</code></pre>The non-standard and internal only CanvasRenderingContext2D.drawWindow() method of the Canvas 2D API renders a region of a window into the canvas. The contents of the window's viewport are rendered, ignoring viewport clipping and scrolling.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow
CanvasRenderingContext2D.ellipse()	A										<pre><code>void ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n</code></pre>The CanvasRenderingContext2D.ellipse() method of the Canvas 2D API adds an ellipse to the path which is centered at (x, y) position with the radii radiusX and radiusY starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse
CanvasRenderingContext2D.fill()	A										<pre><code>void ctx.fill();\nvoid ctx.fill(fillRule);\nvoid ctx.fill(path, fillRule);\n</code></pre>The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path with the current fill style using the non-zero or even-odd winding rule.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill
CanvasRenderingContext2D.fillRect()	A										<pre><code>void ctx.fillRect(x, y, width, height);\n</code></pre>The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a filled rectangle at (x, y) position whose size is determined by width and height and whose style is determined by the fillStyle attribute.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect
CanvasRenderingContext2D.fillStyle	A										<pre><code>ctx.fillStyle = color;\nctx.fillStyle = gradient;\nctx.fillStyle = pattern;\n</code></pre>The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color or style to use inside shapes. The default is #000 (black).	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle
CanvasRenderingContext2D.fillText()	A										<pre><code>void ctx.fillText(text, x, y [, maxWidth]);\n</code></pre>The CanvasRenderingContext2D.fillText() method of the Canvas 2D API fills a given text at the given (x, y) position. If the optional fourth parameter for a maximum width is provided, the text will be scaled to fit that width.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText
CanvasRenderingContext2D.filter	A										<pre><code>ctx.filter = "&lt;filter-function1&gt; [&lt;filter-function2] [&lt;filter-functionN]";\nctx.filter = "none";\n</code></pre>The CanvasRenderingContext2D.filter property of the Canvas 2D API provides filter effects like blurring or gray-scaling. It is similar to the CSS filter property and accepts the same functions.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter
CanvasRenderingContext2D.font	A										<pre><code>ctx.font = value;\n</code></pre>The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current text style being used when drawing text. This string uses the same syntax as the CSS font specifier. The default font is 10px sans-serif.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font
CanvasRenderingContext2D.getImageData()	A										<pre><code>ImageData ctx.getImageData(sx, sy, sw, sh);\n</code></pre>The CanvasRenderingContext2D.getImageData() method of the Canvas 2D API returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy) and has an sw width and sh height.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData
CanvasRenderingContext2D.getLineDash()	A										<pre><code>ctx.getLineDash();\n</code></pre>The CanvasRenderingContext2D.getLineDash() method of the Canvas 2D API gets the current line dash pattern.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash
CanvasRenderingContext2D.globalAlpha	A										<pre><code>ctx.globalAlpha = value;\n</code></pre>The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha value that is applied to shapes and images before they are drawn onto the canvas. The value is in the range from 0.0 (fully transparent) to 1.0 (fully opaque).	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha
CanvasRenderingContext2D.globalCompositeOperation	A										<pre><code>ctx.globalCompositeOperation = type;</code></pre>The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which of the compositing or blending mode operations to use.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
CanvasRenderingContext2D.imageSmoothingEnabled	A										<pre><code>ctx.imageSmoothingEnabled = value;</code></pre>The CanvasRenderingContext2D.imageSmoothingEnabled property of the Canvas 2D API can be set to change if images are smoothed (true, default) or not (false). On getting the imageSmoothingEnabled property, the last value it was set to, is returned.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled
CanvasRenderingContext2D.isPointInPath()	A										<pre><code>boolean ctx.isPointInPath(x, y);\nboolean ctx.isPointInPath(x, y, fillRule);\n\nboolean ctx.isPointInPath(path, x, y);\nboolean ctx.isPointInPath(path, x, y, fillRule);\n</code></pre>The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not the specified point is contained in the current path.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath
CanvasRenderingContext2D.isPointInStroke()	A										<pre><code>boolean ctx.isPointInStroke(x, y);\nboolean ctx.isPointInStroke(path, x, y);\n</code></pre>The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or not the specified point is inside the area contained by the stroking of a path.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke
CanvasRenderingContext2D.lineCap	A										<pre><code>ctx.lineCap = "butt";\nctx.lineCap = "round";\nctx.lineCap = "square";</code></pre>The CanvasRenderingContext2D.lineCap property of the Canvas 2D API determines how the end points of every line are drawn. There are three possible values for this property and those are: butt, round and square. By default this property is set to butt.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap
CanvasRenderingContext2D.lineDashOffset	A										<pre><code>ctx.lineDashOffset = value;\n</code></pre>The CanvasRenderingContext2D.lineDashOffset property of the Canvas 2D API sets the line dash pattern offset or "phase" to achieve a " marching ants " effect, for example.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset
CanvasRenderingContext2D.lineJoin	A										<pre><code>ctx.lineJoin = "bevel";\nctx.lineJoin = "round";\nctx.lineJoin = "miter";</code></pre>The CanvasRenderingContext2D.lineJoin property of the Canvas 2D API determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are joined together (degenerate segments with zero lengths, whose specified endpoints and control points are exactly at the same position, are skipped).	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin
CanvasRenderingContext2D.lineTo()	A										<pre><code>void ctx.lineTo(x, y);\n</code></pre>The CanvasRenderingContext2D.lineTo() method of the Canvas 2D API connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo
CanvasRenderingContext2D.lineWidth	A										<pre><code>ctx.lineWidth = value;</code></pre>The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the thickness of lines in space units. When getting, it returns the current value (1.0 by default). When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth
CanvasRenderingContext2D.measureText()	A										<pre><code>ctx.measureText(text);</code></pre>The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains information about the measured text (such as its width for example).	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText
CanvasRenderingContext2D.miterLimit	A										<pre><code>ctx.miterLimit = value;</code></pre>The CanvasRenderingContext2D.miterLimit property of the Canvas 2D API sets the miter limit ratio in space units. When getting, it returns the current value (10.0 by default). When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit
CanvasRenderingContext2D.moveTo()	A										<pre><code>void ctx.moveTo(x, y);\n</code></pre>The CanvasRenderingContext2D.moveTo() method of the Canvas 2D API moves the starting point of a new sub-path to the (x, y) coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo
CanvasRenderingContext2D.putImageData()	A										<pre><code>void ctx.putImageData(imagedata, dx, dy);\nvoid ctx.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n</code></pre>The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the bitmap. If a dirty rectangle is provided, only the pixels from that rectangle are painted.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData
CanvasRenderingContext2D.quadraticCurveTo()	A										<pre><code>void ctx.quadraticCurveTo(cpx, cpy, x, y);\n</code></pre>The CanvasRenderingContext2D.quadraticCurveTo() method of the Canvas 2D API adds a quadratic Bézier curve to the path. It requires two points. The first point is a control point and the second one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the quadratic Bézier curve.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo
CanvasRenderingContext2D.rect()	A										<pre><code>void ctx.rect(x, y, width, height);\n</code></pre>The CanvasRenderingContext2D.rect() method of the Canvas 2D API creates a path for a rectangle at position (x, y) with a size that is determined by width and height. Those four points are connected by straight lines and the sub-path is marked as closed, so that you can fill or stroke this rectangle.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect
CanvasRenderingContext2D.removeHitRegion()	A										<pre><code>void ctx.removeHitRegion(id);\n</code></pre>The CanvasRenderingContext2D.removeHitRegion() method of the Canvas 2D API removes a given hit region from the canvas.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion
CanvasRenderingContext2D.resetTransform()	A										<pre><code>void ctx.resetTransform();\n</code></pre>The CanvasRenderingContext2D.resetTransform() method of the Canvas 2D API resets the current transform by the identity matrix.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform
CanvasRenderingContext2D.restore()	A										<pre><code>void ctx.restore();</code></pre>The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore
CanvasRenderingContext2D.rotate()	A										<pre><code>void ctx.rotate(angle);\n</code></pre>The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate
CanvasRenderingContext2D.save()	A										<pre><code>void ctx.save();</code></pre>The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the canvas by pushing the current state onto a stack.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save
CanvasRenderingContext2D.scale()	A										<pre><code>void ctx.scale(x, y);\n</code></pre>The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation to the canvas units by x horizontally and by y vertically.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale
CanvasRenderingContext2D.scrollPathIntoView()	A										<pre><code>void ctx.scrollPathIntoView();\nvoid ctx.scrollPathIntoView(path);\n</code></pre>The CanvasRenderingContext2D.scrollPathIntoView() method of the Canvas 2D API scrolls the current or given path into the view. It is similar to Element.scrollIntoView().	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scrollPathIntoView
CanvasRenderingContext2D.setLineDash()	A										<pre><code>void ctx.setLineDash(segments);\n</code></pre>The CanvasRenderingContext2D.setLineDash() method of the Canvas 2D API sets the line dash pattern.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash
CanvasRenderingContext2D.setTransform()	A										<pre><code>void ctx.setTransform(a, b, c, d, e, f);\n</code></pre>The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the current transformation to the identity matrix and then invokes a transformation described by the arguments of this method.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform
CanvasRenderingContext2D.shadowBlur	A										<pre><code>ctx.shadowBlur = level;\n</code></pre>The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the level of the blurring effect; this value doesn't correspond to a number of pixels and is not affected by the current transformation matrix. The default value is 0.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur
CanvasRenderingContext2D.shadowColor	A										<pre><code>ctx.shadowColor = color;\n</code></pre>The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the color of the shadow.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor
CanvasRenderingContext2D.shadowOffsetX	A										<pre><code>ctx.shadowOffsetX = offset;\n</code></pre>The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance that the shadow will be offset in horizontal distance.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX
CanvasRenderingContext2D.shadowOffsetY	A										<pre><code>ctx.shadowOffsetY = offset;\n</code></pre>The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance that the shadow will be offset in vertical distance.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY
CanvasRenderingContext2D.stroke()	A										<pre><code>void ctx.stroke();\nvoid ctx.stroke(path);\n</code></pre>The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes the current or given path with the current stroke style using the non-zero winding rule.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke
CanvasRenderingContext2D.strokeRect()	A										<pre><code>void ctx.strokeRect(x, y, width, height);\n</code></pre>The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using the current stroke style.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect
CanvasRenderingContext2D.strokeStyle	A										<pre><code>ctx.strokeStyle = color;\nctx.strokeStyle = gradient;\nctx.strokeStyle = pattern;\n</code></pre>The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the color or style to use for the lines around shapes. The default is #000 (black).	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle
CanvasRenderingContext2D.strokeText()	A										<pre><code>void ctx.strokeText(text, x, y [, maxWidth]);\n</code></pre>The CanvasRenderingContext2D.strokeText() method of the Canvas 2D API strokes a given text at the given (x, y) position. If the optional fourth parameter for a maximum width is provided, the text will be scaled to fit that width.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText
CanvasRenderingContext2D.textAlign	A										<pre><code>ctx.textAlign = "left" || "right" || "center" || "start" || "end";\n</code></pre>The CanvasRenderingContext2D.textAlign property of the Canvas 2D API specifies the current text alignment being used when drawing text. Beware that the alignment is base on the x value of the CanvasRenderingContext2D. fillText method. So if textAlign="center", then the text would be drawn at x-50%*width.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign
CanvasRenderingContext2D.textBaseline	A										<pre><code>ctx.textBaseline = "top" || "hanging" || "middle" || "alphabetic" || "ideographic" || "bottom";\n</code></pre>The CanvasRenderingContext2D.textBaseline property of the Canvas 2D API specifies the current text baseline being used when drawing text.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline
CanvasRenderingContext2D.transform()	A										<pre><code>void ctx.transform(a, b, c, d, e, f);\n</code></pre>The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current transformation with the matrix described by the arguments of this method. You are able to scale, rotate, move and skew the context.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform
CanvasRenderingContext2D.translate()	A										<pre><code>void ctx.translate(x, y);\n</code></pre>The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid.	https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate
Canvas API	A										Added in HTML5, the HTML canvas element can be used to draw graphics via scripting in JavaScript. For example, it can be used to draw graphs, make photo compositions, create animations, or even do real-time video processing or rendering.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API
A basic ray-caster	A										Open in new window	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/A_basic_ray-caster
Drawing DOM objects into a canvas	A										Although it's not trivial (for security reasons), it's possible to draw DOM content—such as HTML —into a canvas. This article, derived from this blog post by Robert O'Callahan, covers how you can do it securely, safely, and in accordance with the specification.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas
Manipulating video using canvas	A										View this live example.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Manipulating_video_using_canvas
Canvas tutorial	A										This tutorial describes how to use the canvas element to draw 2D graphics, starting with the basics. The examples provided should give you some clear ideas what you can do with canvas and will provide code snippets that may get you started in building your own content.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial
Advanced animations	A										We are going to use a ball for our animation studies, so let's first draw that ball onto the canvas. The following code will set us up.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations
Applying styles and colors	A										Up until now we have only seen methods of the drawing context. If we want to apply colors to a shape, there are two important properties we can use: fillStyle and strokeStyle.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Applying_styles_and_colors
Basic animations	A										Probably the biggest limitation is, that once a shape gets drawn, it stays that way. If we need to move it we have to redraw it and everything that was drawn before it. It takes a lot of time to redraw complex frames and the performance depends highly on the speed of the computer it's running on.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations
Basic usage of canvas	A										At first sight a canvas looks like the img element, with the only clear difference being that it doesn't have the src and alt attributes. Indeed, the canvas element has only two attributes, width and height. These are both optional and can also be set using DOM properties. When no width and height attributes are specified, the canvas will initially be 300 pixels wide and 150 pixels high. The element can be sized arbitrarily by CSS, but during rendering the image is scaled to fit its layout size: if the CSS sizing doesn't respect the ratio of the initial canvas, it will appear distorted.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_usage
Compositing and clipping	A										We can not only draw new shapes behind existing shapes but we can also use it to mask off certain areas, clear sections from the canvas (not limited to rectangles like the clearRect() method does) and more.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing
Compositing example	A										This sample program demonstrates a number of compositing operations. The output looks like this:	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing/Example
Drawing shapes with canvas	A										Before we can start drawing, we need to talk about the canvas grid or coordinate space. Our HTML skeleton from the previous page had a canvas element 150 pixels wide and 150 pixels high. To the right, you see this canvas with the default grid overlayed. Normally 1 unit in the grid corresponds to 1 pixel on the canvas. The origin of this grid is positioned in the top left corner at coordinate (0,0). All elements are placed relative to this origin. So the position of the top left corner of the blue square becomes x pixels from the left and y pixels from the top, at coordinate (x,y). Later in this tutorial we'll see how we can translate the origin to a different position, rotate the grid and even scale it, but for now we'll stick to the default.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes
Drawing text	A										The canvas rendering context provides two methods to render text:	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_text
Finale	A										There are a variety of demos and further explanations about canvas on these sites:	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Finale
Hit regions and accessibility	A										The content inside the canvas... /canvas tags can be used as a fallback for browsers which don't support canvas rendering. It's also very useful for assistive technology users (like screen readers) which can read and interpret the sub DOM in it. A good example at html5accessibility.com demonstrates how this can be done:	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility
Optimizing canvas	A										This article aims to provide suggestions for optimizing your use of the canvas element, to ensure that your Web site or app performs well.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas
Pixel manipulation with canvas	A										The ImageData object represents the underlying pixel data of an area of a canvas object. It contains the following read-only attributes:	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas
Transformations	A										Before we look at the transformation methods, let's look at two other methods which are indispensable once you start generating ever more complex drawings.	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Transformations
Using images	A										Importing images into a canvas is basically a two step process:	https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images
CaretPosition	A										The CaretPosition interface represents the caret postion, an indicator for the text insertion point. You can get a CaretPosition using the document.caretPositionFromPoint method.	https://developer.mozilla.org/en-US/docs/Web/API/CaretPosition
CDATASection	A										The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text, such that the symbols  and & do not need escaping as they normally do within XML when used as text.	https://developer.mozilla.org/en-US/docs/Web/API/CDATASection
ChannelMergerNode	A										If ChannelMergerNode has one single output, but as many inputs as there are channels to merge; the amount of inputs is defined as a parameter of its constructor and the call to AudioContext.createChannelMerger. In the case that no value is given, it will default to 6.	https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode
ChannelSplitterNode	A										If your ChannelSplitterNode always has one single input, the amount of outputs is defined by a parameter on its constructor and the call to AudioContext.createChannelSplitter(). In the case that no value is given, it will default to 6. If there are fewer channels in the input than there are outputs, supernumerary outputs are silent.	https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode
Channel Messaging API	A										The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.	https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API
Using channel messaging	A										The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, or two documents via a SharedWorker) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end. In this article we'll explore the basics of using this technology.	https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging
CharacterData	A										The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData : it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.	https://developer.mozilla.org/en-US/docs/Web/API/CharacterData
ChildNode	A										The ChildNode interface contains methods that are particular to Node objects that can have a parent.	https://developer.mozilla.org/en-US/docs/Web/API/ChildNode
ChildNode.after()	A										<pre><code>[Throws, Unscopable] \nvoid ChildNode.after((Node or DOMString)... nodes);\n</code></pre>The ChildNode.after() method inserts a set of Node or DOMString objects in the children list of this ChildNode 's parent, just after this ChildNode. DOMString objects are inserted as equivalent Text nodes.	https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after
ChildNode.before()	A										<pre><code>[Throws, Unscopable] \nvoid ChildNode.before((Node or DOMString)... nodes);\n</code></pre>The ChildNode.before method inserts a set of Node or DOMString objects in the children list of this ChildNode 's parent, just before this ChildNode. DOMString objects are inserted as equivalent Text nodes.	https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before
ChildNode.remove()	A										<pre><code>elementNodeReference.remove(); \n</code></pre>The ChildNode.remove() method removes the object from the tree it belongs to.	https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove
ChildNode.replaceWith()	A										<pre><code>[Throws, Unscopable] \nvoid ChildNode.replaceWith((Node or DOMString)... nodes);\n</code></pre>The ChildNode.replaceWith() method replaces this ChildNode in the children list of its parent with a set of Node or DOMString objects. DOMString objects are inserted as equivalent Text nodes.	https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith
ChromeWorker	A										If you're developing privileged code, and would like to create a worker that can use js-ctypes to perform calls to native code, you can do so by using ChromeWorker instead of the standard Worker object. It works exactly like a standard Worker, except that it has access to js-ctypes via a global ctypes object available in the global scope of the worker. Examples of ChromeWorker's using js-ctypes are availabe on Github and are linked to from the See Also section below. To use a postMessage with callback version of ChromeWorker that features promises, see PromiseWorker.	https://developer.mozilla.org/en-US/docs/Web/API/ChromeWorker
Client	A										The Client interface of the ServiceWorker API represents the scope of a service worker client. A service worker client is either a document in a browser context or a SharedWorker, which is controlled by an active worker. A client object acts as a snapshot representation of its associated service worker client in the scope of a service worker.	https://developer.mozilla.org/en-US/docs/Web/API/Client
Client.frameType	A										<pre><code>var myFrameType = Client.frameType;</code></pre>The frameType read-only property of the Client interface indicates the type of browsing context of the current Client. This value can be one of auxiliary, top-level, nested, or none.	https://developer.mozilla.org/en-US/docs/Web/API/Client/frameType
Client.id	A										<pre><code>var clientId = Client.id;</code></pre>The id read-only property of the Client interface returns the universally unique identifier of the Client object.	https://developer.mozilla.org/en-US/docs/Web/API/Client/id
Client.postMessage()	A										<pre><code>Client.postMessage(message[, transfer]);</code></pre>The Client.postMessage() method of the Client interface allows a service worker client to send a message to a ServiceWorker.	https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage
Client.url	A										<pre><code>var clientUrl = Client.url;</code></pre>The url read-only property of the Client interface returns the URL of the current service worker client.	https://developer.mozilla.org/en-US/docs/Web/API/Client/url
Clients	A										The Clients interface of the Service Workers API represents a container for a list of Client objects.	https://developer.mozilla.org/en-US/docs/Web/API/Clients
Clients.claim()	A										<pre><code>ServiceWorkerClients.claim().then(function() {\n  // Do something\n});\n</code></pre>The claim() method of the of the Clients interface allows an active Service Worker to set itself as the active worker for a client page when the worker and the page are in the same scope. This triggers an oncontrollerchange event on any client pages within the Service Worker's scope.	https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim
Clients.get()	A										<pre><code>self.clients.get(id).then(function(client) {\n  // do something with your returned client\n});</code></pre>The get () method of the Clients interface gets a service worker client matching a given id and returns it in a Promise.	https://developer.mozilla.org/en-US/docs/Web/API/Clients/get
Clients.matchAll()	A										<pre><code>ServiceWorkerClients.matchAll(options).then(function(clients) {\n  // do something with your clients list\n});</code></pre>The matchAll() method of the Clients interface returns a Promise for a list of service worker clients. Include the options parameter to return all service worker clients whose origin is the same as the associated service worker's origin. If options are not included, the method returns only the service worker clients controlled by the service worker.	https://developer.mozilla.org/en-US/docs/Web/API/Clients/matchAll
Clients.openWindow()	A										<pre><code>ServiceWorkerClients.openWindow(url).then(function(WindowClient) {\n  // do something with your WindowClient\n});</code></pre>The openWindow() method of the Clients interface creates a new top level browsing context and loads a given URL. If the calling script doesn't have permission to show popups, openWindow() will throw an InvalidAccessError.	https://developer.mozilla.org/en-US/docs/Web/API/Clients/openWindow
ClipboardEvent	A										The ClipboardEvent interface represents events providing information related to modification of the clipboard, that is cut, copy, and paste events.	https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent
ClipboardEvent.clipboardData	A										<pre><code>data = ClipboardEvent.clipboardData</code></pre>The ClipboardEvent.clipboardData property holds a DataTransfer object, which can be used:	https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData
ClipboardEvent()	A										<pre><code>clipboardEvent = new ClipboardEvent(type, {dataType: aMimeType, \n                                           data    : someData});\n</code></pre>The ClipboardEvent() constructor returns a newly created ClipboardEvent, representing an event providing information related to modification of the clipboard, that is cut, copy, and paste events.	https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/ClipboardEvent
CloseEvent	A										A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.	https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
CloseEvent()	A										<pre><code> event = new CloseEvent(typeArg, closeEventInit);</code></pre>The CloseEvent() constructor creates a new CloseEvent.	https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/CloseEvent
CloseEvent.initCloseEvent()	A										<pre><code>event.initMouseEvent(type, canBubble, cancelable, wasClean, reasonCode, reason);</code></pre>The CloseEvent.initCloseEvent() method initializes the value of a close event once it's been created (normally using the Document.createEvent() method).	https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/initCloseEvent
Comment	A										The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between ' !-- ' and ' -- '. In XML, the character sequence ' -- ' cannot be used within a comment.	https://developer.mozilla.org/en-US/docs/Web/API/Comment
Comment()	A										<pre><code>comment1 = new Comment(); // Create an empty comment\ncomment2 = new Comment("This is a comment");\n</code></pre>The Comment() constructor returns a newly created Comment object with the optional DOMString given in parameter as its textual content.	https://developer.mozilla.org/en-US/docs/Web/API/Comment/Comment
CompositionEvent	A										The DOM CompositionEvent represents events that occur due to the user indirectly entering text.	https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
Connection.bandwidth	A										<pre><code>speed = connection.bandwidth</code></pre>The Connection.bandwidth read-only property is a double representing the estimated download bandwidth (in megabytes per second) of the current connection.	https://developer.mozilla.org/en-US/docs/Web/API/Connection/bandwidth
Connection.metered	A										<pre><code>metered = connection.metered</code></pre>The Connection.metered read-only property is a Boolean flag indicating if the connection is metered (e.g. pay-per-use).	https://developer.mozilla.org/en-US/docs/Web/API/Connection/metered
Connection.onchange	A										<pre><code>connection.onchange = funcRef;</code></pre>The Connection.onchange property represent an event listener for change events. These events occur when the connection information change.	https://developer.mozilla.org/en-US/docs/Web/API/Connection/onchange
Console	A										The Console object provides access to the browser's debugging console (e.g., the Web Console in Firefox). The specifics of how it works vary from browser to browser, but there is a de facto set of features that are typically provided.	https://developer.mozilla.org/en-US/docs/Web/API/Console
Console.assert()	A										<pre><code>console.assert(assertion, obj1 [, obj2, ..., objN]);\nconsole.assert(assertion, msg [, subst1, ..., substN]); // c-like message formatting\n</code></pre>Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.	https://developer.mozilla.org/en-US/docs/Web/API/console/assert
clear()	A										<pre><code>console.clear();\n</code></pre>Clears the console.	https://developer.mozilla.org/en-US/docs/Web/API/Console/clear
Console.count()	A										<pre><code>console.count([label]);\n</code></pre>Logs the number of times that this particular call to count() has been called. This function takes an optional argument label.	https://developer.mozilla.org/en-US/docs/Web/API/Console/count
Console.dir()	A										<pre><code>console.dir(object);\n</code></pre>Displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.	https://developer.mozilla.org/en-US/docs/Web/API/Console/dir
Console.dirxml()	A										<pre><code>console.dirxml(object);\n</code></pre>Displays an interactive tree of the descendant elements of the specified XML/HTML element. If it is not possible to display as an element the JavaScript Object view is shown instead. The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.	https://developer.mozilla.org/en-US/docs/Web/API/Console/dirxml
Console.error()	A										<pre><code>console.error(obj1 [, obj2, ..., objN]);\nconsole.error(msg [, subst1, ..., substN]);\nconsole.exception(obj1 [, obj2, ..., objN]);\nconsole.exception(msg [, subst1, ..., substN]);\n</code></pre>Outputs an error message to the Web Console.	https://developer.mozilla.org/en-US/docs/Web/API/Console/error
Console.group()	A										<pre><code>console.group();\n</code></pre>Creates a new inline group in the Web Console log. This indents all following output by an additional level, until console.groupEnd() is called.	https://developer.mozilla.org/en-US/docs/Web/API/Console/group
Console.groupCollapsed()	A										<pre><code>console.groupCollapsed();\n</code></pre>Creates a new inline group in the Web Console. Unlike console.group(), however, the new group is created collapsed. The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.	https://developer.mozilla.org/en-US/docs/Web/API/Console/groupCollapsed
Console.groupEnd()	A										<pre><code>console.groupEnd();\n</code></pre>Exits the current inline group in the Web Console. See Using groups in the console in the console documentation for details and examples.	https://developer.mozilla.org/en-US/docs/Web/API/Console/groupEnd
Console.info()	A										<pre><code>console.info(obj1 [, obj2, ..., objN]);\nconsole.info(msg [, subst1, ..., substN]);\n</code></pre>Outputs an informational message to the Web Console. In Firefox and Chrome, a small "i" icon is displayed next to these items in the Web Console's log.	https://developer.mozilla.org/en-US/docs/Web/API/Console/info
Console.log()	A										<pre><code>console.log(obj1 [, obj2, ..., objN]);\nconsole.log(msg [, subst1, ..., substN]);\n</code></pre>Outputs a message to the Web Console.	https://developer.mozilla.org/en-US/docs/Web/API/Console/log
Console.profile()	A										<pre><code>console.profile(profileName);\n</code></pre>Starts recording a performance profile (for example, the Firefox performance tool).	https://developer.mozilla.org/en-US/docs/Web/API/Console/profile
Console.profileEnd()	A										<pre><code>console.profileEnd(profileName);\n</code></pre>The profileEnd method stops recording a profile previously started with Console.profile().	https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
Console.table()	A										<pre><code>console.table(data [, columns]);\n</code></pre>Displays tabular data as a table.	https://developer.mozilla.org/en-US/docs/Web/API/Console/table
Console.time()	A										<pre><code>console.time(label);\n</code></pre>Starts a timer you can use to track how long an operation takes. You give each timer a unique name, and may have up to 10,000 timers running on a given page. When you call console.timeEnd() with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.	https://developer.mozilla.org/en-US/docs/Web/API/Console/time
Console.timeEnd()	A										<pre><code>console.timeEnd(label);\n</code></pre>Stops a timer that was previously started by calling console.time().	https://developer.mozilla.org/en-US/docs/Web/API/Console/timeEnd
Console.timeStamp()	A										<pre><code>console.timeStamp(label);\n</code></pre>Adds a single marker to the browser's Timeline or Waterfall tool. This lets you correlate a point in your code with the other events recorded in the timeline, such as layout and paint events.	https://developer.mozilla.org/en-US/docs/Web/API/Console/timeStamp
Console.trace()	A										<pre><code>console.trace();\n</code></pre>Outputs a stack trace to the Web Console.	https://developer.mozilla.org/en-US/docs/Web/API/Console/trace
Console.warn()	A										<pre><code>console.warn(obj1 [, obj2, ..., objN]);\nconsole.warn(msg [, subst1, ..., substN]);\n</code></pre>Outputs a warning message to the Web Console.	https://developer.mozilla.org/en-US/docs/Web/API/Console/warn
ConvolverNode	A										The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.	https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode
ConvolverNode.buffer	A										<pre><code>var audioCtx = new AudioContext();\nvar convolver = audioCtx.createConvolver();\nconvolver.buffer = myAudioBuffer;\n</code></pre>An AudioBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/buffer
ConvolverNode.normalize	A										<pre><code>var audioCtx = new AudioContext();\nvar convolver = audioCtx.createConvolver();\nconvolver.normalize = false;\n</code></pre>A boolean.	https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/normalize
Coordinates	A										The Coordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.	https://developer.mozilla.org/en-US/docs/Web/API/Coordinates
Coordinates.accuracy	A										<pre><code>acc = coordinates.accuracy\n</code></pre>The Coordinates.accuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the Coordinates.latitude and Coordinates.longitude properties expressed in meters.	https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/accuracy
Coordinates.altitude	A										<pre><code>alt = coordinates.altitude\n</code></pre>The Coordinates.altitude read-only property is a double representing the altitude of the position in meters, relative to sea level. This value is null if the implementation cannot provide this data.	https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/altitude
Coordinates.altitudeAccuracy	A										<pre><code>altAcc = coordinates.altitudeAccuracy\n</code></pre>The Coordinates.altitudeAccuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the altitude expressed in meters. This value is null if the implementation doesn't support measuring altitude.	https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/altitudeAccuracy
Coordinates.heading	A										<pre><code>heading = coordinates.heading\n</code></pre>The Coordinates.heading read-only property is a double representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading due north the device is. Zero degrees represents true true north, and the direction is determined clockwise (which means that east is 90 degrees and west is 270 degrees). If Coordinates.speed is 0, heading is NaN. If the device is not able to provide heading information, this value is null.	https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/heading
Coordinates.latitude	A										<pre><code>lat = coordinates.latitude\n</code></pre>The Coordinates.latitude read-only property is a double representing the latitude of the position in decimal degrees.	https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/latitude
Coordinates.longitude	A										<pre><code>lon = coordinates.longitude\n</code></pre>The Coordinates.longitude read-only property is a double representing the longitude of the position in decimal degrees.	https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/longitude
Coordinates.speed	A										<pre><code>speed = coordinates.speed\n</code></pre>The Coordinates.speed read-only property is a double representing the velocity of the device in meters per second. This value is null if the implementation is not able to measure it.	https://developer.mozilla.org/en-US/docs/Web/API/Coordinates/speed
Credential	A										The Credential interface of the the Credential Management API provides information about an entity as a prerequisite to a trust decision.	https://developer.mozilla.org/en-US/docs/Web/API/Credential
iconURL	A										<pre><code>var iconURL = Credential.iconURL;</code></pre>The iconURL property of the Credential interface returns a DOMString containing the URL of an image for the credential. The URL must be from a secure context.	https://developer.mozilla.org/en-US/docs/Web/API/Credential/iconURL
id	A										<pre><code>var id = Credential.id;</code></pre>The id property of the Credential interface returns  a DOMString containing the credential's identifier. This might be any one of a GUID, username, or email address.	https://developer.mozilla.org/en-US/docs/Web/API/Credential/id
name	A										<pre><code>var credName = Credentials.name;</code></pre>The name property of the Credential interface returns a DOMString containing a name associated with the credential. This is intended to be a human-readable public name.	https://developer.mozilla.org/en-US/docs/Web/API/Credential/name
type	A										<pre><code>var credType = Credentials.type;</code></pre>The type property of the Credential interface returns a DOMString containing the credential's type. Valid values are password and federated.	https://developer.mozilla.org/en-US/docs/Web/API/Credential/type
CredentialsContainer	A										The CredentialsContainer interface of the the Credential Management API exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out haappen. This interface is accessible from Navigator.credentials.	https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer
CredentialsContainer.get()	A										<pre><code>CredentialsContainer.get([options]).then(function(Credential) { ... })</code></pre>The get() method of the CredentialsContainer interface returns a Promise to a Credential instance that matches the provided parameters.	https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get
CredentialsContainer.requireUserMediation()	A										<pre><code>CredentialsContainer.requireUserMediation().then(function() { ... })</code></pre>The requireUserMediation() method of the CredentialsContainer interface returns an empty Promise after requiring user mediation for credentials returned form a particular origin. Mediation is a per origin indication stored in the browser that the user doesn't want automatic sign-in.	https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/requireUserMediation
CredentialsContainer.store()	A										<pre><code>CredentialsContainer.store(Credential).then(function(Credential) { ... } )</code></pre>The store() method of the CredentialsContainer stores a set of credentials for a user inside a provided Credential instance and returns that instance in a Promise.	https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/store
Credential Management API	A										This API lets websites interact with a user agent’s password system so that websites can deal in a uniform way with site credentials and user agents can provide better assistance with the management of their credentials. For example, user agents have a particularly hard time dealing with federated identity providers or esoteric sign-in mechanisms that use more than just a username and password. To address these problems, the Credential Management API provides ways for a website to store and retrieve different types of password credentials. This give users capabilities such as seeing the federated account they used to sign on to a site, or resuming a session without the explicit sign-in flow of an expired session.	https://developer.mozilla.org/en-US/docs/Web/API/Credential_Management_API
Crypto	A										The Crypto interface represents basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.	https://developer.mozilla.org/en-US/docs/Web/API/Crypto
Crypto.subtle	A										<pre><code>var crypto = crypto.subtle;</code></pre>The Crypto.subtle read-only property returns a SubtleCrypto object allowing to perform cryptographical operations.	https://developer.mozilla.org/en-US/docs/Web/API/Crypto/subtle
CryptoKey	A										The CryptoKey interface represents a cryptographic key derived from a specific key algorithm.	https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey
CryptoKey.algorithm	A										<pre><code>result = key.algorithm\n</code></pre>The CryptoKey.algorithm read-only property is an opaque value containing all the information about the algorithm related to the key.	https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey/algorithm
CryptoKey.extractable	A										<pre><code>result = key.extractable\n</code></pre>The CryptoKey.extractable read-only property that indicates if the raw material key can be extracted, for example for archiving it.	https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey/extractable
CryptoKey.type	A										<pre><code>result = key.type\n</code></pre>The CryptoKey.type read-only property that indicates the type of the key: if it is the key for a symmetric algorithm ("secret") or for an asymmetric algorithm ("public" or "private", depending of its purpose).	https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey/type
CryptoKey.usages	A										<pre><code>result = key.usages\n</code></pre>The CryptoKey.usages read-only property is an array of enumerated that indicates the purposes of the key.	https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey/usages
CSS	A										The CSS interface holds useful CSS-related methods. No object with this interface are implemented: it contains only static methods and therefore is a utilitarian interface.	https://developer.mozilla.org/en-US/docs/Web/API/CSS
CSS.escape()	A										<pre><code>escapedStr = CSS.escape(str);\n</code></pre>The CSS.escape() static method returns a DOMString containing the escaped string passed as parameter, mostly for use as part of a CSS selector.	https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape
CSS.supports()	A										<pre><code>boolValue = CSS.supports(propertyName, value);\nboolValue = CSS.supports(supportCondition);\n</code></pre>The CSS.supports() static methods returns a Boolean value indicating if the browser supports a given CSS feature, or not.	https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports
CSSConditionRule	A										<pre><code>interface CSSConditionRule : CSSGroupingRule {\n    attribute DOMString conditionText;\n}\n</code></pre>An object implementing the CSSConditionRule interface represents a single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule.	https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule
CSSCounterStyleRule	A										The CSSCounterStyleRule interface represents an @counter-style at-rule.	https://developer.mozilla.org/en-US/docs/Web/API/CSSCounterStyleRule
CSSGroupingRule	A										An object implementing the CSSGroupingRule interface represents any CSS at-rule that contains other rules nested within it.	https://developer.mozilla.org/en-US/docs/Web/API/CSSGroupingRule
CSSKeyframeRule	A										The CSSKeyframeRule interface describes an object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a @keyframes at-rule. It implements the CSSRule interface with a type value of 8 (CSSRule.KEYFRAME_RULE).	https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframeRule
CSSKeyframesRule	A										The CSSKeyframesRule interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole @keyframes at-rule. It implements the CSSRule interface with a type value of 7 (CSSRule.KEYFRAMES_RULE).	https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule
CSSMatrix	A										A CSSMatrix represents a homogeneous 4x4 matrix to which 2D or 3D transforms can be applied. This class was allegedly part of CSS Transitions Module Level 3 at some point, but is not present in the current Working Draft. Use DOMMatrix instead.	https://developer.mozilla.org/en-US/docs/Web/API/CSSMatrix
CSSMediaRule	A										<pre><code>interface CSSMediaRule : CSSConditionRule {\n    readonly attribute MediaList media;\n}\n</code></pre>The CSSMediaRule is an interface representing a single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE).	https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule
CSSNamespaceRule	A										The CSSNamespaceRule interface describes an object representing a single CSS @namespace at-rule. It implements the CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE).	https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule
namespaceURI	A										<pre><code>var namespaceURI = CSSNamespaceRule.namespaceURI</code></pre>The CSSNamespaceRule.namespaceURI read-only property returns a DOMString containing the text of the URI of the given namespace.	https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule/namespaceURI
prefix	A										<pre><code>var prefix = CSSNamespaceRule.prefix</code></pre>The CSSNamespaceRule.prefix read-only property returns a DOMString with the name of the prefix associated to this namespace. If there is no such prefix, returns null.	https://developer.mozilla.org/en-US/docs/Web/API/CSSNamespaceRule/prefix
CSSPageRule	A										<pre><code>interface CSSPageRule : CSSRule {\n  attribute DOMString selectorText;\n  readonly attribute CSSStyleDeclaration style;\n};\n</code></pre>CSSPageRule is an interface representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE).	https://developer.mozilla.org/en-US/docs/Web/API/CSSPageRule
CSSPrimitiveValue	A										The CSSPrimitiveValue interface derives from the CSSValue interface and represents the current computed value of a CSS property.	https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue
CSSPrimitiveValue.getCounterValue()	A										<pre><code>var counterValue = cssPrimitiveValue.getCounterValue();</code></pre>The getCounterValue() method of the CSSPrimitiveValue interface is used to get the counter value. If this CSS value doesn't contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface.	https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue/getCounterValue
CSSPrimitiveValue.getFloatValue()	A										<pre><code>var floatValue = cssPrimitiveValue.getFloatValue(unit);</code></pre>The getFloatValue() method of the CSSPrimitiveValue interface is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a DOMException is raised.	https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue/getFloatValue
CSSPrimitiveValue.getRectValue()	A										<pre><code>var rectValue = cssPrimitiveValue.getRectValue();</code></pre>The getRectValue() method of the CSSPrimitiveValue interface is used to get a rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface.	https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue/getRectValue
CSSPrimitiveValue.getRGBColorValue()	A										<pre><code>var rgbColorValue = cssPrimitiveValue.getRGBColorValue();</code></pre>The getRGBColorValue() method of the CSSPrimitiveValue interface is used to get an RGB color value. If this CSS value doesn't contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface.	https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue/getRGBColorValue
CSSPrimitiveValue.getStringValue()	A										<pre><code>var stringValue = cssPrimitiveValue.getStringValue();</code></pre>The getStringValue() method of the CSSPrimitiveValue interface is used to get a string value. If this CSS value doesn't contain a string value, a DOMException is raised.	https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue/getStringValue
CSSPrimitiveValue.primitiveType	A										<pre><code>type = cssPrimitiveValue.primitiveType;\n</code></pre>The primitiveType read-only property of the CSSPrimitiveValue interface represents the type of a CSS value.	https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue/primitiveType
CSSPrimitiveValue.setFloatValue()	A										<pre><code>cssPrimitiveValue.setFloatValue(unitType, floatValue);</code></pre>The setFloatValue() method of the CSSPrimitiveValue interface is used to set a float value. If the property attached to this value can't accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised.	https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue/setFloatValue
CSSPrimitiveValue.setStringValue()	A										<pre><code>cssPrimitiveValue.setStringValue(stringType, stringValue);</code></pre>The setStringValue() method of the CSSPrimitiveValue interface is used to set a string value. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised.	https://developer.mozilla.org/en-US/docs/Web/API/CSSPrimitiveValue/setStringValue
CSSRule	A										The CSSRule interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.	https://developer.mozilla.org/en-US/docs/Web/API/CSSRule
CSSRule.cssText	A										<pre><code>string = cssRule.cssText \n</code></pre>cssText returns the actual text of a CSSStyleSheet style-rule.	https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText
CSSRule.parentStyleSheet	A										parentStyleSheet returns the stylesheet object in which the current rule is defined.	https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/parentStyleSheet
CSSRuleList	A										<pre><code>// get the first style sheet&#8217;s first rule\nvar first_rule = document.styleSheets[0].cssRules[0];\n</code></pre>A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects.	https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList
CSSStyleDeclaration	A										<pre><code>var styleObj= document.styleSheets[0].cssRules[0].style;\nalert(styleObj.cssText);\nfor (var i = styleObj.length-1; i &gt;= 0; i--) {\n   var nameString = styleObj[i];\n   styleObj.removeProperty(nameString);\n}\nalert(styleObj.cssText);</code></pre>CSSStyleDeclaration represents a collection of CSS property-value pairs. It is used in a few APIs:	https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration
CSSStyleDeclaration.cssText	A										<pre><code>string = elem.style.cssText \n</code></pre>cssText returns or sets the text of the element's inline&#160;style declaration only. To be able to set a stylesheet rule dynamically, see Using dynamic styling information.	https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssText
CSSStyleRule	A										CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE).	https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule
CSSStyleRule.selectorText	A										<pre><code>string = cssRule.selectorText \n</code></pre>The CSSRule.selectorText&#160;property gets the textual representation of the selector for the rule set. This is implemented in a readonly manner; to set stylesheet rules dynamically, see Using dynamic styling information.	https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/selectorText
CSSStyleRule.style	A										<pre><code>styleObj = cssRule.style\n</code></pre>The CSSRule.style property is the CSSStyleDeclaration interface for the declaration block of the CSSRule.	https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule/style
CSSStyleSheet	A										The CSSStyleSheet interface represents a single CSS style sheet. It inherits properties and methods from its parent, StyleSheet.	https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet
CSSStyleSheet.deleteRule()	A										<pre><code>stylesheet.deleteRule(index) \n</code></pre>The CSSStyleSheet.deleteRule() method removes a style rule from the current style sheet object.	https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/deleteRule
CSSStyleSheet.insertRule()	A										CSSStyleSheet.insertRule() method inserts a new CSS rule into the current style sheet. (with some restrictions)	https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule
CSSSupportsRule	A										<pre><code>interface CSSSupportsRule : CSSConditionRule {\n}\n</code></pre>The CSSSupportsRule interface describes an object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE).	https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule
CSSValue	A										The CSSValue interface represents the current computed value of a CSS property.	https://developer.mozilla.org/en-US/docs/Web/API/CSSValue
CSSValue.cssText	A										<pre><code>cssText = cssValue.cssText;\n</code></pre>The cssText property of the CSSValue interface represents the current computed CSS property value.	https://developer.mozilla.org/en-US/docs/Web/API/CSSValue/cssText
CSSValue.cssValueType	A										<pre><code>cssValueType = cssValue.cssValueType;\n</code></pre>The cssValueType read-only property of the CSSValue interface represents the type of the current computed CSS property value.	https://developer.mozilla.org/en-US/docs/Web/API/CSSValue/cssValueType
CSSValueList	A										The CSSValueList interface derives from the CSSValue interface and provides the abstraction of an ordered collection of CSS values.	https://developer.mozilla.org/en-US/docs/Web/API/CSSValueList
CSSValueList.item()	A										<pre><code>var cssValue = cssValueList.item(index);</code></pre>The item() method of the CSSValueList interface is used to retrieve a CSSValue by ordinal index.	https://developer.mozilla.org/en-US/docs/Web/API/CSSValueList/item
CSSValueList.length	A										<pre><code>var length = cssValueList.length;\n</code></pre>The length read-only property of the CSSValueList interface represents the number of CSSValue s in the list. The range of valid values of the indices is 0 to length-1 inclusive.	https://developer.mozilla.org/en-US/docs/Web/API/CSSValueList/length
CSS Counter Styles	A										The CSS Counter Styles module allows to define custom counter styles, which can be used for CSS list-marker and generated-content counters.	https://developer.mozilla.org/en-US/docs/Web/API/CSS_Counter_Styles
CSS Font Loading API	A										The CSS Font Loading API provides events and interfaces for dynamically loading font resources.	https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API
CSS Object Model	A										The CSS Object Model is a set of APIs allowing to manipulate CSS from JavaScript. It is the pendant of DOM and HTML APIs, but for CSS. It allows to read and modify CSS style dynamically.	https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model
Determining the dimensions of elements	A										There are several properties you can look at in order to determine the width and height of elements, and it can be tricky to determine which is the right one for your needs. This article is designed to help you make that decision.  Note that all these properties are read-only.  If you want to set the width and height of an element, use width and height ; or, the overriding min-width and max-width, and min-height and max-height properties.	https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements
Managing screen orientation	A										Screen orientation is something slightly different than device orientation. Even if a device doesn't have the capacity to detect its own orientation, a screen always has one. And if a device is able to know its orientation, it's good to have the ability to control the screen orientation in order to preserve or adapt the interface of a web application.	https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Managing_screen_orientation
Using dynamic styling information	A										The CSS Object Model (CSSOM), part of the DOM, exposes specific interfaces allowing manipulation of a wide amount of information regarding CSS. Initially defined in the DOM Level 2 Style recommendation, these interfaces forms now a specification, CSS Object Model (CSSOM) which aims at superseding it.	https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information
CustomEvent	A										This interface inherits properties from its parent, Event :	https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent
CustomEvent()	A										<pre><code> event = new CustomEvent(typeArg, customEventInit);</code></pre>The CustomEvent() constructor creates a new CustomEvent.	https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
CustomEvent.initCustomEvent()	A										<pre><code>event.initCustomEvent(type, canBubble, cancelable, detail);\n</code></pre>The CustomEvent.initCustomEvent() method initializes a CustomEvent object. If the event has already been dispatched, this method does nothing.	https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/initCustomEvent
DataTransfer	A										The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer
DataTransfer.addElement()	A										<pre><code>void dataTransfer.addElement(el);\n</code></pre>The DataTransfer.addElement() method sets the drag source to the given element. This element will be the element to which drag and dragend events are fired, and not the defaut target (the node that was dragged).	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/addElement
DataTransfer.clearData()	A										<pre><code>DataTransfer.clearData([format]);\n</code></pre>The DataTransfer.clearData() method removes the drag operation's drag data for the given type. If data for the given type does not exist, this method does nothing.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/clearData
DataTransfer.dropEffect	A										<pre><code>dataTransfer.dropEffect;\n</code></pre>The DataTransfer.dropEffect property controls the feedback (typically visual) the user is given during a drag and drop operation. It will affect which cursor is displayed while dragging. For example, when the user hovers over a target drop element, the browser's cursor may indicate which type of operation will occur.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect
DataTransfer.effectAllowed	A										<pre><code>dataTransfer.effectAllowed;\n</code></pre>The DataTransfer.effectAllowed property specifies the effect that is allowed for a drag operation. The copy operation is used to indicate that the data being dragged will be copied from its present location to the drop location. The move operation is used to indicate that the data being dragged will be moved, and the link operation is used to indicate that some form of relationship or connection will be created between the source and drop locations.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed
DataTransfer.files	A										<pre><code>dataTransfer.files;\n</code></pre>The DataTransfer.files property is a list of the files in the drag operation. If the operation includes no files, the list is empty.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files
DataTransfer.getData()	A										<pre><code>DOMString dataTransfer.getData(format);\n</code></pre>The DataTransfer.getData() method retrieves drag data (as a DOMString) for the specified type. If the drag operation does not include data, this method returns an empty string.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/getData
DataTransfer.items	A										<pre><code>dataTransfer.items;\n</code></pre>The DataTransfer.items property is a list of the data transfer items in a drag operation. The list includes one item for each item in the operation and if the operation had no items, the list is empty.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items
DataTransfer.mozClearDataAt()	A										<pre><code>void dataTransfer.mozClearDataAt([type], index);\n</code></pre>The DataTransfer.mozClearDataAt() method removes the data associated with the given format for an item at the specified index. The index must be in the range from zero to the number of items minus one.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozClearDataAt
DataTransfer.mozCursor	A										<pre><code>dataTransfer.mozCursor;\n</code></pre>The DataTransfer.mozCursor property returns or sets the drag cursor's state. This is primarily used to control the cursor during tab drags.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozCursor
DataTransfer.mozGetDataAt()	A										<pre><code>nsIVariant dataTransfer.mozGetDataAt([type], index);\n</code></pre>The DataTransfer.mozGetDataAt() method is used to retrieve an item in the drag event's data transfer object, based on a given format and index. This method returns null if the specified item does not exist or if the index is not in the range from zero to the number of items minus one.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozGetDataAt
DataTransfer.mozItemCount	A										<pre><code>dataTransfer.mozItemCount;\n</code></pre>The DataTransfer.mozItemCount property returns the number of items being dragged. This can be used, for example, to get the number of files being dragged.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozItemCount
DataTransfer.mozSetDataAt()	A										<pre><code>void dataTransfer.mozSetDataAt([type], data, index);\n</code></pre>The DataTransfer.mozSetDataAt() method is used to add data to a specific index in the drag event's data transfer object.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozSetDataAt
DataTransfer.mozSourceNode	A										<pre><code>dataTransfer.mozSourceNode;\n</code></pre>The DataTransfer.mozSourceNode property is used to determine the Node over which the mouse cursor was located when the the drag operation was initiated (for example, when a button was clicked). For external drags or if the calling function cannot reach the node, null is returned.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozSourceNode
DataTransfer.mozTypesAt()	A										<pre><code>nsIVariant dataTransfer.mozTypesAt(index);\n</code></pre>The DataTransfer.mozTypesAt() method returns a list of the format types that are stored for an item at the specified index. If the index is not in the range from 0 to the number of items minus one, an empty string list is returned.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozTypesAt
DataTransfer.mozUserCancelled	A										<pre><code>dataTransfer.mozUserCancelled;\n</code></pre>The DataTransfer.mozUserCancelled property is used in the dragend event handler to determine if the user canceled the drag or not. If the user canceled the event, the property returns true and returns false otherwise. This property only applies to the dragend event.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozUserCancelled
DataTransfer.setData()	A										<pre><code>void dataTransfer.setData(format, data);\n</code></pre>The DataTransfer.setData() method sets the drag operation's drag data to the specified data and type. If data for the given type does not exist, it is added at the end of the drag data store, such that the last item in the types list will be the new type. If data for the given type already exists, the existing data is replaced in the same position. That is, the order of the types list is not changed when replacing data of the same type.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setData
DataTransfer.setDragImage()	A										<pre><code>void dataTransfer.setDragImage(img, xOffset, yOffset);\n</code></pre>When a drag occurs, a translucent image is generated from the drag target (the element the dragstart event is fired at), and follows the mouse pointer during the drag. This image is created automatically, so you do not need to create it yourself. However, if a custom image is desired, the DataTransfer.setDragImage() method can be used to set the custom image to be used.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage
DataTransfer.types	A										<pre><code>dataTransfer.types;\n</code></pre>The DataTransfer.types read-only property is an array of the drag data formats (as strings) that were set in the dragstart event. The order of the formats is the same order as the data included in the drag operation.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types
DataTransferItem	A										The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem
DataTransferItem.getAsFile()	A										<pre><code>File = DataTransferItem.getAsFile();\n</code></pre>If the item is a file, the DataTransferItem.getAsFile() method returns the drag data item's File object. If the item is not a file, this method returns null.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFile
DataTransferItem.getAsString()	A										<pre><code>dataTransferItem.getAsString(callback);\n</code></pre>The DataTransferItem.getAsString() method invokes the given callback with the drag data item's string data as the argument if the item's kind is a Plain unicode string (i.e. kind is string).	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsString
DataTransferItem.kind	A										<pre><code>var itemKind = DataTransferItem.kind;\n</code></pre>The read-only DataTransferItem.kind property returns a DataTransferItem representing the drag data item kind: some text or some file.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/kind
DataTransferItem.type	A										<pre><code>dataItem.type;\n</code></pre>The read-only DataTransferItem.type property returns the type (format) of the DataTransferItem object representing the drag data item. The type is a Unicode string generally given by a MIME type, although a MIME type is not required.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/type
DataTransferItemList	A										The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList
DataTransferItemList.add()	A										<pre><code>DataTransferItem = DataTransferItemList.add(data, type);\nDataTransferItem = DataTransferItemList.add(file);\n</code></pre>The DataTransferItemList.add() method creates a new DataTransferItem using the specified data and adds it to the drag data list. The item may be a File or a string of a given type. If the item is successfully added to the list, the newly-created DataTransferItem object is returned.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/add
DataTransferItemList.clear()	A										<pre><code>DataTransferItemList.clear();\n</code></pre>The DataTransferItemList.clear() method removes all DataTransferItem objects from the drag data items list, leaving the list empty.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/clear
DataTransferItemList.DataTransferItem()	A										<pre><code>dataItem = DataTransferItemList[index];\n</code></pre>The DataTransferItemList() getter method implements support for accessing items in the DataTransferItemList using array-style syntax (that is DataTransferItemList [ index ]).	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/DataTransferItem
DataTransferItemList.length	A										<pre><code>length = DataTransferItemList.length;\n</code></pre>The read-only DataTransferItemList.length property returns the number of items in the list. If the list has no items, or is disabled (because it has no data store at all), this property returns zero.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/length
DataTransferItemList.remove()	A										<pre><code>DataTransferItemList.remove(index);\n</code></pre>The DataTransferItemList.remove() method removes the DataTransferItem at the specified index from the list. If the index is less than zero or greater than one less than the length of the list, the list will not be changed.	https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/remove
DedicatedWorkerGlobalScope.onmessage	A										<pre><code>self.onmessage = function() { ... };</code></pre>The onmessage property of the DedicatedWorkerGlobalScope interface represents an EventHandler to be called when the message event occurs and bubbles through the Worker &#8212; i.e. when a message is sent to the worker using the Worker.postMessage method.	https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage
DedicatedWorkerGlobalScope.postMessage()	A										<pre><code>postMessage(aMessage, transferList);</code></pre>The postMessage() method of the DedicatedWorkerGlobalScope interface sends a message to the main thread that spawned it. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.	https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage
DelayNode	A										When creating a graph that has a cycle, it is mandatory to have at least one DelayNode in the cycle, or the nodes taking part in the cycle will be muted.	https://developer.mozilla.org/en-US/docs/Web/API/DelayNode
DelayNode.delayTime	A										<pre><code>var audioCtx = new AudioContext();\nvar myDelay = audioCtx.createDelay(5.0);\nmyDelay.delayTime.value = 3.0;\n</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/DelayNode/delayTime
Detecting device orientation	A										Increasingly, web-enabled devices are capable of determining their orientation ; that is, they can report data indicating changes to their orientation with relation to the pull of gravity. In particular, hand-held devices such as mobile phones can use this information to automatically rotate the display to remain upright, presenting a wide-screen view of the web content when the device is rotated so that its width is greater than its height.	https://developer.mozilla.org/en-US/docs/Web/API/Detecting_device_orientation
DeviceAcceleration	A										A DeviceAcceleration object provides information about the amount of acceleration the device is experiencing along all three axes.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration
DeviceAcceleration.x	A										<pre><code>var xAccel = deviceAcceleration.x;\n</code></pre>This read-only property indicates the amount of acceleration that occurred along the X axis in a DeviceAcceleration object.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration/x
DeviceAcceleration.y	A										<pre><code>var yAccel = deviceAcceleration.y;\n</code></pre>This read-only property indicates the amount of acceleration that occurred along the Y axis in a DeviceAcceleration object.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration/y
DeviceAcceleration.z	A										<pre><code>var zAccel = deviceAcceleration.z;\n</code></pre>This read-only property indicates the amount of acceleration that occurred along the Z axis in a DeviceAcceleration object.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceAcceleration/z
DeviceLightEvent	A										The DeviceLightEvent provides web developers with information from photo sensors or similiar detectors about ambient light levels near the device. For example this may be useful to adjust the screen's brightness based on the current ambient light level in order to save energy or provide better readability.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceLightEvent
Using light sensors	A										Ambient Light Events give a web application access to a device's ambient light sensor to detect changes in light intensity.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceLightEvent/Using_light_sensors
DeviceLightEvent.value	A										<pre><code>var light = instanceOfDeviceLightEvent.value;</code></pre>The value property provides the current level of the ambient light.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceLightEvent/value
DeviceMotionEvent	A										The DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent
DeviceMotionEvent.acceleration	A										<pre><code>var acceleration = instanceOfDeviceMotionEvent.acceleration;\n</code></pre>The acceleration property returns the amount of acceleration recorded by the device, in meters per second squared (m/s 2).	https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/acceleration
DeviceMotionEvent.accelerationIncludingGravity	A										<pre><code>var acceleration = instanceOfDeviceMotionEvent.accelerationIncludingGravity;\n</code></pre>The accelerationIncludingGravity property returns the amount of acceleration recorded by the device, in meters per second squared (m/s 2). Unlike DeviceMotionEvent.acceleration which compensates for the influence of gravity, its value is the sum of the acceleration of the device as induced by the user and the acceleration caused by gravity.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/accelerationIncludingGravity
DeviceMotionEvent.interval	A										<pre><code>var interval = instanceOfDeviceMotionEvent.interval;\n</code></pre>Returns the interval, in milliseconds, at which data is obtained from the underlaying hardware. You can use this to determine the granularity of motion events.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/interval
DeviceMotionEvent.rotationRate	A										<pre><code>var rates = instanceOfDeviceMotionEvent.rotationRate;\n</code></pre>Returns the rate at which the device is rotating around each of its axes in degrees per second.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/rotationRate
DeviceOrientationEvent	A										The DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent
DeviceOrientationEvent.absolute	A										<pre><code>var absolute = instanceOfDeviceOrientationEvent.absolute;\n</code></pre>Indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth's coordinate frame) or using some arbitrary frame determined by the device. See Orientation and motion data explained for details.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/absolute
DeviceOrientationEvent.alpha	A										<pre><code>var alpha = instanceOfDeviceOrientationEvent.alpha;\n</code></pre>Returns the rotation of the device around the Z axis; that is, the number of degrees by which the device is being twisted around the center of the screen. See Orientation and motion data explained for details.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/alpha
DeviceOrientationEvent.beta	A										<pre><code>var beta = instanceOfDeviceOrientationEvent.beta;</code></pre>Returns the rotation of the device around the X axis; that is, the number of degrees, ranged between -180 and 180,  by which the device is tipped forward or backward. See Orientation and motion data explained for details.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/beta
DeviceOrientationEvent.gamma	A										<pre><code>var gamma = orientationEvent.gamma;\n</code></pre>Returns the rotation of the device around the Y axis; that is, the number of degrees, ranged between -90 and 90, by which the device is turned left or right. See Orientation and motion data explained for details.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/gamma
DeviceProximityEvent	A										The DeviceProximityEvent interface provides information about the distance of a nearby physical object using the proximity sensor of a device.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent
DeviceProximityEvent.max	A										<pre><code>var value = instanceOfDeviceProximityEvent.max;</code></pre>The max property provides the maximum sensing distance the sensor is able to report, in centimeters.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent/max
DeviceProximityEvent.min	A										<pre><code>var value = instanceOfDeviceProximityEvent.min;</code></pre>The min property provides the minimum distance the sensor can report, in centimeters.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent/min
DeviceProximityEvent.value	A										<pre><code>var distance = instanceOfDeviceProximityEvent.value;</code></pre>The value property of DeviceProximityEvent objects provides the current distance between the device and the detected object, in centimeters.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent/value
DeviceRotationRate	A										A DeviceRotationRate object provides information about the rate at which the device is rotating around all three axes.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate
DeviceRotationRate.alpha	A										<pre><code>var alpha = deviceRotationRate.alpha;\n</code></pre>This property indicates the rate of rotation around the Z axis -- in degrees per second -- in a DeviceRotationRate object.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate/alpha
DeviceRotationRate.beta	A										<pre><code>var beta = deviceRotationRate.beta;\n</code></pre>This property indicates the rate of rotation around the X axis -- in degrees per second -- in a DeviceRotationRate object.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate/beta
DeviceRotationRate.gamma	A										<pre><code>var gamma = deviceRotationRate.gamma;\n</code></pre>This property indicates the rate of rotation around the Y axis -- in degrees per second -- in a DeviceRotationRate object.	https://developer.mozilla.org/en-US/docs/Web/API/DeviceRotationRate/gamma
DirectoryEntrySync	A										The DirectoryEntrySync interface of the File System API represents a directory in a file system. It includes methods for creating, reading, looking up, and recursively removing files in a directory.	https://developer.mozilla.org/en-US/docs/Web/API/DirectoryEntrySync
DirectoryReaderSync	A										The DirectoryReaderSync interface of the File System API lets you read the entries in a directory.	https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReaderSync
Document	A										The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. The DOM tree includes elements such as body and table, among many others. It provides functionality global to the document, like how to obtain the page's URL and create new elements in the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document
Document.activeElement	A										<pre><code>var curElement = document.activeElement;\n</code></pre>Returns the currently focused element, that is, the element that will get keystroke events if the user types any. This attribute is read only.	https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement
Document.adoptNode()	A										<pre><code>node = document.adoptNode(externalNode);\n</code></pre>Adopts a node from an external document. The node and its subtree is removed from the document it's in (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode
Document.alinkColor	A										<pre><code>color = document.alinkColor\ndocument.alinkColor =\ncolor\n</code></pre>Returns or sets the color of an active link in the document body. A link is active during the time between mousedown and mouseup events.	https://developer.mozilla.org/en-US/docs/Web/API/Document/alinkColor
Document.anchors	A										<pre><code>nodeList = document.anchors;\n</code></pre>anchors returns a list of all of the anchors in the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/anchors
Document.applets	A										<pre><code>nodeList = document.applets \n</code></pre>applets returns an ordered list of the applets within a document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/applets
Document.async	A										document.async can be set to indicate whether a document.load call should be an asynchronous or synchronous request. true is the default value, indicating that documents should be loaded asynchronously.	https://developer.mozilla.org/en-US/docs/Web/API/Document/async
Document.bgColor	A										<pre><code>color = document.bgColor\ndocument.bgColor =color \n</code></pre>The deprecated bgColor property gets or sets the background color of the current document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/bgColor
Document.body	A										<pre><code>var objRef = document.body; \ndocument.body = objRef;</code></pre>Returns the body or frameset node of the current document, or null if no such element exists.	https://developer.mozilla.org/en-US/docs/Web/API/Document/body
Document.caretPositionFromPoint()	A										<pre><code>var caretPosition = document.caretPositionFromPoint(float x, float y);\n</code></pre>This method is used to retrieve the caret position in a document based on two coordinates. A CaretPosition is returned, containing the found DOM node and the character offset in that node.	https://developer.mozilla.org/en-US/docs/Web/API/Document/caretPositionFromPoint
Document.caretRangeFromPoint()	A										<pre><code>var range = document.caretRangeFromPoint(float x, float y);\n</code></pre>The caretRangeFromPoint() method of the Document interface returns a Range object for the document fragment under the specified coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/Document/caretRangeFromPoint
Document.characterSet	A										<pre><code>var string = document.characterSet</code></pre>The Document.characterSet read-only property returns the character encoding of the current document. The character encoding is the character set used for rendering the document, which may be different from the encoding specified by the page. (The user can override the encoding.).	https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet
Document.clear()	A										<pre><code>document.clear() \n</code></pre>This method used to clear the whole specified document in early (pre-1.0) versions of Mozilla.	https://developer.mozilla.org/en-US/docs/Web/API/Document/clear
Document.close()	A										<pre><code>document.close();\n</code></pre>The document.close() method finishes writing to a document, opened with document.open().	https://developer.mozilla.org/en-US/docs/Web/API/Document/close
Document.compatMode	A										<pre><code>mode = document.compatMode \n</code></pre>Indicates whether the document is rendered in Quirks mode or Standards mode.	https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode
Document.contentType	A										<pre><code>contentType = document.contentType;\n</code></pre>Returns the MIME type that the document is being rendered as.  This may come from HTTP headers or other sources of MIME information, and might be affected by automatic type conversions performed by either the browser or extensions.	https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType
Document.cookie	A										<pre><code>allCookies = document.cookie;</code></pre>Get and set the cookies associated with the current document. For a general library see this simple cookie framework.	https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie
Simple cookie framework	A										As cookies are just specially formatted strings it is sometimes difficult to manage them.  The following library aims to abstract the access to document.cookie by defining an object (docCookies) that is partially consistent with a Storage object. It also offers full Unicode support.	https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie/Simple_document.cookie_framework
Document.createAttribute()	A										<pre><code>attribute = document.createAttribute(name) \n</code></pre>The Document.createAttribute() method creates a new attribute node, and returns it. The object created a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute
Document.createCDATASection()	A										<pre><code>CDATASectionNode = document.createCDATASection(data) \n</code></pre>createCDATASection() creates a new CDATA section node, and returns it.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection
Document.createComment()	A										<pre><code>CommentNode = document.createComment(data) \n</code></pre>createComment() creates a new comment node, and returns it.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createComment
Document.createDocumentFragment()	A										<pre><code>var docFragment = document.createDocumentFragment();\n</code></pre>Creates a new empty DocumentFragment.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment
Document.createElement()	A										<pre><code>var element = document.createElement(tagName[, options]);\n</code></pre>In an HTML document, the Document.createElement() method creates the specified HTML element or an HTMLUnknownElement if the given element name isn't a known one.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement
Document.createElementNS()	A										<pre><code>element = document.createElementNS(namespaceURI, qualifiedName);\n</code></pre>Creates an element with the specified namespace URI and qualified name.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS
Document.createEvent()	A										<pre><code>var event = document.createEvent(type);\n</code></pre>Creates an event of the type specified. The returned object should be first initialized and can then be passed to element.dispatchEvent.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent
Document.createExpression()	A										<pre><code>xpathExpr = document.createExpression(xpathText, namespaceURLMapper);\n</code></pre>This method compiles an XPathExpression which can then be used for (repeated) evaluations.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createExpression
Document.createNodeIterator()	A										<pre><code>var nodeIterator = document.createNodeIterator(root, whatToShow, filter);\n</code></pre>Returns a new NodeIterator object.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator
Document.createNSResolver()	A										<pre><code>nsResolver = document.createNSResolver(node);\n</code></pre>Creates an XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver
Document.createProcessingInstruction()	A										<pre><code>Processing instruction node = document.createProcessingInstruction(target, data) \n</code></pre>createProcessingInstruction() creates a new processing instruction node, and returns it.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createProcessingInstruction
Document.createRange()	A										<pre><code>range = document.createRange();\n</code></pre>Returns a new Range object.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createRange
Document.createTextNode()	A										<pre><code>var text = document.createTextNode(data);\n</code></pre>Creates a new Text node.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode
Document.createTouch()	A										<pre><code>var touch = DocumentTouch.createTouch(view, target, identifier, pageX, pageY,\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; screenX, screenY);\n</code></pre>This method creates and returns a new Touch object.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createTouch
Document.createTouchList()	A										<pre><code>var list = DocumentTouch.createTouchList([touch1 [, touch2 [, ...]]]);\n</code></pre>This method creates and returns a new TouchList object.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createTouchList
Document.createTreeWalker()	A										<pre><code>treeWalker = document.createTreeWalker(root, whatToShow, filter, entityReferenceExpansion);\n</code></pre>The Document.createTreeWalker() creator method returns a newly created TreeWalker object.	https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker
Document.currentScript	A										<pre><code>var curScriptElement = document.currentScript;\n</code></pre>Returns the script element whose script is currently being processed.	https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript
Document.defaultView	A										<pre><code>var win = document.defaultView;</code></pre>In browsers, document.defaultView returns the window object associated with a document, or null if none is available.	https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView
Document.designMode	A										<pre><code>var mode = document.designMode;\ndocument.designMode = "on";\ndocument.designMode = "off";</code></pre>document.designMode controls whether the entire document is editable. Valid values are "on" and "off".&#160;According to the specification, this property is meant to default to "off". Firefox follows this standard. The earlier versions of Chrome and IE default to "inherit". Starting in Chrome 43, the default is "off" and "inherit" is no longer supported.&#160;In IE6-10, the value is capitalized.&#160;	https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode
Document.dir	A										<pre><code>dirStr = document.dir;\ndocument.dir = dirStr;\n</code></pre>The Document.dir property is a DOMString representing the directionality of the text of the document, whether left to right (default) or right to left. Possible values are 'rtl', right to left, and 'ltr', left to right.	https://developer.mozilla.org/en-US/docs/Web/API/Document/dir
Document.doctype	A										<pre><code>doctype = document.doctype;\n</code></pre>Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.	https://developer.mozilla.org/en-US/docs/Web/API/Document/doctype
Document.documentElement	A										<pre><code>var&#160;element = document.documentElement;\n</code></pre>The Document.documentElement read-only property returns the Element that is the root element of the document (for example, the html element for HTML documents).	https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement
Document.documentURI	A										<pre><code>var string = document.documentURI;\n</code></pre>The documentURI property of the Document interface returns the document location as a string.	https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI
Document.documentURIObject	A										<pre><code>var uri = doc.documentURIObject;\n</code></pre>The Document.documentURIObject read-only property returns an nsIURI object representing the URI of the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURIObject
Document.domain	A										<pre><code>var domainString = document.domain;\ndocument.domain = string;</code></pre>Gets/sets the domain portion of the origin of the current document, as used by the same origin policy.	https://developer.mozilla.org/en-US/docs/Web/API/Document/domain
Document.domConfig	A										This should return the DOMConfiguration for the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/domConfig
Document.elementFromPoint()	A										<pre><code>var element = document.elementFromPoint(x, y);</code></pre>The elementFromPoint() method of the Document interface returns the topmost element at the specified coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint
Document.elementsFromPoint()	A										<pre><code>var elements = document.elementsFromPoint(x, y);</code></pre>The elementsFromPoint() method of the Document interface returns an array of all elements at the specified coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint
Document.embeds	A										embeds returns a list of the embedded OBJECTS within the current document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/embeds
Document.enableStyleSheetsForSet()	A										<pre><code>document.enableStyleSheetsForSet(name)\n</code></pre>Enables the style sheets matching the specified name in the current style sheet set, and disables all other style sheets (except those without a title, which are always enabled).	https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet
Document.evaluate()	A										<pre><code>var xpathResult = document.evaluate(\n xpathExpression, \n contextNode, \n namespaceResolver, \n resultType, \n result\n);</code></pre>Returns an XPathResult based on an XPath expression and other given parameters.	https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate
Document.execCommand()	A										<pre><code>bool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument)\n</code></pre>When an HTML document has been switched to designMode, the document object exposes the execCommand method which allows one to run commands to manipulate the contents of the editable region. Most commands affect the document's selection (bold, italics, etc.), while others insert new elements (adding a link) or affect an entire line (indenting). When using contentEditable, calling execCommand() will affect the currently active editable element.	https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand
Document.exitFullscreen()	A										<pre><code>document.exitFullscreen();\n</code></pre>The Document.exitFullscreen() is a method that takes the document out of full-screen mode; this is used to reverse the effects of a call to make an element in the document full-screen using its Element.requestFullscreen() method.	https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen
Document.exitPointerLock()	A										<pre><code>document.exitPointerLock();\n</code></pre>The exitPointerLock asynchronously releases a pointer lock previously requested through Element.requestPointerLock.	https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock
Document.fgColor	A										<pre><code>var color = document.fgColor;\n</code></pre>fgColor gets/sets the foreground color, or text color, of the current document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/fgColor
Document.forms	A										<pre><code>collection = document.forms;</code></pre>forms returns a collection (an HTMLCollection) of the form elements within the current document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/forms
Document.fullscreenElement	A										<pre><code>var element = document.fullscreenElement;\n</code></pre>The Document.fullscreenElement read-only property returns the Element that is currently being presented in full-screen mode in this document, or null if full-screen mode is not currently in use.	https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement
Document.fullscreenEnabled	A										<pre><code>var isFullscreenAvailable = document.fullscreenEnabled;\n</code></pre>The Document.fullscreenEnabled read-only property returns a Boolean that reports whether or not full-screen mode is available. Full screen mode is available only for a page that has no windowed plug-ins in any of its documents, and if all iframe elements which contain the document have their allowfullscreen attribute set.	https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled
Document.getAnimations()	A										<pre><code>document.getAnimations().forEach(\n  function (animation) {\n    animation.playbackRate *= .5;\n  }\n);</code></pre>The getAnimations() method of the Document interface returns an array of all Animation objects currently in effect whose target elements are descendants of the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations
document.getElementById()	A										<pre><code>element = document.getElementById(id);\n</code></pre>Returns a reference to the element by its ID ; the ID is a string which can be used to identify the element; it can be established using the id attribute in HTML, or from script.	https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById
Document.getElementsByClassName()	A										<pre><code>var elements = document.getElementsByClassName(names); // or:\nvar elements = rootElement.getElementsByClassName(names);</code></pre>Returns an array-like object of all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName() on any element; it will return only elements which are descendants of the specified root element with the given class names.	https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
Document.getElementsByName()	A										<pre><code>elements = document.getElementsByName(name) \n</code></pre>Returns a nodelist collection with a given name in the (X)HTML document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName
Document.getElementsByTagName()	A										<pre><code>var elements = document.getElementsByTagName(name);</code></pre>Returns an HTMLCollection of elements with the given tag name.	https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName
Document.getElementsByTagNameNS()	A										<pre><code>elements = document.getElementsByTagNameNS(namespace, name)\n</code></pre>Returns a list of elements with the given tag name belonging to the given namespace. The complete document is searched, including the root node.	https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS
Document.getSelection()	A										This method functions identically to the Window.getSelection() method; it returns a Selection object representing the text currently selected in the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/getSelection
Document.hasFocus()	A										<pre><code>focused = document.hasFocus();</code></pre>false if the active element in the document has no focus; true if the active element in the document has focus.	https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus
Document.head	A										<pre><code>var objRef = document.head;\n</code></pre>Returns the head element of the current document. If there are more than one head elements, the first one is returned.	https://developer.mozilla.org/en-US/docs/Web/API/Document/head
Document.images	A										<pre><code>var htmlCollection = document.images;</code></pre>document.images returns a collection of the images in the current HTML document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/images
Document.implementation	A										<pre><code>DOMImpObj = document.implementation;\n</code></pre>Returns a DOMImplementation object associated with the current document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation
Document.importNode()	A										<pre><code>var node = document.importNode(externalNode, deep);\n</code></pre>Creates a copy of a node from an external document that can be inserted into the current document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode
Document.lastModified	A										<pre><code>string = document.lastModified; \n</code></pre>Returns a string containing the date and time on which the current document was last modified.	https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified
Document.lastStyleSheetSet	A										<pre><code>lastStyleSheetSet = document.lastStyleSheetSet\n</code></pre>Returns the last enabled style sheet set; this property's value changes whenever the document.selectedStyleSheetSet property is changed.	https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet
Document.linkColor	A										<pre><code>color = document.linkColor\ndocument.linkColor = color\n</code></pre>linkColor gets/sets the color of links within the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/linkColor
Document.links	A										<pre><code>nodeList = document.links \n</code></pre>The links property returns a collection of all area elements and a elements in a document with a value for the href attribute.	https://developer.mozilla.org/en-US/docs/Web/API/Document/links
Document.loadOverlay()	A										<pre><code>document.loadOverlay(url, observer);</code></pre>The loadOverlay() method loads a XUL overlay and merges it with the current document, notifying an observer when the merge is complete.	https://developer.mozilla.org/en-US/docs/Web/API/Document/loadOverlay
Document.location	A										<pre><code>locationObj = document.location\ndocument.location = 'http://www.mozilla.org' // Equivalent to document.location.href = 'http://www.mozilla.org'\n</code></pre>The Document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL.	https://developer.mozilla.org/en-US/docs/Web/API/Document/location
Document.mozSetImageElement()	A										<pre><code>document.mozSetImageElement(imageElementId, imageElement);\n</code></pre>Changes the element being used as the CSS background for a background with a given background element ID.	https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSetImageElement
Document.mozSyntheticDocument	A										<pre><code>var isSynthetic = document.mozSyntheticDocument;\n</code></pre>Indicates whether or not the document is a synthetic one; that is, a document representing a standalone image, video, audio, or the like.	https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSyntheticDocument
Document.onafterscriptexecute	A										<pre><code>document.onafterscriptexecute = funcRef;\n</code></pre>Fired when a static &lt;script&gt;&#160;element &#160;finishes executing its script.&#160;Does not fire if the element is added dynamically, eg with appendChild().	https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute
Document.onbeforescriptexecute	A										<pre><code>document.onbeforescriptexecute = funcRef;\n</code></pre>Fired when the code in a &lt;script&gt;&#160;element declared in an HTML document&#160;is about to start executing. Does not fire if the element is added dynamically, eg with appendChild().	https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute
Document.onfullscreenchange	A										<pre><code>targetDocument.onfullscreenchange = fullscreenChangeHandler;\n</code></pre>The Document.onfullscreenchange property is an event handler for the fullscreenchange event that is fire when a document goes in or out of the fullscreen mode.	https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange
Document.onfullscreenerror	A										<pre><code>targetDocument.onfullscreenerror = fullscreenErrorHandler;\n</code></pre>The Document.onfullscreenerror property is an event handler for the fullscreenchange event that is fire when a document goes that cannot go in fullscreen mode, even it has been requested.	https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror
Document.onoffline	A										This event handler is called when an offline is fired on body and bubbles up, when navigator.onLine property changes and becomes false.	https://developer.mozilla.org/en-US/docs/Web/API/Document/onoffline
Document.ononline	A										" online " event is fired on the body of each page when the browser switches between online and offline mode. Additionally, the events bubble up from document.body, to document, ending at window. Both events are non-cancellable (you can't prevent the user from coming online, or going offline).	https://developer.mozilla.org/en-US/docs/Web/API/Document/ononline
Document.onselectionchange	A										<pre><code>obj.selectionchange = function;\n</code></pre>The Document.onselectionchange property represents the event handler that is called when a selectionchange event reaches this object.	https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange
Document.open()	A										<pre><code>document.open();\n</code></pre>The Document.open() method opens a document for writing.	https://developer.mozilla.org/en-US/docs/Web/API/Document/open
Document.origin	A										The Document.origin read-only property returns the document's origin. In most cases, this property is equivalent to document.defaultView.location.origin.	https://developer.mozilla.org/en-US/docs/Web/API/Document/origin
Document.plugins	A										<pre><code>embedArrayObj = document.plugins \n</code></pre>Returns an HTMLCollection object containing one or more HTMLEmbedElement s or null which represent the embed elements in the current document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/plugins
Document.pointerLockElement	A										<pre><code>var element = document.pointerLockElement;\n</code></pre>The pointerLockElement property provides the element set as the target for mouse events while the pointer is locked. It is null if lock is pending, pointer is unlocked, or the target is in another document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement
Document.popupNode	A										<pre><code>var node = document.popupNode;\n</code></pre>When a popup attached via the popup or context attributes is opened, the XUL document's popupNode property is set to the node that was clicked on. This will be the target of the mouse event that activated the popup. If the popup was opened via the keyboard, the popup node may be set to null. Typically, this property will be checked during a popupshowing event handler for a context menu to initialize the menu based on the context.	https://developer.mozilla.org/en-US/docs/Web/API/Document/popupNode
Document.preferredStyleSheetSet	A										<pre><code>preferredStyleSheetSet = document.preferredStyleSheetSet\n</code></pre>Returns the preferred style sheet set as set by the page author.	https://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet
Document.queryCommandEnabled()	A										<pre><code>isEnabled = document.queryCommandEnabled(command);\n</code></pre>The Document.queryCommandEnabled() method reports whether or not the specified editor command is enabled by the browser.	https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandEnabled
Document.queryCommandState()	A										<pre><code>queryCommandState(String command)\n</code></pre>TBD	https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandState
Document.queryCommandSupported()	A										<pre><code>isSupported = document.queryCommandSupported(command);\n</code></pre>The Document.queryCommandSupported() method reports whether or not the specified editor command is supported by the browser.	https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandSupported
Document.querySelector()	A										<pre><code>element = document.querySelector(selectors);\n</code></pre>Returns the first element within the document (using depth-first pre-order traversal of the document's nodes|by first element in document markup and iterating through sequential nodes by order of amount of child nodes) that matches the specified group of selectors.	https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
Document.querySelectorAll()	A										<pre><code>elementList = document.querySelectorAll(selectors);\n</code></pre>Returns a list of the elements within the document (using depth-first pre-order traversal of the document's nodes) that match the specified group of selectors. The object returned is a NodeList.	https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
Document.readyState	A										<pre><code>var string = document.readyState;\n</code></pre>The Document.readyState property of a document describes the loading state of the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState
Document.referrer	A										<pre><code>string = document.referrer; \n</code></pre>Returns the URI of the page that linked to this page.	https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer
Document.registerElement()	A										<pre><code>var constructor = document.registerElement(tag-name, options);</code></pre>The document.registerElement() method registers a new custom element in the browser and returns a constructor for the new element.	https://developer.mozilla.org/en-US/docs/Web/API/Document/registerElement
Document.releaseCapture()	A										<pre><code>document.releaseCapture()\n</code></pre>Releases mouse capture if it's currently enabled on an element within this document. Enabling mouse capture on an element is done by calling element.setCapture().	https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture
Document.scripts	A										<pre><code>var scriptList = document.scripts;\n</code></pre>Returns a list of the script elements in the document. The returned object is an HTMLCollection.	https://developer.mozilla.org/en-US/docs/Web/API/Document/scripts
Document.scrollingElement	A										<pre><code>var element = document.scrollingElement;</code></pre>The scrollingElement read-only property of the Document interface returns a reference to the Element that scrolls the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement
Document.selectedStyleSheetSet	A										<pre><code>currentStyleSheetSet = document.selectedStyleSheetSet\n\ndocument.selectedStyleSheet = newStyleSheetSet \n</code></pre>Indicates the name of the style sheet set that's currently in use.	https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet
Document.styleSheets	A										<pre><code>var styleSheetList = document.styleSheets;\n</code></pre>The Document.styleSheets read-only property returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into or embedded in a document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets
Document.styleSheetSets	A										<pre><code>sets = document.styleSheetSets\n</code></pre>Returns a live list of all of the currently-available style sheet sets.	https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheetSets
Document.timeline	A										The timeline readonly property of the Document interface represents the default timeline of the current document. This timeline is a special instance of DocumentTimeline that is automatically created on page load.	https://developer.mozilla.org/en-US/docs/Web/API/Document/timeline
Document.title	A										<pre><code>var docTitle = document.title;\n</code></pre>Gets or sets the title of the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/title
Document.tooltipNode	A										Returns the node which is the target of the current tooltip.	https://developer.mozilla.org/en-US/docs/Web/API/Document/tooltipNode
Document.URL	A										<pre><code>var string = document.URL \n</code></pre>The URL read-only property of the Document interface returns the document location as a string.	https://developer.mozilla.org/en-US/docs/Web/API/Document/URL
Document.visibilityState	A										<pre><code>var string = document.visibilityState</code></pre>The Document.visibilityState read-only property returns the visibility of the document, that is in which context this element is now visible. It is useful to know if the document is in the background or an invisible tab, or only loaded for pre-rendering. Possible values are:	https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState
Document.vlinkColor	A										Gets/sets the color of links that the user has visited in the document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/vlinkColor
Document.write()	A										<pre><code>document.write(markup);\n</code></pre>Writes a string of text to a document stream opened by document.open().	https://developer.mozilla.org/en-US/docs/Web/API/Document/write
Document.writeln()	A										<pre><code>document.writeln(line); \n</code></pre>Writes a string of text followed by a newline character to a document.	https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln
DocumentFragment	A										The DocumentFragment interface represents a minimal document object that has no parent. It is used as a light-weight version of Document to store well-formed or potentially non-well-formed fragments of XML.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment
DocumentFragment()	A										<pre><code>fragment = new DocumentFragment()</code></pre>The DocumentFragment() constructor returns an empty newly created DocumentFragment object.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/DocumentFragment
DocumentFragment.querySelector()	A										<pre><code>element = documentfragment.querySelector(selectors);</code></pre>The DocumentFragment.querySelector() method returns the first element, or null if no matches are found, within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector
DocumentFragment.querySelectorAll()	A										<pre><code>elementList = documentframgment.querySelectorAll(selectors);</code></pre>The DocumentFragment.querySelectorAll() method returns a NodeList of elements within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelectorAll
DocumentOrShadowRoot	A										The DocumentOrShadowRoot interface of the the Shadow DOM API provides contains APIs that are shared between documents and shadow roots.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot
DocumentOrShadowRoot.activeElement	A										<pre><code>var element = DocumentOrShadowRoot.activeElement</code></pre>The activeElement property of the DocumentOrShadowRoot interface returns the element within the shadow tree that has focus.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/activeElement
DocumentOrShadowRoot.caretPositionFromPoint()	A										<pre><code>var caretPosition = document.caretPositionFromPoint(float x, float y);</code></pre>The caretPositionFromPoint() property of the DocumentOrShadowRoot interface returns a CaretPosition object containing the DOM node containing the caret and caret's character offset within that node.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/caretPositionFromPoint
DocumentOrShadowRoot.elementFromPoint()	A										<pre><code>var element = document.elementFromPoint(x, y);</code></pre>The elementFromPoint() property of the DocumentOrShadowRoot interface returns the topmost element at the specified coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/elementFromPoint
elementsFromPoint	A										<pre><code>var element[] = document.elementFromPoints(x, y);</code></pre>The elementsFromPoint() property of the DocumentOrShadowRoot interface returns an array of all elements at the specified coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/elementsFromPoint
DocumentOrShadowRoot.getSelection()	A										<pre><code>var selection = window.getSelection()</code></pre>The getSelection() property of the DocumentOrShadowRoot interface returns a Selection object representing the range of text selected by the user or the current position of the caret.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection
DocumentOrShadowRoot.styleSheets	A										<pre><code>var styleSheets = DocumentOrShadowRoot.styleSheets</code></pre>The styleSheets property of the DocumentOrShadowRoot interface returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into or embedded in a document.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/styleSheets
DocumentTimeline	A										The DocumentTimeline interface of the the Web Animations API represents animation timelines, including the default document timeline (accessed via Document.timeline).	https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline
DocumentTimeline.DocumentTimeline()	A										<pre><code>var cats = document.querySelectorAll('.sharedTimelineCat');\ncats = Array.prototype.slice.call(cats);\n\nvar sharedTimeline = new DocumentTimeline(500);\n\ncats.forEach(function(cat) {\n&#160; var catKeyframes = new KeyframeEffect(cat, keyframes, timing);\n&#160; var catAnimation = new Animation(catKeyframes, sharedTimeline);\n&#160; catAnimation.play();\n});\n</code></pre>The DocumentTimeline() constructor of the Web Animations API creates a new instance of the DocumentTimeline object associated with the active document of the current browsing context.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentTimeline/DocumentTimeline
DocumentType	A										The DocumentType interface represents a Node containing a doctype.	https://developer.mozilla.org/en-US/docs/Web/API/DocumentType
Document Object Model (DOM)	A										The Document Object Model (DOM) is a programming interface for HTML, XML and SVG documents. It provides a structured representation of the document as a tree. The DOM defines methods that allow access to the tree, so that they can change the document structure, style and content. The DOM provides a representation of the document as a structured group of nodes and objects, possessing various properties and methods. Nodes can also have event handlers attached to them, and once an event is triggered, the event handlers get executed. Essentially, it connects web pages to scripts or programming languages.	https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model
Events and the DOM	A										This chapter describes the DOM Event Model. The Event interface itself is described, as well as the interfaces for event registration on nodes in the DOM, and event listeners, and several longer examples that show how the various event interfaces relate to one another.	https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events
Examples of web and XML development using the DOM	A										This chapter provides some longer examples of web and XML development using the DOM. Wherever possible, the examples use common APIs, tricks, and patterns in JavaScript for manipulating the document object.	https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Examples
How to create a DOM tree	A										This page describes how to use the DOM Core API in JavaScript to create and modify DOM objects. It applies to all Gecko-based applications (such as Firefox) both in privileged (extensions) and unprivileged (web pages) code.	https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/How_to_create_a_DOM_tree
Introduction to the DOM	A										This section provides a brief conceptual introduction to the DOM : what it is, how it provides structure for HTML and XML documents, how you can access it, and how this API presents the reference information and examples.	https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction
Locating DOM elements using selectors	A										The Selectors API provides methods that make it quick and easy to retrieve Element nodes from the DOM by matching against a set of selectors. This is much faster than past techniques, wherein it was necessary to, for example, use a loop in JavaScript code to locate the specific items you needed to find.	https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors
Traversing an HTML table with JavaScript and DOM Interfaces	A										This article is an overview of some powerful, fundamental DOM level 1 methods and how to use them from JavaScript. You will learn how to create, access and control, and remove HTML elements dynamically. The DOM methods presented here are not specific to HTML; they also apply to XML. The demonstrations provided here will work fine in any modern browser, including all versions of Firefox and IE 5+.	https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces
Using the W3C DOM Level 1 Core	A										The W3C's DOM Level 1 Core is a powerful object model for changing the content tree of documents. It is supported in all major browsers including Mozilla Firefox and Microsoft Internet Explorer. It is a powerful base for scripting on the web.	https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Using_the_W3C_DOM_Level_1_Core
Whitespace in the DOM	A										The presence of whitespace in the DOM can make manipulation of the content tree difficult in unforeseen ways. In Mozilla, all whitespace in the text content of the original document is represented in the DOM (this does not include whitespace within tags). (This is needed internally so that the editor can preserve formatting of documents and so that white-space: pre in CSS will work.) This means that:	https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace_in_the_DOM
DOMError	A										The DOMError interface describes an error object that contains an error name.	https://developer.mozilla.org/en-US/docs/Web/API/DOMError
DOMException	A										The DOMException interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API. This is basically how error conditions are described in web APIs.	https://developer.mozilla.org/en-US/docs/Web/API/DOMException
DOMException()	A										<pre><code>var domException = new DOMException();\nvar domException = new DOMException(message);\nvar domException = new DOMException(message, name);</code></pre>The DOMException() constructor returns a DOMException object with a specified message and name.	https://developer.mozilla.org/en-US/docs/Web/API/DOMException/DOMException
DOMHighResTimeStamp	A										The DOMHighResTimeStamp type is a double and is used to store a time value. The value could be a discrete point in time or the difference in time between two discrete points in time. The unit is milliseconds and should be accurate to 5 µs (microseconds). However, if the browser is unable to provide a time value accurate to 5 microseconds (due, for example, to hardware or software constraints), the browser can represent the value as a time in milliseconds accurate to a millisecond.	https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp
DOMImplementation	A										The DOMImplementation interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.	https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation
DOMImplementation.createDocument()	A										<pre><code>doc = document.implementation.createDocument(namespaceURI, qualifiedNameStr, documentType);</code></pre>The DOMImplementation.createDocument() method creates and returns an XMLDocument.	https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument
DOMImplementation.createDocumentType()	A										<pre><code>doctype = document.implementation.createDocumentType(qualifiedNameStr, publicId, systemId)</code></pre>The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild().	https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType
DOMImplementation.createHTMLDocument()	A										<pre><code>newDoc = document.implementation.createHTMLDocument(title);</code></pre>The DOMImplementation.createHTMLDocument() method creates a new HTML Document.	https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument
DOMImplementation.hasFeature()	A										<pre><code>flag = document.implementation.hasFeature(feature, version);</code></pre>The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.	https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature
DOMMatrix	A										The DOMMatrix interface represents 4x4 matrices, suitable for 2D and 3D operations.	https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix
DOMMatrixReadOnly	A										The DOMMatrixReadOnly interface represents 4x4 matrices, suitable for 2D and 3D operations. If this interface defines only read-only matrices, the DOMMatrix interface which inherits from it, add all the properties and the methods to allow to have modifiable matrices.	https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixReadOnly
DOMParser	A										DOMParser can parse XML or HTML source stored in a string into a DOM Document. DOMParser is specified in DOM Parsing and Serialization.	https://developer.mozilla.org/en-US/docs/Web/API/DOMParser
DOMPoint	A										A DOMPoint represents a 2D or 3D point in a coordinate system.	https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint
DOMPoint.DOMPoint()	A										<pre><code>var myDOMPoint = new DOMPoint(x, y, z, w);</code></pre>The DOMPoint() constructor creates a new DOMPoint object.	https://developer.mozilla.org/en-US/docs/Web/API/DOMPoint/DOMPoint
DOMPointReadOnly	A										The DOMPointReadOnly interface specifies the standard properties used by DOMPoint to define a 2D or 3D point in a coordinate system.	https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly
DOMPoint.w	A										<pre><code>var perspective = DOMPoint.w;</code></pre>The w read-only property of the DOMPointReadOnly interface represents the perspective of a point.	https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/w
DOMPoint.x	A										<pre><code>var xPos = DOMPoint.x;</code></pre>The x read-only property of the DOMPointReadOnly interface represents the x coordinate of a point.	https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/x
DOMPoint.y	A										<pre><code>var yPos = DOMPoint.y;</code></pre>The y read-only property of the DOMPointReadOnly interface represents the y coordinate of a point.	https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/y
DOMPoint.z	A										<pre><code>var zPos = DOMPoint.z;</code></pre>The z read-only property of the DOMPointReadOnly interface represents the z coordinate of a point.	https://developer.mozilla.org/en-US/docs/Web/API/DOMPointReadOnly/z
DOMRect	A										A DOMRect represents a rectangle.	https://developer.mozilla.org/en-US/docs/Web/API/DOMRect
DOMRect.DOMRect()	A										<pre><code>var myDOMRect = new DOMRect(x, y, width, height);</code></pre>The DOMRect() constructor creates a new DOMRect object.	https://developer.mozilla.org/en-US/docs/Web/API/DOMRect/DOMRect
DOMRectReadOnly	A										The DOMRectReadOnly interface specifies the standard properties used by DOMRect to define a rectangle.	https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly
DOMRectReadOnly.bottom	A										<pre><code>var recBottom = DOMRect.bottom;</code></pre>The bottom read-only property of the DOMRectReadOnly interface returns the bottom coordinate value of the DOMRect. (Has the same value as y + height, or y if height is negative.)	https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/bottom
DOMRectReadOnly.height	A										<pre><code>var recHeight = DOMRect.height;</code></pre>The height read-only property of the DOMRectReadOnly interface represents the height of the DOMRect.	https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/height
DOMRectReadOnly.left	A										<pre><code>var recLeft = DOMRect.left;</code></pre>The left read-only property of the DOMRectReadOnly interface returns the left coordinate value of the DOMRect. (Has the same value as x, or x + width if width is negative.)	https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/left
DOMRectReadOnly.right	A										<pre><code>var recRight = DOMRect.right;</code></pre>The right read-only property of the DOMRectReadOnly interface returns the right coordinate value of the DOMRect. (Has the same value as x + width, or x if width is negative.)	https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/right
DOMRectReadOnly.top	A										<pre><code>var recTop = DOMRect.top;</code></pre>The top read-only property of the DOMRectReadOnly interface returns the top coordinate value of the DOMRect. (Has the same value as y, or y + height if height is negative.)	https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/top
DOMRectReadOnly.width	A										<pre><code>var recWidth = DOMRect.width;</code></pre>The width read-only property of the DOMRectReadOnly interface represents the width of the DOMRect.	https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/width
DOMRectReadOnly.x	A										<pre><code>var recX = DOMRect.x;</code></pre>The x read-only property of the DOMRectReadOnly interface represents the x coordinate of the DOMRect 's origin.	https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/x
DOMRectReadOnly.y	A										<pre><code>var recY = DOMRect.y;</code></pre>The y read-only property of the DOMRectReadOnly interface represents the y coordinate of the DOMRect 's origin.	https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly/y
DOMString	A										DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String.	https://developer.mozilla.org/en-US/docs/Web/API/DOMString
Binary strings	A										As web applications become more and more powerful, adding features such as audio and video manipulation, access to raw data using WebSockets, and so forth, it has become clear that there are times when it would be helpful for JavaScript code to be able to quickly and easily manipulate raw binary data. In the past, this had to be simulated by treating the raw data as a string and using the charCodeAt() method to read the bytes from the data buffer.	https://developer.mozilla.org/en-US/docs/Web/API/DOMString/Binary
DOMStringMap	A										Used by the dataset HTML attribute to represent data for custom attributes added to elements.	https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap
DOMTimeStamp	A										The DOMTimeStamp type represents an absolute or relative number of milliseconds, depending on the specification in which it appears.	https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp
DOMTokenList	A										The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList or HTMLAreaElement.relList. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.	https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList
DOMTokenList.replace()	A										<pre><code>tokenList.replace(oldToken, newToken);</code></pre>The replace () method of the DOMTokenList interface replaces an existing token within a given list by a new one.	https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/replace
DOMTokenList.supports()	A										<pre><code>var boolean&#160;= element.supports(token)</code></pre>The supports() method of the DOMTokenList interface returns true if a given token is in the associated attribute's supported tokens. This method is intended to support feature detection.	https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/supports
DragEvent	A										The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.	https://developer.mozilla.org/en-US/docs/Web/API/DragEvent
DragEvent.dataTransfer	A										<pre><code>var data = dragEvent.dataTransfer;\n</code></pre>The DataEvent.dataTransfer property holds the drag operation's data (as a DataTransfer object).	https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/dataTransfer
DragEvent()	A										<pre><code> event = new DragEvent(type, DragEventInit);</code></pre>This constructor is used to create a synthetic DragEvent object.	https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent
DynamicsCompressorNode	A										Inherits properties from its parent, AudioNode.	https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode
DynamicsCompressorNode.attack	A										<pre><code>var audioCtx = new AudioContext();\nvar compressor = audioCtx.createDynamicsCompressor();\ncompressor.attack.value = 0;\n</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/attack
DynamicsCompressorNode.knee	A										<pre><code>var audioCtx = new AudioContext();\nvar compressor = audioCtx.createDynamicsCompressor();\ncompressor.knee.value = 40;\n</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/knee
DynamicsCompressorNode.ratio	A										<pre><code>var audioCtx = new AudioContext();\nvar compressor = audioCtx.createDynamicsCompressor();\ncompressor.ratio.value = 12;\n</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/ratio
DynamicsCompressorNode.reduction	A										<pre><code>var audioCtx = new AudioContext();\nvar compressor = audioCtx.createDynamicsCompressor();\n</code></pre>The reduction property of the DynamicsCompressorNode interface is a float representing the amount of gain reduction currently applied by the compressor to the signal.	https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/reduction
DynamicsCompressorNode.release	A										<pre><code>var audioCtx = new AudioContext();\nvar compressor = audioCtx.createDynamicsCompressor();\ncompressor.release.value = 0.25;\n</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/release
DynamicsCompressorNode.threshold	A										<pre><code>var audioCtx = new AudioContext();\nvar compressor = audioCtx.createDynamicsCompressor();\ncompressor.threshold.value = -50;\n</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/threshold
Element	A										The Element interface represents an object of a Document. This interface describes methods and properties common to all kinds of elements. Specific behaviors are described in interfaces which inherit from Element but add additional functionality.	https://developer.mozilla.org/en-US/docs/Web/API/Element
Element.accessKey	A										The Element.accessKey property sets the keystroke by which a user can press to jump to this element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/accessKey
Element.assignedSlot	A										<pre><code>var htmlSlotElement = element.assignedSlot</code></pre>The assignedSlot property of the Element interface returns the HTMLSlotElement interface associated with the element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/assignedSlot
Element.attachShadow()	A										<pre><code>var shadowroot = element.attachShadow(shadowRootInit); \n</code></pre>The Element.attachShadow() method attatches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.	https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow
Element.attributes	A										<pre><code>var attr = element.attributes;\n</code></pre>The Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.	https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes
Element.classList	A										<pre><code>var elementClasses = elementNodeReference.classList;\n</code></pre>The Element.classList is a read-only property which returns a live DOMTokenList collection of the class attributes of the element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/classList
Element.className	A										<pre><code>var cName = elementNodeReference.className;\nelementNodeReference.className = cName;</code></pre>className gets and sets the value of the class attribute of the specified element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/className
Element.clientHeight	A										<pre><code>var h = element.clientHeight;</code></pre>The Element.clientHeight read-only property is zero for elements with no CSS or inline layout boxes, otherwise it's  the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.	https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight
Element.clientLeft	A										<pre><code>var left = element.clientLeft;\n</code></pre>The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.	https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft
Element.clientTop	A										<pre><code>var top = element.clientTop;\n</code></pre>The width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only.	https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop
Element.clientWidth	A										<pre><code>var intElemClientWidth = element.clientWidth;\n</code></pre>The Element.clientWidth property is zero for elements with no CSS or inline layout boxes, otherwise it's the inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin.	https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth
Element.closest()	A										<pre><code>var elt = element.closest(selectors); \n</code></pre>The Element.closest() method returns the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter. If there isn't such an ancestor, it returns null.	https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
Element.createShadowRoot()	A										<pre><code>var shadowroot = element.createShadowRoot(); \n</code></pre>Use Element.createShadowRoot to create an instance of shadow DOM. When shadow DOM is created, it is always attached to an existing element. After the shadow DOM is created, the element that it is attached to is called the shadow root.	https://developer.mozilla.org/en-US/docs/Web/API/Element/createShadowRoot
Element.currentStyle	A										Element.currentStyle is a property which is a proprietary alternative to the standardized window.getComputedStyle method. It is available in old versions of Microsoft Internet Explorer.	https://developer.mozilla.org/en-US/docs/Web/API/Element/currentStyle
Element.getAttribute()	A										<pre><code>var attribute = element.getAttribute(attributeName);\n</code></pre>getAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or "" (the empty string); see Notes for details.	https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute
Element.getAttributeNode()	A										<pre><code>var attrNode = element.getAttributeNode(attrName); \n</code></pre>Returns the specified attribute of the specified element, as an Attr node.	https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode
Element.getAttributeNodeNS()	A										<pre><code>attributeNode = element.getAttributeNodeNS(\nnamespace,\nnodeName) \n</code></pre>Returns the Attr node for the attribute with the given namespace and name.	https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS
Element.getAttributeNS()	A										<pre><code>attrVal = element.getAttributeNS(namespace, name)\n</code></pre>getAttributeNS returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or "" (the empty string); see Notes for details.	https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS
Element.getBoundingClientRect()	A										<pre><code>rectObject = object.getBoundingClientRect();\n</code></pre>The Element.getBoundingClientRect() method returns the size of an element and its position relative to the viewport.	https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect
Element.getClientRects()	A										<pre><code>var rectCollection = object.getClientRects();</code></pre>The Element.getClientRects() method returns a collection of rectangles that indicate the bounding rectangles for each box in a client.	https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects
Element.getElementsByClassName()	A										<pre><code>var elements = element.getElementsByClassName(names);</code></pre>The Element.getElementsByClassName() method returns a live HTMLCollection containing all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node.	https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName
Element.getElementsByTagName()	A										<pre><code>elements = element.getElementsByTagName(tagName)</code></pre>The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name. The subtree underneath the specified element is searched, excluding the element itself. The returned list is live, meaning that it updates itself with the DOM tree automatically. Consequently, there is no need to call several times Element.getElementsByTagName() with the same element and arguments.	https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName
Element.getElementsByTagNameNS()	A										<pre><code>elements = element.getElementsByTagNameNS(namespaceURI, localName)</code></pre>The Element.getElementsByTagNameNS() method returns a live HTMLCollection of elements with the given tag name belonging to the given namespace. It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS
Element.hasAttribute()	A										<pre><code>var result = element.hasAttribute(attName);\n</code></pre>The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.	https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute
Element.hasAttributeNS()	A										<pre><code>result =\nelement.hasAttributeNS(\nnamespace,\nlocalName) \n</code></pre>hasAttributeNS returns a boolean value indicating whether the current element has the specified attribute.	https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS
Element.hasAttributes()	A										<pre><code>result = targetElement.hasAttributes();</code></pre>The Element.hasAttributes() method returns a Boolean value, true or false, indicating if the current element has any attributes or not.	https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes
Element.id	A										<pre><code>var idStr = elt.id; // Get the id.\nelt.id = idStr; // Set the id\n</code></pre>The Element.id property represents the element's identifier, reflecting the id global attribute.	https://developer.mozilla.org/en-US/docs/Web/API/Element/id
Element.innerHTML	A										<pre><code>var content = element.innerHTML;</code></pre>The Element.innerHTML property sets or gets the HTML syntax describing the element's descendants.	https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML
Element.insertAdjacentElement()	A										<pre><code>element.insertAdjacentElement(position, element);</code></pre>The insertAdjacentElement() method inserts a given element node at a given position relative to the element it is invoked upon.	https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement
Element.insertAdjacentHTML()	A										<pre><code>element.insertAdjacentHTML(position, text);</code></pre>insertAdjacentHTML() parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation.	https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
Element.insertAdjacentText()	A										<pre><code>element.insertAdjacentText(position, element);</code></pre>The insertAdjacentText() method inserts a given text node at a given position relative to the element it is invoked upon.	https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText
Element.localName	A										<pre><code>name = element.localName\n</code></pre>The Element.localName read-only property returns the local part of the qualified name of an element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/localName
Element.matches()	A										<pre><code>var result = element.matches(selectorString); \n</code></pre>The Element.matches() method returns true if the element would be selected by the specified selector string; otherwise, returns false.	https://developer.mozilla.org/en-US/docs/Web/API/Element/matches
Element.name	A										<pre><code>HTMLElement.name = string;\nvar elName = HTMLElement.name;\n\nvar fControl = HTMLFormElement.elementName;\nvar controlCollection = HTMLFormElement.elements.elementName;\n</code></pre>name gets or sets the name property of a DOM object; it only applies to the following elements: &lt;a&gt;, &lt;applet&gt;, &lt;button&gt;, &lt;form&gt;, &lt;frame&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;input&gt;, &lt;map&gt;, &lt;meta&gt;, &lt;object&gt;, &lt;param&gt;, &lt;select&gt;, and &lt;textarea&gt;.	https://developer.mozilla.org/en-US/docs/Web/API/Element/name
Element.namespaceURI	A										<pre><code>namespace = element.namespaceURI</code></pre>The Element.namespaceURI read-only property returns the namespace URI of the element, or null if the element is not in a namespace.	https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI
Element.ongotpointercapture	A										<pre><code>var gotCaptureHandler = target.ongotpointercpature;\n</code></pre>ongotpointercapture is an EventHandler property of the Element interface that returns the event handler (function) for the gotpointercapture event type.	https://developer.mozilla.org/en-US/docs/Web/API/Element/ongotpointercapture
Element.onlostpointercapture	A										<pre><code>var lostCaptureHandler = target.onlostpointercpature;\n</code></pre>onlostpointercapture is an EventHandler property of the Element interface that returns the event handler (function) for the lostpointercapture event type.	https://developer.mozilla.org/en-US/docs/Web/API/Element/onlostpointercapture
Element.onwheel	A										The onwheel property returns the onwheel event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/onwheel
Element.outerHTML	A										<pre><code>var content = element.outerHTML;\n</code></pre>The outerHTML attribute of the element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can be set to replace the element with nodes parsed from the given string.	https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML
Element.prefix	A										<pre><code>string = element.prefix\n</code></pre>The Element.prefix read-only property returns the namespace prefix of the specified element, or null if no prefix is specified.	https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix
Element.querySelector()	A										<pre><code>element = baseElement.querySelector(selectors);\n</code></pre>Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.	https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector
Element.querySelectorAll()	A										<pre><code>elementList = baseElement.querySelectorAll(selectors);\n</code></pre>Returns a non-live NodeList of all elements descended from the element on which it is invoked that match the specified group of CSS selectors.	https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll
Element.releasePointerCapture()	A										<pre><code>targetElement.releasePointerCapture(pointerId);\n</code></pre>Releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.	https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture
Element.removeAttribute()	A										<pre><code>element.removeAttribute(attrName); \n</code></pre>removeAttribute removes an attribute from the specified element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute
Element.removeAttributeNode()	A										<pre><code>removedAttr = element.removeAttributeNode(attributeNode)\n</code></pre>removeAttributeNode removes the specified attribute from the current element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode
Element.removeAttributeNS()	A										<pre><code>element.removeAttributeNS(\nnamespace,\nattrName);\n</code></pre>removeAttributeNS removes the specified attribute from an element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS
Element.requestFullscreen()	A										<pre><code>elt.requestFullscreen();\n</code></pre>The Element.requestFullscreen() method issues an asynchronous request to make the element be displayed full-screen.	https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen
Element.requestPointerLock()	A										<pre><code>instanceOfElement.requestPointerLock();\n</code></pre>The Element.requestPointerLock() method allows to asynchronously ask for the pointer to be locked on the given element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock
Element.runtimeStyle	A										Element.runtimeStyle is a proprietary property&#160; similar to HTMLElement.style, except its styles, that have higher precedence and modification.It does not modify the style content attribute. It is available in old versions of Microsoft Internet Explorer.	https://developer.mozilla.org/en-US/docs/Web/API/Element/runtimeStyle
Element.scrollHeight	A										<pre><code>var intElemScrollHeight = element.scrollHeight;</code></pre>The Element.scrollHeight read-only attribute is a measurement of the height of an element's content, including content not visible on the screen due to overflow. The scrollHeight value is equal to the minimum height (where height includes padding but does not include border and margin) the element would require in order to fit all the content in the viewpoint without using a vertical scrollbar. It includes the element padding but not its margin.	https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight
Element.scrollIntoView()	A										<pre><code>element.scrollIntoView(); // Equivalent to element.scrollIntoView(true)\nelement.scrollIntoView(alignToTop); // Boolean arguments\nelement.scrollIntoView(scrollIntoViewOptions); // Object argument\n</code></pre>The Element.scrollIntoView() method scrolls the current element into the visible area of the browser window.	https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView
Element.scrollIntoViewIfNeeded()	A										The Element.scrollIntoViewIfNeeded() method scrolls the current element into the visible area of the browser window if it's not already within the visible area of the browser window. If the element is already within the visible area of the browser window, then no scrolling takes place. This method is a proprietary variation of the standard Element.scrollIntoView() method.	https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded
Element.scrollLeft	A										<pre><code>// Get the number of pixels scrolled\nvar sLeft = element.scrollLeft;\n</code></pre>The Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled to the left.	https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft
Element.scrollLeftMax	A										<pre><code>var pxl = elt.scrollLeftMax;</code></pre>The Element.scrollLeftMax read-only property returns a Number representing the maximum left scroll offset possible for the element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeftMax
Element.scrollTop	A										<pre><code>// Get the number of pixels scrolled\nvar  intElemScrollTop = someElement.scrollTop;\n</code></pre>The Element.scrollTop property gets or sets the number of pixels that the content of an element is scrolled upward. An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar, then its scrollTop value defaults to 0.	https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop
Element.scrollTopMax	A										<pre><code>var pxl = elt.scrollTopMax;</code></pre>The Element.scrollTopMax read-only property returns a Number representing the maximum top scroll offset possible for the element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTopMax
Element.scrollWidth	A										<pre><code>var xScrollWidth = element.scrollWidth;</code></pre>The Element.scrollWidth read–only property returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater. If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), the scrollWidth is larger than the clientWidth.	https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth
Element.setAttribute()	A										<pre><code>element.setAttribute(name, value);\n</code></pre>Adds a new attribute or changes the value of an existing attribute on the specified element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute
Element.setAttributeNode()	A										<pre><code>var replacedAttr = element.setAttributeNode(attribute);\n</code></pre>setAttributeNode() adds a new Attr node to the specified element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode
Element.setAttributeNodeNS()	A										<pre><code>replacedAttr = element.setAttributeNodeNS(attributeNode) \n</code></pre>setAttributeNodeNS adds a new namespaced attribute node to an element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS
Element.setAttributeNS()	A										<pre><code>element.setAttributeNS(\nnamespace,\nname,\nvalue)\n</code></pre>setAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.	https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS
Element.setCapture()	A										<pre><code>element.setCapture(retargetToElement);\n</code></pre>Call this method during the handling of a mousedown event to retarget all mouse events to this element until the mouse button is released or document.releaseCapture() is called.	https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture
Element.setPointerCapture()	A										<pre><code>targetElement.setPointerCapture(pointerId);\n</code></pre>Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal target (or hit test) at a pointer's location. This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element (for example by scrolling).	https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture
Element.shadowRoot	A										<pre><code>var shadowroot = element.shadowRoot; \n</code></pre>The Element.shadowRoot read-only property represents the shadow root hosted by the element. Use Element.attachShadow to add a shadow root to an existing element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot
Element.slot	A										<pre><code>var aString = element.slot\nelement.slot = aString\n</code></pre>The slot property of the Element interface returns the name of the shadow DOM slot attatched to the element. A slot is a placeholder inside a web component that users can fill with their own markup.	https://developer.mozilla.org/en-US/docs/Web/API/Element/slot
Element.tabStop	A										<pre><code>var isTabStop = element.tabStop;\nelement.tabStop = (true|false);\n</code></pre>The tabStop property of the Element interface returns a Boolean indicating if the element can receive input focus via the tab key. If the specified element is a shadow host tab navigation is delegated to its children.	https://developer.mozilla.org/en-US/docs/Web/API/Element/tabStop
Element.tagName	A										<pre><code>elementName = element.tagName;\n</code></pre>Returns the name of the element.	https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName
Encoding API	A										The Encoding API defines allows to deal with text encoded with different methods. It mainly allows to handle legacy content, encrypted with old methods, as it requires new content to be encoded using UTF-8.	https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API
Encrypted Media Extensions API	A										The EncryptedMediaExtenstions API provides interfaces for controlling the playback of content which is subject to a digital restrictions management scheme.	https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API
EntrySync	A										The EntrySync interface of the FileSystem API represents an entry in a file system. The entry can be a FileEntrySync or a DirectoryEntry. It includes methods for working with files—including copying, moving, removing, and reading files—as well as information about the file it points to—including the file name and its path from the root to the entry.	https://developer.mozilla.org/en-US/docs/Web/API/EntrySync
ErrorEvent	A										The ErrorEvent interface represents events providing information related to errors in scripts or in files.	https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent
Event	A										The Event interface represents any event of the DOM. It contains common properties and methods to any event.	https://developer.mozilla.org/en-US/docs/Web/API/Event
Event.bubbles	A										Indicates whether the given event bubbles up through the DOM or not.	https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles
Event.cancelable	A										<pre><code>bool = event.cancelable\n</code></pre>Indicates whether the event is cancelable or not.	https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable
Event.cancelBubble	A										<pre><code>event.cancelBubble = bool;\nvar bool = event.cancelBubble;\n</code></pre>The Event.cancelBubble property indicates if event bubbling for this event has been canceled or not. It is set to false by default, allowing the event to bubble up the DOM, if it is a bubbleable event. Setting this property to true stops the event from bubbling up the DOM. Not all events are allowed to bubble up the DOM.	https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble
Comparison of Event Targets	A										It's easy to get confused about which target to examine when writing an event handler. This article should clarify the use of the target properties.	https://developer.mozilla.org/en-US/docs/Web/API/Event/Comparison_of_Event_Targets
Event.createEvent()	A										Creates a new event, which must then be initialized by calling its init() method.	https://developer.mozilla.org/en-US/docs/Web/API/Event/createEvent
Event.currentTarget	A										Identifies the current target for the event, as the event traverses the DOM. It always refers to the element the event handler has been attached to as opposed to event.target which identifies the element on which the event occurred.	https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget
Event.deepPath	A										<pre><code>var nodes[] = Event.deepPath</code></pre>The deepPath property of the Event interface returns an Array of nodes through which the event bubbled.	https://developer.mozilla.org/en-US/docs/Web/API/Event/deepPath
Event.defaultPrevented	A										<pre><code>bool = event.defaultPrevented </code></pre>Returns a boolean indicating whether or not event.preventDefault() was called on the event.	https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented
Event()	A										<pre><code> event = new Event(typeArg, eventInit);</code></pre>The Event() constructor creates a new Event.	https://developer.mozilla.org/en-US/docs/Web/API/Event/Event
Event.eventPhase	A										<pre><code>var phase = event.eventPhase;\n</code></pre>Indicates which phase of the event flow is currently being evaluated.	https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase
Event.explicitOriginalTarget	A										The explicit original target of the event. (Mozilla-specific)	https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget
Event.initEvent()	A										<pre><code>event.initEvent(type, bubbles, cancelable);</code></pre>The Event.initEvent() method is used to initialize the value of an event created using Document.createEvent().	https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent
Event.isTrusted	A										<pre><code>var bool = event.isTrusted;\n</code></pre>The isTrusted read-only property of the Event interface is a boolean that is true when the event was generated by a user action, and false when the event was created or modified by a script or dispatched via dispatchEvent.	https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted
Event.originalTarget	A										The original target of the event before any retargetings. (Mozilla-specific)	https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget
Event.preventDefault()	A										<pre><code>event.preventDefault();</code></pre>Cancels the event if it is cancelable, without stopping further propagation of the event.	https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault
Event.returnValue	A										<pre><code>event.returnValue = bool;\nvar bool = event.returnValue;\n</code></pre>The Event.returnValue property indicates if the default action for this event has been prevented or not. It is set to true by default, allowing the default action to occur. Setting this property to false prevents the default action.	https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue
Event.scoped	A										<pre><code>var scoped = Event.scoped</code></pre>The scoped property of the Event interface returns a Boolean indicating whether the given event bubbles. If this value is true, deepPath will only contain a target node.	https://developer.mozilla.org/en-US/docs/Web/API/Event/scoped
Event.srcElement	A										Event.srcElement is a proprietary alias for the standard Event.target property. It is specific to old versions of Microsoft Internet Explorer.	https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement
Event.stopImmediatePropagation()	A										<pre><code>event.stopImmediatePropagation(); \n</code></pre>Prevents other listeners of the same event from being called.	https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation
Event.stopPropagation()	A										<pre><code>event.stopPropagation();</code></pre>Prevents further propagation of the current event in the capturing and bubbling phases.	https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation
Event.target	A										<pre><code>theTarget = event.target</code></pre>A reference to the object that dispatched the event. It is different from event.currentTarget when the event handler is called during the bubbling or capturing phase of the event.	https://developer.mozilla.org/en-US/docs/Web/API/Event/target
Event.timeStamp	A										<pre><code>event.timeStamp\n</code></pre>Returns the time (in milliseconds) at which the event was created.	https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
Event.type	A										<pre><code>event.type\n</code></pre>The Event.type read-only property returns a string containing the type of event. It is set when the event is constructed and is the name commonly used to refer to the specific event.	https://developer.mozilla.org/en-US/docs/Web/API/Event/type
EventListener	A										This method is called whenever an event occurs of the type for which the EventListener interface was registered.	https://developer.mozilla.org/en-US/docs/Web/API/EventListener
EventSource	A										The EventSource interface is used to receive server-sent events. It connects to a server over HTTP and receives events in text/event-stream format without closing the connection.	https://developer.mozilla.org/en-US/docs/Web/API/EventSource
EventSource()	A										<pre><code>pc = new EventSource(url, configuration);</code></pre>The EventSource () constructor returns a newly-created EventSource, which represents a remote ressource.	https://developer.mozilla.org/en-US/docs/Web/API/EventSource/EventSource
EventTarget	A										EventTarget is an interface implemented by objects that can receive events and may have listeners for them.	https://developer.mozilla.org/en-US/docs/Web/API/EventTarget
EventTarget.addEventListener()	A										<pre><code>target.addEventListener(type, listener[, options]);\ntarget.addEventListener(type, listener[, useCapture]);\ntarget.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only\n</code></pre>The EventTarget.addEventListener() method registers the specified listener on the EventTarget it's called on. The event target may be an Element in a document, the Document itself, a Window, or any other object that supports events (such as XMLHttpRequest).	https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
EventTarget.attachEvent()	A										<pre><code>attached = target.attachEvent(eventNameWithOn, callback)\n</code></pre>This is a proprietary Microsoft Internet Explorer alternative to the standard EventTarget.addEventListener() method.	https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/attachEvent
EventTarget.detachEvent()	A										<pre><code>target.detachEvent(eventNameWithOn, callback)\n</code></pre>This is a proprietary Microsoft Internet Explorer alternative to the standard EventTarget.removeEventListener() method.	https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/detachEvent
EventTarget.dispatchEvent()	A										<pre><code>cancelled = !target.dispatchEvent(event)\n</code></pre>Dispatches an Event at the specified EventTarget, invoking the affected EventListener s in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) also apply to events dispatched manually with dispatchEvent().	https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
EventTarget.fireEvent()	A										<pre><code>cancelled = target.fireEvent(eventNameWithOn, event)\n</code></pre>This is a proprietary Microsoft Internet Explorer alternative to the standard EventTarget.dispatchEvent() method. Unlike EventTarget.dispatchEvent(), an event triggered via fireEvent() never triggers the default activation behavior of an event. For example, triggering a click event on an &lt;input type="checkbox"&gt; via fireEvent() will not toggle the checkedness of the checkbox.	https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/fireEvent
EventTarget.removeEventListener()	A										<pre><code>target.removeEventListener(type, listener[, options]);\ntarget.removeEventListener(type, listener[, useCapture]);\n</code></pre>The EventTarget.removeEventListener() method removes the event listener previously registered with EventTarget.addEventListener().	https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
ExtendableEvent	A										The ExtendableEvent interface extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent
ExtendableEvent.ExtendableEvent()	A										<pre><code>var myExtendableEvent = new ExtendableEvent(type, init);</code></pre>The ExtendableEvent() constructor creates a new ExtendableEvent object.	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/ExtendableEvent
ExtendableEvent.waitUntil()	A										<pre><code>event.waitUntil(function)</code></pre>The ExtendableEvent.waitUntil() method extends the lifetime of the event. When called in an EventHandler associated to the install event, it delays treating the installing worker as installed until the passed Promise resolves successfully. This is primarily used to ensure that a service worker is not considered installed until all of the core caches it depends on are populated.	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil
ExtendableMessageEvent	A										The ExtendableMessageEvent interface of the ServiceWorker API represents the event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events.	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent
ExtendableMessageEvent.data	A										<pre><code>var myData = ExtendableMessageEventInstance.data;</code></pre>The data read-only property of the ExtendableMessageEvent interface returns the event's data. It can be any data type.	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/data
ExtendableMessageEvent.ExtendableMessageEvent()	A										<pre><code>var myEME = new ExtendableMessageEvent(type, init);</code></pre>The Extendable MessageEvent() constructor creates a new ExtendableMessageEvent object instance.	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/ExtendableMessageEvent
ExtendableMessageEvent.lastEventId	A										<pre><code>var myLastEventId = ExtendableMessageEventInstance.lastEventId;</code></pre>The lastEventID read-only property of the ExtendableMessageEvent interface represents, in server-sent events, the last event ID of the event source.	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/lastEventId
ExtendableMessageEvent.origin	A										<pre><code>var myOrigin = ExtendableMessageEventInstance.origin;</code></pre>The origin read-only property of the ExtendableMessageEvent interface returns the origin of the ServiceWorkerClient that sent the message.	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/origin
ExtendableMessageEvent.ports	A										<pre><code>var myPorts = ExtendableMessageEventInstance.ports;</code></pre>The ports read-only property of the ExtendableMessageEvent interface returns the array containing the MessagePort objects representing the ports of the associated message channel (the channel the message is being sent through.)	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/ports
ExtendableMessageEvent.source	A										<pre><code>var mySource = ExtendableMessageEventInstance.source;</code></pre>The source read-only property of the ExtendableMessageEvent returns a reference to the Client object from which the message was sent.	https://developer.mozilla.org/en-US/docs/Web/API/ExtendableMessageEvent/source
EXT_blend_minmax	A										The EXT_blend_minmax extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_blend_minmax
EXT_color_buffer_float	A										The EXT_color_buffer_float extension is part of WebGL and adds the ability to render a variety of floating point formats.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_float
EXT_color_buffer_half_float	A										The EXT_color_buffer_half_float extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_half_float
EXT_disjoint_timer_query	A										The EXT_disjoint_timer_query extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query
EXT_disjoint_timer_query.beginQueryEXT()	A										<pre><code>void ext.beginQueryEXT(target, query);\n</code></pre>The EXT_disjoint_timer_query.beginQueryEXT() method of the WebGL API starts a timer query.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/beginQueryEXT
EXT_disjoint_timer_query.createQueryEXT()	A										<pre><code>WebGLTimerQueryEXT ext.createQueryEXT();\n</code></pre>The EXT_disjoint_timer_query.createQueryEXT() method of the WebGL API creates and initializes WebGLTimerQueryEXT objects, which track the time needed to fully complete a set of GL commands.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/createQueryEXT
EXT_disjoint_timer_query.deleteQueryEXT()	A										<pre><code>void ext.deleteQueryEXT(query);\n</code></pre>The EXT_disjoint_timer_query.deleteQueryEXT() method of the WebGL API deletes a given WebGLTimerQueryEXT object.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/deleteQueryEXT
EXT_disjoint_timer_query.endQueryEXT()	A										<pre><code>void ext.endQueryEXT(target);\n</code></pre>The EXT_disjoint_timer_query.endQueryEXT() method of the WebGL API ends a timer query.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/endQueryEXT
EXT_disjoint_timer_query.getQueryEXT()	A										<pre><code>any ext.getQueryEXT(target, pname);\n</code></pre>The EXT_disjoint_timer_query.getQueryEXT() method of the WebGL API returns information about a query target.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/getQueryEXT
EXT_disjoint_timer_query.getQueryObjectEXT()	A										<pre><code>any ext.getQueryObjectEXT(query, pname);\n</code></pre>The EXT_disjoint_timer_query.getQueryObjectEXT() method of the WebGL API returns the state of a query object.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/getQueryObjectEXT
EXT_disjoint_timer_query.isQueryEXT()	A										<pre><code>GLBoolean ext.isQueryEXT(query);\n</code></pre>The EXT_disjoint_timer_query.isQueryEXT() method of the WebGL API returns true if the passed object is a WebGLTimerQueryEXT object.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/isQueryEXT
EXT_disjoint_timer_query.queryCounterEXT()	A										<pre><code>void ext.queryCounterEXT(query, target);\n</code></pre>The EXT_disjoint_timer_query.queryCounterEXT() method of the WebGL API records the current time into the corresponding query object.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_disjoint_timer_query/queryCounterEXT
EXT_frag_depth	A										The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_frag_depth
EXT_shader_texture_lod	A										The EXT_shader_texture_lod extension is part of the WebGL API and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (Level of detail).	https://developer.mozilla.org/en-US/docs/Web/API/EXT_shader_texture_lod
EXT_sRGB	A										The EXT_sRGB extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.	https://developer.mozilla.org/en-US/docs/Web/API/EXT_sRGB
EXT_texture_filter_anisotropic	A										The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).	https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic
FederatedCredential	A										The FederatedCredential interface of the the Credential Management API provides information about credentials from a federated identity provider, which is an entity that a website trusts to correctly authenticate a user, and which provides an API for that purpose. OpenID Connect is an example of such a framework. In supporting browsers an instance of this class may be passed in the credential member of the init object for global fetch.	https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential
FederatedCredential	A										<pre><code>var myCredential = new FederatedCredential(init)</code></pre>The FederatedCredential constructor creates a new FederatedCredential object. In supporting browsers an instance of this class may be passed in the credential member of the init object for global fetch.	https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/FederatedCredential
provider	A										<pre><code>var provider = FederatedCredential.provider</code></pre>The provider property of the FederatedCredential interface returns a USVString containing a credential's federated identity provider.	https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/provider
FetchEvent	A										The parameter passed into the ServiceWorkerGlobalScope.onfetch handler, FetchEvent represents a fetch action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. It contains information about the request and resulting response, and provides the FetchEvent.respondWith() method, which allows us to provide an arbitrary response back to the controlled page.	https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent
FetchEvent.client	A										<pre><code>var myClient = FetchEvent.client;</code></pre>The FetchEvent.client read-only property returns the Client that the current service worker is controlling.	https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/client
FetchEvent.clientId	A										<pre><code>var myClientId = FetchEvent.clientId;</code></pre>The clientId read-only property of the FetchEvent returns the id of the Client that the current service worker is controlling.	https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/clientId
FetchEvent.FetchEvent()	A										<pre><code>var myFetchEvent = new FetchEvent(type, init);</code></pre>The FetchEvent() constructor creates a new FetchEvent object.	https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/FetchEvent
FetchEvent.isReload	A										<pre><code>var reloaded = FetchEvent.isReload</code></pre>The isReload read-only property of the FetchEvent interface returns true if the event was dispatched by the user attempting to reload the page, and false otherwise. Pressing the refresh button is a reload while clicking a link and pressing the back button is not.	https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/isReload
FetchEvent.request	A										<pre><code>var recentRequest = FetchEvent.request;</code></pre>The request read-only property of the FetchEvent interface returns the Request that triggered the event handler.	https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/request
FetchEvent.respondWith()	A										<pre><code>FetchEvent.respondWith(\n  //Promise that resolves to a Response or a network error.\n&#8203;)</code></pre>The respondWith() method of the FetchEvent interface is intended for containing code that generates custom responses to the requests coming from the controlled page. This code will resolve by returning a Response or network error to Fetch.	https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith
InstallEvent	A										The InstallEvent interface represents an install action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. As a child of ExtendableEvent it ensures that functional events (like FetchEvent) are not dispatched during installation.	https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent_clone
Fetch API	A										The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.	https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
Fetch basic concepts	A										At the heart of Fetch are the Interface abstractions of HTTP Request s, Response s, Headers, and Body payloads, along with a global fetch method for initiating asynchronous resource requests. Because the main components of HTTP are abstracted as JavaScript objects, it is easy for other APIs to make use of such functionality.	https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Basic_concepts
Using Fetch	A										This kind of functionality was previously achieved using XMLHttpRequest. Fetch provides a better alternative that can be easily used by other technologies such as Service Workers. Fetch also provides a single logical place to define other HTTP-related concepts such as CORS and extensions to HTTP.	https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
File	A										The File interface provides information about files and allows JavaScript in a web page to access their content.	https://developer.mozilla.org/en-US/docs/Web/API/File
File.fileName	A										<pre><code>var name = instanceOfFile.fileName</code></pre>Returns the name of the file. For security reasons the path is excluded from this property.	https://developer.mozilla.org/en-US/docs/Web/API/File/fileName
File.fileSize	A										<pre><code>var size = instanceOfFile.fileSize</code></pre>Returns the size of a file in bytes.	https://developer.mozilla.org/en-US/docs/Web/API/File/fileSize
File.getAsDataURL()	A										<pre><code>var url = instanceOfFile.getAsDataURL();</code></pre>The getAsDataURL provides a data: URL that encodes the entire contents of the referenced file.	https://developer.mozilla.org/en-US/docs/Web/API/File/getAsDataURL
File.getAsText()	A										<pre><code>var str = instanceOfFile.getAsText(encoding);</code></pre>The getAsText method provides the file's data interpreted as text using a given encoding.	https://developer.mozilla.org/en-US/docs/Web/API/File/getAsText
File.lastModifiedDate	A										<pre><code>var time = instanceOfFile.lastModifiedDate</code></pre>The File.lastModifiedDate read-only property returns the last modified date of the file. Files without a known last modified date returns the current date.	https://developer.mozilla.org/en-US/docs/Web/API/File/lastModifiedDate
File.name	A										<pre><code>var name = file.name;</code></pre>Returns the name of the file represented by a File object. For security reasons, the path is excluded from this property.	https://developer.mozilla.org/en-US/docs/Web/API/File/name
File.webkitRelativePath	A										<pre><code>&#160;str = fileObj.webkitRelativePath</code></pre>The File.webkitRelativePath is a read-only property that contains a DOMString with the path relative to the directory selected when the webkitdirectory has been set on the input element.	https://developer.mozilla.org/en-US/docs/Web/API/File/webkitRelativePath
FileEntrySync	A										The FileEntrySync interface of the File System API represents a file in a file system. It lets you write content to a file.	https://developer.mozilla.org/en-US/docs/Web/API/FileEntrySync
FileException	A										In the File System API, a FileException object represents error conditions that you might encounter while accessing the file system using the synchronous API. It extends the FileException interface described in File Writer and adds several new error codes.	https://developer.mozilla.org/en-US/docs/Web/API/FileException
FileList	A										An object of this type is returned by the files property of the HTML input element; this lets you access the list of files selected with the input type="file" element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.	https://developer.mozilla.org/en-US/docs/Web/API/FileList
FileReader	A										The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader
FileReader.abort()	A										<pre><code>instanceOfFileReader.abort();</code></pre>The abort method aborts the read operation. Upon return, the readyState will be DONE.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader/abort
FileReader.error	A										<pre><code>var error = instanceOfFileReader.error\n</code></pre>Returns the error that occurred while reading the file.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader/error
FileReader.onload	A										The FileReader.onload property contains a event handler executed when the load event is fired, when content read with readAsArrayBuffer, readAsBinaryString, readAsDataURL or readAsText is available.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader/onload
FileReader.readAsArrayBuffer()	A										<pre><code>instanceOfFileReader.readAsArrayBuffer(blob);</code></pre>The FileReader interface's readAsArrayBuffer() method is used to start reading the contents of a specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains an ArrayBuffer representing the file's data.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer
FileReader.readAsBinaryString()	A										<pre><code>instanceOfFileReader.readAsBinaryString(blob);</code></pre>The readAsBinaryString method is used to start reading the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the raw binary data from the file.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsBinaryString
FileReader.readAsDataURL()	A										<pre><code>instanceOfFileReader.readAsDataURL(blob);</code></pre>The readAsDataURL method is used to read the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the data as a URL representing the file's data as a base64 encoded string.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
FileReader.readAsText()	A										<pre><code>instanceOfFileReader.readAsText(blob[, encoding]);</code></pre>The readAsText method is used to read the contents of the specified Blob or File. When the read operation is complete, the readyState is changed to DONE, the loadend is triggered, and the result attribute contains the contents of the file as a text string.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText
FileReader.readyState	A										<pre><code>var state = instanceOfFileReader.readyState\n</code></pre>Provides the current state of the reading operation.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readyState
FileReader.result	A										<pre><code>var file = instanceOfFileReader.result\n</code></pre>Returns the file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.	https://developer.mozilla.org/en-US/docs/Web/API/FileReader/result
FileReaderSync	A										The FileReaderSync interface allows to read File or Blob objects in a synchronous way.	https://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync
FileRequest	A										The FileRequest interface extends the DOMRequest interface to provide some extra properties necessary for the LockedFile objects.	https://developer.mozilla.org/en-US/docs/Web/API/FileRequest
FileRequest.lockedFile	A										<pre><code>var lockedFile = instanceOfFileRequest.lockedFile\n</code></pre>The lockedFile property represents the LockedFile object from which the request was started.	https://developer.mozilla.org/en-US/docs/Web/API/FileRequest/lockedFile
FileRequest.onprogress	A										<pre><code>instanceOfFileRequest.onprogress = function;\n</code></pre>This property specifies a callback function to be run repeatedly while the operation represented by a FileRequest object is in progress.	https://developer.mozilla.org/en-US/docs/Web/API/FileRequest/onprogress
FileSystem	A										The File and Directory Entries API interface FileSystem is used to represent a file system. Each object is passed to the success callback when requestFileSystem() is called.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystem
FileSystem.name	A										<pre><code>var fsName = FileSystem.name;</code></pre>The read-only name property of the FileSystem interface indicates the file system's name. This DOMString is unique among all file systems currently exposed by the File and Directory Entries API.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystem/name
FileSystem.root	A										<pre><code>var rootDirEnt = FileSystem.root;</code></pre>The read-only root property of the FileSystem interface specifies a FileSystemDirectoryEntry object representing the root directory of the file system, for use with the File and Directory Entries API.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystem/root
FileSystemDirectoryEntry	A										The FileSystemDirectoryEntry interface of the File and Directory Entries API represents a directory in a file system. It provides methods which make it possible to access and manipulate the files in a directory, as well as to access the entries within the directory.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry
FileSystemDirectoryEntry.createReader()	A										<pre><code>directoryReader = FileSystemDirectoryEntry.createReader();</code></pre>The FileSystemDirectoryEntry interface's method createReader () returns a FileSystemDirectoryReader object which can be used to read the entries in the directory.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/createReader
FileSystemDirectoryEntry.getDirectory()	A										<pre><code>FileSystemDirectoryEntry.getDirectory([path][, options][, successCallback][, errorCallback]);</code></pre>The FileSystemDirectoryEntry interface's method getDirectory () returns a FileSystemDirectoryEntry object corresponding to a directory contained somewhere within the directory subtree rooted at the directory on which it's called.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/getDirectory
FileSystemDirectoryEntry.getFile()	A										<pre><code>FileSystemDirectoryEntry.getFile([path][, options][, successCallback][, errorCallback]);</code></pre>The FileSystemDirectoryEntry interface's method getFile () returns a FileSystemFileEntry object corresponding to a file contained somewhere within the directory subtree rooted at the directory on which it's called.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/getFile
FileSystemDirectoryEntry.removeRecursively()	A										<pre><code>FileSystemDirectoryEntry.removeRecursively(successCallback[, errorCallback]);</code></pre>The FileSystemDirectoryEntry interface's method removeRecursively () removes the directory as well as all of its content, hierarchically iterating over its entire subtree of descendant files and directories.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/removeRecursively
FileSystemDirectoryReader	A										The FileSystemDirectoryReader interface of the File and Directory Entries API lets you access the FileEntry -based objects (generally FileSystemFileEntry or FileSystemDirectoryEntry) representing each entry in a directory.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader
FileSystemDirectoryReader.readEntries()	A										<pre><code>readEntries(successCallback[, errorCallback]);\n</code></pre>The FileSystemDirectoryReader interface's readEntries() method retrieves the directory entries within the directory being read. Each time the method is called, an array containing some number of the directory's entries is passed to the success callback. When the end of the directory is reached, the success callback receives an empty array.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries
FileSystemEntry	A										The FileSystemEntry interface of the File and Directory Entries API represents a single in a file system. The entry can be a file or a directory (directories are represented by the DirectoryEntry interface. It includes methods for working with files—including copying, moving, removing, and reading files—as well as information about a file it points to—including the file name and its path from the root to the entry.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry
FileSystemFileEntry	A										The FileSystemFileEntry interface of the File System API represents a file in a file system. It offers properties describing the file's attributes, as well as methods for creating a FileWriter object to write to the file or a File object to read the file.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry
FileSystemFileEntry.createWriter()	A										<pre><code>FileSystemFileEntry.createWriter(successCallback[, errorCallback]);</code></pre>The FileSystemFileEntry interface's method createWriter() returns a FileWriter object which can be used to write data into the file represented by the directory entry.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry/createWriter
FileSystemFileEntry.file()	A										<pre><code>FileSystemFileEntry.file(successCallback[, errorCallback]);</code></pre>The FileSystemFileEntry interface's method file () returns a File object which can be used to read data from the file represented by the directory entry.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry/file
FileSystemFlags	A										The FileSystemFlags dictionary defines a set of values which are used when specifying option flags when calling certain methods in the File and Directory Entries API. Methods which accept an options parameter of this type may specify zero or more of these flags as fields in an object, like this:	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags
FileSystemSync	A										In the File System API, a FileSystemSync object represents a file system. It has two properties.	https://developer.mozilla.org/en-US/docs/Web/API/FileSystemSync
File and Directory Entries API	A										The File and Directory Entries API simulates a local file system that web apps can navigate within. You can develop apps which read, write, and create files and/or directories in a virtual, sandboxed file system.	https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API
Introduction to the File and Directory Entries API	A										The File and Directory Entries API simulates a local file system that web apps can navigate around. You can develop apps that can read, write, and create files and directories in a sandboxed, virtual file system.	https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API/Introduction
FileHandle API	A										The FileHandle API allows for the manipulating of files, including creating files and modifying their content (unlike the File API). Because the files manipulated through that API can be physically stored on the device, the editing part uses a turn-based locking mechanism in order to avoid race issues.	https://developer.mozilla.org/en-US/docs/Web/API/File_Handle_API
FocusEvent	A										The FocusEvent interface represents focus-related events like focus, blur, focusin, or focusout.	https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent
FocusEvent()	A										<pre><code>var focusEvent = new FocusEvent(typeArg, focusEventInit); \n</code></pre>The FocusEvent() constructor returns a newly created FocusEvent object with an optional EventTarget. When a change a focus has a source and a destination, the relatedTarget value must be set to the other target.	https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent
FocusEvent.relatedTarget	A										<pre><code>secondTarget = focusEvent.relatedTarget</code></pre>The FocusEvent.relatedTarget read-only property represents a secondary target for this event, which will depend on the event itself. In some cases (like when tabbing in or out a page), this property may be set to null for security reasons.	https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/relatedTarget
FontFace	A										The FontFace interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status.	https://developer.mozilla.org/en-US/docs/Web/API/FontFace
FontFaceSet	A										The FontFaceSet interface of the CSS Font Loading API is an interface for loading font faces and checking their download statuses.	https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet
FontFaceSet.check()	A										<pre><code>bool = aFontFaceSet.check(font);\nbool = aFontFaceSet.check(font, text);\n</code></pre>A Boolean that is true if the font list is available	https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/check
FontFaceSet.load()	A										<pre><code>result = aFontFaceSet.load(font);\n\nresult = aFontFaceSet.load(font, text);\n</code></pre>A Promise of an Array of FontFace loaded. The promise is fulfilled when all the fonts are loaded; it is rejected if one of the fonts failed to load.	https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/load
FontFaceSet.ready	A										<pre><code>FontFaceSet.ready().then(function(FontFaceSet) { ... });</code></pre>The ready() method of the FontFaceSet interface returns a Promise that resolves to a list of font faces for a requested font.	https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/ready
Force Touch events	A										Force Touch events are a proprietary, Apple-specific feature which makes possible (where supported by the input hardware) new interactions based on how hard the user clicks or presses down on the touchscreen or trackpad.	https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events
FormData	A										The FormData interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".	https://developer.mozilla.org/en-US/docs/Web/API/FormData
FormData.append()	A										<pre><code>formData.append(name, value);\nformData.append(name, value, filename);</code></pre>The append() method of the FormData interface appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/append
FormData.delete()	A										<pre><code>formData.delete(name);</code></pre>The delete() method of the FormData interface deletes a key and its value(s) from a FormData object.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/delete
FormData.entries()	A										<pre><code>formData.entries();</code></pre>The FormData.entries() method returns an iterator allowing to go through all key/value pairs contained in this object. The key of each pair is a USVString object; the value either a USVString, or a Blob.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/entries
FormData()	A										<pre><code>var formData = new FormData(form)</code></pre>The FormData() constructor creates a new FormData object.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData
FormData.get()	A										<pre><code>formData.get(name);</code></pre>The get() method of the FormData interface returns the first value associated with a given key from within a FormData object. If you expect multiple values and want all of them, use the getAll() method instead.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/get
FormData.getAll()	A										<pre><code>formData.getAll(name);</code></pre>The getAll() method of the FormData interface returns all the values associated with a given key from within a FormData object.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll
FormData.has()	A										<pre><code>formData.has(name);</code></pre>The has() method of the FormData interface returns a boolean stating whether a FormData object contains a certain key.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/has
FormData.keys()	A										<pre><code>formData.keys();</code></pre>The FormData.keys() method returns an iterator allowing to go through all keys contained in this object. The keys are USVString objects.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/keys
FormData.set()	A										<pre><code>formData.set(name, value);\nformData.set(name, value, filename);</code></pre>The set() method of the FormData interface sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/set
Using FormData Objects	A										The FormData object lets you compile a set of key/value pairs to send using XMLHttpRequest. It is primarily intended for use in sending form data, but can be used independently from forms in order to transmit keyed data. The transmitted data is in the same format that the form's submit() method would use to send the data if the form's encoding type were set to multipart/form-data.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects
FormData.values()	A										<pre><code>formData.values();</code></pre>The FormData.values() method returns an iterator allowing to go through all values contained in this object. The values are USVString or Blob objects.	https://developer.mozilla.org/en-US/docs/Web/API/FormData/values
Frame Timing API	A										The PerformanceFrameTiming interface provides frame timing data about the browser's event loop. A frame represents the amount of work a browser does in one event loop iteration such as processing DOM events, resizing, scrolling, rendering, CSS animations, etc. A frame rate of 60 fps (frames per second) for a 60 Hz refresh rate is a common target for a good responsive user experience. This means the browser should process a frame in about 16.7 ms.	https://developer.mozilla.org/en-US/docs/Web/API/Frame_Timing_API
Using the Frame Timing API	A										The PerformanceFrameTiming interface provides frame timing data about the browser's event loop. A frame represents the amount of work a browser does in one event loop iteration such as processing DOM events, resizing, scrolling, rendering, CSS animations, etc. A frame rate of 60 fps (frames per second) for a 60 Hz refresh rate is a common target for a good responsive user experience. This means the browser should process a frame in about 16.7ms.	https://developer.mozilla.org/en-US/docs/Web/API/Frame_Timing_API/Using_the_Frame_Timing_API
Fullscreen API	A										The Fullscreen API provides an easy way for web content to be presented using the user's entire screen. The API lets you easily direct the browser to make an element and its children, if any, occupy the fullscreen, eliminating all browser user interface and other applications from the screen for the duration.	https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API
GainNode	A										The gain is a unitless value, changing with time, that is multiplied to each corresponding sample of all input channels. If modified, the new gain is applied using a de-zippering algorithm in order to prevent unaesthetic 'clicks' from appearing in the resulting audio.	https://developer.mozilla.org/en-US/docs/Web/API/GainNode
GainNode.gain	A										<pre><code>var audioCtx = new AudioContext();\nvar gainNode = audioCtx.createGain();\ngainNode.gain.value = 0.5;\n</code></pre>An AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/GainNode/gain
Gamepad	A										The Gamepad interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad
Gamepad.axes	A										<pre><code>readonly    attribute double[]            axes;</code></pre>The Gamepad.axes property of the Gamepad interface returns an array representing the controls with axes present on the device (e.g. analog thumb sticks).-	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/axes
Gamepad.buttons	A										<pre><code>readonly    attribute GamepadButton[]     buttons;</code></pre>The Gamepad.buttons property of the Gamepad interface returns an array of gamepadButton objects representing the buttons present on the device.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/buttons
Gamepad.connected	A										<pre><code> readonly    attribute boolean             connected;</code></pre>The Gamepad.connected property of the Gamepad interface returns a boolean indicating whether the gamepad is still connected to the system.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/connected
Gamepad.displayId	A										<pre><code>var myDisplayId = gamepadInstance.displayId;</code></pre>The displayId read-only property of the Gamepad interface returns the VRDisplay.displayId of the associated VRDisplay — the VRDisplay that the gamepad is controlling the displayed scene of.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/displayId
Gamepad.id	A										<pre><code>readonly    attribute DOMString           id;</code></pre>The Gamepad.id property of the Gamepad interface returns a string containing some information about the controller.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id
Gamepad.index	A										<pre><code>readonly    attribute long                index;</code></pre>The Gamepad.index property of the Gamepad interface returns an integer that is auto-incremented to be unique for each device currently connected to the system.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/index
Gamepad.mapping	A										<pre><code>readonly    attribute DOMString           mapping;</code></pre>The Gamepad.mapping property of the Gamepad interface returns a string indicating whether the browser has remapped the controls on the device to a known layout.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/mapping
Gamepad.timestamp	A										<pre><code>readonly    attribute DOMHighResTimeStamp timestamp;</code></pre>The Gamepad.timestamp property of the Gamepad interface returns a DOMHighResTimeStamp representing the last time the data for this gamepad was updated.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/timestamp
GamepadButton	A										The GamepadButton interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.	https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton
GamepadButton.pressed	A										<pre><code>var isPressed = navigator.getGamepads()[0].pressed;\n</code></pre>The GamepadButton.pressed property of the GamepadButton interface returns a boolean indicating whether the button is currently pressed (true) or unpressed (false).	https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/pressed
GamepadButton.value	A										<pre><code>    readonly    attribute double  value;</code></pre>The GamepadButton.value property of the GamepadButton interface returns a double value used to represent the current state of analog buttons on many modern gamepads, such as the triggers.	https://developer.mozilla.org/en-US/docs/Web/API/GamepadButton/value
GamepadEvent	A										The GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected and Window.gamepaddisconnected are fired in response to.	https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent
GamepadEvent.gamepad	A										<pre><code>readonly    attribute Gamepad gamepad;</code></pre>The GamepadEvent.gamepad property of the GamepadEvent interface returns a Gamepad object, providing access to the associated gamepad data for fired gamepadconnected and gamepaddisconnected events.	https://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent/gamepad
Gamepad API	A										The Gamepad API is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way. It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected, and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API
Using the Gamepad API	A										HTML5 introduced many of the necessary components for rich, interactive game development. Technologies like canvas, WebGL, audio, and video, along with JavaScript implementations, have matured to the point where they can now support many tasks previously requiring native code. The Gamepad API is a way for developers and designers to access and use gamepads and other game controllers.	https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API
Geolocation	A										The Geolocation interface represents an object able to programmatically obtain the position of the device. It gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.	https://developer.mozilla.org/en-US/docs/Web/API/Geolocation
Geolocation.clearWatch()	A										<pre><code>navigator.geolocation.clearWatch(id);</code></pre>The Geolocation.clearWatch() method is used to unregister location/error monitoring handlers previously installed using Geolocation.watchPosition().	https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/clearWatch
Geolocation.getCurrentPosition()	A										<pre><code>navigator.geolocation.getCurrentPosition(success[, error[, options]])</code></pre>The Geolocation.getCurrentPosition() method is used to get the current position of the device.	https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition
Using geolocation	A										The geolocation API allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.	https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation
Geolocation.watchPosition()	A										<pre><code>id = navigator.geolocation.watchPosition(success[, error[, options]])</code></pre>The Geolocation.watchPosition() method is used to register a handler function that will be called automatically each time the position of the device changes. You can also, optionally, specify an error handling callback function.	https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/watchPosition
GestureEvent	A										The GestureEvent is a proprietary interface specific to WebKit which gives information regarding multi-touch gestures. Events using this interface include gesturestart, gesturechange, and gestureend.	https://developer.mozilla.org/en-US/docs/Web/API/GestureEvent
GlobalEventHandlers.ontouchmove	A										<pre><code>var moveHandler = someElement.ontouchmove;\n</code></pre>A global event handler for the touchmove event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHanders.ontouchmove
GlobalEventHandlers.oncancel	A										<pre><code>element.oncancel = functionRef;\n</code></pre>The oncancel property returns the onCancel event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.oncancel
GlobalEventHandlers.oncanplay	A										<pre><code>element.oncanplay = handlerFunction;\nvar handlerFunction = element.oncanplay;\n</code></pre>The oncanplay property sets and returns the event handler for the canplay event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.oncanplay
GlobalEventHandlers.oncanplaythrough	A										<pre><code>element.oncanplaythrough = handlerFunction;\nvar handlerFunction = element.oncanplaythrough;\n</code></pre>The oncanplaythrough property sets and returns the event handler for the canplaythrough event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.oncanplaythrough
GlobalEventHandlers.oncuechange	A										<pre><code>element.oncuechange = handlerFunction;\nvar handlerFunction = element.oncuechange;\n</code></pre>The oncuechange property sets and returns the event handler for the cuechange event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.oncuechange
GlobalEventHandlers.ondurationchange	A										<pre><code>element.ondurationchange = handlerFunction;\nvar handlerFunction = element.ondurationchange;\n</code></pre>The ondurationchange property sets and returns the event handler for the durationchange event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.ondurationchange
GlobalEventHandlers.onemptied	A										<pre><code>element.onemptied = handlerFunction;\nvar handlerFunction = element.onemptied;\n</code></pre>The onemptied property sets and returns the event handler for the emptied event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onemptied
GlobalEventHandlers.onended	A										<pre><code>element.onended = handlerFunction;\nvar handlerFunction = element.onended;\n</code></pre>The o nended property sets and returns the event handler for the ended event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onended
GlobalEventHandlers.oninvalid	A										<pre><code>element.oninvalid = handlerFunction;\nvar handlerFunction = element.oninvalid;\n</code></pre>The oninvalid property sets and returns the event handler for the invalid event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.oninvalid
GlobalEventHandlers.onloadeddata	A										<pre><code>element.onloadeddata = handlerFunction;\nvar handlerFunction = element.onloadeddata;\n</code></pre>The onloadeddata property sets and returns the event handler for the loadeddata event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onloadeddata
GlobalEventHandlers.onloadedmetadata	A										<pre><code>element.onloadedmetadata = handlerFunction;\nvar handlerFunction = element.onloadedmetadata;\n</code></pre>The onloadedmetadata property sets and returns the event handler for the loadedmetadata event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onloadedmetadata
GlobalEventHandlers.onloadstart	A										<pre><code>element.onloadstart = handlerFunction;\nvar handlerFunction = element.onloadstart;\n</code></pre>The onloadstart property sets and returns the event handler for the loadstart event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onloadstart
GlobalEventHandlers.onmouseenter	A										<pre><code>element.onmouseenter = handlerFunction;\nvar handlerFunction = element.onmouseenter;\n</code></pre>The onmouseenter property sets and returns the event handler for the mouseenter event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onmouseenter
GlobalEventHandlers.onmouseleave	A										<pre><code>element.onmouseleave = handlerFunction;\nvar handlerFunction = element.onmouseleave;\n</code></pre>The onmouseleave property sets and returns the event handler for the mouseleave event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onmouseleave
GlobalEventHandlers.onmousewheel	A										<pre><code>element.onmousewheel = handlerFunction;\nvar handlerFunction = element.onmousewheel;\n</code></pre>The onmousewheel property sets and returns the event handler for the mousewheel event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onmousewheel
GlobalEventHandlers.onpause	A										<pre><code>element.onpause = handlerFunction;\nvar handlerFunction = element.onpause;\n</code></pre>The onpause property sets and returns the event handler for the pause event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onpause
GlobalEventHandlers.onplay	A										<pre><code>element.onplay = handlerFunction;\nvar handlerFunction = element.onplay;\n</code></pre>The GlobalEventHandlers.onplay property sets and returns the event handler for the play event that is fired when playback has begun.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.onplay
GlobalEventHandlers.ontouchend	A										<pre><code>var endHandler = someElement.ontouchend;\n</code></pre>A global event handler for the touchend event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/GlobalEventHandlers.ontouchend
GlobalEventHandlers.onabort	A										<pre><code>window.onabort =funcRef\n</code></pre>An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort
GlobalEventHandlers.onblur	A										<pre><code>element.onblur = function;\n</code></pre>The onblur property returns the onBlur event handler code, if any, that exists on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur
GlobalEventHandlers.onchange	A										<pre><code>element.onchange = handlerFunction;\nvar handlerFunction = element.onchange;\n</code></pre>The onchange property sets and returns the event handler for the change event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange
GlobalEventHandlers.onclick	A										<pre><code>element.onclick = functionRef;\n</code></pre>The onclick property returns the click event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick
GlobalEventHandlers.onclose	A										<pre><code>window.onclose = funcRef;\n</code></pre>An event handler for close events sent to the window. (Not available with Firefox 2 or Safari)	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose
GlobalEventHandlers.oncontextmenu	A										<pre><code>window.oncontextmenu = funcRef;\n//funcRef refers to the function to be called</code></pre>An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the "contextmenu" attribute.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu
GlobalEventHandlers.ondblclick	A										<pre><code>element.ondblclick = function;\n</code></pre>The ondblclick property returns the onDblClick event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick
GlobalEventHandlers.ondrag	A										<pre><code>var dragHandler = targetElement.ondrag;\n</code></pre>A global event handler for the drag event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrag
GlobalEventHandlers.ondragend	A										<pre><code>var dragendHandler = targetElement.ondragend;\n</code></pre>A global event handler for the dragend event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragend
GlobalEventHandlers.ondragenter	A										<pre><code>var dragenterHandler = targetElement.ondragenter;\n</code></pre>A global event handler for the dragenter event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragenter
GlobalEventHandlers.ondragexit	A										<pre><code>var dragexitHandler = targetElement.ondragexit;\n</code></pre>The GlobalEventHandler.ondragexit property is an event handler for the dragexit event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragexit
GlobalEventHandlers.ondragleave	A										<pre><code>var dragleaveHandler = targetElement.ondragleave;\n</code></pre>A global event handler for the dragleave event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragleave
GlobalEventHandlers.ondragover	A										<pre><code>var dragoverHandler = targetElement.ondragover;\n</code></pre>A global event handler for the dragover event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragover
GlobalEventHandlers.ondragstart	A										<pre><code>var dragstartHandler = targetElement.ondragstart;\n</code></pre>A global event handler for the dragstart event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart
GlobalEventHandlers.ondrop	A										<pre><code>var dropHandler = targetElement.ondrop;\n</code></pre>A global event handler for the drop event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrop
GlobalEventHandlers.onerror	A										<pre><code>window.onerror = function(message, source, lineno, colno, error) { ... }\n</code></pre>An event handler for the error event. Error events are fired at various targets for different kinds of errors:	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror
GlobalEventHandlers.onfocus	A										<pre><code>element.onfocus = event handling code\n</code></pre>The onfocus property returns the onFocus event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus
GlobalEventHandlers.oninput	A										An event handler for the input event on the window. The input event is raised when an input element value changes.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput
GlobalEventHandlers.onkeydown	A										<pre><code>element.onkeydown = event handling code</code></pre>The onkeydown property returns the onKeyDown event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown
GlobalEventHandlers.onkeypress	A										<pre><code>element.onkeypress = event handling code\n</code></pre>The onkeypress property sets and returns the onKeyPress event handler code for the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress
GlobalEventHandlers.onkeyup	A										<pre><code>element.onkeyup = event handling code\n</code></pre>The onkeyup property returns the onKeyUp event handler code for the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup
GlobalEventHandlers.onload	A										<pre><code>window.onload = funcRef;\n</code></pre>An event handler for the load event of a window.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload
GlobalEventHandlers.onmousedown	A										<pre><code>element.onmousedown = eventHandler\n</code></pre>The onmousedown property returns the onmousedown event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown
GlobalEventHandlers.onmousemove	A										<pre><code>element.onmousemove = event handling code\n</code></pre>The onmousemove property returns the mousemove event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove
GlobalEventHandlers.onmouseout	A										<pre><code>element.onmouseout = event handling code\n</code></pre>The onmouseout property returns the onMouseOut event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout
GlobalEventHandlers.onmouseover	A										<pre><code>element.onmouseover = event handling code\n</code></pre>The onmouseover property returns the onMouseOver event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover
GlobalEventHandlers.onmouseup	A										<pre><code>element.onmouseup = event handling code\n</code></pre>The onmouseup property returns the onMouseUp event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup
GlobalEventHandlers.onpointercancel	A										<pre><code>var cancelHandler = targetElement.onpointercancel;\n</code></pre>A global event handler for the pointercancel event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel
GlobalEventHandlers.onpointerdown	A										<pre><code>var downHandler = targetElement.onpointerdown;\n</code></pre>A global event handler for the pointerdown event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown
GlobalEventHandlers.onpointerenter	A										<pre><code>var enterHandler = targetElement.onpointerenter;\n</code></pre>A global event handler for the pointerenter event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerenter
GlobalEventHandlers.onpointerleave	A										<pre><code>var leaveHandler = targetElement.onpointerleave;\n</code></pre>A global event handler for the pointerleave event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave
GlobalEventHandlers.onpointermove	A										<pre><code>var moveHandler = targetElement.onpointermove;\n</code></pre>A global event handler for the pointermove event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove
GlobalEventHandlers.onpointerout	A										<pre><code>var outHandler = targetElement.onpointerout;\n</code></pre>A global event handler for the pointerout event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout
GlobalEventHandlers.onpointerover	A										<pre><code>var overHandler = targetElement.onpointerover;\n</code></pre>A global event handler for the pointerover event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover
GlobalEventHandlers.onpointerup	A										<pre><code>var upHandler = targetElement.onpointerup;\n</code></pre>A global event handler for the pointerup event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup
GlobalEventHandlers.onreset	A										<pre><code>window.onreset = funcRef;\n</code></pre>The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset
GlobalEventHandlers.onresize	A										<pre><code>window.onresize = funcRef;\n</code></pre>The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize
GlobalEventHandlers.onscroll	A										<pre><code>element.onscroll = functionReference\n</code></pre>An event handler for scroll events on element.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll
GlobalEventHandlers.onselect	A										<pre><code>window.onselect = funcRef;\n</code></pre>An event handler for the select event on the window.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect
GlobalEventHandlers.onselectstart	A										<pre><code>obj.onselectstart = function;\n</code></pre>The GlobalEventHandlers.onselectstart property represents the event handler that is called when a selectstart event reaches this object.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart
GlobalEventHandlers.onsubmit	A										<pre><code>window.onsubmit = funcRef;\n</code></pre>An event handler for the submit event on the window.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit
GlobalEventHandlers.ontouchcancel	A										<pre><code>var cancelHandler = someElement.ontouchcancel;\n</code></pre>A global event handler for the touchcancel event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel
GlobalEventHandlers.ontouchend	A										<pre><code>var endHandler = targetElement.ontouchend;\n</code></pre>A global event handler for the touchend event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchend
GlobalEventHandlers.ontouchmove	A										<pre><code>var moveHandler = someElement.ontouchmove;\n</code></pre>A global event handler for the touchmove event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchmove
GlobalEventHandlers.ontouchstart	A										<pre><code>var startHandler = someElement.ontouchstart;\n</code></pre>A global event handler for the touchstart event.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart
GlobalFetch.fetch()	A										<pre><code>Promise&lt;Response&gt; fetch(input[, init]);</code></pre>The fetch() method of the GlobalFetch mixin starts the process of fetching a resource. This returns a promise that resolves to the Response object representing the response to your request.	https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch
HashChangeEvent	A										<pre><code>window.onhashchange = funcRef;\n</code></pre>The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol).	https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent
Headers	A										The Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs. You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.	https://developer.mozilla.org/en-US/docs/Web/API/Headers
Headers.append()	A										<pre><code>myHeaders.append(name,value);</code></pre>The append() method of the Headers interface appends a new value onto an existing header inside a Headers object, or adds the header if it does not already exist.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/append
Headers.delete()	A										The delete() method of the Headers interface deletes a header from the current Headers object.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/delete
Headers.entries()	A										<pre><code>headers.entries();</code></pre>The Headers.entries() method returns an iterator allowing to go through all key/value pairs contained in this object. The both the key and value of each pairs are ByteString objects.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/entries
Headers.get()	A										<pre><code>myHeaders.get(name);</code></pre>The get() method of the Headers interface returns the first value of a given header from within a Headers object. If the requested header doesn't exist in the Headers object, the call returns null.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/get
Headers.getAll()	A										<pre><code>myHeaders.getAll(name);</code></pre>The getAll() method of the Headers interface returns an array of all the values of a header within a Headers object with a given name. If the requested header doesn't exist in the Headers object, it returns an empty array.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/getAll
Headers.has()	A										<pre><code>myHeaders.has(name);</code></pre>The has() method of the Headers interface returns a boolean stating whether a Headers object contains a certain header.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/has
Headers()	A										<pre><code>var myHeaders = new Headers(init);</code></pre>The Headers() constructor creates a new Headers object.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers
Headers.keys()	A										<pre><code>headers.keys();</code></pre>The Headers.keys() method returns an iterator allowing to go through all keys contained in this object. The keys are ByteString objects.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/keys
Headers.set()	A										<pre><code>myHeaders.set(name,value);</code></pre>The set() method of the Headers interface sets a new value for an existing header inside a Headers object, or adds the header if it does not already exist.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/set
Headers.values()	A										<pre><code>headers.values();</code></pre>The Headers.values() method returns an iterator allowing to go through all values contained in this object. The values are ByteString objects.	https://developer.mozilla.org/en-US/docs/Web/API/Headers/values
History	A										The History interface allows to manipulate the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.	https://developer.mozilla.org/en-US/docs/Web/API/History
History.length	A										<pre><code>length = history.length;\n</code></pre>The History.length read-only property returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1.	https://developer.mozilla.org/en-US/docs/Web/API/History/length
Manipulating the browser history	A										The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack.	https://developer.mozilla.org/en-US/docs/Web/API/History_API
Ajax navigation example	A										This is an example of an AJAX web site composed only of three pages (first_page.php, second_page.php and third_page.php). To see how it works, please, create the following files (or git clone https://github.com/giabao/mdn-ajax-nav-example.git):	https://developer.mozilla.org/en-US/docs/Web/API/History_API/Example
HTMLAnchorElement	A										The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of such elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
HTMLAnchorElement.referrerPolicy	A										<pre><code>refStr = anchorElt.referrerPolicy;\nanchorElt.referrerPolicy = refStr;</code></pre>The HTMLAnchorElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the a element defining which referrer is sent when fetching the resource.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/referrerPolicy
HTMLAnchorElement.rel	A										<pre><code>var relstr = anchorElt.rel;\nanchorElt.rel = relstr;\n</code></pre>The HTMLAnchorElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the a element and the current document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/rel
HTMLAnchorElement.relList	A										<pre><code>var relstr = anchorElt.relList;\n</code></pre>The HTMLAnchorElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the a element and the current document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/relList
HTMLAreaElement	A										The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement
HTMLAreaElement.referrerPolicy	A										<pre><code>refStr = areaElt.referrerPolicy;\nareaElt.referrerPolicy = refStr;</code></pre>The HTMLAreaElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the area element defining which referrer is sent when fetching the resource.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/referrerPolicy
HTMLAreaElement.rel	A										<pre><code>var relstr = areaElt.rel;\nareaElt.rel = relstr;\n</code></pre>The HTMLAreaElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the a element and the current document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/rel
HTMLAreaElement.relList	A										<pre><code>var relstr = areaElt.relList;\n</code></pre>The HTMLAreaElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the area element and the current document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/relList
HTMLAudioElement	A										The HTMLAudioElement interface provides access to the properties of audio elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement
HTMLBaseElement	A										The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement
HTMLBodyElement	A										The HTMLBodyElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating body elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement
HTMLBRElement	A										The HTMLBRElement interface represents a HTML line break element (br). It inherits from HTMLElement.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement
HTMLButtonElement	A										The HTMLButtonElement interface provides properties and methods (beyond the button object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement
HTMLCanvasElement	A										The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of canvas elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement
HTMLCanvasElement.captureStream()	A										<pre><code>MediaStream = canvas.captureStream(framerate);\n</code></pre>The HTMLCanvasElement.captureStream() method returns a CanvasCaptureMediaStream that is a real-time video capture of the surface of the canvas.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/captureStream
HTMLCanvasElement.getContext()	A										<pre><code>canvas.getContext(contextType, contextAttributes);\n</code></pre>The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
HTMLCanvasElement.height	A										<pre><code>var pxl = canvas.height;\ncanvas.height = pxl;\n</code></pre>The HTMLCanvasElement.height property is a positive integer reflecting the height HTML attribute of the canvas element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height
HTMLCanvasElement.mozGetAsFile()	A										<pre><code>canvas.mozFetchAsStream(name, type);\n</code></pre>The HTMLCanvasElement.mozGetAsFille() method returns a File object representing the image contained in the canvas; this file is a memory-based file, with the specified name. If type is not specified, the image type is image/png.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozGetAsFile
HTMLCanvasElement.mozOpaque	A										<pre><code>var opaque = canvas.mozOpaque;\ncanvas.mozOpaque = true;\n</code></pre>The HTMLCanvasElement.mozOpaque property is a Boolean reflecting the moz-opaque HTML attribute of the canvas element. It lets the canvas know whether or not translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque
HTMLCanvasElement.toBlob()	A										<pre><code>void canvas.toBlob(callback, mimeType, qualityArgument);\n</code></pre>The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent. If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi. The third argument is used with image/jpeg images to specify the quality of the output.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob
HTMLCanvasElement.toDataURL()	A										<pre><code>canvas.toDataURL(type, encoderOptions);\n</code></pre>The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG). The returned image is in a resolution of 96 dpi.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL
HTMLCanvasElement.transferControlToOffscreen()	A										<pre><code>OffscreenCanvas HTMLCanvasElement.transferControlToOffscreen()</code></pre>The HTMLCanvasElement.transferControlToOffscreen() method transfers control to an OffscreenCanvas object, either on the main thread or on a worker.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen
HTMLCanvasElement.width	A										<pre><code>var pxl = canvas.width;\ncanvas.width = pxl;\n</code></pre>The HTMLCanvasElement.width property is a positive integer reflecting the width HTML attribute of the canvas element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width
HTMLCollection	A										The HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection
HTMLCollection.item	A										HTMLCollection.item() gets an element by position.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item
HTMLContentElement	A										The HTMLContentElement interface represents a content HTML Element, which is used in Shadow DOM.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement
HTMLContentElement.getDistributedNodes()	A										<pre><code>var nodeList = object.getDistributedNodes()\n</code></pre>The HTMLContentElement.getDistributedNodes() method returns a static NodeList of the distributed nodes associated with this content element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement/getDistributedNodes
HTMLContentElement.select	A										<pre><code>object.select = "CSSselector CSSselector ...";\n</code></pre>The HTMLContentElement.select property reflects the select attribute. It is a DOMString containing a space-separated list of CSS selectors that select the content to insert in place of the content element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLContentElement/select
HTMLDataElement	A										The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating data elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement
HTMLDataListElement	A										The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate datalist elements and their content.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement
HTMLDialogElement	A										The HTMLDialogElement interface provides methods to manipulate dialog elements. It inherits properties and methods from the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement
HTMLDivElement	A										The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating div elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement
HTMLDListElement	A										The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement
HTMLDocument	A										HTMLDocument is an abstract interface of the DOM which provides access to special properties and methods not present by default on a regular (XML) document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument
HTMLElement	A										The HTMLElement interface represents any HTML element. Some elements directly implement this interface, others implement it via an interface that inherits it.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement
HTMLElement.blur()	A										<pre><code>elt.blur()</code></pre>The HTMLElement.blur() method removes keyboard focus from the current element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur
HTMLElement.click()	A										<pre><code>elt.click()</code></pre>The HTMLElement.click() method simulates a mouse-click on an element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click
HTMLElement.contentEditable	A										<pre><code>editable = element.contentEditable\nelement.contentEditable = "true"\n</code></pre>The HTMLElement.contentEditable property is used to indicate whether or not the element is editable. This enumerated attribute can have the following values:	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable
HTMLElement.dataset	A										<pre><code>string = element.dataset.camelCasedName;\nelement.dataset.camelCasedName = string;</code></pre>The HTMLElement.dataset property allows access, both in reading and writing mode, to all the custom data attributes (data-*) set on the element. It is a map of DOMString, one entry for each custom data attribute.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset
HTMLElement.dir	A										<pre><code>var currentWritingDirection = elementNodeReference.dir;\nelementNodeReference.dir = newWritingDirection;\n</code></pre>The HTMLElement.dir property gets or sets the text writing directionality of the content of the current element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir
HTMLElement.focus()	A										<pre><code>element.focus()</code></pre>The HTMLElement.focus() method sets focus on the specified element, if it can be focused.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
HTMLElement.forceSpellCheck()	A										<pre><code>element.forceSpellCheck()</code></pre>Forces a spelling and grammar check on HTML elements, even if the user has not focused on the elements. This method overrides user agent behavior. The user interface of the check, for example whether red underlining appears, is determined by the user agent.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/forceSpellCheck
HTMLElement.isContentEditable	A										<pre><code>editable = element.isContentEditable\n</code></pre>The HTMLElement.isContentEditable read-only property returns a Boolean that is true if the contents of the element are editable; otherwise it returns false.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable
HTMLElement.lang	A										<pre><code>var languageUsed = elementNodeReference.lang; // Get the value of lang\nelementNodeReference.lang = NewLanguage; // Set new value for lang\n</code></pre>The HTMLElement.lang property gets or sets the base language of an element's attribute values and text content.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang
HTMLElement.offsetHeight	A										<pre><code>var intElemOffsetHeight = document.getElementById(id_attribute_value).offsetHeight;\n</code></pre>The HTMLElement.offsetHeight read-only property is the height of the element including vertical padding and borders, in pixels, as an integer.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight
HTMLElement.offsetLeft	A										<pre><code>left = element.offsetLeft;\n</code></pre>The HTMLElement.offsetLeft read-only method returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft
HTMLElement.offsetParent	A										<pre><code>parentObj = element.offsetParent;\n</code></pre>The HTMLElement.offsetParent read-only property returns a reference to the object which is the closest (nearest in the containment hierarchy) positioned containing element. If the element is non-positioned, the nearest table cell or root element (html in standards compliant mode; body in quirks rendering mode) is the offsetParent. offsetParent returns null when the element has style.display set to "none". The offsetParent is useful because offsetTop and offsetLeft are relative to its padding edge.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent
HTMLElement.offsetTop	A										<pre><code>topPos = element.offsetTop;\n</code></pre>The HTMLElement.offsetTop read-only property returns the distance of the current element relative to the top of the offsetParent node.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop
HTMLElement.offsetWidth	A										<pre><code>var offsetWidth =element.offsetWidth;\n</code></pre>The HTMLElement.offsetWidth read-only property returns the layout width of an element. Typically, an element's offsetWidth is a measurement which includes the element borders, the element horizontal padding, the element vertical scrollbar (if present, if rendered) and the element CSS width.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth
HTMLElement.oncopy	A										<pre><code>element.oncopy = functionRef;</code></pre>The oncopy property returns the onCopy event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy
HTMLElement.oncut	A										<pre><code>element.oncut = functionRef;\n</code></pre>The oncut property returns the onCut event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut
HTMLElement.onpaste	A										<pre><code>element.onpaste = functionRef;</code></pre>The onpaste property returns the onPaste event handler code on the current element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste
HTMLElement.outerText	A										HTMLElement.outerText is a nonstandard property. As a getter, it returns the same value as Node.innerText. As a setter, it removes the current node and replaces it with the given text.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText
HTMLElement.style	A										The&#160;HTMLElement.style property returns a CSSStyleDeclaration object that represents only the element's inline&#160;style attribute, ignoring&#160;any&#160;applied&#160;style rules.&#160; See&#160;the CSS Properties Reference for a list of the CSS properties accessible via style.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style
HTMLElement.tabIndex	A										<pre><code>elt.tabIndex = index;\nvar index = elt.tabIndex;\n</code></pre>The HTMLElement.tabIndex property represents the tab order of the current element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex
HTMLElement.title	A										<pre><code>var str = element.title;\nelement.title = str;\n</code></pre>The HTMLElement.title property represents the title of the element, the text usually displayed in a 'tool tip' popup when the mouse is over the displayed node.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title
HTMLEmbedElement	A										The HTMLEmbedElement interface, which provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating embed elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement
HTMLFieldSetElement	A										The HTMLFieldSetElement interface has special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of field-set elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement
HTMLFormControlsCollection	A										The HTMLFormControlsCollection interface represents a collection of HTML form control elements. It replaces one method of HTMLCollection.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection
HTMLFormControlsCollection.namedItem()	A										<pre><code>var item = collection.namedItem[str];\nvar item = collection[str];\n</code></pre>Note that this version of namedItem() hide the one inherited from HTMLCollection. Like that one, in JavaScript, using the array bracket syntax with a String, like collection ["value"] is equivalent to collection.namedItem("value").	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection/namedItem
HTMLFormElement	A										The HTMLFormElement interface provides methods to create and modify form elements. document.forms - returns an array of HTMLFormElement objects referencing all forms on the page. document.forms[index] - returns an HTMLFormElement object referencing the form at the specified index. document.forms['id'] - returns an HTMLFormElement object referencing the form with the specified id. document.forms['name'] - returns an HTMLFormElement object referencing the form with the specified id.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement
HTMLFormElement.acceptCharset	A										<pre><code>string = form.acceptCharset;\nform.acceptCharset = string;\n</code></pre>The HTMLFormElement.acceptCharset property represents a list of the supported character encodings for the given FORM element. This list can be comma- or space-separated.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset
HTMLFormElement.action	A										<pre><code>string = form.action\nform.action = string\n</code></pre>The HTMLFormElement.action property represents the action of the form element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action
HTMLFormElement.elements	A										<pre><code>nodeList = HTMLFormElement.elements\n</code></pre>The HTMLFormElement.elements property returns an HTMLFormControlsCollection (HTML 4 HTMLCollection) of all the form controls contained in the FORM element, with the exception of input elements which have a type attribute of image.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements
HTMLFormElement.encoding	A										The HTMLFormElement.encoding property is an alternative name for the enctype element on the DOM HTMLFormElement object.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding
HTMLFormElement.enctype	A										<pre><code>string = form.enctype\nform.enctype = string\n</code></pre>The HTMLFormElement.enctype property is the MIME type of content that is used to submit the form to the server. Possible values are:	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype
HTMLFormElement.length	A										<pre><code>integer = form.length\n</code></pre>The HTMLFormElement.length read-only property returns the number of controls in the form element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length
HTMLFormElement.method	A										<pre><code>string = form.method\nform.method = string\n</code></pre>The HTMLFormElement.method represents the HTTP method used to submit the form.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method
HTMLFormElement.name	A										<pre><code>string = form.name\nform.name = string</code></pre>The HTMLFormElement.name property represents the name of the current form element as a string.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name
HTMLFormElement.reportValidity()	A										<pre><code>HTMLFormElement.reportValidity()\n</code></pre>The HTMLFormElement.reportValidity() method returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reportValidity
HTMLFormElement.reset()	A										<pre><code>HTMLFormElement.reset()\n</code></pre>The HTMLFormElement.reset() method restores a form element's default values. This method does the same thing as clicking the form's reset button.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset
HTMLFormElement.submit()	A										<pre><code>HTMLFormElement.submit()\n</code></pre>The HTMLFormElement.submit() method submits the form. This method does something similar to activating a submit button of the form.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit
HTMLFormElement.target	A										<pre><code>string = form.target\nform.target = string\n</code></pre>The HTMLFormElement.target property represents the target of the action (i.e., the frame to render its output in).	https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target
HTMLHeadElement	A										The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement
HTMLHeadingElement	A										The HTMLHeadingElement interface represents the different heading elements. It inherits methods and properties from the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement
HTMLHRElement	A										The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating hr elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement
HTMLHtmlElement	A										The HTMLHtmlElement interface serves as the root node for a given HTML document.  This object inherits the properties and methods described in the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement
HTMLHtmlElement.version	A										Returns version information about the document type definition (DTD)&#160;of a document.&#160; While this property is recognized by Mozilla, the return value for this property is always an empty string.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement/version
HTMLHyperlinkElementUtils	A										The HTMLHyperlinkElementUtils mixin defines utility methods and properties to work with HTMLAnchorElement and HTMLAreaElement. These utilities allow to deal with common features like URLs.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils
HTMLHyperlinkElementUtils.hash	A										<pre><code>string = object.hash;\nobject.hash = string;\n</code></pre>The HTMLHyperlinkElementUtils.hash property returns a DOMString containing a '#' followed by the fragment identifier of the URL. The fragment is not percent-decoded.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash
HTMLHyperlinkElementUtils.host	A										<pre><code>string = object.host;\nobject.host = string;\n</code></pre>The HTMLHyperlinkElementUtils.host property is a USVString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/host
HTMLHyperlinkElementUtils.hostname	A										<pre><code>string = object.hostname;\nobject.hostname = string;\n</code></pre>The HTMLHyperlinkElementUtils.hostname property is a USVString containing the domain of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hostname
HTMLHyperlinkElementUtils.href	A										<pre><code>string = object.href;\nobject.href = string;\n</code></pre>The HTMLHyperlinkElementUtils.href property is a USVString containing the whole URL.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/href
HTMLHyperlinkElementUtils.origin	A										<pre><code>string = object.origin;\n</code></pre>The HTMLHyperlinkElementUtils.origin read-only property is a USVString containing the Unicode serialization of the origin of the represented URL, that is:	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/origin
HTMLHyperlinkElementUtils.password	A										<pre><code>string = object.password;\nobject.password = string;\n</code></pre>The HTMLHyperlinkElementUtils.password property is a USVString containing the password specified before the domain name.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/password
HTMLHyperlinkElementUtils.pathname	A										<pre><code>string = object.pathname;\nobject.pathname = string;\n</code></pre>The HTMLHyperlinkElementUtils.pathname property is a USVString containing an initial '/' followed by the path of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname
HTMLHyperlinkElementUtils.port	A										<pre><code>string = object.port;\nobject.port = string;\n</code></pre>The HTMLHyperlinkElementUtils.port property is a USVString containing the port number of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/port
HTMLHyperlinkElementUtils.protocol	A										<pre><code>string = object.protocol;\nobject.protocol = string;\n</code></pre>The HTMLHyperlinkElementUtils.protocol property is a USVString representing the protocol scheme of the URL, including the final ':'.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/protocol
HTMLHyperlinkElementUtils.search	A										<pre><code>string = object.search;\nobject.search = string;\n</code></pre>The HTMLHyperlinkElementUtils.search property, is a search string, also called a query string, that is USVString containing a '?' followed by the parameters of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search
URLUtils.searchParams	A										<pre><code>object2 = object.searchParams;\nobject.searchParams = object2;\n</code></pre>The URLUtils.searchParams property is a URLSearchParams containing the query/search parameters of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/searchParams
HTMLHyperlinkElementUtils.toString()	A										<pre><code>string = object.toString();</code></pre>The HTMLHyperlinkElementUtils.toString() stringifier method returns a USVString containing the whole URL. It is a read-only version of HTMLHyperlinkElementUtils.href.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/toString
HTMLHyperlinkElementUtils.username	A										<pre><code>string = object.username;\nobject.username = string;\n</code></pre>The HTMLHyperlinkElementUtils.username property is a USVString containing the username specified before the domain name.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/username
HTMLIFrameElement	A										The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement
HTMLIFrameElement.addNextPaintListener()	A										<pre><code>instanceOfHTMLIframeElement.addNextPaintListener(listener);</code></pre>The addNextPaintListener() method of the HTMLIFrameElement is used to define a handler to listen for the next MozAfterPaint event coming from the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/addNextPaintListener
HTMLIFrameElement.clearMatch()	A										<pre><code>instanceOfHTMLIframeElement.clearMatch();</code></pre>The clearMatch() method of the HTMLIFrameElement clears any content highlighted by findAll() or findNext().	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/clearMatch
HTMLIFrameElement.contentWindow	A										The contentWindow property returns the Window object of an iframe element. You can use this Window object to access the iframe's document and its internal DOM. This attribute is read-only, but its properties can be manipulated like the global Window object.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow
HTMLIFrameElement.download()	A										<pre><code>var instanceOfDOMRequest =\ninstanceOfHTMLIframeElement.download(url, options);</code></pre>The download() method of the HTMLIFrameElement interface downloads a specified URL, storing it at /sdcard/download.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/download
HTMLIFrameElement.executeScript()	A										<pre><code>var myDOMRequest = instanceOfHTMLIframeElement.executeScript(script, options);\n</code></pre>The executeScript() method of the HTMLIFrameElement interface allows a specified script to be executed against a page loaded in the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/executeScript
HTMLIFrameElement.findAll()	A										<pre><code>instanceOfHTMLIframeElement.findAll(searchString, caseSensitivity);</code></pre>The findAll() method of the HTMLIFrameElement searches for a string in a browser iframe 's text content; if found, the first instance of the string relative to the caret position will be highlighted.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/findAll
HTMLIFrameElement.findNext()	A										<pre><code>instanceOfHTMLIframeElement.findNext(direction);</code></pre>The findNext() method of the HTMLIFrameElement highlights the next or previous instance of a search result after a findAll() search has been carried out.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/findNext
HTMLIFrameElement.getActive()	A										<pre><code>var amIActive = instanceOfHTMLIframeElement.getActive();</code></pre>The getActive() method of the HTMLIFrameElement indicates whether the current browser iframe is the currently active frame.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getActive
HTMLIFrameElement.getCanGoBack()	A										<pre><code>var instanceOfDOMRequest = instanceOfHTMLIframeElement.getCanGoBack();</code></pre>The getCanGoBack() method of the HTMLIFrameElement interface is used to indicate whether it's possible to go back in the navigation history of the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getCanGoBack
HTMLIFrameElement.getCanGoForward()	A										<pre><code>var instanceOfDOMRequest = instanceOfHTMLIframeElement.getCanGoForward();</code></pre>The getCanGoForward() method of the HTMLIFrameElement is used to indicate whether it's possible to go forward in the navigation history of the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getCanGoForward
HTMLIFrameElement.getContentDimensions()	A										<pre><code>var instanceOfDOMRequest =\ninstanceOfHTMLIframeElement.getContentDimensions();</code></pre>The getContentDimensions() method of the HTMLIFrameElement interface retrieves the X and Y dimensions of the content window.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getContentDimensions
HTMLIFrameElement.getManifest()	A										<pre><code>instanceOfHTMLIframeElement.getManifest().then(function(json) { ... });</code></pre>The getManifest() method of the HTMLIFrameElement interface retrieves the manifest of an app loaded in the browser iframe and returns it as JSON.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getManifest
HTMLIFrameElement.getMuted()	A										<pre><code>var request = instanceOfHTMLIframeElement.getMuted();</code></pre>The getMuted() method of the HTMLIFrameElement indicates whether the browser iframe is currently muted.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getMuted
HTMLIFrameElement.getScreenshot()	A										<pre><code>var instanceOfDOMRequest =\ninstanceOfHTMLIframeElement.getScreenshot(maxWidth, maxHeight, mimeType);</code></pre>The getScreenshot() method of the HTMLIFrameElement lets you request a screenshot of an content iframe, scaled to fit within a specified maximum width and height. The image will be cropped if necessary but will not be distorted vertically or horizontally.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getScreenshot
HTMLIFrameElement.getStructuredData()	A										<pre><code>var instanceOfDOMRequest =\ninstanceOfHTMLIframeElement.getStructuredData();</code></pre>The getStructuredData() method of the HTMLIFrameElement interface retrieves any structured microdata (and hCard and hCalendar microformat data) contained in the HTML loaded in the browser iframe and returns it as JSON.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getStructuredData
HTMLIFrameElement.getVisible()	A										<pre><code>instanceOfDOMRequest = instanceOfHTMLIframeElement.getVisible();</code></pre>The getVisible() method of the HTMLIFrameElement is used to request the current visible state of the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getVisible
HTMLIFrameElement.getVolume()	A										<pre><code>var request = instanceOfHTMLIframeElement.getVolume();</code></pre>The getVolume() method of the HTMLIFrameElement gets the current volume of the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/getVolume
HTMLIFrameElement.goBack()	A										<pre><code>instanceOfHTMLIframeElement.goBack();</code></pre>The goBack() method of the HTMLIFrameElement interface is used to navigate backwards in the browser iframe 's history.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/goBack
HTMLIFrameElement.goForward()	A										<pre><code>instanceOfHTMLIframeElement.goForward();</code></pre>The goForward() method of the HTMLIFrameElement is used to navigate forward in the browser iframe 's history.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/goForward
HTMLIFrameElement.mute()	A										<pre><code>instanceOfHTMLIframeElement.mute();</code></pre>The mute() method of the HTMLIFrameElement mutes any audio playing in the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/mute
HTMLIFrameElement.purgeHistory()	A										<pre><code>var myDOMRequest = instanceOfHTMLIframeElement.purgeHistory();</code></pre>The purgeHistory() method of the HTMLIFrameElement interface is used to clear the browsing history associated with the browser iframe. It only deletes history, not cookies or other stored information.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/purgeHistory
HTMLIFrameElement.referrerPolicy	A										<pre><code>refStr = iframeElt.referrerPolicy;\niframeElt.referrerPolicy = refStr;</code></pre>The HTMLIFrameElement.referrerPolicy property reflect the HTML referrer attribute of the iframe element defining which referrer is sent when fetching the resource.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy
HTMLIFrameElement.reload()	A										<pre><code>instanceOfHTMLIframeElement.reload(hardReload);</code></pre>The reload() method of the HTMLIFrameElement interface is used to reload the content of the iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/reload
HTMLIframeElement.removeNextPaintListener()	A										<pre><code>instanceOfHTMLIframeElement.removeNextPaintListener(listener);</code></pre>The removeNextPaintListener() method of the HTMLIFrameElement interface is used to remove a handler previously set with the addNextPaintListener method.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIframeElement/removeNextPaintListener
HTMLIFrameElement.sendMouseEvent()	A										<pre><code>instanceOfHTMLIframeElement.sendMouseEvent(type, x, y, button,\n                                           clickCount, modifiers);</code></pre>The sendMouseEvent() method of the HTMLIFrameElement interface allows you to fake a mouse event and send it to the browser iframe 's content.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/sendMouseEvent
HTMLIFrameElement.sendTouchEvent()	A										<pre><code>instanceOfHTMLIframeElement.sendTouchEvent(type, x, y, rx, ry,\n                                           rotationAngles, forces,\n                                           count, modifiers);</code></pre>The sendTouchEvent() method of the HTMLIFrameElement allows you to fake a touch event and send it to the browser iframe 's content.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/sendTouchEvent
HTMLIFrameElement.setActive()	A										<pre><code>instanceOfHTMLIframeElement.setActive(boolean);</code></pre>The setActive() method of the HTMLIFrameElement sets the current iframe as the active frame, which has an effect on how it is prioritized by the process manager.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/setActive
HTMLIFrameElement.setInputMethodActive()	A										<pre><code>instanceOfHTMLIframeElement.setInputMethodActive(boolean);</code></pre>The setInputMethodActive() method of the HTMLIFrameElement sets the current browser iframe as an active Input Method Editor (IME) window and other iframes as non-active IME windows. Useful when a top level app wants to activate a window as an IME.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/setInputMethodActive
HTMLIFrameElement.setNfcFocus()	A										<pre><code>myIFrame.setNfcFocus(true);</code></pre>The setNfcFocus() method of the HTMLIFrameElement interface sets whether an iframe can receive an NFC event.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/setNfcFocus
HTMLIFrameElement.setVisible()	A										<pre><code>instanceOfHTMLIframeElement.setVisible(visible);</code></pre>The setVisible() method of the HTMLIFrameElement is used to change the visibility state of the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/setVisible
HTMLIFrameElement.setVolume()	A										<pre><code>instanceOfHTMLIframeElement.setVolume(number);</code></pre>The setVolume() method of the HTMLIFrameElement sets the current volume of the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/setVolume
HTMLIFrameElement.stop()	A										<pre><code>instanceOfHTMLIframeElement.stop();</code></pre>The stop() method of the HTMLIFrameElement interface is used to stop loading the content of the iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/stop
HTMLIFrameElement.unmute()	A										<pre><code>instanceOfHTMLIframeElement.unmute();</code></pre>The unmute() method of the HTMLIFrameElement unmutes any audio playing in the browser iframe.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/unmute
HTMLIFrameElement.zoom()	A										<pre><code>var instanceOfDOMRequest = instanceOfHTMLIframeElement.zoom(zoomFactor);</code></pre>The zoom() method of the HTMLIFrameElement interface changes the zoom factor of the browser iframe 's content. This is particularly useful for zooming in/out on non-touch-enabled devices.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/zoom
HTMLImageElement	A										The HTMLImageElement interface provides special properties and methods  for manipulating the layout and presentation of img elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement
Image()	A										Accepts two optional parameters: Image([unsigned long width, unsigned long height ])	https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image
HTMLImageElement.referrerPolicy	A										<pre><code>refStr = imgElt.referrerPolicy;\nimgElt.referrerPolicy = refStr;</code></pre>The HTMLImageElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the img element defining which referrer is sent when fetching the resource.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy
HTMLInputElement	A										The HTMLInputElement interface provides special properties and methods for manipulating the layout and presentation of input elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement
HTMLInputElement.mozGetFileNameArray()	A										<pre><code>inputElement.mozGetFileNameArray(aLength, aFileNames);\n</code></pre>The HTMLInputElement.mozGetFileNameArray() method returns an array of the names of the files that were selected by the user on an HTML input element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/mozGetFileNameArray
HTMLInputElement.mozSetFileNameArray()	A										<pre><code>inputElement.mozSetFileNameArray(aFileNames, aLength);\n</code></pre>The HTMLInputElement.mozSetFileNameArray() sets the names of the files that selected on an HTML input element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/mozSetFileNameArray
HTMLInputElement.multiple	A										The HTMLInputElement.multiple property indicates if an input can have more than one value. Firefox currently only supports multiple for input type="file".	https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/multiple
HTMLInputElement.select()	A										<pre><code>element.select()</code></pre>The HTMLInputElement.select() method selects all the text in a textarea element or an input element with a text field.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select
HTMLInputElement.setSelectionRange()	A										<pre><code>inputElement.setSelectionRange(selectionStart, selectionEnd, [optional] selectionDirection);\n</code></pre>The HTMLInputElement.setSelectionRange() method sets the start and end positions of the current text selection in an input element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange
HTMLInputElement.webkitDirectory	A										<pre><code>&#160;inputElmt.webkitDirectory = boolValue</code></pre>The HTMLInputElement.webkitDirectory is a property that reflects the webkitdirectory HTML attribute and indicating that the input element is intended to select directories. Browsers may use this information to display a tailored file picker.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitDirectory
HTMLKeygenElement	A										The keygen elements expose the HTMLKeygenElement interface, which provides special properties and methods (beyond the regular element object interface they also have available to them by inheritance) for manipulating the layout and presentation of keygen elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLKeygenElement
HTMLLabelElement	A										The HTMLLabelElement interface gives access to properties specific to label elements. It inherits methods and properties from the base HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement
HTMLLabelElement.control	A										<pre><code>control = HTMLLabelElement.control\n</code></pre>The read-only HTMLLabelElement.control property returns a reference to the control (in the form of an object of type HTMLElement or one of its derivatives) with which the label element is associated, or null if the label isn't associated with a control.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control
HTMLLabelElement.form	A										<pre><code>form = HTMLLabelElement.form\n</code></pre>The read-only HTMLLabelElement.form property returns an HTMLFormElement object which represents the form of which the label's associated control is a part, or null if there is either no associated control, or if that control isn't in a form.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/form
HTMLLabelElement.htmlFor	A										<pre><code>controlId = HTMLLabelElement.htmlFor\n\nHTMLLabelElement.htmlFor = newId\n</code></pre>The HTMLLabelElement.htmlFor property reflects the value of the for content property. That means that this script-accessible property is used to set and read the value of the content property for, which is the ID of the label's associated control element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor
HTMLLegendElement	A										The HTMLLegendElement is an interface allowing to access properties of the legend elements. It inherits properties and methods from the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement
HTMLLIElement	A										The HTMLLIElement interface expose specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement
HTMLLinkElement	A										The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement
HTMLLinkElement.rel	A										<pre><code>var relstr = linkElt.rel;\nlinkElt.rel = relstr;\n</code></pre>The HTMLLinkElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the link element and the current document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/rel
HTMLLinkElement.relList	A										<pre><code>var relstr = linkElt.relList;\n</code></pre>The HTMLLinkElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the link element and the current document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/relList
HTMLMapElement	A										The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement
HTMLMediaElement	A										The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video. The HTMLVideoElement and HTMLAudioElement elements both inherit this interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement
HTMLMediaElement.audioTracks	A										<pre><code>xxxxxx</code></pre>The HTMLMediaElement.audioTracks property is an AudioTrackList that represents the list of AudioTrack objects contained in the element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks
HTMLMediaElement.autoplay	A										<pre><code>...</code></pre>The HTMLMediaElement.autoplay property reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay
HTMLMediaElement.buffered	A										<pre><code>var timeRange = audioObject.buffered</code></pre>The HTMLMediaElement.buffered read-only property returns a new TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered
HTMLMediaElement.canPlayType()	A										<pre><code>str = audioOrVideo.canPlayType(mediaType);\n</code></pre>The HTMLMediaElement.canPlayType() method determines whether the specified media type can be played back.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType
HTMLMediaElement.captureStream()	A										<pre><code>var mediaStream = mediaElement.captureStream()</code></pre>The captureStream() property of the HTMLMediaElement interface returns in a MediaStream object a real-time capture of the media that is rendered to the media element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/captureStream
HTMLMediaElement.controller	A										<pre><code>...</code></pre>The HTMLMediaElement.controller property represents the media controller assigned to the element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controller
HTMLMediaElement.controls	A										<pre><code>var ctrls = video.controls;\naudio.controls = true;</code></pre>The HTMLMediaElement.controls property reflects the controls HTML attribute, which controls whether user interface controls for playing the media item will be displayed.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls
HTMLMediaElement.crossOrigin	A										The HTMLMediaElement.crossOrigin property is the CORS setting for this image element. See CORS settings attributes for details.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin
HTMLMediaElement.currentSrc	A										<pre><code>var mediaUrl = audioObject.currentSrc;</code></pre>The HTMLMediaElement.currentSrc property contains the absolute URL of the chosen media resource. This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc
HTMLMediaElement.currentTime	A										<pre><code>var cTime = video.currentTime;\naudio.currentTime = 35;\n</code></pre>The HTMLMediaElement.currentTime property gives the current playback time in seconds. Setting this value seeks the media to the new time.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime
HTMLMediaElement.defaultMuted	A										<pre><code>var dMuted = video.defaultMuted;\naudio.defaultMuted = true;\n</code></pre>The HTMLMediaElement.defaultMuted property reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default. This property has no dynamic effect. To mute and unmute the audio output, use the muted property.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted
HTMLMediaElement.defaultPlaybackRate	A										<pre><code>var dSpeed = video.defaultPlaybackRate;\naudio.defaultPlaybackRate = 1.0;\n</code></pre>The HTMLMediaElement.defaultPlaybackRate property indicates the default playback rate for the media.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate
HTMLMediaElement.disableRemotePlayback	A										<pre><code>var remotePlaybackState &#8203;= element.disableRemotePlayback(); </code></pre>The HTMLMediaElement.disableRemotePlayback property determines whether the media element is allowed to have a remote playback UI.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/disableRemotePlayback
HTMLMediaElement.duration	A										<pre><code>var myDuration = audioOrVideo.duration</code></pre>The HTMLMediaElement.duration property gives the length of the media in seconds, or zero if no media data is available.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration
HTMLMediaElement.ended	A										<pre><code>var isEnded = audioOrVideo.ended</code></pre>The HTMLMediaElement.ended indicates whether the media element has ended playback.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended
HTMLMediaElement.error	A										<pre><code>var myError = audioOrVideo.error</code></pre>The HTMLMediaElement.error is the MediaError object for the most recent error, or null if there has not been an error.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error
HTMLMediaElement.initialTime	A										<pre><code>...</code></pre>The HTMLMediaElement.initialTime is the initial playback position in seconds.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/initialTime
HTMLMediaElement.loop	A										<pre><code>var loop = video.loop;\naudio.loop = true;\n</code></pre>The HTMLMediaElement.loop property reflects the loop HTML attribute, which controls whether the media element should start over when it reaches the end.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop
HTMLMediaElement.mediaGroup	A										<pre><code>...</code></pre>The HTMLMediaElement.mediaGroup property reflects the mediagroup HTML attribute, which indicates the name of the group of elements it belongs to. A group of media elements shares a common controller.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/mediaGroup
HTMLMediaElement.mozAudioChannelType	A										<pre><code>var player = document.createElement('audio');\nvar myAudioChannelType = player.mozAudioChannelType;\nmyAudioChannelType = 'content';</code></pre>The mozAudioChannelType property of the HTMLMediaElement interface can be used to set the audio channel that the sound coming from an audio or video element will play in, on a Firefox OS device.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/mozAudioChannelType
HTMLMediaElement.muted	A										<pre><code>var isMuted = audioOrVideo.muted\naudio.controls = true;</code></pre>The HTMLMediaElement.muted indicates whether the media element muted.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted
HTMLMediaElement.networkState	A										<pre><code>xxxxxx</code></pre>The HTMLMediaElement.networkState property indicates the current state of the fetching of media over the network.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState
HTMLMediaElement.paused	A										<pre><code>var isPaused = audioOrVideo.paused</code></pre>The read-only HTMLMediaElement.paused property tells whether the media element is paused.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused
play()	A										<pre><code>HTMLMediaElement.play().then(function() { ... }</code></pre>The HTMLMediaElement.play() method attempts to begin playback of the media and returns a Promise which is fulfilled when the playback has been successfully started, and which is rejected if playback fails to begin for any reason (such as permission issues or other problems).	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play
HTMLMediaElement.playbackRate	A										<pre><code>var dSpeed = video.playbackRate;\naudio.playbackRate = 1.0;\n</code></pre>The HTMLMediaElement.playbackRate property sets the rate at which the media is being played back. This is used to implement user controls for fast forward, slow motion, and so forth. The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate
HTMLMediaElement.readyState	A										<pre><code>var readyState = audioOrVideo.readyState;</code></pre>The HTMLMediaElement.readyState property indicates the readiness state of the media.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState
HTMLMediaElement.seekable	A										<pre><code>var seekable = audioOrVideo.seekable;</code></pre>The seekable read-only property of the HTMLMediaElement returns a TimeRanges object that contains the time ranges that the user is able to seek to, if any.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable
HTMLMediaElement.seekToNextFrame()	A										<pre><code>var seekCompletePromise = HTMLMediaElement.seekToNextFrame();\n\nHTMLMediaElement.seekToNextFrame();\n</code></pre>The HTMLMediaElement.seekToNextFrame() method asynchronously advances the the current play position to the next frame in the media.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekToNextFrame
HTMLMediaElement.setSinkId()	A										<pre><code>HTMLMediaElement.setSinkId(sinkId).then(function() { ... })</code></pre>The HTMLMediaElement.setSinkId() method sets the ID of the audio device to use for output and returns a Promise. This only works when the application is authorized to use the specified device.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId
HTMLMediaElement.sinkId	A										<pre><code>var sinkId&#160;= HTMLMediaElement.sinkId</code></pre>The HTMLMediaElement.sinkId read-only property returns a DOMString that is the unique ID of the audio device delivering output. If it is using the user agent default, it returns an empty string. This ID should be one of the MediaDeviceInfo.deviceid values returned from MediaDevices.enumeratedDevices(), id-multimedia, or id-communications.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/sinkId
HTMLMediaElement.src	A										<pre><code>var mediaUrl = HTMLMediaElement.src;</code></pre>The HTMLMediaElement.src property reflects the value of the HTML media element's src attribute, which indicates the URL of a media resource to use in the element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src
srcObject	A										<pre><code>var mediaStream = HTMLMediaElement.srcObject\nHTMLMediaElement.srcObject = mediaStream\n</code></pre>The srcObject property of the HTMLMediaElement interface sets or returns the MediaStream to play or that has played in the current HTMLMediaElement.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject
volume	A										<pre><code>var volume &#8203;= video.volume; //1</code></pre>The HTMLMediaElement.volume property sets the volume at which the media will be played.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume
HTMLMetaElement	A										The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement
HTMLMeterElement	A										The HTML meter elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of meter elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement
HTMLModElement	A										The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is del and ins.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement
HTMLObjectElement	A										The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of object element, representing external resources.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement
HTMLObjectElement.typeMustMatch	A										<pre><code>var mustMatch = obj.typeMustMatch;\nobj.typeMustMatch = mustMatch;\n</code></pre>The HTMLObjectElement.typeMustMatch property is a Boolean reflects the typemustmatch attribute of the object element and indicates if the resouce linked by it must match the MIME type given by HTMLObjectElement.type in order for this resource to be used.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/typeMustMatch
HTMLOListElement	A										The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement
HTMLOptGroupElement	A										The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of optgroup elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement
HTMLOptionElement	A										The HTMLOptionElement interface represents option elements and inherits all classes and methods of the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement
Option()	A										<pre><code>var optionElementReference = new Option([text, [value, [defaultSelected, [selected]]]]);</code></pre>Constructor for creating an HTMLOptionElement. The Option constructor is from the very early days of DOM scripting and has non–standard syntax, but has ubiquitous support in browsers.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/Option
HTMLOptionsCollection	A										HTMLOptionsCollection is an interface representing a collection of HTML option elements (in document order) and offers methods and properties for traversing the list as well as optionally altering its items. This type is returned solely by the "options" property of select.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection
HTMLOutputElement	A										The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of output elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement
HTMLParagraphElement	A										The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating p elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement
HTMLParamElement	A										The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating param elements, representing a pair of a key and a value that acts as a parameter for an object element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLParamElement
HTMLPictureElement	A										The HTMLPictureElement interface represents a picture HTML element. It doesn't implement specific properties or methods.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement
HTMLPreElement	A										The HTMLPreElement interface expose specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating block of preformatted text.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement
HTMLProgressElement	A										The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of progress elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement
HTMLQuoteElement	A										The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like blockquote and q, but not the cite element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement
HTMLScriptElement	A										HTML script elements expose the HTMLScriptElement interface, which provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of script elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement
HTMLSelectElement	A										The HTMLSelectElement interface represents a select HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement
HTMLSelectElement.add()	A										<pre><code>collection.add(item[, before]);\n</code></pre>The HTMLSelectElement.add() method adds an element to the collection of option elements for this select element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/add
HTMLSelectElement.autofocus	A										<pre><code>aBool = aSelectElement.autofocus; // Get the value of autofocus\naSelectElement.autofocus = aBool; // Set the value of autofocus\n</code></pre>The HTMLSelectElement.autofocus property is a Boolean that reflects the autofocus HTML attribute, which indicates whether the associated select element  will get input focus when the page loads, unless the user overrides it.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/autofocus
HTMLSelectElement.checkValidity()	A										<pre><code>var result = selectElt.checkValidity();</code></pre>The HTMLSelectElement.checkValidity() method checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element, and then returns false.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/checkValidity
HTMLSelectElement.disabled	A										<pre><code>aSelectElement.disabled = aBool;</code></pre>The HTMLSelectElement.disabled Is a Boolean that reflects the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks. A disabled element is unusable and un-clickable.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/disabled
HTMLSelectElement.form	A										<pre><code>aForm = aSelectElement.form.selectname; </code></pre>The HTMLSelectElement.form read-only property returns a HTMLFormElement representing the form that this element is associated with. If the element is not associated with of a form element, then it returns null.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/form
HTMLSelectElement.selectedIndex	A										placeholder	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/HTMLSelectElement.selectedIndex
HTMLSelectElement.item()	A										<pre><code>var item = collection.item[idx];\nvar item = collection[idx];\n</code></pre>The HTMLSelectElement.item() method returns the Element corresponding to the HTMLOptionElement whose position in the options list corresponds to the index given in parameter, or null if there are none.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/item
HTMLSelectElement.labels	A										<pre><code>aSelectElement.label.selectname= alabel ; </code></pre>The HTMLSelectElement.labels is a read only property that returns a NodeList containing the list of label elements associated with this select element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/labels
HTMLSelectElement.namedItem()	A										<pre><code>var item = collection.namedItem[str];\nvar item = collection[str];\n</code></pre>The HTMLSelectElement.namedItem() method returns the HTMLOptionElement corresponding to the HTMLOptionElement whose name or id match the specified name, or null if no option matches.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/namedItem
HTMLSelectElement.remove()	A										<pre><code>collection.remove(index);\n</code></pre>The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/remove
HTMLSelectElement.selectedIndex	A										<pre><code>var index = selectElem.selectedIndex;\nselectElem.selectedIndex = index;\n</code></pre>The HTMLSelectElement.selectedIndex is a long that reflects the index of the first selected option element. The value -1 indicates that no element is selected.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedIndex
HTMLSelectElement.setCustomValidity()	A										<pre><code>selectElt.setCustomValidity(string);</code></pre>The HTMLSelectElement.setCustomValidity() method sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/setCustomValidity
HTMLSelectElement.type	A										<pre><code>var str = selectElt.type;</code></pre>The HTMLSelectElement.type read-only property returns the form control's type. The possible values are:	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/type
HTMLShadowElement	A										The HTMLShadowElement interface represents a shadow HTML Element, which is used in Shadow DOM.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLShadowElement
HTMLShadowElement.getDistributedNodes()	A										<pre><code>var nodeList = object.getDistributedNodes()\n</code></pre>The HTMLShadowElement.getDistributedNodes() method returns a static NodeList of the distributed nodes associated with this shadow element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLShadowElement/getDistributedNodes
HTMLSlotElement	A										The HTMLSlotElement interface of the Shadow DOM API defines the location of a slot.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement
HTMLSlotElement.assignedNodes()	A										<pre><code>var assignedNodes[] = HTMLSlotElement.assignedNodes([options])</code></pre>The assignedNodes() property of the HTMLSlotElement interface returns the sequence of elements assigned to this slot or, alternatively, the slot's fallback content.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes
HTMLSlotElement.name	A										<pre><code>var name = htmlSlotElement.name\nhtmlSlotElement.name = name\n</code></pre>The name property of the HTMLSlotElement interface returns or sets the slot name. A slot is a placeholder inside a web component that users can fill with their own markup.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/name
HTMLSourceElement	A										The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating source elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement
HTMLSpanElement	A										The HTMLSpanElement interface represents a span element and derives from the HTMLElement interface, but without implementing any additional properties or methods.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement
HTMLStyleElement	A										The HTMLStyleElement interface represents a style element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement
HTMLStyleElement.media	A										<pre><code>medium = style.media\nstyle.media = medium\n</code></pre>The HTMLSyleElement.media property specifies the intended destination medium for style information.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/media
HTMLStyleElement.scoped	A										<pre><code>value = style.scoped;\nstyle.scoped = true;</code></pre>The HTMLStyleElement.scoped property is a Boolean value indicating if the element applies to the whole document (false) or only to the parent's sub-tree (true).	https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/scoped
HTMLStyleElement.type	A										<pre><code>string = style.type;\n</code></pre>The HTMLStyleElement.type read-only property returns the type of the current style.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/type
HTMLTableCaptionElement	A										The HTMLTableCaptionElement interface special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement
HTMLTableCellElement	A										The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement
HTMLTableColElement	A										The HTMLTableColElement interface provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement
HTMLTableDataCellElement	A										The HTMLTableDataCellElement interface provides special properties and methods (beyond the regular HTMLTableCellElement and HTMLElement interfaces it also has available to it by inheritance) for manipulating the layout and presentation of table data cells in an HTML document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableDataCellElement
HTMLTableElement	A										The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement
HTMLTableElement.align	A										<pre><code>HTMLTableElement.align =\nalignment;\nvar\nalignment =\nHTMLTableElement.align;</code></pre>The HTMLTableElement.align property represents the alignment of the table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/align
HTMLTableElement.bgColor	A										<pre><code>color = table.bgColor\ntable.bgColor =\ncolor</code></pre>The HTMLTableElement.bgcolor property represents the background color of the table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/bgColor
HTMLTableElement.border	A										<pre><code>HTMLTableElement.border =\nborder;\nvar\nborder =\nHTMLTableElement.border;\n</code></pre>The HTMLTableElement.border property represents the border width of the table element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/border
HTMLTableElement.caption	A										<pre><code>string = table.caption</code></pre>The HTMLTableElement.caption property represents the table caption. If no caption element is associated with the table, it can be null.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/caption
HTMLTableElement.cellPadding	A										<pre><code>HTMLTableElement.cellPadding =\npadding;\nvar\npadding =\nHTMLTableElement.cellPadding;</code></pre>The HTMLTableElement.cellPadding property represents the padding around the individual cells of the table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/cellPadding
HTMLTableElement.cellSpacing	A										<pre><code>HTMLTableElement.cellSpacing =\nspacing;\nvar\nspacing =\nHTMLTableElement.cellSpacing;</code></pre>The HTMLTableElement.cellSpacing represents the spacing around the individual cells of the table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/cellSpacing
HTMLTableElement.createCaption()	A										<pre><code>HTMLTableElement = table.createCaption()</code></pre>The HTMLTableElement.createCaption() method returns the caption for the table. If no caption element exists on the table, this method creates it, then returns it.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createCaption
HTMLTableElement.createTFoot()	A										<pre><code>HTMLTableElement = table.createTFoot()</code></pre>The HTMLTableElement.createTFoot() method returns the tfoot element associated with the table, of type HTMLTableSectionElement. If there is no footer for this table, this methods creates it, then returns it.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTFoot
HTMLTableElement.createTHead()	A										<pre><code>HTMLElementObject = table.createTHead()</code></pre>The HTMLTableElement.createTHead() method returns the thead element association with the table, of type HTMLTableSectionElement. If there is no such element associated to the thable, this method creates it, then returns it.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTHead
HTMLTableElement.deleteCaption()	A										<pre><code>HTMLTableElement.deleteCaption()</code></pre>The HTMLTableElement.deleteCaption() method removes the caption from the table. If there is no caption associated with the table, this method does nothing.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteCaption
HTMLTableElement.deleteRow()	A										<pre><code>HTMLTableElement.deleteRow(index)</code></pre>The HTMLTableElement.deleteRow() method removes a row from the table. If the amount of rows to delete, specified by the parameter, is greater or equal to the number of available rows, or if it is negative and not equal to the special index -1, representing the last row of the table, the exception INDEX_SIZE_ERR is thrown.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteRow
HTMLTableElement.deleteTFoot()	A										<pre><code>HTMLTableElement.deleteTFoot()</code></pre>The HTMLTableElement.deleteTFoot() method removes a tfoot element from the table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTFoot
HTMLTableElement.deleteTHead()	A										<pre><code>HTMLTableElement.deleteTHead()</code></pre>The HTMLTableElement.deleteTHead() removes a thead element from the table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTHead
HTMLTableElement.frame	A										<pre><code>HTMLTableElement.frame =\nside;\nvar\nside =\nHTMLTableElement.frame;</code></pre>The HTMLTableElement.frame property represents which external table borders to render.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/frame
HTMLTableElement.insertRow()	A										<pre><code>var row = HTMLTableElement.insertRow(optional index = -1);</code></pre>The HTMLTableElement.insertRow() method inserts a new row in the table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow
HTMLTableElement.rows	A										<pre><code>HTMLCollectionObject = table.rows</code></pre>The HTMLTableElement.rows read-only property returns a live HTMLCollection of all the rows in the table. The rows included in the associated thead, tfoot and tbody elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows
HTMLTableElement.rules	A										<pre><code>HTMLTableElement.rules =\nrules;\nvar\nrules =\nHTMLTableElement.rules;</code></pre>The HTMLTableElement.rules property represents which cell borders to render in the table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rules
HTMLTableElement.summary	A										<pre><code>HTMLTableElement.summary =\nstring;\nvar\nstring =\nHTMLTableElement.summary;</code></pre>The HTMLTableElement.summary property represents the table description.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/summary
HTMLTableElement.tBodies	A										<pre><code>HTMLCollectionObject = table.tBodies</code></pre>The HTMLTableElement.tBodies read-only property returns a live HTMLCollection of the table bodies.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tBodies
HTMLTableElement.tFoot	A										<pre><code>HTMLTableSectionElementObject = table.tFoot\nteble.tFoot = HTMLTableSectionElementObject\n</code></pre>The HTMLTableElement.tFoot property represents the table's tfoot element. Its value can be null if there is no such element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tFoot
HTMLTableElement.tHead	A										<pre><code>thead_element = table.tHead;\ntable.tHead = thead_element;\n</code></pre>The HTMLTableElement.tHead represents  the table's thead element. Its value can be null if there is no such element.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead
HTMLTableElement.width	A										<pre><code>HTMLTableElement.width =\nwidth;\nvar\nwidth =\nHTMLTableElement.width;</code></pre>Where width is a string representing the width in number of pixels or as a percentage value.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/width
HTMLTableHeaderCellElement	A										The HTMLTableHeaderCellElement interface provides special properties and methods (beyond the regular HTMLTableCellElement and HTMLElement interfaces it also has available to it by inheritance) for manipulating the layout and presentation of table header cells in an HTML document.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableHeaderCellElement
HTMLTableRowElement	A										The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement
HTMLTableRowElement.insertCell()	A										<pre><code>var cell = HTMLTableRowElement.insertCell(optionalindex = -1);\n</code></pre>The HTMLTableRowElement.insertCell() method inserts a new cell into a table row and returns a reference to the cell.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/insertCell
HTMLTableRowElement.rowIndex	A										The HTMLTableRowElement.rowIndex property represents the position of a row in relation to the whole table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/rowIndex
HTMLTableSectionElement	A										The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement
HTMLTextAreaElement	A										The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of textarea elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement
HTMLTimeElement	A										The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating time elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement
HTMLTimeElement.dateTime	A										<pre><code>dateTimeString = timeElt.dateTime;\ntimeElt.dateTime = dateTimeString\n</code></pre>The HTMLTimeElement.dateTime property is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement/dateTime
HTMLTitleElement	A										The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement
HTMLTrackElement	A										The HTMLTrackElement interface provides access to the properties of track elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement
HTMLTrackElement.src	A										<pre><code>var textTrackURL = HTMLTrackElement.src;</code></pre>The HTMLTrackElement.src property reflects the value of the track element's src attribute, which indicates the URL of the text track's data.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/src
HTMLUListElement	A										The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement
HTMLUnknownElement	A										The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement
HTMLVideoElement	A										The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement
HTMLVideoElement.getVideoPlaybackQuality()	A										<pre><code>videoPQ = videoElement.getVideoPlaybackQuality();</code></pre>The HTMLVideoElement.getVideoPlaybackQuality() creates and returns a VideoPlaybackQuality object containing metrics about the current quality of the video restitution.	https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality
HTML Drag and Drop API	A										HTML Drag and Drop interfaces enable applications to use drag and drop features in Firefox and other browsers.	https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API
File drag and drop	A										HTML Drag and Drop interfaces enable web applications to  drag and drop files on a web page. This document describes how an application can accept one or more files that are dragged from the underlying platform's file manager and dropped on a web page.	https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/File_drag_and_drop
IDBCursor	A										The IDBCursor interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor
IDBCursor.advance()	A										<pre><code>cursor.advance(count);</code></pre>The advance() method of the IDBCursor interface sets the num ber times a cursor should move its position forward.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/advance
IDBCursor.continue()	A										<pre><code>cursor.continue(optionalKey);</code></pre>This method may raise a DOMException of one of the following types:	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/continue
IDBCursor.delete()	A										<pre><code>cursor.delete();</code></pre>An IDBRequest object on which subsequent events related to this operation are fired. The result attribute is set to undefined.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete
IDBCursor.direction	A										<pre><code>cursor.direction;</code></pre>A string (defined by the IDBCursorDirection enum) indicating the direction in which the cursor is traversing the data. Possible values are:	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/direction
IDBCursor.key	A										<pre><code>cursor.key;</code></pre>The value can be of any type.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/key
IDBCursor.primaryKey	A										<pre><code>cursor.primaryKey;</code></pre>A value, of any data type.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/primaryKey
IDBCursor.source	A										<pre><code>cursor.source;</code></pre>The IDBObjectStore or IDBIndex that the cursor is iterating over.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/source
IDBCursor.update()	A										<pre><code>cursor.update(newValue);</code></pre>The update() method of the IDBCursor interface returns an IDBRequest object, and, in a separate thread, updates the value at the current position of the cursor in the object store. If the cursor points to a record that has just been deleted, a new record is created.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/update
IDBCursorSync	A										The IDBCursorSync interface of the IndexedDB API represents a cursor for iterating over multiple records in a database. You can have only one instance of IDBCursorSync representing a cursor, but you can have an unlimited number of cursors at the same time. Operations are performed on the underlying index or object store. It enables an application to synchronously process all the records in the cursor's range.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorSync
IDBCursorWithValue	A										The IDBCursorWithValue interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue
IDBCursorWithValue.value	A										<pre><code>cursor.value;</code></pre>The value of the current cursor.	https://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValue/value
IDBDatabase	A										Inherits from: EventTarget	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase
IDBDatabase.close()	A										<pre><code>db.close();</code></pre>The connection is not actually closed until all transactions created using this connection are complete. No new transactions can be created for this connection once this method is called. Methods that create transactions throw an exception if a closing operation is pending.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/close
IDBDatabase.createObjectStore()	A										<pre><code>var objectStore = db.createObjectStore("toDoList", { keyPath: "taskTitle" });</code></pre>The method takes the name of the store as well as a parameter object that lets you define important optional properties. You can use the property to uniquely identify individual objects in the store. As the property is an identifier, it should be unique to every object, and every object should have that property.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/createObjectStore
IDBDatabase.deleteObjectStore()	A										<pre><code>db.deleteObjectStore("toDoList");</code></pre>As with IDBDatabase.createObjectStore, this method can be called only within a versionchange transaction.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/deleteObjectStore
IDBDatabase.name	A										<pre><code>db.name</code></pre>A DOMString containing the name of the connected database.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/name
IDBDatabase.objectStoreNames	A										<pre><code>db.objectStoreNames</code></pre>A DOMStringList containing a list of the names of the object stores currently in the connected database.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/objectStoreNames
IDBDatabase.onabort	A										<pre><code>db.onabort = function() { ... }</code></pre>This example shows an IDBOpenDBRequest.onupgradeneeded block that creates a new object store; it also includes onerror and onabort functions to handle non-success cases.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onabort
IDBDatabase.onclose	A										<pre><code>IDBDatabase.onclose = function;</code></pre>A function which is called when the close event is fired.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onclose
IDBDatabase.onerror	A										<pre><code>db.onerror = function() { ... }</code></pre>This example shows an IDBOpenDBRequest.onupgradeneeded block that creates a new object store; it also includes onerror and onabort functions to handle non-success cases.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onerror
IDBDatabase.onversionchange	A										<pre><code>db.onversionchange = function() { ... }</code></pre>This example shows an IDBOpenDBRequest.onupgradeneeded block that creates a new object store; it also includes onerror and onabort functions to handle non-success cases, and an onversionchange function to notify when a database structure change has occurred.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onversionchange
IDBDatabase.transaction()	A										<pre><code>var transaction = db.transaction(["toDoList"], "readwrite");</code></pre>An IDBTransaction object.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/transaction
IDBDatabase.version	A										<pre><code>db.version</code></pre>An integer containing the version of the connected database.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/version
IDBDatabaseException	A										In the IndexedDB API, an IDBDatabaseException object represents exception conditions that can be encountered while performing database operations.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabaseException
IDBDatabaseSync	A										The DatabaseSync interface in the IndexedDB API represents a synchronous connection to a database.	https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabaseSync
IDBEnvironment	A										The IDBEnvironment interface of the IndexedDB API contains the indexedDB property, which provides access to IndexedDB functionality. It is the top level IndexedDB interface implemented by the window and Worker objects.	https://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironment
IDBEnvironment.indexedDB	A										<pre><code>var DBOpenRequest = self.indexedDB.open("toDoList");</code></pre>The indexedDB property of the IDBEnvironment interface provides a mechanism for applications to asynchronously access the capabilities of indexed databases.	https://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironment/indexedDB
IDBEnvironmentSync	A										The Unimplemented IDBEnvironmentSync interface of the IndexedDB API will be implemented by worker objects.	https://developer.mozilla.org/en-US/docs/Web/API/IDBEnvironmentSync
IDBFactory	A										In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory
IDBFactory.cmp()	A										<pre><code>var result = window.indexedDB.cmp(a, b);</code></pre>An integer that indicates the result of the comparison; the table below lists the possible values and their meanings:	https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/cmp
IDBFactory.deleteDatabase()	A										<pre><code>var request = window.indexedDB.deleteDatabase("toDoList");</code></pre>If the database is successfully deleted, then a success event is fired on the request object returned from this method, with its result set to undefined. If an error occurs while the database is being deleted, then an error event is fired on the request object that is returned from this method.	https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase
IDBFactory.open()	A										<pre><code>request = window.indexedDB.open(name[, version])\n</code></pre>If an error occurs while the database connection is being opened, then an error event is fired on the request object returned from this method.	https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open
IDBFactory.open()	A										<pre><code>var request = window.indexedDB.open("toDoList");</code></pre>If an error occurs while the database connection is being opened, then an error event is fired on the request object returned from this method.	https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open-obsolete
IDBFactorySync	A										The IDBFactorySync interface of the IndexedDB API provide a synchronous means of accessing the capabilities of indexed databases.	https://developer.mozilla.org/en-US/docs/Web/API/IDBFactorySync
IDBIndex	A										IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex
IDBIndex.count()	A										<pre><code>var myIndex = objectStore.index('index');\nvar request = myIndex.count();</code></pre>A IDBRequest object on which subsequent events related to this operation are fired.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/count
IDBIndex.get()	A										<pre><code>var myIndex = objectStore.index('index');\nvar request = myIndex.get(key);</code></pre>If a value is successfully found, then a structured clone of it is created and set as the result of the request object: this returns the record the key is associated with.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/get
IDBIndex.getAll()	A										<pre><code>var getAllKeysRequest = IDBIndex.getAll(query, count);</code></pre>There is a performance cost associated with looking at the value property of a cursor, because the object is created lazily. To use a feature like getAll(), Gecko would have to create all the objects at once. If you were just interested in looking at each of the keys, for instance, it would be much more efficient to use a cursor. If you were trying to get an array of all the objects in an object store, though, you could use getAll().	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAll
IDBIndex.getAllKeys()	A										<pre><code>var myIndex = objectStore.index('index');\nvar getAllKeysRequest = myIndex.getAllKeys(query);</code></pre>An IDBRequest object on which subsequent events related to this operation are fired.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAllKeys
IDBIndex.getKey()	A										<pre><code>var myIndex = objectStore.index('index');\nvar request = myIndex.getKey(key);</code></pre>If a key is successfully found it is set as the result of the request object: this returns the primary key of the record the key is associated with, not the whole record as IDBIndex.get does.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getKey
IDBIndex.isAutoLocale	A										<pre><code>var myIndex = objectStore.index('index');\nconsole.log(myIndex.isAutoLocale);</code></pre>The isAutoLocale read-only property of the IDBIndex interface returns a Boolean indicating whether the index had a locale value of auto specified upon its creation (see createIndex() 's optionalParameters.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/isAutoLocale
IDBIndex.keyPath	A										<pre><code>var myIndex = objectStore.index('index');\nconsole.log(myIndex.keyPath);</code></pre>Any data type that can be used as a key path.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/keyPath
IDBIndex.locale	A										<pre><code>var myIndex = objectStore.index('index');\nconsole.log(myIndex.locale);</code></pre>The locale read-only property of the IDBIndex interface returns the locale of the index (for example en-US, or pl) if it had a locale value specified upon its creation (see createIndex() 's optionalParameters.) Note that this property always returns the current locale being used in this index, in other words, it never returns "auto".	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/locale
IDBIndex.multiEntry	A										<pre><code>var myIndex = objectStore.index('index');\nconsole.log(myIndex.multiEntry);</code></pre>A Boolean :	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/multiEntry
IDBIndex.name	A										<pre><code>var indexName = IDBIndex.name;\n\nIDBIndex.name = indexName;</code></pre>A DOMString specifying a name for the index.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/name
IDBIndex.objectStore	A										<pre><code>var myIndex = objectStore.index('index');\nconsole.log(myIndex.objectStore);</code></pre>An IDBObjectStore.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/objectStore
IDBIndex.openCursor()	A										<pre><code>var myIndex = objectStore.index('index');\nvar request = myIndex.openCursor(range,direction);</code></pre>The method sets the position of the cursor to the appropriate record, based on the specified direction.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openCursor
IDBIndex.openKeyCursor()	A										<pre><code>var myIndex = objectStore.index('index');\nvar request = myIndex.openKeyCursor(range,direction);</code></pre>The method sets the position of the cursor to the appropriate key, based on the specified direction.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openKeyCursor
IDBIndex.unique	A										<pre><code>var myIndex = objectStore.index('index');\nconsole.log(myIndex.unique);</code></pre>A Boolean :	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/unique
IDBIndexSync	A										The IDBIndexSync interface of the IndexedDB API provides synchronous access to an index in a database.	https://developer.mozilla.org/en-US/docs/Web/API/IDBIndexSync
IDBKeyRange	A										A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded ; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange
IDBKeyRange.bound()	A										<pre><code>myKeyRange = IDBKeyRange.bound("A", "Z", true, true);</code></pre>The bounds can be open (that is, the bounds exclude the endpoint values) or closed (that is, the bounds include the endpoint values). By default, the bounds are closed.	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/bound
IDBKeyRange.includes()	A										<pre><code>myIncludesResult = myKeyRange.includes('A');</code></pre>A Boolean.	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/includes
IDBKeyRange.lower	A										<pre><code>myKeyRange.lower;</code></pre>The lower bound of the key range (can be any type.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lower
IDBKeyRange.lowerBound()	A										<pre><code>myKeyRange = IDBKeyRange.lowerBound("A", true);</code></pre>By default, it includes the lower endpoint value and is closed.	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lowerBound
IDBKeyRange.lowerOpen	A										<pre><code>myKeyRange.lowerOpen;</code></pre>A boolean :	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/lowerOpen
IDBKeyRange.only()	A										<pre><code>myKeyRange = IDBKeyRange.only("A");</code></pre>IDBKeyRange : The newly created key range.	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/only
IDBKeyRange.upper	A										<pre><code>myKeyRange.upper;</code></pre>The upper bound of the key range (can be any type.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upper
IDBKeyRange.upperBound()	A										<pre><code>myKeyRange = IDBKeyRange.upperBound("Z", true);</code></pre>By default, it includes the upper endpoint value and is closed.	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upperBound
IDBKeyRange.upperOpen	A										<pre><code>myKeyRange.upperOpen;</code></pre>A boolean :	https://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange/upperOpen
IDBLocaleAwareKeyRange	A										The IDBLocaleAwareKeyRange interface of the IndexedDB API is a Firefox-specific version of IDBKeyRange — it functions in exactly the same fashion, and has the same properties and methods, but it is intended for use with IDBIndex objects when the original index had a locale value specified upon its creation (see createIndex() 's optionalParameters) — that is, it has locale aware sorting enabled.	https://developer.mozilla.org/en-US/docs/Web/API/IDBLocaleAwareKeyRange
IDBMutableFile	A										The IDBMutableFile interface provides access in read or write mode to a file, dealing with all the necessary locks.	https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile
FileHandle.getFile()	A										<pre><code>var request = instanceOfFileHandle.getFile();</code></pre>The getFile method allows to retrieve a read-only snapshot of the handled file in the form of a File object.	https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile/getFile
FileHandle.name	A										<pre><code>var name = instanceOfFileHandle.name\n</code></pre>Provides the name of the file.	https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile/name
FileHandle.onabort	A										<pre><code>instanceOfFileHandle.onabort = funcRef;\n</code></pre>Specifies an event listener to receive abort events. These events occur when the associated locked file has been aborted with the LockedFile.abort() method.	https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile/onabort
FileHandle.onerror	A										<pre><code>instanceOfFileHandle.onerror = funcRef;\n</code></pre>Specifies an event listener to receive error events. These events occur when something goes wrong.	https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile/onerror
FileHandle.open()	A										<pre><code>var myFile = instanceOfFileHandle.open(mode);</code></pre>The open method returns a LockedFile object that allows to safely write in the file.	https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile/open
FileHandle.type	A										<pre><code>var type = instanceOfFileHandle.type\n</code></pre>Provides the mime type of the file.	https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile/type
IDBObjectStore	A										This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore
IDBObjectStore.add()	A										<pre><code>var request = objectStore.add(myItem, optionalKey);</code></pre>To determine if the add operation has completed successfully, listen for the transaction’s complete event in addition to the IDBObjectStore.add request’s success event, because the transaction may still fail after the success event fires. In other words, the success event is only triggered when the transaction has been successfully queued.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/add
IDBObjectStore.autoIncrement	A										<pre><code>var myAutoIncrement = objectStore.autoIncrement;</code></pre>A Boolean :	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/autoIncrement
IDBObjectStore.clear()	A										<pre><code>var request = objectStore.clear();</code></pre>Clearing an object store consists of removing all records from the object store and removing all records in indexes that reference the object store.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/clear
IDBObjectStore.count()	A										<pre><code>var request = ObjectStore.count(optionalKeyRange);</code></pre>An IDBRequest object on which subsequent events related to this operation are fired.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/count
IDBObjectStore.createIndex()	A										<pre><code>objectStore.createIndex(objectIndexName, objectKeypath, optionalObjectParameters);</code></pre>Note that this method must be called only from a VersionChange transaction mode callback.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex
IDBObjectStore.delete()	A										<pre><code>var request = objectStore.delete(recordKey);</code></pre>An IDBRequest object on which subsequent events related to this operation are fired. The request.result attribute is set to undefined.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete
IDBObjectStore.deleteIndex()	A										<pre><code>objectStore.deleteIndex(indexName);</code></pre>Note that this method must be called only from a VersionChange transaction mode callback. Note that this method synchronously modifies the IDBObjectStore.indexNames property.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/deleteIndex
IDBObjectStore.get()	A										<pre><code>var request = objectStore.get(myItem);</code></pre>If a value is successfully found, then a structured clone of it is created and set as the result of the request object.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/get
IDBObjectStore.getAll()	A										<pre><code>var request = objectStore.getAll([query, count]);</code></pre>If a value is successfully found, then a structured clone of it is created and set as the result of the request object.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
IDBObjectStore.getAllKeys()	A										<pre><code>var request = objectStore.getAllKeys([query, count]);</code></pre>If a value is successfully found, then a structured clone of it is created and set as the result of the request object.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAllKeys
IDBObjectStore.index()	A										<pre><code>objectStore.index(indexName);</code></pre>An IDBIndex object for accessing the index.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/index
IDBObjectStore.indexNames	A										<pre><code>var myindexNames = objectStore.indexNames;</code></pre>A DOMStringList.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/indexNames
IDBObjectStore.keyPath	A										<pre><code>var mykeyPath = objectStore.keyPath;</code></pre>If this property is null, the application must provide a key for each modification operation.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/keyPath
IDBObjectStore.name	A										<pre><code>var myObjectStoreName = IDBObjectStore.name;\n\nIDBObjectStore.name = myNewName;</code></pre>A DOMString containing the object store's name.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/name
IDBObjectStore.openCursor()	A										<pre><code>var request = ObjectStore.openCursor(optionalKeyRange, optionalDirection);</code></pre>To determine if the add operation has completed successfully, listen for the results’s success event.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openCursor
IDBObjectStore.openKeyCursor()	A										<pre><code>var request = objectStore.openKeyCursor(optionalKeyRange, optionalDirection);</code></pre>To determine if the add operation has completed successfully, listen for the results’s success event.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openKeyCursor
IDBObjectStore.put()	A										<pre><code>var request = objectStore.put(myItem, optionalKey);</code></pre>If the record is successfully stored, then a success event is fired on the returned request object with the result set to the key for the stored record, and the transaction set to the transaction in which this object store is opened.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/put
IDBObjectStore.transaction	A										<pre><code>var myTransaction = objectStore.transaction;</code></pre>An IDBTransaction object.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/transaction
IDBObjectStoreSync	A										The IDBObjectStoreSync interface of the IndexedDB API provides synchronous access to an object store of a database.	https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStoreSync
IDBOpenDBRequest	A										Inherits from: IDBRequest	https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest
IDBOpenDBRequest.onblocked	A										<pre><code>var request = indexedDB.open("toDoList", 4);\nrequest.onblocked = function() { ... };</code></pre>The IDBOpenDBRequest.onblocked event handler is the event handler for the blocked event. This event is triggered when the upgradeneeded should be triggered because of a version change but the database is still in use (that is, not closed) somewhere, even after the versionchange event was sent.	https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest/onblocked
IDBOpenDBRequest.onupgradeneeded	A										<pre><code>var request = window.indexedDB.open("toDoList", 4);\nrequest.onupgradeneeded = function(event) { ... };</code></pre>In the following example you can see the onupgradeneeded handler being used to update the database structure if a database with a higher version number is loaded. For a full working example, see our To-do Notifications app (view example live.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequest/onupgradeneeded
IDBRequest	A										The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.	https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest
IDBRequest.error	A										<pre><code>var myError = request.error;</code></pre>A DOMError containing the relevant error. In Chrome 48 and later this property returns a DOMException because DOMError has been removed from the DOM standard. The following error codes are returned under certain conditions:	https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/error
IDBRequest.onerror	A										<pre><code>request.onerror = function( event ) { ... };</code></pre>The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.result), updates one property of the record, and then puts the updated record back into the object store. Also included at the bottom is an onerror function that reports what the error was if the request fails. For a full working example, see our To-do Notifications app (view example live.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/onerror
IDBRequest.onsuccess	A										<pre><code>request.onsuccess = function( event ) { ... };</code></pre>The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.result), updates one property of the record, and then puts the updated record back into the object store. For a full working example, see our To-do Notifications app (view example live.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/onsuccess
IDBRequest.readyState	A										<pre><code>var currentReadyState = request.readyState;</code></pre>The IDBRequestReadyState of the request, which takes one of the following two values:	https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/readyState
IDBRequest.result	A										<pre><code>var myResult = request.result;</code></pre>An IDBObjectStore containing the result of the request.	https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/result
IDBRequest.source	A										<pre><code>var mySource = request.source;</code></pre>An object representing the source of the request, such as an IDBIndex, IDBObjectStore or IDBCursor.	https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/source
IDBRequest.transaction	A										<pre><code>var myTransaction = request.transaction;</code></pre>An IDBTransaction.	https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest/transaction
IDBTransaction	A										Note that as of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see bug 1112702.) Previously in a readwrite transaction IDBTransaction.oncomplete was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the complete event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The complete event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction
IDBTransaction.abort()	A										<pre><code>transaction.abort();</code></pre>All pending IDBRequest objects created during this transaction have their IDBRequest.error attribute set to AbortError.	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/abort
IDBTransaction.db	A										<pre><code>var myDatabase = transaction.db;</code></pre>An IDBDatabase object.	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/db
IDBTransaction.error	A										<pre><code>var myError = transaction.error;</code></pre>A DOMError containing the relevant error. In Chrome 48 and later this property returns a DOMException because DOMError has been removed from the DOM standard. The exact error is one of serveral possibilities. It can be a reference to the same error as the request object that raised it, or a transaction failure (for example QuotaExceededError or UnknownError).	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/error
IDBTransaction.mode	A										<pre><code>var myCurrentMode = IDBTransaction.mode;</code></pre>An IDBTransactionMode object defining the mode for isolating access to data in the current object stores:	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/mode
IDBTransaction.objectStore()	A										<pre><code>var objectStore = transaction.objectStore("toDoList");</code></pre>Every call to this method on the same transaction object, with the same name, returns the same IDBObjectStore instance. If this method is called on a different transaction object, a different IDBObjectStore instance is returned.	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/objectStore
IDBTransaction.objectStoreNames	A										<pre><code>var myDatabase = transactionObj.objectStoreNames;</code></pre>The objectStoreNames property of the IDBTransaction interface returns a DOMStringList of names of IDBObjectStore objects.	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/ObjectStoreNames
IDBTransaction.onabort	A										<pre><code>transaction.onabort = function() { ... };</code></pre>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the transaction.onabort = function(event) { }; block, reporting when the transaction has been aborted. For a full working example, see our To-do Notifications app (view example live.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onabort
IDBTransaction.oncomplete	A										<pre><code>transaction.oncomplete = function() { ... };</code></pre>The oncomplete event handler of the IDBTransaction interface handles the complete event, fired when the transaction successfully completes.	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/oncomplete
IDBTransaction.onerror	A										<pre><code>transaction.onerror = function() { ... };</code></pre>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the transaction.onerror = function(event) { }; block, making use of transaction.error to help in reporting what went wrong when the transaction was unsuccessful. For a full working example, see our To-do Notifications app (view example live.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onerror
IDBTransactionSync	A										The IDBTransactionSync interface of the IndexedDB API provides a synchronous transaction on a database. When an application creates an IDBTransactionSync object, it blocks until the browser is able to reserve the require database objects.	https://developer.mozilla.org/en-US/docs/Web/API/IDBTransactionSync
IDBVersionChangeEvent	A										The IDBVersionChangeEvent interface of the IndexedDB API indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.	https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent
IDBVersionChangeEvent.newVersion	A										<pre><code>readonly    attribute unsigned long long? newVersion;</code></pre>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. These events are fired via the custom IDBVersionChangeEvent interface. For a full working example, see our To-do Notifications app (view example live.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/newVersion
IDBVersionChangeEvent.oldVersion	A										<pre><code>readonly    attribute unsigned long long  oldVersion;</code></pre>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. These events are fired via the custom IDBVersionChangeEvent interface. For a full working example, see our To-do Notifications app (view example live.)	https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/oldVersion
IDBVersionChangeEvent.version	A										<pre><code>readonly    attribute unsigned long long? version;</code></pre>The version property of the IDBVersionChangeEvent interface returns The new version of the database in a versionchange transaction.	https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent/version
IDBVersionChangeRequest	A										The IDBVersionChangeRequest interface the IndexedDB API represents a request to change the version of a database. It is used only by the setVersion() method of IDBDatabase.	https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest
IDBVersionChangeRequest.setVersion()	A										<pre><code>IDBVersionChangeRequest setVersion ([TreatNullAs=EmptyString] in DOMString version);</code></pre>For older WebKit browsers, call this method before creating or deleting an object store.	https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
IdentityManager	A										The IdentityManager of the BrowserID protocol exposes the BrowserID API, via navigator.id. This API has gone through several significant revisions. Each generation is listed separately below.	https://developer.mozilla.org/en-US/docs/Web/API/IdentityManager
IdentityManager.get()	A										<pre><code>navigator.id.get(gotAssertion);\nnavigator.id.get(gotAssertion, {privacyPolicy: "/privacy.html", termsOfService: "/tos.html"});</code></pre>This function enables a web site to use BrowserID to authenticate its users. Call it in the click handler to your "log in with Persona" button with a callback function as a parameter.	https://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/get
IdentityManager.getVerifiedEmail()	A										<pre><code>window.navigator.id.getVerifiedEmail(gotAssertion);</code></pre>This function enables a web site to use BrowserID to authenticate its users. Call it in the click handler to your "log in with BrowserID" button with a callback function as a parameter.	https://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/getVerifiedEmail
IdentityManager.logout()	A										<pre><code>navigator.id.logout();</code></pre>This function is used in Persona to cause the browser to reset the automatic / persistent login flag for a website. After being called, the user will need to explicitly log back into your site instead of being signed in automatically.	https://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/logout
IdentityManager.request()	A										<pre><code>navigator.id.request();\nnavigator.id.request({siteName: 'Example Site', siteLogo: '/logo.png'});\nnavigator.id.request({termsOfService: '/tos.html', privacyPolicy: '/privacy.html'});\n</code></pre>This function enables a web site to use Persona to authenticate its users. It must be invoked from within a click handler. For example, you should call it when a user clicks your "log in with Persona" button.	https://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/request
IdentityManager.watch()	A										This function registers callbacks that respond to a Persona user logging in or out.	https://developer.mozilla.org/en-US/docs/Web/API/IdentityManager/watch
IIRFilterNode	A										The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.	https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode
IIRFilterNode.getFrequencyResponse()	A										<pre><code>IIRFilterNode.getFrequencyResponse(frequencyArray, magResponseOutput, phaseResponseOutput);\n</code></pre>undefined	https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode/getFrequencyResponse
IIRFilterNode.getFrequencyResponse()	A										<pre><code>var audioCtx = new AudioContext();\nvar iirFilter = audioCtx.createIIRFilter();\niirFilter.getFrequencyResponse(myFrequencyArray,magResponseOutput,phaseResponseOutput);\n</code></pre>The getFrequencyResponse() method of the IIRFilterNode interface takes the current filtering algorithm's settings and calculates the frequency response for frequencies specified in the frequencyHz array of frequencies.	https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode/getFrequencyResponse()
ImageBitmap	A										The ImageBitmap interface represents a bitmap image which can be drawn to a canvas without undue latency. It can be created from a variety of source objects using the createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.	https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap
ImageBitmap.close()	A										<pre><code>void ImageBitmap.close()</code></pre>The ImageBitmap.close() method disposes of all graphical resources associated with an ImageBitmap.	https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/close
ImageBitmap.height	A										The read-only ImageBitmap.height property returns the ImageBitmap object's height in CSS pixels.	https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/height
ImageBitmap.width	A										The read-only ImageBitmap.width property returns the ImageBitmap object's width in CSS pixels.	https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/width
ImageBitmapFactories	A										The ImageBitmapFactories mixin interface contains utility methods to create an ImageBitmap. There is no object of this type, but the two interfaces Window, available within the regular browsing scope, and the WorkerGlobalScope interface for workers, implement this interface.	https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapFactories
ImageBitmapFactories.createImageBitmap()	A										<pre><code>createImageBitmap(image[, options]).then(function(response) { ... });\ncreateImageBitmap(image, sx, sy, sw, sh[, options]).then(function(response) { ... });\n</code></pre>The createImageBitmap method accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh.	https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapFactories/createImageBitmap
ImageBitmapRenderingContext	A										The ImageBitmapRenderingContext interface is a canvas rendering context which only provides the functionality to replace the canvas's contents with the given ImageBitmap. Its context id (the first argument to HTMLCanvasElement.getContext() or OffscreenCanvas.getContext() is "bitmaprenderer".	https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext
ImageBitmapRenderingContext.transferImageBitmap()	A										<pre><code>void ImageBitmapRenderingContext.transferImageBitmap(bitmap)</code></pre>The ImageBitmapRenderingContext.transferImageBitmap() method displays the given ImageBitmap in the canvas associated with this rendering context. The ownership of the ImageBitmap is transferred to the canvas as well.	https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext/transferImageBitmap
ImageData	A										The ImageData interface represents the underlying pixel data of an area of a canvas element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().	https://developer.mozilla.org/en-US/docs/Web/API/ImageData
ImageData.data	A										<pre><code>imagedata.data\n</code></pre>The readonly ImageData.data property returns a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included).	https://developer.mozilla.org/en-US/docs/Web/API/ImageData/data
ImageData.height	A										<pre><code>imagedata.height\n</code></pre>The readonly ImageData.height property returns the number of rows in the image data object.	https://developer.mozilla.org/en-US/docs/Web/API/ImageData/height
ImageData()	A										<pre><code>new ImageData(array, width, height);\nnew ImageData(width, height);\n</code></pre>The ImageData() constructor returns a newly instantiated ImageData object build from the typed array given and having the specified width and height.	https://developer.mozilla.org/en-US/docs/Web/API/ImageData/ImageData
ImageData.width	A										<pre><code>imagedata.width\n</code></pre>The readonly ImageData.width property returns the number of pixels per row in the image data object.	https://developer.mozilla.org/en-US/docs/Web/API/ImageData/width
Index	A										Found 2889 pages:	https://developer.mozilla.org/en-US/docs/Web/API/Index
IndexedDB API	A										IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. This API uses indexes to enable high performance searches of this data. While DOM Storage is useful for storing smaller amounts of data, it is less useful for storing larger amounts of structured data. IndexedDB provides a solution. This is the main landing page for MDN's IndexedDB coverage — here we provide links to the full API reference and usage guides, browser support details, and some explanation of key concepts.	https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
Basic concepts	A										This introduction discusses essential concepts and terminology in IndexedDB. It gives you the big picture and explains key concepts.	https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Basic_Concepts_Behind_IndexedDB
Browser storage limits and eviction criteria	A										There are a number of web technologies that store data of one kind or another on the client-side (i.e. on your local disk.) The process by which the browser works out how much space to allocate to web data storage and what to delete when that limit is reached is not simple, and differs between browsers. This article attempts to explain how this all works.	https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria
Using IndexedDB	A										This tutorial walks you through using the asynchronous API of IndexedDB. If you are not familiar with IndexedDB, you should first read Basic Concepts About IndexedDB.	https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
Using IndexedDB in chrome	A										The indexedDB API is typically used to store data in the user's browser from content JavaScript.  (See Using IndexedDB for an overview.)  However, the APIs can be also be accessed from system-privileged JavaScript using the Components.utils.importGlobalProperties() function:	https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB_in_chrome
Using JavaScript Generators in Firefox	A										Generators can be used to simplify asynchronous code in Firefox by opting in to using JavaScript version 1.7 or later. You can opt in in HTML as follows:	https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_JavaScript_Generators_in_Firefox
InputDeviceCapabilities	A										The InputDeviceCapabilities interface of the Input Device Capabilities API provides information about the physical device or a group of related devices responsible for generating input events. Events caused by the same physical input device get the same instance of this object, but the converse isn't true. For example, two mice with the same capabilities in a system may appear as a single InputDeviceCapabilities instance.	https://developer.mozilla.org/en-US/docs/Web/API/InputDeviceCapabilities
firesTouchEvents	A										<pre><code>var boolean = InputDeviceCapabilities.firesTouchEvents</code></pre>The InputDeviceCapabilities.firesTouchEvents read-only property returns a Boolean that indicates whether the device dispatches touch events.	https://developer.mozilla.org/en-US/docs/Web/API/InputDeviceCapabilities/fireTouchEvents
InputDeviceCapabilities	A										<pre><code>var inputDeviceCapabilities = new InputDeviceCapabilities([InputDeviceCapabilitiesInit])</code></pre>The InputDeviceCapabilities() constructor creates a new InputDeviceCapabilities object provides information about the physical device responsible for generating a touch event.	https://developer.mozilla.org/en-US/docs/Web/API/InputDeviceCapabilities/InputDeviceCapabilities
InputDeviceCapabilities API	A										The InputDeviceCapabilities API provides details about the underlying sources of input events. The API attempts to describe how the device behaves rather than what it is. For example, the first version of the API indicates whether a device fires touch events rather than whether it is a touch screen.	https://developer.mozilla.org/en-US/docs/Web/API/InputDeviceCapabilities_API
InputEvent	A										The InputEvent interface represents an event notifying of editable content change.	https://developer.mozilla.org/en-US/docs/Web/API/InputEvent
InputEvent()	A										<pre><code> event = new InputEvent(typeArg, inputEventInit);</code></pre>The InputEvent() constructor creates a new InputEvent.	https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/InputEvent
InputEvent.isComposing	A										<pre><code>var bool = event.isComposing;</code></pre>The InputEvent.isComposing read-only property returns a Boolean value indicating if the event is fired after compositionstart and before compositionend.	https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/isComposing
InstallEvent	A										The parameter passed into the oninstall handler, the InstallEvent interface represents an install action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. As a child of ExtendableEvent, it ensures that functional events such as FetchEvent are not dispatched during installation.	https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent
InstallEvent.activeWorker	A										<pre><code>var myActiveWorker = event.activeWorker</code></pre>The activeWorker read-only property of the InstallEvent interface returns the ServiceWorker that is currently actively controlling the page.	https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent/activeWorker
InstallEvent.InstallEvent()	A										<pre><code>var myInstallEvent = new InstallEvent(type, init);</code></pre>The InstallEvent() constructor creates a new InstallEvent object.	https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent/InstallEvent
InstallTrigger	A										The InstallTrigger interface is an interesting outlier in the Apps API; it's included in this API but are inherited from the old Mozilla XPInstall technology for installing add-ons. It is used for triggering the download and installation of an add-on (or anything packaged in an. xp i file) from a Web page, using JavaScript code to kick off the install process.	https://developer.mozilla.org/en-US/docs/Web/API/InstallTrigger
compareVersion	A										Compares the version of a file or package with the version of an existing file or package.	https://developer.mozilla.org/en-US/docs/Web/API/InstallTrigger/compareVersion
enabled	A										<pre><code>Boolean enabled (); </code></pre>Indicates whether or not Software Installation is enabled for this client machine.	https://developer.mozilla.org/en-US/docs/Web/API/InstallTrigger/enabled
getVersion	A										Returns an object representing the version number from the Client Version Registry for the specified component. It is used in both trigger scripts and installation scripts.	https://developer.mozilla.org/en-US/docs/Web/API/InstallTrigger/getVersion
install	A										<pre><code>int install(array XPIlist [, function callBackFunc ] )\n</code></pre>Installs one or more XPI files on the local machine.	https://developer.mozilla.org/en-US/docs/Web/API/InstallTrigger/install
installChrome	A										Installs new skin or locale packages in Netscape 6 and Mozilla.	https://developer.mozilla.org/en-US/docs/Web/API/InstallTrigger/installChrome
startSoftwareUpdate	A										<pre><code>Boolean startSoftwareUpdate ( String url);\n</code></pre>Triggers the downloading and installation of the software at the specified URL.	https://developer.mozilla.org/en-US/docs/Web/API/InstallTrigger/startSoftwareUpdate
IntersectionObserver	A										The IntersectionObserver interface of the the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. The ancestor or viewport is referred to as the root.	https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver
IntersectionObserver.IntersectionObserver()	A										<pre><code>var observer = new IntersectionObserver(callback, options);</code></pre>The IntersectionObserver() constructor creates a new IntersectionObserver object.	https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver
IntersectionObserverEntry	A										The IntersectionObserverEntry interface of the the Intersection Observer API provides information about the intersection of a particular target with the observers root element at a particular time. Instances of this interface cannot be created, but a list of them is returned by IntersectionObserver.takeRecords().	https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry
Intersection Observer API	A										The Intersection Observer API allows you to configure a callback that is called whenever one item, called a target, intersects either the device viewport or a specified element called, for the purpose of this API, the root element. Create the intersection observer by calling its constructor and passing it a reference to the callback function.	https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
KeyboardEvent	A										KeyboardEvent objects describe a user interaction with the keyboard. Each event describes a key; the event type (keydown, keypress, or keyup) identifies what kind of activity was performed.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent
KeyboardEvent.altKey	A										<pre><code>var altKeyPressed = instanceOfKeyboardEvent.altKey\n</code></pre>The KeyboardEvent.altKey read-only property is a Boolean indicates if the alt key (Option or ⌥ on OS X) was pressed (true) or not (false) when the event occured.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey
KeyboardEvent.charCode	A										<pre><code>var value = event.charCode;\n</code></pre>The KeyboardEvent.charCode read-only property returns the Unicode value of a character key pressed during a keypress event.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode
KeyboardEvent.code	A										The KeyboardEvent.code property represents a physical key on the keyboard (as opposed to the character generated by pressing the key). In other words, this property returns a value which isn't altered by keyboard layout or the state of the modifier keys.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code
KeyboardEvent.ctrlKey	A										<pre><code>var ctrlKeyPressed = instanceOfKeyboardEvent.ctrlKey\n</code></pre>The KeyboardEvent.ctrlKey read-only property returns a Boolean that indicates if the control key was pressed (true) or not (false) when the event occured.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey
KeyboardEvent.getModifierState()	A										<pre><code>var active = event.getModifierState(keyArg);</code></pre>The KeyboardEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (that is the modifier key is pressed or locked), otherwise, false.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState
KeyboardEvent.initKeyboardEvent()	A										<pre><code>kbdEvent.initKeyboardEvent(typeArg, canBubbleArg, cancelableArg,\n                           viewArg, charArg, keyArg,\n                           locationArg, modifiersListArg, repeat)\n</code></pre>The KeyboardEvent.initKeyboardEvent() initializes the attributes of a keyboard event object. This method was introduced in draft of DOM Level 3 Events, but deprecated in newer draft. Gecko won't support this feature since implementing this method as experimental broke existing web apps (see bug 999645). Web applications should use constructor instead of this if it's available.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent
KeyboardEvent.initKeyEvent()	A										<pre><code>event.initKeyEvent (type, bubbles, cancelable, viewArg, \n                    ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, \n                    keyCodeArg, charCodeArg) \n</code></pre>The KeyboardEvent.initKeyEvent method is used to initialize the value of an event created using document.createEvent ("KeyboardEvent"). Events initialized in this way must have been created with the document.createEvent ("KeyboardEvent") method. initKeyEvent must be called to set the event before it is dispatched.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyEvent
KeyboardEvent.isComposing	A										<pre><code>var bool = event.isComposing;</code></pre>The KeyboardEvent.isComposing read-only property returns a Boolean value indicating if the event is fired after compositionstart and before compositionend.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing
KeyboardEvent.key	A										The KeyboardEvent.key read-only property returns the value of a key or keys pressed by the user.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
Key Values	A										The tables below list the standard key values in various categories of key, with an explanation of what the key is typically used for. Corresponding virtual keycodes for common platforms are included where available.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
KeyboardEvent()	A										<pre><code> event = new KeyboardEvent(typeArg, KeyboardEventInit);</code></pre>The KeyboardEvent() constructor creates a new KeyboardEvent.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent
KeyboardEvent.keyCode	A										The KeyboardEvent.keyCode read-only property represents a system and implementation dependent numerical code identifying the unmodified value of the pressed key. This is usually the decimal ASCII (RFC 20) or Windows 1252 code corresponding to the key. If the key can't be identified, this value is 0.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode
KeyboardEvent.keyIdentifier	A										The deprecated KeyboardEvent.keyIdentifier read-only property returns a "key identifier" string that can be used to determine what key was pressed. Its non-deprecated replacement is KeyboardEvent.key.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyIdentifier
KeyboardEvent.location	A										<pre><code>var location = event.location;</code></pre>The KeyboardEvent.location read-only property returns an unsigned long representing the location of the key on the keyboard or other input device	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location
KeyboardEvent.metaKey	A										<pre><code>var metaKeyPressed = instanceOfKeyboardEvent.metaKey\n</code></pre>The KeyboardEvent.metaKey read-only property returning a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occurred.  Some operating systems may intercept the key so it is never detected.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey
KeyboardEvent.repeat	A										<pre><code>var repeat = event.repeat;</code></pre>The KeyboardEvent.repeat read-only property returns a Boolean that is true if the key is being held down such that it is automatically repeating.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
KeyboardEvent.shiftKey	A										<pre><code>var shiftKeyPressed = instanceOfKeyboardEvent.shiftKey\n</code></pre>The KeyboardEvent.shiftKey read-only property indicates if the shift key was pressed (true) or not (false) when the event occurred.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey
KeyboardEvent.which	A										<pre><code>var keyResult = event.which;\n</code></pre>The KeyboardEvent.which read-only property returns the numeric keyCode of the key pressed, or the character code (charCode) for an alphanumeric key pressed.	https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which
KeyframeEffect	A										The KeyframeEffect interface of the Web Animations API lets us create sets of animatable properties and values, called keyframes. These can then be played using the Animation.Animation() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect
KeyframeEffect.KeyframeEffect()	A										<pre><code>&#160;var rabbitDownKeyframes = new KeyframeEffect( \n&#160; &#160; whiteRabbit,&#160;// element to animate\n&#160; &#160; [\n&#160; &#160; &#160; { transform: 'translateY(0%)' }, // keyframe&#160;\n&#160; &#160; &#160; { transform: 'translateY(100%)' } // keyframe\n&#160; &#160; ],&#160;\n&#160; &#160; { duration: 3000, fill: 'forwards' } // keyframe options\n&#160; );\n</code></pre>The KeyframeEffect() constructor of the Web Animations API returns a new KeyframeEffect object instance.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/KeyframeEffect
KeyframeEffect.setKeyframes()	A										<pre><code>// passing an array of keyframe objects\nexistingKeyframeEffect.setKeyframes(\n[\n  { color: 'blue' },\n    { color: 'green', left: '10px' }\n  ]\n);\n\n// passing an object with arrays for values\nexistingKeyframeEffect.setKeyframes(\n  {\n    color: ['blue', 'green'],\n    left: [ '0', '10px']\n  }\n);\n\n// passing a single-member object\nexistingKeyframeEffect.setKeyframes(\n  {\n    color: 'blue'\n  }\n);</code></pre>The setKeyframes() method of the KeyframeEffect interface replaces the keyframes that make up the affected KeyframeEffect with a new set of keyframes.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/setKeyframes
KeyframeEffectReadOnly	A										The KeyframeEffectReadOnly interface of the Web Animations API describes sets of animatable properties and values that can be played using the Animation.Animation() constructor, and which are inherited by KeyframeEffect.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly
KeyframeEffectReadOnly.composite	A										The composite property of a KeyframeEffectReadOnly or a KeyframeEffect resolves how an element's animation impacts its underlying property values.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly/composite
KeyframeEffectReadOnly.getKeyframes()	A										<pre><code>// Return the array of keyframes\n\nredQueen_alice.effect.getKeyframes();\n</code></pre>The getKeyframes() method of a KeyframeEffectReadOnly or a KeyframeEffect returns an Array of the computed keyframes that make up this animation along with their computed offsets.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly/getKeyframes
KeyframeEffectReadOnly.iterationComposite	A										The iterationComposite property of a KeyframeEffectReadOnly or a KeyframeEffect resolves how the the animation's property value changes accumulate or override each other upon each of the animation's iterations.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly/iterationComposite
KeyframeEffectReadOnly.KeyframeEffectReadOnly()	A										The KeyframeEffectReadOnly() constructor of the Web Animations API returns a new KeyframeEffectReadOnly object instance.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly/KeyframeEffectReadOnly
KeyframeEffectReadOnly.spacing	A										<pre><code>var keyframes = new KeyframeEffect(\n  element,\n  [\n    { left: '0px' },\n    { left: '-20px' },\n    { left: '100px' },\n    { left: '50px' }\n  ],\n  1000\n);</code></pre>The spacing property of a KeyframeEffectReadOnly or a KeyframeEffect sets the temporal spacing of the animation's iterations.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly/spacing
KeyframeEffectReadOnly.target	A										<pre><code>var whiteRabbit = document.getElementById("rabbit");\n\nvar rabbitDownKeyframes = new KeyframeEffect(\n  whiteRabbit,\n  [\n    { transform: 'translateY(0%)' }, \n    { transform: 'translateY(100%)' }\n  ],\n  { duration: 3000, fill: 'forwards' }\n);\n\n// returns &lt;div id=&#8203;"rabbit"&gt;&#8203;Click the rabbit's ears!&#8203;&lt;/div&gt;&#8203;\nrabbitDownKeyframes.target;\n</code></pre>The target property of a KeyframeEffectReadOnly or a KeyframeEffect interface represents the element or pseudo-element being animated. It may be null for animations that do not target a specific element. It performs as both a getter and a setter, except with animations and transitions generated by CSS.	https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly/target
L10n.formatValue	A										<pre><code>var translationPromise = navigator.mozL10n.formatValue(identifier[, data]);</code></pre>formatValue is used to retrieve translations from the localization resources, optionally interpolating them with additional variable data. If the translation is not found in the first supported locale, the L10n context will try the next locale in the fallback chain (asynchronously) until it finds an available translation.	https://developer.mozilla.org/en-US/docs/Web/API/L10n.formatValue
L10n.get	A										<pre><code>var translation = navigator.mozL10n.get(identifier[, data]);</code></pre>The get method is used to retrieve translations from the localization resources, optionally interpolating them with additional variable data. If the translation is not found in the first supported locale, the L10n context will try the next locale in the fallback chain (synchronously !) until it finds an available translation.	https://developer.mozilla.org/en-US/docs/Web/API/L10n.get
L10n.language.code	A										<pre><code>var languageCode = navigator.mozL10n.language.code;</code></pre>The language.code property returns the code of the currently active language and allows to change the language by setting the value to a new code.	https://developer.mozilla.org/en-US/docs/Web/API/L10n.language.code
L10n.language.direction	A										<pre><code>var languageCode = navigator.mozL10n.language.direction;</code></pre>The language.direction property returns the direction (ltr or rtl) of the currently active language.	https://developer.mozilla.org/en-US/docs/Web/API/L10n.language.direction
L10n.once	A										<pre><code>navigator.mozL10n.once(callback);</code></pre>The once method is used to register a callback that will execute exactly once.  If the L10n context is ready when L10n.once() is called, the callback will be invoked immediately on the next tick of the event loop. If the L10n context is not ready when L10n.once() is called (because the localization resources are still downloading), the callback will be invoked when the ready event of the L10n context fires.	https://developer.mozilla.org/en-US/docs/Web/API/L10n.once
L10n.ready	A										<pre><code>navigator.mozL10n.ready(callback);</code></pre>The ready method is used to register a callback that will execute at least once.  The callback is registered as a listener to the ready event of the L10n context.  Additionally, if the L10n context is ready when L10n.ready() is called, the callback will be invoked immediately on the next tick of the event loop.	https://developer.mozilla.org/en-US/docs/Web/API/L10n.ready
L10n.readyState	A										<pre><code>var readyState = navigator.mozL10n.readyState;</code></pre>The readyState property returns either loading or complete — depending on the current state of the L10n context.	https://developer.mozilla.org/en-US/docs/Web/API/L10n.readyState
L10n.setAttributes	A										<pre><code>navigator.mozL10n.setAttributes(element, identifier[, data]);</code></pre>The setAttributes method may be used to set the data-l10n-id and data-l10n-args attributes on DOM elements.	https://developer.mozilla.org/en-US/docs/Web/API/L10n.setAttributes
LinkStyle	A										The LinkStyle interface allows to access the associated CSS style sheet of a node.	https://developer.mozilla.org/en-US/docs/Web/API/LinkStyle
LocalFileSystem	A										The LocalFileSystem interface of the File System API gives you access to a sandboxed file system.  The methods are implemented by window and worker objects.	https://developer.mozilla.org/en-US/docs/Web/API/LocalFileSystem
LocalFileSystemSync	A										The LocalFileSystemSync interface of the File System API gives you access to a sandboxed file system. It is intended to be used with WebWorkers. The methods are implemented by worker objects.	https://developer.mozilla.org/en-US/docs/Web/API/LocalFileSystemSync
LocalMediaStream	A										The LocalMediaStream interface represents a stream of media content fetched from a local data source. This is the interface returned by getUserMedia().	https://developer.mozilla.org/en-US/docs/Web/API/LocalMediaStream
Location	A										The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.	https://developer.mozilla.org/en-US/docs/Web/API/Location
Location.assign()	A										<pre><code>object.assign(url);\n</code></pre>The Location.assign() method causes the window to load and display the document at the URL specified.	https://developer.mozilla.org/en-US/docs/Web/API/Location/assign
Location.reload()	A										<pre><code>object.reload(forcedReload);\n</code></pre>The Location.reload() method reloads the resource from the current URL. Its optional unique parameter is a Boolean, which, when it is true, causes the page to always be reloaded from the server. If it is false or not specified, the browser may reload the page from its cache. Besides caching behaviour forcedReload flag also impacts how some browsers handle scroll position: ordinary reload happens to try to restore scroll position after reloading page DOM, while in forced mode (when parameter is set to true) the new DOM gets loaded with scrollTop == 0.	https://developer.mozilla.org/en-US/docs/Web/API/Location/reload
Location.replace()	A										<pre><code>object.replace(url);\n</code></pre>The Location.replace() method replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it.	https://developer.mozilla.org/en-US/docs/Web/API/Location/replace
LockedFile	A										The LockedFile interface provides tools to deal with a given file with all the necessary locks.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile
LockedFile.abort()	A										<pre><code>var request = instanceOfLockedFile.abort();</code></pre>The abort method is used to release the lock on the LockedFile object, making it inactive: its active property is set to false and all ongoing operations are canceled.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/abort
LockedFile.active	A										<pre><code>var state = instanceOfLockedFile.active\n</code></pre>The active property allows to know if the LockedFile object is still usable (true) or not (false). If the object is inactive then it is impossible to perform any read or write operation with it. Typically, a LockedFile object becomes inactive when the LockedFile.abort() method is called or if an error occurs.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/active
LockedFile.append()	A										<pre><code>var request = instanceOfLockedFile.append(data);</code></pre>The append method is used to write some data at the end of the file.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/append
LockedFile.fileHandle	A										<pre><code>var handler = instanceOfLockedFile.fileHandle\n</code></pre>The fileHandle property gives access to the FileHandle object that produced the LockedFile object.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/fileHandle
LockedFile.flush()	A										<pre><code>var request = instanceOfLockedFile.flush();</code></pre>The flush method is used to ensure any change made to a file is properly written on disk.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/flush
LockedFile.getMetadata()	A										<pre><code>var request = instanceOfLockedFile.getMetadata(param);</code></pre>The getMetadata method allows to retrieve some metadata about the locked file.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/getMetaData
LockedFile.location	A										<pre><code>var location = instanceOfLockedFile.location\n</code></pre>The location property is a zero-based index representing the position of the read/write pointer within the file. Its value indicates at which bytes within the file any write or read operation will start.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/location
LockedFile.mode	A										<pre><code>var mode = instanceOfLockedFile.mode\n</code></pre>The mode property provides the read/write status of the LockedFile file.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/mode
LockedFile.onabort	A										<pre><code>instanceOfLockedFile.onabort = funcRef;\n</code></pre>Specifies an event listener to receive abort events. These events occur when the locked file has been aborted with the LockedFile.abort() method.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/onabort
LockedFile.oncomplete	A										<pre><code>instanceOfLockedFile.oncomplete = funcRef;\n</code></pre>Specifies an event listener to receive complete events. These events occur each time a read or write operation is successful.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/oncomplete
LockedFile.onerror	A										<pre><code>instanceOfLockedFile.onerror = funcRef;\n</code></pre>Specifies an event listener to receive error events. These events occur when something goes wrong.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/onerror
LockedFile.readAsArrayBuffer()	A										<pre><code>var request = instanceOfLockedFile.readAsArrayBuffer(size);</code></pre>The readAsArrayBuffer method is used to read the content of the LockedFile object and provide the result of that reading as an ArrayBuffer. In many ways, it performs like the FileReader.readAsArrayBuffer() method.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/readAsArrayBuffer
LockedFile.readAsText()	A										<pre><code>var request = instanceOfLockedFile.readAsText(size[, encoding]);</code></pre>The readAsText method is used to read the content of the LockedFile object and provide the result of that reading as a string. In many ways, it performs like the FileReader.readAsText() method.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/readAsText
LockedFile.truncate()	A										<pre><code>var request = instanceOfLockedFile.truncate(start);</code></pre>The truncate method is used to remove some data within the file.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/truncate
LockedFile.write()	A										<pre><code>var request = instanceOfLockedFile.write(data);</code></pre>The write method is used to write some data within the file.	https://developer.mozilla.org/en-US/docs/Web/API/LockedFile/write
MediaDeviceInfo	A										The MediaDevicesInfo interface contains information on the available media input and output devices.	https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo
MediaDevices	A										The MediaDevices interface provides access to connected media input devices like cameras and microphones, as well as screensharing.	https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices
MediaDevices.enumerateDevices()	A										<pre><code>navigator.mediaDevices.enumerateDevices()\n.then(function(MediaDeviceInfo) { ... })</code></pre>The MediaDevices.enumerateDevices() method collects information about the media input and output devices available on the system.	https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices
MediaDevices.getUserMedia()	A										<pre><code>navigator.mediaDevices.getUserMedia(constraints)\n.then(function(mediaStream) { ... })\n.catch(function(error) { ... })</code></pre>The MediaDevices.getUserMedia() method prompts the user for permission to use one video and/or one audio input device such as a camera or screensharing and/or a microphone. If the user provides permission, then the returned Promise is resolved with the resulting MediaStream object. If the user denies permission, or media is not available, then the promise is rejected with PermissionDeniedError or NotFoundError respectively. Note that it is possible for the returned promise to neither resolve nor reject, as the user is not required to make a choice.	https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
MediaElementAudioSourceNode	A										A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource method. The amount of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio.	https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode
MediaError	A										The MediaError interface represents an error associated to a media, like a HTMLMediaElement.	https://developer.mozilla.org/en-US/docs/Web/API/MediaError
MediaError.code	A										<pre><code>var myError = mediaError.code</code></pre>The MediaError.code is a read-only unsigned short that represents the error:	https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code
mediaerror code	R	MediaError.code										
MediaKeyMessageEvent	A										The MediaKeyMessageEvent interface of the EncryptedMediaExtensions API contains the content and related data when the content decryption module generates a message for the session.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent
message	A										<pre><code>var messageType = mediaKeyMessageEvent.messageType;</code></pre>The MediaKeyMessageEvent.message read-only property returns an ArrayBuffer with a message from the content decryption module. Messages vary by key system.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/message
messageType	A										<pre><code>var messageType = mediaKeyMessageEvent.messageType;</code></pre>The MediaKeyMessageEvent.messageType read-only property indicates the type of message. It may be one of license-request, license-renewal, license-renewal, or individualization-request.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/messageType
MediaKeys	A										The MediaKeys interface of EncryptedMediaExtensions API the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys
createSession()	A										<pre><code>&#8203;var mediaKeySessionObject = MediaKeys.createSession([MediaKeySessionType]);</code></pre>The MediaKeys.createSession() method returns a new MediaKeySession object, which represents a context for message exchange with a content decryption module (CDM).	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/createSession
setServerCertificate()	A										<pre><code>MediaKeys.setServerCertificate([MediaKeySessionType]).then(function() { ... });</code></pre>The MediaKeys.setServerCertificate() method a Promise to a server certificate to be used to encrypt messages to the license server.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/setServerCertificate
MediaKeySession	A										The MediaKeySession interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession
close()	A										<pre><code>mediaKeySession.close().then(function() { ... });</code></pre>The MediaKeySession.close() method notifies that the current media session is no longer needed, and that the content decryption module should release any resources associated with this object and close it. Then, it returns a Promise.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/close
closed	A										<pre><code>var closed = mediaKeySessionObj.closed;</code></pre>The MediaKeySession.closed read-only property returns a Promise signaling when a MediaKeySession closes. This promise can only be fulfilled and is never rejected. Closing a session means that licenses and keys associated with it are no longer valid for decrypting media data.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/closed
expiration	A										<pre><code>&#8203;var expirationTime = mediaKeySessionObj.expiration;</code></pre>The MediaKeySession.expiration read-only property returns the time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/expiration
generateRequest()	A										<pre><code>mediaKeySession.generateRequest().then(function) { ... });</code></pre>The MediaKeySession.generateRequest() method returns a Promise after generating a media request based on initialization data.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/generateRequest
keyStatuses	A										<pre><code>var mediaKeyStatusMapObj = mediaKeySessionObj.keyStatuses;</code></pre>The MediaKeySession.keyStatuses read-only property returns a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/keyStatuses
load()	A										<pre><code>mediaKeySession.load(sessionId).then(function(booleanValue) { ... });</code></pre>The MediaKeySession.load() method returns a Promise that resolves to a boolean value after loading data for a specified session object.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/load
remove()	A										The MediaKeySession.remove() method returns a Promise after removing any session data associated with the current object.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/remove
sessionId	A										<pre><code>&#8203;var sessionId = mediaKeySessionObj.sessionId;</code></pre>The MediaKeySession.sessionId read-only property contains a unique string generated by the CDM for the current media object and its associated keys or licenses.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/sessionId
update()	A										<pre><code>mediaKeySession.update(response).then(function() { ... });</code></pre>The MediaKeySession.update() method loads messages and licenses to the CDM, and then returns a Promise.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/update
MediaKeyStatusMap	A										The MediaKeyStatusMap interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap
MediaKeyStatusMap.entries()	A										<pre><code>// TBD</code></pre>The entries() read-only property of the MediaKeyStatusMap interface returns a new Iterator object containing an array of [key, value] pairs for each element in the status map, in insertion order.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/entries
MediaKeyStatusMap.forEach()	A										<pre><code>mediaKeyStatusMap.forEach(callback[, thisArg])</code></pre>The forEach property of the MediaKeyStatusMap interface calls callback once for each key-value pair in the status map, in insertion order. If argument is present it will be passed to the callback.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/forEach
MediaKeyStatusMap.get()	A										<pre><code>var value = mediaKeyStatusMap.get(key);</code></pre>The get property of the MediaKeyStatusMap interface returns the value associated with the given key or undefined if there is none.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/get
MediaKeyStatusMap.has()	A										<pre><code>var boolean = mediaKeyStatusMap(key)</code></pre>The has property of the MediaKeyStatusMap interface returns a Boolean asserting whether a value has been associated with the given key.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/has
MediaKeyStatusMap.keys()	A										<pre><code>var iterator = mediaKeyStatusMap.keys()</code></pre>The keys property of the MediaKeyStatusMap interface returns a new Iterator object containing keys for each element in the status map, in insertion order.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/keys
MediaKeyStatusMap.size	A										<pre><code>var size = MediaKeyStatusMap.size;</code></pre>The size read-only property of the MediaKeyStatusMap interface returns the number of key/value paris in the status map.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/size
MediaKeyStatusMap.values()	A										<pre><code>var iterator = mediaKeyStatusMap.values()</code></pre>The values property of the MediaKeyStatusMap interface returns a new Iterator object containing values for each element in the status map, in insertion order.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyStatusMap/values
MediaKeySystemAccess	A										The MediaKeySystemAccess interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess method.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess
createMediaKeys()	A										<pre><code>var mediaKeys = mediaKeySystemAccess.createMediaKeys();</code></pre>The MediaKeySystemAccess.createMediaKeys() method returns a Promise that resolves to a new MediaKeys object.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/createMediaKeys
getConfiguration()	A										<pre><code>var mediaKeySystemConfiguration = mediaKeySystemAccess.getConfiguration();</code></pre>The MediaKeySystemAccess.getConfiguration() method returns a MediaKeySystemConfiguration object with the supported combination of configuration options.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/getConfiguration
keySystem	A										<pre><code>var keySystem = mediaKeySystemAccess.keySystem;</code></pre>The MediaKeySystemAccess.keySystem read-only property returns a DOMString identifying the key system being used.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess/keySystem
MediaKeySystemConfiguration	A										The MediaKeySystemConfiguration interface EncryptedMediaExtensions API provides configuration information about the media key system.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration
audioCapabilities	A										<pre><code>var audioCapabilities[ {contentType: 'contentType', robustness:'robustness'}] = mediaSystemConfiguration.audioCapabilities;</code></pre>The MediaKeySystemConfiguration.audioCapabilities read-only property returns an array of supported audio type and capability pairs.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/audioCapabilities
distinctiveIdentifier	A										<pre><code>var distinctiveIdentifier = mediaSystemConfiguration.distinctiveIdentifier;</code></pre>The MediaKeySystemConfiguration.distinctiveIdentifier read-only property indicates whether a persistent distinctive identifier is required.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/distinctiveIdentifier
initDataTypes	A										<pre><code>var dataTypes[] = mediaSystemConfiguration.initDataTypes;</code></pre>The MediaKeySystemConfiguration.initDataTypes read-only property returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/initDataTypes
persistentState	A										<pre><code>var persistentState = mediaSystemConfiguration.persistentSTate;</code></pre>The MediaKeySystemConfiguration.persistentState read-only property indicates whether the ability to persist state is required.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/persistentState
videoCapabilities	A										<pre><code>var videoCapabilities[{contentType: 'contentType', robustness:'robustness'}] = mediaSystemConfiguration.videoCapabilities;</code></pre>The MediaKeySystemConfiguration.videoCapabilities read-only property returns an array of supported video type and capability pairs.	https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration/videoCapabilities
MediaQueryList	A										A MediaQueryList object maintains a list of media queries on a document, and handles sending notifications to listeners when the media queries on the document change.	https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList
MediaQueryListListener	A										A MediaQueryList object maintains a list of media queries on a document, and handles sending notifications to listeners when the media queries on the document change.	https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListListener
MediaRecorder	A										The MediaRecorder interface of the MediaRecorder API provides functionality to easily record media. It is created by the invocation of the MediaRecorder() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder
Media.Recorder.isMimeTypeSupported	A										<pre><code>var canRecord = MediaRecorder.isMimeTypeSupported(mimeType)</code></pre>The MediaRecorder.isMimeTypeSupported() method returns a true that indicates whether the value of the argument is one the user agent can record. isMimeTypeSupported	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/canRecordMimeType
MediaRecorder.MediaRecorder()	A										<pre><code>var m = new MediaRecorder(stream, options);</code></pre>The MediaRecorder() constructor creates a new MediaRecorder object.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder
MediaRecorder.mimeType	A										<pre><code>var mimeType&#160;= MediaRecorder.mimeType</code></pre>The MediaRecorder.mimeType read-only property returns the mime type that was selected as the recording container when it was created.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/mimeType
MediaRecorder.ondataavailable	A										<pre><code>MediaRecorder.ondataavailable = function(event) { ... }\nMediaRecorder.addEventListener('dataavailable', function(event) { ... })\n</code></pre>The MediaRecorder.ondataavailable event handler (part of the MediaRecorder API) handles the dataavailable event, allowing you to run code in response to Blob data being made available for use.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ondataavailable
MediaRecorder.onerror	A										<pre><code>MediaRecorder.onerror = function(event) { ... }\nMediaRecorder.addEventListener('error', function(event) { ... })\n</code></pre>The MediaRecorder.onerror event handler (part of the MediaRecorder API) handles the DOMError event, allowing you to run code in response to fatal errors occurring that prevent media capture.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onerror
MediaRecorder.onpause	A										<pre><code>MediaRecorder.onpause = function(event) { ... }\nMediaRecorder.addEventListener('pause', function(event) { ... })\n</code></pre>The MediaRecorder.onpause event handler (part of the MediaRecorder API) handles the pause event, allowing you to run code in response to the media recording being paused.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onpause
MediaRecorder.onresume	A										<pre><code>MediaRecorder.onresume = function(event) { ... }\nMediaRecorder.addEventListener('resume', function(event) { ... })\n</code></pre>The MediaRecorder.onresume event handler (part of the MediaRecorder API) handles the resume event, allowing you to run code in response to the media recording being resumed after pausing.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onresume
MediaRecorder.onstart	A										<pre><code>MediaRecorder.onstart = function(event) { ... }\nMediaRecorder.addEventListener('start', function(event) { ... })</code></pre>The MediaRecorder.onstart event handler (part of the MediaRecorder API) handles the start event, allowing you to run code in response to media recording being started by a MediaRecorder.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstart
MediaRecorder.onstop	A										<pre><code>MediaRecorder.onstop = function(event) { ... }\nMediaRecorder.addEventListener('stop', function(event) { ... })</code></pre>The MediaRecorder.onstop event handler (part of the MediaRecorder API) handles the stop event, allowing you to run code in response to media recording via a MediaRecorder being stopped.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstop
MediaRecorder.onwarning	A										<pre><code>MediaRecorder.onwarning = function(event) { ... }\nMediaRecorder.addEventListener('warning', function(event) { ... })</code></pre>The MediaRecorder.onwarning event handler (part of the MediaRecorder API) handles the recordingwarning event, allowing you to run code in response to non-fatal errors being thrown during media recording via a MediaRecorder, which don't halt recording.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onwarning
MediaRecorder.pause()	A										<pre><code>MediaRecorder.pause()</code></pre>The Media.pause() method (part of the MediaRecorder API) is used to pause recording of media streams.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/pause
MediaRecorder.requestData()	A										<pre><code>MediaRecorder.requestData()</code></pre>The MediaRecorder.requestData() method (part of the MediaRecorder API) is used to raise a dataavailable event containing a Blob object of the captured media as it was when the method was called.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/requestData
MediaRecorder.resume()	A										<pre><code>MediaRecorder.resume()</code></pre>The MediaRecorder.resume() method (part of the MediaRecorder API) is used to resume media recording when it has been previously paused.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/resume
MediaRecorder.start()	A										<pre><code>MediaRecorder.start(timeslice)</code></pre>The MediaRecorder.start() method (part of the MediaRecorder API) is used to start capturing media into a Blob.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/start
MediaRecorder.state	A										<pre><code>var state&#160;= MediaRecorder.state</code></pre>The MediaRecorder.state read-only property returns the current state of the current MediaRecorder object.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/state
MediaRecorder.stop()	A										<pre><code> MediaRecorder.stop()</code></pre>The MediaRecorder.stop() method (part of the MediaRecorder API) is used to stop media capture.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stop
MediaRecorder.stream	A										<pre><code>var stream&#160;= MediaRecorder.stream</code></pre>The MediaRecorder.stream read-only property returns the stream that was passed into the MediaRecorder() constructor when the MediaRecorder was created.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stream
MediaRecorder API	A										The MediaRecorder API (MediaStream Recording) aims to provide a really simple mechanism by which developers can record media streams from the user's input devices and instantly use them in web apps, rather than having to perform manual encoding operations on raw PCM data, etc., which would be required when using Navigator.getUserMedia() alone.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder_API
Using the MediaRecorder API	A										The MediaRecorder API is a simple construct to record media streams. When used with Navigator.getUserMedia(), it provides an easy way of recording from the user's input devices and instantly using the result in web apps. Both audio and video may be recorded, separately or together. This article aims to provide a basic guide on how to use MediaRecorder.	https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder_API/Using_the_MediaRecorder_API
MediaSource	A										The MediaSource interface represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource
MediaSource.activeSourceBuffers	A										<pre><code>var myActiveSourceBuffers = mediaSource.activeSourceBuffers;</code></pre>The activeSourceBuffers read-only property of the MediaSource interface returns a SourceBufferList object containing a subset of the SourceBuffer objects contained within SourceBuffers — the list of objects providing the selected video track,  enabled audio tracks, and shown/hidden text tracks.	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/activeSourceBuffers
MediaSource.addSourceBuffer()	A										<pre><code>var sourceBuffer = mediaSource.addSourceBuffer(mimeType);</code></pre>The addSourceBuffer() method of the MediaSource interface creates a new SourceBuffer of the given MIME type and adds it to the MediaSource 's SourceBuffers list.	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer
MediaSource.duration	A										<pre><code>mediaSource.duration = 5.5; // 5.5 seconds\n\nvar myDuration = mediaSource.duration;</code></pre>The duration property of the MediaSource interface gets and sets the duration of the current media being presented.	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/duration
MediaSource.endOfStream()	A										<pre><code>mediaSource.endOfStream(endOfStreamError);</code></pre>The endOfStream() method of the MediaSource interface signals the end of the stream.	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/endOfStream
MediaSource.isTypeSupported()	A										<pre><code>var isItSupported = mediaSource.isTypeSupported(mimeType);</code></pre>The isTypeSupported() method of the MediaSource interface returns a Boolean value indicating if the given MIME type is supported by the current user agent — this is, if it can successfully create SourceBuffer objects for that MIME type.	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/isTypeSupported
MediaSource.MediaSource()	A										<pre><code>var mediaSource = new MediaSource();</code></pre>The MediaSource() constructor of the MediaSource interface constructs and returns a new MediaSource object with no associated source buffers.	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource
MediaSource.readyState	A										<pre><code>var myReadyState = mediaSource.readyState;</code></pre>The readyState read-only property of the MediaSource interface returns an enum representing the state of the current MediaSource. The three possible values are:	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/readyState
MediaSource.removeSourceBuffer()	A										<pre><code>mediaSource.removeSourceBuffer(sourceBuffer);</code></pre>The removeSourceBuffer() method of the MediaSource interface removes the given SourceBuffer from the SourceBuffers list associated with this MediaSource object.	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/removeSourceBuffer
MediaSource.sourceBuffers	A										<pre><code>var mySourceBuffers = mediaSource.sourceBuffers;</code></pre>The sourceBuffers read-only property of the MediaSource interface returns a SourceBufferList object containing the list of SourceBuffer objects associated with this MediaSource.	https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/sourceBuffers
MediaStream	A										The MediaStream interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStream
active	A										<pre><code>var isActive = MediaStream.active;</code></pre>The active read-only property of the MediaStream interface returns a Boolean value that will return to be true if the MediaStream is active, else false.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/active
MediaStream.addTrack()	A										<pre><code>stream.addTrack(track);\n</code></pre>The MediaStream.addTrack() method adds a new track to the stream. The track is specified as a parameter of type MediaStreamTrack.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/addTrack
MediaStream.clone()	A										<pre><code>var stream = MediaStream.clone();</code></pre>The clone() method of the MediaStream interface creates a duplicate of the MediaStream. This new MediaStream object has a new unique id and contains clones of every MediaStreamTrack contained by the MediaStream on which clone() was called.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/clone
MediaStream.getTrackById()	A										<pre><code>var track = MediaStream.getTrackById(id);\n</code></pre>The MediaStream.getTrackById() method returns a MediaStreamTrack object representing the track with the specified ID string. If there is no track with the specified ID, this method returns null.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getTrackById
MediaStream.id	A										<pre><code>var id = mediaStream.id;\n</code></pre>The MediaStream.id() read-only property is a DOMString containing 36 characters denoting a unique identifier (GUID) for the object.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/id
MediaStream.onaddtrack	A										<pre><code>MediaStream.onaddtrack = eventHandler;\n</code></pre>The MediaStream.onaddtrack property is an EventHandler which specifies a function to be called when the addtrack event occurs on a MediaStream instance. This happens when a new track of any kind is added to the media stream.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onaddtrack
MediaStream.onremovetrack	A										<pre><code>MediaStream.onremovetrack = eventHandler;\n</code></pre>The MediaStream.onremovetrack property is an EventHandler which specifies a function to be called when the removetrack event occurs on a MediaStream instance. This happens when a track of any kind is removed from the media stream.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onremovetrack
MediaStreamAudioDestinationNode	A										Inherits properties from its parent, AudioNode.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode
MediaStreamAudioDestinationNode.stream	A										<pre><code>var audioCtx = new AudioContext();\nvar destination = audioCtx.createMediaStreamDestination();\nvar myStream = destination.stream;\n</code></pre>A MediaStream.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode/stream
MediaStreamAudioSourceNode	A										A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaStreamSource method. The amount of channels in the output equals the number of channels in AudioMediaStreamTrack. If there is no valid media stream, then the number of output channels will be one silent channel.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode
MediaStreamEvent	A										The MediaStreamEvent interface represents events that occurs in relation to a MediaStream. Two events of this type can be thrown: addstream and removestream.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent
MediaStreamEvent()	A										<pre><code> var event = new MediaStreamEvent(type, mediaStreamEventInit);</code></pre>The MediaStreamEvent() constructor creates a new MediaStreamEvent.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent/MediaStreamEvent
MediaStreamEvent.stream	A										<pre><code> var stream = event.stream;</code></pre>The read-only property MediaStreamEvent.stream returns the MediaStream associated with the event.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent/stream
MediaStreamTrack	A										The MediaStreamTrack interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack
MediaStreamTrack.applyConstraints()	A										<pre><code>var appliedPromise = MediaStreamTrack.applyConstraints(constraints);</code></pre>The applyConstraints () method of the MediaStreamTrack interface applies a set of constraints to the track; these constraints let the Web site or app establish ideal values and acceptable ranges of values for the constrainable properties of the track, such as frame rate, dimensions, echo cancelation, and so forth.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints
MediaStreamTrack.clone()	A										<pre><code>var track&#160;= MediaStreamTrack.clone();</code></pre>The clone() method of the MediaStreamTrack interface creates a duplicate of the MediaStreamTrack. This new MediaStreamTrack object is identical except for its unique id.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/clone
MediaStreamTrack.enabled	A										<pre><code>var bool = track.enabled;\ntrack.enabled = [true | false];</code></pre>The MediaStreamTrack.enabled property returns a Boolean with a value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no effect.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled
MediaStreamTrack.getCapabilities()	A										<pre><code>var capabilities = MediaStreamTrack.getCapabilities();</code></pre>The getCapabilities() method of the MediaStreamTrack interface returns a MediaTrackCapabilities object which specifies the values or range of values which each constrianable property, based upon the platform and user agent.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getCapabilities
MediaStreamTrack.getConstraints()	A										<pre><code>var constraints = MediaStreamTrack.getConstraints();</code></pre>The getConstraints() method of the MediaStreamTrack interface returns a MediaTrackConstraints object containing the set of constraints most recently established for the track using a prior call to applyConstraints(). These constraints indicate values and ranges of values that the Web site or application has specified are acceptable for the included constrainable properties.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getConstraints
MediaStreamTrack.getSettings()	A										<pre><code>var settings = MediaStreamTrack.getSettings();</code></pre>The getSettings() method of the MediaStreamTrack interface returns a MediaTrackSettings object containing the current values of each of the constrainable properties for the current MediaStreamTrack.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getSettings
MediaStreamTrack.id	A										<pre><code> var id = track.id;</code></pre>The read-only property MediaStreamTrack.id returns a DOMString containing a unique identifier (GUID) for the track; it is generated by the browser.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/id
MediaStreamTrack.kind	A										<pre><code> var type = track.kind;</code></pre>The read-only property MediaStreamTrack.kind returns a DOMString set to "audio" if the track is an audio track and to "video", if it is a video track. It doesn't change if the track is deassociated from its source.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/kind
MediaStreamTrack.label	A										<pre><code> var name = track.label;</code></pre>The read-only property MediaStreamTrack.label returns a DOMString containing a user agent-assigned label that identifies the track source, as in "internal microphone". The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/label
muted	A										<pre><code>var bool&#160;= track.muted;</code></pre>The muted read-only property of the MediaStreamTrack interface returns a Boolean value indicating whether the track is muted.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/muted
MediaStreamTrack.onended	A										<pre><code>MediaStreamTrack.onended = function;\n</code></pre>The MediaStreamTrack.onended event handler is used to specify a function which serves as an EventHandler to be called when the ended event occurs on the track. This event occurs when the track will no longer provide data to the stream for any reason, including the end of the media input being reached, the user revoking needed permissions, the source device being removed, or the remote peer ending a connection.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended
MediaStreamTrack.onmute	A										<pre><code>track.onmute = function;\n</code></pre>The MediaStreamTrack.onmute event handler is a property called when the mute event is received. Such an event is sent when the track is temporarily not able to send data.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onmute
MediaStreamTrack.onoverconstrained	A										<pre><code>track.onoverconstrained = function;\n</code></pre>The MediaStreamTrack.onoverconstrained event handler is a property called when the overconstrained event is received. Such an event is sent when the track is again able to send data.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onoverconstrained
MediaStreamTrack.onunmute	A										<pre><code>track.onunmute = function;\n</code></pre>The MediaStreamTrack.onunmute event handler is a property called when the unmute event is received. Such an event is sent when the track is again able to send data.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onunmute
MediaStreamTrack.readyState	A										<pre><code> var state = track.readyState;</code></pre>The read-only property MediaStreamTrack.readyState returns an enumerated value giving the status of the track.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/readyState
MediaStreamTrack.remote	A										<pre><code>var bool &#8203;= track.remote;</code></pre>The MediaStreamTrack.remote read-only property allows Javascript to know whether a WebRTC MediaStreamTrack is from a remote source or a local one. It returns a Boolean with a value of true if the track is sourced remotely (that is, sourced by an RTCPeerConnection), or false if it is sourced locally.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/remote
MediaStreamTrack.stop()	A										<pre><code>track.stop();\n</code></pre>The MediaStreamTrack.stop() method stops playing the source associated with the track. Both the source and the track are deassociated. The track state is set to ended.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/stop
MediaStreamTrackEvent	A										The MediaStreamTrackEvent interface represents events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Stream API methods. These events are sent to the stream when these changes occur.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent
MediaStreamTrackEvent()	A										<pre><code>var trackEvent = new MediaStreamTrackEvent(type, {track: aMediaStreamTrack});\n</code></pre>The MediaStreamTrackEvent() constructor returns a newly created MediaStreamTrackEvent object, which represents an event announcing that a MediaStreamTrack has been added to or removed from a MediaStream.	https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackEvent/MediaStreamTrackEvent
MediaTrackConstraints	A										The MediaTrackConstraints dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into applyConstraints() to allow a script to establish a set of ideal values and/or preferred ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling getConstraints().	https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints
MediaTrackSettings	A										The MediaTrackSettings dictionary is used to return the current values configured for each of a MediaStreamTrack 's settings. These values will adhere as closely as possible to any constraints previously set using applyConstraints(), and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.	https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings
MediaTrackSupportedConstraints	A										The MediaTrackSupportedConstraints dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the MediaStreamTrack object. An object conforming to MediaTrackSupportedConstraints is returned by MediaDevices.getSupportedConstraints().	https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints
Media Source Extensions API	A										The Media Source Extensions API (MSE) provides functionality enabling plugin-free web-based streaming media. Using MSE, media streams can be created via JavaScript, and played using audio and video elements.	https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API
Transcoding assets for Media Source Extensions	A										When working with media source extensions, it is likely that you need to condition your assets before you can stream them. This article takes you through the requirements and shows you a toolchain you can use to encode your assets appropriately.	https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API/Transcoding_assets_for_MSE
Media Capture and Streams API (Media Streams)	A										The Media Capture and Streams API, often called the Media Stream API or the Stream API,  is an API related to WebRTC which supports streams of audio or video data, the methods for working with them, the constraints associated with the type of data, the success and error callbacks when using the data asynchronously, and the events that are fired during the process.	https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API
MessageChannel	A										The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.	https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel
MessageChannel()	A										<pre><code>var channel = new MessageChannel();</code></pre>The MessageChannel() constructor of the MessageChannel interface returns a new MessageChannel object with two new MessagePort objects.	https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/MessageChannel
MessageChannel.port1	A										<pre><code>channel.port1;</code></pre>The port1 read-only property of the MessageChannel interface returns the first port of the message channel, the port attached to the context that originated the channel.	https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port1
MessageChannel.port2	A										<pre><code>channel.port2;</code></pre>The port2 read-only property of the MessageChannel interface returns second port of the message channel, the port attached to the context at the other end of the channel, which the message is initially sent to.	https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port2
MessageEvent	A										A MessageEvent is the interface representing a message received by a target, being a WebSocket or a WebRTC RTCDataChannel	https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent
MessagePort	A										The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing sending of messages from one port and listening out for them arriving at the other.	https://developer.mozilla.org/en-US/docs/Web/API/MessagePort
MessagePort.close()	A										<pre><code>port.close()</code></pre>The close() method of the MessagePort interface disconnects the port, so it is no longer active. This stops the flow of messages to that port.	https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/close
MessagePort.onmessage	A										<pre><code>channel.onmessage = function() { ... };</code></pre>The onmessage event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type message is fired on the port — that is, when the port receives a message.	https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage
MessagePort.postMessage()	A										<pre><code>port.postMessage(message [,transfer]);</code></pre>The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.	https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage
MessagePort.start()	A										<pre><code>port.start()</code></pre>The start() method of the MessagePort interface starts the sending of messages queued on the port. This method is only needed when using EventTarget.addEventListener ; it is implied when using MessageChannel.onmessage.	https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/start
Microdata DOM API	A										Microdata becomes even more useful when scripts can use it to expose information to the user, for example offering it in a form that can be used by other applications. The document.getItems(typeNames) method provides access to the top-level microdata items. It returns a NodeList containing the items with the specified types, or all types if no argument is specified. Each item is represented in the DOM by the element on which the relevant itemscope attribute is found. These elements have their element.itemScope IDL attribute set to true. The type(s) of items can be obtained using the element.itemType IDL attribute on the element with the itemscope attribute.	https://developer.mozilla.org/en-US/docs/Web/API/Microdata_DOM_API
MIDIAccess	A										The MIDIAccess interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.	https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess
MIDIConnectionEvent	A										The MIDIConnectionEvent interface of the Web MIDI API is the event passed to the onstatechange event of the MIDIAccess interface and the onstatechange event of the MIDIPorts interface. This occurs any time a new port becomes available, or when a previously available port becomes unavailable. For example, this event is fired whenever a MIDI device is either plugged in to or unplugged from a computer.	https://developer.mozilla.org/en-US/docs/Web/API/MIDIConnectionEvent
MIDIInput	A										Use the MIDIInput interface of the Web MIDI API to access and pass messages to a MIDI input port.	https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput
MIDIInputMap	A										The MIDIInputMap read-only interface of the Web MIDI API provides a Map -like interface to the currently available MIDI input ports. Though it works generally like a map, because it is read-only it does not contain clear(), delete(), or set() functions.	https://developer.mozilla.org/en-US/docs/Web/API/MIDIInputMap
MIDIOutputMap	A										The MIDIOutputMap read-only interface of the Web MIDI API provides a Map -like interface to the currently available MIDI output ports. Although it works like a map, because it is read-only, it does not contain clear(), delete(), or set() functions.	https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutputMap
MouseEvent	A										The MouseEvent interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent
MouseEvent.altKey	A										<pre><code>var altKeyPressed = instanceOfMouseEvent.altKey\n</code></pre>The MouseEvent.altKey read-only property is a Boolean indicates if the alt key was pressed (true) or not (false) when the event occurred.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey
MouseEvent.button	A										<pre><code>var buttonPressed = instanceOfMouseEvent.button\n</code></pre>The MouseEvent.button read-only property indicates which button was pressed on the mouse to trigger the event.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
MouseEvent.buttons	A										<pre><code>var buttonPressed = instanceOfMouseEvent.buttons\n</code></pre>The MouseEvent.buttons read-only property indicates which buttons are pressed on the mouse when the event is triggered.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons
MouseEvent.clientX	A										<pre><code>var x = instanceOfMouseEvent.clientX\n</code></pre>The MouseEvent.clientX read-only property provides the horizontal coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientX value of 0, regardless of whether the page is scrolled horizontally.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX
MouseEvent.clientY	A										<pre><code>var y = instanceOfMouseEvent.clientY\n</code></pre>The MouseEvent.clientY read-only property returns the vertical coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientY value of 0, regardless of whether the page is scrolled vertically.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY
MouseEvent.ctrlKey	A										<pre><code>var ctrlKeyPressed = instanceOfMouseEvent.ctrlKey\n</code></pre>The MouseEvent.ctrlKey read-only property returns a Boolean that indicates if the control key was pressed (true) or not (false) when the event occured.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey
MouseEvent.getModifierState()	A										<pre><code>var active =&#8203; event.getModifierState(keyArg);</code></pre>The MouseEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (i.e., the modifier key is pressed or locked), otherwise, false.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState
MouseEvent.initMouseEvent()	A										<pre><code>event.initMouseEvent(type, canBubble, cancelable, view,\n                     detail, screenX, screenY, clientX, clientY,\n                     ctrlKey, altKey, shiftKey, metaKey,\n                     button, relatedTarget);</code></pre>The MouseEvent.initMouseEvent() method initializes the value of a mouse event once it's been created (normally using the Document.createEvent() method).	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent
MouseEvent.metaKey	A										<pre><code>var metaKeyPressed = instanceOfMouseEvent.metaKey\n</code></pre>The MouseEvent.metaKey read-only property returning a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occured.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey
MouseEvent()	A										<pre><code> event = new MouseEvent(typeArg, mouseEventInit);</code></pre>The MouseEvent() constructor creates a new MouseEvent.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent
MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN	A										See MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN
MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN	A										See MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN
MouseEvent.movementX	A										<pre><code>var xShift = instanceOfMouseEvent.movementX\n</code></pre>The MouseEvent.movementX read-only property provides the shift in the X coordinate of the mouse pointer between that event and the previous mousemove event. In other words, the value of that property is computed that way : currentEvent.movementX = currentEvent.screenX - previousEvent.screenX.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX
MouseEvent.movementY	A										<pre><code>var yShift = instanceOfMouseEvent.movementY\n</code></pre>The MouseEvent.movementY read-only property provides the shift in the Y coordinate of the mouse pointer between that event and the previous mousemove event. In other words, the value of that property is computed that way : currentEvent.movementY = currentEvent.screenY - previousEvent.screenY.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY
MouseEvent.mozInputSource	A										<pre><code>var source = event.mozInputSource;</code></pre>The MouseEvent.mozInputSource read-only property on MouseEvent provides information indicating the type of device that generated the event. This lets you, for example, determine whether a mouse event was generated by an actual mouse or by a touch event (which might affect the degree of accuracy with which you interpret the coordinates associated with the event).	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/mozInputSource
MouseEvent.offsetX	A										<pre><code>var xOffset = instanceOfMouseEvent.offsetX;\n</code></pre>The MouseEvent.offsetX read-only property provides the offset in the X coordinate of the mouse pointer between that event and the padding edge of the target node.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX
MouseEvent.offsetY	A										<pre><code>var yOffset = instanceOfMouseEvent.offsetY;\n</code></pre>The MouseEvent.offsetY read-only property provides the offset in the Y coordinate of the mouse pointer between that event and the padding edge of the target node.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetY
MouseEvent.pageX	A										<pre><code>var pos = event.pageXvar pageX = event.pageX;</code></pre>The MouseEvent.pageX read-only property returns the horizontal coordinate of the event relative to the whole document.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageX
MouseEvent.pageY	A										<pre><code>var pos = event.pageYvar pageY = event.pageY;</code></pre>The MouseEvent.pageY read-only property returns the vertical coordinate of the event relative to the whole document.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY
MouseEvent.region	A										<pre><code>var hitRegion = instanceOfMouseEvent.region\n</code></pre>The MouseEvent.region read-only property returns the id of the canvas hit region affected by the event. If no hit region is affected, null is returned.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/region
MouseEvent.relatedTarget	A										<pre><code>var tgt = instanceOfMouseEvent.relatedTarget\n</code></pre>The MouseEvent.relatedTarget read-only property is the secondary target for the event, if there is one. That is:	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget
MouseEvent.screenX	A										<pre><code>var pixelNumber = instanceOfMouseEvent.screenX\n</code></pre>The MouseEvent.screenX read-only property provides the horizontal coordinate of the mouse pointer in global (screen) coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX
MouseEvent.screenY	A										<pre><code>var pixelNumber = instanceOfMouseEvent.screenY\n</code></pre>The MouseEvent.screenY read-only property provides the vertical coordinate of the mouse pointer in global (screen) coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY
MouseEvent.shiftKey	A										<pre><code>var shiftKeyPressed = instanceOfMouseEvent.shiftKey\n</code></pre>The MouseEvent.shiftKey read-only property indicates if the shift key was pressed (true) or not (false) when the event occurred.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey
MouseEvent.webkitForce	A										MouseEvent.webkitForce is a proprietary, WebKit-specific numeric property whose value represents the amount of pressure that is being applied on the touchpad or touchscreen.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/webkitForce
MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN	A										MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN is a proprietary, WebKit-specific, static numeric property whose value is the minimum force necessary for a force click.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN
MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN	A										MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN is a proprietary, WebKit-specific, static numeric property whose value is the minimum force necessary for a normal click.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/WEBKIT_FORCE_AT_MOUSE_DOWN
MouseEvent.which	A										<pre><code>var buttonPressed = instanceOfMouseEvent.which\n</code></pre>The MouseEvent.which read-only property indicates which button was pressed on the mouse to trigger the event. The standard alternatives to this property are MouseEvent.button and MouseEvent.buttons.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which
MouseEvent.x	A										The MouseEvent.x property is an alias for the MouseEvent.clientX property.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/x
MouseEvent.y	A										The MouseEvent.y property is an alias for the MouseEvent.clientY property.	https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/y
MouseScrollEvent	A										The MouseScrollEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.	https://developer.mozilla.org/en-US/docs/Web/API/MouseScrollEvent
MouseWheelEvent	A										The MouseWheelEvent interface represents events that occur due to the user turning a mouse wheel.	https://developer.mozilla.org/en-US/docs/Web/API/MouseWheelEvent
MSGestureEvent	A										The MSGestureEvent is a proprietary interface specific to Internet Explorer and Microsoft Edge which represents events that occur due to touch gestures. Events using this interface include MSGestureStart, MSGestureEnd, MSGestureTap, MSGestureHold, MSGestureChange, and MSInertiaStart.	https://developer.mozilla.org/en-US/docs/Web/API/MSGestureEvent
MutationEvent	A										Provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes.	https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent
MutationObserver	A										MutationObserver provides developers a way to react to changes in a DOM. It is designed as a replacement for Mutation Events defined in the DOM3 Events specification.	https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver
MutationRecord	A										A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver 's callback.	https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord
NamedNodeMap	A										The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.	https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap
NamedNodeMap.getNamedItem()	A										<pre><code>myAttr = attrs.getNamedItem(name)</code></pre>The NamedNodeMap.getNamedItem() method returns the Attr corresponding to the given name, or null if there is no corresponding attribute.	https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/getNamedItem
Navigation Timing API	A										The Navigation Timing API provides data that can be used to measure the performance of a website. Unlike other JavaScript-based mechanisms that have been used for the same purpose, this API can provide end-to-end latency data that can be more useful and accurate.	https://developer.mozilla.org/en-US/docs/Web/API/Navigation_timing_API
Using Navigation Timing	A										This page has no content. Enrich MDN by contributing.	https://developer.mozilla.org/en-US/docs/Web/API/Navigation_timing_API/Using_Navigation_Timing
Navigator	A										The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator
Navigator.activeVRDisplays	A										<pre><code>var myActiveDisplays = navigator.activeVRDisplays;</code></pre>The activeVRDisplays read-only property of the Navigator interface returns an array containing every VRDisplay object that is currently presenting (VRDisplay.ispresenting is true).	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/activeVRDisplays
Navigator.addIdleObserver()	A										<pre><code>navigator.addIdleObserver(IdleObserver);</code></pre>This method is used to add an observer that will check if the user is idle and will act accordingly. Once an observer is added, it can be removed with Navigator.removeIdleObserver.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/addIdleObserver
Navigator.buildID	A										<pre><code>buildID = navigator.buildID;\n</code></pre>Returns the build identifier of the browser.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/buildID
Navigator.connection	A										<pre><code>connectionInfo = navigator.connection</code></pre>The Navigator.connection read-only property represents a NetworkInformation containing information about the system's connection, such as the current bandwidth of the user's device or whether the connection is metered. This could be used to select high definition content or low definition content based on the user's connection.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection
Navigator.cookieEnabled	A										<pre><code>var cookieEnabled = navigator.cookieEnabled;\n</code></pre>Returns a Boolean value indicating whether cookies are enabled or not (read-only).	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled
credentials	A										<pre><code>var credentialsContainer = Navigator.credentials</code></pre>The credentials property of the Navigator interface returns the CredentialsContainer interface which exposes methods to request credentials and notify the user agent when interesting events occur, such as successful sign in or sign out. This interface can be used for feature detection.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/credentials
Navigator.doNotTrack	A										<pre><code>dnt = navigator.doNotTrack;\n</code></pre>Returns the user's do-not-track setting. This is "1" if the user has requested not to be tracked by web sites, content, or advertising.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/doNotTrack
Navigator.geolocation	A										<pre><code>geo = navigator.geolocation\n</code></pre>The Navigator.geolocation read-only property returns a Geolocation object that gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/geolocation
Navigator.getBattery()	A										<pre><code>var batteryPromise = navigator.getBattery();</code></pre>The getBattery() method provides information about the system's battery, returns a battery promise, which is resolved in a BatteryManager object providing also some new events you can handle to monitor the battery status.. This implements the Battery Status API ; see that documentation for additional details, a guide to using the API, and sample code.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery
Navigator.getGamepads()	A										<pre><code> var arrayGP = navigator.getGamepads();</code></pre>The Navigator.getGamepads() method returns an array: the first value is null, and the others are all Gamepad objects, one for each gamepad connected to the device. So if no gamepads are connected, the method will just return null.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads
Navigator.getUserMedia()	A										<pre><code>navigator.getUserMedia(constraints, successCallback, errorCallback);</code></pre>The Navigator.getUserMedia() method prompts the user for permission to use 0 or 1 video and 0 or 1 audio input device such as a camera, a shared screen, or a microphone. If the user provides permission, then the successCallback is invoked with the resulting MediaStream object as its argument. If the user denies permission or media is not available, then the errorCallback is called with PermissionDeniedError or NotFoundError respectively. Note that it is possible for neither completion callback to be called, as the user is not required to make a choice.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia
Navigator.getVRDisplays()	A										<pre><code>navigator.getVRDisplays().then(function(displays) {\n  // Do something with the available VR displays\n});</code></pre>The getVRDisplays() method of the Navigator interface returns a promise that resolves to an array of VRDisplay objects representing any available VR devices connected to the computer.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getVRDisplays
Navigator.id	A										<pre><code>var id = navigator.id</code></pre>The BrowserID protocol defines a new id property on the window.navigator object, through which it exposes the BrowserID API, that is the IdentityManager intreface. This API has gone through several significant revisions. Each generation is listed separately below.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/id
cebutaxidriver	A										Cebu food droid	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/id/cebutaxidriver
Navigator.maxTouchPoints	A										<pre><code>touchPoints = navigator.maxTouchPoints;\n</code></pre>Return the maximum number of simultaneous touch contact points are supported by the current device.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints
Navigator.mediaDevices	A										<pre><code>var mediaDevices = navigator.mediaDevices;\n</code></pre>The Navigator.mediaDevices read-only property returns a MediaDevices object, which provides access to connected media input devices like cameras and microphones, as well as screensharing.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices
Navigator.mozBluetooth	A										<pre><code>var bluetooth = window.navigator.mozBluetooth;\n</code></pre>Returns a BluetoothManager object you can use to get a BluetoothAdapter object.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozBluetooth
Navigator.mozCameras	A										<pre><code>var cameraManager = window.navigator.mozCameras;\n</code></pre>Returns a CameraManager object you can use to access the cameras available on the user's device.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozCameras
Navigator.mozL10n	A										<pre><code>var l10n = navigator.mozL10n;\n</code></pre>navigator.mozL10n returns an L10n object you can use to access localization resources and respond to localization events.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozL10n
Navigator.mozNotification	A										Provides support for creating notification objects, which are used to display desktop notification alerts to the user. Currently, these are only supported on Firefox Mobile and Firefox OS. See Displaying notifications for an example.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozNotification
Navigator.mozPermissionSettings	A										<pre><code>var permissions = window.navigator.mozPermissionSettings;\n</code></pre>Returns a PermissionSettings object you can use to get and set permissions of apps on the Firefox OS platform.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozPermissionSettings
Navigator.mozTime	A										<pre><code>var time = window.navigator.mozTime;\n</code></pre>Returns a MozTimeManager object you can use to change the device's time.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozTime
Navigator.mozVoicemail	A										<pre><code>var voicemail = window.navigator.mozVoicemail;\n</code></pre>Returns a MozVoicemail object you can use to handle the access to the voicemail functionality from the RIL of a Firefox OS phone.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozVoicemail
Navigator.oscpu	A										<pre><code>oscpuInfo = window.navigator.oscpu \n</code></pre>Returns a string that identifies the current operating system.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/oscpu
Navigator.permissions	A										<pre><code>permissionsObj = globalObj.navigator.permissions\n</code></pre>The Navigator.permissions read-only property returns a Permissions object that can be used to query and update permission status of APIs covered by the Permissions API.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/permissions
Navigator.productSub	A										<pre><code>prodSub = window.navigator.productSub</code></pre>The Navigator.productSub read-only property returns the build number of the current browser.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/productSub
Navigator.push	A										<pre><code>var push = window.navigator.push;\n</code></pre>The Navigator.push read-only property is a PushManager object providing a way to receive notifications from third party servers. These are real-time notifications provided by external services directly to installed apps. This implements the SimplePush API that does not require sending real data on those notifications. Also, you can see this documentation for additional details, a guide to using the API, and sample code.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/push
Navigator.registerContentHandler()	A										<pre><code>navigator.registerContentHandler(mimeType, uri, title);</code></pre>Allows web sites to register themselves as possible handlers for content of a particular MIME type.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerContentHandler
Navigator.registerProtocolHandler()	A										<pre><code>window.navigator.registerProtocolHandler(protocol, url, title);\n</code></pre>Allows web sites to register themselves as possible handlers for particular protocols.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler
Navigator.requestMediaKeySystemAccess()	A										<pre><code>&#8203;Navigator.requestMediaKeySystemAccess(keySystem, supportedConfigurations).then(function(mediaKeySystemAccess) { ... });</code></pre>The Navigator.requestMediaKeySystemAccess() method returns a Promise for a MediaKeySystemAccess object.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess
Navigator.requestWakeLock()	A										<pre><code>lock = window.navigator.requestWakeLock(resourceName);</code></pre>This Navigator.requestWakeLock() method of the Wake Lock API is used to request a MozWakeLock on any resource of the device. This means that you can prevent that resource from becoming unavailable as long as your app holds a lock for that resource. For example, a voice recording app can obtain a lock to keep the screen on during recording so that it can give prover visual feedback to the user that recording is progressing.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestWakeLock
Navigator.sendBeacon()	A										<pre><code>navigator.sendBeacon(url, data);\n</code></pre>The navigator.sendBeacon() method can be used to asynchronously transfer a small amount of data over HTTP to a web server.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon
Navigator.serviceWorker	A										<pre><code>var workerContainerInstance = navigator.serviceWorker;\n</code></pre>The Navigator.serviceWorker read-only property returns the ServiceWorkerContainer object for the associated document, which provides access to registration, removal, upgrade, and communication with the ServiceWorker.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/serviceWorker
Navigator.vendor	A										<pre><code>venString = window.navigator.vendor \n</code></pre>Returns the name of the browser vendor for the current browser.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendor
Navigator.vendorSub	A										<pre><code>venSub = window.navigator.vendorSub \n</code></pre>The Navigator.vendorSub read-only property is the substring of the vendor having to do with the vendor version number.  The specification allows browsers to always return the empty string, so don't rely on this property to get a reliable answer.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendorSub
Navigator.vibrate()	A										<pre><code>var successBool = window.navigator.vibrate(pattern);\n</code></pre>The Navigator.vibrate() method pulses the vibration hardware on the device, if such hardware exists. If the device doesn't support vibration, this method has no effect. If a vibration pattern is already in progress when this method is called, the previous pattern is halted and the new one begins instead.	https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate
NavigatorConcurrentHardware	A										The NavigatorConcurrentHardware mixin adds to the Navigator interface features which allow Web content to determine how many logical processors the user has available, in order to let content and Web apps optimize their operations to best take advantage of the user's CPU.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware
NavigatorConcurrentHardware.hardwareConcurrency	A										<pre><code>logicalProcessors = window.navigator.hardwareConcurrency\n</code></pre>The NavigatorConcurrentHardware.hardwareConcurrency read-only property returns the number of logical processors available to run threads on the user's computer.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency
NavigatorGeolocation	A										NavigatorGeolocation contains a creation method allowing objects implementing it to obtain a Geolocation instance.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorGeolocation
NavigatorID	A										The NavigatorID interface contains methods and properties related to the identity of the browser.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID
NavigatorID.appCodeName	A										<pre><code>codeName = window.navigator.appCodeName \n</code></pre>The NavigatorID.appCodeName always returns 'Mozilla', on any browser. This property is kept only for compatibility purposes.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName
NavigatorID.appName	A										<pre><code>appName = window.navigator.appName \n</code></pre>The NavigatorID.appName property returns the name of the browser. The HTML5 specification also allows any browser to return " Netscape " here, for compatibility reasons.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName
NavigatorID.appVersion	A										<pre><code>window.navigator.appVersion \n</code></pre>Returns the version of the browser as a string. It may be either a plain version number, like "5.0", or a version number followed by more detailed information. The HTML5 specification also allows any browser to return " 4.0 ", for compatibility reasons.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion
NavigatorID.platform	A										<pre><code>platform = navigator.platform \n</code></pre>Returns a string representing the platform of the browser. The specification allows browsers to always return the empty string, so don't rely on this property to get a reliable answer.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform
NavigatorID.product	A										<pre><code>productName = window.navigator.product \n</code></pre>The NavigatorID.product property returns the product name of the current browser.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product
NavigatorID.taintEnabled()	A										<pre><code>result = window.navigator.taintEnabled()\n</code></pre>The NavigatorID.taintEnabled() method always returns false.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled
NavigatorID.userAgent	A										<pre><code>var ua = window.navigator.userAgent;\n</code></pre>The NavigatorID.userAgent read-only property returns the user agent string for the current browser.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent
NavigatorLanguage	A										NavigatorLanguage contains methods and properties related to the language of the navigator.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage
NavigatorLanguage.language	A										<pre><code>lang = globalObj.navigator.language \n</code></pre>The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language
NavigatorLanguage.languages	A										<pre><code>preferredLanguages = globalObj.navigator.languages\n</code></pre>The NavigatorLanguage.languages read-only property returns an array of DOMString s representing the user's preferred languages. The language is described using BCP 47 language tags. In the returned array they are ordered by preference with the most preferred language first.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages
NavigatorOnLine	A										The NavigatorOnLine interface contains methods and properties related to the connectivity status of the browser.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine
NavigatorOnLine.onLine	A										<pre><code>online = window.navigator.onLine;\n</code></pre>Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine
NavigatorPlugins	A										The NavigatorPlugins interface contains methods and properties related to the plugins installed in the browser.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins
NavigatorPlugins.javaEnabled()	A										<pre><code>result = window.navigator.javaEnabled()\n</code></pre>This method indicates whether the current browser is Java-enabled or not.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/javaEnabled
NavigatorPlugins.mimeTypes	A										<pre><code>mimeTypes = navigator.mimeTypes; \n</code></pre>Returns a MimeTypeArray object, which contains a list of MimeType objects representing the MIME types recognized by the browser.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/mimeTypes
NavigatorPlugins.plugins	A										<pre><code>var plugins = navigator.plugins;\n</code></pre>Returns a PluginArray object, listing the plugins installed in the application.	https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/plugins
NetworkInformation	A										The NetworkInformation interface provides information about the connection a device is using to commuinicate with the network and provides a means for scripts to be notified if the connection type changes. The NetworkInformation interfaces cannot be instantiated. It is instead accessed through the connection property of the Navigator interface.	https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation
NetworkInformation.downlinkMax	A										<pre><code>var max = NetworkInformation.downlinkMax</code></pre>The NetworkInformation.downlinkMax read-only property returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.	https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlinkMax
NetworkInformation.onchange	A										<pre><code>netInfo.onchange = function() { ... }\n</code></pre>The NetworkInformation.onchange event handler contains the code that is fired when connection information changes, and the change is received by the NetworkInformation object.	https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/onchange
NetworkInformation.ontypechange	A										<pre><code>networkinformation.ontypechange = function;\n</code></pre>The NetworkInformation.ontypechange event handler is a property containing the code to execute when the typechange event, of type Event, is received by this NetworkInformation instance. That event is sent by the browser to let content know that the value of the NetworkInformation.type attribute has changed.	https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/ontypechange
NetworkInformation.type	A										<pre><code>var type = netInfo.type</code></pre>The NetworkInformation.type read-only property returns the type of connection a device is using to communicate with the network.	https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/type
Network Information API	A										The Network Information API provides information about the system's connection, which is in term of general connection type (e.g., 'wifi', 'cellular', etc.). This can be used to select high definition content or low definition content based on the user's connection. The entire API consists of the addition of the NetworkInformation interface and a single property to the Navigator interface: Navigator.connection.	https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API
Node	A										A Node is an interface from which a number of DOM types inherit, and allows these various types to be treated (or tested) similarly.	https://developer.mozilla.org/en-US/docs/Web/API/Node
Node.appendChild()	A										<pre><code>var aChild = element.appendChild(aChild);</code></pre>The Node.appendChild() method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).	https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild
Node.baseURI	A										<pre><code>var baseURI = node.baseURI;\n</code></pre>The Node.baseURI read-only property returns the absolute base URL of a node.	https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI
Node.baseURIObject	A										<pre><code>uriObj = node.baseURIObject\n</code></pre>The Node.baseURIObject property returns the nsIURI representing the node's (typically a document or an element) base URL. It's similar to Node.baseURI, except it returns an nsIURI instead of a string.	https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURIObject
Node.childNodes	A										<pre><code>var ndList = elementNodeReference.childNodes; \n</code></pre>The Node.childNodes read-only property returns a live collection of child nodes of the given element.	https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes
Node.cloneNode()	A										<pre><code>var dupNode = node.cloneNode(deep);\n</code></pre>The Node.cloneNode() method returns a duplicate of the node on which this method was called.	https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode
Node.compareDocumentPosition()	A										<pre><code>node.compareDocumentPosition( otherNode ) \n</code></pre>The Node.compareDocumentPosition() method compares the position of the current node against another node in any other document.	https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
Node.contains()	A										<pre><code>node.contains( otherNode ) \n</code></pre>The Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node or not.	https://developer.mozilla.org/en-US/docs/Web/API/Node/contains
Node.firstChild	A										<pre><code>var childNode = node.firstChild;\n</code></pre>The Node.firstChild read-only property returns the node's first child in the tree, or null if the node is childless. If the node is a Document, it returns the first node in the list of its direct children.	https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild
Node.hasChildNodes()	A										<pre><code>node.hasChildNodes()</code></pre>The Node.hasChildNodes() method returns a Boolean value indicating whether the current Node has child nodes or not.	https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes
Node.innerText	A										Node.innerText is a nonstandard property that represents the text content of a node and its descendants. As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied to the clipboard.	https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText
Node.insertBefore()	A										<pre><code>var insertedNode = parentNode.insertBefore(newNode, referenceNode);\n</code></pre>The Node.insertBefore() method inserts the specified node before the reference node as a child of the current node.	https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
Node.isDefaultNamespace()	A										<pre><code>result = node.isDefaultNamespace(namespaceURI) \n</code></pre>The Node.isDefaultNamespace() method accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not.	https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace
Node.isEqualNode()	A										<pre><code>var isEqualNode = node.isEqualNode(otherNode);\n</code></pre>The Node.isEqualNode() method tests whether two nodes are equal. Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on. The specific set of data points that much match varies depending on the types of the nodes.	https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode
Node.isSameNode()	A										<pre><code>var isSameNode = node.isSameNode(other);\n</code></pre>The Node.isSameNode() method tests whether two nodes are the same, that is if they reference the same object.	https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode
Node.lastChild	A										<pre><code>var last_child = element.lastChild\n</code></pre>The Node.lastChild read-only property returns the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.	https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild
Node.lookupNamespaceURI()	A										The Node.lookupNamespaceURI() method takes a prefix and returns the namespace URI associated with it on the given node if found (and null if not). Supplying null for the prefix will return the default namespace.	https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI
Node.lookupPrefix()	A										The Node.lookupPrefix() method returns a DOMString containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the result is implementation-dependent.	https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix
Node.nextSibling	A										<pre><code>nextNode = node.nextSibling\n</code></pre>The Node.nextSibling read-only property returns the node immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.	https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling
Node.nodeName	A										<pre><code>var str = node.nodeName;\n</code></pre>The Node.nodeName read-only property returns the name of the current node as a string.	https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName
Node.nodeType	A										<pre><code>var type = node.nodeType;\n</code></pre>The read-only Node.nodeType property that represents the type of the node.	https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
Node.nodeValue	A										<pre><code>value = node.nodeValue;\n</code></pre>The Node.nodeValue property returns or sets the value of the current node.	https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue
Node.normalize()	A										<pre><code>element.normalize();\n</code></pre>The Node.normalize() method puts the specified node and all of its sub-tree into a "normalized" form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.	https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize
Node.outerText	A										See HTMLElement.outerText	https://developer.mozilla.org/en-US/docs/Web/API/Node/outerText
Node.ownerDocument	A										<pre><code>document = element.ownerDocument\n</code></pre>The Node.ownerDocument read-only property returns the top-level document object for this node.	https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument
Node.parentElement	A										<pre><code>parentElement = node.parentElement</code></pre>The Node.parentElement read-only property returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element.	https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement
Node.parentNode	A										<pre><code>parentNode = node.parentNode\n</code></pre>The Node.parentNode read-only property returns the parent of the specified node in the DOM tree.	https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode
Node.previousSibling	A										<pre><code>previousNode = node.previousSibling;\n</code></pre>The Node.previousSibling read-only property returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list.	https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling
Node.removeChild()	A										<pre><code>var oldChild = node.removeChild(child);\nOR\nelement.removeChild(child);\n</code></pre>The Node.removeChild() method removes a child node from the DOM. Returns removed node.	https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild
Node.replaceChild()	A										<pre><code>replacedNode = parentNode.replaceChild(newChild, oldChild);\n</code></pre>The Node.replaceChild() method replaces one child node of the specified node with another.	https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild
Node.rootNode	A										<pre><code>rootNode = node.rootNode;\n</code></pre>The Node.rootNode read-only property returns a Node object representing the topmost node in the tree, or the current node if it's the topmost node in the tree. This is found by walking backward along Node.parentNode until the top is reached.	https://developer.mozilla.org/en-US/docs/Web/API/Node/rootNode
Node.textContent	A										<pre><code>var text = element.textContent;\nelement.textContent = "this is some sample text";\n</code></pre>The Node.textContent property represents the text content of a node and its descendants.	https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent
NodeFilter	A										A NodeFilter interface represents an object used to filter the nodes in a NodeIterator or TreeWalker. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.	https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter
NodeFilter.acceptNode()	A										<pre><code>result = nodeFilter.acceptNode(node)\n</code></pre>The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:	https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter/acceptNode
NodeIterator	A										The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.	https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator
NodeIterator.expandEntityReferences	A										<pre><code>expand = nodeIterator.expandEntityReferences;\n</code></pre>The NodeIterator.expandEntityReferences read-only property returns a Boolean flag indicating whether or not the children of entity reference nodes are visible to the NodeIterator.	https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/expandEntityReferences
NodeIterator.filter	A										<pre><code>nodeFilter = nodeIterator.filter;\n</code></pre>The NodeIterator.filter read-only method returns a NodeFilter object, that is an object implement an acceptNode(node) method, used to screen nodes.	https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter
NodeIterator.nextNode()	A										<pre><code>node = nodeIterator.nextNode();\n</code></pre>The NodeIterator.nextNode() method returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set.  The first call to nextNode() returns the first node in the set.	https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/nextNode
NodeIterator.pointerBeforeReferenceNode	A										<pre><code>flag = nodeIterator.pointerBeforeReferenceNode;\n</code></pre>The NodeIterator.pointerBeforeReferenceNode read-only property returns a Boolean flag that indicates whether the NodeFilter is anchored before (if this value is true) or after (if this value is false) the anchor node indicated by the NodeIterator.referenceNode property.	https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode
NodeIterator.previousNode()	A										<pre><code>node = nodeIterator.previousNode();\n</code></pre>The NodeIterator.previousNode() method returns the previous node in the set represented by the NodeIterator and moves the position of the iterator backwards within the set.	https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/previousNode
NodeIterator.referenceNode	A										<pre><code>node = nodeIterator.referenceNode;\n</code></pre>The NodeIterator.referenceNode read-only returns the Node to which the iterator is anchored; as new nodes are inserted, the iterator remains anchored to the reference node as specified by this property.	https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode
NodeIterator.root	A										<pre><code>root = nodeIterator.root;\n</code></pre>The NodeIterator.root read-only property represents the Node that is the root of what the NodeIterator traverses.	https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root
NodeIterator.whatToShow	A										<pre><code>var nodeTypes = nodeIterator.whatToShow;\n</code></pre>The NodeIterator.whatToShow read-only property represents an unsigned integer representing a bitmask signifying what types of nodes should be returned by the NodeIterator.	https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow
NodeList	A										NodeList objects are collections of nodes such as those returned by Node.childNodes and the document.querySelectorAll method.	https://developer.mozilla.org/en-US/docs/Web/API/NodeList
NodeList.item()	A										<pre><code>nodeItem = nodeList.item(index) \n</code></pre>Returns a node from a NodeList by index. This method doesn't throw exceptions as long as you provide arguments; a value of null is returned if the index is out of range and a TypeError is thrown if no argument is provided.	https://developer.mozilla.org/en-US/docs/Web/API/NodeList/item
NodeList.length	A										<pre><code>numItems =\nnodeList.length\n</code></pre>length returns the number of items in a NodeList.	https://developer.mozilla.org/en-US/docs/Web/API/NodeList/length
NonDocumentTypeChildNode	A										The NonDocumentTypeChildNode interface contains methods that are particular to Node objects that can have a parent, but not suitable for DocumentType.	https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode
NonDocumentTypeChildNode.nextElementSibling	A										<pre><code>var nextNode = elementNodeReference.nextElementSibling; </code></pre>The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.	https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling
NonDocumentTypeChildNode.previousElementSibling	A										<pre><code>prevNode = elementNodeReference.previousElementSibling; \n</code></pre>The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.	https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling
Notification	A										The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.	https://developer.mozilla.org/en-US/docs/Web/API/notification
Notification.actions	A										<pre><code>var actions[] = Notification.actions;</code></pre>The actions read-only property of the Notification interface returns the actions array of the notification as specified in the options parameter of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/actions
Notification.badge	A										<pre><code>var url = Notification.badge</code></pre>The badge property of the Notification interface returns the URL of the image used to represent the notification when there is not enough space to display the notification itself.	https://developer.mozilla.org/en-US/docs/Web/API/notification/badge
Notification.body	A										<pre><code>var body = Notification.body;\n</code></pre>The body read-only property of the Notification interface indicates the body string of the notification, as specified in the body option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/body
Notification.close()	A										<pre><code>Notification.close();</code></pre>The close() method of the Notification interface is used to close a previously displayed notification.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/close
Notification.data	A										<pre><code>var data = Notification.data;\n</code></pre>The data read-only property of the Notification interface returns a structured clone of the notification's data, as specified in the data option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/data
Notification.dir	A										<pre><code>var direction = Notification.dir;\n</code></pre>The dir read-only property of the Notification interface indicates the text direction of the notification, as specified in the dir option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/dir
Notification.icon	A										<pre><code>var icon = Notification.icon;\n</code></pre>The icon read-only property of the Notification interface contains the URL of an icon to be displayed as part of the notification, as specified in the icon option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/icon
Notification.lang	A										<pre><code>var language = Notification.lang;\n</code></pre>The lang read-only property of the Notification interface indicates the text direction of the notification, as specified in the lang option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/lang
Notification.noscreen	A										<pre><code>var noscreen = Notification.noscreen;\n</code></pre>The noscreen read-only property of the Notification interface specifies whether the notification firing should enable the device's screen or not, as specified in the noscreen option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/noscreen
Notification.Notification()	A										<pre><code>var myNotification = new Notification(title, options);</code></pre>The Notification() constructor creates a new Notification object instance.	https://developer.mozilla.org/en-US/docs/Web/API/notification/Notification
Notification.onclick	A										<pre><code>Notification.onclick = function(event) { ... };\n</code></pre>The onclick property of the Notification interface specifies an event listener to receive click events. These events occur when the user clicks on a displayed Notification.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclick
Notification.onclose	A										<pre><code>Notification.onclose = function() { ... };\n</code></pre>The onclose property of the Notification interface specifies an event listener to receive close events. These events occur when a Notification is closed.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclose
Notification.onerror	A										<pre><code>Notification.onerror = function() { ... };\n</code></pre>The onerror property of the Notification interface specifies an event listener to receive error events. These events occur when something goes wrong with a Notification (in many cases an error preventing the notification from being displayed.)	https://developer.mozilla.org/en-US/docs/Web/API/Notification/onerror
Notification.onshow	A										<pre><code>Notification.onshow = function() { ... };\n</code></pre>The onshow property of the Notification interface specifies an event listener to receive show events. These events occur when a Notification is displayed.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/onshow
Notification.permission	A										<pre><code>var permission = Notification.permission;</code></pre>The permission read-only property of the Notification interface indicates the current permission granted by the user for the current origin to display web notifications.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission
Notification.renotify	A										<pre><code>var renotify = Notification.renotify;\n</code></pre>The renotify read-only property of the Notification interface specifies whether the user should be notified after a new notification replaces an old one, as specified in the renotify option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/renotify
Notification.requestPermission()	A										<pre><code>Notification.requestPermission().then(function(permission) { ... });</code></pre>The requestPermission() method of the Notification interface requests permission from the user for the current origin to display notifications.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission
Notification.silent	A										<pre><code>var silent = Notification.silent;\n</code></pre>The silent read-only property of the Notification interface specifies whether the notification should be silent, i.e. no sounds or vibrations should be issued, regardless of the device settings. This is specified in the renotify option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/silent
Notification.sound	A										<pre><code>var sound = Notification.sound;\n</code></pre>The sound read-only property of the Notification interface specifies the URL of an audio file to be played when the notification fires. This is specified in the sound option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/sound
Notification.sticky	A										<pre><code>var sticky = Notification.sticky;\n</code></pre>The sticky read-only property of the Notification interface specifies whether the notification should be 'sticky' or not. When we say a notification is sticky, it means that notification is not easily clearable by the user. This is specified in the sticky option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/sticky
Notification.tag	A										<pre><code>var tag = Notification.tag;\n</code></pre>The tag read-only property of the Notification interface signifies an identifying tag for the notification, as specified in the tag option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/Notification/tag
timestamp	A										<pre><code>var timestamp = Notification.timestamp;</code></pre>The timestamp read-only property of the Notification interface returns a DOMTimeStamp, as specified in the timestamp option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/timestamp
Notification.title	A										<pre><code>var title = Notification.title;</code></pre>The title read-only property of the Notification interface indicates the title of the notification, as specified in the title parameter of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/title
Notification.vibrate	A										<pre><code>var vibrate = Notification.vibrate;\n</code></pre>The vibrate read-only property of the Notification interface specifies a a vibration pattern for the device's vibration hardware to emit when the notification fires. This is specified in the vibrate option of the Notification() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/notification/vibrate
NotificationEvent	A										The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.	https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent
NotificationEvent.action	A										Returns the string ID of the notification button the user clicked. This value returns undefined if the user clicked the notification somewhere other than an action button, or the notification does not have a button.	https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/action
NotificationEvent.notification	A										The notification read-only property of the NotificationEvent interface returns the Notification that was clicked to fire the event.	https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/notification
NotificationEvent.NotificationEvent()	A										<pre><code>var myNotificationEvent = new NotificationEvent(type, NotificationEventInit);</code></pre>The NotificationEvent() constructor creates a new NotificationEvent object.	https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/NotificationEvent
Notifications API	A										The Notifications API allows web pages to control the display of system notifications to the end user — these are outside the top-level browsing context viewport, so therefore can be displayed even the user has switched tabs or moved to a different app. The API is designed to be compatible with existing notification systems across different platforms.	https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API
Using the Notifications API	A										The Notifications API lets a web page or app send notifications that are displayed outside the page at the system level; this lets web apps send information to a user even if the application is idle or in the background. This article looks at the basics of using this API in your own apps.	https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API
OES_element_index_uint	A										The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().	https://developer.mozilla.org/en-US/docs/Web/API/OES_element_index_uint
OES_standard_derivatives	A										The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.	https://developer.mozilla.org/en-US/docs/Web/API/OES_standard_derivatives
OES_texture_float	A										The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.	https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float
OES_texture_float_linear	A										The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.	https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float_linear
OES_texture_half_float	A										The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.	https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float
OES_texture_half_float_linear	A										The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.	https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float_linear
OES_vertex_array_object	A										The OES_vertex_array_object extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.	https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object
OES_vertex_array_object.bindVertexArrayOES()	A										<pre><code>void ext.bindVertexArrayOES(arrayObject);\n</code></pre>The OES_vertex_array_object.bindVertexArrayOES() method of the WebGL API binds a passed WebGLVertexArrayObjectOES object to the buffer.	https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/bindVertexArrayOES
OES_vertex_array_object.createVertexArrayOES()	A										<pre><code>WebGLVertexArrayObjectOES ext.createVertexArrayOES();\n</code></pre>The OES_vertex_array_object.createVertexArrayOES() method of the WebGL API creates and initializes a WebGLVertexArrayObjectOES object that represents a vertex array object (VAO) pointing to vertex array data and which provides names for different sets of vertex data.	https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/createVertexArrayOES
OES_vertex_array_object.deleteVertexArrayOES()	A										<pre><code>void ext.deleteVertexArrayOES(arrayObject);\n</code></pre>The OES_vertex_array_object.deleteVertexArrayOES() method of the WebGL API deletes a given WebGLVertexArrayObjectOES object.	https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/deleteVertexArrayOES
OES_vertex_array_object.isVertexArrayOES()	A										<pre><code>GLBoolean ext.isVertexArrayOES(arrayObject);\n</code></pre>The OES_vertex_array_object.isVertexArrayOES() method of the WebGL API returns true if the passed object is a WebGLVertexArrayObjectOES object.	https://developer.mozilla.org/en-US/docs/Web/API/OES_vertex_array_object/isVertexArrayOES
OfflineAudioCompletionEvent	A										The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface.	https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent
OfflineAudioContext	A										The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNode s. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext
OfflineAudoContext.length	A										<pre><code>var length = OfflineAudioContext.length;</code></pre>The length property of the OfflineAudioContext interface returns an integer representing the size of the buffer in sample-frames.	https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/length
OfflineAudioContext.oncomplete	A										<pre><code>var offlineAudioCtx = new OfflineAudioContext();\nofflineAudioCtx.oncomplete = function() { ... }</code></pre>In this simple example, we declare both an AudioContext and an OfflineAudioContext object. We use the AudioContext to load an audio track via XHR (AudioContext.decodeAudioData), then the OfflineAudioContext to render the audio into an AudioBufferSourceNode and play the track through. After the offline audio graph is set up, you need to render it to an AudioBuffer using OfflineAudioContext.startRendering.	https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete
OfflineAudioContext.resume()	A										<pre><code>OfflineAudioContext.resume().then(function() { ... });</code></pre>The resume() method of the OfflineAudioContext interface resumes the progression of time in an audio context that has been suspended. The promise resolves immediately because the OfflineAudioContext does not require the audio hardware. If the context is not currently suspended or the rendering has not started, the promise is rejected with InvalidStateError.	https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/resume
OfflineAudioContext.startRendering()	A										<pre><code>offlineAudioCtx.startRendering();\nofflineAudioCtx.oncomplete = function(e) {\n  // e.renderedBuffer contains the output buffer\n}</code></pre>The startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes.	https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering
OfflineAudioContext.startRendering (promise)	A										<pre><code>offlineAudioCtx.startRendering().then(function(renderedBuffer) {\n  // do something with the output buffer\n});</code></pre>The promise-based startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes.	https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering(promise)
suspend	A										<pre><code>OfflineAudioContext.suspend(suspendTime).then(function() { ... });</code></pre>The suspend() method of the OfflineAudioContext interface schedules a suspension of the time progression in the audio context at the specified time and returns a promise. This is generally useful at the time of manipulating the audio graph synchronously on OfflineAudioContext.	https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/suspend
OffscreenCanvas	A										The OffscreenCanvas interface provides a canvas that can be rendered off screen. It is available in both the window and worker contexts.	https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas
OffscreenCanvas.getContext()	A										<pre><code>offscreen.getContext(contextType, contextAttributes);\n</code></pre>The OffscreenCanvas.getContext() method returns a drawing context for an offscreen canvas, or null if the context identifier is not supported.	https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/getContext
OffscreenCanvas.height	A										<pre><code>var pxl = offscreen.height;\noffscreen.height = pxl;</code></pre>The height property returns and sets the height of an OffscreenCanvas object.	https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/height
OffscreenCanvas()	A										<pre><code>new OffscreenCanvas(width, height);\n</code></pre>The OffscreenCanvas() constructor returns a newly instantiated OffscreenCanvas object.	https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/OffscreenCanvas
OffscreenCanvas.toBlob()	A										<pre><code>Promise&lt;Blob&gt; OffscreenCanvas.toBlob(type, encoderOptions);</code></pre>The OffscreenCanvas.toBlob() method creates a Blob object representing the image contained in the canvas.	https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/toBlob
OffscreenCanvas.transferToImageBitmap()	A										<pre><code>ImageBitmap OffscreenCanvas.transferToImageBitmap()</code></pre>The OffscreenCanvas.transferToImageBitmap() method creates an ImageBitmap object from the most recently rendered image of the OffscreenCanvas.	https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap
OffscreenCanvas.width	A										<pre><code>var pxl = offscreen.width;\noffscreen.width = pxl;</code></pre>The width property returns and sets the width of an OffscreenCanvas object.	https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/width
OscillatorNode	A										The OscillatorNode interface represents a periodic waveform, like a sine wave. It is an AudioNode audio-processing module that causes a given frequency of sine wave to be created — in effect, a constant tone.	https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode
OscillatorNode.detune	A										<pre><code>var oscillator = audioCtx.createOscillator();\noscillator.detune.value = 100; // value in cents</code></pre>An a-rate AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/detune
OscillatorNode.frequency	A										<pre><code>var oscillator = audioCtx.createOscillator();\noscillator.frequency.value = 3000; // value in hertz</code></pre>An a-rate AudioParam.	https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency
OscillatorNode.onended	A										<pre><code>var oscillator = audioCtx.createOscillator();\noscillator.onended = function() { ... };</code></pre>The onended property of the OscillatorNode interface is used to set the event handler for the ended event, which fires when the tone has stopped playing.	https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/onended
OscillatorNode.setPeriodicWave()	A										<pre><code>var oscillator = audioCtx.createOscillator();\noscillator.setPeriodicWave(wave);</code></pre>The setPeriodicWave() method of the OscillatorNode interface is used to point to a PeriodicWave defining a periodic waveform that can be used to shape the oscillator's output, when type = "custom" is used.	https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/setPeriodicWave
OscillatorNode.start()	A										<pre><code>oscillator.start(when); // start playing oscillator in when seconds</code></pre>The following example shows basic usage of an AudioContext to create an oscillator node. For an applied example, check out our Violent Theremin demo (see app.js for relevant code).	https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/start
OscillatorNode.stop()	A										<pre><code>oscillator.stop(when); // stop playing oscillator at when</code></pre>The following example shows basic usage of an AudioContext to create an oscillator node. For an applied example, check out our Violent Theremin demo (see app.js for relevant code).	https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/stop
OscillatorNode.type	A										<pre><code>var oscillator = audioCtx.createOscillator();\noscillator.type = 'square';</code></pre>A DOMString specifying the shape of oscillator wave. The different available values are:	https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type
PageTransitionEvent	A										Page transition events fire when a webpage is being loaded or unloaded.	https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent
Page Visibility API	A										The Page Visibility API lets you know when a webpage is visible or in focus.	https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API
PannerNode	A										A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode
PannerNode.coneInnerAngle	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.coneInnerAngle = 360;</code></pre>A double.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle
PannerNode.coneOuterAngle	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.coneOuterAngle = 0;</code></pre>A double.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle
PannerNode.coneOuterGain	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.coneOuterGain = 0;</code></pre>A double.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain
PannerNode.distanceModel	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.distanceModel = 'inverse';</code></pre>A enum — see DistanceModelType.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel
PannerNode.maxDistance	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.maxDistance = 10000;</code></pre>A double.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance
PannerNode.orientationX	A										<pre><code>var orientationX = PannerNode.orientationX;\n\nPannerNode.orientationX.value = newOrientationX;\n</code></pre>An AudioParam whose value is the X component of the direction in which the audio source is facing, in 3D Cartesian coordinate space.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationX
PannerNode.orientationY	A										<pre><code>var orientationY = PannerNode.orientationY;\n\nPannerNode.orientationY.value = newOrientationY;\n</code></pre>An AudioParam whose value is the Y component of the direction the audio source is facing, in 3D Cartesian coordinate space.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationY
PannerNode.orientationZ	A										<pre><code>var orientationZ = PannerNode.orientationZ;\n\nPannerNode.orientationZ.value = newOrientationZ;\n</code></pre>An AudioParam whose value is the Z component of the direction the audio source is facing, in 3D Cartesian coordinate space.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationZ
PannerNode.panningModel	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.panningModel = 'HRTF';</code></pre>A enum — see PanningModelType.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel
PannerNode.positionX	A										<pre><code>var positionX = PannerNode.positionX;\n\nPannerNode.positionX.value = newPositionX;\n</code></pre>An AudioParam whose value is the X coordinate of the audio source's position, in 3D Cartesian coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionX
PannerNode.positionY	A										<pre><code>var positionY = PannerNode.positionY;\n\nPannerNode.positionY.value = newPositionY;\n</code></pre>An AudioParam whose value is the Y coordinate of the audio source's position, in 3D Cartesian coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionY
PannerNode.positionZ	A										<pre><code>var positionZ = PannerNode.positionZ;\n\nPannerNode.positionZ.value = newPositionZ;\n</code></pre>An AudioParam whose value is the Z coordinate of the audio source's position, in 3D Cartesian coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionZ
PannerNode.refDistance	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.refDistance = 1;</code></pre>A double.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance
PannerNode.rolloffFactor	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.rolloffFactor = 1;</code></pre>A double.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor
PannerNode.setOrientation()	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.setOrientation(1,0,0);</code></pre>Void.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setOrientation
PannerNode.setPosition()	A										<pre><code>var audioCtx = new AudioContext();\nvar panner = audioCtx.createPanner();\npanner.setPosition(0,0,0);</code></pre>Void.	https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setPosition
ParentNode	A										The ParentNode interface contains methods that are particular to Node objects that can have children.	https://developer.mozilla.org/en-US/docs/Web/API/ParentNode
ParentNode.append()	A										<pre><code>[Throws, Unscopable] \nvoid ParentNode.append((Node or DOMString)... nodes);\n</code></pre>The ParentNode.append method inserts a set of Node objects or DOMString objects after the last child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.	https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append
ParentNode.childElementCount	A										<pre><code>var elCount = elementNodeReference.childElementCount; \n</code></pre>The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.	https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount
ParentNode.children	A										<pre><code>var elList = elementNodeReference.children; </code></pre>Node.children is a read-only property that returns a live HTMLCollection of the child elements of Node.	https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children
ParentNode.firstElementChild	A										<pre><code>var childNode = elementNodeReference.firstElementChild; \n</code></pre>The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.	https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild
ParentNode.lastElementChild	A										<pre><code>var childNode = elementNodeReference.lastElementChild; </code></pre>The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.	https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild
ParentNode.prepend()	A										<pre><code>[Throws, Unscopable] \nvoid ParentNode.prepend((Node or DOMString)... nodes);\n</code></pre>The ParentNode.prepend method inserts a set of Node objects or DOMString objects before the first child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.	https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend
PasswordCredential	A										The interface of the the Credential Management API provides information about a username/password pair. In supporting browsers an instance of this class may be passed in the credential member of the init object for global fetch.	https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential
PasswordCredential.additionalData	A										<pre><code>passwordCredential.additionalData = formData\nformData = passwordCredential.additionalData\npasswordCredential.additionalData = urlSearchParams\nulrSearchParams&#160;= passwordCredential.additionalData\n</code></pre>The additionalData property of the PasswordCredential interface takes one of a FormData instance, a URLSearchParams instance, or null. The data in the objects will be added to the request body and sent to the remote endpoint with the credentials.	https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/additionalData
idName	A										<pre><code>var idName = PasswordCredential.idName\nPasswordCredential.idName = "userID"</code></pre>The idName property of the PasswordCredential interface returns a USVString representing the name that will be used for the ID field when submitting the current object to a remote endpoint via fetch. This property defaults to 'username', but may be overridden to match whatever the backend service expects.	https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/idName
PasswordCredential	A										<pre><code>var myCredential = new PasswordCredential(passwordCredentialData)\nvar myCredential = new PasswordCredential(HTMLFormElement)</code></pre>The PasswordCredential constructor creates a new PasswordCredential object. In supporting browsers an instance of this class may be passed in the credential member of the init object for global fetch.	https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/PasswordCredential
PasswordCredential.passwordName	A										<pre><code>var passwordName = PasswordCredential.passwordName\nPasswordCredential.passwordName = "passcode"</code></pre>The passwordName property of the PasswordCredential interface returns a USVString representing the name that will be used for the password field when submitting the current object to a remote endpoint via fetch. This property defaults to 'password', but may be overridden to match whatever the backend service expects.	https://developer.mozilla.org/en-US/docs/Web/API/PasswordCredential/passwordName
Path2D	A										The Path2D interface of the Canvas 2D API is used to declare paths that are then later used on CanvasRenderingContext2D objects. The path methods of the CanvasRenderingContext2D interface are present on this interface as well and are allowing you to create paths that you can retain and replay as required on a canvas.	https://developer.mozilla.org/en-US/docs/Web/API/Path2D
Path2D.addPath()	A										<pre><code>void path.addPath(path [, transform]);\n</code></pre>The Path2D.addPath() method of the Canvas 2D API adds to the path the path given by the argument.	https://developer.mozilla.org/en-US/docs/Web/API/Path2D/addPath
Path2D()	A										<pre><code>new Path2D();\nnew Path2D(path);\nnew Path2D(d);\n</code></pre>The Path2D() constructor returns a newly instantiated Path2D object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data.	https://developer.mozilla.org/en-US/docs/Web/API/Path2D/Path2D
PaymentAddress	A										The PaymentAddress interface of the the Payment Request API stores address information.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress
PaymentAddress.addressLine	A										<pre><code>var paymentAddressLines = PaymentAddress.addressLine;</code></pre>The addressLine read-only property of the PaymentAddress interface returns a string array containing specific parts of the address such as street name, house number, apartment number, rural delivery route, descriptive instructions, or post office box.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/addressLine
PaymentAddress.careOf	A										<pre><code>var paymentCareOf = PaymentAddress.careOf;</code></pre>The careOf read-only property of the PaymentAddress interface returns a string containing the name of an intermediary party or entity responsible for transferring packages between the postal service and the recipient.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/careOf
PaymentAddress.city	A										<pre><code>var paymentCity = PaymentAddress.city;</code></pre>The city read-only property of the PaymentAddress interface returns a string containing the city or town portion of the address.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/city
PaymentAddress.country	A										<pre><code>var paymentCountry = PaymentAddress.country;</code></pre>The country read-only property of the PaymentAddress interface returns a string containing the Common Locale Data Repository (CLDR) region code for the user's country, for example, US, GB, CN, JP, etc.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/country
PaymentAddress.dependentLocality	A										<pre><code>var paymentDependentLocality = PaymentAddress.dependentLocality;</code></pre>The dependentLocality read-only property of the PaymentAddress interface returns a string containing a sublocality designation within a city, for example, a neighborhood, borough, district, or UK dependent locality.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/dependentLocality
PaymentAddress.languageCode	A										<pre><code>var paymentLanguageCode = PaymentAddress.languageCode;</code></pre>The languageCode read-only property of the PaymentAddress interface returns a string containing the BCP-47 language code for the address, used to determine the field separators and the order of fields when formatting the address for display.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/languageCode
PaymentAddress.organization	A										<pre><code>var paymentOrganization = PaymentAddress.organization;</code></pre>The organization read-only property of the PaymentAddress interface returns a string containing the name of the organization, firm, company, or institution at the payment address.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/organization
PaymentAddress.country	A										<pre><code>var paymentCountry = PaymentAddress.country;</code></pre>The country read-only property of the PaymentAddress interface returns a string containing the Common Locale Data Repository (CLDR) region code for the user's country, for example, US, GB, CN, etc.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/PaymentAddress.country
PaymentAddress.phone	A										<pre><code>var paymentPhone = PaymentAddress.phone;</code></pre>The phone read-only property of the PaymentAddress interface returns a string containing the telephone number of the recipient or contact person.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/phone
PaymentAddress.postalCode	A										<pre><code>var paymentPostalCode = PaymentAddress.postalCode;</code></pre>The postalCode read-only property of the PaymentAddress interface returns a string containing a code used by a jurisdiction for mail routing, for example, the ZIP code in the United States or the PIN code in India.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/postalCode
PaymentAddress.recipient	A										<pre><code>var paymentRecipient = PaymentAddress.recipient;</code></pre>The recipient read-only property of the PaymentAddress interface returns a string containing the name of the recipient, purchaser, or contact person at the payment address.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/recipient
PaymentAddress.region	A										<pre><code>var paymentRegion = PaymentAddress.region;</code></pre>The region read-only property of the PaymentAddress interface returns a string containing a top level administrative subdivision of the country, for example, a state, province, oblast, or prefecture.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/region
PaymentAddress.sortingCode	A										<pre><code>var paymentSortingCode = PaymentAddress.sortingCode;</code></pre>The sortingCode read-only property of the PaymentAddress interface returns a string containing a postal sorting code such as is used in France.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentAddress/sortingCode
PaymentRequest	A										The PaymentRequest interface of the the Payment Request API manages the process of a user making a payment.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest
abort	A										<pre><code>PaymentRequest.abort();</code></pre>The PaymentRequest.abort() method of the PaymentRequest interface causes the user agent to end the payment request and to remove any user interface that might be shown.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/abort
PaymentRequest.onshippingaddresschange	A										The onshippingaddresschange event of the PaymentRequest interface is fired whenever the user changes their shipping address, including when an address is added by the user for the first time.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/onshippingaddresschange
PaymentRequest.onshippingoptionchange	A										The onshippingoptionchange event of the PaymentRequest interface is fired whenever the user changes a shipping option.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/onshippingoptionchange
PaymentRequest.PaymentRequest()	A										<pre><code>var paymentRequest = new PaymentRequest(methodData, details [, options]);</code></pre>The PaymentRequest() constructor creates a new PaymentRequest object.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/PaymentRequest
PaymentRequest.shippingAddress	A										<pre><code>var paymentAddress = PaymentRequest.shippingAddress;</code></pre>The shippingAddress read-only property of the PaymentRequest interface returns the shipping address provided by the user. It is null by default.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/shippingAddress
PaymentRequest.shippingOption	A										<pre><code>var shippingOption = PaymentRequest.shippingOption;</code></pre>The shippingOption read-only property of the PaymentRequest interface returns the shipping option selected by the user. It is null by default. This property is only populated if the constructor is called with the requestShipping flag set to true.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/shippingOption
PaymentRequest.show()	A										<pre><code>PaymentRequest.show()\n    .then( paymentResponse =&gt; { ... })\n    .catch( error =&gt; { ... })</code></pre>The PaymentRequest.show() method of the PaymentRequest interface causes the user agent to begin the user interaction for the payment request.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/show
PaymentResponse	A										The PaymentResponse interface of the the Payment Request API is returned after a user selects a payment method and approves a payment request.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse
PaymentResponse.complete()	A										<pre><code>PaymentRequest.complete([result])\n&#160;  .then(function() { ... } )\n&#160;  .catch( error =&gt; { ... } )</code></pre>The PaymentRequest.complete() method of the PaymentRequest API notifies the user agent that the user interaction is over, and causes any remaining user interface to be closed. This method must be called after the user accepts the payment request and the Promise returned by the PaymentRequest.show() method is resolved.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse/complete
PaymentResponse.details	A										<pre><code>var detailsObject = PaymentResponse.details;</code></pre>The details read-only property of the PaymentResponse interface returns a JSON-serializable object that provides a payment method specific message used by the merchant to process the transaction and determine a successful funds transfer. This data is returned by the payment app that satisfies the payment request.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse/details
PaymentResponse.methodName	A										<pre><code>var methodName = PaymentResponse.methodName;</code></pre>The methodName read-only property of the PaymentResponse interface returns the payment method identifier for the payment method that the user selected, for example, Visa, Mastercard, Paypal, etc.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse/methodName
PaymentResponse.payerEmail	A										<pre><code>var payerEmail = PaymentResponse.payerEmail;</code></pre>The payerEmail read-only property of the PaymentResponse interface returns the email address supplied by the user. This option is only present when the requestPayerEmail option is set to true in the PaymentOptions object passed to the PaymentRequest constructor.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse/payerEmail
PayerResponse.payerPhone	A										<pre><code>var payerPhone = PaymentResponse.payerPhone;</code></pre>The payerPhone read-only property of the PaymentResponse interface returns the phone number supplied by the user. This option is only present when the requestPayerPhone option is set to true in the PaymentOptions object passed to the PaymentRequest constructor.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse/payerPhone
PaymentRespoonse.shippingAddress	A										<pre><code>var paymentAddress = PaymentRequest.shippingAddress;</code></pre>The shippingAddress read-only property of the PaymentRequest interface returns a PaymentAddress object containing the shipping address provided by the user.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse/shippingAddress
PaymentResponse.shippingOption	A										<pre><code>var shippingOption = PaymentRequest.shippingOption;</code></pre>The shippingOption read-only property of the PaymentRequest interface returns the ID attribute of the shipping option selected by the user. This option is only present when the requestShipping option is set to true in the PaymentOptions object passed to the PaymentRequest constructor.	https://developer.mozilla.org/en-US/docs/Web/API/PaymentResponse/shippingOption
Payment Request API	A										Many problems related to online purchase abandonment can be traced to checkout forms, which are user-intensive, difficult to use, slow to load and refresh, and require multiple steps to complete. The Payment Request API is a system that is meant to eliminate checkout forms. It vastly improves user workflow during the purchase process, providing a more consistent user experience and enabling web merchants to easily leverage disparate payment methods.	https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API
Performance	A										The Performance interface represents timing-related performance information for the given page.	https://developer.mozilla.org/en-US/docs/Web/API/Performance
Performance.clearMarks()	A										<pre><code>performance.clearMarks();\nperformance.clearMarks(name);\n</code></pre>The clearMarks() method removes the named mark from the browser's performance entry buffer. If the method is called with no arguments, all performance entries with an entry type of " mark " will be removed from the performance entry buffer.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks
Performance.clearMeasures()	A										<pre><code>performance.clearMeasures();\nperformance.clearMeasures(name);\n</code></pre>The clearMeasures() method removes the named measure from the browser's performance entry buffer. If the method is called with no arguments, all performance entries with an entry type of " measure " will be removed from the performance entry buffer.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures
Performance.clearResourceTimings()	A										<pre><code>performance.clearResourceTimings();\n</code></pre>The clearResourceTimings() method removes all performance entries with an entryType of " resource " from the browser's performance data buffer and sets the size of the performance data buffer to zero. To set the size of the browser's performance data buffer, use the Performance.setResourceTimingBufferSize() method.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearResourceTimings
Performance.getEntries()	A										<pre><code>entries = window.performance.getEntries();\nentries = window.performance.getEntries(PerformanceEntryFilterOptions);\n</code></pre>The getEntries() method returns a list of PerformanceEntry objects for a given filter. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries
Performance.getEntriesByName()	A										<pre><code>entries = window.performance.getEntriesByName(name, type);\n</code></pre>The getEntriesByName() method returns a list of PerformanceEntry objects for the given name and type. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName
Performance.getEntriesByType()	A										<pre><code>entries = window.performance.getEntriesByType(type);\n</code></pre>The getEntriesByType() method returns a list of PerformanceEntry objects for a given type. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType
Performance.mark()	A										<pre><code>performance.mark(name);\n</code></pre>The mark() method creates a timestamp in the browser's performance entry buffer with the given name. The application defined timestamp can be retrieved by one of the Performance interface's getEntries*() methods (getEntries(), getEntriesByName() or getEntriesByType()).	https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark
Performance.measure()	A										<pre><code>performance.measure(name, startMark, endMark);\n</code></pre>The measure() method creates a named timestamp in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively). The named timestamp is referred to as a measure.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure
Performance.navigation	A										<pre><code>navObject = performance.navigation;</code></pre>The Performance.navigation read-only property returns a PerformanceNavigation object representing the type of navigation that occurs in the given browsing context, like the amount of redirections needed to fetch the resource.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/navigation
Performance.now()	A										<pre><code>t = performance.now();</code></pre>The Performance.now() method returns a DOMHighResTimeStamp, measured in milliseconds, accurate to one thousandth of a millisecond.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
Performance.onresourcetimingbufferfull	A										<pre><code>callback = performance.onresourcetimingbufferfull = buffer_full_cb;\n</code></pre>The onresourcetimingbufferfull property is an event handler that will be called when the resourcetimingbufferfull event is fired. This event is fired when the browser's resource timing performance buffer is full.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull
Performance.setResourceTimingBufferSize()	A										<pre><code>performance.setResourceTimingBufferSize(maxSize);\n</code></pre>The setResourceTimingBufferSize() method sets the browser's resource timing buffer size to the specified number of " resource " performance entry type objects.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize
Performance.timing	A										<pre><code>timingInfo = performance.timing;</code></pre>The Performance.timing read-only property returns a PerformanceTiming object containing latency-related performance information.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing
Performance.toJSON()	A										<pre><code>myPerf = performance.toJSON()\n</code></pre>The toJSON() method of the Performance interface is a standard serializer: it returns a JSON representation of the performance object's properties.	https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON
PerformanceEntry	A										The PerformanceEntry object encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry
PerformanceEntry.duration	A										<pre><code>entry.duration;</code></pre>The duration property returns a timestamp that is the duration of the performance entry.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration
PerformanceEntry.entryType	A										<pre><code>entry.entryType;</code></pre>The entryType property returns the performance entry's type. The valid entryType values are:	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType
PerformanceEntry.name	A										<pre><code>entry.name;\n</code></pre>The name property returns the name given to a performance entry when the entry was created (for example by calling performance.mark()).	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name
PerformanceEntry.startTime	A										<pre><code>entry.startTime;</code></pre>The startTime property returns the first recorded timestamp of the performance entry.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime
PerformanceEntry.toJSON()	A										<pre><code>json = perfEntry.toJSON();\n</code></pre>The toJSON() method is a serializer ; it returns a JSON representation of the performance entry object.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/toJSON
PerformanceFrameTiming	A										The PerformanceFrameTiming interface provides frame timing data about the browser's event loop. A frame represents the amount of work a browser does in one event loop such as processing DOM events, resizing, scrolling, rendering, CSS animations, etc. A frame rate of 60fps (frames per second) for a 60Hz refresh rate is the target for a good responsive user experience. This means the browser should process a frame in about 16.7ms.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceFrameTiming
PerformanceMark	A										PerformanceMark is an abstract interface for performance entries with an entry type of " mark ". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMark
PerformanceMeasure	A										PerformanceMeasure is an abstract interface for performance entries with an entry type of " measure ". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceMeasure
PerformanceNavigation	A										The PerformanceNavigation interface represents information about how the navigation to the current document was done.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation
PerformanceNavigation.redirectCount	A										<pre><code>amount = performanceNavigation.redirectCount;</code></pre>The PerformanceNavigation.redirectCount read-only property returns an unsigned short representing the number of REDIRECTs done before reaching the page.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation/redirectCount
PerformanceNavigation.type	A										<pre><code>type = performanceNavigation.type;</code></pre>The PerformanceNavigation.type read-only property returns an unsigned short containing a constant describing how the navigation to this page was done. Possible values are:	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigation/type
PerformanceNavigationTiming	A										The PerformanceNavigationTiming interface provides methods and properties to store and retrieve high resolution timestamps or metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming
PerformanceNavigationTiming.domComplete	A										<pre><code>perfEntry.domComplete;\n</code></pre>The domComplete property returns a timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to complete.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/domComplete
PerformanceNavigationTiming.domContentLoadedEventEnd	A										<pre><code>perfEntry.domContentLoadedEventEnd;\n</code></pre>The domContentLoadedEventEnd property returns a timestamp representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventEnd
PerformanceNavigationTiming.domContentLoadedEventStart	A										<pre><code>perfEntry.domContentLoadedEventStart;\n</code></pre>The domContentLoadedEventStart property returns a timestamp representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventStart
PerformanceNavigationTiming.domInteractive	A										<pre><code>perfEntry.domInteractive;\n</code></pre>The domInteractive property returns a timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/domInteractive
PerformanceNavigationTiming.loadEventEnd	A										<pre><code>perfEntry.loadEventEnd;\n</code></pre>The loadEventEnd property returns a timestamp which is equal to the time when the load event of the current document is completed.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/loadEventEnd
PerformanceNavigationTiming.loadEventStart	A										<pre><code>perfEntry.loadEventStart;\n</code></pre>The loadEventStart property returns a timestamp representing the time value equal to the time immediately before the load event of the current document is fired.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/loadEventStart
PerformanceNavigationTiming.redirectCount	A										<pre><code>perfEntry.redirectCount;\n</code></pre>The redirectCount property returns a timestamp representing the number of redirects since the last non-redirect navigation under the current browsing context.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/redirectCount
PerformanceNavigationTiming.toJSON()	A										<pre><code>json = resourcePerfEntry.toJSON();\n</code></pre>The toJSON() method is a serializer - it returns a JSON representation of the PerformanceNavigationTiming object.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/toJSON
PerformanceNavigationTiming.type	A										<pre><code>perfEntry.type;\n</code></pre>The type property returns a string representing the type of navigation. The value must be one of the following:	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/type
PerformanceNavigationTiming.unloadEventEnd	A										<pre><code>perfEntry.unloadEventEnd;\n</code></pre>The unloadEventEnd property returns a timestamp representing the time value equal to the time immediately after the user agent finishes the unload event of the previous document. If there is no previous document, this property value is 0.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/unloadEventEnd
PerformanceNavigationTiming.unloadEventStart	A										<pre><code>perfEntry.unloadEventStart;\n</code></pre>The unloadEventStart property returns a timestamp representing the time value equal to the time immediately before the user agent starts the unload event of the previous document. If there is no previous document, this property returns 0.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming/unloadEventStart
PerformanceObserver	A										The PerformanceObserver interface is used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver
PeformanceObserver.disconnect()	A										<pre><code>observer.disconnect();\n</code></pre>The disconnect() method of the PerformanceObserver interface is used to stop the performance observer from receiving any performance entry events.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/disconnect
PerformanceObserver.observe()	A										<pre><code>observer.observe(options);\n</code></pre>The observe() method of the PerformanceObserver interface is used to specify the set of performance interface types to observe. The performance observer's callback function will be invoked when a performance entry is recorded for one of the specified types.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/observe
PerformanceObserver()	A										<pre><code>var observer = new PerformanceObserver(callback);\n</code></pre>The PerformanceObserver() constructor creates a new PerformanceObserver object with the given observer callback. The observer callback is invoked when performance entry events are recorded for the entry types that have been registered, via the observe() method.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/PerformanceObserver
PerformanceObserverEntryList	A										The PerformanceObserverEntryList interface is a list of peformance events that were explicitly observed via the observe() method.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList
PerformanceObserverEntryList.getEntries()	A										<pre><code>entries = list.getEntries();\nentries = list.getEntries(PerformanceEntryFilterOptions);\n</code></pre>The getEntries() method of the PerformanceObserverEntryList interface returns a list of explicitly observed performance entry objects for a given filter. The list's members are determined by the set of entry types specified in the call to the observe() method. The list is available in the observer's callback function (as the first parameter in the callback).	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntries
PerformanceObserverEntryList.getEntriesByName()	A										<pre><code>entries = list.getEntriesByName(name, type);\n</code></pre>The getEntriesByName() method of the PerformanceObserverEntryList interface returns a list of explicitly observed performance entry objects for a given name and entry type. The list's members are determined by the set of entry types specified in the call to the observe() method. The list is available in the observer's callback function (as the first parameter in the callback).	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByName
PerformanceObserverEntryList.getEntriesByType()	A										<pre><code>entries = list.getEntriesByType(type);\n</code></pre>The getEntriesByType() method of the PerformanceObserverEntryList returns a list of explicitly observed performance entry objects for a given performance entry type. The list's members are determined by the set of entry types specified in the call to the observe() method. The list is available in the observer's callback function (as the first parameter in the callback).	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserverEntryList/getEntriesByType
PerformanceResourceTiming	A										The PerformanceResourceTiming interface enables retrieving and analyzing detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, SVG, image, or script.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming
PerformanceResourceTiming.connectEnd	A										<pre><code>resource.connectEnd;\n</code></pre>The connectEnd property returns the timestamp immediately after the browser finishes establishing the connection to the server to retrieve the resource. The timestamp value includes the time interval to establish the transport connection, as well as other time intervals such as SSL handshake and SOCKS authentication.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectEnd
PerformanceResourceTiming.connectStart	A										<pre><code>resource.connectStart;\n</code></pre>The connectStart property returns the timestamp immediately before the user agent starts establishing the connection to the server to retrieve the resource.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectStart
PerformanceResourceTiming.decodedBodySize	A										<pre><code>resource.decodedBodySize;\n</code></pre>The decodedBodySize property returns the size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings. If the resource is retrieved from an application cache or local resources, it returns the size of the payload after removing any applied content-codings.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/decodedBodySize
PerformanceResourceTiming.domainLookupEnd	A										<pre><code>resource.domainLookupEnd;\n</code></pre>The domainLookupEnd property returns the timestamp immediately after the browser finishes the domain name lookup for the resource.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupEnd
PerformanceResourceTiming.domainLookupStart	A										<pre><code>resource.domainLookupStart;\n</code></pre>The domainLookupStart property returns the timestamp immediately before the browser starts the domain name lookup for the resource.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupStart
PerformanceResourceTiming.encodedBodySize	A										<pre><code>resource.encodedBodySize;\n</code></pre>The encodedBodySize property represents the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/encodedBodySize
PerformanceResourceTiming.fetchStart	A										<pre><code>resource.fetchStart;\n</code></pre>The fetchStart property represents a timestamp immediately before the browser starts to fetch the resource.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/fetchStart
PerformanceResourceTiming.initiatorType	A										<pre><code>resource.initiatorType;\n</code></pre>The initiatorType property is a string that represents the type of resource that initiated the performance event. The value of this string is as follows:	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/initiatorType
PerformanceResourceTiming.nextHopProtocol	A										<pre><code>resource.nextHopProtocol;\n</code></pre>The nextHopProtocol property is a string representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/nextHopProtocol
PerformanceResourceTiming.redirectEnd	A										<pre><code>resource.redirectEnd;\n</code></pre>The redirectEnd property returns a timestamp immediately after receiving the last byte of the response of the last redirect.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectEnd
PerformanceResourceTiming.redirectStart	A										<pre><code>resource.redirectStart;\n</code></pre>The redirectStart property returns a timestamp representing the start time of the fetch which that initiates the redirect.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectStart
PerformanceResourceTiming.requestStart	A										<pre><code>resource.requestStart;\n</code></pre>The requestStart property returns a timestamp of the time immediately before the browser starts requesting the resource from the server, cache, or local resource. If the transport connection fails and the browser retires the request, the value returned will be the start of the retry request.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/requestStart
PerformanceResourceTiming.responseEnd	A										<pre><code>resource.responseEnd;\n</code></pre>The responseEnd property returns a timestamp immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseEnd
PerformanceResourceTiming.responseStart	A										<pre><code>resource.responseStart;\n</code></pre>The responseStart property returns a timestamp immediately after the browser receives the first byte of the response from the server, cache, or local resource.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStart
PerformanceResourceTiming.secureConnectionStart	A										<pre><code>resource.secureConnectionStart;\n</code></pre>The secureConnectionStart property returns a timestamp immediately before the browser starts the handshake process to secure the current connection. If a secure connection is not used, the property returns zero.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/secureConnectionStart
PerformanceResourceTiming.toJSON()	A										<pre><code>json = resourcePerfEntry.toJSON();\n</code></pre>The toJSON() method is a serializer that returns a JSON representation of the PerformanceResourceTiming object.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/toJSON
PerformanceResourceTiming.transferSize	A										<pre><code>resource.transferSize;\n</code></pre>The transferSize property represents the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body (as defined by RFC7230.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/transferSize
PerformanceResourceTiming.workerStart	A										<pre><code>resource.workerStart;\n</code></pre>If the current context is a worker, the workerStart property returns a timestamp immediately before the worker that fetches the resource is started. If the context is not a worker (i.e. a browser context), this property returns zero.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/workerStart
PerformanceTiming	A										The PerformanceTiming interface represents timing-related performance information for the given page.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming
PerformanceTiming.connectEnd	A										<pre><code>time = performanceTiming.connectEnd;</code></pre>The PerformanceTiming.connectEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment end time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/connectEnd
PerformanceTiming.connectStart	A										<pre><code>time = performanceTiming.connectStart;</code></pre>The PerformanceTiming.connectStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment start time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/connectStart
PerformanceTiming.domainLookupEnd	A										<pre><code>time = performanceTiming.domainLookupEnd;</code></pre>The PerformanceTiming.domainLookupEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domainLookupEnd
PerformanceTiming.domainLookupStart	A										<pre><code>time = performanceTiming.domainLookupStart;</code></pre>The PerformanceTiming.domainLookupStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domainLookupStart
PerformanceTiming.domComplete	A										<pre><code>time = performanceTiming.domComplete;</code></pre>The PerformanceTiming.domComplete read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to 'complete' and the corresponding readystatechange event is thrown.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domComplete
PerformanceTiming.domContentLoadedEventEnd	A										<pre><code>time = performanceTiming.domContentLoadedEventEnd;</code></pre>The PerformanceTiming.domContentLoadedEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right after all the scripts that need to be executed as soon as possible, in order or not, has been executed.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domContentLoadedEventEnd
PerformanceTiming.domContentLoadedEventStart	A										<pre><code>time = performanceTiming.domContentLoadedEventStart;</code></pre>The PerformanceTiming.domContentLoadedEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right before the parser sent the DOMContentLoaded event, that is right after all the scripts that need to be executed right after parsing has been executed.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domContentLoadedEventStart
PerformanceTiming.domInteractive	A										<pre><code>time = performanceTiming.domInteractive;</code></pre>The PerformanceTiming.domInteractive read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to 'interactive' and the corresponding readystatechange event is thrown.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domInteractive
PerformanceTiming.domLoading	A										<pre><code>time = performanceTiming.domLoading;</code></pre>The PerformanceTiming.domLoading read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser started its work, that is when its Document.readyState changes to 'loading' and the corresponding readystatechange event is thrown.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domLoading
PerformanceTiming.fetchStart	A										<pre><code>time = performanceTiming.fetchStart;</code></pre>The PerformanceTiming.fetchStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/fetchStart
PerformanceTiming.loadEventEnd	A										<pre><code>time = performanceTiming.loadEventEnd;</code></pre>The PerformanceTiming.loadEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the load event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns 0.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/loadEventEnd
PerformanceTiming.loadEventStart	A										<pre><code>time = performanceTiming.loadEventStart;</code></pre>The PerformanceTiming.loadEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the load event was sent for the current document. If this event has not yet been sent, it returns 0.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/loadEventStart
PerformanceTiming.navigationStart	A										<pre><code>time = performanceTiming.navigationStart;</code></pre>The PerformanceTiming.navigationStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right after the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as PerformanceTiming.fetchStart.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/navigationStart
PerformanceTiming.redirectEnd	A										<pre><code>time = performanceTiming.redirectEnd;</code></pre>The PerformanceTiming.redirectEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirect is not of the same origin, the value returned is 0.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/redirectEnd
PerformanceTiming.redirectStart	A										<pre><code>time = performanceTiming.redirectStart;</code></pre>The PerformanceTiming.redirectStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the first HTTP redirect starts. If there is no redirect, or if one of the redirect is not of the same origin, the value returned is 0.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/redirectStart
PerformanceTiming.requestStart	A										<pre><code>time = performanceTiming.requestStart;</code></pre>The PerformanceTiming.requestStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/requestStart
PerformanceTiming.responseEnd	A										<pre><code>time = performanceTiming.responseEnd;</code></pre>The PerformanceTiming.responseEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the browser received the last byte of the response, or when the connection is closed if this happened first, from the server from a cache, of from a local resource.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseEnd
PerformanceTiming.responseStart	A										<pre><code>time = performanceTiming.responseStart;</code></pre>The PerformanceTiming.responseStart read-only property returns an unsigned long long representing the moment in time (in milliseconds since the UNIX epoch) when the browser received the first byte of the response from the server, cache, or local resource.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseStart
PerformanceTiming.secureConnectionStart	A										<pre><code>time = performanceTiming.secureConnectionStart;</code></pre>The PerformanceTiming.secureConnectionStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the secure connection handshake starts. If no such connection is requested, it returns 0.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/secureConnectionStart
PerformanceTiming.unloadEventEnd	A										<pre><code>time = performanceTiming.unloadEventEnd;</code></pre>The PerformanceTiming.unloadEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the unload event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/unloadEventEnd
PerformanceTiming.unloadEventStart	A										<pre><code>time = performanceTiming.unloadEventStart;</code></pre>The PerformanceTiming.unloadEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the unload event has been thrown. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0.	https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/unloadEventStart
Performance API	A										The High Resolution Time standard defines a Performance interface that supports client-side latency measurements within applications. The Performance interfaces are considered high resolution because they are accurate to a thousandth of a millisecond (subject to hardware or software constraints). The interfaces support a number of use cases including calculating frame-rates (potentially important in animations) and benchmarking (such as the time to load a resource).	https://developer.mozilla.org/en-US/docs/Web/API/Performance_API
Using the Performance API	A										A fundamental requirement of web performance is a precise and consistent definition of time. The DOMHighResTimeStamp type (a double) is used by all performance interfaces to hold such time values. Additionally, there must be a way to create a timestamp for a specific point in time; this is done with the now() method.	https://developer.mozilla.org/en-US/docs/Web/API/Performance_API/Using_the_Performance_API
Performance Timeline	A										The Performance Timeline API defines extensions to the Performance interface to support client-side latency measurements within applications. The extensions provide interfaces to retrieve performance entry metrics based on specific filter criteria. The standard also includes interfaces that allow an application to define performance observer callbacks that are notified when specific performance events are added to the browser's performance timeline.	https://developer.mozilla.org/en-US/docs/Web/API/Performance_Timeline
Using Performance Timeline	A										The Performance Timeline standard defines extensions to the Performance interface to support client-side latency measurements within applications. The standard also includes interfaces that allow an application to be notified when specific performance events occur. Together, these interfaces can be used to help identify an application's performance bottlenecks.	https://developer.mozilla.org/en-US/docs/Web/API/Performance_Timeline/Using_Performance_Timeline
PeriodicSyncEvent	A										The parameter passed into the sync handler, the PeriodicSyncEvent interface represents a periodic sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.	https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncEvent
PeriodicSyncManager	A										The PeriodicSyncManager interface of the the ServiceWorker API provides an interface for registering and retrieving PeriodicSyncRegistration objects.	https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncManager
PeriodicSyncRegistration	A										The PeriodicSyncRegistration interface of the ServiceWorker API provides an object for managing periodic background synchronization.	https://developer.mozilla.org/en-US/docs/Web/API/PeriodicSyncRegistration
PeriodicWave	A										PeriodicWave has no inputs or outputs; it is used to create custom oscillators via OscillatorNode.setPeriodicWave. The PeriodicWave itself is created/returned by AudioContext.createPeriodicWave.	https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave
Permissions	A										The Permissions interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions	https://developer.mozilla.org/en-US/docs/Web/API/Permissions
Permissions.query()	A										<pre><code>navigator.permissions.query(PermissionDescriptor).then(function(permissionStatus) { ... })</code></pre>The Permissions.query() method of the Permissions interface returns the status of a user permission on the global scope.	https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query
Permissions.revoke()	A										<pre><code>navigator.permissions.revoke(PermissionDescriptor).then(function(permissionStatus) { ... })</code></pre>The Permissions.revoke() method of the Permissions interface reverts a currently set permission back to its default state, which is usually prompt.	https://developer.mozilla.org/en-US/docs/Web/API/Permissions/revoke
PermissionStatus	A										The PermissionStatus interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.	https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus
PermissionStatus.onchange	A										<pre><code>PermissionStatus.onchange = function() { ... }\nPermissionStatus.addEventListener('change', function() { ... })</code></pre>The PermissionStatus.onchange event of the PermissionStatus interface is called whenever the PermissionStatus.state property changes.	https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus/onchange
PermissionStatus.state	A										<pre><code>var permission = PermissionStatus.state</code></pre>The PermissionStatus.state read-only property of the PermissionStatus interface returns the state of a requested permission. This property returns one of 'granted', 'denied', or 'prompt'.	https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus/state
PermissionStatus.status	A										<pre><code>var permission = PermissionStatus.status</code></pre>The PermissionStatus.status read-only property of the PermissionStatus interface returns the status of a requested permission. This property returns one of 'granted', 'denied', or 'prompt'.	https://developer.mozilla.org/en-US/docs/Web/API/PermissionStatus/status
Permissions API	A										Historically different APIs handle their own permissions inconsistently — for example the Notifications API allows for explicit checking of permission status and requesting permission, whereas the Geolocation API doesn't (which causes problems if the user denied the initial permission request). The Permissions API provides the tools to allow developers to implement a better user experience as far as permissions are concerned.	https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API
Using the Permissions API	A										This article provides a basic guide to using the W3C Permissions API, which provides a programmatic way to query the status of API permissions attributed to the current context.	https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API/Using_the_Permissions_API
Plugin	A										The Plugin interface provides information about a browser plugin.	https://developer.mozilla.org/en-US/docs/Web/API/Plugin
PluginArray	A										The PluginArray interface is used to store a list of available plugins; it's returned by the window.navigator.plugins property.	https://developer.mozilla.org/en-US/docs/Web/API/PluginArray
Point	A										Point represents a 2D point.	https://developer.mozilla.org/en-US/docs/Web/API/Point
PointerEvent	A										A pointer is a hardware agnostic representation of input devices (such as a mouse, pen or contact point on a touch-enable surface). The pointer can target a specific coordinate (or set of coordinates) on the contact surface such as a screen.	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent
PointerEvent.height	A										<pre><code>var contactHeight = pointerEvent.height;\n</code></pre>The height of the pointer's contact geometry, along the Y axis (in CSS pixels). Depending on the source of the pointer device (for example a finger), for a given pointer, each event may produce a different value.	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height
PointerEvent.isPrimary	A										<pre><code>var isPrime = pointerEvent.isPrimary;\n</code></pre>The property indicates whether or not the pointer device that created the event is the primary pointer. Returns true if the pointer that caused the event to be fired is the primary device and returns false otherwise.	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary
PointerEvent()	A										<pre><code> event = new PointerEvent(type, PointerEventInit);</code></pre>The PointerEvent() constructor creates a new synthetic and untrusted PointerEvent.	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent
PointerEvent.pointerId	A										<pre><code>var id = pointerEvent.pointerId;\n</code></pre>An identifier assigned to a pointer event that is unique from the identifiers of all active pointer events at the time. Authors cannot assume values convey any particular meaning other than an identifier for the pointer that is unique from all other active pointers.	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId
PointerEvent.pointerType	A										<pre><code>var pType = pointerEvent.pointerType;\n</code></pre>Indicates the device type that caused the pointer event. The supported values are the following strings:	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType
PointerEvent.pressure	A										<pre><code>var pressure = pointerEvent.pressure;\n</code></pre>The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. For hardware that does not support pressure, including but not limited to mouse, the value MUST be 0.5 when the pointer is active and 0 otherwise.	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure
PointerEvent.tiltX	A										<pre><code>var tilt = pointerEvent.tiltX;\n</code></pre>This property is the angle (in degrees) between the Y-Z plane of the pointer and the screen. This property is typically only useful for a pen/stylus pointer type. The range of values is -90 to 90 degrees and a positive value means a tilt to the right. For devices that do not support this property, the value is 0.	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX
PointerEvent.tiltY	A										<pre><code>var tilt = pointerEvent.tiltY;\n</code></pre>This property is the angle (in degrees) between the X-Z plane of the pointer and the screen. This property is typically only useful for a pen/stylus pointer type. The range of values is -90 to 90 degrees and a positive value is a tilt toward the user. For devices that do not support this property, the value is 0.	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY
PointerEvent.width	A										<pre><code>var contactWidth = pointerEvent.width;\n</code></pre>The width of the pointer's contact geometry&#160;along the x-axis, measured in CSS pixels. Depending on the source of the pointer device (such as a finger), for a given pointer, each event may produce a different value.	https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width
Pointer events	A										Most of today's web content assumes the user's pointing device will be a mouse. However, since many devices support other types of pointing input devices, such as pen/stylus and touch surfaces, extensions to the existing pointing device event models are needed and pointer events address that need.	https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events
Multi-touch interaction	A										Pointer events extend DOM input events to support various pointing input devices such as pen/stylus and touch screens as well as mouse. The pointer is a hardware-agnostic device that can target a specific set of screen coordinates. Having a single event model for pointers can simplify creating Web sites, applications and provide a good user experience regardless of the user's hardware.	https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events/Multi-touch_interaction
Pinch zoom gestures	A										Adding gestures to an application can significantly improve the user experience. There are many types of gestures, from the simple single-touch swipe gesture to the more complex multi-touch twist gesture, where the touch points (aka pointers) move in different directions.	https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events/Pinch_zoom_gestures
Using Pointer Events	A										This document demonstrates how to use pointer events and canvas to build a multi-touch enabled drawing application. This example is identical to the application described in the Touch events Overview except this example uses the pointer events input event model (instead of touch events. Another difference is that because pointer events are pointer device agnostic, the application accepts both touch input, pen and mouse input, the latter two for free.	https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events/Using_Pointer_Events
Pointer Lock API	A										The Pointer Lock API (formerly called Mouse Lock API) provides input methods based on the movement of the mouse over time (i.e., deltas), not just the absolute position of the mouse cursor in the viewport. It gives you access to raw mouse movement, locks the target of mouse events to a single element, eliminates limits on how far mouse movement can go in a single direction, and removes the cursor from view.	https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API
PopStateEvent	A										<pre><code>window.onpopstate = funcRef;\n</code></pre>An event handler for the popstate event on the window.	https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent
Position	A										The Position interface represents the position of the concerned device at a given time. The position, represented by a Coordinates object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.	https://developer.mozilla.org/en-US/docs/Web/API/Position
Position.coords	A										<pre><code>coord = position.coords\n</code></pre>The Position.coords read-only property, a Coordinates object, represents a geographic attitude: it contains the location, that is longitude and latitude on the Earth, the altitude, and the speed of the object concerned, regrouped inside the returned value. It also contains accuracy information about these values.	https://developer.mozilla.org/en-US/docs/Web/API/Position/coords
Position.timestamp	A										<pre><code>coord = position.timestamp\n</code></pre>The Position.timestamp read-only property, a DOMTimeStamp object, represents the date and the time of the creation of the Position object it belongs to. The precision is to the millisecond.	https://developer.mozilla.org/en-US/docs/Web/API/Position/timestamp
PositionError	A										The PositionError interface represents the reason of an error occurring when using the geolocating device.	https://developer.mozilla.org/en-US/docs/Web/API/PositionError
PositionError.code	A										<pre><code>typeErr = poserr.code\n</code></pre>The PositionError.code read-only property is an unsigned short representing the error code. The following values are possible:	https://developer.mozilla.org/en-US/docs/Web/API/PositionError/code
positionerror code	R	PositionError.code										
PositionError.message	A										<pre><code>msg = positionError.message\n</code></pre>The PositionError.message read-only property returns a human-readable DOMString describing the details of the error.	https://developer.mozilla.org/en-US/docs/Web/API/PositionError/message
positionerror message	R	PositionError.message										
PositionOptions	A										The PositionOptions interface describes an object containing option properties to pass as a parameter of Geolocation.getCurrentPosition() and Geolocation.watchPosition().	https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions
PositionOptions.enableHighAccuracy	A										<pre><code>positionOptions.enableHighAccuracy = booleanValue\n</code></pre>The PositionOptions.enableHighAccuracy property is a Boolean that indicates the application would like to receive the best possible results. If true and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if false (the default value), the device can take the liberty to save resources by responding more quickly and/or using less power.	https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions/enableHighAccuracy
PositionOptions.maximumAge	A										<pre><code>positionOptions.maximumAge = timeLength\n</code></pre>The PositionOptions.maximumAge property is a positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to Infinity the device must return a cached position regardless of its age.	https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions/maximumAge
PositionOptions.timeout	A										<pre><code>positionOptions.timeout = timeLength\n</code></pre>The PositionOptions.timeout property is a positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is Infinity, meaning that getCurrentPosition() won't return until the position is available.	https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions/timeout
Presentation	A										The Presentation can be defined as two possible user agents in the context: Controlling user agent and Receiving user agent.	https://developer.mozilla.org/en-US/docs/Web/API/Presentation
Presentation.defaultRequest	A										In a controlling user agent, the defaultRequest attribute MUST return the default presentation request if any, null otherwise. In a receiving browsing context, it MUST return null.	https://developer.mozilla.org/en-US/docs/Web/API/Presentation/defaultRequest
Presentation.receiver	A										In a receiving user agent, the receiver attribute MUST return the PresentationReceiver instance associated with the receiving browsing context and created by the receiving user agent when the receiving browsing context is created. In any other browsing context, it MUST return null.	https://developer.mozilla.org/en-US/docs/Web/API/Presentation/receiver
PresentationAvailability	A										A PresentationAvailability object is associated with available presentation displays and represents the presentation display availability for a presentation request. If the controlling user agent can monitor the list of available presentation displays in the background (without a pending request to start ()), the PresentationAvailability object MUST be implemented in a controlling browsing context.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationAvailability
onchange	A										The onchange attribute is an event handler whose corresponding event handler event type is change.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationAvailability/onchange
value	A										The value attribute MUST return the last value it was set to. The value is updated by the monitor the list of available presentation displays algorithm.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationAvailability/value
PresentationConnection	A										The PresentationConnection interface of the Presentation API provides methods and properties for managing a single presentation. Each presentation connection is represented by a PresentationConnection object. Both the controlling user agent and receiving user agent MUST implement PresentationConnection.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnection
binaryType	A										When a PresentationConnection object is created, its binaryType IDL attribute MUST be set to the string " arraybuffer ". On getting, it MUST return the last value it was set to. On setting, the user agent MUST set the IDL attribute to the new value.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnection/binaryType
close	A										When the close () method is called on a PresentationConnection S, the user agent MUST start closing the presentation connection S with closed as closeReason and an empty message as closeMessage.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnection/close
id	A										The id attribute specifies the presentation connection 's presentation identifier.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnection/id
send	A										<pre><code>PresentationConnection.send(data);</code></pre>The PresentationConnection.send() method of the PresentationConnection interface sends either binary or text data between a controlling browsing context and a presenting browsing context.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnection/send
state	A										The state attribute represents the presentation connection 's current state. It can take one of the values of PresentationConnectionState depending on the connection state:	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnection/state
terminate	A										When the terminate () method is called on a PresentationConnection S in a controlling browsing context, the user agent MUST run the algorithm to terminate a presentation in a controlling browsing context using S.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnection/terminate
PresentationConnectionAvailableEvent	A										The PresentationConnectionAvailableEvent interface of the Presentation API is fired on a PresentationRequest when a connection associated with the object is created.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionAvailableEvent
connection	A										A receiving user agent fires a trusted event named connectionavailable on a PresentationReceiver when an incoming connection is created. It is fired at the presentation controllers monitor, using the PresentationConnectionAvailableEvent interface, with the connection attribute set to the PresentationConnection object that was created. The event is fired for all connections that are created when monitoring incoming presentation connections.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionAvailableEvent/connection
PresentationConnectionAvailableEvent	A										<pre><code>var pcaEvent = new PresentationConnectionAvailableInit(typeArg, eventInit)</code></pre>The PresentationConnectionAvailableInit() constructor creates a new PresentationConnectionAvailableEvent.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionAvailableEvent/PresentationConnectionAvailableEvent
PresentationConnectionClosedEvent	A										A PresentationConnectionClosedEvent is fired when a presentation connection enters a closed state. The reason attribute provides the reason why the connection was closed.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionClosedEvent
PresentationConnectionCloseEvent	A										The PresentationConnectionCloseEvent interface of the Presentation API is fired on a PresentationConnection when it is closed.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionCloseEvent
PresentationConnectionList	A										PresentationConnectionList is the collection of incoming presentation connections.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationConnectionList
PresentationReceiver	A										The PresentationReceiver interface allows a receiving browsing context to access the controlling browsing contexts and communicate with them. The PresentationReceiver interface MUST be implemented in a receiving browsing context provided by a receiving user agent.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationReceiver
PresentationRequest	A										A PresentationRequest object is used to initiate or reconnect to a presentation made by a controlling browsing context. The PresentationRequest object MUST be implemented in a controlling browsing context provided by a controlling user agent.	https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest
getAvailability	A										When the getAvailability () method is called, the user agent MUST run the following steps:	https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/getAvailability
onconnectionavailable	A										The following are the event handlers (and their corresponding event handler event types) that must be supported, as event handler IDL attributes, by objects implementing the PresentationRequest interface:	https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/onconnectionavailable
reconnect	A										When the reconnect (presentationId) method is called on a PresentationRequest presentationRequest, the user agent MUST run the following steps to reconnect to a presentation :	https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/reconnect
start	A										When the start method is called, the user agent MUST run the following steps to start a presentation :	https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/start
Presentation API	A										The Presentation API is developed to effectively display web content through large scale presentation devices such as projectors and connected TVs. The relevant multimedia devices include wired displays, such as HDMI, DVI, or similar, and wireless technologies like Miracast, Chromecast, DLNA, or AirPlay.	https://developer.mozilla.org/en-US/docs/Web/API/Presentation_API
ProcessingInstruction	A										A processing instruction provides an opportunity for application-specific instructions to be embedded within XML and which can be ignored by XML processors which do not support processing their instructions (outside of their having a place in the DOM).	https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction
ProgressEvent	A										The ProgressEvent interface represents events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an img, audio, video, style or link).	https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent
ProgressEvent.initProgressEvent()	A										<pre><code>Progress.initProgressEvent(typeArg, canBubbleArg, cancelableArg, lengthComputable, loaded, total);\n</code></pre>The ProgressEvent.initProgressEvent() method Initializes an animation event created using the deprecated Document.createEvent("ProgressEvent") method.	https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/initProgressEvent
ProgressEvent.lengthComputable	A										<pre><code>flag = ProgressEvent.lengthComputable</code></pre>The ProgressEvent.lengthComputable read-only property is a Boolean flag indicating if the resource concerned by the ProgressEvent has a length that can be calculated. If not, the ProgressEvent.total property has no significant value.	https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/lengthComputable
ProgressEvent.loaded	A										<pre><code>value = ProgressEvent.loaded</code></pre>The ProgressEvent.loaded read-only property is an unsigned long long representing the amount of work already performed by the underlying process. The ratio of work done can be calculated with the property and ProgressEvent.total. When downloading a resource using HTTP, this only represent the part of the content itself, not headers and other overhead.	https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/loaded
ProgressEvent()	A										<pre><code>progressEvent = new ProgressEvent(type, {lengthComputable: aBooleanValue, loaded: aNumber, total: aNumber});\n</code></pre>The ProgressEvent() constructor returns a newly created ProgressEvent, representing the current completion of a long process.	https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/ProgressEvent
ProgressEvent.total	A										<pre><code>value = ProgressEvent.total</code></pre>The ProgressEvent.total read-only property is an unsigned long long representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this only represent the content itself, not headers and other overhead.	https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/total
PromiseRejection	A										This object provides information about a Promise that has been rejected.	https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejection
promise	A										<pre><code>var myPromiseRejectionId = myPromiseRejection.promise;</code></pre>The promise read-only property of the PromiseRejection returns the ID of the Promise that the current notification is about.	https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejection/promise
PromiseRejection	A										<pre><code>var myPromi&#8203;seRejection = new PromiseRejection(type, init);</code></pre>The PromiseRejection() constructor creates a new PromiseRejection object.	https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejection/PromiseRejection
reason	A										<pre><code>var myPromiseRejectionReason = myPromiseRejection.reason;</code></pre>The reason read-only property of the PromiseRejection returns the rejection reason for the Promise that the current notification is about. Although the reason can be undefined, it is generally an Error object, like in exception handling.	https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejection/reason
PromiseRejectionEvent	A										The PromiseRejectionEvent interface represents events which are fired when JavaScript Promise s are rejected. These events are particularly useful for telemetry and debugging purposes.	https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
PromiseRejectionEvent.promise	A										<pre><code>promise = PromiseRejectionEvent.promise</code></pre>The PromiseRejectionEvent.promise read-only property indicates the JavaScript Promise which has been rejected. You can examine the event's PromiseRejectionEvent.reason property to learn why the promise was rejected.	https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/promise
PromiseRejectionEvent()	A										<pre><code>new PromiseRejectionEvent(type, {\n  promise: somePromise, \n  reason : someValue\n});\n</code></pre>The PromiseRejectionEvent() constructor returns a newly created PromiseRejectionEvent, which represents events fired when a JavaScript Promise is rejected.	https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/PromiseRejectionEvent
PromiseRejectionEvent.reason	A										<pre><code>reason = PromiseRejectionEvent.reason</code></pre>The PromiseRejectionEvent.reason read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject(). This in theory provides information about why the promise was rejected.	https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/reason
PromiseResolver	A										The PromiseResolver interface represents an object controlling the state and the result value of a Promise.	https://developer.mozilla.org/en-US/docs/Web/API/PromiseResolver
Proximity Events	A										The proximity events are a handy way to know when a user is close to a device. These events make it possible to react to such a change, for example by shutting down the screen of a smartphone when the user is having a phone call with the device close to their ear.	https://developer.mozilla.org/en-US/docs/Web/API/Proximity_Events
PushEvent	A										The PushEvent interface of the Push API represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription.	https://developer.mozilla.org/en-US/docs/Web/API/PushEvent
PushEvent.data	A										<pre><code>var myPushData = PushEvent.data;</code></pre>The data read-only property of the PushEvent interface returns a reference to a PushMessageData object containing data sent to the PushSubscription.	https://developer.mozilla.org/en-US/docs/Web/API/PushEvent/data
PushEvent.PushEvent()	A										<pre><code>var myPushEvent = new PushEvent(type, eventInitDict);</code></pre>The PushEvent() constructor creates a new PushEvent object. Note that the this constructor is exposed only to a service worker context.	https://developer.mozilla.org/en-US/docs/Web/API/PushEvent/PushEvent
PushManager	A										The PushManager interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.	https://developer.mozilla.org/en-US/docs/Web/API/PushManager
PushManager.getSubscription()	A										<pre><code>&#8203;PushManager.getSubscription().then(function(pushSubscription) { ... } );</code></pre>The PushManager.getSubscription() method of the PushManager interface retrieves an existing push subscription.	https://developer.mozilla.org/en-US/docs/Web/API/PushManager/getSubscription
PushManager.hasPermission()	A										<pre><code>&#8203;PushManager.hasPermission().then(function(pushPermissionStatus) { ... } );</code></pre>The PushManager.hasPermission() method of the PushManager interface returns a Promise that resolves to the PushPermissionStatus of the requesting webapp, which will be one of granted, denied, or default.	https://developer.mozilla.org/en-US/docs/Web/API/PushManager/hasPermission
PushManager.permissionState()	A										<pre><code>PushManager.permissionState(options).then(function(PushMessagingState) { ... });\n</code></pre>The permissionState() method of the PushManager interface returns a Promise that resolves to a DOMString indicating the permission state of the push manager. Possible values are 'prompt', 'denied', or 'granted'.	https://developer.mozilla.org/en-US/docs/Web/API/PushManager/permissionState
PushManager.register()	A										<pre><code>var request = navigator.push.register();</code></pre>The register method is used to ask the system to request a new endpoint for notifications. This method has been superceded by PushManager.subscribe().	https://developer.mozilla.org/en-US/docs/Web/API/PushManager/register
PushManager.registrations()	A										<pre><code>var request = navigator.push.registrations();</code></pre>The registrations method is used to ask the system about existing push endpoint registrations.	https://developer.mozilla.org/en-US/docs/Web/API/PushManager/registrations
PushManager.subscribe()	A										<pre><code>&#8203;PushManager.subscribe(options).then(function(pushSubscription) { ... } );</code></pre>The subscribe() method of the PushManager interface subscribes to a push service.	https://developer.mozilla.org/en-US/docs/Web/API/PushManager/subscribe
PushManager.unregister()	A										<pre><code>var request = navigator.push.unregister(pushEndpoint);</code></pre>The unregister() method was used to ask the system to unregister and delete the specified endpoint. In the updated API, a subscription is can be unregistered via the PushSubscription.unsubscribe() method.	https://developer.mozilla.org/en-US/docs/Web/API/PushManager/unregister
PushMessageData	A										The PushMessageData interface of the Push API provides methods which let you retrieve the push data sent by a server in various formats.	https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData
PushMessageData.arrayBuffer()	A										<pre><code>var myArrayBuffer = PushEvent.data.arrayBuffer();</code></pre>The arrayBuffer() method of the PushMessageData interface extracts push message data as an ArrayBuffer object.	https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData/arrayBuffer
PushMessageData.blob()	A										<pre><code>var myBlob = PushEvent.data.blob();</code></pre>The blob() method of the PushMessageData interface extracts push message data as a Blob object.	https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData/blob
PushMessageData.json()	A										<pre><code>var myJson = PushEvent.data.json();</code></pre>The json() method of the PushMessageData interface extracts push message data as a JSON object.	https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData/json
PushMessageData.text()	A										<pre><code>var myText = PushEvent.data.text();</code></pre>The text() method of the PushMessageData interface extracts push message data as a plain text string.	https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData/text
PushRegistrationManager	A										Returns an interface to register or unregister a push registration, get an active registration, or check the permission status of the registration. This interface has been superceded by PushManager.	https://developer.mozilla.org/en-US/docs/Web/API/PushRegistrationManager
PushSubscription	A										The PushSubscription interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service.	https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription
PushSubscription.endpoint	A										<pre><code>var myEnd = pushSubscription.endpoint;</code></pre>The endpoint read-only property of the PushSubscription interface returns a USVString containing the endpoint associated with the push subscription.	https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/endpoint
PushSubscription.getKey()	A										<pre><code>&#8203;var key = subscription.getKey(method);</code></pre>The getKey() method of the PushSubscription interface returns an ArrayBuffer representing a client public key, which can then be sent to a server and used in encrypting push message data.	https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/getKey
PushSubscription.subscriptionId	A										<pre><code>var subId = pushSubscription.subscriptionId;</code></pre>The endpoint read-only property of the PushSubscription interface returns a DOMString containing the subscription ID associated with the push subscription.	https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/subscriptionId
PushSubscription.toJSON()	A										<pre><code>&#8203;mySubscription = subscription.toJSON()</code></pre>The toJSON() method of the PushSubscription interface is a standard serializer: it returns a JSON representation of the subscription properties, providing a useful shortcut.	https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/toJSON
PushSubscription.unsubscribe()	A										<pre><code>&#8203;PushSubscription.unsubscribe().then(function(Boolean) { ... });</code></pre>The unsubscribe() method of the PushSubscription interface returns a Promise that resolves to a Boolean when the current subscription is successfully unsubscribed.	https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription/unsubscribe
Push API	A										The Push API gives web applications the ability to receive messages pushed to them from a server, whether or not the web app is in the foreground, or even currently loaded, on a user agent. This lets developers deliver asynchronous notifications and updates to users that opt in, resulting in better engagement with timely new content.	https://developer.mozilla.org/en-US/docs/Web/API/Push_API
Using the Push API	A										The W3C Push API offers some exciting new functionality for developers to use in web applications: this article provides an introduction to getting Push notifications setup and running, with a simple demo.	https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API
RadioNodeList	A										The RadioNodeList interface represents a collection of elements in a form or a fieldset element.	https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList
RadioNodeList.value	A										<pre><code>value = radioNodeList.value;\nradioNodeList.value = string;\n</code></pre>If the underlying element collection contains radio buttons, the RadioNodeList.value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked.	https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList/value
RandomSource	A										RandomSource represents a source of cryptographically secure random numbers. It is available via the Crypto object of the global object: Window.crypto on Web pages, WorkerGlobalScope.crypto in workers.	https://developer.mozilla.org/en-US/docs/Web/API/RandomSource
RandomSource.getRandomValues()	A										<pre><code>cryptoObj.getRandomValues(typedArray);</code></pre>The RandomSource.getRandomValues() method lets you get cryptographically random values. The array given as the parameter is filled with random numbers (random in its cryptographic meaning).	https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues
Range	A										The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.	https://developer.mozilla.org/en-US/docs/Web/API/Range
Range.cloneContents()	A										<pre><code>documentFragment = range.cloneContents();\n</code></pre>The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneContents
Range.cloneRange()	A										<pre><code>clone = range.cloneRange();\n</code></pre>The Range.cloneRange() method returns a Range object with boundary points identical to the cloned Range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneRange
Range.collapse()	A										<pre><code>range.collapse(toStart);\n</code></pre>The Range.collapse() method collapses the Range to one of its boundary points.	https://developer.mozilla.org/en-US/docs/Web/API/Range/collapse
Range.collapsed	A										<pre><code>isCollapsed = range.collapsed;\n</code></pre>The Range.collapsed read-only property returns a Boolean flag indicating whether the start and end points of the Range are at the same position. It returns true if the start and end boundary points of the Range are the same point in the DOM, false if not.	https://developer.mozilla.org/en-US/docs/Web/API/Range/collapsed
Range.commonAncestorContainer	A										<pre><code>rangeAncestor = range.commonAncestorContainer;</code></pre>The Range.commonAncestorContainer read-only property returns the deepest — or furthest down the document tree — Node that contains both boundary points of the range. This means that if Range.startContainer and Range.endContainer both refer to the same node, this node is the commonAncestorContainer.	https://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer
Range.compareBoundaryPoints()	A										<pre><code>compare = range.compareBoundaryPoints(how, sourceRange);\n</code></pre>The Range.compareBoundaryPoints() method compares the boundary points of the Range with another one.	https://developer.mozilla.org/en-US/docs/Web/API/Range/compareBoundaryPoints
Range.comparePoint	A										<pre><code>returnValue = range.comparePoint( referenceNode, offset )\n</code></pre>The Range.comparePoint() method returns -1, 0, or 1 depending on whether the referenceNode is before, the same as, or after the Range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/comparePoint
Range.createContextualFragment()	A										<pre><code>documentFragment = range.createContextualFragment( tagString )\n</code></pre>The Range.createContextualFragment() method returns a DocumentFragment by invoking the HTML fragment parsing algorithm or the XML fragment parsing algorithm with the start of the range (the parent of the selected node) as the context node. The HTML fragment parsing algorithm is used if the range belongs to a Document whose HTMLness bit is set. In the HTML case, if the context node would be html, for historical reasons the fragment parsing algorithm is invoked with body as the context instead.	https://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment
Range.deleteContents()	A										<pre><code>range.deleteContents()\n</code></pre>The Range.deleteContents() removes the contents of the Range from the Document.	https://developer.mozilla.org/en-US/docs/Web/API/Range/deleteContents
Range.detach()	A										<pre><code>range.detach();\n</code></pre>The Range.detach() method releases a Range from use. This lets the browser choose to release resources associated with this Range. Subsequent attempts to use the detached range will result in a DOMException being thrown with an error code of INVALID_STATE_ERR.	https://developer.mozilla.org/en-US/docs/Web/API/Range/detach
Range.endContainer	A										<pre><code>endRangeNode = range.endContainer;\n</code></pre>The Range.endContainer read-only property returns the Node within which the Range ends. To change the end position of a node, use the Range.setEnd() method or a similar one.	https://developer.mozilla.org/en-US/docs/Web/API/Range/endContainer
Range.endOffset	A										<pre><code>endRangeOffset = range.endOffset;\n</code></pre>The Range.endOffset read-only property returns a number representing where in the Range.endContainer the Range ends.	https://developer.mozilla.org/en-US/docs/Web/API/Range/endOffset
Range.extractContents()	A										<pre><code>documentFragment = range.extractContents();\n</code></pre>The Range.extractContents() method moves contents of the Range from the document tree into a DocumentFragment.	https://developer.mozilla.org/en-US/docs/Web/API/Range/extractContents
Range.getBoundingClientRect()	A										<pre><code>boundingRect = range.getBoundingClientRect()\n</code></pre>The Range.getBoundingClientRect() method returns a ClientRect object that bounds the contents of the range; this a rectangle enclosing the union of the bounding rectangles for all the elements in the range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/getBoundingClientRect
Range.getClientRects()	A										<pre><code>rectList = range.getClientRects()\n</code></pre>The Range.getClientRects() method returns a list of ClientRect objects representing the area of the screen occupied by the range. This is created by aggregating the results of calls to Element.getClientRects() for all the elements in the range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/getClientRects
Range.insertNode()	A										<pre><code>range.insertNode(newNode);\n</code></pre>The Range.insertNode() method inserts a node at the start of the Range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/insertNode
Range.intersectsNode()	A										<pre><code>bool = range.intersectsNode( referenceNode )\n</code></pre>The Range.intersectsNode() method returns a boolean indicating whether the given Node intersects the Range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/intersectsNode
Range.isPointInRange()	A										<pre><code>bool = range.isPointInRange( referenceNode, offset )\n</code></pre>The Range.isPointInRange() method returns a boolean indicating whether the given point is in the Range. It returns true if the point (cursor position) at offset within ReferenceNode is within this range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/isPointInRange
Range()	A										<pre><code>range = new Range()</code></pre>The Range() constructor returns a newly created Range object whose start and end is the global Document object.	https://developer.mozilla.org/en-US/docs/Web/API/Range/Range
Range.selectNode()	A										<pre><code>range.selectNode(referenceNode);\n</code></pre>The Range.selectNode() method sets the Range to contain the Node and its contents. The parent Node of the start and end of the Range will be the same as the parent of the referenceNode.	https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNode
Range.selectNodeContents()	A										<pre><code>range.selectNodeContents(referenceNode);\n</code></pre>The Range.selectNodeContents() sets the Range to contain the contents of a Node.	https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNodeContents
Range.setEnd()	A										<pre><code>range.setEnd(endNode, endOffset);\n</code></pre>The Range.setEnd() method sets the end position of a Range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/setEnd
Range.setEndAfter()	A										<pre><code>range.setEndAfter(referenceNode);\n</code></pre>The Range.setEndAfter() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.	https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter
Range.setEndBefore()	A										<pre><code>range.setEndBefore(referenceNode);\n</code></pre>The Range.setEndBefore() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.	https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore
Range.setStart()	A										<pre><code>range.setStart(startNode, startOffset);\n</code></pre>The Range.setStart() method sets the start position of a Range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/setStart
Range.setStartAfter()	A										<pre><code>range.setStartAfter(referenceNode);</code></pre>The Range.setStartAfter() method sets the start position of a Range relative to a Node. The parent Node of the start of the Range will be the same as that for the referenceNode.	https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter
Range.setStartBefore()	A										<pre><code>range.setStartBefore(referenceNode);\n</code></pre>The Range.setStartBefore() method sets the start position of a Range relative to another Node. The parent Node of the start of the Range will be the same as that for the referenceNode.	https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartBefore
Range.startContainer	A										<pre><code>startRangeNode = range.startContainer;\n</code></pre>The Range.startContainer read-only property returns the Node within which the Range starts. To change the start position of a node, use one of the Range.setStart() methods.	https://developer.mozilla.org/en-US/docs/Web/API/Range/startContainer
Range.startOffset	A										<pre><code>startRangeOffset = range.startOffset;\n</code></pre>The Range.startOffset read-only property returns a number representing where in the startContainer the Range starts.	https://developer.mozilla.org/en-US/docs/Web/API/Range/startOffset
Range.surroundContents()	A										<pre><code>range.surroundContents(newNode);\n</code></pre>The Range.surroundContents() method moves content of the Range into a new node, placing the new node at the start of the specified range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/surroundContents
Range.toString()	A										<pre><code>text = range.toString();</code></pre>The Range.toString() method is a stringifier returning the text of the Range.	https://developer.mozilla.org/en-US/docs/Web/API/Range/toString
ReadableByteStream	A										The ReadableByteStream interface of the the Fetch API represents a readable stream of byte data.	https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStream
RenderingContext	A										RenderingContext is a helper type representing any of the following rendering contexts CanvasRenderingContext2D, WebGLRenderingContext or WebGL2RenderingContext (which inherits from WebGLRenderingContext).	https://developer.mozilla.org/en-US/docs/Web/API/RenderingContext
Request	A										The Request interface of the Fetch API represents a resource request.	https://developer.mozilla.org/en-US/docs/Web/API/Request
Request.cache	A										<pre><code>var currentCacheMode = request.cache;</code></pre>The cache read-only property of the Request interface contains the cache mode of the request.	https://developer.mozilla.org/en-US/docs/Web/API/Request/cache
Request.clone()	A										<pre><code>var newRequest = request.clone();</code></pre>The clone() method of the Request interface creates a copy of the current Request object.	https://developer.mozilla.org/en-US/docs/Web/API/Request/clone
Request.context	A										<pre><code>var myContext = request.context;</code></pre>The context read-only property of the Request interface contains the context of the Request (e.g., audio, image, iframe). This defines what sort of resource is being fetched.	https://developer.mozilla.org/en-US/docs/Web/API/Request/context
Request.credentials	A										<pre><code>var myCred = request.credentials;</code></pre>The credentials read-only property of the Request interface indicates whether the user agent should send cookies from the other domain in the case of cross-origin requests. This is similar to XHR’s withCredentials flag, but with three available values (instead of two):	https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials
Request.headers	A										<pre><code>var myHeaders = request.headers;</code></pre>The headers read-only property of the Request interface contains the Headers object associated with the request.	https://developer.mozilla.org/en-US/docs/Web/API/Request/headers
Request.method	A										<pre><code>var myMethod = request.method;</code></pre>The method read-only property of the Request interface contains the request's method (GET, POST, etc.)	https://developer.mozilla.org/en-US/docs/Web/API/Request/method
Request.mode	A										<pre><code>var myMode = request.mode;</code></pre>The mode read-only property of the Request interface contains the mode of the request (e.g., cors, no-cors, cors-with-forced-preflight, same-origin, or navigate.) This is used to determine if cross-origin requests lead to valid responses, and which properties of the response are readable:	https://developer.mozilla.org/en-US/docs/Web/API/Request/mode
Request.referrer	A										<pre><code>var myReferrer = request.referrer;</code></pre>The referrer read-only property of the Request interface is set by the user agent to be the referrer of the Request. (e.g., about:client, no-referrer, or a URL.)	https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer
Request.referrerPolicy	A										<pre><code>var myReferrerPolicy = request.referrerPolicy;</code></pre>The referrerPolicy read-only property of the Request interface contains the referrer policy governing the referrer for the  request.	https://developer.mozilla.org/en-US/docs/Web/API/Request/referrerPolicy
Request()	A										<pre><code>var myRequest = new Request(input, init);</code></pre>The Request() constructor creates a new Request object.	https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
Request.url	A										<pre><code>var myURL = request.url;</code></pre>The url read-only property of the Request interface contains the URL of the request.	https://developer.mozilla.org/en-US/docs/Web/API/Request/url
Resource Timing API	A										The Resource Timing interfaces enable retrieving and analyzing detailed network timing data regarding the loading of an application's resource(s). An application can use the timing metrics to determine, for example, the length of time it takes to load a specific resource, such as an XMLHttpRequest, SVG, image, or script.	https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API
Using the Resource Timing API	A										The Resource Timing interfaces enable retrieving and analyzing detailed network timing data regarding the loading of an application's resource(s). An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource such as an XMLHttpRequest, SVG, image, script, etc.).	https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API/Using_the_Resource_Timing_API
Response	A										The Response interface of the Fetch API represents the response to a request.	https://developer.mozilla.org/en-US/docs/Web/API/Response
Response.clone()	A										<pre><code>var response2 = response1.clone();</code></pre>The clone() method of the Response interface creates a clone of a response object, identical in every way, but stored in a different variable.	https://developer.mozilla.org/en-US/docs/Web/API/Response/clone
Response.error()	A										<pre><code>var errorResponse = Response.error();</code></pre>The error() method of the Response interface returns a new Response object associated with a network error.	https://developer.mozilla.org/en-US/docs/Web/API/Response/error
Response.headers	A										<pre><code>var myHeaders = response.headers;</code></pre>The headers read-only property of the Response interface contains the Headers object associated with the response.	https://developer.mozilla.org/en-US/docs/Web/API/Response/headers
Response.ok	A										<pre><code>var myOK = response.ok;</code></pre>The ok read-only property of the Response interface contains a boolean stating whether the response was successful (status in the range 200-299) or not.	https://developer.mozilla.org/en-US/docs/Web/API/Response/ok
Response.redirect()	A										<pre><code>var response = Response.redirect(url,status);</code></pre>The redirect() method of the Response interface returns a Response resulting in a redirect to the specified URL.	https://developer.mozilla.org/en-US/docs/Web/API/Response/redirect
Response.redirected	A										<pre><code>var isRedirected = Response.redirected;</code></pre>The read-only redirected property of the Response interface indicates whether or not the response is the result of a request you made which was redirected.	https://developer.mozilla.org/en-US/docs/Web/API/Response/redirected
Response()	A										<pre><code>var myResponse = new Response(body, init);</code></pre>The Response() constructor creates a new Response object.	https://developer.mozilla.org/en-US/docs/Web/API/Response/Response
Response.status	A										<pre><code>var myStatus = response.status;</code></pre>The status read-only property of the Response interface contains the status code of the response (e.g., 200 for a success).	https://developer.mozilla.org/en-US/docs/Web/API/Response/status
Response.statusText	A										<pre><code>var myStatusText = response.statusText;</code></pre>The statusText read-only property of the Response interface contains the status message corresponding to the status code (e.g., OK for 200).	https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText
Response.type	A										<pre><code>var myType = response.type;</code></pre>The type read-only property of the Response interface contains the type of the response. It can be one of the following:	https://developer.mozilla.org/en-US/docs/Web/API/Response/type
Response.url	A										<pre><code>var myURL = response.url;</code></pre>The url read-only property of the Response interface contains the URL of the response.	https://developer.mozilla.org/en-US/docs/Web/API/Response/url
RTCCertificate	A										The interface of the the WebRTC API provides an object represents a certificate that an RTCPeerConnection uses to authenticate.	https://developer.mozilla.org/en-US/docs/Web/API/RTCCertificate
RTCConfiguration	A										The RTCConfiguration dictionary is used to provide configuration options for an RTCPeerConnection. It may be passed into the constructor when instantiating a connection, or used with the RTCPeerConnection.getConfiguration() and RTCPeerConnection.setConfiguration() methods, which allow inspecting and changing the configuration while a connection is established.	https://developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration
RTCDataChannel	A										The RTCDataChannel interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data. Every data channel is associated with an RTCPeerConnection, and each peer connection can have up to a theoretical maximum of 65,534 data channels (the actual limit may vary from browser to browser).	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel
RTCDataChannel.binaryType	A										<pre><code>var type = aDataChannel.binaryType;\n\naDataChannel.binaryType = type; \n</code></pre>The property binaryType on the RTCDataChannel interface is a DOMString which specifies the type of JavaScript object which should be used to represent binary data received on the RTCDataChannel. Values allowed by the WebSocket.binaryType property are also permitted here: "blob" if Blob objects are being used or "arraybuffer" if ArrayBuffer objects are being used. The default is "blob".	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/binaryType
RTCDataChannel.bufferedAmount	A										<pre><code>var amount = aDataChannel.bufferedAmount;\n</code></pre>The read-only RTCDataChannel property bufferedAmount returns the number of bytes of data currently queued to be sent over the data channel.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmount
RTCDataChannel.bufferedAmountLowThreshold	A										<pre><code>var threshold = aDataChannel.bufferedAmountLowThreshold;\n\naDataChannel.bufferedAmountLowThreshold = threshold;\n</code></pre>The RTCDataChannel property bufferedAmountLowThreshold is used to specify the number of bytes of buffered outgoing data that is considered "low." The default value is 0 (meaning no bufferedamountlow events are sent).	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold
RTCDataChannel.close()	A										<pre><code>RTCDataChannel.close();\n</code></pre>The RTCDataChannel.close() method closes the RTCDataChannel. Either peer is permitted to call this method to initiate closure of the channel.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/close
RTCDataChannel.id	A										<pre><code>var id = aDataChannel.id;\n</code></pre>The read-only RTCDataChannel property id returns an ID number (between 0 and 65,534) which uniquely identifies the RTCDataChannel.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/id
RTCDataChannel.label	A										<pre><code>var name = aDataChannel.label;\n</code></pre>The read-only RTCDataChannel property label returns a DOMString containing a name describing the data channel. These labels are not required to be unique.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/label
RTCDataChannel.maxPacketLifeTime	A										<pre><code>var lifetime = aDataChannel.maxPacketLifeTime;\n</code></pre>The read-only RTCDataChannel property maxPacketLifeTime returns the amount of time, in milliseconds, the browser is allowed to take to attempt to transmit a message, as set when the data channel was created, or null.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxPacketLifeTime
RTCDataChannel.maxRetransmits	A										<pre><code>var tries = aDataChannel.maxRetransmits;\n</code></pre>The read-only RTCDataChannel property maxRetransmits returns the maximum number of times the browser should try to transmit a message before giving up when in unordered mode, as set when the data channel was created, or null, which indicates that there is no maximum.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxRetransmits
RTCDataChannel.negotiated	A										<pre><code>var negotiated = aDataChannel.negotiated;\n</code></pre>The read-only RTCDataChannel property negotiated indicates whether the RTCDataChannel 's connection was negotiated by the Web app (true) or by the WebRTC layer (false). The default is false.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/negotiated
RTCDataChannel.onbufferedamountlow	A										<pre><code>RTCDataChannel.onbufferedamountlow = function;</code></pre>The RTCDataChannel.onbufferedamountlow property is an EventHandler which specifies a function the browser calls when the bufferedamountlow event is sent to the RTCDataChannel. This event, which is represented by a simple Event object, is sent when the amount of data buffered to be sent falls to or below the threshold specified by the channel's bufferedAmountLowThreshold.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onbufferedamountlow
RTCDataChannel.onclose	A										<pre><code>RTCDataChannel.onclose = function;</code></pre>The RTCDataChannel.onclose property is an EventHandler which specifies a function to be called by the browser when the close event is received by the RTCDataChannel. This is a simple Event which indicates that the data channel has closed down.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclose
RTCDataChannel.onerror	A										<pre><code>RTCDataChannel.onerror = function;</code></pre>The RTCDataChannel.onerror property is an EventHandler which specifies a function to be called when the error event is received. When an error occurs on the data channel, the function receives as input an ErrorEvent object describing the error which occurred.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onerror
RTCDataChannel.onmessage	A										<pre><code>RTCDataChannel.onmessage = function;</code></pre>The RTCDataChannel.ommessage property stores an EventHandler which specifies a function to be called when the message event is fired on the channel. This event is represented by the MessageEvent interface. This event is sent to the channel when a message is received from the other peer.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage
RTCDataChannel.onopen	A										<pre><code>RTCDataChannel.onopen = function;</code></pre>The RTCDataChannel.onopen property is an EventHandler which specifies a function to be called when the open event is fired; this is a simple Event which is sent when the data channel's underlying data transport—the link over which the RTCDataChannel 's messages flow—is established or re-established.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onopen
RTCDataChannel.ordered	A										<pre><code>var ordered = aDataChannel.ordered;\n</code></pre>The read-only RTCDataChannel property ordered indicates whether or not the data channel guarantees in-order delivery of messages; the default is true, which indicates that the data channel is indeed ordered.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/ordered
RTCDataChannel.protocol	A										<pre><code>var subProtocol = aDataChannel.protocol;\n</code></pre>The read-only RTCDataChannel property protocol returns a DOMString containing the name of the subprotocol in use. If no protocol was specified when the data channel was created, then this property's value is "" (the empty string).	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/protocol
RTCDataChannel.readyState	A										<pre><code>var state = aDataChannel.readyState;\n</code></pre>The read-only RTCDataChannel property readyState returns an enum of type RTCDataChannelState which indicates the state of the data channel's underlying data connection.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/readyState
RTCDataChannel.send()	A										<pre><code>RTCDataChannel.send(data);\n</code></pre>The send() method of the RTCDataChannel interface sends data across the data channel to the remote peer.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send
RTCDataChannelEvent	A										The RTCDataChannelEvent() constructor returns a new RTCDataChannelEvent object, which represents a datachannel event. These events sent to an RTCPeerConnection when its remote peer is asking to open an RTCDataChannel between the two peers.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent
RTCDataChannelEvent.channel	A										<pre><code> var channel = RTCDataChannelEvent.channel;</code></pre>The read-only property RTCDataChannelEvent.channel returns the RTCDataChannel associated with the event.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent/channel
RTCDataChannelEvent()	A										<pre><code> var event = new RTCDataChannelEvent(type, rtcDataChannelEventInit);</code></pre>The RTCDataChannelEvent() constructor creates a new RTCDataChannelEvent.	https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent/RTCDataChannelEvent
RTCIceCandidate	A										The RTCIceCandidate interface of the the WebRTC API represents a candidate internet connectivity establishment (ICE) server for establishing an RTCPeerConnection.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate
RTCIceServer	A										The RTCIceServer dictionary defines how to connect to a single ICE server (such as a STUN or TURN server). It includes both the URL and the necessary credentials, if any, to connect to the server.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer
RTCIceServer.credential	A										<pre><code>var iceServer = {\n                  ...\n                  credential = credential,\n                  ...\n                };\n\nvar credential = iceServer.credential;\n\niceServer.credential = newCredential;</code></pre>The RTCIceServer dictionary's credential property is a string providing the credential to use when connecting to the described server. This is typically a password, key, or other secret.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credential
RTCIceServer.credentialType	A										<pre><code>var iceServer = {\n                  ...\n                  credentialType = ["password" | "token"],\n                  ...\n                };\n\nvar credential = iceServer.credentialType;\n\niceServer.credential = ["password" | "token"];</code></pre>The RTCIceServer dictionary's credentialType property is a string value from the RTCIceCredentialType enum which indicates what type of credential the RTCIceServer.credential value is. The default is "password".	https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credentialType
RTCIceServers.urls	A										<pre><code>var iceServer = {\n                  ...\n                  urls = iceServerUrl | [ url1, ..., urlN ],\n                  ...\n                };\n\nvar serverUrls = iceServer.urls;\n\niceServer.urls = iceServerUrl | [ url1, ..., urlN ];</code></pre>The RTCIceServer dictionary's urls property specifies the URL or URLs of the servers to be used for ICE negotiations. These are typically STUN and/or TURN servers.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/urls
RTCIceServer.username	A										<pre><code>var iceServer = {\n                  ...\n                  username = username,\n                  ...\n                };\n\nvar username = iceServer.username;\n\niceServer.username = newUsername;</code></pre>The RTCIceServer dictionary's username property is a string which specifies the username to use when authenticating with the ICE server being described.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/username
RTCIdentityAssertion	A										The RTCIdentityAssertion interface of the the WebRTC API represents the identity of the a remote peer of the current connection. If no peer has yet been set and verified this interface returns null. Once set it can't be changed.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityAssertion
RTCIdentityErrorEvent	A										The RTCIdentityErrorEvent interface represents an error associated with the identity provider (idP). This is usually for an RTCPeerConnection. Two events are sent with this type: idpassertionerror and idpvalidationerror.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityErrorEvent
RTCIdentityErrorEvent.idp	A										<pre><code>var idp = event.idp;\nevent.idp = "developer.mozilla.org";\n</code></pre>The read-only property RTCIdentityErrorEvent.idp returns the DOMString describing the domain name of the identity provider (idp) generating the error response event.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityErrorEvent/idp
rtcidentityerrorevent idp	R	RTCIdentityErrorEvent.idp										
RTCIdentityErrorEvent.loginUrl	A										<pre><code>var loginUrl = event.loginUrl;\nevent.loginUrl = "https://developer.mozilla.org/fakeURL";\n</code></pre>The read-only property RTCIdentityErrorEvent.loginUrl is a DOMString giving the URL where the user can complete the authentication. It can be null and is provided by the identity provider (idp).	https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityErrorEvent/loginUrl
rtcidentityerrorevent loginurl	R	RTCIdentityErrorEvent.loginUrl										
RTCIdentityErrorEvent.protocol	A										<pre><code>var protocol = event.protocol;\nevent.protocol = "idp.html";\n</code></pre>The read-only property RTCIdentityErrorEvent.protocol is a DOMString describing the Idp protocol in use.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityErrorEvent/protocol
rtcidentityerrorevent protocol	R	RTCIdentityErrorEvent.protocol										
RTCIdentityEvent	A										The RTCIdentityEvent interface represents an identity assertion generated by an identity provider (idP). This is usually for an RTCPeerConnection. The only event sent with this type is identityresult..	https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityEvent
RTCIdentityEvent.assertion	A										<pre><code> var blob = event.assertion;</code></pre>The read-only property RTCIdentityEvent.assertion returns the DOMString containing a blob being the coded assertion associated with the event.	https://developer.mozilla.org/en-US/docs/Web/API/RTCIdentityEvent/assertion
RTCPeerConnection	A										The RTCPeerConnection interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection
RTCPeerConnection.addIceCandidate()	A										<pre><code>aPromise = pc.addIceCandidate(candidate);\n\naddIceCandidate(candidate, successCallback, failureCallback);  \n</code></pre>When a web site or app using RTCPeerConnection receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser's ICE agent by calling RTCPeerConnection.addIceCandidate().	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate
RTCPeerConnection.addStream()	A										<pre><code>pc.addStream(mediaStream);</code></pre>The RTCPeerConnection.addStream() method adds a MediaStream as a local source of audio or video. If the negotiation already happened, a new one will be needed for the remote peer to be able to use it.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addStream
RTCPeerConnection.addTrack()	A										<pre><code>rtpSender = RTCPeerConnection.addTrack(track, stream...);</code></pre>The RTCPeerConnection method addTrack() adds a new media track to the connection. The track is added to the set of tracks which will be transmitted to the other peer.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addTrack
RTCPeerConnection.canTrickleIceCandidates	A										<pre><code> var canTrickle = RTCPeerConnection.canTrickleIceCandidates;</code></pre>The read-only property RTCPeerConnection.canTrickleIceCandidates returns a Boolean which indicates whether or not the remote peer can accept trickled ICE candidates.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates
RTCPeerConnection.close()	A										<pre><code>peerConnection.close();\n</code></pre>The RTCPeerConnection.close() method closes the current peer connection.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/close
RTCPeerConnection.connectionState	A										<pre><code>var connectionState = RTCPeerConnection.connectionState;</code></pre>The read-only connectionState property of the RTCPeerConnection interface indicates the current state of the peer connection by returning one of the string values specified by the enum RTCPeerConnectionState.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionState
RTCPeerConnection.createAnswer()	A										<pre><code>aPromise = RTCPeerConnection.createAnswer([options]);\n\nRTCPeerConnection.createAnswer(successCallback, failureCallback[, options]);  </code></pre>The createAnswer() method on the RTCPeerConnection interface creates an answer to an offer received from a remote peer during the offer/answer negotiation of a WebRTC connection. Once the answer is created, it should be sent to the source of the offer to continue the negotiation process.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer
RTCPeerConnection.createDataChannel()	A										<pre><code>dataChannel = RTCPeerConnection.createDataChannel(label[, options]);</code></pre>The createDataChannel() method on the RTCPeerConnection interface creates a new channel over which any kind of data may be transmitted. This can be useful for back-channel content such as images, file transfer, text chat, game update packets, and so forth.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel
RTCPeerConnection.createOffer()	A										<pre><code>aPromise = myPeerConnection.createOffer([options]);\n\nmyPeerConnection.createOffer(successCallback, failureCallback[, options])  \n</code></pre>The createOffer() method of the RTCPeerConnection interface initiates the creation of an SDP offer which includes information about any MediaStreamTrack s already attached to the WebRTC session, codec and options supported by the browser, and any candidates already gathered by the ICE agent, for the purpose of being sent over the signaling channel to a potential peer to request a connection or to update the configuration of an existing connection.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer
RTCPeerConnection.currentLocalDescription	A										<pre><code> var sessionDescription = peerConnection.currentLocalDescription;</code></pre>The read-only property RTCPeerConnection.currentLocalDescription returns an RTCSessionDescription object describing the local end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/currentLocalDescription
RTCPeerConnection.currentRemoteDescription	A										<pre><code> var sessionDescription = peerConnection.currentRemoteDescription;</code></pre>The read-only property RTCPeerConnection.currentRemoteDescription returns an RTCSessionDescription object describing the remote end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/currentRemoteDescription
RTCPeerConnection.defaultIceServers	A										<pre><code> var defaultIceServers = RTCPeerConnection.defaultIceServers;</code></pre>The read-only property RTCPeerConnection.defaultIceServers returns an array of objects based on the RTCIceServer dictionary, which indicates what—if any—ICE servers the browser will use by default if none are provided to the RTCPeerConnection in its RTCConfiguration. However, browsers are not required to provide any default ICE servers at all.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/defaultIceServers
RTCPeerConnection.generateCertificate()	A										<pre><code>var cert = RTCPeerConnection.generateCertificate(keygenAlgorithm)</code></pre>The generateCertificate() method of the RTCPeerConnection interface creates and stores an X.509 certificate and corresponding private key then returns an RTCCertificate, providing access to it.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/generateCertificate
RTCPeerConnection.getConfiguration()	A										<pre><code>configuration = RTCPeerConnection.getConfiguration();</code></pre>The RTCPeerConnection.getConfiguration() method returns a RTCConfiguration object which indicates the current configuration of the RTCPeerConnection on which the method is called.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getConfiguration
RTCPeerConnection.getIdentityAssertion()	A										<pre><code>pc.getIdentityAssertion();\n</code></pre>The RTCPeerConnection.getIdentityAssertion() method initiates the gathering of an identity assertion. This has an effect only if the signalingState is not "closed".	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getIdentityAssertion
RTCPeerConnection.getLocalStreams()	A										<pre><code>var mediaStreams[] = pc.getLocalStream();\n</code></pre>The RTCPeerConnection.getLocalStreams() method returns an array of MediaStream associated with the local end of the connection. The array may be empty.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getLocalStreams
RTCPeerConnection.getRemoteStreams()	A										<pre><code>var mediaStreams[] = pc.getRemoteStream();\n</code></pre>The RTCPeerConnection.getRemoteStreams() method returns an array of MediaStream associated with the remote end of the connection. The array may be empty.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getRemoteStreams
RTCPeerConnection.getStreamById()	A										<pre><code>var mediaStream = pc.getStream(id);\n</code></pre>The RTCPeerConnection.getStreamById() method returns the MediaStream with the given id that is associated with local or remote end of the connection. If no stream matches, it returns null.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getStreamById
RTCPeerConnection.iceConnectionState	A										<pre><code> var state = peerConnection.iceConnectionState;</code></pre>The read-only property RTCPeerConnection.iceConnectionState returns an enum of type RTCIceConnectionState which state of the ICE agent associated with the RTCPeerConnection.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState
RTCPeerConnection.iceGatheringState	A										<pre><code> var state = RTCPeerConnection.iceGatheringState;</code></pre>The read-only property RTCPeerConnection.iceGatheringState returns an enum of type RTCIceGatheringState that describes connection's ICE gathering state. This lets you detect, for example, when collection of ICE candidates has finished.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceGatheringState
RTCPeerConnection.localDescription	A										<pre><code> var sessionDescription = peerConnection.localDescription;</code></pre>The read-only property RTCPeerConnection.localDescription returns an RTCSessionDescription describing the session for the local end of the connection. If it has not yet been set, this is null.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/localDescription
RTCPeerConnection.onaddstream	A										<pre><code>RTCPeerConnection.onaddstream = eventHandler;\n</code></pre>The RTCPeerConnection.onaddstream event handler is a property containing the code to execute when the addstream event, of type MediaStreamEvent, is received by this RTCPeerConnection. Such an event is sent when a MediaStream is added to this connection by the remote peer. The event is sent immediately after the call setRemoteDescription() and doesn't wait for the result of the SDP negotiation.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onaddstream
RTCPeerConnection.onconnectionstatechange	A										<pre><code>RTCPeerConnection.onconnectionstatechange = eventHandler;\n</code></pre>The RTCPeerConnection.onconnectionstatechange property specifies an EventHandler which is called to handle the connectionstatechange event when it occurs on an instance of RTCPeerConnection. This happens whenever the aggregate state of the connection changes.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onconnectionstatechange
RTCPeerConnection.ondatachannel	A										<pre><code>RTCPeerConnection.ondatachannel = function;\n</code></pre>The RTCPeerConnection.ondatachannel property is an EventHandler which specifies a function which is called when the datachannel event occurs on an RTCPeerConnection. This event, of type RTCDataChannelEvent, is sent when an RTCDataChannel is added to the connection by the remote peer calling createDataChannel().	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel
RTCPeerConnection.onicecandidate	A										<pre><code>RTCPeerConnection.onicecandidate = eventHandler;\n</code></pre>The RTCPeerConnection.onicecandidate property is an EventHandler which specifies a function to be called when the icecandidate event occurs on an RTCPeerConnection instance. This happens whenever the local ICE agent needs to deliver a message to the other peer through the signaling server.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate
RTCPeerConnection.onicecandidateerror	A										<pre><code>RTCPeerConnection.onicecandidateerror = eventHandler;\n</code></pre>The RTCPeerConnection.onicecandidateerror property is an EventHandler which specifies a function which is called to handle the icecandidateerror event when it occurs on an RTCPeerConnection instance. This event is fired when an error occurs during the ICE candidate gathering process.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidateerror
RTCPeerConnection.oniceconnectionstatechange	A										<pre><code>RTCPeerConnection.oniceconnectionstatechange = eventHandler;\n</code></pre>The RTCPeerConnection.oniceconnectionstatechange property is an event handler which specifies a function to be called when the iceconnectionstatechange event is fired on an RTCPeerConnection instance. This happens when the state of the connection's ICE agent, as represented by the iceConnectionState property, changes.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange
RTCPeerConnection.onicegatheringstatechange	A										<pre><code>RTCPeerConnection.onicegatheringstatechange = eventHandler;\n</code></pre>The RTCPeerConnection.onicegatheringstatechange property is an EventHandler which specifies a function to be called when the icegatheringstatechange event is sent to an RTCPeerConnection instance. This happens when the ICE gathering state—that is, whether or not the ICE agent is actively gathering candidates—changes.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange
RTCPeerConnection.onidentityresult	A										<pre><code>peerconnection.onidentityresult = function;\n</code></pre>The RTCPeerConnection.onidentityresult event handler is a property containing the code to execute when the identityresult event, of type RTCIdentityEvent, is received by this RTCPeerConnection. Such an event is sent when an identity assertion is generated, via getIdentityAssertion() or during the creation of an offer or an answer.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidentityresult
RTCPeerConnection.onidpassertionerror	A										<pre><code>peerconnection.onidpassertionerror = function;\n</code></pre>The RTCPeerConnection.onidpassertionerror event handler is a property containing the code to execute whent the idpassertionerror event, of type RTCIdentityErrorEvent, is received by this RTCPeerConnection. Such an event is sent when the associated identity provider (IdP) encounters an error while generating an identity assertion.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpassertionerror
RTCPeerConnection.onidpvalidationerror	A										<pre><code>peerconnection.onidpvalidationerror = function;\n</code></pre>The RTCPeerConnection.onidpvalidationerror event handler is a property containing the code to execute whent the idpvalidationerror event, of type RTCIdentityErrorEvent, is received by this RTCPeerConnection. Such an event is sent when the associated identity provider (IdP) encounters an error while validating an identity assertion.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpvalidationerror
RTCPeerConnection.onnegotiationneeded	A										<pre><code>RTCPeerConnection.onnegotiationneeded = eventHandler;\n</code></pre>The RTCPeerConnection.onnegotiationneeded property is an EventHandler which specifies a function which is called to handle the negotiationneeded event when it occurs on an RTCPeerConnection instance. This event is fired when a change has occurred which requires session negotiation.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded
RTCPeerConnection.onpeeridentity	A										<pre><code>peerconnection.onpeeridentity = function;\n</code></pre>The RTCPeerConnection.onpeeridentity event handler is a property containing the code to execute whent the peeridentity event, of type Event, is received by this RTCPeerConnection. Such an event is sent when an identity assertion, received from a peer, has been successfully validated.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onpeeridentity
RTCPeerConnection.onremovestream	A										<pre><code>peerconnection.onremovestream = function;\n</code></pre>The RTCPeerConnection.onremovestream event handler is a property containing the code to execute when the removestream event, of type MediaStreamEvent, is received by this RTCPeerConnection. Such an event is sent when a MediaStream is removed from this connection.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onremovestream
RTCPeerConnection.onsignalingstatechange	A										<pre><code>RTCPeerConnection.onsignalingstatechange = errorHandler;\n</code></pre>The RTCPeerConnection.onsignalingstatechange property is an EventHandler which specifies a function to be called when the signalingstatechange event occurs on an RTCPeerConnection interface. The function receives as input the event object, of type Event ; this event is sent when the value of RTCPeerConnection.signalingState changes, as the result of a call to either setLocalDescription() or setRemoteDescription().	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange
RTCPeerConnection.ontrack	A										<pre><code>RTCPeerConnection.ontrack = errorHandler;\n</code></pre>The RTCPeerConnection.ontrack property is an EventHandler which specifies a function to be called when the track event occurs on an RTCPeerConnection interface. The function receives as input the event object, of type RTCTrackEvent ; this event is sent when a new incoming MediaStreamTrack has been created and associated with an RTCRtpReceiver object which has been added to the set of receivers on connection.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack
RTCPeerConnection.peerIdentity	A										<pre><code> var identity = peerConnection.peerIdentity;</code></pre>The read-only property RTCPeerConnection.peerIdentity returns an RTCIdentityAssertion, containing a DOMString once set and verified. If no peer has yet been set and verified, this property will return null. Once set, via the appropriate method, it can't be changed.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/peerIdentity
RTCPeerConnection.pendingLocalDescription	A										<pre><code> var sessionDescription = peerConnection.pendingLocalDescription;</code></pre>The read-only property RTCPeerConnection.pendingLocalDescription returns an RTCSessionDescription object describing a pending configuration change for the local end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentLocalDescription or RTCPeerConnection.localDescription to get the current state of the endpoint. For details on the difference, see " Pending and current descriptions " in WebRTC connectivity.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/pendingLocalDescription
RTCPeerConnection.pendingRemoteDescription	A										<pre><code> var sessionDescription = peerConnection.pendingRemoteDescription;</code></pre>The read-only property RTCPeerConnection.pendingRemoteDescription returns an RTCSessionDescription object describing a pending configuration change for the remote end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentRemoteDescription or RTCPeerConnection.remoteDescription to get the current session description for the remote endpoint. For details on the difference, see " Pending and current descriptions " in WebRTC connectivity.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/pendingRemoteDescription
RTCPeerConnection.remoteDescription	A										<pre><code> var sessionDescription = peerConnection.remoteDescription;</code></pre>The read-only property RTCPeerConnection.remoteDescription returns a RTCSessionDescription describing the session (which includes configuration and media information) for the remote end of the connection. If this hasn't been set yet, this is null.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/remoteDescription
RTCPeerConnection.removeStream()	A										<pre><code>pc.removeStream(mediaStream);\n</code></pre>The RTCPeerConnection.removeStream() method removes a MediaStream as a local source of audio or video. If the negotiation already happened, a new one will be needed for the remote peer to be able to use it.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/removeStream
removeTrack	A										<pre><code>pc.removeTrack(sender);\n</code></pre>The RTCPeerConnection.removeTrack() method tells the local end of the connection to stop sending media from the specified track, without actually removing the corresponding RTCRtpSender from the list of senders as reported by RTCPeerConnection.getSenders(). If the track is already stopped, or is not in the connection's senders list, this method has no effect.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/removeTrack
RTCPeerConnection()	A										<pre><code>pc = new RTCPeerConnection([configuration]);</code></pre>The RTCPeerConnection() constructor returns a newly-created RTCPeerConnection, which represents a connection between the local device and a remote peer.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection
RTCPeerConnection.sctp	A										<pre><code>var sctp = RTCPeerConnection.sctp;</code></pre>The read-only sctp property on the RTCPeerConnection interface returns an RTCSctpTransport describing the SCTP transport over which SCTP data is being sent and received. If SCTP hasn't been negotiated, this value is null.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/sctp
RTCPeerConnection.setConfiguration()	A										<pre><code>RTCPeerConnection.setConfiguration(configuration);</code></pre>The RTCPeerConnection.setConfiguration() method sets the current configuration of the RTCPeerConnection based on the values included in the specified RTCConfiguration object. This lets you change the ICE servers used by the connection and which transport policies to use.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setConfiguration
RTCPeerConnection.setIdentityProvider()	A										<pre><code>pc.setIdentityProvider(domainname [, protocol] [, username]);\n</code></pre>The RTCPeerConnection.setIdentityProvider() method sets the Identity Provider (IdP) to the triplet given in parameter: its name, the protocol used to communicate with it (optional) and an optional username. The IdP will be used only when an assertion is needed.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setIdentityProvider
RTCPeerConnection.setLocalDescription()	A										<pre><code>aPromise = pc.setLocalDescription(sessionDescription);\n\npc.setLocalDescription(sessionDescription, successCallback, errorCallback);  \n</code></pre>The RTCPeerConnection.setLocalDescription() method changes the local description associated with the connection. This description specifies the properties of the local end of the connection, including the media format.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription
RTCPeerConnection.setRemoteDescription()	A										<pre><code>aPromise = pc.setRemoteDescription(sessionDescription);\n\npc.setRemoteDescription(sessionDescription, successCallback, errorCallback);  \n</code></pre>The RTCPeerConnection.setRemoteDescription() method changes the remote description associated with the connection. This description specifies the properties of the remote end of the connection, including the media format.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription
RTCPeerConnection.signalingState	A										<pre><code> var state = RTCPeerConnection.signalingState;</code></pre>The read-only signalingState property on the RTCPeerConnection interface returns one of the string values specified by the RTCSignalingState enum; these values describe the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer. See " Signaling " in Lifetime of a WebRTC session for more details about the signaling process.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/signalingState
RTCPeerConnectionIceEvent	A										The RTCPeerConnectionIceEvent interface represents events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent
RTCPeerConnectionIceEvent.candidate	A										<pre><code> var candidate = event.candidate;</code></pre>The read-only property RTCPeerConnectionIceEvent.candidate returns the RTCIceCandidate associated with the event.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent/candidate
RTCPeerConnectionIceEvent()	A										<pre><code> var event = new RTCPeerConnectionIceEvent(type, options);</code></pre>The RTCPeerConnectionIceEvent() constructor creates a new RTCPeerConnectionIceEvent.	https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent/RTCPeerConnectionIceEvent
RTCSctpTransport	A										The RTCSctpTransport interface provides information which describes a Stream Control Transmission Protocol (SCTP) transport. This provides information about limitations of the transport, but also provides a way to access the underlying Datagram Transport Layer Security (DTLS) transport over which SCTP packets for all of an RTCPeerConnection 's data channels are sent and received.	https://developer.mozilla.org/en-US/docs/Web/API/RTCSctpTransport
RTCSessionDescription	A										The RTCSessionDescription interface represents the parameters of a session. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.	https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription
RTCSessionDescription()	A										<pre><code> sessionDescription = new RTCSessionDescription(rtcSessionDescriptionInit);</code></pre>The RTCSessionDescription() constructor creates a new RTCSessionDescription.	https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/RTCSessionDescription
RTCSessionDescription.sdp	A										<pre><code>var value = sessionDescription.sdp;\nsessionDescription.sdp = value; \n</code></pre>The property RTCSessionDescription.sdp is a read-only DOMString containing the SDP which describes the session.	https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/sdp
RTCSessionDescription.toJSON()	A										<pre><code>var jsonValue = sd.toJSON();\n</code></pre>The RTCPeerConnection.toJSON() method generates a JSON description of the object. Both properties, type and sdp, are contained in the generated JSON.	https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/toJSON
RTCSessionDescription.type	A										<pre><code>var value = sessionDescription.type;\nsessionDescription.type = value; \n</code></pre>The property RTCSessionDescription.type is a read-only value of type RTCSdpType which describes the description's type.	https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/type
RTCStatsReport	A										WebRTC provides a method— RTCPeerConnection.getStats() —which returns a set of statistics about the state of the connection and the data transfers which have taken place. This status report is an object of type RTCStatsReport, and consists of a mapping of strings identifying objects which have had statistics recorded and a dictionary containing all of the corresponding data.	https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport
Screen	A										The Screen interface represents a screen, usually the one on which the current window is being rendered.	https://developer.mozilla.org/en-US/docs/Web/API/Screen
Screen.availHeight	A										<pre><code>iAvail = window.screen.availHeight</code></pre>Returns the amount of vertical space available to the window on the screen.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/availHeight
Screen.availLeft	A										<pre><code>iAvail = window.screen.availLeft\n</code></pre>Returns the first available pixel available from the left side of the screen.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/availLeft
Screen.availTop	A										<pre><code>iAvail = window.screen.availTop\n</code></pre>Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/availTop
Screen.availWidth	A										<pre><code>window.screen.availWidth</code></pre>Returns the amount of horizontal space in pixels available to the window.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/availWidth
Screen.colorDepth	A										<pre><code>bitDepth = window.screen.colorDepth\n</code></pre>Returns the color depth of the screen. Per CSSOM View, the value is always 24, for compatibility reasons.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/colorDepth
Screen.height	A										<pre><code>iHeight = window.screen.height\n</code></pre>Returns the height of the screen in pixels.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/height
Screen.left	A										<pre><code>varleft = window.screen.left;\n</code></pre>Returns the distance in pixels from the left side of the main screen to the left side of the current screen.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/left
Screen.lockOrientation()	A										<pre><code>lockedAllowed = window.screen.lockOrientation(orientation);</code></pre>The lockOrientation method locks the screen into the specified orientation.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation
Screen.mozBrightness	A										<pre><code>screenBrightness = window.screen.mozBrightness;</code></pre>Indicates how bright the screen's backlight is, on a scale from 0 (very dim) to 1 (full brightness); this value is a double-precision float.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozBrightness
Screen.mozEnabled	A										<pre><code>screenEnabled = window.screen.mozEnabled</code></pre>This Boolean attribute controls the device's screen. Setting it to false will turn off the screen.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozEnabled
Screen.onorientationchange	A										<pre><code>screen.onorientationchange = funcRef;\n</code></pre>An event handler for the orientationchange events sent to the screen object.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/onorientationchange
Screen.orientation	A										<pre><code>var orientation = window.screen.orientation;\n</code></pre>The Screen.orientation property give the current orientation of the screen.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation
Screen.pixelDepth	A										<pre><code>depth = window.screen.pixelDepth\n</code></pre>Returns the bit depth of the screen. Per CSSOM View, the value is always 24, for compatibility reasons.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/pixelDepth
Screen.top	A										<pre><code>iTop = window.screen.top\n</code></pre>Returns the distance in pixels from the top side of the current screen.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/top
Screen.unlockOrientation()	A										<pre><code>var unlocked = window.screen.unlockOrientation();\n</code></pre>The Screen.unlockOrientation method removes all the previous screen locks set by the page/app.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/unlockOrientation
Screen.width	A										<pre><code>lWidth = window.screen.width\n</code></pre>Returns the width of the screen.	https://developer.mozilla.org/en-US/docs/Web/API/Screen/width
ScriptProcessorNode	A										The size of the input and output buffer are defined at the creation time, when the AudioContext.createScriptProcessor() method is called (both are defined by AudioContext.createScriptProcessor() 's bufferSize parameter). The buffer size must be a power of 2 between 256 and 16384, that is 256, 512, 1024, 2048, 4096, 8192 or 16384. Small numbers lower the latency, but large number may be necessary to avoid audio breakup and glitches.	https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode
ScriptProcessorNode.bufferSize	A										<pre><code>var audioCtx = new AudioContext();\nvar scriptNode = audioCtx.createScriptProcessor(4096, 1, 1);\nconsole.log(scriptNode.bufferSize);</code></pre>The following example shows basic usage of a ScriptProcessorNode to take a track loaded via AudioContext.decodeAudioData, process it, adding a bit of white noise to each audio sample of the input track (buffer) and play it through the AudioDestinationNode. For each channel and each sample frame, the scriptNode.onaudioprocess function takes the associated audioProcessingEvent and uses it to loop through each channel of the input buffer, and each sample in each channel, and add a small amount of white noise, before setting that result to be the output sample in each case.	https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/bufferSize
ScriptProcessorNode.onaudioprocess	A										<pre><code>var audioCtx = new AudioContext();\nvar scriptNode = audioCtx.createScriptProcessor(4096, 1, 1);\nscriptNode.onaudioprocess = function() { ... }</code></pre>The following example shows basic usage of a ScriptProcessorNode to take a track loaded via AudioContext.decodeAudioData, process it, adding a bit of white noise to each audio sample of the input track (buffer) and play it through the AudioDestinationNode. For each channel and each sample frame, the scriptNode.onaudioprocess function takes the associated audioProcessingEvent and uses it to loop through each channel of the input buffer, and each sample in each channel, and add a small amount of white noise, before setting that result to be the output sample in each case.	https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess
Selection	A										Calling the Selection.toString() method returns the text contained in the selection, e.g.:	https://developer.mozilla.org/en-US/docs/Web/API/Selection
Selection.addRange()	A										<pre><code>sel.addRange(range)</code></pre>The Selection.addRange() method adds a Range to a Selection.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/addRange
Selection.anchorNode	A										<pre><code>node =\n sel.anchorNode</code></pre>The Selection.anchorNode read-only property returns the Node in which the selection begins.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorNode
Selection.anchorOffset	A										<pre><code>number = sel.anchorOffset</code></pre>The Selection.anchorOffset read-only property returns the number of characters that the selection's anchor is offset within the Selection.anchorNode.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorOffset
Selection.collapse()	A										<pre><code>sel.collapse(parentNode, offset);\n</code></pre>The Selection.collapse() method collapses the current selection to a single point. The document is not modified. If the content is focused and editable, the caret will blink there.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapse
Selection.collapseToEnd()	A										<pre><code>sel.collapseToEnd()\n</code></pre>The Selection.collapseToEnd() method collapses the selection to the end of the last range in the selection.  If the content of the selection is focused and editable, the caret will blink there.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToEnd
Selection.collapseToStart()	A										<pre><code>sel.collapseToStart()\n</code></pre>The Selection.collapseToStart() method collapses the selection to the start of the first range in the selection.  If the content of the selection is focused and editable, the caret will blink there.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToStart
Selection.containsNode()	A										<pre><code>sel.containsNode(aNode,aPartlyContained)\n</code></pre>The Selection.containsNode() method indicates if the node is part of the selection.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/containsNode
Selection.deleteFromDocument()	A										<pre><code>sel.deleteFromDocument()\n</code></pre>The Selection.deleteFromDocument() method deletes the actual text being represented by a selection object from the document's DOM.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/deleteFromDocument
Selection.extend()	A										<pre><code>sel.extend(parentNode, offset)\n</code></pre>The Selection.extend() method moves the focus of the selection to a specified point. The anchor of the selection does not move. The selection will be from the anchor to the new focus regardless of direction.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/extend
Selection.focusNode	A										<pre><code>node = sel.focusNode\n</code></pre>Selection.focusNode read-only property returns the Node, in which selection ends.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusNode
Selection.focusOffset	A										<pre><code>offset =\n sel.focusOffset\n</code></pre>The Selection.focusOffset read-only property returns the number of characters that the selection's focus is offset within the Selection.focusNode.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusOffset
Selection.getRangeAt()	A										<pre><code>range = sel.getRangeAt(index)\n</code></pre>The Selection.getRangeAt() method returns a range object representing one of the ranges currently selected.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/getRangeAt
Selection.isCollapsed	A										<pre><code>bool =\n sel.isCollapsed\n</code></pre>The Selection.isCollapsed read-only property returns a Boolean which indicates whether or not there is currently any text selected; That is to say that the selection's start and end points are at the same position in the content.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/isCollapsed
Selection.modify()	A										<pre><code>sel.modify(alter, direction, granularity)\n</code></pre>The Selection.modify() method applies a change to the current selection or cursor position, using simple textual commands.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/modify
Selection.rangeCount	A										<pre><code>value = sel.rangeCount\n</code></pre>The Selection.rangeCount read-only property returns the number of ranges in the selection.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/rangeCount
Selection.removeAllRanges()	A										<pre><code>sel.removeAllRanges();\n</code></pre>The Selection.removeAllRanges() method removes all ranges from the selection, leaving the anchorNode and focusNode properties equal to null and leaving nothing selected.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeAllRanges
Selection.removeRange()	A										<pre><code>sel.removeRange(\nrange)\n</code></pre>The Selection.removeRange() method removes a range from the selection.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeRange
Selection.selectAllChildren()	A										<pre><code>sel.selectAllChildren(parentNode)\n</code></pre>The Selection.selectAllChildren() method adds all the children of the specified node to the selection. Previous selection is lost.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/selectAllChildren
Selection.toString()	A										<pre><code>str =\n sel.toString()\n</code></pre>The Selection.toString() method returns a string currently being represented by the selection object, i.e. the currently selected text.	https://developer.mozilla.org/en-US/docs/Web/API/Selection/toString
Server-sent events	A										Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server. With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page. These incoming messages can be treated as Events + data inside the web page.	https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events
Using server-sent events	A										The server-sent event API is contained in the EventSource interface; to open a connection to the server to begin receiving events from it, create a new EventSource object specifying the URI of a script that generates the events. For example:	https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events
ServiceWorker	A										The ServiceWorker interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker
ServiceWorker.onstatechange	A										<pre><code>ServiceWorker.onstatechange = function(statechangeevent) { ... }\nServiceWorker.addEventListener('statechange',&#160;function(statechangeevent) { ... } )</code></pre>An EventListener property called whenever an event of type statechange is fired; it is basically fired anytime the ServiceWorker.state changes.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange
ServiceWorker.scriptURL	A										<pre><code>someURL = ServiceWorker.scriptURL \n</code></pre>Returns the ServiceWorker serialized script URL defined as part of ServiceWorkerRegistration. Must be on the same origin as the document that registers the ServiceWorker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL
ServiceWorker.state	A										<pre><code>someURL = ServiceWorker.state \n</code></pre>The state read-only property of the ServiceWorker interface returns a string representing the current state of the service worker. It can be one of the following values: installing, installed, activating, activated, or redundant.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state
ServiceWorkerContainer	A										The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer
ServiceWorkerContainer.controller	A										<pre><code>var myController = navigator.serviceWorker.controller;\n</code></pre>The controller read-only property of the ServiceWorkerContainer interface returns a ServiceWorker object if its state is activated (the same object returned by ServiceWorkerRegistration.active). This property returns null if the request is a force refresh (Shift + refresh) or if there is no active worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller
ServiceWorkerContainer.getRegistration()	A										<pre><code>ServiceWorkerContainer.getRegistration(scope).then(function(ServiceWorkerRegistration) { ... });</code></pre>The getRegistration() method of the ServiceWorkerContainer interface gets a ServiceWorkerRegistration object whose scope URL matches the provided document URL.  The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistration
ServiceWorkerContainer.getRegistrations()	A										<pre><code>ServiceWorkerContainer.getRegistrations().then(function(ServiceWorkerRegistrations) { ... });</code></pre>The getRegistrations() method of the ServiceWorkerContainer interface returns all ServiceWorkerRegistration s associated with a ServiceWorkerContainer in an array.  If the method can't return ServiceWorkerRegistration s, it returns a Promise.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistrations
ServiceWorkerContainer.oncontrollerchange	A										<pre><code>ServiceWorkerContainer.oncontrollerchange = function(controllerchangeevent) { ... }</code></pre>The oncontrollerchange property of the ServiceWorkerContainer interface is an event handler fired whenever a controllerchange event occurs — when the document's associated ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.active worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange
ServiceWorkerContainer.onerror	A										<pre><code>ServiceWorkerContainer.onerror = function(errorevent) { ... }</code></pre>The onerror property of the ServiceWorkerContainer interface is an event handler fired whenever an error event occurs in the associated service workers.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onerror
ServiceWorkerContainer.onmessage	A										<pre><code>ServiceWorkerContainer.onmessage = function(messageevent) { ... }</code></pre>The onmessage property of the ServiceWorkerContainer interface is an event handler fired whenever a message event occurs — when incoming messages are received to the ServiceWorkerContainer object (e.g., via a MessagePort.postMessage() call).	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onmessage
ServiceWorkerContainer.ready	A										<pre><code>navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) { ... });</code></pre>The ready read-only property of the ServiceWorkerContainer interface defines whether a service worker is ready to control a page or not. It returns a Promise that will never reject, which resolves to a ServiceWorkerRegistration with an ServiceWorkerRegistration.active worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready
ServiceWorkerContainer.register()	A										<pre><code>ServiceWorkerContainer.register(scriptURL, options)\n  .then(function(ServiceWorkerRegistration) { ... });</code></pre>The register() method of the ServiceWorkerContainer interface creates or updates a ServiceWorkerRegistration for the given scriptURL.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register
ServiceWorkerGlobalScope.caches	A										<pre><code>var myCacheStorage = self.caches;\n</code></pre>The ServiceWorkerGlobalScope.caches read-only property returns the CacheStorage object associated with the service worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/caches
ServiceWorkerGlobalScope.clients	A										<pre><code>swClients = self.clients \n</code></pre>The clients read-only property of the ServiceWorkerGlobalScope interface returns the Clients object associated with the service worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/clients
ServiceWorkerGlobalScope.onactivate	A										<pre><code>ServiceWorkerGlobalScope.onactivate = function(event) { ... };\nServiceWorkerGlobalScope.addEventListener('activate', function(event) { ... });</code></pre>The onactivate property of the ServiceWorkerGlobalScope interface is an event handler fired whenever an activate event occurs (when the service worker activates). This happens after installation, when the page to be controlled by the service worker refreshes.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onactivate
ServiceWorkerGlobalScope.onfetch	A										<pre><code>ServiceWorkerGlobalScope.onfetch = function(FetchEvent) { ... }</code></pre>The onfetch property of the ServiceWorkerGlobalScope interface is an event handler fired whenever a fetch event occurs (usually when the ServiceWorkerGlobalScope.fetch method is called.)	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onfetch
ServiceWorkerGlobalScope.oninstall	A										<pre><code>ServiceWorkerGlobalScope.oninstall = function(event) { ... };\nServiceWorkerGlobalScope.addEventListener('install', function(event) { ... });</code></pre>The oninstall property of the ServiceWorkerGlobalScope interface is an event handler fired whenever an install event occurs (when the service worker installs). This happens before activation.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/oninstall
ServiceWorkerGlobalScope.onmessage	A										<pre><code>ServiceWorkerGlobalScope.onmessage = function(MessageEvent) { ... }</code></pre>The ServiceWorkerGlobalScope.onmessage event of the ServiceWorkerGlobalScope interface is called whenever incoming messages are received.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onmessage
ServiceWorkerGlobalScope.onnotificationclick	A										<pre><code>ServiceWorkerGlobalScope.onnotificationclick = function(NotificationEvent) { ... };\n</code></pre>The ServiceWorkerGlobalScope.onnotificationclick property is an event handler called whenever the notificationclick event is dispatched on the ServiceWorkerGlobalScope object, that is when a user clicks on a displayed notification spawned by ServiceWorkerRegistration.showNotification().	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onnotificationclick
onnotificationclose	A										<pre><code>ServiceWorkerGlobalScope.onnotificationclose = function(NotificationEvent) { ... };\nServiceWorkerGlobalScope.addEventListener('notificationclose', function(NotificationEvent) { ... });</code></pre>The ServiceWorkerGlobalScope.onnotificationclose property is an event handler called whenever the notificationclose event is dispatched on the ServiceWorkerGlobalScope object, that is when a user closes a displayed notification spawned by ServiceWorkerRegistration.showNotification().	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onnotificationclose
ServiceWorkerGlobalScope.onpush	A										<pre><code>ServiceWorkerGlobalScope.onpush = function(PushEvent) { ... }\nself.addEventListener('push', function(PushEvent) { ... })\n</code></pre>The ServiceWorkerGlobalScope.onpush event of the ServiceWorkerGlobalScope interface is fired whenever a push message is received by a service worker via a push server.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onpush
ServiceWorkerGlobalScope.onpushsubscriptionchange	A										<pre><code>ServiceWorkerGlobalScope.onpushsubscriptionchange = function() { ... }\nself.addEventListener('pushsubscriptionchange', function() { ... })\n</code></pre>The ServiceWorkerGlobalScope.onpushsubscriptionchange event of the ServiceWorkerGlobalScope interface is fired whenever a push subscription has been invalidated (or is about to become so). This offers an opportunity to resubscribe in order to continue receiving push messages, if desired. This might happen if, for example, the push service sets an expiration time a subscription.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onpushsubscriptionchange
ServiceWorkerGlobalScope.onsync	A										<pre><code>ServiceWorkerGlobalScope.onsync = function(SyncEvent) { ... }\nself.addEventListener('sync', function(SyncEvent) { ... })</code></pre>The ServiceWorkerGlobalScope.onsync event of the ServiceWorkerGlobalScope interface is fired whenever a SyncEvent event occurs. This is triggered when a call to SyncManager.register is made from a service worker client page. The attempt to sync is made either immediately if the network is available or as soon as the network becomes available.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/onsync
ServiceWorkerGlobalScope.registration	A										<pre><code>serviceWorkerRegistration = self.registration\n</code></pre>The registration read-only property of the ServiceWorkerGlobalScope interface returns a reference to the ServiceWorkerRegistration object, which represents the service worker's registration.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/registration
ServiceWorkerGlobalScope.skipWaiting()	A										<pre><code>ServiceWorkerGlobalScope.skipWaiting().then(function() {\n&#160; //Do something\n});</code></pre>The ServiceWorkerGlobalScope.skipWaiting() method of the ServiceWorkerGlobalScope forces the waiting service worker to become the active service worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting
ServiceWorkerMessageEvent	A										The ServiceWorkerMessageEvent interface of the ServiceWorker API contains information about an event sent to a ServiceWorkerContainer target. This extends the default message event to allow setting a ServiceWorker object as the source of a message. The event object is accessed via the handler function of a message event, when fired by a message received from a service worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerMessageEvent
ServiceWorkerMessageEvent.data	A										<pre><code>var myData = ServiceWorkerMessageEventInstance.data;</code></pre>The data read-only property of the ServiceWorkerMessageEvent interface returns the event's data. It can be any data type.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerMessageEvent/data
ServiceWorkerMessageEvent.lastEventId	A										<pre><code>var myLastEventId = ServiceWorkerMessageEventInstance.lastEventId;</code></pre>The lastEventID read-only property of the ServiceWorkerMessageEvent interface represents, in server-sent events, the last event ID of the event source.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerMessageEvent/lastEventId
ServiceWorkerMessageEvent.origin	A										<pre><code>var myOrigin = ServiceWorkerMessageEventInstance.origin;</code></pre>The origin read-only property of the ServiceWorkerMessageEvent interface returns the origin of the service worker's environment settings object.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerMessageEvent/origin
ServiceWorkerMessageEvent.ports	A										<pre><code>var myPorts = ServiceWorkerMessageEventInstance.ports;</code></pre>The ports read-only property of the ServiceWorkerMessageEvent interface returns an array of MessagePort objects connected with the message channel the message is being sent through.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerMessageEvent/ports
ServiceWorkerMessageEvent.ServiceWorkerMessageEvent()	A										<pre><code>var mySWME = new ServiceWorkerMessageEvent(type, init);</code></pre>The ServiceWorkerMessageEvent() constructor creates a new ServiceWorkerMessageEvent object instance.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerMessageEvent/ServiceWorkerMessageEvent
ServiceWorkerMessageEvent.source	A										<pre><code>var mySource = ServiceWorkerMessageEventInstance.source;</code></pre>The source read-only property of the ServiceWorkerMessageEvent returns a reference to the ServiceWorker object of the associated service worker that sent the message.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerMessageEvent/source
ServiceWorkerRegistration	A										The ServiceWorkerRegistion interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration
ServiceWorkerRegistration.active	A										<pre><code>sw = ServiceWorker.active \n</code></pre>The active property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activating or activated. This property is initially set to null.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/active
ServiceWorkerRegistration.getNotifications()	A										<pre><code>&#8203;ServiceWorkerRegistration.getNotifications(options).then(function(NotificationsList) { ... });</code></pre>The getNotifications() method of the ServiceWorkerRegistration interface returns a list of the notifications that have been fired from the current service worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/getNotifications
ServiceWorkerRegistration.installing	A										<pre><code>sw = ServiceWorker.installing \n</code></pre>The installing property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/installing
ServiceWorkerRegistration.onupdatefound	A										<pre><code>ServiceWorkerRegistration.onupdatefound = function() { ... };</code></pre>The onupdatefound property of the ServiceWorkerRegistration interface is an EventListener property called whenever an event of type statechange is fired; it is fired any time the ServiceWorkerRegistration.installing property acquires a new service worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/onupdatefound
ServiceWorkerRegistration.periodicSync	A										<pre><code>myPeriodicSync = ServiceWorker.periodicSync \n</code></pre>The periodicSync read-only property of the ServiceWorkerRegistration interface returns a reference to the PeriodicSyncManager interface, which manages periodic background synchronization processes.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/periodicSync
ServiceWorkerRegistration.pushManager	A										<pre><code>myPushManager = ServiceWorker.pushManager \n</code></pre>The pushManager property of the ServiceWorkerRegistration interface returns a reference to the PushManager interface for managing push subscriptions; this includes support for subscribing, getting an active subscription, and accessing push permission status.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/pushManager
ServiceWorkerRegistration.scope	A										<pre><code>swScope = ServiceWorkerRegistration.scope;</code></pre>The scope read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/scope
ServiceWorkerRegistration.showNotification()	A										<pre><code>&#8203;ServiceWorkerRegistration.showNotification(title, [options]).then(function(NotificationEvent) { ... });</code></pre>The showNotification() method of the ServiceWorkerRegistration interface creates a notification on an active service worker.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification
ServiceWorkerRegistration.sync	A										<pre><code>mySyncManager = ServiceWorker.sync\n</code></pre>The sync property of the ServiceWorkerRegistration interface returns a reference to the SyncManager interface, which manages background synchronization processes.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/sync
ServiceWorkerRegistration.unregister()	A										<pre><code>ServiceWorkerRegistration.unregister().then(function(boolean) {\n});</code></pre>The unregister method of the ServiceWorkerRegistration interface unregisters the service worker registration and returns a Promise. The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register with the same scope.) The service worker will finish any ongoing operations before it is unregistered.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/unregister
ServiceWorkerRegistration.update()	A										<pre><code>ServiceWorkerRegistration.update();</code></pre>The update method of the ServiceWorkerRegistration interface attempts to update the service worker. It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker. The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/update
ServiceWorkerRegistration.waiting	A										<pre><code>sw = ServiceWorker.waiting \n</code></pre>The waiting property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/waiting
ServiceWorkerState	A										The ServiceWorkerState is associated with its ServiceWorker 's state.	https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState
Service Worker API	A										A service worker is an event-driven worker registered against an origin and a path. It takes the form of a JavaScript file that can control the web page/site it is associated with, intercepting and modifying navigation and resource requests, and caching resources in a very granular fashion to give you complete control over how your app behaves in certain situations (the most obvious one being when the network is not available.)	https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
Using Service Workers	A										One overriding problem that web users have suffered with for years is loss of connectivity. The best web app in the world will provide a terrible user experience if you can’t download it. There have been various attempts to create technologies to solve this problem, as our Offline page shows, and some of the issues have been solved. But the overriding problem is that there still isn’t a good overall control mechanism for asset caching and custom network requests. The previous attempt — AppCache — seemed to be a good idea because it allowed you to specify assets to cache really easily. However, it made many assumptions about what you were trying to do and then broke horribly when your app didn’t follow those assumptions exactly. Read Jake Archibald's Application Cache is a Douchebag for more details.	https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers
ShadowRoot	A										The ShadowRoot interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.	https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot
ShadowRoot.host	A										<pre><code>var element = shadowRoot.host</code></pre>The host read-only property of the ShadowRoot returns the DOM element to which the ShadowRoot is attatched.	https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/host
ShadowRoot.innerHTML	A										<pre><code>var domString = shadowRoot.innerHTML\nshadowRoot.innerHTML = domString\n</code></pre>The innerHTML property of the ShadowRoot interface sets or returns the DOM tree inside the ShadowRoot.	https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/innerHTML
SharedKeyframeList	A										The SharedKeyframeList interface of the Web Animations API represents a sequence of keyframes that can be shared between KeyframeEffect objects.	https://developer.mozilla.org/en-US/docs/Web/API/SharedKeyframeList
SharedKeyframeList.SharedKeyframeList()	A										The SharedKeyframeList() constructor of the SharedKeyframeList interface creates a new SharedKeyframeList object that can be shared across multiple KeyframeEffect objects.	https://developer.mozilla.org/en-US/docs/Web/API/SharedKeyframeList/SharedKeyframeList
SharedWorker	A										The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.	https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker
SharedWorker.port	A										<pre><code>myWorker.port;</code></pre>The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.	https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/port
SharedWorker()	A										<pre><code>var myWorker = new SharedWorker("aURL", name);</code></pre>The SharedWorker() constructor creates a SharedWorker object that executes the script at the specified URL. This script must obey the same-origin policy.	https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/SharedWorker
SharedWorkerGlobalScope.applicationCache	A										<pre><code>var nameObj = self.applicationCache;</code></pre>The applicationCache read-only property of the SharedWorkerGlobalScope interface returns the ApplicationCache object for the worker (see Using the application cache).	https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/applicationCache
SharedWorkerGlobalScope.name	A										<pre><code>var nameObj = self.name;</code></pre>The name read-only property of the SharedWorkerGlobalScope interface returns the name that the SharedWorker was (optionally) given when it was created. This is the name that the SharedWorker() constructor can pass to get a reference to the SharedWorkerGlobalScope.	https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/name
SharedWorkerGlobalScope.onconnect	A										<pre><code>onconnect = function() { ... };</code></pre>The onconnect property of the SharedWorkerGlobalScope interface is an EventHandler representing the code to be called when the connect event is raised — that is, when a MessagePort connection is opened between the associated SharedWorker and the main thread.	https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/onconnect
SourceBuffer	A										The SourceBuffer interface represents a chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer
SourceBuffer.abort()	A										<pre><code>sourceBuffer.abort();\n</code></pre>The abort() method of the SourceBuffer interface aborts the current segment and resets the segment parser.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort
SourceBuffer.appendBuffer()	A										<pre><code>sourceBuffer.appendBuffer(ArrayBuffer);\nsourceBuffer.appendBuffer(ArrayBufferView);\n</code></pre>The appendBuffer() method of the SourceBuffer interface appends media segment data from an ArrayBuffer or ArrayBufferView object to the SourceBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer
SourceBuffer.appendStream()	A										<pre><code>sourceBuffer.appendStream(stream, maxSize);\n</code></pre>The appendStream() method of the SourceBuffer interface appends media segment data from a ReadableStream object to the SourceBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendStream
SourceBuffer.appendWindowEnd	A										<pre><code>var myAppendWindowEnd = sourceBuffer.appendWindowEnd;\n\nsourceBuffer.appendWindowEnd = 120.0;\n</code></pre>The appendWindowEnd property of the SourceBuffer interface controls the timestamp for the end of the append window, a timestamp range that can be used to filter what media data is appended to the SourceBuffer. Coded media frames with timestamps wthin this range will be appended, whereas those outside the range will be filtered out.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowEnd
SourceBuffer.appendWindowStart	A										<pre><code>var myAppendWindowStart = sourceBuffer.appendWindowStart;\n\nsourceBuffer.appendWindowStart = 2.0;\n</code></pre>The appendWindowStart property of the SourceBuffer interface controls the timestamp for the start of the append window, a timestamp range that can be used to filter what media data is appended to the SourceBuffer. Coded media frames with timestamps wthin this range will be appended, whereas those outside the range will be filtered out.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowStart
SourceBuffer.audioTracks	A										<pre><code>var myAudioTracks = sourceBuffer.audioTracks;\n</code></pre>The audioTracks read-only property of the SourceBuffer interface returns a list of the audio tracks currently contained inside the SourceBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/audioTracks
SourceBuffer.buffered	A										<pre><code>var myBufferedRange = sourceBuffer.buffered;\n</code></pre>The buffered read-only property of the SourceBuffer interface returns the time ranges that are currently buffered in the SourceBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/buffered
SourceBuffer.mode	A										<pre><code>var myMode = sourceBuffer.mode;\n\nsourceBuffer.mode = 'sequence';\n</code></pre>The mode property of the SourceBuffer interface controls whether media segments can be appended to the SourceBuffer in any order, or in a strict sequence.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/mode
SourceBuffer.remove()	A										<pre><code>sourceBuffer.remove(start, end);\n</code></pre>The remove() method of the SourceBuffer interface removes media segments within a specific time range from the SourceBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove
SourceBuffer.textTracks	A										<pre><code>var myTextTracks = sourceBuffer.textTracks;\n</code></pre>The textTracks read-only property of the SourceBuffer interface returns a list of the text tracks currently contained inside the SourceBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/textTracks
SourceBuffer.timestampOffset	A										<pre><code>var myOffset = sourceBuffer.timestampOffset;\n\nsourceBuffer.timestampOffset = 2.5;\n</code></pre>The timestampOffset property of the SourceBuffer interface controls the offset applied to timestamps inside media segments that are appended to the SourceBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/timestampOffset
SourceBuffer.trackDefaults	A										<pre><code>var myTrackDefaults = sourceBuffer.trackDefaults;\n\nsourceBuffer.trackDefaults = myTrackDefaultList;\n</code></pre>The trackDefaults property of the SourceBuffer interface specifies the default values to use if kind, label, and/or language information is not available in the initialization segment of the media to be appended to the SourceBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/trackDefaults
SourceBuffer.updating	A										<pre><code>var isUpdating = sourceBuffer.updating;\n</code></pre>The updating read-only property of the SourceBuffer interface indicates whether the SourceBuffer is currently being updated — i.e. whether an SourceBuffer.appendBuffer(), SourceBuffer.appendStream(), or SourceBuffer.remove() operation is currently in progress.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/updating
SourceBuffer.videoTracks	A										<pre><code>var myVideoTracks = sourceBuffer.videoTracks;\n</code></pre>The videoTracks read-only property of the SourceBuffer interface returns a list of the video tracks currently contained inside the SourceBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/videoTracks
SourceBufferList	A										The SourceBufferList interface represents a simple container list for multiple SourceBuffer objects.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList
SourceBufferList.length	A										<pre><code>var myListLength = SourceBufferList.length;</code></pre>The length read-only property of the SourceBufferList interface returns the number of SourceBuffer objects in the list.	https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList/length
SourceBufferList.SourceBuffer()	A										<pre><code>var mySourceBuffer = SourceBufferList[index];</code></pre>The SourceBuffer() getter method of the SourceBufferList interface allows the SourceBuffer objects in the list to be accessed with an array operator (i.e. [].)	https://developer.mozilla.org/en-US/docs/Web/API/SourceBufferList/SourceBuffer
SpeechGrammar	A										The SpeechGrammar interface of the Web Speech API represents a set of words or patterns of words that we want the recognition service to recognize.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar
SpeechGrammar.SpeechGrammar()	A										<pre><code>var mySpeechGrammar = new SpeechGrammar();</code></pre>The SpeechGrammar constructor of the SpeechGrammar interface creates a new SpeechGrammar object instance.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar/SpeechGrammar
SpeechGrammar.src	A										<pre><code>var myGrammar = speechGrammarInstance.src;</code></pre>The src property of the SpeechGrammar interface sets and returns a string containing the grammar from within in the SpeechGrammar object.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar/src
SpeechGrammar.weight	A										<pre><code>var myGrammarWeight = speechGrammarInstance.weight;</code></pre>The optional weight property of the SpeechGrammar interface sets and returns the weight of the SpeechGrammar object.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammar/weight
SpeechGrammarList	A										The SpeechGrammarList interface of the Web Speech API represents a list of SpeechGrammar objects containing words or patterns of words that we want the recognition service to recognize.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList
SpeechGrammarList.addFromString()	A										<pre><code>speechGrammarListInstance.addFromString(string,weight);</code></pre>The addFromString() method of the SpeechGrammarList interface takes a grammar present in a specific DOMString within the code base (e.g. stored in a variable) and adds it to the SpeechGrammarList as a new SpeechGrammar object.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList/addFromString
SpeechGrammarList.addFromURI()	A										<pre><code>speechGrammarListInstance.addFromURI(src,weight);</code></pre>The addFromURI() method of the SpeechGrammarList interface takes a grammar present at a specific URI and adds it to the SpeechGrammarList as a new SpeechGrammar object.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList/addFromURI
SpeechGrammarList.item()	A										<pre><code>var myFirstGrammar = speechGrammarListInstance[0];</code></pre>The item getter of the SpeechGrammarList interface is a standard getter — it allows individual SpeechGrammar objects to be retrieved from the SpeechGrammarList using array syntax.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList/item
SpeechGrammarList.length	A										<pre><code>var myListLength = speechGrammarListInstance.length;</code></pre>The length read-only property of the SpeechGrammarList interface returns the number of SpeechGrammar objects contained in the SpeechGrammarList.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList/length
SpeechGrammarList.SpeechGrammarList()	A										<pre><code>var myGrammarList = new SpeechGrammarList();</code></pre>The SpeechGrammarList() constructor creates a new SpeechGrammarList object instance.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechGrammarList/SpeechGrammarList
SpeechRecognition	A										The SpeechRecognition interface of the Web Speech API is the controller interface for the recognition service; this also handles the SpeechRecognitionEvent sent from the recognition service.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition
SpeechRecognition.abort()	A										<pre><code>mySpeechRecognition.abort();</code></pre>The abort() method of the Web Speech API stops the speech recognition service from listening to incoming audio, and doesn't attempt to return a SpeechRecognitionResult.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/abort
SpeechRecognition.continuous	A										<pre><code>var myContinuous = mySpeechRecognition.continuous;\nmySpeechRecognition.continuous = true;\n</code></pre>The continuous property of the SpeechRecognition interface controls whether continuous results are returned for each recognition, or only a single result.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/continuous
SpeechRecognition.grammars	A										<pre><code>var myGrammars = mySpeechRecognition.grammars;\nmySpeechRecognition.grammars = mySpeechGrammarList;\n</code></pre>The grammars property of the SpeechRecognition interface returns and sets a collection of SpeechGrammar objects that represent the grammars that will be understood by the current SpeechRecognition.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/grammars
SpeechRecognition.interimResults	A										<pre><code>var myInterimResult = mySpeechRecognition.interimResults;\nmySpeechRecognition.interimResults = false;\n</code></pre>The interimResults property of the SpeechRecognition interface controls whether interim results should be returned (true) or not (false.) Interim results are results that are not yet final (e.g. the SpeechRecognitionResult.isFinal property is false.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/interimResults
SpeechRecognition.lang	A										<pre><code>var myLang = mySpeechRecognition.lang;\nmySpeechRecognition.lang = 'en-US';\n</code></pre>The lang property of the SpeechRecognition interface returns and sets the language of the current SpeechRecognition. If not specified, this defaults to the HTML lang attribute value, or the user agent's language setting if that isn't set either.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/lang
SpeechRecognition.maxAlternatives	A										<pre><code>var myMaxAlternativeNumber = mySpeechRecognition.maxAlternatives;\nmySpeechRecognition.maxAlternatives = 2;\n</code></pre>The maxAlternatives property of the SpeechRecognition interface sets the maximum number of SpeechRecognitionAlternative s provided per SpeechRecognitionResult.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/maxAlternatives
SpeechRecognition.onaudioend	A										<pre><code>mySpeechRecognition.onaudioend = function() { ... };\n</code></pre>The onaudioend property of the SpeechRecognition interface represents an event handler that will run when the user agent has finished capturing audio (when the audioend event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onaudioend
SpeechRecognition.onaudiostart	A										<pre><code>mySpeechRecognition.onaudiostart = function() { ... };\n</code></pre>The onaudiostart property of the SpeechRecognition interface represents an event handler that will run when the user agent has started to capture audio (when the audiostart event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onaudiostart
SpeechRecognition.onend	A										<pre><code>mySpeechRecognition.onend = function() { ... };\n</code></pre>The onend property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service has disconnected (when the end event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onend
SpeechRecognition.onerror	A										<pre><code>mySpeechRecognition.onerror = function() { ... };\n</code></pre>The onerror property of the SpeechRecognition interface represents an event handler that will run when a speech recognition error occurs (when the error event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onerror
SpeechRecognition.onnomatch	A										<pre><code>mySpeechRecognition.onnomatch = function() { ... };\n</code></pre>The onnomatch property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a final result with no significant recognition (when the nomatch event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onnomatch
SpeechRecognition.onresult	A										<pre><code>mySpeechRecognition.onresult = function() { ... };\n</code></pre>The onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app (when the result event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onresult
SpeechRecognition.onsoundend	A										<pre><code>mySpeechRecognition.onsoundend = function() { ... };\n</code></pre>The onsoundend property of the SpeechRecognition interface represents an event handler that will run when any sound — recognisable speech or not — has stopped being detected (when the soundend event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onsoundend
SpeechRecognition.onsoundstart	A										<pre><code>mySpeechRecognition.onsoundstart = function() { ... };\n</code></pre>The onsoundstart property of the SpeechRecognition interface represents an event handler that will run when any sound — recognisable speech or not — has been detected (when the soundstart event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onsoundstart
SpeechRecognition.onspeechend	A										<pre><code>mySpeechRecognition.onspeechend = function() { ... };\n</code></pre>The onspeechend property of the SpeechRecognition interface represents an event handler that will run when speech recognised by the speech recognition service has stopped being detected (when the speechend event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onspeechend
SpeechRecognition.onspeechstart	A										<pre><code>mySpeechRecognition.onspeechstart = function() { ... };\n</code></pre>The onspeechstart property of the SpeechRecognition interface represents an event handler that will run when sound recognised by the speech recognition service as speech has been detected (when the speechstart event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onspeechstart
SpeechRecognition.onstart	A										<pre><code>mySpeechRecognition.onstart = function() { ... };\n</code></pre>The onstart property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition (when the start event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/onstart
SpeechRecognition.serviceURI	A										<pre><code>var myServiceURI = mySpeechRecognition.serviceURI;\nmySpeechRecognition.serviceURI = 'path/to/my/service/';\n</code></pre>The serviceURI property of the SpeechRecognition interface specifies the location of the speech recognition service used by the current SpeechRecognition to handle the actual recognition. The default is the user agent's default speech service.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/serviceURI
SpeechRecognition()	A										<pre><code>var myRecognition = new SpeechRecognition();</code></pre>The SpeechRecognition() constructor creates a new SpeechRecognition object instance.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/SpeechRecognition
SpeechRecognition.start()	A										<pre><code>mySpeechRecognition.start();</code></pre>The start() method of the Web Speech API starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/start
SpeechRecognition.stop()	A										<pre><code>mySpeechRecognition.stop();</code></pre>The start() method of the Web Speech API stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition/stop
SpeechRecognitionAlternative	A										The SpeechRecognitionAlternative interface of the Web Speech API represents a single word that has been recognised by the speech recognition service.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative
SpeechRecognitionAlternative.confidence	A										<pre><code>var myConfidence = speechRecognitionAlternativeInstance.confidence;</code></pre>The confidence read-only property of the SpeechRecognitionResult interface returns a numeric estimate of how confident the speech recognition system is that the recognition is correct.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative/confidence
SpeechRecognitionAlternative.transcript	A										<pre><code>var myTranscript = speechRecognitionAlternativeInstance.transcript;</code></pre>The transcript read-only property of the SpeechRecognitionResult interface returns a string containing the transcript of the recognised word(s).	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionAlternative/transcript
SpeechRecognitionError	A										The SpeechRecognitionError interface of the Web Speech API represents error messages from the recognition service.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionError
SpeechRecognitionError.error	A										<pre><code>var myError = event.error;\n</code></pre>The error read-only property of the SpeechRecognitionError interface returns the type of error raised.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionError/error
speechrecognitionerror error	R	SpeechRecognitionError.error										
SpeechRecognitionError.message	A										<pre><code>var myErrorMsg = event.message;\n</code></pre>The message read-only property of the SpeechRecognitionError interface returns a message describing the error in more detail.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionError/message
speechrecognitionerror message	R	SpeechRecognitionError.message										
SpeechRecognitionEvent	A										The SpeechRecognitionEvent interface of the Web Speech API represents the event object for the result and nomatch events, and contains all the data associated with an interim or final speech recognition result.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent
SpeechRecognitionEvent.emma	A										<pre><code>var myEmma = event.emma;\n</code></pre>The emma read-only property of the SpeechRecognitionEvent interface returns an E xtensible MultiModal Annotation markup language (EMMA) — XML — representation of the result.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent/emma
SpeechRecognitionEvent.interpretation	A										<pre><code>var myInterpretation = event.interpretation;\n</code></pre>The interpretation read-only property of the SpeechRecognitionEvent interface returns the semantic meaning of what the user said.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent/interpretation
SpeechRecognitionEvent.resultIndex	A										<pre><code>var myResultIndex = event.resultIndex;\n</code></pre>The resultIndex read-only property of the SpeechRecognitionEvent interface returns the lowest index value result in the SpeechRecognitionResultList "array" that has actually changed.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent/resultIndex
SpeechRecognitionEvent.results	A										<pre><code>var myResults = event.results;\n</code></pre>The results read-only property of the SpeechRecognitionEvent interface returns a SpeechRecognitionResultList object representing all the speech recognition results for the current session.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionEvent/results
SpeechRecognitionResult	A										The SpeechRecognitionResult interface of the Web Speech API represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult
SpeechRecognitionResult.isFinal	A										<pre><code>var myIsFinal = speechRecognitionResultInstance.isFinal;</code></pre>The isFinal read-only property of the SpeechRecognitionResult interface is a Boolean that states whether this result is final (true) or not (false) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult/isFinal
SpeechRecognitionResult.item()	A										<pre><code>var myAlternative = speechRecognitionResultInstance[0];</code></pre>The item getter of the SpeechRecognitionResult interface is a standard getter that allows SpeechRecognitionAlternative objects within the result to be accessed via array syntax.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult/item
SpeechRecognitionResult.length	A										<pre><code>var myLength = speechRecognitionResultInstance.length;</code></pre>The length read-only property of the SpeechRecognitionResult interface returns the length of the "array" — the number of SpeechRecognitionAlternative objects contained in the result (also referred to as "n-best alternatives".)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResult/length
SpeechRecognitionResultList	A										The SpeechRecognitionResultList interface of the Web Speech API represents a list of SpeechRecognitionResult objects, or a single one if results are being captured in continuous mode.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList
SpeechRecognitionResultList.item()	A										<pre><code>var myResult = speechRecognitionResultListInstance[0];</code></pre>The item getter of the SpeechRecognitionResultList interface is a standard getter — it allows SpeechRecognitionResult objects in the list to be accessed via array syntax.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList/item
SpeechRecognitionResultList.length	A										<pre><code>var myLength = speechRecognitionResultListInstance.length;</code></pre>The length read-only property of the SpeechRecognitionResultList interface returns the length of the "array" — the number of SpeechRecognitionResult objects in the list.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognitionResultList/length
SpeechSynthesis	A										The SpeechSynthesis interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis
SpeechSynthesis.cancel()	A										<pre><code>speechSynthesisInstance.cancel();\n</code></pre>The cancel() method of the SpeechSynthesis interface removes all utterances from the utterance queue.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/cancel
SpeechSynthesis.getVoices()	A										<pre><code>speechSynthesisInstance.getVoices();\n</code></pre>The getVoices() method of the SpeechSynthesis interface returns a list of SpeechSynthesisVoice objects representing all the available voices on the current device.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/getVoices
SpeechSynthesis.onvoiceschanged	A										<pre><code>speechSynthesisInstance.onvoiceschanged = function() { ... };\n</code></pre>The onvoiceschanged property of the SpeechSynthesis interface represents an event handler that will run when the list of SpeechSynthesisVoice objects that would be returned by the SpeechSynthesis.getVoices() method has changed (when the voiceschanged event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/onvoiceschanged
SpeechSynthesis.pause()	A										<pre><code>speechSynthesisInstance.pause();\n</code></pre>The pause() method of the SpeechSynthesis interface puts the SpeechSynthesis object into a paused state.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/pause
SpeechSynthesis.paused	A										<pre><code>var amIPaused = speechSynthesisInstance.paused;\n</code></pre>The paused read-only property of the SpeechSynthesis interface is a Boolean that returns true if the SpeechSynthesis object is in a paused state, or false if not.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/paused
SpeechSynthesis.pending	A										<pre><code>var amIPending = speechSynthesisInstance.pending;\n</code></pre>The pending read-only property of the SpeechSynthesis interface is a Boolean that returns true if the utterance queue contains as-yet-unspoken utterances.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/pending
SpeechSynthesis.resume()	A										<pre><code>speechSynthesisInstance.resume();\n</code></pre>The resume() method of the SpeechSynthesis interface puts the SpeechSynthesis object into a non-paused state: resumes it if it was already paused.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/resume
SpeechSynthesis.speak()	A										<pre><code>speechSynthesisInstance.speak(utterance);\n</code></pre>The speak() method of the SpeechSynthesis interface adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/speak
SpeechSynthesis.speaking	A										<pre><code>var amISpeaking = speechSynthesisInstance.speaking;\n</code></pre>The speaking read-only property of the SpeechSynthesis interface is a Boolean that returns true if an utterance is currently in the process of being spoken — even if SpeechSynthesis is in a paused state.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis/speaking
SpeechSynthesisErrorEvent	A										The SpeechSynthesisErrorEvent interface of the Web Speech API contains information about any errors that occur while processing SpeechSynthesisUtterance objects in the speech service.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent
SpeechSynthesisErrorEvent.error	A										<pre><code>myError = event.error;\n</code></pre>The error property of the SpeechSynthesisErrorEvent interface returns an error code indicating what has gone wrong with a speech synthesis attempt.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisErrorEvent/error
speechsynthesiserrorevent error	R	SpeechSynthesisErrorEvent.error										
SpeechSynthesisEvent	A										The SpeechSynthesisEvent interface of the Web Speech API contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent
SpeechSynthesisEvent.charIndex	A										<pre><code>event.charIndex;\n</code></pre>The charIndex read-only property of the SpeechSynthesisUtterance interface returns the index position of the character in the SpeechSynthesisUtterance.text that was being spoken when the event was triggered.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent/charIndex
SpeechSynthesisEvent.elapsedTime	A										<pre><code>event.elapsedTime;\n</code></pre>The elapsedTime read-only property of the SpeechSynthesisUtterance interface returns the elapsed time in milliseconds after the SpeechSynthesisUtterance.text started being spoken that the event was triggered at.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent/elapsedTime
SpeechSynthesisEvent.name	A										<pre><code>event.name;\n</code></pre>The name read-only property of the SpeechSynthesisUtterance interface returns the name associated with certain types of events occuring as the SpeechSynthesisUtterance.text is being spoken: the name of the SSML marker reached in the case of a mark event, or the type of boundary reached in the case of a boundary event.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent/name
SpeechSynthesisEvent.utterance	A										<pre><code>event.utterance;\n</code></pre>The utterance read-only property of the SpeechSynthesisUtterance interface returns the SpeechSynthesisUtterance instance that the event was triggered on.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisEvent/utterance
SpeechSynthesisUtterance	A										The SpeechSynthesisUtterance interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance
SpeechSynthesisUtterance.lang	A										<pre><code>var myLang = speechSynthesisUtteranceInstance.lang;\nspeechSynthesisUtteranceInstance.lang = 'en-US';\n</code></pre>The lang property of the SpeechSynthesisUtterance interface gets and sets the language of the utterance.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/lang
SpeechSynthesisUtterance.onboundary	A										<pre><code>speechSynthesisUtteranceInstance.onboundary = function() { ... };\n</code></pre>The onboundary property of the SpeechSynthesisUtterance interface represents an event handler that will run when the spoken utterance reaches a word or sentence boundary (when the boundary event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onboundary
SpeechSynthesisUtterance.onend	A										<pre><code>speechSynthesisUtteranceInstance.onend = function() { ... };\n</code></pre>The onend property of the SpeechSynthesisUtterance interface represents an event handler that will run when the utterance has finished being spoken (when the end event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onend
SpeechSynthesisUtterance.onerror	A										<pre><code>speechSynthesisUtteranceInstance.onerror = function() { ... };\n</code></pre>The onerror property of the SpeechSynthesisUtterance interface represents an event handler that will run when an error occurs that prevents the utterance from being succesfully spoken (when the error event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onerror
SpeechSynthesisUtterance.onmark	A										<pre><code>speechSynthesisUtteranceInstance.onmark = function() { ... };\n</code></pre>The onmark property of the SpeechSynthesisUtterance interface represents an event handler that will run when the spoken utterance reaches a named SSML mark tag (when the mark event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onmark
SpeechSynthesisUtterance.onpause	A										<pre><code>speechSynthesisUtteranceInstance.onpause = function() { ... };\n</code></pre>The onpause property of the SpeechSynthesisUtterance interface represents an event handler that will run when the utterance is paused part way through (when the pause event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onpause
SpeechSynthesisUtterance.onresume	A										<pre><code>speechSynthesisUtteranceInstance.onresume = function() { ... };\n</code></pre>The onresume property of the SpeechSynthesisUtterance interface represents an event handler that will run when a paused utterance is resumed (when the resume event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onresume
SpeechSynthesisUtterance.onstart	A										<pre><code>speechSynthesisUtteranceInstance.onstart = function() { ... };\n</code></pre>The onstart property of the SpeechSynthesisUtterance interface represents an event handler that will run when the utterance has begun to be spoken (when the start event fires.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onstart
SpeechSynthesisUtterance.pitch	A										<pre><code>var myPitch = speechSynthesisUtteranceInstance.pitch;\nspeechSynthesisUtteranceInstance.pitch = 1.5;\n</code></pre>The pitch property of the SpeechSynthesisUtterance interface gets and sets the pitch at which the utterance will be spoken at.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/pitch
SpeechSynthesisUtterance.rate	A										<pre><code>var myRate = speechSynthesisUtteranceInstance.rate;\nspeechSynthesisUtteranceInstance.rate = 1.5;\n</code></pre>The rate property of the SpeechSynthesisUtterance interface gets and sets the speed at which the utterance will be spoken at.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/rate
SpeechSynthesisUtterance.SpeechSynthesisUtterance()	A										<pre><code>var utterThis = new SpeechSynthesisUtterance(text);\n</code></pre>The SpeechSynthesisUtterance() constructor of the SpeechSynthesisUtterance interface returns a new SpeechSynthesisUtterance object instance.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/SpeechSynthesisUtterance
SpeechSynthesisUtterance.text	A										<pre><code>var myText = speechSynthesisUtteranceInstance.text;\nspeechSynthesisUtteranceInstance.text = 'Hello I am speaking';\n</code></pre>The text property of the SpeechSynthesisUtterance interface gets and sets the text that will be synthesised when the utterance is spoken.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text
SpeechSynthesisUtterance.voice	A										<pre><code>var myVoice = speechSynthesisUtteranceInstance.voice;\nspeechSynthesisUtteranceInstance.voice = speechSynthesisVoiceInstance;\n</code></pre>The voice property of the SpeechSynthesisUtterance interface gets and sets the voice that will be used to speak the utterance.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/voice
SpeechSynthesisUtterance.volume	A										<pre><code>var myVolume = speechSynthesisUtteranceInstance.volume;\nspeechSynthesisUtteranceInstance.volume = 0.5;\n</code></pre>The volume property of the SpeechSynthesisUtterance interface gets and sets the volume that the utterance will be spoken at.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/volume
SpeechSynthesisVoice	A										The SpeechSynthesisVoice interface of the Web Speech API represents a voice that the system supports. Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice
SpeechSynthesisVoice.default	A										<pre><code>var amIDefault = speechSynthesisVoiceInstance.default;\n</code></pre>The default read-only property of the SpeechSynthesisVoice interface returns a Boolean indicating whether the voice is the default voice for the current app (true), or not (false.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/default
SpeechSynthesisVoice.lang	A										<pre><code>var myLang = speechSynthesisVoiceInstance.lang;\n</code></pre>The lang read-only property of the SpeechSynthesisVoice interface returns a BCP 47 language tag indicating the language of the voice.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/lang
SpeechSynthesisVoice.localService	A										<pre><code>var amILocal = speechSynthesisVoiceInstance.localService;\n</code></pre>The localService read-only property of the SpeechSynthesisVoice interface returns a Boolean indicating whether the voice is supplied by a local speech synthesizer service (true), or a remote speech synthesizer service (false.)	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/localService
SpeechSynthesisVoice.name	A										<pre><code>var voiceName = speechSynthesisVoiceInstance.name;\n</code></pre>The name read-only property of the SpeechSynthesisVoice interface returns a human-readable name that represents the voice.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/name
SpeechSynthesisVoice.voiceURI	A										<pre><code>var myVoiceURI = speechSynthesisVoiceInstance.voiceURI;\n</code></pre>The voiceURI read-only property of the SpeechSynthesisVoice interface returns the type of URI and location of the speech synthesis service for this voice.	https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/voiceURI
StereoPannerNode	A										The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode.	https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode
StereoPannerNode.pan	A										<pre><code>var audioCtx = new AudioContext();\nvar panNode = audioCtx.createStereoPanner();\npanNode.pan.value = -0.5;\n</code></pre>An a-rate AudioParam containing the panning to apply.	https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode/pan
Storage	A										The Storage interface of the Web Storage API provides access to the session storage or local storage for a particular domain, allowing you to for example add, modify or delete stored data items.	https://developer.mozilla.org/en-US/docs/Web/API/Storage
Storage.clear()	A										<pre><code>storage.clear();</code></pre>The clear() method of the Storage interface, when invoked, will empty all keys out of the storage.	https://developer.mozilla.org/en-US/docs/Web/API/Storage/clear
Storage.getItem()	A										<pre><code>var aValue = storage.getItem(keyName);\n</code></pre>The getItem() method of the Storage interface, when passed a key name, will return that key's value.	https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem
Storage.key()	A										<pre><code>var aKeyName = storage.key(key);</code></pre>The key() method of the Storage interface, when passed a number n, returns the name of the nth key in the storage. The order of keys is user-agent defined, so you should not rely on it.	https://developer.mozilla.org/en-US/docs/Web/API/Storage/key
Storage.length	A										<pre><code>var aLength = storage.length;</code></pre>The length read-only property of the Storage interface returns an integer representing the number of data items stored in the Storage object.	https://developer.mozilla.org/en-US/docs/Web/API/Storage/length
LocalStorage	A										localStorage is the same as sessionStorage with the same same-origin rules applied but it is persistent. localStorage was introduced in Firefox 3.5.	https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage
Storage.removeItem()	A										<pre><code>storage.removeItem(keyName);</code></pre>The removeItem() method of the Storage interface, when passed a key name, will remove that key from the storage.	https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem
Storage.setItem()	A										<pre><code>storage.setItem(keyName, keyValue);</code></pre>The setItem() method of the Storage interface, when passed a key name and value, will add that key to the storage, or update that key's value if it already exists.	https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem
StorageEvent	A										A StorageEvent is sent to a window when a storage area changes.	https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent
StyleSheet	A										An object implementing the StyleSheet interface represents a single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.	https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet
StyleSheet.disabled	A										<pre><code>bool = stylesheet.disabled \n</code></pre>The StyleSheet.disabled property indicates whether the style sheet is prevented from applying to the document. A style sheet may be disabled by manually setting this property to true or if it's an inactive alternative style sheet. Note that disabled == false does not guarantee the style sheet is applied (it could be removed from the document, for instance).	https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/disabled
Stylesheet.href	A										<pre><code>uri = stylesheet.href \n</code></pre>Returns the location of the stylesheet.	https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/href
StyleSheet.media	A										<pre><code>medium = stylesheet.media \nstylesheet.media =\nmedium\n</code></pre>media specifies the intended destination medium for style information.	https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/media
StyleSheet.ownerNode	A										<pre><code>objRef = stylesheet.ownerNode \n</code></pre>ownerNode returns the node that associates this style sheet with the document.	https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/ownerNode
StyleSheet.parentStyleSheet	A										<pre><code>objRef = stylesheet.parentStyleSheet \n</code></pre>Returns the stylesheet that is including this one, if any.	https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/parentStyleSheet
StyleSheet.title	A										title returns the advisory title of the current style sheet.	https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/title
StyleSheet.type	A										<pre><code>string = stylesheet.type \n</code></pre>type specifies the style sheet language for this style sheet.	https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet/type
StyleSheetList	A										The StyleSheetList interface represents a list of StyleSheet.	https://developer.mozilla.org/en-US/docs/Web/API/StyleSheetList
SubtleCrypto	A										The SubtleCrypto interface represents a set of cryptographic primitives. It is available via the Crypto.subtle properties available in a window context (via Window.crypto).	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto
SubtleCrypto.decrypt()	A										<pre><code>var result = crypto.decrypt(algo, key, ciphertext);\n</code></pre>The SubtleCrypto.decrypt() method returns a Promise of the cleartext corresponding to the ciphertext, algorithm and key given as parameters.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/decrypt
SubtleCrypto.deriveKey()	A										<pre><code>var result = crypto.deriveKey(algo, masterKey, derivedKeyAlgo, extractable, keyUsages);\n</code></pre>The SubtleCrypto.deriveKey() method returns a Promise of a newly generated CryptoKey derivated from a master key and a specific algorithm given as parameters.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey
SubtleCrypto.digest()	A										<pre><code>var hash = crypto.subtle.digest(algo, buffer);\n</code></pre>The SubtleCrypto.digest() method returns a Promise of a digest generated from the hash function and text given as parameters.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest
SubtleCrypto.encrypt()	A										<pre><code>var result = crypto.encrypt(algo, key, cleartext);\n</code></pre>The SubtleCrypto.encrypt() method returns a Promise of the encrypted data corresponding to the cleartext, algorithm and key given as parameters.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt
SubtleCrypto.exportKey()	A										<pre><code>var result = crypto.exportKey(format, key);\n</code></pre>The SubtleCrypto.exportKey() method returns a Promise of the key encrypted in the requested format. If the key is not extractable, that is if CryptoKey.extractable returns false, the promise fails with an InvalidAccessError exception; it the format is unknown, the promive fails with a NotSupported exception.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/exportKey
SubtleCrypto.generateKey()	A										<pre><code>var result = crypto.generateKey(algo, extractable, keyUsages);\n</code></pre>The SubtleCrypto.generateKey() method returns a Promise of a newly generated CryptoKey, for symmetrical algorithms, or a CryptoKeyPair, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey
SubtleCrypto.importKey()	A										<pre><code>var result = crypto.importKey(format, keyData, algo, extractable, usages);\n</code></pre>The SubtleCrypto.importKey() method returns a Promise of the CryptoKey generated from the data given in parameters.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey
SubtleCrypto.sign()	A										<pre><code>var signature = crypto.sign(algo, key, text2sign);\n</code></pre>The SubtleCrypto.sign() method returns a Promise containing the signature corresponding to the text, algorithm and key given as parameters.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign
SubtleCrypto.unwrapKey()	A										<pre><code>var result = crypto.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages);\n</code></pre>The SubtleCrypto.unwrapKey() method returns a Promise of a CryptoKey corresponding to the wrapped key given in parameter.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/unwrapKey
SubtleCrypto.verify()	A										<pre><code>var result = crypto.verify(algo, key, signature, text2verify);\n</code></pre>The SubtleCrypto.verify() method returns a Promise of a Boolean value indicating if the signature given as parameter matches the text, algorithm and key also given as parameters.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify
SubtleCrypto.wrapKey()	A										<pre><code>var result = crypto.wrapKey(format, key, wrappingKey, wrapAlgo);\n</code></pre>The SubtleCrypto.wrapKey() method returns a Promise of a wrapped symmetric key for usage (transfer, storage) in unsecure environments. The wrapped buffer returned is in the format given in parameters, and contained the key wrapped by the give wrapping key with the given algorithm.	https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/wrapKey
SVGAElement	A										The SVGAElement interface provides access to the properties of a element, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement
SVGAElement.target	A										<pre><code>myLink.target = 'value';</code></pre>The SVGAElement.target read-only property of SVGAElement returns an SVGAnimatedString object that specifies the portion of a target window, frame, pane into which a document is to be opened when a link is activated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement/SVGAlement.target
SVGAElement.target	A										<pre><code>myLink.target = 'value';</code></pre>The SVGAElement.target read-only property of SVGAElement returns an SVGAnimatedString object that specifies the portion of a target window, frame, pane into which a document is to be opened when a link is activated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAElement/target
SVGAltGlyphElement	A										The SVGAltGlyphElement interface represents an altglyph element. This interface makes it possible to implement more sophisticated and particular glyph characters. For some textal representations as: ligatures (e.g. æ, ß, etc), special-purpose fonts (e.g. musical symbols) or even alternate glyphs such as Asian text strings it is required that a different set of glyphs be used than the normal given character data.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement
format	A										<pre><code>string = myGlyph.format;\n myGlyph.format = string;\n</code></pre>The SVGAltGlyphElement.format property is a DOMString that defines the format of the given font. It has the same meaning as the 'format' property of SVGGlyphRefElement property. If the font is in one of the formats listed in CSS2([CSS2], section15.3.5), then its value is the corresponding string parameter of the font.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/format
SVGAltGlyphElement.glyphRef	A										<pre><code>string = myGlyph.glyphRef;\nmyGlyph.glyphRef = string;\n</code></pre>The SVGAltGlyphElement.glyphRef property is a DOMString representing a glyph identifier. It has the same meaning as the ‘glyphRef’ property on the SVGGlyphRefElement interface of the glyphRef element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/glyphRef
SVGAngle	A										The SVGAngle interface correspond to the angle basic data type.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAngle
SVGAnimateColorElement	A										The SVGAnimateColorElement interface corresponds to the animateColor element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateColorElement
SVGAnimatedAngle	A										The SVGAnimatedAngle interface is used for attributes of basic type angle which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedAngle
SVGAnimatedBoolean	A										The SVGAnimatedBoolean interface is used for attributes of type boolean which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedBoolean
SVGAnimatedEnumeration	A										The SVGAnimatedEnumeration interface is used for attributes whose value must be a constant from a particular enumeration and which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedEnumeration
SVGAnimatedInteger	A										The SVGAnimatedInteger interface is used for attributes of basic type integer which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedInteger
SVGAnimatedLength	A										The SVGAnimatedLength interface is used for attributes of basic type length which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLength
SVGAnimatedLengthList	A										The SVGAnimatedLengthList interface is used for attributes of type SVGLengthList which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedLengthList
SVGAnimatedNumber	A										The SVGAnimatedNumber interface is used for attributes of basic type Number which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumber
SVGAnimatedNumberList	A										The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedNumberList
SVGAnimatedPoints	A										The SVGAnimatedPoints interface supports elements which have a points attribute which holds a list of coordinate values and which support the ability to animate that attribute.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPoints
SVGAnimatedPreserveAspectRatio	A										The SVGAnimatedPreserveAspectRatio interface is used for attributes of type SVGPreserveAspectRatio which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedPreserveAspectRatio
SVGAnimatedRect	A										The SVGAnimatedRect interface is used for attributes of basic SVGRect which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedRect
SVGAnimatedString	A										The SVGAnimatedString interface represent string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString
SVGAnimatedString.animVal	A										<pre><code>var = object.animVal</code></pre>AnimVal attribute or animVal property contains the same value as the baseVal property. If the given attribute or property is being animated, contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, then it contains the same value as baseVal	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString/animVal
SVGAnimatedString.baseVal	A										BaseVal gets or sets the base value of the given attribute before any animations are applied. The base value of the given attribute before applying any animations. Setter throws DOMException.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedString/baseVal
SVGAnimatedTransformList	A										The SVGAnimatedTransformList interface is used for attributes which take a list of numbers and which can be animated.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimatedTransformList
SVGAnimateElement	A										The SVGAnimateElement interface corresponds to the animate element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement
SVGAnimateMotionElement	A										The SVGAnimateMotionElement interface corresponds to the animateMotion element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateMotionElement
SVGAnimateTransformElement	A										The SVGAnimateTransformElement interface corresponds to the animateTransform element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement
SVGAnimationElement	A										The SVGAnimationElement interface is the base interface for all of the animation element interfaces: SVGAnimateElement, SVGSetElement, SVGAnimateColorElement, SVGAnimateMotionElement and SVGAnimateTransformElement.	https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement
SVGCircleElement	A										The SVGCircleElement interface is an interface for the circle element. The circle element is defined by the cx and c y attributes, that denote the coordinates of the centre of the circle. It also has a radius attribute r that denotes the radius of the circle. The radius value must be positive to allow the successful rendering of the element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement
cx	A										For the circle and the ellipse elements, this attribute define the x-coordinate of the center of the element. If unspecified, the effect is as if the value is set to "0".	https://developer.mozilla.org/en-US/docs/Web/API/SVGCircleElement/cx
SVGClipPathElement	A										The SVGClipPathElement interface provides access to the properties of clipPath elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGClipPathElement
SVGCursorElement	A										The SVGCursorElement interface provides access to the properties of cursor elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGCursorElement
SVGDefsElement	A										The SVGDefsElement interface corresponds to the defs element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGDefsElement
SVGDescElement	A										The SVGDescElement interface corresponds to the desc element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGDescElement
SVGElement	A										All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.	https://developer.mozilla.org/en-US/docs/Web/API/SVGElement
SVGEllipseElement	A										The SVGEllipseElement interface provides access to the properties of ellipse elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGEllipseElement
SVGEvent	A										This section contains the Scalable Vector Graphics (SVG) event reference documentation.	https://developer.mozilla.org/en-US/docs/Web/API/SVGEvent
SVGFilterElement	A										The SVGFilterElement interface provides access to the properties of filter elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGFilterElement
SVGFontElement	A										The SVGFontElement interface corresponds to the font elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGFontElement
SVGFontFaceElement	A										The SVGFontFaceElement interface corresponds to the font-face elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceElement
SVGFontFaceFormatElement	A										The SVGFontFaceFormatElement interface corresponds to the font-face-format elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceFormatElement
SVGFontFaceNameElement	A										The SVGFontFaceNameElement interface corresponds to the font-face-name elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceNameElement
SVGFontFaceSrcElement	A										The SVGFontFaceSrcElement interface corresponds to the font-face-src elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceSrcElement
SVGFontFaceUriElement	A										The SVGFontFaceUriElement interface corresponds to the font-face-uri elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGFontFaceUriElement
SVGForeignObjectElement	A										The SVGForeignObjectElement interface provides access to the properties of foreignObject elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGForeignObjectElement
SVGGElement	A										The SVGGElement interface corresponds to the g element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGGElement
SVGGlyphElement	A										The SVGGlyphElement interface corresponds to the glyph elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGGlyphElement
SVGGradientElement	A										The SVGGradient interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.	https://developer.mozilla.org/en-US/docs/Web/API/SVGGradientElement
SVGHKernElement	A										The SVGHKernElement interface corresponds to the hkern elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGHKernElement
SVGImageElement	A										The SVGImageElement interface corresponds to the image element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement
SVGLength	A										The SVGLength interface correspond to the length basic data type.	https://developer.mozilla.org/en-US/docs/Web/API/SVGLength
SVGLengthList	A										The SVGLengthList defines a list of SVGLength objects.	https://developer.mozilla.org/en-US/docs/Web/API/SVGLengthList
SVGLinearGradientElement	A										The SVGLinearGradientElement interface corresponds to the linearGradient element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGLinearGradientElement
SVGLineElement	A										The SVGLineElement interface provides access to the properties of line elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGLineElement
SVGMaskElement	A										The SVGMaskElement interface provides access to the properties of mask elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGMaskElement
SVGMatrix	A										Many of SVG's graphics operations utilize 2x3 matrices of the form:	https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix
SVGMissingGlyphElement	A										The SVGMissingGlyphElement interface corresponds to the missing-glyph elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGMissingGlyphElement
SVGMPathElement	A										The SVGMPathElement interface corresponds to the mpath element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGMPathElement
SVGNumber	A										The SVGNumber interface correspond to the number basic data type.	https://developer.mozilla.org/en-US/docs/Web/API/SVGNumber
SVGNumberList	A										The SVGNumberList defines a list of SVGNumber objects.	https://developer.mozilla.org/en-US/docs/Web/API/SVGNumberList
SVGPathElement	A										The SVGPathElement interface corresponds to the path element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGPathElement
SVGPatternElement	A										The SVGPatternElement interface corresponds to the pattern element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGPatternElement
SVGPoint	A										<pre><code>retObject = SVGElement.createSVGPoint()</code></pre>An SVGPoint represents a 2D or 3D point in the SVG coordinate system.	https://developer.mozilla.org/en-US/docs/Web/API/SVGPoint
SVGPolygonElement	A										The SVGPolygonElement interface provides access to the properties of polygon elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGPolygonElement
SVGPolylineElement	A										The SVGPolylineElement interface provides access to the properties of polyline elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGPolylineElement
SVGPreserveAspectRatio	A										The SVGPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGPreserveAspectRatio
SVGRadialGradientElement	A										The SVGRadialGradientElement interface corresponds to the radialGradient element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGRadialGradientElement
SVGRect	A										The SVGRect represents a rectangle. Rectangles consist of codex/code and codey/code coordinate pair identifying a minimum X value, a minimum Y value, and a width and height, which are constrained to be non-negative.	https://developer.mozilla.org/en-US/docs/Web/API/SVGRect
The 'X' property	A										The x property describes the horizontal coordinate of the position of the element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGRect/The__X__property
SVGRectElement	A										The SVGRectElement interface provides access to the properties of rect elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGRectElement
SVGScriptElement	A										The SVGScriptElement interface corresponds to the SVG script element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGScriptElement
SVGSetElement	A										The SVGSetElement interface corresponds to the set element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGSetElement
SVGStopElement	A										The SVGStopElement interface corresponds to the stop element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGStopElement
SVGStringList	A										The SVGStringList defines a list of DOMString objects.	https://developer.mozilla.org/en-US/docs/Web/API/SVGStringList
SVGStylable	A										The SVGStylable interface is implemented on all objects corresponding to SVG elements that can have style, class and presentation attributes specified on them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGStylable
SVGStyleElement	A										The SVGStyleElement interface corresponds to the SVG style element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGStyleElement
SVGSVGElement	A										The SVGSVGElement interface provides access to the properties of svg elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.	https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement
SVGSwitchElement	A										The SVGSwitchElement interface corresponds to the switch element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGSwitchElement
SVGSymbolElement	A										The SVGSymbolElement interface corresponds to the symbol element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGSymbolElement
SVGTests	A										Interface SVGTests defines an interface which applies to all elements which have attributes requiredFeatures, requiredExtensions and systemLanguage.	https://developer.mozilla.org/en-US/docs/Web/API/SVGTests
SVGTextElement	A										The SVGTextElement interface corresponds to the text elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGTextElement
SVGTextPositioningElement	A										The SVGTextPositioningElement interface is inherited by text-related interfaces: SVGTextElement, SVGTSpanElement, SVGTRefElement and SVGAltGlyphElement.	https://developer.mozilla.org/en-US/docs/Web/API/SVGTextPositioningElement
SVGTitleElement	A										The SVGTitleElement interface corresponds to the title element.	https://developer.mozilla.org/en-US/docs/Web/API/SVGTitleElement
SVGTransform	A										SVGTransform is the interface for one of the component transformations within an SVGTransformList ; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a transform attribute.	https://developer.mozilla.org/en-US/docs/Web/API/SVGTransform
SVGTransformable	A										Interface SVGTransformable contains properties and methods that apply to all elements which have attribute transform.	https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformable
SVGTransformList	A										The SVGTransformList defines a list of SVGTransform objects.	https://developer.mozilla.org/en-US/docs/Web/API/SVGTransformList
SVGTRefElement	A										The SVGTRefElement interface provides access to the properties of tref elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGTRefElement
SVGTSpanElement	A										The SVGTSpanElement interface provides access to the properties of tspan elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGTSpanElement
SVGUseElement	A										The SVGUseElement interface provides access to the properties of use elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGUseElement
SVGViewElement	A										The SVGViewElement interface provides access to the properties of view elements, as well as methods to manipulate them.	https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement
SVGVKernElement	A										The SVGVKernElement interface corresponds to the vkern elements.	https://developer.mozilla.org/en-US/docs/Web/API/SVGVKernElement
SyncEvent	A										The SyncEvent interface represents a sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.	https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent
SyncEventlastChance	A										<pre><code>var lastChance = SyncEvent.lastChance</code></pre>The SyncEvent.lastChance read-only property of the SyncEvent interface returns true if the user agent will not make further synchronization attempts after the current attempt. This is the value passed in the lastChance parameter of the SyncEvent() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent/lastChance
registration	A										<pre><code>var syncReg = SyncEvent.registration</code></pre>The registration read-only property of the SyncEvent interface returns a reference to a SyncRegistration object.	https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent/registration
SyncEvent.SyncEvent()	A										<pre><code>var mySyncEvent = new SyncEvent(type, init)</code></pre>The SyncEvent() constructor creates a new SyncEvent object.	https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent/SyncEvent
SyncEvent.tag	A										<pre><code>var tag = SyncEvent.tag</code></pre>The SyncEvent.tag read-only property of the SyncEvent interface returns the developer-defined identifier for this SyncEvent. This is the value passed in the tag parameter of the SyncEvent() constructor.	https://developer.mozilla.org/en-US/docs/Web/API/SyncEvent/tag
SyncManager	A										The SyncManager interface of the the ServiceWorker API provides an interface for registering and listing sync registrations.	https://developer.mozilla.org/en-US/docs/Web/API/SyncManager
SyncManager.getTags()	A										<pre><code>SyncManager.getTags().then(function(tags[]) { ... })</code></pre>The SyncManager.getTags method of the SyncManager interface returns a list of developer-defined identifiers for SyncManager registrations.	https://developer.mozilla.org/en-US/docs/Web/API/SyncManager/getTags
SyncManager.register()	A										<pre><code>SyncManager.register([options]).then(function(syncRegistration) { ... })</code></pre>The SyncManager.register method of the SyncManager interface returns a Promise that resolves to a SyncRegistration instance.	https://developer.mozilla.org/en-US/docs/Web/API/SyncManager/register
SyncRegistration	A										The SyncRegistration interface of the the ServiceWorker API provides an object for managing background synchronization.	https://developer.mozilla.org/en-US/docs/Web/API/SyncRegistration
id	A										<pre><code>&#8203;tbd</code></pre>tbd	https://developer.mozilla.org/en-US/docs/Web/API/SyncRegistration/id
SyncRegistration.tag	A										<pre><code>&#8203;var myRegistrationID = SyncRegistration.tag;\n</code></pre>The tag read-only property of the SyncRegistration interface provides the unique identifier of the specified SyncRegistration object.	https://developer.mozilla.org/en-US/docs/Web/API/SyncRegistration/tag
unregister	A										<pre><code>&#160;SyncRegistration.unregister().then(function(Boolean) { ... }):</code></pre>The unregister() method of the SyncRegistration interface returns a Promise that resolves to a  Boolean indicating whether the SyncRegistration object was unregistered.	https://developer.mozilla.org/en-US/docs/Web/API/SyncRegistration/unregister
Text	A										The Text interface represents the textual content of Element or Attr.  If an element has no markup within its content, it has a single child implementing Text that contains the element's text.  However, if the element contains markup, it is parsed into information items and Text nodes that form its children.	https://developer.mozilla.org/en-US/docs/Web/API/Text
HTMLSlotElement.assignedSlot	A										<pre><code>var htmlSlotElement = Text.assignedSlot</code></pre>The assignedSlot property of the Text interface returns the HTMLSlotElement object associated with the element.	https://developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot
Text.splitText()	A										<pre><code>replacementNode = textnode.splitText(offset) \n</code></pre>The Text.splitText() method breaks the Text node into two nodes at the specified offset, keeping both nodes in the tree as siblings.	https://developer.mozilla.org/en-US/docs/Web/API/Text/splitText
Text()	A										<pre><code>text1 = new Text(); // Create an empty text node\ntext2 = new Text("This is a text node");\n</code></pre>The Text() constructor returns a newly created Text object with the optional DOMString given in parameter as its textual content.	https://developer.mozilla.org/en-US/docs/Web/API/Text/Text
Text.wholeText	A										<pre><code>str = textnode.wholeText;</code></pre>The Text.wholeText read-only property returns all text of all Text nodes logically adjacent to the node. The text is concatenated in document order.  This allows to specify any text node and obtain all adjacent text as a single string.	https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText
TextDecoder	A										The TextDecoder interface represents a decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk,... A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.	https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder
TextDecoder.decode()	A										<pre><code>b1 = decoder.decode(buffer, options);\nb2 = decoder.decode(buffer);\nb3 = decoder.decode();\n</code></pre>The TextDecoder.decode method returns a DOMString containing the text, given in parameters, decoded with the specific method for that TextDecoder object.	https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/decode
TextDecoder.encoding	A										<pre><code>b = decoder.decoding;</code></pre>The TextDecoder.encoding read-only property returns a DOMString containing the name of the decoding algorithm used by the specific decoder.	https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/encoding
TextDecoder()	A										<pre><code>decoder = new TextDecoder(utfLabel, options); \n</code></pre>The TextDecoder() constructor returns a newly created TextDecoder object for the encoding specified in parameter.	https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/TextDecoder
TextEncoder	A										TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.	https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder
TextEncoder.encode()	A										<pre><code>b1 = encoder.encode(buffer, options);\nb2 = encoder.encode(buffer);\n</code></pre>The TextEncoder.encode method returns a Uint8Array containing the text given in parameters encoded with the specific method for that TextEncoder object.	https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encode
TextEncoder.encoding	A										<pre><code>b = encoder.encoding;</code></pre>The TextEncoder.encoding read-only property returns a DOMString containing the name of the encoding algorithm used by the specific encoder.	https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encoding
TextEncoder()	A										<pre><code>encoder = new TextEncoder(utfLabel); \n</code></pre>The TextEncoder() constructor returns a newly created TextEncoder object for the encoding specified in parameter.	https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder
TextMetrics	A										The TextMetrics interface represents the dimension of a text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.	https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics
TextMetrics.width	A										<pre><code>readonly metrics.width;</code></pre>The readonly TextMetrics.width property contains the text's advance width (the width of that inline box) in CSS pixels.	https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/width
TimeEvent	A										Extends Event.	https://developer.mozilla.org/en-US/docs/Web/API/TimeEvent
TimeRanges	A										The TimeRanges interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the audio and video elements.	https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
TimeRanges.end()	A										<pre><code>endTime = TimeRanges.end(index) \n</code></pre>Returns the time offset at which a specified time range ends.	https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/end
TimeRanges.length	A										<pre><code>length = TimeRanges.length;\n</code></pre>The TimeRanges.length read-only property returns the number of ranges in the object.	https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/length
TimeRanges.start()	A										<pre><code>startTime = TimeRanges.start(index) \n</code></pre>Returns the time offset at which a specified time range begins.	https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/start
Touch	A										The Touch interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.	https://developer.mozilla.org/en-US/docs/Web/API/Touch
Touch.clientX	A										<pre><code>touchItem.clientX;</code></pre>The Touch.clientX read-only property returns the X coordinate of the touch point relative to the viewport, not including any scroll offset.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientX
Touch.clientY	A										<pre><code>touchItem.clientY;</code></pre>The Touch.clientY read-only property returns the Y coordinate of the touch point relative to the browser's viewport, not including any scroll offset.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientY
Touch.force	A										<pre><code>touchItem.force;</code></pre>The Touch.force read-only property returns the amount of pressure the user is applying to the touch surface for a Touch point.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/force
Touch.identifier	A										<pre><code>touchItem.identifier;</code></pre>The Touch.identifier returns a value uniquely identifying this point of contact with the touch surface. This value remains consistent for every event involving this finger's (or stylus's) movement on the surface until it is lifted off the surface.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/identifier
Touch.pageX	A										<pre><code>touchItem.pageX;</code></pre>The Touch.pageX read-only property returns the X coordinate of the touch point relative to the viewport, including any scroll offset.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/pageX
Touch.pageY	A										<pre><code>touchItem.pageY;</code></pre>The Touch.pageY read-only property returns the Y coordinate of the touch point relative to the viewport, including any scroll offset.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/pageY
Touch.radiusX	A										<pre><code>var xRadius = touchItem.radiusX;\n</code></pre>Returns the X radius of the ellipse that most closely circumscribes the area of contact with the touch surface. The value is in CSS pixels of the same scale as Touch.screenX.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusX
Touch.radiusY	A										<pre><code>var yRadius = touchItem.radiusY;\n</code></pre>Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the touch surface. The value is in CSS pixels of the same scale as Touch.screenX.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusY
Touch.rotationAngle	A										<pre><code>var angle = touchItem.rotationAngle;\n</code></pre>Returns the rotation angle, in degrees, of the contact area ellipse defined by Touch.radiusX&#160;and Touch.radiusY. The value may be between 0 and 90. Together, these three values describe an ellipse that approximates the size and shape of the area of contact between the user and the screen. This may be a relatively large ellipse representing the contact between a fingertip and the screen or a small area representing the tip of a stylus, for example.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle
Touch.screenX	A										<pre><code>var x = touchItem.screenX;\n</code></pre>Returns the X coordinate of the touch point relative to the screen, not including any scroll offset.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenX
Touch.screenY	A										<pre><code>var y = touchItem.screenY;\n</code></pre>Returns the Y coordinate of the touch point relative to the screen, not including any scroll offset.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenY
Touch.target	A										<pre><code>var el = touchPoint.target;\n</code></pre>Returns the Element (EventTarget) on which the touch contact started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document. Note that if the target element is removed from the document, events will still be targeted at it, and hence won't necessarily bubble up to the window or document anymore. If there is any risk of an element being removed while it is being touched, the best practice is to attach the touch listeners directly to the target.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/target
Touch()	A										<pre><code> touch = new Touch(touchInit);</code></pre>The Touch() constructor creates a new Touch object.	https://developer.mozilla.org/en-US/docs/Web/API/Touch/Touch
TouchEvent	A										The TouchEvent interface represents an event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent
TouchEvent.altKey	A										<pre><code>var altEnabled = touchEvent.altKey;\n</code></pre>A Boolean value indicating whether or not the alt (Alternate) key is enabled when the touch event is created. If the alt key&#160;is enabled, the attribute's value is true. Otherwise, it is&#160;false.	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/altKey
TouchEvent.changedTouches	A										<pre><code>var changes = touchEvent.changedTouches;\n</code></pre>A TouchList whose touch points (Touch objects) varies depending on the event type, as follows:	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches
TouchEvent.ctrlKey	A										<pre><code>var ctrlEnabled = touchEvent.ctrlKey;\n</code></pre>A Boolean value indicating whether the control (Control) key is enabled when the touch event is created.&#160;If&#160;this key is enabled, the attribute's value is true. Otherwise, it is false.	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/ctrlKey
TouchEvent.metaKey	A										<pre><code>var metaEnabled = touchEvent.metaKey;\n</code></pre>A Boolean value indicating whether or not the Meta key is enabled when the touch event is created. If this key is enabled, the attribute's value is true. Otherwise, it is&#160;false.	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/metaKey
TouchEvent.shiftKey	A										<pre><code>var shiftEnabled = touchEvent.shiftKey;\n</code></pre>A Boolean value indicating whether or not the shift key is enabled when the touch event is created. If this key is enabled, the attribute's value is true. Otherwise, it is&#160;false.	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey
TouchEvent.targetTouches	A										<pre><code>var touches = touchEvent.targetTouches;\n</code></pre>A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/targetTouches
TouchEvent.touches	A										<pre><code>var touches = touchEvent.touches;\n</code></pre>A TouchList listing all the Touch objects for touch points that are currently in contact with the touch surface, regardless of whether or not they've changed or what their target element was at touchstart time.	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches
TouchEvent()	A										<pre><code> event = new TouchEvent(typeArg, touchEventInit);</code></pre>The Touch Event() constructor creates a new TouchEvent.	https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent
TouchList	A										The TouchList interface represents a list of contact points with a touch surface; for example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries.	https://developer.mozilla.org/en-US/docs/Web/API/TouchList
TouchList.item()	A										<pre><code>var touchPoint = touchList.item(index);\n</code></pre>Returns the Touch object at the specified index in the TouchList.	https://developer.mozilla.org/en-US/docs/Web/API/TouchList/item
TouchList.length	A										<pre><code>var numTouches = touchList.length;\n</code></pre>This read-only property indicates the number of items (touch points) in a TouchList.	https://developer.mozilla.org/en-US/docs/Web/API/TouchList/length
Touch events	A										In order to provide quality support for touch-based user interfaces, touch events offer the ability to interpret finger (or stylus) activity on touch screens or trackpads.	https://developer.mozilla.org/en-US/docs/Web/API/Touch_events
Multi-touch interaction	A										The touch event interfaces support application-specific single and multi-touch interactions. However, the interfaces can be a bit tricky for programmers to use because touch events are very different from other DOM input events, such as mouse events. The application described in this guide shows how to use touch events for simple single and multi-touch interactions, the basics needed to build application-specific gestures.	https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Multi-touch_interaction
Supporting both TouchEvent and MouseEvent	A										The touch interfaces enable applications to create enhanced user experiences on touch enabled devices. However, the reality is the vast majority of today's web content is designed only to work with mouse input. Consequently, even if a browser supports touch, the browser must still emulate mouse events so content that assumes mouse-only input will work as is without direct modification.	https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent
Using Touch Events	A										Today, most Web content is designed for keyboard and mouse input. However, devices with touch screens (especially portable devices) are mainstream and Web applications can either directly process touch-based input by using Touch Events or the application can use interpreted mouse events for the application input. A disadvantage to using mouse events is that they do not support concurrent user input, whereas touch events support multiple simultaneous inputs (possibly at different locations on the touch surface), thus enhancing user experiences.	https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Using_Touch_Events
TrackDefault	A										The TrackDefault interface provides a SourceBuffer with kind, label, and language information for tracks that do not contain this information in the initialization segments of a media chunk.	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefault
TrackDefault.byteStreamTrackID	A										<pre><code>var myID = TrackDefault.byteStreamTrackID;\n</code></pre>The byteStreamTrackID read-only property of the TrackDefault interface returns the ID of the specific track that the SourceBuffer should apply to.	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefault/byteStreamTrackID
TrackDefault.kinds	A										<pre><code>var mykinds = TrackDefault.kinds;\n</code></pre>The kinds read-only property of the TrackDefault interface returns default kinds for an associated SourceBuffer to use when an initialization segment does not contain label information for a new track.	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefault/kinds
TrackDefault.label	A										<pre><code>var mylabel = TrackDefault.label;\n</code></pre>The label read-only property of the TrackDefault interface returns the default label for an associated SourceBuffer to use when an initialization segment does not contain label information for a new track.	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefault/label
TrackDefault.language	A										<pre><code>var mylanguage = TrackDefault.language;\n</code></pre>The language read-only property of the TrackDefault interface returns a default language for an associated SourceBuffer to use when an initialization segment does not contain language information for a new track.	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefault/language
TrackDefault.TrackDefault()	A										<pre><code>var trackDefault = new TrackDefault(type, language, label, kinds, byteStreamTrackID);</code></pre>The TrackDefault() constructor of the TrackDefault interface constructs and returns a new TrackDefault object.	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefault/TrackDefault
TrackDefault.type	A										<pre><code>var myType = TrackDefault.type;\n</code></pre>The type read-only property of the TrackDefault interface returns the type of track that this SourceBuffer 's media segment data relates to (i.e. audio, video, or text track.)	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefault/type
TrackDefaultList	A										The TrackDefaultList interface represents a simple container list for multiple TrackDefault objects.	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefaultList
TrackDefaultList.length	A										<pre><code>var myListLength = TrackDefaultList.length;</code></pre>The length read-only property of the TrackDefaultList interface returns the number of TrackDefault objects in the list.	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefaultList/length
TrackDefaultList.TrackDefault()	A										<pre><code>var myTrackDefault = TrackDefaultList[index];</code></pre>The TrackDefault() getter method of the TrackDefaultList interface allows the TrackDefault objects in the list to be accessed with an array operator (i.e. [].)	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefaultList/TrackDefault
TrackDefaultList.TrackDefaultList()	A										<pre><code>var trackDefaultList = new TrackDefaultList(trackDefaults);</code></pre>The TrackDefaultList() constructor of the TrackDefaultList interface constructs and returns a new TrackDefaultList object.	https://developer.mozilla.org/en-US/docs/Web/API/TrackDefaultList/TrackDefaultList
Transferable	A										The Transferable interface represents an object that can be transfered between different execution contexts, like the main thread and Web workers.	https://developer.mozilla.org/en-US/docs/Web/API/Transferable
TransitionEvent	A										The Transition Event interface represents events providing information related to transitions.	https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
TransitionEvent.animationName	A										<pre><code>name = TransitionEvent.transitionName</code></pre>The TransitionEvent.transitionName read-only property is a DOMString containing the name of the CSS property associated with the transition.	https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/animationName
TransitionEvent.elapsedTime	A										<pre><code>name = TransitionEvent.elapsedTime</code></pre>The TransitionEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.	https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime
TransitionEvent.initTransitionEvent()	A										<pre><code>transitionEvent.initTransitionEvent(typeArg, canBubbleArg, cancelableArg, transitionNameArg, elapsedTimeArg);</code></pre>The TransitionEvent.initTransitionEvent() method Initializes a transition event created using the deprecated Document.createEvent("TransitionEvent") method.	https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/initTransitionEvent
TransitionEvent.pseudoElement	A										<pre><code>name = TransitionEvent.pseudoElement</code></pre>The TransitionEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: ''.	https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement
TransitionEvent()	A										<pre><code>transitionEvent = new TransitionEvent(type, {animationName: aPropertyName, \n                                             elapsedTime  : aFloat, \n                                             pseudoElement: aPseudoElementName});\n</code></pre>The TransitionEvent() constructor returns a newly created TransitionEvent, representing an event in relation with an transition.	https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/TransitionEvent
TreeWalker	A										The TreeWalker object represents the nodes of a document subtree and a position within them.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker
TreeWalker.currentNode	A										<pre><code>node = treeWalker.currentNode;\ntreeWalker.currentNode = node;\n</code></pre>The TreeWalker.currentNode property represents the Node on which the TreeWalker is currently pointing at.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode
TreeWalker.filter	A										<pre><code>nodeFilter = treeWalker.filter;\n</code></pre>The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter
TreeWalker.firstChild()	A										<pre><code>node = treeWalker.firstChild;</code></pre>The TreeWalker.firstChild() method moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/firstChild
TreeWalker.lastChild()	A										<pre><code>node = treeWalker.lastChild();\n</code></pre>The TreeWalker.lastChild() method moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/lastChild
TreeWalker.nextNode()	A										<pre><code>node = treeWalker.nextNode();\n</code></pre>The TreeWalker.nextNode() method moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextNode
TreeWalker.nextSibling()	A										<pre><code>node = treeWalker.nextSibling();\n</code></pre>The TreeWalker.nextSibling() method moves the current Node to its next sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextSibling
TreeWalker.parentNode()	A										<pre><code>node = treeWalker.parentNode();\n</code></pre>The TreeWalker.parentNode() method moves the current Node to the first visible ancestor node in the document order, and returns the found node. If no such node exists, or if it is above the TreeWalker 's root node, returns null and the current node is not changed.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/parentNode
TreeWalker.previousNode()	A										<pre><code>node = treeWalker.previousNode();\n</code></pre>The TreeWalker.previousNode() method moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists,or if it is before that the root node defined at the object construction, returns null and the current node is not changed.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousNode
TreeWalker.previousSibling()	A										<pre><code>node = treeWalker.previousSibling();\n</code></pre>The TreeWalker.previousSibling() method moves the current Node to its previous sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousSibling
TreeWalker.root	A										<pre><code>root = TreeWalker.root;</code></pre>The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses.	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root
TreeWalker.whatToShow	A										<pre><code>nodeTypes = treeWalker.whatToShow;</code></pre>The TreeWalker.whatToShow read-only property returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:	https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow
UDP Socket API	A										//TODO: docs are missing, see https://bugzilla.mozilla.org/show_bug.cgi?id=745283	https://developer.mozilla.org/en-US/docs/Web/API/UDP_Socket_API
UIEvent	A										The UIEvent interface represents simple user interface events.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent
UIEvent.cancelBubble	A										<pre><code>event.cancelBubble = bool;\nvar bool = event.cancelBubble;\n</code></pre>The UIEvent.cancelBubble property indicates if event bubbling for this event has been canceled or not. It is set to false by default, allowing the event to bubble up the DOM, if it is a bubbleable event. Setting this property to true stops the event from bubbling up the DOM. Not all events are allowed to bubble up the DOM.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/cancelBubble
UIEvent.detail	A										The UIEvent.detail read-only property, when non-zero, provides the current (or next, depending on the event) click count.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail
UIEvent.initUIEvent()	A										<pre><code>event.initUIEvent(type, canBubble, cancelable, view, detail) \n</code></pre>The UIEvent.initUIEvent() method initializes a UI event once it's been created.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/initUIEvent
UIEvent.isChar	A										<pre><code>bool = event.isChar;\n</code></pre>The UIEvent.isChar read-only property returns a Boolean indicating whether the event produced a key character or not.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/isChar
UIEvent.layerX	A										<pre><code>var xpos = event.layerX&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;pageX\pageY &amp; layerX\layerY example&lt;/title&gt;\n\n&lt;script type="text/javascript"&gt;\n\nfunction showCoords(evt){\n  var form = document.forms.form_coords;\n  var parent_id = evt.target.parentNode.id;\n  form.parentId.value = parent_id;\n  form.pageXCoords.value = evt.pageX;\n  form.pageYCoords.value = evt.pageY;\n  form.layerXCoords.value = evt.layerX;\n  form.layerYCoords.value = evt.layerY;\n}\n&lt;/script&gt;\n\n&lt;style type="text/css"&gt;\n\n #d1 {\n  border: solid blue 1px;\n  padding: 20px;\n }\n\n #d2 {\n  position: absolute;\n  top: 180px;\n  left: 80%;\n  right:auto;\n  width: 40%;\n  border: solid blue 1px;\n  padding: 20px;\n }\n\n #d3 {\n  position: absolute;\n  top: 240px;\n  left: 20%;\n  width: 50%;\n  border: solid blue 1px;\n  padding: 10px;\n }\n\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body onmousedown="showCoords(event)"&gt;\n\n&lt;p&gt;To display the mouse coordinates please click anywhere on the page.&lt;/p&gt;\n\n&lt;div id="d1"&gt;\n&lt;span&gt;This is an un-positioned div so clicking it will return\nlayerX/layerY values almost the same as pageX/PageY values.&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div id="d2"&gt;\n\n&lt;span&gt;This is a positioned div so clicking it will return layerX/layerY\nvalues that are relative to the top-left corner of this positioned\nelement. Note the pageX\pageY properties still return the\nabsolute position in the document, including page scrolling.&lt;/span&gt;\n\n&lt;span&gt;Make the page scroll more! This is a positioned div so clicking it\nwill return layerX/layerY values that are relative to the top-left\ncorner of this positioned element. Note the pageX\pageY properties still\nreturn the absolute position in the document, including page\nscrolling.&lt;/span&gt;\n\n&lt;/div&gt;\n\n&lt;div id="d3"&gt;\n&lt;form name="form_coords" id="form1"&gt;\n Parent Element id: &lt;input type="text" name="parentId" size="7" /&gt;&lt;br /&gt;\n pageX:&lt;input type="text" name="pageXCoords" size="7" /&gt;&#160;&#160;\n pageY:&lt;input type="text" name="pageYCoords" size="7" /&gt;&lt;br /&gt;\n layerX:&lt;input type="text" name="layerXCoords" size="7" /&gt;&#160;&#160;\n layerY:&lt;input type="text" name="layerYCoords" size="7" /&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>The UIEvent.layerX read-only property returns the horizontal coordinate of the event relative to the current layer.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/layerX
UIEvent.layerY	A										<pre><code>var ypos = event.layerY;\n</code></pre>The UIEvent.layerY read-only property returns the vertical coordinate of the event relative to the current layer.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/layerY
UIEvent.pageX	A										<pre><code>var pos = event.pageXvar pageX = event.pageX;</code></pre>The UIEvent.pageX read-only property returns the horizontal coordinate of the event relative to the whole document.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/pageX
UIEvent.pageY	A										<pre><code>var pageY = event.pageY;\n</code></pre>The UIEvent.pageY read-only property returns the vertical coordinate of the event relative to the whole document.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/pageY
sourceCapabilities	A										<pre><code>var iDC = event.sourceCapabilities</code></pre>The UIEvent.sourceCapabilities read-only property returns an instance of the InputDeviceCapabilities interface which provides information about the physical device responsible for generating a touch event. If no input device was responsible for the event, it returns null.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/sourceCapabilities
UIEvent()	A										<pre><code> event = new UIEvent(typeArg, UIEventInit)</code></pre>The UIEvent() constructor creates a new UIEvent.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/UIEvent
UIEvent.view	A										<pre><code>var view = event.view;\n</code></pre>The UIEvent.view read-only property returns the WindowProxy object from which the event was generated. In browsers, this is the Window object the event happened in.	https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view
URL	A										The URL interface represent an object providing static methods used for creating object URLs.	https://developer.mozilla.org/en-US/docs/Web/API/URL
URL.createObjectURL()	A										<pre><code>objectURL = URL.createObjectURL(blob);\n</code></pre>The URL.createObjectURL() static method creates a DOMString containing an URL representing the object given in parameter. The URL lifetime is tied to the document in the window on which it was created. The new object URL represents the specified File object or Blob object.	https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
URL.origin	A										<pre><code>string = URLObject.origin;\n</code></pre>The URL.origin read-only property returns a USVString containing the Unicode serialization of the origin of the represented URL, that is:	https://developer.mozilla.org/en-US/docs/Web/API/URL/origin
URL.revokeObjectURL()	A										<pre><code>window.URL.revokeObjectURL(objectURL);\n</code></pre>The URL.revokeObjectURL() static method releases an existing object URL which was previously created by calling URL.createObjectURL().&#160; Call this method when you've finished using a object URL, in order to let the browser know it doesn't need to keep the reference to the file any longer.	https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
URL.searchParams	A										<pre><code>var urRLSearchParams = URL.searchParams;</code></pre>The searchParams property of the URL interface returns a URLSearchParams object allowing to access the GET query arguments contained in the URL.	https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams
URL()	A										<pre><code>url = new URL(urlString, [baseURLstring])\nurl = new URL(urlString, baseURLobject)\n</code></pre>The URL() constructor returns a newly created URL object representing the URL defined by the parameters.	https://developer.mozilla.org/en-US/docs/Web/API/URL/URL
URLSearchParams	A										The URLSearchParams interface defines utility methods to work with the query string of a URL.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams
URLSearchParams.append()	A										<pre><code>URLSearchParams.append(name, value)</code></pre>The append() method of the URLSearchParams interface appends a specified key/value pair as a new search parameter.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append
URLSearchParams.delete()	A										<pre><code>URLSearchParams.delete(name)</code></pre>The delete() method of the URLSearchParams interface deletes the given search parameter and its associated value, from the list of all search parameters.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/delete
URLSearchParams.entries()	A										<pre><code>searchParams.entries();</code></pre>The URLSearchParams.entries() method returns an iterator allowing to go through all key/value pairs contained in this object. The key and value of each pair are USVString objects.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/entries
URLSearchParams.get()	A										<pre><code>URLSearchParams.get(name)</code></pre>The get() method of the URLSearchParams interface returns the first value associated to the given search parameter.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/get
URLSearchParams.getAll()	A										<pre><code>URLSearchParams.getAll(name)</code></pre>The getAll() method of the URLSearchParams interface returns all the values associated with a given search parameter as an array.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/getAll
URLSearchParams.has()	A										<pre><code>var hasName = URLSearchParams.has(name)</code></pre>The has() method of the URLSearchParams interface returns a Boolean that indicates whether a parameter with the specified name exists.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/has
URLSearchParams.keys()	A										<pre><code>searchParams.keys();</code></pre>The URLSearchParams.keys() method returns an iterator allowing to go through all keys contained in this object. The keys are USVString objects.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/keys
URLSearchParams.set()	A										<pre><code>URLSearchParams.set(name, value)</code></pre>The set() method of the URLSearchParams interface sets the value associated with a given search parameter to the given value. If there were several matching values, this method deletes the others. If the search parameter doesn't exist, this method creates it.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/set
URLSearchParams.toString()	A										<pre><code>URLSearchParams.toString()</code></pre>The toString() method of the URLSearchParams interface returns a string containg a query string suitable for use in a URL.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/toString
URLSearchParams()	A										<pre><code>var URLSearchParams = new URLSearchParams(init);</code></pre>The URLSearchParams() constructor creates and returns a new URLSearchParams object. Leading '?' are ignored.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams
URLSearchParams.values()	A										<pre><code>searchParams.values();</code></pre>The URLSearchParams.values() method returns an iterator allowing to go through all values contained in this object. The values are USVString objects.	https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/values
URLUtilsReadOnly	A										The URLUtilsReadOnly interface defines utility methods to work with URLs. It defines only non-modifying methods intended to be used on data that cannot be changed.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly
URLUtilsReadOnly.hash	A										<pre><code>string = object.hash;</code></pre>The URLUtilsReadOnly.hash read-only property returns a DOMString containing a '#' followed by the fragment identifier of the URL. The hash is not percent encoded.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/hash
URLUtilsReadOnly.host	A										<pre><code>string = object.host;</code></pre>The URLUtilsReadOnly.host read-only property returns a DOMString containing the host, that is the hostname, a ':', and the port of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/host
URLUtilsReadOnly.hostname	A										<pre><code>string = object.hostname;</code></pre>The URLUtilsReadOnly.hostname read-only property returns a DOMString containing the domain of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/hostname
URLUtilsReadOnly.href	A										<pre><code>string = object.href;</code></pre>The URLUtilsReadOnly.href read-only property returns a DOMString containing the whole URL.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/href
URLUtilsReadOnly.origin	A										<pre><code>string = object.origin;\n</code></pre>The URLUtilsReadOnly.origin read-only property is a DOMString containing the Unicode serialization of the origin of the represented URL, that is, for http and https, the scheme followed by '://', followed by the domain, followed by ':', followed by the port (the default port, 80 and 443 respectively, if explicitely specified). For URL using file: scheme, the value is browser dependant.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/origin
URLUtilsReadOnly.pathname	A										<pre><code>string = object.pathname;</code></pre>The URLUtilsReadOnly.pathname read-only property returns a DOMString containing an initial '/' followed by the path of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/pathname
URLUtilsReadOnly.port	A										<pre><code>string = object.port;</code></pre>The URLUtilsReadOnly.port read-only property returns a DOMString containing the port number of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/port
URLUtilsReadOnly.protocol	A										<pre><code>string = object.protocol;</code></pre>The URLUtilsReadOnly.protocol read-only property returns a DOMString containing the protocol scheme of the URL, including the final ':'.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/protocol
URLUtilsReadOnly.search	A										<pre><code>string = object.search;</code></pre>The URLUtilsReadOnly.search read-only property returns a DOMString containing a '?' followed by the parameters of the URL.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/search
URLUtilsReadOnly.toString()	A										<pre><code>string = object.toString();</code></pre>The URLUtilsReadOnly.toString() stringifier method returns a DOMString containing the whole URL. It is a synonym for URLUtilsReadOnly.href.	https://developer.mozilla.org/en-US/docs/Web/API/URLUtilsReadOnly/toString
UserProximityEvent	A										The UserProximityEvent indicates whether a nearby physical object is present by using the proximity sensor of a device.	https://developer.mozilla.org/en-US/docs/Web/API/UserProximityEvent
UserProximityEvent.near	A										<pre><code>var near = instanceOfUserProximityEvent.near;</code></pre>The near property tell if there is an object close to the device (true) or not (false).	https://developer.mozilla.org/en-US/docs/Web/API/UserProximityEvent/near
User Timing API	A										The User Timing interface allows the developer to create application specific timestamps that are part of the browser's performance timeline. There are two types of user defined timing event types: the " mark " event type and the " measure " event type.	https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API
Using the User Timing API	A										The User Timing interface allows the developer to create application specific timestamps that are part of the browser's performance timeline. There are two types of user defined timing entry types: the " mark " entry type and the " measure " entry type.	https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API/Using_the_User_Timing_API
Using the Browser API	A										The HTML Browser API is an extension of the HTML iframe element that allows web apps to implement browsers or browser-like applications. It was original used in Firefox OS to implement browser applications, and since Firefox 47 it is also available to desktop chrome code.	https://developer.mozilla.org/en-US/docs/Web/API/Using_the_Browser_API
USVString	A										USVString corresponds to the set of all possible sequences of unicode scalar values. USVString maps to a String when returned in JavaScript; it's generally only used for APIs that perform text processing and need a string of unicode scalar values to operate on.	https://developer.mozilla.org/en-US/docs/Web/API/USVString
ValidityState	A										The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.	https://developer.mozilla.org/en-US/docs/Web/API/ValidityState
ValidityState.badInput	A										The read-only property ValidityState.badInput indicates if the user has provided input that the browser is unable to convert. For example, if you have a mail input element whose content does not have a '@'.	https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/badInput
ValidityState.tooLong	A										The read-only property ValidityState.tooLong indicates if the value of an input or textarea, after having been edited by the user, exceeds the maximum code-unit length established by the element's maxlength attribute.	https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooLong
Vibration API	A										Most modern mobile devices include vibration hardware, which lets software code provide physical feedback to the user by causing the device to shake. The Vibration API offers Web apps the ability to access this hardware, if it exists, and does nothing if the device doesn't support it.	https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API
VideoPlaybackQuality	A										The VideoPlaybackQuality interface represents the set of metrics describing the playback quality of a video.	https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality
VideoPlaybackQuality.corruptedVideoFrames	A										<pre><code>value = videoPlaybackQuality.corruptedVideoFrames;</code></pre>The VideoPlaybackQuality.corruptedVideoFrames read-only property returns an unsigned long containing the number of corrupted video frames since the creation of the associated HTMLVideoElement. A corrupted frame may or may not be dropped, depending of the corruption and of the browser algorithm.	https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/corruptedVideoFrames
VideoPlaybackQuality.creationTime	A										<pre><code>value = videoPlaybackQuality.creationTime;</code></pre>The VideoPlaybackQuality.creationTime read-only property returns a DOMHighResTimeStamp containing the time in miliseconds since the start of the navigation and the creation of the object.	https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/creationTime
VideoPlaybackQuality.droppedVideoFrames	A										<pre><code>value = videoPlaybackQuality.droppedVideoFrames;</code></pre>The VideoPlaybackQuality.droppedVideoFrames read-only property returns an unsigned long containing the number of video frames dropped since the creation of the associated HTMLVideoElement.	https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/droppedVideoFrames
VideoPlaybackQuality.totalVideoFrames	A										<pre><code>value = videoPlaybackQuality.totalVideoFrames;</code></pre>The VideoPlaybackQuality.totalVideoFrames read-only property returns an unsigned long containing the number of video frames created and dropped since the creation of the associated HTMLVideoElement.	https://developer.mozilla.org/en-US/docs/Web/API/VideoPlaybackQuality/totalVideoFrames
VRDisplay	A										The VRDisplay interface of the WebVR API represents any VR device supported by this API. It includes generic information such as device IDs and descriptions, as well as methods for starting to present a VR scene, retrieving eye parameters and display capabilities, and other important functionality.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay
VRDisplay.cancelAnimationFrame()	A										<pre><code>vrDisplayInstance.cancelAnimationFrame(handle);\n</code></pre>The cancelAnimationFrame() method of the VRDisplay interface is a special implementation of Window.cancelAnimationFrame that unregisters callbacks registered with VRDisplay.requestAnimationFrame().	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/cancelAnimationFrame
VRDisplay.capabilities	A										<pre><code>var myCapabilities = vrDisplayInstance.capabilities;</code></pre>The capabilities read-only property of the VRDisplay interface returns a VRDisplayCapabilities object that indicates the various capabilities of the VRDisplay.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/capabilities
VRDisplay.depthFar	A										<pre><code>var mydepthFar = vrDisplayInstance.depthFar;\n\nvrDisplayInstance.depthFar = 7500.0;\n</code></pre>The depthFar property of the VRDisplay interface gets and sets the z-depth defining the far plane of the eye view frustum, i.e. the furthest viewable boundary of the scene.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthFar
VRDisplay.depthNear	A										<pre><code>var mydepthNear = vrDisplayInstance.depthNear;\n\nvrDisplayInstance.depthNear = 1.0;\n</code></pre>The depthNear property of the VRDisplay interface gets and sets the z-depth defining the near plane of the eye view frustum, i.e. the nearest viewable boundary of the scene.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthNear
VRDisplay.displayId	A										<pre><code>var myDisplayID = vrDisplayInstance.displayId;</code></pre>The displayId read-only property of the VRDisplay interface returns an identifier for this particular VRDisplay, which is also used as an association point in the Gamepad API (see Gamepad.displayId).	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayId
VRDisplay.displayName	A										<pre><code>var myDisplayName = vrDisplayInstance.displayName;</code></pre>The displayName read-only property of the VRDisplay interface returns a human-readable name to identify the VRDisplay.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayName
VRDisplay.exitPresent()	A										<pre><code>vrDisplayInstance.exitPresent().then(function() {\n  // Do something after the presentation has ended\n});\n</code></pre>The exitPresent() method of the VRDisplay interface stops the VRDisplay presenting a scene.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/exitPresent
VRDisplay.getEyeParameters()	A										<pre><code>var myEyeParameters = vrDisplayInstance.getEyeParameters(whichEye);\n</code></pre>The getEyeParameters() method of the VRDisplay interface returns the VREyeParameters object containing the eye parameters for the specified eye.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getEyeParameters
VRDisplay.getImmediatePose()	A										<pre><code>var myImmediatePose = vrDisplayInstance.getImmediatePose();\n</code></pre>The getImmediatePose() method of the VRDisplay interface returns a VRPose object defining the current pose of the VRDisplay, with no prediction applied.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getImmediatePose
VRDisplay.getLayers()	A										<pre><code>var myLayers = vrDisplayInstance.getLayers();\n</code></pre>The getLayers() method of the VRDisplay interface returns the layers currently being presented by the VRDisplay.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getLayers
VRDisplay.getPose()	A										<pre><code>var myPose = vrDisplayInstance.getPose();\n</code></pre>The getPose() method of the VRDisplay interface returns a VRPose object defining the future predicted pose of the VRDisplay as it will be when the current frame is actually presented.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getPose
VRdisplay.isConnected	A										<pre><code>var isItConnected = vrDisplayInstance.isConnected;\n</code></pre>The isConnected read-only property of the VRDisplay interface returns a Boolean indicating whether the VRDisplay is connected to the computer.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isConnected
VRDisplay.isPresenting	A										<pre><code>var isItPresenting = vrDisplayInstance.isPresenting;\n</code></pre>The isPresenting read-only property of the VRDisplay interface returns a Boolean indicating whether the VRDisplay is currently having content presented through it.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isPresenting
VRDisplay.requestAnimationFrame()	A										<pre><code>var handle = vrDisplayInstance.requestAnimationFrame(callback);\n</code></pre>The requestAnimationFrame() method of the VRDisplay interface is a special implementation of Window.requestAnimationFrame containing a callback function that will be called every time a new frame of the VRDisplay presentation is rendered:	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestAnimationFrame
VRDisplay.requestPresent()	A										<pre><code>vrDisplayInstance.requestPresent(layers).then(function() {\n  // Do something after the presentation has begun\n});\n</code></pre>The requestPresent() method of the VRDisplay interface starts the VRDisplay presenting a scene.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestPresent
VRDevice.resetPose()	A										<pre><code>vrDisplayInstance.resetPose();\n</code></pre>The resetPose() method of the VRDisplay interface resets the pose for the VRDisplay, treating its current VRPose.position and VRPose.orientation as the "origin/zero" values.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/resetPose
VRDisplay.stageParameters	A										<pre><code>var myStageParameters = vrDisplayInstance.stageParameters;\n</code></pre>The stageParameters read-only property of the VRDisplay interface returns a VRStageParameters object containing room-scale parameters, if the VRDisplay is capable of supporting room-scale experiences.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/stageParameters
VRDisplay.submitFrame()	A										<pre><code>vrDisplayInstance.submitFrame(pose);\n</code></pre>The submitFrame() method of the VRDisplay interface captures the current state of the VRLayer currently being presented and displays it on the VRDisplay.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/submitFrame
VRDisplayCapabilities	A										The VRDisplayCapabilities interface of the WebVR API describes the capabilities of a VRDisplay — its features can be used to perform VR device capability tests, for example can it return position information.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities
VRDisplayCapabilities.canPresent	A										<pre><code>var canIPresent = vrDisplayCapabilitiesInstance.canPresent;</code></pre>The canPresent read-only property of the VRDisplayCapabilities interface returns a Boolean stating whether the VR display is capable of presenting content (e.g. through an HMD).	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/canPresent
VRDisplayCapabilities.hasExternalDisplay	A										<pre><code>var hasAnExternalDisplay = vrDisplayCapabilitiesInstance.hasExternalDisplay;</code></pre>The hasExternalDisplay read-only property of the VRDisplayCapabilities interface returns a Boolean stating whether the VR display is separate from the device's primary display.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasExternalDisplay
VRDisplayCapabilities.hasOrientation	A										<pre><code>var hasItGotOrientation = vrDisplayCapabilitiesInstance.hasOrientation;</code></pre>The hasOrientation read-only property of the VRDisplayCapabilities interface returns a Boolean stating whether the VR display can track and return orientation information.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasOrientation
VRDisplayCapabilities.hasPosition	A										<pre><code>var hasItGotPosition = vrDisplayCapabilitiesInstance.hasPosition;</code></pre>The hasPosition read-only property of the VRDisplayCapabilities interface returns a Boolean stating whether the VR display can track and return position information.	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasPosition
VRDisplayCapabilities.maxLayers	A										<pre><code>var maximumLayers = vrDisplayCapabilitiesInstance.maxLayers;</code></pre>The maxLayers read-only property of the VRDisplayCapabilities interface returns a number indicating the maximum number of VRLayer s that the VR display can present at once (e.g. the maximum length of the array that Display.requestPresent() can accept.)	https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/maxLayers
VREyeParameters	A										The VREyeParameters interface of the WebVR API represents all the information required to correctly render a scene for a given eye, including field of view information.	https://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters
VREyeParameters.fieldOfView	A										<pre><code>var curFOV = myVRDisplay.getEyeParameters('left').fieldOfView;</code></pre>The fieldOfView read-only property of the VREyeParameters interface describes t he current field of view for the eye, which can vary as the user adjusts their interpupillary distance (IPD).	https://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/fieldOfView
VREyeParameters.offset	A										<pre><code>var myEyeTranslation = myVRDisplay.getEyeParameters('left').offset;</code></pre>The offset read-only property of the VREyeParameters interface r epresents the o ffset from the center point between the user's eyes to the center of the eye, measured in meters.	https://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/offset
VREyeParameters.renderHeight	A										<pre><code>var curRenderHeight = myVRDisplay.getEyeParameters('left').renderHeight;</code></pre>The renderHeight read-only property of the VREyeParameters interface describes the recommended render target height of each eye viewport, in pixels.	https://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/renderHeight
VREyeParameters.renderWidth	A										<pre><code>var curRenderWidth = myVRDisplay.getEyeParameters('left').renderWidth;</code></pre>The renderWidth read-only property of the VREyeParameters interface describes the recommended render target width of each eye viewport, in pixels.	https://developer.mozilla.org/en-US/docs/Web/API/VREyeParameters/renderWidth
VRFieldOfView	A										The VRFieldOfView interface of the WebVR API represents a field of view defined by 4 different degree values describing the view from a center point.	https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfView
VRFieldOfView.downDegrees	A										<pre><code>var myDownDegrees = VRFieldOfView.downDegrees;</code></pre>The downDegrees read-only property of the VRFieldOfView interface returns the number of degrees downwards that the field of view extends in.	https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfView/downDegrees
VRFieldOfView.leftDegrees	A										<pre><code>var myLeftDegrees = VRFieldOfView.leftDegrees;</code></pre>The leftDegrees read-only property of the VRFieldOfView interface returns the number of degrees to the left that the field of view extends in.	https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfView/leftDegrees
VRFieldOfView.rightDegrees	A										<pre><code>var myRightDegrees = VRFieldOfView.rightDegrees;</code></pre>The rightDegrees read-only property of the VRFieldOfView interface returns the number of degrees to the right that the field of view extends in.	https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfView/rightDegrees
VRFieldOfView.upDegrees	A										<pre><code>var myUpDegrees = VRFieldOfView.upDegrees;</code></pre>The upDegrees read-only property of the VRFieldOfView interface returns the number of degrees upwards that the field of view extends in.	https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfView/upDegrees
VRLayer	A										The VRLayer interface (dictionary) of the WebVR API represents a content layer (an HTMLCanvasElement or OffscreenCanvas) that you want to present in a VR HMD.	https://developer.mozilla.org/en-US/docs/Web/API/VRLayer
VRLayer.leftBounds	A										<pre><code>var myVRLayer = { };\nmyVRLayer.leftBounds = [0.0, 0.0, 0.5, 1.0];</code></pre>The leftBounds read-only property of the VRLayer interface (dictionary) defines the left texture bounds of the canvas whose contents will be presented by the VRDisplay.	https://developer.mozilla.org/en-US/docs/Web/API/VRLayer/leftBounds
VRLayer.rightBounds	A										<pre><code>var myVRLayer = { };\nmyVRLayer.rightBounds = [0.5, 0.0, 0.5, 1.0];</code></pre>The rightBounds read-only property of the VRLayer interface (dictionary) defines the right texture bounds of the canvas whose contents will be presented by the VRDisplay.	https://developer.mozilla.org/en-US/docs/Web/API/VRLayer/rightBounds
VRLayer.source	A										<pre><code>var myVRLayer = { };\nmyVRLayer.source = myCanvas;</code></pre>The source read-only property of the VRLayer interface (dictionary) defines the canvas whose contents will be presented by the VRDisplay.	https://developer.mozilla.org/en-US/docs/Web/API/VRLayer/source
VRPose	A										The VRPose interface of the WebVR API represents the state of a VR sensor at a given timestamp (which includes orientation, position, velocity, and acceleration information.)	https://developer.mozilla.org/en-US/docs/Web/API/VRPose
VRPose.angularAcceleration	A										<pre><code>var myAngularAcceleration = VRPose.angularAcceleration;</code></pre>The angularAcceleration read-only property of the VRPose interface returns the angular acceleration of the VRDisplay at the current VRPose.timestamp, in meters per second per second.	https://developer.mozilla.org/en-US/docs/Web/API/VRPose/angularAcceleration
VRPose.angularVelocity	A										<pre><code>var myAngularVelocity = VRPose.angularVelocity;</code></pre>The angularVelocity read-only property of the VRPose interface returns the angular velocity of the VRDisplay at the current VRPose.timestamp, in radians per second.	https://developer.mozilla.org/en-US/docs/Web/API/VRPose/angularVelocity
VRPose.linearAcceleration	A										<pre><code>var myLinearAcceleration = VRPose.linearAcceleration;</code></pre>The linearAcceleration read-only property of the VRPose interface returns the linear acceleration of the VRDisplay at the current VRPose.timestamp, in meters per second per second.	https://developer.mozilla.org/en-US/docs/Web/API/VRPose/linearAcceleration
VRPose.linearVelocity	A										<pre><code>var myLinearVelocity = VRPose.linearVelocity;</code></pre>The linearVelocity read-only property of the VRPose interface returns the linear velocity of the VRDisplay at the current VRPose.timestamp, in meters per second.	https://developer.mozilla.org/en-US/docs/Web/API/VRPose/linearVelocity
VRPose.orientation	A										<pre><code>var myOrientation = VRPose.orientation;</code></pre>The orientation read-only property of the VRPositionState interface returns the orientation of the sensor at the current VRPose.timestamp, as a quarternion value.	https://developer.mozilla.org/en-US/docs/Web/API/VRPose/orientation
VRPose.position	A										<pre><code>var myPosition = VRPose.position;</code></pre>The position read-only property of the VRPose interface returns the position of the VRDisplay at the current VRPose.timestamp as a 3D vector.	https://developer.mozilla.org/en-US/docs/Web/API/VRPose/position
VRPose.timestamp	A										<pre><code>var myTimeStamp = VRPose.timestamp;</code></pre>The timestamp read-only property of the VRPose interface returns the current time stamp of the system — a monotonically increasing value representing the time since the current app was started.	https://developer.mozilla.org/en-US/docs/Web/API/VRPose/timeStamp
VRStageParameters	A										The VRStageParameters interface of the WebVR API represents the values describing the the stage area for devices that support room-scale experiences.	https://developer.mozilla.org/en-US/docs/Web/API/VRStageParameters
VRStageParameters.sittingToStandingTransform	A										<pre><code>var myTransform = vrStageParametersInstance.sittingToStandingTransform;</code></pre>The sittingToStandingTransform read-only property of the VRStageParameters interface contains a matrix that transforms the sitting-space position returned by VRDisplay.getPose() / VRDisplay.getImmediatePose() into a standing-space position.	https://developer.mozilla.org/en-US/docs/Web/API/VRStageParameters/sittingToStandingTransform
VRStageParameters.sizeX	A										<pre><code>var mySizeX = vrStageParametersInstance.sizeX;</code></pre>The sizeX read-only property of the VRStageParameters interface returns the w idth of the play-area bounds in meters.	https://developer.mozilla.org/en-US/docs/Web/API/VRStageParameters/sizeX
VRStageParameters.sizeY	A										<pre><code>var mySizeY = vrStageParametersInstance.sizeY;</code></pre>The sizeY read-only property of the VRStageParameters interface returns the depth of the play-area bounds in meters.	https://developer.mozilla.org/en-US/docs/Web/API/VRStageParameters/sizeY
WaveShaperNode	A										A WaveShaperNode always has exactly one input and one output.	https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode
WaveShaperNode.curve	A										<pre><code>var audioCtx = new AudioContext();\nvar distortion = audioCtx.createWaveShaper();\ndistortion.curve = myCurveDataArray; // myCurveDataArray is a Float32Array\n</code></pre>The curve property of the WaveShaperNode interface is a Float32Array of numbers describing the distortion to apply.	https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/curve
WaveShaperNode.oversample	A										<pre><code>distortion.oversample = enumeratedValue;\n</code></pre>The oversample property of the WaveShaperNode interface is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying a distortion effect to the audio signal.	https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/oversample
WebGL2RenderingContext	A										The WebGL2RenderingContext interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML canvas element.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext
WebGL2RenderingContext.beginQuery()	A										<pre><code>void gl.beginQuery(target, query);\n</code></pre>The WebGL2RenderingContext.beginQuery() method of the WebGL 2 API starts an asynchronous query. The target parameter indicates which kind of query to begin.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/beginQuery
WebGL2RenderingContext.beginTransformFeedback()	A										<pre><code>void gl.beginTransformFeedback(primitiveMode);\n</code></pre>The WebGL2RenderingContext.beginTransformFeedback() method of the WebGL 2 API starts a transform feedback operation.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/beginTransformFeedback
WebGL2RenderingContext.bindBufferBase()	A										<pre><code>void gl.bindBufferBase(target, index, buffer);</code></pre>The WebGL2RenderingContext.bindBufferBase() method of the WebGL 2 API binds a given WebGLBuffer to a given binding point (target) at a given index.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferBase
WebGL2RenderingContext.bindBufferRange()	A										<pre><code>void gl.bindBufferBase(target, index, buffer, offset, size);</code></pre>The WebGL2RenderingContext.bindBufferRange() method of the WebGL 2 API binds a range of a given WebGLBuffer to a given binding point (target) at a given index.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferRange
WebGL2RenderingContext.bindSampler()	A										<pre><code>void gl.bindSampler(unit, sampler);\n</code></pre>The WebGL2RenderingContext.bindSampler() method of the WebGL 2 API binds a passed WebGLSampler object to the texture unit at the passed index.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindSampler
WebGL2RenderingContext.bindTransformFeedback()	A										<pre><code>void gl.bindTransformFeedback(target, transformFeedback);\n</code></pre>The WebGL2RenderingContext.bindTransformFeedback() method of the WebGL 2 API binds a passed WebGLTransformFeedback object to the current GL state.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback
WebGL2RenderingContext.bindVertexArray()	A										<pre><code>void gl.bindVertexArray(vertexArray);\n</code></pre>The WebGL2RenderingContext.bindVertexArray() method of the WebGL 2 API binds a passed WebGLVertexArrayObject object to the buffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindVertexArray
WebGL2RenderingContext.blitFramebuffer()	A										<pre><code>void gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1,\n                        dstX0, dstY0, dstX1, dstX1,\n                        mask, filter);</code></pre>The WebGL2RenderingContext.blitFramebuffer() method of the WebGL 2 API transfers a block of pixels from the read framebuffer to the draw framebuffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/blitFramebuffer
WebGL2RenderingContext.clearBuffer[fiuv]()	A										<pre><code>void gl.clearBufferiv(buffer, drawBuffer, value);\nvoid gl.clearBufferuiv(buffer, drawBuffer, value);\nvoid gl.clearBufferfv(buffer, drawBuffer, value);\nvoid gl.clearBufferfi(buffer, drawBuffer, depth, stencil);\n</code></pre>The WebGL2RenderingContext.clearBuffer[fiuv]() methods of the WebGL 2 API clear buffers from the currently bound framebuffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer
WebGL2RenderingContext.clientWaitSync()	A										<pre><code>GLenum gl.clientWaitSync(sync, flags, timeout);\n</code></pre>The WebGL2RenderingContext.clientWaitSync() method of the WebGL 2 API blocks and waits for a WebGLSync object to become signaled or a given timeout to be passed.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clientWaitSync
WebGL2RenderingContext.compressedTexImage3D()	A										<pre><code>void gl.compressedTexImage2D(target, level, internalformat, width, height, depth, border, ArrayBufferView? pixels);\n</code></pre>The WebGL2RenderingContext.compressedTexImage3D() method of the WebGL API specifies a three-dimensional texture image in a compressed format.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D
WebGL2RenderingContext.compressedTexSubImage3D()	A										<pre><code>void gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ArrayBufferView? pixels);\n</code></pre>The WebGL2RenderingContext.compressedTexSubImage3D() method of the WebGL API specifies a three-dimensional sub-rectangle for a texture image in a compressed format.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D
WebGL2RenderingContext.copyBufferSubData()	A										<pre><code>void gl.copyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);</code></pre>The WebGL2RenderingContext.copyBufferSubData() method of the WebGL 2 API copies part of the data of a buffer to another buffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/copyBufferSubData
WebGL2RenderingContext.copyTexSubImage3D()	A										<pre><code>void gl.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);\n</code></pre>The WebGL2RenderingContext.copyTexSubImage3D() method of the WebGL API copies pixels from the current WebGLFramebuffer into an existing 3D texture sub-image.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/copyTexSubImage3D
WebGL2RenderingContext.createQuery()	A										<pre><code>WebGLQuery gl.createQuery();\n</code></pre>The WebGL2RenderingContext.createQuery() method of the WebGL 2 API creates and initializes WebGLQuery objects, which provide ways to asynchronously query for information.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createQuery
WebGL2RenderingContext.createSampler()	A										<pre><code>WebGLSampler gl.createSampler();\n</code></pre>The WebGL2RenderingContext.createSampler() method of the WebGL 2 API creates and initializes WebGLSampler objects.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createSampler
WebGL2RenderingContext.createTransformFeedback()	A										<pre><code>WebGLTransformFeedback gl.createTransformFeedback();\n</code></pre>The WebGL2RenderingContext.createTransformFeedback() method of the WebGL 2 API creates and initializes WebGLTransformFeedback objects.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createTransformFeedback
WebGL2RenderingContext.createVertexArray()	A										<pre><code>WebGLVertexArrayObject gl.createVertexArray();\n</code></pre>The WebGL2RenderingContext.createVertexArray() method of the WebGL 2 API creates and initializes a WebGLVertexArrayObject object that represents a vertex array object (VAO) pointing to vertex array data and which provides names for different sets of vertex data.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createVertexArray
WebGL2RenderingContext.deleteQuery()	A										<pre><code>void gl.deleteQuery(query);\n</code></pre>The WebGL2RenderingContext.deleteQuery() method of the WebGL 2 API deletes a given WebGLQuery object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteQuery
WebGL2RenderingContext.deleteSampler()	A										<pre><code>void gl.deleteSampler(sampler);\n</code></pre>The WebGL2RenderingContext.deleteSampler() method of the WebGL 2 API deletes a given WebGLSampler object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteSampler
WebGL2RenderingContext.deleteSync()	A										<pre><code>void gl.deleteSync(sync);\n</code></pre>The WebGL2RenderingContext.deleteSync() method of the WebGL 2 API deletes a given WebGLSync object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteSync
WebGL2RenderingContext.deleteTransformFeedback()	A										<pre><code>void gl.deleteTransformFeedback(transformFeedback);\n</code></pre>The WebGL2RenderingContext.deleteTransformFeedback() method of the WebGL 2 API deletes a given WebGLTransformFeedback object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteTransformFeedback
WebGL2RenderingContext.deleteVertexArray()	A										<pre><code>void gl.deleteVertexArray(vertexArray);\n</code></pre>The WebGL2RenderingContext.deleteVertexArray() method of the WebGL 2 API deletes a given WebGLVertexArrayObject object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteVertexArray
WebGL2RenderingContext.drawArraysInstanced()	A										<pre><code>void gl.drawArraysInstanced(mode, first, count, instanceCount);</code></pre>The WebGL2RenderingContext.drawArraysInstanced() method of the WebGL 2 API renders primitives from array data like the gl.drawArrays() method. In addition, it can execute multiple instances of the range of elements.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced
WebGL2RenderingContext.drawBuffers()	A										<pre><code>void gl.drawBuffers(buffers);\n</code></pre>The WebGL2RenderingContext.drawBuffers() method of the WebGL 2 API defines draw buffers to which fragment colors are written into. The draw buffer settings are part of the state of the currently bound framebuffer or the drawingbuffer if no framebuffer is bound.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawBuffers
WebGL2RenderingContext.drawElementsInstanced()	A										<pre><code>void gl.drawElementsInstanced(mode, count, type, offset, instanceCount);\n</code></pre>The WebGL2RenderingContext.drawElementsInstanced() method of the WebGL 2 API renders primitives from array data like the gl.drawElements() method. In addition, it can execute multiple instances of a set of elements.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced
WebGL2RenderingContext.drawRangeElements()	A										<pre><code>void gl.drawRangeElements(mode, start, end, count, type, offset);\n</code></pre>The WebGL2RenderingContext.drawRangeElements() method of the WebGL API renders primitives from array data in a given range.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawRangeElements
WebGL2RenderingContext.endQuery()	A										<pre><code>void gl.endQuery(target);\n</code></pre>The WebGL2RenderingContext.endQuery() method of the WebGL 2 API marks the end of a given query target.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/endQuery
WebGL2RenderingContext.endTransformFeedback()	A										<pre><code>void gl.endTransformFeedback();\n</code></pre>The WebGL2RenderingContext.endTransformFeedback() method of the WebGL 2 API ends a transform feedback operation.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/endTransformFeedback
WebGL2RenderingContext.fenceSync()	A										<pre><code>WebGLSync gl.fenceSync(condition, flags);\n</code></pre>The WebGL2RenderingContext.fenceSync() method of the WebGL 2 API creates a new WebGLSync object and inserts it into the GL command stream.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/fenceSync
WebGL2RenderingContext.framebufferTextureLayer()	A										<pre><code>void gl.framebufferTextureLayer(target, attachment, texture, level, layer);</code></pre>The WebGL2RenderingContext.framebufferTextureLayer() method of the WebGL 2 API attaches a single layer of a texture to a framebuffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/framebufferTextureLayer
WebGL2RenderingContext.getActiveUniformBlockName()	A										<pre><code>DOMString gl.getActiveUniformBlockName(program, uniformBlockIndex);</code></pre>The WebGL2RenderingContext.getActiveUniformBlockName() method of the WebGL 2 API retrieves the name of the active uniform block at a given index within a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockName
WebGL2RenderingContext.getActiveUniformBlockParameter()	A										<pre><code>any gl.getActiveUniformBlockParameter(program, uniformBlockIndex, pname);</code></pre>The WebGL2RenderingContext.getActiveUniformBlockParameter() method of the WebGL 2 API retrieves information about an active uniform block within a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter
WebGL2RenderingContext.getActiveUniforms()	A										<pre><code>any gl.getActiveUniforms(program, uniformIndices, pname);</code></pre>The WebGL2RenderingContext.getActiveUniforms() method of the WebGL 2 API retrieves information about active uniforms within a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms
WebGL2RenderingContext.getBufferSubData()	A										<pre><code>void gl.getBufferSubData(target, offset, returnedData);</code></pre>The WebGL2RenderingContext.getBufferSubData() method of the WebGL 2 API reads data from a buffer binding point and writes them to an ArrayBuffer or SharedArrayBuffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getBufferSubData
WebGL2RenderingContext.getFragDataLocation()	A										<pre><code>GLint gl.getFragDataLocation(program, name);\n</code></pre>The WebGL2RenderingContext.getFragDataLocation() method of the WebGL 2 API returns the binding of color numbers to user-defined varying out variables.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getFragDataLocation
WebGL2RenderingContext.getIndexedParameter()	A										<pre><code>any gl.getIndexedParameter(target, index);</code></pre>The WebGL2RenderingContext.getIndexedParameter() method of the WebGL 2 API returns indexed information about a given target.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getIndexedParameter
WebGL2RenderingContext.getInternalformatParameter()	A										<pre><code>any gl.getInternalformatParameter(target, internalformat, pname);</code></pre>The WebGL2RenderingContext.getInternalformatParameter() method of the WebGL 2 API returns information about implementation-dependent support for internal formats.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getInternalformatParameter
WebGL2RenderingContext.getQuery()	A										<pre><code>WebGLQuery gl.getQuery(target, pname);\n</code></pre>The WebGL2RenderingContext.getQuery() method of the WebGL 2 API returns the currently active WebGLQuery for the target, or null.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getQuery
WebGL2RenderingContext.getQueryParameter()	A										<pre><code>any gl.getQueryParameter(query, pname);\n</code></pre>The WebGL2RenderingContext.getQueryParameter() method of the WebGL 2 API returns parameter information of a WebGLQuery object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getQueryParameter
WebGL2RenderingContext.getSamplerParameter()	A										<pre><code>any gl.getSamplerParameter(sampler, pname);\n</code></pre>The WebGL2RenderingContext.getSamplerParameter() method of the WebGL 2 API returns parameter information of a WebGLSampler object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getSamplerParameter
WebGL2RenderingContext.getSyncParameter()	A										<pre><code>any gl.getSyncParameter(sync, pname);\n</code></pre>The WebGL2RenderingContext.getSyncParameter() method of the WebGL 2 API returns parameter information of a WebGLSync object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getSyncParameter
WebGL2RenderingContext.getTransformFeedbackVarying()	A										<pre><code>WebGLActiveInfo gl.getTransformFeedbackVarying(program, index);\n</code></pre>The WebGL2RenderingContext.getTransformFeedbackVarying() method of the WebGL 2 API returns information about varying variables from WebGLTransformFeedback buffers.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying
WebGL2RenderingContext.getUniformBlockIndex()	A										<pre><code>GLuint gl.getUniformBlockIndex(program, uniformBlockName);</code></pre>The WebGL2RenderingContext.getUniformBlockIndex() method of the WebGL 2 API retrieves the index of a uniform block within a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getUniformBlockIndex
WebGL2RenderingContext.getUniformIndices()	A										<pre><code>sequence&lt;GLuint&gt; gl.getUniformIndices(program, uniformNames);</code></pre>The WebGL2RenderingContext.getUniformIndices() method of the WebGL 2 API retrieves the indices of a number of uniforms within a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getUniformIndices
WebGL2RenderingContext.invalidateFramebuffer()	A										<pre><code>void gl.invalidateFramebuffer(target, attachments);</code></pre>The WebGL2RenderingContext.invalidateFramebuffer() method of the WebGL 2 API invalidates the contents of attachments in a framebuffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer
WebGL2RenderingContext.invalidateSubFramebuffer()	A										<pre><code>void gl.invalidateSubFramebuffer(target, attachments, x, y, width, height);</code></pre>The WebGL2RenderingContext.invalidateSubFramebuffer() method of the WebGL 2 API invalidates portions of the contents of attachments in a framebuffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer
WebGL2RenderingContext.isQuery()	A										<pre><code>GLBoolean gl.isQuery(query);\n</code></pre>The WebGL2RenderingContext.isQuery() method of the WebGL 2 API returns true if the passed object is a valid WebGLQuery object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isQuery
WebGL2RenderingContext.isSampler()	A										<pre><code>GLboolean gl.isSampler(sampler);\n</code></pre>The WebGL2RenderingContext.isSampler() method of the WebGL 2 API returns true if the passed object is a valid WebGLSampler object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isSampler
WebGL2RenderingContext.isSync()	A										<pre><code>GLboolean gl.isSync(sync);\n</code></pre>The WebGL2RenderingContext.isSync() method of the WebGL 2 API returns true if the passed object is a valid WebGLSync object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isSync
WebGL2RenderingContext.isTransformFeedback()	A										<pre><code>GLboolean gl.isTransformFeedback(transformFeedback);\n</code></pre>The WebGL2RenderingContext.isTransformFeedback() method of the WebGL 2 API returns true if the passed object is a valid WebGLTransformFeedback object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isTransformFeedback
WebGL2RenderingContext.isVertexArray()	A										<pre><code>GLBoolean gl.isVertexArray(vertexArray);\n</code></pre>The WebGL2RenderingContext.isVertexArray() method of the WebGL API returns true if the passed object is a valid WebGLVertexArrayObject object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isVertexArray
WebGL2RenderingContext.pauseTransformFeedback()	A										<pre><code>void gl.pauseTransformFeedback();\n</code></pre>The WebGL2RenderingContext.pauseTransformFeedback() method of the WebGL 2 API pauses a transform feedback operation.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/pauseTransformFeedback
WebGL2RenderingContext.readBuffer()	A										<pre><code>void gl.readBuffer(src);</code></pre>The WebGL2RenderingContext.readBuffer() method of the WebGL 2 API selects a color buffer as the source for pixels for subsequent calls to copyTexImage2D, copyTexSubImage2D, copyTexSubImage3D or readPixels.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/readBuffer
WebGL2RenderingContext.renderbufferStorageMultisample()	A										<pre><code>void gl.renderbufferStorageMultisample(target, samples, internalFormat, width, height);\n</code></pre>The WebGL2RenderingContext.renderbufferStorageMultisample() method of the WebGL 2 API returns creates and initializes a renderbuffer object's data store and allows specifying a number of samples to be used.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/renderbufferStorageMultisample
WebGL2RenderingContext.resumeTransformFeedback()	A										<pre><code>void gl.resumeTransformFeedback();\n</code></pre>The WebGL2RenderingContext.resumeTransformFeedback() method of the WebGL 2 API resumes a transform feedback operation.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/resumeTransformFeedback
WebGL2RenderingContext.samplerParameter[if]()	A										<pre><code>void gl.samplerParameteri(sampler, pname, param);\nvoid gl.samplerParameterf(sampler, pname, param);\n</code></pre>The WebGL2RenderingContext.samplerParameter[if]() methods of the WebGL 2 API set WebGLSampler parameters.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/samplerParameter
WebGL2RenderingContext.texImage3D()	A										<pre><code>void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ArrayBufferView? pixels);\n\n\nvoid gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, GLintptr offset);</code></pre>The WebGLRenderingContext.texImage3D() method of the WebGL API specifies a three-dimensional texture image.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage3D
WebGL2RenderingContext.texStorage2D()	A										<pre><code>void gl.texStorage2D(target, levels, internalformat, width, height);\n</code></pre>The WebGL2RenderingContext.texStorage2D() method of the WebGL API specifies all levels of two-dimensional texture storage.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texStorage2D
WebGL2RenderingContext.texStorage3D()	A										<pre><code>void gl.texStorage3D(target, levels, internalformat, width, height, depth);\n</code></pre>The WebGL2RenderingContext.texStorage3D() method of the WebGL API specifies all levels of a three-dimensional texture or two-dimensional array texture.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texStorage3D
WebGL2RenderingContext.texSubImage3D()	A										<pre><code>void gl.texImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ArrayBufferView? pixels);\n\nvoid gl.texImage3D(target, level, xoffset, yoffset, zoffset, format, type, ImageData? pixels);\n\nvoid gl.texImage3D(target, level, xoffset, yoffset, zoffset, format, type, HTMLImageElement? pixels);\n\nvoid gl.texImage3D(target, level, xoffset, yoffset, zoffset, format, type, HTMLCanvasElement? pixels);\n\nvoid gl.texImage3D(target, level, xoffset, yoffset, zoffset, format, type, HTMLVideoElement? pixels);\n\nvoid gl.texImage3D(target, level, xoffset, yoffset, zoffset, format, type, GLintptr offset);\n</code></pre>The WebGL2RenderingContext.texSubImage3D() method of the WebGL API specifies a sub-rectangle of the current texture.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texSubImage3D
WebGL2RenderingContext.transformFeedbackVaryings()	A										<pre><code>void gl.transformFeedbackVaryins(program, varyings, bufferMode);\n</code></pre>The WebGL2RenderingContext.transformFeedbackVaryings() method of the WebGL 2 API specifies values to record in WebGLTransformFeedback buffers.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings
WebGL2RenderingContext.uniform[1234]ui[v]()	A										<pre><code>void gl.uniform1ui(location, v0);\nvoid gl.uniform1uiv(location, value);\n\nvoid gl.uniform2ui(location, v0, v1);\nvoid gl.uniform2uiv(location, value);\n\nvoid gl.uniform3ui(location, v0, v1, v2);\nvoid gl.uniform3uiv(location, value);\n\nvoid gl.uniform4ui(location, v0, v1, v2, v3);\nvoid gl.uniform4uiv(location, value);\n</code></pre>The WebGL2RenderingContext.uniform[1234]ui[v]() methods of the WebGL API specify values of uniform variables.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform
WebGL2RenderingContext.uniformBlockBinding()	A										<pre><code>void gl.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);</code></pre>The WebGL2RenderingContext.uniformBlockBinding() method of the WebGL 2 API assigns binding points for active uniform blocks.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformBlockBinding
WebGL2RenderingContext.uniformMatrix[234]x[234]fv()	A										<pre><code>void gl.uniformMatrix2x3fv(location, transpose, value);\nvoid gl.uniformMatrix3x2fv(location, transpose, value);\nvoid gl.uniformMatrix2x4fv(location, transpose, value);\nvoid gl.uniformMatrix4x2fv(location, transpose, value);\nvoid gl.uniformMatrix3x4fv(location, transpose, value);\nvoid gl.uniformMatrix4x3fv(location, transpose, value);\n</code></pre>The WebGL2RenderingContext.uniformMatrix[234]x[234]fv() methods of the WebGL 2 API specify matrix values for uniform variables.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix
WebGL2RenderingContext.vertexAttribDivisor()	A										<pre><code>void gl.vertexAttribDivisor(index, divisor);\n</code></pre>The WebGL2RenderingContext.vertexAttribDivisor() method of the WebGL 2 API modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with gl.drawArraysInstanced() and gl.drawElementsInstanced().	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor
WebGL2RenderingContext.vertexAttribI4[u]i[v]()	A										<pre><code>void gl.vertexAttribI4i(index, v0, v1, v2, v3);\nvoid gl.vertexAttribI4ui(index, v0, v1, v2, v3);\n\nvoid gl.vertexAttribI4iv(index, value);\nvoid gl.vertexAttribI4uiv(index, value);\n</code></pre>The WebGL2RenderingContext.vertexAttribI4[u]i[v]() methods of the WebGL 2 API specify integer values for generic vertex attributes.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribI
WebGL2RenderingContext.vertexAttribIPointer()	A										<pre><code>void gl.vertexAttribIPointer(index, size, type, stride, offset);\n</code></pre>The WebGL2RenderingContext.vertexAttribIPointer() method of the WebGL 2 API specifies integer data formats and locations of vertex attributes in a vertex attributes array.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer
WebGL2RenderingContext.waitSync()	A										<pre><code>void gl.waitSync(sync, flags, timeout);\n</code></pre>The WebGL2RenderingContext.waitSync() method of the WebGL 2 API returns immediately, but waits on the GL server until the given WebGLSync object is signaled.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/waitSync
WebGLActiveInfo	A										The WebGLActiveInfo interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo
WebGLActiveInfo.name	A										The read-only WebGLActiveInfo.name property represents the name of the requested data returned by calling the getActiveAttrib() or getActiveUniform() methods.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/name
WebGLActiveInfo.size	A										The read-only WebGLActiveInfo.size property is a Number representing the size of the requested data returned by calling the getActiveAttrib() or getActiveUniform() methods.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/size
WebGLActiveInfo.type	A										The read-only WebGLActiveInfo.type property represents the type of the requested data returned by calling the getActiveAttrib() or getActiveUniform() methods.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLActiveInfo/type
WebGLBuffer	A										The WebGLBuffer interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer
WebGLContextEvent	A										The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent
WebGLContextEvent.statusMessage	A										The read-only WebGLContextEvent.statusMessage property contains additional event status information, or is an empty string if no additional information is available.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent/statusMessage
WebGLFramebuffer	A										The WebGLFramebuffer interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLFramebuffer
WebGLProgram	A										The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShader s consisting of a vertex shader and a fragment shader (both written in GLSL). These are then linked into a usable program.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram
WebGLQuery	A										The WebGLQuery interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLQuery
WebGLRenderbuffer	A										The WebGLRenderbuffer interface is part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderbuffer
WebGLRenderingContext	A										The WebGLRenderingContext interface provides the OpenGL ES 2.0 rendering context for the drawing surface of an HTML canvas element.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext
WebGLRenderingContext.activeTexture()	A										<pre><code>void gl.activeTexture(texture);\n</code></pre>The WebGLRenderingContext.activeTexture() method of the WebGL API specifies which texture unit to make active.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/activeTexture
WebGLRenderingContext.attachShader()	A										<pre><code>void gl.attachShader(program, shader);\n</code></pre>The WebGLRenderingContext.attachShader() method of the WebGL API attaches either a fragment or vertex WebGLShader to a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/attachShader
WebGLRenderingContext.bindAttribLocation()	A										<pre><code>void gl.bindAttribLocation(program, index, name);\n</code></pre>The WebGLRenderingContext.bindAttribLocation() method of the WebGL API binds a generic vertex index to an attribute variable.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation
WebGLRenderingContext.bindBuffer()	A										<pre><code>void gl.bindBuffer(target, buffer);\n</code></pre>The WebGLRenderingContext.bindBuffer() method of the WebGL API binds a given WebGLBuffer to a target.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer
WebGLRenderingContext.bindFramebuffer()	A										<pre><code>void gl.bindFramebuffer(target, framebuffer);\n</code></pre>The WebGLRenderingContext.bindFramebuffer() method of the WebGL API binds a given WebGLFramebuffer to a target.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer
WebGLRenderingContext.bindRenderbuffer()	A										<pre><code>void gl.bindRenderbuffer(target, renderbuffer);\n</code></pre>The WebGLRenderingContext.bindRenderbuffer() method of the WebGL API binds a given WebGLRenderbuffer to a target, which must be gl.RENDERBUFFER.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindRenderbuffer
WebGLRenderingContext.bindTexture()	A										<pre><code>void gl.bindTexture(target, texture);\n</code></pre>The WebGLRenderingContext.bindTexture() method of the WebGL API binds a given WebGLTexture to a target (binding point).	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture
WebGLRenderingContext.blendColor()	A										<pre><code>void gl.blendColor(red, green, blue, alpha);\n</code></pre>The WebGLRenderingContext.blendColor() method of the WebGL API is used to set the source and destination blending factors.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendColor
WebGLRenderingContext.blendEquation()	A										<pre><code>void gl.blendEquation(mode);\n</code></pre>The WebGLRenderingContext.blendEquation() method of the WebGL API is used to set both the RGB blend equation and alpha blend equation to a single equation.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquation
WebGLRenderingContext.blendEquationSeparate()	A										<pre><code>void gl.blendEquationSeparate(modeRGB, modeAlpha);\n</code></pre>The WebGLRenderingContext.blendEquationSeparate() method of the WebGL API is used to set the RGB blend equation and alpha blend equation separately.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquationSeparate
WebGLRenderingContext.blendFunc()	A										<pre><code>void gl.blendFunc(sfactor, dfactor);\n</code></pre>The WebGLRenderingContext.blendFunc() method of the WebGL API defines which function is used for blending pixel arithmetic.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc
WebGLRenderingContext.blendFuncSeparate()	A										<pre><code>void gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n</code></pre>The WebGLRenderingContext.blendFuncSeparate() method of the WebGL API defines which function is used for blending pixel arithmetic for RGB and alpha components separately.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFuncSeparate
WebGLRenderingContext.bufferData()	A										<pre><code>void gl.bufferData(target, size, usage);\nvoid gl.bufferData(target, data, usage);\n</code></pre>The WebGLRenderingContext.bufferData() method of the WebGL API initializes and creates the buffer object's data store.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData
WebGLRenderingContext.bufferSubData()	A										<pre><code>void gl.bufferSubData(target, offset, data);</code></pre>The WebGLRenderingContext.bufferSubData() method of the WebGL API updates a subset of a buffer object's data store.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData
WebGLRenderingContext.canvas	A										<pre><code>gl.canvas;</code></pre>The WebGLRenderingContext.canvas property is a read-only reference to the HTMLCanvasElement or OffscreenCanvas object that is associated with the context. It might be null if it is not associated with a canvas element or an OffscreenCanvas object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/canvas
WebGLRenderingContext.checkFramebufferStatus()	A										<pre><code>GLenum gl.checkFramebufferStatus(target);\n</code></pre>The WebGLRenderingContext.checkFramebufferStatus() method of the WebGL API returns the completeness status of the WebGLFramebuffer object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus
WebGLRenderingContext.clear()	A										<pre><code>void gl.clear(mask);\n</code></pre>The WebGLRenderingContext.clear() method of the WebGL API clears buffers to preset values.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clear
WebGLRenderingContext.clearColor()	A										<pre><code>void gl.clearColor(red, green, blue, alpha);\n</code></pre>The WebGLRenderingContext.clearColor() method of the WebGL API specifies the color values used when clearing color buffers.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearColor
WebGLRenderingContext.clearDepth()	A										<pre><code>void gl.clearDepth(depth);\n</code></pre>The WebGLRenderingContext.clearDepth() method of the WebGL API specifies the clear value for the depth buffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearDepth
WebGLRenderingContext.clearStencil()	A										<pre><code>void gl.clearStencil(s);\n</code></pre>The WebGLRenderingContext.clearStencil() method of the WebGL API specifies the clear value for the stencil buffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearStencil
WebGLRenderingContext.colorMask()	A										<pre><code>void gl.colorMask(red, green, blue, alpha);\n</code></pre>The WebGLRenderingContext.colorMask() method of the WebGL API sets which color components to enable or to disable when drawing or rendering to a WebGLFramebuffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/colorMask
WebGLRenderingContext.commit()	A										<pre><code>void WebGLRenderingContext.commit()</code></pre>The WebGLRenderingContext.commit() method pushes frames back to the original HTMLCanvasElement, if the context is not directly fixed to a specific canvas.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/commit
WebGLRenderingContext.compileShader()	A										<pre><code>void gl.compileShader(shader);\n</code></pre>The WebGLRenderingContext.compileShader() method of the WebGL API compiles a GLSL shader into binary data so that it can be used by a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compileShader
WebGLRenderingContext.compressedTexImage2D()	A										<pre><code>void gl.compressedTexImage2D(target, level, internalformat, width, height, border, ArrayBufferView? pixels);\n</code></pre>The WebGLRenderingContext.compressedTexImage2D() method of the WebGL API specifies a two-dimensional texture image in a compressed format.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D
WebGLRenderingContext.compressedTexSubImage2D()	A										<pre><code>void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n</code></pre>The WebGLRenderingContext.compressedTexSubImage2D() method of the WebGL API specifies a two-dimensional sub-rectangle for a texture image in a compressed format.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D
WebGLRenderingContext.copyTexImage2D()	A										<pre><code>void gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);\n</code></pre>The WebGLRenderingContext.copyTexImage2D() method of the WebGL API copies pixels from the current WebGLFramebuffer into a 2D texture image.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexImage2D
WebGLRenderingContext.copyTexSubImage2D()	A										<pre><code>void gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n</code></pre>The WebGLRenderingContext.copyTexSubImage2D() method of the WebGL API copies pixels from the current WebGLFramebuffer into an existing 2D texture sub-image.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D
WebGLRenderingContext.createBuffer()	A										<pre><code>WebGLBuffer gl.createBuffer();\n</code></pre>The WebGLRenderingContext.createBuffer() method of the WebGL API creates and initializes a WebGLBuffer storing data such as vertices or colors.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createBuffer
WebGLRenderingContext.createFramebuffer()	A										<pre><code>WebGLFramebuffer gl.createFramebuffer();\n</code></pre>The WebGLRenderingContext.creatFramebuffer() method of the WebGL API creates and initializes a WebGLFramebuffer object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createFramebuffer
WebGLRenderingContext.createProgram()	A										<pre><code>WebGLProgram gl.createProgram();\n</code></pre>The WebGLRenderingContext.createProgram() method of the WebGL API creates and initializes a WebGLProgram object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createProgram
WebGLRenderingContext.createRenderbuffer()	A										<pre><code>WebGLRenderbuffer gl.createRenderbuffer();\n</code></pre>The WebGLRenderingContext.createRenderbuffer() method of the WebGL API creates and initializes a WebGLRenderbuffer object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createRenderbuffer
WebGLRenderingContext.createShader()	A										<pre><code>WebGLShader gl.createShader(type);\n</code></pre>The WebGLRenderingContext.createShader() method of the WebGL API creates a WebGLShader that can then be configured further using WebGLRenderingContext.shaderSource() and WebGLRenderingContext.compileShader().	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createShader
WebGLRenderingContext.createTexture()	A										<pre><code>WebGLTexture gl.createTexture();\n</code></pre>The WebGLRenderingContext.createTexture() method of the WebGL API creates and initializes a WebGLTexture object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createTexture
WebGLRenderingContext.cullFace()	A										<pre><code>void gl.cullFace(mode);\n</code></pre>The WebGLRenderingContext.cullFace() method of the WebGL API specifies whether or not front- and/or back-facing polygons can be culled.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/cullFace
WebGLRenderingContext.deleteBuffer()	A										<pre><code>void gl.deleteBuffer(buffer);\n</code></pre>The WebGLRenderingContext.deleteBuffer() method of the WebGL API deletes a given WebGLBuffer. This method has no effect if the buffer has already been deleted.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteBuffer
WebGLRenderingContext.deleteFramebuffer()	A										<pre><code>void gl.deleteFramebuffer(framebuffer);\n</code></pre>The WebGLRenderingContext.deleteFramebuffer() method of the WebGL API deletes a given WebGLFramebuffer object. This method has no effect if the frame buffer has already been deleted.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteFramebuffer
WebGLRenderingContext.deleteProgram()	A										<pre><code>void gl.deleteProgram(program);\n</code></pre>The WebGLRenderingContext.deleteProgram() method of the WebGL API deletes a given WebGLProgram object. This method has no effect if the program has already been deleted.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteProgram
WebGLRenderingContext.deleteRenderbuffer()	A										<pre><code>void gl.deleteRenderbuffer(renderbuffer);\n</code></pre>The WebGLRenderingContext.deleteRenderbuffer() method of the WebGL API deletes a given WebGLRenderbuffer object. This method has no effect if the render buffer has already been deleted.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteRenderbuffer
WebGLRenderingContext.deleteShader()	A										<pre><code>void gl.deleteShader(shader);\n</code></pre>The WebGLRenderingContext.deleteShader() method of the WebGL API deletes a given WebGLShader object. This method has no effect if the shader has already been deleted.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteShader
WebGLRenderingContext.deleteTexture()	A										<pre><code>void gl.deleteTexture(texture);\n</code></pre>The WebGLRenderingContext.deleteTexture() method of the WebGL API deletes a given WebGLTexture object. This method has no effect if the texture has already been deleted.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteTexture
WebGLRenderingContext.depthFunc()	A										<pre><code>void gl.depthFunc(func);\n</code></pre>The WebGLRenderingContext.depthFunc() method of the WebGL API specifies a function that compares incoming pixel depth to the current depth buffer value.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthFunc
WebGLRenderingContext.depthMask()	A										<pre><code>void gl.depthMask(flag);\n</code></pre>The WebGLRenderingContext.depthMask() method of the WebGL API sets whether writing into the depth buffer is enabled or disabled.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthMask
WebGLRenderingContext.depthRange()	A										<pre><code>void gl.depthRange(zNear, zFar);\n</code></pre>The WebGLRenderingContext.depthRange() method of the WebGL API specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthRange
WebGLRenderingContext.detachShader()	A										<pre><code>WebGLShader gl.detachShader(program, shader);\n</code></pre>The WebGLRenderingContext.detachShader() method of the WebGL API detaches a previously attached WebGLShader from a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/detachShader
WebGLRenderingContext.disable()	A										<pre><code>void gl.disable(cap);\n</code></pre>The WebGLRenderingContext.disable() method of the WebGL API disables specific WebGL capabilities for this context.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disable
WebGLRenderingContext.disableVertexAttribArray()	A										<pre><code>void gl.disableVertexAttribArray(index);\n</code></pre>The WebGLRenderingContext.disableVertexAttribArray() method of the WebGL API turns the generic vertex attribute array off at a given index position.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray
WebGLRenderingContext.drawArrays()	A										<pre><code>void gl.drawArrays(mode, first, count);\n</code></pre>The WebGLRenderingContext.drawArrays() method of the WebGL API renders primitives from array data.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawArrays
WebGLRenderingContext.drawElements()	A										<pre><code>void gl.drawElements(mode, count, type, offset);\n</code></pre>The WebGLRenderingContext.drawElements() method of the WebGL API renders primitives from array data.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements
WebGLRenderingContext.drawingBufferHeight	A										<pre><code>gl.drawingBufferHeight;</code></pre>The read-only WebGLRenderingContext.drawingBufferHeight property represents the actual height of the current drawing buffer. It should match the height attribute of the canvas element associated with this context, but might differ if the implementation is not able to provide the requested height.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawingBufferHeight
WebGLRenderingContext.drawingBufferWidth	A										<pre><code>gl.drawingBufferWidth;</code></pre>The read-only WebGLRenderingContext.drawingBufferWidth property represents the actual width of the current drawing buffer. It should match the width attribute of the canvas element associated with this context, but might differ if the implementation is not able to provide the requested width.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawingBufferWidth
WebGLRenderingContext.enable()	A										<pre><code>void gl.enable(cap);\n</code></pre>The WebGLRenderingContext.enable() method of the WebGL API enables specific WebGL capabilities for this context.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enable
WebGLRenderingContext.enableVertexAttribArray()	A										<pre><code>void gl.enableVertexAttribArray(index);\n</code></pre>The WebGLRenderingContext.enableVertexAttribArray() method of the WebGL API turns the generic vertex attribute array on at a given index position.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray
WebGLRenderingContext.finish()	A										<pre><code>void gl.finish();\n</code></pre>The WebGLRenderingContext.finish() method of the WebGL API blocks execution until all previously called commands are finished.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/finish
WebGLRenderingContext.flush()	A										<pre><code>void gl.flush();\n</code></pre>The WebGLRenderingContext.flush() method of the WebGL API empties different buffer commands, causing all commands to be executed as quickly as possible.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/flush
WebGLRenderingContext.framebufferRenderbuffer()	A										<pre><code>void gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);\n</code></pre>The WebGLRenderingContext.framebufferRenderbuffer() method of the WebGL API attaches a WebGLRenderbuffer object to a WebGLFramebuffer object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer
WebGLRenderingContext.framebufferTexture2D()	A										<pre><code>void gl.framebufferTexture2D(target, attachment, textarget, texture, level);\n</code></pre>The WebGLRenderingContext.framebufferTexture2D() method of the WebGL API attaches a texture to a WebGLFramebuffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D
WebGLRenderingContext.frontFace()	A										<pre><code>void gl.frontFace(mode);\n</code></pre>The WebGLRenderingContext.frontFace() method of the WebGL API specifies whether polygons are front- or back-facing by setting a winding orientation.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/frontFace
WebGLRenderingContext.generateMipmap()	A										<pre><code>void gl.generateMipmap(target);\n</code></pre>The WebGLRenderingContext.generateMipmap() method of the WebGL API generates a set of mipmaps for a WebGLTexture object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/generateMipmap
WebGLRenderingContext.getActiveAttrib()	A										<pre><code>WebGLActiveInfo gl.getActiveAttrib(program,index);\n</code></pre>The WebGLRenderingContext.getActiveAttrib() method of the WebGL API returns a WebGLActiveInfo object containing size, type, and name of a vertex attribute at a given position in a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getActiveAttrib
WebGLRenderingContext.getActiveUniform()	A										<pre><code>WebGLActiveInfo gl.getActiveUniform(program,index);\n</code></pre>The WebGLRenderingContext.getActiveUniform() method of the WebGL API returns a WebGLActiveInfo object containing size, type, and name of a uniform attribute at a given position in a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getActiveUniform
WebGLRenderingContext.getAttachedShaders()	A										<pre><code>sequence&lt;WebGLShader&gt; gl.getAttachedShaders(program);\n</code></pre>The WebGLRenderingContext.getAttachedShaders() method of the WebGL API returns a list of WebGLShader objects attached to a WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttachedShaders
WebGLRenderingContext.getAttribLocation()	A										<pre><code>GLint gl.getAttribLocation(program, name);\n</code></pre>The WebGLRenderingContext.getAttribLocation() method of the WebGL API returns the location of an attribute variable in a given WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttribLocation
WebGLRenderingContext.getBufferParameter()	A										<pre><code>any gl.getBufferParameter(target, pname);\n</code></pre>The WebGLRenderingContext.getBufferParameter() method of the WebGL API returns information about the buffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getBufferParameter
WebGLRenderingContext.getContextAttributes()	A										<pre><code>gl.getContextAttributes();</code></pre>The WebGLRenderingContext.getContextAttributes() method returns a WebGLContextAttributes object that contains the actual context parameters. Might return null, if the context is lost.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getContextAttributes
WebGLRenderingContext.getError()	A										<pre><code>GLenum gl.getError();\n</code></pre>The WebGLRenderingContext.getError() method of the WebGL API returns error information.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getError
webglrenderingcontext geterror()	R	WebGLRenderingContext.getError()										
WebGLRenderingContext.getExtension()	A										<pre><code>gl.getExtension(name);</code></pre>The WebGLRenderingContext.getExtension() method enables a WebGL extension.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getExtension
WebGLRenderingContext.getFramebufferAttachmentParameter()	A										<pre><code>any gl.getFramebufferAttachmentParameter(target, attachment, pname);\n</code></pre>The WebGLRenderingContext.getFramebufferAttachmentParameter() method of the WebGL API returns information about a framebuffer's attachment.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter
WebGLRenderingContext.getParameter()	A										<pre><code>any gl.getParameter(pname);\n</code></pre>The WebGLRenderingContext.getParameter() method of the WebGL API returns a value for the passed parameter name.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParameter
WebGLRenderingContext.getProgramInfoLog()	A										<pre><code>gl.getProgramInfoLog(program);</code></pre>The WebGLRenderingContext.getProgramInfoLog returns the information log for the specified WebGLProgram object. It contains errors that occurred during failed linking or validation of WebGLProgram objects.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramInfoLog
WebGLRenderingContext.getProgramParameter()	A										<pre><code>any gl.getProgramParameter(program, pname);\n</code></pre>The WebGLRenderingContext.getProgramParameter() method of the WebGL API returns information about the given program.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramParameter
WebGLRenderingContext.getRenderbufferParameter()	A										<pre><code>any gl.getRenderbufferParameter(target, pname);\n</code></pre>The WebGLRenderingContext.getRenderbufferParameter() method of the WebGL API returns information about the renderbuffer.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter
WebGLRenderingContext.getShaderInfoLog()	A										<pre><code>gl.getShaderInfoLog(shader);</code></pre>The WebGLRenderingContext.getShaderInfoLog returns the information log for the specified WebGLShader object. It contains warnings, debugging and compile information.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog
WebGLRenderingContext.getShaderParameter()	A										<pre><code>any gl.getShaderParameter(shader, pname);\n</code></pre>The WebGLRenderingContext.getShaderParameter() method of the WebGL API returns information about the given shader.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderParameter
WebGLRenderingContext.getShaderPrecisionFormat()	A										<pre><code>WebGLShaderPrecisionFormat gl.getShaderPrecisionFormat(shaderType, precisionType);\n</code></pre>The WebGLRenderingContext.getShaderPrecisionFormat() method of the WebGL API returns a new WebGLShaderPrecisionFormat object describing the range and precision for the specified shader numeric format.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat
WebGLRenderingContext.getShaderSource()	A										<pre><code>DOMString gl.getShaderSource(shader);\n</code></pre>The WebGLRenderingContext.getShaderSource() method of the WebGL API returns the source code of a WebGLShader as a DOMString.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderSource
WebGLRenderingContext.getSupportedExtensions()	A										<pre><code>gl.getSupportedExtensions();</code></pre>The WebGLRenderingContext.getSupportedExtensions() method returns a list of all the supported WebGL extensions.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getSupportedExtensions
WebGLRenderingContext.getTexParameter()	A										<pre><code>any gl.getTexParameter(target, pname);\n</code></pre>The WebGLRenderingContext.getTexParameter() method of the WebGL API returns information about the given texture.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getTexParameter
WebGLRenderingContext.getUniform()	A										<pre><code>any gl.getUniform(program, location);\n</code></pre>The WebGLRenderingContext.getUniform() method of the WebGL API returns the value of a uniform variable at a given location.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniform
WebGLRenderingContext.getUniformLocation()	A										<pre><code>WebGLUniformLocation gl.getUniformLocation(program, name);\n</code></pre>The WebGLRenderingContext.getUniformLocation() method of the WebGL API returns a WebGLUniformLocation of a uniform variable in a given WebGLProgram.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniformLocation
WebGLRenderingContext.getVertexAttrib()	A										<pre><code>any gl.getVertexAttrib(index, pname);\n</code></pre>The WebGLRenderingContext.getVertexAttrib() method of the WebGL API returns information about a vertex attribute at a given position.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttrib
WebGLRenderingContext.getVertexAttribOffset()	A										<pre><code>GLsizeiptr gl.getVertexAttribOffset(index, pname);\n</code></pre>The WebGLRenderingContext.getVertexAttribOffset() method of the WebGL API returns the address of a specified vertex attribute.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset
WebGLRenderingContext.hint()	A										<pre><code>void gl.hint(target, mode);\n</code></pre>The WebGLRenderingContext.hint() method of the WebGL API specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/hint
WebGLRenderingContext.isBuffer()	A										<pre><code>GLboolean gl.isBuffer(buffer);\n</code></pre>The WebGLRenderingContext.isBuffer() method of the WebGL API returns true if the passed WebGLBuffer is valid and false otherwise.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isBuffer
WebGLRenderingContext.isContextLost()	A										<pre><code>gl.isContextLost();</code></pre>The WebGLRenderingContext.isContextLost() method returns a Boolean indicating whether or not the WebGL context has been lost.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isContextLost
WebGLRenderingContext.isEnabled()	A										<pre><code>void gl.isEnabled(cap);\n</code></pre>The WebGLRenderingContext.isEnabled() method of the WebGL API tests whether a specific WebGL capability is enabled or not for this context.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isEnabled
WebGLRenderingContext.isFramebuffer()	A										<pre><code>GLboolean gl.isFramebuffer(framebuffer);\n</code></pre>The WebGLRenderingContext.isFramebuffer() method of the WebGL API returns true if the passed WebGLFramebuffer is valid and false otherwise.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isFramebuffer
WebGLRenderingContext.isProgram()	A										<pre><code>GLboolean gl.isProgram(program);\n</code></pre>The WebGLRenderingContext.isProgram() method of the WebGL API returns true if the passed WebGLProgram is valid, false otherwise.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isProgram
WebGLRenderingContext.isRenderbuffer()	A										<pre><code>GLboolean gl.isRenderbuffer(renderbuffer);\n</code></pre>The WebGLRenderingContext.isRenderbuffer() method of the WebGL API returns true if the passed WebGLRenderbuffer is valid and false otherwise.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isRenderbuffer
WebGLRenderingContext.isShader()	A										<pre><code>GLboolean gl.isShader(shader);\n</code></pre>The WebGLRenderingContext.isShader() method of the WebGL API returns true if the passed WebGLShader is valid, false otherwise.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isShader
WebGLRenderingContext.isTexture()	A										<pre><code>GLboolean gl.isTexture(texture);\n</code></pre>The WebGLRenderingContext.isTexture() method of the WebGL API returns true if the passed WebGLTexture is valid and false otherwise.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isTexture
WebGLRenderingContext.lineWidth()	A										<pre><code>void gl.lineWidth(width);\n</code></pre>The WebGLRenderingContext.lineWidth() method of the WebGL API sets the line width of rasterized lines.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/lineWidth
WebGLRenderingContext.linkProgram()	A										<pre><code>void gl.linkProgram(program);\n</code></pre>The WebGLRenderingContext.linkProgram() method of the WebGL API links a given WebGLProgram to the attached vertex and fragment shaders.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/linkProgram
WebGLRenderingContext.pixelStorei()	A										<pre><code>void gl.pixelStorei(pname, param);\n</code></pre>The WebGLRenderingContext.pixelStorei() method of the WebGL API specifies the pixel storage modes.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei
WebGLRenderingContext.polygonOffset()	A										<pre><code>void gl.polygonOffset(factor, units);\n</code></pre>The WebGLRenderingContext.polygonOffset() method of the WebGL API specifies the scale factors and units to calculate depth values.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/polygonOffset
WebGLRenderingContext.readPixels()	A										<pre><code>void gl.readPixels(x, y, width, height, format, type, pixels);\n</code></pre>The WebGLRenderingContext.readPixels() method of the WebGL API reads a block of pixels from a specified rectangle of the current color framebuffer into an ArrayBufferView object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels
WebGLRenderingContext.renderbufferStorage()	A										<pre><code>void gl.renderbufferStorage(target, internalFormat, width, height);\n</code></pre>The WebGLRenderingContext.renderbufferStorage() method of the WebGL API creates and initializes a renderbuffer object's data store.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/renderbufferStorage
WebGLRenderingContext.sampleCoverage()	A										<pre><code>void gl.sampleCoverage(value, invert);\n</code></pre>The WebGLRenderingContext.sampleCoverage() method of the WebGL API specifies multi-sample coverage parameters for anti-aliasing effects.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/sampleCoverage
WebGLRenderingContext.scissor()	A										<pre><code>void gl.scissor(x, y, width, height);\n</code></pre>The WebGLRenderingContext.scissor() method of the WebGL API sets a scissor box, which limits the drawing to a specified rectangle.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/scissor
WebGLRenderingContext.shaderSource()	A										<pre><code>void gl.shaderSource(shader, source);\n</code></pre>The WebGLRenderingContext.shaderSource() method of the WebGL API sets the source code of a WebGLShader.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/shaderSource
WebGLRenderingContext.stencilFunc()	A										<pre><code>void gl.stencilFunc(func, ref, mask);\n</code></pre>The WebGLRenderingContext.stencilFunc() method of the WebGL API sets the front and back function and reference value for stencil testing.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFunc
WebGLRenderingContext.stencilFuncSeparate()	A										<pre><code>void gl.stencilFuncSeparate(face, func, ref, mask);\n</code></pre>The WebGLRenderingContext.stencilFuncSeparate() method of the WebGL API sets the front and/or back function and reference value for stencil testing.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate
WebGLRenderingContext.stencilMask()	A										<pre><code>void gl.stencilMask(mask);\n</code></pre>The WebGLRenderingContext.stencilMask() method of the WebGL API controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMask
WebGLRenderingContext.stencilMaskSeparate()	A										<pre><code>void gl.stencilMaskSeparate(face, mask);\n</code></pre>The WebGLRenderingContext.stencilMaskSeparate() method of the WebGL API controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate
WebGLRenderingContext.stencilOp()	A										<pre><code>void gl.stencilOp(fail, zfail, zpass);\n</code></pre>The WebGLRenderingContext.stencilOp() method of the WebGL API sets both the front and back-facing stencil test actions.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOp
WebGLRenderingContext.stencilOpSeparate()	A										<pre><code>void gl.stencilOp(face, fail, zfail, zpass);\n</code></pre>The WebGLRenderingContext.stencilOpSeparate() method of the WebGL API sets the front and/or back-facing stencil test actions.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOpSeparate
WebGLRenderingContext.texImage2D()	A										<pre><code>void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);\nvoid gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);\nvoid gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);\nvoid gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);\nvoid gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);\n\nAdditional signature in a WebGL 2 context:\nvoid gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);</code></pre>The WebGLRenderingContext.texImage2D() method of the WebGL API specifies a two-dimensional texture image.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D
WebGLRenderingContext.texParameter[fi]()	A										<pre><code>void gl.texParameterf(GLenum target, GLenum pname, GLfloat param);\nvoid gl.texParameteri(GLenum target, GLenum pname, GLint param);\n</code></pre>The WebGLRenderingContext.texParameter[fi]() methods of the WebGL API set texture parameters.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter
WebGLRenderingContext.texSubImage2D()	A										<pre><code>void gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ArrayBufferView? pixels);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, ImageData? pixels);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLImageElement? pixels);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLCanvasElement? pixels);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLVideoElement? pixels);\n\nAdditional signature in a WebGL 2 context:\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, GLintptr offset);\n</code></pre>The WebGLRenderingContext.texSubImage2D() method of the WebGL API specifies a sub-rectangle of the current texture.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D
WebGLRenderingContext.uniform[1234][fi][v]()	A										<pre><code>void gl.uniform1f(location, v0);\nvoid gl.uniform1fv(location, value);\nvoid gl.uniform1i(location, v0);\nvoid gl.uniform1iv(location, value);\n\nvoid gl.uniform2f(location, v0, v1);\nvoid gl.uniform2fv(location, value);\nvoid gl.uniform2i(location, v0, v1);\nvoid gl.uniform2iv(location, value);\n\nvoid gl.uniform3f(location, v0, v1, v2);\nvoid gl.uniform3fv(location, value);\nvoid gl.uniform3i(location, v0, v1, v2);\nvoid gl.uniform3iv(location, value);\n\nvoid gl.uniform4f(location, v0, v1, v2, v3);\nvoid gl.uniform4fv(location, value);\nvoid gl.uniform4i(location, v0, v1, v2, v3);\nvoid gl.uniform4iv(location, value);\n</code></pre>The WebGLRenderingContext.uniform[1234][fi][v]() methods of the WebGL API specify values of uniform variables.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform
WebGLRenderingContext.uniformMatrix[234]fv()	A										<pre><code>void gl.uniformMatrix2fv(location, transpose, value);\nvoid gl.uniformMatrix3fv(location, transpose, value);\nvoid gl.uniformMatrix4fv(location, transpose, value); \n</code></pre>The WebGLRenderingContext.uniformMatrix[234]fv() methods of the WebGL API specify  matrix values for uniform variables.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix
WebGLRenderingContext.useProgram()	A										<pre><code>void gl.useProgram(program);\n</code></pre>The WebGLRenderingContext.useProgram() method of the WebGL API sets the specified WebGLProgram as part the current rendering state.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/useProgram
WebGLRenderingContext.validateProgram()	A										<pre><code>void gl.validateProgram(program);\n</code></pre>The WebGLRenderingContext.validateProgram() method of the WebGL API validates a WebGLProgram. It checks if it is successfully linked and if it can be used in the current WebGL state.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/validateProgram
WebGLRenderingContext.vertexAttrib[1234]f[v]()	A										<pre><code>void gl.vertexAttrib1f(index, v0);\nvoid gl.vertexAttrib2f(index, v0, v1);\nvoid gl.vertexAttrib3f(index, v0, v1, v2);\nvoid gl.vertexAttrib4f(index, v0, v1, v2, v3);\n\nvoid gl.vertexAttrib1fv(index, value);\nvoid gl.vertexAttrib2fv(index, value);\nvoid gl.vertexAttrib3fv(index, value);\nvoid gl.vertexAttrib4fv(index, value);\n</code></pre>The WebGLRenderingContext.vertexAttrib[1234]f[v]() methods of the WebGL API specify values for generic vertex attributes.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib
WebGLRenderingContext.vertexAttribPointer()	A										<pre><code>void gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n</code></pre>The WebGLRenderingContext.vertexAttribPointer() method of the WebGL API specifies the data formats and locations of vertex attributes in a vertex attributes array.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer
WebGLRenderingContext.viewport()	A										<pre><code>void gl.viewport(x, y, width, height);\n</code></pre>The WebGLRenderingContext.viewport() method of the WebGL API sets the viewport, which specifies the affine transformation of x and y from normalized device coordinates to window coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/viewport
WebGLSampler	A										The WebGLSampler interface is part of the WebGL 2 API and stores sampling parameters for WebGLTexture access inside of a shader.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLSampler
WebGLShader	A										The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader
WebGLShaderPrecisionFormat	A										The WebGLShaderPrecisionFormat interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat
WebGLShaderPrecisionFormat.precision	A										The read-only WebGLShaderPrecisionFormat.precision property returns the number of bits of precision that can be represented.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/precision
WebGLShaderPrecisionFormat.rangeMax	A										The read-only WebGLShaderPrecisionFormat.rangeMax property returns the base 2 log of the absolute value of the maximum value that can be represented.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax
WebGLShaderPrecisionFormat.rangeMin	A										The read-only WebGLShaderPrecisionFormat.rangeMin property returns the base 2 log of the absolute value of the minimum value that can be represented.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin
WebGLSync	A										The WebGLSync interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLSync
WebGLTexture	A										The WebGLTexture interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture
WebGLTimerQueryEXT	A										The WebGLTimerQueryEXT interface is part of the WebGL EXT_disjoint_timer_query extension and exposes a timer query object.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLTimerQueryEXT
WebGLTransformFeedback	A										The WebGLTransformFeedback interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLTransformFeedback
WebGLUniformLocation	A										The WebGLUniformLocation interface is part of the WebGL API and represents the location of a uniform variable in a shader program.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLUniformLocation
WebGLVertexArrayObject	A										The WebGLVertexArrayObject interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObject
WebGLVertexArrayObjectOES	A										The WebGLVertexArrayObjectOES interface is part of the WebGL OES_vertex_array_object extension, represents vertex array objects (VAOs) pointing to vertex array data and provides names for different sets of vertex data.	https://developer.mozilla.org/en-US/docs/Web/API/WebGLVertexArrayObjectOES
WebGL	A										Support for WebGL is present in Firefox 4+, Google Chrome 9+, Opera 12+, Safari 5.1+ and Internet Explorer 11+; however, the user's device must also have hardware that supports these features.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API
WebGL constants	A										The WebGL API provides several constants that are passed into or returned by functions. All constants are of type GLenum.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants
Matrix math for the web	A										Matrices can be used to represent transformations of objects in space, and are an important tool to use in visualizations on the Web. This article explores how to create matrices and use them with CSS3 transforms and the matrix3d transform type.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web
WebGL tutorial	A										This tutorial describes how to use the canvas element to draw WebGL graphics, starting with the basics. The examples provided should give you some clear ideas what you can do with WebGL and will provide code snippets that may get you started in building your own content.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial
Adding 2D content to a WebGL context	A										Once you've successfully created a WebGL context, you can start rendering into it. The simplest thing we can do is draw a simple 2D, untextured object, so let's start there, by building code to draw a square.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context
Animating objects with WebGL	A										Our existing code from the previous examples is already configured to redraw our WebGL scene every 15 milliseconds. Until now, it's simply redrawing everything exactly the same way every time. It's time to change that, so that our square actually moves.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL
Animating textures in WebGL	A										In this demonstration, we build upon the previous example by replacing our static textures with the frames of a playing Ogg video file. This is actually pretty easy to do, but is fun to look at, so let's get started. Similar code can be used to use any sort of data (such as a canvas as the source for your textures.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL
Creating 3D objects using WebGL	A										Let's take our square into three dimensions by adding five more faces to create a cube. To do this efficiently, we're going to switch from drawing using the vertices directly by calling the gl.drawArrays() method to using the vertex array as a table, and referencing individual vertices in that table to define the positions of each face's vertices, by calling gl.drawElements().	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL
Getting started with WebGL	A										WebGL enables web content to use an API based on OpenGL ES 2.0 to perform 3D rendering in an HTML canvas in browsers that support it without the use of plug-ins. WebGL programs consist of control code written in JavaScript and special effects code(shader code) that is executed on a computer's Graphics Processing Unit (GPU). WebGL elements can be mixed with other HTML elements and composited with other parts of the page or page background.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL
Lighting in WebGL	A										The first thing to understand about WebGL is that unlike the broader OpenGL standard, WebGL does not have inherent support for lighting. You have to do it yourself. Fortunately, it's not all that hard to do, and this article will cover some of the basics.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL
Using shaders to apply color in WebGL	A										Having created a square in the previous demonstration, the next obvious step is to add a splash of color to it. We can do this by revising the shaders.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL
Using textures in WebGL	A										Now that our sample program has a rotating 3D cube, let's map a texture onto it instead of having its faces be solid colors.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL
WebGL types	A										The following types are used in WebGL interfaces.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Types
Using WebGL extensions	A										WebGL, like its sister APIs (OpenGL and OpenGL ES), supports extensions. A complete list of extensions is available in the khronos webgl extension registry.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Using_Extensions
WebGL best practices	A										This article offers suggestions and tips to improve your WebGL content. Following these suggestions can help improve your web application's compatibility with more devices and browsers, as well as increase its performance.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices
WebGL model view projection	A										This article explores how to take data within a WebGL project, and project it into the proper spaces to display it on the screen. It assumes a knowledge of basic matrix math using translation, scale, and rotation matrices. It explains the three core matrices that are typically used to represent a 3D object: the model, view and projection matrices.	https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection
WEBGL_color_buffer_float	A										The WEBGL_color_buffer_float extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_color_buffer_float
WEBGL_compressed_texture_atc	A										The WEBGL_compressed_texture_atc extension is part of the WebGL API and exposes 3 ATC compressed texture formats. ATC is a proprietary compression algorithm for compressing textures on handheld devices.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_atc
WEBGL_compressed_texture_es3	A										The WEBGL_compressed_texture_es3 extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_es3
WEBGL_compressed_texture_etc1	A										The WEBGL_compressed_texture_etc1 extension is part of the WebGL API and exposes the ETC1 compressed texture format.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_etc1
WEBGL_compressed_texture_pvrtc	A										The WEBGL_compressed_texture_pvrtc extension is part of the WebGL API and exposes four PVRTC compressed texture formats.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_pvrtc
WEBGL_compressed_texture_s3tc	A										The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_compressed_texture_s3tc
WEBGL_debug_renderer_info	A										The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_renderer_info
WEBGL_debug_shaders	A										The WEBGL_debug_shaders extension is part of the WebGL API and exposes a method to debug shaders from privileged contexts.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders
WEBGL_debug_shaders.getTranslatedShaderSource()	A										<pre><code>gl.getExtension('WEBGL_debug_shaders').getTranslatedShaderSource(shader);</code></pre>The WEBGL_debug_shaders.getTranslatedShaderSource() method is part of the WebGL API and allows you to debug a translated shader.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_debug_shaders/getTranslatedShaderSource
WEBGL_depth_texture	A										The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture
WEBGL_draw_buffers	A										The WEBGL_draw_buffers extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers
WEBGL_draw_buffers.drawBuffersWEBGL()	A										<pre><code>void gl.getExtension('WEBGL_draw_buffers').drawBuffersWEBGL(buffers);</code></pre>The WEBGL_draw_buffers.drawBuffersWEBGL() method is part of the WebGL API and allows you to define the draw buffers to which all fragment colors are written.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL
WEBGL_lose_context	A										The WEBGL_lose_context extension is part of the WebGL API and exposes functions to simulate losing and restoring a WebGLRenderingContext.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context
WEBGL_lose_context.loseContext()	A										<pre><code>gl.getExtension('WEBGL_lose_context').loseContext();</code></pre>The WEBGL_lose_context.loseContext() method is part of the WebGL API and allows you to simulate losing the context of a WebGLRenderingContext context.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/loseContext
WEBGL_lose_context.restoreContext()	A										<pre><code>gl.getExtension('WEBGL_lose_context').restoreContext();</code></pre>The WEBGL_lose_context.restoreContext() method is part of the WebGL API and allows you to simulate restoring the context of a WebGLRenderingContext object.	https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/restoreContext
WebRTC API	A										WebRTC (Web Real-Time Communications) is a technology which enables Web applications and sites to capture and optionally stream audio and/or video media, as well as to exchange arbitrary data between browsers without requiring an intermediary.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API
Improving compatibility using WebRTC adapter.js	A										The WebRTC organization provides on GitHub the WebRTC adapter to work around compatibility issues in different browsers' WebRTC implementations. The adapter is a JavaScript shim which lets your code to be written to the specification so that it will "just work" in all browsers with WebRTC support.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/adapter.js
WebRTC architecture overview	A										Beneath the APIs that developers use to create and use WebRTC connections lie a number of network protocols and connectivity standards. This brief overview covers these standards.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Architecture
WebRTC coding guide	A										Once you have an overall understanding of what WebRTC does and how it works, your mind likely turns to implementation. How do you create a Web application that uses two-way video or data streams without having to do all the hard work of compressing frames, building streams, and so forth by yourself? This coding guide will explain in depth how WebRTC works, and will dive into actual code that uses WebRTC to do useful things.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Coding_guide
WebRTC connectivity	A										This article describes how the various WebRTC-related protocols interact with one another in order to create a connection and transfer data and/or media among peers.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Connectivity
High-level guides	A										WebRTC (Web Real-Time Communications) is a broad, multi-component system for setting up and operating complex audio, video, and data channels across networks among two or more peers on the Web. The high-level guides listed below introduce WebRTC technology from a top-down perspective, describing the overall architecture, the life cycle of a WebRTC connection, and basic security and technological issues you might run into as you explore and build Web content or apps using the WebRTC API.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/High-level_guide
WebRTC API overview	A										WebRTC consists of several interrelated APIs and protocols which work together to support the exchange of data and media between two or more peers. This article provides a brief overview of each of these APIs and what purpose it serves.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Overview
WebRTC protocols	A										This article introduces the protocols on top of which the WebRTC API is built.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols
Lifetime of a WebRTC session	A										WebRTC lets you build peer-to-peer communication of arbitrary data, audio, or video—or any combination thereof—into a browser application. In this article, we'll look at the lifetime of a WebRTC session, from establishing the connection all the way through closing the connection when it's no longer needed.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Session_lifetime
Signaling and video calling	A										Although WebRTC is billed as a fully peer-to-peer technology for the real-time exchange of audio, video, and data, there is one caveat. As discussed elsewhere, in order for two devices on different networks to locate one another, some form of discovery and media format negotiation must take place. This process, called signaling, involves both devices connecting to a third, mutually agreed-upon server through which the two devices can locate one another and exchange the needed negotiation messages.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling
A simple RTCDataChannel sample	A										The RTCDataChannel interface is a feature of the WebRTC API which lets you open a channel between two peers over which you may send and receive arbitrary data. The API is intentionally similar to the WebSocket API, so that the same programming model can be used for each.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample
Taking still photos with WebRTC	A										This article shows how to use WebRTC to access the camera on a computer or mobile phone with WebRTC support and take a photo with it.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos
Using WebRTC data channels	A										Once you've established a WebRTC peer connection using the RTCPeerConnection interface, you're able to send and receive media data between the two peers on the connection. But there's a lot more you can do with WebRTC. In this guide, we'll examine how to add a data channel to a peer connection, which can then be used to exchange arbitrary data; that is, any kind of data we wish, in any format we choose.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_data_channels
WebRTC basics	A										The material here comes from RTCPeerConnection ; it may remain here, or it may go elsewhere. But it didn't belong on that page. While I work on sorting that page out, it will sit here, until I know where it belongs for real.	https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/WebRTC_basics
WebSocket	A										The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.	https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
WebSockets	A										WebSockets is an advanced technology that makes it possible to open an interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.	https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
WebSocket Server Vb.NET	A										The following sample is not optimized. It does not make use of.NET 4.5 Websocket support. The current version:	https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/WebSocket_Server_Vb.NET
Writing a WebSocket server in Java	A										This example shows you how to create a WebSocket API server using Oracle Java. Although other server-side languages can be used to create a WebSocker server, this example uses Oracle Java to simplify the example code.	https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java
Writing WebSocket client applications	A										WebSockets is a technology, based on the ws protocol, that makes it possible to establish a continuous full-duplex connection stream between a client and a server.  A typical websocket client would be a user's browser, but the protocol is platform independent.	https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications
Writing a WebSocket server in C#	A										If you would like to use the WebSocket API, it is useful if you have a server. In this article I will show you how to write one in C#. You can do it in any server-side language, but to keep things simple and more understandable, I chose Microsoft's language.	https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_server
Writing WebSocket servers	A										A WebSocket server is a TCP application listening on any port of a server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.	https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers
WebSocket API	A										WebSockets is an advanced technology that makes it possible to open an interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.	https://developer.mozilla.org/en-US/docs/Web/API/WebSocket_API
WebVR API	A										WebVR provides support for exposing virtual reality devices — for example head-mounted displays like the Oculus Rift — to web apps, enabling developers to translate position and movement information from the display into movement around a 3D scene. This has numerous very interesting applications, from virtual product tours and interactive training apps to super immersive first person games.	https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API
Using the WebVR API	A										The WebVR API is a fantastic addition to the web developer's toolkit, allowing access to virtual reality hardware such as the Oculus Rift, and converting outputted movement and orientation data into view rendering updates on a web app. But how do you get started in developing VR apps for the Web? This article will guide you through the basics.	https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/Using_the_WebVR_API
WebVR concepts	A										This article discusses some of the concepts and theory behind virtual reality (VR). If you are a newcomer to the area, it is worthwhile getting an understanding of these topics before you start diving into code.	https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/WebVR_concepts
WebVR environment setup	A										In this article, we'll take you through what you need to set up your WebVR testing environment — including necessary hardware and software — and share some troubleshooting tips.	https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API/WebVR_environment_setup
Web Animations API	A										The Web Animations API provides a common language for browsers and developers to describe animations on DOM elements. To get more information on the concepts behind the API and how to use it, read Using the Web Animations API.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API
Keyframe Formats	A										Element.animate(), KeyframeEffectReadOnly.KeyframeEffectReadOnly(), KeyframeEffect.KeyframeEffect(), KeyframeEffect.setKeyframes() and SharedKeyframeList.SharedKeyframeList() all accept objects formatted to represent a set of keyframes. There are several options to this format, which are explained below.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats
Using the Web Animations API	A										The Web Animations API lets us construct animations and control their playback with JavaScript. This article will start you off in the right direction with fun demos and tutorials featuring Alice in Wonderland.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API
Web Audio API	A										The Web Audio API involves handling audio operations inside an audio context, and has been designed to allow modular routing. Basic audio operations are performed with audio nodes, which are linked together to form an audio routing graph. Several sources — with different types of channel layout — are supported even within a single context. This modular design provides the flexibility to create complex audio functions with dynamic effects.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API
Basic concepts behind Web Audio API	A										This article explains some of the audio theory behind how the features of the Web Audio API work. It won't turn you into a master sound engineer, but it will give you enough background to understand why the Web Audio API works like it does, and allow you to make better informed decisions while developing with it.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API
Porting webkitAudioContext code to standards based AudioContext	A										The Web Audio standard was first implemented in WebKit, and the implementation was built in parallel with the work on the specification of the API.  As the specification evolved and changes were made to the spec, some of the old implementation pieces were not removed from the WebKit (and Blink) implementations due to backwards compatibility reasons.  New engines implementing the Web Audio spec (such as Gecko) will only implement the official, final version of the specification, which means that code using webkitAudioContext or old naming conventions in the Web Audio specification may not immediately work out of the box in a compliant Web Audio implementation.  This article attempts to summarize the areas where developers are likely to encounter these problems and provide examples on how to port such code to standards based AudioContext, which will work across different browser engines.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Porting_webkitAudioContext_code_to_standards_based_AudioContext
Using the Web Audio API	A										The Web Audio API provides a simple yet powerful mechanism to implement and manipulate audio content inside web applications. It allows you to develop complex audio mixing, effects, panning and more. In this article we will explain the basics of using the Web Audio API, via a couple of fairly simple examples.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API
Visualizations with Web Audio API	A										To extract data from your audio source, you need an AnalyserNode, which is created using the AudioContext.createAnalyser() method, for example:	https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API
Web audio spatialization basics	A										As you can see, the actual panner code is pretty simple &#8212; specify the positions, and the browser takes care of the rest. It is working out the surrounding code, and the values to use for positioning, which takes a bit more time.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Web_audio_spatialization_basics
Web Bluetooth API	A										[1] Behind a flag. Chrome OS only.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API
Web Crypto API	A										The Web Crypto API is an interface allowing a script to use cryptographic primitives in order to build systems using cryptography.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API
Checking authenticity with password	A										Checking the authenticity of the message can be performed using the Web Crypto API. In this article we will show how to create and control a signature creating using a hash function and a password.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API/Checking_authenticity_with_password
Supported algorithms	A										Different algorithms are supported for the different functions provided by the Web Crypto API. Also, depending of the context, these algorithms needs parameters or they will raise a SyntaxError. This pages lists the context, the available algorithms and the required parameters.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API/Supported_algorithms
Web Speech API	A										The Web Speech API makes web apps able to handle voice data. There are two components to this API:	https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API
Using the Web Speech API	A										The Web Speech API provides two distinct areas of functionality — speech recognition, and speech synthesis (also know as text to speech, or tts) — which open up interesting new possibilities for accessibility, and control mechanisms. This article provides a simple introduction to both areas, along with demos.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API
Web Storage API	A										The Web Storage API provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using cookies.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API
Using the Web Storage API	A										Storage objects are simple key-value stores, similar to objects, but they stay intact through page loads.  The keys and the values are always strings (note that integer keys will be automatically converted to strings, just like what object do). You can access these values like an object, or with the getItem() and setItem() methods.  These three lines all set the colorSetting entry in the same way:	https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
WebVTT	A										WebVTT is a format for displaying timed text tracks (e.g. subtitles or captions) with the track element. The primary purpose of WebVTT files is to add text overlays to a video. WebVTT is a text based format, which must be encoded in UTF-8 format. Where you can use spaces you can also use tabs.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Video_Text_Tracks_Format
Web Workers API	A										Web Workers are a mechanism by which a script operation can be made to run in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API
Functions and classes available to Web Workers	A										In addition to the standard JavaScript set of functions (such as String, Array, Object, JSON etc), there are a variety of functions available from the DOM to workers. This article provides a list of those.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers
The structured clone algorithm	A										The structured clone algorithm is a new algorithm defined by the HTML5 specification for serializing complex JavaScript objects. It's more capable than JSON in that it supports the serialization of objects that contain cyclic graphs — objects can refer to objects that refer to other objects in the same graph. In addition, in some cases, the structured clone algorithm may be more efficient than JSON.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
Using Web Workers	A										A worker is an object created using a constructor (e.g. Worker()) that runs a named JavaScript file — this file contains the code that will run in the worker thread; workers run in another global context that is different from the current window. Thus, using the window shortcut to get the current global scope (instead of self) within a Worker will return an error.	https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers
WheelEvent	A										The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.	https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent
WheelEvent.deltaMode	A										<pre><code>var unit = event.deltaMode;</code></pre>The WheelEvent.deltaMode read-only property returns an unsigned long representing the unit of the delta values scroll amount. Permitted values are:	https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode
WheelEvent.deltaX	A										<pre><code>var dX = event.deltaX;</code></pre>The WheelEvent.deltaX read-only property is a double representing the horizontal scroll amount in the WheelEvent.deltaMode unit.	https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaX
WheelEvent.deltaY	A										<pre><code>var dY = event.deltaY;</code></pre>The WheelEvent.deltaY read-only property is a double representing the vertical scroll amount in the WheelEvent.deltaMode unit.	https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaY
WheelEvent.deltaZ	A										<pre><code>var dZ = event.deltaZ;</code></pre>The WheelEvent.deltaZ read-only property is a double representing the scroll amount along the z-axis, in the WheelEvent.deltaMode unit.	https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaZ
WheelEvent()	A										<pre><code>var wheelEvent = new WheelEvent(typeArg, wheelEventInit); \n</code></pre>The WheelEvent() constructor returns a newly created FocusEvent object.	https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent
Window	A										The window object represents a window containing a DOM document; the document property points to the DOM document loaded in that window.	https://developer.mozilla.org/en-US/docs/Web/API/Window
Window.alert()	A										<pre><code>window.alert(message);</code></pre>The Window.alert() method displays an alert dialog with the optional specified content and an OK button.	https://developer.mozilla.org/en-US/docs/Web/API/Window/alert
Window.applicationCache	A										<pre><code>cache = window.applicationCache \n</code></pre>Returns a reference to the application cache object for the window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/applicationCache
Window.blur()	A										<pre><code>window.blur()</code></pre>Shifts focus away from the window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/blur
Window.caches	A										<pre><code>var myCacheStorage = window.caches;\n</code></pre>The Window.caches read-only property returns the CacheStorage object associated with the current origin. This object enables service worker functionality such as storing assets for offline use, and generating custom responses to requests.	https://developer.mozilla.org/en-US/docs/Web/API/Window/caches
window.cancelAnimationFrame()	A										<pre><code>window.cancelAnimationFrame(requestID);\n</code></pre>Cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame().	https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame
cancelIdleCallback	A										The Window.cancelIdleCallback() enables you to cancel a callback previously scheduled with Window.requestIdleCallback.	https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback
Window.captureEvents()	A										<pre><code>window.captureEvents(eventType) \n</code></pre>Registers the window to capture all events of the specified type.	https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents
Window.clearImmediate()	A										<pre><code>window.clearImmediate(immediateID)\n</code></pre>This method clears the action specified by window.setImmediate.	https://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate
Window.close()	A										<pre><code>window.close();</code></pre>The Window.close() method closes the current window, or the window on which it was called.	https://developer.mozilla.org/en-US/docs/Web/API/Window/close
Window.closed	A										<pre><code>isClosed = windowRef.closed;\n</code></pre>This read-only property indicates whether the referenced window is closed or not.	https://developer.mozilla.org/en-US/docs/Web/API/Window/closed
Window.confirm()	A										<pre><code>result = window.confirm(message);\n</code></pre>The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.	https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm
Window.console	A										<pre><code>var consoleObj = window.console;\n</code></pre>The Window.console read-only property returns a reference to the Console object, which provides methods for logging information to the browser's console. These methods are intended for debugging purposes only and should not be relied on for presenting information to end users.	https://developer.mozilla.org/en-US/docs/Web/API/Window/console
Window.content	A										Returns a Window object for the primary content window. This is useful in XUL windows that have a browser (or tabbrowser or iframe) with type="content-primary" attribute on it - the most famous example is Firefox main window, browser.xul. In such cases, content returns a reference to the Window object for the document currently displayed in the browser. It is a shortcut for browserRef.contentWindow.	https://developer.mozilla.org/en-US/docs/Web/API/Window/content
Window.controllers	A										<pre><code>controllers = window.controllers\n</code></pre>Returns the XUL controllers of the chrome window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/controllers
Window.convertPointFromNodeToPage()	A										The Window.convertPointFromNodeToPage() method converts a Point object from coordinates based on the given CSS node to coordinates based on the page.	https://developer.mozilla.org/en-US/docs/Web/API/Window/convertPointFromNodeToPage
Window.convertPointFromPageToNode	A										Converts a Point object from coordinates based on the page to coordinates based on the given CSS node.	https://developer.mozilla.org/en-US/docs/Web/API/Window/convertPointFromPageToNode
Window.crypto	A										<pre><code>var cryptoObj = window.crypto || window.msCrypto; // for IE 11\n</code></pre>The Window.crypto read-only property returns the Crypto object associated to the global object. This object allows web pages access to certain cryptographic related services.	https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto
Window.devicePixelRatio	A										<pre><code>value = window.devicePixelRatio;\n</code></pre>The Window.devicePixelRatio read-only property returns the ratio of the (vertical) size of one physical pixel on the current display device to the size of one device independent pixels(dips).	https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio
Window.dialogArguments	A										<pre><code>value = window.dialogArguments;</code></pre>The dialogArguments property returns the parameters that were passed into the window.showModalDialog() method. This lets you determine what parameters were specified when the modal dialog was created.	https://developer.mozilla.org/en-US/docs/Web/API/Window/dialogArguments
Window.document	A										<pre><code>doc = window.document \n</code></pre>Returns a reference to the document contained in the window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/document
Window.dump()	A										<pre><code>window.dump(message);\n\ndump(message);\n</code></pre>Prints messages to the (native) console.	https://developer.mozilla.org/en-US/docs/Web/API/Window/dump
Window.event	A										window.event is a proprietary Microsoft Internet Explorer property which is only available while a DOM event handler is being called. Its value is the Event object currently being handled.	https://developer.mozilla.org/en-US/docs/Web/API/Window/event
Window.find()	A										<pre><code>window.find(aString, aCaseSensitive, aBackwards, aWrapAround,\n            aWholeWord, aSearchInFrames, aShowDialog);</code></pre>Finds a string in a window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/find
Window.focus()	A										<pre><code>window.focus() \n</code></pre>Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.	https://developer.mozilla.org/en-US/docs/Web/API/Window/focus
Window.frameElement	A										<pre><code>frameEl = window.frameElement;\n</code></pre>Returns the element (such as iframe or object) in which the window is embedded, or null if the element is either top-level or is embedded into a document with a different script origin; that is, in cross-origin situations.	https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement
Window.frames	A										<pre><code>frameList = window.frames;\n</code></pre>Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/frames
Window.fullScreen	A										<pre><code>isInFullScreen = windowRef.fullScreen;\n</code></pre>This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.	https://developer.mozilla.org/en-US/docs/Web/API/Window/fullScreen
Window.getAttention()	A										<pre><code>window.getAttention();\n</code></pre>Attempts to get the user's attention. How this happens varies based on OS and window manager.	https://developer.mozilla.org/en-US/docs/Web/API/Window/getAttention
Window.getComputedStyle()	A										<pre><code>var style = window.getComputedStyle(element[, pseudoElt]);\n</code></pre>The Window.getComputedStyle() method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.	https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle
Window.getDefaultComputedStyle()	A										<pre><code>var style = window.getDefaultComputedStyle(element[, pseudoElt]);\n</code></pre>getDefaultComputedStyle() gives the default computed values of all the CSS properties of an element, ignoring author styling.  That is, only user-agent and user styles are taken into account.	https://developer.mozilla.org/en-US/docs/Web/API/window/getDefaultComputedStyle
Window.getSelection()	A										<pre><code>selection = window.getSelection();</code></pre>Returns a Selection object representing the range of text selected by the user or the current position of the caret.	https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection
Window.history	A										<pre><code>var historyObj = window.history;\n</code></pre>The Window. history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).	https://developer.mozilla.org/en-US/docs/Web/API/Window/history
Window.innerHeight	A										<pre><code>var intViewportHeight = window.innerHeight;</code></pre>Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.	https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight
Window.innerWidth	A										<pre><code>var intViewportWidth = window.innerWidth;</code></pre>Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.	https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth
Window.isSecureContext	A										<pre><code>var isSecure = Window.isSecureContext</code></pre>The Window.isSecureContext read-only property indicates whether a context is capable of using features that require secure contexts.	https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext
Window.length	A										<pre><code>framesCount = window.length;\n</code></pre>Returns the number of frames (either &lt;frame&gt; or &lt;iframe&gt; elements) in the window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/length
Window.localStorage	A										<pre><code>myStorage = localStorage;</code></pre>The localStorage property allows you to access a local Storage object. localStorage is similar to sessionStorage. The only difference is that, while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the browsing session ends—that is, when the browser is closed.	https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage
Window.location	A										<pre><code>var oldLocation = location;\nlocation = newLocation;\n</code></pre>The Window.location read-only property returns a Location object with information about the current location of the document.	https://developer.mozilla.org/en-US/docs/Web/API/Window/location
Window.locationbar	A										<pre><code>objRef = window.locationbar \n</code></pre>Returns the locationbar object, whose visibility can be checked.	https://developer.mozilla.org/en-US/docs/Web/API/Window/locationbar
Window.matchMedia()	A										<pre><code>mql = window.matchMedia(mediaQueryString)</code></pre>Returns a new MediaQueryList object representing the parsed results of the specified media query string.	https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia
Window.menubar	A										Returns the menubar object, whose visibility can be checked.	https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar
Window.messageManager	A										<pre><code>messageManager = window.messageManager \n</code></pre>Returns the message manager object for this window. See The message manager for details.	https://developer.mozilla.org/en-US/docs/Web/API/Window/messageManager
Window.minimize()	A										Sets a window to minimized state (a way to undo it programatically is by calling window.moveTo()).	https://developer.mozilla.org/en-US/docs/Web/API/Window/minimize
Window.moveBy()	A										<pre><code>window.moveBy(deltaX, deltaY) \n</code></pre>Moves the current window by a specified amount.	https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy
Window.moveTo()	A										<pre><code>window.moveTo(x, y) \n</code></pre>Moves the window to the specified coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo
Window.mozAnimationStartTime	A										Returns the time, in milliseconds since the epoch, at which animations started now should be considered to have started. This value should be used instead of, for example, Date.now(), because this value will be the same for all animations started in this window during this refresh interval, allowing them to remain in sync with one another.	https://developer.mozilla.org/en-US/docs/Web/API/Window/mozAnimationStartTime
Window.mozInnerScreenX	A										<pre><code>screenX = window.mozInnerScreenX;</code></pre>Gets the X coordinate of the top-left corner of the window's viewport, in screen coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenX
Window.mozInnerScreenY	A										<pre><code>screenY = window.mozInnerScreenY;</code></pre>Gets the Y coordinate of the top-left corner of the window's viewport, in screen coordinates.	https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenY
Window.mozPaintCount	A										<pre><code>var paintCount = window.mozPaintCount;</code></pre>Returns the number of times the current document has been painted to the screen in this window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/mozPaintCount
Window.name	A										<pre><code>string = window.name;\nwindow.name = string;\n</code></pre>Gets/sets the name of the window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/name
Window.navigator	A										The Window.navigator read-only property returns a reference to the Navigator object, which can be queried for information about the application running the script.	https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator
Navigator.connection	A										<pre><code>connectionInfo = navigator.connection</code></pre>The Navigator.connection read-only property represents a NetworkInformation containing information about the system's connection, such as the current bandwidth of the user's device or whether the connection is metered. This could be used to select high definition content or low definition content based on the user's connection.	https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator/connection
mozNetworkStats	A										The MozNetworkStatsManager interface provides methods and properties to monitor data usage.	https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator/mozNetworkStats
Window.onbeforeinstallprompt	A										<pre><code>window.addEventListener("beforeinstallprompt", function(event) { ... });\nwindow.onbeforeinstallprompt = function(event) { ...};</code></pre>The Window.onbeforeinstallprompt property is an event handler for processing a beforeinstallprompt, which is dispatched on mobile when a web manifest exists, but before a user is prompted to save a web site to a home screen.	https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeinstallprompt
Window.ondevicelight	A										<pre><code>window.ondevicelight = funcRef</code></pre>Specifies an event listener to receive devicelight events. These events occur when the device's light level sensor detects a change in the intensity of the ambient light level.	https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicelight
Window.ondevicemotion	A										<pre><code>window.ondevicemotion = funcRef;\n</code></pre>An event handler for the devicemotion events sent to the window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicemotion
Window.ondeviceorientation	A										<pre><code>window.ondeviceorientation = function(event) { ... };\nwindow.addEventListener('deviceorientation', function(event) { ... });\n</code></pre>An event handler for the deviceorientation event, which contains information about a relative device orientation change.	https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientation
ondeviceorientationabsolute	A										<pre><code>window.ondeviceorientationabsolute = function(event) { ... };\nwindow.addEventListener('deviceorientationabsolute', function(event) { ... });\n</code></pre>An event handler for the deviceorientationabsolute event containing&#160;information about an absolute device orientation change.	https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientationabsolute
Window.ondeviceproximity	A										<pre><code>window.onuserproximity = funcRef</code></pre>Specifies an event listener to receive deviceproximity events. These events occur when the device sensor detects that an object becomes closer to or farther from the device.	https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceproximity
Window.oninstall	A										<pre><code>window.oninstall = function(event) { ... };\n</code></pre>The oninstall property of the Window interface represent the event handler for the install event, which is thrown each time the page is successfully installed as a web app.	https://developer.mozilla.org/en-US/docs/Web/API/Window/oninstall
Window.onpaint	A										<pre><code>window.onpaint =funcRef;\n</code></pre>An event handler for the paint event on the window. Not working in Gecko-based applications currently, see Notes section!	https://developer.mozilla.org/en-US/docs/Web/API/Window/onpaint
Window.onuserproximity	A										<pre><code>window.onuserproximity = eventHandler</code></pre>The Window.onuserproxymity property represents an EventHandler, that is a function to be called when the userproximity event occurs. These events are of type UserProximityEvent and occur when the the device sensor detects that an object becomes nearby.	https://developer.mozilla.org/en-US/docs/Web/API/Window/onuserproximity
Window.onvrdisplayconnected	A										<pre><code>window.onvrdisplayconnected = function() { ... };\n</code></pre>The onvrdisplayconnected property of the SpeechSynthesis interface represents an event handler that will run when a compatible VR device has been connected to the computer (when the vrdisplayconnected event fires).	https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnected
Window.onvrdisplaydisconnected	A										<pre><code>window.onvrdisplaydisconnected = function() { ... };\n</code></pre>The onvrdisplaydisconnected event handler property of the Window interface is called when a compatible VR device has been disconnected from the computer (when the vrdisplaydisconnected event fires).	https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnected
Window.onvrdisplaypresentchange	A										<pre><code>window.onvrdisplaypresentchange = function() { ... };\n</code></pre>The onvrdisplaypresentchange property of the SpeechSynthesis interface represents an event handler that will run when the presenting state of a VR device changes — i.e. goes from presenting to not presenting, or vice versa (when the onvrdisplaypresentchange event fires).	https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange
Window.open()	A										<pre><code>var windowObjectReference = window.open(strUrl, strWindowName, [strWindowFeatures]);</code></pre>Loads a resource into either a new browsing context (such as a window) or one that already exists, depending on the specified parameters.	https://developer.mozilla.org/en-US/docs/Web/API/Window/open
Window.openDialog()	A										<pre><code>newWindow = openDialog(url, name, features, arg1, arg2, ...) \n</code></pre>window.openDialog() is an extension to window.open(). It behaves the same, except that it can optionally take one or more parameters past windowFeatures, and windowFeatures itself is treated a little differently.	https://developer.mozilla.org/en-US/docs/Web/API/Window/openDialog
Window.opener	A										<pre><code>objRef = window.opener;\n</code></pre>Returns a reference to the window that opened this current window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/opener
Window.orientation	A										Returns the orientation in degrees (in 90-degree increments) of the viewport relative to the device's natural orientation.	https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation
Window.outerHeight	A										<pre><code>outWindowHeight = window.outerHeight;\n</code></pre>Window.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.	https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight
Window.outerWidth	A										<pre><code>outWindowWidth = window.outerWidth;\n</code></pre>Window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.	https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth
Window.pageXOffset	A										This is an alias for scrollX.	https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset
Window.pageYOffset	A										This is an alias for scrollY.	https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset
Window.parent	A										<pre><code>parentWindow = window.parent; \n</code></pre>A reference to the parent of the current window or subframe.	https://developer.mozilla.org/en-US/docs/Web/API/Window/parent
Window.performance	A										The Web Performance API allows web pages access to certain functions for measuring the performance of web pages and web applications, including the Navigation Timing API and high-resolution time data.	https://developer.mozilla.org/en-US/docs/Web/API/Window/performance
Window.personalbar	A										<pre><code>objRef =window.personalbar\n</code></pre>Returns the personalbar object, whose visibility can be toggled in the window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/personalbar
Window.postMessage()	A										<pre><code>otherWindow.postMessage(message, targetOrigin, [transfer]);</code></pre>The window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both https), port number (443 being the default for https), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used.	https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
Window.print()	A										<pre><code>window.print() \n</code></pre>Opens the Print Dialog to print the current document.	https://developer.mozilla.org/en-US/docs/Web/API/Window/print
Window.prompt()	A										<pre><code>result = window.prompt(message, default);\n</code></pre>The Window.prompt() displays a dialog with an optional message prompting the user to input some text.	https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt
Window.releaseEvents()	A										<pre><code>window.releaseEvents(eventType) \n</code></pre>Releases the window from trapping events of a specific type.	https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents
window.requestAnimationFrame()	A										<pre><code>window.requestAnimationFrame(callback);\n</code></pre>You should call this method whenever you're ready to update your animation onscreen. This will request that your animation function be called before the browser performs the next repaint. The number of callbacks is usually 60 times per second, but will generally match the display refresh rate in most web browsers as per W3C recommendation. The callback rate may be reduced to a lower rate when running in background tabs or in hidden iframe s in order to improve performance and battery life.	https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
requestIdleCallback	A										<pre><code>var handle = window.requestIdleCallback(callback[, options])</code></pre>The w indow.requestIdleCallback() method queues a function to be called during a browser's idle periods. This enables developers to perform background and low priority work on the main event loop, without impacting latency-critical events such as animation and input response. Functions are generally called in first-in-first-out order unless the function's timeout is reached before the browser calls it.	https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback
Window.resizeBy()	A										<pre><code>window.resizeBy(xDelta, yDelta) \n</code></pre>Resizes the current window by a certain amount.	https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy
Window.resizeTo()	A										<pre><code>window.resizeTo(aWidth, aHeight) \n</code></pre>Dynamically resizes window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo
Window.restore()	A										This method is currently not working, but you can use:	https://developer.mozilla.org/en-US/docs/Web/API/Window/restore
Window.screen	A										<pre><code>screenObj = window.screen;\n</code></pre>Returns a reference to the screen object associated with the window. The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.	https://developer.mozilla.org/en-US/docs/Web/API/Window/screen
Window.screenX	A										<pre><code>lLoc = window.screenX \n</code></pre>The Window.screenX read-only property returns the horizontal distance, in CSS pixels, of the left border of the user's browser from the left side of the screen.	https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX
Window.screenY	A										<pre><code>lLoc = window.screenY \n</code></pre>The Window.screenY read-only property returns the vertical distance, in CSS pixels of the top border of the user's browser from the top edge of the screen.	https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY
Window.scroll()	A										<pre><code>window.scroll(x-coord, y-coord) \n</code></pre>Scrolls the window to a particular place in the document.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll
Window.scrollbars	A										Returns the scrollbars object, whose visibility can be checked.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars
Window.scrollBy()	A										<pre><code>window.scrollBy(X, Y);\n</code></pre>Scrolls the document in the window by the given amount.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy
Window.scrollByLines()	A										<pre><code>window.scrollByLines(lines) \n</code></pre>Scrolls the document by the given number of lines.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByLines
Window.scrollByPages()	A										Scrolls the current document by the specified number of pages.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages
Window.scrollMaxX	A										<pre><code>xpix = window.scrollMaxX\n</code></pre>Returns the maximum number of pixels that the document can be scrolled horizontally.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxX
Window.scrollMaxY	A										<pre><code>ypix = window.scrollMaxY\n</code></pre>Returns the maximum number of pixels that the document can be scrolled vertically.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxY
Window.scrollTo()	A										<pre><code>window.scrollTo(x-coord, y-coord)</code></pre>Scrolls to a particular set of coordinates in the document.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo
Window.scrollX	A										<pre><code>var x = window.scrollX;</code></pre>Returns the number of pixels that the document has already been scrolled horizontally.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX
Window.scrollY	A										<pre><code>var y = window.scrollY;</code></pre>Returns the number of pixels that the document has already been scrolled vertically.	https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY
Window.self	A										<pre><code>var w = window.self;  // w === window\n</code></pre>The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).	https://developer.mozilla.org/en-US/docs/Web/API/Window/self
Window.sessionStorage	A										<pre><code>// Save data to sessionStorage\nsessionStorage.setItem('key', 'value');\n\n// Get saved data from sessionStorage\nvar data = sessionStorage.getItem('key');\n\n// Remove saved data from sessionStorage\nsessionStorage.removeItem('key')\n</code></pre>The sessionStorage property allows you to access a session Storage object. sessionStorage is similar to Window.localStorage, the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.	https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage
Window.setCursor()	A										Changes the cursor for the current window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/setCursor
Window.setImmediate()	A										<pre><code>var immediateID = setImmediate(func, [param1, param2, ...]);\nvar immediateID = setImmediate(func);\n</code></pre>This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates.	https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate
Window.showModalDialog()	A										<pre><code>returnVal = window.showModalDialog(uri[, arguments][, options]);\n</code></pre>The Window.showModalDialog() creates and displays a modal dialog box containing a specified HTML document.	https://developer.mozilla.org/en-US/docs/Web/API/Window/showModalDialog
Window.sidebar	A										Returns a sidebar object, which contains several methods for registering add-ons with browser.	https://developer.mozilla.org/en-US/docs/Web/API/Window/sidebar
Window.sizeToContent()	A										<pre><code>window.sizeToContent() \n</code></pre>The Window.sizeToContent() method sizes the window according to its content. In order for it to work, the DOM content should be loaded when this function is called, for example once the DOMContentLoaded event has been thrown.	https://developer.mozilla.org/en-US/docs/Web/API/Window/sizeToContent
Window.speechSynthesis	A										<pre><code>var synth = window.speechSynthesis;\n</code></pre>The speechSynthesis read-only property of the Window object returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality.	https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis
Window.status	A										<pre><code>window.status = string;\nvar value = window.status;</code></pre>Sets the text in the status bar at the bottom of the browser or returns the previously set text.	https://developer.mozilla.org/en-US/docs/Web/API/Window/status
Window.statusbar	A										<pre><code>objRef = window.statusbar\n</code></pre>Returns the statusbar object, whose visibility can be toggled in the window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/statusbar
Window.stop()	A										<pre><code>window.stop() \n</code></pre>This method stops window loading.	https://developer.mozilla.org/en-US/docs/Web/API/Window/stop
Window.toolbar	A										<pre><code>objRef = window.toolbar</code></pre>Returns the toolbar object, whose visibility can be toggled in the window.	https://developer.mozilla.org/en-US/docs/Web/API/Window/toolbar
Window.top	A										<pre><code>var topWindow = window.top;\n</code></pre>Returns a reference to the topmost window in the window hierarchy.	https://developer.mozilla.org/en-US/docs/Web/API/Window/top
Window.updateCommands()	A										Updates the state of commands of the current chrome window (UI).	https://developer.mozilla.org/en-US/docs/Web/API/Window/updateCommands
Window.URL	A										<pre><code>img.src = URL.createObjectURL(blob);</code></pre>The Window.URL property returns an object that provides static methods used for creating and managing object URLs. It can also be called as a constructor to construct URL objects.	https://developer.mozilla.org/en-US/docs/Web/API/Window/URL
Window.window	A										The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:	https://developer.mozilla.org/en-US/docs/Web/API/Window/window
Window.windowState	A										Check for window state:	https://developer.mozilla.org/en-US/docs/Web/API/Window/windowState
WindowBase64	A										The WindowBase64 helper contains utility methods to convert data to and from base64, a binary-to-text encoding scheme. For example it is used in data URIs.	https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64
WindowBase64.atob()	A										<pre><code>var decodedData = window.atob(encodedData);</code></pre>The WindowBase64.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the window.btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the window.atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.	https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/atob
Base64 encoding and decoding	A										Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding.	https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding
WindowBase64.btoa()	A										<pre><code>var encodedData = window.btoa(stringToEncode);</code></pre>The WindowBase64.btoa() method creates a base-64 encoded ASCII string from a String object in which each character in the string is treated as a byte of binary data.	https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa
WindowClient	A										The WindowClient interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.	https://developer.mozilla.org/en-US/docs/Web/API/WindowClient
WindowClient.focus()	A										<pre><code>Client.focus().then(function(WindowClient) {\n  // do something with your WindowClient once it has been focused\n});</code></pre>The focus() method of the WindowClient interface gives user input focus to the current client and returns a Promise that resolves to the existing WindowClient.	https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focus
WindowClient.focused	A										<pre><code>myFocused = WindowClient.focused;</code></pre>The focused read-only property of the WindowClient interface is a Boolean that indicates whether the current client has focus.	https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focused
WindowClient.navigate()	A										<pre><code>WindowClient.navigate(url).then(function(WindowClient) {\n  // do something with your WindowClient after navigation\n});</code></pre>The navigate() method of the WindowClient interface loads a specified URL into a controlled client page then returns a Promise that resolves to the existing WindowClient.	https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/navigate
WindowClient.visibilityState	A										<pre><code>myVisState = WindowClient.visibilityState;</code></pre>The visibilityState read-only property of the WindowClient interface indicates the visibility of the current client. This value can be one of hidden, visible, prerender, or unloaded.	https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/visibilityState
WindowEventHandlers	A										WindowEventHandlers mixin describes the event handlers common to several interfaces like Window, or HTMLBodyElement and HTMLFrameSetElement. Each of these interfaces can implement additional specific event handlers.	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers
WindowEventHandlers.onafterprint	A										<pre><code>window.onafterprint = event handling code\n</code></pre>The WindowEventHandlers.onafterprint property sets and returns the onafterprint EventHandler for the current window.	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint
WindowEventHandlers.onbeforeprint	A										<pre><code>window.onbeforeprint = event handling code\n</code></pre>The property&#160;onbeforeprint sets and returns the onbeforeprint event handler code for the current window.	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint
WindowEventHandlers.onbeforeunload	A										<pre><code>window.onbeforeunload = funcRef</code></pre>The WindowEventHandlers.onbeforeunload event handler property contains the code executed when the beforeunload is sent. This event fires when a window is about to unload its resources. The document is still visible and the event is still cancelable.	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload
WindowEventHandlers.onhashchange	A										<pre><code>window.onhashchange = funcRef;\n</code></pre>The hashchange event fires when a window's hash changes (see location.hash).	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange
WindowEventHandlers.onlanguagechange	A										<pre><code>object.onlanguagechange = function;\n</code></pre>The WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement, or an HTMLIFrameElement. Such an event is sent by the browser to inform that the preferred languages list has been updated. The list is accessible via NavigatorLanguage.languages.	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange
WindowEventHandlers.onpopstate	A										<pre><code>window.onpopstate = funcRef;\n</code></pre>An event handler for the popstate event on the window.	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
WindowEventHandlers.onrejectionhandled	A										<pre><code>window.addEventListener("rejectionhandled", function(event) { ... });\nwindow.onrejectionhandled = function(event) { ...};</code></pre>The Window.onrejectionhandled property is an event handler for processing rejectionhandled events, which are raised when Promise s are rejected.	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled
WindowEventHandlers.onstorage	A										<pre><code>windowObj.onstorage = function() { ... };</code></pre>The WindowEventHandlers.onstorage property contains an event handler that runs when the storage event fires. This occurs when a storage area is changed (e.g. a new item is stored.)	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage
WindowEventHandlers.onunhandledrejection	A										<pre><code>window.addEventListener("unhandledrejection", function(event) { ... });\nwindow.onunhandledrejection = function(event) { ...};</code></pre>The Window.onunhandledrejection property is an event handler for processing unhandledrejection events, which are raised for unhandled Promise rejections.	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection
WindowEventHandlers.onunload	A										<pre><code>window.onunload = funcRef;\n</code></pre>The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs.	https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload
WindowTimers	A										WindowTimers is a mixin used to provide utility methods which set and clear timers. No objects of this type exist; instead, its methods are available on Window for the standard browsing scope, or on WorkerGlobalScope for workers.	https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers
WindowTimers.clearInterval()	A										<pre><code>window.clearInterval(intervalID)\n</code></pre>Cancels a timed, repeating action which was previously established by a call to setInterval().	https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval
WindowTimers.clearTimeout()	A										<pre><code>window.clearTimeout(timeoutID)\n</code></pre>Cancels a timeout previously established by calling setTimeout().	https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout
WindowTimers.setInterval()	A										<pre><code>var intervalID = window.setInterval(func, delay[, param1, param2, ...]);\nvar intervalID = window.setInterval(code, delay);\n</code></pre>Repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. Returns an intervalID.	https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval
WindowTimers.setTimeout()	A										<pre><code>var timeoutID = window.setTimeout(func[, delay, param1, param2, ...]);\nvar timeoutID = window.setTimeout(code[, delay]);\n</code></pre>Sets a timer which executes a function or specified piece of code once after the timer expires.	https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout
Worker	A										The Worker interface of the Web Workers API represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.	https://developer.mozilla.org/en-US/docs/Web/API/Worker
Worker.onmessage	A										<pre><code>myWorker.onmessage = function(e) { ... }</code></pre>The onmessage property of the Worker interface represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker's parent receives a message (i.e. from the DedicatedWorkerGlobalScope.postMessage method.	https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage
Worker.postMessage()	A										<pre><code>myWorker.postMessage(aMessage, transferList);</code></pre>The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.	https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage
Worker.terminate()	A										<pre><code>myWorker.terminate();</code></pre>The terminate() method of the Worker interface immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once.	https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate
Worker()	A										<pre><code>var myWorker = new Worker("aURL");</code></pre>The Worker() constructor creates a Worker object that executes the script at the specified URL. This script must obey the same-origin policy.	https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker
WorkerGlobalScope.caches	A										<pre><code>var myCacheStorage = self.caches; // or just caches\n</code></pre>The caches read-only property of the WorkerGlobalScope interface returns the CacheStorage object associated with the current worker context. This object enables service worker functionality such as storing assets for offline use, and generating custom responses to requests.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/caches
WorkerGlobalScope.close()	A										<pre><code>self.close();</code></pre>The close() method of the WorkerGlobalScope interface discards any tasks queued in the WorkerGlobalScope 's event loop, effectively closing this particular scope.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/close
WorkerGlobalScope.console	A										<pre><code>var consoleObj = self.console;</code></pre>The console read-only property of the WorkerGlobalScope interface returns a Console object providing access to the browser console for the worker.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/console
WorkerGlobalScope.dump()	A										<pre><code>dump('My message\n');</code></pre>The dump() method of the WorkerGlobalScope interface allows you to write a message to stdout — i.e. in your terminal, in Firefox only. This is the same as Firefox's window.dump, but for workers.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/dump
WorkerGlobalScope.importScripts()	A										<pre><code>self.importScripts('foo.js');\nself.importScripts('foo.js', 'bar.js', ...);</code></pre>The importScripts() method of the WorkerGlobalScope interface synchronously imports one or more scripts into the worker's scope.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts
WorkerGlobalScope.location	A										<pre><code>var locationObj = self.location;</code></pre>The location read-only property of the WorkerGlobalScope interface returns the WorkerLocation associated with the worker. It is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location
WorkerGlobalScope.navigator	A										<pre><code>var navigatorObj = self.navigator;</code></pre>The navigator read-only property of the WorkerGlobalScope interface returns the WorkerNavigator associated with the worker. It is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator
WorkerGlobalScope.onclose	A										<pre><code>self.onclose = function() { ... };</code></pre>The onclose property of the WorkerGlobalScope interface represents an EventHandler to be called when the close event occurs and bubbles through the Worker.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onclose
WorkerGlobalScope.onerror	A										<pre><code>self.onerror = function() { ... };</code></pre>The onerror property of the WorkerGlobalScope interface represents an EventHandler to be called when the error event occurs and bubbles through the Worker.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onerror
WorkerGlobalScope.onlanguagechange	A										<pre><code>self.onlanguagechange = function() { ... };</code></pre>The onlanguagechange property of the WorkerGlobalScope interface represents an EventHandler to be called when the languagechange event occurs and bubbles through the Worker.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onlanguagechange
WorkerGlobalScope.onoffline	A										<pre><code>self.onoffline = function() { ... };</code></pre>The onoffline property of the WorkerGlobalScope interface represents an EventHandler to be called when the offline event occurs and bubbles through the Worker.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onoffline
WorkerGlobalScope.ononline	A										<pre><code>self.ononline = function() { ... };</code></pre>The ononline property of the WorkerGlobalScope interface represents an EventHandler to be called when the online event occurs and bubbles through the Worker.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/ononline
WorkerGlobalScope.performance	A										<pre><code>var perfObj = self.performance;\n</code></pre>The performance read-only property of the WorkerGlobalScope interface returns a Performance object to be used on the worker.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/performance
WorkerGlobalScope.self	A										<pre><code>var selfRef = self;</code></pre>The self read-only property of the WorkerGlobalScope interface returns a reference to the WorkerGlobalScope itself. Most of the time it is a specific scope like DedicatedWorkerGlobalScope, SharedWorkerGlobalScope, or ServiceWorkerGlobalScope.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self
WorkerLocation	A										The WorkerLocation interface defines the absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling window.self.location.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation
WorkerNavigator	A										The WorkerNavigator interface represents a subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator
WorkerNavigator.permissions	A										<pre><code>permissionsObj = self.permissions\n</code></pre>The WorkerNavigator.permissions read-only property returns a Permissions object that can be used to query and update permission status of APIs covered by the Permissions API.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/permissions
WorkerNavigator.sendBeacon()	A										<pre><code>self.navigator.sendBeacon(url, data);\n</code></pre>The NavigatorWorker.sendBeacon() method can be used to asynchronously transfer a small amount of data over HTTP from a worker to a web server. This is functionally equivalent to the Navigator.sendBeacon() method; see that article for additional details on what this method can be used for and why.	https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/sendBeacon
XMLDocument	A										The XMLDocument interface represent an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.	https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument
XMLDocument.load()	A										document.load() is a part of an old version of the W3C DOM Level 3 Load & Save module. Can be used with document.async to indicate whether the request is synchronous or asynchronous (the default). As of at least Gecko 1.9, this no longer supports cross-site loading of documents (Use XMLHttpRequest instead).	https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument/load
XMLHttpRequest	A										XMLHttpRequest is an API that provides client functionality for transferring data between a client and a server. It provides an easy way to retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just a part of the page without disrupting what the user is doing.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
XMLHttpRequest.abort()	A										<pre><code>xhrInstance.abort();</code></pre>The XMLHttpRequest.abort() method aborts the request if it has already been sent. When a request is aborted, its readyState is set to 0 (UNSENT), but the readystatechange event is not fired.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort
XMLHttpRequest.channel	A										XMLHttpRequest.channel is an nsIChannel that used by the object when performing the request. This is null if the channel hasn't been created yet. In the case of a multi-part request, this is the initial channel, not the different parts in the multi-part request. Requires elevated privileges to access.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/channel
XMLHttpRequest.getAllResponseHeaders()	A										<pre><code>var headers = request.getAllResponseHeaders();</code></pre>The XMLHttpRequest.getAllResponseHeaders() method returns all the response headers, separated by CRLF, as a string, or null if no response has been received.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
XMLHttpRequest.getResponseHeader()	A										<pre><code>var myHeader = getResponseHeader(name);</code></pre>The XMLHttpRequest.getResponseHeader() method returns the string containing the text of the specified header. If there are multiple response headers with the same name, then their values are returned as a single concatenated string, where each value is separated from the previous one by a pair of comma and space. The getResponseHeader() method returns the value as a UTF byte squence. The search for the header name is case-insensitive.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader
How to check the security state of an XMLHTTPRequest over SSL	A										Here is a an example Javascript function that prints the security details of an XMLHTTPRequest sent over SSL. The function is passed the channel property of an XMLHTTPRequest to extract the following information:	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/How_to_check_the_secruity_state_of_an_XMLHTTPRequest_over_SSL
HTML in XMLHttpRequest	A										The W3C XMLHttpRequest specification adds HTML parsing support to XMLHttpRequest, which originally supported only XML parsing. This feature allows Web apps to obtain an HTML resource as a parsed DOM using XMLHttpRequest.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/HTML_in_XMLHttpRequest
XMLHttpRequest.init	A										Initializes the object for use from C++ code.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/init
XMLHttpRequest.mozAnon	A										XMLHttpRequest.mozAnon is a boolean. If true, the request will be sent without cookie and authentication headers.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozAnon
XMLHttpRequest.mozBackgroundRequest	A										XMLHttpRequest.mozBackgroundRequest is a boolean. Indicates whether or not the object represents a background service request. If true, no load group is associated with the request, and security dialogs are prevented from being shown to the user.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozBackgroundRequest
XMLHttpRequest.mozResponseArrayBuffer	A										Is an ArrayBuffer. The response to the request, as a JavaScript typed array. This is NULL if the request was not successful, or if it hasn't been sent yet.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozResponseArrayBuffer
XMLHttpRequest.mozSystem	A										XMLHttpRequest is a boolean. If true, the same origin policy will not be enforced on the request.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozSystem
XMLHttpRequest.multipart	A										Is a boolean. This Gecko-only feature was removed in Firefox/Gecko 22. Please use Server-Sent Events, Web Sockets, or responseText from progress events instead.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/multipart
XMLHttpRequest.onreadystatechange	A										<pre><code>XMLHttpRequest.onreadystatechange = callback;</code></pre>An EventHandler that is called whenever the readyState attribute changes. The callback is called from the user interface thread. The XMLHttpRequest.onreadystatechange property contains the event handler to be called when the readystatechange event is fired, that is every time the readyState property of the XMLHttpRequest changes. The callback is called from the user interface thread.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange
XMLHttpRequest.open()	A										The XMLHttpRequest.open() method initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest() instead.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open
XMLHttpRequest.openRequest()	A										Initializes a request. This method is to be used from native code; to initialize a request from JavaScript code, use open() instead. See the documentation for open().	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/openRequest
XMLHttpRequest.overrideMimeType()	A										<pre><code>// Needs content</code></pre>The XMLHttpRequest.overrideMimeType() method overrides the MIME type returned by the server. This may be used, for example, to force a stream to be treated and parsed as text/xml, even if the server does not report it as such. This method must be called before send().	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType
XMLHttpRequest.readyState	A										The XMLHttpRequest.readyState property returns the state an XMLHttpRequest client is in. An XHR client exists in one of the following states:	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState
XMLHttpRequest.response	A										The XMLHttpRequest.response property returns the response's body. It can be of the type ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending of the value of XMLHttpRequest.responseType property. Value of response is null if the request is not complete or was not successful. However, if the value of responseType was set to "text" or the empty string, response can contain the partial text response while the request is still in the loading state.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response
XMLHttpRequest.responseText	A										The XMLHttpRequest.responseText property returns a DOMString that contains the response to the request as text, or null if the request was unsuccessful or has not yet been sent. The responseText property will have the partial response as it arrives even before the request is complete. If responseType is set to anything other than the empty string or "text", accessing responseText will throw InvalidStateError exception.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText
XMLHttpRequest.responseType	A										The XMLHttpRequest.responseType property is an enumerated value that returns the type of the response. It also lets the author change the response type to one "arraybuffer", "blob", "document", "json", or "text". If an empty string is set as the value of responseType, it is assumed as type "text".	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType
XMLHttpRequest.responseURL	A										The XMLHttpRequest.responseURL property returns the serialized URL of the response or the empty string if the URL is null. If the URL is returned, URL fragment if present in the URL will be stripped away. The value of responseURL will be the final URL obtained after any redirects.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL
XMLHttpRequest.responseXML	A										The XMLHttpRequest.responseXML property returns a Document containing the response to the request, or null if the request was unsuccessful, has not yet been sent, or cannot be parsed as XML or HTML. The response is parsed as if it were a text/xml stream. When the responseType is set to "document" and the request has been made asynchronously, the response is parsed as a text/html stream. responseXML is null for data: URLs.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML
XMLHttpRequest.send()	A										<pre><code>void send();\nvoid send(ArrayBuffer data);\nvoid send(ArrayBufferView data);\nvoid send(Blob data);\nvoid send(Document data);\nvoid send(DOMString? data);\nvoid send(FormData data);</code></pre>The XMLHttpRequest.send() method sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent. If the request is synchronous, this method doesn't return until the response has arrived. send() accepts an optional argument for the request body. If the request method is GET or HEAD, the argument is ignored and request body is set to null.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send
XMLHttpRequest.sendAsBinary()	A										The XMLHttpRequest.sendAsBinary() method is a variant of the send() method that sends binary data.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/sendAsBinary
Sending and Receiving Binary Data	A										The r esponseType property of the XMLHttpRequest object can be set to change the expected response type from the server. Possible values are the empty string (default), "arraybuffer", "blob", "document", "json", and "text". The response property will contain the entity body according to responseType, as an ArrayBuffer, Blob, Document, JSON, or string. This is null if the request is not complete or was not successful.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data
XMLHttpRequest.setRequestHeader()	A										The XMLHttpRequest.setRequestHeader() method sets the value of an HTTP request header. You must call setRequestHeader() after open(), but before send(). If this method is called several times with the same header, the values are merged into one single request header.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader
XMLHttpRequest.status	A										The XMLHttpRequest.status property returns the numerical status code of the response of the XMLHttpRequest. status will be an unsigned short. Before the request is complete, the value of status will be 0. It is worth noting that browsers report a status of 0 in case of XMLHttpRequest errors too.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status
XMLHttpRequest.statusText	A										The XMLHttpRequest.statusText property returns a DOMString containing the response's status message as returned by the HTTP server. Unlike XMLHTTPRequest.status which indicates a numerical status code, this property contains the text of the response status, such as "OK" or "Not Found". If the request's readyState is in UNSENT or OPENED state, the value of statusText will be an empty string.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText
Synchronous and asynchronous requests	A										XMLHttpRequest supports both synchronous and asynchronous communications. In general, however, asynchronous requests should be preferred to synchronous requests for performance reasons.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests
XMLHttpRequest.timeout	A										The XMLHttpRequest.timeout property is an unsigned long representing the number of milliseconds a request can take before automatically being terminated. The default value is 0, which means there is no timeout. Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a document environment or it will throw an InvalidAccessError exception. When a timeout happens, a timeout event is fired.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout
XMLHttpRequest.upload	A										The XMLHttpRequest.upload property returns an XMLHttpRequestUpload object, representing the upload process. It is an opaque object, but being an XMLHttpRequestEventTarget, event listeners can be set on it to track its process.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload
Using XMLHttpRequest	A										XMLHttpRequest makes sending HTTP requests very easy.  You simply create an instance of the object, open a URL, and send the request.  The HTTP status of the result, as well as the result's contents, are available in the request object when the transaction is completed. This page outlines some of the common, and even slightly obscure, use cases for this powerful JavaScript object.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest
Using XMLHttpRequest in IE6	A										XMLHttpRequest was first introduced by Microsoft in Internet Explorer 5.0 as an ActiveX control. However, in IE7 and other browsers XMLHttpRequest is a native JavaScript object.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest_in_IE6
XMLHttpRequest.withCredentials	A										The XMLHttpRequest.withCredentials property is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates. Setting withCredentials has no effect on same-site requests.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials
XMLHttpRequest()	A										<pre><code>var myRequest = new XMLHttpRequest();\n</code></pre>For details about how to use XMLHttpRequest, see Using XMLHttpRequest.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest
init()	A										Initializes the object for use from C++ code.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest.init()
XMLHttpRequestEventTarget	A										XMLHttpRequestEventTarget is the interface that describes the event handlers you can implement in an object that will handle events for an XMLHttpRequest.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget
XMLHttpRequestEventTarget.onabort	A										<pre><code>XMLHttpRequest.onabort = callback;</code></pre>The XMLHttpRequestEventTarget.onabort is the function called when an XMLHttpRequest transaction is aborted, such as when the XMLHttpRequest.abort() function is called.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onabort
XMLHttpRequestEventTarget.onerror	A										<pre><code>XMLHttpRequest.onerror = callback;</code></pre>The XMLHttpRequestEventTarget.onerror is the function called when an XMLHttpRequest transaction fails due to an error.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onerror
XMLHttpRequestEventTarget.onload	A										<pre><code>XMLHttpRequest.onload = callback;</code></pre>The XMLHttpRequestEventTarget.onload is the function called when an XMLHttpRequest transaction completes successfully.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onload
XMLHttpRequestEventTarget.onloadstart	A										<pre><code>XMLHttpRequest.onloadstart = callback;</code></pre>The XMLHttpRequestEventTarget.onloadstart is the function called when an XMLHttpRequest transaction starts transferring data.	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onloadstart
XMLHttpRequestEventTarget.onprogress	A										<pre><code>XMLHttpRequest.onprogress = callback;</code></pre>The XMLHttpRequestEventTarget.onprogress is the function called periodically with information when an XMLHttpRequest before success completely .	https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress
XMLSerializer	A										For more information about using XMLSerializer in Firefox extensions, please see the documentation for nsIDOMSerializer.	https://developer.mozilla.org/en-US/docs/Web/API/XMLSerializer
XPathExpression	A										An XPathExpression is a compiled XPath query returned from document.createExpression(). It has a method evaluate() which can be used to execute the compiled XPath.	https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression
XPathResult	A										Returns an XPathResult based on an XPath expression and other given parameters.	https://developer.mozilla.org/en-US/docs/Web/API/XPathResult
XSLTProcessor	A										<pre><code>new XSLTProcessor()</code></pre>An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate xsl:param parameter values, and to apply the transformation to documents.	https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor
XSLT Basic Example	A										This first example demonstrates the basics of setting up an XSLT transformation in a browser. The example will take an XML document that contains information (title, list of authors and body text) about an article and present it in an human readable form.	https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/Basic_Example
Browser Differences	A										Netscape 7.x (all platforms) and Internet Explorer 6 (Windows) support the W3C XSLT 1.0 standard (http://www.w3.org/TR/xslt). IE 5.0 and 5.5 (both Windows) supported only the working draft of XSLT, and thus are not compatible with XSLT 1.0 stylesheets. Netscape 6.x only partially supported XSLT 1.0.	https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/Browser_Differences
Generating HTML	A										One common application of XSLT in the browser is to transform XML into HTML on the client. The second example will transform the input document (example2.xml), which again contains information about an article, into an HTML document.	https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/Generating_HTML
Introduction	A										One noticeable trend in W3C standards has been the effort to separate content from style. This would allow the same style to be reused for multiple content, as well as simplify maintenance and allow a quick (only modify one file) way to change the look of content.	https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/Introduction
XSL Transformations in Mozilla FAQ	A										Make sure the mime type for both source and stylesheet are set to an XML mimetype, namely text/xml or application/xml. The XSLT namespace is http://www.w3.org/1999/XSL/Transform. Use the ?xml-stylesheet ? processing instruction instead of the non-standard xml:stylesheet. The most common cause is the MIME type handling. To find out which MIME type your server sends, look at Page Info, use extensions like LiveHTTPHeaders or a download manager like wget. Mozilla won't load XSLT stylesheets from a different domain for security reasons.	https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/XSL_Transformations_in_Mozilla_FAQ
Classes	A										JavaScript classes are introduced in ECMAScript 6 are syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax is not introducing a new object-oriented inheritance model to JavaScript. JavaScript classes provide a much simpler and clearer syntax to create objects and deal with inheritance.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
constructor	A										<pre><code>constructor([arguments]) { ... }</code></pre>The constructor method is a special method for creating and initializing an object created with a class.\nThere can only be one special method with the name "constructor" in a class. A SyntaxError will be thrown, if the class contains more than one occurrence of a constructor method.\n<pre><code>class Square extends Polygon {\n  constructor(length) {\n    // Here, it calls the parent class' constructor with lengths\n    // provided for the Polygon's width and height\n    super(length, length);\n    // Note: In derived classes, super() must be called before you\n    // can use 'this'. Leaving this out will cause a reference error.\n    this.name = 'Square';\n  }\n\n  get area() {\n    return this.height * this.width;\n  }\n\n  set area(value) {\n    this.area = value;\n  } \n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor
extends	A										<pre><code>class ChildClass extends ParentClass { ... }</code></pre>The extends keyword is used in a class declarations or class expressions to create a class with a child of another class.\nThe extends keyword can be used to subclass custom classes as well as built-in objects.\n<pre><code>class Square extends Polygon {\n  constructor(length) {\n    // Here, it calls the parent class' constructor with lengths\n    // provided for the Polygon's width and height\n    super(length, length);\n    // Note: In derived classes, super() must be called before you\n    // can use 'this'. Leaving this out will cause a reference error.\n    this.name = 'Square';\n  }\n\n  get area() {\n    return this.height * this.width;\n  }\n\n  set area(value) {\n&#160;   this.height = this.width = Math.sqrt(value);\n    this.area = value;\n  } \n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends
static	A										<pre><code>static methodName() { ... }</code></pre>The static keyword defines a static method for a class.\nStatic methods are called without instantiating their class and&#160;are also not&#160;callable when the class is instantiated. Static methods are often used to create utility functions for an application.\n<pre><code>class StaticMethodCall {\n    static staticMethod() {\n        return 'Static method has been called';\n    }\n    static anotherStaticMethod() {\n        return this.staticMethod() + ' from another static method';\n    }\n}\nStaticMethodCall.staticMethod(); \n// 'Static method has been called'\n\nStaticMethodCall.anotherStaticMethod(); \n// 'Static method has been called from another static method'</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static
JavaScript error reference	A										Errors, errors everywhere.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors
Warning: -file- is being assigned a //# sourceMappingURL, but already has one	A										A source map has been specified more than once for a given JavaScript source.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Already_has_pragma
warning -file- is being assigned a //# sourcemappingurl but already has one	R	Warning: -file- is being assigned a //# sourceMappingURL, but already has one										
TypeError: invalid Array.prototype.sort argument	A										<pre><code>Invalid Cases:\nValid Cases:\n[1, 3, 2].sort();   // [1, 2, 3]\n\n\nvar cmp = { asc: (x, y) => x >= y, dsc : (x, y) => x <= y };\n[1, 3, 2].sort(cmp[this.key || 'asc']); // [1, 2, 3]\nValid Cases:\n[1, 3, 2].sort();   // [1, 2, 3]\n\n\nvar cmp = { asc: (x, y) => x >= y, dsc : (x, y) => x <= y };\n[1, 3, 2].sort(cmp[this.key || 'asc']); // [1, 2, 3]</code></pre>The argument of Array.prototype.sort() is expected to be either undefined or a function which compares its operands.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Array_sort_argument
typeerror invalid array prototype sort argument	R	TypeError: invalid Array.prototype.sort argument										
SyntaxError: "x" is not a legal ECMA-262 octal constant	A										Decimal literals can start with a zero (0) followed by another decimal digit, but If all digits after the leading 0 are smaller than 8, the number is interpreted as an octal number. Because this is not the case with 08 and 09, JavaScript warns about it.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal
syntaxerror x is not a legal ecma-262 octal constant	R	SyntaxError: "x" is not a legal ECMA-262 octal constant										
RangeError: radix must be an integer	A										<pre><code>Invalid Cases:\nValid Cases:\n(42).toString(2);     // "101010" (binary)\n(13).toString(8);     // "15"     (octal)\n(0x42).toString(10);  // "66"     (decimal)\n(100000).toString(16) // "186a0"  (hexadecimal)\n\nValid Cases:\n(42).toString(2);     // "101010" (binary)\n(13).toString(8);     // "15"     (octal)\n(0x42).toString(10);  // "66"     (decimal)\n(100000).toString(16) // "186a0"  (hexadecimal)\n</code></pre>The optional radix parameter with the Number.prototype.toString() method has been used. This parameter must be an integer (a number) between 2 and 36 specifying the base of the number system to be used for representing numeric values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_radix
rangeerror radix must be an integer	R	RangeError: radix must be an integer										
SyntaxError: return not in function	A										A return or yield statement is called outside of a function. Maybe there are missing curly brackets somewhere? The return and yield statements must be in a function, because they end (or pause and resume) function execution and specify a value to be returned to the function caller.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield
syntaxerror return not in function	R	SyntaxError: return not in function										
TypeError: property "x" is non-configurable and can't be deleted	A										It was attempted to delete a property, but that property is non-configurable. The configurable attribute controls whether the property can be deleted from the object and whether its attributes (other than writable) can be changed.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cant_delete
typeerror property x is non-configurable and can't be deleted	R	TypeError: property "x" is non-configurable and can't be deleted										
ReferenceError: deprecated caller or arguments usage	A										In strict mode, the Function.caller or Function.arguments properties are used and shouldn't be. They are deprecated, because they leak the function caller, are non-standard, hard to optimize and potentially a performance-harmful feature.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage
referenceerror deprecated caller or arguments usage	R	ReferenceError: deprecated caller or arguments usage										
SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead	A										There is a deprecated source map syntax in a JavaScript source.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma
syntaxerror using //@ to indicate sourceurl pragmas is deprecated use //# instead	R	SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead										
SyntaxError: test for equality (==) mistyped as assignment (=)?	A										There was an assignment (=) when you would normally expect a test for equality (==). To help debugging, JavaScript (with strict warnings enabled) warns about this pattern.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Equal_as_assign
syntaxerror test for equality (==) mistyped as assignment (=)?	R	SyntaxError: test for equality (==) mistyped as assignment (=)?										
Warning: JavaScript 1.6's for-each-in loops are deprecated	A										JavaScript 1.6's for each (variable in obj) statement is deprecated, and will be removed in the near future.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/For-each-in_loops_are_deprecated
warning javascript 1.6's for-each-in loops are deprecated	R	Warning: JavaScript 1.6's for-each-in loops are deprecated										
RangeError: invalid array length	A										<pre><code>Invalid Cases:\nValid Cases:\n[ Math.pow(2, 40) ]                     // [ 1099511627776 ]\n[ -1 ]                                  // [ -1 ]\nnew ArrayBuffer(Math.pow(2, 32) - 1)\nnew ArrayBuffer(0)\n\nlet a = [];\na.length = Math.max(0, a.length - 1);\n\nlet b = new Array(Math.pow(2, 32) - 1);\nb.length = Math.min(0xffffffff, b.length + 1);   \n\n// 0xffffffff is the hexadecimal notation for 2^32 - 1\n// which can also be written as (-1 >>> 0)\n\nValid Cases:\n[ Math.pow(2, 40) ]                     // [ 1099511627776 ]\n[ -1 ]                                  // [ -1 ]\nnew ArrayBuffer(Math.pow(2, 32) - 1)\nnew ArrayBuffer(0)\n\nlet a = [];\na.length = Math.max(0, a.length - 1);\n\nlet b = new Array(Math.pow(2, 32) - 1);\nb.length = Math.min(0xffffffff, b.length + 1);   \n\n// 0xffffffff is the hexadecimal notation for 2^32 - 1\n// which can also be written as (-1 >>> 0)\n</code></pre>An invalid array length might appear in these situations:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
rangeerror invalid array length	R	RangeError: invalid array length										
ReferenceError: invalid assignment left-hand side	A										There was an unexpected assignment somewhere. This might be due to a mismatch of a assignment operator and a comparison operator, for example. While a single "=" sign assigns a value to a variable, the "==" or "===" operators compare a value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side
referenceerror invalid assignment left-hand side	R	ReferenceError: invalid assignment left-hand side										
SyntaxError: JSON.parse: bad parsing	A										JSON.parse() parses a string as JSON. This string has to be valid JSON and will throw this error if incorrect syntax was encountered.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse
syntaxerror json parse bad parsing	R	SyntaxError: JSON.parse: bad parsing										
SyntaxError: Malformed formal parameter	A										<pre><code>Invalid Cases:\nValid Cases:\nvar f = Function("x, y", "return x + y;");  // correctly punctuated\n\nvar f = Function("x", "return x;");\n\n// if you can, avoid using Function - this is much faster\nvar f = function (x) { return x; };\n\nValid Cases:\nvar f = Function("x, y", "return x + y;");  // correctly punctuated\n\nvar f = Function("x", "return x;");\n\n// if you can, avoid using Function - this is much faster\nvar f = function (x) { return x; };\n</code></pre>There is a Function() constructor with at least two arguments passed in the code. The last argument is the source code for the new function you're creating. All the rest make up your new function's argument list.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter
syntaxerror malformed formal parameter	R	SyntaxError: Malformed formal parameter										
SyntaxError: missing ] after element list	A										There is an error with the array initializer syntax somewhere. Likely there is a closing bracket ("]") or a comma (",") missing.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list
syntaxerror missing ] after element list	R	SyntaxError: missing ] after element list										
SyntaxError: missing } after property list	A										There is a mistake in the object initializer syntax somewhere. Might be in fact a missing curly bracket, but could also be a missing comma, for example. Also check if any closing curly brackets or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list
syntaxerror missing } after property list	R	SyntaxError: missing } after property list										
SyntaxError: missing ) after argument list	A										There is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string, for example.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list
syntaxerror missing ) after argument list	R	SyntaxError: missing ) after argument list										
SyntaxError: missing ; before statement	A										There is a semicolon (;) missing somewhere. JavaScript statements must be terminated with semicolons. Some of them are affected by automatic semicolon insertion (ASI), but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement
syntaxerror missing ; before statement	R	SyntaxError: missing ; before statement										
TypeError: More arguments needed	A										There is an error with how a function is called. More arguments need to be provided.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/More_arguments_needed
typeerror more arguments needed	R	TypeError: More arguments needed										
RangeError: repeat count must be non-negative	A										<pre><code>Invalid Cases:\nValid Cases:\n'abc'.repeat(0);    // ''\n'abc'.repeat(1);    // 'abc'\n'abc'.repeat(2);    // 'abcabc'\n'abc'.repeat(3.5);  // 'abcabcabc' (count will be converted to integer)\n\nValid Cases:\n'abc'.repeat(0);    // ''\n'abc'.repeat(1);    // 'abc'\n'abc'.repeat(2);    // 'abcabc'\n'abc'.repeat(3.5);  // 'abcabcabc' (count will be converted to integer)\n</code></pre>The String.prototype.repeat() method has been used. It has a count parameter indicating the number of times to repeat the string. It must be between 0 and less than positive Infinity and cannot be a negative number. The range of allowed values can be described like this: [0, +&#8734;).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count
rangeerror repeat count must be non-negative	R	RangeError: repeat count must be non-negative										
RangeError: argument is not a valid code point	A										<pre><code>Invalid Cases:\nValid Cases:\nString.fromCodePoint(42);       // "*"\nString.fromCodePoint(65, 90);   // "AZ"\nString.fromCodePoint(0x404);    // "\u0404"\nString.fromCodePoint(0x2F804);  // "\uD87E\uDC04"\nString.fromCodePoint(194564);   // "\uD87E\uDC04"\nString.fromCodePoint(0x1D306, 0x61, 0x1D307) // "\uD834\uDF06a\uD834\uDF07"\n\nValid Cases:\nString.fromCodePoint(42);       // "*"\nString.fromCodePoint(65, 90);   // "AZ"\nString.fromCodePoint(0x404);    // "\u0404"\nString.fromCodePoint(0x2F804);  // "\uD87E\uDC04"\nString.fromCodePoint(194564);   // "\uD87E\uDC04"\nString.fromCodePoint(0x1D306, 0x61, 0x1D307) // "\uD834\uDF06a\uD834\uDF07"\n</code></pre>The String.fromCodePoint() method accepts valid code points only.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint
rangeerror argument is not a valid code point	R	RangeError: argument is not a valid code point										
TypeError: "x" is not a constructor	A										<pre><code>Invalid Cases:\n\n</code></pre>There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See constructor or the new operator for more information on what a constructor is.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor
typeerror x is not a constructor	R	TypeError: "x" is not a constructor										
TypeError: "x" is not a function	A										It was attempted to call a value like a function, but the value is not actually a function. Some code expects you to provide a function, but that didn't happen.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function
typeerror x is not a function	R	TypeError: "x" is not a function										
ReferenceError: "x" is not defined	A										There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need make sure it is available in your current script or scope.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined
referenceerror x is not defined	R	ReferenceError: "x" is not defined										
TypeError: "x" has no properties	A										Both, null and undefined, have no properties you could access.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_properties
typeerror x has no properties	R	TypeError: "x" has no properties										
RangeError: precision is out of range	A										<pre><code>Invalid Cases:\nValid Cases:\n77.1234.toExponential(4); // 7.7123e+1\n77.1234.toExponential(2); // 7.71e+1\n\n2.34.toFixed(1); // 2.3\n2.35.toFixed(1); // 2.4 (note that it rounds up in this case)\n\n5.123456.toPrecision(5); // 5.1235\n5.123456.toPrecision(2); // 5.1\n5.123456.toPrecision(1); // 5\n\nValid Cases:\n77.1234.toExponential(4); // 7.7123e+1\n77.1234.toExponential(2); // 7.71e+1\n\n2.34.toFixed(1); // 2.3\n2.35.toFixed(1); // 2.4 (note that it rounds up in this case)\n\n5.123456.toPrecision(5); // 5.1235\n5.123456.toPrecision(2); // 5.1\n5.123456.toPrecision(1); // 5\n</code></pre>There was an out of range precision argument in one of these methods:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Precision_range
rangeerror precision is out of range	R	RangeError: precision is out of range										
Error: Permission denied to access property "x"	A										There was attempt to access an object for which you have no permission. This is likely an &lt;iframe&gt; element loaded from a different domain for which you violated the same-origin policy.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Property_access_denied
error permission denied to access property x	R	Error: Permission denied to access property "x"										
TypeError: "x" is read-only	A										<pre><code>Invalid Cases:\nValid Cases:\n"use strict";\nvar obj = Object.freeze({name: "Score", points: 157});\nobj = {name: obj.name, points: 0};   // replacing it with a new object works\n\n"use strict";\nvar LUNG_COUNT = 2;  // a `var` works, because it's not read-only\nLUNG_COUNT = 3;  // ok (anatomically unlikely, though)\n\nValid Cases:\n"use strict";\nvar obj = Object.freeze({name: "Score", points: 157});\nobj = {name: obj.name, points: 0};   // replacing it with a new object works\n\n"use strict";\nvar LUNG_COUNT = 2;  // a `var` works, because it's not read-only\nLUNG_COUNT = 3;  // ok (anatomically unlikely, though)\n</code></pre>The global variable or object property that was assigned to is a read-only property. (Technically, it is a non-writable data property.)	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Read-only
typeerror x is read-only	R	TypeError: "x" is read-only										
SyntaxError: redeclaration of formal parameter "x"	A										The same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again. Redeclaring the same variable within the same function or block scope using let is not allowed in JavaScript.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter
syntaxerror redeclaration of formal parameter x	R	SyntaxError: redeclaration of formal parameter "x"										
RangeError: repeat count must be less than infinity	A										<pre><code>Invalid Cases:\nValid Cases:\n'abc'.repeat(0);    // ''\n'abc'.repeat(1);    // 'abc'\n'abc'.repeat(2);    // 'abcabc'\n'abc'.repeat(3.5);  // 'abcabcabc' (count will be converted to integer)\n\nValid Cases:\n'abc'.repeat(0);    // ''\n'abc'.repeat(1);    // 'abc'\n'abc'.repeat(2);    // 'abcabc'\n'abc'.repeat(3.5);  // 'abcabcabc' (count will be converted to integer)\n</code></pre>The String.prototype.repeat() method has been used. It has a count parameter indicating the number of times to repeat the string. It must be between 0 and less than positive Infinity and cannot be a negative number. The range of allowed values can be described like this: [0, +&#8734;).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large
rangeerror repeat count must be less than infinity	R	RangeError: repeat count must be less than infinity										
Warning: unreachable code after return statement	A										<pre><code>Invalid Cases:\nValid Cases:\nfunction f() {\n  var x = 3;\n  x += 4;\n  x -= 3;\n  return x;  // OK: return after all other statements\n}\n\nfunction f() {\n  return 3 + 4  // OK: semicolon-less return with expression on the same line\n}\n\nValid Cases:\nfunction f() {\n  var x = 3;\n  x += 4;\n  x -= 3;\n  return x;  // OK: return after all other statements\n}\n\nfunction f() {\n  return 3 + 4  // OK: semicolon-less return with expression on the same line\n}\n</code></pre>Unreachable code after a return statement might occur in these situations:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return
warning unreachable code after return statement	R	Warning: unreachable code after return statement										
InternalError: too much recursion	A										A function that calls itself is called a recursive function. In some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case). When there is too much or infinite recursion, JavaScript will throw this error.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion
internalerror too much recursion	R	InternalError: too much recursion										
ReferenceError: assignment to undeclared variable "x"	A										<pre><code>Invalid Cases:\nValid Cases:\nfunction foo() {\n  "use strict";\n  var bar = true;\n}\nfoo();\nValid Cases:\nfunction foo() {\n  "use strict";\n  var bar = true;\n}\nfoo();</code></pre>A value has been assigned to an undeclared variable. In other words, there was an assignment without the var keyword. There are some differences between declared and undeclared variables, which might lead to unexpected results and that's why JavaScript presents an error in strict mode.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var
referenceerror assignment to undeclared variable x	R	ReferenceError: assignment to undeclared variable "x"										
ReferenceError: reference to undefined property "x"	A										<pre><code>Invalid Cases:\nValid Cases:\n"use strict";\n\nvar foo = {};\n\n// Define the bar property\n\nfoo.bar = "moon";\nconsole.log(foo.bar); // "moon"\n\n// Test to be sure bar exists before accessing it\n\nif (foo.hasOwnProperty("bar") {\n  console.log(foo.bar);\n}\nValid Cases:\n"use strict";\n\nvar foo = {};\n\n// Define the bar property\n\nfoo.bar = "moon";\nconsole.log(foo.bar); // "moon"\n\n// Test to be sure bar exists before accessing it\n\nif (foo.hasOwnProperty("bar") {\n  console.log(foo.bar);\n}</code></pre>The script attempted to access an object property which doesn't exist. There are two ways to access properties; see the property accessors reference page to learn more about them.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undefined_prop
referenceerror reference to undefined property x	R	ReferenceError: reference to undefined property "x"										
SyntaxError: Unexpected token	A										A specific language construct was expected, but something else was provided. This might be a simple typo.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_token
syntaxerror unexpected token	R	SyntaxError: Unexpected token										
TypeError: "x" is (not) "y"	A										<pre><code>Invalid Cases:\n\n</code></pre>There was an unexpected type. This occurs oftentimes with undefined or null values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unexpected_type
typeerror x is (not) y	R	TypeError: "x" is (not) "y"										
SyntaxError: unterminated string literal	A										There is an unterminated String somewhere. String literals must be enclosed by single (') or double (") quotes. JavaScript makes no distinction between single-quoted strings and double-quoted strings. Escape sequences work in strings created with either single or double quotes. To fix this error, check if:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal
syntaxerror unterminated string literal	R	SyntaxError: unterminated string literal										
TypeError: variable "x" redeclares argument	A										<pre><code>Invalid Cases:\nValid Cases:\n"use strict";\n\nfunction f(arg) {\n  arg = "foo";\n}\n\nValid Cases:\n"use strict";\n\nfunction f(arg) {\n  arg = "foo";\n}\n</code></pre>The same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again. This might be a naming conflict and thus JavaScript warns about it.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Var_hides_argument
typeerror variable x redeclares argument	R	TypeError: variable "x" redeclares argument										
Functions	A										Generally speaking, a function is a "subprogram" that can be called by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function, and the function will return a value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions
Arguments object	A										<pre><code>arguments</code></pre>The arguments object is an Array -like object corresponding to the arguments passed to a function.\nThe arguments object is a local variable available within all functions. You can refer to a function's arguments within the function by using the arguments object. This object contains an entry for each argument passed to the function, the first entry's index starting at 0. For example, if a function is passed three arguments, you can refer to them as follows:\n<pre><code>arguments[0]\narguments[1]\narguments[2]\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
arguments[@@iterator]()	A										<pre><code>arguments[Symbol.iterator]()</code></pre>The initial value of the @@iterator property is the same function object as the initial value of the Array.prototype.values property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator
arguments.callee	A										The arguments.callee property contains the currently executing function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee
arguments.caller	A										The obsolete arguments.caller property used to provide the function that invoked the currently executing function. This property has been removed and no longer works.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/caller
arguments.length	A										<pre><code>arguments.length</code></pre>The arguments.length property contains the number of arguments passed to the function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length
Arrow functions	A										<pre><code>(param1, param2, &#8230;, paramN) =&gt; { statements }\n(param1, param2, &#8230;, paramN) =&gt; expression\n         // equivalent to:&#160; =&gt; { return expression; }\n\n// Parentheses are optional when there's only one parameter:\n(singleParam) =&gt; { statements }\nsingleParam =&gt; { statements }\n\n// A function with no parameters requires parentheses:\n() =&gt; { statements }</code></pre>An arrow function expression has a shorter syntax compared to function expressions and lexically binds the this value (does not bind its own this, arguments, super, or new.target). Arrow functions are always anonymous. These function expressions are best suited for non-method functions and they can not be used as constructors.\nSee also "ES6 In Depth: Arrow functions" on hacks.mozilla.org.\n<pre><code>var a = [\n  "Hydrogen",\n  "Helium",\n  "Lithium",\n  "Beryl&#173;lium"\n];\n\nvar a2 = a.map(function(s){ return s.length });\n\nvar a3 = a.map( s =&gt; s.length );</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
Default parameters	A										<pre><code>function [name]([param1[ = defaultValue1 ][, ..., paramN[ = defaultValueN ]]]) {\n   statements\n}\n</code></pre>Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed.\nIn JavaScript, parameters of functions default to undefined. However, in some situations it might be useful to set a different default value. This is where default parameters can help.\n<pre><code>function multiply(a, b) {\n  var b = (typeof b !== 'undefined') ?  b : 1;\n\n  return a*b;\n}\n\nmultiply(5); // 5\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters
getter	A										<pre><code>{get prop() { ... } }\n{get [expression]() { ... } }</code></pre>The get syntax binds an object property to a function that will be called when that property is looked up.\nSometimes it is desirable to allow access to a property that returns a dynamically computed value, or you may want to reflect the status of an internal variable without requiring the use of explicit method calls. In JavaScript, this can be accomplished with the use of a getter. It is not possible to simultaneously have a getter bound to a property and have that property actually hold a value, although it is possible to use a getter and a setter in conjunction to create a type of pseudo-property.\n<pre><code>var log = ['test'];\nvar obj = {\n  get latest () {\n    if (log.length == 0) return undefined;\n    return log[log.length - 1]\n  }\n}\nconsole.log (obj.latest); // Will return "test".\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get
Method definitions	A										<pre><code>var obj = {\n  property( parameters&#8230; ) {},\n  *generator( parameters&#8230; ) {},\n// also with computed keys:\n  [property]( parameters&#8230; ) {},\n  *[generator]( parameters&#8230; ) {},\n// compare ES5 getter/setter syntax:\n  get property() {},\n  set property(value) {}\n};\n</code></pre>Starting with ECMAScript 2015 (ES6), a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method's name.\nThe shorthand syntax is similar to the getter and setter syntax introduced in ECMAScript 2015.\n<pre><code>var obj = {\n  foo: function() {},\n  bar: function() {}\n};</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions
Rest parameters	A										<pre><code>function(a, b, ...theArgs) {\n  // ...\n}\n</code></pre>The rest parameter syntax allows us to represent an indefinite number of arguments as an array.\nIf the last named argument of a function is prefixed with ..., it becomes an array whose elements from 0 (inclusive) to theArgs.length&#160;(exclusive) are supplied by the actual arguments passed to the function.\n<pre><code>// Before rest parameters, the following could be found:\nfunction f(a, b){\n  var args = Array.prototype.slice.call(arguments, f.length);\n\n  // &#8230;\n}\n\n// to be equivalent of\n\nfunction f(a, b, ...args) {\n  \n}\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters
setter	A										<pre><code>{set prop(val) { . . . }}\n{set [expression](val) { . . . }}</code></pre>The set syntax binds an object property to a function to be called when there is an attempt to set that property.\nIn JavaScript, a setter can be used to execute a function whenever a specified property is attempted to be changed. Setters are most often used in conjunction with getters to create a type of pseudo-property. It is not possible to simultaneously have a setter on a property that holds an actual value.\n<pre><code>var o = {\n  set current (str) {\n    this.log[this.log.length] = str;\n  },\n  log: []\n}\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set
Array	A										<pre><code>[element0, element1, ..., elementN]\nnew Array(element0, element1[, ...[, elementN]])\nnew Array(arrayLength)</code></pre>The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
Array.prototype[@@iterator]()	A										<pre><code>arr[Symbol.iterator]()</code></pre>The initial value of the @@iterator property is the same function object as the initial value of the values() property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator
get Array[@@species]	A										<pre><code>Array[Symbol.species]\n</code></pre>The Array[@@species] accessor property returns the Array constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species
Array.prototype[@@unscopables]	A										<pre><code>arr[Symbol.unscopables]</code></pre>The @@unscopable symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 (ES6) version. These properties are excluded from with statement bindings.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables
Array.prototype.concat	A										<pre><code>Array.prototype.concat ( [ item1 [ , item2 [ , … ] ] ] )</code></pre>The concat() method returns a new array comprised of the array on which it is called joined with the array(s) and/or value(s) provided as arguments.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat
Array.prototype.copyWithin()	A										<pre><code>arr.copyWithin(target[, start[, end]])</code></pre>The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin
Array.prototype.entries()	A										<pre><code>arr.entries()</code></pre>The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries
Array.prototype.every	A										<pre><code>Array.prototype.every ( callbackfn [ , thisArg ] )</code></pre>The every() method tests whether all elements in the array pass the test implemented by the provided function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every
Array.prototype.fill()	A										<pre><code>arr.fill(value[, start = 0[, end = this.length]])</code></pre>The fill() method fills all the elements of an array from a start index to an end index with a static value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill
Array.prototype.filter	A										<pre><code>Array.prototype.filter ( callbackfn [ , thisArg ] )</code></pre>The filter() method creates a new array with all elements that pass the test implemented by the provided function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
Array.prototype.find()	A										<pre><code>arr.find(callback[, thisArg])</code></pre>The find() method returns a value in the array, if an element in the array satisfies the provided testing function. Otherwise undefined is returned.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
Array.prototype.findIndex()	A										<pre><code>arr.findIndex(callback[, thisArg])</code></pre>The findIndex() method returns an index in the array, if an element in the array satisfies the provided testing function. Otherwise -1 is returned.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
Array.prototype.forEach	A										<pre><code>Array.prototype.forEach ( callbackfn [ , thisArg ] )</code></pre>The forEach() method executes a provided function once per array element.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
Array.from()	A										<pre><code>Array.from(arrayLike[, mapFn[, thisArg]])\n</code></pre>The Array.from() method creates a new Array instance from an array-like or iterable object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from
Array.prototype.includes()	A										<pre><code>var boolean = array.includes(searchElement[, fromIndex])</code></pre>The includes() method determines whether an array includes a certain element, returning true or false as appropriate.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes
Array.prototype.indexOf	A										<pre><code>Array.prototype.indexOf ( searchElement [ , fromIndex ] )</code></pre>The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf
Array.isArray	A										<pre><code>Array.isArray ( arg )</code></pre>The Array.isArray() determines whether the passed value is an Array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray
Array.prototype.join	A										<pre><code>Array.prototype.join (separator)</code></pre>The join() method joins all elements of an array into a string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join
Array.prototype.keys()	A										<pre><code>arr.keys()</code></pre>The keys() method returns a new Array Iterator that contains the keys for each index in the array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys
Array.prototype.lastIndexOf	A										<pre><code>Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</code></pre>The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf
array.length	A										<pre><code>arr.length</code></pre>The length property represents an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length
Array.prototype.map	A										<pre><code>Array.prototype.map ( callbackfn [ , thisArg ] )</code></pre>The map() method creates a new array with the results of calling a provided function on every element in this array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
Array.of()	A										<pre><code>Array.of(element0[, element1[, ...[, elementN]]])</code></pre>The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
Array.prototype.pop	A										<pre><code>Array.prototype.pop ( )</code></pre>The pop() method removes the last element from an array and returns that element.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop
Array.prototype	A										<pre><code>Array.prototype</code></pre>The Array.prototype property represents the prototype for the Array constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype
Array.prototype.push	A										<pre><code>Array.prototype.push ( [ item1 [ , item2 [ , … ] ] ] )</code></pre>The push() method adds one or more elements to the end of an array and returns the new length of the array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push
Array.prototype.reduce	A										<pre><code>Array.prototype.reduce ( callbackfn [ , initialValue ] )</code></pre>The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
Array.prototype.reduceRight	A										<pre><code>Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</code></pre>The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) has to reduce it to a single value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight
Array.prototype.reverse	A										<pre><code>Array.prototype.reverse ( )</code></pre>The reverse() method reverses an array in place. The first array element becomes the last and the last becomes the first.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse
Array.prototype.shift	A										<pre><code>Array.prototype.shift ( )</code></pre>The shift() method removes the first element from an array and returns that element. This method changes the length of the array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift
Array.prototype.slice	A										<pre><code>Array.prototype.slice (start, end)</code></pre>The slice() method returns a shallow copy of a portion of an array into a new array object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
Array.prototype.some	A										<pre><code>Array.prototype.some ( callbackfn [ , thisArg ] )</code></pre>The some() method tests whether some element in the array passes the test implemented by the provided function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some
Array.prototype.sort	A										<pre><code>Array.prototype.sort (comparefn)</code></pre>The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
Array.prototype.splice	A										<pre><code>Array.prototype.splice (start, deleteCount [ , item1 [ , item2 [ , … ] ] ] )</code></pre>The splice() method changes the content of an array by removing existing elements and/or adding new elements.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
Array.prototype.toLocaleString	A										<pre><code>Array.prototype.toLocaleString ( )</code></pre>The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma “,”).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString
Array.prototype.toSource()	A										<pre><code>arr.toSource()</code></pre>The toSource() method returns a string representing the source code of the array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource
Array.prototype.toString	A										<pre><code>Array.prototype.toString ( )</code></pre>The toString() method returns a string representing the specified array and its elements.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString
Array.prototype.unshift	A										<pre><code>Array.prototype.unshift ( [ item1 [ , item2 [ , … ] ] ] )</code></pre>The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift
Array.prototype.values()	A										<pre><code>arr.values()</code></pre>The values() method returns a new Array Iterator object that contains the values for each index in the array.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values
ArrayBuffer	A										<pre><code>new ArrayBuffer(length)\n</code></pre>The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an ArrayBuffer ; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer
Atomics	A										The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics
SIMD.Bool16x8	A										<pre><code>SIMD.Bool16x8(s0, s1, s2, s3, s4, s5, s6, s7);</code></pre>The SIMD.Bool16x8 data type is a 128-bit vector divided into 8 lanes storing boolean values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool16x8
SIMD.Bool32x4	A										<pre><code>SIMD.Bool32x4(x, y, z, w);</code></pre>The SIMD.Bool32x4 data type is a 128-bit vector divided into 4 lanes storing boolean values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool32x4
SIMD.Bool64x2	A										<pre><code>SIMD.Bool64x2(x, y);</code></pre>The SIMD.Bool64x2 data type is a 128-bit vector divided into 2 lanes storing boolean values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool64x2
SIMD.Bool8x16	A										<pre><code>SIMD.Bool8x16(s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15);</code></pre>The SIMD.Bool8x16 data type is a 128-bit vector divided into 16 lanes storing boolean values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Bool8x16
Boolean	A										<pre><code>new Boolean([value])</code></pre>The Boolean object is an object wrapper for a boolean value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean
Boolean.prototype	A										<pre><code>Boolean.prototype</code></pre>The Boolean.prototype property represents the prototype for the Boolean constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/prototype
Boolean.prototype.toSource()	A										<pre><code>booleanObj.toSource()\nBoolean.toSource()</code></pre>The toSource() method returns a string representing the source code of the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toSource
Boolean.prototype.toString	A										<pre><code>Boolean.prototype.toString ( )</code></pre>The toString() method returns a string representing the specified Boolean object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString
Boolean.prototype.valueOf	A										<pre><code>Boolean.prototype.valueOf ( )</code></pre>The valueOf() method returns the primitive value of a Boolean object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf
Intl.Collator	A										<pre><code>new Intl.Collator([locales[, options]])\nIntl.Collator.call(this[, locales[, options]])</code></pre>The Intl.Collator object is a constructor for collators, objects that enable language sensitive string comparison.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
DataView	A										<pre><code>new DataView(buffer [, byteOffset [, byteLength]])</code></pre>The DataView view provides a low-level interface for reading and writing multiple number types in an ArrayBuffer irrespective of the platform's endianness.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView
Date	A										<pre><code>new Date();\nnew Date(value);\nnew Date(dateString);\nnew Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);\n</code></pre>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January, 1970 UTC.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date
Date.prototype[@@toPrimitive]	A										<pre><code>Date()[Symbol.toPrimitive](hint);\n</code></pre>The [@@toPrimitive]() method converts a Date object to a primitive value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive
Date.prototype.getDate	A										<pre><code>Date.prototype.getDate ( )</code></pre>The getDate() method returns the day of the month for the specified date according to local time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate
Date.prototype.getDay	A										<pre><code>Date.prototype.getDay ( )</code></pre>The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay
Date.prototype.getFullYear	A										<pre><code>Date.prototype.getFullYear ( )</code></pre>The getFullYear() method returns the year of the specified date according to local time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear
Date.prototype.getHours	A										<pre><code>Date.prototype.getHours ( )</code></pre>The getHours() method returns the hour for the specified date, according to local time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours
Date.prototype.getMilliseconds	A										<pre><code>Date.prototype.getMilliseconds ( )</code></pre>The getMilliseconds() method returns the milliseconds in the specified date according to local time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds
Date.prototype.getMinutes	A										<pre><code>Date.prototype.getMinutes ( )</code></pre>The getMinutes() method returns the minutes in the specified date according to local time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes
Date.prototype.getMonth	A										<pre><code>Date.prototype.getMonth ( )</code></pre>The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth
Date.prototype.getSeconds	A										<pre><code>Date.prototype.getSeconds ( )</code></pre>The getSeconds() method returns the seconds in the specified date according to local time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds
Date.prototype.getTime	A										<pre><code>Date.prototype.getTime ( )</code></pre>The getTime() method returns the numeric value corresponding to the time for the specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime
Date.prototype.getTimezoneOffset	A										<pre><code>Date.prototype.getTimezoneOffset ( )</code></pre>The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
Date.prototype.getUTCDate	A										<pre><code>Date.prototype.getUTCDate ( )</code></pre>The getUTCDate() method returns the day (date) of the month in the specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate
Date.prototype.getUTCDay	A										<pre><code>Date.prototype.getUTCDay ( )</code></pre>The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay
Date.prototype.getUTCFullYear	A										<pre><code>Date.prototype.getUTCFullYear ( )</code></pre>The getUTCFullYear() method returns the year in the specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear
Date.prototype.getUTCHours	A										<pre><code>Date.prototype.getUTCHours ( )</code></pre>The getUTCHours() method returns the hours in the specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours
Date.prototype.getUTCMilliseconds	A										<pre><code>Date.prototype.getUTCMilliseconds ( )</code></pre>The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds
Date.prototype.getUTCMinutes	A										<pre><code>Date.prototype.getUTCMinutes ( )</code></pre>The getUTCMinutes() method returns the minutes in the specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes
Date.prototype.getUTCMonth	A										<pre><code>Date.prototype.getUTCMonth ( )</code></pre>The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth
Date.prototype.getUTCSeconds	A										<pre><code>Date.prototype.getUTCSeconds ( )</code></pre>The getUTCSeconds() method returns the seconds in the specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds
Date.prototype.getYear	A										<pre><code>Date.prototype.getYear ( )</code></pre>The getYear() method returns the year in the specified date according to local time. Because getYear() does not return full years ("year 2000 problem"), it is no longer used and has been replaced by the getFullYear() method.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear
Date.now	A										<pre><code>Date.now ( )</code></pre>The Date.now() method returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now
Date.parse	A										<pre><code>Date.parse (string)</code></pre>The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognised or, in some cases, contains illegal date values (e.g. 2015-02-31).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse
Date.prototype	A										<pre><code>Date.prototype</code></pre>The Date.prototype property represents the prototype for the Date constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype
Date.prototype.setDate	A										<pre><code>Date.prototype.setDate (date)</code></pre>The setDate() method sets the day of the Date object relative to the beginning of the currently set month.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate
Date.prototype.setFullYear	A										<pre><code>Date.prototype.setFullYear (year [, month [, date ] ] )</code></pre>The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear
Date.prototype.setHours	A										<pre><code>Date.prototype.setHours (hour [, min [, sec [, ms ] ] ] )</code></pre>The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours
Date.prototype.setMilliseconds	A										<pre><code>Date.prototype.setMilliseconds (ms)</code></pre>The setMilliseconds() method sets the milliseconds for a specified date according to local time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds
Date.prototype.setMinutes	A										<pre><code>Date.prototype.setMinutes (min [, sec [, ms ] ] )</code></pre>The setMinutes() method sets the minutes for a specified date according to local time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes
Date.prototype.setMonth	A										<pre><code>Date.prototype.setMonth (month [, date ] )</code></pre>The setMonth() method sets the month for a specified date according to the currently set year.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth
Date.prototype.setSeconds	A										<pre><code>Date.prototype.setSeconds (sec [, ms ] )</code></pre>The setSeconds() method sets the seconds for a specified date according to local time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds
Date.prototype.setTime	A										<pre><code>Date.prototype.setTime (time)</code></pre>The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime
Date.prototype.setUTCDate	A										<pre><code>Date.prototype.setUTCDate (date)</code></pre>The setUTCDate() method sets the day of the month for a specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate
Date.prototype.setUTCFullYear	A										<pre><code>Date.prototype.setUTCFullYear (year [, month [, date ] ] )</code></pre>The setUTCFullYear() method sets the full year for a specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear
Date.prototype.setUTCHours	A										<pre><code>Date.prototype.setUTCHours (hour [, min [, sec [, ms ] ] ] )</code></pre>The setUTCHours() method sets the hour for a specified date according to universal time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours
Date.prototype.setUTCMilliseconds	A										<pre><code>Date.prototype.setUTCMilliseconds (ms)</code></pre>The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds
Date.prototype.setUTCMinutes	A										<pre><code>Date.prototype.setUTCMinutes (min [, sec [, ms ] ] )</code></pre>The setUTCMinutes() method sets the minutes for a specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes
Date.prototype.setUTCMonth	A										<pre><code>Date.prototype.setUTCMonth (month [, date ] )</code></pre>The setUTCMonth() method sets the month for a specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth
Date.prototype.setUTCSeconds	A										<pre><code>Date.prototype.setUTCSeconds (sec [, ms ] )</code></pre>The setUTCSeconds() method sets the seconds for a specified date according to universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds
Date.prototype.setYear	A										<pre><code>Date.prototype.setYear (year)</code></pre>The setYear() method sets the year for a specified date according to local time. Because setYear() does not set full years ("year 2000 problem"), it is no longer used and has been replaced by the setFullYear() method.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear
Date.prototype.toDateString	A										<pre><code>Date.prototype.toDateString ( )</code></pre>The toDateString() method returns the date portion of a Date object in human readable form in American English.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString
Date.prototype.toGMTString	A										<pre><code>Date.prototype.toGMTString ( )</code></pre>The toGMTString() method converts a date to a string, using Internet Greenwich Mean Time (GMT) conventions. The exact format of the value returned by toGMTString() varies according to the platform and browser, in general it should represent a human readable date string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString
Date.prototype.toISOString	A										<pre><code>Date.prototype.toISOString ( )</code></pre>The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix " Z ".	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
Date.prototype.toJSON	A										<pre><code>Date.prototype.toJSON ( key )</code></pre>The toJSON() method returns a string representation of the Date object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON
Date.prototype.toLocaleDateString	A										<pre><code>Date.prototype.toLocaleDateString ( )</code></pre>The toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString
Date.prototype.toLocaleFormat()	A										<pre><code>dateObj.toLocaleFormat(formatString)</code></pre>The non-standard toLocaleFormat() method converts a date to a string using the specified formatting. Intl.DateTimeFormat is an alternative to format dates in a standards-compliant way. See also the newer version of Date.prototype.toLocaleDateString().	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat
Date.prototype.toLocaleString	A										<pre><code>Date.prototype.toLocaleString ( )</code></pre>The toLocaleString() method returns a string with a language sensitive representation of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString
Date.prototype.toLocaleTimeString	A										<pre><code>Date.prototype.toLocaleTimeString ( )</code></pre>The toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString
Date.prototype.toSource()	A										<pre><code>dateObj.toSource()\nDate.toSource()</code></pre>The toSource() method returns a string representing the source code of the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource
Date.prototype.toString	A										<pre><code>Date.prototype.toString ( )</code></pre>The toString() method returns a string representing the specified Date object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString
Date.prototype.toTimeString	A										<pre><code>Date.prototype.toTimeString ( )</code></pre>The toTimeString() method returns the time portion of a Date object in human readable form in American English.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString
Date.prototype.toUTCString	A										<pre><code>Date.prototype.toUTCString ( )</code></pre>The toUTCString() method converts a date to a string, using the UTC time zone.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString
Date.UTC	A										<pre><code>Date.UTC (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )</code></pre>The Date.UTC() method accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC
Date.prototype.valueOf	A										<pre><code>Date.prototype.valueOf ( )</code></pre>The valueOf() method returns the primitive value of a Date object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf
Intl.DateTimeFormat	A										<pre><code>new Intl.DateTimeFormat([locales[, options]])\nIntl.DateTimeFormat.call(this[, locales[, options]])</code></pre>The Intl.DateTimeFormat object is a constructor for objects that enable language sensitive date and time formatting.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
Global.decodeURI	A										<pre><code>Global.decodeURI (encodedURI)</code></pre>The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI
Global.decodeURIComponent	A										<pre><code>Global.decodeURIComponent (encodedURIComponent)</code></pre>The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent
Global.encodeURI	A										<pre><code>Global.encodeURI (uri)</code></pre>The encodeURI() function encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI
Global.encodeURIComponent	A										<pre><code>Global.encodeURIComponent (uriComponent)</code></pre>The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
Error	A										<pre><code>new Error([message[, fileName[, lineNumber]]])</code></pre>The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error
Error.prototype.columnNumber	A										The columnNumber property contains the column number in the line of the file that raised this error.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber
error prototype columnnumber	R	Error.prototype.columnNumber										
Error.prototype.fileName	A										The fileName property contains the path to the file that raised this error.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName
error prototype filename	R	Error.prototype.fileName										
Error.prototype.lineNumber	A										The lineNumber property contains the line number in the file that raised this error.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber
error prototype linenumber	R	Error.prototype.lineNumber										
Error.prototype.message	A										<pre><code>Error.prototype.message</code></pre>The message property is a human-readable description of the error.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message
error prototype message	R	Error.prototype.message										
Error.prototype.name	A										<pre><code>Error.prototype.name</code></pre>The name property represents a name for the type of error. The initial value is "Error".	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name
error prototype name	R	Error.prototype.name										
Error.prototype	A										<pre><code>Error.prototype</code></pre>The Error.prototype property represents the prototype for the Error constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype
error prototype	R	Error.prototype										
Error.prototype.stack	A										The non-standard stack property of Error objects offer a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack
error prototype stack	R	Error.prototype.stack										
Error.prototype.toSource()	A										<pre><code>e.toSource()</code></pre>The toSource() method returns code that could eval to the same error.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toSource
error prototype tosource()	R	Error.prototype.toSource()										
Error.prototype.toString	A										<pre><code>Error.prototype.toString ( )</code></pre>The toString() method returns a string representing the specified Error object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString
error prototype tostring	R	Error.prototype.toString										
Global.escape	A										<pre><code>Global.escape (string)</code></pre>The deprecated escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence. Use encodeURI or encodeURIComponent instead.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape
Global.eval	A										<pre><code>Global.eval (x)</code></pre>The eval() function evaluates JavaScript code represented as a string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval
EvalError	A										<pre><code>new EvalError([message[, fileName[, lineNumber]]])</code></pre>The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError
Float32Array	A										<pre><code>new Float32Array(length);\nnew Float32Array(typedArray);\nnew Float32Array(object);\nnew Float32Array(buffer [, byteOffset [, length]]);</code></pre>The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array
SIMD.Float32x4	A										<pre><code>SIMD.Float32x4(x, y, z, w);</code></pre>The SIMD.Float32x4 data type is a 128-bit vector divided into 4 lanes storing single precision floating point values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32x4
Float64Array	A										<pre><code>new Float64Array(length);\nnew Float64Array(typedArray);\nnew Float64Array(object);\nnew Float64Array(buffer [, byteOffset [, length]]);</code></pre>The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array
SIMD.Float64x2	A										<pre><code>SIMD.Float64x2(x, y);</code></pre>The SIMD.Float64x2 data type is a 128-bit vector divided into 2 lanes storing double precision floating point values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64x2
Function	A										<pre><code>new Function ([arg1[, arg2[, ...argN]],] functionBody)</code></pre>The Function constructor creates a new Function object. In JavaScript every function is actually a Function object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function
Function.prototype.apply	A										<pre><code>Function.prototype.apply (thisArg, argArray)</code></pre>The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply
Function.arguments	A										The function.arguments property refers to an an array-like object corresponding to the arguments passed to a function. Use the simple variable arguments instead.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments
Function.prototype.bind	A										<pre><code>Function.prototype.bind (thisArg [, arg1 [, arg2, …]])</code></pre>The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
Function.prototype.call	A										<pre><code>Function.prototype.call (thisArg [ , arg1 [ , arg2, … ] ] )</code></pre>The call() method calls a function with a given this value and arguments provided individually.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call
Function.caller	A										The function.caller property returns the function that invoked the specified function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller
Function.displayName	A										The function.displayName property returns the display name of the function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName
Function.prototype.isGenerator()	A										<pre><code>fun.isGenerator()</code></pre>The isGenerator() method determines whether or not a function is a generator.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator
Function.length	A										<pre><code>Function.length</code></pre>The length property specifies the number of arguments expected by the function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length
Function.name	A										The function.name property returns the name of the function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
Function.prototype	A										<pre><code>Function.prototype</code></pre>The Function.prototype property represents the Function prototype object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype
Function.prototype.toSource()	A										<pre><code>function.toSource();\nFunction.toSource();\n</code></pre>The toSource() method returns a string representing the source code of the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource
Function.prototype.toString	A										<pre><code>Function.prototype.toString ( )</code></pre>The toString() method returns a string representing the source code of the function.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString
Generator	A										<pre><code>function* gen() { \n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen(); // "Generator { }"</code></pre>The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator
GeneratorFunction	A										<pre><code>new GeneratorFunction ([arg1[, arg2[, ...argN]],] functionBody)</code></pre>The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction
Global.Infinity	A										<pre><code>Global.Infinity</code></pre>The global Infinity property is a numeric value representing infinity.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity
Int16Array	A										<pre><code>new Int16Array(length);\nnew Int16Array(typedArray);\nnew Int16Array(object);\nnew Int16Array(buffer [, byteOffset [, length]]);</code></pre>The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array
SIMD.Int16x8	A										<pre><code>SIMD.Int16x8(s0, s1, s2, s3, s4, s5, s6, s7);</code></pre>The SIMD.Int16x8 data type is a 128-bit vector divided into 8 lanes storing 16-bit signed integer values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16x8
Int32Array	A										<pre><code>new Int32Array(length);\nnew Int32Array(typedArray);\nnew Int32Array(object);\nnew Int32Array(buffer [, byteOffset [, length]]);</code></pre>The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array
SIMD.Int32x4	A										<pre><code>SIMD.Int32x4(x, y, z, w);</code></pre>The SIMD.Int32x4 data type is a 128-bit vector divided into 4 lanes storing 32-bit signed integer values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32x4
Int8Array	A										<pre><code>new Int8Array(length);\nnew Int8Array(typedArray);\nnew Int8Array(object);\nnew Int8Array(buffer [, byteOffset [, length]]);</code></pre>The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array
SIMD.Int8x16	A										<pre><code>SIMD.Int8x16(s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15);</code></pre>The SIMD.Int8x16 data type is a 128-bit vector divided into 16 lanes storing 8-bit signed integer values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8x16
InternalError	A										<pre><code>new InternalError([message[, fileName[, lineNumber]]])</code></pre>The InternalError object indicates an error that occurred internally in the JavaScript engine. For example: "InternalError : too much recursion".	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError
Intl	A										The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for Collator, NumberFormat, and DateTimeFormat objects are properties of the Intl object. This page documents these properties as well as functionality common to the internationalization constructors and other language sensitive functions.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl
Global.isFinite	A										<pre><code>Global.isFinite (number)</code></pre>The global isFinite() function determines whether the passed value is a finite number. If needed, the parameter is first converted to a number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite
Global.isNaN	A										<pre><code>Global.isNaN (number)</code></pre>The isNaN() function determines whether a value is NaN or not. Note: coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 6, or you can use typeof to determine if the value is Not-A-Number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN
Iterator	A										<pre><code>Iterator(object, [keyOnly])</code></pre>The Iterator function returns an object which implements legacy iterator protocol and iterates over enumerable properties of an object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator
JSON	A										The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties it has no interesting functionality of its own.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON
JSON.parse	A										<pre><code>JSON.parse ( text [ , reviver ] )</code></pre>The JSON.parse() method parses a string as JSON, optionally transforming the value produced by parsing.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
JSON.stringify	A										<pre><code>JSON.stringify ( value [ , replacer [ , space ] ] )</code></pre>The JSON.stringify() method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
Map	A										<pre><code>new Map([iterable])</code></pre>The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
Math	A										Math is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math
Math.abs	A										<pre><code>Math.abs (x)</code></pre>The Math.abs() function returns the absolute value of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs
Math.acos	A										<pre><code>Math.acos (x)</code></pre>The Math.acos() function returns the arccosine (in radians) of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos
Math.acosh()	A										<pre><code>Math.acosh(x)</code></pre>The Math.acosh() function returns the hyperbolic arc-cosine of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh
Math.asin	A										<pre><code>Math.asin (x)</code></pre>The Math.asin() function returns the arcsine (in radians) of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin
Math.asinh()	A										<pre><code>Math.asinh(x)</code></pre>The Math.asinh() function returns the hyperbolic arcsine of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh
Math.atan	A										<pre><code>Math.atan (x)</code></pre>The Math.atan() function returns the arctangent (in radians) of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan
Math.atan2	A										<pre><code>Math.atan2 (y, x)</code></pre>The Math.atan2() function returns the arctangent of the quotient of its arguments.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2
Math.atanh()	A										<pre><code>Math.atanh(x)</code></pre>The Math.atanh() function returns the hyperbolic arctangent of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh
Math.cbrt()	A										<pre><code>Math.cbrt(x)</code></pre>The Math.cbrt() function returns the cube root of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt
Math.ceil	A										<pre><code>Math.ceil (x)</code></pre>The Math.ceil() function returns the smallest integer greater than or equal to a given number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil
Math.clz32()	A										<pre><code>Math.clz32(x)</code></pre>The Math.clz32() function returns the number of leading zero bits in the 32-bit binary representation of a number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
Math.cos	A										<pre><code>Math.cos (x)</code></pre>The Math.cos() function returns the cosine of a number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos
Math.cosh()	A										<pre><code>Math.cosh(x)</code></pre>The Math.cosh() function returns the hyperbolic cosine of a number, that can be expressed using the constant e :	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh
Math.E	A										<pre><code>Math.E</code></pre>The Math.E property represents the base of natural logarithms, e, approximately 2.718.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E
Math.exp	A										<pre><code>Math.exp (x)</code></pre>The Math.exp() function returns e x, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp
Math.expm1()	A										<pre><code>Math.expm1(x)</code></pre>The Math.expm1() function returns e x - 1, where x is the argument, and e the base of the natural logarithms.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1
Math.floor	A										<pre><code>Math.floor (x)</code></pre>The Math.floor() function returns the largest integer less than or equal to a given number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor
Math.fround()	A										<pre><code>Math.fround(x)</code></pre>The Math.fround() function returns the nearest single precision float representation of a number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround
Math.hypot()	A										<pre><code>Math.hypot([value1[, value2[, ...]]])</code></pre>The Math.hypot() function returns the square root of the sum of squares of its arguments, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot
Math.imul()	A										<pre><code>Math.imul(a, b)</code></pre>The Math.imul() function returns the result of the C-like 32-bit multiplication of the two parameters.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
Math.LN10	A										<pre><code>Math.LN10</code></pre>The Math.LN10 property represents the natural logarithm of 10, approximately 2.302:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10
Math.LN2	A										<pre><code>Math.LN2</code></pre>The Math.LN2 property represents the natural logarithm of 2, approximately 0.693:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2
Math.log	A										<pre><code>Math.log (x)</code></pre>The Math.log() function returns the natural logarithm (base e) of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log
Math.log10()	A										<pre><code>Math.log10(x)</code></pre>The Math.log10() function returns the base 10 logarithm of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10
Math.LOG10E	A										<pre><code>Math.LOG10E</code></pre>The Math.LOG10E property represents the base 10 logarithm of e, approximately 0.434:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E
Math.log1p()	A										<pre><code>Math.log1p(x)</code></pre>The Math.log1p() function returns the natural logarithm (base e) of 1 + a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p
Math.log2()	A										<pre><code>Math.log2(x)</code></pre>The Math.log2() function returns the base 2 logarithm of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2
Math.LOG2E	A										<pre><code>Math.LOG2E</code></pre>The Math.LOG2E property represents the base 2 logarithm of e, approximately 1.442:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E
Math.max	A										<pre><code>Math.max ( [ value1 [ , value2 [ , … ] ] ] )</code></pre>The Math.max() function returns the largest of zero or more numbers.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max
Math.min	A										<pre><code>Math.min ( [ value1 [ , value2 [ , … ] ] ] )</code></pre>The Math.min() function returns the smallest of zero or more numbers.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min
Math.PI	A										<pre><code>Math.PI</code></pre>The Math.PI property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI
Math.pow	A										<pre><code>Math.pow (x, y)</code></pre>The Math.pow() function returns the base to the exponent power, that is, base exponent.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow
Math.random	A										<pre><code>Math.random ( )</code></pre>The Math.random() function returns a floating-point, pseudo-random number in the range [ 0, 1) that is, from 0 (inclusive) up to but not including 1 (exclusive), which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
Math.round	A										<pre><code>Math.round (x)</code></pre>The Math.round() function returns the value of a number rounded to the nearest integer.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
Math.sign()	A										<pre><code>Math.sign(x)</code></pre>The Math.sign() function returns the sign of a number, indicating whether the number is positive, negative or zero.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
Math.sin	A										<pre><code>Math.sin (x)</code></pre>The Math.sin() function returns the sine of a number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin
Math.sinh()	A										<pre><code>Math.sinh(x)</code></pre>The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed using the constant e :	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh
Math.sqrt	A										<pre><code>Math.sqrt (x)</code></pre>The Math.sqrt() function returns the square root of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt
Math.SQRT1_2	A										<pre><code>Math.SQRT1_2</code></pre>The Math.SQRT1_2 property represents the square root of 1/2 which is approximately 0.707:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2
Math.SQRT2	A										<pre><code>Math.SQRT2</code></pre>The Math.SQRT2 property represents the square root of 2, approximately 1.414:	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2
Math.tan	A										<pre><code>Math.tan (x)</code></pre>The Math.tan() function returns the tangent of a number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan
Math.tanh()	A										<pre><code>Math.tanh(x)</code></pre>The Math.tanh() function returns the hyperbolic tangent of a number, that is	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh
Math.trunc()	A										<pre><code>Math.trunc(x)</code></pre>The Math.trunc() function returns the integral part of a number by removing any fractional digits.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc
Global.NaN	A										<pre><code>Global.NaN</code></pre>The global NaN property is a value representing Not-A-Number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN
null	A										<pre><code>null </code></pre>The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null
Number	A										<pre><code>new Number(value);</code></pre>The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number
Number.EPSILON	A										The Number.EPSILON property represents the difference between one and the smallest value greater than one that can be represented as a Number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON
Number.isFinite	A										<pre><code>Number.isFinite (value)</code></pre>The Number.isFinite() method determines whether the passed value is a finite number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
Number.isInteger()	A										<pre><code>Number.isInteger(value)</code></pre>The Number.isInteger() method determines whether the passed value is an integer.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
Number.isNaN()	A										<pre><code>Number.isNaN(value)</code></pre>The Number.isNaN() method determines whether the passed value is NaN. It is a more robust version of the original, global isNaN().	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
Number.isSafeInteger()	A										<pre><code>Number.isSafeInteger(testValue)\n</code></pre>The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer. A safe integer is an integer that	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger
Number.MAX_SAFE_INTEGER	A										The Number.MAX_SAFE_INTEGER constant represents the maximum safe integer in JavaScript (2 53 - 1).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER
Number.MAX_VALUE	A										<pre><code>Number.MAX_VALUE</code></pre>The Number.MAX_VALUE property represents the maximum numeric value representable in JavaScript.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE
Number.MIN_SAFE_INTEGER	A										The Number.MIN_SAFE_INTEGER constant represents the minimum safe integer in JavaScript (-(2 53 - 1)).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER
Number.MIN_VALUE	A										<pre><code>Number.MIN_VALUE</code></pre>The Number.MIN_VALUE property represents the smallest positive numeric value representable in JavaScript.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE
Number.NaN	A										<pre><code>Number.NaN</code></pre>The Number.NaN property represents Not-A-Number. Equivalent of NaN.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN
Number.NEGATIVE_INFINITY	A										<pre><code>Number.NEGATIVE_INFINITY</code></pre>The Number.NEGATIVE_INFINITY property represents the negative Infinity value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY
Number.parseFloat()	A										<pre><code>Number.parseFloat(string)</code></pre>The Number.parseFloat() method parses a string argument and returns a floating point number. This method behaves identically to the global function parseFloat() and is part of ECMAScript 6 (its purpose is modularization of globals).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat
Number.parseInt()	A										<pre><code>Number.parseInt(string[, radix])</code></pre>The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt
Number.POSITIVE_INFINITY	A										<pre><code>Number.POSITIVE_INFINITY</code></pre>The Number.POSITIVE_INFINITY property represents the positive Infinity value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY
Number.prototype	A										<pre><code>Number.prototype</code></pre>The Number.prototype property represents the prototype for the Number constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/prototype
Number.prototype.toExponential	A										<pre><code>Number.prototype.toExponential (fractionDigits)</code></pre>The toExponential() method returns a string representing the Number object in exponential notation.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential
Number.prototype.toFixed	A										<pre><code>Number.prototype.toFixed (fractionDigits)</code></pre>The toFixed() method formats a number using fixed-point notation.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed
Number.prototype.toLocaleString	A										<pre><code>Number.prototype.toLocaleString()</code></pre>The toLocaleString() method returns a string with a language sensitive representation of this number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
Number.prototype.toPrecision	A										<pre><code>Number.prototype.toPrecision (precision)</code></pre>The toPrecision() method returns a string representing the Number object to the specified precision.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision
Number.prototype.toSource()	A										<pre><code>numObj.toSource()\nNumber.toSource()</code></pre>The toSource() method returns a string representing the source code of the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource
Number.prototype.toString	A										<pre><code>Number.prototype.toString ( [ radix ] )</code></pre>The toString() method returns a string representing the specified Number object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString
Number.prototype.valueOf	A										<pre><code>Number.prototype.valueOf ( )</code></pre>The valueOf() method returns the wrapped primitive value of a Number object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf
Intl.NumberFormat	A										<pre><code>new Intl.NumberFormat([locales[, options]])\nIntl.NumberFormat.call(this[, locales[, options]])\n</code></pre>The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat
Object	A										<pre><code>// Object initialiser or literal\n{ [ nameValuePair1[, nameValuePair2[, ...nameValuePairN] ] ] }\n\n// Called as a constructor\nnew Object([value])</code></pre>The Object constructor creates an object wrapper.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
Object.assign()	A										<pre><code>Object.assign(target, ...sources)</code></pre>The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
Object.prototype.constructor	A										<pre><code>Object.prototype.constructor</code></pre>Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as 1, true and "test".	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor
Object.create	A										<pre><code>Object.create ( O [, Properties] )</code></pre>The Object.create() method creates a new object with the specified prototype object and properties.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
Object.defineProperties	A										<pre><code>Object.defineProperties ( O, Properties )</code></pre>The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties
Object.defineProperty	A										<pre><code>Object.defineProperty ( O, P, Attributes )</code></pre>The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty
Object.entries()	A										<pre><code>Object.entries(obj)</code></pre>The Object.entries() method returns an array of a given object's own enumerable property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
Object.freeze	A										<pre><code>Object.freeze ( O )</code></pre>The Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
Object.getOwnPropertyDescriptor	A										<pre><code>Object.getOwnPropertyDescriptor ( O, P )</code></pre>The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor
Object.getOwnPropertyDescriptors()	A										<pre><code>Object.getOwnPropertyDescriptors(obj)</code></pre>The Object.getOwnPropertyDescriptors() method returns all own property descriptors of a given object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors
Object.getOwnPropertyNames	A										<pre><code>Object.getOwnPropertyNames ( O )</code></pre>The Object.getOwnPropertyNames() method returns an array of all properties (enumerable or not) found directly upon a given object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames
Object.getOwnPropertySymbols()	A										<pre><code>Object.getOwnPropertySymbols(obj)</code></pre>The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols
Object.getPrototypeOf	A										<pre><code>Object.getPrototypeOf ( O )</code></pre>The Object.getPrototypeOf() method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf
Object.prototype.hasOwnProperty	A										<pre><code>Object.prototype.hasOwnProperty (V)</code></pre>The hasOwnProperty() method returns a boolean indicating whether the object has the specified property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty
Object.is()	A										<pre><code>Object.is(value1, value2);</code></pre>The Object.is() method determines whether two values are the same value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
Object.isExtensible	A										<pre><code>Object.isExtensible ( O )</code></pre>The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
Object.isFrozen	A										<pre><code>Object.isFrozen ( O )</code></pre>The Object.isFrozen() determines if an object is frozen.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
Object.prototype.isPrototypeOf	A										<pre><code>Object.prototype.isPrototypeOf (V)</code></pre>The isPrototypeOf() method tests for an object in another object's prototype chain.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf
Object.isSealed	A										<pre><code>Object.isSealed ( O )</code></pre>The Object.isSealed() method determines if an object is sealed.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
Object.keys	A										<pre><code>Object.keys ( O )</code></pre>The Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
Object.preventExtensions	A										<pre><code>Object.preventExtensions ( O )</code></pre>The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions
Object.prototype.propertyIsEnumerable	A										<pre><code>Object.prototype.propertyIsEnumerable (V)</code></pre>The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable
Object.prototype.__proto__	A										<pre><code>var shape = {};\nvar circle = new Circle();\n\n// Set the object prototype.\n// DEPRECATED. This is for example purposes only. DO NOT DO THIS in real code.\nshape.__proto__ = circle;\n\n// Get the object prototype\nconsole.log(shape.__proto__ === circle); // true\n</code></pre>The __proto__ property of Object.prototype is an accessor property (a getter function and a setter function) that exposes the internal [[Prototype]] (either an object or null) of the object through which it is accessed.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto
Object.prototype	A										<pre><code>Object.prototype</code></pre>The Object.prototype property represents the Object prototype object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype
Object.seal	A										<pre><code>Object.seal ( O )</code></pre>The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal
Object.setPrototypeOf()	A										<pre><code>Object.setPrototypeOf(obj, prototype);</code></pre>The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf
Object.prototype.toLocaleString	A										<pre><code>Object.prototype.toLocaleString ( )</code></pre>The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString
Object.prototype.toSource()	A										<pre><code>Object.toSource();\nobj.toSource();\n</code></pre>The toSource() method returns a string representing the source code of the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource
Object.prototype.toString	A										<pre><code>Object.prototype.toString ( )</code></pre>The toString() method returns a string representing the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString
Object.prototype.unwatch()	A										<pre><code>obj.unwatch(prop)</code></pre>The unwatch() method removes a watchpoint set with the watch() method.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch
Object.prototype.valueOf	A										<pre><code>Object.prototype.valueOf ( )</code></pre>The valueOf() method returns the primitive value of the specified object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf
Object.values()	A										<pre><code>Object.values(obj)</code></pre>The Object.values() method returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
Object.prototype.watch()	A										<pre><code>obj.watch(prop, handler)</code></pre>The watch() method watches for a property to be assigned a value and runs a function when that occurs.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch
Object.prototype.__defineGetter__()	A										<pre><code>obj.__defineGetter__(prop, func)</code></pre>The __defineGetter__ method binds an object's property to a function to be called when that property is looked up.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__
Object.prototype.__defineSetter__()	A										<pre><code>obj.__defineSetter__(prop, fun)</code></pre>The __defineSetter__ method binds an object's property to a function to be called when an attempt is made to set that property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__
Object.prototype.__lookupGetter__()	A										<pre><code>obj.__lookupGetter__(sprop)</code></pre>The __lookupGetter__ method returns the function bound as a getter to the specified property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__
Object.prototype.__lookupSetter__()	A										<pre><code>obj.__lookupSetter__(sprop)</code></pre>The __lookupSetter__ method returns the function bound as a setter to the specified property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__
Global.parseFloat	A										<pre><code>Global.parseFloat (string)</code></pre>The parseFloat() function parses a string argument and returns a floating point number.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat
Global.parseInt	A										<pre><code>Global.parseInt (string , radix)</code></pre>The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt
Promise	A										<pre><code>new Promise( /* executor */ function(resolve, reject) { ... } );</code></pre>The Promise object is used for asynchronous computations. A Promise represents a value which may be available now, or in the future, or never.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
Proxy	A										<pre><code>var p = new Proxy(target, handler);\n</code></pre>The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy
RangeError	A										<pre><code>new RangeError([message[, fileName[, lineNumber]]])</code></pre>The RangeError object indicates an error when a value is not in the set or range of allowed values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError
ReferenceError	A										<pre><code>new ReferenceError([message[, fileName[, lineNumber]]])</code></pre>The ReferenceError object represents an error when a non-existent variable is referenced.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError
Reflect	A										Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it's not constructible.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect
RegExp	A										<pre><code>/pattern/flags\nnew RegExp(pattern[, flags])\n</code></pre>The RegExp constructor creates a regular expression object for matching text with a pattern.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
RegExp.prototype[@@match]()	A										<pre><code>regexp[Symbol.match](str)</code></pre>The [@@match]() method retrieves the matches when matching a string against a regular expression.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match
RegExp.prototype[@@replace]()	A										<pre><code>regexp[Symbol.replace](str, newSubStr|function)</code></pre>The [@@replace]() method replaces some or all matches of a this pattern in a string by a replacement, and returns the result of the replacement as a new string. The replacement can be a string or a function to be called for each match.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace
RegExp.prototype[@@search]()	A										<pre><code>regexp[Symbol.search](str)</code></pre>The [@@search]() method executes a search for a match between a this regular expression and a string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search
get RegExp[@@species]	A										<pre><code>RegExp[Symbol.species]\n</code></pre>The RegExp[@@species] accessor property returns the RegExp constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species
RegExp.prototype[@@split]()	A										<pre><code>regexp[Symbol.split](str[, limit])</code></pre>The [@@split]() method splits a String object into an array of strings by separating the string into substrings.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split
RegExp.prototype.compile()	A										<pre><code>regexObj.compile(pattern, flags)</code></pre>The deprecated compile () method is used to (re-)compile a regular expression during execution of a script. It is basically the same as the RegExp constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile
RegExp.prototype.exec	A										<pre><code>RegExp.prototype.exec(string)</code></pre>The exec() method executes a search for a match in a specified string. Returns a result array, or null.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec
RegExp.prototype.flags	A										The flags property returns a string consisting of the flags of the current regular expression object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags
RegExp.prototype.global	A										The global property indicates whether or not the " g " flag is used with the regular expression. global is a read-only property of an individual regular expression instance.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global
RegExp.prototype.ignoreCase	A										The ignoreCase property indicates whether or not the " i " flag is used with the regular expression. ignoreCase is a read-only property of an individual regular expression instance.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase
RegExp.input ($_)	A										<pre><code>RegExp.input\nRegExp.$_\n</code></pre>The non-standard input property is a static property of regular expressions that contains the string against which a regular expression is matched. RegExp.$_ is an alias for this property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input
regexp.lastIndex	A										<pre><code>regExpObj.lastIndex</code></pre>The lastIndex is a read/write integer property of regular expression instances that specifies the index at which to start the next match.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex
RegExp.lastMatch ($&)	A										<pre><code>RegExp.lastMatch\nRegExp['$&amp;']\n</code></pre>The non-standard lastMatch property is a static and read-only property of regular expressions that contains the last matched characters. RegExp.$& is an alias for this property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch
RegExp.lastParen ($+)	A										<pre><code>RegExp.lastParen\nRegExp['$+']\n</code></pre>The non-standard lastParen property is a static and read-only property of regular expressions that contains the last parenthesized substring match, if any. RegExp.$+ is an alias for this property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen
RegExp.leftContext ($`)	A										<pre><code>RegExp.leftContext\nRegExp['$`']\n</code></pre>The non-standard leftContext property is a static and read-only property of regular expressions that contains the substring preceding the most recent match. RegExp.$` is an alias for this property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext
RegExp.prototype.multiline	A										The multiline property indicates whether or not the " m " flag is used with the regular expression. multiline is a read-only property of an individual regular expression instance.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline
RegExp.$1-$9	A										<pre><code>RegExp.$1\nRegExp.$2\nRegExp.$3\nRegExp.$4\nRegExp.$5\nRegExp.$6\nRegExp.$7\nRegExp.$8\nRegExp.$9\n</code></pre>The non-standard $1, $2, $3, $4, $5, $6, $7, $8, $9 properties are static and read-only properties of regular expressions that contain parenthesized substring matches.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n
RegExp.prototype	A										<pre><code>RegExp.prototype</code></pre>The RegExp.prototype property represents the prototype object for the RegExp constructor.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype
RegExp.rightContext ($')	A										<pre><code>RegExp.rightContext\nRegExp["$'"]\n</code></pre>The non-standard rightContext property is a static and read-only property of regular expressions that contains the substring following the most recent match. RegExp.$' is an alias for this property.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext
RegExp.prototype.source	A										The source property returns a String containing the source text of the regexp object, and it doesn't contain the two forward slashes on both sides and any flags.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source
RegExp.prototype.sticky	A										The sticky property reflects whether or not the search is sticky (searches in strings only from the index indicated by the lastIndex property of this regular expression). sticky is a read-only property of an individual regular expression object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky
RegExp.prototype.test	A										<pre><code>RegExp.prototype.test(string)</code></pre>The test() method executes a search for a match between a regular expression and a specified string. Returns true or false.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test
RegExp.prototype.toSource()	A										<pre><code>regexObj.toSource()\n</code></pre>The toSource() method returns a string representing the source code of the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toSource
RegExp.prototype.toString	A										<pre><code>RegExp.prototype.toString()</code></pre>The toString() method returns a string representing the regular expression.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString
RegExp.prototype.unicode	A										The unicode property indicates whether or not the " u " flag is used with a regular expression. unicode is a read-only property of an individual regular expression instance.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode
Set	A										<pre><code>new Set([iterable]);</code></pre>The Set object lets you store unique values of any type, whether primitive values or object references.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set
SharedArrayBuffer	A										<pre><code>new SharedArrayBuffer(length)\n</code></pre>The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer
SIMD	A										SIMD (pronounced "sim-dee") is short for Single Instruction/Multiple Data which is one classification of computer architectures. SIMD operations perform the same computation on multiple data points resulting in data level parallelism and thus performance gains, for example for 3D graphics and video processing, physics simulations or cryptography, and other domains.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD
StopIteration	A										<pre><code>StopIteration</code></pre>The StopIteration object is used to tell the end of the iteration in the legacy iterator protocol.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/StopIteration
String	A										<pre><code>'string text'\n"string text"\n"&#20013;&#25991; espa&#241;ol deutsch English &#2361;&#2367;&#2344;&#2381;&#2342;&#2368; &#1575;&#1604;&#1593;&#1585;&#1576;&#1610;&#1577; portugu&#234;s &#2476;&#2494;&#2434;&#2482;&#2494; &#1088;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081; &#26085;&#26412;&#35486; &#2602;&#2672;&#2588;&#2622;&#2604;&#2624; &#54620;&#44397;&#50612; &#2980;&#2990;&#3007;&#2996;&#3021; &#1506;&#1489;&#1512;&#1497;&#1514;"</code></pre>The String global object is a constructor for strings, or a sequence of characters.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
String.prototype[@@iterator]()	A										<pre><code>string[Symbol.iterator]</code></pre>The [@@iterator]() method returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator
String.prototype.anchor()	A										<pre><code>str.anchor(name)</code></pre>The anchor() method creates an a HTML anchor element that is used as a hypertext target.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor
String.prototype.big()	A										<pre><code>str.big()</code></pre>The big() method creates a big HTML element that causes a string to be displayed in a big font.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big
String.prototype.blink()	A										<pre><code>str.blink()</code></pre>The blink() method creates a blink HTML element that causes a string to blink.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink
String.prototype.bold()	A										<pre><code>str.bold()</code></pre>The bold() method creates a b HTML element that causes a string to be displayed as bold.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold
String.prototype.charAt	A										<pre><code>String.prototype.charAt (pos)</code></pre>The charAt() method returns the specified character from a string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt
String.prototype.charCodeAt	A										<pre><code>String.prototype.charCodeAt (pos)</code></pre>The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index (the UTF-16 code unit matches the Unicode code point for code points representable in a single UTF-16 code unit, but might also be the first code unit of a surrogate pair for code points not representable in a single UTF-16 code unit, e.g. Unicode code points  0x10000). If you want the entire code point value, use codePointAt ().	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt
String.prototype.codePointAt()	A										<pre><code>str.codePointAt(pos)</code></pre>The codePointAt() method returns a non-negative integer that is the Unicode code point value.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt
String.prototype.concat	A										<pre><code>String.prototype.concat ( [ string1 [ , string2 [ , … ] ] ] )</code></pre>The concat() method combines the text of one or more strings and returns a new string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat
String.prototype.endsWith()	A										<pre><code>str.endsWith(searchString[, position])</code></pre>The endsWith() method determines whether a string ends with the characters of another string, returning true or false as appropriate.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
String.prototype.fixed()	A										<pre><code>str.fixed()</code></pre>The fixed() method creates a tt HTML element that causes a string to be displayed in fixed-pitch font.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed
String.prototype.fontcolor()	A										<pre><code>str.fontcolor(color)</code></pre>The fontcolor() method creates a font HTML element that causes a string to be displayed in the specified font color.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor
String.prototype.fontsize()	A										<pre><code>str.fontsize(size)</code></pre>The fontsize() method creates a font HTML element that causes a string to be displayed in the specified font size.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize
String.fromCharCode	A										<pre><code>String.fromCharCode ( [ char0 [ , char1 [ , … ] ] ] )</code></pre>The static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode
String.fromCodePoint()	A										<pre><code>String.fromCodePoint(num1[, ...[, numN]])</code></pre>The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint
String.prototype.includes()	A										<pre><code>str.includes(searchString[, position])</code></pre>The includes() method determines whether one string may be found within another string, returning true or false as appropriate.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
String.prototype.indexOf	A										<pre><code>String.prototype.indexOf (searchString, position)</code></pre>The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf
String.prototype.italics()	A										<pre><code>str.italics()</code></pre>The italics() method creates an i HTML element that causes a string to be italic.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics
String.prototype.lastIndexOf	A										<pre><code>String.prototype.lastIndexOf (searchString, position)</code></pre>The lastIndexOf() method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf
String.prototype.length	A										<pre><code>String.prototype.length</code></pre>The length property represents the length of a string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length
String.prototype.link()	A										<pre><code>str.link(url)</code></pre>The link() method creates a string representing the code for an a HTML element to be used as a hypertext link to another URL.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link
String.prototype.localeCompare	A										<pre><code>String.prototype.localeCompare (that)</code></pre>The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare
String.prototype.match	A										<pre><code>String.prototype.match (regexp)</code></pre>The match() method retrieves the matches when matching a string against a regular expression.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match
String.prototype.normalize()	A										<pre><code>str.normalize([form])</code></pre>The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize
String.prototype.padEnd()	A										<pre><code>str.padEnd(targetLength [, padString])</code></pre>The padEnd() method pads the current string with a given string (eventually repeated) so that the resulting string reaches a given length. The pad is applied from the end (right) of the current string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
String.prototype.padStart()	A										<pre><code>str.padStart(targetLength [, padString])</code></pre>The padStart() method pads the current string with a given string (eventually repeated) so that the resulting string reaches a given length. The pad is applied from the start (left) of the current string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
String.prototype	A										<pre><code>String.prototype</code></pre>The String.prototype property represents the String prototype object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype
String.raw()	A										<pre><code>String.raw(callSite, ...substitutions)\n\nString.raw`templateString`\n</code></pre>The static String.raw() method is a tag function of template literals, similar to the r prefix in Python or the @ prefix in C# for string literals (yet there is a difference: see explanations in this issue). It's used to get the raw string form of template strings (that is, the original, uninterpreted text).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw
String.prototype.repeat()	A										<pre><code>str.repeat(count)</code></pre>The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
String.prototype.replace	A										<pre><code>String.prototype.replace (searchValue, replaceValue)</code></pre>The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace
String.prototype.search	A										<pre><code>String.prototype.search (regexp)</code></pre>The search() method executes a search for a match between a regular expression and this String object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search
String.prototype.slice	A										<pre><code>String.prototype.slice (beginSlice[, endSlice])</code></pre>The slice() method extracts a section of a string and returns a new string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice
String.prototype.small()	A										<pre><code>str.small()</code></pre>The small() method creates a small HTML element that causes a string to be displayed in a small font.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small
String.prototype.split	A										<pre><code>String.prototype.split (separator, limit)</code></pre>The split() method splits a String object into an array of strings by separating the string into substrings.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split
String.prototype.startsWith()	A										<pre><code>str.startsWith(searchString[, position])</code></pre>The startsWith() method determines whether a string begins with the characters of another string, returning true or false as appropriate.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
String.prototype.strike()	A										<pre><code>str.strike()</code></pre>The strike() method creates a strike HTML element that causes a string to be displayed as struck-out text.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike
String.prototype.sub()	A										<pre><code>str.sub()</code></pre>The sub() method creates a sub HTML element that causes a string to be displayed as subscript.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub
String.prototype.substr	A										<pre><code>String.prototype.substr (start, [, length])</code></pre>The deprecated substr() method returns the characters in a string beginning at the specified location through the specified number of characters.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr
String.prototype.substring	A										<pre><code>String.prototype.substring (indexStart[, indexEnd])</code></pre>The substring() method returns a subset of a string between one index and another, or through the end of the string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring
String.prototype.sup()	A										<pre><code>str.sup()</code></pre>The sup() method creates a sup HTML element that causes a string to be displayed as superscript.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup
String.prototype.toLocaleLowerCase	A										<pre><code>String.prototype.toLocaleLowerCase ( )</code></pre>The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase
String.prototype.toLocaleUpperCase	A										<pre><code>String.prototype.toLocaleUpperCase ( )</code></pre>The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase
String.prototype.toLowerCase	A										<pre><code>String.prototype.toLowerCase ( )</code></pre>The toLowerCase() method returns the calling string value converted to lower case.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase
String.prototype.toSource()	A										<pre><code>String.toSource()\nstr.toSource()\n</code></pre>The toSource() method returns a string representing the source code of the object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toSource
String.prototype.toString	A										<pre><code>String.prototype.toString ( )</code></pre>The toString() method returns a string representing the specified object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString
String.prototype.toUpperCase	A										<pre><code>String.prototype.toUpperCase ( )</code></pre>The toUpperCase() method returns the calling string value converted to upper case.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase
String.prototype.trim	A										<pre><code>String.prototype.trim ( )</code></pre>The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim
String.prototype.trimLeft()	A										<pre><code>str.trimLeft()</code></pre>The trimLeft() method removes whitespace from the left end of a string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft
String.prototype.trimRight()	A										<pre><code>str.trimRight()</code></pre>The trimRight() method removes whitespace from the right end of a string.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight
String.prototype.valueOf	A										<pre><code>String.prototype.valueOf ( )</code></pre>The valueOf() method returns the primitive value of a String object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf
Symbol	A										<pre><code>Symbol([description])</code></pre>A symbol is a unique and immutable data type. It may be used as an identifier for object properties. The Symbol object is an implicit object wrapper for the symbol primitive data type.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol
SyntaxError	A										<pre><code>new SyntaxError([message[, fileName[, lineNumber]]])try {\n  eval('hoo bar');\n} catch (e) {\n  console.log(e instanceof SyntaxError); // true\n  console.log(e.message);                // "missing ; before statement"\n  console.log(e.name);                   // "SyntaxError"\n  console.log(e.fileName);               // "Scratchpad/1"\n  console.log(e.lineNumber);             // 1\n  console.log(e.columnNumber);           // 4\n  console.log(e.stack);                  // "@Scratchpad/1:2:3\n"\n}\n</code></pre>The SyntaxError object represents an error when trying to interpret syntactically invalid code.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError
TypedArray	A										<pre><code>new TypedArray(length);\nnew TypedArray(typedArray);\nnew TypedArray(object);\nnew TypedArray(buffer [, byteOffset [, length]]);\n\nwhere TypedArray() is one of:\n\nInt8Array();\nUint8Array();\nUint8ClampedArray();\nInt16Array();\nUint16Array();\nInt32Array();\nUint32Array();\nFloat32Array();\nFloat64Array();\n</code></pre>A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
TypeError	A										<pre><code>new TypeError([message[, fileName[, lineNumber]]])</code></pre>The TypeError object represents an error when a value is not of the expected type.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError
Uint16Array	A										<pre><code>new Uint16Array(length);\nnew Uint16Array(typedArray);\nnew Uint16Array(object);\nnew Uint16Array(buffer [, byteOffset [, length]]);</code></pre>The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array
SIMD.Uint16x8	A										<pre><code>SIMD.Uint16x8(s0, s1, s2, s3, s4, s5, s6, s7);</code></pre>The SIMD.Uint16x8 data type is a 128-bit vector divided into 8 lanes storing 16-bit unsigned integer values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16x8
Uint32Array	A										<pre><code>new Uint32Array(length);\nnew Uint32Array(typedArray);\nnew Uint32Array(object);\nnew Uint32Array(buffer [, byteOffset [, length]]);</code></pre>The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array
SIMD.Uint32x4	A										<pre><code>SIMD.Uint32x4(x, y, z, w);</code></pre>The SIMD.Uint32x4 data type is a 128-bit vector divided into 4 lanes storing 32-bit unsigned integer values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32x4
Uint8Array	A										<pre><code>new Uint8Array(length);\nnew Uint8Array(typedArray);\nnew Uint8Array(object);\nnew Uint8Array(buffer [, byteOffset [, length]]);</code></pre>The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array
Uint8ClampedArray	A										<pre><code>new Uint8ClampedArray(length);\nnew Uint8ClampedArray(typedArray);\nnew Uint8ClampedArray(object);\nnew Uint8ClampedArray(buffer [, byteOffset [, length]]);</code></pre>The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray
SIMD.Uint8x16	A										<pre><code>SIMD.Uint8x16(s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15);</code></pre>The SIMD.Uint8x16 data type is a 128-bit vector divided into 16 lanes storing 8-bit unsigned integer values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8x16
Global.undefined	A										<pre><code>Global.undefined</code></pre>The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined
Global.unescape	A										<pre><code>Global.unescape (string)</code></pre>The deprecated unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Because unescape is deprecated, use decodeURI or decodeURIComponent instead.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape
uneval()	A										<pre><code>uneval(object)</code></pre>The uneval() function creates a string representation of the source code of an Object.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval
URIError	A										<pre><code>new URIError([message[, fileName[, lineNumber]]])</code></pre>The URIError object represents an error when a global URI handling function was used in a wrong way.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError
WeakMap	A										<pre><code>new WeakMap([iterable])\n</code></pre>The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced.  The keys must be objects and the values can be arbitrary values.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap
WeakSet	A										<pre><code> new WeakSet([iterable]);</code></pre>The WeakSet object lets you store weakly held objects in a collection.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet
Expressions and operators	A										This chapter documents all the JavaScript language operators, expressions and keywords.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators
Arithmetic operators	A										Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators
Array comprehensions	A										<pre><code>[for (x of iterable) x]\n[for (x of iterable) if (condition) x]\n[for (x of iterable) for (y of iterable) x + y]\n</code></pre>The array comprehension syntax is a JavaScript expression which allows you to quickly assemble a new array based on an existing one. Comprehensions exist in many programming languages.\nInside array comprehensions, these two kinds of components are allowed:\n<pre><code>var numbers = [1, 2, 3, 4];\nvar doubled = [for (i of numbers) i * 2];\nconsole.log(doubled); // logs 2,4,6,8\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions
Assignment operators	A										An assignment operator assigns a value to its left operand based on the value of its right operand.\nIn unusual situations, the assignment operator (e.g. x += y) is not identical to the meaning expression (here x = x + y). When the left operand of an assignment operator itself contains an assignment operator, the left operand is evaluated only once. For example:\n<pre><code>a[i++] += 5         // i is evaluated only once\na[i++] = a[i++] + 5 // i is evaluated twice\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators
Bitwise operators	A										Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.\nThe bitwise logical operators are often used to create, manipulate, and read sequences of flags, which are like binary variables. Variables could be used instead of these sequences, but binary flags take much less memory (by a factor of 32).\n<pre><code>var flags = 5;   // binary 0101\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
class expression	A										<pre><code>var MyClass = class [className] [extends] {\n&#160; // class body\n};</code></pre>The class expression is one way to define a class in ECMAScript 2015 (ES6). Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes are using prototype-based inheritance.\nA class expression has a similar syntax to a class statement (declaration). However, with class expressions, you are able to omit the class name ("binding identifier"), which you can't with class statements. Additionally, class expressions allow you to redefine/re-declare classes and don't throw any type errors like class declaration. The constructor property is optional. And, typeof&#160;the classes generated using this keyword will always be "functions".\n<pre><code>'use strict';\nvar Foo = class {}; // constructor property is optional\nvar Foo = class {}; // Re-declaration is allowed\n\ntypeof Foo; //returns "function"\ntypeof class {}; //returns "function"\n\nFoo instanceof Object; // true\nFoo instanceof Function; // true\nclass Foo {}; // Throws TypeError, doesn't allow re-declaration\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class
Comma operator	A										<pre><code>expr1, expr2, expr3...</code></pre>The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.\nYou can use the comma operator when you want to include multiple expressions in a location that requires a single expression. The most common usage of this operator is to supply multiple parameters in a for loop.\n<pre><code>for (var i = 0, j = 9; i &lt;= 9; i++, j--)\n  console.log("a[" + i + "][" + j + "] = " + a[i][j]);</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator
Comparison operators	A										JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., =), the operands are first converted to primitives, then to the same type, before comparison.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators
Conditional (ternary) Operator	A										<pre><code>condition ? expr1 : expr2 </code></pre>The conditional (ternary) operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.\nIf condition is true, the operator returns the value of expr1; otherwise, it returns the value of expr2. For example, to display a different message based on the value of the isMember variable, you could use this statement:\n<pre><code>"The fee is " + (isMember ? "$2.00" : "$10.00")\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator
delete operator	A										<pre><code>delete expression </code></pre>The delete operator removes a property from an object.\nUnlike what common belief suggests, the delete operator has nothing to do with directly freeing memory (it only does indirectly via breaking references. See the memory management page for more details).\n<pre><code>function foo() { \n  delete x;\n  let x;\n}\n\nfunction bar() { \n  delete y; \n  const y; \n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete
Destructuring assignment	A										<pre><code>var a, b, rest;\n[a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n\n[a, b, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(rest); // [3, 4, 5]\n\n({a, b} = {a:1, b:2});\nconsole.log(a); // 1\nconsole.log(b); // 2\n\n({a, b, ...rest} = {a:1, b:2, c:3, d:4}); \n// ES7 - not implemented in Firefox 47a01\n</code></pre>The destructuring assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects into distinct variables.\nThe object and array literal expressions provide an easy way to create ad&#160;hoc packages of data.\n<pre><code>var x = [1, 2, 3, 4, 5];</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
Expression closures	A										<pre><code>function [name]([param1[, param2[, ..., paramN]]])\n   expression\n</code></pre>Expression closures are a shorthand function syntax for writing simple functions.\nThis addition is nothing more than a shorthand for writing simple functions, giving the language something similar to a typical Lambda notation.\n<pre><code>function(x) { return x * x; }</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures
function expression	A										<pre><code>function [name]([param1[, param2[, ..., paramN]]]) {\n   statements\n}</code></pre>The function keyword can be used to define a function inside an expression.\nA function expression is very similar to and has almost the same syntax as a function statement (see function statement for details). The main difference between a function expression and a function statement is the function name, which can be omitted in function expressions to create anonymous functions. A function expression can be used as a IIFE&#160;(Immediately Invoked Function Expression) which&#160;runs as soon as it is defined. See also the chapter about functions for more information.\n<pre><code>var x = function(y) {\n   return y * y;\n};\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function
function* expression	A										<pre><code>function* [name]([param1[, param2[, ..., paramN]]]) {\n   statements\n}</code></pre>The function* keyword can be used to define a generator function inside an expression.\nA function* expression is very similar to and has almost the same syntax as a function* statement. The main difference between a function* expression and a function* statement is the function name, which can be omitted in function* expressions to create anonymous functions. See also the chapter about functions for more information.\n<pre><code>var x = function*(y) {\n   yield y * y;\n};\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*
Generator comprehensions	A										<pre><code>(for (x of iterable) x)\n(for (x of iterable) if (condition) x)\n(for (x of iterable) for (y of iterable) x + y)\n</code></pre>The generator comprehension syntax is a JavaScript expression which allows you to quickly assemble a new generator function based on an existing iterable object. Comprehensions exist in many programming languages.\nInside generator comprehensions, these two kinds of components are allowed:\n<pre><code>var doubles = [for (i in it) i * 2];\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions
Grouping operator	A										<pre><code> ( )</code></pre>The grouping operator () controls the precedence of evaluation in expressions.\nThe grouping operator consists of a pair of parentheses around an expression or sub-expression to override the normal operator precedence so that expressions with lower precedence can be evaluated before an expression with higher priority.\n<pre><code>var a = 1;\nvar b = 2;\nvar c = 3;\n\n// default precedence\na + b * c     // 7\n// evaluated by default like this\na + (b * c)   // 7\n\n// now overriding precedence \n// addition before multiplication   \n(a + b) * c   // 9\n\n// which is equivalent to\na * c + b * c // 9\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping
in operator	A										<pre><code>prop in objectName</code></pre>The in operator returns true if the specified property is in the specified object.\nThe following examples show some uses of the in operator.\n<pre><code>// Arrays\nvar trees = ["redwood", "bay", "cedar", "oak", "maple"];\n0 in trees        // returns true\n3 in trees        // returns true\n6 in trees        // returns false\n"bay" in trees    // returns false (you must specify the \n                  // index number, not the value at that index)\n"length" in trees // returns true (length is an Array property)\nSymbol.iterator in trees // returns true (arrays are iterable, works only in ES6+)\n\n// Predefined objects\n"PI" in Math          // returns true\n\n// Custom objects\nvar mycar = {make: "Honda", model: "Accord", year: 1998};\n"make" in mycar  // returns true\n"model" in mycar // returns true\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in
instanceof	A										<pre><code>object instanceof constructor</code></pre>The instanceof operator tests whether an object has in its prototype chain the prototype property of a constructor.\nThe instanceof operator tests presence of constructor.prototype in object's prototype chain.\n<pre><code>// defining constructors\nfunction C(){}\nfunction D(){}\n\nvar o = new C();\n\n// true, because: Object.getPrototypeOf(o) === C.prototype\no instanceof C;\n\n// false, because D.prototype is nowhere in o's prototype chain\no instanceof D;\n\no instanceof Object; // true, because:\nC.prototype instanceof Object // true\n\nC.prototype = {};\nvar o2 = new C();\n\no2 instanceof C; // true\n\n// false, because C.prototype is nowhere in\n// o's prototype chain anymore\no instanceof C; \n\nD.prototype = new C(); // use inheritance\nvar o3 = new D();\no3 instanceof D; // true\no3 instanceof C; // true\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof
Legacy generator function expression	A										<pre><code>function [name]([param1[, param2[, ..., paramN]]]) {\n   statements\n}</code></pre>The function keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contain at least one yield expression.\nAn overview of the usage is available on the Iterators and Generators page.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function
Logical Operators	A										Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.\nThe logical operators are described in the following table:\n<pre><code>function shortCircuitEvaluation() {\n&#160;&#160;doSomething() || doSomethingElse()\n}\n\nfunction equivalentEvaluation() {\n&#160; var flag = doSomething();\n&#160; if (!flag) {\n&#160; &#160; doSomethingElse();\n&#160; }\n}\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators
new operator	A										<pre><code>new constructor[([arguments])]</code></pre>The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.\nCreating a user-defined object requires two steps:\n<pre><code>function Car() {}\ncar1 = new Car();\n \nconsole.log(car1.color);    // undefined\n \nCar.prototype.color = null;\nconsole.log(car1.color);    // null\n \ncar1.color = "black";\nconsole.log(car1.color);   // black\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new
new.target	A										<pre><code>new.target</code></pre>The new.target property lets you detect whether a function or constructor was called using the new operator. In constructors and functions instantiated with the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.\nThe new.target syntax consists of the keyword "new", a dot, and a property name "target". Normally "new." serves as the context for a property access, but here "new." is not really an object. In constructor calls, however, new.target refers the constructor invoked by new and so "new." becomes a virtual context.\n<pre><code>function Foo() {\n  if (!new.target) throw "Foo() must be called with new";\n  console.log("Foo instantiated with new");\n}\n\nFoo(); // throws "Foo() must be called with new"\nnew Foo(); // logs "Foo instantiated with new"\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target
Object initializer	A										<pre><code>var o = {};\nvar o = { a: "foo", b: 42, c: {} };\n\nvar a = "foo", b = 42, c = {};\nvar o = { a: a, b: b, c: c };\n\nvar o = {\n  property: function ([parameters]) {},\n  get property() {},\n  set property(value) {},\n};\n</code></pre>Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).\nAn object initializer is an expression that describes the initialization of an Object. Objects consist of properties, which are used to describe an object. Values of object properties can either contain primitive data types or other objects.\n<pre><code>var object = {};</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer
Operator precedence	A										Operator precedence determines the order in which operators are evaluated. Operators with higher precedence are evaluated first.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
Property accessors	A										<pre><code>object.property\nobject["property"]\n</code></pre>Property accessors provide access to an object's properties by using the dot notation or the bracket notation.\nOne can think of an object as an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of the object's properties. It's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is simply a property that can be called, for example if it has a reference to a Function instance as its value.\n<pre><code>get = object.property;\nobject.property = set;\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors
Spread syntax	A										<pre><code>myFunction(...iterableObj);\n</code></pre>The spread syntax allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) or multiple variables  (for destructuring assignment) are expected.\nExample: it is common to use Function.prototype.apply in cases where you want to use an array as arguments to a function.\n<pre><code>function myFunction(x, y, z) { }\nvar args = [0, 1, 2];\nmyFunction.apply(null, args);</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator
super	A										<pre><code>super([arguments]); // calls the parent constructor.\nsuper.functionOnParent([arguments]);\n</code></pre>The super keyword is used to call functions on an object's parent.\nWhen used in a constructor, the super keyword appears alone and must be used before the this keyword can be used. This keyword can also be used to call functions on a parent object.\n<pre><code>class Polygon {\n  constructor(height, width) {\n    this.name = 'Polygon';\n    this.height = height;\n    this.width = width;\n  }\n  sayName() {\n    console.log('Hi, I am a ', this.name + '.');\n  }\n}\n\nclass Square extends Polygon {\n  constructor(length) {\n    this.height; // ReferenceError, super needs to be called first!\n    \n    // Here, it calls the parent class' constructor with lengths\n    // provided for the Polygon's width and height\n    super(length, length);\n    \n    // Note: In derived classes, super() must be called before you\n    // can use 'this'. Leaving this out will cause a reference error.\n    this.name = 'Square';\n  }\n\n  get area() {\n    return this.height * this.width;\n  }\n\n  set area(value) {\n    this.area = value;\n  } \n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super
this	A										<pre><code>this</code></pre>A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
typeof	A										<pre><code>typeof operand</code></pre>The typeof operator returns a string indicating the type of the unevaluated operand.\nThe following table summarizes the possible return values of typeof. For more information about types and primitives, see also the JavaScript data structure page.\n<pre><code>// Numbers\ntypeof 37 === 'number';\ntypeof 3.14 === 'number';\ntypeof(42) === 'number';\ntypeof Math.LN2 === 'number';\ntypeof Infinity === 'number';\ntypeof NaN === 'number'; // Despite being "Not-A-Number"\ntypeof Number(1) === 'number'; // but never use this form!\n\n\n// Strings\ntypeof "" === 'string';\ntypeof "bla" === 'string';\ntypeof (typeof 1) === 'string'; // typeof always returns a string\ntypeof String("abc") === 'string'; // but never use this form!\n\n\n// Booleans\ntypeof true === 'boolean';\ntypeof false === 'boolean';\ntypeof Boolean(true) === 'boolean'; // but never use this form!\n\n\n// Symbols\ntypeof Symbol() === 'symbol'\ntypeof Symbol('foo') === 'symbol'\ntypeof Symbol.iterator === 'symbol'\n\n\n// Undefined\ntypeof undefined === 'undefined';\ntypeof declaredButUndefinedVariable === 'undefined';\ntypeof undeclaredVariable === 'undefined'; \n\n\n// Objects\ntypeof {a:1} === 'object';\n\n// use Array.isArray or Object.prototype.toString.call\n// to differentiate regular objects from arrays\ntypeof [1, 2, 4] === 'object';\n\ntypeof new Date() === 'object';\n\n\n// The following is confusing. Don't use!\ntypeof new Boolean(true) === 'object'; \ntypeof new Number(1) === 'object'; \ntypeof new String("abc") === 'object';\n\n\n// Functions\ntypeof function(){} === 'function';\ntypeof class C {} === 'function';\ntypeof Math.sin === 'function';\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof
void operator	A										<pre><code>void expression</code></pre>The void operator evaluates the given expression and then returns undefined.\nThis operator allows inserting expressions that produce side effects into places where an expression that evaluates to undefined is desired.\n<pre><code>void function iife() {\n    var bar = function () {};\n    var baz = function () {};\n    var foo = function () {\n        bar();\n        baz();\n     };\n    var biz = function () {};\n\n    foo();\n    biz();\n}();\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void
yield	A										<pre><code>[rv] = yield [expression];</code></pre>The yield keyword is used to pause and resume a generator function (function* or legacy generator function).\nThe yield keyword causes generator function execution to pause and the value of the expression following the yield keyword is returned to the generator's caller. It can be thought of as a generator-based version of the return keyword.\n<pre><code>function* foo(){\n  var index = 0;\n  while (index &lt;= 2)\n    yield index++;\n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield
yield*	A										<pre><code> yield* [[expression]];</code></pre>The yield* expression is used to delegate to another generator or iterable object.\nThe yield* expression iterates over the operand and yields each value returned by it.\n<pre><code>function* g1() {\n  yield 2;\n  yield 3;\n  yield 4;\n}\n\nfunction* g2() {\n  yield 1;\n  yield* g1();\n  yield 5;\n}\n\nvar iterator = g2();\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: 4, done: false }\nconsole.log(iterator.next()); // { value: 5, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*
Statements and declarations	A										JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements
block	A										<pre><code>{\n  statement_1;\n  statement_2;\n  ...\n  statement_n;\n}\n</code></pre>A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets.\nThis statement is commonly used with control flow statements (e.g. if...else, for, while). For example:\n<pre><code>while (x &lt; 10) {\n  x++;\n}\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block
break	A										<pre><code>break [label];</code></pre>The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.\nThe break statement includes an optional label that allows the program to break out of a labeled statement. The break statement needs to be nested within the referenced label. The labeled statement can be any block statement; it does not have to be preceded by a loop statement.\n<pre><code>function testBreak(x) {\n  var i = 0;\n\n  while (i &lt; 6) {\n    if (i == 3) {\n      break;\n    }\n    i += 1;\n  }\n\n  return i * x;\n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break
class	A										<pre><code>class name [extends] {\n  // class body\n}\n</code></pre>The class declaration creates a new class with a given name using prototype-based inheritance.\nJust like with class expressions, the class body of a class declaration&#160;is executed in strict mode. The constructor property is optional.\n<pre><code>class Polygon {\n  constructor(height, width) {\n    this.name = 'Polygon';\n    this.height = height;\n    this.width = width;\n  }\n}\n\nclass Square extends Polygon {\n  constructor(length) {\n    super(length, length);\n&#160;   this.name = 'Square';\n  }\n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class
const	A										<pre><code>const name1 = value1 [, name2 = value2 [, ... [, nameN = valueN]]];</code></pre>The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable, just that the variable identifier cannot be reassigned.\nThis declaration creates a constant that can be either global or local to the function in which it is declared. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).\n<pre><code>// NOTE: Constants can be declared with uppercase or lowercase, but a common\n// convention is to use all-uppercase letters.\n\n// define MY_FAV as a constant and give it the value 7\nconst MY_FAV = 7;\n\n// this will throw an error in Firefox and Chrome (but does not fail in Safari)\nMY_FAV = 20;\n\n// will print 7\nconsole.log("my favorite number is: " + MY_FAV);\n\n// trying to redeclare a constant throws an error\nconst MY_FAV = 20;\n\n// the name MY_FAV is reserved for constant above, so this will also fail\nvar MY_FAV = 20;\n\n// this throws an error also\nlet MY_FAV = 20;\n\n// it's important to note the nature of block scoping\nif (MY_FAV === 7) { \n    // this is fine and creates a block scoped MY_FAV variable \n    // (works equally well with let to declare a block scoped non const variable)\n    const MY_FAV = 20;\n\n    // MY_FAV is now 20\n    console.log("my favorite number is " + MY_FAV);\n\n    // this gets hoisted into the global context and throws an error\n    var MY_FAV = 20;\n}\n\n// MY_FAV is still 7\nconsole.log("my favorite number is " + MY_FAV);\n\n// Assigning to A const variable is a syntax error\nconst A = 1; A = 2;\n\n// throws an error, missing initializer in const declaration\nconst FOO; \n\n// const also works on objects\nconst MY_OBJECT = {"key": "value"};\n\n// Overwriting the object behaves as above (throws an error in Firefox and Chrome but does not fail in Safari)\nMY_OBJECT = {"OTHER_KEY": "value"};\n\n// However, object keys are not protected,\n// so the following statement is executed without problem\nMY_OBJECT.key = "otherValue"; // Use&#160;Object.freeze() to make object immutable\n\n// The same applies to arrays\nconst MY_ARRAY = [];\n// It's possible to push items into the array\nMY_ARRAY.push("A"); // ["A"]\n// However, assigning a new array to the variable throws an error in Firefox and Chrome but does not fail in Safari\nMY_ARRAY = ["B"]\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const
continue	A										<pre><code>continue [label];</code></pre>The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.\nIn contrast to the break statement, continue does not terminate the execution of the loop entirely: instead,\n<pre><code>var i = 0;\nvar n = 0;\n\nwhile (i &lt; 5) {\n  i++;\n\n  if (i === 3) {\n    continue;\n  }\n\n  n += i;\n}\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue
debugger	A										<pre><code>debugger;</code></pre>The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.\nThe following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.\n<pre><code>function potentiallyBuggyCode() {\n    debugger;\n    // do potentially buggy stuff to examine, step through, etc.\n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger
default	A										<pre><code>switch (expression) {\n  case value1:\n    //Statements executed when the result of expression matches value1\n    [break;]\n  default:\n    //Statements executed when none of the values match the value of the expression\n    [break;]\n}</code></pre>The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.\nFor more details see the\n<pre><code>switch (expr) {\n  case "Oranges":\n    console.log("Oranges are $0.59 a pound.");\n    break;\n  case "Apples":\n    console.log("Apples are $0.32 a pound.");\n    break;\n  default:\n    console.log("Sorry, we are out of " + expr + ".");\n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/default
do...while	A										<pre><code>do\n   statement\nwhile (condition);\n</code></pre>The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\nIn the following example, the do...while loop iterates at least once and reiterates until i is no longer less than 5.\n<pre><code>var i = 0;\ndo {\n   i += 1;\n   console.log(i);\n} while (i &lt; 5);\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while
empty	A										<pre><code>;\n</code></pre>An empty statement is used to provide no statement, although the JavaScript syntax would expect one.\nThe empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. The opposite behavior, where you want multiple statements, but JavaScript only allows a single one, is possible using a block statement; it combines several statements into a single one.\n<pre><code>var arr = [1, 2, 3];\n\n// Assign all array values to 0\nfor (i = 0; i &lt; arr.length; arr[i++] = 0) /* empty statement */ ;\n\nconsole.log(arr)\n// [0, 0, 0]\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty
export	A										<pre><code>export { name1, name2, &#8230;, nameN };\nexport { variable1 as name1, variable2 as name2, &#8230;, nameN };\nexport let name1, name2, &#8230;, nameN; // also var\nexport let name1 = &#8230;, name2 = &#8230;, &#8230;, nameN; // also var, const\n\nexport default expression;\nexport default function (&#8230;) { &#8230; } // also class, function*\nexport default function name1(&#8230;) { &#8230; } // also class, function*\nexport { name1 as default, &#8230; };\n\nexport * from &#8230;;\nexport { name1, name2, &#8230;, nameN } from &#8230;;\nexport { import1 as name1, import2 as name2, &#8230;, nameN } from &#8230;;</code></pre>The export statement is used to export functions, objects or primitives from a given file (or module).\nThere are two different types of export, each type corresponds to one of the above syntax:\n<pre><code>// module "my-module.js"\nfunction cube(x) {\n  return x * x * x;\n}\nconst foo = Math.PI + Math.SQRT2;\nexport { cube, foo };\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export
for	A										<pre><code>for ([initialization]; [condition]; [final-expression])\n   statement\n</code></pre>The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.\nThe following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop.\n<pre><code>for (var i = 0; i &lt; 9; i++) {\n   console.log(i);\n   // more statements\n}\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for
for...in	A										<pre><code>for (variable in object) {...\n}</code></pre>The for...in statement iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.\nA for...in loop only&#160;iterates over enumerable properties. Objects created from built&#8211;in constructors like Array and Object have inherited non&#8211;enumerable properties from Object.prototype and String.prototype, such as&#160;String's indexOf() method or Object's toString() method. The loop will iterate over all enumerable properties of the object itself and those the object inherits from its constructor's prototype (properties closer to the object in the prototype chain override prototypes' properties).\n<pre><code>var obj = {a:1, b:2, c:3};\n    \nfor (var prop in obj) {\n  console.log("obj." + prop + " = " + obj[prop]);\n}\n\n// Output:\n// "obj.a = 1"\n// "obj.b = 2"\n// "obj.c = 3"</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in
for...of	A										<pre><code>for (variable of iterable) {\n  statement\n}\n</code></pre>The for...of statement creates a loop iterating over iterable objects (including Array, Map, Set, String, TypedArray, arguments object and so on), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\nYou can use const instead of let too, if you don't modify the variable inside the block.\n<pre><code>let iterable = [10, 20, 30];\n\nfor (let value of iterable) {\n  console.log(value);\n}\n// 10\n// 20\n// 30\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of
for each...in	A										<pre><code>for each (variable in object) {\n  statement\n}</code></pre>The for each...in statement iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.\nSome built-in properties are not iterated over. These include all built-in methods of objects, e.g. String's indexOf method. However, all user-defined properties are iterated over.\n<pre><code>var sum = 0;\nvar obj = {prop1: 5, prop2: 13, prop3: 8};\n\nfor each (var item in obj) {\n  sum += item;\n}\n\nconsole.log(sum); // logs "26", which is 5+13+8</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in
function	A										<pre><code>function name([param,[, param,[..., param]]]) {\n   [statements]\n}\n</code></pre>The function declaration defines a function with the specified parameters.\nA function created with a function declaration is a Function object and has all the properties, methods and behavior of Function objects. See Function for detailed information on functions.\n<pre><code>hoisted(); // logs "foo"\n\nfunction hoisted() {\n  console.log("foo");\n}\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function
function*	A										<pre><code>function* name([param[, param[, ... param]]]) {\n   statements\n}\n</code></pre>The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n<pre><code>function* idMaker(){\n  var index = 0;\n  while(index &lt; 3)\n    yield index++;\n}\n\nvar gen = idMaker();\n\nconsole.log(gen.next().value); // 0\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\nconsole.log(gen.next().value); // undefined\n// ...</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*
if...else	A										<pre><code>if (condition)\n   statement1\n[else\n   statement2]\n</code></pre>The if statement executes a statement if a specified condition is true. If the condition is false, another statement can be executed.\nMultiple if...else statements can be nested to create an else if clause. Note that there is no elseif (in one word) keyword in JavaScript.\n<pre><code>if (condition1)\n   statement1\nelse if (condition2)\n   statement2\nelse if (condition3)\n   statement3\n...\nelse\n   statementN\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else
import	A										<pre><code>import defaultMember from "module-name";\nimport * as name from "module-name";\nimport { member } from "module-name";\nimport { member as alias } from "module-name";\nimport { member1 , member2 } from "module-name";\nimport { member1 , member2 as alias2 , [...] } from "module-name";\nimport defaultMember, { member [ , [...] ] } from "module-name";\nimport defaultMember, * as name from "module-name";\nimport "module-name";</code></pre>The import statement is used to import functions, objects or primitives that have been exported from an external module, another script, etc.\nThe&#160;name&#160;parameter is the name of the object that will receive the exported members. The&#160;member parameters specify individual members, while the&#160;name parameter imports all of them. name may also be a function if the module exports a single default parameter rather than a series of members. Below are examples to clarify the syntax.\n<pre><code>import * as myModule from "my-module";\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import
label	A										<pre><code>label :\n   statement\n</code></pre>The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.\nYou can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution.\n<pre><code>var i, j;\n\nloop1:\nfor (i = 0; i &lt; 3; i++) {      //The first for statement is labeled "loop1"\n   loop2:\n   for (j = 0; j &lt; 3; j++) {   //The second for statement is labeled "loop2"\n      if (i === 1 &amp;&amp; j === 1) {\n         continue loop1;\n      }\n      console.log("i = " + i + ", j = " + j);\n   }\n}\n\n// Output is:\n//   "i = 0, j = 0"\n//   "i = 0, j = 1"\n//   "i = 0, j = 2"\n//   "i = 1, j = 0"\n//   "i = 2, j = 0"\n//   "i = 2, j = 1"\n//   "i = 2, j = 2"\n// Notice how it skips both "i = 1, j = 1" and "i = 1, j = 2"\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label
Legacy generator function	A										<pre><code>function name([param,[, param,[..., param]]]) {\n   [statements]\n}\n</code></pre>The legacy generator function statement declares legacy generator functions with the specified parameters.\nAn overview of the usage is available on the Iterators and Generators page.	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function
let	A										<pre><code>let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]];</code></pre>The let statement declares a block scope local variable, optionally initializing it to a value.\nlet allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used. This is unlike the var keyword, which defines a variable globally, or locally to an entire function regardless of block scope.\n<pre><code>function varTest() {\n  var x = 1;\n  if (true) {\n    var x = 2;  // same variable!\n    console.log(x);  // 2\n  }\n  console.log(x);  // 2\n}\n\nfunction letTest() {\n  let x = 1;\n  if (true) {\n    let x = 2;  // different variable\n    console.log(x);  // 2\n  }\n  console.log(x);  // 1\n}\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
return	A										<pre><code>return [[expression]]; </code></pre>The return statement ends function execution and specifies a value to be returned to the function caller.\nWhen a return statement is called in a function, the execution of this function is stopped. If specified, a given value is returned to the function caller. If the expression is omitted, undefined is returned instead. The following return statements all break the function execution:\n<pre><code>return;\nreturn true;\nreturn false;\nreturn x;\nreturn x + y / 3;\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return
switch	A										<pre><code>switch (expression) {\n  case value1:\n    //Statements executed when the result of expression matches value1\n    [break;]\n  case value2:\n    //Statements executed when the result of expression matches value2\n    [break;]\n  ...\n  case valueN:\n    //Statements executed when the result of expression matches valueN\n    [break;]\n  default:\n    //Statements executed when none of the values match the value of the expression\n    [break;]\n}</code></pre>The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.\nA switch statement first evaluates its expression. It then looks for the first case clause whose expression evaluates to the same value as the result of the input expression (using strict comparison, ===) and transfers control to that clause, executing the associated statements. (If multiple cases match the provided value, the first case that matches is selected, even if the cases are not equal to each other.) If no matching case clause is found, the program looks for the optional default clause, and if found, transfers control to that clause, executing the associated statements. If no default clause is found, the program continues execution at the statement following the end of switch. By convention, the default clause is the last clause, but it does not need to be so.\n<pre><code>switch (expr) {\n  case "Oranges":\n    console.log("Oranges are $0.59 a pound.");\n    break;\n  case "Apples":\n    console.log("Apples are $0.32 a pound.");\n    break;\n  case "Bananas":\n    console.log("Bananas are $0.48 a pound.");\n    break;\n  case "Cherries":\n    console.log("Cherries are $3.00 a pound.");\n    break;\n  case "Mangoes":\n  case "Papayas":\n    console.log("Mangoes and papayas are $2.79 a pound.");\n    break;\n  default:\n    console.log("Sorry, we are out of " + expr + ".");\n}\n\nconsole.log("Is there anything else you'd like?");\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch
throw	A										<pre><code>throw expression; </code></pre>The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.\nUse the throw statement to throw an exception. When you throw an exception, expression specifies the value of the exception. Each of the following throws an exception:\n<pre><code>throw "Error2"; // generates an exception with a string value\nthrow 42;       // generates an exception with the value 42\nthrow true;     // generates an exception with the value true</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw
try...catch	A										<pre><code>try {\n   try_statements\n}\n[catch (exception_var_1 if condition_1) { // non-standard\n   catch_statements_1\n}]\n...\n[catch (exception_var_2) {\n   catch_statements_2\n}]\n[finally {\n   finally_statements\n}]\n</code></pre>The try...catch statement marks a block of statements to try, and specifies a response, should an exception be thrown.\nThe try statement consists of a try block, which contains one or more statements ({} must always be used, also for single statements), and at least one catch clause or a finally clause, or both. That is, there are three forms of the try statement:\n<pre><code>try {\n   throw "myException"; // generates an exception\n}\ncatch (e) {\n   // statements to handle any exceptions\n   logMyErrors(e); // pass exception object to error handler\n}\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch
var	A										<pre><code>var varname1 [= value1] [, varname2 [= value2] ... [, varnameN [= valueN]]]];</code></pre>The variable statement declares a variable, optionally initializing it to a value.\nVariable declarations, wherever they occur, are processed before any code is executed. The scope of a variable declared with var is its current execution context, which is either the enclosing function or, for variables declared outside any function, global.\n<pre><code>function x() {\n  y = 1;   // Throws a ReferenceError in strict mode\n  var z = 2;\n}\n\nx();\n\nconsole.log(y); // logs "1" \nconsole.log(z); // Throws a ReferenceError: z is not defined outside x\n</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var
while	A										<pre><code>while (condition) {\n  statement\n}</code></pre>The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\nThe following while loop iterates as long as n is less than three.\n<pre><code>var n = 0;\nvar x = 0;\n\nwhile (n &lt; 3) {\n  n++;\n  x += n;\n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while
with	A										<pre><code>with (expression)\n  statement\n</code></pre>The with statement extends the scope chain for a statement.\nJavaScript looks up an unqualified name by searching a scope chain associated with the execution context of the script or function containing that unqualified name. The 'with' statement adds the given object to the head of this scope chain during the evaluation of its statement body. If an unqualified name used in the body matches a property in the scope chain, then the name is bound to the property and the object containing the property. Otherwise a ReferenceError is thrown.\n<pre><code>function f(x, o) {\n  with (o) {\n    console.log(x);\n  }\n}</code></pre>	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with
bluetoothdevice name	R	BluetoothDevice.name										
broadcastchannel name	R	BroadcastChannel.name										
credential name	R	name										
element name	R	Element.name										
file name	R	File.name										
filesystem name	R	FileSystem.name										
htmlformelement name	R	HTMLFormElement.name										
htmlslotelement name	R	HTMLSlotElement.name										
idbdatabase name	R	IDBDatabase.name										
idbindex name	R	IDBIndex.name										
idbmutablefile name	R	FileHandle.name										
idbobjectstore name	R	IDBObjectStore.name										
performanceentry name	R	PerformanceEntry.name										
global name	R	SharedWorkerGlobalScope.name										
speechsynthesisevent name	R	SpeechSynthesisEvent.name										
speechsynthesisvoice name	R	SpeechSynthesisVoice.name										
webglactiveinfo name	R	WebGLActiveInfo.name										
window name	R	Window.name										
error name	R	Error.prototype.name										
function name	R	Function.name										
length	D								*[[AudioBuffer.length]] A float.\n*[[CSSValueList.length]] The length read-only property of the CSSValueList interface represents the number of CSSValue s in the list.\n*[[DataTransferItemList.length]] The read-only DataTransferItemList.\n*[[History.length]] The History.\n*[[HTMLFormElement.length]] The HTMLFormElement.\n*[[NodeList.length]] length returns the number of items in a NodeList.\n*[[OfflineAudoContext.length]] The length property of the OfflineAudioContext interface returns an integer representing the size of the buffer in sample-frames.\n*[[SourceBufferList.length]] The length read-only property of the SourceBufferList interface returns the number of SourceBuffer objects in the list.\n*[[SpeechGrammarList.length]] The length read-only property of the SpeechGrammarList interface returns the number of SpeechGrammar objects contained in the SpeechGrammarList.\n*[[SpeechRecognitionResult.length]] The length read-only property of the SpeechRecognitionResult interface returns the length of the "array" — the number of SpeechRecognitionAlternative objects contained in the result (also referred to as "n-best alternatives".\n*[[SpeechRecognitionResultList.length]] The length read-only property of the SpeechRecognitionResultList interface returns the length of the "array" — the number of SpeechRecognitionResult objects in the list.\n*[[Storage.length]] The length read-only property of the Storage interface returns an integer representing the number of data items stored in the Storage object.\n*[[TimeRanges.length]] The TimeRanges.\n*[[TouchList.length]] This read-only property indicates the number of items (touch points) in a TouchList.\n*[[TrackDefaultList.length]] The length read-only property of the TrackDefaultList interface returns the number of TrackDefault objects in the list.\n*[[Window.length]] Returns the number of frames (either &lt;frame&gt; or &lt;iframe&gt; elements) in the window.\n*[[arguments.length]] The arguments.\n*[[array.length]] The length property represents an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.\n*[[Function.length]] The length property specifies the number of arguments expected by the function.\n*[[String.prototype.length]] The length property represents the length of a string.			
audiobuffer length	R	AudioBuffer.length										
cssvaluelist length	R	CSSValueList.length										
datatransferitemlist length	R	DataTransferItemList.length										
history length	R	History.length										
htmlformelement length	R	HTMLFormElement.length										
nodelist length	R	NodeList.length										
offlineaudiocontext length	R	OfflineAudoContext.length										
sourcebufferlist length	R	SourceBufferList.length										
speechgrammarlist length	R	SpeechGrammarList.length										
speechrecognitionresult length	R	SpeechRecognitionResult.length										
speechrecognitionresultlist length	R	SpeechRecognitionResultList.length										
storage length	R	Storage.length										
timeranges length	R	TimeRanges.length										
touchlist length	R	TouchList.length										
trackdefaultlist length	R	TrackDefaultList.length										
window length	R	Window.length										
arguments length	R	arguments.length										
array length	R	array.length										
function length	R	Function.length										
string length	R	String.prototype.length										
biquadfilternode type	R	BiquadFilterNode.type										
blob type	R	Blob.type										
credential type	R	type										
cryptokey type	R	CryptoKey.type										
datatransferitem type	R	DataTransferItem.type										
event type	R	Event.type										
htmlselectelement type	R	HTMLSelectElement.type										
htmlstyleelement type	R	HTMLStyleElement.type										
idbmutablefile type	R	FileHandle.type										
networkinformation type	R	NetworkInformation.type										
oscillatornode type	R	OscillatorNode.type										
performancenavigation type	R	PerformanceNavigation.type										
performancenavigationtiming type	R	PerformanceNavigationTiming.type										
response type	R	Response.type										
rtcsessiondescription type	R	RTCSessionDescription.type										
stylesheet type	R	StyleSheet.type										
trackdefault type	R	TrackDefault.type										
webglactiveinfo type	R	WebGLActiveInfo.type										
onerror	D								*[[AbstractWorker.onerror]] The AbstractWorker.\n*[[GlobalEventHandlers.onerror]] An event handler for the error event.\n*[[IDBDatabase.onerror]] This example shows an IDBOpenDBRequest.\n*[[FileHandle.onerror]] Specifies an event listener to receive error events.\n*[[IDBRequest.onerror]] The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.\n*[[IDBTransaction.onerror]] In the following code snippet, we open a read/write transaction on our database and add some data to an object store.\n*[[LockedFile.onerror]] Specifies an event listener to receive error events.\n*[[MediaRecorder.onerror]] The MediaRecorder.\n*[[Notification.onerror]] The onerror property of the Notification interface specifies an event listener to receive error events.\n*[[RTCDataChannel.onerror]] The RTCDataChannel.\n*[[ServiceWorkerContainer.onerror]] The onerror property of the ServiceWorkerContainer interface is an event handler fired whenever an error event occurs in the associated service workers.\n*[[SpeechRecognition.onerror]] The onerror property of the SpeechRecognition interface represents an event handler that will run when a speech recognition error occurs (when the error event fires.\n*[[SpeechSynthesisUtterance.onerror]] The onerror property of the SpeechSynthesisUtterance interface represents an event handler that will run when an error occurs that prevents the utterance from being succesfully spoken (when the error event fires.\n*[[WorkerGlobalScope.onerror]] The onerror property of the WorkerGlobalScope interface represents an EventHandler to be called when the error event occurs and bubbles through the Worker.\n*[[XMLHttpRequestEventTarget.onerror]] The XMLHttpRequestEventTarget.			
abstractworker onerror	R	AbstractWorker.onerror										
global onerror	R	GlobalEventHandlers.onerror										
idbdatabase onerror	R	IDBDatabase.onerror										
idbmutablefile onerror	R	FileHandle.onerror										
idbrequest onerror	R	IDBRequest.onerror										
idbtransaction onerror	R	IDBTransaction.onerror										
lockedfile onerror	R	LockedFile.onerror										
mediarecorder onerror	R	MediaRecorder.onerror										
notification onerror	R	Notification.onerror										
rtcdatachannel onerror	R	RTCDataChannel.onerror										
serviceworkercontainer onerror	R	ServiceWorkerContainer.onerror										
speechrecognition onerror	R	SpeechRecognition.onerror										
speechsynthesisutterance onerror	R	SpeechSynthesisUtterance.onerror										
global onerror	R	WorkerGlobalScope.onerror										
xmlhttprequesteventtarget onerror	R	XMLHttpRequestEventTarget.onerror										
tostring	D								*[[HTMLHyperlinkElementUtils.toString()]] The HTMLHyperlinkElementUtils.\n*[[Range.toString()]] The Range.\n*[[Selection.toString()]] The Selection.\n*[[URLSearchParams.toString()]] The toString() method of the URLSearchParams interface returns a string containg a query string suitable for use in a URL.\n*[[URLUtilsReadOnly.toString()]] The URLUtilsReadOnly.\n*[[Array.prototype.toString]] The toString() method returns a string representing the specified array and its elements.\n*[[Boolean.prototype.toString]] The toString() method returns a string representing the specified Boolean object.\n*[[Date.prototype.toString]] The toString() method returns a string representing the specified Date object.\n*[[Error.prototype.toString]] The toString() method returns a string representing the specified Error object.\n*[[Function.prototype.toString]] The toString() method returns a string representing the source code of the function.\n*[[Number.prototype.toString]] The toString() method returns a string representing the specified Number object.\n*[[Object.prototype.toString]] The toString() method returns a string representing the object.\n*[[RegExp.prototype.toString]] The toString() method returns a string representing the regular expression.\n*[[String.prototype.toString]] The toString() method returns a string representing the specified object.			
htmlhyperlinkelementutils tostring	R	HTMLHyperlinkElementUtils.toString()										
range tostring	R	Range.toString()										
selection tostring	R	Selection.toString()										
urlsearchparams tostring	R	URLSearchParams.toString()										
urlutilsreadonly tostring	R	URLUtilsReadOnly.toString()										
array tostring	R	Array.prototype.toString										
boolean tostring	R	Boolean.prototype.toString										
date tostring	R	Date.prototype.toString										
error tostring	R	Error.prototype.toString										
function tostring	R	Function.prototype.toString										
number tostring	R	Number.prototype.toString										
object tostring	R	Object.prototype.toString										
regexp tostring	R	RegExp.prototype.toString										
string tostring	R	String.prototype.toString										
audiocontext close	R	AudioContext.close()										
broadcastchannel close	R	BroadcastChannel.close()										
document close	R	Document.close()										
idbdatabase close	R	IDBDatabase.close()										
imagebitmap close	R	ImageBitmap.close()										
mediakeysession close	R	close()										
messageport close	R	MessagePort.close()										
notification close	R	Notification.close()										
presentationconnection close	R	close										
rtcdatachannel close	R	RTCDataChannel.close()										
rtcpeerconnection close	R	RTCPeerConnection.close()										
window close	R	Window.close()										
global close	R	WorkerGlobalScope.close()										
animation id	R	Animation.id										
bluetoothdevice id	R	id										
client id	R	Client.id										
credential id	R	id										
element id	R	Element.id										
gamepad id	R	Gamepad.id										
mediastream id	R	MediaStream.id										
mediastreamtrack id	R	MediaStreamTrack.id										
navigator id	R	Navigator.id										
presentationconnection id	R	id										
rtcdatachannel id	R	RTCDataChannel.id										
syncregistration id	R	id										
get	D								*[[Clients.get()]] The get () method of the Clients interface gets a service worker client matching a given id and returns it in a Promise.\n*[[CredentialsContainer.get()]] The get() method of the CredentialsContainer interface returns a Promise to a Credential instance that matches the provided parameters.\n*[[FormData.get()]] The get() method of the FormData interface returns the first value associated with a given key from within a FormData object.\n*[[Headers.get()]] The get() method of the Headers interface returns the first value of a given header from within a Headers object.\n*[[IDBIndex.get()]] If a value is successfully found, then a structured clone of it is created and set as the result of the request object: this returns the record the key is associated with.\n*[[IDBObjectStore.get()]] If a value is successfully found, then a structured clone of it is created and set as the result of the request object.\n*[[IdentityManager.get()]] This function enables a web site to use BrowserID to authenticate its users.\n*[[MediaKeyStatusMap.get()]] The get property of the MediaKeyStatusMap interface returns the value associated with the given key or undefined if there is none.\n*[[URLSearchParams.get()]] The get() method of the URLSearchParams interface returns the first value associated to the given search parameter.\n*[[getter]] The get syntax binds an object property to a function that will be called when that property is looked up.			
clients get	R	Clients.get()										
credentialscontainer get	R	CredentialsContainer.get()										
formdata get	R	FormData.get()										
headers get	R	Headers.get()										
idbindex get	R	IDBIndex.get()										
idbobjectstore get	R	IDBObjectStore.get()										
identitymanager get	R	IdentityManager.get()										
mediakeystatusmap get	R	MediaKeyStatusMap.get()										
urlsearchparams get	R	URLSearchParams.get()										
functions get syntax	R	getter										
functions get example	R	getter										
get	R	getter										
get syntax	R	getter										
get example	R	getter										
functions get	R	getter										
width	D								*[[DOMRectReadOnly.width]] The width read-only property of the DOMRectReadOnly interface represents the width of the DOMRect.\n*[[HTMLCanvasElement.width]] The HTMLCanvasElement.\n*[[HTMLTableElement.width]] Where width is a string representing the width in number of pixels or as a percentage value.\n*[[ImageBitmap.width]] The read-only ImageBitmap.\n*[[ImageData.width]] The readonly ImageData.\n*[[OffscreenCanvas.width]] The width property returns and sets the width of an OffscreenCanvas object.\n*[[PointerEvent.width]] The width of the pointer's contact geometry&#160;along the x-axis, measured in CSS pixels.\n*[[Screen.width]] Returns the width of the screen.\n*[[TextMetrics.width]] The readonly TextMetrics.			
domrectreadonly width	R	DOMRectReadOnly.width										
htmlcanvaselement width	R	HTMLCanvasElement.width										
htmltableelement width	R	HTMLTableElement.width										
imagebitmap width	R	ImageBitmap.width										
imagedata width	R	ImageData.width										
offscreencanvas width	R	OffscreenCanvas.width										
pointerevent width	R	PointerEvent.width										
screen width	R	Screen.width										
textmetrics width	R	TextMetrics.width										
prototype	D								*[[Array.prototype]] The Array.\n*[[Boolean.prototype]] The Boolean.\n*[[Date.prototype]] The Date.\n*[[Error.prototype]] The Error.\n*[[Function.prototype]] The Function.\n*[[Number.prototype]] The Number.\n*[[Object.prototype]] The Object.\n*[[RegExp.prototype]] The RegExp.\n*[[String.prototype]] The String.			
array prototype	R	Array.prototype										
boolean prototype	R	Boolean.prototype										
date prototype	R	Date.prototype										
error prototype	R	Error.prototype										
function prototype	R	Function.prototype										
number prototype	R	Number.prototype										
object prototype	R	Object.prototype										
regexp prototype	R	RegExp.prototype										
string prototype	R	String.prototype										
console error	R	Console.error()										
filereader error	R	FileReader.error										
htmlmediaelement error	R	HTMLMediaElement.error										
idbrequest error	R	IDBRequest.error										
idbtransaction error	R	IDBTransaction.error										
response error	R	Response.error()										
speechrecognitionerror error	R	SpeechRecognitionError.error										
speechsynthesiserrorevent error	R	SpeechSynthesisErrorEvent.error										
global error	R	Error										
audioparam value	R	AudioParam.value										
bluetoothgattdescriptor value	R	value										
bluetoothremotegattcharacteristic value	R	BluetoothRemoteGATTCharacteristic.value										
devicelightevent value	R	DeviceLightEvent.value										
deviceproximityevent value	R	DeviceProximityEvent.value										
gamepadbutton value	R	GamepadButton.value										
idbcursorwithvalue value	R	IDBCursorWithValue.value										
presentationavailability value	R	value										
radionodelist value	R	RadioNodeList.value										
tosource	D								*[[Array.prototype.toSource()]] The toSource() method returns a string representing the source code of the array.\n*[[Boolean.prototype.toSource()]] The toSource() method returns a string representing the source code of the object.\n*[[Date.prototype.toSource()]] The toSource() method returns a string representing the source code of the object.\n*[[Error.prototype.toSource()]] The toSource() method returns code that could eval to the same error.\n*[[Function.prototype.toSource()]] The toSource() method returns a string representing the source code of the object.\n*[[Number.prototype.toSource()]] The toSource() method returns a string representing the source code of the object.\n*[[Object.prototype.toSource()]] The toSource() method returns a string representing the source code of the object.\n*[[RegExp.prototype.toSource()]] The toSource() method returns a string representing the source code of the object.\n*[[String.prototype.toSource()]] The toSource() method returns a string representing the source code of the object.			
array tosource	R	Array.prototype.toSource()										
boolean tosource	R	Boolean.prototype.toSource()										
date tosource	R	Date.prototype.toSource()										
error tosource	R	Error.prototype.toSource()										
function tosource	R	Function.prototype.toSource()										
number tosource	R	Number.prototype.toSource()										
object tosource	R	Object.prototype.toSource()										
regexp tosource	R	RegExp.prototype.toSource()										
string tosource	R	String.prototype.toSource()										
delete	D								*[[Cache.delete()]] The delete() method of the Cache interface finds the Cache entry whose key is the request, and if found, deletes the Cache entry and returns a Promise that resolves to true.\n*[[CacheStorage.delete()]] The delete () method of the CacheStorage interface finds the Cache object matching the cacheName, and if found, deletes the Cache object and returns a Promise that resolves to true.\n*[[FormData.delete()]] The delete() method of the FormData interface deletes a key and its value(s) from a FormData object.\n*[[Headers.delete()]] The delete() method of the Headers interface deletes a header from the current Headers object.\n*[[IDBCursor.delete()]] An IDBRequest object on which subsequent events related to this operation are fired.\n*[[IDBObjectStore.delete()]] An IDBRequest object on which subsequent events related to this operation are fired.\n*[[URLSearchParams.delete()]] The delete() method of the URLSearchParams interface deletes the given search parameter and its associated value, from the list of all search parameters.\n*[[delete operator]] The delete operator removes a property from an object.			
cache delete	R	Cache.delete()										
cachestorage delete	R	CacheStorage.delete()										
formdata delete	R	FormData.delete()										
headers delete	R	Headers.delete()										
idbcursor delete	R	IDBCursor.delete()										
idbobjectstore delete	R	IDBObjectStore.delete()										
urlsearchparams delete	R	URLSearchParams.delete()										
operators delete syntax	R	delete operator										
operators delete example	R	delete operator										
delete	R	delete operator										
delete syntax	R	delete operator										
delete example	R	delete operator										
operators delete	R	delete operator										
item	D								*[[CSSValueList.item()]] The item() method of the CSSValueList interface is used to retrieve a CSSValue by ordinal index.\n*[[HTMLCollection.item]] HTMLCollection.\n*[[HTMLSelectElement.item()]] The HTMLSelectElement.\n*[[NodeList.item()]] Returns a node from a NodeList by index.\n*[[SpeechGrammarList.item()]] The item getter of the SpeechGrammarList interface is a standard getter — it allows individual SpeechGrammar objects to be retrieved from the SpeechGrammarList using array syntax.\n*[[SpeechRecognitionResult.item()]] The item getter of the SpeechRecognitionResult interface is a standard getter that allows SpeechRecognitionAlternative objects within the result to be accessed via array syntax.\n*[[SpeechRecognitionResultList.item()]] The item getter of the SpeechRecognitionResultList interface is a standard getter — it allows SpeechRecognitionResult objects in the list to be accessed via array syntax.\n*[[TouchList.item()]] Returns the Touch object at the specified index in the TouchList.			
cssvaluelist item	R	CSSValueList.item()										
htmlcollection item	R	HTMLCollection.item										
htmlselectelement item	R	HTMLSelectElement.item()										
nodelist item	R	NodeList.item()										
speechgrammarlist item	R	SpeechGrammarList.item()										
speechrecognitionresult item	R	SpeechRecognitionResult.item()										
speechrecognitionresultlist item	R	SpeechRecognitionResultList.item()										
touchlist item	R	TouchList.item()										
keys	D								*[[Cache.keys()]] The keys() method of the Cache interface returns a Promise that resolves to an array of Cache keys.\n*[[CacheStorage.keys()]] The keys () method of the CacheStorage interface returns a Promise that will resolve with an array containing strings corresponding to all of the named Cache objects tracked by the CacheStorage object in the order they were created.\n*[[FormData.keys()]] The FormData.\n*[[Headers.keys()]] The Headers.\n*[[MediaKeyStatusMap.keys()]] The keys property of the MediaKeyStatusMap interface returns a new Iterator object containing keys for each element in the status map, in insertion order.\n*[[URLSearchParams.keys()]] The URLSearchParams.\n*[[Array.prototype.keys()]] The keys() method returns a new Array Iterator that contains the keys for each index in the array.\n*[[Object.keys]] The Object.			
cache keys	R	Cache.keys()										
cachestorage keys	R	CacheStorage.keys()										
formdata keys	R	FormData.keys()										
headers keys	R	Headers.keys()										
mediakeystatusmap keys	R	MediaKeyStatusMap.keys()										
urlsearchparams keys	R	URLSearchParams.keys()										
array keys	R	Array.prototype.keys()										
object keys	R	Object.keys										
readystate	D								*[[Document.readyState]] The Document.\n*[[FileReader.readyState]] Provides the current state of the reading operation.\n*[[HTMLMediaElement.readyState]] The HTMLMediaElement.\n*[[IDBRequest.readyState]] The IDBRequestReadyState of the request, which takes one of the following two values:\n*[[MediaSource.readyState]] The readyState read-only property of the MediaSource interface returns an enum representing the state of the current MediaSource.\n*[[MediaStreamTrack.readyState]] The read-only property MediaStreamTrack.\n*[[RTCDataChannel.readyState]] The read-only RTCDataChannel property readyState returns an enum of type RTCDataChannelState which indicates the state of the data channel's underlying data connection.\n*[[XMLHttpRequest.readyState]] The XMLHttpRequest.			
document readystate	R	Document.readyState										
filereader readystate	R	FileReader.readyState										
htmlmediaelement readystate	R	HTMLMediaElement.readyState										
idbrequest readystate	R	IDBRequest.readyState										
mediasource readystate	R	MediaSource.readyState										
mediastreamtrack readystate	R	MediaStreamTrack.readyState										
rtcdatachannel readystate	R	RTCDataChannel.readyState										
xmlhttprequest readystate	R	XMLHttpRequest.readyState										
height	D								*[[DOMRectReadOnly.height]] The height read-only property of the DOMRectReadOnly interface represents the height of the DOMRect.\n*[[HTMLCanvasElement.height]] The HTMLCanvasElement.\n*[[ImageBitmap.height]] The read-only ImageBitmap.\n*[[ImageData.height]] The readonly ImageData.\n*[[OffscreenCanvas.height]] The height property returns and sets the height of an OffscreenCanvas object.\n*[[PointerEvent.height]] The height of the pointer's contact geometry, along the Y axis (in CSS pixels).\n*[[Screen.height]] Returns the height of the screen in pixels.			
domrectreadonly height	R	DOMRectReadOnly.height										
htmlcanvaselement height	R	HTMLCanvasElement.height										
imagebitmap height	R	ImageBitmap.height										
imagedata height	R	ImageData.height										
offscreencanvas height	R	OffscreenCanvas.height										
pointerevent height	R	PointerEvent.height										
screen height	R	Screen.height										
filereader abort	R	FileReader.abort()										
idbtransaction abort	R	IDBTransaction.abort()										
lockedfile abort	R	LockedFile.abort()										
paymentrequest abort	R	abort										
sourcebuffer abort	R	SourceBuffer.abort()										
speechrecognition abort	R	SpeechRecognition.abort()										
xmlhttprequest abort	R	XMLHttpRequest.abort()										
onmessage	D								*[[BroadcastChannel.onmessage]] The BroadcastChannel.\n*[[DedicatedWorkerGlobalScope.onmessage]] The onmessage property of the DedicatedWorkerGlobalScope interface represents an EventHandler to be called when the message event occurs and bubbles through the Worker &#8212; i.\n*[[MessagePort.onmessage]] The onmessage event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type message is fired on the port — that is, when the port receives a message.\n*[[RTCDataChannel.onmessage]] The RTCDataChannel.\n*[[ServiceWorkerContainer.onmessage]] The onmessage property of the ServiceWorkerContainer interface is an event handler fired whenever a message event occurs — when incoming messages are received to the ServiceWorkerContainer object (e.\n*[[ServiceWorkerGlobalScope.onmessage]] The ServiceWorkerGlobalScope.\n*[[Worker.onmessage]] The onmessage property of the Worker interface represents an EventHandler, that is a function to be called when the message event occurs.			
broadcastchannel onmessage	R	BroadcastChannel.onmessage										
global onmessage	R	DedicatedWorkerGlobalScope.onmessage										
messageport onmessage	R	MessagePort.onmessage										
rtcdatachannel onmessage	R	RTCDataChannel.onmessage										
serviceworkercontainer onmessage	R	ServiceWorkerContainer.onmessage										
global onmessage	R	ServiceWorkerGlobalScope.onmessage										
worker onmessage	R	Worker.onmessage										
audiobuffersourcenode start	R	AudioBufferSourceNode.start()										
mediarecorder start	R	MediaRecorder.start()										
messageport start	R	MessagePort.start()										
oscillatornode start	R	OscillatorNode.start()										
presentationrequest start	R	start										
speechrecognition start	R	SpeechRecognition.start()										
timeranges start	R	TimeRanges.start()										
tojson	D								*[[Performance.toJSON()]] The toJSON() method of the Performance interface is a standard serializer: it returns a JSON representation of the performance object's properties.\n*[[PerformanceEntry.toJSON()]] The toJSON() method is a serializer ; it returns a JSON representation of the performance entry object.\n*[[PerformanceNavigationTiming.toJSON()]] The toJSON() method is a serializer - it returns a JSON representation of the PerformanceNavigationTiming object.\n*[[PerformanceResourceTiming.toJSON()]] The toJSON() method is a serializer that returns a JSON representation of the PerformanceResourceTiming object.\n*[[PushSubscription.toJSON()]] The toJSON() method of the PushSubscription interface is a standard serializer: it returns a JSON representation of the subscription properties, providing a useful shortcut.\n*[[RTCSessionDescription.toJSON()]] The RTCPeerConnection.\n*[[Date.prototype.toJSON]] The toJSON() method returns a string representation of the Date object.			
performance tojson	R	Performance.toJSON()										
performanceentry tojson	R	PerformanceEntry.toJSON()										
performancenavigationtiming tojson	R	PerformanceNavigationTiming.toJSON()										
performanceresourcetiming tojson	R	PerformanceResourceTiming.toJSON()										
pushsubscription tojson	R	PushSubscription.toJSON()										
rtcsessiondescription tojson	R	RTCSessionDescription.toJSON()										
date tojson	R	Date.prototype.toJSON										
stop	D								*[[AudioBufferSourceNode.stop()]] The most simple example just stops the audio buffer playing immediately — you don't need to specify any parameters in this case:\n*[[HTMLIFrameElement.stop()]] The stop() method of the HTMLIFrameElement interface is used to stop loading the content of the iframe.\n*[[MediaRecorder.stop()]] The MediaRecorder.\n*[[MediaStreamTrack.stop()]] The MediaStreamTrack.\n*[[OscillatorNode.stop()]] The following example shows basic usage of an AudioContext to create an oscillator node.\n*[[SpeechRecognition.stop()]] The start() method of the Web Speech API stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far.\n*[[Window.stop()]] This method stops window loading.			
audiobuffersourcenode stop	R	AudioBufferSourceNode.stop()										
htmliframeelement stop	R	HTMLIFrameElement.stop()										
mediarecorder stop	R	MediaRecorder.stop()										
mediastreamtrack stop	R	MediaStreamTrack.stop()										
oscillatornode stop	R	OscillatorNode.stop()										
speechrecognition stop	R	SpeechRecognition.stop()										
window stop	R	Window.stop()										
client url	R	Client.url										
document url	R	Document.URL										
request url	R	Request.url										
response url	R	Response.url										
api url	R	URL										
url url	R	URL()										
window url	R	Window.URL										
entries	D								*[[FormData.entries()]] The FormData.\n*[[Headers.entries()]] The Headers.\n*[[MediaKeyStatusMap.entries()]] The entries() read-only property of the MediaKeyStatusMap interface returns a new Iterator object containing an array of [key, value] pairs for each element in the status map, in insertion order.\n*[[URLSearchParams.entries()]] The URLSearchParams.\n*[[Array.prototype.entries()]] The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.\n*[[Object.entries()]] The Object.			
formdata entries	R	FormData.entries()										
headers entries	R	Headers.entries()										
mediakeystatusmap entries	R	MediaKeyStatusMap.entries()										
urlsearchparams entries	R	URLSearchParams.entries()										
array entries	R	Array.prototype.entries()										
object entries	R	Object.entries()										
values	D								*[[FormData.values()]] The FormData.\n*[[Headers.values()]] The Headers.\n*[[MediaKeyStatusMap.values()]] The values property of the MediaKeyStatusMap interface returns a new Iterator object containing values for each element in the status map, in insertion order.\n*[[URLSearchParams.values()]] The URLSearchParams.\n*[[Array.prototype.values()]] The values() method returns a new Array Iterator object that contains the values for each index in the array.\n*[[Object.values()]] The Object.			
formdata values	R	FormData.values()										
headers values	R	Headers.values()										
mediakeystatusmap values	R	MediaKeyStatusMap.values()										
urlsearchparams values	R	URLSearchParams.values()										
array values	R	Array.prototype.values()										
object values	R	Object.values()										
data	D								*[[BlobEvent.data]] The BlobEvent.\n*[[ExtendableMessageEvent.data]] The data read-only property of the ExtendableMessageEvent interface returns the event's data.\n*[[ImageData.data]] The readonly ImageData.\n*[[Notification.data]] The data read-only property of the Notification interface returns a structured clone of the notification's data, as specified in the data option of the Notification() constructor.\n*[[PushEvent.data]] The data read-only property of the PushEvent interface returns a reference to a PushMessageData object containing data sent to the PushSubscription.\n*[[ServiceWorkerMessageEvent.data]] The data read-only property of the ServiceWorkerMessageEvent interface returns the event's data.			
blobevent data	R	BlobEvent.data										
extendablemessageevent data	R	ExtendableMessageEvent.data										
imagedata data	R	ImageData.data										
notification data	R	Notification.data										
pushevent data	R	PushEvent.data										
serviceworkermessageevent data	R	ServiceWorkerMessageEvent.data										
origin	D								*[[Document.origin]] The Document.\n*[[ExtendableMessageEvent.origin]] The origin read-only property of the ExtendableMessageEvent interface returns the origin of the ServiceWorkerClient that sent the message.\n*[[HTMLHyperlinkElementUtils.origin]] The HTMLHyperlinkElementUtils.\n*[[ServiceWorkerMessageEvent.origin]] The origin read-only property of the ServiceWorkerMessageEvent interface returns the origin of the service worker's environment settings object.\n*[[URL.origin]] The URL.\n*[[URLUtilsReadOnly.origin]] The URLUtilsReadOnly.			
document origin	R	Document.origin										
extendablemessageevent origin	R	ExtendableMessageEvent.origin										
htmlhyperlinkelementutils origin	R	HTMLHyperlinkElementUtils.origin										
serviceworkermessageevent origin	R	ServiceWorkerMessageEvent.origin										
url origin	R	URL.origin										
urlutilsreadonly origin	R	URLUtilsReadOnly.origin										
open	D								*[[CacheStorage.open()]] The open() method of the CacheStorage interface returns a Promise that resolves to the Cache object matching the cacheName.\n*[[Document.open()]] The Document.\n*[[IDBFactory.open()]] If an error occurs while the database connection is being opened, then an error event is fired on the request object returned from this method.\n*[[FileHandle.open()]] The open method returns a LockedFile object that allows to safely write in the file.\n*[[Window.open()]] Loads a resource into either a new browsing context (such as a window) or one that already exists, depending on the specified parameters.\n*[[XMLHttpRequest.open()]] The XMLHttpRequest.			
cachestorage open	R	CacheStorage.open()										
document open	R	Document.open()										
idbfactory open	R	IDBFactory.open()										
idbmutablefile open	R	FileHandle.open()										
window open	R	Window.open()										
xmlhttprequest open	R	XMLHttpRequest.open()										
animationeffecttimingproperties duration	R	Duration										
animationeffecttimingreadonly duration	R	AnimationEffectTimingReadOnly.duration										
audiobuffer duration	R	AudioBuffer.duration										
htmlmediaelement duration	R	HTMLMediaElement.duration										
mediasource duration	R	MediaSource.duration										
performanceentry duration	R	PerformanceEntry.duration										
postmessage	D								*[[BroadcastChannel.postMessage()]] The BroadcastChannel.\n*[[Client.postMessage()]] The Client.\n*[[DedicatedWorkerGlobalScope.postMessage()]] The postMessage() method of the DedicatedWorkerGlobalScope interface sends a message to the main thread that spawned it.\n*[[MessagePort.postMessage()]] The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.\n*[[Window.postMessage()]] The window.\n*[[Worker.postMessage()]] The postMessage() method of the Worker interface sends a message to the worker's inner scope.			
broadcastchannel postmessage	R	BroadcastChannel.postMessage()										
client postmessage	R	Client.postMessage()										
global postmessage	R	DedicatedWorkerGlobalScope.postMessage()										
messageport postmessage	R	MessagePort.postMessage()										
window postmessage	R	Window.postMessage()										
worker postmessage	R	Worker.postMessage()										
console timestamp	R	Console.timeStamp()										
event timestamp	R	Event.timeStamp										
gamepad timestamp	R	Gamepad.timestamp										
notification timestamp	R	timestamp										
position timestamp	R	Position.timestamp										
vrpose timestamp	R	VRPose.timestamp										
clear	D								*[[clear()]] Clears the console.\n*[[DataTransferItemList.clear()]] The DataTransferItemList.\n*[[Document.clear()]] This method used to clear the whole specified document in early (pre-1.\n*[[IDBObjectStore.clear()]] Clearing an object store consists of removing all records from the object store and removing all records in indexes that reference the object store.\n*[[Storage.clear()]] The clear() method of the Storage interface, when invoked, will empty all keys out of the storage.\n*[[WebGLRenderingContext.clear()]] The WebGLRenderingContext.			
console clear	R	clear()										
datatransferitemlist clear	R	DataTransferItemList.clear()										
document clear	R	Document.clear()										
idbobjectstore clear	R	IDBObjectStore.clear()										
storage clear	R	Storage.clear()										
webglrenderingcontext clear	R	WebGLRenderingContext.clear()										
source	D								*[[ExtendableMessageEvent.source]] The source read-only property of the ExtendableMessageEvent returns a reference to the Client object from which the message was sent.\n*[[IDBCursor.source]] The IDBObjectStore or IDBIndex that the cursor is iterating over.\n*[[IDBRequest.source]] An object representing the source of the request, such as an IDBIndex, IDBObjectStore or IDBCursor.\n*[[ServiceWorkerMessageEvent.source]] The source read-only property of the ServiceWorkerMessageEvent returns a reference to the ServiceWorker object of the associated service worker that sent the message.\n*[[VRLayer.source]] The source read-only property of the VRLayer interface (dictionary) defines the canvas whose contents will be presented by the VRDisplay.\n*[[RegExp.prototype.source]] The source property returns a String containing the source text of the regexp object, and it doesn't contain the two forward slashes on both sides and any flags.			
extendablemessageevent source	R	ExtendableMessageEvent.source										
idbcursor source	R	IDBCursor.source										
idbrequest source	R	IDBRequest.source										
serviceworkermessageevent source	R	ServiceWorkerMessageEvent.source										
vrlayer source	R	VRLayer.source										
regexp source	R	RegExp.prototype.source										
document location	R	Document.location										
keyboardevent location	R	KeyboardEvent.location										
api location	R	Location										
lockedfile location	R	LockedFile.location										
window location	R	Window.location										
global location	R	WorkerGlobalScope.location										
onabort	D								*[[GlobalEventHandlers.onabort]] An event handler for abort events sent to the window.\n*[[IDBDatabase.onabort]] This example shows an IDBOpenDBRequest.\n*[[FileHandle.onabort]] Specifies an event listener to receive abort events.\n*[[IDBTransaction.onabort]] In the following code snippet, we open a read/write transaction on our database and add some data to an object store.\n*[[LockedFile.onabort]] Specifies an event listener to receive abort events.\n*[[XMLHttpRequestEventTarget.onabort]] The XMLHttpRequestEventTarget.			
global onabort	R	GlobalEventHandlers.onabort										
idbdatabase onabort	R	IDBDatabase.onabort										
idbmutablefile onabort	R	FileHandle.onabort										
idbtransaction onabort	R	IDBTransaction.onabort										
lockedfile onabort	R	LockedFile.onabort										
xmlhttprequesteventtarget onabort	R	XMLHttpRequestEventTarget.onabort										
target	D								*[[Event.target]] A reference to the object that dispatched the event.\n*[[HTMLFormElement.target]] The HTMLFormElement.\n*[[KeyframeEffectReadOnly.target]] The target property of a KeyframeEffectReadOnly or a KeyframeEffect interface represents the element or pseudo-element being animated.\n*[[SVGAElement.target]] The SVGAElement.\n*[[Touch.target]] Returns the Element (EventTarget) on which the touch contact started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.			
event target	R	Event.target										
htmlformelement target	R	HTMLFormElement.target										
keyframeeffectreadonly target	R	KeyframeEffectReadOnly.target										
svgaelement target	R	SVGAElement.target										
touch target	R	Touch.target										
has	D								*[[CacheStorage.has()]] The has() method of the CacheStorage interface returns a Promise that resolves to true if a Cache object matches the cacheName.\n*[[FormData.has()]] The has() method of the FormData interface returns a boolean stating whether a FormData object contains a certain key.\n*[[Headers.has()]] The has() method of the Headers interface returns a boolean stating whether a Headers object contains a certain header.\n*[[MediaKeyStatusMap.has()]] The has property of the MediaKeyStatusMap interface returns a Boolean asserting whether a value has been associated with the given key.\n*[[URLSearchParams.has()]] The has() method of the URLSearchParams interface returns a Boolean that indicates whether a parameter with the specified name exists.			
cachestorage has	R	CacheStorage.has()										
formdata has	R	FormData.has()										
headers has	R	Headers.has()										
mediakeystatusmap has	R	MediaKeyStatusMap.has()										
urlsearchparams has	R	URLSearchParams.has()										
connection onchange	R	Connection.onchange										
global onchange	R	GlobalEventHandlers.onchange										
networkinformation onchange	R	NetworkInformation.onchange										
permissionstatus onchange	R	PermissionStatus.onchange										
presentationavailability onchange	R	onchange										
referrerpolicy	D								*[[HTMLAnchorElement.referrerPolicy]] The HTMLAnchorElement.\n*[[HTMLAreaElement.referrerPolicy]] The HTMLAreaElement.\n*[[HTMLIFrameElement.referrerPolicy]] The HTMLIFrameElement.\n*[[HTMLImageElement.referrerPolicy]] The HTMLImageElement.\n*[[Request.referrerPolicy]] The referrerPolicy read-only property of the Request interface contains the referrer policy governing the referrer for the  request.			
htmlanchorelement referrerpolicy	R	HTMLAnchorElement.referrerPolicy										
htmlareaelement referrerpolicy	R	HTMLAreaElement.referrerPolicy										
htmliframeelement referrerpolicy	R	HTMLIFrameElement.referrerPolicy										
htmlimageelement referrerpolicy	R	HTMLImageElement.referrerPolicy										
request referrerpolicy	R	Request.referrerPolicy										
status	D								*[[BluetoothStatusChangedEvent.status]] The status property indicates if the connection is active (true) or not (false).\n*[[PermissionStatus.status]] The PermissionStatus.\n*[[Response.status]] The status read-only property of the Response interface contains the status code of the response (e.\n*[[Window.status]] Sets the text in the status bar at the bottom of the browser or returns the previously set text.\n*[[XMLHttpRequest.status]] The XMLHttpRequest.			
bluetoothstatuschangedevent status	R	BluetoothStatusChangedEvent.status										
permissionstatus status	R	PermissionStatus.status										
response status	R	Response.status										
window status	R	Window.status										
xmlhttprequest status	R	XMLHttpRequest.status										
valueof	D								*[[Boolean.prototype.valueOf]] The valueOf() method returns the primitive value of a Boolean object.\n*[[Date.prototype.valueOf]] The valueOf() method returns the primitive value of a Date object.\n*[[Number.prototype.valueOf]] The valueOf() method returns the wrapped primitive value of a Number object.\n*[[Object.prototype.valueOf]] The valueOf() method returns the primitive value of the specified object.\n*[[String.prototype.valueOf]] The valueOf() method returns the primitive value of a String object.			
boolean valueof	R	Boolean.prototype.valueOf										
date valueof	R	Date.prototype.valueOf										
number valueof	R	Number.prototype.valueOf										
object valueof	R	Object.prototype.valueOf										
string valueof	R	String.prototype.valueOf										
remove	D								*[[ChildNode.remove()]] The ChildNode.\n*[[DataTransferItemList.remove()]] The DataTransferItemList.\n*[[HTMLSelectElement.remove()]] The HTMLSelectElement.\n*[[remove()]] The MediaKeySession.\n*[[SourceBuffer.remove()]] The remove() method of the SourceBuffer interface removes media segments within a specific time range from the SourceBuffer.			
childnode remove	R	ChildNode.remove()										
datatransferitemlist remove	R	DataTransferItemList.remove()										
htmlselectelement remove	R	HTMLSelectElement.remove()										
mediakeysession remove	R	remove()										
sourcebuffer remove	R	SourceBuffer.remove()										
formdata set	R	FormData.set()										
headers set	R	Headers.set()										
urlsearchparams set	R	URLSearchParams.set()										
functions set syntax	R	setter										
functions set example	R	setter										
set	R	setter										
set syntax	R	setter										
set example	R	setter										
functions set	R	setter										
global set	R	Set										
lang	D								*[[HTMLElement.lang]] The HTMLElement.\n*[[Notification.lang]] The lang read-only property of the Notification interface indicates the text direction of the notification, as specified in the lang option of the Notification() constructor.\n*[[SpeechRecognition.lang]] The lang property of the SpeechRecognition interface returns and sets the language of the current SpeechRecognition.\n*[[SpeechSynthesisUtterance.lang]] The lang property of the SpeechSynthesisUtterance interface gets and sets the language of the utterance.\n*[[SpeechSynthesisVoice.lang]] The lang read-only property of the SpeechSynthesisVoice interface returns a BCP 47 language tag indicating the language of the voice.			
htmlelement lang	R	HTMLElement.lang										
notification lang	R	Notification.lang										
speechrecognition lang	R	SpeechRecognition.lang										
speechsynthesisutterance lang	R	SpeechSynthesisUtterance.lang										
speechsynthesisvoice lang	R	SpeechSynthesisVoice.lang										
append	D								*[[FormData.append()]] The append() method of the FormData interface appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist.\n*[[Headers.append()]] The append() method of the Headers interface appends a new value onto an existing header inside a Headers object, or adds the header if it does not already exist.\n*[[LockedFile.append()]] The append method is used to write some data at the end of the file.\n*[[ParentNode.append()]] The ParentNode.\n*[[URLSearchParams.append()]] The append() method of the URLSearchParams interface appends a specified key/value pair as a new search parameter.			
formdata append	R	FormData.append()										
headers append	R	Headers.append()										
lockedfile append	R	LockedFile.append()										
parentnode append	R	ParentNode.append()										
urlsearchparams append	R	URLSearchParams.append()										
getall	D								*[[FormData.getAll()]] The getAll() method of the FormData interface returns all the values associated with a given key from within a FormData object.\n*[[Headers.getAll()]] The getAll() method of the Headers interface returns an array of all the values of a header within a Headers object with a given name.\n*[[IDBIndex.getAll()]] There is a performance cost associated with looking at the value property of a cursor, because the object is created lazily.\n*[[IDBObjectStore.getAll()]] If a value is successfully found, then a structured clone of it is created and set as the result of the request object.\n*[[URLSearchParams.getAll()]] The getAll() method of the URLSearchParams interface returns all the values associated with a given search parameter as an array.			
formdata getall	R	FormData.getAll()										
headers getall	R	Headers.getAll()										
idbindex getall	R	IDBIndex.getAll()										
idbobjectstore getall	R	IDBObjectStore.getAll()										
urlsearchparams getall	R	URLSearchParams.getAll()										
body text	R	Body.text()										
pushmessagedata text	R	PushMessageData.text()										
speechsynthesisutterance text	R	SpeechSynthesisUtterance.text										
api text	R	Text										
text text	R	Text()										
audiocontext state	R	AudioContext.state										
mediarecorder state	R	MediaRecorder.state										
permissionstatus state	R	PermissionStatus.state										
presentationconnection state	R	state										
serviceworker state	R	ServiceWorker.state										
onclose	D								*[[GlobalEventHandlers.onclose]] An event handler for close events sent to the window.\n*[[IDBDatabase.onclose]] A function which is called when the close event is fired.\n*[[Notification.onclose]] The onclose property of the Notification interface specifies an event listener to receive close events.\n*[[RTCDataChannel.onclose]] The RTCDataChannel.\n*[[WorkerGlobalScope.onclose]] The onclose property of the WorkerGlobalScope interface represents an EventHandler to be called when the close event occurs and bubbles through the Worker.			
global onclose	R	GlobalEventHandlers.onclose										
idbdatabase onclose	R	IDBDatabase.onclose										
notification onclose	R	Notification.onclose										
rtcdatachannel onclose	R	RTCDataChannel.onclose										
global onclose	R	WorkerGlobalScope.onclose										
resume	D								*[[AudioContext.resume()]] The resume() method of the AudioContext Interface resumes the progression of time in an audio context that has previously been suspended.\n*[[MediaRecorder.resume()]] The MediaRecorder.\n*[[OfflineAudioContext.resume()]] The resume() method of the OfflineAudioContext interface resumes the progression of time in an audio context that has been suspended.\n*[[SpeechSynthesis.resume()]] The resume() method of the SpeechSynthesis interface puts the SpeechSynthesis object into a non-paused state: resumes it if it was already paused.			
audiocontext resume	R	AudioContext.resume()										
mediarecorder resume	R	MediaRecorder.resume()										
offlineaudiocontext resume	R	OfflineAudioContext.resume()										
speechsynthesis resume	R	SpeechSynthesis.resume()										
filter	D								*[[CanvasRenderingContext2D.filter]] The CanvasRenderingContext2D.\n*[[NodeIterator.filter]] The NodeIterator.\n*[[TreeWalker.filter]] The TreeWalker.\n*[[Array.prototype.filter]] The filter() method creates a new array with all elements that pass the test implemented by the provided function.			
canvasrenderingcontext2d filter	R	CanvasRenderingContext2D.filter										
nodeiterator filter	R	NodeIterator.filter										
treewalker filter	R	TreeWalker.filter										
array filter	R	Array.prototype.filter										
protocol	D								*[[HTMLHyperlinkElementUtils.protocol]] The HTMLHyperlinkElementUtils.\n*[[RTCDataChannel.protocol]] The read-only RTCDataChannel property protocol returns a DOMString containing the name of the subprotocol in use.\n*[[RTCIdentityErrorEvent.protocol]] The read-only property RTCIdentityErrorEvent.\n*[[URLUtilsReadOnly.protocol]] The URLUtilsReadOnly.			
htmlhyperlinkelementutils protocol	R	HTMLHyperlinkElementUtils.protocol										
rtcdatachannel protocol	R	RTCDataChannel.protocol										
rtcidentityerrorevent protocol	R	RTCIdentityErrorEvent.protocol										
urlutilsreadonly protocol	R	URLUtilsReadOnly.protocol										
clone	D								*[[MediaStream.clone()]] The clone() method of the MediaStream interface creates a duplicate of the MediaStream.\n*[[MediaStreamTrack.clone()]] The clone() method of the MediaStreamTrack interface creates a duplicate of the MediaStreamTrack.\n*[[Request.clone()]] The clone() method of the Request interface creates a copy of the current Request object.\n*[[Response.clone()]] The clone() method of the Response interface creates a clone of a response object, identical in every way, but stored in a different variable.			
mediastream clone	R	MediaStream.clone()										
mediastreamtrack clone	R	MediaStreamTrack.clone()										
request clone	R	Request.clone()										
response clone	R	Response.clone()										
mediakeymessageevent message	R	message										
positionerror message	R	PositionError.message										
speechrecognitionerror message	R	SpeechRecognitionError.message										
error message	R	Error.prototype.message										
title	D								*[[Document.title]] Gets or sets the title of the document.\n*[[HTMLElement.title]] The HTMLElement.\n*[[Notification.title]] The title read-only property of the Notification interface indicates the title of the notification, as specified in the title parameter of the Notification() constructor.\n*[[StyleSheet.title]] title returns the advisory title of the current style sheet.			
document title	R	Document.title										
htmlelement title	R	HTMLElement.title										
notification title	R	Notification.title										
stylesheet title	R	StyleSheet.title										
mediastreamtrack label	R	MediaStreamTrack.label										
rtcdatachannel label	R	RTCDataChannel.label										
trackdefault label	R	TrackDefault.label										
statements label syntax	R	label										
statements label example	R	label										
label syntax	R	label										
label example	R	label										
statements label	R	label										
animationeffecttimingproperties direction	R	Direction										
animationeffecttimingreadonly direction	R	AnimationEffectTimingReadOnly.direction										
canvasrenderingcontext2d direction	R	CanvasRenderingContext2D.direction										
idbcursor direction	R	IDBCursor.direction										
api blob	R	Blob										
blob blob	R	Blob()										
body blob	R	Body.blob()										
pushmessagedata blob	R	PushMessageData.blob()										
animationeffecttimingproperties fill	R	Fill										
animationeffecttimingreadonly fill	R	AnimationEffectTimingReadOnly.fill										
canvasrenderingcontext2d fill	R	CanvasRenderingContext2D.fill()										
array fill	R	Array.prototype.fill()										
tolocalestring	D								*[[Array.prototype.toLocaleString]] The toLocaleString() method returns a string representing the elements of the array.\n*[[Date.prototype.toLocaleString]] The toLocaleString() method returns a string with a language sensitive representation of this date.\n*[[Number.prototype.toLocaleString]] The toLocaleString() method returns a string with a language sensitive representation of this number.\n*[[Object.prototype.toLocaleString]] The toLocaleString() method returns a string representing the object.			
array tolocalestring	R	Array.prototype.toLocaleString										
date tolocalestring	R	Date.prototype.toLocaleString										
number tolocalestring	R	Number.prototype.toLocaleString										
object tolocalestring	R	Object.prototype.toLocaleString										
dir	D								*[[Console.dir()]] Displays an interactive list of the properties of the specified JavaScript object.\n*[[Document.dir]] The Document.\n*[[HTMLElement.dir]] The HTMLElement.\n*[[Notification.dir]] The dir read-only property of the Notification interface indicates the text direction of the notification, as specified in the dir option of the Notification() constructor.			
console dir	R	Console.dir()										
document dir	R	Document.dir										
htmlelement dir	R	HTMLElement.dir										
notification dir	R	Notification.dir										
api headers	R	Headers										
headers headers	R	Headers()										
request headers	R	Request.headers										
response headers	R	Response.headers										
x	D								*[[DeviceAcceleration.x]] This read-only property indicates the amount of acceleration that occurred along the X axis in a DeviceAcceleration object.\n*[[DOMPoint.x]] The x read-only property of the DOMPointReadOnly interface represents the x coordinate of a point.\n*[[DOMRectReadOnly.x]] The x read-only property of the DOMRectReadOnly interface represents the x coordinate of the DOMRect 's origin.\n*[[MouseEvent.x]] The MouseEvent.			
deviceacceleration x	R	DeviceAcceleration.x										
dompointreadonly x	R	DOMPoint.x										
domrectreadonly x	R	DOMRectReadOnly.x										
mouseevent x	R	MouseEvent.x										
y	D								*[[DeviceAcceleration.y]] This read-only property indicates the amount of acceleration that occurred along the Y axis in a DeviceAcceleration object.\n*[[DOMPoint.y]] The y read-only property of the DOMPointReadOnly interface represents the y coordinate of a point.\n*[[DOMRectReadOnly.y]] The y read-only property of the DOMRectReadOnly interface represents the y coordinate of the DOMRect 's origin.\n*[[MouseEvent.y]] The MouseEvent.			
deviceacceleration y	R	DeviceAcceleration.y										
dompointreadonly y	R	DOMPoint.y										
domrectreadonly y	R	DOMRectReadOnly.y										
mouseevent y	R	MouseEvent.y										
currenttime	D								*[[Animation.currentTime]] The Animation.\n*[[AnimationPlaybackEvent.currentTime]] The currentTime read-only property of the AnimationPlaybackEvent interface represents the current time of the animation that generated the event at the moment the event is queued.\n*[[AnimationTimeline.currentTime]] The currentTime read only property of the AnimationTimeline interface returns the current time value for the associated timeline in milliseconds or null if the timeline is inactive.\n*[[HTMLMediaElement.currentTime]] The HTMLMediaElement.			
animation currenttime	R	Animation.currentTime										
animationplaybackevent currenttime	R	AnimationPlaybackEvent.currentTime										
animationtimeline currenttime	R	AnimationTimeline.currentTime										
htmlmediaelement currenttime	R	HTMLMediaElement.currentTime										
mode	D								*[[IDBTransaction.mode]] An IDBTransactionMode object defining the mode for isolating access to data in the current object stores:\n*[[LockedFile.mode]] The mode property provides the read/write status of the LockedFile file.\n*[[Request.mode]] The mode read-only property of the Request interface contains the mode of the request (e.\n*[[SourceBuffer.mode]] The mode property of the SourceBuffer interface controls whether media segments can be appended to the SourceBuffer in any order, or in a strict sequence.			
idbtransaction mode	R	IDBTransaction.mode										
lockedfile mode	R	LockedFile.mode										
request mode	R	Request.mode										
sourcebuffer mode	R	SourceBuffer.mode										
fetchevent request	R	FetchEvent.request										
identitymanager request	R	IdentityManager.request()										
api request	R	Request										
request request	R	Request()										
add	D								*[[Cache.add()]] The add() method of the Cache interface takes a URL, retrieves it and adds the resulting response object to the given cache.\n*[[DataTransferItemList.add()]] The DataTransferItemList.\n*[[HTMLSelectElement.add()]] The HTMLSelectElement.\n*[[IDBObjectStore.add()]] To determine if the add operation has completed successfully, listen for the transaction’s complete event in addition to the IDBObjectStore.			
cache add	R	Cache.add()										
datatransferitemlist add	R	DataTransferItemList.add()										
htmlselectelement add	R	HTMLSelectElement.add()										
idbobjectstore add	R	IDBObjectStore.add()										
attr prefix	R	Attr.prefix										
cssnamespacerule prefix	R	prefix										
element prefix	R	Element.prefix										
lockedfile active	R	LockedFile.active										
mediastream active	R	active										
serviceworkerregistration active	R	ServiceWorkerRegistration.active										
replace	D								*[[DOMTokenList.replace()]] The replace () method of the DOMTokenList interface replaces an existing token within a given list by a new one.\n*[[Location.replace()]] The Location.\n*[[String.prototype.replace]] The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.			
domtokenlist replace	R	DOMTokenList.replace()										
location replace	R	Location.replace()										
string replace	R	String.prototype.replace										
root	D								*[[FileSystem.root]] The read-only root property of the FileSystem interface specifies a FileSystemDirectoryEntry object representing the root directory of the file system, for use with the File and Directory Entries API.\n*[[NodeIterator.root]] The NodeIterator.\n*[[TreeWalker.root]] The TreeWalker.			
filesystem root	R	FileSystem.root										
nodeiterator root	R	NodeIterator.root										
treewalker root	R	TreeWalker.root										
bluetoothgattdescriptor uuid	R	uuid										
bluetoothgattservice uuid	R	uuid										
bluetoothremotegattcharacteristic uuid	R	BluetoothRemoteGATTCharacteristic.uuid										
oncomplete	D								*[[IDBTransaction.oncomplete]] The oncomplete event handler of the IDBTransaction interface handles the complete event, fired when the transaction successfully completes.\n*[[LockedFile.oncomplete]] Specifies an event listener to receive complete events.\n*[[OfflineAudioContext.oncomplete]] In this simple example, we declare both an AudioContext and an OfflineAudioContext object.			
idbtransaction oncomplete	R	IDBTransaction.oncomplete										
lockedfile oncomplete	R	LockedFile.oncomplete										
offlineaudiocontext oncomplete	R	OfflineAudioContext.oncomplete										
pushmanager unregister	R	PushManager.unregister()										
serviceworkerregistration unregister	R	ServiceWorkerRegistration.unregister()										
syncregistration unregister	R	unregister										
getselection	D								*[[Document.getSelection()]] This method functions identically to the Window.\n*[[DocumentOrShadowRoot.getSelection()]] The getSelection() property of the DocumentOrShadowRoot interface returns a Selection object representing the range of text selected by the user or the current position of the caret.\n*[[Window.getSelection()]] Returns a Selection object representing the range of text selected by the user or the current position of the caret.			
document getselection	R	Document.getSelection()										
documentorshadowroot getselection	R	DocumentOrShadowRoot.getSelection()										
window getselection	R	Window.getSelection()										
top	D								*[[DOMRectReadOnly.top]] The top read-only property of the DOMRectReadOnly interface returns the top coordinate value of the DOMRect.\n*[[Screen.top]] Returns the distance in pixels from the top side of the current screen.\n*[[Window.top]] Returns a reference to the topmost window in the window hierarchy.			
domrectreadonly top	R	DOMRectReadOnly.top										
screen top	R	Screen.top										
window top	R	Window.top										
playbackrate	D								*[[Animation.playbackRate]] The Animation.\n*[[AudioBufferSourceNode.playbackRate]] The default value is 1.\n*[[HTMLMediaElement.playbackRate]] The HTMLMediaElement.			
animation playbackrate	R	Animation.playbackRate										
audiobuffersourcenode playbackrate	R	AudioBufferSourceNode.playbackRate										
htmlmediaelement playbackrate	R	HTMLMediaElement.playbackRate										
onended	D								*[[AudioBufferSourceNode.onended]] The onended event handler of the AudioBufferSourceNode contains the callback associated with the ended event: this allows you to run code in response to the audio track finishing playback.\n*[[MediaStreamTrack.onended]] The MediaStreamTrack.\n*[[OscillatorNode.onended]] The onended property of the OscillatorNode interface is used to set the event handler for the ended event, which fires when the tone has stopped playing.			
audiobuffersourcenode onended	R	AudioBufferSourceNode.onended										
mediastreamtrack onended	R	MediaStreamTrack.onended										
oscillatornode onended	R	OscillatorNode.onended										
onload	D								*[[FileReader.onload]] The FileReader.\n*[[GlobalEventHandlers.onload]] An event handler for the load event of a window.\n*[[XMLHttpRequestEventTarget.onload]] The XMLHttpRequestEventTarget.			
filereader onload	R	FileReader.onload										
global onload	R	GlobalEventHandlers.onload										
xmlhttprequesteventtarget onload	R	XMLHttpRequestEventTarget.onload										
screeny	D								*[[MouseEvent.screenY]] The MouseEvent.\n*[[Touch.screenY]] Returns the Y coordinate of the touch point relative to the screen, not including any scroll offset.\n*[[Window.screenY]] The Window.			
mouseevent screeny	R	MouseEvent.screenY										
touch screeny	R	Touch.screenY										
window screeny	R	Window.screenY										
api notification	R	Notification										
notification notification	R	Notification.Notification()										
notificationevent notification	R	NotificationEvent.notification										
queryselectorall	D								*[[Document.querySelectorAll()]] Returns a list of the elements within the document (using depth-first pre-order traversal of the document's nodes) that match the specified group of selectors.\n*[[DocumentFragment.querySelectorAll()]] The DocumentFragment.\n*[[Element.querySelectorAll()]] Returns a non-live NodeList of all elements descended from the element on which it is invoked that match the specified group of CSS selectors.			
document queryselectorall	R	Document.querySelectorAll()										
documentfragment queryselectorall	R	DocumentFragment.querySelectorAll()										
element queryselectorall	R	Element.querySelectorAll()										
update	D								*[[IDBCursor.update()]] The update() method of the IDBCursor interface returns an IDBRequest object, and, in a separate thread, updates the value at the current position of the cursor in the object store.\n*[[update()]] The MediaKeySession.\n*[[ServiceWorkerRegistration.update()]] The update method of the ServiceWorkerRegistration interface attempts to update the service worker.			
idbcursor update	R	IDBCursor.update()										
mediakeysession update	R	update()										
serviceworkerregistration update	R	ServiceWorkerRegistration.update()										
focus	D								*[[HTMLElement.focus()]] The HTMLElement.\n*[[Window.focus()]] Makes a request to bring the window to the front.\n*[[WindowClient.focus()]] The focus() method of the WindowClient interface gives user input focus to the current client and returns a Promise that resolves to the existing WindowClient.			
htmlelement focus	R	HTMLElement.focus()										
window focus	R	Window.focus()										
windowclient focus	R	WindowClient.focus()										
stream	D								*[[MediaRecorder.stream]] The MediaRecorder.\n*[[MediaStreamAudioDestinationNode.stream]] A MediaStream.\n*[[MediaStreamEvent.stream]] The read-only property MediaStreamEvent.			
mediarecorder stream	R	MediaRecorder.stream										
mediastreamaudiodestinationnode stream	R	MediaStreamAudioDestinationNode.stream										
mediastreamevent stream	R	MediaStreamEvent.stream										
normalize	D								*[[ConvolverNode.normalize]] A boolean.\n*[[Node.normalize()]] The Node.\n*[[String.prototype.normalize()]] The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).			
convolvernode normalize	R	ConvolverNode.normalize										
node normalize	R	Node.normalize()										
string normalize	R	String.prototype.normalize()										
disconnect	D								*[[AudioNode.disconnect()]] undefined\n*[[BluetoothRemoteGATTServer.disconnect()]] The BluetoothRemoteGATTServer.\n*[[PeformanceObserver.disconnect()]] The disconnect() method of the PerformanceObserver interface is used to stop the performance observer from receiving any performance entry events.			
audionode disconnect	R	AudioNode.disconnect()										
bluetoothremotegattserver disconnect	R	BluetoothRemoteGATTServer.disconnect()										
performanceobserver disconnect	R	PeformanceObserver.disconnect()										
csstext	D								*[[CSSRule.cssText]] cssText returns the actual text of a CSSStyleSheet style-rule.\n*[[CSSStyleDeclaration.cssText]] cssText returns or sets the text of the element's inline&#160;style declaration only.\n*[[CSSValue.cssText]] The cssText property of the CSSValue interface represents the current computed CSS property value.			
cssrule csstext	R	CSSRule.cssText										
cssstyledeclaration csstext	R	CSSStyleDeclaration.cssText										
cssvalue csstext	R	CSSValue.cssText										
navigator permissions	R	Navigator.permissions										
api permissions	R	Permissions										
workernavigator permissions	R	WorkerNavigator.permissions										
canvas	D								*[[CanvasCaptureMediaStream.canvas]] The CanvasCaptureMediaStream.\n*[[CanvasRenderingContext2D.canvas]] The CanvasRenderingContext2D.\n*[[WebGLRenderingContext.canvas]] The WebGLRenderingContext.			
canvascapturemediastream canvas	R	CanvasCaptureMediaStream.canvas										
canvasrenderingcontext2d canvas	R	CanvasRenderingContext2D.canvas										
webglrenderingcontext canvas	R	WebGLRenderingContext.canvas										
size	D								*[[Blob.size]] The Blob.\n*[[MediaKeyStatusMap.size]] The size read-only property of the MediaKeyStatusMap interface returns the number of key/value paris in the status map.\n*[[WebGLActiveInfo.size]] The read-only WebGLActiveInfo.			
blob size	R	Blob.size										
mediakeystatusmap size	R	MediaKeyStatusMap.size										
webglactiveinfo size	R	WebGLActiveInfo.size										
api performance	R	Performance										
window performance	R	Window.performance										
global performance	R	WorkerGlobalScope.performance										
pagex	D								*[[MouseEvent.pageX]] The MouseEvent.\n*[[Touch.pageX]] The Touch.\n*[[UIEvent.pageX]] The UIEvent.			
mouseevent pagex	R	MouseEvent.pageX										
touch pagex	R	Touch.pageX										
uievent pagex	R	UIEvent.pageX										
pagey	D								*[[MouseEvent.pageY]] The MouseEvent.\n*[[Touch.pageY]] The Touch.\n*[[UIEvent.pageY]] The UIEvent.			
mouseevent pagey	R	MouseEvent.pageY										
touch pagey	R	Touch.pageY										
uievent pagey	R	UIEvent.pageY										
rellist	D								*[[HTMLAnchorElement.relList]] The HTMLAnchorElement.\n*[[HTMLAreaElement.relList]] The HTMLAreaElement.\n*[[HTMLLinkElement.relList]] The HTMLLinkElement.			
htmlanchorelement rellist	R	HTMLAnchorElement.relList										
htmlareaelement rellist	R	HTMLAreaElement.relList										
htmllinkelement rellist	R	HTMLLinkElement.relList										
orientation	D								*[[Screen.orientation]] The Screen.\n*[[VRPose.orientation]] The orientation read-only property of the VRPositionState interface returns the orientation of the sensor at the current VRPose.\n*[[Window.orientation]] Returns the orientation in degrees (in 90-degree increments) of the viewport relative to the device's natural orientation.			
screen orientation	R	Screen.orientation										
vrpose orientation	R	VRPose.orientation										
window orientation	R	Window.orientation										
slice	D								*[[Blob.slice()]] The slice is used to create a new Blob object containing the data in the specified range of bytes of the source Blob.\n*[[Array.prototype.slice]] The slice() method returns a shallow copy of a portion of an array into a new array object.\n*[[String.prototype.slice]] The slice() method extracts a section of a string and returns a new string.			
blob slice	R	Blob.slice()										
array slice	R	Array.prototype.slice										
string slice	R	String.prototype.slice										
src	D								*[[HTMLMediaElement.src]] The HTMLMediaElement.\n*[[HTMLTrackElement.src]] The HTMLTrackElement.\n*[[SpeechGrammar.src]] The src property of the SpeechGrammar interface sets and returns a string containing the grammar from within in the SpeechGrammar object.			
htmlmediaelement src	R	HTMLMediaElement.src										
htmltrackelement src	R	HTMLTrackElement.src										
speechgrammar src	R	SpeechGrammar.src										
api trackdefault	R	TrackDefault										
trackdefault trackdefault	R	TrackDefault.TrackDefault()										
trackdefaultlist trackdefault	R	TrackDefaultList.TrackDefault()										
onstart	D								*[[MediaRecorder.onstart]] The MediaRecorder.\n*[[SpeechRecognition.onstart]] The onstart property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition (when the start event fires.\n*[[SpeechSynthesisUtterance.onstart]] The onstart property of the SpeechSynthesisUtterance interface represents an event handler that will run when the utterance has begun to be spoken (when the start event fires.			
mediarecorder onstart	R	MediaRecorder.onstart										
speechrecognition onstart	R	SpeechRecognition.onstart										
speechsynthesisutterance onstart	R	SpeechSynthesisUtterance.onstart										
includes	D								*[[IDBKeyRange.includes()]] A Boolean.\n*[[Array.prototype.includes()]] The includes() method determines whether an array includes a certain element, returning true or false as appropriate.\n*[[String.prototype.includes()]] The includes() method determines whether one string may be found within another string, returning true or false as appropriate.			
idbkeyrange includes	R	IDBKeyRange.includes()										
array includes	R	Array.prototype.includes()										
string includes	R	String.prototype.includes()										
version	D								*[[HTMLHtmlElement.version]] Returns version information about the document type definition (DTD)&#160;of a document.\n*[[IDBDatabase.version]] An integer containing the version of the connected database.\n*[[IDBVersionChangeEvent.version]] The version property of the IDBVersionChangeEvent interface returns The new version of the database in a versionchange transaction.			
htmlhtmlelement version	R	HTMLHtmlElement.version										
idbdatabase version	R	IDBDatabase.version										
idbversionchangeevent version	R	IDBVersionChangeEvent.version										
search	D								*[[HTMLHyperlinkElementUtils.search]] The HTMLHyperlinkElementUtils.\n*[[URLUtilsReadOnly.search]] The URLUtilsReadOnly.\n*[[String.prototype.search]] The search() method executes a search for a match between a regular expression and this String object.			
htmlhyperlinkelementutils search	R	HTMLHyperlinkElementUtils.search										
urlutilsreadonly search	R	URLUtilsReadOnly.search										
string search	R	String.prototype.search										
href	D								*[[HTMLHyperlinkElementUtils.href]] The HTMLHyperlinkElementUtils.\n*[[Stylesheet.href]] Returns the location of the stylesheet.\n*[[URLUtilsReadOnly.href]] The URLUtilsReadOnly.			
htmlhyperlinkelementutils href	R	HTMLHyperlinkElementUtils.href										
stylesheet href	R	Stylesheet.href										
urlutilsreadonly href	R	URLUtilsReadOnly.href										
screenx	D								*[[MouseEvent.screenX]] The MouseEvent.\n*[[Touch.screenX]] Returns the X coordinate of the touch point relative to the screen, not including any scroll offset.\n*[[Window.screenX]] The Window.			
mouseevent screenx	R	MouseEvent.screenX										
touch screenx	R	Touch.screenX										
window screenx	R	Window.screenX										
shiftkey	D								*[[KeyboardEvent.shiftKey]] The KeyboardEvent.\n*[[MouseEvent.shiftKey]] The MouseEvent.\n*[[TouchEvent.shiftKey]] A Boolean value indicating whether or not the shift key is enabled when the touch event is created.			
keyboardevent shiftkey	R	KeyboardEvent.shiftKey										
mouseevent shiftkey	R	MouseEvent.shiftKey										
touchevent shiftkey	R	TouchEvent.shiftKey										
api response	R	Response										
response response	R	Response()										
xmlhttprequest response	R	XMLHttpRequest.response										
register	D								*[[PushManager.register()]] The register method is used to ask the system to request a new endpoint for notifications.\n*[[ServiceWorkerContainer.register()]] The register() method of the ServiceWorkerContainer interface creates or updates a ServiceWorkerRegistration for the given scriptURL.\n*[[SyncManager.register()]] The SyncManager.			
pushmanager register	R	PushManager.register()										
serviceworkercontainer register	R	ServiceWorkerContainer.register()										
syncmanager register	R	SyncManager.register()										
api event	R	Event										
event event	R	Event()										
window event	R	Window.event										
encoding	D								*[[HTMLFormElement.encoding]] The HTMLFormElement.\n*[[TextDecoder.encoding]] The TextDecoder.\n*[[TextEncoder.encoding]] The TextEncoder.			
htmlformelement encoding	R	HTMLFormElement.encoding										
textdecoder encoding	R	TextDecoder.encoding										
textencoder encoding	R	TextEncoder.encoding										
document object model introduction	R	Introduction to the DOM										
file and directory entries api introduction	R	Introduction to the File and Directory Entries API										
xsltprocessor introduction	R	Introduction										
metakey	D								*[[KeyboardEvent.metaKey]] The KeyboardEvent.\n*[[MouseEvent.metaKey]] The MouseEvent.\n*[[TouchEvent.metaKey]] A Boolean value indicating whether or not the Meta key is enabled when the touch event is created.			
keyboardevent metakey	R	KeyboardEvent.metaKey										
mouseevent metakey	R	MouseEvent.metaKey										
touchevent metakey	R	TouchEvent.metaKey										
ctrlkey	D								*[[KeyboardEvent.ctrlKey]] The KeyboardEvent.\n*[[MouseEvent.ctrlKey]] The MouseEvent.\n*[[TouchEvent.ctrlKey]] A Boolean value indicating whether the control (Control) key is enabled when the touch event is created.			
keyboardevent ctrlkey	R	KeyboardEvent.ctrlKey										
mouseevent ctrlkey	R	MouseEvent.ctrlKey										
touchevent ctrlkey	R	TouchEvent.ctrlKey										
body arraybuffer	R	Body.arrayBuffer()										
pushmessagedata arraybuffer	R	PushMessageData.arrayBuffer()										
global arraybuffer	R	ArrayBuffer										
port	D								*[[HTMLHyperlinkElementUtils.port]] The HTMLHyperlinkElementUtils.\n*[[SharedWorker.port]] The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.\n*[[URLUtilsReadOnly.port]] The URLUtilsReadOnly.			
htmlhyperlinkelementutils port	R	HTMLHyperlinkElementUtils.port										
sharedworker port	R	SharedWorker.port										
urlutilsreadonly port	R	URLUtilsReadOnly.port										
elapsedtime	D								*[[AnimationEvent.elapsedTime]] The AnimationEvent.\n*[[SpeechSynthesisEvent.elapsedTime]] The elapsedTime read-only property of the SpeechSynthesisUtterance interface returns the elapsed time in milliseconds after the SpeechSynthesisUtterance.\n*[[TransitionEvent.elapsedTime]] The TransitionEvent.			
animationevent elapsedtime	R	AnimationEvent.elapsedTime										
speechsynthesisevent elapsedtime	R	SpeechSynthesisEvent.elapsedTime										
transitionevent elapsedtime	R	TransitionEvent.elapsedTime										
navigator connection	R	Navigator.connection										
presentationconnectionavailableevent connection	R	connection										
navigator connection	R	Navigator.connection										
load	D								*[[FontFaceSet.load()]] A Promise of an Array of FontFace loaded.\n*[[load()]] The MediaKeySession.\n*[[XMLDocument.load()]] document.			
fontfaceset load	R	FontFaceSet.load()										
mediakeysession load	R	load()										
xmldocument load	R	XMLDocument.load()										
ready	D								*[[Animation.ready]] The Animation.\n*[[FontFaceSet.ready]] The ready() method of the FontFaceSet interface returns a Promise that resolves to a list of font faces for a requested font.\n*[[ServiceWorkerContainer.ready]] The ready read-only property of the ServiceWorkerContainer interface defines whether a service worker is ready to control a page or not.			
animation ready	R	Animation.ready										
fontfaceset ready	R	FontFaceSet.ready										
serviceworkercontainer ready	R	ServiceWorkerContainer.ready										
api navigator	R	Navigator										
window navigator	R	Window.navigator										
global navigator	R	WorkerGlobalScope.navigator										
@@iterator	D								*[[arguments[@@iterator]()]] The initial value of the @@iterator property is the same function object as the initial value of the Array.\n*[[Array.prototype[@@iterator]()]] The initial value of the @@iterator property is the same function object as the initial value of the values() property.\n*[[String.prototype[@@iterator]()]] The [@@iterator]() method returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.			
arguments @@iterator	R	arguments[@@iterator]()										
array @@iterator	R	Array.prototype[@@iterator]()										
string @@iterator	R	String.prototype[@@iterator]()										
altkey	D								*[[KeyboardEvent.altKey]] The KeyboardEvent.\n*[[MouseEvent.altKey]] The MouseEvent.\n*[[TouchEvent.altKey]] A Boolean value indicating whether or not the alt (Alternate) key is enabled when the touch event is created.			
keyboardevent altkey	R	KeyboardEvent.altKey										
mouseevent altkey	R	MouseEvent.altKey										
touchevent altkey	R	TouchEvent.altKey										
body formdata	R	Body.formData()										
api formdata	R	FormData										
formdata formdata	R	FormData()										
code	D								*[[KeyboardEvent.code]] The KeyboardEvent.\n*[[MediaError.code]] The MediaError.\n*[[PositionError.code]] The PositionError.			
keyboardevent code	R	KeyboardEvent.code										
mediaerror code	R	MediaError.code										
positionerror code	R	PositionError.code										
presentationconnection send	R	send										
rtcdatachannel send	R	RTCDataChannel.send()										
xmlhttprequest send	R	XMLHttpRequest.send()										
gamepad index	R	Gamepad.index										
idbobjectstore index	R	IDBObjectStore.index()										
api index	R	Index										
api body	R	Body										
document body	R	Document.body										
notification body	R	Notification.body										
detune	D								*[[AudioBufferSourceNode.detune]] The detune property of the AudioBufferSourceNode interface is an k-rate AudioParam representing detuning of oscillation in cents.\n*[[BiquadFilterNode.detune]] An a-rate AudioParam.\n*[[OscillatorNode.detune]] An a-rate AudioParam.			
audiobuffersourcenode detune	R	AudioBufferSourceNode.detune										
biquadfilternode detune	R	BiquadFilterNode.detune										
oscillatornode detune	R	OscillatorNode.detune										
tag	D								*[[Notification.tag]] The tag read-only property of the Notification interface signifies an identifying tag for the notification, as specified in the tag option of the Notification() constructor.\n*[[SyncEvent.tag]] The SyncEvent.\n*[[SyncRegistration.tag]] The tag read-only property of the SyncRegistration interface provides the unique identifier of the specified SyncRegistration object.			
notification tag	R	Notification.tag										
syncevent tag	R	SyncEvent.tag										
syncregistration tag	R	SyncRegistration.tag										
attr namespaceuri	R	Attr.namespaceURI										
cssnamespacerule namespaceuri	R	namespaceURI										
element namespaceuri	R	Element.namespaceURI										
rel	D								*[[HTMLAnchorElement.rel]] The HTMLAnchorElement.\n*[[HTMLAreaElement.rel]] The HTMLAreaElement.\n*[[HTMLLinkElement.rel]] The HTMLLinkElement.			
htmlanchorelement rel	R	HTMLAnchorElement.rel										
htmlareaelement rel	R	HTMLAreaElement.rel										
htmllinkelement rel	R	HTMLLinkElement.rel										
pause	D								*[[Animation.pause()]] The Animation.\n*[[MediaRecorder.pause()]] The Media.\n*[[SpeechSynthesis.pause()]] The pause() method of the SpeechSynthesis interface puts the SpeechSynthesis object into a paused state.			
animation pause	R	Animation.pause()										
mediarecorder pause	R	MediaRecorder.pause()										
speechsynthesis pause	R	SpeechSynthesis.pause()										
caches	D								*[[ServiceWorkerGlobalScope.caches]] The ServiceWorkerGlobalScope.\n*[[Window.caches]] The Window.\n*[[WorkerGlobalScope.caches]] The caches read-only property of the WorkerGlobalScope interface returns the CacheStorage object associated with the current worker context.			
global caches	R	ServiceWorkerGlobalScope.caches										
window caches	R	Window.caches										
global caches	R	WorkerGlobalScope.caches										
key	D								*[[IDBCursor.key]] The value can be of any type.\n*[[KeyboardEvent.key]] The KeyboardEvent.\n*[[Storage.key()]] The key() method of the Storage interface, when passed a number n, returns the name of the nth key in the storage.			
idbcursor key	R	IDBCursor.key										
keyboardevent key	R	KeyboardEvent.key										
storage key	R	Storage.key()										
body json	R	Body.json()										
pushmessagedata json	R	PushMessageData.json()										
global json	R	JSON										
transaction	D								*[[IDBDatabase.transaction()]] An IDBTransaction object.\n*[[IDBObjectStore.transaction]] An IDBTransaction object.\n*[[IDBRequest.transaction]] An IDBTransaction.			
idbdatabase transaction	R	IDBDatabase.transaction()										
idbobjectstore transaction	R	IDBObjectStore.transaction										
idbrequest transaction	R	IDBRequest.transaction										
api console	R	Console										
window console	R	Window.console										
global console	R	WorkerGlobalScope.console										
match	D								*[[Cache.match()]] The match() method of the Cache interface returns a Promise that resolves to the Response associated with the first matching request in the Cache object.\n*[[CacheStorage.match()]] The match() method of the CacheStorage interface checks if a given Request is a key in any of the Cache objects that the CacheStorage object tracks and returns a Promise that resolves to the matching Response.\n*[[String.prototype.match]] The match() method retrieves the matches when matching a string against a regular expression.			
cache match	R	Cache.match()										
cachestorage match	R	CacheStorage.match()										
string match	R	String.prototype.match										
node parentnode	R	Node.parentNode										
api parentnode	R	ParentNode										
treewalker parentnode	R	TreeWalker.parentNode()										
host	D								*[[HTMLHyperlinkElementUtils.host]] The HTMLHyperlinkElementUtils.\n*[[ShadowRoot.host]] The host read-only property of the ShadowRoot returns the DOM element to which the ShadowRoot is attatched.\n*[[URLUtilsReadOnly.host]] The URLUtilsReadOnly.			
htmlhyperlinkelementutils host	R	HTMLHyperlinkElementUtils.host										
shadowroot host	R	ShadowRoot.host										
urlutilsreadonly host	R	URLUtilsReadOnly.host										
promiserejection promise	R	promise										
promiserejectionevent promise	R	PromiseRejectionEvent.promise										
global promise	R	Promise										
global function	R	Function										
operators function syntax	R	function expression										
operators function example	R	function expression										
function	R	function expression										
function syntax	R	function expression										
function example	R	function expression										
operators function	R	function expression										
statements function syntax	R	function										
statements function example	R	function										
function syntax	R	function										
function example	R	function										
statements function	R	function										
count	D								*[[Console.count()]] Logs the number of times that this particular call to count() has been called.\n*[[IDBIndex.count()]] A IDBRequest object on which subsequent events related to this operation are fired.\n*[[IDBObjectStore.count()]] An IDBRequest object on which subsequent events related to this operation are fired.			
console count	R	Console.count()										
idbindex count	R	IDBIndex.count()										
idbobjectstore count	R	IDBObjectStore.count()										
queryselector	D								*[[Document.querySelector()]] Returns the first element within the document (using depth-first pre-order traversal of the document's nodes|by first element in document markup and iterating through sequential nodes by order of amount of child nodes) that matches the specified group of selectors.\n*[[DocumentFragment.querySelector()]] The DocumentFragment.\n*[[Element.querySelector()]] Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.			
document queryselector	R	Document.querySelector()										
documentfragment queryselector	R	DocumentFragment.querySelector()										
element queryselector	R	Element.querySelector()										
mozaudiochanneltype	D								*[[AudioContext.mozAudioChannelType]] The readonly mozAudioChannelType property of the AudioContext interface can be used to set the audio channel that the sound playing in an audio context element will play in, on a Firefox OS device.\n*[[HTMLMediaElement.mozAudioChannelType]] The mozAudioChannelType property of the HTMLMediaElement interface can be used to set the audio channel that the sound coming from an audio or video element will play in, on a Firefox OS device.			
audiocontext mozaudiochanneltype	R	AudioContext.mozAudioChannelType										
htmlmediaelement mozaudiochanneltype	R	HTMLMediaElement.mozAudioChannelType										
lasteventid	D								*[[ExtendableMessageEvent.lastEventId]] The lastEventID read-only property of the ExtendableMessageEvent interface represents, in server-sent events, the last event ID of the event source.\n*[[ServiceWorkerMessageEvent.lastEventId]] The lastEventID read-only property of the ServiceWorkerMessageEvent interface represents, in server-sent events, the last event ID of the event source.			
extendablemessageevent lasteventid	R	ExtendableMessageEvent.lastEventId										
serviceworkermessageevent lasteventid	R	ServiceWorkerMessageEvent.lastEventId										
getallkeys	D								*[[IDBIndex.getAllKeys()]] An IDBRequest object on which subsequent events related to this operation are fired.\n*[[IDBObjectStore.getAllKeys()]] If a value is successfully found, then a structured clone of it is created and set as the result of the request object.			
idbindex getallkeys	R	IDBIndex.getAllKeys()										
idbobjectstore getallkeys	R	IDBObjectStore.getAllKeys()										
unloadeventstart	D								*[[PerformanceNavigationTiming.unloadEventStart]] The unloadEventStart property returns a timestamp representing the time value equal to the time immediately before the user agent starts the unload event of the previous document.\n*[[PerformanceTiming.unloadEventStart]] The PerformanceTiming.			
performancenavigationtiming unloadeventstart	R	PerformanceNavigationTiming.unloadEventStart										
performancetiming unloadeventstart	R	PerformanceTiming.unloadEventStart										
paused	D								*[[HTMLMediaElement.paused]] The read-only HTMLMediaElement.\n*[[SpeechSynthesis.paused]] The paused read-only property of the SpeechSynthesis interface is a Boolean that returns true if the SpeechSynthesis object is in a paused state, or false if not.			
htmlmediaelement paused	R	HTMLMediaElement.paused										
speechsynthesis paused	R	SpeechSynthesis.paused										
starttime	D								*[[Animation.startTime]] The Animation.\n*[[PerformanceEntry.startTime]] The startTime property returns the first recorded timestamp of the performance entry.			
animation starttime	R	Animation.startTime										
performanceentry starttime	R	PerformanceEntry.startTime										
blur	D								*[[HTMLElement.blur()]] The HTMLElement.\n*[[Window.blur()]] Shifts focus away from the window.			
htmlelement blur	R	HTMLElement.blur()										
window blur	R	Window.blur()										
domcontentloadedeventstart	D								*[[PerformanceNavigationTiming.domContentLoadedEventStart]] The domContentLoadedEventStart property returns a timestamp representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document.\n*[[PerformanceTiming.domContentLoadedEventStart]] The PerformanceTiming.			
performancenavigationtiming domcontentloadedeventstart	R	PerformanceNavigationTiming.domContentLoadedEventStart										
performancetiming domcontentloadedeventstart	R	PerformanceTiming.domContentLoadedEventStart										
navigator credentials	R	credentials										
request credentials	R	Request.credentials										
loop	D								*[[AudioBufferSourceNode.loop]] The loop property's default value is false.\n*[[HTMLMediaElement.loop]] The HTMLMediaElement.			
audiobuffersourcenode loop	R	AudioBufferSourceNode.loop										
htmlmediaelement loop	R	HTMLMediaElement.loop										
readvalue	D								*[[readValue()]] The BluetoothGATTDescriptor.\n*[[BluetoothRemoteGATTCharacteristic.readValue()]] The BluetoothRemoteGATTCharacteristic.			
bluetoothgattdescriptor readvalue	R	readValue()										
bluetoothremotegattcharacteristic readvalue	R	BluetoothRemoteGATTCharacteristic.readValue()										
displayid	D								*[[Gamepad.displayId]] The displayId read-only property of the Gamepad interface returns the VRDisplay.\n*[[VRDisplay.displayId]] The displayId read-only property of the VRDisplay interface returns an identifier for this particular VRDisplay, which is also used as an association point in the Gamepad API (see Gamepad.			
gamepad displayid	R	Gamepad.displayId										
vrdisplay displayid	R	VRDisplay.displayId										
example	D								*[[Compositing example]] This sample program demonstrates a number of compositing operations.\n*[[Ajax navigation example]] This is an example of an AJAX web site composed only of three pages (first_page.			
history api example	R	Ajax navigation example										
api extendablemessageevent	R	ExtendableMessageEvent										
extendablemessageevent extendablemessageevent	R	ExtendableMessageEvent.ExtendableMessageEvent()										
readastext	D								*[[FileReader.readAsText()]] The readAsText method is used to read the contents of the specified Blob or File.\n*[[LockedFile.readAsText()]] The readAsText method is used to read the content of the LockedFile object and provide the result of that reading as a string.			
filereader readastext	R	FileReader.readAsText()										
lockedfile readastext	R	LockedFile.readAsText()										
api credential	R	Credential										
rtciceserver credential	R	RTCIceServer.credential										
types	D								*[[DataTransfer.types]] The DataTransfer.\n*[[WebGL types]] The following types are used in WebGL interfaces.			
datatransfer types	R	DataTransfer.types										
webgl api types	R	WebGL types										
shippingaddress	D								*[[PaymentRequest.shippingAddress]] The shippingAddress read-only property of the PaymentRequest interface returns the shipping address provided by the user.\n*[[PaymentRespoonse.shippingAddress]] The shippingAddress read-only property of the PaymentRequest interface returns a PaymentAddress object containing the shipping address provided by the user.			
paymentrequest shippingaddress	R	PaymentRequest.shippingAddress										
paymentresponse shippingaddress	R	PaymentRespoonse.shippingAddress										
linewidth	D								*[[CanvasRenderingContext2D.lineWidth]] The CanvasRenderingContext2D.\n*[[WebGLRenderingContext.lineWidth()]] The WebGLRenderingContext.			
canvasrenderingcontext2d linewidth	R	CanvasRenderingContext2D.lineWidth										
webglrenderingcontext linewidth	R	WebGLRenderingContext.lineWidth()										
openkeycursor	D								*[[IDBIndex.openKeyCursor()]] The method sets the position of the cursor to the appropriate key, based on the specified direction.\n*[[IDBObjectStore.openKeyCursor()]] To determine if the add operation has completed successfully, listen for the results’s success event.			
idbindex openkeycursor	R	IDBIndex.openKeyCursor()										
idbobjectstore openkeycursor	R	IDBObjectStore.openKeyCursor()										
timeout	D								*[[PositionOptions.timeout]] The PositionOptions.\n*[[XMLHttpRequest.timeout]] The XMLHttpRequest.			
positionoptions timeout	R	PositionOptions.timeout										
xmlhttprequest timeout	R	XMLHttpRequest.timeout										
api pointerevent	R	PointerEvent										
pointerevent pointerevent	R	PointerEvent()										
getelementsbytagname	D								*[[Document.getElementsByTagName()]] Returns an HTMLCollection of elements with the given tag name.\n*[[Element.getElementsByTagName()]] The Element.			
document getelementsbytagname	R	Document.getElementsByTagName()										
element getelementsbytagname	R	Element.getElementsByTagName()										
scoped	D								*[[Event.scoped]] The scoped property of the Event interface returns a Boolean indicating whether the given event bubbles.\n*[[HTMLStyleElement.scoped]] The HTMLStyleElement.			
event scoped	R	Event.scoped										
htmlstyleelement scoped	R	HTMLStyleElement.scoped										
api wheelevent	R	WheelEvent										
wheelevent wheelevent	R	WheelEvent()										
api pushmanager	R	PushManager										
serviceworkerregistration pushmanager	R	ServiceWorkerRegistration.pushManager										
api urlsearchparams	R	URLSearchParams										
urlsearchparams urlsearchparams	R	URLSearchParams()										
installtrigger enabled	R	enabled										
mediastreamtrack enabled	R	MediaStreamTrack.enabled										
createbuffer	D								*[[AudioContext.createBuffer()]] An AudioBuffer.\n*[[WebGLRenderingContext.createBuffer()]] The WebGLRenderingContext.			
audiocontext createbuffer	R	AudioContext.createBuffer()										
webglrenderingcontext createbuffer	R	WebGLRenderingContext.createBuffer()										
watch	D								*[[IdentityManager.watch()]] This function registers callbacks that respond to a Persona user logging in or out.\n*[[Object.prototype.watch()]] The watch() method watches for a property to be assigned a value and runs a function when that occurs.			
identitymanager watch	R	IdentityManager.watch()										
object watch	R	Object.prototype.watch()										
api presentationconnectionavailableevent	R	PresentationConnectionAvailableEvent										
presentationconnectionavailableevent presentationconnectionavailableevent	R	PresentationConnectionAvailableEvent										
api focusevent	R	FocusEvent										
focusevent focusevent	R	FocusEvent()										
api federatedcredential	R	FederatedCredential										
federatedcredential federatedcredential	R	FederatedCredential										
method	D								*[[HTMLFormElement.method]] The HTMLFormElement.\n*[[Request.method]] The method read-only property of the Request interface contains the request's method (GET, POST, etc.			
htmlformelement method	R	HTMLFormElement.method										
request method	R	Request.method										
reload	D								*[[HTMLIFrameElement.reload()]] The reload() method of the HTMLIFrameElement interface is used to reload the content of the iframe.\n*[[Location.reload()]] The Location.			
htmliframeelement reload	R	HTMLIFrameElement.reload()										
location reload	R	Location.reload()										
loadeventstart	D								*[[PerformanceNavigationTiming.loadEventStart]] The loadEventStart property returns a timestamp representing the time value equal to the time immediately before the load event of the current document is fired.\n*[[PerformanceTiming.loadEventStart]] The PerformanceTiming.			
performancenavigationtiming loadeventstart	R	PerformanceNavigationTiming.loadEventStart										
performancetiming loadeventstart	R	PerformanceTiming.loadEventStart										
result	D								*[[FileReader.result]] Returns the file's contents.\n*[[IDBRequest.result]] An IDBObjectStore containing the result of the request.			
filereader result	R	FileReader.result										
idbrequest result	R	IDBRequest.result										
onlanguagechange	D								*[[WindowEventHandlers.onlanguagechange]] The WindowEventHandlers.\n*[[WorkerGlobalScope.onlanguagechange]] The onlanguagechange property of the WorkerGlobalScope interface represents an EventHandler to be called when the languagechange event occurs and bubbles through the Worker.			
windoweventhandlers onlanguagechange	R	WindowEventHandlers.onlanguagechange										
global onlanguagechange	R	WorkerGlobalScope.onlanguagechange										
filename	D								*[[File.fileName]] Returns the name of the file.\n*[[Error.prototype.fileName]] The fileName property contains the path to the file that raised this error.			
file filename	R	File.fileName										
error filename	R	Error.prototype.fileName										
onoffline	D								*[[Document.onoffline]] This event handler is called when an offline is fired on body and bubbles up, when navigator.\n*[[WorkerGlobalScope.onoffline]] The onoffline property of the WorkerGlobalScope interface represents an EventHandler to be called when the offline event occurs and bubbles through the Worker.			
document onoffline	R	Document.onoffline										
global onoffline	R	WorkerGlobalScope.onoffline										
api customevent	R	CustomEvent										
customevent customevent	R	CustomEvent()										
innerhtml	D								*[[Element.innerHTML]] The Element.\n*[[ShadowRoot.innerHTML]] The innerHTML property of the ShadowRoot interface sets or returns the DOM tree inside the ShadowRoot.			
element innerhtml	R	Element.innerHTML										
shadowroot innerhtml	R	ShadowRoot.innerHTML										
getmodifierstate	D								*[[KeyboardEvent.getModifierState()]] The KeyboardEvent.\n*[[MouseEvent.getModifierState()]] The MouseEvent.			
keyboardevent getmodifierstate	R	KeyboardEvent.getModifierState()										
mouseevent getmodifierstate	R	MouseEvent.getModifierState()										
api worker	R	Worker										
worker worker	R	Worker()										
api datatransferitem	R	DataTransferItem										
datatransferitemlist datatransferitem	R	DataTransferItemList.DataTransferItem()										
element shadowroot	R	Element.shadowRoot										
api shadowroot	R	ShadowRoot										
api trackdefaultlist	R	TrackDefaultList										
trackdefaultlist trackdefaultlist	R	TrackDefaultList.TrackDefaultList()										
api document	R	Document										
window document	R	Window.document										
api sourcebuffer	R	SourceBuffer										
sourcebufferlist sourcebuffer	R	SourceBufferList.SourceBuffer()										
api client	R	Client										
fetchevent client	R	FetchEvent.client										
left	D								*[[DOMRectReadOnly.left]] The left read-only property of the DOMRectReadOnly interface returns the left coordinate value of the DOMRect.\n*[[Screen.left]] Returns the distance in pixels from the left side of the main screen to the left side of the current screen.			
domrectreadonly left	R	DOMRectReadOnly.left										
screen left	R	Screen.left										
getkey	D								*[[IDBIndex.getKey()]] If a key is successfully found it is set as the result of the request object: this returns the primary key of the record the key is associated with, not the whole record as IDBIndex.\n*[[PushSubscription.getKey()]] The getKey() method of the PushSubscription interface returns an ArrayBuffer representing a client public key, which can then be sent to a server and used in encrypting push message data.			
idbindex getkey	R	IDBIndex.getKey()										
pushsubscription getkey	R	PushSubscription.getKey()										
api xmlhttprequest	R	XMLHttpRequest										
xmlhttprequest xmlhttprequest	R	XMLHttpRequest()										
which	D								*[[KeyboardEvent.which]] The KeyboardEvent.\n*[[MouseEvent.which]] The MouseEvent.			
keyboardevent which	R	KeyboardEvent.which										
mouseevent which	R	MouseEvent.which										
api dompoint	R	DOMPoint										
dompoint dompoint	R	DOMPoint.DOMPoint()										
escape	D								*[[CSS.escape()]] The CSS.\n*[[Global.escape]] The deprecated escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.			
css escape	R	CSS.escape()										
global escape	R	Global.escape										
tutorial	D								*[[Canvas tutorial]] This tutorial describes how to use the canvas element to draw 2D graphics, starting with the basics.\n*[[WebGL tutorial]] This tutorial describes how to use the canvas element to draw WebGL graphics, starting with the basics.			
canvas api tutorial	R	Canvas tutorial										
webgl api tutorial	R	WebGL tutorial										
settransform	D								*[[CanvasPattern.setTransform()]] The CanvasPattern.\n*[[CanvasRenderingContext2D.setTransform()]] The CanvasRenderingContext2D.			
canvaspattern settransform	R	CanvasPattern.setTransform()										
canvasrenderingcontext2d settransform	R	CanvasRenderingContext2D.setTransform()										
api speechsynthesisutterance	R	SpeechSynthesisUtterance										
speechsynthesisutterance speechsynthesisutterance	R	SpeechSynthesisUtterance.SpeechSynthesisUtterance()										
select	D								*[[HTMLContentElement.select]] The HTMLContentElement.\n*[[HTMLInputElement.select()]] The HTMLInputElement.			
htmlcontentelement select	R	HTMLContentElement.select										
htmlinputelement select	R	HTMLInputElement.select()										
form	D								*[[HTMLLabelElement.form]] The read-only HTMLLabelElement.\n*[[HTMLSelectElement.form]] The HTMLSelectElement.			
htmllabelelement form	R	HTMLLabelElement.form										
htmlselectelement form	R	HTMLSelectElement.form										
domcomplete	D								*[[PerformanceNavigationTiming.domComplete]] The domComplete property returns a timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to complete.\n*[[PerformanceTiming.domComplete]] The PerformanceTiming.			
performancenavigationtiming domcomplete	R	PerformanceNavigationTiming.domComplete										
performancetiming domcomplete	R	PerformanceTiming.domComplete										
moveto	D								*[[CanvasRenderingContext2D.moveTo()]] The CanvasRenderingContext2D.\n*[[Window.moveTo()]] Moves the window to the specified coordinates.			
canvasrenderingcontext2d moveto	R	CanvasRenderingContext2D.moveTo()										
window moveto	R	Window.moveTo()										
caretpositionfrompoint	D								*[[Document.caretPositionFromPoint()]] This method is used to retrieve the caret position in a document based on two coordinates.\n*[[DocumentOrShadowRoot.caretPositionFromPoint()]] The caretPositionFromPoint() property of the DocumentOrShadowRoot interface returns a CaretPosition object containing the DOM node containing the caret and caret's character offset within that node.			
document caretpositionfrompoint	R	Document.caretPositionFromPoint()										
documentorshadowroot caretpositionfrompoint	R	DocumentOrShadowRoot.caretPositionFromPoint()										
api speechsynthesis	R	SpeechSynthesis										
window speechsynthesis	R	Window.speechSynthesis										
dominteractive	D								*[[PerformanceNavigationTiming.domInteractive]] The domInteractive property returns a timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive.\n*[[PerformanceTiming.domInteractive]] The PerformanceTiming.			
performancenavigationtiming dominteractive	R	PerformanceNavigationTiming.domInteractive										
performancetiming dominteractive	R	PerformanceTiming.domInteractive										
statustext	D								*[[Response.statusText]] The statusText read-only property of the Response interface contains the status message corresponding to the status code (e.\n*[[XMLHttpRequest.statusText]] The XMLHttpRequest.			
response statustext	R	Response.statusText										
xmlhttprequest statustext	R	XMLHttpRequest.statusText										
push	D								*[[Navigator.push]] The Navigator.\n*[[Array.prototype.push]] The push() method adds one or more elements to the end of an array and returns the new length of the array.			
navigator push	R	Navigator.push										
array push	R	Array.prototype.push										
document elementsfrompoint	R	Document.elementsFromPoint()										
documentorshadowroot elementsfrompoint	R	elementsFromPoint										
getfrequencyresponse	D								*[[BiquadFilterNode.getFrequencyResponse()]] undefined\n*[[IIRFilterNode.getFrequencyResponse()]] undefined			
biquadfilternode getfrequencyresponse	R	BiquadFilterNode.getFrequencyResponse()										
iirfilternode getfrequencyresponse	R	IIRFilterNode.getFrequencyResponse()										
api rtcsessiondescription	R	RTCSessionDescription										
rtcsessiondescription rtcsessiondescription	R	RTCSessionDescription()										
uniform	D								*[[WebGL2RenderingContext.uniform[1234]ui[v]()]] The WebGL2RenderingContext.\n*[[WebGLRenderingContext.uniform[1234][fi][v]()]] The WebGLRenderingContext.			
webgl2renderingcontext uniform	R	WebGL2RenderingContext.uniform[1234]ui[v]()										
webglrenderingcontext uniform	R	WebGLRenderingContext.uniform[1234][fi][v]()										
redirectcount	D								*[[PerformanceNavigation.redirectCount]] The PerformanceNavigation.\n*[[PerformanceNavigationTiming.redirectCount]] The redirectCount property returns a timestamp representing the number of redirects since the last non-redirect navigation under the current browsing context.			
performancenavigation redirectcount	R	PerformanceNavigation.redirectCount										
performancenavigationtiming redirectcount	R	PerformanceNavigationTiming.redirectCount										
api inputdevicecapabilities	R	InputDeviceCapabilities										
inputdevicecapabilities inputdevicecapabilities	R	InputDeviceCapabilities										
onprogress	D								*[[FileRequest.onprogress]] This property specifies a callback function to be run repeatedly while the operation represented by a FileRequest object is in progress.\n*[[XMLHttpRequestEventTarget.onprogress]] The XMLHttpRequestEventTarget.			
filerequest onprogress	R	FileRequest.onprogress										
xmlhttprequesteventtarget onprogress	R	XMLHttpRequestEventTarget.onprogress										
api gamepad	R	Gamepad										
gamepadevent gamepad	R	GamepadEvent.gamepad										
api mouseevent	R	MouseEvent										
mouseevent mouseevent	R	MouseEvent()										
pseudoelement	D								*[[AnimationEvent.pseudoElement]] The AnimationEvent.\n*[[TransitionEvent.pseudoElement]] The TransitionEvent.			
animationevent pseudoelement	R	AnimationEvent.pseudoElement										
transitionevent pseudoelement	R	TransitionEvent.pseudoElement										
readasarraybuffer	D								*[[FileReader.readAsArrayBuffer()]] The FileReader interface's readAsArrayBuffer() method is used to start reading the contents of a specified Blob or File.\n*[[LockedFile.readAsArrayBuffer()]] The readAsArrayBuffer method is used to read the content of the LockedFile object and provide the result of that reading as an ArrayBuffer.			
filereader readasarraybuffer	R	FileReader.readAsArrayBuffer()										
lockedfile readasarraybuffer	R	LockedFile.readAsArrayBuffer()										
api domexception	R	DOMException										
domexception domexception	R	DOMException()										
write	D								*[[Document.write()]] Writes a string of text to a document stream opened by document.\n*[[LockedFile.write()]] The write method is used to write some data within the file.			
document write	R	Document.write()										
lockedfile write	R	LockedFile.write()										
foreach	D								*[[MediaKeyStatusMap.forEach()]] The forEach property of the MediaKeyStatusMap interface calls callback once for each key-value pair in the status map, in insertion order.\n*[[Array.prototype.forEach]] The forEach() method executes a provided function once per array element.			
mediakeystatusmap foreach	R	MediaKeyStatusMap.forEach()										
array foreach	R	Array.prototype.forEach										
array map	R	Array.prototype.map										
global map	R	Map										
max	D								*[[DeviceProximityEvent.max]] The max property provides the maximum sensing distance the sensor is able to report, in centimeters.\n*[[Math.max]] The Math.			
deviceproximityevent max	R	DeviceProximityEvent.max										
math max	R	Math.max										
navigator serviceworker	R	Navigator.serviceWorker										
api serviceworker	R	ServiceWorker										
audiotracks	D								*[[HTMLMediaElement.audioTracks]] The HTMLMediaElement.\n*[[SourceBuffer.audioTracks]] The audioTracks read-only property of the SourceBuffer interface returns a list of the audio tracks currently contained inside the SourceBuffer.			
htmlmediaelement audiotracks	R	HTMLMediaElement.audioTracks										
sourcebuffer audiotracks	R	SourceBuffer.audioTracks										
api installevent	R	InstallEvent										
installevent installevent	R	InstallEvent.InstallEvent()										
timing	D								*[[AnimationEffectReadOnly.timing]] The AnimationEffectReadOnly.\n*[[Performance.timing]] The Performance.			
animationeffectreadonly timing	R	AnimationEffectReadOnly.timing										
performance timing	R	Performance.timing										
api window	R	Window										
window window	R	Window.window										
sendbeacon	D								*[[Navigator.sendBeacon()]] The navigator.\n*[[WorkerNavigator.sendBeacon()]] The NavigatorWorker.			
navigator sendbeacon	R	Navigator.sendBeacon()										
workernavigator sendbeacon	R	WorkerNavigator.sendBeacon()										
now	D								*[[Performance.now()]] The Performance.\n*[[Date.now]] The Date.			
performance now	R	Performance.now()										
date now	R	Date.now										
api crypto	R	Crypto										
window crypto	R	Window.crypto										
setposition	D								*[[AudioListener.setPosition()]] Void.\n*[[PannerNode.setPosition()]] Void.			
audiolistener setposition	R	AudioListener.setPosition()										
pannernode setposition	R	PannerNode.setPosition()										
objectstore	D								*[[IDBIndex.objectStore]] An IDBObjectStore.\n*[[IDBTransaction.objectStore()]] Every call to this method on the same transaction object, with the same name, returns the same IDBObjectStore instance.			
idbindex objectstore	R	IDBIndex.objectStore										
idbtransaction objectstore	R	IDBTransaction.objectStore()										
language	D								*[[NavigatorLanguage.language]] The NavigatorLanguage.\n*[[TrackDefault.language]] The language read-only property of the TrackDefault interface returns a default language for an associated SourceBuffer to use when an initialization segment does not contain language information for a new track.			
navigatorlanguage language	R	NavigatorLanguage.language										
trackdefault language	R	TrackDefault.language										
audiocontext suspend	R	AudioContext.suspend()										
offlineaudiocontext suspend	R	suspend										
storage localstorage	R	LocalStorage										
window localstorage	R	Window.localStorage										
parsefloat	D								*[[Number.parseFloat()]] The Number.\n*[[Global.parseFloat]] The parseFloat() function parses a string argument and returns a floating point number.			
number parsefloat	R	Number.parseFloat()										
global parsefloat	R	Global.parseFloat										
api animation	R	Animation										
animation animation	R	Animation.Animation()										
api eventsource	R	EventSource										
eventsource eventsource	R	EventSource()										
channel	D								*[[RTCDataChannelEvent.channel]] The read-only property RTCDataChannelEvent.\n*[[XMLHttpRequest.channel]] XMLHttpRequest.			
rtcdatachannelevent channel	R	RTCDataChannelEvent.channel										
xmlhttprequest channel	R	XMLHttpRequest.channel										
buffer	D								*[[AudioBufferSourceNode.buffer]] If the buffer property is set to the value NULL, it defines a single channel of silence.\n*[[ConvolverNode.buffer]] An AudioBuffer.			
audiobuffersourcenode buffer	R	AudioBufferSourceNode.buffer										
convolvernode buffer	R	ConvolverNode.buffer										
beta	D								*[[DeviceOrientationEvent.beta]] Returns the rotation of the device around the X axis; that is, the number of degrees, ranged between -180 and 180,  by which the device is tipped forward or backward.\n*[[DeviceRotationRate.beta]] This property indicates the rate of rotation around the X axis -- in degrees per second -- in a DeviceRotationRate object.			
deviceorientationevent beta	R	DeviceOrientationEvent.beta										
devicerotationrate beta	R	DeviceRotationRate.beta										
parseint	D								*[[Number.parseInt()]] The Number.\n*[[Global.parseInt]] The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).			
number parseint	R	Number.parseInt()										
global parseint	R	Global.parseInt										
loadeventend	D								*[[PerformanceNavigationTiming.loadEventEnd]] The loadEventEnd property returns a timestamp which is equal to the time when the load event of the current document is completed.\n*[[PerformanceTiming.loadEventEnd]] The PerformanceTiming.			
performancenavigationtiming loadeventend	R	PerformanceNavigationTiming.loadEventEnd										
performancetiming loadeventend	R	PerformanceTiming.loadEventEnd										
outertext	D								*[[HTMLElement.outerText]] HTMLElement.\n*[[Node.outerText]] See HTMLElement.			
htmlelement outertext	R	HTMLElement.outerText										
node outertext	R	Node.outerText										
requeststart	D								*[[PerformanceResourceTiming.requestStart]] The requestStart property returns a timestamp of the time immediately before the browser starts requesting the resource from the server, cache, or local resource.\n*[[PerformanceTiming.requestStart]] The PerformanceTiming.			
performanceresourcetiming requeststart	R	PerformanceResourceTiming.requestStart										
performancetiming requeststart	R	PerformanceTiming.requestStart										
getconfiguration	D								*[[getConfiguration()]] The MediaKeySystemAccess.\n*[[RTCPeerConnection.getConfiguration()]] The RTCPeerConnection.			
mediakeysystemaccess getconfiguration	R	getConfiguration()										
rtcpeerconnection getconfiguration	R	RTCPeerConnection.getConfiguration()										
caller	D								*[[arguments.caller]] The obsolete arguments.\n*[[Function.caller]] The function.			
arguments caller	R	arguments.caller										
function caller	R	Function.caller										
searchparams	D								*[[URLUtils.searchParams]] The URLUtils.\n*[[URL.searchParams]] The searchParams property of the URL interface returns a URLSearchParams object allowing to access the GET query arguments contained in the URL.			
htmlhyperlinkelementutils searchparams	R	URLUtils.searchParams										
url searchparams	R	URL.searchParams										
createevent	D								*[[Document.createEvent()]] Creates an event of the type specified.\n*[[Event.createEvent()]] Creates a new event, which must then be initialized by calling its init() method.			
document createevent	R	Document.createEvent()										
event createevent	R	Event.createEvent()										
api screen	R	Screen										
window screen	R	Window.screen										
region	D								*[[MouseEvent.region]] The MouseEvent.\n*[[PaymentAddress.region]] The region read-only property of the PaymentAddress interface returns a string containing a top level administrative subdivision of the country, for example, a state, province, oblast, or prefecture.			
mouseevent region	R	MouseEvent.region										
paymentaddress region	R	PaymentAddress.region										
getelementsbytagnamens	D								*[[Document.getElementsByTagNameNS()]] Returns a list of elements with the given tag name belonging to the given namespace.\n*[[Element.getElementsByTagNameNS()]] The Element.			
document getelementsbytagnamens	R	Document.getElementsByTagNameNS()										
element getelementsbytagnamens	R	Element.getElementsByTagNameNS()										
animationeffecttimingproperties iterations	R	Iterations										
animationeffecttimingreadonly iterations	R	AnimationEffectTimingReadOnly.iterations										
cancel	D								*[[Animation.cancel()]] The Animation.\n*[[SpeechSynthesis.cancel()]] The cancel() method of the SpeechSynthesis interface removes all utterances from the utterance queue.			
animation cancel	R	Animation.cancel()										
speechsynthesis cancel	R	SpeechSynthesis.cancel()										
localname	D								*[[Attr.localName]] The Attr.\n*[[Element.localName]] The Element.			
attr localname	R	Attr.localName										
element localname	R	Element.localName										
sticky	D								*[[Notification.sticky]] The sticky read-only property of the Notification interface specifies whether the notification should be 'sticky' or not.\n*[[RegExp.prototype.sticky]] The sticky property reflects whether or not the search is sticky (searches in strings only from the index indicated by the lastIndex property of this regular expression).			
notification sticky	R	Notification.sticky										
regexp sticky	R	RegExp.prototype.sticky										
api textdecoder	R	TextDecoder										
textdecoder textdecoder	R	TextDecoder()										
api inputevent	R	InputEvent										
inputevent inputevent	R	InputEvent()										
parse	D								*[[Date.parse]] The Date.\n*[[JSON.parse]] The JSON.			
date parse	R	Date.parse										
json parse	R	JSON.parse										
media	D								*[[HTMLStyleElement.media]] The HTMLSyleElement.\n*[[StyleSheet.media]] media specifies the intended destination medium for style information.			
htmlstyleelement media	R	HTMLStyleElement.media										
stylesheet media	R	StyleSheet.media										
hostname	D								*[[HTMLHyperlinkElementUtils.hostname]] The HTMLHyperlinkElementUtils.\n*[[URLUtilsReadOnly.hostname]] The URLUtilsReadOnly.			
htmlhyperlinkelementutils hostname	R	HTMLHyperlinkElementUtils.hostname										
urlutilsreadonly hostname	R	URLUtilsReadOnly.hostname										
arguments	D								*[[Arguments object]] The arguments object is an Array -like object corresponding to the arguments passed to a function.\n*[[Function.arguments]] The function.			
functions arguments syntax	R	Arguments object										
functions arguments example	R	Arguments object										
arguments	R	Arguments object										
arguments syntax	R	Arguments object										
arguments example	R	Arguments object										
functions arguments	R	Arguments object										
function arguments	R	Function.arguments										
finish	D								*[[Animation.finish()]] None.\n*[[WebGLRenderingContext.finish()]] The WebGLRenderingContext.			
animation finish	R	Animation.finish()										
webglrenderingcontext finish	R	WebGLRenderingContext.finish()										
animationeffecttimingproperties easing	R	Easing										
animationeffecttimingreadonly easing	R	AnimationEffectTimingReadOnly.easing										
nan	D								*[[Global.NaN]] The global NaN property is a value representing Not-A-Number.\n*[[Number.NaN]] The Number.			
global nan	R	Global.NaN										
number nan	R	Number.NaN										
api touch	R	Touch										
touch touch	R	Touch()										
displayname	D								*[[VRDisplay.displayName]] The displayName read-only property of the VRDisplay interface returns a human-readable name to identify the VRDisplay.\n*[[Function.displayName]] The function.			
vrdisplay displayname	R	VRDisplay.displayName										
function displayname	R	Function.displayName										
capturestream	D								*[[HTMLCanvasElement.captureStream()]] The HTMLCanvasElement.\n*[[HTMLMediaElement.captureStream()]] The captureStream() property of the HTMLMediaElement interface returns in a MediaStream object a real-time capture of the media that is rendered to the media element.			
htmlcanvaselement capturestream	R	HTMLCanvasElement.captureStream()										
htmlmediaelement capturestream	R	HTMLMediaElement.captureStream()										
@@species	D								*[[get Array[@@species]]] The Array[@@species] accessor property returns the Array constructor.\n*[[get RegExp[@@species]]] The RegExp[@@species] accessor property returns the RegExp constructor.			
array @@species	R	get Array[@@species]										
regexp @@species	R	get RegExp[@@species]										
addtrack	D								*[[MediaStream.addTrack()]] The MediaStream.\n*[[RTCPeerConnection.addTrack()]] The RTCPeerConnection method addTrack() adds a new media track to the connection.			
mediastream addtrack	R	MediaStream.addTrack()										
rtcpeerconnection addtrack	R	RTCPeerConnection.addTrack()										
api extendableevent	R	ExtendableEvent										
extendableevent extendableevent	R	ExtendableEvent.ExtendableEvent()										
previoussibling	D								*[[Node.previousSibling]] The Node.\n*[[TreeWalker.previousSibling()]] The TreeWalker.			
node previoussibling	R	Node.previousSibling										
treewalker previoussibling	R	TreeWalker.previousSibling()										
secureconnectionstart	D								*[[PerformanceResourceTiming.secureConnectionStart]] The secureConnectionStart property returns a timestamp immediately before the browser starts the handshake process to secure the current connection.\n*[[PerformanceTiming.secureConnectionStart]] The PerformanceTiming.			
performanceresourcetiming secureconnectionstart	R	PerformanceResourceTiming.secureConnectionStart										
performancetiming secureconnectionstart	R	PerformanceTiming.secureConnectionStart										
redirectstart	D								*[[PerformanceResourceTiming.redirectStart]] The redirectStart property returns a timestamp representing the start time of the fetch which that initiates the redirect.\n*[[PerformanceTiming.redirectStart]] The PerformanceTiming.			
performanceresourcetiming redirectstart	R	PerformanceResourceTiming.redirectStart										
performancetiming redirectstart	R	PerformanceTiming.redirectStart										
log	D								*[[Console.log()]] Outputs a message to the Web Console.\n*[[Math.log]] The Math.			
console log	R	Console.log()										
math log	R	Math.log										
visibilitystate	D								*[[Document.visibilityState]] The Document.\n*[[WindowClient.visibilityState]] The visibilityState read-only property of the WindowClient interface indicates the visibility of the current client.			
document visibilitystate	R	Document.visibilityState										
windowclient visibilitystate	R	WindowClient.visibilityState										
speechsynthesisvoice default	R	SpeechSynthesisVoice.default										
statements default syntax	R	default										
statements default example	R	default										
default syntax	R	default										
default example	R	default										
statements default	R	default										
responsestart	D								*[[PerformanceResourceTiming.responseStart]] The responseStart property returns a timestamp immediately after the browser receives the first byte of the response from the server, cache, or local resource.\n*[[PerformanceTiming.responseStart]] The PerformanceTiming.			
performanceresourcetiming responsestart	R	PerformanceResourceTiming.responseStart										
performancetiming responsestart	R	PerformanceTiming.responseStart										
api file	R	File										
filesystemfileentry file	R	FileSystemFileEntry.file()										
api intersectionobserver	R	IntersectionObserver										
intersectionobserver intersectionobserver	R	IntersectionObserver.IntersectionObserver()										
concat	D								*[[Array.prototype.concat]] The concat() method returns a new array comprised of the array on which it is called joined with the array(s) and/or value(s) provided as arguments.\n*[[String.prototype.concat]] The concat() method combines the text of one or more strings and returns a new string.			
array concat	R	Array.prototype.concat										
string concat	R	String.prototype.concat										
elementfrompoint	D								*[[Document.elementFromPoint()]] The elementFromPoint() method of the Document interface returns the topmost element at the specified coordinates.\n*[[DocumentOrShadowRoot.elementFromPoint()]] The elementFromPoint() property of the DocumentOrShadowRoot interface returns the topmost element at the specified coordinates.			
document elementfrompoint	R	Document.elementFromPoint()										
documentorshadowroot elementfrompoint	R	DocumentOrShadowRoot.elementFromPoint()										
api offscreencanvas	R	OffscreenCanvas										
offscreencanvas offscreencanvas	R	OffscreenCanvas()										
api sharedkeyframelist	R	SharedKeyframeList										
sharedkeyframelist sharedkeyframelist	R	SharedKeyframeList.SharedKeyframeList()										
api imagedata	R	ImageData										
imagedata imagedata	R	ImageData()										
api closeevent	R	CloseEvent										
closeevent closeevent	R	CloseEvent()										
plugins	D								*[[Document.plugins]] Returns an HTMLCollection object containing one or more HTMLEmbedElement s or null which represent the embed elements in the current document.\n*[[NavigatorPlugins.plugins]] Returns a PluginArray object, listing the plugins installed in the application.			
document plugins	R	Document.plugins										
navigatorplugins plugins	R	NavigatorPlugins.plugins										
api mediastreamtrackevent	R	MediaStreamTrackEvent										
mediastreamtrackevent mediastreamtrackevent	R	MediaStreamTrackEvent()										
hash	D								*[[HTMLHyperlinkElementUtils.hash]] The HTMLHyperlinkElementUtils.\n*[[URLUtilsReadOnly.hash]] The URLUtilsReadOnly.			
htmlhyperlinkelementutils hash	R	HTMLHyperlinkElementUtils.hash										
urlutilsreadonly hash	R	URLUtilsReadOnly.hash										
shippingoption	D								*[[PaymentRequest.shippingOption]] The shippingOption read-only property of the PaymentRequest interface returns the shipping option selected by the user.\n*[[PaymentResponse.shippingOption]] The shippingOption read-only property of the PaymentRequest interface returns the ID attribute of the shipping option selected by the user.			
paymentrequest shippingoption	R	PaymentRequest.shippingOption										
paymentresponse shippingoption	R	PaymentResponse.shippingOption										
promiserejection reason	R	reason										
promiserejectionevent reason	R	PromiseRejectionEvent.reason										
action	D								*[[HTMLFormElement.action]] The HTMLFormElement.\n*[[NotificationEvent.action]] Returns the string ID of the notification button the user clicked.			
htmlformelement action	R	HTMLFormElement.action										
notificationevent action	R	NotificationEvent.action										
api paymentrequest	R	PaymentRequest										
paymentrequest paymentrequest	R	PaymentRequest.PaymentRequest()										
lastchild	D								*[[Node.lastChild]] The Node.\n*[[TreeWalker.lastChild()]] The TreeWalker.			
node lastchild	R	Node.lastChild										
treewalker lastchild	R	TreeWalker.lastChild()										
writevalue	D								*[[writeValue()]] The BluetoothGATTDescriptor.\n*[[BluetoothRemoteGATTCharacteristic.writeValue()]] The BluetoothRemoteGATTCharacteristic.			
bluetoothgattdescriptor writevalue	R	writeValue()										
bluetoothremotegattcharacteristic writevalue	R	BluetoothRemoteGATTCharacteristic.writeValue()										
cancelbubble	D								*[[Event.cancelBubble]] The Event.\n*[[UIEvent.cancelBubble]] The UIEvent.			
event cancelbubble	R	Event.cancelBubble										
uievent cancelbubble	R	UIEvent.cancelBubble										
api history	R	History										
window history	R	Window.history										
prompt	D								*[[BeforeInstallPromptEvent.prompt()]] The prompt() method of the BeforeInstallPromptEvent interface allows a developer to show the install prompt at a time of their own choosing.\n*[[Window.prompt()]] The Window.			
beforeinstallpromptevent prompt	R	BeforeInstallPromptEvent.prompt()										
window prompt	R	Window.prompt()										
toblob	D								*[[HTMLCanvasElement.toBlob()]] The HTMLCanvasElement.\n*[[OffscreenCanvas.toBlob()]] The OffscreenCanvas.			
htmlcanvaselement toblob	R	HTMLCanvasElement.toBlob()										
offscreencanvas toblob	R	OffscreenCanvas.toBlob()										
onpause	D								*[[MediaRecorder.onpause]] The MediaRecorder.\n*[[SpeechSynthesisUtterance.onpause]] The onpause property of the SpeechSynthesisUtterance interface represents an event handler that will run when the utterance is paused part way through (when the pause event fires.			
mediarecorder onpause	R	MediaRecorder.onpause										
speechsynthesisutterance onpause	R	SpeechSynthesisUtterance.onpause										
samplerate	D								*[[AudioBuffer.sampleRate]] A float.\n*[[AudioContext.sampleRate]] A floating point number.			
audiobuffer samplerate	R	AudioBuffer.sampleRate										
audiocontext samplerate	R	AudioContext.sampleRate										
fetchstart	D								*[[PerformanceResourceTiming.fetchStart]] The fetchStart property represents a timestamp immediately before the browser starts to fetch the resource.\n*[[PerformanceTiming.fetchStart]] The PerformanceTiming.			
performanceresourcetiming fetchstart	R	PerformanceResourceTiming.fetchStart										
performancetiming fetchstart	R	PerformanceTiming.fetchStart										
api rtcpeerconnection	R	RTCPeerConnection										
rtcpeerconnection rtcpeerconnection	R	RTCPeerConnection()										
keypath	D								*[[IDBIndex.keyPath]] Any data type that can be used as a key path.\n*[[IDBObjectStore.keyPath]] If this property is null, the application must provide a key for each modification operation.			
idbindex keypath	R	IDBIndex.keyPath										
idbobjectstore keypath	R	IDBObjectStore.keyPath										
onresume	D								*[[MediaRecorder.onresume]] The MediaRecorder.\n*[[SpeechSynthesisUtterance.onresume]] The onresume property of the SpeechSynthesisUtterance interface represents an event handler that will run when a paused utterance is resumed (when the resume event fires.			
mediarecorder onresume	R	MediaRecorder.onresume										
speechsynthesisutterance onresume	R	SpeechSynthesisUtterance.onresume										
opencursor	D								*[[IDBIndex.openCursor()]] The method sets the position of the cursor to the appropriate record, based on the specified direction.\n*[[IDBObjectStore.openCursor()]] To determine if the add operation has completed successfully, listen for the results’s success event.			
idbindex opencursor	R	IDBIndex.openCursor()										
idbobjectstore opencursor	R	IDBObjectStore.openCursor()										
disabled	D								*[[HTMLSelectElement.disabled]] The HTMLSelectElement.\n*[[StyleSheet.disabled]] The StyleSheet.			
htmlselectelement disabled	R	HTMLSelectElement.disabled										
stylesheet disabled	R	StyleSheet.disabled										
style	D								*[[CSSStyleRule.style]] The CSSRule.\n*[[HTMLElement.style]] The&#160;HTMLElement.			
cssstylerule style	R	CSSStyleRule.style										
htmlelement style	R	HTMLElement.style										
ononline	D								*[[Document.ononline]] " online " event is fired on the body of each page when the browser switches between online and offline mode.\n*[[WorkerGlobalScope.ononline]] The ononline property of the WorkerGlobalScope interface represents an EventHandler to be called when the online event occurs and bubbles through the Worker.			
document ononline	R	Document.ononline										
global ononline	R	WorkerGlobalScope.ononline										
getdistributednodes	D								*[[HTMLContentElement.getDistributedNodes()]] The HTMLContentElement.\n*[[HTMLShadowElement.getDistributedNodes()]] The HTMLShadowElement.			
htmlcontentelement getdistributednodes	R	HTMLContentElement.getDistributedNodes()										
htmlshadowelement getdistributednodes	R	HTMLShadowElement.getDistributedNodes()										
referrer	D								*[[Document.referrer]] Returns the URI of the page that linked to this page.\n*[[Request.referrer]] The referrer read-only property of the Request interface is set by the user agent to be the referrer of the Request.			
document referrer	R	Document.referrer										
request referrer	R	Request.referrer										
ports	D								*[[ExtendableMessageEvent.ports]] The ports read-only property of the ExtendableMessageEvent interface returns the array containing the MessagePort objects representing the ports of the associated message channel (the channel the message is being sent through.\n*[[ServiceWorkerMessageEvent.ports]] The ports read-only property of the ServiceWorkerMessageEvent interface returns an array of MessagePort objects connected with the message channel the message is being sent through.			
extendablemessageevent ports	R	ExtendableMessageEvent.ports										
serviceworkermessageevent ports	R	ServiceWorkerMessageEvent.ports										
nextnode	D								*[[NodeIterator.nextNode()]] The NodeIterator.\n*[[TreeWalker.nextNode()]] The TreeWalker.			
nodeiterator nextnode	R	NodeIterator.nextNode()										
treewalker nextnode	R	TreeWalker.nextNode()										
api mediastreamevent	R	MediaStreamEvent										
mediastreamevent mediastreamevent	R	MediaStreamEvent()										
animationeffecttimingproperties enddelay	R	EndDelay										
animationeffecttimingreadonly enddelay	R	AnimationEffectTimingReadOnly.endDelay										
timeline	D								*[[Animation.timeline]] The Animation.\n*[[Document.timeline]] The timeline readonly property of the Document interface represents the default timeline of the current document.			
animation timeline	R	Animation.timeline										
document timeline	R	Document.timeline										
put	D								*[[Cache.put()]] The put() method of the Cache interface allows key/value pairs to be added to the current Cache object.\n*[[IDBObjectStore.put()]] If the record is successfully stored, then a success event is fired on the returned request object with the result set to the key for the stored record, and the transaction set to the transaction in which this object store is opened.			
cache put	R	Cache.put()										
idbobjectstore put	R	IDBObjectStore.put()										
api documentfragment	R	DocumentFragment										
documentfragment documentfragment	R	DocumentFragment()										
api promiserejection	R	PromiseRejection										
promiserejection promiserejection	R	PromiseRejection										
assign	D								*[[Location.assign()]] The Location.\n*[[Object.assign()]] The Object.			
location assign	R	Location.assign()										
object assign	R	Object.assign()										
getentriesbyname	D								*[[Performance.getEntriesByName()]] The getEntriesByName() method returns a list of PerformanceEntry objects for the given name and type.\n*[[PerformanceObserverEntryList.getEntriesByName()]] The getEntriesByName() method of the PerformanceObserverEntryList interface returns a list of explicitly observed performance entry objects for a given name and entry type.			
performance getentriesbyname	R	Performance.getEntriesByName()										
performanceobserverentrylist getentriesbyname	R	PerformanceObserverEntryList.getEntriesByName()										
vibrate	D								*[[Navigator.vibrate()]] The Navigator.\n*[[Notification.vibrate]] The vibrate read-only property of the Notification interface specifies a a vibration pattern for the device's vibration hardware to emit when the notification fires.			
navigator vibrate	R	Navigator.vibrate()										
notification vibrate	R	Notification.vibrate										
api dragevent	R	DragEvent										
dragevent dragevent	R	DragEvent()										
api sharedworker	R	SharedWorker										
sharedworker sharedworker	R	SharedWorker()										
sign	D								*[[SubtleCrypto.sign()]] The SubtleCrypto.\n*[[Math.sign()]] The Math.			
subtlecrypto sign	R	SubtleCrypto.sign()										
math sign	R	Math.sign()										
kind	D								*[[DataTransferItem.kind]] The read-only DataTransferItem.\n*[[MediaStreamTrack.kind]] The read-only property MediaStreamTrack.			
datatransferitem kind	R	DataTransferItem.kind										
mediastreamtrack kind	R	MediaStreamTrack.kind										
api mediarecorder	R	MediaRecorder										
mediarecorder mediarecorder	R	MediaRecorder.MediaRecorder()										
matchall	D								*[[Cache.matchAll()]] The matchAll() method of the Cache interface returns a Promise that resolves to an array of all matching requests in the Cache object.\n*[[Clients.matchAll()]] The matchAll() method of the Clients interface returns a Promise for a list of service worker clients.			
cache matchall	R	Cache.matchAll()										
clients matchall	R	Clients.matchAll()										
api mediasource	R	MediaSource										
mediasource mediasource	R	MediaSource.MediaSource()										
getentries	D								*[[Performance.getEntries()]] The getEntries() method returns a list of PerformanceEntry objects for a given filter.\n*[[PerformanceObserverEntryList.getEntries()]] The getEntries() method of the PerformanceObserverEntryList interface returns a list of explicitly observed performance entry objects for a given filter.			
performance getentries	R	Performance.getEntries()										
performanceobserverentrylist getentries	R	PerformanceObserverEntryList.getEntries()										
collapse	D								*[[Range.collapse()]] The Range.\n*[[Selection.collapse()]] The Selection.			
range collapse	R	Range.collapse()										
selection collapse	R	Selection.collapse()										
self	D								*[[Window.self]] The Window.\n*[[WorkerGlobalScope.self]] The self read-only property of the WorkerGlobalScope interface returns a reference to the WorkerGlobalScope itself.			
window self	R	Window.self										
global self	R	WorkerGlobalScope.self										
play	D								*[[Animation.play()]] None.\n*[[play()]] The HTMLMediaElement.			
animation play	R	Animation.play()										
htmlmediaelement play	R	play()										
api promiserejectionevent	R	PromiseRejectionEvent										
promiserejectionevent promiserejectionevent	R	PromiseRejectionEvent()										
firstchild	D								*[[Node.firstChild]] The Node.\n*[[TreeWalker.firstChild()]] The TreeWalker.			
node firstchild	R	Node.firstChild										
treewalker firstchild	R	TreeWalker.firstChild()										
alpha	D								*[[DeviceOrientationEvent.alpha]] Returns the rotation of the device around the Z axis; that is, the number of degrees by which the device is being twisted around the center of the screen.\n*[[DeviceRotationRate.alpha]] This property indicates the rate of rotation around the Z axis -- in degrees per second -- in a DeviceRotationRate object.			
deviceorientationevent alpha	R	DeviceOrientationEvent.alpha										
devicerotationrate alpha	R	DeviceRotationRate.alpha										
api datatransfer	R	DataTransfer										
dragevent datatransfer	R	DragEvent.dataTransfer										
api rtcpeerconnectioniceevent	R	RTCPeerConnectionIceEvent										
rtcpeerconnectioniceevent rtcpeerconnectioniceevent	R	RTCPeerConnectionIceEvent()										
restore	D								*[[CanvasRenderingContext2D.restore()]] The CanvasRenderingContext2D.\n*[[Window.restore()]] This method is currently not working, but you can use:			
canvasrenderingcontext2d restore	R	CanvasRenderingContext2D.restore()										
window restore	R	Window.restore()										
getboundingclientrect	D								*[[Element.getBoundingClientRect()]] The Element.\n*[[Range.getBoundingClientRect()]] The Range.			
element getboundingclientrect	R	Element.getBoundingClientRect()										
range getboundingclientrect	R	Range.getBoundingClientRect()										
api speechgrammarlist	R	SpeechGrammarList										
speechgrammarlist speechgrammarlist	R	SpeechGrammarList.SpeechGrammarList()										
find	D								*[[Window.find()]] Finds a string in a window.\n*[[Array.prototype.find()]] The find() method returns a value in the array, if an element in the array satisfies the provided testing function.			
window find	R	Window.find()										
array find	R	Array.prototype.find()										
redirectend	D								*[[PerformanceResourceTiming.redirectEnd]] The redirectEnd property returns a timestamp immediately after receiving the last byte of the response of the last redirect.\n*[[PerformanceTiming.redirectEnd]] The PerformanceTiming.			
performanceresourcetiming redirectend	R	PerformanceResourceTiming.redirectEnd										
performancetiming redirectend	R	PerformanceTiming.redirectEnd										
nameditem	D								*[[HTMLFormControlsCollection.namedItem()]] Note that this version of namedItem() hide the one inherited from HTMLCollection.\n*[[HTMLSelectElement.namedItem()]] The HTMLSelectElement.			
htmlformcontrolscollection nameditem	R	HTMLFormControlsCollection.namedItem()										
htmlselectelement nameditem	R	HTMLSelectElement.namedItem()										
api notificationevent	R	NotificationEvent										
notificationevent notificationevent	R	NotificationEvent.NotificationEvent()										
responseend	D								*[[PerformanceResourceTiming.responseEnd]] The responseEnd property returns a timestamp immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.\n*[[PerformanceTiming.responseEnd]] The PerformanceTiming.			
performanceresourcetiming responseend	R	PerformanceResourceTiming.responseEnd										
performancetiming responseend	R	PerformanceTiming.responseEnd										
getusermedia	D								*[[MediaDevices.getUserMedia()]] The MediaDevices.\n*[[Navigator.getUserMedia()]] The Navigator.			
mediadevices getusermedia	R	MediaDevices.getUserMedia()										
navigator getusermedia	R	Navigator.getUserMedia()										
activeelement	D								*[[Document.activeElement]] Returns the currently focused element, that is, the element that will get keystroke events if the user types any.\n*[[DocumentOrShadowRoot.activeElement]] The activeElement property of the DocumentOrShadowRoot interface returns the element within the shadow tree that has focus.			
document activeelement	R	Document.activeElement										
documentorshadowroot activeelement	R	DocumentOrShadowRoot.activeElement										
dump	D								*[[Window.dump()]] Prints messages to the (native) console.\n*[[WorkerGlobalScope.dump()]] The dump() method of the WorkerGlobalScope interface allows you to write a message to stdout — i.			
window dump	R	Window.dump()										
global dump	R	WorkerGlobalScope.dump()										
htmlmediaelement muted	R	HTMLMediaElement.muted										
mediastreamtrack muted	R	muted										
reverse	D								*[[Animation.reverse()]] None.\n*[[Array.prototype.reverse]] The reverse() method reverses an array in place.			
animation reverse	R	Animation.reverse()										
array reverse	R	Array.prototype.reverse										
context	D								*[[AudioNode.context]] An AudioContext object.\n*[[Request.context]] The context read-only property of the Request interface contains the context of the Request (e.			
audionode context	R	AudioNode.context										
request context	R	Request.context										
api geolocation	R	Geolocation										
navigator geolocation	R	Navigator.geolocation										
legacy_generator_function	D								*[[Legacy generator function expression]] The function keyword can be used to define a legacy generator function inside an expression.\n*[[Legacy generator function]] The legacy generator function statement declares legacy generator functions with the specified parameters.			
operators legacy generator function syntax	R	Legacy generator function expression										
operators legacy generator function example	R	Legacy generator function expression										
legacy generator function	R	Legacy generator function expression										
legacy generator function syntax	R	Legacy generator function expression										
legacy generator function example	R	Legacy generator function expression										
operators legacy generator function	R	Legacy generator function expression										
statements legacy generator function syntax	R	Legacy generator function										
statements legacy generator function example	R	Legacy generator function										
legacy generator function syntax	R	Legacy generator function										
legacy generator function example	R	Legacy generator function										
statements legacy generator function	R	Legacy generator function										
oninstall	D								*[[ServiceWorkerGlobalScope.oninstall]] The oninstall property of the ServiceWorkerGlobalScope interface is an event handler fired whenever an install event occurs (when the service worker installs).\n*[[Window.oninstall]] The oninstall property of the Window interface represent the event handler for the install event, which is thrown each time the page is successfully installed as a web app.			
global oninstall	R	ServiceWorkerGlobalScope.oninstall										
window oninstall	R	Window.oninstall										
bgcolor	D								*[[Document.bgColor]] The deprecated bgColor property gets or sets the background color of the current document.\n*[[HTMLTableElement.bgColor]] The HTMLTableElement.			
document bgcolor	R	Document.bgColor										
htmltableelement bgcolor	R	HTMLTableElement.bgColor										
api documenttimeline	R	DocumentTimeline										
documenttimeline documenttimeline	R	DocumentTimeline.DocumentTimeline()										
api clipboardevent	R	ClipboardEvent										
clipboardevent clipboardevent	R	ClipboardEvent()										
api blobevent	R	BlobEvent										
blobevent blobevent	R	BlobEvent()										
onclick	D								*[[GlobalEventHandlers.onclick]] The onclick property returns the click event handler code on the current element.\n*[[Notification.onclick]] The onclick property of the Notification interface specifies an event listener to receive click events.			
global onclick	R	GlobalEventHandlers.onclick										
notification onclick	R	Notification.onclick										
cancelanimationframe	D								*[[VRDisplay.cancelAnimationFrame()]] The cancelAnimationFrame() method of the VRDisplay interface is a special implementation of Window.\n*[[window.cancelAnimationFrame()]] Cancels an animation frame request previously scheduled through a call to window.			
vrdisplay cancelanimationframe	R	VRDisplay.cancelAnimationFrame()										
window cancelanimationframe	R	window.cancelAnimationFrame()										
previousnode	D								*[[NodeIterator.previousNode()]] The NodeIterator.\n*[[TreeWalker.previousNode()]] The TreeWalker.			
nodeiterator previousnode	R	NodeIterator.previousNode()										
treewalker previousnode	R	TreeWalker.previousNode()										
getelementsbyclassname	D								*[[Document.getElementsByClassName()]] Returns an array-like object of all child elements which have all of the given class names.\n*[[Element.getElementsByClassName()]] The Element.			
document getelementsbyclassname	R	Document.getElementsByClassName()										
element getelementsbyclassname	R	Element.getElementsByClassName()										
indexof	D								*[[Array.prototype.indexOf]] The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.\n*[[String.prototype.indexOf]] The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex.			
array indexof	R	Array.prototype.indexOf										
string indexof	R	String.prototype.indexOf										
api passwordcredential	R	PasswordCredential										
passwordcredential passwordcredential	R	PasswordCredential										
idbcursor continue	R	IDBCursor.continue()										
statements continue syntax	R	continue										
statements continue example	R	continue										
continue syntax	R	continue										
continue example	R	continue										
statements continue	R	continue										
presentationconnection binarytype	R	binaryType										
rtcdatachannel binarytype	R	RTCDataChannel.binaryType										
api range	R	Range										
range range	R	Range()										
gamma	D								*[[DeviceOrientationEvent.gamma]] Returns the rotation of the device around the Y axis; that is, the number of degrees, ranged between -90 and 90, by which the device is turned left or right.\n*[[DeviceRotationRate.gamma]] This property indicates the rate of rotation around the Y axis -- in degrees per second -- in a DeviceRotationRate object.			
deviceorientationevent gamma	R	DeviceOrientationEvent.gamma										
devicerotationrate gamma	R	DeviceRotationRate.gamma										
connectend	D								*[[PerformanceResourceTiming.connectEnd]] The connectEnd property returns the timestamp immediately after the browser finishes establishing the connection to the server to retrieve the resource.\n*[[PerformanceTiming.connectEnd]] The PerformanceTiming.			
performanceresourcetiming connectend	R	PerformanceResourceTiming.connectEnd										
performancetiming connectend	R	PerformanceTiming.connectEnd										
uniformmatrix	D								*[[WebGL2RenderingContext.uniformMatrix[234]x[234]fv()]] The WebGL2RenderingContext.\n*[[WebGLRenderingContext.uniformMatrix[234]fv()]] The WebGLRenderingContext.			
webgl2renderingcontext uniformmatrix	R	WebGL2RenderingContext.uniformMatrix[234]x[234]fv()										
webglrenderingcontext uniformmatrix	R	WebGLRenderingContext.uniformMatrix[234]fv()										
api fetchevent	R	FetchEvent										
fetchevent fetchevent	R	FetchEvent.FetchEvent()										
z	D								*[[DeviceAcceleration.z]] This read-only property indicates the amount of acceleration that occurred along the Z axis in a DeviceAcceleration object.\n*[[DOMPoint.z]] The z read-only property of the DOMPointReadOnly interface represents the z coordinate of a point.			
deviceacceleration z	R	DeviceAcceleration.z										
dompointreadonly z	R	DOMPoint.z										
unloadeventend	D								*[[PerformanceNavigationTiming.unloadEventEnd]] The unloadEventEnd property returns a timestamp representing the time value equal to the time immediately after the user agent finishes the unload event of the previous document.\n*[[PerformanceTiming.unloadEventEnd]] The PerformanceTiming.			
performancenavigationtiming unloadeventend	R	PerformanceNavigationTiming.unloadEventEnd										
performancetiming unloadeventend	R	PerformanceTiming.unloadEventEnd										
iscomposing	D								*[[InputEvent.isComposing]] The InputEvent.\n*[[KeyboardEvent.isComposing]] The KeyboardEvent.			
inputevent iscomposing	R	InputEvent.isComposing										
keyboardevent iscomposing	R	KeyboardEvent.isComposing										
api speechrecognition	R	SpeechRecognition										
speechrecognition speechrecognition	R	SpeechRecognition()										
animationeffecttimingproperties iterationstart	R	IterationStart										
animationeffecttimingreadonly iterationstart	R	AnimationEffectTimingReadOnly.iterationStart										
lastindexof	D								*[[Array.prototype.lastIndexOf]] The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present.\n*[[String.prototype.lastIndexOf]] The lastIndexOf() method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex.			
array lastindexof	R	Array.prototype.lastIndexOf										
string lastindexof	R	String.prototype.lastIndexOf										
api animationplaybackevent	R	AnimationPlaybackEvent										
animationplaybackevent animationplaybackevent	R	AnimationPlaybackEvent.AnimationPlaybackEvent()										
onstatechange	D								*[[AudioContext.onstatechange]] The following snippet is taken from our AudioContext states demo (see it running live.\n*[[ServiceWorker.onstatechange]] An EventListener property called whenever an event of type statechange is fired; it is basically fired anytime the ServiceWorker.			
audiocontext onstatechange	R	AudioContext.onstatechange										
serviceworker onstatechange	R	ServiceWorker.onstatechange										
getfile	D								*[[FileSystemDirectoryEntry.getFile()]] The FileSystemDirectoryEntry interface's method getFile () returns a FileSystemFileEntry object corresponding to a file contained somewhere within the directory subtree rooted at the directory on which it's called.\n*[[FileHandle.getFile()]] The getFile method allows to retrieve a read-only snapshot of the handled file in the form of a File object.			
filesystemdirectoryentry getfile	R	FileSystemDirectoryEntry.getFile()										
idbmutablefile getfile	R	FileHandle.getFile()										
clienty	D								*[[MouseEvent.clientY]] The MouseEvent.\n*[[Touch.clientY]] The Touch.			
mouseevent clienty	R	MouseEvent.clientY										
touch clienty	R	Touch.clientY										
animationname	D								*[[AnimationEvent.animationName]] The AnimationEvent.\n*[[TransitionEvent.animationName]] The TransitionEvent.			
animationevent animationname	R	AnimationEvent.animationName										
transitionevent animationname	R	TransitionEvent.animationName										
assignedslot	D								*[[Element.assignedSlot]] The assignedSlot property of the Element interface returns the HTMLSlotElement interface associated with the element.\n*[[HTMLSlotElement.assignedSlot]] The assignedSlot property of the Text interface returns the HTMLSlotElement object associated with the element.			
element assignedslot	R	Element.assignedSlot										
text assignedslot	R	HTMLSlotElement.assignedSlot										
api textencoder	R	TextEncoder										
textencoder textencoder	R	TextEncoder()										
domcontentloadedeventend	D								*[[PerformanceNavigationTiming.domContentLoadedEventEnd]] The domContentLoadedEventEnd property returns a timestamp representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes.\n*[[PerformanceTiming.domContentLoadedEventEnd]] The PerformanceTiming.			
performancenavigationtiming domcontentloadedeventend	R	PerformanceNavigationTiming.domContentLoadedEventEnd										
performancetiming domcontentloadedeventend	R	PerformanceTiming.domContentLoadedEventEnd										
api transitionevent	R	TransitionEvent										
transitionevent transitionevent	R	TransitionEvent()										
buffered	D								*[[HTMLMediaElement.buffered]] The HTMLMediaElement.\n*[[SourceBuffer.buffered]] The buffered read-only property of the SourceBuffer interface returns the time ranges that are currently buffered in the SourceBuffer.			
htmlmediaelement buffered	R	HTMLMediaElement.buffered										
sourcebuffer buffered	R	SourceBuffer.buffered										
relatedtarget	D								*[[FocusEvent.relatedTarget]] The FocusEvent.\n*[[MouseEvent.relatedTarget]] The MouseEvent.			
focusevent relatedtarget	R	FocusEvent.relatedTarget										
mouseevent relatedtarget	R	MouseEvent.relatedTarget										
api progressevent	R	ProgressEvent										
progressevent progressevent	R	ProgressEvent()										
clientx	D								*[[MouseEvent.clientX]] The MouseEvent.\n*[[Touch.clientX]] The Touch.			
mouseevent clientx	R	MouseEvent.clientX										
touch clientx	R	Touch.clientX										
api clients	R	Clients										
global clients	R	ServiceWorkerGlobalScope.clients										
api performanceobserver	R	PerformanceObserver										
performanceobserver performanceobserver	R	PerformanceObserver()										
animationeffecttimingproperties delay	R	Delay										
animationeffecttimingreadonly delay	R	AnimationEffectTimingReadOnly.delay										
stylesheets	D								*[[Document.styleSheets]] The Document.\n*[[DocumentOrShadowRoot.styleSheets]] The styleSheets property of the DocumentOrShadowRoot interface returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into or embedded in a document.			
document stylesheets	R	Document.styleSheets										
documentorshadowroot stylesheets	R	DocumentOrShadowRoot.styleSheets										
applicationcache	D								*[[SharedWorkerGlobalScope.applicationCache]] The applicationCache read-only property of the SharedWorkerGlobalScope interface returns the ApplicationCache object for the worker (see Using the application cache).\n*[[Window.applicationCache]] Returns a reference to the application cache object for the window.			
global applicationcache	R	SharedWorkerGlobalScope.applicationCache										
window applicationcache	R	Window.applicationCache										
nextsibling	D								*[[Node.nextSibling]] The Node.\n*[[TreeWalker.nextSibling()]] The TreeWalker.			
node nextsibling	R	Node.nextSibling										
treewalker nextsibling	R	TreeWalker.nextSibling()										
bluetoothgattservice isprimary	R	isPrimary										
pointerevent isprimary	R	PointerEvent.isPrimary										
api speechgrammar	R	SpeechGrammar										
speechgrammar speechgrammar	R	SpeechGrammar.SpeechGrammar()										
getentriesbytype	D								*[[Performance.getEntriesByType()]] The getEntriesByType() method returns a list of PerformanceEntry objects for a given type.\n*[[PerformanceObserverEntryList.getEntriesByType()]] The getEntriesByType() method of the PerformanceObserverEntryList returns a list of explicitly observed performance entry objects for a given performance entry type.			
performance getentriesbytype	R	Performance.getEntriesByType()										
performanceobserverentrylist getentriesbytype	R	PerformanceObserverEntryList.getEntriesByType()										
frequency	D								*[[BiquadFilterNode.frequency]] An AudioParam.\n*[[OscillatorNode.frequency]] An a-rate AudioParam.			
biquadfilternode frequency	R	BiquadFilterNode.frequency										
oscillatornode frequency	R	OscillatorNode.frequency										
domainlookupend	D								*[[PerformanceResourceTiming.domainLookupEnd]] The domainLookupEnd property returns the timestamp immediately after the browser finishes the domain name lookup for the resource.\n*[[PerformanceTiming.domainLookupEnd]] The PerformanceTiming.			
performanceresourcetiming domainlookupend	R	PerformanceResourceTiming.domainLookupEnd										
performancetiming domainlookupend	R	PerformanceTiming.domainLookupEnd										
supports	D								*[[CSS.supports()]] The CSS.\n*[[DOMTokenList.supports()]] The supports() method of the DOMTokenList interface returns true if a given token is in the associated attribute's supported tokens.			
css supports	R	CSS.supports()										
domtokenlist supports	R	DOMTokenList.supports()										
domainlookupstart	D								*[[PerformanceResourceTiming.domainLookupStart]] The domainLookupStart property returns the timestamp immediately before the browser starts the domain name lookup for the resource.\n*[[PerformanceTiming.domainLookupStart]] The PerformanceTiming.			
performanceresourcetiming domainlookupstart	R	PerformanceResourceTiming.domainLookupStart										
performancetiming domainlookupstart	R	PerformanceTiming.domainLookupStart										
pathname	D								*[[HTMLHyperlinkElementUtils.pathname]] The HTMLHyperlinkElementUtils.\n*[[URLUtilsReadOnly.pathname]] The URLUtilsReadOnly.			
htmlhyperlinkelementutils pathname	R	HTMLHyperlinkElementUtils.pathname										
urlutilsreadonly pathname	R	URLUtilsReadOnly.pathname										
getcontext	D								*[[HTMLCanvasElement.getContext()]] The HTMLCanvasElement.\n*[[OffscreenCanvas.getContext()]] The OffscreenCanvas.			
htmlcanvaselement getcontext	R	HTMLCanvasElement.getContext()										
offscreencanvas getcontext	R	OffscreenCanvas.getContext()										
onend	D								*[[SpeechRecognition.onend]] The onend property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service has disconnected (when the end event fires.\n*[[SpeechSynthesisUtterance.onend]] The onend property of the SpeechSynthesisUtterance interface represents an event handler that will run when the utterance has finished being spoken (when the end event fires.			
speechrecognition onend	R	SpeechRecognition.onend										
speechsynthesisutterance onend	R	SpeechSynthesisUtterance.onend										
api pushevent	R	PushEvent										
pushevent pushevent	R	PushEvent.PushEvent()										
min	D								*[[DeviceProximityEvent.min]] The min property provides the minimum distance the sensor can report, in centimeters.\n*[[Math.min]] The Math.			
deviceproximityevent min	R	DeviceProximityEvent.min										
math min	R	Math.min										
connected	D								*[[BluetoothRemoteGATTServer.connected]] The BluetoothRemoteGATTServer.\n*[[Gamepad.connected]] The Gamepad.			
bluetoothremotegattserver connected	R	BluetoothRemoteGATTServer.connected										
gamepad connected	R	Gamepad.connected										
bluetoothgattservice device	R	device										
bluetoothremotegattserver device	R	BluetoothRemoteGATTServer.device										
operators class syntax	R	class expression										
operators class example	R	class expression										
class	R	class expression										
class syntax	R	class expression										
class example	R	class expression										
operators class	R	class expression										
statements class syntax	R	class										
statements class example	R	class										
class syntax	R	class										
class example	R	class										
statements class	R	class										
api domrect	R	DOMRect										
domrect domrect	R	DOMRect.DOMRect()										
getclientrects	D								*[[Element.getClientRects()]] The Element.\n*[[Range.getClientRects()]] The Range.			
element getclientrects	R	Element.getClientRects()										
range getclientrects	R	Range.getClientRects()										
presentationconnection terminate	R	terminate										
worker terminate	R	Worker.terminate()										
api serviceworkermessageevent	R	ServiceWorkerMessageEvent										
serviceworkermessageevent serviceworkermessageevent	R	ServiceWorkerMessageEvent.ServiceWorkerMessageEvent()										
filerequest lockedfile	R	FileRequest.lockedFile										
api lockedfile	R	LockedFile										
api cache	R	Cache										
request cache	R	Request.cache										
buttons	D								*[[Gamepad.buttons]] The Gamepad.\n*[[MouseEvent.buttons]] The MouseEvent.			
gamepad buttons	R	Gamepad.buttons										
mouseevent buttons	R	MouseEvent.buttons										
api messagechannel	R	MessageChannel										
messagechannel messagechannel	R	MessageChannel()										
api broadcastchannel	R	BroadcastChannel										
broadcastchannel broadcastchannel	R	BroadcastChannel()										
api syncevent	R	SyncEvent										
syncevent syncevent	R	SyncEvent.SyncEvent()										
parentstylesheet	D								*[[CSSRule.parentStyleSheet]] parentStyleSheet returns the stylesheet object in which the current rule is defined.\n*[[StyleSheet.parentStyleSheet]] Returns the stylesheet that is including this one, if any.			
cssrule parentstylesheet	R	CSSRule.parentStyleSheet										
stylesheet parentstylesheet	R	StyleSheet.parentStyleSheet										
isfinite	D								*[[Global.isFinite]] The global isFinite() function determines whether the passed value is a finite number.\n*[[Number.isFinite]] The Number.			
global isfinite	R	Global.isFinite										
number isfinite	R	Number.isFinite										
connectstart	D								*[[PerformanceResourceTiming.connectStart]] The connectStart property returns the timestamp immediately before the user agent starts establishing the connection to the server to retrieve the resource.\n*[[PerformanceTiming.connectStart]] The PerformanceTiming.			
performanceresourcetiming connectstart	R	PerformanceResourceTiming.connectStart										
performancetiming connectstart	R	PerformanceTiming.connectStart										
setorientation	D								*[[AudioListener.setOrientation()]] Void.\n*[[PannerNode.setOrientation()]] Void.			
audiolistener setorientation	R	AudioListener.setOrientation()										
pannernode setorientation	R	PannerNode.setOrientation()										
isnan	D								*[[Global.isNaN]] The isNaN() function determines whether a value is NaN or not.\n*[[Number.isNaN()]] The Number.			
global isnan	R	Global.isNaN										
number isnan	R	Number.isNaN()										
mediakeysession closed	R	closed										
window closed	R	Window.closed										
api mediadevices	R	MediaDevices										
navigator mediadevices	R	Navigator.mediaDevices										
requestanimationframe	D								*[[VRDisplay.requestAnimationFrame()]] The requestAnimationFrame() method of the VRDisplay interface is a special implementation of Window.\n*[[window.requestAnimationFrame()]] You should call this method whenever you're ready to update your animation onscreen.			
vrdisplay requestanimationframe	R	VRDisplay.requestAnimationFrame()										
window requestanimationframe	R	window.requestAnimationFrame()										
api comment	R	Comment										
comment comment	R	Comment()										
multi-touch_interaction	D								*[[Multi-touch interaction]] Pointer events extend DOM input events to support various pointing input devices such as pen/stylus and touch screens as well as mouse.\n*[[Multi-touch interaction]] The touch event interfaces support application-specific single and multi-touch interactions.			
pointer events multi-touch interaction	R	Multi-touch interaction										
touch events multi-touch interaction	R	Multi-touch interaction										
username	D								*[[HTMLHyperlinkElementUtils.username]] The HTMLHyperlinkElementUtils.\n*[[RTCIceServer.username]] The RTCIceServer dictionary's username property is a string which specifies the username to use when authenticating with the ICE server being described.			
htmlhyperlinkelementutils username	R	HTMLHyperlinkElementUtils.username										
rtciceserver username	R	RTCIceServer.username										
controller	D								*[[HTMLMediaElement.controller]] The HTMLMediaElement.\n*[[ServiceWorkerContainer.controller]] The controller read-only property of the ServiceWorkerContainer interface returns a ServiceWorker object if its state is activated (the same object returned by ServiceWorkerRegistration.			
htmlmediaelement controller	R	HTMLMediaElement.controller										
serviceworkercontainer controller	R	ServiceWorkerContainer.controller										
api keyframeeffectreadonly	R	KeyframeEffectReadOnly										
keyframeeffectreadonly keyframeeffectreadonly	R	KeyframeEffectReadOnly.KeyframeEffectReadOnly()										
api position	R	Position										
vrpose position	R	VRPose.position										
api keyboardevent	R	KeyboardEvent										
keyboardevent keyboardevent	R	KeyboardEvent()										
api keyframeeffect	R	KeyframeEffect										
keyframeeffect keyframeeffect	R	KeyframeEffect.KeyframeEffect()										
api animationevent	R	AnimationEvent										
animationevent animationevent	R	AnimationEvent()										
api path2d	R	Path2D										
path2d path2d	R	Path2D()										
api uievent	R	UIEvent										
uievent uievent	R	UIEvent()										
repeat	D								*[[KeyboardEvent.repeat]] The KeyboardEvent.\n*[[String.prototype.repeat()]] The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.			
keyboardevent repeat	R	KeyboardEvent.repeat										
string repeat	R	String.prototype.repeat()										
flush	D								*[[LockedFile.flush()]] The flush method is used to ensure any change made to a file is properly written on disk.\n*[[WebGLRenderingContext.flush()]] The WebGLRenderingContext.			
lockedfile flush	R	LockedFile.flush()										
webglrenderingcontext flush	R	WebGLRenderingContext.flush()										
classes constructor syntax	R	constructor										
classes constructor example	R	constructor										
constructor syntax	R	constructor										
constructor example	R	constructor										
classes constructor	R	constructor										
object constructor	R	Object.prototype.constructor										
global registration	R	ServiceWorkerGlobalScope.registration										
syncevent registration	R	registration										
api rtcdatachannelevent	R	RTCDataChannelEvent										
rtcdatachannelevent rtcdatachannelevent	R	RTCDataChannelEvent()										
whattoshow	D								*[[NodeIterator.whatToShow]] The NodeIterator.\n*[[TreeWalker.whatToShow]] The TreeWalker.			
nodeiterator whattoshow	R	NodeIterator.whatToShow										
treewalker whattoshow	R	TreeWalker.whatToShow										
htmlmediaelement volume	R	volume										
speechsynthesisutterance volume	R	SpeechSynthesisUtterance.volume										
gain	D								*[[BiquadFilterNode.gain]] An AudioParam.\n*[[GainNode.gain]] An AudioParam.			
biquadfilternode gain	R	BiquadFilterNode.gain										
gainnode gain	R	GainNode.gain										
api touchevent	R	TouchEvent										
touchevent touchevent	R	TouchEvent()										
objectstorenames	D								*[[IDBDatabase.objectStoreNames]] A DOMStringList containing a list of the names of the object stores currently in the connected database.\n*[[IDBTransaction.objectStoreNames]] The objectStoreNames property of the IDBTransaction interface returns a DOMStringList of names of IDBObjectStore objects.			
idbdatabase objectstorenames	R	IDBDatabase.objectStoreNames										
idbtransaction objectstorenames	R	IDBTransaction.objectStoreNames										
operators function* syntax	R	function* expression										
operators function* example	R	function* expression										
function*	R	function* expression										
function* syntax	R	function* expression										
function* example	R	function* expression										
operators function*	R	function* expression										
statements function* syntax	R	function*										
statements function* example	R	function*										
function* syntax	R	function*										
function* example	R	function*										
statements function*	R	function*										
api svgnumber	R	SVGNumber										
object propertyisenumerable	R	Object.prototype.propertyIsEnumerable										
propertyisenumerable	R	Object.prototype.propertyIsEnumerable										
pointerId	R	PointerEvent.pointerId										
pointerevent pointerid	R	PointerEvent.pointerId										
pointerid	R	PointerEvent.pointerId										
canvasrenderingcontext2d globalalpha	R	CanvasRenderingContext2D.globalAlpha										
globalalpha	R	CanvasRenderingContext2D.globalAlpha										
webglrenderingcontext validateprogram	R	WebGLRenderingContext.validateProgram()										
validateprogram	R	WebGLRenderingContext.validateProgram()										
audiobuffer numberofchannels	R	AudioBuffer.numberOfChannels										
numberofchannels	R	AudioBuffer.numberOfChannels										
api htmlfieldsetelement	R	HTMLFieldSetElement										
webgl api constants	R	WebGL constants										
constants	R	WebGL constants										
filesystemdirectoryentry createreader	R	FileSystemDirectoryEntry.createReader()										
createreader	R	FileSystemDirectoryEntry.createReader()										
idbobjectstore createindex	R	IDBObjectStore.createIndex()										
createindex	R	IDBObjectStore.createIndex()										
findAll	R	HTMLIFrameElement.findAll()										
htmliframeelement findall	R	HTMLIFrameElement.findAll()										
findall	R	HTMLIFrameElement.findAll()										
global typeerror	R	TypeError										
scrollMaxY	R	Window.scrollMaxY										
window scrollmaxy	R	Window.scrollMaxY										
scrollmaxy	R	Window.scrollMaxY										
statements const syntax	R	const										
statements const example	R	const										
const syntax	R	const										
const example	R	const										
statements const	R	const										
fullscreenElement	R	Document.fullscreenElement										
document fullscreenelement	R	Document.fullscreenElement										
fullscreenelement	R	Document.fullscreenElement										
contentWindow	R	HTMLIFrameElement.contentWindow										
htmliframeelement contentwindow	R	HTMLIFrameElement.contentWindow										
contentwindow	R	HTMLIFrameElement.contentWindow										
opener	R	Window.opener										
window opener	R	Window.opener										
opener	R	Window.opener										
date getutcday	R	Date.prototype.getUTCDay										
getutcday	R	Date.prototype.getUTCDay										
stopPropagation	R	Event.stopPropagation()										
event stoppropagation	R	Event.stopPropagation()										
stoppropagation	R	Event.stopPropagation()										
webglshaderprecisionformat rangemin	R	WebGLShaderPrecisionFormat.rangeMin										
rangemin	R	WebGLShaderPrecisionFormat.rangeMin										
canvasrenderingcontext2d drawwidgetasonscreen	R	CanvasRenderingContext2D.drawWidgetAsOnScreen()										
drawwidgetasonscreen	R	CanvasRenderingContext2D.drawWidgetAsOnScreen()										
onsubmit	R	GlobalEventHandlers.onsubmit										
global onsubmit	R	GlobalEventHandlers.onsubmit										
onsubmit	R	GlobalEventHandlers.onsubmit										
webgl2renderingcontext vertexattribipointer	R	WebGL2RenderingContext.vertexAttribIPointer()										
vertexattribipointer	R	WebGL2RenderingContext.vertexAttribIPointer()										
rowIndex	R	HTMLTableRowElement.rowIndex										
htmltablerowelement rowindex	R	HTMLTableRowElement.rowIndex										
rowindex	R	HTMLTableRowElement.rowIndex										
operators void syntax	R	void operator										
operators void example	R	void operator										
void	R	void operator										
void syntax	R	void operator										
void example	R	void operator										
operators void	R	void operator										
void	R	void operator										
api mediatrackconstraints	R	MediaTrackConstraints										
api vrpose	R	VRPose										
string tolocaleuppercase	R	String.prototype.toLocaleUpperCase										
tolocaleuppercase	R	String.prototype.toLocaleUpperCase										
window requestidlecallback	R	requestIdleCallback										
webgl api webgl model view projection	R	WebGL model view projection										
api idbversionchangerequest	R	IDBVersionChangeRequest										
initProgressEvent	R	ProgressEvent.initProgressEvent()										
progressevent initprogressevent	R	ProgressEvent.initProgressEvent()										
initprogressevent	R	ProgressEvent.initProgressEvent()										
screen mozbrightness	R	Screen.mozBrightness										
mozbrightness	R	Screen.mozBrightness										
canvasrenderingcontext2d miterlimit	R	CanvasRenderingContext2D.miterLimit										
miterlimit	R	CanvasRenderingContext2D.miterLimit										
api imagebitmap	R	ImageBitmap										
toDataURL	R	HTMLCanvasElement.toDataURL()										
htmlcanvaselement todataurl	R	HTMLCanvasElement.toDataURL()										
todataurl	R	HTMLCanvasElement.toDataURL()										
clearImmediate	R	Window.clearImmediate()										
window clearimmediate	R	Window.clearImmediate()										
clearimmediate	R	Window.clearImmediate()										
api xsltprocessor	R	XSLTProcessor										
coordinates heading	R	Coordinates.heading										
heading	R	Coordinates.heading										
idbfactory cmp	R	IDBFactory.cmp()										
cmp	R	IDBFactory.cmp()										
touch force	R	Touch.force										
force	R	Touch.force										
api periodicsyncregistration	R	PeriodicSyncRegistration										
rtciceserver credentialtype	R	RTCIceServer.credentialType										
credentialtype	R	RTCIceServer.credentialType										
global uneval	R	uneval()										
uneval	R	uneval()										
convertPointFromNodeToPage	R	Window.convertPointFromNodeToPage()										
window convertpointfromnodetopage	R	Window.convertPointFromNodeToPage()										
convertpointfromnodetopage	R	Window.convertPointFromNodeToPage()										
api svgmaskelement	R	SVGMaskElement										
math asin	R	Math.asin										
asin	R	Math.asin										
reference errors	R	JavaScript error reference										
errors	R	JavaScript error reference										
api filesystementry	R	FileSystemEntry										
global numberformat	R	Intl.NumberFormat										
numberformat	R	Intl.NumberFormat										
date gettime	R	Date.prototype.getTime										
gettime	R	Date.prototype.getTime										
api ext srgb	R	EXT_sRGB										
api workernavigator	R	WorkerNavigator										
clearMatch	R	HTMLIFrameElement.clearMatch()										
htmliframeelement clearmatch	R	HTMLIFrameElement.clearMatch()										
clearmatch	R	HTMLIFrameElement.clearMatch()										
api animationtimeline	R	AnimationTimeline										
global evalerror	R	EvalError										
api vrfieldofview	R	VRFieldOfView										
ondevicelight	R	Window.ondevicelight										
window ondevicelight	R	Window.ondevicelight										
ondevicelight	R	Window.ondevicelight										
appCodeName	R	NavigatorID.appCodeName										
navigatorid appcodename	R	NavigatorID.appCodeName										
appcodename	R	NavigatorID.appCodeName										
array join	R	Array.prototype.join										
join	R	Array.prototype.join										
errors not a codepoint	R	RangeError: argument is not a valid code point										
not a codepoint	R	RangeError: argument is not a valid code point										
date @@toprimitive	R	Date.prototype[@@toPrimitive]										
@@toprimitive	R	Date.prototype[@@toPrimitive]										
mediasource endofstream	R	MediaSource.endOfStream()										
endofstream	R	MediaSource.endOfStream()										
deleteCaption	R	HTMLTableElement.deleteCaption()										
htmltableelement deletecaption	R	HTMLTableElement.deleteCaption()										
deletecaption	R	HTMLTableElement.deleteCaption()										
geolocation watchposition	R	Geolocation.watchPosition()										
watchposition	R	Geolocation.watchPosition()										
animation oncancel	R	Animation.oncancel										
oncancel	R	Animation.oncancel										
datatransfer items	R	DataTransfer.items										
items	R	DataTransfer.items										
webgl2renderingcontext createtransformfeedback	R	WebGL2RenderingContext.createTransformFeedback()										
createtransformfeedback	R	WebGL2RenderingContext.createTransformFeedback()										
setPeriodicWave	R	OscillatorNode.setPeriodicWave()										
oscillatornode setperiodicwave	R	OscillatorNode.setPeriodicWave()										
setperiodicwave	R	OscillatorNode.setPeriodicWave()										
api stylesheetlist	R	StyleSheetList										
trackdefault bytestreamtrackid	R	TrackDefault.byteStreamTrackID										
bytestreamtrackid	R	TrackDefault.byteStreamTrackID										
fetch api basic concepts	R	Fetch basic concepts										
basic concepts	R	Fetch basic concepts										
api oes texture half float	R	OES_texture_half_float										
api canvaspattern	R	CanvasPattern										
userAgent	R	NavigatorID.userAgent										
navigatorid useragent	R	NavigatorID.userAgent										
useragent	R	NavigatorID.userAgent										
webrtc api using data channels	R	Using WebRTC data channels										
using data channels	R	Using WebRTC data channels										
scrollWidth	R	Element.scrollWidth										
element scrollwidth	R	Element.scrollWidth										
scrollwidth	R	Element.scrollWidth										
datatransferitem getasfile	R	DataTransferItem.getAsFile()										
getasfile	R	DataTransferItem.getAsFile()										
xmlhttprequest setrequestheader	R	XMLHttpRequest.setRequestHeader()										
setrequestheader	R	XMLHttpRequest.setRequestHeader()										
string substr	R	String.prototype.substr										
substr	R	String.prototype.substr										
innerText	R	Node.innerText										
node innertext	R	Node.innerText										
innertext	R	Node.innerText										
webgl2renderingcontext bindvertexarray	R	WebGL2RenderingContext.bindVertexArray()										
bindvertexarray	R	WebGL2RenderingContext.bindVertexArray()										
api xmlserializer	R	XMLSerializer										
total	R	ProgressEvent.total										
progressevent total	R	ProgressEvent.total										
total	R	ProgressEvent.total										
api performance timeline	R	Performance Timeline										
webrtc api signaling and video calling	R	Signaling and video calling										
operators spread operator syntax	R	Spread syntax										
operators spread operator example	R	Spread syntax										
spread operator	R	Spread syntax										
spread operator syntax	R	Spread syntax										
spread operator example	R	Spread syntax										
operators spread operator	R	Spread syntax										
spread operator	R	Spread syntax										
canvasrenderingcontext2d ispointinpath	R	CanvasRenderingContext2D.isPointInPath()										
ispointinpath	R	CanvasRenderingContext2D.isPointInPath()										
defaultMuted	R	HTMLMediaElement.defaultMuted										
htmlmediaelement defaultmuted	R	HTMLMediaElement.defaultMuted										
defaultmuted	R	HTMLMediaElement.defaultMuted										
appName	R	NavigatorID.appName										
navigatorid appname	R	NavigatorID.appName										
appname	R	NavigatorID.appName										
api timeevent	R	TimeEvent										
canvasrenderingcontext2d linecap	R	CanvasRenderingContext2D.lineCap										
linecap	R	CanvasRenderingContext2D.lineCap										
idbkeyrange upperopen	R	IDBKeyRange.upperOpen										
upperopen	R	IDBKeyRange.upperOpen										
ext disjoint timer query getqueryext	R	EXT_disjoint_timer_query.getQueryEXT()										
getqueryext	R	EXT_disjoint_timer_query.getQueryEXT()										
api channelsplitternode	R	ChannelSplitterNode										
mediarecorder canrecordmimetype	R	Media.Recorder.isMimeTypeSupported										
canrecordmimetype	R	Media.Recorder.isMimeTypeSupported										
web crypto api checking authenticity with password	R	Checking authenticity with password										
vrdisplay depthfar	R	VRDisplay.depthFar										
depthfar	R	VRDisplay.depthFar										
api svganimatedstring	R	SVGAnimatedString										
serviceworkercontainer oncontrollerchange	R	ServiceWorkerContainer.oncontrollerchange										
oncontrollerchange	R	ServiceWorkerContainer.oncontrollerchange										
keyframeeffectreadonly composite	R	KeyframeEffectReadOnly.composite										
composite	R	KeyframeEffectReadOnly.composite										
webglrenderingcontext drawarrays	R	WebGLRenderingContext.drawArrays()										
drawarrays	R	WebGLRenderingContext.drawArrays()										
webkitDirectory	R	HTMLInputElement.webkitDirectory										
htmlinputelement webkitdirectory	R	HTMLInputElement.webkitDirectory										
webkitdirectory	R	HTMLInputElement.webkitDirectory										
speechrecognition onsoundend	R	SpeechRecognition.onsoundend										
onsoundend	R	SpeechRecognition.onsoundend										
object isfrozen	R	Object.isFrozen										
isfrozen	R	Object.isFrozen										
console warn	R	Console.warn()										
warn	R	Console.warn()										
paymentaddress phone	R	PaymentAddress.phone										
phone	R	PaymentAddress.phone										
webgl2renderingcontext endtransformfeedback	R	WebGL2RenderingContext.endTransformFeedback()										
endtransformfeedback	R	WebGL2RenderingContext.endTransformFeedback()										
seekable	R	HTMLMediaElement.seekable										
htmlmediaelement seekable	R	HTMLMediaElement.seekable										
seekable	R	HTMLMediaElement.seekable										
rtcpeerconnection onidpvalidationerror	R	RTCPeerConnection.onidpvalidationerror										
onidpvalidationerror	R	RTCPeerConnection.onidpvalidationerror										
webglrenderingcontext samplecoverage	R	WebGLRenderingContext.sampleCoverage()										
samplecoverage	R	WebGLRenderingContext.sampleCoverage()										
windowState	R	Window.windowState										
window windowstate	R	Window.windowState										
windowstate	R	Window.windowState										
xmlhttprequest responsetext	R	XMLHttpRequest.responseText										
responsetext	R	XMLHttpRequest.responseText										
uievent sourcecapabilities	R	sourceCapabilities										
api webgltexture	R	WebGLTexture										
range setstart	R	Range.setStart()										
setstart	R	Range.setStart()										
document characterset	R	Document.characterSet										
characterset	R	Document.characterSet										
document doctype	R	Document.doctype										
doctype	R	Document.doctype										
ontouchend	R	GlobalEventHandlers.ontouchend										
global globaleventhandlers.ontouchend	R	GlobalEventHandlers.ontouchend										
setInterval	R	WindowTimers.setInterval()										
windowtimers setinterval	R	WindowTimers.setInterval()										
setinterval	R	WindowTimers.setInterval()										
canvasrenderingcontext2d measuretext	R	CanvasRenderingContext2D.measureText()										
measuretext	R	CanvasRenderingContext2D.measureText()										
drawElementsInstanced	R	WebGL2RenderingContext.drawElementsInstanced()										
webgl2renderingcontext drawelementsinstanced	R	WebGL2RenderingContext.drawElementsInstanced()										
drawelementsinstanced	R	WebGL2RenderingContext.drawElementsInstanced()										
bluetoothadvertisingdata rssi	R	rssi										
date setfullyear	R	Date.prototype.setFullYear										
setfullyear	R	Date.prototype.setFullYear										
speechrecognition onnomatch	R	SpeechRecognition.onnomatch										
onnomatch	R	SpeechRecognition.onnomatch										
performance clearresourcetimings	R	Performance.clearResourceTimings()										
clearresourcetimings	R	Performance.clearResourceTimings()										
api webvr api	R	WebVR API										
operators in syntax	R	in operator										
operators in example	R	in operator										
in	R	in operator										
in syntax	R	in operator										
in example	R	in operator										
operators in	R	in operator										
in	R	in operator										
api bluetoothremotegattcharacteristic	R	BluetoothRemoteGATTCharacteristic										
sourcebuffer trackdefaults	R	SourceBuffer.trackDefaults										
trackdefaults	R	SourceBuffer.trackDefaults										
tutorial pixel manipulation with canvas	R	Pixel manipulation with canvas										
webgl2renderingcontext samplerparameter	R	WebGL2RenderingContext.samplerParameter[if]()										
samplerparameter	R	WebGL2RenderingContext.samplerParameter[if]()										
webgl2renderingcontext deletetransformfeedback	R	WebGL2RenderingContext.deleteTransformFeedback()										
deletetransformfeedback	R	WebGL2RenderingContext.deleteTransformFeedback()										
document createrange	R	Document.createRange()										
createrange	R	Document.createRange()										
absolute	R	DeviceOrientationEvent.absolute										
deviceorientationevent absolute	R	DeviceOrientationEvent.absolute										
absolute	R	DeviceOrientationEvent.absolute										
rtcpeerconnection connectionstate	R	RTCPeerConnection.connectionState										
connectionstate	R	RTCPeerConnection.connectionState										
timeranges end	R	TimeRanges.end()										
end	R	TimeRanges.end()										
bluetoothdevice gatt	R	BluetoothDevice.gatt										
gatt	R	BluetoothDevice.gatt										
referenceNode	R	NodeIterator.referenceNode										
nodeiterator referencenode	R	NodeIterator.referenceNode										
referencenode	R	NodeIterator.referenceNode										
onmouseenter	R	GlobalEventHandlers.onmouseenter										
global globaleventhandlers.onmouseenter	R	GlobalEventHandlers.onmouseenter										
insertNode	R	Range.insertNode()										
range insertnode	R	Range.insertNode()										
insertnode	R	Range.insertNode()										
api htmltrackelement	R	HTMLTrackElement										
batterymanager charging	R	BatteryManager.charging										
charging	R	BatteryManager.charging										
webgl2renderingcontext clientwaitsync	R	WebGL2RenderingContext.clientWaitSync()										
clientwaitsync	R	WebGL2RenderingContext.clientWaitSync()										
after	R	ChildNode.after()										
childnode after	R	ChildNode.after()										
after	R	ChildNode.after()										
date setutcfullyear	R	Date.prototype.setUTCFullYear										
setutcfullyear	R	Date.prototype.setUTCFullYear										
api mediastreamaudiosourcenode	R	MediaStreamAudioSourceNode										
errors not a function	R	TypeError: "x" is not a function										
not a function	R	TypeError: "x" is not a function										
onpaste	R	HTMLElement.onpaste										
htmlelement onpaste	R	HTMLElement.onpaste										
onpaste	R	HTMLElement.onpaste										
mediarecorder mimetype	R	MediaRecorder.mimeType										
mimetype	R	MediaRecorder.mimeType										
document creatensresolver	R	Document.createNSResolver()										
creatensresolver	R	Document.createNSResolver()										
object defineproperties	R	Object.defineProperties										
defineproperties	R	Object.defineProperties										
api ext blend minmax	R	EXT_blend_minmax										
global uint32x4	R	SIMD.Uint32x4										
uint32x4	R	SIMD.Uint32x4										
speechrecognition maxalternatives	R	SpeechRecognition.maxAlternatives										
maxalternatives	R	SpeechRecognition.maxAlternatives										
frequencyBinCount	R	AnalyserNode.frequencyBinCount										
analysernode frequencybincount	R	AnalyserNode.frequencyBinCount										
frequencybincount	R	AnalyserNode.frequencyBinCount										
webkitForce	R	MouseEvent.webkitForce										
mouseevent webkitforce	R	MouseEvent.webkitForce										
webkitforce	R	MouseEvent.webkitForce										
array every	R	Array.prototype.every										
every	R	Array.prototype.every										
frame timing api using the frame timing api	R	Using the Frame Timing API										
api idbcursorsync	R	IDBCursorSync										
speechgrammarlist addfromstring	R	SpeechGrammarList.addFromString()										
addfromstring	R	SpeechGrammarList.addFromString()										
interpretation	R	SpeechRecognitionEvent.interpretation										
speechrecognitionevent interpretation	R	SpeechRecognitionEvent.interpretation										
interpretation	R	SpeechRecognitionEvent.interpretation										
mozGetFileNameArray	R	HTMLInputElement.mozGetFileNameArray()										
htmlinputelement mozgetfilenamearray	R	HTMLInputElement.mozGetFileNameArray()										
mozgetfilenamearray	R	HTMLInputElement.mozGetFileNameArray()										
global int8x16	R	SIMD.Int8x16										
int8x16	R	SIMD.Int8x16										
rtcpeerconnection getidentityassertion	R	RTCPeerConnection.getIdentityAssertion()										
getidentityassertion	R	RTCPeerConnection.getIdentityAssertion()										
math imul	R	Math.imul()										
imul	R	Math.imul()										
vrdisplay requestpresent	R	VRDisplay.requestPresent()										
requestpresent	R	VRDisplay.requestPresent()										
webglrenderingcontext getvertexattrib	R	WebGLRenderingContext.getVertexAttrib()										
getvertexattrib	R	WebGLRenderingContext.getVertexAttrib()										
domimplementation hasfeature	R	DOMImplementation.hasFeature()										
hasfeature	R	DOMImplementation.hasFeature()										
audioparam exponentialramptovalueattime	R	AudioParam.exponentialRampToValueAtTime()										
exponentialramptovalueattime	R	AudioParam.exponentialRampToValueAtTime()										
webglrenderingcontext detachshader	R	WebGLRenderingContext.detachShader()										
detachshader	R	WebGLRenderingContext.detachShader()										
currentStyle	R	Element.currentStyle										
element currentstyle	R	Element.currentStyle										
currentstyle	R	Element.currentStyle										
before	R	ChildNode.before()										
childnode before	R	ChildNode.before()										
before	R	ChildNode.before()										
object getownpropertydescriptor	R	Object.getOwnPropertyDescriptor										
getownpropertydescriptor	R	Object.getOwnPropertyDescriptor										
number max safe integer	R	Number.MAX_SAFE_INTEGER										
max safe integer	R	Number.MAX_SAFE_INTEGER										
errors stmt after return	R	Warning: unreachable code after return statement										
stmt after return	R	Warning: unreachable code after return statement										
batterymanager dischargingtime	R	BatteryManager.dischargingTime										
dischargingtime	R	BatteryManager.dischargingTime										
passwordcredential passwordname	R	PasswordCredential.passwordName										
passwordname	R	PasswordCredential.passwordName										
onvrdisplayconnected	R	Window.onvrdisplayconnected										
window onvrdisplayconnected	R	Window.onvrdisplayconnected										
onvrdisplayconnected	R	Window.onvrdisplayconnected										
api idbfactory	R	IDBFactory										
tiltY	R	PointerEvent.tiltY										
pointerevent tilty	R	PointerEvent.tiltY										
tilty	R	PointerEvent.tiltY										
api msgestureevent	R	MSGestureEvent										
object   definesetter  	R	Object.prototype.__defineSetter__()										
  definesetter  	R	Object.prototype.__defineSetter__()										
api syncregistration	R	SyncRegistration										
cssstylesheet insertrule	R	CSSStyleSheet.insertRule()										
insertrule	R	CSSStyleSheet.insertRule()										
keyframeeffectreadonly getkeyframes	R	KeyframeEffectReadOnly.getKeyframes()										
getkeyframes	R	KeyframeEffectReadOnly.getKeyframes()										
statements break syntax	R	break										
statements break example	R	break										
break syntax	R	break										
break example	R	break										
statements break	R	break										
document getanimations	R	Document.getAnimations()										
getanimations	R	Document.getAnimations()										
apps mgmt	R	Apps.mgmt										
mgmt	R	Apps.mgmt										
api windoweventhandlers	R	WindowEventHandlers										
api pointer events	R	Pointer events										
drawWindow	R	CanvasRenderingContext2D.drawWindow()										
canvasrenderingcontext2d drawwindow	R	CanvasRenderingContext2D.drawWindow()										
drawwindow	R	CanvasRenderingContext2D.drawWindow()										
number toprecision	R	Number.prototype.toPrecision										
toprecision	R	Number.prototype.toPrecision										
api domerror	R	DOMError										
idbopendbrequest onblocked	R	IDBOpenDBRequest.onblocked										
onblocked	R	IDBOpenDBRequest.onblocked										
rtcpeerconnection onicegatheringstatechange	R	RTCPeerConnection.onicegatheringstatechange										
onicegatheringstatechange	R	RTCPeerConnection.onicegatheringstatechange										
file webkitrelativepath	R	File.webkitRelativePath										
webkitrelativepath	R	File.webkitRelativePath										
api xpathexpression	R	XPathExpression										
releaseEvents	R	Window.releaseEvents()										
window releaseevents	R	Window.releaseEvents()										
releaseevents	R	Window.releaseEvents()										
vreyeparameters renderwidth	R	VREyeParameters.renderWidth										
renderwidth	R	VREyeParameters.renderWidth										
webgl2renderingcontext getinternalformatparameter	R	WebGL2RenderingContext.getInternalformatParameter()										
getinternalformatparameter	R	WebGL2RenderingContext.getInternalformatParameter()										
onpointerover	R	GlobalEventHandlers.onpointerover										
global onpointerover	R	GlobalEventHandlers.onpointerover										
onpointerover	R	GlobalEventHandlers.onpointerover										
errors var hides argument	R	TypeError: variable "x" redeclares argument										
var hides argument	R	TypeError: variable "x" redeclares argument										
api web bluetooth api	R	Web Bluetooth API										
api svgaltglyphelement	R	SVGAltGlyphElement										
onhashchange	R	WindowEventHandlers.onhashchange										
windoweventhandlers onhashchange	R	WindowEventHandlers.onhashchange										
onhashchange	R	WindowEventHandlers.onhashchange										
date setyear	R	Date.prototype.setYear										
setyear	R	Date.prototype.setYear										
global array	R	Array										
document onfullscreenchange	R	Document.onfullscreenchange										
onfullscreenchange	R	Document.onfullscreenchange										
keyIdentifier	R	KeyboardEvent.keyIdentifier										
keyboardevent keyidentifier	R	KeyboardEvent.keyIdentifier										
keyidentifier	R	KeyboardEvent.keyIdentifier										
lookupPrefix	R	Node.lookupPrefix()										
node lookupprefix	R	Node.lookupPrefix()										
lookupprefix	R	Node.lookupPrefix()										
webglrenderingcontext stencilopseparate	R	WebGLRenderingContext.stencilOpSeparate()										
stencilopseparate	R	WebGLRenderingContext.stencilOpSeparate()										
date getminutes	R	Date.prototype.getMinutes										
getminutes	R	Date.prototype.getMinutes										
api htmlhrelement	R	HTMLHRElement										
getStructuredData	R	HTMLIFrameElement.getStructuredData()										
htmliframeelement getstructureddata	R	HTMLIFrameElement.getStructuredData()										
getstructureddata	R	HTMLIFrameElement.getStructuredData()										
content	R	Window.content										
window content	R	Window.content										
content	R	Window.content										
api beforeinstallpromptevent	R	BeforeInstallPrompt										
beforeinstallpromptevent	R	BeforeInstallPrompt										
api performancetiming	R	PerformanceTiming										
api cssmediarule	R	CSSMediaRule										
api htmltextareaelement	R	HTMLTextAreaElement										
api canvasimagesource	R	CanvasImageSource										
webglrenderingcontext vertexattrib	R	WebGLRenderingContext.vertexAttrib[1234]f[v]()										
vertexattrib	R	WebGLRenderingContext.vertexAttrib[1234]f[v]()										
rtcpeerconnection pendinglocaldescription	R	RTCPeerConnection.pendingLocalDescription										
pendinglocaldescription	R	RTCPeerConnection.pendingLocalDescription										
math log2	R	Math.log2()										
log2	R	Math.log2()										
document createcomment	R	Document.createComment()										
createcomment	R	Document.createComment()										
api convolvernode	R	ConvolverNode										
global weakmap	R	WeakMap										
bluetoothremotegattcharacteristic getdescriptors	R	BluetoothRemoteGATTCharacteristic.getDescriptors()										
getdescriptors	R	BluetoothRemoteGATTCharacteristic.getDescriptors()										
audioparam linearramptovalueattime	R	AudioParam.linearRampToValueAtTime()										
linearramptovalueattime	R	AudioParam.linearRampToValueAtTime()										
date getutcseconds	R	Date.prototype.getUTCSeconds										
getutcseconds	R	Date.prototype.getUTCSeconds										
api svganimatedlengthlist	R	SVGAnimatedLengthList										
audiocontext createoscillator	R	AudioContext.createOscillator()										
createoscillator	R	AudioContext.createOscillator()										
sendMouseEvent	R	HTMLIFrameElement.sendMouseEvent()										
htmliframeelement sendmouseevent	R	HTMLIFrameElement.sendMouseEvent()										
sendmouseevent	R	HTMLIFrameElement.sendMouseEvent()										
string tolowercase	R	String.prototype.toLowerCase										
tolowercase	R	String.prototype.toLowerCase										
oldVersion	R	IDBVersionChangeEvent.oldVersion										
idbversionchangeevent oldversion	R	IDBVersionChangeEvent.oldVersion										
oldversion	R	IDBVersionChangeEvent.oldVersion										
global urierror	R	URIError										
api web storage api	R	Web Storage API										
datatransferitem getasstring	R	DataTransferItem.getAsString()										
getasstring	R	DataTransferItem.getAsString()										
api mediaquerylist	R	MediaQueryList										
pointerType	R	PointerEvent.pointerType										
pointerevent pointertype	R	PointerEvent.pointerType										
pointertype	R	PointerEvent.pointerType										
currentSrc	R	HTMLMediaElement.currentSrc										
htmlmediaelement currentsrc	R	HTMLMediaElement.currentSrc										
currentsrc	R	HTMLMediaElement.currentSrc										
canvasrenderingcontext2d clearrect	R	CanvasRenderingContext2D.clearRect()										
clearrect	R	CanvasRenderingContext2D.clearRect()										
datatransfer mozcleardataat	R	DataTransfer.mozClearDataAt()										
mozcleardataat	R	DataTransfer.mozClearDataAt()										
xmlhttprequest responsetype	R	XMLHttpRequest.responseType										
responsetype	R	XMLHttpRequest.responseType										
oncanplay	R	GlobalEventHandlers.oncanplay										
global globaleventhandlers.oncanplay	R	GlobalEventHandlers.oncanplay										
operators logical operators syntax	R	Logical Operators										
operators logical operators example	R	Logical Operators										
logical operators syntax	R	Logical Operators										
logical operators example	R	Logical Operators										
operators logical operators	R	Logical Operators										
api dynamicscompressornode	R	DynamicsCompressorNode										
onaudioprocess	R	ScriptProcessorNode.onaudioprocess										
scriptprocessornode onaudioprocess	R	ScriptProcessorNode.onaudioprocess										
onaudioprocess	R	ScriptProcessorNode.onaudioprocess										
channel messaging api using channel messaging	R	Using channel messaging										
detachEvent	R	EventTarget.detachEvent()										
eventtarget detachevent	R	EventTarget.detachEvent()										
detachevent	R	EventTarget.detachEvent()										
mediakeysystemconfiguration audiocapabilities	R	audioCapabilities										
performance api using the performance api	R	Using the Performance API										
date settime	R	Date.prototype.setTime										
settime	R	Date.prototype.setTime										
webglrenderingcontext blendfunc	R	WebGLRenderingContext.blendFunc()										
blendfunc	R	WebGLRenderingContext.blendFunc()										
bluetoothremotegattcharacteristic service	R	BluetoothRemoteGATTCharacteristic.service										
service	R	BluetoothRemoteGATTCharacteristic.service										
subtlecrypto unwrapkey	R	SubtleCrypto.unwrapKey()										
unwrapkey	R	SubtleCrypto.unwrapKey()										
webglrenderingcontext commit	R	WebGLRenderingContext.commit()										
commit	R	WebGLRenderingContext.commit()										
api devicelightevent	R	DeviceLightEvent										
hasAttributeNS	R	Element.hasAttributeNS()										
element hasattributens	R	Element.hasAttributeNS()										
hasattributens	R	Element.hasAttributeNS()										
api webglsampler	R	WebGLSampler										
date setutchours	R	Date.prototype.setUTCHours										
setutchours	R	Date.prototype.setUTCHours										
api audiobuffer	R	AudioBuffer										
rtcdatachannel ordered	R	RTCDataChannel.ordered										
ordered	R	RTCDataChannel.ordered										
api errorevent	R	ErrorEvent										
web animations api keyframe formats	R	Keyframe Formats										
api htmlmetaelement	R	HTMLMetaElement										
gamepad api using the gamepad api	R	Using the Gamepad API										
range deletecontents	R	Range.deleteContents()										
deletecontents	R	Range.deleteContents()										
global bool64x2	R	SIMD.Bool64x2										
bool64x2	R	SIMD.Bool64x2										
api htmlelement	R	HTMLElement										
serviceworkercontainer getregistrations	R	ServiceWorkerContainer.getRegistrations()										
getregistrations	R	ServiceWorkerContainer.getRegistrations()										
global uint8x16	R	SIMD.Uint8x16										
uint8x16	R	SIMD.Uint8x16										
webgl2renderingcontext deletequery	R	WebGL2RenderingContext.deleteQuery()										
deletequery	R	WebGL2RenderingContext.deleteQuery()										
object getprototypeof	R	Object.getPrototypeOf										
getprototypeof	R	Object.getPrototypeOf										
setInputMethodActive	R	HTMLIFrameElement.setInputMethodActive()										
htmliframeelement setinputmethodactive	R	HTMLIFrameElement.setInputMethodActive()										
setinputmethodactive	R	HTMLIFrameElement.setInputMethodActive()										
mediastreamtrack onoverconstrained	R	MediaStreamTrack.onoverconstrained										
onoverconstrained	R	MediaStreamTrack.onoverconstrained										
audioparam minvalue	R	minValue										
webglrenderingcontext framebuffertexture2d	R	WebGLRenderingContext.framebufferTexture2D()										
framebuffertexture2d	R	WebGLRenderingContext.framebufferTexture2D()										
performancetiming domloading	R	PerformanceTiming.domLoading										
domloading	R	PerformanceTiming.domLoading										
reference classes	R	Classes										
operators expression closures syntax	R	Expression closures										
operators expression closures example	R	Expression closures										
expression closures syntax	R	Expression closures										
expression closures example	R	Expression closures										
operators expression closures	R	Expression closures										
api chromeworker	R	ChromeWorker										
regexp @@replace	R	RegExp.prototype[@@replace]()										
@@replace	R	RegExp.prototype[@@replace]()										
cryptokey usages	R	CryptoKey.usages										
usages	R	CryptoKey.usages										
api websocket	R	WebSocket										
errors bad return or yield	R	SyntaxError: return not in function										
errors not legal return or yield	R	SyntaxError: return not in function										
errors invalid return or yield	R	SyntaxError: return not in function										
errors not a valid return or yield	R	SyntaxError: return not in function										
bad return or yield	R	SyntaxError: return not in function										
not legal return or yield	R	SyntaxError: return not in function										
invalid return or yield	R	SyntaxError: return not in function										
not a valid return or yield	R	SyntaxError: return not in function										
webglrenderingcontext colormask	R	WebGLRenderingContext.colorMask()										
colormask	R	WebGLRenderingContext.colorMask()										
navigate	R	WindowClient.navigate()										
windowclient navigate	R	WindowClient.navigate()										
navigate	R	WindowClient.navigate()										
statements return syntax	R	return										
statements return example	R	return										
return syntax	R	return										
return example	R	return										
statements return	R	return										
string raw	R	String.raw()										
raw	R	String.raw()										
getVideoPlaybackQuality	R	HTMLVideoElement.getVideoPlaybackQuality()										
htmlvideoelement getvideoplaybackquality	R	HTMLVideoElement.getVideoPlaybackQuality()										
getvideoplaybackquality	R	HTMLVideoElement.getVideoPlaybackQuality()										
refDistance	R	PannerNode.refDistance										
pannernode refdistance	R	PannerNode.refDistance										
refdistance	R	PannerNode.refDistance										
api datatransferitemlist	R	DataTransferItemList										
date getutcmonth	R	Date.prototype.getUTCMonth										
getutcmonth	R	Date.prototype.getUTCMonth										
client frametype	R	Client.frameType										
frametype	R	Client.frameType										
api deviceproximityevent	R	DeviceProximityEvent										
webrtc api session lifetime	R	Lifetime of a WebRTC session										
session lifetime	R	Lifetime of a WebRTC session										
api imagebitmaprenderingcontext	R	ImageBitmapRenderingContext										
api mutationobserver	R	MutationObserver										
api compositionevent	R	CompositionEvent										
api bluetoothdevice	R	BluetoothDevice										
errors no properties	R	TypeError: "x" has no properties										
no properties	R	TypeError: "x" has no properties										
global object	R	Object										
cookieEnabled	R	Navigator.cookieEnabled										
navigator cookieenabled	R	Navigator.cookieEnabled										
cookieenabled	R	Navigator.cookieEnabled										
maxTouchPoints	R	Navigator.maxTouchPoints										
navigator maxtouchpoints	R	Navigator.maxTouchPoints										
maxtouchpoints	R	Navigator.maxTouchPoints										
document onbeforescriptexecute	R	Document.onbeforescriptexecute										
onbeforescriptexecute	R	Document.onbeforescriptexecute										
document createtouch	R	Document.createTouch()										
createtouch	R	Document.createTouch()										
mozSetFileNameArray	R	HTMLInputElement.mozSetFileNameArray()										
htmlinputelement mozsetfilenamearray	R	HTMLInputElement.mozSetFileNameArray()										
mozsetfilenamearray	R	HTMLInputElement.mozSetFileNameArray()										
web animations api using the web animations api	R	Using the Web Animations API										
hardwareConcurrency	R	NavigatorConcurrentHardware.hardwareConcurrency										
navigatorconcurrenthardware hardwareconcurrency	R	NavigatorConcurrentHardware.hardwareConcurrency										
hardwareconcurrency	R	NavigatorConcurrentHardware.hardwareConcurrency										
document scripts	R	Document.scripts										
scripts	R	Document.scripts										
speechrecognition onsoundstart	R	SpeechRecognition.onsoundstart										
onsoundstart	R	SpeechRecognition.onsoundstart										
date setutcminutes	R	Date.prototype.setUTCMinutes										
setutcminutes	R	Date.prototype.setUTCMinutes										
api htmlmapelement	R	HTMLMapElement										
setTimeout	R	WindowTimers.setTimeout()										
windowtimers settimeout	R	WindowTimers.setTimeout()										
settimeout	R	WindowTimers.setTimeout()										
api speechrecognitionresultlist	R	SpeechRecognitionResultList										
canvasrenderingcontext2d fillrect	R	CanvasRenderingContext2D.fillRect()										
fillrect	R	CanvasRenderingContext2D.fillRect()										
compareDocumentPosition	R	Node.compareDocumentPosition()										
node comparedocumentposition	R	Node.compareDocumentPosition()										
comparedocumentposition	R	Node.compareDocumentPosition()										
getFloatFrequencyData	R	AnalyserNode.getFloatFrequencyData()										
analysernode getfloatfrequencydata	R	AnalyserNode.getFloatFrequencyData()										
getfloatfrequencydata	R	AnalyserNode.getFloatFrequencyData()										
global int32array	R	Int32Array										
webgl2renderingcontext waitsync	R	WebGL2RenderingContext.waitSync()										
waitsync	R	WebGL2RenderingContext.waitSync()										
positionoptions enablehighaccuracy	R	PositionOptions.enableHighAccuracy										
enablehighaccuracy	R	PositionOptions.enableHighAccuracy										
audioparam cancelscheduledvalues	R	AudioParam.cancelScheduledValues()										
cancelscheduledvalues	R	AudioParam.cancelScheduledValues()										
pushsubscription unsubscribe	R	PushSubscription.unsubscribe()										
unsubscribe	R	PushSubscription.unsubscribe()										
api svgtextelement	R	SVGTextElement										
global float32array	R	Float32Array										
global onsync	R	ServiceWorkerGlobalScope.onsync										
onsync	R	ServiceWorkerGlobalScope.onsync										
document caretrangefrompoint	R	Document.caretRangeFromPoint()										
caretrangefrompoint	R	Document.caretRangeFromPoint()										
cssprimitivevalue getstringvalue	R	CSSPrimitiveValue.getStringValue()										
getstringvalue	R	CSSPrimitiveValue.getStringValue()										
labels	R	HTMLSelectElement.labels										
htmlselectelement labels	R	HTMLSelectElement.labels										
labels	R	HTMLSelectElement.labels										
textdecoder decode	R	TextDecoder.decode()										
decode	R	TextDecoder.decode()										
onbeforeinstallprompt	R	Window.onbeforeinstallprompt										
window onbeforeinstallprompt	R	Window.onbeforeinstallprompt										
onbeforeinstallprompt	R	Window.onbeforeinstallprompt										
number tofixed	R	Number.prototype.toFixed										
tofixed	R	Number.prototype.toFixed										
outerHTML	R	Element.outerHTML										
element outerhtml	R	Element.outerHTML										
outerhtml	R	Element.outerHTML										
api fontface	R	FontFace										
crypto subtle	R	Crypto.subtle										
subtle	R	Crypto.subtle										
audiobuffer copyfromchannel	R	AudioBuffer.copyFromChannel()										
copyfromchannel	R	AudioBuffer.copyFromChannel()										
api htmloptionscollection	R	HTMLOptionsCollection										
global weakset	R	WeakSet										
touches	R	TouchEvent.touches										
touchevent touches	R	TouchEvent.touches										
touches	R	TouchEvent.touches										
api radionodelist	R	RadioNodeList										
document implementation	R	Document.implementation										
implementation	R	Document.implementation										
api domtokenlist	R	DOMTokenList										
vrdisplay isconnected	R	VRdisplay.isConnected										
isconnected	R	VRdisplay.isConnected										
xmlhttprequest getresponseheader	R	XMLHttpRequest.getResponseHeader()										
getresponseheader	R	XMLHttpRequest.getResponseHeader()										
string substring	R	String.prototype.substring										
substring	R	String.prototype.substring										
onselect	R	GlobalEventHandlers.onselect										
global onselect	R	GlobalEventHandlers.onselect										
onselect	R	GlobalEventHandlers.onselect										
serviceworker scripturl	R	ServiceWorker.scriptURL										
scripturl	R	ServiceWorker.scriptURL										
api svgfontfacesrcelement	R	SVGFontFaceSrcElement										
api htmlstyleelement	R	HTMLStyleElement										
api websockets api	R	WebSockets										
websockets api	R	WebSockets										
loopStart	R	AudioBufferSourceNode.loopStart										
audiobuffersourcenode loopstart	R	AudioBufferSourceNode.loopStart										
loopstart	R	AudioBufferSourceNode.loopStart										
tutorial basic usage	R	Basic usage of canvas										
basic usage	R	Basic usage of canvas										
string sup	R	String.prototype.sup()										
sup	R	String.prototype.sup()										
webgl2renderingcontext getactiveuniformblockname	R	WebGL2RenderingContext.getActiveUniformBlockName()										
getactiveuniformblockname	R	WebGL2RenderingContext.getActiveUniformBlockName()										
api domhighrestimestamp	R	DOMHighResTimeStamp										
api webgl draw buffers	R	WEBGL_draw_buffers										
web audio api visualizations with web audio api	R	Visualizations with Web Audio API										
operators new syntax	R	new operator										
operators new example	R	new operator										
new	R	new operator										
new syntax	R	new operator										
new example	R	new operator										
operators new	R	new operator										
new	R	new operator										
document alinkcolor	R	Document.alinkColor										
alinkcolor	R	Document.alinkColor										
idbindex multientry	R	IDBIndex.multiEntry										
multientry	R	IDBIndex.multiEntry										
api svgdefselement	R	SVGDefsElement										
focusOffset	R	Selection.focusOffset										
selection focusoffset	R	Selection.focusOffset										
focusoffset	R	Selection.focusOffset										
global bool16x8	R	SIMD.Bool16x8										
bool16x8	R	SIMD.Bool16x8										
xmlhttprequest sending and receiving binary data	R	Sending and Receiving Binary Data										
webrtc api architecture	R	WebRTC architecture overview										
architecture	R	WebRTC architecture overview										
replaceChild	R	Node.replaceChild()										
node replacechild	R	Node.replaceChild()										
replacechild	R	Node.replaceChild()										
release	R	DynamicsCompressorNode.release										
dynamicscompressornode release	R	DynamicsCompressorNode.release										
release	R	DynamicsCompressorNode.release										
webglrenderingcontext blendequationseparate	R	WebGLRenderingContext.blendEquationSeparate()										
blendequationseparate	R	WebGLRenderingContext.blendEquationSeparate()										
cssprimitivevalue setstringvalue	R	CSSPrimitiveValue.setStringValue()										
setstringvalue	R	CSSPrimitiveValue.setStringValue()										
api cssstylerule	R	CSSStyleRule										
api l10n.language.direction	R	L10n.language.direction										
api l10n.setattributes	R	L10n.setAttributes										
global simd	R	SIMD										
api vreyeparameters	R	VREyeParameters										
createMediaElementSource	R	AudioContext.createMediaElementSource()										
audiocontext createmediaelementsource	R	AudioContext.createMediaElementSource()										
createmediaelementsource	R	AudioContext.createMediaElementSource()										
document enablestylesheetsforset	R	Document.enableStyleSheetsForSet()										
enablestylesheetsforset	R	Document.enableStyleSheetsForSet()										
removeNextPaintListener	R	HTMLIframeElement.removeNextPaintListener()										
htmliframeelement removenextpaintlistener	R	HTMLIframeElement.removeNextPaintListener()										
removenextpaintlistener	R	HTMLIframeElement.removeNextPaintListener()										
api svgpathelement	R	SVGPathElement										
media source extensions api transcoding assets for mse	R	Transcoding assets for Media Source Extensions										
transcoding assets for mse	R	Transcoding assets for Media Source Extensions										
date getutchours	R	Date.prototype.getUTCHours										
getutchours	R	Date.prototype.getUTCHours										
errors unexpected token	R	SyntaxError: Unexpected token										
unexpected token	R	SyntaxError: Unexpected token										
webglrenderingcontext depthfunc	R	WebGLRenderingContext.depthFunc()										
depthfunc	R	WebGLRenderingContext.depthFunc()										
rangeCount	R	Selection.rangeCount										
selection rangecount	R	Selection.rangeCount										
rangecount	R	Selection.rangeCount										
webglrenderingcontext getshaderinfolog	R	WebGLRenderingContext.getShaderInfoLog()										
getshaderinfolog	R	WebGLRenderingContext.getShaderInfoLog()										
api navigatoronline	R	NavigatorOnLine										
object getownpropertydescriptors	R	Object.getOwnPropertyDescriptors()										
getownpropertydescriptors	R	Object.getOwnPropertyDescriptors()										
api webgl lose context	R	WEBGL_lose_context										
extend	R	Selection.extend()										
selection extend	R	Selection.extend()										
extend	R	Selection.extend()										
canvasrenderingcontext2d drawfocusifneeded	R	CanvasRenderingContext2D.drawFocusIfNeeded()										
drawfocusifneeded	R	CanvasRenderingContext2D.drawFocusIfNeeded()										
modify	R	Selection.modify()										
selection modify	R	Selection.modify()										
modify	R	Selection.modify()										
onkeydown	R	GlobalEventHandlers.onkeydown										
global onkeydown	R	GlobalEventHandlers.onkeydown										
onkeydown	R	GlobalEventHandlers.onkeydown										
canvasrenderingcontext2d filltext	R	CanvasRenderingContext2D.fillText()										
filltext	R	CanvasRenderingContext2D.fillText()										
runtimeStyle	R	Element.runtimeStyle										
element runtimestyle	R	Element.runtimeStyle										
runtimestyle	R	Element.runtimeStyle										
canvasrenderingcontext2d shadowcolor	R	CanvasRenderingContext2D.shadowColor										
shadowcolor	R	CanvasRenderingContext2D.shadowColor										
angle instanced arrays vertexattribdivisorangle	R	ANGLE_instanced_arrays.vertexAttribDivisorANGLE()										
vertexattribdivisorangle	R	ANGLE_instanced_arrays.vertexAttribDivisorANGLE()										
setActive	R	HTMLIFrameElement.setActive()										
htmliframeelement setactive	R	HTMLIFrameElement.setActive()										
setactive	R	HTMLIFrameElement.setActive()										
document querycommandsupported	R	Document.queryCommandSupported()										
querycommandsupported	R	Document.queryCommandSupported()										
api channelmergernode	R	ChannelMergerNode										
api detecting device orientation	R	Detecting device orientation										
api html drag and drop api	R	HTML Drag and Drop API										
api performanceentry	R	PerformanceEntry										
speechrecognition onaudioend	R	SpeechRecognition.onaudioend										
onaudioend	R	SpeechRecognition.onaudioend										
coneInnerAngle	R	PannerNode.coneInnerAngle										
pannernode coneinnerangle	R	PannerNode.coneInnerAngle										
coneinnerangle	R	PannerNode.coneInnerAngle										
api namednodemap	R	NamedNodeMap										
rtciceserver urls	R	RTCIceServers.urls										
urls	R	RTCIceServers.urls										
presentation receiver	R	Presentation.receiver										
receiver	R	Presentation.receiver										
subtlecrypto generatekey	R	SubtleCrypto.generateKey()										
generatekey	R	SubtleCrypto.generateKey()										
presentationrequest getavailability	R	getAvailability										
api mediaerror	R	MediaError										
targetTouches	R	TouchEvent.targetTouches										
touchevent targettouches	R	TouchEvent.targetTouches										
targettouches	R	TouchEvent.targetTouches										
cryptokey extractable	R	CryptoKey.extractable										
extractable	R	CryptoKey.extractable										
api gainnode	R	GainNode										
api speechrecognitionevent	R	SpeechRecognitionEvent										
requestPointerLock	R	Element.requestPointerLock()										
element requestpointerlock	R	Element.requestPointerLock()										
requestpointerlock	R	Element.requestPointerLock()										
document currentscript	R	Document.currentScript										
currentscript	R	Document.currentScript										
installtrigger compareversion	R	compareVersion										
api history api	R	Manipulating the browser history										
history api	R	Manipulating the browser history										
api htmlheadelement	R	HTMLHeadElement										
loaded	R	ProgressEvent.loaded										
progressevent loaded	R	ProgressEvent.loaded										
loaded	R	ProgressEvent.loaded										
speechsynthesis speak	R	SpeechSynthesis.speak()										
speak	R	SpeechSynthesis.speak()										
api idbfactorysync	R	IDBFactorySync										
ondevicemotion	R	Window.ondevicemotion										
window ondevicemotion	R	Window.ondevicemotion										
ondevicemotion	R	Window.ondevicemotion										
api htmlembedelement	R	HTMLEmbedElement										
canvasrenderingcontext2d lineto	R	CanvasRenderingContext2D.lineTo()										
lineto	R	CanvasRenderingContext2D.lineTo()										
vrpose linearvelocity	R	VRPose.linearVelocity										
linearvelocity	R	VRPose.linearVelocity										
baseURIObject	R	Node.baseURIObject										
node baseuriobject	R	Node.baseURIObject										
baseuriobject	R	Node.baseURIObject										
errors unterminated string literal	R	SyntaxError: unterminated string literal										
unterminated string literal	R	SyntaxError: unterminated string literal										
canvasrenderingcontext2d putimagedata	R	CanvasRenderingContext2D.putImageData()										
putimagedata	R	CanvasRenderingContext2D.putImageData()										
audiolistener speedofsound	R	AudioListener.speedOfSound										
speedofsound	R	AudioListener.speedOfSound										
xsltprocessor xsl transformations in mozilla faq	R	XSL Transformations in Mozilla FAQ										
mediastreamtrack onmute	R	MediaStreamTrack.onmute										
onmute	R	MediaStreamTrack.onmute										
onvrdisplaydisconnected	R	Window.onvrdisplaydisconnected										
window onvrdisplaydisconnected	R	Window.onvrdisplaydisconnected										
onvrdisplaydisconnected	R	Window.onvrdisplaydisconnected										
onblur	R	GlobalEventHandlers.onblur										
global onblur	R	GlobalEventHandlers.onblur										
onblur	R	GlobalEventHandlers.onblur										
vreyeparameters fieldofview	R	VREyeParameters.fieldOfView										
fieldofview	R	VREyeParameters.fieldOfView										
document anchors	R	Document.anchors										
anchors	R	Document.anchors										
removeChild	R	Node.removeChild()										
node removechild	R	Node.removeChild()										
removechild	R	Node.removeChild()										
ext disjoint timer query isqueryext	R	EXT_disjoint_timer_query.isQueryEXT()										
isqueryext	R	EXT_disjoint_timer_query.isQueryEXT()										
api svgradialgradientelement	R	SVGRadialGradientElement										
audiocontext createpanner	R	AudioContext.createPanner()										
createpanner	R	AudioContext.createPanner()										
api indexeddb api	R	IndexedDB API										
math tanh	R	Math.tanh()										
tanh	R	Math.tanh()										
vrdisplay depthnear	R	VRDisplay.depthNear										
depthnear	R	VRDisplay.depthNear										
seekToNextFrame	R	HTMLMediaElement.seekToNextFrame()										
htmlmediaelement seektonextframe	R	HTMLMediaElement.seekToNextFrame()										
seektonextframe	R	HTMLMediaElement.seekToNextFrame()										
regexp n	R	RegExp.$1-$9										
n	R	RegExp.$1-$9										
near	R	UserProximityEvent.near										
userproximityevent near	R	UserProximityEvent.near										
near	R	UserProximityEvent.near										
operators typeof syntax	R	typeof										
operators typeof example	R	typeof										
typeof syntax	R	typeof										
typeof example	R	typeof										
operators typeof	R	typeof										
mozPaintCount	R	Window.mozPaintCount										
window mozpaintcount	R	Window.mozPaintCount										
mozpaintcount	R	Window.mozPaintCount										
api htmltitleelement	R	HTMLTitleElement										
speechsynthesisutterance voice	R	SpeechSynthesisUtterance.voice										
voice	R	SpeechSynthesisUtterance.voice										
api bluetoothremotegattserver	R	BluetoothRemoteGATTServer										
mediarecorder onwarning	R	MediaRecorder.onwarning										
onwarning	R	MediaRecorder.onwarning										
crossOrigin	R	HTMLMediaElement.crossOrigin										
htmlmediaelement crossorigin	R	HTMLMediaElement.crossOrigin										
crossorigin	R	HTMLMediaElement.crossOrigin										
mozVoicemail	R	Navigator.mozVoicemail										
navigator mozvoicemail	R	Navigator.mozVoicemail										
mozvoicemail	R	Navigator.mozVoicemail										
object is	R	Object.is()										
is	R	Object.is()										
webglrenderingcontext getvertexattriboffset	R	WebGLRenderingContext.getVertexAttribOffset()										
getvertexattriboffset	R	WebGLRenderingContext.getVertexAttribOffset()										
speechrecognition grammars	R	SpeechRecognition.grammars										
grammars	R	SpeechRecognition.grammars										
api svganimatedtransformlist	R	SVGAnimatedTransformList										
api svglineargradientelement	R	SVGLinearGradientElement										
bluetooth requestdevice	R	Bluetooth.requestDevice()										
requestdevice	R	Bluetooth.requestDevice()										
deleteFromDocument	R	Selection.deleteFromDocument()										
selection deletefromdocument	R	Selection.deleteFromDocument()										
deletefromdocument	R	Selection.deleteFromDocument()										
array shift	R	Array.prototype.shift										
shift	R	Array.prototype.shift										
range commonancestorcontainer	R	Range.commonAncestorContainer										
commonancestorcontainer	R	Range.commonAncestorContainer										
api hashchangeevent	R	HashChangeEvent										
api htmlbrelement	R	HTMLBRElement										
api performancenavigation	R	PerformanceNavigation										
onkeypress	R	GlobalEventHandlers.onkeypress										
global onkeypress	R	GlobalEventHandlers.onkeypress										
onkeypress	R	GlobalEventHandlers.onkeypress										
api filesystemfileentry	R	FileSystemFileEntry										
file getastext	R	File.getAsText()										
getastext	R	File.getAsText()										
coneOuterAngle	R	PannerNode.coneOuterAngle										
pannernode coneouterangle	R	PannerNode.coneOuterAngle										
coneouterangle	R	PannerNode.coneOuterAngle										
string split	R	String.prototype.split										
split	R	String.prototype.split										
openWindow	R	Clients.openWindow()										
clients openwindow	R	Clients.openWindow()										
openwindow	R	Clients.openWindow()										
touch radiusx	R	Touch.radiusX										
radiusx	R	Touch.radiusX										
audioparam maxvalue	R	maxValue										
api svgtransformable	R	SVGTransformable										
rtcpeerconnection onremovestream	R	RTCPeerConnection.onremovestream										
onremovestream	R	RTCPeerConnection.onremovestream										
serviceworkercontainer getregistration	R	ServiceWorkerContainer.getRegistration()										
getregistration	R	ServiceWorkerContainer.getRegistration()										
object issealed	R	Object.isSealed										
issealed	R	Object.isSealed										
document selectedstylesheetset	R	Document.selectedStyleSheetSet										
selectedstylesheetset	R	Document.selectedStyleSheetSet										
innerWidth	R	Window.innerWidth										
window innerwidth	R	Window.innerWidth										
innerwidth	R	Window.innerWidth										
matchMedia	R	Window.matchMedia()										
window matchmedia	R	Window.matchMedia()										
matchmedia	R	Window.matchMedia()										
webglrenderingcontext renderbufferstorage	R	WebGLRenderingContext.renderbufferStorage()										
renderbufferstorage	R	WebGLRenderingContext.renderbufferStorage()										
api renderingcontext	R	RenderingContext										
api htmlkeygenelement	R	HTMLKeygenElement										
screen pixeldepth	R	Screen.pixelDepth										
pixeldepth	R	Screen.pixelDepth										
errors unexpected type	R	TypeError: "x" is (not) "y"										
unexpected type	R	TypeError: "x" is (not) "y"										
xmlhttprequest mozresponsearraybuffer	R	XMLHttpRequest.mozResponseArrayBuffer										
mozresponsearraybuffer	R	XMLHttpRequest.mozResponseArrayBuffer										
api force touch events	R	Force Touch events										
onemptied	R	GlobalEventHandlers.onemptied										
global globaleventhandlers.onemptied	R	GlobalEventHandlers.onemptied										
array reduceright	R	Array.prototype.reduceRight										
reduceright	R	Array.prototype.reduceRight										
notification requestpermission	R	Notification.requestPermission()										
requestpermission	R	Notification.requestPermission()										
mozCameras	R	Navigator.mozCameras										
navigator mozcameras	R	Navigator.mozCameras										
mozcameras	R	Navigator.mozCameras										
api htmliframeelement	R	HTMLIFrameElement										
webgl2renderingcontext createsampler	R	WebGL2RenderingContext.createSampler()										
createsampler	R	WebGL2RenderingContext.createSampler()										
date toisostring	R	Date.prototype.toISOString										
toisostring	R	Date.prototype.toISOString										
webglrenderingcontext deletebuffer	R	WebGLRenderingContext.deleteBuffer()										
deletebuffer	R	WebGLRenderingContext.deleteBuffer()										
ondblclick	R	GlobalEventHandlers.ondblclick										
global ondblclick	R	GlobalEventHandlers.ondblclick										
ondblclick	R	GlobalEventHandlers.ondblclick										
canvasrenderingcontext2d scrollpathintoview	R	CanvasRenderingContext2D.scrollPathIntoView()										
scrollpathintoview	R	CanvasRenderingContext2D.scrollPathIntoView()										
ext disjoint timer query querycounterext	R	EXT_disjoint_timer_query.queryCounterEXT()										
querycounterext	R	EXT_disjoint_timer_query.queryCounterEXT()										
api svgglyphelement	R	SVGGlyphElement										
file lastmodifieddate	R	File.lastModifiedDate										
lastmodifieddate	R	File.lastModifiedDate										
webgl2renderingcontext bindsampler	R	WebGL2RenderingContext.bindSampler()										
bindsampler	R	WebGL2RenderingContext.bindSampler()										
statements for in syntax	R	for...in										
statements for in example	R	for...in										
for in	R	for...in										
for in syntax	R	for...in										
for in example	R	for...in										
statements for in	R	for...in										
connection bandwidth	R	Connection.bandwidth										
bandwidth	R	Connection.bandwidth										
batterymanager onchargingtimechange	R	BatteryManager.onchargingtimechange										
onchargingtimechange	R	BatteryManager.onchargingtimechange										
api htmltimeelement	R	HTMLTimeElement										
candidate	R	RTCPeerConnectionIceEvent.candidate										
rtcpeerconnectioniceevent candidate	R	RTCPeerConnectionIceEvent.candidate										
candidate	R	RTCPeerConnectionIceEvent.candidate										
api periodicsyncevent	R	PeriodicSyncEvent										
transferControlToOffscreen	R	HTMLCanvasElement.transferControlToOffscreen()										
htmlcanvaselement transfercontroltooffscreen	R	HTMLCanvasElement.transferControlToOffscreen()										
transfercontroltooffscreen	R	HTMLCanvasElement.transferControlToOffscreen()										
webgl lose context restorecontext	R	WEBGL_lose_context.restoreContext()										
restorecontext	R	WEBGL_lose_context.restoreContext()										
errors already has pragma	R	Warning: -file- is being assigned a //# sourceMappingURL, but already has one										
already has pragma	R	Warning: -file- is being assigned a //# sourceMappingURL, but already has one										
anchorNode	R	Selection.anchorNode										
selection anchornode	R	Selection.anchorNode										
anchornode	R	Selection.anchorNode										
canvasrenderingcontext2d save	R	CanvasRenderingContext2D.save()										
save	R	CanvasRenderingContext2D.save()										
api presentationconnectioncloseevent	R	PresentationConnectionCloseEvent										
rtcpeerconnection pendingremotedescription	R	RTCPeerConnection.pendingRemoteDescription										
pendingremotedescription	R	RTCPeerConnection.pendingRemoteDescription										
webvr api webvr concepts	R	WebVR concepts										
api idbtransaction	R	IDBTransaction										
panningModel	R	PannerNode.panningModel										
pannernode panningmodel	R	PannerNode.panningModel										
panningmodel	R	PannerNode.panningModel										
document querycommandstate	R	Document.queryCommandState()										
querycommandstate	R	Document.queryCommandState()										
api udp socket api	R	UDP Socket API										
operators assignment operators syntax	R	Assignment operators										
operators assignment operators example	R	Assignment operators										
assignment operators syntax	R	Assignment operators										
assignment operators example	R	Assignment operators										
operators assignment operators	R	Assignment operators										
api htmlobjectelement	R	HTMLObjectElement										
global sharedarraybuffer	R	SharedArrayBuffer										
paymentresponse methodname	R	PaymentResponse.methodName										
methodname	R	PaymentResponse.methodName										
idbindex unique	R	IDBIndex.unique										
unique	R	IDBIndex.unique										
paymentaddress addressline	R	PaymentAddress.addressLine										
addressline	R	PaymentAddress.addressLine										
api mediakeymessageevent	R	MediaKeyMessageEvent										
zoom	R	HTMLIFrameElement.zoom()										
htmliframeelement zoom	R	HTMLIFrameElement.zoom()										
zoom	R	HTMLIFrameElement.zoom()										
speechsynthesisutterance onmark	R	SpeechSynthesisUtterance.onmark										
onmark	R	SpeechSynthesisUtterance.onmark										
global decodeuricomponent	R	Global.decodeURIComponent										
decodeuricomponent	R	Global.decodeURIComponent										
createElement	R	Document.createElement()										
document createelement	R	Document.createElement()										
createelement	R	Document.createElement()										
javaEnabled	R	NavigatorPlugins.javaEnabled()										
navigatorplugins javaenabled	R	NavigatorPlugins.javaEnabled()										
javaenabled	R	NavigatorPlugins.javaEnabled()										
domrectreadonly right	R	DOMRectReadOnly.right										
right	R	DOMRectReadOnly.right										
websockets api writing a websocket server in java	R	Writing a WebSocket server in Java										
documentElement	R	Document.documentElement										
document documentelement	R	Document.documentElement										
documentelement	R	Document.documentElement										
webglrenderingcontext depthrange	R	WebGLRenderingContext.depthRange()										
depthrange	R	WebGLRenderingContext.depthRange()										
deleteRow	R	HTMLTableElement.deleteRow()										
htmltableelement deleterow	R	HTMLTableElement.deleteRow()										
deleterow	R	HTMLTableElement.deleteRow()										
math hypot	R	Math.hypot()										
hypot	R	Math.hypot()										
document linkcolor	R	Document.linkColor										
linkcolor	R	Document.linkColor										
document exitpointerlock	R	Document.exitPointerLock()										
exitpointerlock	R	Document.exitPointerLock()										
web workers api functions and classes available to workers	R	Functions and classes available to Web Workers										
functions and classes available to workers	R	Functions and classes available to Web Workers										
audiocontext createchannelmerger	R	AudioContext.createChannelMerger()										
createchannelmerger	R	AudioContext.createChannelMerger()										
webgl2renderingcontext beginquery	R	WebGL2RenderingContext.beginQuery()										
beginquery	R	WebGL2RenderingContext.beginQuery()										
api mutationrecord	R	MutationRecord										
webglrenderingcontext getuniform	R	WebGLRenderingContext.getUniform()										
getuniform	R	WebGLRenderingContext.getUniform()										
statements for syntax	R	for										
statements for example	R	for										
for syntax	R	for										
for example	R	for										
statements for	R	for										
domrectreadonly bottom	R	DOMRectReadOnly.bottom										
bottom	R	DOMRectReadOnly.bottom										
productSub	R	Navigator.productSub										
navigator productsub	R	Navigator.productSub										
productsub	R	Navigator.productSub										
xmlhttprequest xmlhttprequest.init()	R	init()										
xmlhttprequest.init()	R	init()										
credential iconurl	R	iconURL										
api svggradientelement	R	SVGGradientElement										
string bold	R	String.prototype.bold()										
bold	R	String.prototype.bold()										
buildID	R	Navigator.buildID										
navigator buildid	R	Navigator.buildID										
buildid	R	Navigator.buildID										
subtlecrypto derivekey	R	SubtleCrypto.deriveKey()										
derivekey	R	SubtleCrypto.deriveKey()										
api messageevent	R	MessageEvent										
api speechrecognitionalternative	R	SpeechRecognitionAlternative										
bluetoothremotegattcharacteristic properties	R	BluetoothRemoteGATTCharacteristic.properties										
properties	R	BluetoothRemoteGATTCharacteristic.properties										
api idbcursorwithvalue	R	IDBCursorWithValue										
mediastreamtrack getcapabilities	R	MediaStreamTrack.getCapabilities()										
getcapabilities	R	MediaStreamTrack.getCapabilities()										
api broadcast channel api	R	Broadcast Channel API										
currentTarget	R	Event.currentTarget										
event currenttarget	R	Event.currentTarget										
currenttarget	R	Event.currentTarget										
tutorial using images	R	Using images										
clipboardData	R	ClipboardEvent.clipboardData										
clipboardevent clipboarddata	R	ClipboardEvent.clipboardData										
clipboarddata	R	ClipboardEvent.clipboardData										
audiolistener dopplerfactor	R	AudioListener.dopplerFactor										
dopplerfactor	R	AudioListener.dopplerFactor										
errors redeclared parameter	R	SyntaxError: redeclaration of formal parameter "x"										
redeclared parameter	R	SyntaxError: redeclaration of formal parameter "x"										
api htmldialogelement	R	HTMLDialogElement										
rtcpeerconnection removestream	R	RTCPeerConnection.removeStream()										
removestream	R	RTCPeerConnection.removeStream()										
math acos	R	Math.acos										
acos	R	Math.acos										
api htmltableelement	R	HTMLTableElement										
contains	R	Node.contains()										
node contains	R	Node.contains()										
contains	R	Node.contains()										
reference statements	R	Statements and declarations										
statements	R	Statements and declarations										
onmouseleave	R	GlobalEventHandlers.onmouseleave										
global globaleventhandlers.onmouseleave	R	GlobalEventHandlers.onmouseleave										
webgl2renderingcontext uniformblockbinding	R	WebGL2RenderingContext.uniformBlockBinding()										
uniformblockbinding	R	WebGL2RenderingContext.uniformBlockBinding()										
idbkeyrange bound	R	IDBKeyRange.bound()										
bound	R	IDBKeyRange.bound()										
api battery status api	R	Battery Status API										
date getyear	R	Date.prototype.getYear										
getyear	R	Date.prototype.getYear										
api svgpolylineelement	R	SVGPolylineElement										
api performancenavigationtiming	R	PerformanceNavigationTiming										
regexp rightcontext	R	RegExp.rightContext ($')										
rightcontext	R	RegExp.rightContext ($')										
api presentationconnection	R	PresentationConnection										
getAttribute	R	Element.getAttribute()										
element getattribute	R	Element.getAttribute()										
getattribute	R	Element.getAttribute()										
coordinates altitude	R	Coordinates.altitude										
altitude	R	Coordinates.altitude										
canvasrenderingcontext2d transform	R	CanvasRenderingContext2D.transform()										
transform	R	CanvasRenderingContext2D.transform()										
timelineTime	R	AnimationPlaybackEvent.timelineTime										
animationplaybackevent timelinetime	R	AnimationPlaybackEvent.timelineTime										
timelinetime	R	AnimationPlaybackEvent.timelineTime										
api idbcursor	R	IDBCursor										
url revokeobjecturl	R	URL.revokeObjectURL()										
revokeobjecturl	R	URL.revokeObjectURL()										
onloadeddata	R	GlobalEventHandlers.onloadeddata										
global globaleventhandlers.onloadeddata	R	GlobalEventHandlers.onloadeddata										
api htmlscriptelement	R	HTMLScriptElement										
function call	R	Function.prototype.call										
call	R	Function.prototype.call										
audiocontext createstereopanner	R	AudioContext.createStereoPanner()										
createstereopanner	R	AudioContext.createStereoPanner()										
api mediastreamaudiodestinationnode	R	MediaStreamAudioDestinationNode										
document head	R	Document.head										
head	R	Document.head										
api rtcidentityassertion	R	RTCIdentityAssertion										
number epsilon	R	Number.EPSILON										
epsilon	R	Number.EPSILON										
api messageport	R	MessagePort										
api svgfilterelement	R	SVGFilterElement										
string strike	R	String.prototype.strike()										
strike	R	String.prototype.strike()										
key key values	R	Key Values										
operators grouping syntax	R	Grouping operator										
operators grouping example	R	Grouping operator										
grouping	R	Grouping operator										
grouping syntax	R	Grouping operator										
grouping example	R	Grouping operator										
operators grouping	R	Grouping operator										
grouping	R	Grouping operator										
document fgcolor	R	Document.fgColor										
fgcolor	R	Document.fgColor										
ontouchmove	R	GlobalEventHandlers.ontouchmove										
global globaleventhanders.ontouchmove	R	GlobalEventHandlers.ontouchmove										
globaleventhanders.ontouchmove	R	GlobalEventHandlers.ontouchmove										
reset	R	HTMLFormElement.reset()										
htmlformelement reset	R	HTMLFormElement.reset()										
reset	R	HTMLFormElement.reset()										
rtcpeerconnection onaddstream	R	RTCPeerConnection.onaddstream										
onaddstream	R	RTCPeerConnection.onaddstream										
oes vertex array object createvertexarrayoes	R	OES_vertex_array_object.createVertexArrayOES()										
createvertexarrayoes	R	OES_vertex_array_object.createVertexArrayOES()										
api attr	R	Attr										
speechsynthesis getvoices	R	SpeechSynthesis.getVoices()										
getvoices	R	SpeechSynthesis.getVoices()										
credentialscontainer requireusermediation	R	CredentialsContainer.requireUserMediation()										
requireusermediation	R	CredentialsContainer.requireUserMediation()										
api nodeiterator	R	NodeIterator										
filesystemfileentry createwriter	R	FileSystemFileEntry.createWriter()										
createwriter	R	FileSystemFileEntry.createWriter()										
range ispointinrange	R	Range.isPointInRange()										
ispointinrange	R	Range.isPointInRange()										
setNfcFocus	R	HTMLIFrameElement.setNfcFocus()										
htmliframeelement setnfcfocus	R	HTMLIFrameElement.setNfcFocus()										
setnfcfocus	R	HTMLIFrameElement.setNfcFocus()										
string trim	R	String.prototype.trim										
trim	R	String.prototype.trim										
web storage api using the web storage api	R	Using the Web Storage API										
api offlineaudiocompletionevent	R	OfflineAudioCompletionEvent										
api nondocumenttypechildnode	R	NonDocumentTypeChildNode										
webgl2renderingcontext blitframebuffer	R	WebGL2RenderingContext.blitFramebuffer()										
blitframebuffer	R	WebGL2RenderingContext.blitFramebuffer()										
ondragenter	R	GlobalEventHandlers.ondragenter										
global ondragenter	R	GlobalEventHandlers.ondragenter										
ondragenter	R	GlobalEventHandlers.ondragenter										
api csscounterstylerule	R	CSSCounterStyleRule										
subtlecrypto decrypt	R	SubtleCrypto.decrypt()										
decrypt	R	SubtleCrypto.decrypt()										
onmousedown	R	GlobalEventHandlers.onmousedown										
global onmousedown	R	GlobalEventHandlers.onmousedown										
onmousedown	R	GlobalEventHandlers.onmousedown										
api web animations api	R	Web Animations API										
api svgrect	R	SVGRect										
global int16x8	R	SIMD.Int16x8										
int16x8	R	SIMD.Int16x8										
api audiocontext	R	AudioContext										
fontfaceset check	R	FontFaceSet.check()										
check	R	FontFaceSet.check()										
mozOpaque	R	HTMLCanvasElement.mozOpaque										
htmlcanvaselement mozopaque	R	HTMLCanvasElement.mozOpaque										
mozopaque	R	HTMLCanvasElement.mozOpaque										
subtlecrypto encrypt	R	SubtleCrypto.encrypt()										
encrypt	R	SubtleCrypto.encrypt()										
ondragover	R	GlobalEventHandlers.ondragover										
global ondragover	R	GlobalEventHandlers.ondragover										
ondragover	R	GlobalEventHandlers.ondragover										
math floor	R	Math.floor										
floor	R	Math.floor										
api svganimateelement	R	SVGAnimateElement										
functions arrow functions syntax	R	Arrow functions										
functions arrow functions example	R	Arrow functions										
arrow functions syntax	R	Arrow functions										
arrow functions example	R	Arrow functions										
functions arrow functions	R	Arrow functions										
canvasrenderingcontext2d fillstyle	R	CanvasRenderingContext2D.fillStyle										
fillstyle	R	CanvasRenderingContext2D.fillStyle										
datatransfer setdragimage	R	DataTransfer.setDragImage()										
setdragimage	R	DataTransfer.setDragImage()										
rtcpeerconnection iceconnectionstate	R	RTCPeerConnection.iceConnectionState										
iceconnectionstate	R	RTCPeerConnection.iceConnectionState										
returnValue	R	Event.returnValue										
event returnvalue	R	Event.returnValue										
returnvalue	R	Event.returnValue										
regexp test	R	RegExp.prototype.test										
test	R	RegExp.prototype.test										
webglrenderingcontext getshaderparameter	R	WebGLRenderingContext.getShaderParameter()										
getshaderparameter	R	WebGLRenderingContext.getShaderParameter()										
api webglsync	R	WebGLSync										
appendWindowEnd	R	SourceBuffer.appendWindowEnd										
sourcebuffer appendwindowend	R	SourceBuffer.appendWindowEnd										
appendwindowend	R	SourceBuffer.appendWindowEnd										
api node	R	Node										
oscpu	R	Navigator.oscpu										
navigator oscpu	R	Navigator.oscpu										
oscpu	R	Navigator.oscpu										
ondragstart	R	GlobalEventHandlers.ondragstart										
global ondragstart	R	GlobalEventHandlers.ondragstart										
ondragstart	R	GlobalEventHandlers.ondragstart										
accelerationIncludingGravity	R	DeviceMotionEvent.accelerationIncludingGravity										
devicemotionevent accelerationincludinggravity	R	DeviceMotionEvent.accelerationIncludingGravity										
accelerationincludinggravity	R	DeviceMotionEvent.accelerationIncludingGravity										
lockedfile truncate	R	LockedFile.truncate()										
truncate	R	LockedFile.truncate()										
webgl2renderingcontext deletevertexarray	R	WebGL2RenderingContext.deleteVertexArray()										
deletevertexarray	R	WebGL2RenderingContext.deleteVertexArray()										
api touchlist	R	TouchList										
rtcpeerconnection createanswer	R	RTCPeerConnection.createAnswer()										
createanswer	R	RTCPeerConnection.createAnswer()										
api performanceobserverentrylist	R	PerformanceObserverEntryList										
mozBluetooth	R	Navigator.mozBluetooth										
navigator mozbluetooth	R	Navigator.mozBluetooth										
mozbluetooth	R	Navigator.mozBluetooth										
isReload	R	FetchEvent.isReload										
fetchevent isreload	R	FetchEvent.isReload										
isreload	R	FetchEvent.isReload										
vrdisplay submitframe	R	VRDisplay.submitFrame()										
submitframe	R	VRDisplay.submitFrame()										
idbfactory open-obsolete	R	IDBFactory.open()										
open-obsolete	R	IDBFactory.open()										
webgl2renderingcontext deletesync	R	WebGL2RenderingContext.deleteSync()										
deletesync	R	WebGL2RenderingContext.deleteSync()										
webglrenderingcontext isrenderbuffer	R	WebGLRenderingContext.isRenderbuffer()										
isrenderbuffer	R	WebGLRenderingContext.isRenderbuffer()										
interval	R	DeviceMotionEvent.interval										
devicemotionevent interval	R	DeviceMotionEvent.interval										
interval	R	DeviceMotionEvent.interval										
webgl2renderingcontext getqueryparameter	R	WebGL2RenderingContext.getQueryParameter()										
getqueryparameter	R	WebGL2RenderingContext.getQueryParameter()										
console time	R	Console.time()										
time	R	Console.time()										
webgl api using extensions	R	Using WebGL extensions										
using extensions	R	Using WebGL extensions										
permissions revoke	R	Permissions.revoke()										
revoke	R	Permissions.revoke()										
string charcodeat	R	String.prototype.charCodeAt										
charcodeat	R	String.prototype.charCodeAt										
global iterator	R	Iterator										
sendTouchEvent	R	HTMLIFrameElement.sendTouchEvent()										
htmliframeelement sendtouchevent	R	HTMLIFrameElement.sendTouchEvent()										
sendtouchevent	R	HTMLIFrameElement.sendTouchEvent()										
webglrenderingcontext isprogram	R	WebGLRenderingContext.isProgram()										
isprogram	R	WebGLRenderingContext.isProgram()										
regexp global	R	RegExp.prototype.global										
global	R	RegExp.prototype.global										
webgl2renderingcontext bindbufferbase	R	WebGL2RenderingContext.bindBufferBase()										
bindbufferbase	R	WebGL2RenderingContext.bindBufferBase()										
api network information api	R	Network Information API										
isTrusted	R	Event.isTrusted										
event istrusted	R	Event.isTrusted										
istrusted	R	Event.isTrusted										
pushsubscription subscriptionid	R	PushSubscription.subscriptionId										
subscriptionid	R	PushSubscription.subscriptionId										
range setstartafter	R	Range.setStartAfter()										
setstartafter	R	Range.setStartAfter()										
initKeyEvent	R	KeyboardEvent.initKeyEvent()										
keyboardevent initkeyevent	R	KeyboardEvent.initKeyEvent()										
initkeyevent	R	KeyboardEvent.initKeyEvent()										
menubar	R	Window.menubar										
window menubar	R	Window.menubar										
menubar	R	Window.menubar										
api fullscreen api	R	Fullscreen API										
domimplementation createdocument	R	DOMImplementation.createDocument()										
createdocument	R	DOMImplementation.createDocument()										
layerY	R	UIEvent.layerY										
uievent layery	R	UIEvent.layerY										
layery	R	UIEvent.layerY										
layerX	R	UIEvent.layerX										
uievent layerx	R	UIEvent.layerX										
layerx	R	UIEvent.layerX										
webglrenderingcontext getactiveuniform	R	WebGLRenderingContext.getActiveUniform()										
getactiveuniform	R	WebGLRenderingContext.getActiveUniform()										
convertPointFromPageToNode	R	Window.convertPointFromPageToNode										
window convertpointfrompagetonode	R	Window.convertPointFromPageToNode										
convertpointfrompagetonode	R	Window.convertPointFromPageToNode										
bluetoothremotegattcharacteristic startnotifications	R	BluetoothRemoteGATTCharacteristic.startNotifications()										
startnotifications	R	BluetoothRemoteGATTCharacteristic.startNotifications()										
updateCommands	R	Window.updateCommands()										
window updatecommands	R	Window.updateCommands()										
updatecommands	R	Window.updateCommands()										
deltaMode	R	WheelEvent.deltaMode										
wheelevent deltamode	R	WheelEvent.deltaMode										
deltamode	R	WheelEvent.deltaMode										
rtcpeerconnection onicecandidate	R	RTCPeerConnection.onicecandidate										
onicecandidate	R	RTCPeerConnection.onicecandidate										
rtcpeerconnection addstream	R	RTCPeerConnection.addStream()										
addstream	R	RTCPeerConnection.addStream()										
channelInterpretation	R	AudioNode.channelInterpretation										
audionode channelinterpretation	R	AudioNode.channelInterpretation										
channelinterpretation	R	AudioNode.channelInterpretation										
api htmlselectelement	R	HTMLSelectElement										
global string	R	String										
mediakeymessageevent messagetype	R	messageType										
insertRow	R	HTMLTableElement.insertRow()										
htmltableelement insertrow	R	HTMLTableElement.insertRow()										
insertrow	R	HTMLTableElement.insertRow()										
xmlhttprequest responseurl	R	XMLHttpRequest.responseURL										
responseurl	R	XMLHttpRequest.responseURL										
webgl2renderingcontext getuniformblockindex	R	WebGL2RenderingContext.getUniformBlockIndex()										
getuniformblockindex	R	WebGL2RenderingContext.getUniformBlockIndex()										
api beforeunloadevent	R	BeforeUnloadEvent										
orientationZ	R	PannerNode.orientationZ										
pannernode orientationz	R	PannerNode.orientationZ										
orientationz	R	PannerNode.orientationZ										
orientationX	R	PannerNode.orientationX										
pannernode orientationx	R	PannerNode.orientationX										
orientationx	R	PannerNode.orientationX										
api mediastream	R	MediaStream										
api svgforeignobjectelement	R	SVGForeignObjectElement										
videoplaybackquality corruptedvideoframes	R	VideoPlaybackQuality.corruptedVideoFrames										
corruptedvideoframes	R	VideoPlaybackQuality.corruptedVideoFrames										
batterymanager level	R	BatteryManager.level										
level	R	BatteryManager.level										
geolocation getcurrentposition	R	Geolocation.getCurrentPosition()										
getcurrentposition	R	Geolocation.getCurrentPosition()										
activeVRDisplays	R	Navigator.activeVRDisplays										
navigator activevrdisplays	R	Navigator.activeVRDisplays										
activevrdisplays	R	Navigator.activeVRDisplays										
storage setitem	R	Storage.setItem()										
setitem	R	Storage.setItem()										
tagName	R	Element.tagName										
element tagname	R	Element.tagName										
tagname	R	Element.tagName										
api ext frag depth	R	EXT_frag_depth										
canvasrenderingcontext2d beginpath	R	CanvasRenderingContext2D.beginPath()										
beginpath	R	CanvasRenderingContext2D.beginPath()										
math round	R	Math.round										
round	R	Math.round										
animationeffectreadonly getcomputedtiming	R	AnimationEffectReadOnly.getComputedTiming()										
getcomputedtiming	R	AnimationEffectReadOnly.getComputedTiming()										
api timeranges	R	TimeRanges										
idbkeyrange upper	R	IDBKeyRange.upper										
upper	R	IDBKeyRange.upper										
api biquadfilternode	R	BiquadFilterNode										
global decodeuri	R	Global.decodeURI										
decodeuri	R	Global.decodeURI										
api mediarecorder api	R	MediaRecorder API										
xmlhttprequest getallresponseheaders	R	XMLHttpRequest.getAllResponseHeaders()										
getallresponseheaders	R	XMLHttpRequest.getAllResponseHeaders()										
date getutcdate	R	Date.prototype.getUTCDate										
getutcdate	R	Date.prototype.getUTCDate										
api mousewheelevent	R	MouseWheelEvent										
vrdisplaycapabilities maxlayers	R	VRDisplayCapabilities.maxLayers										
maxlayers	R	VRDisplayCapabilities.maxLayers										
idbcursor primarykey	R	IDBCursor.primaryKey										
primarykey	R	IDBCursor.primaryKey										
errors negative repetition count	R	RangeError: repeat count must be non-negative										
negative repetition count	R	RangeError: repeat count must be non-negative										
webglrenderingcontext getshaderprecisionformat	R	WebGLRenderingContext.getShaderPrecisionFormat()										
getshaderprecisionformat	R	WebGLRenderingContext.getShaderPrecisionFormat()										
api svgpoint	R	SVGPoint										
gamepad axes	R	Gamepad.axes										
axes	R	Gamepad.axes										
global internalerror	R	InternalError										
appendWindowStart	R	SourceBuffer.appendWindowStart										
sourcebuffer appendwindowstart	R	SourceBuffer.appendWindowStart										
appendwindowstart	R	SourceBuffer.appendWindowStart										
webgl2renderingcontext clearbuffer	R	WebGL2RenderingContext.clearBuffer[fiuv]()										
clearbuffer	R	WebGL2RenderingContext.clearBuffer[fiuv]()										
notification badge	R	Notification.badge										
badge	R	Notification.badge										
api svganimatedinteger	R	SVGAnimatedInteger										
isCollapsed	R	Selection.isCollapsed										
selection iscollapsed	R	Selection.isCollapsed										
iscollapsed	R	Selection.isCollapsed										
slot	R	Element.slot										
element slot	R	Element.slot										
slot	R	Element.slot										
installtrigger install	R	install										
speechrecognitionresult isfinal	R	SpeechRecognitionResult.isFinal										
isfinal	R	SpeechRecognitionResult.isFinal										
performance setresourcetimingbuffersize	R	Performance.setResourceTimingBufferSize()										
setresourcetimingbuffersize	R	Performance.setResourceTimingBufferSize()										
api svgfontfacenameelement	R	SVGFontFaceNameElement										
api urlutilsreadonly	R	URLUtilsReadOnly										
webglrenderingcontext readpixels	R	WebGLRenderingContext.readPixels()										
readpixels	R	WebGLRenderingContext.readPixels()										
api pointer lock api	R	Pointer Lock API										
regexp leftcontext	R	RegExp.leftContext ($`)										
leftcontext	R	RegExp.leftContext ($`)										
screen unlockorientation	R	Screen.unlockOrientation()										
unlockorientation	R	Screen.unlockOrientation()										
array splice	R	Array.prototype.splice										
splice	R	Array.prototype.splice										
address	R	BluetoothStatusChangedEvent.address										
bluetoothstatuschangedevent address	R	BluetoothStatusChangedEvent.address										
address	R	BluetoothStatusChangedEvent.address										
api rtciceserver	R	RTCIceServer										
functions method definitions syntax	R	Method definitions										
functions method definitions example	R	Method definitions										
method definitions syntax	R	Method definitions										
method definitions example	R	Method definitions										
method	R	Method definitions										
method syntax	R	Method definitions										
method example	R	Method definitions										
functions method definitions	R	Method definitions										
toolbar	R	Window.toolbar										
window toolbar	R	Window.toolbar										
toolbar	R	Window.toolbar										
window ondeviceorientationabsolute	R	ondeviceorientationabsolute										
getNamedItem	R	NamedNodeMap.getNamedItem()										
namednodemap getnameditem	R	NamedNodeMap.getNamedItem()										
getnameditem	R	NamedNodeMap.getNamedItem()										
api webrtc api	R	WebRTC API										
canvasrenderingcontext2d clearhitregions	R	CanvasRenderingContext2D.clearHitRegions()										
clearhitregions	R	CanvasRenderingContext2D.clearHitRegions()										
global float64array	R	Float64Array										
getScreenshot	R	HTMLIFrameElement.getScreenshot()										
htmliframeelement getscreenshot	R	HTMLIFrameElement.getScreenshot()										
getscreenshot	R	HTMLIFrameElement.getScreenshot()										
performance navigation	R	Performance.navigation										
navigation	R	Performance.navigation										
webgl2renderingcontext texstorage3d	R	WebGL2RenderingContext.texStorage3D()										
texstorage3d	R	WebGL2RenderingContext.texStorage3D()										
numberOfOutputs	R	AudioNode.numberOfOutputs										
audionode numberofoutputs	R	AudioNode.numberOfOutputs										
numberofoutputs	R	AudioNode.numberOfOutputs										
api idbindex	R	IDBIndex										
rtcpeerconnection icegatheringstate	R	RTCPeerConnection.iceGatheringState										
icegatheringstate	R	RTCPeerConnection.iceGatheringState										
api htmlparagraphelement	R	HTMLParagraphElement										
xmlhttprequest responsexml	R	XMLHttpRequest.responseXML										
responsexml	R	XMLHttpRequest.responseXML										
performance clearmarks	R	Performance.clearMarks()										
clearmarks	R	Performance.clearMarks()										
api scriptprocessornode	R	ScriptProcessorNode										
webgl2renderingcontext deletesampler	R	WebGL2RenderingContext.deleteSampler()										
deletesampler	R	WebGL2RenderingContext.deleteSampler()										
webglrenderingcontext generatemipmap	R	WebGLRenderingContext.generateMipmap()										
generatemipmap	R	WebGLRenderingContext.generateMipmap()										
speechrecognition continuous	R	SpeechRecognition.continuous										
continuous	R	SpeechRecognition.continuous										
array unshift	R	Array.prototype.unshift										
unshift	R	Array.prototype.unshift										
api stylesheet	R	StyleSheet										
textencoder encode	R	TextEncoder.encode()										
encode	R	TextEncoder.encode()										
serviceworkerregistration scope	R	ServiceWorkerRegistration.scope										
scope	R	ServiceWorkerRegistration.scope										
domimplementation createhtmldocument	R	DOMImplementation.createHTMLDocument()										
createhtmldocument	R	DOMImplementation.createHTMLDocument()										
addElement	R	DataTransfer.addElement()										
datatransfer addelement	R	DataTransfer.addElement()										
addelement	R	DataTransfer.addElement()										
idbversionchangerequest setversion	R	IDBVersionChangeRequest.setVersion()										
setversion	R	IDBVersionChangeRequest.setVersion()										
api svgmatrix	R	SVGMatrix										
channelCountMode	R	AudioNode.channelCountMode										
audionode channelcountmode	R	AudioNode.channelCountMode										
channelcountmode	R	AudioNode.channelCountMode										
api svgellipseelement	R	SVGEllipseElement										
vrpose angularvelocity	R	VRPose.angularVelocity										
angularvelocity	R	VRPose.angularVelocity										
requestFullscreen	R	Element.requestFullscreen()										
element requestfullscreen	R	Element.requestFullscreen()										
requestfullscreen	R	Element.requestFullscreen()										
api webgl2renderingcontext	R	WebGL2RenderingContext										
ontouchend	R	GlobalEventHandlers.ontouchend										
global ontouchend	R	GlobalEventHandlers.ontouchend										
ontouchend	R	GlobalEventHandlers.ontouchend										
vrlayer rightbounds	R	VRLayer.rightBounds										
rightbounds	R	VRLayer.rightBounds										
coordinates longitude	R	Coordinates.longitude										
longitude	R	Coordinates.longitude										
mediastreamtrack getsettings	R	MediaStreamTrack.getSettings()										
getsettings	R	MediaStreamTrack.getSettings()										
date setminutes	R	Date.prototype.setMinutes										
setminutes	R	Date.prototype.setMinutes										
mediasource sourcebuffers	R	MediaSource.sourceBuffers										
sourcebuffers	R	MediaSource.sourceBuffers										
filereader readasbinarystring	R	FileReader.readAsBinaryString()										
readasbinarystring	R	FileReader.readAsBinaryString()										
range clonerange	R	Range.cloneRange()										
clonerange	R	Range.cloneRange()										
touch events using touch events	R	Using Touch Events										
api rtcdatachannel	R	RTCDataChannel										
clients claim	R	Clients.claim()										
claim	R	Clients.claim()										
indexeddb api basic concepts behind indexeddb	R	Basic concepts										
basic concepts behind indexeddb	R	Basic concepts										
string startswith	R	String.prototype.startsWith()										
startswith	R	String.prototype.startsWith()										
scrollbars	R	Window.scrollbars										
window scrollbars	R	Window.scrollbars										
scrollbars	R	Window.scrollbars										
api htmlbuttonelement	R	HTMLButtonElement										
canvasrenderingcontext2d stroke	R	CanvasRenderingContext2D.stroke()										
stroke	R	CanvasRenderingContext2D.stroke()										
offsetLeft	R	HTMLElement.offsetLeft										
htmlelement offsetleft	R	HTMLElement.offsetLeft										
offsetleft	R	HTMLElement.offsetLeft										
speechrecognition onaudiostart	R	SpeechRecognition.onaudiostart										
onaudiostart	R	SpeechRecognition.onaudiostart										
global boolean	R	Boolean										
pushmanager getsubscription	R	PushManager.getSubscription()										
getsubscription	R	PushManager.getSubscription()										
oncanplaythrough	R	GlobalEventHandlers.oncanplaythrough										
global globaleventhandlers.oncanplaythrough	R	GlobalEventHandlers.oncanplaythrough										
subtlecrypto importkey	R	SubtleCrypto.importKey()										
importkey	R	SubtleCrypto.importKey()										
canvasrenderingcontext2d shadowblur	R	CanvasRenderingContext2D.shadowBlur										
shadowblur	R	CanvasRenderingContext2D.shadowBlur										
onloadedmetadata	R	GlobalEventHandlers.onloadedmetadata										
global globaleventhandlers.onloadedmetadata	R	GlobalEventHandlers.onloadedmetadata										
api vrstageparameters	R	VRStageParameters										
screen lockorientation	R	Screen.lockOrientation()										
lockorientation	R	Screen.lockOrientation()										
permissions query	R	Permissions.query()										
query	R	Permissions.query()										
autofocus	R	HTMLSelectElement.autofocus										
htmlselectelement autofocus	R	HTMLSelectElement.autofocus										
autofocus	R	HTMLSelectElement.autofocus										
webglrenderingcontext isbuffer	R	WebGLRenderingContext.isBuffer()										
isbuffer	R	WebGLRenderingContext.isBuffer()										
product	R	NavigatorID.product										
navigatorid product	R	NavigatorID.product										
product	R	NavigatorID.product										
math atan	R	Math.atan										
atan	R	Math.atan										
goForward	R	HTMLIFrameElement.goForward()										
htmliframeelement goforward	R	HTMLIFrameElement.goForward()										
goforward	R	HTMLIFrameElement.goForward()										
api htmlareaelement	R	HTMLAreaElement										
web workers api structured clone algorithm	R	The structured clone algorithm										
structured clone algorithm	R	The structured clone algorithm										
api webglrenderingcontext	R	WebGLRenderingContext										
global date	R	Date										
navigator moznetworkstats	R	mozNetworkStats										
initCustomEvent	R	CustomEvent.initCustomEvent()										
customevent initcustomevent	R	CustomEvent.initCustomEvent()										
initcustomevent	R	CustomEvent.initCustomEvent()										
tutorial basic animations	R	Basic animations										
xsltprocessor browser differences	R	Browser Differences										
api animationeffecttimingproperties	R	Animation Effect Timing Properties										
animationeffecttimingproperties	R	Animation Effect Timing Properties										
geolocation using geolocation	R	Using geolocation										
operators new.target syntax	R	new.target										
operators new.target example	R	new.target										
new.target syntax	R	new.target										
new.target example	R	new.target										
operators new.target	R	new.target										
webglrenderingcontext iscontextlost	R	WebGLRenderingContext.isContextLost()										
iscontextlost	R	WebGLRenderingContext.isContextLost()										
Q	R	BiquadFilterNode.Q										
biquadfilternode q	R	BiquadFilterNode.Q										
q	R	BiquadFilterNode.Q										
statements switch syntax	R	switch										
statements switch example	R	switch										
switch syntax	R	switch										
switch example	R	switch										
statements switch	R	switch										
drawRangeElements	R	WebGL2RenderingContext.drawRangeElements()										
webgl2renderingcontext drawrangeelements	R	WebGL2RenderingContext.drawRangeElements()										
drawrangeelements	R	WebGL2RenderingContext.drawRangeElements()										
api oes standard derivatives	R	OES_standard_derivatives										
webgl2renderingcontext begintransformfeedback	R	WebGL2RenderingContext.beginTransformFeedback()										
begintransformfeedback	R	WebGL2RenderingContext.beginTransformFeedback()										
subtlecrypto verify	R	SubtleCrypto.verify()										
verify	R	SubtleCrypto.verify()										
drawElementsInstancedANGLE	R	ANGLE_instanced_arrays.drawElementsInstancedANGLE()										
angle instanced arrays drawelementsinstancedangle	R	ANGLE_instanced_arrays.drawElementsInstancedANGLE()										
drawelementsinstancedangle	R	ANGLE_instanced_arrays.drawElementsInstancedANGLE()										
document defaultview	R	Document.defaultView										
defaultview	R	Document.defaultView										
defaultPrevented	R	Event.defaultPrevented										
event defaultprevented	R	Event.defaultPrevented										
defaultprevented	R	Event.defaultPrevented										
selectedIndex	R	HTMLSelectElement.selectedIndex										
htmlselectelement htmlselectelement.selectedindex	R	HTMLSelectElement.selectedIndex										
date setmonth	R	Date.prototype.setMonth										
setmonth	R	Date.prototype.setMonth										
math atanh	R	Math.atanh()										
atanh	R	Math.atanh()										
webglrenderingcontext stencilmaskseparate	R	WebGLRenderingContext.stencilMaskSeparate()										
stencilmaskseparate	R	WebGLRenderingContext.stencilMaskSeparate()										
api xmldocument	R	XMLDocument										
videoplaybackquality creationtime	R	VideoPlaybackQuality.creationTime										
creationtime	R	VideoPlaybackQuality.creationTime										
webgl2renderingcontext getfragdatalocation	R	WebGL2RenderingContext.getFragDataLocation()										
getfragdatalocation	R	WebGL2RenderingContext.getFragDataLocation()										
api gestureevent	R	GestureEvent										
presentation defaultrequest	R	Presentation.defaultRequest										
defaultrequest	R	Presentation.defaultRequest										
speechsynthesisutterance pitch	R	SpeechSynthesisUtterance.pitch										
pitch	R	SpeechSynthesisUtterance.pitch										
errors bad array length	R	RangeError: invalid array length										
errors not legal array length	R	RangeError: invalid array length										
errors invalid array length	R	RangeError: invalid array length										
errors not a valid array length	R	RangeError: invalid array length										
bad array length	R	RangeError: invalid array length										
not legal array length	R	RangeError: invalid array length										
invalid array length	R	RangeError: invalid array length										
not a valid array length	R	RangeError: invalid array length										
webglrenderingcontext deleteframebuffer	R	WebGLRenderingContext.deleteFramebuffer()										
deleteframebuffer	R	WebGLRenderingContext.deleteFramebuffer()										
api htmlquoteelement	R	HTMLQuoteElement										
focusNode	R	Selection.focusNode										
selection focusnode	R	Selection.focusNode										
focusnode	R	Selection.focusNode										
webgl2renderingcontext invalidatesubframebuffer	R	WebGL2RenderingContext.invalidateSubFramebuffer()										
invalidatesubframebuffer	R	WebGL2RenderingContext.invalidateSubFramebuffer()										
api coordinates	R	Coordinates										
canvasrenderingcontext2d createpattern	R	CanvasRenderingContext2D.createPattern()										
createpattern	R	CanvasRenderingContext2D.createPattern()										
document forms	R	Document.forms										
forms	R	Document.forms										
platform	R	NavigatorID.platform										
navigatorid platform	R	NavigatorID.platform										
platform	R	NavigatorID.platform										
popupNode	R	Document.popupNode										
document popupnode	R	Document.popupNode										
popupnode	R	Document.popupNode										
regexp multiline	R	RegExp.prototype.multiline										
multiline	R	RegExp.prototype.multiline										
ondragexit	R	GlobalEventHandlers.ondragexit										
global ondragexit	R	GlobalEventHandlers.ondragexit										
ondragexit	R	GlobalEventHandlers.ondragexit										
webgl2renderingcontext istransformfeedback	R	WebGL2RenderingContext.isTransformFeedback()										
istransformfeedback	R	WebGL2RenderingContext.isTransformFeedback()										
api offlineaudiocontext	R	OfflineAudioContext										
api iirfilternode	R	IIRFilterNode										
matches	R	Element.matches()										
element matches	R	Element.matches()										
matches	R	Element.matches()										
goBack	R	HTMLIFrameElement.goBack()										
htmliframeelement goback	R	HTMLIFrameElement.goBack()										
goback	R	HTMLIFrameElement.goBack()										
rtcpeerconnection onidentityresult	R	RTCPeerConnection.onidentityresult										
onidentityresult	R	RTCPeerConnection.onidentityresult										
clearTimeout	R	WindowTimers.clearTimeout()										
windowtimers cleartimeout	R	WindowTimers.clearTimeout()										
cleartimeout	R	WindowTimers.clearTimeout()										
paymentrequest onshippingaddresschange	R	PaymentRequest.onshippingaddresschange										
onshippingaddresschange	R	PaymentRequest.onshippingaddresschange										
api webgl debug renderer info	R	WEBGL_debug_renderer_info										
date sethours	R	Date.prototype.setHours										
sethours	R	Date.prototype.setHours										
webgl2renderingcontext issampler	R	WebGL2RenderingContext.isSampler()										
issampler	R	WebGL2RenderingContext.isSampler()										
api fileentrysync	R	FileEntrySync										
api dompointreadonly	R	DOMPointReadOnly										
api localfilesystemsync	R	LocalFileSystemSync										
webgl2renderingcontext texstorage2d	R	WebGL2RenderingContext.texStorage2D()										
texstorage2d	R	WebGL2RenderingContext.texStorage2D()										
cellSpacing	R	HTMLTableElement.cellSpacing										
htmltableelement cellspacing	R	HTMLTableElement.cellSpacing										
cellspacing	R	HTMLTableElement.cellSpacing										
api channel messaging api	R	Channel Messaging API										
storage getitem	R	Storage.getItem()										
getitem	R	Storage.getItem()										
statements if else syntax	R	if...else										
statements if else example	R	if...else										
if else	R	if...else										
if else syntax	R	if...else										
if else example	R	if...else										
if	R	if...else										
if syntax	R	if...else										
if example	R	if...else										
else	R	if...else										
else syntax	R	if...else										
else example	R	if...else										
statements if else	R	if...else										
string trimleft	R	String.prototype.trimLeft()										
trimleft	R	String.prototype.trimLeft()										
document domain	R	Document.domain										
domain	R	Document.domain										
keyframeeffectreadonly iterationcomposite	R	KeyframeEffectReadOnly.iterationComposite										
iterationcomposite	R	KeyframeEffectReadOnly.iterationComposite										
nextElementSibling	R	NonDocumentTypeChildNode.nextElementSibling										
nondocumenttypechildnode nextelementsibling	R	NonDocumentTypeChildNode.nextElementSibling										
nextelementsibling	R	NonDocumentTypeChildNode.nextElementSibling										
rtcpeerconnection ondatachannel	R	RTCPeerConnection.ondatachannel										
ondatachannel	R	RTCPeerConnection.ondatachannel										
api angle instanced arrays	R	ANGLE_instanced_arrays										
statements for of syntax	R	for...of										
statements for of example	R	for...of										
for of	R	for...of										
for of syntax	R	for...of										
for of example	R	for...of										
statements for of	R	for...of										
dialogArguments	R	Window.dialogArguments										
window dialogarguments	R	Window.dialogArguments										
dialogarguments	R	Window.dialogArguments										
screen mozenabled	R	Screen.mozEnabled										
mozenabled	R	Screen.mozEnabled										
range setend	R	Range.setEnd()										
setend	R	Range.setEnd()										
api rtcstatsreport	R	RTCStatsReport										
canvasrenderingcontext2d ellipse	R	CanvasRenderingContext2D.ellipse()										
ellipse	R	CanvasRenderingContext2D.ellipse()										
performancetiming navigationstart	R	PerformanceTiming.navigationStart										
navigationstart	R	PerformanceTiming.navigationStart										
onpaint	R	Window.onpaint										
window onpaint	R	Window.onpaint										
onpaint	R	Window.onpaint										
audiobuffer getchanneldata	R	AudioBuffer.getChannelData()										
getchanneldata	R	AudioBuffer.getChannelData()										
api svgtspanelement	R	SVGTSpanElement										
api svganimatecolorelement	R	SVGAnimateColorElement										
api htmlhtmlelement	R	HTMLHtmlElement										
api workerlocation	R	WorkerLocation										
rtcpeerconnection sctp	R	RTCPeerConnection.sctp										
sctp	R	RTCPeerConnection.sctp										
api htmlunknownelement	R	HTMLUnknownElement										
api stereopannernode	R	StereoPannerNode										
loginUrl	R	RTCIdentityErrorEvent.loginUrl										
rtcidentityerrorevent loginurl	R	RTCIdentityErrorEvent.loginUrl										
loginurl	R	RTCIdentityErrorEvent.loginUrl										
api svglineelement	R	SVGLineElement										
intersectsNode	R	Range.intersectsNode()										
range intersectsnode	R	Range.intersectsNode()										
intersectsnode	R	Range.intersectsNode()										
innerHeight	R	Window.innerHeight										
window innerheight	R	Window.innerHeight										
innerheight	R	Window.innerHeight										
rootNode	R	Node.rootNode										
node rootnode	R	Node.rootNode										
rootnode	R	Node.rootNode										
api htmllinkelement	R	HTMLLinkElement										
string anchor	R	String.prototype.anchor()										
anchor	R	String.prototype.anchor()										
performanceresourcetiming transfersize	R	PerformanceResourceTiming.transferSize										
transfersize	R	PerformanceResourceTiming.transferSize										
idbcursor advance	R	IDBCursor.advance()										
advance	R	IDBCursor.advance()										
math expm1	R	Math.expm1()										
expm1	R	Math.expm1()										
removeAttribute	R	Element.removeAttribute()										
element removeattribute	R	Element.removeAttribute()										
removeattribute	R	Element.removeAttribute()										
api buffersource	R	BufferSource										
api ext disjoint timer query	R	EXT_disjoint_timer_query										
datatransfer moztypesat	R	DataTransfer.mozTypesAt()										
moztypesat	R	DataTransfer.mozTypesAt()										
math cos	R	Math.cos										
cos	R	Math.cos										
view	R	UIEvent.view										
uievent view	R	UIEvent.view										
view	R	UIEvent.view										
xmlhttprequest how to check the secruity state of an xmlhttprequest over ssl	R	How to check the security state of an XMLHTTPRequest over SSL										
how to check the secruity state of an xmlhttprequest over ssl	R	How to check the security state of an XMLHTTPRequest over SSL										
document documenturi	R	Document.documentURI										
documenturi	R	Document.documentURI										
webglrenderingcontext bindbuffer	R	WebGLRenderingContext.bindBuffer()										
bindbuffer	R	WebGLRenderingContext.bindBuffer()										
api webgl compressed texture es3	R	WEBGL_compressed_texture_es3										
accessKey	R	Element.accessKey										
element accesskey	R	Element.accessKey										
accesskey	R	Element.accessKey										
presentationrequest onconnectionavailable	R	onconnectionavailable										
nodeValue	R	Node.nodeValue										
node nodevalue	R	Node.nodeValue										
nodevalue	R	Node.nodeValue										
string blink	R	String.prototype.blink()										
blink	R	String.prototype.blink()										
errors read-only	R	TypeError: "x" is read-only										
read-only	R	TypeError: "x" is read-only										
global datetimeformat	R	Intl.DateTimeFormat										
datetimeformat	R	Intl.DateTimeFormat										
webglrenderingcontext bindtexture	R	WebGLRenderingContext.bindTexture()										
bindtexture	R	WebGLRenderingContext.bindTexture()										
api domimplementation	R	DOMImplementation										
paymentaddress city	R	PaymentAddress.city										
city	R	PaymentAddress.city										
initEvent	R	Event.initEvent()										
event initevent	R	Event.initEvent()										
initevent	R	Event.initEvent()										
api cssrule	R	CSSRule										
notification silent	R	Notification.silent										
silent	R	Notification.silent										
api idblocaleawarekeyrange	R	IDBLocaleAwareKeyRange										
adoptNode	R	Document.adoptNode()										
document adoptnode	R	Document.adoptNode()										
adoptnode	R	Document.adoptNode()										
api dommatrixreadonly	R	DOMMatrixReadOnly										
inputdevicecapabilities firetouchevents	R	firesTouchEvents										
firetouchevents	R	firesTouchEvents										
pointer events using pointer events	R	Using Pointer Events										
audiocontext createmediastreamsource	R	AudioContext.createMediaStreamSource()										
createmediastreamsource	R	AudioContext.createMediaStreamSource()										
speechsynthesis speaking	R	SpeechSynthesis.speaking										
speaking	R	SpeechSynthesis.speaking										
statements for each in syntax	R	for each...in										
statements for each in example	R	for each...in										
for each in	R	for each...in										
for each in syntax	R	for each...in										
for each in example	R	for each...in										
each	R	for each...in										
each syntax	R	for each...in										
each example	R	for each...in										
statements for each in	R	for each...in										
for each in	R	for each...in										
api readablebytestream	R	ReadableByteStream										
api speechsynthesisevent	R	SpeechSynthesisEvent										
object setprototypeof	R	Object.setPrototypeOf()										
setprototypeof	R	Object.setPrototypeOf()										
document createcdatasection	R	Document.createCDATASection()										
createcdatasection	R	Document.createCDATASection()										
navigation timing api using navigation timing	R	Using Navigation Timing										
tutorial hit regions and accessibility	R	Hit regions and accessibility										
api payment request api	R	Payment Request API										
idbkeyrange upperbound	R	IDBKeyRange.upperBound()										
upperbound	R	IDBKeyRange.upperBound()										
api web video text tracks format	R	WebVTT										
web video text tracks format	R	WebVTT										
notification renotify	R	Notification.renotify										
renotify	R	Notification.renotify										
api vibration api	R	Vibration API										
object   lookupsetter  	R	Object.prototype.__lookupSetter__()										
  lookupsetter  	R	Object.prototype.__lookupSetter__()										
subtlecrypto exportkey	R	SubtleCrypto.exportKey()										
exportkey	R	SubtleCrypto.exportKey()										
document object model whitespace in the dom	R	Whitespace in the DOM										
api canvas api	R	Canvas API										
scrollTo	R	Window.scrollTo()										
window scrollto	R	Window.scrollTo()										
scrollto	R	Window.scrollTo()										
svganimatedstring animval	R	SVGAnimatedString.animVal										
animval	R	SVGAnimatedString.animVal										
ondurationchange	R	GlobalEventHandlers.ondurationchange										
global globaleventhandlers.ondurationchange	R	GlobalEventHandlers.ondurationchange										
rtcpeerconnection ontrack	R	RTCPeerConnection.ontrack										
ontrack	R	RTCPeerConnection.ontrack										
api mediakeys	R	MediaKeys										
api htmltablecaptionelement	R	HTMLTableCaptionElement										
api serviceworkerregistration	R	ServiceWorkerRegistration										
object getownpropertysymbols	R	Object.getOwnPropertySymbols()										
getownpropertysymbols	R	Object.getOwnPropertySymbols()										
range surroundcontents	R	Range.surroundContents()										
surroundcontents	R	Range.surroundContents()										
rtcpeerconnection oniceconnectionstatechange	R	RTCPeerConnection.oniceconnectionstatechange										
oniceconnectionstatechange	R	RTCPeerConnection.oniceconnectionstatechange										
global bool8x16	R	SIMD.Bool8x16										
bool8x16	R	SIMD.Bool8x16										
rtcsessiondescription sdp	R	RTCSessionDescription.sdp										
sdp	R	RTCSessionDescription.sdp										
global referenceerror	R	ReferenceError										
vrdisplay geteyeparameters	R	VRDisplay.getEyeParameters()										
geteyeparameters	R	VRDisplay.getEyeParameters()										
api canvasgradient	R	CanvasGradient										
acceptNode	R	NodeFilter.acceptNode()										
nodefilter acceptnode	R	NodeFilter.acceptNode()										
acceptnode	R	NodeFilter.acceptNode()										
api analysernode	R	AnalyserNode										
api filereader	R	FileReader										
api userproximityevent	R	UserProximityEvent										
networkState	R	HTMLMediaElement.networkState										
htmlmediaelement networkstate	R	HTMLMediaElement.networkState										
networkstate	R	HTMLMediaElement.networkState										
canPlayType	R	HTMLMediaElement.canPlayType()										
htmlmediaelement canplaytype	R	HTMLMediaElement.canPlayType()										
canplaytype	R	HTMLMediaElement.canPlayType()										
webglrenderingcontext stencilmask	R	WebGLRenderingContext.stencilMask()										
stencilmask	R	WebGLRenderingContext.stencilMask()										
webglrenderingcontext createprogram	R	WebGLRenderingContext.createProgram()										
createprogram	R	WebGLRenderingContext.createProgram()										
date setutcmilliseconds	R	Date.prototype.setUTCMilliseconds										
setutcmilliseconds	R	Date.prototype.setUTCMilliseconds										
api cssvaluelist	R	CSSValueList										
multiple	R	HTMLInputElement.multiple										
htmlinputelement multiple	R	HTMLInputElement.multiple										
multiple	R	HTMLInputElement.multiple										
console trace	R	Console.trace()										
trace	R	Console.trace()										
api webgl depth texture	R	WEBGL_depth_texture										
array findindex	R	Array.prototype.findIndex()										
findindex	R	Array.prototype.findIndex()										
string padstart	R	String.prototype.padStart()										
padstart	R	String.prototype.padStart()										
webglrenderingcontext bufferdata	R	WebGLRenderingContext.bufferData()										
bufferdata	R	WebGLRenderingContext.bufferData()										
api webgl compressed texture pvrtc	R	WEBGL_compressed_texture_pvrtc										
webglrenderingcontext createtexture	R	WebGLRenderingContext.createTexture()										
createtexture	R	WebGLRenderingContext.createTexture()										
knee	R	DynamicsCompressorNode.knee										
dynamicscompressornode knee	R	DynamicsCompressorNode.knee										
knee	R	DynamicsCompressorNode.knee										
api encoding api	R	Encoding API										
api paymentaddress	R	PaymentAddress										
date getmonth	R	Date.prototype.getMonth										
getmonth	R	Date.prototype.getMonth										
notification icon	R	Notification.icon										
icon	R	Notification.icon										
api treewalker	R	TreeWalker										
api processinginstruction	R	ProcessingInstruction										
errors property access denied	R	Error: Permission denied to access property "x"										
property access denied	R	Error: Permission denied to access property "x"										
api proximity events	R	Proximity Events										
rtcpeerconnection createdatachannel	R	RTCPeerConnection.createDataChannel()										
createdatachannel	R	RTCPeerConnection.createDataChannel()										
api ext shader texture lod	R	EXT_shader_texture_lod										
containsNode	R	Selection.containsNode()										
selection containsnode	R	Selection.containsNode()										
containsnode	R	Selection.containsNode()										
response redirected	R	Response.redirected										
redirected	R	Response.redirected										
ontouchstart	R	GlobalEventHandlers.ontouchstart										
global ontouchstart	R	GlobalEventHandlers.ontouchstart										
ontouchstart	R	GlobalEventHandlers.ontouchstart										
errors deprecated caller or arguments usage	R	ReferenceError: deprecated caller or arguments usage										
deprecated caller or arguments usage	R	ReferenceError: deprecated caller or arguments usage										
paymentrequest show	R	PaymentRequest.show()										
show	R	PaymentRequest.show()										
mediakeysystemconfiguration videocapabilities	R	videoCapabilities										
screen availleft	R	Screen.availLeft										
availleft	R	Screen.availLeft										
dateTime	R	HTMLTimeElement.dateTime										
htmltimeelement datetime	R	HTMLTimeElement.dateTime										
datetime	R	HTMLTimeElement.dateTime										
date getmilliseconds	R	Date.prototype.getMilliseconds										
getmilliseconds	R	Date.prototype.getMilliseconds										
webglrenderingcontext isframebuffer	R	WebGLRenderingContext.isFramebuffer()										
isframebuffer	R	WebGLRenderingContext.isFramebuffer()										
api svgtrefelement	R	SVGTRefElement										
api svglength	R	SVGLength										
threshold	R	DynamicsCompressorNode.threshold										
dynamicscompressornode threshold	R	DynamicsCompressorNode.threshold										
threshold	R	DynamicsCompressorNode.threshold										
sourcebuffer videotracks	R	SourceBuffer.videoTracks										
videotracks	R	SourceBuffer.videoTracks										
api htmlheadingelement	R	HTMLHeadingElement										
global globaleventhandlers.onended	R	GlobalEventHandlers.onended										
api cryptokey	R	CryptoKey										
ratio	R	DynamicsCompressorNode.ratio										
dynamicscompressornode ratio	R	DynamicsCompressorNode.ratio										
ratio	R	DynamicsCompressorNode.ratio										
insertBefore	R	Node.insertBefore()										
node insertbefore	R	Node.insertBefore()										
insertbefore	R	Node.insertBefore()										
mediakeysystemaccess createmediakeys	R	createMediaKeys()										
createmediakeys	R	createMediaKeys()										
idbkeyrange only	R	IDBKeyRange.only()										
only	R	IDBKeyRange.only()										
api webglquery	R	WebGLQuery										
document mozsyntheticdocument	R	Document.mozSyntheticDocument										
mozsyntheticdocument	R	Document.mozSyntheticDocument										
api mediaquerylistlistener	R	MediaQueryListListener										
pushmanager haspermission	R	PushManager.hasPermission()										
haspermission	R	PushManager.hasPermission()										
sizeToContent	R	Window.sizeToContent()										
window sizetocontent	R	Window.sizeToContent()										
sizetocontent	R	Window.sizeToContent()										
regexp @@match	R	RegExp.prototype[@@match]()										
@@match	R	RegExp.prototype[@@match]()										
console info	R	Console.info()										
info	R	Console.info()										
api htmllegendelement	R	HTMLLegendElement										
datatransfer cleardata	R	DataTransfer.clearData()										
cleardata	R	DataTransfer.clearData()										
document embeds	R	Document.embeds										
embeds	R	Document.embeds										
api htmlspanelement	R	HTMLSpanElement										
mozNotification	R	Navigator.mozNotification										
navigator moznotification	R	Navigator.mozNotification										
moznotification	R	Navigator.mozNotification										
api textmetrics	R	TextMetrics										
xmlhttprequest mozsystem	R	XMLHttpRequest.mozSystem										
mozsystem	R	XMLHttpRequest.mozSystem										
api promiseresolver	R	PromiseResolver										
audiocontext createwaveshaper	R	AudioContext.createWaveShaper()										
createwaveshaper	R	AudioContext.createWaveShaper()										
webglrenderingcontext texsubimage2d	R	WebGLRenderingContext.texSubImage2D()										
texsubimage2d	R	WebGLRenderingContext.texSubImage2D()										
array isarray	R	Array.isArray										
isarray	R	Array.isArray										
operators yield syntax	R	yield										
operators yield example	R	yield										
yield syntax	R	yield										
yield example	R	yield										
operators yield	R	yield										
summary	R	HTMLTableElement.summary										
htmltableelement summary	R	HTMLTableElement.summary										
summary	R	HTMLTableElement.summary										
api ext color buffer float	R	EXT_color_buffer_float										
webglrenderingcontext shadersource	R	WebGLRenderingContext.shaderSource()										
shadersource	R	WebGLRenderingContext.shaderSource()										
installtrigger getversion	R	getVersion										
vrdisplay ispresenting	R	VRDisplay.isPresenting										
ispresenting	R	VRDisplay.isPresenting										
websockets api writing websocket client applications	R	Writing WebSocket client applications										
canvasrenderingcontext2d strokestyle	R	CanvasRenderingContext2D.strokeStyle										
strokestyle	R	CanvasRenderingContext2D.strokeStyle										
api svgclippathelement	R	SVGClipPathElement										
global atomics	R	Atomics										
cssstylesheet deleterule	R	CSSStyleSheet.deleteRule()										
deleterule	R	CSSStyleSheet.deleteRule()										
websockets api websocket server vb.net	R	WebSocket Server Vb.NET										
object seal	R	Object.seal										
seal	R	Object.seal										
operators object initializer syntax	R	Object initializer										
operators object initializer example	R	Object initializer										
object initializer syntax	R	Object initializer										
object initializer example	R	Object initializer										
operators object initializer	R	Object initializer										
api svgangle	R	SVGAngle										
mediakeysystemconfiguration initdatatypes	R	initDataTypes										
setPointerCapture	R	Element.setPointerCapture()										
element setpointercapture	R	Element.setPointerCapture()										
setpointercapture	R	Element.setPointerCapture()										
api pushsubscription	R	PushSubscription										
api media source extensions api	R	Media Source Extensions API										
string charat	R	String.prototype.charAt										
charat	R	String.prototype.charAt										
api oes vertex array object	R	OES_vertex_array_object										
lockedfile getmetadata	R	LockedFile.getMetadata()										
getmetadata	R	LockedFile.getMetadata()										
webglrenderingcontext stencilop	R	WebGLRenderingContext.stencilOp()										
stencilop	R	WebGLRenderingContext.stencilOp()										
webgl2renderingcontext getactiveuniformblockparameter	R	WebGL2RenderingContext.getActiveUniformBlockParameter()										
getactiveuniformblockparameter	R	WebGL2RenderingContext.getActiveUniformBlockParameter()										
subtlecrypto digest	R	SubtleCrypto.digest()										
digest	R	SubtleCrypto.digest()										
smoothingTimeConstant	R	AnalyserNode.smoothingTimeConstant										
analysernode smoothingtimeconstant	R	AnalyserNode.smoothingTimeConstant										
smoothingtimeconstant	R	AnalyserNode.smoothingTimeConstant										
statements import syntax	R	import										
statements import example	R	import										
import syntax	R	import										
import example	R	import										
statements import	R	import										
ext disjoint timer query deletequeryext	R	EXT_disjoint_timer_query.deleteQueryEXT()										
deletequeryext	R	EXT_disjoint_timer_query.deleteQueryEXT()										
api windowclient	R	WindowClient										
validitystate toolong	R	ValidityState.tooLong										
toolong	R	ValidityState.tooLong										
api filesystemflags	R	FileSystemFlags										
parent	R	Window.parent										
window parent	R	Window.parent										
parent	R	Window.parent										
api midiinputmap	R	MIDIInputMap										
rtcdatachannel bufferedamount	R	RTCDataChannel.bufferedAmount										
bufferedamount	R	RTCDataChannel.bufferedAmount										
api svgpatternelement	R	SVGPatternElement										
api push api	R	Push API										
selectNodeContents	R	Range.selectNodeContents()										
range selectnodecontents	R	Range.selectNodeContents()										
selectnodecontents	R	Range.selectNodeContents()										
speechrecognition onspeechend	R	SpeechRecognition.onspeechend										
onspeechend	R	SpeechRecognition.onspeechend										
onLine	R	NavigatorOnLine.onLine										
navigatoronline online	R	NavigatorOnLine.onLine										
online	R	NavigatorOnLine.onLine										
onpointerdown	R	GlobalEventHandlers.onpointerdown										
global onpointerdown	R	GlobalEventHandlers.onpointerdown										
onpointerdown	R	GlobalEventHandlers.onpointerdown										
api idbrequest	R	IDBRequest										
canvasrenderingcontext2d linejoin	R	CanvasRenderingContext2D.lineJoin										
linejoin	R	CanvasRenderingContext2D.lineJoin										
api presentationreceiver	R	PresentationReceiver										
webgl2renderingcontext drawarraysinstanced	R	WebGL2RenderingContext.drawArraysInstanced()										
drawarraysinstanced	R	WebGL2RenderingContext.drawArraysInstanced()										
range extractcontents	R	Range.extractContents()										
extractcontents	R	Range.extractContents()										
api svghkernelement	R	SVGHKernElement										
onpointercancel	R	GlobalEventHandlers.onpointercancel										
global onpointercancel	R	GlobalEventHandlers.onpointercancel										
onpointercancel	R	GlobalEventHandlers.onpointercancel										
mediastreamtrack onunmute	R	MediaStreamTrack.onunmute										
onunmute	R	MediaStreamTrack.onunmute										
global rangeerror	R	RangeError										
math clz32	R	Math.clz32()										
clz32	R	Math.clz32()										
utterance	R	SpeechSynthesisEvent.utterance										
speechsynthesisevent utterance	R	SpeechSynthesisEvent.utterance										
utterance	R	SpeechSynthesisEvent.utterance										
cssvalue cssvaluetype	R	CSSValue.cssValueType										
cssvaluetype	R	CSSValue.cssValueType										
overview	R	WebRTC API overview										
onunhandledrejection	R	WindowEventHandlers.onunhandledrejection										
windoweventhandlers onunhandledrejection	R	WindowEventHandlers.onunhandledrejection										
onunhandledrejection	R	WindowEventHandlers.onunhandledrejection										
api css object model	R	CSS Object Model										
rtcpeerconnection defaulticeservers	R	RTCPeerConnection.defaultIceServers										
defaulticeservers	R	RTCPeerConnection.defaultIceServers										
api batterymanager	R	BatteryManager										
url createobjecturl	R	URL.createObjectURL()										
createobjecturl	R	URL.createObjectURL()										
api fetch api	R	Fetch API										
tutorial getting started with webgl	R	Getting started with WebGL										
api idbobjectstoresync	R	IDBObjectStoreSync										
date getseconds	R	Date.prototype.getSeconds										
getseconds	R	Date.prototype.getSeconds										
global onconnect	R	SharedWorkerGlobalScope.onconnect										
onconnect	R	SharedWorkerGlobalScope.onconnect										
document loadoverlay	R	Document.loadOverlay()										
loadoverlay	R	Document.loadOverlay()										
explicitOriginalTarget	R	Event.explicitOriginalTarget										
event explicitoriginaltarget	R	Event.explicitOriginalTarget										
explicitoriginaltarget	R	Event.explicitOriginalTarget										
taintEnabled	R	NavigatorID.taintEnabled()										
navigatorid taintenabled	R	NavigatorID.taintEnabled()										
taintenabled	R	NavigatorID.taintEnabled()										
global encodeuri	R	Global.encodeURI										
encodeuri	R	Global.encodeURI										
api htmlbaseelement	R	HTMLBaseElement										
webglrenderingcontext enable	R	WebGLRenderingContext.enable()										
enable	R	WebGLRenderingContext.enable()										
getElementsByName	R	Document.getElementsByName()										
document getelementsbyname	R	Document.getElementsByName()										
getelementsbyname	R	Document.getElementsByName()										
onmouseout	R	GlobalEventHandlers.onmouseout										
global onmouseout	R	GlobalEventHandlers.onmouseout										
onmouseout	R	GlobalEventHandlers.onmouseout										
webvr api webvr environment setup	R	WebVR environment setup										
api bluetoothadvertisingdata	R	BluetoothAdvertisingData										
performanceobserver observe	R	PerformanceObserver.observe()										
observe	R	PerformanceObserver.observe()										
bluetoothgattservice getcharacteristics	R	getCharacteristics()										
getcharacteristics	R	getCharacteristics()										
mediakeys createsession	R	createSession()										
createsession	R	createSession()										
webrtc api protocols	R	WebRTC protocols										
protocols	R	WebRTC protocols										
notification sound	R	Notification.sound										
sound	R	Notification.sound										
range clonecontents	R	Range.cloneContents()										
clonecontents	R	Range.cloneContents()										
webglrenderingcontext vertexattribpointer	R	WebGLRenderingContext.vertexAttribPointer()										
vertexattribpointer	R	WebGLRenderingContext.vertexAttribPointer()										
sinkId	R	HTMLMediaElement.sinkId										
htmlmediaelement sinkid	R	HTMLMediaElement.sinkId										
sinkid	R	HTMLMediaElement.sinkId										
cssprimitivevalue getrectvalue	R	CSSPrimitiveValue.getRectValue()										
getrectvalue	R	CSSPrimitiveValue.getRectValue()										
regexp compile	R	RegExp.prototype.compile()										
compile	R	RegExp.prototype.compile()										
api webglbuffer	R	WebGLBuffer										
push api using the push api	R	Using the Push API										
api web speech api	R	Web Speech API										
range endcontainer	R	Range.endContainer										
endcontainer	R	Range.endContainer										
regexp lastmatch	R	RegExp.lastMatch ($&)										
lastmatch	R	RegExp.lastMatch ($&)										
document documenturiobject	R	Document.documentURIObject										
documenturiobject	R	Document.documentURIObject										
api web audio api	R	Web Audio API										
forceSpellCheck	R	HTMLElement.forceSpellCheck()										
htmlelement forcespellcheck	R	HTMLElement.forceSpellCheck()										
forcespellcheck	R	HTMLElement.forceSpellCheck()										
string endswith	R	String.prototype.endsWith()										
endswith	R	String.prototype.endsWith()										
movementX	R	MouseEvent.movementX										
mouseevent movementx	R	MouseEvent.movementX										
movementx	R	MouseEvent.movementX										
movementY	R	MouseEvent.movementY										
mouseevent movementy	R	MouseEvent.movementY										
movementy	R	MouseEvent.movementY										
api l10n.formatvalue	R	L10n.formatValue										
functions rest parameters syntax	R	Rest parameters										
functions rest parameters example	R	Rest parameters										
rest parameters syntax	R	Rest parameters										
rest parameters example	R	Rest parameters										
functions rest parameters	R	Rest parameters										
tutorial animating textures in webgl	R	Animating textures in WebGL										
onloadstart	R	XMLHttpRequestEventTarget.onloadstart										
xmlhttprequesteventtarget onloadstart	R	XMLHttpRequestEventTarget.onloadstart										
onloadstart	R	XMLHttpRequestEventTarget.onloadstart										
domstring binary	R	Binary strings										
binary	R	Binary strings										
api htmlbodyelement	R	HTMLBodyElement										
errors bad radix	R	RangeError: radix must be an integer										
errors not legal radix	R	RangeError: radix must be an integer										
errors invalid radix	R	RangeError: radix must be an integer										
errors not a valid radix	R	RangeError: radix must be an integer										
bad radix	R	RangeError: radix must be an integer										
not legal radix	R	RangeError: radix must be an integer										
invalid radix	R	RangeError: radix must be an integer										
not a valid radix	R	RangeError: radix must be an integer										
animation playstate	R	Animation.playState										
playstate	R	Animation.playState										
vrdisplay stageparameters	R	VRDisplay.stageParameters										
stageparameters	R	VRDisplay.stageParameters										
object proto	R	Object.prototype.__proto__										
proto	R	Object.prototype.__proto__										
api svgstyleelement	R	SVGStyleElement										
ongotpointercapture	R	Element.ongotpointercapture										
element ongotpointercapture	R	Element.ongotpointercapture										
ongotpointercapture	R	Element.ongotpointercapture										
charCode	R	KeyboardEvent.charCode										
keyboardevent charcode	R	KeyboardEvent.charCode										
charcode	R	KeyboardEvent.charCode										
api svgnumberlist	R	SVGNumberList										
document object model events	R	Events and the DOM										
events	R	Events and the DOM										
scrollHeight	R	Element.scrollHeight										
element scrollheight	R	Element.scrollHeight										
scrollheight	R	Element.scrollHeight										
object isprototypeof	R	Object.prototype.isPrototypeOf										
isprototypeof	R	Object.prototype.isPrototypeOf										
api l10n.once	R	L10n.once										
closest	R	Element.closest()										
element closest	R	Element.closest()										
closest	R	Element.closest()										
initMouseEvent	R	MouseEvent.initMouseEvent()										
mouseevent initmouseevent	R	MouseEvent.initMouseEvent()										
initmouseevent	R	MouseEvent.initMouseEvent()										
rtcpeerconnection getlocalstreams	R	RTCPeerConnection.getLocalStreams()										
getlocalstreams	R	RTCPeerConnection.getLocalStreams()										
datatransfer dropeffect	R	DataTransfer.dropEffect										
dropeffect	R	DataTransfer.dropEffect										
api webglframebuffer	R	WebGLFramebuffer										
range setstartbefore	R	Range.setStartBefore()										
setstartbefore	R	Range.setStartBefore()										
eventPhase	R	Event.eventPhase										
event eventphase	R	Event.eventPhase										
eventphase	R	Event.eventPhase										
scrollTop	R	Element.scrollTop										
element scrolltop	R	Element.scrollTop										
scrolltop	R	Element.scrollTop										
global generatorfunction	R	GeneratorFunction										
ondragend	R	GlobalEventHandlers.ondragend										
global ondragend	R	GlobalEventHandlers.ondragend										
ondragend	R	GlobalEventHandlers.ondragend										
api idbversionchangeevent	R	IDBVersionChangeEvent										
minimize	R	Window.minimize()										
window minimize	R	Window.minimize()										
minimize	R	Window.minimize()										
getBattery	R	Navigator.getBattery()										
navigator getbattery	R	Navigator.getBattery()										
getbattery	R	Navigator.getBattery()										
performanceresourcetiming decodedbodysize	R	PerformanceResourceTiming.decodedBodySize										
decodedbodysize	R	PerformanceResourceTiming.decodedBodySize										
previousElementSibling	R	NonDocumentTypeChildNode.previousElementSibling										
nondocumenttypechildnode previouselementsibling	R	NonDocumentTypeChildNode.previousElementSibling										
previouselementsibling	R	NonDocumentTypeChildNode.previousElementSibling										
api webgl compressed texture s3tc	R	WEBGL_compressed_texture_s3tc										
ondeviceorientation	R	Window.ondeviceorientation										
window ondeviceorientation	R	Window.ondeviceorientation										
ondeviceorientation	R	Window.ondeviceorientation										
onselectstart	R	GlobalEventHandlers.onselectstart										
global onselectstart	R	GlobalEventHandlers.onselectstart										
onselectstart	R	GlobalEventHandlers.onselectstart										
errors undefined prop	R	ReferenceError: reference to undefined property "x"										
undefined prop	R	ReferenceError: reference to undefined property "x"										
tutorial animating objects with webgl	R	Animating objects with WebGL										
canvasrenderingcontext2d quadraticcurveto	R	CanvasRenderingContext2D.quadraticCurveTo()										
quadraticcurveto	R	CanvasRenderingContext2D.quadraticCurveTo()										
api nodelist	R	NodeList										
vrfieldofview updegrees	R	VRFieldOfView.upDegrees										
updegrees	R	VRFieldOfView.upDegrees										
api idbenvironment	R	IDBEnvironment										
typeMustMatch	R	HTMLObjectElement.typeMustMatch										
htmlobjectelement typemustmatch	R	HTMLObjectElement.typeMustMatch										
typemustmatch	R	HTMLObjectElement.typeMustMatch										
notification actions	R	Notification.actions										
actions	R	Notification.actions										
webgl2renderingcontext getindexedparameter	R	WebGL2RenderingContext.getIndexedParameter()										
getindexedparameter	R	WebGL2RenderingContext.getIndexedParameter()										
audioparam setvalueattime	R	AudioParam.setValueAtTime()										
setvalueattime	R	AudioParam.setValueAtTime()										
resizeTo	R	Window.resizeTo()										
window resizeto	R	Window.resizeTo()										
resizeto	R	Window.resizeTo()										
regexp unicode	R	RegExp.prototype.unicode										
unicode	R	RegExp.prototype.unicode										
api devicemotionevent	R	DeviceMotionEvent										
coordinates speed	R	Coordinates.speed										
speed	R	Coordinates.speed										
webgl2renderingcontext texsubimage3d	R	WebGL2RenderingContext.texSubImage3D()										
texsubimage3d	R	WebGL2RenderingContext.texSubImage3D()										
serviceworkerregistration getnotifications	R	ServiceWorkerRegistration.getNotifications()										
getnotifications	R	ServiceWorkerRegistration.getNotifications()										
oninput	R	GlobalEventHandlers.oninput										
global oninput	R	GlobalEventHandlers.oninput										
oninput	R	GlobalEventHandlers.oninput										
mediarecorder ondataavailable	R	MediaRecorder.ondataavailable										
ondataavailable	R	MediaRecorder.ondataavailable										
global generator	R	Generator										
webglrenderingcontext hint	R	WebGLRenderingContext.hint()										
hint	R	WebGLRenderingContext.hint()										
ownerDocument	R	Node.ownerDocument										
node ownerdocument	R	Node.ownerDocument										
ownerdocument	R	Node.ownerDocument										
string trimright	R	String.prototype.trimRight()										
trimright	R	String.prototype.trimRight()										
document fullscreenenabled	R	Document.fullscreenEnabled										
fullscreenenabled	R	Document.fullscreenEnabled										
lengthComputable	R	ProgressEvent.lengthComputable										
progressevent lengthcomputable	R	ProgressEvent.lengthComputable										
lengthcomputable	R	ProgressEvent.lengthComputable										
onmousemove	R	GlobalEventHandlers.onmousemove										
global onmousemove	R	GlobalEventHandlers.onmousemove										
onmousemove	R	GlobalEventHandlers.onmousemove										
range startoffset	R	Range.startOffset										
startoffset	R	Range.startOffset										
math pow	R	Math.pow										
pow	R	Math.pow										
api webglrenderbuffer	R	WebGLRenderbuffer										
removeAttributeNS	R	Element.removeAttributeNS()										
element removeattributens	R	Element.removeAttributeNS()										
removeattributens	R	Element.removeAttributeNS()										
isContentEditable	R	HTMLElement.isContentEditable										
htmlelement iscontenteditable	R	HTMLElement.isContentEditable										
iscontenteditable	R	HTMLElement.isContentEditable										
api credential management api	R	Credential Management API										
rules	R	HTMLTableElement.rules										
htmltableelement rules	R	HTMLTableElement.rules										
rules	R	HTMLTableElement.rules										
textContent	R	Node.textContent										
node textcontent	R	Node.textContent										
textcontent	R	Node.textContent										
htmlmediaelement srcobject	R	srcObject										
offscreencanvas transfertoimagebitmap	R	OffscreenCanvas.transferToImageBitmap()										
transfertoimagebitmap	R	OffscreenCanvas.transferToImageBitmap()										
api webgluniformlocation	R	WebGLUniformLocation										
api oes element index uint	R	OES_element_index_uint										
setAttributeNode	R	Element.setAttributeNode()										
element setattributenode	R	Element.setAttributeNode()										
setattributenode	R	Element.setAttributeNode()										
rtcpeerconnection currentremotedescription	R	RTCPeerConnection.currentRemoteDescription										
currentremotedescription	R	RTCPeerConnection.currentRemoteDescription										
console groupend	R	Console.groupEnd()										
groupend	R	Console.groupEnd()										
idbenvironment indexeddb	R	IDBEnvironment.indexedDB										
indexeddb	R	IDBEnvironment.indexedDB										
paymentaddress recipient	R	PaymentAddress.recipient										
recipient	R	PaymentAddress.recipient										
api navigatorplugins	R	NavigatorPlugins										
pointerBeforeReferenceNode	R	NodeIterator.pointerBeforeReferenceNode										
nodeiterator pointerbeforereferencenode	R	NodeIterator.pointerBeforeReferenceNode										
pointerbeforereferencenode	R	NodeIterator.pointerBeforeReferenceNode										
api htmltablecolelement	R	HTMLTableColElement										
angle instanced arrays drawarraysinstancedangle	R	ANGLE_instanced_arrays.drawArraysInstancedANGLE()										
drawarraysinstancedangle	R	ANGLE_instanced_arrays.drawArraysInstancedANGLE()										
api cssconditionrule	R	CSSConditionRule										
webglrenderingcontext bindframebuffer	R	WebGLRenderingContext.bindFramebuffer()										
bindframebuffer	R	WebGLRenderingContext.bindFramebuffer()										
btoa	R	WindowBase64.btoa()										
windowbase64 btoa	R	WindowBase64.btoa()										
btoa	R	WindowBase64.btoa()										
getAttributeNodeNS	R	Element.getAttributeNodeNS()										
element getattributenodens	R	Element.getAttributeNodeNS()										
getattributenodens	R	Element.getAttributeNodeNS()										
position coords	R	Position.coords										
coords	R	Position.coords										
api cssstylesheet	R	CSSStyleSheet										
removeAllRanges	R	Selection.removeAllRanges()										
selection removeallranges	R	Selection.removeAllRanges()										
removeallranges	R	Selection.removeAllRanges()										
sourcebuffer texttracks	R	SourceBuffer.textTracks										
texttracks	R	SourceBuffer.textTracks										
number min safe integer	R	Number.MIN_SAFE_INTEGER										
min safe integer	R	Number.MIN_SAFE_INTEGER										
onloadstart	R	GlobalEventHandlers.onloadstart										
global globaleventhandlers.onloadstart	R	GlobalEventHandlers.onloadstart										
api fileexception	R	FileException										
classList	R	Element.classList										
element classlist	R	Element.classList										
classlist	R	Element.classList										
api htmlpictureelement	R	HTMLPictureElement										
string localecompare	R	String.prototype.localeCompare										
localecompare	R	String.prototype.localeCompare										
rtcpeerconnection setremotedescription	R	RTCPeerConnection.setRemoteDescription()										
setremotedescription	R	RTCPeerConnection.setRemoteDescription()										
date setseconds	R	Date.prototype.setSeconds										
setseconds	R	Date.prototype.setSeconds										
confirm	R	Window.confirm()										
window confirm	R	Window.confirm()										
confirm	R	Window.confirm()										
api cachestorage	R	CacheStorage										
console dirxml	R	Console.dirxml()										
dirxml	R	Console.dirxml()										
disableRemotePlayback	R	HTMLMediaElement.disableRemotePlayback										
htmlmediaelement disableremoteplayback	R	HTMLMediaElement.disableRemotePlayback										
disableremoteplayback	R	HTMLMediaElement.disableRemotePlayback										
federatedcredential provider	R	provider										
originalTarget	R	Event.originalTarget										
event originaltarget	R	Event.originalTarget										
originaltarget	R	Event.originalTarget										
mediastream gettrackbyid	R	MediaStream.getTrackById()										
gettrackbyid	R	MediaStream.getTrackById()										
api mediastreamtrack	R	MediaStreamTrack										
sourcebuffer appendbuffer	R	SourceBuffer.appendBuffer()										
appendbuffer	R	SourceBuffer.appendBuffer()										
getActive	R	HTMLIFrameElement.getActive()										
htmliframeelement getactive	R	HTMLIFrameElement.getActive()										
getactive	R	HTMLIFrameElement.getActive()										
xmlhttprequest using xmlhttprequest in ie6	R	Using XMLHttpRequest in IE6										
createShadowRoot	R	Element.createShadowRoot()										
element createshadowroot	R	Element.createShadowRoot()										
createshadowroot	R	Element.createShadowRoot()										
global regexp	R	RegExp										
statements throw syntax	R	throw										
statements throw example	R	throw										
throw syntax	R	throw										
throw example	R	throw										
statements throw	R	throw										
response ok	R	Response.ok										
ok	R	Response.ok										
executeScript	R	HTMLIFrameElement.executeScript()										
htmliframeelement executescript	R	HTMLIFrameElement.executeScript()										
executescript	R	HTMLIFrameElement.executeScript()										
performance clearmeasures	R	Performance.clearMeasures()										
clearmeasures	R	Performance.clearMeasures()										
document object model how to create a dom tree	R	How to create a DOM tree										
date gettimezoneoffset	R	Date.prototype.getTimezoneOffset										
gettimezoneoffset	R	Date.prototype.getTimezoneOffset										
getByteFrequencyData	R	AnalyserNode.getByteFrequencyData()										
analysernode getbytefrequencydata	R	AnalyserNode.getByteFrequencyData()										
getbytefrequencydata	R	AnalyserNode.getByteFrequencyData()										
webglrenderingcontext blendequation	R	WebGLRenderingContext.blendEquation()										
blendequation	R	WebGLRenderingContext.blendEquation()										
cellPadding	R	HTMLTableElement.cellPadding										
htmltableelement cellpadding	R	HTMLTableElement.cellPadding										
cellpadding	R	HTMLTableElement.cellPadding										
webgl2renderingcontext issync	R	WebGL2RenderingContext.isSync()										
issync	R	WebGL2RenderingContext.isSync()										
number toexponential	R	Number.prototype.toExponential										
toexponential	R	Number.prototype.toExponential										
htmlimageelement image	R	Image()										
image	R	Image()										
date getfullyear	R	Date.prototype.getFullYear										
getfullyear	R	Date.prototype.getFullYear										
errors deprecated source map pragma	R	SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead										
deprecated source map pragma	R	SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead										
attachEvent	R	EventTarget.attachEvent()										
eventtarget attachevent	R	EventTarget.attachEvent()										
attachevent	R	EventTarget.attachEvent()										
bluetoothgattservice getincludedservices	R	getIncludedServices()										
getincludedservices	R	getIncludedServices()										
webgl2renderingcontext resumetransformfeedback	R	WebGL2RenderingContext.resumeTransformFeedback()										
resumetransformfeedback	R	WebGL2RenderingContext.resumeTransformFeedback()										
api cssnamespacerule	R	CSSNamespaceRule										
onmousewheel	R	GlobalEventHandlers.onmousewheel										
global globaleventhandlers.onmousewheel	R	GlobalEventHandlers.onmousewheel										
performance mark	R	Performance.mark()										
mark	R	Performance.mark()										
api webglprogram	R	WebGLProgram										
api permissions api	R	Permissions API										
api htmltablesectionelement	R	HTMLTableSectionElement										
channelCount	R	AudioNode.channelCount										
audionode channelcount	R	AudioNode.channelCount										
channelcount	R	AudioNode.channelCount										
scrollByLines	R	Window.scrollByLines()										
window scrollbylines	R	Window.scrollByLines()										
scrollbylines	R	Window.scrollByLines()										
api svgtests	R	SVGTests										
document writeln	R	Document.writeln()										
writeln	R	Document.writeln()										
vrdisplaycapabilities hasposition	R	VRDisplayCapabilities.hasPosition										
hasposition	R	VRDisplayCapabilities.hasPosition										
global onpush	R	ServiceWorkerGlobalScope.onpush										
onpush	R	ServiceWorkerGlobalScope.onpush										
positionoptions maximumage	R	PositionOptions.maximumAge										
maximumage	R	PositionOptions.maximumAge										
paymentresponse complete	R	PaymentResponse.complete()										
complete	R	PaymentResponse.complete()										
api htmlimageelement	R	HTMLImageElement										
api performanceframetiming	R	PerformanceFrameTiming										
xmlhttprequest mozanon	R	XMLHttpRequest.mozAnon										
mozanon	R	XMLHttpRequest.mozAnon										
networkinformation ontypechange	R	NetworkInformation.ontypechange										
ontypechange	R	NetworkInformation.ontypechange										
webglrenderingcontext framebufferrenderbuffer	R	WebGLRenderingContext.framebufferRenderbuffer()										
framebufferrenderbuffer	R	WebGLRenderingContext.framebufferRenderbuffer()										
datatransfer getdata	R	DataTransfer.getData()										
getdata	R	DataTransfer.getData()										
webglrenderingcontext viewport	R	WebGLRenderingContext.viewport()										
viewport	R	WebGLRenderingContext.viewport()										
api domstringmap	R	DOMStringMap										
audiocontext createiirfilter	R	AudioContext.createIIRFilter()										
createiirfilter	R	AudioContext.createIIRFilter()										
onunload	R	WindowEventHandlers.onunload										
windoweventhandlers onunload	R	WindowEventHandlers.onunload										
onunload	R	WindowEventHandlers.onunload										
cryptokey algorithm	R	CryptoKey.algorithm										
algorithm	R	CryptoKey.algorithm										
datatransfer mozgetdataat	R	DataTransfer.mozGetDataAt()										
mozgetdataat	R	DataTransfer.mozGetDataAt()										
api directoryentrysync	R	DirectoryEntrySync										
coneOuterGain	R	PannerNode.coneOuterGain										
pannernode coneoutergain	R	PannerNode.coneOuterGain										
coneoutergain	R	PannerNode.coneOuterGain										
tHead	R	HTMLTableElement.tHead										
htmltableelement thead	R	HTMLTableElement.tHead										
thead	R	HTMLTableElement.tHead										
api popstateevent	R	PopStateEvent										
mozAnimationStartTime	R	Window.mozAnimationStartTime										
window mozanimationstarttime	R	Window.mozAnimationStartTime										
mozanimationstarttime	R	Window.mozAnimationStartTime										
webglrenderingcontext isshader	R	WebGLRenderingContext.isShader()										
isshader	R	WebGLRenderingContext.isShader()										
currentNode	R	TreeWalker.currentNode										
treewalker currentnode	R	TreeWalker.currentNode										
currentnode	R	TreeWalker.currentNode										
text wholetext	R	Text.wholeText										
wholetext	R	Text.wholeText										
mozTime	R	Navigator.mozTime										
navigator moztime	R	Navigator.mozTime										
moztime	R	Navigator.mozTime										
text splittext	R	Text.splitText()										
splittext	R	Text.splitText()										
global onpushsubscriptionchange	R	ServiceWorkerGlobalScope.onpushsubscriptionchange										
onpushsubscriptionchange	R	ServiceWorkerGlobalScope.onpushsubscriptionchange										
api svgswitchelement	R	SVGSwitchElement										
api serviceworkerstate	R	ServiceWorkerState										
errors bad octal	R	SyntaxError: "x" is not a legal ECMA-262 octal constant										
errors not legal octal	R	SyntaxError: "x" is not a legal ECMA-262 octal constant										
errors invalid octal	R	SyntaxError: "x" is not a legal ECMA-262 octal constant										
errors not a valid octal	R	SyntaxError: "x" is not a legal ECMA-262 octal constant										
bad octal	R	SyntaxError: "x" is not a legal ECMA-262 octal constant										
not legal octal	R	SyntaxError: "x" is not a legal ECMA-262 octal constant										
invalid octal	R	SyntaxError: "x" is not a legal ECMA-262 octal constant										
not a valid octal	R	SyntaxError: "x" is not a legal ECMA-262 octal constant										
date gethours	R	Date.prototype.getHours										
gethours	R	Date.prototype.getHours										
api storage	R	Storage										
WEBKIT FORCE AT MOUSE DOWN	R	MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN										
mouseevent mouseevent.webkit force at mouse down	R	MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN										
clientTop	R	Element.clientTop										
element clienttop	R	Element.clientTop										
clienttop	R	Element.clientTop										
onlostpointercapture	R	Element.onlostpointercapture										
element onlostpointercapture	R	Element.onlostpointercapture										
onlostpointercapture	R	Element.onlostpointercapture										
initUIEvent	R	UIEvent.initUIEvent()										
uievent inituievent	R	UIEvent.initUIEvent()										
inituievent	R	UIEvent.initUIEvent()										
mimeTypes	R	NavigatorPlugins.mimeTypes										
navigatorplugins mimetypes	R	NavigatorPlugins.mimeTypes										
mimetypes	R	NavigatorPlugins.mimeTypes										
idbkeyrange lowerbound	R	IDBKeyRange.lowerBound()										
lowerbound	R	IDBKeyRange.lowerBound()										
canvasrenderingcontext2d drawimage	R	CanvasRenderingContext2D.drawImage()										
drawimage	R	CanvasRenderingContext2D.drawImage()										
document lastmodified	R	Document.lastModified										
lastmodified	R	Document.lastModified										
api filesystemdirectoryentry	R	FileSystemDirectoryEntry										
tutorial finale	R	Finale										
api arraybufferview	R	ArrayBufferView										
minDecibels	R	AnalyserNode.minDecibels										
analysernode mindecibels	R	AnalyserNode.minDecibels										
mindecibels	R	AnalyserNode.minDecibels										
vrstageparameters sittingtostandingtransform	R	VRStageParameters.sittingToStandingTransform										
sittingtostandingtransform	R	VRStageParameters.sittingToStandingTransform										
math ln10	R	Math.LN10										
ln10	R	Math.LN10										
showModalDialog	R	Window.showModalDialog()										
window showmodaldialog	R	Window.showModalDialog()										
showmodaldialog	R	Window.showModalDialog()										
mediastreamtrack remote	R	MediaStreamTrack.remote										
remote	R	MediaStreamTrack.remote										
api htmlolistelement	R	HTMLOListElement										
curve	R	WaveShaperNode.curve										
waveshapernode curve	R	WaveShaperNode.curve										
curve	R	WaveShaperNode.curve										
animation finished	R	Animation.finished										
finished	R	Animation.finished										
webglrenderingcontext drawingbufferwidth	R	WebGLRenderingContext.drawingBufferWidth										
drawingbufferwidth	R	WebGLRenderingContext.drawingBufferWidth										
bluetoothadvertisingdata manufacturerdata	R	manufacturerData										
api page visibility api	R	Page Visibility API										
api subtlecrypto	R	SubtleCrypto										
api domparser	R	DOMParser										
charIndex	R	SpeechSynthesisEvent.charIndex										
speechsynthesisevent charindex	R	SpeechSynthesisEvent.charIndex										
charindex	R	SpeechSynthesisEvent.charIndex										
moveBy	R	Window.moveBy()										
window moveby	R	Window.moveBy()										
moveby	R	Window.moveBy()										
math acosh	R	Math.acosh()										
acosh	R	Math.acosh()										
children	R	ParentNode.children										
parentnode children	R	ParentNode.children										
children	R	ParentNode.children										
deltaZ	R	WheelEvent.deltaZ										
wheelevent deltaz	R	WheelEvent.deltaZ										
deltaz	R	WheelEvent.deltaZ										
fftSize	R	AnalyserNode.fftSize										
analysernode fftsize	R	AnalyserNode.fftSize										
fftsize	R	AnalyserNode.fftSize										
createTFoot	R	HTMLTableElement.createTFoot()										
htmltableelement createtfoot	R	HTMLTableElement.createTFoot()										
createtfoot	R	HTMLTableElement.createTFoot()										
function isgenerator	R	Function.prototype.isGenerator()										
isgenerator	R	Function.prototype.isGenerator()										
lookupNamespaceURI	R	Node.lookupNamespaceURI()										
node lookupnamespaceuri	R	Node.lookupNamespaceURI()										
lookupnamespaceuri	R	Node.lookupNamespaceURI()										
global int32x4	R	SIMD.Int32x4										
int32x4	R	SIMD.Int32x4										
xmlhttprequest init	R	XMLHttpRequest.init										
init	R	XMLHttpRequest.init										
doNotTrack	R	Navigator.doNotTrack										
navigator donottrack	R	Navigator.doNotTrack										
donottrack	R	Navigator.doNotTrack										
api navigatorgeolocation	R	NavigatorGeolocation										
api presentation	R	Presentation										
idbobjectstore indexnames	R	IDBObjectStore.indexNames										
indexnames	R	IDBObjectStore.indexNames										
api idbobjectstore	R	IDBObjectStore										
bluetoothremotegattcharacteristic getdescriptor	R	BluetoothRemoteGATTCharacteristic.getDescriptor()										
getdescriptor	R	BluetoothRemoteGATTCharacteristic.getDescriptor()										
api pushmessagedata	R	PushMessageData										
print	R	Window.print()										
window print	R	Window.print()										
print	R	Window.print()										
bubbles	R	Event.bubbles										
event bubbles	R	Event.bubbles										
bubbles	R	Event.bubbles										
setSinkId	R	HTMLMediaElement.setSinkId()										
htmlmediaelement setsinkid	R	HTMLMediaElement.setSinkId()										
setsinkid	R	HTMLMediaElement.setSinkId()										
array @@unscopables	R	Array.prototype[@@unscopables]										
@@unscopables	R	Array.prototype[@@unscopables]										
setImmediate	R	Window.setImmediate()										
window setimmediate	R	Window.setImmediate()										
setimmediate	R	Window.setImmediate()										
mediakeysession keystatuses	R	keyStatuses										
firstElementChild	R	ParentNode.firstElementChild										
parentnode firstelementchild	R	ParentNode.firstElementChild										
firstelementchild	R	ParentNode.firstElementChild										
mediastream onremovetrack	R	MediaStream.onremovetrack										
onremovetrack	R	MediaStream.onremovetrack										
webgl2renderingcontext createvertexarray	R	WebGL2RenderingContext.createVertexArray()										
createvertexarray	R	WebGL2RenderingContext.createVertexArray()										
date getday	R	Date.prototype.getDay										
getday	R	Date.prototype.getDay										
document designmode	R	Document.designMode										
designmode	R	Document.designMode										
vrlayer leftbounds	R	VRLayer.leftBounds										
leftbounds	R	VRLayer.leftBounds										
string small	R	String.prototype.small()										
small	R	String.prototype.small()										
maxDistance	R	PannerNode.maxDistance										
pannernode maxdistance	R	PannerNode.maxDistance										
maxdistance	R	PannerNode.maxDistance										
tabStop	R	Element.tabStop										
element tabstop	R	Element.tabStop										
tabstop	R	Element.tabStop										
api vrdisplaycapabilities	R	VRDisplayCapabilities										
webglrenderingcontext getattriblocation	R	WebGLRenderingContext.getAttribLocation()										
getattriblocation	R	WebGLRenderingContext.getAttribLocation()										
serviceworkerregistration sync	R	ServiceWorkerRegistration.sync										
sync	R	ServiceWorkerRegistration.sync										
api svgsvgelement	R	SVGSVGElement										
speechsynthesisutterance rate	R	SpeechSynthesisUtterance.rate										
rate	R	SpeechSynthesisUtterance.rate										
api pannernode	R	PannerNode										
string link	R	String.prototype.link()										
link	R	String.prototype.link()										
expandEntityReferences	R	NodeIterator.expandEntityReferences										
nodeiterator expandentityreferences	R	NodeIterator.expandEntityReferences										
expandentityreferences	R	NodeIterator.expandEntityReferences										
api mediakeysystemconfiguration	R	MediaKeySystemConfiguration										
document contenttype	R	Document.contentType										
contenttype	R	Document.contentType										
string sub	R	String.prototype.sub()										
sub	R	String.prototype.sub()										
videoplaybackquality droppedvideoframes	R	VideoPlaybackQuality.droppedVideoFrames										
droppedvideoframes	R	VideoPlaybackQuality.droppedVideoFrames										
object isextensible	R	Object.isExtensible										
isextensible	R	Object.isExtensible										
web speech api using the web speech api	R	Using the Web Speech API										
canvasrenderingcontext2d currenttransform	R	CanvasRenderingContext2D.currentTransform										
currenttransform	R	CanvasRenderingContext2D.currentTransform										
api audionode	R	AudioNode										
canvasrenderingcontext2d createradialgradient	R	CanvasRenderingContext2D.createRadialGradient()										
createradialgradient	R	CanvasRenderingContext2D.createRadialGradient()										
bluetoothgattservice getcharacteristic	R	getCharacteristic()										
getcharacteristic	R	getCharacteristic()										
webglrenderingcontext deleterenderbuffer	R	WebGLRenderingContext.deleteRenderbuffer()										
deleterenderbuffer	R	WebGLRenderingContext.deleteRenderbuffer()										
global uint32array	R	Uint32Array										
rtcdatachannel maxretransmits	R	RTCDataChannel.maxRetransmits										
maxretransmits	R	RTCDataChannel.maxRetransmits										
rtcpeerconnection onidpassertionerror	R	RTCPeerConnection.onidpassertionerror										
onidpassertionerror	R	RTCPeerConnection.onidpassertionerror										
webrtc api adapter.js	R	Improving compatibility using WebRTC adapter.js										
adapter.js	R	Improving compatibility using WebRTC adapter.js										
api filereadersync	R	FileReaderSync										
webgl2renderingcontext bindbufferrange	R	WebGL2RenderingContext.bindBufferRange()										
bindbufferrange	R	WebGL2RenderingContext.bindBufferRange()										
bluetoothdevice uuids	R	BluetoothDevice.uuids										
uuids	R	BluetoothDevice.uuids										
math trunc	R	Math.trunc()										
trunc	R	Math.trunc()										
document object model traversing an html table with javascript and dom interfaces	R	Traversing an HTML table with JavaScript and DOM Interfaces										
webglrenderingcontext pixelstorei	R	WebGLRenderingContext.pixelStorei()										
pixelstorei	R	WebGLRenderingContext.pixelStorei()										
api svgcursorelement	R	SVGCursorElement										
document applets	R	Document.applets										
applets	R	Document.applets										
mediarecorder requestdata	R	MediaRecorder.requestData()										
requestdata	R	MediaRecorder.requestData()										
onbeforeunload	R	WindowEventHandlers.onbeforeunload										
windoweventhandlers onbeforeunload	R	WindowEventHandlers.onbeforeunload										
onbeforeunload	R	WindowEventHandlers.onbeforeunload										
openDialog	R	Window.openDialog()										
window opendialog	R	Window.openDialog()										
opendialog	R	Window.openDialog()										
api pushregistrationmanager	R	PushRegistrationManager										
oes vertex array object deletevertexarrayoes	R	OES_vertex_array_object.deleteVertexArrayOES()										
deletevertexarrayoes	R	OES_vertex_array_object.deleteVertexArrayOES()										
api file and directory entries api	R	File and Directory Entries API										
document compatmode	R	Document.compatMode										
compatmode	R	Document.compatMode										
mozL10n	R	Navigator.mozL10n										
navigator mozl10n	R	Navigator.mozL10n										
mozl10n	R	Navigator.mozL10n										
vrfieldofview rightdegrees	R	VRFieldOfView.rightDegrees										
rightdegrees	R	VRFieldOfView.rightDegrees										
statements debugger syntax	R	debugger										
statements debugger example	R	debugger										
debugger syntax	R	debugger										
debugger example	R	debugger										
statements debugger	R	debugger										
global stopiteration	R	StopIteration										
api directoryreadersync	R	DirectoryReaderSync										
audiobuffer copytochannel	R	AudioBuffer.copyToChannel()										
copytochannel	R	AudioBuffer.copyToChannel()										
api svganimatemotionelement	R	SVGAnimateMotionElement										
api audiodestinationnode	R	AudioDestinationNode										
errors too much recursion	R	InternalError: too much recursion										
too much recursion	R	InternalError: too much recursion										
onpointerenter	R	GlobalEventHandlers.onpointerenter										
global onpointerenter	R	GlobalEventHandlers.onpointerenter										
onpointerenter	R	GlobalEventHandlers.onpointerenter										
isSecureContext	R	Window.isSecureContext										
window issecurecontext	R	Window.isSecureContext										
issecurecontext	R	Window.isSecureContext										
audiocontext destination	R	AudioContext.destination										
destination	R	AudioContext.destination										
console timeend	R	Console.timeEnd()										
timeend	R	Console.timeEnd()										
rolloffFactor	R	PannerNode.rolloffFactor										
pannernode rollofffactor	R	PannerNode.rolloffFactor										
rollofffactor	R	PannerNode.rolloffFactor										
canvasrenderingcontext2d textalign	R	CanvasRenderingContext2D.textAlign										
textalign	R	CanvasRenderingContext2D.textAlign										
devicelightevent using light sensors	R	Using light sensors										
vrdisplay resetpose	R	VRDevice.resetPose()										
resetpose	R	VRDevice.resetPose()										
scrollBy	R	Window.scrollBy()										
window scrollby	R	Window.scrollBy()										
scrollby	R	Window.scrollBy()										
rtcpeerconnection generatecertificate	R	RTCPeerConnection.generateCertificate()										
generatecertificate	R	RTCPeerConnection.generateCertificate()										
reference operators	R	Expressions and operators										
operators	R	Expressions and operators										
api webglactiveinfo	R	WebGLActiveInfo										
operators instanceof syntax	R	instanceof										
operators instanceof example	R	instanceof										
instanceof syntax	R	instanceof										
instanceof example	R	instanceof										
operators instanceof	R	instanceof										
api oes texture half float linear	R	OES_texture_half_float_linear										
mediasource istypesupported	R	MediaSource.isTypeSupported()										
istypesupported	R	MediaSource.isTypeSupported()										
document createexpression	R	Document.createExpression()										
createexpression	R	Document.createExpression()										
pushsubscription endpoint	R	PushSubscription.endpoint										
endpoint	R	PushSubscription.endpoint										
serviceworkerregistration installing	R	ServiceWorkerRegistration.installing										
installing	R	ServiceWorkerRegistration.installing										
api characterdata	R	CharacterData										
document onselectionchange	R	Document.onselectionchange										
onselectionchange	R	Document.onselectionchange										
speechgrammarlist addfromuri	R	SpeechGrammarList.addFromURI()										
addfromuri	R	SpeechGrammarList.addFromURI()										
htmlFor	R	HTMLLabelElement.htmlFor										
htmllabelelement htmlfor	R	HTMLLabelElement.htmlFor										
htmlfor	R	HTMLLabelElement.htmlFor										
api css counter styles	R	CSS Counter Styles										
regexp lastindex	R	regexp.lastIndex										
lastindex	R	regexp.lastIndex										
loopEnd	R	AudioBufferSourceNode.loopEnd										
audiobuffersourcenode loopend	R	AudioBufferSourceNode.loopEnd										
loopend	R	AudioBufferSourceNode.loopEnd										
webgl2renderingcontext framebuffertexturelayer	R	WebGL2RenderingContext.framebufferTextureLayer()										
framebuffertexturelayer	R	WebGL2RenderingContext.framebufferTextureLayer()										
oncopy	R	HTMLElement.oncopy										
htmlelement oncopy	R	HTMLElement.oncopy										
oncopy	R	HTMLElement.oncopy										
service worker api using service workers	R	Using Service Workers										
tutorial creating 3d objects using webgl	R	Creating 3D objects using WebGL										
api resource timing api	R	Resource Timing API										
api svganimatedrect	R	SVGAnimatedRect										
webgl2renderingcontext fencesync	R	WebGL2RenderingContext.fenceSync()										
fencesync	R	WebGL2RenderingContext.fenceSync()										
onafterprint	R	WindowEventHandlers.onafterprint										
windoweventhandlers onafterprint	R	WindowEventHandlers.onafterprint										
onafterprint	R	WindowEventHandlers.onafterprint										
canvasrenderingcontext2d textbaseline	R	CanvasRenderingContext2D.textBaseline										
textbaseline	R	CanvasRenderingContext2D.textBaseline										
global onactivate	R	ServiceWorkerGlobalScope.onactivate										
onactivate	R	ServiceWorkerGlobalScope.onactivate										
selectedIndex	R	HTMLSelectElement.selectedIndex										
htmlselectelement selectedindex	R	HTMLSelectElement.selectedIndex										
selectedindex	R	HTMLSelectElement.selectedIndex										
api css	R	CSS										
vrdisplay getlayers	R	VRDisplay.getLayers()										
getlayers	R	VRDisplay.getLayers()										
getAttention	R	Window.getAttention()										
window getattention	R	Window.getAttention()										
getattention	R	Window.getAttention()										
canvasrenderingcontext2d getlinedash	R	CanvasRenderingContext2D.getLineDash()										
getlinedash	R	CanvasRenderingContext2D.getLineDash()										
gamepad mapping	R	Gamepad.mapping										
mapping	R	Gamepad.mapping										
xmlhttprequest upload	R	XMLHttpRequest.upload										
upload	R	XMLHttpRequest.upload										
global reflect	R	Reflect										
webrtc api connectivity	R	WebRTC connectivity										
connectivity	R	WebRTC connectivity										
webglrenderingcontext disable	R	WebGLRenderingContext.disable()										
disable	R	WebGLRenderingContext.disable()										
errors missing parenthesis after argument list	R	SyntaxError: missing ) after argument list										
missing parenthesis after argument list	R	SyntaxError: missing ) after argument list										
api bluetoothcharacteristicproperties	R	BluetoothCharacteristicProperties										
mediastreamtrack applyconstraints	R	MediaStreamTrack.applyConstraints()										
applyconstraints	R	MediaStreamTrack.applyConstraints()										
object preventextensions	R	Object.preventExtensions										
preventextensions	R	Object.preventExtensions										
paymentaddress organization	R	PaymentAddress.organization										
organization	R	PaymentAddress.organization										
webglrenderingcontext stencilfunc	R	WebGLRenderingContext.stencilFunc()										
stencilfunc	R	WebGLRenderingContext.stencilFunc()										
ontouchmove	R	GlobalEventHandlers.ontouchmove										
global ontouchmove	R	GlobalEventHandlers.ontouchmove										
ontouchmove	R	GlobalEventHandlers.ontouchmove										
api htmlaudioelement	R	HTMLAudioElement										
math atan2	R	Math.atan2										
atan2	R	Math.atan2										
object defineproperty	R	Object.defineProperty										
defineproperty	R	Object.defineProperty										
global encodeuricomponent	R	Global.encodeURIComponent										
encodeuricomponent	R	Global.encodeURIComponent										
date totimestring	R	Date.prototype.toTimeString										
totimestring	R	Date.prototype.toTimeString										
webglrenderingcontext getactiveattrib	R	WebGLRenderingContext.getActiveAttrib()										
getactiveattrib	R	WebGLRenderingContext.getActiveAttrib()										
api svganimatedlength	R	SVGAnimatedLength										
ext disjoint timer query getqueryobjectext	R	EXT_disjoint_timer_query.getQueryObjectEXT()										
getqueryobjectext	R	EXT_disjoint_timer_query.getQueryObjectEXT()										
api htmlmodelement	R	HTMLModElement										
api htmlcontentelement	R	HTMLContentElement										
api svgtitleelement	R	SVGTitleElement										
delayTime	R	DelayNode.delayTime										
delaynode delaytime	R	DelayNode.delayTime										
delaytime	R	DelayNode.delayTime										
audiocontext createmediastreamdestination	R	AudioContext.createMediaStreamDestination()										
createmediastreamdestination	R	AudioContext.createMediaStreamDestination()										
presentationrequest reconnect	R	reconnect										
operators array comprehensions syntax	R	Array comprehensions										
operators array comprehensions example	R	Array comprehensions										
array comprehensions syntax	R	Array comprehensions										
array comprehensions example	R	Array comprehensions										
operators array comprehensions	R	Array comprehensions										
api svgcircleelement	R	SVGCircleElement										
rtcpeerconnection onpeeridentity	R	RTCPeerConnection.onpeeridentity										
onpeeridentity	R	RTCPeerConnection.onpeeridentity										
WEBKIT FORCE AT FORCE MOUSE DOWN	R	MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN										
mouseevent mouseevent.webkit force at force mouse down	R	MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN										
mozGetAsFile	R	HTMLCanvasElement.mozGetAsFile()										
htmlcanvaselement mozgetasfile	R	HTMLCanvasElement.mozGetAsFile()										
mozgetasfile	R	HTMLCanvasElement.mozGetAsFile()										
api ambient light events	R	Ambient Light Events										
api svgtextpositioningelement	R	SVGTextPositioningElement										
api midiinput	R	MIDIInput										
insertCell	R	HTMLTableRowElement.insertCell()										
htmltablerowelement insertcell	R	HTMLTableRowElement.insertCell()										
insertcell	R	HTMLTableRowElement.insertCell()										
api rtcicecandidate	R	RTCIceCandidate										
api windowtimers	R	WindowTimers										
array of	R	Array.of()										
of	R	Array.of()										
orientationY	R	PannerNode.orientationY										
pannernode orientationy	R	PannerNode.orientationY										
orientationy	R	PannerNode.orientationY										
messagechannel port2	R	MessageChannel.port2										
port2	R	MessageChannel.port2										
isChar	R	UIEvent.isChar										
uievent ischar	R	UIEvent.isChar										
ischar	R	UIEvent.isChar										
messagechannel port1	R	MessageChannel.port1										
port1	R	MessageChannel.port1										
errors bad assignment left-hand side	R	ReferenceError: invalid assignment left-hand side										
errors not legal assignment left-hand side	R	ReferenceError: invalid assignment left-hand side										
errors invalid assignment left-hand side	R	ReferenceError: invalid assignment left-hand side										
errors not a valid assignment left-hand side	R	ReferenceError: invalid assignment left-hand side										
bad assignment left-hand side	R	ReferenceError: invalid assignment left-hand side										
not legal assignment left-hand side	R	ReferenceError: invalid assignment left-hand side										
invalid assignment left-hand side	R	ReferenceError: invalid assignment left-hand side										
not a valid assignment left-hand side	R	ReferenceError: invalid assignment left-hand side										
number min value	R	Number.MIN_VALUE										
min value	R	Number.MIN_VALUE										
idbrequest onsuccess	R	IDBRequest.onsuccess										
onsuccess	R	IDBRequest.onsuccess										
activeWorker	R	InstallEvent.activeWorker										
installevent activeworker	R	InstallEvent.activeWorker										
activeworker	R	InstallEvent.activeWorker										
getElementById	R	document.getElementById()										
document getelementbyid	R	document.getElementById()										
getelementbyid	R	document.getElementById()										
math sqrt1 2	R	Math.SQRT1_2										
sqrt1 2	R	Math.SQRT1_2										
operators operator precedence syntax	R	Operator precedence										
operators operator precedence example	R	Operator precedence										
operator precedence syntax	R	Operator precedence										
operator precedence example	R	Operator precedence										
operators operator precedence	R	Operator precedence										
range detach	R	Range.detach()										
detach	R	Range.detach()										
api presentationconnectionlist	R	PresentationConnectionList										
mediakeysystemaccess keysystem	R	keySystem										
mozSetImageElement	R	Document.mozSetImageElement()										
document mozsetimageelement	R	Document.mozSetImageElement()										
mozsetimageelement	R	Document.mozSetImageElement()										
webgl2renderingcontext compressedteximage3d	R	WebGL2RenderingContext.compressedTexImage3D()										
compressedteximage3d	R	WebGL2RenderingContext.compressedTexImage3D()										
api pluginarray	R	PluginArray										
webgl2renderingcontext pausetransformfeedback	R	WebGL2RenderingContext.pauseTransformFeedback()										
pausetransformfeedback	R	WebGL2RenderingContext.pauseTransformFeedback()										
pan	R	StereoPannerNode.pan										
stereopannernode pan	R	StereoPannerNode.pan										
pan	R	StereoPannerNode.pan										
webglrenderingcontext bindrenderbuffer	R	WebGLRenderingContext.bindRenderbuffer()										
bindrenderbuffer	R	WebGLRenderingContext.bindRenderbuffer()										
speechsynthesisvoice voiceuri	R	SpeechSynthesisVoice.voiceURI										
voiceuri	R	SpeechSynthesisVoice.voiceURI										
api svgtransform	R	SVGTransform										
speechgrammar weight	R	SpeechGrammar.weight										
weight	R	SpeechGrammar.weight										
array reduce	R	Array.prototype.reduce										
reduce	R	Array.prototype.reduce										
paymentaddress paymentaddress.country	R	PaymentAddress.country										
api vrdisplay	R	VRDisplay										
webglrenderingcontext attachshader	R	WebGLRenderingContext.attachShader()										
attachshader	R	WebGLRenderingContext.attachShader()										
bluetoothremotegattserver connect	R	BluetoothRemoteGATTServer.connect()										
connect	R	BluetoothRemoteGATTServer.connect()										
nodeName	R	Node.nodeName										
node nodename	R	Node.nodeName										
nodename	R	Node.nodeName										
api domstring	R	DOMString										
formdata using formdata objects	R	Using FormData Objects										
global float64x2	R	SIMD.Float64x2										
float64x2	R	SIMD.Float64x2										
webgl2renderingcontext compressedtexsubimage3d	R	WebGL2RenderingContext.compressedTexSubImage3D()										
compressedtexsubimage3d	R	WebGL2RenderingContext.compressedTexSubImage3D()										
api imagebitmapfactories	R	ImageBitmapFactories										
onfocus	R	GlobalEventHandlers.onfocus										
global onfocus	R	GlobalEventHandlers.onfocus										
onfocus	R	GlobalEventHandlers.onfocus										
vrdisplaycapabilities hasexternaldisplay	R	VRDisplayCapabilities.hasExternalDisplay										
hasexternaldisplay	R	VRDisplayCapabilities.hasExternalDisplay										
api midioutputmap	R	MIDIOutputMap										
string fromcharcode	R	String.fromCharCode										
fromcharcode	R	String.fromCharCode										
offsetX	R	MouseEvent.offsetX										
mouseevent offsetx	R	MouseEvent.offsetX										
offsetx	R	MouseEvent.offsetX										
offsetY	R	MouseEvent.offsetY										
mouseevent offsety	R	MouseEvent.offsetY										
offsety	R	MouseEvent.offsetY										
tooltipNode	R	Document.tooltipNode										
document tooltipnode	R	Document.tooltipNode										
tooltipnode	R	Document.tooltipNode										
checkValidity	R	HTMLSelectElement.checkValidity()										
htmlselectelement checkvalidity	R	HTMLSelectElement.checkValidity()										
checkvalidity	R	HTMLSelectElement.checkValidity()										
document cookie	R	Document.cookie										
cookie	R	Document.cookie										
global proxy	R	Proxy										
operators arithmetic operators syntax	R	Arithmetic operators										
operators arithmetic operators example	R	Arithmetic operators										
arithmetic operators syntax	R	Arithmetic operators										
arithmetic operators example	R	Arithmetic operators										
operators arithmetic operators	R	Arithmetic operators										
frameElement	R	Window.frameElement										
window frameelement	R	Window.frameElement										
frameelement	R	Window.frameElement										
errors array sort argument	R	TypeError: invalid Array.prototype.sort argument										
array sort argument	R	TypeError: invalid Array.prototype.sort argument										
audiocontext createdynamicscompressor	R	AudioContext.createDynamicsCompressor()										
createdynamicscompressor	R	AudioContext.createDynamicsCompressor()										
canvasrenderingcontext2d rect	R	CanvasRenderingContext2D.rect()										
rect	R	CanvasRenderingContext2D.rect()										
rtcdatachannel onopen	R	RTCDataChannel.onopen										
onopen	R	RTCDataChannel.onopen										
api svgimageelement	R	SVGImageElement										
webglrenderingcontext copytexsubimage2d	R	WebGLRenderingContext.copyTexSubImage2D()										
copytexsubimage2d	R	WebGLRenderingContext.copyTexSubImage2D()										
caption	R	HTMLTableElement.caption										
htmltableelement caption	R	HTMLTableElement.caption										
caption	R	HTMLTableElement.caption										
dompointreadonly w	R	DOMPoint.w										
w	R	DOMPoint.w										
setCursor	R	Window.setCursor()										
window setcursor	R	Window.setCursor()										
setcursor	R	Window.setCursor()										
api cssrulelist	R	CSSRuleList										
tabIndex	R	HTMLElement.tabIndex										
htmlelement tabindex	R	HTMLElement.tabIndex										
tabindex	R	HTMLElement.tabIndex										
api xmlhttprequesteventtarget	R	XMLHttpRequestEventTarget										
cache addall	R	Cache.addAll()										
addall	R	Cache.addAll()										
api oes texture float linear	R	OES_texture_float_linear										
global number	R	Number										
webgl2renderingcontext readbuffer	R	WebGL2RenderingContext.readBuffer()										
readbuffer	R	WebGL2RenderingContext.readBuffer()										
array pop	R	Array.prototype.pop										
pop	R	Array.prototype.pop										
asyncDrawXULElement	R	CanvasRenderingContext2D.asyncDrawXULElement()										
canvasrenderingcontext2d asyncdrawxulelement	R	CanvasRenderingContext2D.asyncDrawXULElement()										
asyncdrawxulelement	R	CanvasRenderingContext2D.asyncDrawXULElement()										
webgl2renderingcontext isquery	R	WebGL2RenderingContext.isQuery()										
isquery	R	WebGL2RenderingContext.isQuery()										
mediastreamtrack getconstraints	R	MediaStreamTrack.getConstraints()										
getconstraints	R	MediaStreamTrack.getConstraints()										
global uint8array	R	Uint8Array										
api mediadeviceinfo	R	MediaDeviceInfo										
api linkstyle	R	LinkStyle										
api positionerror	R	PositionError										
htmloptionelement option	R	Option()										
option	R	Option()										
api presentationrequest	R	PresentationRequest										
api documenttype	R	DocumentType										
onpointermove	R	GlobalEventHandlers.onpointermove										
global onpointermove	R	GlobalEventHandlers.onpointermove										
onpointermove	R	GlobalEventHandlers.onpointermove										
webglrenderingcontext getframebufferattachmentparameter	R	WebGLRenderingContext.getFramebufferAttachmentParameter()										
getframebufferattachmentparameter	R	WebGLRenderingContext.getFramebufferAttachmentParameter()										
api eventtarget	R	EventTarget										
api speechrecognitionresult	R	SpeechRecognitionResult										
api svggelement	R	SVGGElement										
paymentaddress careof	R	PaymentAddress.careOf										
careof	R	PaymentAddress.careOf										
global undefined	R	Global.undefined										
undefined	R	Global.undefined										
devicePixelRatio	R	Window.devicePixelRatio										
window devicepixelratio	R	Window.devicePixelRatio										
devicepixelratio	R	Window.devicePixelRatio										
webglrenderingcontext createshader	R	WebGLRenderingContext.createShader()										
createshader	R	WebGLRenderingContext.createShader()										
hasChildNodes	R	Node.hasChildNodes()										
node haschildnodes	R	Node.hasChildNodes()										
haschildnodes	R	Node.hasChildNodes()										
credentialscontainer store	R	CredentialsContainer.store()										
store	R	CredentialsContainer.store()										
api webgl compressed texture etc1	R	WEBGL_compressed_texture_etc1										
offsetHeight	R	HTMLElement.offsetHeight										
htmlelement offsetheight	R	HTMLElement.offsetHeight										
offsetheight	R	HTMLElement.offsetHeight										
animation onfinish	R	Animation.onfinish										
onfinish	R	Animation.onfinish										
webgl2renderingcontext transformfeedbackvaryings	R	WebGL2RenderingContext.transformFeedbackVaryings()										
transformfeedbackvaryings	R	WebGL2RenderingContext.transformFeedbackVaryings()										
math abs	R	Math.abs										
abs	R	Math.abs										
scrollMaxX	R	Window.scrollMaxX										
window scrollmaxx	R	Window.scrollMaxX										
scrollmaxx	R	Window.scrollMaxX										
createCaption	R	HTMLTableElement.createCaption()										
htmltableelement createcaption	R	HTMLTableElement.createCaption()										
createcaption	R	HTMLTableElement.createCaption()										
object hasownproperty	R	Object.prototype.hasOwnProperty										
hasownproperty	R	Object.prototype.hasOwnProperty										
webgl debug shaders gettranslatedshadersource	R	WEBGL_debug_shaders.getTranslatedShaderSource()										
gettranslatedshadersource	R	WEBGL_debug_shaders.getTranslatedShaderSource()										
api svganimatedpoints	R	SVGAnimatedPoints										
scrollIntoViewIfNeeded	R	Element.scrollIntoViewIfNeeded()										
element scrollintoviewifneeded	R	Element.scrollIntoViewIfNeeded()										
scrollintoviewifneeded	R	Element.scrollIntoViewIfNeeded()										
global null	R	null										
mozInnerScreenY	R	Window.mozInnerScreenY										
window mozinnerscreeny	R	Window.mozInnerScreenY										
mozinnerscreeny	R	Window.mozInnerScreenY										
mozInnerScreenX	R	Window.mozInnerScreenX										
window mozinnerscreenx	R	Window.mozInnerScreenX										
mozinnerscreenx	R	Window.mozInnerScreenX										
onpointerup	R	GlobalEventHandlers.onpointerup										
global onpointerup	R	GlobalEventHandlers.onpointerup										
onpointerup	R	GlobalEventHandlers.onpointerup										
vrfieldofview leftdegrees	R	VRFieldOfView.leftDegrees										
leftdegrees	R	VRFieldOfView.leftDegrees										
api audiobuffersourcenode	R	AudioBufferSourceNode										
websockets api writing websocket servers	R	Writing WebSocket servers										
scrollLeft	R	Element.scrollLeft										
element scrollleft	R	Element.scrollLeft										
scrollleft	R	Element.scrollLeft										
errors missing semicolon before statement	R	SyntaxError: missing ; before statement										
missing semicolon before statement	R	SyntaxError: missing ; before statement										
pushmanager permissionstate	R	PushManager.permissionState()										
permissionstate	R	PushManager.permissionState()										
tutorial lighting in webgl	R	Lighting in WebGL										
getGamepads	R	Navigator.getGamepads()										
navigator getgamepads	R	Navigator.getGamepads()										
getgamepads	R	Navigator.getGamepads()										
screen availheight	R	Screen.availHeight										
availheight	R	Screen.availHeight										
anchorOffset	R	Selection.anchorOffset										
selection anchoroffset	R	Selection.anchorOffset										
anchoroffset	R	Selection.anchorOffset										
appendChild	R	Node.appendChild()										
node appendchild	R	Node.appendChild()										
appendchild	R	Node.appendChild()										
global intl	R	Intl										
api domrectreadonly	R	DOMRectReadOnly										
api htmlpreelement	R	HTMLPreElement										
glyphRef	R	SVGAltGlyphElement.glyphRef										
svgaltglyphelement glyphref	R	SVGAltGlyphElement.glyphRef										
glyphref	R	SVGAltGlyphElement.glyphRef										
webrtc api webrtc basics	R	WebRTC basics										
webgl api matrix math for the web	R	Matrix math for the web										
initCloseEvent	R	CloseEvent.initCloseEvent()										
closeevent initcloseevent	R	CloseEvent.initCloseEvent()										
initcloseevent	R	CloseEvent.initCloseEvent()										
mediarecorder onstop	R	MediaRecorder.onstop										
onstop	R	MediaRecorder.onstop										
math exp	R	Math.exp										
exp	R	Math.exp										
api htmlvideoelement	R	HTMLVideoElement										
createTextNode	R	Document.createTextNode()										
document createtextnode	R	Document.createTextNode()										
createtextnode	R	Document.createTextNode()										
user timing api using the user timing api	R	Using the User Timing API										
api svgstopelement	R	SVGStopElement										
personalbar	R	Window.personalbar										
window personalbar	R	Window.personalbar										
personalbar	R	Window.personalbar										
errors precision range	R	RangeError: precision is out of range										
precision range	R	RangeError: precision is out of range										
string codepointat	R	String.prototype.codePointAt()										
codepointat	R	String.prototype.codePointAt()										
vendorSub	R	Navigator.vendorSub										
navigator vendorsub	R	Navigator.vendorSub										
vendorsub	R	Navigator.vendorSub										
scrollTopMax	R	Element.scrollTopMax										
element scrolltopmax	R	Element.scrollTopMax										
scrolltopmax	R	Element.scrollTopMax										
webglrenderingcontext texparameter	R	WebGLRenderingContext.texParameter[fi]()										
texparameter	R	WebGLRenderingContext.texParameter[fi]()										
document createdocumentfragment	R	Document.createDocumentFragment()										
createdocumentfragment	R	Document.createDocumentFragment()										
api rtcsctptransport	R	RTCSctpTransport										
canvasrenderingcontext2d font	R	CanvasRenderingContext2D.font										
font	R	CanvasRenderingContext2D.font										
errors resulting string too large	R	RangeError: repeat count must be less than infinity										
resulting string too large	R	RangeError: repeat count must be less than infinity										
xmlhttprequest withcredentials	R	XMLHttpRequest.withCredentials										
withcredentials	R	XMLHttpRequest.withCredentials										
iirfilternode getfrequencyresponse()	R	IIRFilterNode.getFrequencyResponse()										
getfrequencyresponse()	R	IIRFilterNode.getFrequencyResponse()										
webgl2renderingcontext createquery	R	WebGL2RenderingContext.createQuery()										
createquery	R	WebGL2RenderingContext.createQuery()										
api svgscriptelement	R	SVGScriptElement										
css object model managing screen orientation	R	Managing screen orientation										
server-sent events using server-sent events	R	Using server-sent events										
api intersection observer api	R	Intersection Observer API										
assertion	R	RTCIdentityEvent.assertion										
rtcidentityevent assertion	R	RTCIdentityEvent.assertion										
assertion	R	RTCIdentityEvent.assertion										
api cssstyledeclaration	R	CSSStyleDeclaration										
deltaX	R	WheelEvent.deltaX										
wheelevent deltax	R	WheelEvent.deltaX										
deltax	R	WheelEvent.deltaX										
speechrecognition serviceuri	R	SpeechRecognition.serviceURI										
serviceuri	R	SpeechRecognition.serviceURI										
subtlecrypto wrapkey	R	SubtleCrypto.wrapKey()										
wrapkey	R	SubtleCrypto.wrapKey()										
errors cant delete	R	TypeError: property "x" is non-configurable and can't be deleted										
cant delete	R	TypeError: property "x" is non-configurable and can't be deleted										
global onnotificationclose	R	onnotificationclose										
api bluetoothstatuschangedevent	R	BluetoothStatusChangedEvent										
createTHead	R	HTMLTableElement.createTHead()										
htmltableelement createthead	R	HTMLTableElement.createTHead()										
createthead	R	HTMLTableElement.createTHead()										
isDefaultNamespace	R	Node.isDefaultNamespace()										
node isdefaultnamespace	R	Node.isDefaultNamespace()										
isdefaultnamespace	R	Node.isDefaultNamespace()										
api cssgroupingrule	R	CSSGroupingRule										
canvasrenderingcontext2d setlinedash	R	CanvasRenderingContext2D.setLineDash()										
setlinedash	R	CanvasRenderingContext2D.setLineDash()										
websockets api writing websocket server	R	Writing a WebSocket server in C#										
writing websocket server	R	Writing a WebSocket server in C#										
notification permission	R	Notification.permission										
permission	R	Notification.permission										
webgl2renderingcontext isvertexarray	R	WebGL2RenderingContext.isVertexArray()										
isvertexarray	R	WebGL2RenderingContext.isVertexArray()										
global importscripts	R	WorkerGlobalScope.importScripts()										
importscripts	R	WorkerGlobalScope.importScripts()										
indexeddb api browser storage limits and eviction criteria	R	Browser storage limits and eviction criteria										
date setdate	R	Date.prototype.setDate										
setdate	R	Date.prototype.setDate										
statusMessage	R	WebGLContextEvent.statusMessage										
webglcontextevent statusmessage	R	WebGLContextEvent.statusMessage										
statusmessage	R	WebGLContextEvent.statusMessage										
datatransfer setdata	R	DataTransfer.setData()										
setdata	R	DataTransfer.setData()										
webglrenderingcontext isenabled	R	WebGLRenderingContext.isEnabled()										
isenabled	R	WebGLRenderingContext.isEnabled()										
api canvasrenderingcontext2d	R	CanvasRenderingContext2D										
webglrenderingcontext getrenderbufferparameter	R	WebGLRenderingContext.getRenderbufferParameter()										
getrenderbufferparameter	R	WebGLRenderingContext.getRenderbufferParameter()										
api svgmpathelement	R	SVGMPathElement										
webglrenderingcontext getprograminfolog	R	WebGLRenderingContext.getProgramInfoLog()										
getprograminfolog	R	WebGLRenderingContext.getProgramInfoLog()										
document onfullscreenerror	R	Document.onfullscreenerror										
onfullscreenerror	R	Document.onfullscreenerror										
idbindex locale	R	IDBIndex.locale										
locale	R	IDBIndex.locale										
childElementCount	R	ParentNode.childElementCount										
parentnode childelementcount	R	ParentNode.childElementCount										
childelementcount	R	ParentNode.childElementCount										
global float32x4	R	SIMD.Float32x4										
float32x4	R	SIMD.Float32x4										
canvasrenderingcontext2d arc	R	CanvasRenderingContext2D.arc()										
arc	R	CanvasRenderingContext2D.arc()										
addNextPaintListener	R	HTMLIFrameElement.addNextPaintListener()										
htmliframeelement addnextpaintlistener	R	HTMLIFrameElement.addNextPaintListener()										
addnextpaintlistener	R	HTMLIFrameElement.addNextPaintListener()										
api permissionstatus	R	PermissionStatus										
object   definegetter  	R	Object.prototype.__defineGetter__()										
  definegetter  	R	Object.prototype.__defineGetter__()										
api inputdevicecapabilities api	R	InputDeviceCapabilities API										
range comparepoint	R	Range.comparePoint										
comparepoint	R	Range.comparePoint										
json stringify	R	JSON.stringify										
stringify	R	JSON.stringify										
sessionStorage	R	Window.sessionStorage										
window sessionstorage	R	Window.sessionStorage										
sessionstorage	R	Window.sessionStorage										
number negative infinity	R	Number.NEGATIVE_INFINITY										
negative infinity	R	Number.NEGATIVE_INFINITY										
web workers api using web workers	R	Using Web Workers										
filereader readasdataurl	R	FileReader.readAsDataURL()										
readasdataurl	R	FileReader.readAsDataURL()										
api htmloutputelement	R	HTMLOutputElement										
imagebitmaprenderingcontext transferimagebitmap	R	ImageBitmapRenderingContext.transferImageBitmap()										
transferimagebitmap	R	ImageBitmapRenderingContext.transferImageBitmap()										
permissions api using the permissions api	R	Using the Permissions API										
api animationeffecttiming	R	AnimationEffectTiming										
webglrenderingcontext activetexture	R	WebGLRenderingContext.activeTexture()										
activetexture	R	WebGLRenderingContext.activeTexture()										
captureEvents	R	Window.captureEvents()										
window captureevents	R	Window.captureEvents()										
captureevents	R	Window.captureEvents()										
api sourcebufferlist	R	SourceBufferList										
api bluetoothgattdescriptor	R	BluetoothGATTDescriptor										
canvasrenderingcontext2d strokerect	R	CanvasRenderingContext2D.strokeRect()										
strokerect	R	CanvasRenderingContext2D.strokeRect()										
api service worker api	R	Service Worker API										
document laststylesheetset	R	Document.lastStyleSheetSet										
laststylesheetset	R	Document.lastStyleSheetSet										
api svganimatedpreserveaspectratio	R	SVGAnimatedPreserveAspectRatio										
api htmltablerowelement	R	HTMLTableRowElement										
api presentationconnectionclosedevent	R	PresentationConnectionClosedEvent										
tutorial applying styles and colors	R	Applying styles and colors										
api mediakeystatusmap	R	MediaKeyStatusMap										
operators destructuring assignment syntax	R	Destructuring assignment										
operators destructuring assignment example	R	Destructuring assignment										
destructuring assignment syntax	R	Destructuring assignment										
destructuring assignment example	R	Destructuring assignment										
operators destructuring assignment	R	Destructuring assignment										
audiocontext creategain	R	AudioContext.createGain()										
creategain	R	AudioContext.createGain()										
focused	R	WindowClient.focused										
windowclient focused	R	WindowClient.focused										
focused	R	WindowClient.focused										
webglrenderingcontext blendfuncseparate	R	WebGLRenderingContext.blendFuncSeparate()										
blendfuncseparate	R	WebGLRenderingContext.blendFuncSeparate()										
vrdisplay getpose	R	VRDisplay.getPose()										
getpose	R	VRDisplay.getPose()										
passwordcredential additionaldata	R	PasswordCredential.additionalData										
additionaldata	R	PasswordCredential.additionalData										
ext disjoint timer query beginqueryext	R	EXT_disjoint_timer_query.beginQueryEXT()										
beginqueryext	R	EXT_disjoint_timer_query.beginQueryEXT()										
speechrecognition onspeechstart	R	SpeechRecognition.onspeechstart										
onspeechstart	R	SpeechRecognition.onspeechstart										
api svgstylable	R	SVGStylable										
webglrenderingcontext createrenderbuffer	R	WebGLRenderingContext.createRenderbuffer()										
createrenderbuffer	R	WebGLRenderingContext.createRenderbuffer()										
canvasrenderingcontext2d stroketext	R	CanvasRenderingContext2D.strokeText()										
stroketext	R	CanvasRenderingContext2D.strokeText()										
messageManager	R	Window.messageManager										
window messagemanager	R	Window.messageManager										
messagemanager	R	Window.messageManager										
speechsynthesisvoice localservice	R	SpeechSynthesisVoice.localService										
localservice	R	SpeechSynthesisVoice.localService										
errors for-each-in loops are deprecated	R	Warning: JavaScript 1.6's for-each-in loops are deprecated										
for-each-in loops are deprecated	R	Warning: JavaScript 1.6's for-each-in loops are deprecated										
api performancemeasure	R	PerformanceMeasure										
removeAttributeNode	R	Element.removeAttributeNode()										
element removeattributenode	R	Element.removeAttributeNode()										
removeattributenode	R	Element.removeAttributeNode()										
tutorial transformations	R	Transformations										
idbindex isautolocale	R	IDBIndex.isAutoLocale										
isautolocale	R	IDBIndex.isAutoLocale										
object create	R	Object.create										
create	R	Object.create										
beacon api using the beacon api	R	Using the Beacon API										
reduction	R	DynamicsCompressorNode.reduction										
dynamicscompressornode reduction	R	DynamicsCompressorNode.reduction										
reduction	R	DynamicsCompressorNode.reduction										
insertAdjacentHTML	R	Element.insertAdjacentHTML()										
element insertadjacenthtml	R	Element.insertAdjacentHTML()										
insertadjacenthtml	R	Element.insertAdjacentHTML()										
audioparam settargetattime	R	AudioParam.setTargetAtTime()										
settargetattime	R	AudioParam.setTargetAtTime()										
math pi	R	Math.PI										
pi	R	Math.PI										
api storageevent	R	StorageEvent										
idbdatabase onversionchange	R	IDBDatabase.onversionchange										
onversionchange	R	IDBDatabase.onversionchange										
webglrenderingcontext drawingbufferheight	R	WebGLRenderingContext.drawingBufferHeight										
drawingbufferheight	R	WebGLRenderingContext.drawingBufferHeight										
api webgltimerqueryext	R	WebGLTimerQueryEXT										
api svganimatednumber	R	SVGAnimatedNumber										
api randomsource	R	RandomSource										
appVersion	R	NavigatorID.appVersion										
navigatorid appversion	R	NavigatorID.appVersion										
appversion	R	NavigatorID.appVersion										
api htmlprogresselement	R	HTMLProgressElement										
string fromcodepoint	R	String.fromCodePoint()										
fromcodepoint	R	String.fromCodePoint()										
getByteTimeDomainData	R	AnalyserNode.getByteTimeDomainData()										
analysernode getbytetimedomaindata	R	AnalyserNode.getByteTimeDomainData()										
getbytetimedomaindata	R	AnalyserNode.getByteTimeDomainData()										
idbopendbrequest onupgradeneeded	R	IDBOpenDBRequest.onupgradeneeded										
onupgradeneeded	R	IDBOpenDBRequest.onupgradeneeded										
statements while syntax	R	while										
statements while example	R	while										
while syntax	R	while										
while example	R	while										
statements while	R	while										
gamepadbutton pressed	R	GamepadButton.pressed										
pressed	R	GamepadButton.pressed										
api idbkeyrange	R	IDBKeyRange										
webglrenderingcontext compressedtexsubimage2d	R	WebGLRenderingContext.compressedTexSubImage2D()										
compressedtexsubimage2d	R	WebGLRenderingContext.compressedTexSubImage2D()										
api idbdatabase	R	IDBDatabase										
api fetchevent clone	R	InstallEvent										
fetchevent clone	R	InstallEvent										
api document object model	R	Document Object Model (DOM)										
document object model	R	Document Object Model (DOM)										
oes vertex array object bindvertexarrayoes	R	OES_vertex_array_object.bindVertexArrayOES()										
bindvertexarrayoes	R	OES_vertex_array_object.bindVertexArrayOES()										
errors undeclared var	R	ReferenceError: assignment to undeclared variable "x"										
undeclared var	R	ReferenceError: assignment to undeclared variable "x"										
setAttribute	R	Element.setAttribute()										
element setattribute	R	Element.setAttribute()										
setattribute	R	Element.setAttribute()										
initTransitionEvent	R	TransitionEvent.initTransitionEvent()										
transitionevent inittransitionevent	R	TransitionEvent.initTransitionEvent()										
inittransitionevent	R	TransitionEvent.initTransitionEvent()										
clientId	R	FetchEvent.clientId										
fetchevent clientid	R	FetchEvent.clientId										
clientid	R	FetchEvent.clientId										
api idbindexsync	R	IDBIndexSync										
webglrenderingcontext istexture	R	WebGLRenderingContext.isTexture()										
istexture	R	WebGLRenderingContext.isTexture()										
webglrenderingcontext getbufferparameter	R	WebGLRenderingContext.getBufferParameter()										
getbufferparameter	R	WebGLRenderingContext.getBufferParameter()										
oninvalid	R	GlobalEventHandlers.oninvalid										
global globaleventhandlers.oninvalid	R	GlobalEventHandlers.oninvalid										
api gamepadbutton	R	GamepadButton										
api midiconnectionevent	R	MIDIConnectionEvent										
web audio api web audio spatialization basics	R	Web audio spatialization basics										
api mediaelementaudiosourcenode	R	MediaElementAudioSourceNode										
operators conditional operator syntax	R	Conditional (ternary) Operator										
operators conditional operator example	R	Conditional (ternary) Operator										
conditional operator	R	Conditional (ternary) Operator										
conditional operator syntax	R	Conditional (ternary) Operator										
conditional operator example	R	Conditional (ternary) Operator										
operators conditional operator	R	Conditional (ternary) Operator										
conditional operator	R	Conditional (ternary) Operator										
fireEvent	R	EventTarget.fireEvent()										
eventtarget fireevent	R	EventTarget.fireEvent()										
fireevent	R	EventTarget.fireEvent()										
audiocontext createbiquadfilter	R	AudioContext.createBiquadFilter()										
createbiquadfilter	R	AudioContext.createBiquadFilter()										
document stylesheetsets	R	Document.styleSheetSets										
stylesheetsets	R	Document.styleSheetSets										
rtcpeerconnection setconfiguration	R	RTCPeerConnection.setConfiguration()										
setconfiguration	R	RTCPeerConnection.setConfiguration()										
api performanceresourcetiming	R	PerformanceResourceTiming										
webglrenderingcontext getparameter	R	WebGLRenderingContext.getParameter()										
getparameter	R	WebGLRenderingContext.getParameter()										
alert	R	Window.alert()										
window alert	R	Window.alert()										
alert	R	Window.alert()										
document createattribute	R	Document.createAttribute()										
createattribute	R	Document.createAttribute()										
webglrenderingcontext deleteshader	R	WebGLRenderingContext.deleteShader()										
deleteshader	R	WebGLRenderingContext.deleteShader()										
error stack	R	Error.prototype.stack										
stack	R	Error.prototype.stack										
isEqualNode	R	Node.isEqualNode()										
node isequalnode	R	Node.isEqualNode()										
isequalnode	R	Node.isEqualNode()										
functions default parameters syntax	R	Default parameters										
functions default parameters example	R	Default parameters										
default parameters syntax	R	Default parameters										
default parameters example	R	Default parameters										
functions default parameters	R	Default parameters										
idbkeyrange lower	R	IDBKeyRange.lower										
lower	R	IDBKeyRange.lower										
document object model locating dom elements using selectors	R	Locating DOM elements using selectors										
document hasfocus	R	Document.hasFocus()										
hasfocus	R	Document.hasFocus()										
array copywithin	R	Array.prototype.copyWithin()										
copywithin	R	Array.prototype.copyWithin()										
mediasource addsourcebuffer	R	MediaSource.addSourceBuffer()										
addsourcebuffer	R	MediaSource.addSourceBuffer()										
rotationRate	R	DeviceMotionEvent.rotationRate										
devicemotionevent rotationrate	R	DeviceMotionEvent.rotationRate										
rotationrate	R	DeviceMotionEvent.rotationRate										
regexp flags	R	RegExp.prototype.flags										
flags	R	RegExp.prototype.flags										
global uint16array	R	Uint16Array										
canvasrenderingcontext2d createimagedata	R	CanvasRenderingContext2D.createImageData()										
createimagedata	R	CanvasRenderingContext2D.createImageData()										
css object model using dynamic styling information	R	Using dynamic styling information										
syncmanager gettags	R	SyncManager.getTags()										
gettags	R	SyncManager.getTags()										
getManifest	R	HTMLIFrameElement.getManifest()										
htmliframeelement getmanifest	R	HTMLIFrameElement.getManifest()										
getmanifest	R	HTMLIFrameElement.getManifest()										
xsltprocessor generating html	R	Generating HTML										
idbtransaction db	R	IDBTransaction.db										
db	R	IDBTransaction.db										
api cssprimitivevalue	R	CSSPrimitiveValue										
api ext texture filter anisotropic	R	EXT_texture_filter_anisotropic										
sidebar	R	Window.sidebar										
window sidebar	R	Window.sidebar										
sidebar	R	Window.sidebar										
document createprocessinginstruction	R	Document.createProcessingInstruction()										
createprocessinginstruction	R	Document.createProcessingInstruction()										
connect	R	AudioNode.connect(AudioParam)										
audionode connect(audioparam)	R	AudioNode.connect(AudioParam)										
connect(audioparam)	R	AudioNode.connect(AudioParam)										
api validitystate	R	ValidityState										
api htmlhyperlinkelementutils	R	HTMLHyperlinkElementUtils										
performance onresourcetimingbufferfull	R	Performance.onresourcetimingbufferfull										
onresourcetimingbufferfull	R	Performance.onresourcetimingbufferfull										
api htmldocument	R	HTMLDocument										
operators yield* syntax	R	yield*										
operators yield* example	R	yield*										
yield* syntax	R	yield*										
yield* example	R	yield*										
operators yield*	R	yield*										
ext disjoint timer query createqueryext	R	EXT_disjoint_timer_query.createQueryEXT()										
createqueryext	R	EXT_disjoint_timer_query.createQueryEXT()										
pointerLockElement	R	Document.pointerLockElement										
document pointerlockelement	R	Document.pointerLockElement										
pointerlockelement	R	Document.pointerLockElement										
api webgl debug shaders	R	WEBGL_debug_shaders										
regexp input	R	RegExp.input ($_)										
input	R	RegExp.input ($_)										
idbdatabase deleteobjectstore	R	IDBDatabase.deleteObjectStore()										
deleteobjectstore	R	IDBDatabase.deleteObjectStore()										
api deviceacceleration	R	DeviceAcceleration										
api csspagerule	R	CSSPageRule										
api installtrigger	R	InstallTrigger										
vendor	R	Navigator.vendor										
navigator vendor	R	Navigator.vendor										
vendor	R	Navigator.vendor										
svgaltglyphelement format	R	format										
touch radiusy	R	Touch.radiusY										
radiusy	R	Touch.radiusY										
document evaluate	R	Document.evaluate()										
evaluate	R	Document.evaluate()										
api webglshaderprecisionformat	R	WebGLShaderPrecisionFormat										
indexeddb api using indexeddb in chrome	R	Using IndexedDB in chrome										
api cssmatrix	R	CSSMatrix										
indexeddb api using indexeddb	R	Using IndexedDB										
api websocket api	R	WebSocket API										
webgl2renderingcontext gettransformfeedbackvarying	R	WebGL2RenderingContext.getTransformFeedbackVarying()										
gettransformfeedbackvarying	R	WebGL2RenderingContext.getTransformFeedbackVarying()										
rtcpeerconnection getremotestreams	R	RTCPeerConnection.getRemoteStreams()										
getremotestreams	R	RTCPeerConnection.getRemoteStreams()										
canvasrenderingcontext2d rotate	R	CanvasRenderingContext2D.rotate()										
rotate	R	CanvasRenderingContext2D.rotate()										
mozSourceNode	R	DataTransfer.mozSourceNode										
datatransfer mozsourcenode	R	DataTransfer.mozSourceNode										
mozsourcenode	R	DataTransfer.mozSourceNode										
webgl draw buffers drawbufferswebgl	R	WEBGL_draw_buffers.drawBuffersWEBGL()										
drawbufferswebgl	R	WEBGL_draw_buffers.drawBuffersWEBGL()										
webgl2renderingcontext getsyncparameter	R	WebGL2RenderingContext.getSyncParameter()										
getsyncparameter	R	WebGL2RenderingContext.getSyncParameter()										
api webgltransformfeedback	R	WebGLTransformFeedback										
resizeBy	R	Window.resizeBy()										
window resizeby	R	Window.resizeBy()										
resizeby	R	Window.resizeBy()										
statements try catch syntax	R	try...catch										
statements try catch example	R	try...catch										
try catch	R	try...catch										
try catch syntax	R	try...catch										
try catch example	R	try...catch										
statements try catch	R	try...catch										
operators property accessors syntax	R	Property accessors										
operators property accessors example	R	Property accessors										
property accessors syntax	R	Property accessors										
property accessors example	R	Property accessors										
operators property accessors	R	Property accessors										
xmlhttprequest onreadystatechange	R	XMLHttpRequest.onreadystatechange										
onreadystatechange	R	XMLHttpRequest.onreadystatechange										
getDefaultComputedStyle	R	Window.getDefaultComputedStyle()										
window getdefaultcomputedstyle	R	Window.getDefaultComputedStyle()										
getdefaultcomputedstyle	R	Window.getDefaultComputedStyle()										
canvas api manipulating video using canvas	R	Manipulating video using canvas										
paymentaddress dependentlocality	R	PaymentAddress.dependentLocality										
dependentlocality	R	PaymentAddress.dependentLocality										
array some	R	Array.prototype.some										
some	R	Array.prototype.some										
fetch api using fetch	R	Using Fetch										
svganimatedstring baseval	R	SVGAnimatedString.baseVal										
baseval	R	SVGAnimatedString.baseVal										
document object model examples	R	Examples of web and XML development using the DOM										
examples	R	Examples of web and XML development using the DOM										
dispatchEvent	R	EventTarget.dispatchEvent()										
eventtarget dispatchevent	R	EventTarget.dispatchEvent()										
dispatchevent	R	EventTarget.dispatchEvent()										
pageXOffset	R	Window.pageXOffset										
window pagexoffset	R	Window.pageXOffset										
pagexoffset	R	Window.pageXOffset										
tutorial optimizing canvas	R	Optimizing canvas										
selectAllChildren	R	Selection.selectAllChildren()										
selection selectallchildren	R	Selection.selectAllChildren()										
selectallchildren	R	Selection.selectAllChildren()										
onwheel	R	Element.onwheel										
element onwheel	R	Element.onwheel										
onwheel	R	Element.onwheel										
canvasgradient addcolorstop	R	CanvasGradient.addColorStop()										
addcolorstop	R	CanvasGradient.addColorStop()										
canvasrenderingcontext2d scale	R	CanvasRenderingContext2D.scale()										
scale	R	CanvasRenderingContext2D.scale()										
idbfactory deletedatabase	R	IDBFactory.deleteDatabase()										
deletedatabase	R	IDBFactory.deleteDatabase()										
date getutcmilliseconds	R	Date.prototype.getUTCMilliseconds										
getutcmilliseconds	R	Date.prototype.getUTCMilliseconds										
onpointerleave	R	GlobalEventHandlers.onpointerleave										
global onpointerleave	R	GlobalEventHandlers.onpointerleave										
onpointerleave	R	GlobalEventHandlers.onpointerleave										
regexp exec	R	RegExp.prototype.exec										
exec	R	RegExp.prototype.exec										
cssprimitivevalue setfloatvalue	R	CSSPrimitiveValue.setFloatValue()										
setfloatvalue	R	CSSPrimitiveValue.setFloatValue()										
api svgaelement	R	SVGAElement										
performanceresourcetiming initiatortype	R	PerformanceResourceTiming.initiatorType										
initiatortype	R	PerformanceResourceTiming.initiatorType										
api gamepad api	R	Gamepad API										
webglrenderingcontext frontface	R	WebGLRenderingContext.frontFace()										
frontface	R	WebGLRenderingContext.frontFace()										
webgl2renderingcontext drawbuffers	R	WebGL2RenderingContext.drawBuffers()										
drawbuffers	R	WebGL2RenderingContext.drawBuffers()										
document domconfig	R	Document.domConfig										
domconfig	R	Document.domConfig										
getMuted	R	HTMLIFrameElement.getMuted()										
htmliframeelement getmuted	R	HTMLIFrameElement.getMuted()										
getmuted	R	HTMLIFrameElement.getMuted()										
canvasrenderingcontext2d beziercurveto	R	CanvasRenderingContext2D.bezierCurveTo()										
beziercurveto	R	CanvasRenderingContext2D.bezierCurveTo()										
removeRange	R	Selection.removeRange()										
selection removerange	R	Selection.removeRange()										
removerange	R	Selection.removeRange()										
api idbdatabaseexception	R	IDBDatabaseException										
api htmldataelement	R	HTMLDataElement										
api webgl compressed texture atc	R	WEBGL_compressed_texture_atc										
xmlhttprequest using xmlhttprequest	R	Using XMLHttpRequest										
keyCode	R	KeyboardEvent.keyCode										
keyboardevent keycode	R	KeyboardEvent.keyCode										
keycode	R	KeyboardEvent.keyCode										
api performancemark	R	PerformanceMark										
api svguseelement	R	SVGUseElement										
document releasecapture	R	Document.releaseCapture()										
releasecapture	R	Document.releaseCapture()										
idp	R	RTCIdentityErrorEvent.idp										
rtcidentityerrorevent idp	R	RTCIdentityErrorEvent.idp										
idp	R	RTCIdentityErrorEvent.idp										
filesystemdirectoryreader readentries	R	FileSystemDirectoryReader.readEntries()										
readentries	R	FileSystemDirectoryReader.readEntries()										
document querycommandenabled	R	Document.queryCommandEnabled()										
querycommandenabled	R	Document.queryCommandEnabled()										
api credentialscontainer	R	CredentialsContainer										
offlineaudiocontext startrendering	R	OfflineAudioContext.startRendering()										
startrendering	R	OfflineAudioContext.startRendering()										
getAttributeNS	R	Element.getAttributeNS()										
element getattributens	R	Element.getAttributeNS()										
getattributens	R	Element.getAttributeNS()										
api l10n.readystate	R	L10n.readyState										
lastElementChild	R	ParentNode.lastElementChild										
parentnode lastelementchild	R	ParentNode.lastElementChild										
lastelementchild	R	ParentNode.lastElementChild										
setAttributeNodeNS	R	Element.setAttributeNodeNS()										
element setattributenodens	R	Element.setAttributeNodeNS()										
setattributenodens	R	Element.setAttributeNodeNS()										
api idbopendbrequest	R	IDBOpenDBRequest										
document execcommand	R	Document.execCommand()										
execcommand	R	Document.execCommand()										
cancelable	R	Event.cancelable										
event cancelable	R	Event.cancelable										
cancelable	R	Event.cancelable										
webgl2renderingcontext getsamplerparameter	R	WebGL2RenderingContext.getSamplerParameter()										
getsamplerparameter	R	WebGL2RenderingContext.getSamplerParameter()										
frames	R	Window.frames										
window frames	R	Window.frames										
frames	R	Window.frames										
webrtc api simple rtcdatachannel sample	R	A simple RTCDataChannel sample										
simple rtcdatachannel sample	R	A simple RTCDataChannel sample										
importNode	R	Document.importNode()										
document importnode	R	Document.importNode()										
importnode	R	Document.importNode()										
paymentaddress languagecode	R	PaymentAddress.languageCode										
languagecode	R	PaymentAddress.languageCode										
rows	R	HTMLTableElement.rows										
htmltableelement rows	R	HTMLTableElement.rows										
rows	R	HTMLTableElement.rows										
api periodicsyncmanager	R	PeriodicSyncManager										
submit	R	HTMLFormElement.submit()										
htmlformelement submit	R	HTMLFormElement.submit()										
submit	R	HTMLFormElement.submit()										
api rtcidentityerrorevent	R	RTCIdentityErrorEvent										
addEventListener	R	EventTarget.addEventListener()										
eventtarget addeventlistener	R	EventTarget.addEventListener()										
addeventlistener	R	EventTarget.addEventListener()										
getContentDimensions	R	HTMLIFrameElement.getContentDimensions()										
htmliframeelement getcontentdimensions	R	HTMLIFrameElement.getContentDimensions()										
getcontentdimensions	R	HTMLIFrameElement.getContentDimensions()										
canvasrenderingcontext2d translate	R	CanvasRenderingContext2D.translate()										
translate	R	CanvasRenderingContext2D.translate()										
canvasrenderingcontext2d ispointinstroke	R	CanvasRenderingContext2D.isPointInStroke()										
ispointinstroke	R	CanvasRenderingContext2D.isPointInStroke()										
date setmilliseconds	R	Date.prototype.setMilliseconds										
setmilliseconds	R	Date.prototype.setMilliseconds										
datatransfer files	R	DataTransfer.files										
files	R	DataTransfer.files										
getCanGoForward	R	HTMLIFrameElement.getCanGoForward()										
htmliframeelement getcangoforward	R	HTMLIFrameElement.getCanGoForward()										
getcangoforward	R	HTMLIFrameElement.getCanGoForward()										
isSameNode	R	Node.isSameNode()										
node issamenode	R	Node.isSameNode()										
issamenode	R	Node.isSameNode()										
range collapsed	R	Range.collapsed										
collapsed	R	Range.collapsed										
registerContentHandler	R	Navigator.registerContentHandler()										
navigator registercontenthandler	R	Navigator.registerContentHandler()										
registercontenthandler	R	Navigator.registerContentHandler()										
api htmlulistelement	R	HTMLUListElement										
api svganimatedenumeration	R	SVGAnimatedEnumeration										
hasAttributes	R	Element.hasAttributes()										
element hasattributes	R	Element.hasAttributes()										
hasattributes	R	Element.hasAttributes()										
imagebitmapfactories createimagebitmap	R	ImageBitmapFactories.createImageBitmap()										
createimagebitmap	R	ImageBitmapFactories.createImageBitmap()										
atob	R	WindowBase64.atob()										
windowbase64 atob	R	WindowBase64.atob()										
atob	R	WindowBase64.atob()										
webglrenderingcontext linkprogram	R	WebGLRenderingContext.linkProgram()										
linkprogram	R	WebGLRenderingContext.linkProgram()										
offsetWidth	R	HTMLElement.offsetWidth										
htmlelement offsetwidth	R	HTMLElement.offsetWidth										
offsetwidth	R	HTMLElement.offsetWidth										
svgaelement svgalement.target	R	SVGAElement.target										
svgalement.target	R	SVGAElement.target										
range startcontainer	R	Range.startContainer										
startcontainer	R	Range.startContainer										
oncontextmenu	R	GlobalEventHandlers.oncontextmenu										
global oncontextmenu	R	GlobalEventHandlers.oncontextmenu										
oncontextmenu	R	GlobalEventHandlers.oncontextmenu										
date utc	R	Date.UTC										
utc	R	Date.UTC										
api filerequest	R	FileRequest										
rtcpeerconnection setlocaldescription	R	RTCPeerConnection.setLocalDescription()										
setlocaldescription	R	RTCPeerConnection.setLocalDescription()										
unmute	R	HTMLIFrameElement.unmute()										
htmliframeelement unmute	R	HTMLIFrameElement.unmute()										
unmute	R	HTMLIFrameElement.unmute()										
bluetoothgattdescriptor characteristic	R	characteristic										
replaceWith	R	ChildNode.replaceWith()										
childnode replacewith	R	ChildNode.replaceWith()										
replacewith	R	ChildNode.replaceWith()										
api htmlparamelement	R	HTMLParamElement										
outerHeight	R	Window.outerHeight										
window outerheight	R	Window.outerHeight										
outerheight	R	Window.outerHeight										
canvasrenderingcontext2d createlineargradient	R	CanvasRenderingContext2D.createLinearGradient()										
createlineargradient	R	CanvasRenderingContext2D.createLinearGradient()										
api paymentresponse	R	PaymentResponse										
rtcpeerconnection cantrickleicecandidates	R	RTCPeerConnection.canTrickleIceCandidates										
cantrickleicecandidates	R	RTCPeerConnection.canTrickleIceCandidates										
arguments callee	R	arguments.callee										
callee	R	arguments.callee										
errors missing bracket after list	R	SyntaxError: missing ] after element list										
missing bracket after list	R	SyntaxError: missing ] after element list										
api cdatasection	R	CDATASection										
global uint8clampedarray	R	Uint8ClampedArray										
document images	R	Document.images										
images	R	Document.images										
ownerNode	R	StyleSheet.ownerNode										
stylesheet ownernode	R	StyleSheet.ownerNode										
ownernode	R	StyleSheet.ownerNode										
bluetoothremotegattcharacteristic stopnotifications	R	BluetoothRemoteGATTCharacteristic.stopNotifications()										
stopnotifications	R	BluetoothRemoteGATTCharacteristic.stopNotifications()										
webglrenderingcontext polygonoffset	R	WebGLRenderingContext.polygonOffset()										
polygonoffset	R	WebGLRenderingContext.polygonOffset()										
date tolocaleformat	R	Date.prototype.toLocaleFormat()										
tolocaleformat	R	Date.prototype.toLocaleFormat()										
xsltprocessor basic example	R	XSLT Basic Example										
basic example	R	XSLT Basic Example										
api media streams api	R	Media Capture and Streams API (Media Streams)										
media streams api	R	Media Capture and Streams API (Media Streams)										
api htmllielement	R	HTMLLIElement										
tutorial advanced animations	R	Advanced animations										
sourcebuffer timestampoffset	R	SourceBuffer.timestampOffset										
timestampoffset	R	SourceBuffer.timestampOffset										
api l10n.language.code	R	L10n.language.code										
api localfilesystem	R	LocalFileSystem										
performanceentry entrytype	R	PerformanceEntry.entryType										
entrytype	R	PerformanceEntry.entryType										
api navigation timing api	R	Navigation Timing API										
elements	R	HTMLFormElement.elements										
htmlformelement elements	R	HTMLFormElement.elements										
elements	R	HTMLFormElement.elements										
api presentation api	R	Presentation API										
clientLeft	R	Element.clientLeft										
element clientleft	R	Element.clientLeft										
clientleft	R	Element.clientLeft										
connect	R	AudioNode.connect(AudioNode)										
audionode connect(audionode)	R	AudioNode.connect(AudioNode)										
connect(audionode)	R	AudioNode.connect(AudioNode)										
requestWakeLock	R	Navigator.requestWakeLock()										
navigator requestwakelock	R	Navigator.requestWakeLock()										
requestwakelock	R	Navigator.requestWakeLock()										
findNext	R	HTMLIFrameElement.findNext()										
htmliframeelement findnext	R	HTMLIFrameElement.findNext()										
findnext	R	HTMLIFrameElement.findNext()										
tutorial using shaders to apply color in webgl	R	Using shaders to apply color in WebGL										
identitymanager getverifiedemail	R	IdentityManager.getVerifiedEmail()										
getverifiedemail	R	IdentityManager.getVerifiedEmail()										
global globaleventhandlers.onpause	R	GlobalEventHandlers.onpause										
canvas api drawing dom objects into a canvas	R	Drawing DOM objects into a canvas										
collapseToStart	R	Selection.collapseToStart()										
selection collapsetostart	R	Selection.collapseToStart()										
collapsetostart	R	Selection.collapseToStart()										
global eval	R	Global.eval										
eval	R	Global.eval										
math e	R	Math.E										
e	R	Math.E										
api htmloptgroupelement	R	HTMLOptGroupElement										
getAttributeNode	R	Element.getAttributeNode()										
element getattributenode	R	Element.getAttributeNode()										
getattributenode	R	Element.getAttributeNode()										
randomsource getrandomvalues	R	RandomSource.getRandomValues()										
getrandomvalues	R	RandomSource.getRandomValues()										
path2d addpath	R	Path2D.addPath()										
addpath	R	Path2D.addPath()										
api devicerotationrate	R	DeviceRotationRate										
number positive infinity	R	Number.POSITIVE_INFINITY										
positive infinity	R	Number.POSITIVE_INFINITY										
api deviceorientationevent	R	DeviceOrientationEvent										
scroll	R	Window.scroll()										
window scroll	R	Window.scroll()										
scroll	R	Window.scroll()										
api mediakeysession	R	MediaKeySession										
statements do while syntax	R	do...while										
statements do while example	R	do...while										
do while	R	do...while										
do while syntax	R	do...while										
do while example	R	do...while										
statements do while	R	do...while										
onreset	R	GlobalEventHandlers.onreset										
global onreset	R	GlobalEventHandlers.onreset										
onreset	R	GlobalEventHandlers.onreset										
results	R	SpeechRecognitionEvent.results										
speechrecognitionevent results	R	SpeechRecognitionEvent.results										
results	R	SpeechRecognitionEvent.results										
insertAdjacentElement	R	Element.insertAdjacentElement()										
element insertadjacentelement	R	Element.insertAdjacentElement()										
insertadjacentelement	R	Element.insertAdjacentElement()										
regexp ignorecase	R	RegExp.prototype.ignoreCase										
ignorecase	R	RegExp.prototype.ignoreCase										
newVersion	R	IDBVersionChangeEvent.newVersion										
idbversionchangeevent newversion	R	IDBVersionChangeEvent.newVersion										
newversion	R	IDBVersionChangeEvent.newVersion										
speechsynthesis onvoiceschanged	R	SpeechSynthesis.onvoiceschanged										
onvoiceschanged	R	SpeechSynthesis.onvoiceschanged										
math log2e	R	Math.LOG2E										
log2e	R	Math.LOG2E										
locationbar	R	Window.locationbar										
window locationbar	R	Window.locationbar										
locationbar	R	Window.locationbar										
sourcebuffer appendstream	R	SourceBuffer.appendStream()										
appendstream	R	SourceBuffer.appendStream()										
parentElement	R	Node.parentElement										
node parentelement	R	Node.parentElement										
parentelement	R	Node.parentElement										
vrfieldofview downdegrees	R	VRFieldOfView.downDegrees										
downdegrees	R	VRFieldOfView.downDegrees										
languages	R	NavigatorLanguage.languages										
navigatorlanguage languages	R	NavigatorLanguage.languages										
languages	R	NavigatorLanguage.languages										
mediakeysystemconfiguration distinctiveidentifier	R	distinctiveIdentifier										
tFoot	R	HTMLTableElement.tFoot										
htmltableelement tfoot	R	HTMLTableElement.tFoot										
tfoot	R	HTMLTableElement.tFoot										
api svganimatedangle	R	SVGAnimatedAngle										
createNodeIterator	R	Document.createNodeIterator()										
document createnodeiterator	R	Document.createNodeIterator()										
createnodeiterator	R	Document.createNodeIterator()										
api svgstringlist	R	SVGStringList										
math random	R	Math.random										
random	R	Math.random										
webglrenderingcontext geterror	R	WebGLRenderingContext.getError()										
geterror	R	WebGLRenderingContext.getError()										
document preferredstylesheetset	R	Document.preferredStyleSheetSet										
preferredstylesheetset	R	Document.preferredStyleSheetSet										
audiocontext createscriptprocessor	R	AudioContext.createScriptProcessor()										
createscriptprocessor	R	AudioContext.createScriptProcessor()										
api bluetoothgattservice	R	BluetoothGATTService										
console profileend	R	Console.profileEnd()										
profileend	R	Console.profileEnd()										
api server-sent events	R	Server-sent events										
api svganimatedboolean	R	SVGAnimatedBoolean										
positionZ	R	PannerNode.positionZ										
pannernode positionz	R	PannerNode.positionZ										
positionz	R	PannerNode.positionZ										
videoplaybackquality totalvideoframes	R	VideoPlaybackQuality.totalVideoFrames										
totalvideoframes	R	VideoPlaybackQuality.totalVideoFrames										
positionX	R	PannerNode.positionX										
pannernode positionx	R	PannerNode.positionX										
positionx	R	PannerNode.positionX										
positionY	R	PannerNode.positionY										
pannernode positiony	R	PannerNode.positionY										
positiony	R	PannerNode.positionY										
contentEditable	R	HTMLElement.contentEditable										
htmlelement contenteditable	R	HTMLElement.contentEditable										
contenteditable	R	HTMLElement.contentEditable										
api midiaccess	R	MIDIAccess										
api htmltableheadercellelement	R	HTMLTableHeaderCellElement										
button	R	MouseEvent.button										
mouseevent button	R	MouseEvent.button										
button	R	MouseEvent.button										
date tolocaletimestring	R	Date.prototype.toLocaleTimeString										
tolocaletimestring	R	Date.prototype.toLocaleTimeString										
resultIndex	R	SpeechRecognitionEvent.resultIndex										
speechrecognitionevent resultindex	R	SpeechRecognitionEvent.resultIndex										
resultindex	R	SpeechRecognitionEvent.resultIndex										
tutorial compositing	R	Compositing and clipping										
compositing	R	Compositing and clipping										
onkeyup	R	GlobalEventHandlers.onkeyup										
global onkeyup	R	GlobalEventHandlers.onkeyup										
onkeyup	R	GlobalEventHandlers.onkeyup										
scrollingElement	R	Document.scrollingElement										
document scrollingelement	R	Document.scrollingElement										
scrollingelement	R	Document.scrollingElement										
xmlhttprequest html in xmlhttprequest	R	HTML in XMLHttpRequest										
webgl2renderingcontext renderbufferstoragemultisample	R	WebGL2RenderingContext.renderbufferStorageMultisample()										
renderbufferstoragemultisample	R	WebGL2RenderingContext.renderbufferStorageMultisample()										
api webglvertexarrayobjectoes	R	WebGLVertexArrayObjectOES										
api webglshader	R	WebGLShader										
distanceModel	R	PannerNode.distanceModel										
pannernode distancemodel	R	PannerNode.distanceModel										
distancemodel	R	PannerNode.distanceModel										
api gamepadevent	R	GamepadEvent										
api svgvkernelement	R	SVGVKernElement										
onplay	R	GlobalEventHandlers.onplay										
global globaleventhandlers.onplay	R	GlobalEventHandlers.onplay										
download	R	HTMLIFrameElement.download()										
htmliframeelement download	R	HTMLIFrameElement.download()										
download	R	HTMLIFrameElement.download()										
api identitymanager	R	IdentityManager										
click	R	HTMLElement.click()										
htmlelement click	R	HTMLElement.click()										
click	R	HTMLElement.click()										
api mediakeysystemaccess	R	MediaKeySystemAccess										
webgl lose context losecontext	R	WEBGL_lose_context.loseContext()										
losecontext	R	WEBGL_lose_context.loseContext()										
webglrenderingcontext clearstencil	R	WebGLRenderingContext.clearStencil()										
clearstencil	R	WebGLRenderingContext.clearStencil()										
notification noscreen	R	Notification.noscreen										
noscreen	R	Notification.noscreen										
ondragleave	R	GlobalEventHandlers.ondragleave										
global ondragleave	R	GlobalEventHandlers.ondragleave										
ondragleave	R	GlobalEventHandlers.ondragleave										
string touppercase	R	String.prototype.toUpperCase										
touppercase	R	String.prototype.toUpperCase										
maxChannelCount	R	AudioDestinationNode.maxChannelCount										
audiodestinationnode maxchannelcount	R	AudioDestinationNode.maxChannelCount										
maxchannelcount	R	AudioDestinationNode.maxChannelCount										
webglrenderingcontext copyteximage2d	R	WebGLRenderingContext.copyTexImage2D()										
copyteximage2d	R	WebGLRenderingContext.copyTexImage2D()										
serviceworkerregistration waiting	R	ServiceWorkerRegistration.waiting										
waiting	R	ServiceWorkerRegistration.waiting										
changedTouches	R	TouchEvent.changedTouches										
touchevent changedtouches	R	TouchEvent.changedTouches										
changedtouches	R	TouchEvent.changedTouches										
api svgsymbolelement	R	SVGSymbolElement										
rtcpeerconnection onnegotiationneeded	R	RTCPeerConnection.onnegotiationneeded										
onnegotiationneeded	R	RTCPeerConnection.onnegotiationneeded										
vrpose angularacceleration	R	VRPose.angularAcceleration										
angularacceleration	R	VRPose.angularAcceleration										
keyframeeffectreadonly spacing	R	KeyframeEffectReadOnly.spacing										
spacing	R	KeyframeEffectReadOnly.spacing										
mediasource activesourcebuffers	R	MediaSource.activeSourceBuffers										
activesourcebuffers	R	MediaSource.activeSourceBuffers										
bluetoothadvertisingdata txpower	R	txPower										
api mediatracksupportedconstraints	R	MediaTrackSupportedConstraints										
identitymanager logout	R	IdentityManager.logout()										
logout	R	IdentityManager.logout()										
datatransfer mozcursor	R	DataTransfer.mozCursor										
mozcursor	R	DataTransfer.mozCursor										
math sinh	R	Math.sinh()										
sinh	R	Math.sinh()										
vrpose linearacceleration	R	VRPose.linearAcceleration										
linearacceleration	R	VRPose.linearAcceleration										
canvasrenderingcontext2d removehitregion	R	CanvasRenderingContext2D.removeHitRegion()										
removehitregion	R	CanvasRenderingContext2D.removeHitRegion()										
api caretposition	R	CaretPosition										
api audioprocessingevent	R	AudioProcessingEvent										
api htmldivelement	R	HTMLDivElement										
rtcpeerconnection localdescription	R	RTCPeerConnection.localDescription										
localdescription	R	RTCPeerConnection.localDescription										
oncut	R	HTMLElement.oncut										
htmlelement oncut	R	HTMLElement.oncut										
oncut	R	HTMLElement.oncut										
api svgmissingglyphelement	R	SVGMissingGlyphElement										
bufferSize	R	ScriptProcessorNode.bufferSize										
scriptprocessornode buffersize	R	ScriptProcessorNode.bufferSize										
buffersize	R	ScriptProcessorNode.bufferSize										
api videoplaybackquality	R	VideoPlaybackQuality										
math cbrt	R	Math.cbrt()										
cbrt	R	Math.cbrt()										
date toutcstring	R	Date.prototype.toUTCString										
toutcstring	R	Date.prototype.toUTCString										
onscroll	R	GlobalEventHandlers.onscroll										
global onscroll	R	GlobalEventHandlers.onscroll										
onscroll	R	GlobalEventHandlers.onscroll										
web api	R	Web APIs										
api	R	Web APIs										
function apply	R	Function.prototype.apply										
apply	R	Function.prototype.apply										
api htmlmeterelement	R	HTMLMeterElement										
date getutcminutes	R	Date.prototype.getUTCMinutes										
getutcminutes	R	Date.prototype.getUTCMinutes										
speechrecognitionalternative confidence	R	SpeechRecognitionAlternative.confidence										
confidence	R	SpeechRecognitionAlternative.confidence										
array from	R	Array.from()										
from	R	Array.from()										
audiocontext createchannelsplitter	R	AudioContext.createChannelSplitter()										
createchannelsplitter	R	AudioContext.createChannelSplitter()										
api svgelement	R	SVGElement										
insertAdjacentText	R	Element.insertAdjacentText()										
element insertadjacenttext	R	Element.insertAdjacentText()										
insertadjacenttext	R	Element.insertAdjacentText()										
domimplementation createdocumenttype	R	DOMImplementation.createDocumentType()										
createdocumenttype	R	DOMImplementation.createDocumentType()										
api vrlayer	R	VRLayer										
onbeforeprint	R	WindowEventHandlers.onbeforeprint										
windoweventhandlers onbeforeprint	R	WindowEventHandlers.onbeforeprint										
onbeforeprint	R	WindowEventHandlers.onbeforeprint										
paymentaddress postalcode	R	PaymentAddress.postalCode										
postalcode	R	PaymentAddress.postalCode										
mediakeys setservercertificate	R	setServerCertificate()										
setservercertificate	R	setServerCertificate()										
array sort	R	Array.prototype.sort										
sort	R	Array.prototype.sort										
onstorage	R	WindowEventHandlers.onstorage										
windoweventhandlers onstorage	R	WindowEventHandlers.onstorage										
onstorage	R	WindowEventHandlers.onstorage										
onrejectionhandled	R	WindowEventHandlers.onrejectionhandled										
windoweventhandlers onrejectionhandled	R	WindowEventHandlers.onrejectionhandled										
onrejectionhandled	R	WindowEventHandlers.onrejectionhandled										
getFloatTimeDomainData	R	AnalyserNode.getFloatTimeDomainData()										
analysernode getfloattimedomaindata	R	AnalyserNode.getFloatTimeDomainData()										
getfloattimedomaindata	R	AnalyserNode.getFloatTimeDomainData()										
onpopstate	R	WindowEventHandlers.onpopstate										
windoweventhandlers onpopstate	R	WindowEventHandlers.onpopstate										
onpopstate	R	WindowEventHandlers.onpopstate										
api csskeyframesrule	R	CSSKeyframesRule										
api svgfontfaceurielement	R	SVGFontFaceUriElement										
tutorial drawing shapes	R	Drawing shapes with canvas										
drawing shapes	R	Drawing shapes with canvas										
operators this syntax	R	this										
operators this example	R	this										
this syntax	R	this										
this example	R	this										
operators this	R	this										
createElementNS	R	Document.createElementNS()										
document createelementns	R	Document.createElementNS()										
createelementns	R	Document.createElementNS()										
document onafterscriptexecute	R	Document.onafterscriptexecute										
onafterscriptexecute	R	Document.onafterscriptexecute										
document exitfullscreen	R	Document.exitFullscreen()										
exitfullscreen	R	Document.exitFullscreen()										
bluetoothgattservice getincludedservice	R	getIncludedService()										
getincludedservice	R	getIncludedService()										
errors equal as assign	R	SyntaxError: test for equality (==) mistyped as assignment (=)?										
equal as assign	R	SyntaxError: test for equality (==) mistyped as assignment (=)?										
global fetch	R	GlobalFetch.fetch()										
fetch	R	GlobalFetch.fetch()										
regexp lastparen	R	RegExp.lastParen ($+)										
lastparen	R	RegExp.lastParen ($+)										
control	R	HTMLLabelElement.control										
htmllabelelement control	R	HTMLLabelElement.control										
control	R	HTMLLabelElement.control										
error columnnumber	R	Error.prototype.columnNumber										
columnnumber	R	Error.prototype.columnNumber										
document links	R	Document.links										
links	R	Document.links										
api rtcidentityevent	R	RTCIdentityEvent										
api rtcconfiguration	R	RTCConfiguration										
math tan	R	Math.tan										
tan	R	Math.tan										
setVisible	R	HTMLIFrameElement.setVisible()										
htmliframeelement setvisible	R	HTMLIFrameElement.setVisible()										
setvisible	R	HTMLIFrameElement.setVisible()										
global skipwaiting	R	ServiceWorkerGlobalScope.skipWaiting()										
skipwaiting	R	ServiceWorkerGlobalScope.skipWaiting()										
api windowbase64	R	WindowBase64										
api htmldatalistelement	R	HTMLDataListElement										
api delaynode	R	DelayNode										
global bool32x4	R	SIMD.Bool32x4										
bool32x4	R	SIMD.Bool32x4										
api idbmutablefile	R	IDBMutableFile										
audiocontext createperiodicwave	R	AudioContext.createPeriodicWave()										
createperiodicwave	R	AudioContext.createPeriodicWave()										
api xpathresult	R	XPathResult										
api performance api	R	Performance API										
math sin	R	Math.sin										
sin	R	Math.sin										
web audio api using web audio api	R	Using the Web Audio API										
using web audio api	R	Using the Web Audio API										
console profile	R	Console.profile()										
profile	R	Console.profile()										
getVRDisplays	R	Navigator.getVRDisplays()										
navigator getvrdisplays	R	Navigator.getVRDisplays()										
getvrdisplays	R	Navigator.getVRDisplays()										
api speechrecognitionerror	R	SpeechRecognitionError										
storage removeitem	R	Storage.removeItem()										
removeitem	R	Storage.removeItem()										
cssprimitivevalue primitivetype	R	CSSPrimitiveValue.primitiveType										
primitivetype	R	CSSPrimitiveValue.primitiveType										
rtcpeerconnection onicecandidateerror	R	RTCPeerConnection.onicecandidateerror										
onicecandidateerror	R	RTCPeerConnection.onicecandidateerror										
api svganimatetransformelement	R	SVGAnimateTransformElement										
global onfetch	R	ServiceWorkerGlobalScope.onfetch										
onfetch	R	ServiceWorkerGlobalScope.onfetch										
math ceil	R	Math.ceil										
ceil	R	Math.ceil										
enctype	R	HTMLFormElement.enctype										
htmlformelement enctype	R	HTMLFormElement.enctype										
enctype	R	HTMLFormElement.enctype										
mediasource removesourcebuffer	R	MediaSource.removeSourceBuffer()										
removesourcebuffer	R	MediaSource.removeSourceBuffer()										
string italics	R	String.prototype.italics()										
italics	R	String.prototype.italics()										
addIdleObserver	R	Navigator.addIdleObserver()										
navigator addidleobserver	R	Navigator.addIdleObserver()										
addidleobserver	R	Navigator.addIdleObserver()										
function bind	R	Function.prototype.bind										
bind	R	Function.prototype.bind										
oncancel	R	GlobalEventHandlers.oncancel										
global globaleventhandlers.oncancel	R	GlobalEventHandlers.oncancel										
date setutcdate	R	Date.prototype.setUTCDate										
setutcdate	R	Date.prototype.setUTCDate										
api element	R	Element										
vrdisplaycapabilities canpresent	R	VRDisplayCapabilities.canPresent										
canpresent	R	VRDisplayCapabilities.canPresent										
api web crypto api	R	Web Crypto API										
childNodes	R	Node.childNodes										
node childnodes	R	Node.childNodes										
childnodes	R	Node.childNodes										
audiocontext createconvolver	R	AudioContext.createConvolver()										
createconvolver	R	AudioContext.createConvolver()										
mute	R	HTMLIFrameElement.mute()										
htmliframeelement mute	R	HTMLIFrameElement.mute()										
mute	R	HTMLIFrameElement.mute()										
webrtc api high-level guide	R	High-level guides										
high-level guide	R	High-level guides										
range setendafter	R	Range.setEndAfter()										
setendafter	R	Range.setEndAfter()										
scrollLeftMax	R	Element.scrollLeftMax										
element scrollleftmax	R	Element.scrollLeftMax										
scrollleftmax	R	Element.scrollLeftMax										
batterymanager chargingtime	R	BatteryManager.chargingTime										
chargingtime	R	BatteryManager.chargingTime										
webglrenderingcontext cullface	R	WebGLRenderingContext.cullFace()										
cullface	R	WebGLRenderingContext.cullFace()										
api htmlinputelement	R	HTMLInputElement										
srcElement	R	Event.srcElement										
event srcelement	R	Event.srcElement										
srcelement	R	Event.srcElement										
rtcdatachannel negotiated	R	RTCDataChannel.negotiated										
negotiated	R	RTCDataChannel.negotiated										
global int16array	R	Int16Array										
api htmloptionelement	R	HTMLOptionElement										
cssprimitivevalue getfloatvalue	R	CSSPrimitiveValue.getFloatValue()										
getfloatvalue	R	CSSPrimitiveValue.getFloatValue()										
webglrenderingcontext compressedteximage2d	R	WebGLRenderingContext.compressedTexImage2D()										
compressedteximage2d	R	WebGLRenderingContext.compressedTexImage2D()										
setAttributeNS	R	Element.setAttributeNS()										
element setattributens	R	Element.setAttributeNS()										
setattributens	R	Element.setAttributeNS()										
coordinates latitude	R	Coordinates.latitude										
latitude	R	Coordinates.latitude										
speechsynthesis pending	R	SpeechSynthesis.pending										
pending	R	SpeechSynthesis.pending										
api positionoptions	R	PositionOptions										
errors missing curly after property list	R	SyntaxError: missing } after property list										
missing curly after property list	R	SyntaxError: missing } after property list										
id cebutaxidriver	R	cebutaxidriver										
api microdata dom api	R	Microdata DOM API										
audioparam defaultvalue	R	AudioParam.defaultValue										
defaultvalue	R	AudioParam.defaultValue										
math sqrt2	R	Math.SQRT2										
sqrt2	R	Math.SQRT2										
api user timing api	R	User Timing API										
web audio api basic concepts behind web audio api	R	Basic concepts behind Web Audio API										
audioparam setvaluecurveattime	R	AudioParam.setValueCurveAtTime()										
setvaluecurveattime	R	AudioParam.setValueCurveAtTime()										
webgl2renderingcontext getquery	R	WebGL2RenderingContext.getQuery()										
getquery	R	WebGL2RenderingContext.getQuery()										
speechsynthesisutterance onboundary	R	SpeechSynthesisUtterance.onboundary										
onboundary	R	SpeechSynthesisUtterance.onboundary										
classes static syntax	R	static										
classes static example	R	static										
static syntax	R	static										
static example	R	static										
classes static	R	static										
audiocontext createdelay	R	AudioContext.createDelay()										
createdelay	R	AudioContext.createDelay()										
api cssvalue	R	CSSValue										
rtcpeerconnection onsignalingstatechange	R	RTCPeerConnection.onsignalingstatechange										
onsignalingstatechange	R	RTCPeerConnection.onsignalingstatechange										
pushmanager registrations	R	PushManager.registrations()										
registrations	R	PushManager.registrations()										
api domtimestamp	R	DOMTimeStamp										
touch identifier	R	Touch.identifier										
identifier	R	Touch.identifier										
pointer events pinch zoom gestures	R	Pinch zoom gestures										
pageYOffset	R	Window.pageYOffset										
window pageyoffset	R	Window.pageYOffset										
pageyoffset	R	Window.pageYOffset										
onpointerout	R	GlobalEventHandlers.onpointerout										
global onpointerout	R	GlobalEventHandlers.onpointerout										
onpointerout	R	GlobalEventHandlers.onpointerout										
keyframeeffect setkeyframes	R	KeyframeEffect.setKeyframes()										
setkeyframes	R	KeyframeEffect.setKeyframes()										
api bluetooth	R	Bluetooth										
webgl2renderingcontext getbuffersubdata	R	WebGL2RenderingContext.getBufferSubData()										
getbuffersubdata	R	WebGL2RenderingContext.getBufferSubData()										
mediaGroup	R	HTMLMediaElement.mediaGroup										
htmlmediaelement mediagroup	R	HTMLMediaElement.mediaGroup										
mediagroup	R	HTMLMediaElement.mediaGroup										
webglrenderingcontext getattachedshaders	R	WebGLRenderingContext.getAttachedShaders()										
getattachedshaders	R	WebGLRenderingContext.getAttachedShaders()										
getCanGoBack	R	HTMLIFrameElement.getCanGoBack()										
htmliframeelement getcangoback	R	HTMLIFrameElement.getCanGoBack()										
getcangoback	R	HTMLIFrameElement.getCanGoBack()										
rtcpeerconnection addicecandidate	R	RTCPeerConnection.addIceCandidate()										
addicecandidate	R	RTCPeerConnection.addIceCandidate()										
paymentrequest onshippingoptionchange	R	PaymentRequest.onshippingoptionchange										
onshippingoptionchange	R	PaymentRequest.onshippingoptionchange										
screen availwidth	R	Screen.availWidth										
availwidth	R	Screen.availWidth										
indexeddb api using javascript generators in firefox	R	Using JavaScript Generators in Firefox										
math fround	R	Math.fround()										
fround	R	Math.fround()										
ext disjoint timer query endqueryext	R	EXT_disjoint_timer_query.endQueryEXT()										
endqueryext	R	EXT_disjoint_timer_query.endQueryEXT()										
date todatestring	R	Date.prototype.toDateString										
todatestring	R	Date.prototype.toDateString										
regexp @@split	R	RegExp.prototype[@@split]()										
@@split	R	RegExp.prototype[@@split]()										
rtcdatachannel onbufferedamountlow	R	RTCDataChannel.onbufferedamountlow										
onbufferedamountlow	R	RTCDataChannel.onbufferedamountlow										
global math	R	Math										
api webgl color buffer float	R	WEBGL_color_buffer_float										
operators comparison operators syntax	R	Comparison operators										
operators comparison operators example	R	Comparison operators										
comparison operators syntax	R	Comparison operators										
comparison operators example	R	Comparison operators										
operators comparison operators	R	Comparison operators										
api eventlistener	R	EventListener										
api animationeffecttimingreadonly	R	AnimationEffectTimingReadOnly										
document createtreewalker	R	Document.createTreeWalker()										
createtreewalker	R	Document.createTreeWalker()										
api speechsynthesiserrorevent	R	SpeechSynthesisErrorEvent										
api oscillatornode	R	OscillatorNode										
initialTime	R	HTMLMediaElement.initialTime										
htmlmediaelement initialtime	R	HTMLMediaElement.initialTime										
initialtime	R	HTMLMediaElement.initialTime										
global unescape	R	Global.unescape										
unescape	R	Global.unescape										
rtcpeerconnection setidentityprovider	R	RTCPeerConnection.setIdentityProvider()										
setidentityprovider	R	RTCPeerConnection.setIdentityProvider()										
api notifications api	R	Notifications API										
api transferable	R	Transferable										
getComputedStyle	R	Window.getComputedStyle()										
window getcomputedstyle	R	Window.getComputedStyle()										
getcomputedstyle	R	Window.getComputedStyle()										
webrtc api coding guide	R	WebRTC coding guide										
coding guide	R	WebRTC coding guide										
api mediatracksettings	R	MediaTrackSettings										
networkinformation downlinkmax	R	NetworkInformation.downlinkMax										
downlinkmax	R	NetworkInformation.downlinkMax										
api svgtransformlist	R	SVGTransformList										
api htmltabledatacellelement	R	HTMLTableDataCellElement										
collapseToEnd	R	Selection.collapseToEnd()										
selection collapsetoend	R	Selection.collapseToEnd()										
collapsetoend	R	Selection.collapseToEnd()										
api bytestring	R	ByteString										
rtcpeerconnection getstreambyid	R	RTCPeerConnection.getStreamById()										
getstreambyid	R	RTCPeerConnection.getStreamById()										
api svgfontfaceelement	R	SVGFontFaceElement										
registerProtocolHandler	R	Navigator.registerProtocolHandler()										
navigator registerprotocolhandler	R	Navigator.registerProtocolHandler()										
registerprotocolhandler	R	Navigator.registerProtocolHandler()										
className	R	Element.className										
element classname	R	Element.className										
classname	R	Element.className										
scrollByPages	R	Window.scrollByPages()										
window scrollbypages	R	Window.scrollByPages()										
scrollbypages	R	Window.scrollByPages()										
global uint16x8	R	SIMD.Uint16x8										
uint16x8	R	SIMD.Uint16x8										
idbobjectstore deleteindex	R	IDBObjectStore.deleteIndex()										
deleteindex	R	IDBObjectStore.deleteIndex()										
speechrecognition onresult	R	SpeechRecognition.onresult										
onresult	R	SpeechRecognition.onresult										
api usvstring	R	USVString										
api svganimationelement	R	SVGAnimationElement										
serviceworkerregistration onupdatefound	R	ServiceWorkerRegistration.onupdatefound										
onupdatefound	R	ServiceWorkerRegistration.onupdatefound										
attack	R	DynamicsCompressorNode.attack										
dynamicscompressornode attack	R	DynamicsCompressorNode.attack										
attack	R	DynamicsCompressorNode.attack										
api svgfontfaceformatelement	R	SVGFontFaceFormatElement										
onmouseup	R	GlobalEventHandlers.onmouseup										
global onmouseup	R	GlobalEventHandlers.onmouseup										
onmouseup	R	GlobalEventHandlers.onmouseup										
webglrenderingcontext useprogram	R	WebGLRenderingContext.useProgram()										
useprogram	R	WebGLRenderingContext.useProgram()										
syncevent lastchance	R	SyncEventlastChance										
lastchance	R	SyncEventlastChance										
webglrenderingcontext checkframebufferstatus	R	WebGLRenderingContext.checkFramebufferStatus()										
checkframebufferstatus	R	WebGLRenderingContext.checkFramebufferStatus()										
string big	R	String.prototype.big()										
big	R	String.prototype.big()										
mediakeysession sessionid	R	sessionId										
api entrysync	R	EntrySync										
api presentationavailability	R	PresentationAvailability										
sourcebuffer updating	R	SourceBuffer.updating										
updating	R	SourceBuffer.updating										
api webglvertexarrayobject	R	WebGLVertexArrayObject										
tutorial drawing text	R	Drawing text										
notification onshow	R	Notification.onshow										
onshow	R	Notification.onshow										
webglrenderingcontext getsupportedextensions	R	WebGLRenderingContext.getSupportedExtensions()										
getsupportedextensions	R	WebGLRenderingContext.getSupportedExtensions()										
mozPermissionSettings	R	Navigator.mozPermissionSettings										
navigator mozpermissionsettings	R	Navigator.mozPermissionSettings										
mozpermissionsettings	R	Navigator.mozPermissionSettings										
oncuechange	R	GlobalEventHandlers.oncuechange										
global globaleventhandlers.oncuechange	R	GlobalEventHandlers.oncuechange										
xmlhttprequest overridemimetype	R	XMLHttpRequest.overrideMimeType()										
overridemimetype	R	XMLHttpRequest.overrideMimeType()										
paymentaddress country	R	PaymentAddress.country										
country	R	PaymentAddress.country										
xmlhttprequest synchronous and asynchronous requests	R	Synchronous and asynchronous requests										
file getasdataurl	R	File.getAsDataURL()										
getasdataurl	R	File.getAsDataURL()										
canvasrenderingcontext2d clip	R	CanvasRenderingContext2D.clip()										
clip	R	CanvasRenderingContext2D.clip()										
api htmlmediaelement	R	HTMLMediaElement										
removeEventListener	R	EventTarget.removeEventListener()										
eventtarget removeeventlistener	R	EventTarget.removeEventListener()										
removeeventlistener	R	EventTarget.removeEventListener()										
cssprimitivevalue getcountervalue	R	CSSPrimitiveValue.getCounterValue()										
getcountervalue	R	CSSPrimitiveValue.getCounterValue()										
releasePointerCapture	R	Element.releasePointerCapture()										
element releasepointercapture	R	Element.releasePointerCapture()										
releasepointercapture	R	Element.releasePointerCapture()										
offsetTop	R	HTMLElement.offsetTop										
htmlelement offsettop	R	HTMLElement.offsetTop										
offsettop	R	HTMLElement.offsetTop										
border	R	HTMLTableElement.border										
htmltableelement border	R	HTMLTableElement.border										
border	R	HTMLTableElement.border										
operators bitwise operators syntax	R	Bitwise operators										
operators bitwise operators example	R	Bitwise operators										
bitwise operators syntax	R	Bitwise operators										
bitwise operators example	R	Bitwise operators										
operators bitwise operators	R	Bitwise operators										
xmlhttprequest mozbackgroundrequest	R	XMLHttpRequest.mozBackgroundRequest										
mozbackgroundrequest	R	XMLHttpRequest.mozBackgroundRequest										
acceleration	R	DeviceMotionEvent.acceleration										
devicemotionevent acceleration	R	DeviceMotionEvent.acceleration										
acceleration	R	DeviceMotionEvent.acceleration										
datatransfer mozitemcount	R	DataTransfer.mozItemCount										
mozitemcount	R	DataTransfer.mozItemCount										
api periodicwave	R	PeriodicWave										
cssprimitivevalue getrgbcolorvalue	R	CSSPrimitiveValue.getRGBColorValue()										
getrgbcolorvalue	R	CSSPrimitiveValue.getRGBColorValue()										
api svgevent	R	SVGEvent										
passwordcredential idname	R	idName										
rtcpeerconnection createoffer	R	RTCPeerConnection.createOffer()										
createoffer	R	RTCPeerConnection.createOffer()										
batterymanager onchargingchange	R	BatteryManager.onchargingchange										
onchargingchange	R	BatteryManager.onchargingchange										
api filesystemdirectoryreader	R	FileSystemDirectoryReader										
api htmlslotelement	R	HTMLSlotElement										
registerElement	R	Document.registerElement()										
document registerelement	R	Document.registerElement()										
registerelement	R	Document.registerElement()										
string fontcolor	R	String.prototype.fontcolor()										
fontcolor	R	String.prototype.fontcolor()										
api filesystemsync	R	FileSystemSync										
coordinates accuracy	R	Coordinates.accuracy										
accuracy	R	Coordinates.accuracy										
cssstylerule selectortext	R	CSSStyleRule.selectorText										
selectortext	R	CSSStyleRule.selectorText										
fullScreen	R	Window.fullScreen										
window fullscreen	R	Window.fullScreen										
fullscreen	R	Window.fullScreen										
error linenumber	R	Error.prototype.lineNumber										
linenumber	R	Error.prototype.lineNumber										
webglrenderingcontext deleteprogram	R	WebGLRenderingContext.deleteProgram()										
deleteprogram	R	WebGLRenderingContext.deleteProgram()										
notifications api using the notifications api	R	Using the Notifications API										
audiocontext createanalyser	R	AudioContext.createAnalyser()										
createanalyser	R	AudioContext.createAnalyser()										
speechrecognitionalternative transcript	R	SpeechRecognitionAlternative.transcript										
transcript	R	SpeechRecognitionAlternative.transcript										
api htmlcanvaselement	R	HTMLCanvasElement										
filesystemdirectoryentry getdirectory	R	FileSystemDirectoryEntry.getDirectory()										
getdirectory	R	FileSystemDirectoryEntry.getDirectory()										
errors not defined	R	ReferenceError: "x" is not defined										
not defined	R	ReferenceError: "x" is not defined										
webglrenderingcontext bindattriblocation	R	WebGLRenderingContext.bindAttribLocation()										
bindattriblocation	R	WebGLRenderingContext.bindAttribLocation()										
errors not a constructor	R	TypeError: "x" is not a constructor										
not a constructor	R	TypeError: "x" is not a constructor										
canvasrenderingcontext2d shadowoffsetx	R	CanvasRenderingContext2D.shadowOffsetX										
shadowoffsetx	R	CanvasRenderingContext2D.shadowOffsetX										
canvasrenderingcontext2d shadowoffsety	R	CanvasRenderingContext2D.shadowOffsetY										
shadowoffsety	R	CanvasRenderingContext2D.shadowOffsetY										
api filelist	R	FileList										
screen availtop	R	Screen.availTop										
availtop	R	Screen.availTop										
api localmediastream	R	LocalMediaStream										
setCustomValidity	R	HTMLSelectElement.setCustomValidity()										
htmlselectelement setcustomvalidity	R	HTMLSelectElement.setCustomValidity()										
setcustomvalidity	R	HTMLSelectElement.setCustomValidity()										
api selection	R	Selection										
operators super syntax	R	super										
operators super example	R	super										
super syntax	R	super										
super example	R	super										
operators super	R	super										
vreyeparameters renderheight	R	VREyeParameters.renderHeight										
renderheight	R	VREyeParameters.renderHeight										
tiltX	R	PointerEvent.tiltX										
pointerevent tiltx	R	PointerEvent.tiltX										
tiltx	R	PointerEvent.tiltX										
global syntaxerror	R	SyntaxError										
serviceworkerregistration periodicsync	R	ServiceWorkerRegistration.periodicSync										
periodicsync	R	ServiceWorkerRegistration.periodicSync										
canvasrenderingcontext2d closepath	R	CanvasRenderingContext2D.closePath()										
closepath	R	CanvasRenderingContext2D.closePath()										
rtcpeerconnection remotedescription	R	RTCPeerConnection.remoteDescription										
remotedescription	R	RTCPeerConnection.remoteDescription										
performanceresourcetiming encodedbodysize	R	PerformanceResourceTiming.encodedBodySize										
encodedbodysize	R	PerformanceResourceTiming.encodedBodySize										
performanceresourcetiming nexthopprotocol	R	PerformanceResourceTiming.nextHopProtocol										
nexthopprotocol	R	PerformanceResourceTiming.nextHopProtocol										
response redirect	R	Response.redirect()										
redirect	R	Response.redirect()										
reportValidity	R	HTMLFormElement.reportValidity()										
htmlformelement reportvalidity	R	HTMLFormElement.reportValidity()										
reportvalidity	R	HTMLFormElement.reportValidity()										
webglrenderingcontext buffersubdata	R	WebGLRenderingContext.bufferSubData()										
buffersubdata	R	WebGLRenderingContext.bufferSubData()										
statements with syntax	R	with										
statements with example	R	with										
with syntax	R	with										
with example	R	with										
statements with	R	with										
controls	R	HTMLMediaElement.controls										
htmlmediaelement controls	R	HTMLMediaElement.controls										
controls	R	HTMLMediaElement.controls										
canvasrenderingcontext2d getimagedata	R	CanvasRenderingContext2D.getImageData()										
getimagedata	R	CanvasRenderingContext2D.getImageData()										
webglrenderingcontext getcontextattributes	R	WebGLRenderingContext.getContextAttributes()										
getcontextattributes	R	WebGLRenderingContext.getContextAttributes()										
web audio api porting webkitaudiocontext code to standards based audiocontext	R	Porting webkitAudioContext code to standards based AudioContext										
api idbdatabasesync	R	IDBDatabaseSync										
attachShadow	R	Element.attachShadow()										
element attachshadow	R	Element.attachShadow()										
attachshadow	R	Element.attachShadow()										
idbkeyrange loweropen	R	IDBKeyRange.lowerOpen										
loweropen	R	IDBKeyRange.lowerOpen										
date getdate	R	Date.prototype.getDate										
getdate	R	Date.prototype.getDate										
string tolocalelowercase	R	String.prototype.toLocaleLowerCase										
tolocalelowercase	R	String.prototype.toLocaleLowerCase										
resource timing api using the resource timing api	R	Using the Resource Timing API										
installtrigger installchrome	R	installChrome										
numberOfInputs	R	AudioNode.numberOfInputs										
audionode numberofinputs	R	AudioNode.numberOfInputs										
numberofinputs	R	AudioNode.numberOfInputs										
offlineaudiocontext startrendering(promise)	R	OfflineAudioContext.startRendering (promise)										
startrendering(promise)	R	OfflineAudioContext.startRendering (promise)										
api web workers api	R	Web Workers API										
audiocontext listener	R	AudioContext.listener										
listener	R	AudioContext.listener										
webglrenderingcontext getextension	R	WebGLRenderingContext.getExtension()										
getextension	R	WebGLRenderingContext.getExtension()										
setSelectionRange	R	HTMLInputElement.setSelectionRange()										
htmlinputelement setselectionrange	R	HTMLInputElement.setSelectionRange()										
setselectionrange	R	HTMLInputElement.setSelectionRange()										
webgl2renderingcontext vertexattribdivisor	R	WebGL2RenderingContext.vertexAttribDivisor()										
vertexattribdivisor	R	WebGL2RenderingContext.vertexAttribDivisor()										
api svglengthlist	R	SVGLengthList										
webglrenderingcontext createframebuffer	R	WebGLRenderingContext.createFramebuffer()										
createframebuffer	R	WebGLRenderingContext.createFramebuffer()										
rtcdatachannel bufferedamountlowthreshold	R	RTCDataChannel.bufferedAmountLowThreshold										
bufferedamountlowthreshold	R	RTCDataChannel.bufferedAmountLowThreshold										
offsetParent	R	HTMLElement.offsetParent										
htmlelement offsetparent	R	HTMLElement.offsetParent										
offsetparent	R	HTMLElement.offsetParent										
ended	R	HTMLMediaElement.ended										
htmlmediaelement ended	R	HTMLMediaElement.ended										
ended	R	HTMLMediaElement.ended										
api animationeffectreadonly	R	AnimationEffectReadOnly										
datatransfer mozsetdataat	R	DataTransfer.mozSetDataAt()										
mozsetdataat	R	DataTransfer.mozSetDataAt()										
rtcdatachannel maxpacketlifetime	R	RTCDataChannel.maxPacketLifeTime										
maxpacketlifetime	R	RTCDataChannel.maxPacketLifeTime										
webgl2renderingcontext getactiveuniforms	R	WebGL2RenderingContext.getActiveUniforms()										
getactiveuniforms	R	WebGL2RenderingContext.getActiveUniforms()										
string fixed	R	String.prototype.fixed()										
fixed	R	String.prototype.fixed()										
frame	R	HTMLTableElement.frame										
htmltableelement frame	R	HTMLTableElement.frame										
frame	R	HTMLTableElement.frame										
preventDefault	R	Event.preventDefault()										
event preventdefault	R	Event.preventDefault()										
preventdefault	R	Event.preventDefault()										
object freeze	R	Object.freeze										
freeze	R	Object.freeze										
xmlhttprequest multipart	R	XMLHttpRequest.multipart										
multipart	R	XMLHttpRequest.multipart										
webglshaderprecisionformat rangemax	R	WebGLShaderPrecisionFormat.rangeMax										
rangemax	R	WebGLShaderPrecisionFormat.rangeMax										
api svgdescelement	R	SVGDescElement										
api htmlshadowelement	R	HTMLShadowElement										
webglrenderingcontext deletetexture	R	WebGLRenderingContext.deleteTexture()										
deletetexture	R	WebGLRenderingContext.deleteTexture()										
webglrenderingcontext depthmask	R	WebGLRenderingContext.depthMask()										
depthmask	R	WebGLRenderingContext.depthMask()										
api frame timing api	R	Frame Timing API										
getVisible	R	HTMLIFrameElement.getVisible()										
htmliframeelement getvisible	R	HTMLIFrameElement.getVisible()										
getvisible	R	HTMLIFrameElement.getVisible()										
api oes texture float	R	OES_texture_float										
windowbase64 base64 encoding and decoding	R	Base64 encoding and decoding										
date setutcseconds	R	Date.prototype.setUTCSeconds										
setutcseconds	R	Date.prototype.setUTCSeconds										
mediarecorder api using the mediarecorder api	R	Using the MediaRecorder API										
scrollX	R	Window.scrollX										
window scrollx	R	Window.scrollX										
scrollx	R	Window.scrollX										
scrollY	R	Window.scrollY										
window scrolly	R	Window.scrollY										
scrolly	R	Window.scrollY										
validitystate badinput	R	ValidityState.badInput										
badinput	R	ValidityState.badInput										
document vlinkcolor	R	Document.vlinkColor										
vlinkcolor	R	Document.vlinkColor										
webgl2renderingcontext endquery	R	WebGL2RenderingContext.endQuery()										
endquery	R	WebGL2RenderingContext.endQuery()										
console group	R	Console.group()										
group	R	Console.group()										
canvasrenderingcontext2d imagesmoothingenabled	R	CanvasRenderingContext2D.imageSmoothingEnabled										
imagesmoothingenabled	R	CanvasRenderingContext2D.imageSmoothingEnabled										
requestMediaKeySystemAccess	R	Navigator.requestMediaKeySystemAccess()										
navigator requestmediakeysystemaccess	R	Navigator.requestMediaKeySystemAccess()										
requestmediakeysystemaccess	R	Navigator.requestMediaKeySystemAccess()										
api encrypted media extensions api	R	Encrypted Media Extensions API										
setVolume	R	HTMLIFrameElement.setVolume()										
htmliframeelement setvolume	R	HTMLIFrameElement.setVolume()										
setvolume	R	HTMLIFrameElement.setVolume()										
global onnotificationclick	R	ServiceWorkerGlobalScope.onnotificationclick										
onnotificationclick	R	ServiceWorkerGlobalScope.onnotificationclick										
api plugin	R	Plugin										
respondWith	R	FetchEvent.respondWith()										
fetchevent respondwith	R	FetchEvent.respondWith()										
respondwith	R	FetchEvent.respondWith()										
math log1p	R	Math.log1p()										
log1p	R	Math.log1p()										
api mousescrollevent	R	MouseScrollEvent										
api svgrectelement	R	SVGRectElement										
connection metered	R	Connection.metered										
metered	R	Connection.metered										
performanceresourcetiming workerstart	R	PerformanceResourceTiming.workerStart										
workerstart	R	PerformanceResourceTiming.workerStart										
api csskeyframerule	R	CSSKeyframeRule										
api l10n.ready	R	L10n.ready										
webglrenderingcontext gettexparameter	R	WebGLRenderingContext.getTexParameter()										
gettexparameter	R	WebGLRenderingContext.getTexParameter()										
api documentorshadowroot	R	DocumentOrShadowRoot										
attributes	R	Element.attributes										
element attributes	R	Element.attributes										
attributes	R	Element.attributes										
api mutationevent	R	MutationEvent										
webglrenderingcontext compileshader	R	WebGLRenderingContext.compileShader()										
compileshader	R	WebGLRenderingContext.compileShader()										
api canvascapturemediastream	R	CanvasCaptureMediaStream										
webgl api webgl best practices	R	WebGL best practices										
canvasrenderingcontext2d globalcompositeoperation	R	CanvasRenderingContext2D.globalCompositeOperation										
globalcompositeoperation	R	CanvasRenderingContext2D.globalCompositeOperation										
pushmanager subscribe	R	PushManager.subscribe()										
subscribe	R	PushManager.subscribe()										
svgcircleelement cx	R	cx										
onuserproximity	R	Window.onuserproximity										
window onuserproximity	R	Window.onuserproximity										
onuserproximity	R	Window.onuserproximity										
waitUntil	R	ExtendableEvent.waitUntil()										
extendableevent waituntil	R	ExtendableEvent.waitUntil()										
waituntil	R	ExtendableEvent.waitUntil()										
console table	R	Console.table()										
table	R	Console.table()										
api dommatrix	R	DOMMatrix										
api touch events	R	Touch events										
deleteTFoot	R	HTMLTableElement.deleteTFoot()										
htmltableelement deletetfoot	R	HTMLTableElement.deleteTFoot()										
deletetfoot	R	HTMLTableElement.deleteTFoot()										
document object model using the w3c dom level 1 core	R	Using the W3C DOM Level 1 Core										
range endoffset	R	Range.endOffset										
endoffset	R	Range.endOffset										
body bodyused	R	Body.bodyUsed										
bodyused	R	Body.bodyUsed										
clearInterval	R	WindowTimers.clearInterval()										
windowtimers clearinterval	R	WindowTimers.clearInterval()										
clearinterval	R	WindowTimers.clearInterval()										
clientWidth	R	Element.clientWidth										
element clientwidth	R	Element.clientWidth										
clientwidth	R	Element.clientWidth										
webgl2renderingcontext copytexsubimage3d	R	WebGL2RenderingContext.copyTexSubImage3D()										
copytexsubimage3d	R	WebGL2RenderingContext.copyTexSubImage3D()										
webvr api using the webvr api	R	Using the WebVR API										
tutorial adding 2d content to a webgl context	R	Adding 2D content to a WebGL context										
object   lookupgetter  	R	Object.prototype.__lookupGetter__()										
  lookupgetter  	R	Object.prototype.__lookupGetter__()										
mediadevices enumeratedevices	R	MediaDevices.enumerateDevices()										
enumeratedevices	R	MediaDevices.enumerateDevices()										
deleteTHead	R	HTMLTableElement.deleteTHead()										
htmltableelement deletethead	R	HTMLTableElement.deleteTHead()										
deletethead	R	HTMLTableElement.deleteTHead()										
canvasrenderingcontext2d addhitregion	R	CanvasRenderingContext2D.addHitRegion()										
addhitregion	R	CanvasRenderingContext2D.addHitRegion()										
number isinteger	R	Number.isInteger()										
isinteger	R	Number.isInteger()										
webglrenderingcontext disablevertexattribarray	R	WebGLRenderingContext.disableVertexAttribArray()										
disablevertexattribarray	R	WebGLRenderingContext.disableVertexAttribArray()										
console assert	R	Console.assert()										
assert	R	Console.assert()										
range createcontextualfragment	R	Range.createContextualFragment()										
createcontextualfragment	R	Range.createContextualFragment()										
audiocontext createbuffersource	R	AudioContext.createBufferSource()										
createbuffersource	R	AudioContext.createBufferSource()										
api childnode	R	ChildNode										
webglrenderingcontext blendcolor	R	WebGLRenderingContext.blendColor()										
blendcolor	R	WebGLRenderingContext.blendColor()										
api l10n.get	R	L10n.get										
range setendbefore	R	Range.setEndBefore()										
setendbefore	R	Range.setEndBefore()										
scrollIntoView	R	Element.scrollIntoView()										
element scrollintoview	R	Element.scrollIntoView()										
scrollintoview	R	Element.scrollIntoView()										
align	R	HTMLTableElement.align										
htmltableelement align	R	HTMLTableElement.align										
align	R	HTMLTableElement.align										
bluetoothadvertisingdata appearance	R	BluetoothAdvertisingData.appearance										
appearance	R	BluetoothAdvertisingData.appearance										
addRange	R	Selection.addRange()										
selection addrange	R	Selection.addRange()										
addrange	R	Selection.addRange()										
touch rotationangle	R	Touch.rotationAngle										
rotationangle	R	Touch.rotationAngle										
webgl2renderingcontext copybuffersubdata	R	WebGL2RenderingContext.copyBufferSubData()										
copybuffersubdata	R	WebGL2RenderingContext.copyBufferSubData()										
mediakeysession expiration	R	expiration										
selectNode	R	Range.selectNode()										
range selectnode	R	Range.selectNode()										
selectnode	R	Range.selectNode()										
mediastream onaddtrack	R	MediaStream.onaddtrack										
onaddtrack	R	MediaStream.onaddtrack										
api navigatorconcurrenthardware	R	NavigatorConcurrentHardware										
event comparison of event targets	R	Comparison of Event Targets										
string fontsize	R	String.prototype.fontsize()										
fontsize	R	String.prototype.fontsize()										
math log10e	R	Math.LOG10E										
log10e	R	Math.LOG10E										
stopImmediatePropagation	R	Event.stopImmediatePropagation()										
event stopimmediatepropagation	R	Event.stopImmediatePropagation()										
stopimmediatepropagation	R	Event.stopImmediatePropagation()										
web crypto api supported algorithms	R	Supported algorithms										
api navigatorlanguage	R	NavigatorLanguage										
acceptCharset	R	HTMLFormElement.acceptCharset										
htmlformelement acceptcharset	R	HTMLFormElement.acceptCharset										
acceptcharset	R	HTMLFormElement.acceptCharset										
api beacon api	R	Beacon API										
webglrenderingcontext getshadersource	R	WebGLRenderingContext.getShaderSource()										
getshadersource	R	WebGLRenderingContext.getShaderSource()										
statements let syntax	R	let										
statements let example	R	let										
let syntax	R	let										
let example	R	let										
statements let	R	let										
touch events supporting both touchevent and mouseevent	R	Supporting both TouchEvent and MouseEvent										
html drag and drop api file drag and drop	R	File drag and drop										
global dataview	R	DataView										
api using the browser api	R	Using the Browser API										
math sqrt	R	Math.sqrt										
sqrt	R	Math.sqrt										
paymentresponse payeremail	R	PaymentResponse.payerEmail										
payeremail	R	PaymentResponse.payerEmail										
hasAttribute	R	Element.hasAttribute()										
element hasattribute	R	Element.hasAttribute()										
hasattribute	R	Element.hasAttribute()										
webgl2renderingcontext getuniformindices	R	WebGL2RenderingContext.getUniformIndices()										
getuniformindices	R	WebGL2RenderingContext.getUniformIndices()										
api htmldlistelement	R	HTMLDListElement										
api csssupportsrule	R	CSSSupportsRule										
api svgpreserveaspectratio	R	SVGPreserveAspectRatio										
api intersectionobserverentry	R	IntersectionObserverEntry										
global infinity	R	Global.Infinity										
infinity	R	Global.Infinity										
vrdisplay getimmediatepose	R	VRDisplay.getImmediatePose()										
getimmediatepose	R	VRDisplay.getImmediatePose()										
webglrenderingcontext teximage2d	R	WebGLRenderingContext.texImage2D()										
teximage2d	R	WebGLRenderingContext.texImage2D()										
animation effect	R	Animation.effect										
effect	R	Animation.effect										
api webgl api	R	WebGL										
webgl api	R	WebGL										
api serviceworkercontainer	R	ServiceWorkerContainer										
string padend	R	String.prototype.padEnd()										
padend	R	String.prototype.padEnd()										
webgl2renderingcontext bindtransformfeedback	R	WebGL2RenderingContext.bindTransformFeedback()										
bindtransformfeedback	R	WebGL2RenderingContext.bindTransformFeedback()										
date togmtstring	R	Date.prototype.toGMTString										
togmtstring	R	Date.prototype.toGMTString										
api networkinformation	R	NetworkInformation										
errors malformed formal parameter	R	SyntaxError: Malformed formal parameter										
malformed formal parameter	R	SyntaxError: Malformed formal parameter										
api htmlformcontrolscollection	R	HTMLFormControlsCollection										
rtcpeerconnection onconnectionstatechange	R	RTCPeerConnection.onconnectionstatechange										
onconnectionstatechange	R	RTCPeerConnection.onconnectionstatechange										
api svganimatednumberlist	R	SVGAnimatedNumberList										
webglrenderingcontext scissor	R	WebGLRenderingContext.scissor()										
scissor	R	WebGLRenderingContext.scissor()										
api filesystem	R	FileSystem										
canvascapturemediastream requestframe	R	CanvasCaptureMediaStream.requestFrame()										
requestframe	R	CanvasCaptureMediaStream.requestFrame()										
date getutcfullyear	R	Date.prototype.getUTCFullYear										
getutcfullyear	R	Date.prototype.getUTCFullYear										
api speechsynthesisvoice	R	SpeechSynthesisVoice										
autoplay	R	HTMLMediaElement.autoplay										
htmlmediaelement autoplay	R	HTMLMediaElement.autoplay										
autoplay	R	HTMLMediaElement.autoplay										
global typedarray	R	TypedArray										
api htmlcollection	R	HTMLCollection										
api htmlsourceelement	R	HTMLSourceElement										
paymentaddress sortingcode	R	PaymentAddress.sortingCode										
sortingcode	R	PaymentAddress.sortingCode										
deltaY	R	WheelEvent.deltaY										
wheelevent deltay	R	WheelEvent.deltaY										
deltay	R	WheelEvent.deltaY										
assignedNodes	R	HTMLSlotElement.assignedNodes()										
htmlslotelement assignednodes	R	HTMLSlotElement.assignedNodes()										
assignednodes	R	HTMLSlotElement.assignedNodes()										
clientHeight	R	Element.clientHeight										
element clientheight	R	Element.clientHeight										
clientheight	R	Element.clientHeight										
webrtc api taking still photos	R	Taking still photos with WebRTC										
taking still photos	R	Taking still photos with WebRTC										
coordinates altitudeaccuracy	R	Coordinates.altitudeAccuracy										
altitudeaccuracy	R	Coordinates.altitudeAccuracy										
prepend	R	ParentNode.prepend()										
parentnode prepend	R	ParentNode.prepend()										
prepend	R	ParentNode.prepend()										
mediakeysession generaterequest	R	generateRequest()										
generaterequest	R	generateRequest()										
range compareboundarypoints	R	Range.compareBoundaryPoints()										
compareboundarypoints	R	Range.compareBoundaryPoints()										
canvasrenderingcontext2d resettransform	R	CanvasRenderingContext2D.resetTransform()										
resettransform	R	CanvasRenderingContext2D.resetTransform()										
canvasrenderingcontext2d arcto	R	CanvasRenderingContext2D.arcTo()										
arcto	R	CanvasRenderingContext2D.arcTo()										
bluetoothremotegattserver getprimaryservice	R	BluetoothRemoteGATTServer.getPrimaryService()										
getprimaryservice	R	BluetoothRemoteGATTServer.getPrimaryService()										
api point	R	Point										
canvas api a basic ray-caster	R	A basic ray-caster										
vrdisplay capabilities	R	VRDisplay.capabilities										
capabilities	R	VRDisplay.capabilities										
classes extends syntax	R	extends										
classes extends example	R	extends										
extends syntax	R	extends										
extends example	R	extends										
classes extends	R	extends										
deepPath	R	Event.deepPath										
event deeppath	R	Event.deepPath										
deeppath	R	Event.deepPath										
maxDecibels	R	AnalyserNode.maxDecibels										
analysernode maxdecibels	R	AnalyserNode.maxDecibels										
maxdecibels	R	AnalyserNode.maxDecibels										
errors more arguments needed	R	TypeError: More arguments needed										
more arguments needed	R	TypeError: More arguments needed										
api audiolistener	R	AudioListener										
global collator	R	Intl.Collator										
collator	R	Intl.Collator										
onmouseover	R	GlobalEventHandlers.onmouseover										
global onmouseover	R	GlobalEventHandlers.onmouseover										
onmouseover	R	GlobalEventHandlers.onmouseover										
datatransfer mozusercancelled	R	DataTransfer.mozUserCancelled										
mozusercancelled	R	DataTransfer.mozUserCancelled										
geolocation clearwatch	R	Geolocation.clearWatch()										
clearwatch	R	Geolocation.clearWatch()										
password	R	HTMLHyperlinkElementUtils.password										
htmlhyperlinkelementutils password	R	HTMLHyperlinkElementUtils.password										
password	R	HTMLHyperlinkElementUtils.password										
drawElements	R	WebGLRenderingContext.drawElements()										
webglrenderingcontext drawelements	R	WebGLRenderingContext.drawElements()										
drawelements	R	WebGLRenderingContext.drawElements()										
api nodefilter	R	NodeFilter										
emma	R	SpeechRecognitionEvent.emma										
speechrecognitionevent emma	R	SpeechRecognitionEvent.emma										
emma	R	SpeechRecognitionEvent.emma										
api svgviewelement	R	SVGViewElement										
api idbenvironmentsync	R	IDBEnvironmentSync										
vrstageparameters sizex	R	VRStageParameters.sizeX										
sizex	R	VRStageParameters.sizeX										
vrstageparameters sizey	R	VRStageParameters.sizeY										
sizey	R	VRStageParameters.sizeY										
controllers	R	Window.controllers										
window controllers	R	Window.controllers										
controllers	R	Window.controllers										
mozInputSource	R	MouseEvent.mozInputSource										
mouseevent mozinputsource	R	MouseEvent.mozInputSource										
mozinputsource	R	MouseEvent.mozInputSource										
api ext color buffer half float	R	EXT_color_buffer_half_float										
document async	R	Document.async										
async	R	Document.async										
webglrenderingcontext cleardepth	R	WebGLRenderingContext.clearDepth()										
cleardepth	R	WebGLRenderingContext.clearDepth()										
xmlhttprequest sendasbinary	R	XMLHttpRequest.sendAsBinary()										
sendasbinary	R	XMLHttpRequest.sendAsBinary()										
rtcpeerconnection currentlocaldescription	R	RTCPeerConnection.currentLocalDescription										
currentlocaldescription	R	RTCPeerConnection.currentLocalDescription										
api audioparam	R	AudioParam										
api htmlformelement	R	HTMLFormElement										
statements export syntax	R	export										
statements export example	R	export										
export syntax	R	export										
export example	R	export										
statements export	R	export										
api htmlanchorelement	R	HTMLAnchorElement										
api abstractworker	R	AbstractWorker										
xmlhttprequest openrequest	R	XMLHttpRequest.openRequest()										
openrequest	R	XMLHttpRequest.openRequest()										
getRangeAt	R	Selection.getRangeAt()										
selection getrangeat	R	Selection.getRangeAt()										
getrangeat	R	Selection.getRangeAt()										
svgrect the  x  property	R	The 'X' property										
the  x  property	R	The 'X' property										
idbobjectstore autoincrement	R	IDBObjectStore.autoIncrement										
autoincrement	R	IDBObjectStore.autoIncrement										
setCapture	R	Element.setCapture()										
element setcapture	R	Element.setCapture()										
setcapture	R	Element.setCapture()										
onresize	R	GlobalEventHandlers.onresize										
global onresize	R	GlobalEventHandlers.onresize										
onresize	R	GlobalEventHandlers.onresize										
batterymanager ondischargingtimechange	R	BatteryManager.ondischargingtimechange										
ondischargingtimechange	R	BatteryManager.ondischargingtimechange										
defaultPlaybackRate	R	HTMLMediaElement.defaultPlaybackRate										
htmlmediaelement defaultplaybackrate	R	HTMLMediaElement.defaultPlaybackRate										
defaultplaybackrate	R	HTMLMediaElement.defaultPlaybackRate										
audiocontext decodeaudiodata	R	AudioContext.decodeAudioData()										
decodeaudiodata	R	AudioContext.decodeAudioData()										
number max value	R	Number.MAX_VALUE										
max value	R	Number.MAX_VALUE										
vrdisplaycapabilities hasorientation	R	VRDisplayCapabilities.hasOrientation										
hasorientation	R	VRDisplayCapabilities.hasOrientation										
performance timeline using performance timeline	R	Using Performance Timeline										
ondrag	R	GlobalEventHandlers.ondrag										
global ondrag	R	GlobalEventHandlers.ondrag										
ondrag	R	GlobalEventHandlers.ondrag										
global symbol	R	Symbol										
api webglcontextevent	R	WebGLContextEvent										
css object model determining the dimensions of elements	R	Determining the dimensions of elements										
idbdatabase createobjectstore	R	IDBDatabase.createObjectStore()										
createobjectstore	R	IDBDatabase.createObjectStore()										
math cosh	R	Math.cosh()										
cosh	R	Math.cosh()										
errors json bad parse	R	SyntaxError: JSON.parse: bad parsing										
errors json not legal parse	R	SyntaxError: JSON.parse: bad parsing										
errors json invalid parse	R	SyntaxError: JSON.parse: bad parsing										
errors json not a valid parse	R	SyntaxError: JSON.parse: bad parsing										
json bad parse	R	SyntaxError: JSON.parse: bad parsing										
json not legal parse	R	SyntaxError: JSON.parse: bad parsing										
json invalid parse	R	SyntaxError: JSON.parse: bad parsing										
json not a valid parse	R	SyntaxError: JSON.parse: bad parsing										
mediakeysystemconfiguration persistentstate	R	persistentState										
pressure	R	PointerEvent.pressure										
pointerevent pressure	R	PointerEvent.pressure										
pressure	R	PointerEvent.pressure										
webglrenderingcontext stencilfuncseparate	R	WebGLRenderingContext.stencilFuncSeparate()										
stencilfuncseparate	R	WebGLRenderingContext.stencilFuncSeparate()										
vreyeparameters offset	R	VREyeParameters.offset										
offset	R	VREyeParameters.offset										
rtcpeerconnection signalingstate	R	RTCPeerConnection.signalingState										
signalingstate	R	RTCPeerConnection.signalingState										
api navigatorid	R	NavigatorID										
object unwatch	R	Object.prototype.unwatch()										
unwatch	R	Object.prototype.unwatch()										
api css font loading api	R	CSS Font Loading API										
cloneNode	R	Node.cloneNode()										
node clonenode	R	Node.cloneNode()										
clonenode	R	Node.cloneNode()										
api svgfontelement	R	SVGFontElement										
bluetoothdevice connectgatt	R	connectGATT()										
connectgatt	R	connectGATT()										
api rtccertificate	R	RTCCertificate										
date setutcmonth	R	Date.prototype.setUTCMonth										
setutcmonth	R	Date.prototype.setUTCMonth										
outerWidth	R	Window.outerWidth										
window outerwidth	R	Window.outerWidth										
outerwidth	R	Window.outerWidth										
document createtouchlist	R	Document.createTouchList()										
createtouchlist	R	Document.createTouchList()										
dataset	R	HTMLElement.dataset										
htmlelement dataset	R	HTMLElement.dataset										
dataset	R	HTMLElement.dataset										
bluetoothremotegattserver getprimaryservices	R	BluetoothRemoteGATTServer.getPrimaryServices()										
getprimaryservices	R	BluetoothRemoteGATTServer.getPrimaryServices()										
bluetoothadvertisingdata servicedata	R	serviceData										
tutorial using textures in webgl	R	Using textures in WebGL										
screen colordepth	R	Screen.colorDepth										
colordepth	R	Screen.colorDepth										
paymentresponse payerphone	R	PayerResponse.payerPhone										
payerphone	R	PayerResponse.payerPhone										
canvasrenderingcontext2d linedashoffset	R	CanvasRenderingContext2D.lineDashOffset										
linedashoffset	R	CanvasRenderingContext2D.lineDashOffset										
api pagetransitionevent	R	PageTransitionEvent										
number issafeinteger	R	Number.isSafeInteger()										
issafeinteger	R	Number.isSafeInteger()										
date tolocaledatestring	R	Date.prototype.toLocaleDateString										
tolocaledatestring	R	Date.prototype.toLocaleDateString										
regexp @@search	R	RegExp.prototype[@@search]()										
@@search	R	RegExp.prototype[@@search]()										
file filesize	R	File.fileSize										
filesize	R	File.fileSize										
serviceworkerregistration shownotification	R	ServiceWorkerRegistration.showNotification()										
shownotification	R	ServiceWorkerRegistration.showNotification()										
statements var syntax	R	var										
statements var example	R	var										
var syntax	R	var										
var example	R	var										
statements var	R	var										
lockedfile filehandle	R	LockedFile.fileHandle										
filehandle	R	LockedFile.fileHandle										
math log10	R	Math.log10()										
log10	R	Math.log10()										
rtcpeerconnection removetrack	R	removeTrack										
webglrenderingcontext enablevertexattribarray	R	WebGLRenderingContext.enableVertexAttribArray()										
enablevertexattribarray	R	WebGLRenderingContext.enableVertexAttribArray()										
ondrop	R	GlobalEventHandlers.ondrop										
global ondrop	R	GlobalEventHandlers.ondrop										
ondrop	R	GlobalEventHandlers.ondrop										
baseURI	R	Node.baseURI										
node baseuri	R	Node.baseURI										
baseuri	R	Node.baseURI										
operators comma operator syntax	R	Comma operator										
operators comma operator example	R	Comma operator										
comma operator syntax	R	Comma operator										
comma operator example	R	Comma operator										
operators comma operator	R	Comma operator										
speechrecognition interimresults	R	SpeechRecognition.interimResults										
interimresults	R	SpeechRecognition.interimResults										
tBodies	R	HTMLTableElement.tBodies										
htmltableelement tbodies	R	HTMLTableElement.tBodies										
tbodies	R	HTMLTableElement.tBodies										
installtrigger startsoftwareupdate	R	startSoftwareUpdate										
api syncmanager	R	SyncManager										
nodeType	R	Node.nodeType										
node nodetype	R	Node.nodeType										
nodetype	R	Node.nodeType										
batterymanager onlevelchange	R	BatteryManager.onlevelchange										
onlevelchange	R	BatteryManager.onlevelchange										
purgeHistory	R	HTMLIFrameElement.purgeHistory()										
htmliframeelement purgehistory	R	HTMLIFrameElement.purgeHistory()										
purgehistory	R	HTMLIFrameElement.purgeHistory()										
WEBKIT FORCE AT FORCE MOUSE DOWN	R	MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN										
mouseevent webkit force at force mouse down	R	MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN										
webkit force at force mouse down	R	MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN										
ontouchcancel	R	GlobalEventHandlers.ontouchcancel										
global ontouchcancel	R	GlobalEventHandlers.ontouchcancel										
ontouchcancel	R	GlobalEventHandlers.ontouchcancel										
oes vertex array object isvertexarrayoes	R	OES_vertex_array_object.isVertexArrayOES()										
isvertexarrayoes	R	OES_vertex_array_object.isVertexArrayOES()										
WEBKIT FORCE AT MOUSE DOWN	R	MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN										
mouseevent webkit force at mouse down	R	MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN										
webkit force at mouse down	R	MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN										
onvrdisplaypresentchange	R	Window.onvrdisplaypresentchange										
window onvrdisplaypresentchange	R	Window.onvrdisplaypresentchange										
onvrdisplaypresentchange	R	Window.onvrdisplaypresentchange										
statements empty syntax	R	empty										
statements empty example	R	empty										
empty syntax	R	empty										
empty example	R	empty										
statements empty	R	empty										
api file handle api	R	FileHandle API										
file handle api	R	FileHandle API										
cookie simple document.cookie framework	R	Simple cookie framework										
simple document.cookie framework	R	Simple cookie framework										
screen onorientationchange	R	Screen.onorientationchange										
onorientationchange	R	Screen.onorientationchange										
webgl2renderingcontext vertexattribi	R	WebGL2RenderingContext.vertexAttribI4[u]i[v]()										
vertexattribi	R	WebGL2RenderingContext.vertexAttribI4[u]i[v]()										
statements block syntax	R	block										
statements block example	R	block										
block syntax	R	block										
block example	R	block										
statements block	R	block										
webgl2renderingcontext teximage3d	R	WebGL2RenderingContext.texImage3D()										
teximage3d	R	WebGL2RenderingContext.texImage3D()										
oversample	R	WaveShaperNode.oversample										
waveshapernode oversample	R	WaveShaperNode.oversample										
oversample	R	WaveShaperNode.oversample										
performance measure	R	Performance.measure()										
measure	R	Performance.measure()										
math asinh	R	Math.asinh()										
asinh	R	Math.asinh()										
api fontfaceset	R	FontFaceSet										
ondeviceproximity	R	Window.ondeviceproximity										
window ondeviceproximity	R	Window.ondeviceproximity										
ondeviceproximity	R	Window.ondeviceproximity										
webglrenderingcontext getuniformlocation	R	WebGLRenderingContext.getUniformLocation()										
getuniformlocation	R	WebGLRenderingContext.getUniformLocation()										
filesystemdirectoryentry removerecursively	R	FileSystemDirectoryEntry.removeRecursively()										
removerecursively	R	FileSystemDirectoryEntry.removeRecursively()										
global int8array	R	Int8Array										
webglrenderingcontext getprogramparameter	R	WebGLRenderingContext.getProgramParameter()										
getprogramparameter	R	WebGLRenderingContext.getProgramParameter()										
operators generator comprehensions syntax	R	Generator comprehensions										
operators generator comprehensions example	R	Generator comprehensions										
generator comprehensions syntax	R	Generator comprehensions										
generator comprehensions example	R	Generator comprehensions										
operators generator comprehensions	R	Generator comprehensions										
reference functions	R	Functions										
getVolume	R	HTMLIFrameElement.getVolume()										
htmliframeelement getvolume	R	HTMLIFrameElement.getVolume()										
getvolume	R	HTMLIFrameElement.getVolume()										
initKeyboardEvent	R	KeyboardEvent.initKeyboardEvent()										
keyboardevent initkeyboardevent	R	KeyboardEvent.initKeyboardEvent()										
initkeyboardevent	R	KeyboardEvent.initKeyboardEvent()										
api svgpolygonelement	R	SVGPolygonElement										
detail	R	UIEvent.detail										
uievent detail	R	UIEvent.detail										
detail	R	UIEvent.detail										
math ln2	R	Math.LN2										
ln2	R	Math.LN2										
console groupcollapsed	R	Console.groupCollapsed()										
groupcollapsed	R	Console.groupCollapsed()										
paymentresponse details	R	PaymentResponse.details										
details	R	PaymentResponse.details										
api waveshapernode	R	WaveShaperNode										
webgl2renderingcontext invalidateframebuffer	R	WebGL2RenderingContext.invalidateFramebuffer()										
invalidateframebuffer	R	WebGL2RenderingContext.invalidateFramebuffer()										
api htmltablecellelement	R	HTMLTableCellElement										
trackdefault kinds	R	TrackDefault.kinds										
kinds	R	TrackDefault.kinds										
rtcpeerconnection peeridentity	R	RTCPeerConnection.peerIdentity										
peeridentity	R	RTCPeerConnection.peerIdentity										
api svgsetelement	R	SVGSetElement										
webglrenderingcontext clearcolor	R	WebGLRenderingContext.clearColor()										
clearcolor	R	WebGLRenderingContext.clearColor()										
vrdisplay exitpresent	R	VRDisplay.exitPresent()										
exitpresent	R	VRDisplay.exitPresent()										
webglshaderprecisionformat precision	R	WebGLShaderPrecisionFormat.precision										
precision	R	WebGLShaderPrecisionFormat.precision										
window cancelidlecallback	R	cancelIdleCallback										
api htmllabelelement	R	HTMLLabelElement										
statusbar	R	Window.statusbar										
window statusbar	R	Window.statusbar										
statusbar	R	Window.statusbar										
datatransfer effectallowed	R	DataTransfer.effectAllowed										
effectallowed	R	DataTransfer.effectAllowed										
api idbtransactionsync	R	IDBTransactionSync										
object getownpropertynames	R	Object.getOwnPropertyNames										
getownpropertynames	R	Object.getOwnPropertyNames										
