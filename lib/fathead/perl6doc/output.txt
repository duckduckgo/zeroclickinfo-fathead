AST.ACCEPTS	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_ACCEPTS
ACCEPTS	D								*[[AST.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Any.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Attribute.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Bag.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[BagHash.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Baggy.ACCEPTS]], used in smart-matching if the right-hand side is a Baggy.\n*[[Block.ACCEPTS]], usually calls the code object and passes $topic as an argument.\n*[[CallFrame.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Callable.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Cancellation.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Capture.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Channel.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Code.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Complex.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[ComplexStr.ACCEPTS]], returns True if the string is the same as $other.\n*[[Cool.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[CurrentThreadScheduler.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Cursor.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Date.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[DateTime.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Duration.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Exception.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Failure.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[FatRat.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Grammar.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Hash.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Instant.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Int.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[IntStr.ACCEPTS]], returns True if the string is the same as $other.\n*[[Iterable.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Junction.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Label.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[List.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Lock.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Macro.ACCEPTS]], usually calls the code object and passes $topic as an argument.\n*[[Map.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Match.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Method.ACCEPTS]], usually calls the code object and passes $topic as an argument.\n*[[Mix.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[MixHash.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Mixy.ACCEPTS]], used in smart-matching if the right-hand side is a Baggy.\n*[[Mu.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Nil.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Num.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[NumStr.ACCEPTS]], returns True if the string is the same as $other.\n*[[Numeric.ACCEPTS]], returns True if $other is numerically the same as the invocant.\n*[[ObjAt.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Pair.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Parameter.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Positional.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Proc.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Promise.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Proxy.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Range.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Rat.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[RatStr.ACCEPTS]], returns True if the string is the same as $other.\n*[[Rational.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Real.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Regex.ACCEPTS]], usually calls the code object and passes $topic as an argument.\n*[[Routine.ACCEPTS]], usually calls the code object and passes $topic as an argument.\n*[[Scalar.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Semaphore.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Seq.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Set.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[SetHash.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Setty.ACCEPTS]], returns True if $other and self contain all the same elements, and no others.\n*[[Signature.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Stash.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Str.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Sub.ACCEPTS]], usually calls the code object and passes $topic as an argument.\n*[[Submethod.ACCEPTS]], usually calls the code object and passes $topic as an argument.\n*[[Supplier.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Tap.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Thread.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[ThreadPoolScheduler.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Uni.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Variable.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Version.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[Whatever.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).\n*[[WhateverCode.ACCEPTS]], usually calls the code object and passes $topic as an argument.\n*[[supplies.ACCEPTS]], aCCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).			
AST.any	A			Perl 6 AST							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_any
any	D								*[[AST.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Any.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Attribute.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Bag.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[BagHash.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[CallFrame.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Callable.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Cancellation.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Capture.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Channel.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Code.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Complex.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Cool.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[CurrentThreadScheduler.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Cursor.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Date.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[DateTime.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Duration.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Exception.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Failure.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[FatRat.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Grammar.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Hash.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Instant.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Int.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Iterable.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Label.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[List.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Lock.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Map.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Match.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Mix.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[MixHash.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Nil.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Num.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Numeric.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[ObjAt.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Pair.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Parameter.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Positional.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Proc.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Promise.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Proxy.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Range.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Rat.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Rational.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Real.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Scalar.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Semaphore.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Seq.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Set.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[SetHash.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Signature.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Stash.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Str.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Supplier.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Tap.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Thread.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[ThreadPoolScheduler.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Uni.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Variable.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Version.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[Whatever.any]], interprets the invocant as a list and creates an any-Junction from it.\n*[[supplies.any]], interprets the invocant as a list and creates an any-Junction from it.			
AST.all	A			Perl 6 AST							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_all
all	D								*[[AST.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Any.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Attribute.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Bag.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[BagHash.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[CallFrame.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Callable.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Cancellation.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Capture.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Channel.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Code.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Complex.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Cool.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[CurrentThreadScheduler.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Cursor.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Date.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[DateTime.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Duration.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Exception.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Failure.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[FatRat.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Grammar.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Hash.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Instant.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Int.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Iterable.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Label.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[List.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Lock.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Map.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Match.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Mix.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[MixHash.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Nil.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Num.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Numeric.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[ObjAt.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Pair.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Parameter.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Positional.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Proc.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Promise.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Proxy.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Range.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Rat.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Rational.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Real.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Scalar.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Semaphore.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Seq.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Set.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[SetHash.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Signature.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Stash.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Str.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Supplier.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Tap.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Thread.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[ThreadPoolScheduler.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Uni.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Variable.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Version.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[Whatever.all]], interprets the invocant as a list and creates an all-Junction from it.\n*[[supplies.all]], interprets the invocant as a list and creates an all-Junction from it.			
AST.one	A			Perl 6 AST							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_one
one	D								*[[AST.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Any.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Attribute.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Bag.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[BagHash.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[CallFrame.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Callable.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Cancellation.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Capture.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Channel.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Code.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Complex.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Cool.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[CurrentThreadScheduler.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Cursor.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Date.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[DateTime.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Duration.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Exception.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Failure.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[FatRat.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Grammar.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Hash.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Instant.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Int.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Iterable.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Label.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[List.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Lock.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Map.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Match.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Mix.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[MixHash.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Nil.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Num.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Numeric.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[ObjAt.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Pair.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Parameter.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Positional.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Proc.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Promise.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Proxy.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Range.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Rat.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Rational.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Real.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Scalar.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Semaphore.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Seq.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Set.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[SetHash.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Signature.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Stash.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Str.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Supplier.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Tap.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Thread.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[ThreadPoolScheduler.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Uni.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Variable.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Version.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[Whatever.one]], interprets the invocant as a list and creates a one-Junction from it.\n*[[supplies.one]], interprets the invocant as a list and creates a one-Junction from it.			
AST.none	A			Perl 6 AST							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_none
none	D								*[[AST.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Any.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Attribute.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Bag.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[BagHash.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[CallFrame.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Callable.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Cancellation.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Capture.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Channel.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Code.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Complex.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Cool.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[CurrentThreadScheduler.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Cursor.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Date.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[DateTime.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Duration.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Exception.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Failure.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[FatRat.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Grammar.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Hash.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Instant.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Int.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Iterable.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Label.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[List.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Lock.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Map.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Match.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Mix.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[MixHash.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Nil.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Num.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Numeric.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[ObjAt.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Pair.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Parameter.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Positional.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Proc.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Promise.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Proxy.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Range.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Rat.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Rational.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Real.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Scalar.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Semaphore.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Seq.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Set.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[SetHash.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Signature.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Stash.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Str.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Supplier.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Tap.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Thread.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[ThreadPoolScheduler.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Uni.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Variable.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Version.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[Whatever.none]], interprets the invocant as a list and creates a none-Junction from it.\n*[[supplies.none]], interprets the invocant as a list and creates a none-Junction from it.			
AST.list	A			Perl 6 AST							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_list
list	D								*[[AST.list]], interprets the invocant as a list, and returns that List.\n*[[Any.list]], interprets the invocant as a list, and returns that List.\n*[[Attribute.list]], interprets the invocant as a list, and returns that List.\n*[[Bag.list]], interprets the invocant as a list, and returns that List.\n*[[BagHash.list]], interprets the invocant as a list, and returns that List.\n*[[CallFrame.list]], interprets the invocant as a list, and returns that List.\n*[[Callable.list]], interprets the invocant as a list, and returns that List.\n*[[Cancellation.list]], interprets the invocant as a list, and returns that List.\n*[[Capture.list]], interprets the invocant as a list, and returns that List.\n*[[Channel.list]], interprets the invocant as a list, and returns that List.\n*[[Code.list]], interprets the invocant as a list, and returns that List.\n*[[Complex.list]], interprets the invocant as a list, and returns that List.\n*[[Cool.list]], interprets the invocant as a list, and returns that List.\n*[[CurrentThreadScheduler.list]], interprets the invocant as a list, and returns that List.\n*[[Cursor.list]], interprets the invocant as a list, and returns that List.\n*[[Date.list]], interprets the invocant as a list, and returns that List.\n*[[DateTime.list]], interprets the invocant as a list, and returns that List.\n*[[Duration.list]], interprets the invocant as a list, and returns that List.\n*[[Exception.list]], interprets the invocant as a list, and returns that List.\n*[[Failure.list]], interprets the invocant as a list, and returns that List.\n*[[FatRat.list]], interprets the invocant as a list, and returns that List.\n*[[Grammar.list]], interprets the invocant as a list, and returns that List.\n*[[Hash.list]], interprets the invocant as a list, and returns that List.\n*[[Instant.list]], interprets the invocant as a list, and returns that List.\n*[[Int.list]], interprets the invocant as a list, and returns that List.\n*[[Iterable.list]], interprets the invocant as a list, and returns that List.\n*[[Label.list]], interprets the invocant as a list, and returns that List.\n*[[List.list]], interprets the invocant as a list, and returns that List.\n*[[Lock.list]], interprets the invocant as a list, and returns that List.\n*[[Map.list]], interprets the invocant as a list, and returns that List.\n*[[Match.list]], interprets the invocant as a list, and returns that List.\n*[[Mix.list]], interprets the invocant as a list, and returns that List.\n*[[MixHash.list]], interprets the invocant as a list, and returns that List.\n*[[Nil.list]], interprets the invocant as a list, and returns that List.\n*[[Num.list]], interprets the invocant as a list, and returns that List.\n*[[Numeric.list]], interprets the invocant as a list, and returns that List.\n*[[ObjAt.list]], interprets the invocant as a list, and returns that List.\n*[[Pair.list]], interprets the invocant as a list, and returns that List.\n*[[Parameter.list]], interprets the invocant as a list, and returns that List.\n*[[Positional.list]], interprets the invocant as a list, and returns that List.\n*[[PositionalBindFailover.list]], returns a List based on the iterator method without caching it.\n*[[Proc.list]], interprets the invocant as a list, and returns that List.\n*[[Promise.list]], interprets the invocant as a list, and returns that List.\n*[[Proxy.list]], interprets the invocant as a list, and returns that List.\n*[[Range.list]], interprets the invocant as a list, and returns that List.\n*[[Rat.list]], interprets the invocant as a list, and returns that List.\n*[[Rational.list]], interprets the invocant as a list, and returns that List.\n*[[Real.list]], interprets the invocant as a list, and returns that List.\n*[[Scalar.list]], interprets the invocant as a list, and returns that List.\n*[[Semaphore.list]], interprets the invocant as a list, and returns that List.\n*[[Seq.list]], interprets the invocant as a list, and returns that List.\n*[[Set.list]], interprets the invocant as a list, and returns that List.\n*[[SetHash.list]], interprets the invocant as a list, and returns that List.\n*[[Signature.list]], interprets the invocant as a list, and returns that List.\n*[[Stash.list]], interprets the invocant as a list, and returns that List.\n*[[Str.list]], interprets the invocant as a list, and returns that List.\n*[[Supplier.list]], interprets the invocant as a list, and returns that List.\n*[[Tap.list]], interprets the invocant as a list, and returns that List.\n*[[Thread.list]], interprets the invocant as a list, and returns that List.\n*[[ThreadPoolScheduler.list]], interprets the invocant as a list, and returns that List.\n*[[Uni.list]], interprets the invocant as a list, and returns that List.\n*[[Variable.list]], interprets the invocant as a list, and returns that List.\n*[[Version.list]], interprets the invocant as a list, and returns that List.\n*[[Whatever.list]], interprets the invocant as a list, and returns that List.\n*[[done.list]], waits until the supply is done, then returns a list of all values emitted since the list call.\n*[[supplies.list]], interprets the invocant as a list, and returns that List.			
AST.push	A			Perl 6 AST							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_push
push	D								*[[AST.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Any.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Array.push]], adds the @values to the end of the array, and returns the modified list.\n*[[Attribute.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Bag.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[BagHash.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[CallFrame.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Callable.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Cancellation.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Capture.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Channel.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Code.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Complex.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Cool.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[CurrentThreadScheduler.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Cursor.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Date.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[DateTime.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Duration.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Exception.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Failure.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[FatRat.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Grammar.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Hash.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Instant.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Int.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Iterable.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Label.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[List.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Lock.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Map.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Match.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Mix.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[MixHash.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Nil.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Num.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Numeric.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[ObjAt.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Pair.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Parameter.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Positional.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Proc.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Promise.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Proxy.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Range.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Rat.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Rational.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Real.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Scalar.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Semaphore.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Seq.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Set.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[SetHash.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Signature.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Stash.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Str.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Supplier.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Tap.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Thread.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[ThreadPoolScheduler.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Uni.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Variable.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Version.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[Whatever.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.\n*[[supplies.push]], the method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.			
AST.reverse	A			Perl 6 AST							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_routine_reverse
reverse	D								*[[AST.reverse]], returns a list with the same elements in reverse order.\n*[[Any.reverse]], returns a list with the same elements in reverse order.\n*[[Array.reverse]], returns a list with the same elements in reverse order.\n*[[Attribute.reverse]], returns a list with the same elements in reverse order.\n*[[Backtrace.reverse]], returns a list with the same elements in reverse order.\n*[[Bag.reverse]], returns a list with the same elements in reverse order.\n*[[BagHash.reverse]], returns a list with the same elements in reverse order.\n*[[CallFrame.reverse]], returns a list with the same elements in reverse order.\n*[[Callable.reverse]], returns a list with the same elements in reverse order.\n*[[Cancellation.reverse]], returns a list with the same elements in reverse order.\n*[[Capture.reverse]], returns a list with the same elements in reverse order.\n*[[Channel.reverse]], returns a list with the same elements in reverse order.\n*[[Code.reverse]], returns a list with the same elements in reverse order.\n*[[Complex.reverse]], returns a list with the same elements in reverse order.\n*[[Cool.reverse]], returns a list with the same elements in reverse order.\n*[[CurrentThreadScheduler.reverse]], returns a list with the same elements in reverse order.\n*[[Cursor.reverse]], returns a list with the same elements in reverse order.\n*[[Date.reverse]], returns a list with the same elements in reverse order.\n*[[DateTime.reverse]], returns a list with the same elements in reverse order.\n*[[Duration.reverse]], returns a list with the same elements in reverse order.\n*[[Exception.reverse]], returns a list with the same elements in reverse order.\n*[[Failure.reverse]], returns a list with the same elements in reverse order.\n*[[FatRat.reverse]], returns a list with the same elements in reverse order.\n*[[Grammar.reverse]], returns a list with the same elements in reverse order.\n*[[Hash.reverse]], returns a list with the same elements in reverse order.\n*[[Instant.reverse]], returns a list with the same elements in reverse order.\n*[[Int.reverse]], returns a list with the same elements in reverse order.\n*[[Iterable.reverse]], returns a list with the same elements in reverse order.\n*[[Label.reverse]], returns a list with the same elements in reverse order.\n*[[List.reverse]], returns a list with the same elements in reverse order.\n*[[Lock.reverse]], returns a list with the same elements in reverse order.\n*[[Map.reverse]], returns a list with the same elements in reverse order.\n*[[Match.reverse]], returns a list with the same elements in reverse order.\n*[[Mix.reverse]], returns a list with the same elements in reverse order.\n*[[MixHash.reverse]], returns a list with the same elements in reverse order.\n*[[Nil.reverse]], returns a list with the same elements in reverse order.\n*[[Num.reverse]], returns a list with the same elements in reverse order.\n*[[Numeric.reverse]], returns a list with the same elements in reverse order.\n*[[ObjAt.reverse]], returns a list with the same elements in reverse order.\n*[[Pair.reverse]], returns a list with the same elements in reverse order.\n*[[Parameter.reverse]], returns a list with the same elements in reverse order.\n*[[Positional.reverse]], returns a list with the same elements in reverse order.\n*[[Proc.reverse]], returns a list with the same elements in reverse order.\n*[[Promise.reverse]], returns a list with the same elements in reverse order.\n*[[Proxy.reverse]], returns a list with the same elements in reverse order.\n*[[Range.reverse]], returns a list with the same elements in reverse order.\n*[[Rat.reverse]], returns a list with the same elements in reverse order.\n*[[Rational.reverse]], returns a list with the same elements in reverse order.\n*[[Real.reverse]], returns a list with the same elements in reverse order.\n*[[Scalar.reverse]], returns a list with the same elements in reverse order.\n*[[Semaphore.reverse]], returns a list with the same elements in reverse order.\n*[[Seq.reverse]], returns a list with the same elements in reverse order.\n*[[Set.reverse]], returns a list with the same elements in reverse order.\n*[[SetHash.reverse]], returns a list with the same elements in reverse order.\n*[[Signature.reverse]], returns a list with the same elements in reverse order.\n*[[Slip.reverse]], returns a list with the same elements in reverse order.\n*[[Stash.reverse]], returns a list with the same elements in reverse order.\n*[[Str.reverse]], returns a list with the same elements in reverse order.\n*[[Supplier.reverse]], returns a list with the same elements in reverse order.\n*[[Tap.reverse]], returns a list with the same elements in reverse order.\n*[[Thread.reverse]], returns a list with the same elements in reverse order.\n*[[ThreadPoolScheduler.reverse]], returns a list with the same elements in reverse order.\n*[[Uni.reverse]], returns a list with the same elements in reverse order.\n*[[Variable.reverse]], returns a list with the same elements in reverse order.\n*[[Version.reverse]], returns a list with the same elements in reverse order.\n*[[Whatever.reverse]], returns a list with the same elements in reverse order.\n*[[done.reverse]], waits until the given supply is done, then creates a supply to which all values seen are emitted in reverse order.\n*[[supplies.reverse]], returns a list with the same elements in reverse order.			
AST.sort	A			Perl 6 AST							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_sort
sort	D								*[[AST.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Any.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Array.sort]], sorts the list, smallest element first.\n*[[Attribute.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Backtrace.sort]], sorts the list, smallest element first.\n*[[Bag.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[BagHash.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[CallFrame.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Callable.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Cancellation.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Capture.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Channel.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Code.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Complex.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Cool.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[CurrentThreadScheduler.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Cursor.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Date.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[DateTime.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Duration.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Exception.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Failure.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[FatRat.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Grammar.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Hash.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Instant.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Int.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Iterable.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Label.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[List.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Lock.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Map.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Match.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Mix.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[MixHash.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Nil.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Num.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Numeric.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[ObjAt.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Pair.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Parameter.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Positional.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Proc.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Promise.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Proxy.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Range.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Rat.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Rational.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Real.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Scalar.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Semaphore.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Seq.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Set.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[SetHash.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Signature.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Slip.sort]], sorts the list, smallest element first.\n*[[Stash.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Str.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Supplier.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Tap.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Thread.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[ThreadPoolScheduler.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Uni.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Variable.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Version.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[Whatever.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.\n*[[done.sort]], waits until the given supply is done, then creates a supply to which all values seen are emitted in sorted order.\n*[[supplies.sort]], sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.			
AST.map	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_map
map	D								*[[AST.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Any.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Array.map]], invokes &amp;code for each element and gathers the return values in a sequence and returns it.\n*[[Attribute.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Backtrace.map]], invokes &amp;code for each element and gathers the return values in a sequence and returns it.\n*[[Bag.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[BagHash.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[CallFrame.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Callable.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Cancellation.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Capture.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Channel.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Code.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Complex.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Cool.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[CurrentThreadScheduler.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Cursor.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Date.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[DateTime.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Duration.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Exception.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Failure.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[FatRat.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Grammar.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Hash.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Instant.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Int.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Iterable.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Label.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[List.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Lock.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Map.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Match.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Mix.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[MixHash.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Nil.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Num.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Numeric.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[ObjAt.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Pair.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Parameter.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Positional.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Proc.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Promise.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Proxy.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Range.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Rat.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Rational.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Real.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Scalar.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Semaphore.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Seq.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Set.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[SetHash.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Signature.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Slip.map]], invokes &amp;code for each element and gathers the return values in a sequence and returns it.\n*[[Stash.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Str.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Supplier.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Supply.map]], returns a new supply that maps each value of the given supply through &amp;mapper and emits it to the new supply.\n*[[Tap.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Thread.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[ThreadPoolScheduler.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Uni.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Variable.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Version.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[Whatever.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.\n*[[supplies.map]], map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.			
AST.deepmap	A			Perl 6 AST							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_deepmap
deepmap	D								*[[AST.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Any.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Attribute.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Bag.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[BagHash.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[CallFrame.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Callable.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Cancellation.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Capture.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Channel.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Code.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Complex.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Cool.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[CurrentThreadScheduler.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Cursor.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Date.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[DateTime.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Duration.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Exception.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Failure.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[FatRat.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Grammar.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Hash.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Instant.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Int.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Iterable.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Label.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[List.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Lock.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Map.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Match.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Mix.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[MixHash.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Nil.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Num.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Numeric.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[ObjAt.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Pair.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Parameter.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Positional.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Proc.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Promise.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Proxy.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Range.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Rat.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Rational.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Real.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Scalar.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Semaphore.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Seq.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Set.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[SetHash.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Signature.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Stash.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Str.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Supplier.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Tap.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Thread.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[ThreadPoolScheduler.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Uni.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Variable.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Version.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[Whatever.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.\n*[[supplies.deepmap]], deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.			
AST.duckmap	A			Perl 6 AST							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_duckmap
duckmap	D								*[[AST.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Any.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Attribute.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Bag.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[BagHash.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[CallFrame.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Callable.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Cancellation.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Capture.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Channel.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Code.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Complex.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Cool.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[CurrentThreadScheduler.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Cursor.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Date.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[DateTime.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Duration.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Exception.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Failure.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[FatRat.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Grammar.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Hash.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Instant.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Int.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Iterable.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Label.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[List.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Lock.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Map.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Match.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Mix.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[MixHash.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Nil.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Num.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Numeric.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[ObjAt.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Pair.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Parameter.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Positional.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Proc.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Promise.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Proxy.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Range.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Rat.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Rational.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Real.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Scalar.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Semaphore.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Seq.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Set.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[SetHash.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Signature.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Stash.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Str.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Supplier.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Tap.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Thread.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[ThreadPoolScheduler.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Uni.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Variable.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Version.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[Whatever.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.\n*[[supplies.duckmap]], duckmap will apply &amp;block on each element and return a new list with defined return values of the block.			
AST.flat	A			Perl 6 AST							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_flat
flat	D								*[[AST.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Any.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Array.flat]], constructs a list which contains any arguments provided in the order provided, and returns the result of calling the .flat method (inherited from Any) on that list:\n*[[Attribute.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Backtrace.flat]], constructs a list which contains any arguments provided in the order provided, and returns the result of calling the .flat method (inherited from Any) on that list:\n*[[Bag.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[BagHash.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[CallFrame.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Callable.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Cancellation.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Capture.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Channel.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Code.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Complex.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Cool.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[CurrentThreadScheduler.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Cursor.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Date.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[DateTime.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Duration.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Exception.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Failure.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[FatRat.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Grammar.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Hash.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Instant.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Int.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Iterable.flat]], returns another Iterable that flattens out all iterables that the first one returns.\n*[[Label.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[List.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Lock.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Map.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Match.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Mix.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[MixHash.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Nil.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Num.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Numeric.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[ObjAt.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Pair.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Parameter.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Positional.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Proc.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Promise.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Proxy.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Range.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Rat.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Rational.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Real.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Scalar.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Semaphore.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Seq.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Set.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[SetHash.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Signature.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Slip.flat]], constructs a list which contains any arguments provided in the order provided, and returns the result of calling the .flat method (inherited from Any) on that list:\n*[[Stash.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Str.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Supplier.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Supply.flat]], creates a supply on which all of the values seen in the given supply are flattened before being emitted again.\n*[[Tap.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Thread.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[ThreadPoolScheduler.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Uni.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Variable.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Version.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Whatever.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[supplies.flat]], interprets the invocant as a list, flattens it, and returns that list.			
AST.eager	A			Perl 6 AST							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_eager
eager	D								*[[AST.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Any.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Array.eager]], evaluates all elements in the list eagerly, and returns them as a list.\n*[[Attribute.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Backtrace.eager]], evaluates all elements in the list eagerly, and returns them as a list.\n*[[Bag.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[BagHash.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[CallFrame.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Callable.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Cancellation.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Capture.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Channel.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Code.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Complex.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Cool.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[CurrentThreadScheduler.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Cursor.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Date.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[DateTime.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Duration.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Exception.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Failure.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[FatRat.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Grammar.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Hash.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Instant.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Int.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Iterable.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Label.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[List.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Lock.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Map.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Match.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Mix.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[MixHash.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Nil.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Num.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Numeric.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[ObjAt.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Pair.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Parameter.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Positional.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Proc.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Promise.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Proxy.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Range.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Rat.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Rational.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Real.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Scalar.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Semaphore.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Seq.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Set.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[SetHash.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Signature.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Slip.eager]], evaluates all elements in the list eagerly, and returns them as a list.\n*[[Stash.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Str.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Supplier.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Tap.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Thread.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[ThreadPoolScheduler.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Uni.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Variable.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Version.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[Whatever.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[supplies.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.			
AST.elems	A			Perl 6 AST							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_elems
elems	D								*[[AST.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Any.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Array.elems]], returns the number of elements in the list.\n*[[Attribute.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Backtrace.elems]], returns the number of elements in the list.\n*[[Bag.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[BagHash.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Baggy.elems]], returns the number of elements in the Baggy object without taking the individual elements weight into account.\n*[[Blob.elems]], returns the number of elements of the buffer.\n*[[Buf.elems]], returns the number of elements of the buffer.\n*[[CallFrame.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Callable.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Cancellation.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Capture.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Channel.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Code.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Complex.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Cool.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[CurrentThreadScheduler.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Cursor.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Date.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[DateTime.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Duration.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Exception.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Failure.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[FatRat.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Grammar.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Hash.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Instant.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Int.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Iterable.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Label.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[List.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Lock.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Map.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Match.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Mix.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[MixHash.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Mixy.elems]], returns the number of elements in the Baggy object without taking the individual elements weight into account.\n*[[NFC.elems]], returns the number of codepoints in the invocant.\n*[[NFD.elems]], returns the number of codepoints in the invocant.\n*[[NFKC.elems]], returns the number of codepoints in the invocant.\n*[[NFKD.elems]], returns the number of codepoints in the invocant.\n*[[Nil.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Num.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Numeric.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[ObjAt.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Pair.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Parameter.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Positional.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Proc.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Promise.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Proxy.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Range.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Rat.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Rational.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Real.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Scalar.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Semaphore.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Seq.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Set.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[SetHash.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Setty.elems]], the number of elements of the set.\n*[[Signature.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Slip.elems]], returns the number of elements in the list.\n*[[Stash.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Str.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Supplier.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Supply.elems]], creates a new supply in which changes to the number of values seen are emitted.\n*[[Tap.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Thread.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[ThreadPoolScheduler.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Uni.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Variable.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Version.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Whatever.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[supplies.elems]], interprets the invocant as a list, and returns the number of elements in the list.			
AST.end	A			Perl 6 AST							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_end
end	D								*[[AST.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Any.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Array.end]], returns the index of the last element.\n*[[Attribute.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Backtrace.end]], returns the index of the last element.\n*[[Bag.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[BagHash.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[CallFrame.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Callable.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Cancellation.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Capture.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Channel.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Code.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Complex.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Cool.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[CurrentThreadScheduler.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Cursor.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Date.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[DateTime.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Duration.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Exception.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Failure.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[FatRat.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Grammar.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Hash.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Instant.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Int.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Iterable.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Label.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[List.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Lock.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Map.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Match.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Mix.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[MixHash.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Nil.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Num.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Numeric.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[ObjAt.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Pair.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Parameter.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Positional.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Proc.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Promise.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Proxy.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Range.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Rat.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Rational.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Real.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Scalar.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Semaphore.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Seq.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Set.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[SetHash.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Signature.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Slip.end]], returns the index of the last element.\n*[[Stash.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Str.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Supplier.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Tap.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Thread.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[ThreadPoolScheduler.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Uni.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Variable.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Version.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[Whatever.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[supplies.end]], interprets the invocant as a list, and returns the last index of that list.			
AST.pairup	A			Perl 6 AST							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_method_pairup
pairup	D								*[[AST.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Any.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Attribute.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Bag.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[BagHash.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[CallFrame.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Callable.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Cancellation.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Capture.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Channel.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Code.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Complex.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Cool.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[CurrentThreadScheduler.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Cursor.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Date.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[DateTime.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Duration.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Exception.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Failure.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[FatRat.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Grammar.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Hash.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Instant.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Int.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Iterable.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Label.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[List.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Lock.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Map.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Match.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Mix.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[MixHash.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Nil.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Num.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Numeric.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[ObjAt.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Pair.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Parameter.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Positional.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Proc.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Promise.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Proxy.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Range.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Rat.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Rational.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Real.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Scalar.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Semaphore.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Seq.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Set.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[SetHash.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Signature.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Stash.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Str.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Supplier.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Tap.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Thread.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[ThreadPoolScheduler.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Uni.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Variable.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Version.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[Whatever.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.\n*[[supplies.pairup]], interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.			
AST.exit	A			Perl 6 AST							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_sub_exit
exit	D								*[[AST.exit]], exits the current process with return code $status.\n*[[Any.exit]], exits the current process with return code $status.\n*[[Attribute.exit]], exits the current process with return code $status.\n*[[Bag.exit]], exits the current process with return code $status.\n*[[BagHash.exit]], exits the current process with return code $status.\n*[[CallFrame.exit]], exits the current process with return code $status.\n*[[Callable.exit]], exits the current process with return code $status.\n*[[Cancellation.exit]], exits the current process with return code $status.\n*[[Capture.exit]], exits the current process with return code $status.\n*[[Channel.exit]], exits the current process with return code $status.\n*[[Code.exit]], exits the current process with return code $status.\n*[[Complex.exit]], exits the current process with return code $status.\n*[[Cool.exit]], exits the current process with return code $status.\n*[[CurrentThreadScheduler.exit]], exits the current process with return code $status.\n*[[Cursor.exit]], exits the current process with return code $status.\n*[[Date.exit]], exits the current process with return code $status.\n*[[DateTime.exit]], exits the current process with return code $status.\n*[[Duration.exit]], exits the current process with return code $status.\n*[[Exception.exit]], exits the current process with return code $status.\n*[[Failure.exit]], exits the current process with return code $status.\n*[[FatRat.exit]], exits the current process with return code $status.\n*[[Grammar.exit]], exits the current process with return code $status.\n*[[Hash.exit]], exits the current process with return code $status.\n*[[Instant.exit]], exits the current process with return code $status.\n*[[Int.exit]], exits the current process with return code $status.\n*[[Iterable.exit]], exits the current process with return code $status.\n*[[Label.exit]], exits the current process with return code $status.\n*[[List.exit]], exits the current process with return code $status.\n*[[Lock.exit]], exits the current process with return code $status.\n*[[Map.exit]], exits the current process with return code $status.\n*[[Match.exit]], exits the current process with return code $status.\n*[[Mix.exit]], exits the current process with return code $status.\n*[[MixHash.exit]], exits the current process with return code $status.\n*[[Nil.exit]], exits the current process with return code $status.\n*[[Num.exit]], exits the current process with return code $status.\n*[[Numeric.exit]], exits the current process with return code $status.\n*[[ObjAt.exit]], exits the current process with return code $status.\n*[[Pair.exit]], exits the current process with return code $status.\n*[[Parameter.exit]], exits the current process with return code $status.\n*[[Positional.exit]], exits the current process with return code $status.\n*[[Proc.exit]], exits the current process with return code $status.\n*[[Promise.exit]], exits the current process with return code $status.\n*[[Proxy.exit]], exits the current process with return code $status.\n*[[Range.exit]], exits the current process with return code $status.\n*[[Rat.exit]], exits the current process with return code $status.\n*[[Rational.exit]], exits the current process with return code $status.\n*[[Real.exit]], exits the current process with return code $status.\n*[[Scalar.exit]], exits the current process with return code $status.\n*[[Semaphore.exit]], exits the current process with return code $status.\n*[[Seq.exit]], exits the current process with return code $status.\n*[[Set.exit]], exits the current process with return code $status.\n*[[SetHash.exit]], exits the current process with return code $status.\n*[[Signature.exit]], exits the current process with return code $status.\n*[[Stash.exit]], exits the current process with return code $status.\n*[[Str.exit]], exits the current process with return code $status.\n*[[Supplier.exit]], exits the current process with return code $status.\n*[[Tap.exit]], exits the current process with return code $status.\n*[[Thread.exit]], exits the current process with return code $status.\n*[[ThreadPoolScheduler.exit]], exits the current process with return code $status.\n*[[Uni.exit]], exits the current process with return code $status.\n*[[Variable.exit]], exits the current process with return code $status.\n*[[Version.exit]], exits the current process with return code $status.\n*[[Whatever.exit]], exits the current process with return code $status.\n*[[supplies.exit]], exits the current process with return code $status.			
AST.item	A			Perl 6 AST							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Any%29_sub_item
item	D								*[[AST.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Any.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Attribute.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Bag.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[BagHash.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[CallFrame.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Callable.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Cancellation.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Capture.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Channel.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Code.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Complex.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Cool.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[CurrentThreadScheduler.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Cursor.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Date.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[DateTime.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Duration.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Exception.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Failure.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[FatRat.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Grammar.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Hash.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Instant.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Int.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Iterable.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Junction.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Label.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[List.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Lock.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Map.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Match.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Mix.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[MixHash.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Mu.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Nil.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Num.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Numeric.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[ObjAt.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Pair.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Parameter.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Positional.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Proc.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Promise.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Proxy.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Range.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Rat.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Rational.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Real.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Scalar.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Semaphore.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Seq.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Set.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[SetHash.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Signature.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Stash.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Str.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Supplier.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Tap.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Thread.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[ThreadPoolScheduler.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Uni.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Variable.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Version.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[Whatever.item]], forces the invocant to be evaluated in item context and returns the value of it.\n*[[supplies.item]], forces the invocant to be evaluated in item context and returns the value of it.			
AST.defined	A			Perl 6 AST							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_routine_defined
defined	D								*[[AST.defined]], returns False on the type object, and True otherwise.\n*[[Any.defined]], returns False on the type object, and True otherwise.\n*[[Attribute.defined]], returns False on the type object, and True otherwise.\n*[[Bag.defined]], returns False on the type object, and True otherwise.\n*[[BagHash.defined]], returns False on the type object, and True otherwise.\n*[[CallFrame.defined]], returns False on the type object, and True otherwise.\n*[[Callable.defined]], returns False on the type object, and True otherwise.\n*[[Cancellation.defined]], returns False on the type object, and True otherwise.\n*[[Capture.defined]], returns False on the type object, and True otherwise.\n*[[Channel.defined]], returns False on the type object, and True otherwise.\n*[[Code.defined]], returns False on the type object, and True otherwise.\n*[[Complex.defined]], returns False on the type object, and True otherwise.\n*[[Cool.defined]], returns False on the type object, and True otherwise.\n*[[CurrentThreadScheduler.defined]], returns False on the type object, and True otherwise.\n*[[Cursor.defined]], returns False on the type object, and True otherwise.\n*[[Date.defined]], returns False on the type object, and True otherwise.\n*[[DateTime.defined]], returns False on the type object, and True otherwise.\n*[[Duration.defined]], returns False on the type object, and True otherwise.\n*[[Exception.defined]], returns False on the type object, and True otherwise.\n*[[Failure.defined]], returns False on the type object, and True otherwise.\n*[[FatRat.defined]], returns False on the type object, and True otherwise.\n*[[Grammar.defined]], returns False on the type object, and True otherwise.\n*[[Hash.defined]], returns False on the type object, and True otherwise.\n*[[Instant.defined]], returns False on the type object, and True otherwise.\n*[[Int.defined]], returns False on the type object, and True otherwise.\n*[[Iterable.defined]], returns False on the type object, and True otherwise.\n*[[Junction.defined]], returns False on the type object, and True otherwise.\n*[[Label.defined]], returns False on the type object, and True otherwise.\n*[[List.defined]], returns False on the type object, and True otherwise.\n*[[Lock.defined]], returns False on the type object, and True otherwise.\n*[[Map.defined]], returns False on the type object, and True otherwise.\n*[[Match.defined]], returns False on the type object, and True otherwise.\n*[[Mix.defined]], returns False on the type object, and True otherwise.\n*[[MixHash.defined]], returns False on the type object, and True otherwise.\n*[[Mu.defined]], returns False on the type object, and True otherwise.\n*[[Nil.defined]], returns False on the type object, and True otherwise.\n*[[Num.defined]], returns False on the type object, and True otherwise.\n*[[Numeric.defined]], returns False on the type object, and True otherwise.\n*[[ObjAt.defined]], returns False on the type object, and True otherwise.\n*[[Pair.defined]], returns False on the type object, and True otherwise.\n*[[Parameter.defined]], returns False on the type object, and True otherwise.\n*[[Positional.defined]], returns False on the type object, and True otherwise.\n*[[Proc.defined]], returns False on the type object, and True otherwise.\n*[[Promise.defined]], returns False on the type object, and True otherwise.\n*[[Proxy.defined]], returns False on the type object, and True otherwise.\n*[[Range.defined]], returns False on the type object, and True otherwise.\n*[[Rat.defined]], returns False on the type object, and True otherwise.\n*[[Rational.defined]], returns False on the type object, and True otherwise.\n*[[Real.defined]], returns False on the type object, and True otherwise.\n*[[Scalar.defined]], returns False on the type object, and True otherwise.\n*[[Semaphore.defined]], returns False on the type object, and True otherwise.\n*[[Seq.defined]], returns False on the type object, and True otherwise.\n*[[Set.defined]], returns False on the type object, and True otherwise.\n*[[SetHash.defined]], returns False on the type object, and True otherwise.\n*[[Signature.defined]], returns False on the type object, and True otherwise.\n*[[Stash.defined]], returns False on the type object, and True otherwise.\n*[[Str.defined]], returns False on the type object, and True otherwise.\n*[[Supplier.defined]], returns False on the type object, and True otherwise.\n*[[Tap.defined]], returns False on the type object, and True otherwise.\n*[[Thread.defined]], returns False on the type object, and True otherwise.\n*[[ThreadPoolScheduler.defined]], returns False on the type object, and True otherwise.\n*[[Uni.defined]], returns False on the type object, and True otherwise.\n*[[Variable.defined]], returns False on the type object, and True otherwise.\n*[[Version.defined]], returns False on the type object, and True otherwise.\n*[[Whatever.defined]], returns False on the type object, and True otherwise.\n*[[supplies.defined]], returns False on the type object, and True otherwise.			
AST.isa	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_routine_isa
isa	D								*[[AST.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Any.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Attribute.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Bag.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[BagHash.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[CallFrame.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Callable.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Cancellation.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Capture.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Channel.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Code.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Complex.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Cool.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[CurrentThreadScheduler.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Cursor.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Date.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[DateTime.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Duration.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Exception.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Failure.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[FatRat.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Grammar.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Hash.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Instant.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Int.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Iterable.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Junction.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Label.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[List.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Lock.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Map.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Match.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Mix.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[MixHash.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Mu.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Nil.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Num.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Numeric.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[ObjAt.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Pair.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Parameter.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Positional.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Proc.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Promise.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Proxy.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Range.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Rat.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Rational.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Real.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Scalar.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Semaphore.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Seq.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Set.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[SetHash.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Signature.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Stash.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Str.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Supplier.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Tap.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Thread.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[ThreadPoolScheduler.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Uni.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Variable.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Version.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[Whatever.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.\n*[[supplies.isa]], returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.			
AST.does	A			Perl 6 AST							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_routine_does
does	D								*[[AST.does]], returns True if and only if the invocant conforms to type $type.\n*[[Any.does]], returns True if and only if the invocant conforms to type $type.\n*[[Attribute.does]], returns True if and only if the invocant conforms to type $type.\n*[[Bag.does]], returns True if and only if the invocant conforms to type $type.\n*[[BagHash.does]], returns True if and only if the invocant conforms to type $type.\n*[[CallFrame.does]], returns True if and only if the invocant conforms to type $type.\n*[[Callable.does]], returns True if and only if the invocant conforms to type $type.\n*[[Cancellation.does]], returns True if and only if the invocant conforms to type $type.\n*[[Capture.does]], returns True if and only if the invocant conforms to type $type.\n*[[Channel.does]], returns True if and only if the invocant conforms to type $type.\n*[[Code.does]], returns True if and only if the invocant conforms to type $type.\n*[[Complex.does]], returns True if and only if the invocant conforms to type $type.\n*[[Cool.does]], returns True if and only if the invocant conforms to type $type.\n*[[CurrentThreadScheduler.does]], returns True if and only if the invocant conforms to type $type.\n*[[Cursor.does]], returns True if and only if the invocant conforms to type $type.\n*[[Date.does]], returns True if and only if the invocant conforms to type $type.\n*[[DateTime.does]], returns True if and only if the invocant conforms to type $type.\n*[[Duration.does]], returns True if and only if the invocant conforms to type $type.\n*[[Exception.does]], returns True if and only if the invocant conforms to type $type.\n*[[Failure.does]], returns True if and only if the invocant conforms to type $type.\n*[[FatRat.does]], returns True if and only if the invocant conforms to type $type.\n*[[Grammar.does]], returns True if and only if the invocant conforms to type $type.\n*[[Hash.does]], returns True if and only if the invocant conforms to type $type.\n*[[Instant.does]], returns True if and only if the invocant conforms to type $type.\n*[[Int.does]], returns True if and only if the invocant conforms to type $type.\n*[[Iterable.does]], returns True if and only if the invocant conforms to type $type.\n*[[Junction.does]], returns True if and only if the invocant conforms to type $type.\n*[[Label.does]], returns True if and only if the invocant conforms to type $type.\n*[[List.does]], returns True if and only if the invocant conforms to type $type.\n*[[Lock.does]], returns True if and only if the invocant conforms to type $type.\n*[[Map.does]], returns True if and only if the invocant conforms to type $type.\n*[[Match.does]], returns True if and only if the invocant conforms to type $type.\n*[[Mix.does]], returns True if and only if the invocant conforms to type $type.\n*[[MixHash.does]], returns True if and only if the invocant conforms to type $type.\n*[[Mu.does]], returns True if and only if the invocant conforms to type $type.\n*[[Nil.does]], returns True if and only if the invocant conforms to type $type.\n*[[Num.does]], returns True if and only if the invocant conforms to type $type.\n*[[Numeric.does]], returns True if and only if the invocant conforms to type $type.\n*[[ObjAt.does]], returns True if and only if the invocant conforms to type $type.\n*[[Pair.does]], returns True if and only if the invocant conforms to type $type.\n*[[Parameter.does]], returns True if and only if the invocant conforms to type $type.\n*[[Positional.does]], returns True if and only if the invocant conforms to type $type.\n*[[Proc.does]], returns True if and only if the invocant conforms to type $type.\n*[[Promise.does]], returns True if and only if the invocant conforms to type $type.\n*[[Proxy.does]], returns True if and only if the invocant conforms to type $type.\n*[[Range.does]], returns True if and only if the invocant conforms to type $type.\n*[[Rat.does]], returns True if and only if the invocant conforms to type $type.\n*[[Rational.does]], returns True if and only if the invocant conforms to type $type.\n*[[Real.does]], returns True if and only if the invocant conforms to type $type.\n*[[Scalar.does]], returns True if and only if the invocant conforms to type $type.\n*[[Semaphore.does]], returns True if and only if the invocant conforms to type $type.\n*[[Seq.does]], returns True if and only if the invocant conforms to type $type.\n*[[Set.does]], returns True if and only if the invocant conforms to type $type.\n*[[SetHash.does]], returns True if and only if the invocant conforms to type $type.\n*[[Signature.does]], returns True if and only if the invocant conforms to type $type.\n*[[Stash.does]], returns True if and only if the invocant conforms to type $type.\n*[[Str.does]], returns True if and only if the invocant conforms to type $type.\n*[[Supplier.does]], returns True if and only if the invocant conforms to type $type.\n*[[Tap.does]], returns True if and only if the invocant conforms to type $type.\n*[[Thread.does]], returns True if and only if the invocant conforms to type $type.\n*[[ThreadPoolScheduler.does]], returns True if and only if the invocant conforms to type $type.\n*[[Uni.does]], returns True if and only if the invocant conforms to type $type.\n*[[Variable.does]], returns True if and only if the invocant conforms to type $type.\n*[[Version.does]], returns True if and only if the invocant conforms to type $type.\n*[[Whatever.does]], returns True if and only if the invocant conforms to type $type.\n*[[supplies.does]], returns True if and only if the invocant conforms to type $type.			
AST.Bool	A			Perl 6 AST							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_routine_Bool
AST.Str	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_Str
AST.gist	A			Perl 6 AST							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_routine_gist
gist	D								*[[AST.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Any.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Attribute.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Bag.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[BagHash.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[CallFrame.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Callable.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Cancellation.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Capture.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Channel.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Code.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Complex.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[ComplexStr.gist]], returns a string representation of the form "1+2i", without internal spaces.\n*[[Cool.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[CurrentThreadScheduler.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Cursor.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Date.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[DateTime.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Duration.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Exception.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Failure.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[FatRat.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Grammar.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Hash.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Instant.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Int.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Iterable.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Junction.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Label.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[List.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Lock.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Map.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Match.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Mix.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[MixHash.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Mu.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Nil.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Num.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Numeric.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[ObjAt.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Pair.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Parameter.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Positional.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Proc.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Promise.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Proxy.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Range.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Rat.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Rational.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Real.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Scalar.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Semaphore.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Seq.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Set.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[SetHash.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Signature.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Stash.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Str.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Supplier.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Tap.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Thread.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[ThreadPoolScheduler.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Uni.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Variable.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Version.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Whatever.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[supplies.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.			
AST.perl	A			Perl 6 AST							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_routine_perl
perl	D								*[[AST.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Any.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Attribute.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Bag.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[BagHash.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[CallFrame.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Callable.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Cancellation.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Capture.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Channel.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Code.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Complex.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[ComplexStr.perl]], returns a string representation corresponding to the unambiguous val()-based representation of complex literals, of the form "&lt;1+2i&gt;", without internal spaces, and including the angles that keep the + from being treated as a normal addition operator.\n*[[Cool.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[CurrentThreadScheduler.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Cursor.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Date.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[DateTime.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Duration.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Exception.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Failure.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[FatRat.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Grammar.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Hash.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Instant.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Int.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Iterable.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Junction.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Label.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[List.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Lock.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Map.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Match.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Mix.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[MixHash.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Mu.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Nil.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Num.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Numeric.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[ObjAt.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Pair.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Parameter.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Positional.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Proc.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Promise.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Proxy.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Range.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Rat.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[RatStr.perl]], returns a string representation corresponding to the unambiguous val()-based representation of rational literals.\n*[[Rational.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Real.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Scalar.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Semaphore.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Seq.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Set.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[SetHash.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Signature.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Stash.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Str.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Supplier.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Tap.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Thread.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[ThreadPoolScheduler.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Uni.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Variable.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Version.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[Whatever.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).\n*[[supplies.perl]], returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).			
AST.item	A			Perl 6 AST							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_item
AST.clone	A			Perl 6 AST							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_clone
clone	D								*[[AST.clone]], creates a shallow clone of the invocant.\n*[[Any.clone]], creates a shallow clone of the invocant.\n*[[Attribute.clone]], creates a shallow clone of the invocant.\n*[[Bag.clone]], creates a shallow clone of the invocant.\n*[[BagHash.clone]], creates a shallow clone of the invocant.\n*[[CallFrame.clone]], creates a shallow clone of the invocant.\n*[[Callable.clone]], creates a shallow clone of the invocant.\n*[[Cancellation.clone]], creates a shallow clone of the invocant.\n*[[Capture.clone]], creates a shallow clone of the invocant.\n*[[Channel.clone]], creates a shallow clone of the invocant.\n*[[Code.clone]], creates a shallow clone of the invocant.\n*[[Complex.clone]], creates a shallow clone of the invocant.\n*[[Cool.clone]], creates a shallow clone of the invocant.\n*[[CurrentThreadScheduler.clone]], creates a shallow clone of the invocant.\n*[[Cursor.clone]], creates a shallow clone of the invocant.\n*[[Date.clone]], creates a shallow clone of the invocant.\n*[[DateTime.clone]], creates a shallow clone of the invocant.\n*[[Duration.clone]], creates a shallow clone of the invocant.\n*[[Exception.clone]], creates a shallow clone of the invocant.\n*[[Failure.clone]], creates a shallow clone of the invocant.\n*[[FatRat.clone]], creates a shallow clone of the invocant.\n*[[Grammar.clone]], creates a shallow clone of the invocant.\n*[[Hash.clone]], creates a shallow clone of the invocant.\n*[[Instant.clone]], creates a shallow clone of the invocant.\n*[[Int.clone]], creates a shallow clone of the invocant.\n*[[Iterable.clone]], creates a shallow clone of the invocant.\n*[[Junction.clone]], creates a shallow clone of the invocant.\n*[[Label.clone]], creates a shallow clone of the invocant.\n*[[List.clone]], creates a shallow clone of the invocant.\n*[[Lock.clone]], creates a shallow clone of the invocant.\n*[[Map.clone]], creates a shallow clone of the invocant.\n*[[Match.clone]], creates a shallow clone of the invocant.\n*[[Mix.clone]], creates a shallow clone of the invocant.\n*[[MixHash.clone]], creates a shallow clone of the invocant.\n*[[Mu.clone]], creates a shallow clone of the invocant.\n*[[Nil.clone]], creates a shallow clone of the invocant.\n*[[Num.clone]], creates a shallow clone of the invocant.\n*[[Numeric.clone]], creates a shallow clone of the invocant.\n*[[ObjAt.clone]], creates a shallow clone of the invocant.\n*[[Pair.clone]], creates a shallow clone of the invocant.\n*[[Parameter.clone]], creates a shallow clone of the invocant.\n*[[Positional.clone]], creates a shallow clone of the invocant.\n*[[Proc.clone]], creates a shallow clone of the invocant.\n*[[Promise.clone]], creates a shallow clone of the invocant.\n*[[Proxy.clone]], creates a shallow clone of the invocant.\n*[[Range.clone]], creates a shallow clone of the invocant.\n*[[Rat.clone]], creates a shallow clone of the invocant.\n*[[Rational.clone]], creates a shallow clone of the invocant.\n*[[Real.clone]], creates a shallow clone of the invocant.\n*[[Scalar.clone]], creates a shallow clone of the invocant.\n*[[Semaphore.clone]], creates a shallow clone of the invocant.\n*[[Seq.clone]], creates a shallow clone of the invocant.\n*[[Set.clone]], creates a shallow clone of the invocant.\n*[[SetHash.clone]], creates a shallow clone of the invocant.\n*[[Signature.clone]], creates a shallow clone of the invocant.\n*[[Stash.clone]], creates a shallow clone of the invocant.\n*[[Str.clone]], creates a shallow clone of the invocant.\n*[[Supplier.clone]], creates a shallow clone of the invocant.\n*[[Tap.clone]], creates a shallow clone of the invocant.\n*[[Thread.clone]], creates a shallow clone of the invocant.\n*[[ThreadPoolScheduler.clone]], creates a shallow clone of the invocant.\n*[[Uni.clone]], creates a shallow clone of the invocant.\n*[[Variable.clone]], creates a shallow clone of the invocant.\n*[[Version.clone]], creates a shallow clone of the invocant.\n*[[Whatever.clone]], creates a shallow clone of the invocant.\n*[[supplies.clone]], creates a shallow clone of the invocant.			
AST.new	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_new
new	D								*[[AST.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Any.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Attribute.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Backtrace.new]], creates a new backtrace, using its calling location as the origin of the backtrace.\n*[[Bag.new]], default method for constructing (create + initialize) new objects of a class.\n*[[BagHash.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Blob.new]], creates a Blob from a list of integers.\n*[[Buf.new]], creates a Blob from a list of integers.\n*[[CallFrame.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Callable.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Cancellation.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Capture.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Channel.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Code.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Complex.new]], default method for constructing (create + initialize) new objects of a class.\n*[[ComplexStr.new]], creates a new Complex object from real and imaginary parts.\n*[[Cool.new]], default method for constructing (create + initialize) new objects of a class.\n*[[CurrentThreadScheduler.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Cursor.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Date.new]], default method for constructing (create + initialize) new objects of a class.\n*[[DateTime.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Duration.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Exception.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Failure.new]], default method for constructing (create + initialize) new objects of a class.\n*[[FatRat.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Grammar.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Hash.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Instant.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Int.new]], default method for constructing (create + initialize) new objects of a class.\n*[[IntStr.new]], the constructor requires both the Int and the Str value, when constructing one directly the values can be whatever is required:\n*[[Iterable.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Junction.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Label.new]], default method for constructing (create + initialize) new objects of a class.\n*[[List.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Lock.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Map.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Match.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Mix.new]], default method for constructing (create + initialize) new objects of a class.\n*[[MixHash.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Mu.new]], default method for constructing (create + initialize) new objects of a class.\n*[[NFC.new]], creates a new Uni instance from the given codepoint numbers.\n*[[NFD.new]], creates a new Uni instance from the given codepoint numbers.\n*[[NFKC.new]], creates a new Uni instance from the given codepoint numbers.\n*[[NFKD.new]], creates a new Uni instance from the given codepoint numbers.\n*[[Nil.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Num.new]], default method for constructing (create + initialize) new objects of a class.\n*[[NumStr.new]], the constructor requires both the Num and the Str value, when constructing one directly the values can be whatever is required:\n*[[Numeric.new]], default method for constructing (create + initialize) new objects of a class.\n*[[ObjAt.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Pair.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Parameter.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Positional.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Proc.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Promise.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Proxy.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Range.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Rat.new]], default method for constructing (create + initialize) new objects of a class.\n*[[RatStr.new]], the constructor requires both the Rat and the Str value, when constructing one directly the values can be whatever is required:\n*[[Rational.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Real.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Scalar.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Semaphore.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Seq.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Set.new]], default method for constructing (create + initialize) new objects of a class.\n*[[SetHash.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Signature.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Stash.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Str.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Supplier.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Tap.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Thread.new]], default method for constructing (create + initialize) new objects of a class.\n*[[ThreadPoolScheduler.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Uni.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Variable.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Version.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Whatever.new]], default method for constructing (create + initialize) new objects of a class.\n*[[supplies.new]], default method for constructing (create + initialize) new objects of a class.			
AST.bless	A			Perl 6 AST							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_bless
bless	D								*[[AST.bless]], lower-level object construction method than new.\n*[[Any.bless]], lower-level object construction method than new.\n*[[Attribute.bless]], lower-level object construction method than new.\n*[[Bag.bless]], lower-level object construction method than new.\n*[[BagHash.bless]], lower-level object construction method than new.\n*[[CallFrame.bless]], lower-level object construction method than new.\n*[[Callable.bless]], lower-level object construction method than new.\n*[[Cancellation.bless]], lower-level object construction method than new.\n*[[Capture.bless]], lower-level object construction method than new.\n*[[Channel.bless]], lower-level object construction method than new.\n*[[Code.bless]], lower-level object construction method than new.\n*[[Complex.bless]], lower-level object construction method than new.\n*[[Cool.bless]], lower-level object construction method than new.\n*[[CurrentThreadScheduler.bless]], lower-level object construction method than new.\n*[[Cursor.bless]], lower-level object construction method than new.\n*[[Date.bless]], lower-level object construction method than new.\n*[[DateTime.bless]], lower-level object construction method than new.\n*[[Duration.bless]], lower-level object construction method than new.\n*[[Exception.bless]], lower-level object construction method than new.\n*[[Failure.bless]], lower-level object construction method than new.\n*[[FatRat.bless]], lower-level object construction method than new.\n*[[Grammar.bless]], lower-level object construction method than new.\n*[[Hash.bless]], lower-level object construction method than new.\n*[[Instant.bless]], lower-level object construction method than new.\n*[[Int.bless]], lower-level object construction method than new.\n*[[Iterable.bless]], lower-level object construction method than new.\n*[[Junction.bless]], lower-level object construction method than new.\n*[[Label.bless]], lower-level object construction method than new.\n*[[List.bless]], lower-level object construction method than new.\n*[[Lock.bless]], lower-level object construction method than new.\n*[[Map.bless]], lower-level object construction method than new.\n*[[Match.bless]], lower-level object construction method than new.\n*[[Mix.bless]], lower-level object construction method than new.\n*[[MixHash.bless]], lower-level object construction method than new.\n*[[Mu.bless]], lower-level object construction method than new.\n*[[Nil.bless]], lower-level object construction method than new.\n*[[Num.bless]], lower-level object construction method than new.\n*[[Numeric.bless]], lower-level object construction method than new.\n*[[ObjAt.bless]], lower-level object construction method than new.\n*[[Pair.bless]], lower-level object construction method than new.\n*[[Parameter.bless]], lower-level object construction method than new.\n*[[Positional.bless]], lower-level object construction method than new.\n*[[Proc.bless]], lower-level object construction method than new.\n*[[Promise.bless]], lower-level object construction method than new.\n*[[Proxy.bless]], lower-level object construction method than new.\n*[[Range.bless]], lower-level object construction method than new.\n*[[Rat.bless]], lower-level object construction method than new.\n*[[Rational.bless]], lower-level object construction method than new.\n*[[Real.bless]], lower-level object construction method than new.\n*[[Scalar.bless]], lower-level object construction method than new.\n*[[Semaphore.bless]], lower-level object construction method than new.\n*[[Seq.bless]], lower-level object construction method than new.\n*[[Set.bless]], lower-level object construction method than new.\n*[[SetHash.bless]], lower-level object construction method than new.\n*[[Signature.bless]], lower-level object construction method than new.\n*[[Stash.bless]], lower-level object construction method than new.\n*[[Str.bless]], lower-level object construction method than new.\n*[[Supplier.bless]], lower-level object construction method than new.\n*[[Tap.bless]], lower-level object construction method than new.\n*[[Thread.bless]], lower-level object construction method than new.\n*[[ThreadPoolScheduler.bless]], lower-level object construction method than new.\n*[[Uni.bless]], lower-level object construction method than new.\n*[[Variable.bless]], lower-level object construction method than new.\n*[[Version.bless]], lower-level object construction method than new.\n*[[Whatever.bless]], lower-level object construction method than new.\n*[[supplies.bless]], lower-level object construction method than new.			
AST.CREATE	A			Perl 6 AST							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_CREATE
CREATE	D								*[[AST.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Any.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Attribute.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Bag.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[BagHash.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[CallFrame.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Callable.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Cancellation.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Capture.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Channel.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Code.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Complex.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Cool.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[CurrentThreadScheduler.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Cursor.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Date.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[DateTime.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Duration.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Exception.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Failure.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[FatRat.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Grammar.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Hash.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Instant.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Int.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Iterable.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Junction.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Label.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[List.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Lock.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Map.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Match.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Mix.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[MixHash.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Mu.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Nil.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Num.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Numeric.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[ObjAt.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Pair.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Parameter.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Positional.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Proc.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Promise.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Proxy.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Range.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Rat.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Rational.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Real.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Scalar.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Semaphore.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Seq.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Set.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[SetHash.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Signature.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Stash.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Str.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Supplier.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Tap.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Thread.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[ThreadPoolScheduler.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Uni.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Variable.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Version.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[Whatever.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.\n*[[supplies.CREATE]], allocates a new object of the same type as the invocant, without initializing any attributes.			
AST.print	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_print
print	D								*[[AST.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Any.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Attribute.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Bag.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[BagHash.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[CallFrame.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Callable.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Cancellation.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Capture.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Channel.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Code.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Complex.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Cool.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[CurrentThreadScheduler.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Cursor.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Date.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[DateTime.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Duration.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Exception.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Failure.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[FatRat.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Grammar.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Hash.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[IO.print]], print the given text on $*OUT (standard output), e.g.:\n*[[Instant.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Int.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Iterable.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Junction.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Label.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[List.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Lock.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Map.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Match.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Mix.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[MixHash.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Mu.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Nil.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Num.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Numeric.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[ObjAt.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Pair.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Parameter.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Positional.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Proc.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Promise.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Proxy.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Range.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Rat.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Rational.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Real.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Scalar.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Semaphore.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Seq.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Set.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[SetHash.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Signature.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Stash.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Str.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Supplier.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Tap.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Thread.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[ThreadPoolScheduler.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Uni.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Variable.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Version.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[Whatever.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.\n*[[supplies.print]], prints value to $*OUT after stringification using .Str method without adding a newline at end.			
AST.put	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_put
put	D								*[[AST.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Any.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Attribute.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Bag.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[BagHash.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[CallFrame.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Callable.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Cancellation.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Capture.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Channel.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Code.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Complex.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Cool.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[CurrentThreadScheduler.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Cursor.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Date.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[DateTime.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Duration.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Exception.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Failure.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[FatRat.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Grammar.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Hash.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[IO.put]], print the given text on $*OUT (standard output) with appended $*OUT.nl-out.\n*[[Instant.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Int.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Iterable.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Junction.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Label.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[List.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Lock.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Map.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Match.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Mix.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[MixHash.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Mu.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Nil.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Num.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Numeric.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[ObjAt.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Pair.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Parameter.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Positional.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Proc.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Promise.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Proxy.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Range.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Rat.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Rational.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Real.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Scalar.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Semaphore.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Seq.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Set.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[SetHash.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Signature.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Stash.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Str.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Supplier.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Tap.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Thread.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[ThreadPoolScheduler.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Uni.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Variable.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Version.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[Whatever.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.\n*[[supplies.put]], prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.			
AST.say	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_say
say	D								*[[AST.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Any.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Attribute.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Bag.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[BagHash.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[CallFrame.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Callable.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Cancellation.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Capture.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Channel.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Code.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Complex.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Cool.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[CurrentThreadScheduler.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Cursor.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Date.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[DateTime.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Duration.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Exception.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Failure.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[FatRat.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Grammar.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Hash.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[IO.say]], print the given text in human readable form, followed by a $*OUT.nl-out (platform dependent newline) on $*OUT (standard output).\n*[[Instant.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Int.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Iterable.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Junction.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Label.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[List.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Lock.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Map.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Match.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Mix.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[MixHash.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Mu.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Nil.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Num.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Numeric.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[ObjAt.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Pair.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Parameter.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Positional.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Proc.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Promise.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Proxy.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Range.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Rat.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Rational.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Real.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Scalar.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Semaphore.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Seq.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Set.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[SetHash.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Signature.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Stash.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Str.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Supplier.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Tap.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Thread.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[ThreadPoolScheduler.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Uni.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Variable.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Version.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Whatever.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[supplies.say]], prints value to $*OUT after stringification using .gist method with newline at end.			
AST.ACCEPTS	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_ACCEPTS
AST.WHICH	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_WHICH
WHICH	D								*[[AST.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Any.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Attribute.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Bag.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[BagHash.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[CallFrame.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Callable.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Cancellation.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Capture.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Channel.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Code.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Complex.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Cool.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[CurrentThreadScheduler.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Cursor.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Date.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[DateTime.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Duration.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Exception.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Failure.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[FatRat.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Grammar.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Hash.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Instant.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Int.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Iterable.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Junction.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Label.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[List.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Lock.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Map.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Match.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Mix.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[MixHash.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Mu.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Nil.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Num.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Numeric.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[ObjAt.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Pair.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Parameter.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Positional.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Proc.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Promise.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Proxy.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Range.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Rat.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Rational.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Real.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Scalar.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Semaphore.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Seq.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Set.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[SetHash.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Signature.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Stash.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Str.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Supplier.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Tap.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Thread.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[ThreadPoolScheduler.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Uni.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Variable.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Version.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[Whatever.WHICH]], returns an object of type ObjAt which uniquely identifies the object.\n*[[supplies.WHICH]], returns an object of type ObjAt which uniquely identifies the object.			
AST.WHERE	A			Perl 6 AST							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_WHERE
WHERE	D								*[[AST.WHERE]], returns an Int representing the memory address of the object.\n*[[Any.WHERE]], returns an Int representing the memory address of the object.\n*[[Attribute.WHERE]], returns an Int representing the memory address of the object.\n*[[Bag.WHERE]], returns an Int representing the memory address of the object.\n*[[BagHash.WHERE]], returns an Int representing the memory address of the object.\n*[[CallFrame.WHERE]], returns an Int representing the memory address of the object.\n*[[Callable.WHERE]], returns an Int representing the memory address of the object.\n*[[Cancellation.WHERE]], returns an Int representing the memory address of the object.\n*[[Capture.WHERE]], returns an Int representing the memory address of the object.\n*[[Channel.WHERE]], returns an Int representing the memory address of the object.\n*[[Code.WHERE]], returns an Int representing the memory address of the object.\n*[[Complex.WHERE]], returns an Int representing the memory address of the object.\n*[[Cool.WHERE]], returns an Int representing the memory address of the object.\n*[[CurrentThreadScheduler.WHERE]], returns an Int representing the memory address of the object.\n*[[Cursor.WHERE]], returns an Int representing the memory address of the object.\n*[[Date.WHERE]], returns an Int representing the memory address of the object.\n*[[DateTime.WHERE]], returns an Int representing the memory address of the object.\n*[[Duration.WHERE]], returns an Int representing the memory address of the object.\n*[[Exception.WHERE]], returns an Int representing the memory address of the object.\n*[[Failure.WHERE]], returns an Int representing the memory address of the object.\n*[[FatRat.WHERE]], returns an Int representing the memory address of the object.\n*[[Grammar.WHERE]], returns an Int representing the memory address of the object.\n*[[Hash.WHERE]], returns an Int representing the memory address of the object.\n*[[Instant.WHERE]], returns an Int representing the memory address of the object.\n*[[Int.WHERE]], returns an Int representing the memory address of the object.\n*[[Iterable.WHERE]], returns an Int representing the memory address of the object.\n*[[Junction.WHERE]], returns an Int representing the memory address of the object.\n*[[Label.WHERE]], returns an Int representing the memory address of the object.\n*[[List.WHERE]], returns an Int representing the memory address of the object.\n*[[Lock.WHERE]], returns an Int representing the memory address of the object.\n*[[Map.WHERE]], returns an Int representing the memory address of the object.\n*[[Match.WHERE]], returns an Int representing the memory address of the object.\n*[[Mix.WHERE]], returns an Int representing the memory address of the object.\n*[[MixHash.WHERE]], returns an Int representing the memory address of the object.\n*[[Mu.WHERE]], returns an Int representing the memory address of the object.\n*[[Nil.WHERE]], returns an Int representing the memory address of the object.\n*[[Num.WHERE]], returns an Int representing the memory address of the object.\n*[[Numeric.WHERE]], returns an Int representing the memory address of the object.\n*[[ObjAt.WHERE]], returns an Int representing the memory address of the object.\n*[[Pair.WHERE]], returns an Int representing the memory address of the object.\n*[[Parameter.WHERE]], returns an Int representing the memory address of the object.\n*[[Positional.WHERE]], returns an Int representing the memory address of the object.\n*[[Proc.WHERE]], returns an Int representing the memory address of the object.\n*[[Promise.WHERE]], returns an Int representing the memory address of the object.\n*[[Proxy.WHERE]], returns an Int representing the memory address of the object.\n*[[Range.WHERE]], returns an Int representing the memory address of the object.\n*[[Rat.WHERE]], returns an Int representing the memory address of the object.\n*[[Rational.WHERE]], returns an Int representing the memory address of the object.\n*[[Real.WHERE]], returns an Int representing the memory address of the object.\n*[[Scalar.WHERE]], returns an Int representing the memory address of the object.\n*[[Semaphore.WHERE]], returns an Int representing the memory address of the object.\n*[[Seq.WHERE]], returns an Int representing the memory address of the object.\n*[[Set.WHERE]], returns an Int representing the memory address of the object.\n*[[SetHash.WHERE]], returns an Int representing the memory address of the object.\n*[[Signature.WHERE]], returns an Int representing the memory address of the object.\n*[[Stash.WHERE]], returns an Int representing the memory address of the object.\n*[[Str.WHERE]], returns an Int representing the memory address of the object.\n*[[Supplier.WHERE]], returns an Int representing the memory address of the object.\n*[[Tap.WHERE]], returns an Int representing the memory address of the object.\n*[[Thread.WHERE]], returns an Int representing the memory address of the object.\n*[[ThreadPoolScheduler.WHERE]], returns an Int representing the memory address of the object.\n*[[Uni.WHERE]], returns an Int representing the memory address of the object.\n*[[Variable.WHERE]], returns an Int representing the memory address of the object.\n*[[Version.WHERE]], returns an Int representing the memory address of the object.\n*[[Whatever.WHERE]], returns an Int representing the memory address of the object.\n*[[supplies.WHERE]], returns an Int representing the memory address of the object.			
AST.WHY	A			Perl 6 AST							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_WHY
WHY	D								*[[AST.WHY]], returns the attached Pod value.\n*[[Any.WHY]], returns the attached Pod value.\n*[[Attribute.WHY]], returns the attached Pod value.\n*[[Bag.WHY]], returns the attached Pod value.\n*[[BagHash.WHY]], returns the attached Pod value.\n*[[CallFrame.WHY]], returns the attached Pod value.\n*[[Callable.WHY]], returns the attached Pod value.\n*[[Cancellation.WHY]], returns the attached Pod value.\n*[[Capture.WHY]], returns the attached Pod value.\n*[[Channel.WHY]], returns the attached Pod value.\n*[[Code.WHY]], returns the attached Pod value.\n*[[Complex.WHY]], returns the attached Pod value.\n*[[Cool.WHY]], returns the attached Pod value.\n*[[CurrentThreadScheduler.WHY]], returns the attached Pod value.\n*[[Cursor.WHY]], returns the attached Pod value.\n*[[Date.WHY]], returns the attached Pod value.\n*[[DateTime.WHY]], returns the attached Pod value.\n*[[Duration.WHY]], returns the attached Pod value.\n*[[Exception.WHY]], returns the attached Pod value.\n*[[Failure.WHY]], returns the attached Pod value.\n*[[FatRat.WHY]], returns the attached Pod value.\n*[[Grammar.WHY]], returns the attached Pod value.\n*[[Hash.WHY]], returns the attached Pod value.\n*[[Instant.WHY]], returns the attached Pod value.\n*[[Int.WHY]], returns the attached Pod value.\n*[[Iterable.WHY]], returns the attached Pod value.\n*[[Junction.WHY]], returns the attached Pod value.\n*[[Label.WHY]], returns the attached Pod value.\n*[[List.WHY]], returns the attached Pod value.\n*[[Lock.WHY]], returns the attached Pod value.\n*[[Map.WHY]], returns the attached Pod value.\n*[[Match.WHY]], returns the attached Pod value.\n*[[Mix.WHY]], returns the attached Pod value.\n*[[MixHash.WHY]], returns the attached Pod value.\n*[[Mu.WHY]], returns the attached Pod value.\n*[[Nil.WHY]], returns the attached Pod value.\n*[[Num.WHY]], returns the attached Pod value.\n*[[Numeric.WHY]], returns the attached Pod value.\n*[[ObjAt.WHY]], returns the attached Pod value.\n*[[Pair.WHY]], returns the attached Pod value.\n*[[Parameter.WHY]], returns the attached Pod value.\n*[[Positional.WHY]], returns the attached Pod value.\n*[[Proc.WHY]], returns the attached Pod value.\n*[[Promise.WHY]], returns the attached Pod value.\n*[[Proxy.WHY]], returns the attached Pod value.\n*[[Range.WHY]], returns the attached Pod value.\n*[[Rat.WHY]], returns the attached Pod value.\n*[[Rational.WHY]], returns the attached Pod value.\n*[[Real.WHY]], returns the attached Pod value.\n*[[Scalar.WHY]], returns the attached Pod value.\n*[[Semaphore.WHY]], returns the attached Pod value.\n*[[Seq.WHY]], returns the attached Pod value.\n*[[Set.WHY]], returns the attached Pod value.\n*[[SetHash.WHY]], returns the attached Pod value.\n*[[Signature.WHY]], returns the attached Pod value.\n*[[Stash.WHY]], returns the attached Pod value.\n*[[Str.WHY]], returns the attached Pod value.\n*[[Supplier.WHY]], returns the attached Pod value.\n*[[Tap.WHY]], returns the attached Pod value.\n*[[Thread.WHY]], returns the attached Pod value.\n*[[ThreadPoolScheduler.WHY]], returns the attached Pod value.\n*[[Uni.WHY]], returns the attached Pod value.\n*[[Variable.WHY]], returns the attached Pod value.\n*[[Version.WHY]], returns the attached Pod value.\n*[[Whatever.WHY]], returns the attached Pod value.\n*[[supplies.WHY]], returns the attached Pod value.			
AST.export	A			Perl 6 AST							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_trait_is_export
export	D								*[[AST.export]], marks a type as being exported, that is, available to external users.\n*[[Any.export]], marks a type as being exported, that is, available to external users.\n*[[Attribute.export]], marks a type as being exported, that is, available to external users.\n*[[Bag.export]], marks a type as being exported, that is, available to external users.\n*[[BagHash.export]], marks a type as being exported, that is, available to external users.\n*[[CallFrame.export]], marks a type as being exported, that is, available to external users.\n*[[Callable.export]], marks a type as being exported, that is, available to external users.\n*[[Cancellation.export]], marks a type as being exported, that is, available to external users.\n*[[Capture.export]], marks a type as being exported, that is, available to external users.\n*[[Channel.export]], marks a type as being exported, that is, available to external users.\n*[[Code.export]], marks a type as being exported, that is, available to external users.\n*[[Complex.export]], marks a type as being exported, that is, available to external users.\n*[[Cool.export]], marks a type as being exported, that is, available to external users.\n*[[CurrentThreadScheduler.export]], marks a type as being exported, that is, available to external users.\n*[[Cursor.export]], marks a type as being exported, that is, available to external users.\n*[[Date.export]], marks a type as being exported, that is, available to external users.\n*[[DateTime.export]], marks a type as being exported, that is, available to external users.\n*[[Duration.export]], marks a type as being exported, that is, available to external users.\n*[[Exception.export]], marks a type as being exported, that is, available to external users.\n*[[Failure.export]], marks a type as being exported, that is, available to external users.\n*[[FatRat.export]], marks a type as being exported, that is, available to external users.\n*[[Grammar.export]], marks a type as being exported, that is, available to external users.\n*[[Hash.export]], marks a type as being exported, that is, available to external users.\n*[[Instant.export]], marks a type as being exported, that is, available to external users.\n*[[Int.export]], marks a type as being exported, that is, available to external users.\n*[[Iterable.export]], marks a type as being exported, that is, available to external users.\n*[[Junction.export]], marks a type as being exported, that is, available to external users.\n*[[Label.export]], marks a type as being exported, that is, available to external users.\n*[[List.export]], marks a type as being exported, that is, available to external users.\n*[[Lock.export]], marks a type as being exported, that is, available to external users.\n*[[Macro.export]], marks a routine as exported to the rest of the world\n*[[Map.export]], marks a type as being exported, that is, available to external users.\n*[[Match.export]], marks a type as being exported, that is, available to external users.\n*[[Method.export]], marks a routine as exported to the rest of the world\n*[[Mix.export]], marks a type as being exported, that is, available to external users.\n*[[MixHash.export]], marks a type as being exported, that is, available to external users.\n*[[Mu.export]], marks a type as being exported, that is, available to external users.\n*[[Nil.export]], marks a type as being exported, that is, available to external users.\n*[[Num.export]], marks a type as being exported, that is, available to external users.\n*[[Numeric.export]], marks a type as being exported, that is, available to external users.\n*[[ObjAt.export]], marks a type as being exported, that is, available to external users.\n*[[Pair.export]], marks a type as being exported, that is, available to external users.\n*[[Parameter.export]], marks a type as being exported, that is, available to external users.\n*[[Positional.export]], marks a type as being exported, that is, available to external users.\n*[[Proc.export]], marks a type as being exported, that is, available to external users.\n*[[Promise.export]], marks a type as being exported, that is, available to external users.\n*[[Proxy.export]], marks a type as being exported, that is, available to external users.\n*[[Range.export]], marks a type as being exported, that is, available to external users.\n*[[Rat.export]], marks a type as being exported, that is, available to external users.\n*[[Rational.export]], marks a type as being exported, that is, available to external users.\n*[[Real.export]], marks a type as being exported, that is, available to external users.\n*[[Regex.export]], marks a routine as exported to the rest of the world\n*[[Routine.export]], marks a routine as exported to the rest of the world\n*[[Scalar.export]], marks a type as being exported, that is, available to external users.\n*[[Semaphore.export]], marks a type as being exported, that is, available to external users.\n*[[Seq.export]], marks a type as being exported, that is, available to external users.\n*[[Set.export]], marks a type as being exported, that is, available to external users.\n*[[SetHash.export]], marks a type as being exported, that is, available to external users.\n*[[Signature.export]], marks a type as being exported, that is, available to external users.\n*[[Stash.export]], marks a type as being exported, that is, available to external users.\n*[[Str.export]], marks a type as being exported, that is, available to external users.\n*[[Sub.export]], marks a routine as exported to the rest of the world\n*[[Submethod.export]], marks a routine as exported to the rest of the world\n*[[Supplier.export]], marks a type as being exported, that is, available to external users.\n*[[Tap.export]], marks a type as being exported, that is, available to external users.\n*[[Thread.export]], marks a type as being exported, that is, available to external users.\n*[[ThreadPoolScheduler.export]], marks a type as being exported, that is, available to external users.\n*[[Uni.export]], marks a type as being exported, that is, available to external users.\n*[[Variable.export]], marks a type as being exported, that is, available to external users.\n*[[Version.export]], marks a type as being exported, that is, available to external users.\n*[[Whatever.export]], marks a type as being exported, that is, available to external users.\n*[[supplies.export]], marks a type as being exported, that is, available to external users.			
AST.return	A			Perl 6 AST							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_return
return	D								*[[AST.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Any.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Attribute.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Bag.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[BagHash.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[CallFrame.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Callable.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Cancellation.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Capture.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Channel.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Code.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Complex.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Cool.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[CurrentThreadScheduler.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Cursor.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Date.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[DateTime.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Duration.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Exception.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Failure.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[FatRat.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Grammar.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Hash.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Instant.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Int.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Iterable.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Junction.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Label.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[List.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Lock.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Map.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Match.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Mix.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[MixHash.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Mu.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Nil.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Num.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Numeric.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[ObjAt.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Pair.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Parameter.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Positional.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Proc.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Promise.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Proxy.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Range.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Rat.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Rational.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Real.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Scalar.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Semaphore.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Seq.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Set.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[SetHash.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Signature.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Stash.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Str.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Supplier.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Tap.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Thread.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[ThreadPoolScheduler.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Uni.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Variable.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Version.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[Whatever.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.\n*[[supplies.return]], the method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.			
AST.return-rw	A			Perl 6 AST							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_return-rw
return-rw	D								*[[AST.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Any.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Attribute.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Bag.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[BagHash.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[CallFrame.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Callable.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Cancellation.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Capture.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Channel.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Code.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Complex.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Cool.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[CurrentThreadScheduler.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Cursor.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Date.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[DateTime.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Duration.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Exception.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Failure.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[FatRat.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Grammar.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Hash.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Instant.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Int.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Iterable.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Junction.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Label.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[List.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Lock.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Map.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Match.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Mix.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[MixHash.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Mu.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Nil.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Num.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Numeric.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[ObjAt.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Pair.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Parameter.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Positional.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Proc.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Promise.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Proxy.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Range.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Rat.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Rational.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Real.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Scalar.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Semaphore.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Seq.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Set.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[SetHash.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Signature.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Stash.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Str.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Supplier.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Tap.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Thread.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[ThreadPoolScheduler.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Uni.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Variable.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Version.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[Whatever.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).\n*[[supplies.return-rw]], same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).			
AST.emit	A			Perl 6 AST							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_emit
emit	D								*[[AST.emit]], emits the invocant into the enclosing supply or react block.\n*[[Any.emit]], emits the invocant into the enclosing supply or react block.\n*[[Attribute.emit]], emits the invocant into the enclosing supply or react block.\n*[[Bag.emit]], emits the invocant into the enclosing supply or react block.\n*[[BagHash.emit]], emits the invocant into the enclosing supply or react block.\n*[[CallFrame.emit]], emits the invocant into the enclosing supply or react block.\n*[[Callable.emit]], emits the invocant into the enclosing supply or react block.\n*[[Cancellation.emit]], emits the invocant into the enclosing supply or react block.\n*[[Capture.emit]], emits the invocant into the enclosing supply or react block.\n*[[Channel.emit]], emits the invocant into the enclosing supply or react block.\n*[[Code.emit]], emits the invocant into the enclosing supply or react block.\n*[[Complex.emit]], emits the invocant into the enclosing supply or react block.\n*[[Cool.emit]], emits the invocant into the enclosing supply or react block.\n*[[CurrentThreadScheduler.emit]], emits the invocant into the enclosing supply or react block.\n*[[Cursor.emit]], emits the invocant into the enclosing supply or react block.\n*[[Date.emit]], emits the invocant into the enclosing supply or react block.\n*[[DateTime.emit]], emits the invocant into the enclosing supply or react block.\n*[[Duration.emit]], emits the invocant into the enclosing supply or react block.\n*[[Exception.emit]], emits the invocant into the enclosing supply or react block.\n*[[Failure.emit]], emits the invocant into the enclosing supply or react block.\n*[[FatRat.emit]], emits the invocant into the enclosing supply or react block.\n*[[Grammar.emit]], emits the invocant into the enclosing supply or react block.\n*[[Hash.emit]], emits the invocant into the enclosing supply or react block.\n*[[Instant.emit]], emits the invocant into the enclosing supply or react block.\n*[[Int.emit]], emits the invocant into the enclosing supply or react block.\n*[[Iterable.emit]], emits the invocant into the enclosing supply or react block.\n*[[Junction.emit]], emits the invocant into the enclosing supply or react block.\n*[[Label.emit]], emits the invocant into the enclosing supply or react block.\n*[[List.emit]], emits the invocant into the enclosing supply or react block.\n*[[Lock.emit]], emits the invocant into the enclosing supply or react block.\n*[[Map.emit]], emits the invocant into the enclosing supply or react block.\n*[[Match.emit]], emits the invocant into the enclosing supply or react block.\n*[[Mix.emit]], emits the invocant into the enclosing supply or react block.\n*[[MixHash.emit]], emits the invocant into the enclosing supply or react block.\n*[[Mu.emit]], emits the invocant into the enclosing supply or react block.\n*[[Nil.emit]], emits the invocant into the enclosing supply or react block.\n*[[Num.emit]], emits the invocant into the enclosing supply or react block.\n*[[Numeric.emit]], emits the invocant into the enclosing supply or react block.\n*[[ObjAt.emit]], emits the invocant into the enclosing supply or react block.\n*[[Pair.emit]], emits the invocant into the enclosing supply or react block.\n*[[Parameter.emit]], emits the invocant into the enclosing supply or react block.\n*[[Positional.emit]], emits the invocant into the enclosing supply or react block.\n*[[Proc.emit]], emits the invocant into the enclosing supply or react block.\n*[[Promise.emit]], emits the invocant into the enclosing supply or react block.\n*[[Proxy.emit]], emits the invocant into the enclosing supply or react block.\n*[[Range.emit]], emits the invocant into the enclosing supply or react block.\n*[[Rat.emit]], emits the invocant into the enclosing supply or react block.\n*[[Rational.emit]], emits the invocant into the enclosing supply or react block.\n*[[Real.emit]], emits the invocant into the enclosing supply or react block.\n*[[Scalar.emit]], emits the invocant into the enclosing supply or react block.\n*[[Semaphore.emit]], emits the invocant into the enclosing supply or react block.\n*[[Seq.emit]], emits the invocant into the enclosing supply or react block.\n*[[Set.emit]], emits the invocant into the enclosing supply or react block.\n*[[SetHash.emit]], emits the invocant into the enclosing supply or react block.\n*[[Signature.emit]], emits the invocant into the enclosing supply or react block.\n*[[Stash.emit]], emits the invocant into the enclosing supply or react block.\n*[[Str.emit]], emits the invocant into the enclosing supply or react block.\n*[[Supplier.emit]], emits the invocant into the enclosing supply or react block.\n*[[Tap.emit]], emits the invocant into the enclosing supply or react block.\n*[[Thread.emit]], emits the invocant into the enclosing supply or react block.\n*[[ThreadPoolScheduler.emit]], emits the invocant into the enclosing supply or react block.\n*[[Uni.emit]], emits the invocant into the enclosing supply or react block.\n*[[Variable.emit]], emits the invocant into the enclosing supply or react block.\n*[[Version.emit]], emits the invocant into the enclosing supply or react block.\n*[[Whatever.emit]], emits the invocant into the enclosing supply or react block.\n*[[supplies.emit]], emits the invocant into the enclosing supply or react block.			
AST.take	A			Perl 6 AST							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_take
take	D								*[[AST.take]], takes the given item and passes it to the enclosing gather block.\n*[[Any.take]], takes the given item and passes it to the enclosing gather block.\n*[[Attribute.take]], takes the given item and passes it to the enclosing gather block.\n*[[Bag.take]], takes the given item and passes it to the enclosing gather block.\n*[[BagHash.take]], takes the given item and passes it to the enclosing gather block.\n*[[CallFrame.take]], takes the given item and passes it to the enclosing gather block.\n*[[Callable.take]], takes the given item and passes it to the enclosing gather block.\n*[[Cancellation.take]], takes the given item and passes it to the enclosing gather block.\n*[[Capture.take]], takes the given item and passes it to the enclosing gather block.\n*[[Channel.take]], takes the given item and passes it to the enclosing gather block.\n*[[Code.take]], takes the given item and passes it to the enclosing gather block.\n*[[Complex.take]], takes the given item and passes it to the enclosing gather block.\n*[[Cool.take]], takes the given item and passes it to the enclosing gather block.\n*[[CurrentThreadScheduler.take]], takes the given item and passes it to the enclosing gather block.\n*[[Cursor.take]], takes the given item and passes it to the enclosing gather block.\n*[[Date.take]], takes the given item and passes it to the enclosing gather block.\n*[[DateTime.take]], takes the given item and passes it to the enclosing gather block.\n*[[Duration.take]], takes the given item and passes it to the enclosing gather block.\n*[[Exception.take]], takes the given item and passes it to the enclosing gather block.\n*[[Failure.take]], takes the given item and passes it to the enclosing gather block.\n*[[FatRat.take]], takes the given item and passes it to the enclosing gather block.\n*[[Grammar.take]], takes the given item and passes it to the enclosing gather block.\n*[[Hash.take]], takes the given item and passes it to the enclosing gather block.\n*[[Instant.take]], takes the given item and passes it to the enclosing gather block.\n*[[Int.take]], takes the given item and passes it to the enclosing gather block.\n*[[Iterable.take]], takes the given item and passes it to the enclosing gather block.\n*[[Junction.take]], takes the given item and passes it to the enclosing gather block.\n*[[Label.take]], takes the given item and passes it to the enclosing gather block.\n*[[List.take]], takes the given item and passes it to the enclosing gather block.\n*[[Lock.take]], takes the given item and passes it to the enclosing gather block.\n*[[Map.take]], takes the given item and passes it to the enclosing gather block.\n*[[Match.take]], takes the given item and passes it to the enclosing gather block.\n*[[Mix.take]], takes the given item and passes it to the enclosing gather block.\n*[[MixHash.take]], takes the given item and passes it to the enclosing gather block.\n*[[Mu.take]], takes the given item and passes it to the enclosing gather block.\n*[[Nil.take]], takes the given item and passes it to the enclosing gather block.\n*[[Num.take]], takes the given item and passes it to the enclosing gather block.\n*[[Numeric.take]], takes the given item and passes it to the enclosing gather block.\n*[[ObjAt.take]], takes the given item and passes it to the enclosing gather block.\n*[[Pair.take]], takes the given item and passes it to the enclosing gather block.\n*[[Parameter.take]], takes the given item and passes it to the enclosing gather block.\n*[[Positional.take]], takes the given item and passes it to the enclosing gather block.\n*[[Proc.take]], takes the given item and passes it to the enclosing gather block.\n*[[Promise.take]], takes the given item and passes it to the enclosing gather block.\n*[[Proxy.take]], takes the given item and passes it to the enclosing gather block.\n*[[Range.take]], takes the given item and passes it to the enclosing gather block.\n*[[Rat.take]], takes the given item and passes it to the enclosing gather block.\n*[[Rational.take]], takes the given item and passes it to the enclosing gather block.\n*[[Real.take]], takes the given item and passes it to the enclosing gather block.\n*[[Scalar.take]], takes the given item and passes it to the enclosing gather block.\n*[[Semaphore.take]], takes the given item and passes it to the enclosing gather block.\n*[[Seq.take]], takes the given item and passes it to the enclosing gather block.\n*[[Set.take]], takes the given item and passes it to the enclosing gather block.\n*[[SetHash.take]], takes the given item and passes it to the enclosing gather block.\n*[[Signature.take]], takes the given item and passes it to the enclosing gather block.\n*[[Stash.take]], takes the given item and passes it to the enclosing gather block.\n*[[Str.take]], takes the given item and passes it to the enclosing gather block.\n*[[Supplier.take]], takes the given item and passes it to the enclosing gather block.\n*[[Tap.take]], takes the given item and passes it to the enclosing gather block.\n*[[Thread.take]], takes the given item and passes it to the enclosing gather block.\n*[[ThreadPoolScheduler.take]], takes the given item and passes it to the enclosing gather block.\n*[[Uni.take]], takes the given item and passes it to the enclosing gather block.\n*[[Variable.take]], takes the given item and passes it to the enclosing gather block.\n*[[Version.take]], takes the given item and passes it to the enclosing gather block.\n*[[Whatever.take]], takes the given item and passes it to the enclosing gather block.\n*[[supplies.take]], takes the given item and passes it to the enclosing gather block.			
AST.take	A			Perl 6 AST							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_routine_take
AST.take-rw	A			Perl 6 AST							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_routine_take-rw
take-rw	D								*[[AST.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Any.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Attribute.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Bag.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[BagHash.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[CallFrame.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Callable.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Cancellation.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Capture.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Channel.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Code.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Complex.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Cool.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[CurrentThreadScheduler.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Cursor.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Date.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[DateTime.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Duration.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Exception.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Failure.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[FatRat.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Grammar.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Hash.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Instant.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Int.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Iterable.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Junction.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Label.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[List.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Lock.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Map.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Match.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Mix.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[MixHash.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Mu.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Nil.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Num.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Numeric.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[ObjAt.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Pair.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Parameter.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Positional.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Proc.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Promise.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Proxy.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Range.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Rat.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Rational.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Real.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Scalar.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Semaphore.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Seq.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Set.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[SetHash.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Signature.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Stash.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Str.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Supplier.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Tap.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Thread.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[ThreadPoolScheduler.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Uni.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Variable.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Version.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[Whatever.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.\n*[[supplies.take-rw]], returns the given item to the enclosing gather block, without introducing a new container.			
AST.so	A			Perl 6 AST							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_so
so	D								*[[AST.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Any.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Attribute.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Bag.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[BagHash.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Bool.so]], coerces its argument to Bool, has looser precedence than prefix:&lt;?&gt; .\n*[[CallFrame.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Callable.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Cancellation.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Capture.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Channel.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Code.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Complex.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Cool.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[CurrentThreadScheduler.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Cursor.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Date.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[DateTime.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Duration.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Exception.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Failure.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[FatRat.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Grammar.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Hash.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Instant.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Int.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Iterable.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Junction.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Label.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[List.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Lock.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Map.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Match.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Mix.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[MixHash.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Mu.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Nil.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Num.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Numeric.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[ObjAt.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Pair.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Parameter.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Positional.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Proc.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Promise.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Proxy.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Range.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Rat.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Rational.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Real.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Scalar.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Semaphore.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Seq.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Set.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[SetHash.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Signature.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Stash.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Str.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Supplier.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Tap.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Thread.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[ThreadPoolScheduler.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Uni.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Variable.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Version.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[Whatever.so]], returns a Bool value representing the logical non-negation of an expression.\n*[[supplies.so]], returns a Bool value representing the logical non-negation of an expression.			
AST.not	A			Perl 6 AST							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/AST.html#%28Mu%29_method_not
not	D								*[[AST.not]], returns a Bool value representing the logical negation of an expression.\n*[[Any.not]], returns a Bool value representing the logical negation of an expression.\n*[[Attribute.not]], returns a Bool value representing the logical negation of an expression.\n*[[Bag.not]], returns a Bool value representing the logical negation of an expression.\n*[[BagHash.not]], returns a Bool value representing the logical negation of an expression.\n*[[CallFrame.not]], returns a Bool value representing the logical negation of an expression.\n*[[Callable.not]], returns a Bool value representing the logical negation of an expression.\n*[[Cancellation.not]], returns a Bool value representing the logical negation of an expression.\n*[[Capture.not]], returns a Bool value representing the logical negation of an expression.\n*[[Channel.not]], returns a Bool value representing the logical negation of an expression.\n*[[Code.not]], returns a Bool value representing the logical negation of an expression.\n*[[Complex.not]], returns a Bool value representing the logical negation of an expression.\n*[[Cool.not]], returns a Bool value representing the logical negation of an expression.\n*[[CurrentThreadScheduler.not]], returns a Bool value representing the logical negation of an expression.\n*[[Cursor.not]], returns a Bool value representing the logical negation of an expression.\n*[[Date.not]], returns a Bool value representing the logical negation of an expression.\n*[[DateTime.not]], returns a Bool value representing the logical negation of an expression.\n*[[Duration.not]], returns a Bool value representing the logical negation of an expression.\n*[[Exception.not]], returns a Bool value representing the logical negation of an expression.\n*[[Failure.not]], returns a Bool value representing the logical negation of an expression.\n*[[FatRat.not]], returns a Bool value representing the logical negation of an expression.\n*[[Grammar.not]], returns a Bool value representing the logical negation of an expression.\n*[[Hash.not]], returns a Bool value representing the logical negation of an expression.\n*[[Instant.not]], returns a Bool value representing the logical negation of an expression.\n*[[Int.not]], returns a Bool value representing the logical negation of an expression.\n*[[Iterable.not]], returns a Bool value representing the logical negation of an expression.\n*[[Junction.not]], returns a Bool value representing the logical negation of an expression.\n*[[Label.not]], returns a Bool value representing the logical negation of an expression.\n*[[List.not]], returns a Bool value representing the logical negation of an expression.\n*[[Lock.not]], returns a Bool value representing the logical negation of an expression.\n*[[Map.not]], returns a Bool value representing the logical negation of an expression.\n*[[Match.not]], returns a Bool value representing the logical negation of an expression.\n*[[Mix.not]], returns a Bool value representing the logical negation of an expression.\n*[[MixHash.not]], returns a Bool value representing the logical negation of an expression.\n*[[Mu.not]], returns a Bool value representing the logical negation of an expression.\n*[[Nil.not]], returns a Bool value representing the logical negation of an expression.\n*[[Num.not]], returns a Bool value representing the logical negation of an expression.\n*[[Numeric.not]], returns a Bool value representing the logical negation of an expression.\n*[[ObjAt.not]], returns a Bool value representing the logical negation of an expression.\n*[[Pair.not]], returns a Bool value representing the logical negation of an expression.\n*[[Parameter.not]], returns a Bool value representing the logical negation of an expression.\n*[[Positional.not]], returns a Bool value representing the logical negation of an expression.\n*[[Proc.not]], returns a Bool value representing the logical negation of an expression.\n*[[Promise.not]], returns a Bool value representing the logical negation of an expression.\n*[[Proxy.not]], returns a Bool value representing the logical negation of an expression.\n*[[Range.not]], returns a Bool value representing the logical negation of an expression.\n*[[Rat.not]], returns a Bool value representing the logical negation of an expression.\n*[[Rational.not]], returns a Bool value representing the logical negation of an expression.\n*[[Real.not]], returns a Bool value representing the logical negation of an expression.\n*[[Scalar.not]], returns a Bool value representing the logical negation of an expression.\n*[[Semaphore.not]], returns a Bool value representing the logical negation of an expression.\n*[[Seq.not]], returns a Bool value representing the logical negation of an expression.\n*[[Set.not]], returns a Bool value representing the logical negation of an expression.\n*[[SetHash.not]], returns a Bool value representing the logical negation of an expression.\n*[[Signature.not]], returns a Bool value representing the logical negation of an expression.\n*[[Stash.not]], returns a Bool value representing the logical negation of an expression.\n*[[Str.not]], returns a Bool value representing the logical negation of an expression.\n*[[Supplier.not]], returns a Bool value representing the logical negation of an expression.\n*[[Tap.not]], returns a Bool value representing the logical negation of an expression.\n*[[Thread.not]], returns a Bool value representing the logical negation of an expression.\n*[[ThreadPoolScheduler.not]], returns a Bool value representing the logical negation of an expression.\n*[[Uni.not]], returns a Bool value representing the logical negation of an expression.\n*[[Variable.not]], returns a Bool value representing the logical negation of an expression.\n*[[Version.not]], returns a Bool value representing the logical negation of an expression.\n*[[Whatever.not]], returns a Bool value representing the logical negation of an expression.\n*[[supplies.not]], returns a Bool value representing the logical negation of an expression.			
Any.ACCEPTS	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_ACCEPTS
Any.any	A			Perl 6 Any							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_any
Any.all	A			Perl 6 Any							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_all
Any.one	A			Perl 6 Any							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_one
Any.none	A			Perl 6 Any							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_none
Any.list	A			Perl 6 Any							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_list
Any.push	A			Perl 6 Any							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_push
Any.reverse	A			Perl 6 Any							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#routine_reverse
Any.sort	A			Perl 6 Any							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_sort
Any.map	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_map
Any.deepmap	A			Perl 6 Any							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_deepmap
Any.duckmap	A			Perl 6 Any							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_duckmap
Any.flat	A			Perl 6 Any							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_flat
Any.eager	A			Perl 6 Any							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_eager
Any.elems	A			Perl 6 Any							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_elems
Any.end	A			Perl 6 Any							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_end
Any.pairup	A			Perl 6 Any							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#method_pairup
Any.exit	A			Perl 6 Any							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#sub_exit
Any.item	A			Perl 6 Any							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#sub_item
Any.defined	A			Perl 6 Any							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_routine_defined
Any.isa	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_routine_isa
Any.does	A			Perl 6 Any							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_routine_does
Any.Bool	A			Perl 6 Any							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_routine_Bool
Any.Str	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_Str
Any.gist	A			Perl 6 Any							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_routine_gist
Any.perl	A			Perl 6 Any							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_routine_perl
Any.item	A			Perl 6 Any							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_item
Any.clone	A			Perl 6 Any							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_clone
Any.new	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_new
Any.bless	A			Perl 6 Any							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_bless
Any.CREATE	A			Perl 6 Any							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_CREATE
Any.print	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_print
Any.put	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_put
Any.say	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_say
Any.ACCEPTS	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_ACCEPTS
Any.WHICH	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_WHICH
Any.WHERE	A			Perl 6 Any							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_WHERE
Any.WHY	A			Perl 6 Any							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_WHY
Any.export	A			Perl 6 Any							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_trait_is_export
Any.return	A			Perl 6 Any							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_return
Any.return-rw	A			Perl 6 Any							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_return-rw
Any.emit	A			Perl 6 Any							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_emit
Any.take	A			Perl 6 Any							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_take
Any.take	A			Perl 6 Any							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_routine_take
Any.take-rw	A			Perl 6 Any							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_routine_take-rw
Any.so	A			Perl 6 Any							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_so
Any.not	A			Perl 6 Any							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Any.html#%28Mu%29_method_not
Array.pop	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    pop(Array:D )\nmulti method pop(Array:D:)\n</code></pre><p>Removes and returns the last item from the array.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#routine_pop
pop	R	Array.pop										
Array.push	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    push(Array:D, **@values --&gt; Array:D)\nmulti method push(Array:D: **@values --&gt; Array:D)\n</code></pre><p>Adds the @values to the end of the array, and returns the modified list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#routine_push
Array.append	A			Perl 6 Array							<section class="prog__container"><pre><code>sub append(&#92;array, elems)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#method_append
append	D								*[[Array.append]], defined as\n*[[Hash.append]], append the provided Pairs or even sized list to the Hash.\n*[[Nil.append]], warns the user that they tried to append onto a Nil.\n*[[Stash.append]], append the provided Pairs or even sized list to the Hash.			
Array.shift	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    shift(Array:D )\nmulti method shift(Array:D:)\n</code></pre><p>Removes and returns the first item from the array.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#routine_shift
shift	R	Array.shift										
Array.unshift	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    unshift(Array:D, **@values --&gt; Array:D)\nmulti method unshift(Array:D: **@values --&gt; Array:D)\n</code></pre><p>Adds the @values to the start of the array, and returns the modified array.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#routine_unshift
unshift	D								*[[Array.unshift]], adds the @values to the start of the array, and returns the modified array.\n*[[Nil.unshift]], warns the user that they tried to unshift onto a Nil.			
Array.prepend	A			Perl 6 Array							<section class="prog__container"><pre><code>sub prepend(&#92;array, elems)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#method_prepend
prepend	D								*[[Array.prepend]], defined as\n*[[Nil.prepend]], warns the user that they tried to prepend onto a Nil.			
Array.splice	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    splice(@list,  $start, $elems?, *@replacement --&gt; Array)\nmulti method splice(Array:D $start, $elems?, *@replacement --&gt; Array)\n</code></pre><p>Deletes $elems elements starting from index $start from the Array, returns them and replaces them by @replacement.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#routine_splice
splice	R	Array.splice										
Array.shape	A			Perl 6 Array							<section class="prog__container"><pre><code>method shape() { (*,) }\n</code></pre><p>Returns the shape of the array as a list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#method_shape
shape	R	Array.shape										
Array.default	A			Perl 6 Array							<section class="prog__container"><pre><code>method default\n</code></pre><p>Returns the default value of the invocant, i.e. the value which is returned when trying to access an element in the Array which has not been previously initialized or when accessing an element which has explicitly been set to Nil.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#method_default
default	D								*[[Array.default]], returns the default value of the invocant, i.e. \n*[[Bag.default]], returns zero.\n*[[BagHash.default]], returns zero.\n*[[Baggy.default]], returns zero.\n*[[Hash.default]], returns the default value of the invocant, i.e. \n*[[Mix.default]], returns zero.\n*[[MixHash.default]], returns zero.\n*[[Mixy.default]], returns zero.\n*[[Parameter.default]], returns a closure that upon invocation returns the default value for this parameter, or Any if no default was provided.\n*[[Set.default]], returns the default value of the invocant, i.e. \n*[[SetHash.default]], returns the default value of the invocant, i.e. \n*[[Setty.default]], returns the default value of the invocant, i.e. \n*[[Stash.default]], returns the default value of the invocant, i.e. 			
Array.of	A			Perl 6 Array							<section class="prog__container"><pre><code>method of\n</code></pre><p>Returns the type constraint for the values of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#method_of
of	D								*[[Array.of]], returns the type constraint for the values of the invocant.\n*[[Blob.of]], returns the type constraint for elements of the positional container.\n*[[Buf.of]], returns the type constraint for elements of the positional container.\n*[[Code.of]], returns the return type constraint of the Code:\n*[[Hash.of]], returns the type constraint for the values of the invocant.\n*[[List.of]], returns the type constraint for elements of the positional container.\n*[[Positional.of]], returns the type constraint for elements of the positional container.\n*[[Range.of]], returns the type constraint for elements of the positional container.\n*[[Stash.of]], returns the type constraint for the values of the invocant.\n*[[Uni.of]], returns the type constraint for elements of the positional container.\n*[[Variable.of]], sets the type constraint of a container bound to a variable.			
Array.elems	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    elems($list --&gt; Int:D)\nmulti method elems(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_elems
Array.end	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    end($list --&gt; Int:D)\nmulti method end(List:D: --&gt; Int:D)\n</code></pre><p>Returns the index of the last element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_end
Array.keys	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    keys($list --&gt; Seq:D)\nmulti method keys(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_keys
keys	D								*[[Array.keys]], returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).\n*[[Backtrace.keys]], returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).\n*[[Bag.keys]], returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.\n*[[BagHash.keys]], returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.\n*[[Baggy.keys]], returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.\n*[[Capture.keys]], returns a Seq containing all positional keys followed by all named keys.\n*[[Hash.keys]], returns a list of all keys in the Map.\n*[[List.keys]], returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).\n*[[Map.keys]], returns a list of all keys in the Map.\n*[[Match.keys]], returns a Seq containing all positional keys followed by all named keys.\n*[[Mix.keys]], returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.\n*[[MixHash.keys]], returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.\n*[[Mixy.keys]], returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.\n*[[Pair.keys]], returns a List containing the key of the invocant.\n*[[Set.keys]], returns a Seq of all elements of the set.\n*[[SetHash.keys]], returns a Seq of all elements of the set.\n*[[Setty.keys]], returns a Seq of all elements of the set.\n*[[Slip.keys]], returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).\n*[[Stash.keys]], returns a list of all keys in the Map.			
Array.values	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    values($list --&gt; Seq:D)\nmulti method values(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of the list elements, in order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_values
values	D								*[[Array.values]], returns a sequence of the list elements, in order.\n*[[Backtrace.values]], returns a sequence of the list elements, in order.\n*[[Bag.values]], returns a list of all values, i.e. \n*[[BagHash.values]], returns a list of all values, i.e. \n*[[Baggy.values]], returns a list of all values, i.e. \n*[[Capture.values]], returns a Seq containing all positional values followed by all named argument values.\n*[[Hash.values]], returns a list of all values in the Map.\n*[[List.values]], returns a sequence of the list elements, in order.\n*[[Map.values]], returns a list of all values in the Map.\n*[[Match.values]], returns a Seq containing all positional values followed by all named argument values.\n*[[Mix.values]], returns a list of all values, i.e. \n*[[MixHash.values]], returns a list of all values, i.e. \n*[[Mixy.values]], returns a list of all values, i.e. \n*[[Pair.values]], returns a List containing the value of the invocant.\n*[[Set.values]], returns a Seq containing as many True values as the set has elements.\n*[[SetHash.values]], returns a Seq containing as many True values as the set has elements.\n*[[Setty.values]], returns a Seq containing as many True values as the set has elements.\n*[[Slip.values]], returns a sequence of the list elements, in order.\n*[[Stash.values]], returns a list of all values in the Map.			
Array.kv	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    kv($list --&gt; Seq:D)\nmulti method kv(List:D: --&gt; Seq:D)\n</code></pre><p>Returns an interleaved sequence of indexes and values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_kv
kv	D								*[[Array.kv]], returns an interleaved sequence of indexes and values.\n*[[Backtrace.kv]], returns an interleaved sequence of indexes and values.\n*[[Bag.kv]], returns a list of keys and values interleaved.\n*[[BagHash.kv]], returns a list of keys and values interleaved.\n*[[Baggy.kv]], returns a list of keys and values interleaved.\n*[[Capture.kv]], returns a Seq of alternating keys and values.\n*[[Hash.kv]], returns a list of keys and values interleaved.\n*[[List.kv]], returns an interleaved sequence of indexes and values.\n*[[Map.kv]], returns a list of keys and values interleaved.\n*[[Match.kv]], returns a Seq of alternating keys and values.\n*[[Mix.kv]], returns a list of keys and values interleaved.\n*[[MixHash.kv]], returns a list of keys and values interleaved.\n*[[Mixy.kv]], returns a list of keys and values interleaved.\n*[[Pair.kv]], returns a two-element List with the key and value parts of Pair, in that order.\n*[[Set.kv]], returns a Seq of the set&amp;#39;s elements and True values interleaved.\n*[[SetHash.kv]], returns a Seq of the set&amp;#39;s elements and True values interleaved.\n*[[Setty.kv]], returns a Seq of the set&amp;#39;s elements and True values interleaved.\n*[[Slip.kv]], returns an interleaved sequence of indexes and values.\n*[[Stash.kv]], returns a list of keys and values interleaved.			
Array.pairs	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    pairs($list --&gt; Seq:D)\nmulti method pairs(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of pairs, with the indexes as keys and the list values as values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_pairs
pairs	D								*[[Array.pairs]], returns a sequence of pairs, with the indexes as keys and the list values as values.\n*[[Backtrace.pairs]], returns a sequence of pairs, with the indexes as keys and the list values as values.\n*[[Bag.pairs]], returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.\n*[[BagHash.pairs]], returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.\n*[[Baggy.pairs]], returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.\n*[[Capture.pairs]], returns all arguments, the positional followed by the named, as a Seq of Pairs.\n*[[Hash.pairs]], returns a list of all pairs in the Map.\n*[[List.pairs]], returns a sequence of pairs, with the indexes as keys and the list values as values.\n*[[Map.pairs]], returns a list of all pairs in the Map.\n*[[Match.pairs]], returns all arguments, the positional followed by the named, as a Seq of Pairs.\n*[[Mix.pairs]], returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.\n*[[MixHash.pairs]], returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.\n*[[Mixy.pairs]], returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.\n*[[Pair.pairs]], returns a list of one Pair, namely this one.\n*[[Slip.pairs]], returns a sequence of pairs, with the indexes as keys and the list values as values.\n*[[Stash.pairs]], returns a list of all pairs in the Map.			
Array.antipairs	A			Perl 6 Array							<section class="prog__container"><pre><code>multi method antipairs(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of pairs, with the values as keys and the indexes as values, i.e. the direct opposite to pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_antipairs
antipairs	D								*[[Array.antipairs]], returns a Seq of pairs, with the values as keys and the indexes as values, i.e. \n*[[Backtrace.antipairs]], returns a Seq of pairs, with the values as keys and the indexes as values, i.e. \n*[[Bag.antipairs]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[BagHash.antipairs]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[Baggy.antipairs]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[Capture.antipairs]], returns all arguments, the positional followed by the named, as a Seq of pairs where the keys and values have been swapped, i.e. \n*[[Hash.antipairs]], returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged, i.e. \n*[[List.antipairs]], returns a Seq of pairs, with the values as keys and the indexes as values, i.e. \n*[[Map.antipairs]], returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged, i.e. \n*[[Match.antipairs]], returns all arguments, the positional followed by the named, as a Seq of pairs where the keys and values have been swapped, i.e. \n*[[Mix.antipairs]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[MixHash.antipairs]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[Mixy.antipairs]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[Pair.antipairs]], returns a List containing the antipair of the invocant.\n*[[Slip.antipairs]], returns a Seq of pairs, with the values as keys and the indexes as values, i.e. \n*[[Stash.antipairs]], returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged, i.e. 			
Array.join	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    join($separator, *@list --&gt; Str:D)\nmulti method join(List:D: $separator --&gt; Str:D)\n</code></pre><p>Treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_join
join	D								*[[Array.join]], treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.\n*[[Backtrace.join]], treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.\n*[[List.join]], treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.\n*[[Slip.join]], treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.\n*[[Thread.join]], waits for the thread to finish.			
Array.map	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    map(&amp;code, *@elems --&gt; Seq:D)\nmulti method map(List:D: &amp;code --&gt; Seq:D)\n</code></pre><p>Invokes &amp;code for each element and gathers the return values in a sequence and returns it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_map
Array.flat	A			Perl 6 Array							<section class="prog__container"><pre><code>sub flat(**@list is raw)\n</code></pre><p>Constructs a list which contains any arguments provided in the order provided, and returns the result of calling the .flat method (inherited from Any) on that list:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_sub_flat
Array.flatmap	A			Perl 6 Array							<section class="prog__container"><pre><code>method flatmap(List:D: &amp;code --&gt; Seq:D)\n</code></pre><p>Like map iterates over the elements of the invocant list, feeding each element in turn to the code reference, and assembling the return values from these invocations in a result list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_flatmap
flatmap	D								*[[Array.flatmap]], like map iterates over the elements of the invocant list, feeding each element in turn to the code reference, and assembling the return values from these invocations in a result list.\n*[[Backtrace.flatmap]], like map iterates over the elements of the invocant list, feeding each element in turn to the code reference, and assembling the return values from these invocations in a result list.\n*[[List.flatmap]], like map iterates over the elements of the invocant list, feeding each element in turn to the code reference, and assembling the return values from these invocations in a result list.\n*[[Slip.flatmap]], like map iterates over the elements of the invocant list, feeding each element in turn to the code reference, and assembling the return values from these invocations in a result list.			
Array.grep	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    grep(Mu $matcher, *@elems, :$k, :$kv, :$p, :$v --&gt; Seq:D)\nmulti method grep(List:D:  Mu $matcher, :$k, :$kv, :$p, :$v --&gt; Seq:D)\n</code></pre><p>Returns a sequence of elements against which $matcher smart-matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_grep
grep	D								*[[Array.grep]], returns a sequence of elements against which $matcher smart-matches.\n*[[Backtrace.grep]], returns a sequence of elements against which $matcher smart-matches.\n*[[List.grep]], returns a sequence of elements against which $matcher smart-matches.\n*[[Slip.grep]], returns a sequence of elements against which $matcher smart-matches.\n*[[Supply.grep]], creates a new supply that only emits those values from the original supply that smart-match against $test.			
Array.first	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    first(Mu $matcher, *@elems, :$k, :$kv, :$p, :$end)\nmulti method first(List:D:  Mu $matcher?, :$k, :$kv, :$p, :$end)\n</code></pre><p>Returns the first item of the list which smart-matches against $matcher, returns Nil when no values match.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_first
first	D								*[[Array.first]], returns the first item of the list which smart-matches against $matcher, returns Nil when no values match.\n*[[Backtrace.first]], returns the first item of the list which smart-matches against $matcher, returns Nil when no values match.\n*[[List.first]], returns the first item of the list which smart-matches against $matcher, returns Nil when no values match.\n*[[Slip.first]], returns the first item of the list which smart-matches against $matcher, returns Nil when no values match.			
Array.head	A			Perl 6 Array							<section class="prog__container"><pre><code>multi method head(List:D: Int(Cool) $number = 1 --&gt; Seq:D)\n</code></pre><p>Returns the first NUMBER items of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_head
head	D								*[[Array.head]], returns the first NUMBER items of the list.\n*[[Backtrace.head]], returns the first NUMBER items of the list.\n*[[List.head]], returns the first NUMBER items of the list.\n*[[Slip.head]], returns the first NUMBER items of the list.\n*[[Supply.head]], creates a "head" supply with the same semantics as List.head.			
Array.tail	A			Perl 6 Array							<section class="prog__container"><pre><code>multi method tail(List:D: Int(Cool) $number = 1 --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing the last NUMBER items of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_tail
tail	D								*[[Array.tail]], returns a Seq containing the last NUMBER items of the list.\n*[[Backtrace.tail]], returns a Seq containing the last NUMBER items of the list.\n*[[List.tail]], returns a Seq containing the last NUMBER items of the list.\n*[[Slip.tail]], returns a Seq containing the last NUMBER items of the list.\n*[[Supply.tail]], creates a "tail" supply with the same semantics as List.tail.			
Array.categorize	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    categorize(&amp;mapper, *@values --&gt; Hash:D)\nmulti method categorize(List:D: &amp;mapper   --&gt; Hash:D)\n</code></pre><p>Transforms a list of values into a hash representing the categorizations of those values according to a mapper; each hash key represents one possible categorization for one or more of the incoming list values, and the corresponding hash value contains an array of those list values categorized by the mapper into the category of the associated key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_categorize
categorize	D								*[[Array.categorize]], transforms a list of values into a hash representing the categorizations of those values according to a mapper; each hash key represents one possible categorization for one or more of the incoming list values, and the corresponding hash value contains an array of those list values categorized by the mapper into the category of the associated key.\n*[[Backtrace.categorize]], transforms a list of values into a hash representing the categorizations of those values according to a mapper; each hash key represents one possible categorization for one or more of the incoming list values, and the corresponding hash value contains an array of those list values categorized by the mapper into the category of the associated key.\n*[[List.categorize]], transforms a list of values into a hash representing the categorizations of those values according to a mapper; each hash key represents one possible categorization for one or more of the incoming list values, and the corresponding hash value contains an array of those list values categorized by the mapper into the category of the associated key.\n*[[Slip.categorize]], transforms a list of values into a hash representing the categorizations of those values according to a mapper; each hash key represents one possible categorization for one or more of the incoming list values, and the corresponding hash value contains an array of those list values categorized by the mapper into the category of the associated key.			
Array.classify	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    classify(&amp;mapper, *@values --&gt; Hash:D)\nmulti method classify(List:D: &amp;mapper   --&gt; Hash:D)\n</code></pre><p>Transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_classify
classify	D								*[[Array.classify]], transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.\n*[[Backtrace.classify]], transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.\n*[[List.classify]], transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.\n*[[Slip.classify]], transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.			
Array.Bool	A			Perl 6 Array							<section class="prog__container"><pre><code>multi method Bool(List:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the list has at least one element, and False for the empty list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_Bool
Array.Str	A			Perl 6 Array							<section class="prog__container"><pre><code>multi method Str(List:D: --&gt; Str:D)\n</code></pre><p>Stringifies the elements of the list and joins them with spaces (same as .join(&amp;#39; &amp;#39;)).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_Str
Array.Int	A			Perl 6 Array							<section class="prog__container"><pre><code>multi method Int(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_Int
Array.Numeric	A			Perl 6 Array							<section class="prog__container"><pre><code>multi method Numeric(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_Numeric
Array.Capture	A			Perl 6 Array							<section class="prog__container"><pre><code>method Capture(--&gt; Capture:D)\n</code></pre><p>Returns a Capture where each Pair, if any, in the List has been converted to a named argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_Capture
Array.pick	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    pick($count, *@list --&gt; Seq:D)\nmulti method pick(List:D: $count --&gt; Seq:D)\nmulti method pick(List:D: --&gt; Mu)\n</code></pre><p>If $count is supplied: Returns $count elements chosen at random and without repetition from the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_pick
pick	D								*[[Array.pick]], if $count is supplied: Returns $count elements chosen at random and without repetition from the invocant.\n*[[Backtrace.pick]], if $count is supplied: Returns $count elements chosen at random and without repetition from the invocant.\n*[[Bag.pick]], like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.\n*[[BagHash.pick]], like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.\n*[[Baggy.pick]], like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.\n*[[Bool.pick]], returns True or False if called without any argument.\n*[[List.pick]], if $count is supplied: Returns $count elements chosen at random and without repetition from the invocant.\n*[[Mix.pick]], like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.\n*[[MixHash.pick]], like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.\n*[[Mixy.pick]], like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.\n*[[Range.pick]], performs the same function as Range.list.pick, but attempts to optimize by not actually generating the list if it is not necessary.\n*[[Set.pick]], returns $count elements chosen at random (without repetition) from the set.\n*[[SetHash.pick]], returns $count elements chosen at random (without repetition) from the set.\n*[[Setty.pick]], returns $count elements chosen at random (without repetition) from the set.\n*[[Slip.pick]], if $count is supplied: Returns $count elements chosen at random and without repetition from the invocant.			
Array.roll	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    roll($count, *@list --&gt; Seq:D)\nmulti method roll(List:D: $count --&gt; Seq:D)\nmulti method roll(List:D: --&gt; Mu)\n</code></pre><p>If $count is supplied: Returns a sequence of $count elements, each randomly selected from the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_roll
roll	D								*[[Array.roll]], if $count is supplied: Returns a sequence of $count elements, each randomly selected from the list.\n*[[Backtrace.roll]], if $count is supplied: Returns a sequence of $count elements, each randomly selected from the list.\n*[[Bag.roll]], like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.\n*[[BagHash.roll]], like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.\n*[[Baggy.roll]], like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.\n*[[Bool.roll]], returns True or False if called without any argument.\n*[[List.roll]], if $count is supplied: Returns a sequence of $count elements, each randomly selected from the list.\n*[[Mix.roll]], like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.\n*[[MixHash.roll]], like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.\n*[[Mixy.roll]], like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.\n*[[Range.roll]], performs the same function as Range.list.roll, but attempts to optimize by not actually generating the list if it is not necessary.\n*[[Set.roll]], returns a lazy list of $count elements, each randomly selected from the set.\n*[[SetHash.roll]], returns a lazy list of $count elements, each randomly selected from the set.\n*[[Setty.roll]], returns a lazy list of $count elements, each randomly selected from the set.\n*[[Slip.roll]], if $count is supplied: Returns a sequence of $count elements, each randomly selected from the list.			
Array.eager	A			Perl 6 Array							<section class="prog__container"><pre><code>multi method eager(List:D: --&gt; List:D)\nsub eager(*@elems --&gt; List:D)\n</code></pre><p>Evaluates all elements in the list eagerly, and returns them as a list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_eager
Array.reverse	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_reverse
Array.rotate	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    rotate(@list,  Int:D $n = 1 --&gt; List:D)\nmulti method rotate(List:D: Int:D $n = 1 --&gt; List:D)\n</code></pre><p>Returns the list rotated by $n elements.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_rotate
rotate	D								*[[Array.rotate]], returns the list rotated by $n elements.\n*[[Backtrace.rotate]], returns the list rotated by $n elements.\n*[[List.rotate]], returns the list rotated by $n elements.\n*[[Slip.rotate]], returns the list rotated by $n elements.			
Array.sort	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    sort(*@elems      --&gt; Seq:D)\nmulti sub    sort(&amp;by, *@elems --&gt; Seq:D)\nmulti method sort(List:D:      --&gt; Seq:D)\nmulti method sort(List:D: &amp;by  --&gt; Seq:D)\n</code></pre><p>Sorts the list, smallest element first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_sort
Array.unique	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    unique(*@values, :&amp;as, :&amp;with --&gt; Seq:D)\nmulti method unique(List:D:  :&amp;as, :&amp;with --&gt; Seq:D)\n</code></pre><p>Returns a sequence of unique values from the invocant/argument list, such that only the first occurrence of each duplicated value remains in the result list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_unique
unique	D								*[[Array.unique]], returns a sequence of unique values from the invocant/argument list, such that only the first occurrence of each duplicated value remains in the result list.\n*[[Backtrace.unique]], returns a sequence of unique values from the invocant/argument list, such that only the first occurrence of each duplicated value remains in the result list.\n*[[List.unique]], returns a sequence of unique values from the invocant/argument list, such that only the first occurrence of each duplicated value remains in the result list.\n*[[Slip.unique]], returns a sequence of unique values from the invocant/argument list, such that only the first occurrence of each duplicated value remains in the result list.\n*[[Supply.unique]], creates a supply that only provides unique values, as defined by the optional :as and :with parameters (same as with List.unique).			
Array.repeated	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    repeated(*@values, :&amp;as, :&amp;with --&gt; Seq:D)\nmulti method repeated(List:D:  :&amp;as, :&amp;with --&gt; Seq:D)\n</code></pre><p>Returns a sequence of repeated values from the invocant/argument list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_repeated
repeated	D								*[[Array.repeated]], returns a sequence of repeated values from the invocant/argument list.\n*[[Backtrace.repeated]], returns a sequence of repeated values from the invocant/argument list.\n*[[List.repeated]], returns a sequence of repeated values from the invocant/argument list.\n*[[Slip.repeated]], returns a sequence of repeated values from the invocant/argument list.			
Array.squish	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    squish(*@values, :&amp;as --&gt; Seq:D)\nmulti method squish(List:D:  :&amp;as --&gt; Seq:D)\n</code></pre><p>Returns a sequence of values from the invocant/argument list where runs of more than one value are replaced with only the first instance.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_squish
squish	D								*[[Array.squish]], returns a sequence of values from the invocant/argument list where runs of more than one value are replaced with only the first instance.\n*[[Backtrace.squish]], returns a sequence of values from the invocant/argument list where runs of more than one value are replaced with only the first instance.\n*[[List.squish]], returns a sequence of values from the invocant/argument list where runs of more than one value are replaced with only the first instance.\n*[[Slip.squish]], returns a sequence of values from the invocant/argument list where runs of more than one value are replaced with only the first instance.\n*[[Supply.squish]], creates a supply that only provides unique values, as defined by the optional :as and :with parameters (same as with List.squish).			
Array.reduce	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    reduce(&amp;with, *@values)\nmulti method reduce(List:D: &amp;with)\n</code></pre><p>Generates a single "combined" value from a list of arbitrarily many of values, by iteratively applying a function which knows how to combine two values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_reduce
reduce	D								*[[Array.reduce]], generates a single "combined" value from a list of arbitrarily many of values, by iteratively applying a function which knows how to combine two values.\n*[[Backtrace.reduce]], generates a single "combined" value from a list of arbitrarily many of values, by iteratively applying a function which knows how to combine two values.\n*[[List.reduce]], generates a single "combined" value from a list of arbitrarily many of values, by iteratively applying a function which knows how to combine two values.\n*[[Slip.reduce]], generates a single "combined" value from a list of arbitrarily many of values, by iteratively applying a function which knows how to combine two values.\n*[[Supply.reduce]], creates a "reducing" supply with the same semantics as List.reduce.			
Array.produce	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    produce(&amp;with, *@values)\nmulti method produce(List:D: &amp;with)\n</code></pre><p>Generates a list of all intermediate "combined" values along with the final result by iteratively applying a function which knows how to combine two values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_produce
produce	D								*[[Array.produce]], generates a list of all intermediate "combined" values along with the final result by iteratively applying a function which knows how to combine two values.\n*[[Backtrace.produce]], generates a list of all intermediate "combined" values along with the final result by iteratively applying a function which knows how to combine two values.\n*[[List.produce]], generates a list of all intermediate "combined" values along with the final result by iteratively applying a function which knows how to combine two values.\n*[[Slip.produce]], generates a list of all intermediate "combined" values along with the final result by iteratively applying a function which knows how to combine two values.			
Array.combinations	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    combinations($n, $k                     --&gt; Seq:D)\nmulti method combinations(List:D: Int:D $of          --&gt; Seq:D)\nmulti method combinations(List:D: Range:D $of = 0..* --&gt; Seq:D)\n</code></pre><p>The Int variant returns all $of-combinations of the invocant list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_combinations
combinations	D								*[[Array.combinations]], the Int variant returns all $of-combinations of the invocant list.\n*[[Backtrace.combinations]], the Int variant returns all $of-combinations of the invocant list.\n*[[List.combinations]], the Int variant returns all $of-combinations of the invocant list.\n*[[Slip.combinations]], the Int variant returns all $of-combinations of the invocant list.			
Array.permutations	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    permutations($n      --&gt; Seq:D)\nmulti method permutations(List:D: --&gt; Seq:D)\n</code></pre><p>Returns all possible permutations of a list as a sequence of lists.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_permutations
permutations	D								*[[Array.permutations]], returns all possible permutations of a list as a sequence of lists.\n*[[Backtrace.permutations]], returns all possible permutations of a list as a sequence of lists.\n*[[List.permutations]], returns all possible permutations of a list as a sequence of lists.\n*[[Slip.permutations]], returns all possible permutations of a list as a sequence of lists.			
Array.rotor	A			Perl 6 Array							<section class="prog__container"><pre><code>method rotor(*@cycle, Bool() :$partial --&gt; Seq:D)\n</code></pre><p>Returns a sequence of lists, where each sublist is made up of elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_rotor
rotor	D								*[[Array.rotor]], returns a sequence of lists, where each sublist is made up of elements of the invocant.\n*[[Backtrace.rotor]], returns a sequence of lists, where each sublist is made up of elements of the invocant.\n*[[List.rotor]], returns a sequence of lists, where each sublist is made up of elements of the invocant.\n*[[Slip.rotor]], returns a sequence of lists, where each sublist is made up of elements of the invocant.\n*[[Supply.rotor]], creates a "rotoring" supply with the same semantics as List.rotor.			
Array.cross	A			Perl 6 Array							<section class="prog__container"><pre><code>sub cross(+@e, :&amp;with --&gt; Seq:D)\n</code></pre><p>Computes the cross-product of two or more lists or iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_cross
cross	D								*[[Array.cross]], computes the cross-product of two or more lists or iterables.\n*[[Backtrace.cross]], computes the cross-product of two or more lists or iterables.\n*[[List.cross]], computes the cross-product of two or more lists or iterables.\n*[[Slip.cross]], computes the cross-product of two or more lists or iterables.			
Array.zip	A			Perl 6 Array							<section class="prog__container"><pre><code>sub zip(+@e, :&amp;with --&gt; Seq:D)\n</code></pre><p>Builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_zip
zip	D								*[[Array.zip]], builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.\n*[[Backtrace.zip]], builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.\n*[[List.zip]], builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.\n*[[Slip.zip]], builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.\n*[[supplies.zip]], creates a supply that emits combined values as soon as there is a new value seen on all of the supplies.			
Array.roundrobin	A			Perl 6 Array							<section class="prog__container"><pre><code>method roundrobin(List:D: --&gt; Seq)\n</code></pre><p>Builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_sub_roundrobin
roundrobin	D								*[[Array.roundrobin]], builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.\n*[[Backtrace.roundrobin]], builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.\n*[[List.roundrobin]], builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.\n*[[Slip.roundrobin]], builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.			
Array.sum	A			Perl 6 Array							<section class="prog__container"><pre><code>multi sub    sum($list   --&gt; Numeric:D)\nmulti method sum(List:D: --&gt; Numeric:D)\n</code></pre><p>Returns the sum of all elements in the list or 0 if the list is empty.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_routine_sum
sum	D								*[[Array.sum]], returns the sum of all elements in the list or 0 if the list is empty.\n*[[Backtrace.sum]], returns the sum of all elements in the list or 0 if the list is empty.\n*[[List.sum]], returns the sum of all elements in the list or 0 if the list is empty.\n*[[Range.sum]], returns the sum of all elements in the Range.\n*[[Slip.sum]], returns the sum of all elements in the list or 0 if the list is empty.			
Array.fmt	A			Perl 6 Array							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39;, $separator = &amp;#39; &amp;#39; --&gt; Str:D)\n</code></pre><p>Returns a string where each element in the list has been formatted according to $format and where each element is separated by $separator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_fmt
fmt	D								*[[Array.fmt]], returns a string where each element in the list has been formatted according to $format and where each element is separated by $separator.\n*[[Backtrace.fmt]], returns a string where each element in the list has been formatted according to $format and where each element is separated by $separator.\n*[[Complex.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Cool.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Duration.fmt]], uses $format to return a formatted representation of the invocant.\n*[[FatRat.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Hash.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Instant.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Int.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Iterable.fmt]], uses $format to return a formatted representation of the invocant.\n*[[List.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Map.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Match.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Nil.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Num.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Numeric.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Pair.fmt]], takes a format string, and returns a string the key and value parts of the Pair formatted.\n*[[Range.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Rat.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Rational.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Real.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Seq.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Slip.fmt]], returns a string where each element in the list has been formatted according to $format and where each element is separated by $separator.\n*[[Stash.fmt]], uses $format to return a formatted representation of the invocant.\n*[[Str.fmt]], uses $format to return a formatted representation of the invocant.			
Array.from	A			Perl 6 Array							<section class="prog__container"><pre><code>&amp;#39;abcdefg&amp;#39; ~~ /(c)(d)/;\nsay $/.list.from;         # 2 \n \n"abc123def" ~~ m:g/&#92;d/;\nsay $/.list.from;         # 3 \n</code></pre><p>Assumes the list contains Match objects and returns the value of .from called on the first element of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_from
from	D								*[[Array.from]], assumes the list contains Match objects and returns the value of .from called on the first element of the list.\n*[[Backtrace.from]], assumes the list contains Match objects and returns the value of .from called on the first element of the list.\n*[[List.from]], assumes the list contains Match objects and returns the value of .from called on the first element of the list.\n*[[Match.from]], returns the index of the starting position of the match.\n*[[Slip.from]], assumes the list contains Match objects and returns the value of .from called on the first element of the list.			
Array.to	A			Perl 6 Array							<section class="prog__container"><pre><code>"abc123def" ~~ m:g/&#92;d/;\nsay $/.to; # 6 \n</code></pre><p>Assumes the List contains Match objects, such as the $/ variable being a List, when using :g modifier in regexes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Array.html#%28List%29_method_to
to	D								*[[Array.to]], assumes the List contains Match objects, such as the $/ variable being a List, when using :g modifier in regexes.\n*[[Backtrace.to]], assumes the List contains Match objects, such as the $/ variable being a List, when using :g modifier in regexes.\n*[[List.to]], assumes the List contains Match objects, such as the $/ variable being a List, when using :g modifier in regexes.\n*[[Match.to]], returns the index of the end position of the match.\n*[[Slip.to]], assumes the List contains Match objects, such as the $/ variable being a List, when using :g modifier in regexes.			
Array.of	R	Positional.of										
Array.iterator	R	Iterable.iterator										
Array.flat	R	Iterable.flat										
Array.lazy	R	Iterable.lazy										
Array.hyper	R	Iterable.hyper										
Array.race	R	Iterable.race										
Array.abs	R	Iterable.abs										
Array.conj	R	Iterable.conj										
Array.sqrt	R	Iterable.sqrt										
Array.sign	R	Iterable.sign										
Array.rand	R	Iterable.rand										
Array.sin	R	Iterable.sin										
Array.asin	R	Iterable.asin										
Array.cos	R	Iterable.cos										
Array.acos	R	Iterable.acos										
Array.tan	R	Iterable.tan										
Array.atan	R	Iterable.atan										
Array.atan2	R	Iterable.atan2										
Array.sec	R	Iterable.sec										
Array.asec	R	Iterable.asec										
Array.cosec	R	Iterable.cosec										
Array.acosec	R	Iterable.acosec										
Array.cotan	R	Iterable.cotan										
Array.acotan	R	Iterable.acotan										
Array.sinh	R	Iterable.sinh										
Array.asinh	R	Iterable.asinh										
Array.cosh	R	Iterable.cosh										
Array.acosh	R	Iterable.acosh										
Array.tanh	R	Iterable.tanh										
Array.atanh	R	Iterable.atanh										
Array.sech	R	Iterable.sech										
Array.asech	R	Iterable.asech										
Array.cosech	R	Iterable.cosech										
Array.acosech	R	Iterable.acosech										
Array.cotanh	R	Iterable.cotanh										
Array.acotanh	R	Iterable.acotanh										
Array.cis	R	Iterable.cis										
Array.log	R	Iterable.log										
Array.log10	R	Iterable.log10										
Array.exp	R	Iterable.exp										
Array.unpolar	R	Iterable.unpolar										
Array.round	R	Iterable.round										
Array.floor	R	Iterable.floor										
Array.ceiling	R	Iterable.ceiling										
Array.truncate	R	Iterable.truncate										
Array.ord	R	Iterable.ord										
Array.chr	R	Iterable.chr										
Array.chars	R	Iterable.chars										
Array.codes	R	Iterable.codes										
Array.flip	R	Iterable.flip										
Array.trim	R	Iterable.trim										
Array.trim-leading	R	Iterable.trim-leading										
Array.trim-trailing	R	Iterable.trim-trailing										
Array.lc	R	Iterable.lc										
Array.uc	R	Iterable.uc										
Array.fc	R	Iterable.fc										
Array.tc	R	Iterable.tc										
Array.tclc	R	Iterable.tclc										
Array.wordcase	R	Iterable.wordcase										
Array.samecase	R	Iterable.samecase										
Array.uniprop	R	Iterable.uniprop										
Array.uniprops	R	Iterable.uniprops										
Array.uniname	R	Iterable.uniname										
Array.uninames	R	Iterable.uninames										
Array.unimatch	R	Iterable.unimatch										
Array.chop	R	Iterable.chop										
Array.chomp	R	Iterable.chomp										
Array.substr	R	Iterable.substr										
Array.ords	R	Iterable.ords										
Array.chrs	R	Iterable.chrs										
Array.split	R	Iterable.split										
Array.lines	R	Iterable.lines										
Array.words	R	Iterable.words										
Array.comb	R	Iterable.comb										
Array.contains	R	Iterable.contains										
Array.index	R	Iterable.index										
Array.rindex	R	Iterable.rindex										
Array.match	R	Iterable.match										
Array.fmt	R	Iterable.fmt										
Array.roots	R	Iterable.roots										
Array.IO	R	Iterable.IO										
Array.EVAL	R	Iterable.EVAL										
Array.EVALFILE	R	Iterable.EVALFILE										
Array.ACCEPTS	R	Iterable.ACCEPTS										
Array.any	R	Iterable.any										
Array.all	R	Iterable.all										
Array.one	R	Iterable.one										
Array.none	R	Iterable.none										
Array.list	R	Iterable.list										
Array.push	R	Iterable.push										
Array.reverse	R	Iterable.reverse										
Array.sort	R	Iterable.sort										
Array.map	R	Iterable.map										
Array.deepmap	R	Iterable.deepmap										
Array.duckmap	R	Iterable.duckmap										
Array.flat	R	Iterable.flat										
Array.eager	R	Iterable.eager										
Array.elems	R	Iterable.elems										
Array.end	R	Iterable.end										
Array.pairup	R	Iterable.pairup										
Array.exit	R	Iterable.exit										
Array.item	R	Iterable.item										
Array.defined	R	Iterable.defined										
Array.isa	R	Iterable.isa										
Array.does	R	Iterable.does										
Array.Bool	R	Iterable.Bool										
Array.Str	R	Iterable.Str										
Array.gist	R	Iterable.gist										
Array.perl	R	Iterable.perl										
Array.item	R	Iterable.item										
Array.clone	R	Iterable.clone										
Array.new	R	Iterable.new										
Array.bless	R	Iterable.bless										
Array.CREATE	R	Iterable.CREATE										
Array.print	R	Iterable.print										
Array.put	R	Iterable.put										
Array.say	R	Iterable.say										
Array.ACCEPTS	R	Iterable.ACCEPTS										
Array.WHICH	R	Iterable.WHICH										
Array.WHERE	R	Iterable.WHERE										
Array.WHY	R	Iterable.WHY										
Array.export	R	Iterable.export										
Array.return	R	Iterable.return										
Array.return-rw	R	Iterable.return-rw										
Array.emit	R	Iterable.emit										
Array.take	R	Iterable.take										
Array.take	R	Iterable.take										
Array.take-rw	R	Iterable.take-rw										
Array.so	R	Iterable.so										
Array.not	R	Iterable.not										
Associative.Associative	A			Perl 6 Associative							<section class="prog__container"><pre><code>role Associative { }\n</code></pre><p>A common role for types that support name-based lookup through postcircumfix:&lt;{ }&gt; , for example Hash and Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Associative.html#Associative
Attribute.name	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method name(Attribute:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the attribute.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#method_name
name	D								*[[Attribute.name]], returns the name of the attribute.\n*[[Macro.name]], returns the name of the sub or method.\n*[[Method.name]], returns the name of the sub or method.\n*[[Parameter.name]], returns the variable name, which includes all sigils and twigils.\n*[[Regex.name]], returns the name of the sub or method.\n*[[Routine.name]], returns the name of the sub or method.\n*[[Sub.name]], returns the name of the sub or method.\n*[[Submethod.name]], returns the name of the sub or method.\n*[[Thread.name]], returns the user defined string, which can optionally be set during object creation in order to identify the Thread, or &amp;#39;&lt;anon&gt;&amp;#39; if no such string was specified.\n*[[Variable.name]], returns the name of the variable, including the sigil.			
Attribute.package	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method package(Attribute:D: --&gt; Mu:U)\n</code></pre><p>Returns the package (class/grammar/role) to which this attribute belongs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#method_package
package	D								*[[Attribute.package]], returns the package (class/grammar/role) to which this attribute belongs.\n*[[Macro.package]], returns the package in which the routine is defined.\n*[[Method.package]], returns the package in which the routine is defined.\n*[[Regex.package]], returns the package in which the routine is defined.\n*[[Routine.package]], returns the package in which the routine is defined.\n*[[Sub.package]], returns the package in which the routine is defined.\n*[[Submethod.package]], returns the package in which the routine is defined.			
Attribute.has_accessor	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method has_accessor(Attribute:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the attribute has a public accessor method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#method_has_accessor
has_accessor	R	Attribute.has_accessor										
Attribute.readonly	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method readonly(Attribute:D: --&gt; Bool:D)\n</code></pre><p>Returns True for readonly attributes, which is the default.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#method_readonly
readonly	D								*[[Attribute.readonly]], returns True for readonly attributes, which is the default.\n*[[Parameter.readonly]], returns True for read-only parameters (the default).			
Attribute.type	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method type(Attribute:D: --&gt; Mu)\n</code></pre><p>Returns the type constraint of the attribute.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#method_type
type	D								*[[Attribute.type]], returns the type constraint of the attribute.\n*[[Parameter.type]], returns the nominal type constraint of the parameter.			
Attribute.get_value	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method get_value(Attribute:D: Mu $instance)\n</code></pre><p>Returns the value stored in this attribute of object $instance.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#method_get_value
get_value	R	Attribute.get_value										
Attribute.set_value	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method set_value(Attribute:D: Mu $instance, Mu &#92;new_val)\n</code></pre><p>Binds the value new_val to this attribute of object $instance.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#method_set_value
set_value	R	Attribute.set_value										
Attribute.required	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt; (Attribute $attr, :$required!)\n</code></pre><p>Marks an attribute as being required.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#trait_is_required
required	R	Attribute.required										
Attribute.rw	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt; (Attribute:D $attr, :$rw!)\n</code></pre><p>Marks an attribute as read/write as opposed to the default readonly.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#trait_is_rw
rw	D								*[[Attribute.rw]], marks an attribute as read/write as opposed to the default readonly.\n*[[Macro.rw]], when a routine is modified with this trait, its return value will be writable.\n*[[Method.rw]], when a routine is modified with this trait, its return value will be writable.\n*[[Parameter.rw]], returns True for is rw parameters.\n*[[Regex.rw]], when a routine is modified with this trait, its return value will be writable.\n*[[Routine.rw]], when a routine is modified with this trait, its return value will be writable.\n*[[Sub.rw]], when a routine is modified with this trait, its return value will be writable.\n*[[Submethod.rw]], when a routine is modified with this trait, its return value will be writable.			
Attribute.ACCEPTS	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_ACCEPTS
Attribute.any	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_any
Attribute.all	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_all
Attribute.one	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_one
Attribute.none	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_none
Attribute.list	A			Perl 6 Attribute							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_list
Attribute.push	A			Perl 6 Attribute							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_push
Attribute.reverse	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_routine_reverse
Attribute.sort	A			Perl 6 Attribute							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_sort
Attribute.map	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_map
Attribute.deepmap	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_deepmap
Attribute.duckmap	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_duckmap
Attribute.flat	A			Perl 6 Attribute							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_flat
Attribute.eager	A			Perl 6 Attribute							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_eager
Attribute.elems	A			Perl 6 Attribute							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_elems
Attribute.end	A			Perl 6 Attribute							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_end
Attribute.pairup	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_method_pairup
Attribute.exit	A			Perl 6 Attribute							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_sub_exit
Attribute.item	A			Perl 6 Attribute							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Any%29_sub_item
Attribute.defined	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_routine_defined
Attribute.isa	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_routine_isa
Attribute.does	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_routine_does
Attribute.Bool	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_routine_Bool
Attribute.Str	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_Str
Attribute.gist	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_routine_gist
Attribute.perl	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_routine_perl
Attribute.item	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_item
Attribute.clone	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_clone
Attribute.new	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_new
Attribute.bless	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_bless
Attribute.CREATE	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_CREATE
Attribute.print	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_print
Attribute.put	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_put
Attribute.say	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_say
Attribute.ACCEPTS	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_ACCEPTS
Attribute.WHICH	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_WHICH
Attribute.WHERE	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_WHERE
Attribute.WHY	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_WHY
Attribute.export	A			Perl 6 Attribute							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_trait_is_export
Attribute.return	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_return
Attribute.return-rw	A			Perl 6 Attribute							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_return-rw
Attribute.emit	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_emit
Attribute.take	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_take
Attribute.take	A			Perl 6 Attribute							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_routine_take
Attribute.take-rw	A			Perl 6 Attribute							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_routine_take-rw
Attribute.so	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_so
Attribute.not	A			Perl 6 Attribute							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Attribute.html#%28Mu%29_method_not
Backtrace.new	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method new(--&gt; Backtrace:D)\n</code></pre><p>Creates a new backtrace, using its calling location as the origin of the backtrace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#method_new
Backtrace.Str	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method Str(Backtrace:D:)\n</code></pre><p>Returns a concise string representation of the backtrace, omitting routines marked as is hidden-from-backtrace, and at the discretion of the implementation, also some routines from the setting.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#method_Str
Backtrace.full	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method full(Backtrace:D:)\n</code></pre><p>Returns a full string representation of the backtrace, including hidden frames, compiler-specific frames and those from the setting.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#method_full
full	R	Backtrace.full										
Backtrace.elems	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    elems($list --&gt; Int:D)\nmulti method elems(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_elems
Backtrace.end	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    end($list --&gt; Int:D)\nmulti method end(List:D: --&gt; Int:D)\n</code></pre><p>Returns the index of the last element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_end
Backtrace.keys	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    keys($list --&gt; Seq:D)\nmulti method keys(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_keys
Backtrace.values	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    values($list --&gt; Seq:D)\nmulti method values(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of the list elements, in order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_values
Backtrace.kv	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    kv($list --&gt; Seq:D)\nmulti method kv(List:D: --&gt; Seq:D)\n</code></pre><p>Returns an interleaved sequence of indexes and values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_kv
Backtrace.pairs	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    pairs($list --&gt; Seq:D)\nmulti method pairs(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of pairs, with the indexes as keys and the list values as values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_pairs
Backtrace.antipairs	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method antipairs(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of pairs, with the values as keys and the indexes as values, i.e. the direct opposite to pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_antipairs
Backtrace.join	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    join($separator, *@list --&gt; Str:D)\nmulti method join(List:D: $separator --&gt; Str:D)\n</code></pre><p>Treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_join
Backtrace.map	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    map(&amp;code, *@elems --&gt; Seq:D)\nmulti method map(List:D: &amp;code --&gt; Seq:D)\n</code></pre><p>Invokes &amp;code for each element and gathers the return values in a sequence and returns it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_map
Backtrace.flat	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>sub flat(**@list is raw)\n</code></pre><p>Constructs a list which contains any arguments provided in the order provided, and returns the result of calling the .flat method (inherited from Any) on that list:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_sub_flat
Backtrace.flatmap	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>method flatmap(List:D: &amp;code --&gt; Seq:D)\n</code></pre><p>Like map iterates over the elements of the invocant list, feeding each element in turn to the code reference, and assembling the return values from these invocations in a result list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_flatmap
Backtrace.grep	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    grep(Mu $matcher, *@elems, :$k, :$kv, :$p, :$v --&gt; Seq:D)\nmulti method grep(List:D:  Mu $matcher, :$k, :$kv, :$p, :$v --&gt; Seq:D)\n</code></pre><p>Returns a sequence of elements against which $matcher smart-matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_grep
Backtrace.first	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    first(Mu $matcher, *@elems, :$k, :$kv, :$p, :$end)\nmulti method first(List:D:  Mu $matcher?, :$k, :$kv, :$p, :$end)\n</code></pre><p>Returns the first item of the list which smart-matches against $matcher, returns Nil when no values match.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_first
Backtrace.head	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method head(List:D: Int(Cool) $number = 1 --&gt; Seq:D)\n</code></pre><p>Returns the first NUMBER items of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_head
Backtrace.tail	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method tail(List:D: Int(Cool) $number = 1 --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing the last NUMBER items of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_tail
Backtrace.categorize	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    categorize(&amp;mapper, *@values --&gt; Hash:D)\nmulti method categorize(List:D: &amp;mapper   --&gt; Hash:D)\n</code></pre><p>Transforms a list of values into a hash representing the categorizations of those values according to a mapper; each hash key represents one possible categorization for one or more of the incoming list values, and the corresponding hash value contains an array of those list values categorized by the mapper into the category of the associated key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_categorize
Backtrace.classify	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    classify(&amp;mapper, *@values --&gt; Hash:D)\nmulti method classify(List:D: &amp;mapper   --&gt; Hash:D)\n</code></pre><p>Transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_classify
Backtrace.Bool	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method Bool(List:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the list has at least one element, and False for the empty list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_Bool
Backtrace.Str	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method Str(List:D: --&gt; Str:D)\n</code></pre><p>Stringifies the elements of the list and joins them with spaces (same as .join(&amp;#39; &amp;#39;)).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_Str
Backtrace.Int	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method Int(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_Int
Backtrace.Numeric	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method Numeric(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_Numeric
Backtrace.Capture	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>method Capture(--&gt; Capture:D)\n</code></pre><p>Returns a Capture where each Pair, if any, in the List has been converted to a named argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_Capture
Backtrace.pick	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    pick($count, *@list --&gt; Seq:D)\nmulti method pick(List:D: $count --&gt; Seq:D)\nmulti method pick(List:D: --&gt; Mu)\n</code></pre><p>If $count is supplied: Returns $count elements chosen at random and without repetition from the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_pick
Backtrace.roll	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    roll($count, *@list --&gt; Seq:D)\nmulti method roll(List:D: $count --&gt; Seq:D)\nmulti method roll(List:D: --&gt; Mu)\n</code></pre><p>If $count is supplied: Returns a sequence of $count elements, each randomly selected from the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_roll
Backtrace.eager	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi method eager(List:D: --&gt; List:D)\nsub eager(*@elems --&gt; List:D)\n</code></pre><p>Evaluates all elements in the list eagerly, and returns them as a list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_eager
Backtrace.reverse	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_reverse
Backtrace.rotate	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    rotate(@list,  Int:D $n = 1 --&gt; List:D)\nmulti method rotate(List:D: Int:D $n = 1 --&gt; List:D)\n</code></pre><p>Returns the list rotated by $n elements.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_rotate
Backtrace.sort	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    sort(*@elems      --&gt; Seq:D)\nmulti sub    sort(&amp;by, *@elems --&gt; Seq:D)\nmulti method sort(List:D:      --&gt; Seq:D)\nmulti method sort(List:D: &amp;by  --&gt; Seq:D)\n</code></pre><p>Sorts the list, smallest element first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_sort
Backtrace.unique	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    unique(*@values, :&amp;as, :&amp;with --&gt; Seq:D)\nmulti method unique(List:D:  :&amp;as, :&amp;with --&gt; Seq:D)\n</code></pre><p>Returns a sequence of unique values from the invocant/argument list, such that only the first occurrence of each duplicated value remains in the result list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_unique
Backtrace.repeated	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    repeated(*@values, :&amp;as, :&amp;with --&gt; Seq:D)\nmulti method repeated(List:D:  :&amp;as, :&amp;with --&gt; Seq:D)\n</code></pre><p>Returns a sequence of repeated values from the invocant/argument list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_repeated
Backtrace.squish	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    squish(*@values, :&amp;as --&gt; Seq:D)\nmulti method squish(List:D:  :&amp;as --&gt; Seq:D)\n</code></pre><p>Returns a sequence of values from the invocant/argument list where runs of more than one value are replaced with only the first instance.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_squish
Backtrace.reduce	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    reduce(&amp;with, *@values)\nmulti method reduce(List:D: &amp;with)\n</code></pre><p>Generates a single "combined" value from a list of arbitrarily many of values, by iteratively applying a function which knows how to combine two values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_reduce
Backtrace.produce	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    produce(&amp;with, *@values)\nmulti method produce(List:D: &amp;with)\n</code></pre><p>Generates a list of all intermediate "combined" values along with the final result by iteratively applying a function which knows how to combine two values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_produce
Backtrace.combinations	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    combinations($n, $k                     --&gt; Seq:D)\nmulti method combinations(List:D: Int:D $of          --&gt; Seq:D)\nmulti method combinations(List:D: Range:D $of = 0..* --&gt; Seq:D)\n</code></pre><p>The Int variant returns all $of-combinations of the invocant list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_combinations
Backtrace.permutations	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    permutations($n      --&gt; Seq:D)\nmulti method permutations(List:D: --&gt; Seq:D)\n</code></pre><p>Returns all possible permutations of a list as a sequence of lists.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_permutations
Backtrace.rotor	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>method rotor(*@cycle, Bool() :$partial --&gt; Seq:D)\n</code></pre><p>Returns a sequence of lists, where each sublist is made up of elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_rotor
Backtrace.cross	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>sub cross(+@e, :&amp;with --&gt; Seq:D)\n</code></pre><p>Computes the cross-product of two or more lists or iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_cross
Backtrace.zip	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>sub zip(+@e, :&amp;with --&gt; Seq:D)\n</code></pre><p>Builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_zip
Backtrace.roundrobin	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>method roundrobin(List:D: --&gt; Seq)\n</code></pre><p>Builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_sub_roundrobin
Backtrace.sum	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>multi sub    sum($list   --&gt; Numeric:D)\nmulti method sum(List:D: --&gt; Numeric:D)\n</code></pre><p>Returns the sum of all elements in the list or 0 if the list is empty.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_routine_sum
Backtrace.fmt	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39;, $separator = &amp;#39; &amp;#39; --&gt; Str:D)\n</code></pre><p>Returns a string where each element in the list has been formatted according to $format and where each element is separated by $separator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_fmt
Backtrace.from	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>&amp;#39;abcdefg&amp;#39; ~~ /(c)(d)/;\nsay $/.list.from;         # 2 \n \n"abc123def" ~~ m:g/&#92;d/;\nsay $/.list.from;         # 3 \n</code></pre><p>Assumes the list contains Match objects and returns the value of .from called on the first element of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_from
Backtrace.to	A			Perl 6 Backtrace							<section class="prog__container"><pre><code>"abc123def" ~~ m:g/&#92;d/;\nsay $/.to; # 6 \n</code></pre><p>Assumes the List contains Match objects, such as the $/ variable being a List, when using :g modifier in regexes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Backtrace.html#%28List%29_method_to
Backtrace.of	R	Positional.of										
Backtrace.iterator	R	Iterable.iterator										
Backtrace.flat	R	Iterable.flat										
Backtrace.lazy	R	Iterable.lazy										
Backtrace.hyper	R	Iterable.hyper										
Backtrace.race	R	Iterable.race										
Backtrace.abs	R	Iterable.abs										
Backtrace.conj	R	Iterable.conj										
Backtrace.sqrt	R	Iterable.sqrt										
Backtrace.sign	R	Iterable.sign										
Backtrace.rand	R	Iterable.rand										
Backtrace.sin	R	Iterable.sin										
Backtrace.asin	R	Iterable.asin										
Backtrace.cos	R	Iterable.cos										
Backtrace.acos	R	Iterable.acos										
Backtrace.tan	R	Iterable.tan										
Backtrace.atan	R	Iterable.atan										
Backtrace.atan2	R	Iterable.atan2										
Backtrace.sec	R	Iterable.sec										
Backtrace.asec	R	Iterable.asec										
Backtrace.cosec	R	Iterable.cosec										
Backtrace.acosec	R	Iterable.acosec										
Backtrace.cotan	R	Iterable.cotan										
Backtrace.acotan	R	Iterable.acotan										
Backtrace.sinh	R	Iterable.sinh										
Backtrace.asinh	R	Iterable.asinh										
Backtrace.cosh	R	Iterable.cosh										
Backtrace.acosh	R	Iterable.acosh										
Backtrace.tanh	R	Iterable.tanh										
Backtrace.atanh	R	Iterable.atanh										
Backtrace.sech	R	Iterable.sech										
Backtrace.asech	R	Iterable.asech										
Backtrace.cosech	R	Iterable.cosech										
Backtrace.acosech	R	Iterable.acosech										
Backtrace.cotanh	R	Iterable.cotanh										
Backtrace.acotanh	R	Iterable.acotanh										
Backtrace.cis	R	Iterable.cis										
Backtrace.log	R	Iterable.log										
Backtrace.log10	R	Iterable.log10										
Backtrace.exp	R	Iterable.exp										
Backtrace.unpolar	R	Iterable.unpolar										
Backtrace.round	R	Iterable.round										
Backtrace.floor	R	Iterable.floor										
Backtrace.ceiling	R	Iterable.ceiling										
Backtrace.truncate	R	Iterable.truncate										
Backtrace.ord	R	Iterable.ord										
Backtrace.chr	R	Iterable.chr										
Backtrace.chars	R	Iterable.chars										
Backtrace.codes	R	Iterable.codes										
Backtrace.flip	R	Iterable.flip										
Backtrace.trim	R	Iterable.trim										
Backtrace.trim-leading	R	Iterable.trim-leading										
Backtrace.trim-trailing	R	Iterable.trim-trailing										
Backtrace.lc	R	Iterable.lc										
Backtrace.uc	R	Iterable.uc										
Backtrace.fc	R	Iterable.fc										
Backtrace.tc	R	Iterable.tc										
Backtrace.tclc	R	Iterable.tclc										
Backtrace.wordcase	R	Iterable.wordcase										
Backtrace.samecase	R	Iterable.samecase										
Backtrace.uniprop	R	Iterable.uniprop										
Backtrace.uniprops	R	Iterable.uniprops										
Backtrace.uniname	R	Iterable.uniname										
Backtrace.uninames	R	Iterable.uninames										
Backtrace.unimatch	R	Iterable.unimatch										
Backtrace.chop	R	Iterable.chop										
Backtrace.chomp	R	Iterable.chomp										
Backtrace.substr	R	Iterable.substr										
Backtrace.ords	R	Iterable.ords										
Backtrace.chrs	R	Iterable.chrs										
Backtrace.split	R	Iterable.split										
Backtrace.lines	R	Iterable.lines										
Backtrace.words	R	Iterable.words										
Backtrace.comb	R	Iterable.comb										
Backtrace.contains	R	Iterable.contains										
Backtrace.index	R	Iterable.index										
Backtrace.rindex	R	Iterable.rindex										
Backtrace.match	R	Iterable.match										
Backtrace.fmt	R	Iterable.fmt										
Backtrace.roots	R	Iterable.roots										
Backtrace.IO	R	Iterable.IO										
Backtrace.EVAL	R	Iterable.EVAL										
Backtrace.EVALFILE	R	Iterable.EVALFILE										
Backtrace.ACCEPTS	R	Iterable.ACCEPTS										
Backtrace.any	R	Iterable.any										
Backtrace.all	R	Iterable.all										
Backtrace.one	R	Iterable.one										
Backtrace.none	R	Iterable.none										
Backtrace.list	R	Iterable.list										
Backtrace.push	R	Iterable.push										
Backtrace.reverse	R	Iterable.reverse										
Backtrace.sort	R	Iterable.sort										
Backtrace.map	R	Iterable.map										
Backtrace.deepmap	R	Iterable.deepmap										
Backtrace.duckmap	R	Iterable.duckmap										
Backtrace.flat	R	Iterable.flat										
Backtrace.eager	R	Iterable.eager										
Backtrace.elems	R	Iterable.elems										
Backtrace.end	R	Iterable.end										
Backtrace.pairup	R	Iterable.pairup										
Backtrace.exit	R	Iterable.exit										
Backtrace.item	R	Iterable.item										
Backtrace.defined	R	Iterable.defined										
Backtrace.isa	R	Iterable.isa										
Backtrace.does	R	Iterable.does										
Backtrace.Bool	R	Iterable.Bool										
Backtrace.Str	R	Iterable.Str										
Backtrace.gist	R	Iterable.gist										
Backtrace.perl	R	Iterable.perl										
Backtrace.item	R	Iterable.item										
Backtrace.clone	R	Iterable.clone										
Backtrace.new	R	Iterable.new										
Backtrace.bless	R	Iterable.bless										
Backtrace.CREATE	R	Iterable.CREATE										
Backtrace.print	R	Iterable.print										
Backtrace.put	R	Iterable.put										
Backtrace.say	R	Iterable.say										
Backtrace.ACCEPTS	R	Iterable.ACCEPTS										
Backtrace.WHICH	R	Iterable.WHICH										
Backtrace.WHERE	R	Iterable.WHERE										
Backtrace.WHY	R	Iterable.WHY										
Backtrace.export	R	Iterable.export										
Backtrace.return	R	Iterable.return										
Backtrace.return-rw	R	Iterable.return-rw										
Backtrace.emit	R	Iterable.emit										
Backtrace.take	R	Iterable.take										
Backtrace.take	R	Iterable.take										
Backtrace.take-rw	R	Iterable.take-rw										
Backtrace.so	R	Iterable.so										
Backtrace.not	R	Iterable.not										
Bag.bag	A			Perl 6 Bag							<section class="prog__container"><pre><code>sub bag(*@args --&gt; Bag)\n</code></pre><p>Creates a new Bag from @args.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#sub_bag
bag	R	Bag.bag										
Bag.new-from-pairs	A			Perl 6 Bag							<section class="prog__container"><pre><code>method new-from-pairs(*@pairs --&gt; Baggy:D)\n</code></pre><p>Constructs a Baggy objects from a list of Pair objects given as positional arguments:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_new-from-pairs
new-from-pairs	D								*[[Bag.new-from-pairs]], constructs a Baggy objects from a list of Pair objects given as positional arguments:\n*[[BagHash.new-from-pairs]], constructs a Baggy objects from a list of Pair objects given as positional arguments:\n*[[Baggy.new-from-pairs]], constructs a Baggy objects from a list of Pair objects given as positional arguments:\n*[[Mix.new-from-pairs]], constructs a Baggy objects from a list of Pair objects given as positional arguments:\n*[[MixHash.new-from-pairs]], constructs a Baggy objects from a list of Pair objects given as positional arguments:\n*[[Mixy.new-from-pairs]], constructs a Baggy objects from a list of Pair objects given as positional arguments:\n*[[Set.new-from-pairs]], constructs a Setty object from a list of Pair objects given as positional arguments:\n*[[SetHash.new-from-pairs]], constructs a Setty object from a list of Pair objects given as positional arguments:\n*[[Setty.new-from-pairs]], constructs a Setty object from a list of Pair objects given as positional arguments:			
Bag.grab	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method grab(Baggy:D: --&gt; Any)\nmulti method grab(Baggy:D: $count --&gt; Array:D)\n</code></pre><p>Like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_grab
grab	D								*[[Bag.grab]], like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.\n*[[BagHash.grab]], like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.\n*[[Baggy.grab]], like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.\n*[[Mix.grab]], like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.\n*[[MixHash.grab]], like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.\n*[[Mixy.grab]], like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.\n*[[Set.grab]], removes and returns $count elements chosen at random (without repetition) from the set.\n*[[SetHash.grab]], removes and returns $count elements chosen at random (without repetition) from the set.\n*[[Setty.grab]], removes and returns $count elements chosen at random (without repetition) from the set.\n*[[done.grab]], waits until the given supply is done.			
Bag.grabpairs	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method grabpairs(Baggy:D: --&gt; Any)\nmulti method grabpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_grabpairs
grabpairs	D								*[[Bag.grabpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[BagHash.grabpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[Baggy.grabpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[Mix.grabpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[MixHash.grabpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[Mixy.grabpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[Set.grabpairs]], removes $count elements chosen at random (without repetition) from the set, and returns a list of Pair objects whose keys are the grabbed elements and whose values are True.\n*[[SetHash.grabpairs]], removes $count elements chosen at random (without repetition) from the set, and returns a list of Pair objects whose keys are the grabbed elements and whose values are True.\n*[[Setty.grabpairs]], removes $count elements chosen at random (without repetition) from the set, and returns a list of Pair objects whose keys are the grabbed elements and whose values are True.			
Bag.pick	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method pick(Baggy:D: --&gt; Any)\nmulti method pick(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_pick
Bag.pickpairs	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method pickpairs(Baggy:D: --&gt; Pair:D)\nmulti method pickpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_pickpairs
pickpairs	D								*[[Bag.pickpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[BagHash.pickpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[Baggy.pickpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[Mix.pickpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[MixHash.pickpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.\n*[[Mixy.pickpairs]], returns a Pair or a List of Pairs depending on the version of the method being invoked.			
Bag.roll	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method roll(Baggy:D: --&gt; Any:D)\nmulti method roll(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_roll
Bag.pairs	A			Perl 6 Bag							<section class="prog__container"><pre><code>method pairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_pairs
Bag.antipairs	A			Perl 6 Bag							<section class="prog__container"><pre><code>method antipairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_antipairs
Bag.invert	A			Perl 6 Bag							<section class="prog__container"><pre><code>method invert(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_invert
invert	D								*[[Bag.invert]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[BagHash.invert]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[Baggy.invert]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[Hash.invert]], returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged.\n*[[Map.invert]], returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged.\n*[[Mix.invert]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[MixHash.invert]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[Mixy.invert]], returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. \n*[[Pair.invert]], returns a new Pair object with key and value exchanged, just like antipair, unless the value of the invocant does the Iterable role.\n*[[Stash.invert]], returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged.			
Bag.classify-list	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method classify-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(%mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_classify-list
classify-list	D								*[[Bag.classify-list]], populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.\n*[[BagHash.classify-list]], populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.\n*[[Baggy.classify-list]], populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.\n*[[Hash.classify-list]], populates a Hash.\n*[[Mix.classify-list]], populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.\n*[[MixHash.classify-list]], populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.\n*[[Mixy.classify-list]], populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.\n*[[Stash.classify-list]], populates a Hash.			
Bag.categorize-list	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method categorize-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(%mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_categorize-list
categorize-list	D								*[[Bag.categorize-list]], populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.\n*[[BagHash.categorize-list]], populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.\n*[[Baggy.categorize-list]], populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.\n*[[Hash.categorize-list]], populates a Hash.\n*[[Mix.categorize-list]], populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.\n*[[MixHash.categorize-list]], populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.\n*[[Mixy.categorize-list]], populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.\n*[[Stash.categorize-list]], populates a Hash.			
Bag.keys	A			Perl 6 Bag							<section class="prog__container"><pre><code>method keys(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_keys
Bag.values	A			Perl 6 Bag							<section class="prog__container"><pre><code>method values(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all values, i.e. weights, in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_values
Bag.kv	A			Perl 6 Bag							<section class="prog__container"><pre><code>method kv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of keys and values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_kv
Bag.kxxv	A			Perl 6 Bag							<section class="prog__container"><pre><code>method kxxv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of the keys of the invocant, with each key multiplied by its weight.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_kxxv
kxxv	D								*[[Bag.kxxv]], returns a list of the keys of the invocant, with each key multiplied by its weight.\n*[[BagHash.kxxv]], returns a list of the keys of the invocant, with each key multiplied by its weight.\n*[[Baggy.kxxv]], returns a list of the keys of the invocant, with each key multiplied by its weight.\n*[[Mix.kxxv]], returns a list of the keys of the invocant, with each key multiplied by its weight.\n*[[MixHash.kxxv]], returns a list of the keys of the invocant, with each key multiplied by its weight.\n*[[Mixy.kxxv]], returns a list of the keys of the invocant, with each key multiplied by its weight.			
Bag.elems	A			Perl 6 Bag							<section class="prog__container"><pre><code>method elems(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the Baggy object without taking the individual elements weight into account.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_elems
Bag.total	A			Perl 6 Bag							<section class="prog__container"><pre><code>method total(Baggy:D:)\n</code></pre><p>Returns the sum of weights for all elements in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_total
total	D								*[[Bag.total]], returns the sum of weights for all elements in the Baggy object.\n*[[BagHash.total]], returns the sum of weights for all elements in the Baggy object.\n*[[Baggy.total]], returns the sum of weights for all elements in the Baggy object.\n*[[Mix.total]], returns the sum of weights for all elements in the Baggy object.\n*[[MixHash.total]], returns the sum of weights for all elements in the Baggy object.\n*[[Mixy.total]], returns the sum of weights for all elements in the Baggy object.\n*[[Set.total]], the total of all the values of the QuantHash object.\n*[[SetHash.total]], the total of all the values of the QuantHash object.\n*[[Setty.total]], the total of all the values of the QuantHash object.			
Bag.default	A			Perl 6 Bag							<section class="prog__container"><pre><code>method default(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_default
Bag.hash	A			Perl 6 Bag							<section class="prog__container"><pre><code>method hash(Baggy:D: --&gt; Hash:D)\n</code></pre><p>Returns a Hash where the elements of the invocant are the keys and their respective weights the values;&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_hash
hash	D								*[[Bag.hash]], returns a Hash where the elements of the invocant are the keys and their respective weights the values;\n*[[BagHash.hash]], returns a Hash where the elements of the invocant are the keys and their respective weights the values;\n*[[Baggy.hash]], returns a Hash where the elements of the invocant are the keys and their respective weights the values;\n*[[Capture.hash]], returns the named/hash part of the Capture.\n*[[Match.hash]], returns the named/hash part of the Capture.\n*[[Mix.hash]], returns a Hash where the elements of the invocant are the keys and their respective weights the values;\n*[[MixHash.hash]], returns a Hash where the elements of the invocant are the keys and their respective weights the values;\n*[[Mixy.hash]], returns a Hash where the elements of the invocant are the keys and their respective weights the values;			
Bag.Bool	A			Perl 6 Bag							<section class="prog__container"><pre><code>method Bool(Baggy:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_Bool
Bag.Set	A			Perl 6 Bag							<section class="prog__container"><pre><code>method Set(--&gt; Set:D)\n</code></pre><p>Returns a Set whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_Set
Bag.SetHash	A			Perl 6 Bag							<section class="prog__container"><pre><code>method SetHash(--&gt; SetHash:D)\n</code></pre><p>Returns a SetHash whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_SetHash
Bag.ACCEPTS	A			Perl 6 Bag							<section class="prog__container"><pre><code>method ACCEPTS($other --&gt; Bool:D)\n</code></pre><p>Used in smart-matching if the right-hand side is a Baggy.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Baggy%29_method_ACCEPTS
Bag.ACCEPTS	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_ACCEPTS
Bag.any	A			Perl 6 Bag							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_any
Bag.all	A			Perl 6 Bag							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_all
Bag.one	A			Perl 6 Bag							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_one
Bag.none	A			Perl 6 Bag							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_none
Bag.list	A			Perl 6 Bag							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_list
Bag.push	A			Perl 6 Bag							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_push
Bag.reverse	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_routine_reverse
Bag.sort	A			Perl 6 Bag							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_sort
Bag.map	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_map
Bag.deepmap	A			Perl 6 Bag							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_deepmap
Bag.duckmap	A			Perl 6 Bag							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_duckmap
Bag.flat	A			Perl 6 Bag							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_flat
Bag.eager	A			Perl 6 Bag							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_eager
Bag.elems	A			Perl 6 Bag							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_elems
Bag.end	A			Perl 6 Bag							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_end
Bag.pairup	A			Perl 6 Bag							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_method_pairup
Bag.exit	A			Perl 6 Bag							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_sub_exit
Bag.item	A			Perl 6 Bag							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Any%29_sub_item
Bag.defined	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_routine_defined
Bag.isa	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_routine_isa
Bag.does	A			Perl 6 Bag							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_routine_does
Bag.Bool	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_routine_Bool
Bag.Str	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_Str
Bag.gist	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_routine_gist
Bag.perl	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_routine_perl
Bag.item	A			Perl 6 Bag							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_item
Bag.clone	A			Perl 6 Bag							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_clone
Bag.new	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_new
Bag.bless	A			Perl 6 Bag							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_bless
Bag.CREATE	A			Perl 6 Bag							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_CREATE
Bag.print	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_print
Bag.put	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_put
Bag.say	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_say
Bag.ACCEPTS	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_ACCEPTS
Bag.WHICH	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_WHICH
Bag.WHERE	A			Perl 6 Bag							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_WHERE
Bag.WHY	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_WHY
Bag.export	A			Perl 6 Bag							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_trait_is_export
Bag.return	A			Perl 6 Bag							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_return
Bag.return-rw	A			Perl 6 Bag							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_return-rw
Bag.emit	A			Perl 6 Bag							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_emit
Bag.take	A			Perl 6 Bag							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_take
Bag.take	A			Perl 6 Bag							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_routine_take
Bag.take-rw	A			Perl 6 Bag							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_routine_take-rw
Bag.so	A			Perl 6 Bag							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_so
Bag.not	A			Perl 6 Bag							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bag.html#%28Mu%29_method_not
BagHash.new-from-pairs	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method new-from-pairs(*@pairs --&gt; Baggy:D)\n</code></pre><p>Constructs a Baggy objects from a list of Pair objects given as positional arguments:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_new-from-pairs
BagHash.grab	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method grab(Baggy:D: --&gt; Any)\nmulti method grab(Baggy:D: $count --&gt; Array:D)\n</code></pre><p>Like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_grab
BagHash.grabpairs	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method grabpairs(Baggy:D: --&gt; Any)\nmulti method grabpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_grabpairs
BagHash.pick	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method pick(Baggy:D: --&gt; Any)\nmulti method pick(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_pick
BagHash.pickpairs	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method pickpairs(Baggy:D: --&gt; Pair:D)\nmulti method pickpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_pickpairs
BagHash.roll	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method roll(Baggy:D: --&gt; Any:D)\nmulti method roll(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_roll
BagHash.pairs	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method pairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_pairs
BagHash.antipairs	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method antipairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_antipairs
BagHash.invert	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method invert(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_invert
BagHash.classify-list	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method classify-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(%mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_classify-list
BagHash.categorize-list	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method categorize-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(%mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_categorize-list
BagHash.keys	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method keys(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_keys
BagHash.values	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method values(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all values, i.e. weights, in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_values
BagHash.kv	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method kv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of keys and values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_kv
BagHash.kxxv	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method kxxv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of the keys of the invocant, with each key multiplied by its weight.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_kxxv
BagHash.elems	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method elems(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the Baggy object without taking the individual elements weight into account.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_elems
BagHash.total	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method total(Baggy:D:)\n</code></pre><p>Returns the sum of weights for all elements in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_total
BagHash.default	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method default(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_default
BagHash.hash	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method hash(Baggy:D: --&gt; Hash:D)\n</code></pre><p>Returns a Hash where the elements of the invocant are the keys and their respective weights the values;&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_hash
BagHash.Bool	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method Bool(Baggy:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_Bool
BagHash.Set	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method Set(--&gt; Set:D)\n</code></pre><p>Returns a Set whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_Set
BagHash.SetHash	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method SetHash(--&gt; SetHash:D)\n</code></pre><p>Returns a SetHash whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_SetHash
BagHash.ACCEPTS	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method ACCEPTS($other --&gt; Bool:D)\n</code></pre><p>Used in smart-matching if the right-hand side is a Baggy.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Baggy%29_method_ACCEPTS
BagHash.ACCEPTS	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_ACCEPTS
BagHash.any	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_any
BagHash.all	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_all
BagHash.one	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_one
BagHash.none	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_none
BagHash.list	A			Perl 6 BagHash							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_list
BagHash.push	A			Perl 6 BagHash							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_push
BagHash.reverse	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_routine_reverse
BagHash.sort	A			Perl 6 BagHash							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_sort
BagHash.map	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_map
BagHash.deepmap	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_deepmap
BagHash.duckmap	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_duckmap
BagHash.flat	A			Perl 6 BagHash							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_flat
BagHash.eager	A			Perl 6 BagHash							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_eager
BagHash.elems	A			Perl 6 BagHash							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_elems
BagHash.end	A			Perl 6 BagHash							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_end
BagHash.pairup	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_method_pairup
BagHash.exit	A			Perl 6 BagHash							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_sub_exit
BagHash.item	A			Perl 6 BagHash							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Any%29_sub_item
BagHash.defined	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_routine_defined
BagHash.isa	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_routine_isa
BagHash.does	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_routine_does
BagHash.Bool	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_routine_Bool
BagHash.Str	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_Str
BagHash.gist	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_routine_gist
BagHash.perl	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_routine_perl
BagHash.item	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_item
BagHash.clone	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_clone
BagHash.new	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_new
BagHash.bless	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_bless
BagHash.CREATE	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_CREATE
BagHash.print	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_print
BagHash.put	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_put
BagHash.say	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_say
BagHash.ACCEPTS	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_ACCEPTS
BagHash.WHICH	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_WHICH
BagHash.WHERE	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_WHERE
BagHash.WHY	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_WHY
BagHash.export	A			Perl 6 BagHash							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_trait_is_export
BagHash.return	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_return
BagHash.return-rw	A			Perl 6 BagHash							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_return-rw
BagHash.emit	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_emit
BagHash.take	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_take
BagHash.take	A			Perl 6 BagHash							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_routine_take
BagHash.take-rw	A			Perl 6 BagHash							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_routine_take-rw
BagHash.so	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_so
BagHash.not	A			Perl 6 BagHash							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/BagHash.html#%28Mu%29_method_not
Baggy.new-from-pairs	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method new-from-pairs(*@pairs --&gt; Baggy:D)\n</code></pre><p>Constructs a Baggy objects from a list of Pair objects given as positional arguments:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_new-from-pairs
Baggy.grab	A			Perl 6 Baggy							<section class="prog__container"><pre><code>multi method grab(Baggy:D: --&gt; Any)\nmulti method grab(Baggy:D: $count --&gt; Array:D)\n</code></pre><p>Like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_grab
Baggy.grabpairs	A			Perl 6 Baggy							<section class="prog__container"><pre><code>multi method grabpairs(Baggy:D: --&gt; Any)\nmulti method grabpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_grabpairs
Baggy.pick	A			Perl 6 Baggy							<section class="prog__container"><pre><code>multi method pick(Baggy:D: --&gt; Any)\nmulti method pick(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_pick
Baggy.pickpairs	A			Perl 6 Baggy							<section class="prog__container"><pre><code>multi method pickpairs(Baggy:D: --&gt; Pair:D)\nmulti method pickpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_pickpairs
Baggy.roll	A			Perl 6 Baggy							<section class="prog__container"><pre><code>multi method roll(Baggy:D: --&gt; Any:D)\nmulti method roll(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_roll
Baggy.pairs	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method pairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_pairs
Baggy.antipairs	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method antipairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_antipairs
Baggy.invert	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method invert(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_invert
Baggy.classify-list	A			Perl 6 Baggy							<section class="prog__container"><pre><code>multi method classify-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(%mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_classify-list
Baggy.categorize-list	A			Perl 6 Baggy							<section class="prog__container"><pre><code>multi method categorize-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(%mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_categorize-list
Baggy.keys	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method keys(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_keys
Baggy.values	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method values(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all values, i.e. weights, in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_values
Baggy.kv	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method kv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of keys and values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_kv
Baggy.kxxv	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method kxxv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of the keys of the invocant, with each key multiplied by its weight.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_kxxv
Baggy.elems	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method elems(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the Baggy object without taking the individual elements weight into account.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_elems
Baggy.total	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method total(Baggy:D:)\n</code></pre><p>Returns the sum of weights for all elements in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_total
Baggy.default	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method default(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_default
Baggy.hash	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method hash(Baggy:D: --&gt; Hash:D)\n</code></pre><p>Returns a Hash where the elements of the invocant are the keys and their respective weights the values;&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_hash
Baggy.Bool	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method Bool(Baggy:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_Bool
Baggy.Set	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method Set(--&gt; Set:D)\n</code></pre><p>Returns a Set whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_Set
Baggy.SetHash	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method SetHash(--&gt; SetHash:D)\n</code></pre><p>Returns a SetHash whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_SetHash
Baggy.ACCEPTS	A			Perl 6 Baggy							<section class="prog__container"><pre><code>method ACCEPTS($other --&gt; Bool:D)\n</code></pre><p>Used in smart-matching if the right-hand side is a Baggy.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Baggy.html#method_ACCEPTS
Blob.new	A			Perl 6 Blob							<section class="prog__container"><pre><code>method new(*@codes)\n</code></pre><p>Creates a Blob from a list of integers.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Blob.html#method_new
Blob.Bool	A			Perl 6 Blob							<section class="prog__container"><pre><code>multi method Bool(Blob:D:)\n</code></pre><p>Returns False if and only if the buffer is empty.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Blob.html#method_Bool
Blob.elems	A			Perl 6 Blob							<section class="prog__container"><pre><code>multi method elems(Blob:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements of the buffer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Blob.html#method_elems
Blob.bytes	A			Perl 6 Blob							<section class="prog__container"><pre><code>method bytes(Blob:D: --&gt; Int:D)\n</code></pre><p>Returns the number of bytes used by the elements in the buffer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Blob.html#method_bytes
bytes	D								*[[Blob.bytes]], returns the number of bytes used by the elements in the buffer.\n*[[Buf.bytes]], returns the number of bytes used by the elements in the buffer.			
Blob.decode	A			Perl 6 Blob							<section class="prog__container"><pre><code>multi method decode(Blob:D: Str:D $encoding = &amp;#39;UTF-8&amp;#39; --&gt; Str:D)\n</code></pre><p>Applies an encoding to turn the blob into a Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Blob.html#method_decode
decode	D								*[[Blob.decode]], applies an encoding to turn the blob into a Str.\n*[[Buf.decode]], applies an encoding to turn the blob into a Str.			
Blob.subbuf	A			Perl 6 Blob							<section class="prog__container"><pre><code>multi method subbuf(Int $from, Int $len = self.elems --&gt; Blob:D)\nmulti method subbuf(Range $range --&gt; Blob:D)\n</code></pre><p>Extracts a part of the invocant buffer, starting from the index with elements $from, and taking $len elements (or less if the buffer is shorter), and creates a new buffer as the result.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Blob.html#method_subbuf
subbuf	D								*[[Blob.subbuf]], extracts a part of the invocant buffer, starting from the index with elements $from, and taking $len elements (or less if the buffer is shorter), and creates a new buffer as the result.\n*[[Buf.subbuf]], extracts a part of the invocant buffer, starting from the index with elements $from, and taking $len elements (or less if the buffer is shorter), and creates a new buffer as the result.			
Blob.unpack	A			Perl 6 Blob							<section class="prog__container"><pre><code>use experimental :pack;\n</code></pre><p>This method is considered experimental, in order to use it you will need to do:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Blob.html#method_unpack
unpack	D								*[[Blob.unpack]], this method is considered experimental, in order to use it you will need to do:\n*[[Buf.unpack]], this method is considered experimental, in order to use it you will need to do:			
Blob.pack	A			Perl 6 Blob							<section class="prog__container"><pre><code>use experimental :pack;\n    sub pack(Str $template, *@items --&gt; Buf)\n</code></pre><p>This subroutine is considered experimental, in order to use it you will need to do:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Blob.html#sub_pack
pack	D								*[[Blob.pack]], this subroutine is considered experimental, in order to use it you will need to do:\n*[[Buf.pack]], this subroutine is considered experimental, in order to use it you will need to do:			
Blob.of	A			Perl 6 Blob							<section class="prog__container"><pre><code>method of()\n</code></pre><p>Returns the type constraint for elements of the positional container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Blob.html#%28Positional%29_method_of
Block.ACCEPTS	A			Perl 6 Block							<section class="prog__container"><pre><code>multi method ACCEPTS(Code:D: Mu $topic)\n</code></pre><p>Usually calls the code object and passes $topic as an argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Block.html#%28Code%29_method_ACCEPTS
Block.arity	A			Perl 6 Block							<section class="prog__container"><pre><code>method arity(Code:D: --&gt; Int:D)\n</code></pre><p>Returns the minimum number of positional arguments that must be passed in order to call the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Block.html#%28Code%29_method_arity
arity	D								*[[Block.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.\n*[[Code.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.\n*[[Macro.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.\n*[[Method.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.\n*[[Regex.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.\n*[[Routine.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.\n*[[Signature.arity]], returns the minimal number of positional arguments required to satisfy the signature.\n*[[Sub.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.\n*[[Submethod.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.\n*[[WhateverCode.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.			
Block.count	A			Perl 6 Block							<section class="prog__container"><pre><code>method count(Code:D: --&gt; Real:D)\n</code></pre><p>Returns the maximum number of positional arguments that may be passed when calling the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Block.html#%28Code%29_method_count
count	D								*[[Block.count]], returns the maximum number of positional arguments that may be passed when calling the code object.\n*[[Code.count]], returns the maximum number of positional arguments that may be passed when calling the code object.\n*[[Macro.count]], returns the maximum number of positional arguments that may be passed when calling the code object.\n*[[Method.count]], returns the maximum number of positional arguments that may be passed when calling the code object.\n*[[Regex.count]], returns the maximum number of positional arguments that may be passed when calling the code object.\n*[[Routine.count]], returns the maximum number of positional arguments that may be passed when calling the code object.\n*[[Signature.count]], returns the maximal number of positional arguments which can be bound to the signature.\n*[[Sub.count]], returns the maximum number of positional arguments that may be passed when calling the code object.\n*[[Submethod.count]], returns the maximum number of positional arguments that may be passed when calling the code object.\n*[[WhateverCode.count]], returns the maximum number of positional arguments that may be passed when calling the code object.			
Block.signature	A			Perl 6 Block							<section class="prog__container"><pre><code>multi method signature(Code:D: --&gt; Signature:D)\n</code></pre><p>Returns the Signature object for this code object, which describes its parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Block.html#%28Code%29_method_signature
signature	D								*[[Block.signature]], returns the Signature object for this code object, which describes its parameters.\n*[[Code.signature]], returns the Signature object for this code object, which describes its parameters.\n*[[Macro.signature]], returns the Signature object for this code object, which describes its parameters.\n*[[Method.signature]], returns the Signature object for this code object, which describes its parameters.\n*[[Regex.signature]], returns the Signature object for this code object, which describes its parameters.\n*[[Routine.signature]], returns the Signature object for this code object, which describes its parameters.\n*[[Sub.signature]], returns the Signature object for this code object, which describes its parameters.\n*[[Submethod.signature]], returns the Signature object for this code object, which describes its parameters.\n*[[WhateverCode.signature]], returns the Signature object for this code object, which describes its parameters.			
Block.Str	A			Perl 6 Block							<section class="prog__container"><pre><code>multi method Str(Code:D: --&gt; Str:D)\n</code></pre><p>Will produce a warning.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Block.html#%28Code%29_method_Str
Block.file	A			Perl 6 Block							<section class="prog__container"><pre><code>method file(Code:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the file in which the code object was declared.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Block.html#%28Code%29_method_file
file	D								*[[Block.file]], returns the name of the file in which the code object was declared.\n*[[CallFrame.file]], this is a shortcut for looking up the file annotation.\n*[[Code.file]], returns the name of the file in which the code object was declared.\n*[[Macro.file]], returns the name of the file in which the code object was declared.\n*[[Method.file]], returns the name of the file in which the code object was declared.\n*[[Regex.file]], returns the name of the file in which the code object was declared.\n*[[Routine.file]], returns the name of the file in which the code object was declared.\n*[[Sub.file]], returns the name of the file in which the code object was declared.\n*[[Submethod.file]], returns the name of the file in which the code object was declared.\n*[[WhateverCode.file]], returns the name of the file in which the code object was declared.			
Block.line	A			Perl 6 Block							<section class="prog__container"><pre><code>method line(Code:D: --&gt; Int:D)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Block.html#%28Code%29_method_line
line	D								*[[Block.line]], defined as\n*[[CallFrame.line]], this is a shortcut for looking up the line annotation.\n*[[Code.line]], defined as\n*[[Macro.line]], defined as\n*[[Method.line]], defined as\n*[[Regex.line]], defined as\n*[[Routine.line]], defined as\n*[[Sub.line]], defined as\n*[[Submethod.line]], defined as\n*[[WhateverCode.line]], defined as			
Block.CALL-ME	R	Callable.CALL-ME										
Block.assuming	R	Callable.assuming										
Block.ACCEPTS	R	Callable.ACCEPTS										
Block.any	R	Callable.any										
Block.all	R	Callable.all										
Block.one	R	Callable.one										
Block.none	R	Callable.none										
Block.list	R	Callable.list										
Block.push	R	Callable.push										
Block.reverse	R	Callable.reverse										
Block.sort	R	Callable.sort										
Block.map	R	Callable.map										
Block.deepmap	R	Callable.deepmap										
Block.duckmap	R	Callable.duckmap										
Block.flat	R	Callable.flat										
Block.eager	R	Callable.eager										
Block.elems	R	Callable.elems										
Block.end	R	Callable.end										
Block.pairup	R	Callable.pairup										
Block.exit	R	Callable.exit										
Block.item	R	Callable.item										
Block.defined	R	Callable.defined										
Block.isa	R	Callable.isa										
Block.does	R	Callable.does										
Block.Bool	R	Callable.Bool										
Block.Str	R	Callable.Str										
Block.gist	R	Callable.gist										
Block.perl	R	Callable.perl										
Block.item	R	Callable.item										
Block.clone	R	Callable.clone										
Block.new	R	Callable.new										
Block.bless	R	Callable.bless										
Block.CREATE	R	Callable.CREATE										
Block.print	R	Callable.print										
Block.put	R	Callable.put										
Block.say	R	Callable.say										
Block.ACCEPTS	R	Callable.ACCEPTS										
Block.WHICH	R	Callable.WHICH										
Block.WHERE	R	Callable.WHERE										
Block.WHY	R	Callable.WHY										
Block.export	R	Callable.export										
Block.return	R	Callable.return										
Block.return-rw	R	Callable.return-rw										
Block.emit	R	Callable.emit										
Block.take	R	Callable.take										
Block.take	R	Callable.take										
Block.take-rw	R	Callable.take-rw										
Block.so	R	Callable.so										
Block.not	R	Callable.not										
Bool.succ	A			Perl 6 Bool							<section class="prog__container"><pre><code>method succ(--&gt; Bool:D)\n</code></pre><p>Returns True.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#routine_succ
succ	D								*[[Bool.succ]], returns True.\n*[[Complex.succ]], returns the number incremented by one (successor).\n*[[ComplexStr.succ]], returns the string incremented by one.\n*[[Date.succ]], returns a Date of the following day.\n*[[Duration.succ]], returns the number incremented by one (successor).\n*[[FatRat.succ]], returns the number incremented by one (successor).\n*[[Instant.succ]], returns the number incremented by one (successor).\n*[[Int.succ]], returns the number incremented by one (successor).\n*[[IntStr.succ]], returns the string incremented by one.\n*[[Num.succ]], returns the number incremented by one (successor).\n*[[NumStr.succ]], returns the string incremented by one.\n*[[Numeric.succ]], returns the number incremented by one (successor).\n*[[Rat.succ]], returns the number incremented by one (successor).\n*[[RatStr.succ]], returns the string incremented by one.\n*[[Rational.succ]], returns the number incremented by one (successor).\n*[[Real.succ]], returns the number incremented by one (successor).\n*[[Str.succ]], returns the string incremented by one.			
Bool.pred	A			Perl 6 Bool							<section class="prog__container"><pre><code>method pred(--&gt; Bool:D)\n</code></pre><p>Returns False.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#routine_pred
pred	D								*[[Bool.pred]], returns False.\n*[[Complex.pred]], returns the number decremented by one (predecessor).\n*[[ComplexStr.pred]], returns the string decremented by one.\n*[[Date.pred]], returns a Date of the previous day.\n*[[Duration.pred]], returns the number decremented by one (predecessor).\n*[[FatRat.pred]], returns the number decremented by one (predecessor).\n*[[Instant.pred]], returns the number decremented by one (predecessor).\n*[[Int.pred]], returns the number decremented by one (predecessor).\n*[[IntStr.pred]], returns the string decremented by one.\n*[[Num.pred]], returns the number decremented by one (predecessor).\n*[[NumStr.pred]], returns the string decremented by one.\n*[[Numeric.pred]], returns the number decremented by one (predecessor).\n*[[Rat.pred]], returns the number decremented by one (predecessor).\n*[[RatStr.pred]], returns the string decremented by one.\n*[[Rational.pred]], returns the number decremented by one (predecessor).\n*[[Real.pred]], returns the number decremented by one (predecessor).\n*[[Str.pred]], returns the string decremented by one.			
Bool.enums	A			Perl 6 Bool							<section class="prog__container"><pre><code>method enums(--&gt; Hash:D)\n</code></pre><p>Returns a Hash of enum-pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#routine_enums
enums	R	Bool.enums										
Bool.pick	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi method pick(Bool:U --&gt; Bool:D)\nmulti method pick(Bool:U $count --&gt; Seq:D)\n</code></pre><p>Returns True or False if called without any argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#routine_pick
Bool.roll	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi method roll(Bool:U --&gt; Bool:D)\nmulti method roll(Bool:U $count --&gt; Seq:D)\n</code></pre><p>Returns True or False if called without any argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#routine_roll
Bool.Numeric	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi method Numeric(Bool:D --&gt; Int:D)\n</code></pre><p>Returns the value part of the enum pair.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#routine_Numeric
Bool.?	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi sub prefix:&lt;?&gt;(Mu --&gt; Bool:D)\n</code></pre><p>Coerces its argument to Bool.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#prefix_%3F
?	R	Bool.?										
Bool.so	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi sub prefix:&lt;so&gt;(Mu --&gt; Bool:D)\n</code></pre><p>Coerces its argument to Bool, has looser precedence than prefix:&lt;?&gt; .&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#prefix_so
Bool.chr	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi sub    chr(Int:D  --&gt; Str:D)\nmulti method chr(Int:D: --&gt; Str:D)\n</code></pre><p>Returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#%28Int%29_routine_chr
chr	D								*[[Bool.chr]], returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.\n*[[Complex.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Cool.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Duration.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[FatRat.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Hash.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Instant.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Int.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[IntStr.chr]], returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.\n*[[Iterable.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[List.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Map.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Match.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Nil.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Num.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Numeric.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Order.chr]], returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.\n*[[Range.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Rat.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Rational.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Real.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Seq.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Stash.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Str.chr]], coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[nativeInt.chr]], returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.			
Bool.expmod	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi sub    expmod(      $x,     $y,     $mod --&gt; Int:D)\nmulti sub    expmod(Int:D $x, Int $y, Int $mod --&gt; Int:D)\nmulti method expmod(Int:D:    Int $y, Int $mod --&gt; Int:D)\n</code></pre><p>Returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#%28Int%29_routine_expmod
expmod	D								*[[Bool.expmod]], returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.\n*[[Int.expmod]], returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.\n*[[IntStr.expmod]], returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.\n*[[Order.expmod]], returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.\n*[[nativeInt.expmod]], returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.			
Bool.polymod	A			Perl 6 Bool							<section class="prog__container"><pre><code>method polymod(Int:D: +@mods)\n</code></pre><p>Returns a sequence of mod results corresponding to the divisors in @mods.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#%28Int%29_method_polymod
polymod	D								*[[Bool.polymod]], returns a sequence of mod results corresponding to the divisors in @mods.\n*[[Int.polymod]], returns a sequence of mod results corresponding to the divisors in @mods.\n*[[IntStr.polymod]], returns a sequence of mod results corresponding to the divisors in @mods.\n*[[Order.polymod]], returns a sequence of mod results corresponding to the divisors in @mods.\n*[[nativeInt.polymod]], returns a sequence of mod results corresponding to the divisors in @mods.			
Bool.is-prime	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi sub    is-prime (Int:D $number --&gt; Bool:D)\nmulti method is-prime (Int:D: --&gt; Bool:D)\n</code></pre><p>Returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#%28Int%29_routine_is-prime
is-prime	D								*[[Bool.is-prime]], returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.\n*[[Int.is-prime]], returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.\n*[[IntStr.is-prime]], returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.\n*[[Order.is-prime]], returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.\n*[[nativeInt.is-prime]], returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.			
Bool.lsb	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi method lsb(Int:D:)\nmulti sub    lsb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#%28Int%29_routine_lsb
lsb	D								*[[Bool.lsb]], returns Nil if the number is 0.\n*[[Int.lsb]], returns Nil if the number is 0.\n*[[IntStr.lsb]], returns Nil if the number is 0.\n*[[Order.lsb]], returns Nil if the number is 0.\n*[[nativeInt.lsb]], returns Nil if the number is 0.			
Bool.msb	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi method msb(Int:D:)\nmulti sub    msb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#%28Int%29_routine_msb
msb	D								*[[Bool.msb]], returns Nil if the number is 0.\n*[[Int.msb]], returns Nil if the number is 0.\n*[[IntStr.msb]], returns Nil if the number is 0.\n*[[Order.msb]], returns Nil if the number is 0.\n*[[nativeInt.msb]], returns Nil if the number is 0.			
Bool.unival	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi sub    unival(Int:D  --&gt; Numeric)\nmulti method unival(Int:D: --&gt; Numeric)\n</code></pre><p>Returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#%28Int%29_routine_unival
unival	D								*[[Bool.unival]], returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.\n*[[ComplexStr.unival]], returns the numeric value that the first codepoint in the invocant represents, or NaN if it&amp;#39;s not numeric.\n*[[Int.unival]], returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.\n*[[IntStr.unival]], returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.\n*[[NumStr.unival]], returns the numeric value that the first codepoint in the invocant represents, or NaN if it&amp;#39;s not numeric.\n*[[Order.unival]], returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.\n*[[RatStr.unival]], returns the numeric value that the first codepoint in the invocant represents, or NaN if it&amp;#39;s not numeric.\n*[[Str.unival]], returns the numeric value that the first codepoint in the invocant represents, or NaN if it&amp;#39;s not numeric.\n*[[nativeInt.unival]], returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.			
Bool.div	A			Perl 6 Bool							<section class="prog__container"><pre><code>multi sub infix:&lt;div&gt;(Int:D, Int:D --&gt; Int:D)\n</code></pre><p>Does an integer division, rounded down.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Bool.html#%28Int%29_infix_div
div	D								*[[Bool.div]], does an integer division, rounded down.\n*[[Int.div]], does an integer division, rounded down.\n*[[IntStr.div]], does an integer division, rounded down.\n*[[Order.div]], does an integer division, rounded down.\n*[[nativeInt.div]], does an integer division, rounded down.			
Bool.Rat	R	Real.Rat										
Bool.rand	R	Real.rand										
Bool.sign	R	Real.sign										
Bool.round	R	Real.round										
Bool.floor	R	Real.floor										
Bool.ceiling	R	Real.ceiling										
Bool.truncate	R	Real.truncate										
Bool.base	R	Real.base										
Bool.abs	R	Real.abs										
Bool.conj	R	Real.conj										
Bool.sqrt	R	Real.sqrt										
Bool.sign	R	Real.sign										
Bool.rand	R	Real.rand										
Bool.sin	R	Real.sin										
Bool.asin	R	Real.asin										
Bool.cos	R	Real.cos										
Bool.acos	R	Real.acos										
Bool.tan	R	Real.tan										
Bool.atan	R	Real.atan										
Bool.atan2	R	Real.atan2										
Bool.sec	R	Real.sec										
Bool.asec	R	Real.asec										
Bool.cosec	R	Real.cosec										
Bool.acosec	R	Real.acosec										
Bool.cotan	R	Real.cotan										
Bool.acotan	R	Real.acotan										
Bool.sinh	R	Real.sinh										
Bool.asinh	R	Real.asinh										
Bool.cosh	R	Real.cosh										
Bool.acosh	R	Real.acosh										
Bool.tanh	R	Real.tanh										
Bool.atanh	R	Real.atanh										
Bool.sech	R	Real.sech										
Bool.asech	R	Real.asech										
Bool.cosech	R	Real.cosech										
Bool.acosech	R	Real.acosech										
Bool.cotanh	R	Real.cotanh										
Bool.acotanh	R	Real.acotanh										
Bool.cis	R	Real.cis										
Bool.log	R	Real.log										
Bool.log10	R	Real.log10										
Bool.exp	R	Real.exp										
Bool.unpolar	R	Real.unpolar										
Bool.round	R	Real.round										
Bool.floor	R	Real.floor										
Bool.ceiling	R	Real.ceiling										
Bool.truncate	R	Real.truncate										
Bool.ord	R	Real.ord										
Bool.chr	R	Real.chr										
Bool.chars	R	Real.chars										
Bool.codes	R	Real.codes										
Bool.flip	R	Real.flip										
Bool.trim	R	Real.trim										
Bool.trim-leading	R	Real.trim-leading										
Bool.trim-trailing	R	Real.trim-trailing										
Bool.lc	R	Real.lc										
Bool.uc	R	Real.uc										
Bool.fc	R	Real.fc										
Bool.tc	R	Real.tc										
Bool.tclc	R	Real.tclc										
Bool.wordcase	R	Real.wordcase										
Bool.samecase	R	Real.samecase										
Bool.uniprop	R	Real.uniprop										
Bool.uniprops	R	Real.uniprops										
Bool.uniname	R	Real.uniname										
Bool.uninames	R	Real.uninames										
Bool.unimatch	R	Real.unimatch										
Bool.chop	R	Real.chop										
Bool.chomp	R	Real.chomp										
Bool.substr	R	Real.substr										
Bool.ords	R	Real.ords										
Bool.chrs	R	Real.chrs										
Bool.split	R	Real.split										
Bool.lines	R	Real.lines										
Bool.words	R	Real.words										
Bool.comb	R	Real.comb										
Bool.contains	R	Real.contains										
Bool.index	R	Real.index										
Bool.rindex	R	Real.rindex										
Bool.match	R	Real.match										
Bool.fmt	R	Real.fmt										
Bool.roots	R	Real.roots										
Bool.IO	R	Real.IO										
Bool.EVAL	R	Real.EVAL										
Bool.EVALFILE	R	Real.EVALFILE										
Bool.ACCEPTS	R	Real.ACCEPTS										
Bool.any	R	Real.any										
Bool.all	R	Real.all										
Bool.one	R	Real.one										
Bool.none	R	Real.none										
Bool.list	R	Real.list										
Bool.push	R	Real.push										
Bool.reverse	R	Real.reverse										
Bool.sort	R	Real.sort										
Bool.map	R	Real.map										
Bool.deepmap	R	Real.deepmap										
Bool.duckmap	R	Real.duckmap										
Bool.flat	R	Real.flat										
Bool.eager	R	Real.eager										
Bool.elems	R	Real.elems										
Bool.end	R	Real.end										
Bool.pairup	R	Real.pairup										
Bool.exit	R	Real.exit										
Bool.item	R	Real.item										
Bool.defined	R	Real.defined										
Bool.isa	R	Real.isa										
Bool.does	R	Real.does										
Bool.Bool	R	Real.Bool										
Bool.Str	R	Real.Str										
Bool.gist	R	Real.gist										
Bool.perl	R	Real.perl										
Bool.item	R	Real.item										
Bool.clone	R	Real.clone										
Bool.new	R	Real.new										
Bool.bless	R	Real.bless										
Bool.CREATE	R	Real.CREATE										
Bool.print	R	Real.print										
Bool.put	R	Real.put										
Bool.say	R	Real.say										
Bool.ACCEPTS	R	Real.ACCEPTS										
Bool.WHICH	R	Real.WHICH										
Bool.WHERE	R	Real.WHERE										
Bool.WHY	R	Real.WHY										
Bool.export	R	Real.export										
Bool.return	R	Real.return										
Bool.return-rw	R	Real.return-rw										
Bool.emit	R	Real.emit										
Bool.take	R	Real.take										
Bool.take	R	Real.take										
Bool.take-rw	R	Real.take-rw										
Bool.so	R	Real.so										
Bool.not	R	Real.not										
Buf.new	A			Perl 6 Buf							<section class="prog__container"><pre><code>method new(*@codes)\n</code></pre><p>Creates a Blob from a list of integers.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Buf.html#%28Blob%29_method_new
Buf.Bool	A			Perl 6 Buf							<section class="prog__container"><pre><code>multi method Bool(Blob:D:)\n</code></pre><p>Returns False if and only if the buffer is empty.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Buf.html#%28Blob%29_method_Bool
Buf.elems	A			Perl 6 Buf							<section class="prog__container"><pre><code>multi method elems(Blob:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements of the buffer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Buf.html#%28Blob%29_method_elems
Buf.bytes	A			Perl 6 Buf							<section class="prog__container"><pre><code>method bytes(Blob:D: --&gt; Int:D)\n</code></pre><p>Returns the number of bytes used by the elements in the buffer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Buf.html#%28Blob%29_method_bytes
Buf.decode	A			Perl 6 Buf							<section class="prog__container"><pre><code>multi method decode(Blob:D: Str:D $encoding = &amp;#39;UTF-8&amp;#39; --&gt; Str:D)\n</code></pre><p>Applies an encoding to turn the blob into a Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Buf.html#%28Blob%29_method_decode
Buf.subbuf	A			Perl 6 Buf							<section class="prog__container"><pre><code>multi method subbuf(Int $from, Int $len = self.elems --&gt; Blob:D)\nmulti method subbuf(Range $range --&gt; Blob:D)\n</code></pre><p>Extracts a part of the invocant buffer, starting from the index with elements $from, and taking $len elements (or less if the buffer is shorter), and creates a new buffer as the result.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Buf.html#%28Blob%29_method_subbuf
Buf.unpack	A			Perl 6 Buf							<section class="prog__container"><pre><code>use experimental :pack;\n</code></pre><p>This method is considered experimental, in order to use it you will need to do:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Buf.html#%28Blob%29_method_unpack
Buf.pack	A			Perl 6 Buf							<section class="prog__container"><pre><code>use experimental :pack;\n    sub pack(Str $template, *@items --&gt; Buf)\n</code></pre><p>This subroutine is considered experimental, in order to use it you will need to do:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Buf.html#%28Blob%29_sub_pack
Buf.of	A			Perl 6 Buf							<section class="prog__container"><pre><code>method of()\n</code></pre><p>Returns the type constraint for elements of the positional container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Buf.html#%28Positional%29_method_of
CallFrame.code	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method code(CallFrame:D:)\n</code></pre><p>Return the callable code for the current block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#method_code
code	R	CallFrame.code										
CallFrame.file	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method file(CallFrame:D:)\n</code></pre><p>This is a shortcut for looking up the file annotation.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#method_file
CallFrame.level	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method level(CallFrame:D:)\n</code></pre><p>Return the absolute level of the frame in the stack.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#method_level
level	R	CallFrame.level										
CallFrame.line	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method line(CallFrame:D:)\n</code></pre><p>This is a shortcut for looking up the line annotation.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#method_line
CallFrame.my	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method my(CallFrame:D:)\n</code></pre><p>Return a Hash that names all the variables and their values associated with the lexical scope of the frame.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#method_my
my	R	CallFrame.my										
CallFrame.callframe	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>sub callframe(Int $level = 0)\n</code></pre><p>Returns a CallFrame object for the given level.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#sub_callframe
callframe	R	CallFrame.callframe										
CallFrame.ACCEPTS	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_ACCEPTS
CallFrame.any	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_any
CallFrame.all	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_all
CallFrame.one	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_one
CallFrame.none	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_none
CallFrame.list	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_list
CallFrame.push	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_push
CallFrame.reverse	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_routine_reverse
CallFrame.sort	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_sort
CallFrame.map	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_map
CallFrame.deepmap	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_deepmap
CallFrame.duckmap	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_duckmap
CallFrame.flat	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_flat
CallFrame.eager	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_eager
CallFrame.elems	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_elems
CallFrame.end	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_end
CallFrame.pairup	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_method_pairup
CallFrame.exit	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_sub_exit
CallFrame.item	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Any%29_sub_item
CallFrame.defined	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_routine_defined
CallFrame.isa	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_routine_isa
CallFrame.does	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_routine_does
CallFrame.Bool	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_routine_Bool
CallFrame.Str	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_Str
CallFrame.gist	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_routine_gist
CallFrame.perl	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_routine_perl
CallFrame.item	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_item
CallFrame.clone	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_clone
CallFrame.new	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_new
CallFrame.bless	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_bless
CallFrame.CREATE	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_CREATE
CallFrame.print	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_print
CallFrame.put	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_put
CallFrame.say	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_say
CallFrame.ACCEPTS	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_ACCEPTS
CallFrame.WHICH	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_WHICH
CallFrame.WHERE	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_WHERE
CallFrame.WHY	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_WHY
CallFrame.export	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_trait_is_export
CallFrame.return	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_return
CallFrame.return-rw	A			Perl 6 CallFrame							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_return-rw
CallFrame.emit	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_emit
CallFrame.take	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_take
CallFrame.take	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_routine_take
CallFrame.take-rw	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_routine_take-rw
CallFrame.so	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_so
CallFrame.not	A			Perl 6 CallFrame							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CallFrame.html#%28Mu%29_method_not
Callable.CALL-ME	A			Perl 6 Callable							<section class="prog__container"><pre><code>method CALL-ME(Callable:D $self: |arguments)\n</code></pre><p>This method is required for postfix:Â«( )Â» and postfix:Â«.( )Â».&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Callable.html#method_CALL-ME
CALL-ME	D								*[[Callable.CALL-ME]], this method is required for postfix:Â«( )Â» and postfix:Â«.( )Â».\n*[[Code.CALL-ME]], this method is required for postfix:Â«( )Â» and postfix:Â«.( )Â».			
Callable.assuming	A			Perl 6 Callable							<section class="prog__container"><pre><code>method assuming(Callable:D $self: |primers)\n</code></pre><p>Returns a Callable that implements the same behaviour as the original, but has the values passed to .assuming already bound to the corresponding parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Callable.html#method_assuming
assuming	D								*[[Callable.assuming]], returns a Callable that implements the same behaviour as the original, but has the values passed to .assuming already bound to the corresponding parameters.\n*[[Code.assuming]], returns a Callable that implements the same behaviour as the original, but has the values passed to .assuming already bound to the corresponding parameters.			
Callable.infix:&lt;â&gt;	A			Perl 6 Callable							<section class="prog__container"><pre><code>sub f($p){ say &amp;#39;f&amp;#39;; $p / 2 }\nsub g($p){ say &amp;#39;g&amp;#39;; $p * 2 }\nmy &amp;f-g = &amp;f â &amp;g;\nsay f-g(2); # OUTPUTÂ«gâ¤fâ¤2â¤Â» \n# equivalent to: \nsay 2.&amp;g.&amp;f\n</code></pre><p>The function combinator infix:&lt;â&gt; or infix:&lt;o&gt; combines two functions, so that the left function is called with the return value of the right function.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Callable.html#infix%3A%3C%C3%A2%C2%88%C2%98%3E
infix:&lt;â&gt;	R	Callable.infix:&lt;â&gt;										
Cancellation.cancel	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method cancel()\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#method_cancel
cancel	R	Cancellation.cancel										
Cancellation.ACCEPTS	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_ACCEPTS
Cancellation.any	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_any
Cancellation.all	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_all
Cancellation.one	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_one
Cancellation.none	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_none
Cancellation.list	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_list
Cancellation.push	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_push
Cancellation.reverse	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_routine_reverse
Cancellation.sort	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_sort
Cancellation.map	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_map
Cancellation.deepmap	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_deepmap
Cancellation.duckmap	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_duckmap
Cancellation.flat	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_flat
Cancellation.eager	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_eager
Cancellation.elems	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_elems
Cancellation.end	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_end
Cancellation.pairup	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_method_pairup
Cancellation.exit	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_sub_exit
Cancellation.item	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Any%29_sub_item
Cancellation.defined	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_routine_defined
Cancellation.isa	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_routine_isa
Cancellation.does	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_routine_does
Cancellation.Bool	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_routine_Bool
Cancellation.Str	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_Str
Cancellation.gist	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_routine_gist
Cancellation.perl	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_routine_perl
Cancellation.item	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_item
Cancellation.clone	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_clone
Cancellation.new	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_new
Cancellation.bless	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_bless
Cancellation.CREATE	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_CREATE
Cancellation.print	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_print
Cancellation.put	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_put
Cancellation.say	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_say
Cancellation.ACCEPTS	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_ACCEPTS
Cancellation.WHICH	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_WHICH
Cancellation.WHERE	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_WHERE
Cancellation.WHY	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_WHY
Cancellation.export	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_trait_is_export
Cancellation.return	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_return
Cancellation.return-rw	A			Perl 6 Cancellation							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_return-rw
Cancellation.emit	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_emit
Cancellation.take	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_take
Cancellation.take	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_routine_take
Cancellation.take-rw	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_routine_take-rw
Cancellation.so	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_so
Cancellation.not	A			Perl 6 Cancellation							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cancellation.html#%28Mu%29_method_not
Capture.list	A			Perl 6 Capture							<section class="prog__container"><pre><code>method list(Capture:D: --&gt; Positional)\n</code></pre><p>Returns the positional part of the Capture.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_list
Capture.hash	A			Perl 6 Capture							<section class="prog__container"><pre><code>method hash(Capture:D: --&gt; Associative)\n</code></pre><p>Returns the named/hash part of the Capture.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_hash
Capture.elems	A			Perl 6 Capture							<section class="prog__container"><pre><code>method elems(Capture:D: --&gt; Int:D)\n</code></pre><p>Returns the number of positional elements in the Capture.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_elems
Capture.keys	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method keys(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing all positional keys followed by all named keys.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_keys
Capture.values	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method values(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing all positional values followed by all named argument values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_values
Capture.kv	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method kv(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of alternating keys and values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_kv
Capture.pairs	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method pairs(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns all arguments, the positional followed by the named, as a Seq of Pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_pairs
Capture.antipairs	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method antipairs(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns all arguments, the positional followed by the named, as a Seq of pairs where the keys and values have been swapped, i.e. the value becomes the key and the key becomes the value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_antipairs
Capture.Bool	A			Perl 6 Capture							<section class="prog__container"><pre><code>method Bool(Capture:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the Capture contains at least one named or one positional argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_Bool
Capture.Capture	A			Perl 6 Capture							<section class="prog__container"><pre><code>method Capture(Capture:D: --&gt; Capture:D)\n</code></pre><p>Returns itself, i.e. the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_Capture
Capture.Numeric	A			Perl 6 Capture							<section class="prog__container"><pre><code>method Numeric(Capture:D: --&gt; Int:D)\n</code></pre><p>Returns the number of positional elements in the Capture.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#method_Numeric
Capture.ACCEPTS	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_ACCEPTS
Capture.any	A			Perl 6 Capture							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_any
Capture.all	A			Perl 6 Capture							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_all
Capture.one	A			Perl 6 Capture							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_one
Capture.none	A			Perl 6 Capture							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_none
Capture.list	A			Perl 6 Capture							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_list
Capture.push	A			Perl 6 Capture							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_push
Capture.reverse	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_routine_reverse
Capture.sort	A			Perl 6 Capture							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_sort
Capture.map	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_map
Capture.deepmap	A			Perl 6 Capture							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_deepmap
Capture.duckmap	A			Perl 6 Capture							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_duckmap
Capture.flat	A			Perl 6 Capture							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_flat
Capture.eager	A			Perl 6 Capture							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_eager
Capture.elems	A			Perl 6 Capture							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_elems
Capture.end	A			Perl 6 Capture							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_end
Capture.pairup	A			Perl 6 Capture							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_method_pairup
Capture.exit	A			Perl 6 Capture							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_sub_exit
Capture.item	A			Perl 6 Capture							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Any%29_sub_item
Capture.defined	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_routine_defined
Capture.isa	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_routine_isa
Capture.does	A			Perl 6 Capture							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_routine_does
Capture.Bool	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_routine_Bool
Capture.Str	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_Str
Capture.gist	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_routine_gist
Capture.perl	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_routine_perl
Capture.item	A			Perl 6 Capture							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_item
Capture.clone	A			Perl 6 Capture							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_clone
Capture.new	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_new
Capture.bless	A			Perl 6 Capture							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_bless
Capture.CREATE	A			Perl 6 Capture							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_CREATE
Capture.print	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_print
Capture.put	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_put
Capture.say	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_say
Capture.ACCEPTS	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_ACCEPTS
Capture.WHICH	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_WHICH
Capture.WHERE	A			Perl 6 Capture							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_WHERE
Capture.WHY	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_WHY
Capture.export	A			Perl 6 Capture							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_trait_is_export
Capture.return	A			Perl 6 Capture							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_return
Capture.return-rw	A			Perl 6 Capture							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_return-rw
Capture.emit	A			Perl 6 Capture							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_emit
Capture.take	A			Perl 6 Capture							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_take
Capture.take	A			Perl 6 Capture							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_routine_take
Capture.take-rw	A			Perl 6 Capture							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_routine_take-rw
Capture.so	A			Perl 6 Capture							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_so
Capture.not	A			Perl 6 Capture							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Capture.html#%28Mu%29_method_not
Channel.send	A			Perl 6 Channel							<section class="prog__container"><pre><code>method send(Channel:D: &#92;item)\n</code></pre><p>Enqueues an item into the Channel.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#method_send
send	R	Channel.send										
Channel.receive	A			Perl 6 Channel							<section class="prog__container"><pre><code>method receive(Channel:D:)\n</code></pre><p>Receives and removes an item from the channel.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#method_receive
receive	R	Channel.receive										
Channel.poll	A			Perl 6 Channel							<section class="prog__container"><pre><code>method poll(Channel:D:)\n</code></pre><p>Receives and removes an item from the channel.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#method_poll
poll	R	Channel.poll										
Channel.close	A			Perl 6 Channel							<section class="prog__container"><pre><code>method close(Channel:D:)\n</code></pre><p>Close the Channel, normally.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#method_close
close	D								*[[Channel.close]], close the Channel, normally.\n*[[IO.close]], to close an open file handle, simply call its close method:\n*[[Tap.close]], closes the tap.			
Channel.list	A			Perl 6 Channel							<section class="prog__container"><pre><code>method list(Channel:D: --&gt; List:D)\n</code></pre><p>Returns a Seq which will iterate items in the queue and removes each item from the queue as it iterates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#method_list
Channel.closed	A			Perl 6 Channel							<section class="prog__container"><pre><code>method closed(Channel:D: --&gt; Promise:D)\n</code></pre><p>Returns a promise that will be kept once the channel is closed by a call to method close.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#method_closed
closed	R	Channel.closed										
Channel.fail	A			Perl 6 Channel							<section class="prog__container"><pre><code>method fail(Channel:D: $error)\n</code></pre><p>Closes the Channel (that is, makes subsequent send calls die), and enqueues the error to be thrown as the final element in the channel.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#method_fail
fail	D								*[[Channel.fail]], closes the Channel (that is, makes subsequent send calls die), and enqueues the error to be thrown as the final element in the channel.\n*[[Exception.fail]], exits the calling Routine and returns a Failure object wrapping the exception $e - or, for the *@text form, an X::AdHoc exception constructed from the concatenation of @text.			
Channel.Supply	A			Perl 6 Channel							<section class="prog__container"><pre><code>method Supply(Channel:D:)\n</code></pre><p>This returns an on-demand Supply that emits a value for every value received on the Channel.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#method_Supply
Channel.await	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi sub await(Channel:D)\nmulti sub await(*@)\n</code></pre><p>Waits until all of one or more channels has a value available, and returns those values (it calls .receive on the channel).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#sub_await
await	D								*[[Channel.await]], waits until all of one or more channels has a value available, and returns those values (it calls .receive on the channel).\n*[[Promise.await]], waits until one or more promises are all fulfilled, and then returns their values.			
Channel.ACCEPTS	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_ACCEPTS
Channel.any	A			Perl 6 Channel							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_any
Channel.all	A			Perl 6 Channel							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_all
Channel.one	A			Perl 6 Channel							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_one
Channel.none	A			Perl 6 Channel							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_none
Channel.list	A			Perl 6 Channel							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_list
Channel.push	A			Perl 6 Channel							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_push
Channel.reverse	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_routine_reverse
Channel.sort	A			Perl 6 Channel							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_sort
Channel.map	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_map
Channel.deepmap	A			Perl 6 Channel							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_deepmap
Channel.duckmap	A			Perl 6 Channel							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_duckmap
Channel.flat	A			Perl 6 Channel							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_flat
Channel.eager	A			Perl 6 Channel							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_eager
Channel.elems	A			Perl 6 Channel							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_elems
Channel.end	A			Perl 6 Channel							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_end
Channel.pairup	A			Perl 6 Channel							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_method_pairup
Channel.exit	A			Perl 6 Channel							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_sub_exit
Channel.item	A			Perl 6 Channel							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Any%29_sub_item
Channel.defined	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_routine_defined
Channel.isa	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_routine_isa
Channel.does	A			Perl 6 Channel							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_routine_does
Channel.Bool	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_routine_Bool
Channel.Str	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_Str
Channel.gist	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_routine_gist
Channel.perl	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_routine_perl
Channel.item	A			Perl 6 Channel							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_item
Channel.clone	A			Perl 6 Channel							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_clone
Channel.new	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_new
Channel.bless	A			Perl 6 Channel							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_bless
Channel.CREATE	A			Perl 6 Channel							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_CREATE
Channel.print	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_print
Channel.put	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_put
Channel.say	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_say
Channel.ACCEPTS	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_ACCEPTS
Channel.WHICH	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_WHICH
Channel.WHERE	A			Perl 6 Channel							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_WHERE
Channel.WHY	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_WHY
Channel.export	A			Perl 6 Channel							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_trait_is_export
Channel.return	A			Perl 6 Channel							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_return
Channel.return-rw	A			Perl 6 Channel							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_return-rw
Channel.emit	A			Perl 6 Channel							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_emit
Channel.take	A			Perl 6 Channel							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_take
Channel.take	A			Perl 6 Channel							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_routine_take
Channel.take-rw	A			Perl 6 Channel							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_routine_take-rw
Channel.so	A			Perl 6 Channel							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_so
Channel.not	A			Perl 6 Channel							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Channel.html#%28Mu%29_method_not
Code.ACCEPTS	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method ACCEPTS(Code:D: Mu $topic)\n</code></pre><p>Usually calls the code object and passes $topic as an argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#method_ACCEPTS
Code.arity	A			Perl 6 Code							<section class="prog__container"><pre><code>method arity(Code:D: --&gt; Int:D)\n</code></pre><p>Returns the minimum number of positional arguments that must be passed in order to call the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#method_arity
Code.count	A			Perl 6 Code							<section class="prog__container"><pre><code>method count(Code:D: --&gt; Real:D)\n</code></pre><p>Returns the maximum number of positional arguments that may be passed when calling the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#method_count
Code.of	A			Perl 6 Code							<section class="prog__container"><pre><code>method of(Code:D: --&gt; Mu)\n</code></pre><p>Returns the return type constraint of the Code:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#of
Code.signature	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method signature(Code:D: --&gt; Signature:D)\n</code></pre><p>Returns the Signature object for this code object, which describes its parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#method_signature
Code.Str	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method Str(Code:D: --&gt; Str:D)\n</code></pre><p>Will produce a warning.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#method_Str
Code.file	A			Perl 6 Code							<section class="prog__container"><pre><code>method file(Code:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the file in which the code object was declared.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#method_file
Code.line	A			Perl 6 Code							<section class="prog__container"><pre><code>method line(Code:D: --&gt; Int:D)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#method_line
Code.CALL-ME	A			Perl 6 Code							<section class="prog__container"><pre><code>method CALL-ME(Callable:D $self: |arguments)\n</code></pre><p>This method is required for postfix:Â«( )Â» and postfix:Â«.( )Â».&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Callable%29_method_CALL-ME
Code.assuming	A			Perl 6 Code							<section class="prog__container"><pre><code>method assuming(Callable:D $self: |primers)\n</code></pre><p>Returns a Callable that implements the same behaviour as the original, but has the values passed to .assuming already bound to the corresponding parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Callable%29_method_assuming
Code.ACCEPTS	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_ACCEPTS
Code.any	A			Perl 6 Code							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_any
Code.all	A			Perl 6 Code							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_all
Code.one	A			Perl 6 Code							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_one
Code.none	A			Perl 6 Code							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_none
Code.list	A			Perl 6 Code							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_list
Code.push	A			Perl 6 Code							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_push
Code.reverse	A			Perl 6 Code							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_routine_reverse
Code.sort	A			Perl 6 Code							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_sort
Code.map	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_map
Code.deepmap	A			Perl 6 Code							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_deepmap
Code.duckmap	A			Perl 6 Code							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_duckmap
Code.flat	A			Perl 6 Code							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_flat
Code.eager	A			Perl 6 Code							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_eager
Code.elems	A			Perl 6 Code							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_elems
Code.end	A			Perl 6 Code							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_end
Code.pairup	A			Perl 6 Code							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_method_pairup
Code.exit	A			Perl 6 Code							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_sub_exit
Code.item	A			Perl 6 Code							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Any%29_sub_item
Code.defined	A			Perl 6 Code							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_routine_defined
Code.isa	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_routine_isa
Code.does	A			Perl 6 Code							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_routine_does
Code.Bool	A			Perl 6 Code							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_routine_Bool
Code.Str	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_Str
Code.gist	A			Perl 6 Code							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_routine_gist
Code.perl	A			Perl 6 Code							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_routine_perl
Code.item	A			Perl 6 Code							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_item
Code.clone	A			Perl 6 Code							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_clone
Code.new	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_new
Code.bless	A			Perl 6 Code							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_bless
Code.CREATE	A			Perl 6 Code							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_CREATE
Code.print	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_print
Code.put	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_put
Code.say	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_say
Code.ACCEPTS	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_ACCEPTS
Code.WHICH	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_WHICH
Code.WHERE	A			Perl 6 Code							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_WHERE
Code.WHY	A			Perl 6 Code							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_WHY
Code.export	A			Perl 6 Code							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_trait_is_export
Code.return	A			Perl 6 Code							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_return
Code.return-rw	A			Perl 6 Code							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_return-rw
Code.emit	A			Perl 6 Code							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_emit
Code.take	A			Perl 6 Code							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_take
Code.take	A			Perl 6 Code							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_routine_take
Code.take-rw	A			Perl 6 Code							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_routine_take-rw
Code.so	A			Perl 6 Code							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_so
Code.not	A			Perl 6 Code							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Code.html#%28Mu%29_method_not
Complex.i	A			Perl 6 Complex							<section class="prog__container"><pre><code>say 2i;     # same as Complex.new(0, 2); \nsay 1-2e3i; # same as Complex.new(1, -2e3); \n</code></pre><p>Adding a trailing i to a number literal makes it a Complex, for example:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#postfix_i
i	D								*[[Complex.i]], adding a trailing i to a number literal makes it a Complex, for example:\n*[[ComplexStr.i]], adding a trailing i to a number literal makes it a Complex, for example:			
Complex.new	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method new(Real $re, Real $im --&gt; Complex:D)\n</code></pre><p>Creates a new Complex object from real and imaginary parts.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_new
Complex.re	A			Perl 6 Complex							<section class="prog__container"><pre><code>method re(Complex:D: --&gt; Real:D)\n</code></pre><p>Returns the real part of the complex number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_re
re	D								*[[Complex.re]], returns the real part of the complex number.\n*[[ComplexStr.re]], returns the real part of the complex number.			
Complex.im	A			Perl 6 Complex							<section class="prog__container"><pre><code>method im(Complex:D: --&gt; Real:D)\n</code></pre><p>Returns the imaginary part of the complex number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_im
im	D								*[[Complex.im]], returns the imaginary part of the complex number.\n*[[ComplexStr.im]], returns the imaginary part of the complex number.			
Complex.reals	A			Perl 6 Complex							<section class="prog__container"><pre><code>method reals(Complex:D: --&gt; Positional:D)\n</code></pre><p>Returns a two-element list containing the real and imaginary parts for this value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_reals
reals	D								*[[Complex.reals]], returns a two-element list containing the real and imaginary parts for this value.\n*[[ComplexStr.reals]], returns a two-element list containing the real and imaginary parts for this value.			
Complex.isNaN	A			Perl 6 Complex							<section class="prog__container"><pre><code>method isNaN(Complex:D: --&gt; Bool:D)\n</code></pre><p>Returns true if the real or imaginary part is NaN (not a number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_isNaN
isNaN	D								*[[Complex.isNaN]], returns true if the real or imaginary part is NaN (not a number).\n*[[ComplexStr.isNaN]], returns true if the real or imaginary part is NaN (not a number).\n*[[FatRat.isNaN]], tests whether the invocant&amp;#39;s Num value is a NaN.\n*[[Rat.isNaN]], tests whether the invocant&amp;#39;s Num value is a NaN.\n*[[Rational.isNaN]], tests whether the invocant&amp;#39;s Num value is a NaN.			
Complex.polar	A			Perl 6 Complex							<section class="prog__container"><pre><code>method polar(Complex:D: --&gt; Positional:D)\n</code></pre><p>Returns a two-element list of the polar coordinates for this value, i.e. magnitude and angle in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_polar
polar	D								*[[Complex.polar]], returns a two-element list of the polar coordinates for this value, i.e. \n*[[ComplexStr.polar]], returns a two-element list of the polar coordinates for this value, i.e. 			
Complex.floor	A			Perl 6 Complex							<section class="prog__container"><pre><code>method floor(Complex:D: --&gt; Complex:D)\n</code></pre><p>Returns self.re.floor + self.im.floor.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_floor
floor	D								*[[Complex.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[ComplexStr.floor]], returns self.re.floor + self.im.floor.\n*[[Cool.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Duration.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[FatRat.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Hash.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Instant.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Int.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Iterable.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[List.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Map.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Match.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Nil.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Num.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Numeric.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Range.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Rat.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Rational.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Real.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Seq.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Stash.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.\n*[[Str.floor]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.			
Complex.ceiling	A			Perl 6 Complex							<section class="prog__container"><pre><code>method ceiling(Complex:D: --&gt; Complex:D)\n</code></pre><p>Returns self.re.ceiling + self.im.ceiling.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_ceiling
ceiling	D								*[[Complex.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[ComplexStr.ceiling]], returns self.re.ceiling + self.im.ceiling.\n*[[Cool.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Duration.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[FatRat.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Hash.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Instant.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Int.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Iterable.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[List.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Map.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Match.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Nil.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Num.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Numeric.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Range.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Rat.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Rational.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Real.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Seq.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Stash.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.\n*[[Str.ceiling]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.			
Complex.round	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method round(Complex:D: --&gt; Complex:D)\nmulti method round(Complex:D: Real() $scale --&gt; Complex:D)\n</code></pre><p>With no arguments, rounds both the real and imaginary parts to the nearest integer and returns a new Complex number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_round
round	D								*[[Complex.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[ComplexStr.round]], with no arguments, rounds both the real and imaginary parts to the nearest integer and returns a new Complex number.\n*[[Cool.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Duration.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[FatRat.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Hash.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Instant.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Int.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Iterable.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[List.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Map.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Match.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Nil.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Num.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Numeric.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Range.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Rat.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Rational.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Real.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Seq.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Stash.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.\n*[[Str.round]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.			
Complex.truncate	A			Perl 6 Complex							<section class="prog__container"><pre><code>method truncate(Complex:D: --&gt; Complex:D)\n</code></pre><p>Removes the fractional part of both the real and imaginary parts of the number, using Real.truncate, and returns the result as a new Complex.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_truncate
truncate	D								*[[Complex.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[ComplexStr.truncate]], removes the fractional part of both the real and imaginary parts of the number, using Real.truncate, and returns the result as a new Complex.\n*[[Cool.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Duration.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[FatRat.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Hash.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Instant.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Int.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Iterable.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[List.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Map.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Match.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Nil.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Num.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Numeric.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Range.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Rat.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Rational.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Real.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Seq.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Stash.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.\n*[[Str.truncate]], coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.			
Complex.abs	A			Perl 6 Complex							<section class="prog__container"><pre><code>method abs(Complex:D: --&gt; Num:D)\nmulti sub abs(Complex:D $z --&gt; Num:D)\n</code></pre><p>Returns the absolute value of the invocant (or the argument in sub form).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_abs
abs	D								*[[Complex.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[ComplexStr.abs]], returns the absolute value of the invocant (or the argument in sub form).\n*[[Cool.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Duration.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[FatRat.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Hash.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Instant.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Int.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Iterable.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[List.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Map.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Match.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Nil.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Num.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Numeric.abs]], returns the absolute value of the number.\n*[[Range.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Rat.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Rational.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Real.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Seq.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Stash.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Str.abs]], coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).			
Complex.conj	A			Perl 6 Complex							<section class="prog__container"><pre><code>method conj(Complex:D: --&gt; Complex:D)\n</code></pre><p>Returns the complex conjugate of the invocant (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_conj
conj	D								*[[Complex.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[ComplexStr.conj]], returns the complex conjugate of the invocant (that is, the number with the sign of the imaginary part negated).\n*[[Cool.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Duration.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[FatRat.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Hash.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Instant.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Int.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Iterable.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[List.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Map.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Match.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Nil.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Num.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Numeric.conj]], returns the complex conjugate of the number.\n*[[Range.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Rat.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Rational.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Real.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Seq.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Stash.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Str.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).			
Complex.gist	A			Perl 6 Complex							<section class="prog__container"><pre><code>method gist(Complex:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation of the form "1+2i", without internal spaces.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_gist
Complex.perl	A			Perl 6 Complex							<section class="prog__container"><pre><code>method perl(Complex:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation corresponding to the unambiguous val()-based representation of complex literals, of the form "&lt;1+2i&gt;", without internal spaces, and including the angles that keep the + from being treated as a normal addition operator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#method_perl
Complex.Real	A			Perl 6 Complex							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_Real
Complex.Int	A			Perl 6 Complex							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_Int
Complex.Rat	A			Perl 6 Complex							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_Rat
Complex.Num	A			Perl 6 Complex							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_Num
Complex.narrow	A			Perl 6 Complex							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_narrow
narrow	D								*[[Complex.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.\n*[[Duration.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.\n*[[FatRat.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.\n*[[Instant.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.\n*[[Int.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.\n*[[Num.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.\n*[[Numeric.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.\n*[[Rat.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.\n*[[Rational.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.\n*[[Real.narrow]], returns the number converted to the narrowest type that can hold it without loss of precision.			
Complex.ACCEPTS	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_ACCEPTS
Complex.log	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_routine_log
log	D								*[[Complex.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Cool.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Duration.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[FatRat.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Hash.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Instant.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Int.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Iterable.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[List.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Map.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Match.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Nil.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Num.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Numeric.log]], calculates the logarithm to base $base.\n*[[Range.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Rat.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Rational.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Real.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Seq.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Stash.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).\n*[[Str.log]], coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).			
Complex.log10	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_routine_log10
log10	D								*[[Complex.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Cool.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Duration.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[FatRat.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Hash.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Instant.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Int.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Iterable.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[List.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Map.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Match.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Nil.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Num.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Numeric.log10]], calculates the logarithm to base 10.\n*[[Range.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Rat.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Rational.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Real.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Seq.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Stash.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.\n*[[Str.log10]], coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.			
Complex.exp	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_routine_exp
exp	D								*[[Complex.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Cool.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Duration.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[FatRat.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Hash.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Instant.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Int.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Iterable.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[List.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Map.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Match.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Nil.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Num.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Numeric.exp]], returns $base to the power of the number, or e to the power of the number if called without a second argument.\n*[[Range.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Rat.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Rational.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Real.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Seq.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Stash.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.\n*[[Str.exp]], coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.			
Complex.roots	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_roots
roots	D								*[[Complex.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Cool.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Duration.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[FatRat.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Hash.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Instant.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Int.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Iterable.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[List.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Map.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Match.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Nil.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Num.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Numeric.roots]], returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.\n*[[Range.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Rat.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Rational.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Real.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Seq.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Stash.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.\n*[[Str.roots]], coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.			
Complex.abs	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_routine_abs
Complex.sqrt	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_routine_sqrt
sqrt	D								*[[Complex.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Cool.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Duration.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[FatRat.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Hash.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Instant.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Int.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Iterable.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[List.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Map.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Match.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Nil.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Num.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Numeric.sqrt]], returns a square root of the number.\n*[[Range.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Rat.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Rational.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Real.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Seq.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Stash.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Str.sqrt]], coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.			
Complex.conj	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_conj
Complex.Bool	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_Bool
Complex.succ	A			Perl 6 Complex							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_succ
Complex.pred	A			Perl 6 Complex							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Numeric%29_method_pred
Complex.abs	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_abs
Complex.conj	A			Perl 6 Complex							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_conj
Complex.sqrt	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_sqrt
Complex.sign	A			Perl 6 Complex							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_sign
sign	D								*[[Complex.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Cool.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Duration.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[FatRat.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Hash.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Instant.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Int.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Iterable.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[List.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Map.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Match.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Nil.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Num.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Numeric.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Range.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Rat.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Rational.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Real.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Seq.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Stash.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Str.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.			
Complex.rand	A			Perl 6 Complex							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_rand
rand	D								*[[Complex.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Cool.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Duration.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[FatRat.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Hash.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Instant.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Int.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Iterable.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[List.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Map.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Match.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Nil.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Num.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[NumStr.rand]], returns a pseudo random number between 0 and the invocant.\n*[[Numeric.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Range.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Rat.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Rational.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Real.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Seq.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Stash.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Str.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.			
Complex.sin	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_sin
sin	D								*[[Complex.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Cool.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Duration.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[FatRat.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Hash.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Instant.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Int.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Iterable.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[List.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Map.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Match.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Nil.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Num.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Numeric.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Range.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Rat.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Rational.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Real.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Seq.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Stash.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.\n*[[Str.sin]], coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.			
Complex.asin	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_asin
asin	D								*[[Complex.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Cool.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Duration.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[FatRat.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Hash.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Instant.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Int.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Iterable.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[List.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Map.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Match.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Nil.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Num.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Numeric.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Range.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Rat.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Rational.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Real.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Seq.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Stash.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.\n*[[Str.asin]], coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.			
Complex.cos	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_cos
cos	D								*[[Complex.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Cool.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Duration.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[FatRat.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Hash.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Instant.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Int.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Iterable.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[List.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Map.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Match.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Nil.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Num.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Numeric.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Range.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Rat.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Rational.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Real.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Seq.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Stash.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.\n*[[Str.cos]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.			
Complex.acos	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_acos
acos	D								*[[Complex.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Cool.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Duration.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[FatRat.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Hash.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Instant.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Int.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Iterable.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[List.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Map.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Match.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Nil.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Num.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Numeric.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Range.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Rat.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Rational.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Real.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Seq.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Stash.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.\n*[[Str.acos]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.			
Complex.tan	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_tan
tan	D								*[[Complex.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Cool.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Duration.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[FatRat.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Hash.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Instant.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Int.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Iterable.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[List.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Map.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Match.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Nil.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Num.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Numeric.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Range.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Rat.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Rational.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Real.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Seq.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Stash.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.\n*[[Str.tan]], coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.			
Complex.atan	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_atan
atan	D								*[[Complex.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Cool.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Duration.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[FatRat.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Hash.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Instant.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Int.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Iterable.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[List.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Map.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Match.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Nil.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Num.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Numeric.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Range.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Rat.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Rational.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Real.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Seq.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Stash.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.\n*[[Str.atan]], coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.			
Complex.atan2	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_atan2
atan2	D								*[[Complex.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Cool.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Duration.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[FatRat.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Hash.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Instant.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Int.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Iterable.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[List.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Map.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Match.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Nil.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Num.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Numeric.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Range.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Rat.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Rational.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Real.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Seq.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Stash.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.\n*[[Str.atan2]], coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.			
Complex.sec	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_sec
sec	D								*[[Complex.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Cool.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Duration.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[FatRat.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Hash.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Instant.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Int.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Iterable.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[List.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Map.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Match.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Nil.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Num.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Numeric.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Range.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Rat.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Rational.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Real.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Seq.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Stash.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.\n*[[Str.sec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.			
Complex.asec	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_asec
asec	D								*[[Complex.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Cool.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Duration.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[FatRat.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Hash.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Instant.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Int.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Iterable.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[List.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Map.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Match.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Nil.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Num.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Numeric.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Range.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Rat.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Rational.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Real.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Seq.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Stash.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.\n*[[Str.asec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.			
Complex.cosec	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_cosec
cosec	D								*[[Complex.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Cool.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Duration.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[FatRat.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Hash.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Instant.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Int.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Iterable.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[List.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Map.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Match.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Nil.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Num.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Numeric.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Range.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Rat.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Rational.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Real.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Seq.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Stash.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.\n*[[Str.cosec]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.			
Complex.acosec	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_acosec
acosec	D								*[[Complex.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Cool.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Duration.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[FatRat.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Hash.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Instant.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Int.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Iterable.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[List.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Map.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Match.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Nil.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Num.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Numeric.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Range.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Rat.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Rational.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Real.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Seq.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Stash.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.\n*[[Str.acosec]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.			
Complex.cotan	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_cotan
cotan	D								*[[Complex.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Cool.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Duration.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[FatRat.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Hash.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Instant.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Int.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Iterable.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[List.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Map.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Match.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Nil.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Num.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Numeric.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Range.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Rat.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Rational.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Real.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Seq.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Stash.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.\n*[[Str.cotan]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.			
Complex.acotan	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_acotan
acotan	D								*[[Complex.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Cool.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Duration.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[FatRat.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Hash.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Instant.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Int.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Iterable.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[List.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Map.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Match.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Nil.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Num.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Numeric.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Range.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Rat.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Rational.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Real.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Seq.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Stash.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.\n*[[Str.acotan]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.			
Complex.sinh	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_sinh
sinh	D								*[[Complex.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Cool.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Duration.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[FatRat.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Hash.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Instant.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Int.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Iterable.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[List.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Map.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Match.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Nil.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Num.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Numeric.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Range.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Rat.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Rational.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Real.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Seq.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Stash.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.\n*[[Str.sinh]], coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.			
Complex.asinh	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_asinh
asinh	D								*[[Complex.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Cool.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Duration.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[FatRat.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Hash.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Instant.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Int.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Iterable.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[List.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Map.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Match.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Nil.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Num.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Numeric.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Range.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Rat.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Rational.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Real.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Seq.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Stash.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.\n*[[Str.asinh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.			
Complex.cosh	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_cosh
cosh	D								*[[Complex.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Cool.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Duration.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[FatRat.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Hash.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Instant.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Int.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Iterable.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[List.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Map.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Match.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Nil.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Num.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Numeric.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Range.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Rat.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Rational.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Real.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Seq.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Stash.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.\n*[[Str.cosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.			
Complex.acosh	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_acosh
acosh	D								*[[Complex.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Cool.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Duration.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[FatRat.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Hash.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Instant.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Int.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Iterable.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[List.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Map.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Match.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Nil.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Num.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Numeric.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Range.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Rat.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Rational.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Real.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Seq.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Stash.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.\n*[[Str.acosh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.			
Complex.tanh	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_tanh
tanh	D								*[[Complex.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Cool.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Duration.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[FatRat.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Hash.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Instant.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Int.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Iterable.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[List.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Map.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Match.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Nil.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Num.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Numeric.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Range.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Rat.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Rational.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Real.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Seq.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Stash.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.\n*[[Str.tanh]], coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.			
Complex.atanh	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_atanh
atanh	D								*[[Complex.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Cool.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Duration.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[FatRat.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Hash.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Instant.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Int.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Iterable.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[List.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Map.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Match.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Nil.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Num.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Numeric.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Range.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Rat.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Rational.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Real.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Seq.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Stash.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.\n*[[Str.atanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.			
Complex.sech	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_sech
sech	D								*[[Complex.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Cool.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Duration.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[FatRat.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Hash.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Instant.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Int.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Iterable.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[List.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Map.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Match.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Nil.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Num.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Numeric.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Range.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Rat.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Rational.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Real.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Seq.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Stash.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.\n*[[Str.sech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.			
Complex.asech	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_asech
asech	D								*[[Complex.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Cool.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Duration.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[FatRat.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Hash.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Instant.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Int.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Iterable.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[List.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Map.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Match.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Nil.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Num.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Numeric.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Range.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Rat.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Rational.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Real.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Seq.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Stash.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.\n*[[Str.asech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.			
Complex.cosech	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_cosech
cosech	D								*[[Complex.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Cool.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Duration.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[FatRat.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Hash.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Instant.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Int.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Iterable.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[List.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Map.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Match.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Nil.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Num.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Numeric.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Range.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Rat.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Rational.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Real.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Seq.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Stash.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.\n*[[Str.cosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.			
Complex.acosech	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_acosech
acosech	D								*[[Complex.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Cool.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Duration.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[FatRat.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Hash.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Instant.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Int.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Iterable.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[List.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Map.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Match.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Nil.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Num.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Numeric.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Range.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Rat.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Rational.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Real.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Seq.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Stash.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.\n*[[Str.acosech]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.			
Complex.cotanh	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_cotanh
cotanh	D								*[[Complex.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Cool.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Duration.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[FatRat.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Hash.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Instant.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Int.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Iterable.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[List.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Map.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Match.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Nil.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Num.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Numeric.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Range.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Rat.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Rational.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Real.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Seq.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Stash.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.\n*[[Str.cotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.			
Complex.acotanh	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_acotanh
acotanh	D								*[[Complex.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Cool.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Duration.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[FatRat.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Hash.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Instant.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Int.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Iterable.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[List.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Map.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Match.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Nil.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Num.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Numeric.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Range.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Rat.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Rational.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Real.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Seq.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Stash.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.\n*[[Str.acotanh]], coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.			
Complex.cis	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_cis
cis	D								*[[Complex.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Cool.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Duration.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[FatRat.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Hash.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Instant.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Int.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Iterable.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[List.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Map.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Match.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Nil.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Num.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Numeric.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Range.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Rat.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Rational.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Real.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Seq.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Stash.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).\n*[[Str.cis]], coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).			
Complex.log	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_log
Complex.log10	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_log10
Complex.exp	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_exp
Complex.unpolar	A			Perl 6 Complex							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_unpolar
unpolar	D								*[[Complex.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Cool.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Duration.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[FatRat.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Hash.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Instant.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Int.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Iterable.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[List.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Map.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Match.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Nil.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Num.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Numeric.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Range.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Rat.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Rational.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Real.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Seq.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Stash.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.\n*[[Str.unpolar]], coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.			
Complex.round	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_round
Complex.floor	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_floor
Complex.ceiling	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_ceiling
Complex.truncate	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_truncate
Complex.ord	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_ord
ord	D								*[[Complex.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[ComplexStr.ord]], returns the codepoint number of the base characters of the first grapheme in the string.\n*[[Cool.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Duration.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[FatRat.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Hash.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Instant.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Int.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[IntStr.ord]], returns the codepoint number of the base characters of the first grapheme in the string.\n*[[Iterable.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[List.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Map.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Match.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Nil.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Num.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[NumStr.ord]], returns the codepoint number of the base characters of the first grapheme in the string.\n*[[Numeric.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Range.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Rat.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[RatStr.ord]], returns the codepoint number of the base characters of the first grapheme in the string.\n*[[Rational.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Real.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Seq.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Stash.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.\n*[[Str.ord]], coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.			
Complex.chr	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_chr
Complex.chars	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_chars
chars	D								*[[Complex.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[ComplexStr.chars]], returns the number of characters in the string in graphemes.\n*[[Cool.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Duration.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[FatRat.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Hash.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Instant.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Int.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[IntStr.chars]], returns the number of characters in the string in graphemes.\n*[[Iterable.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[List.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Map.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Match.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Nil.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Num.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[NumStr.chars]], returns the number of characters in the string in graphemes.\n*[[Numeric.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Range.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Rat.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[RatStr.chars]], returns the number of characters in the string in graphemes.\n*[[Rational.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Real.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Seq.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Stash.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.\n*[[Str.chars]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.			
Complex.codes	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_codes
codes	D								*[[Complex.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Cool.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Duration.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[FatRat.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Hash.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Instant.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Int.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Iterable.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[List.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Map.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Match.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[NFC.codes]], returns the number of codepoints in the invocant.\n*[[NFD.codes]], returns the number of codepoints in the invocant.\n*[[NFKC.codes]], returns the number of codepoints in the invocant.\n*[[NFKD.codes]], returns the number of codepoints in the invocant.\n*[[Nil.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Num.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Numeric.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Range.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Rat.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Rational.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Real.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Seq.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Stash.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Str.codes]], coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.\n*[[Uni.codes]], returns the number of codepoints in the invocant.			
Complex.flip	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_flip
flip	D								*[[Complex.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[ComplexStr.flip]], returns the string reversed character by character.\n*[[Cool.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Duration.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[FatRat.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Hash.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Instant.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Int.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[IntStr.flip]], returns the string reversed character by character.\n*[[Iterable.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[List.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Map.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Match.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Nil.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Num.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[NumStr.flip]], returns the string reversed character by character.\n*[[Numeric.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Range.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Rat.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[RatStr.flip]], returns the string reversed character by character.\n*[[Rational.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Real.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Seq.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Stash.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.\n*[[Str.flip]], coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.			
Complex.trim	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_trim
trim	D								*[[Complex.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[ComplexStr.trim]], remove leading and trailing whitespace.\n*[[Cool.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Duration.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[FatRat.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Hash.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Instant.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Int.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[IntStr.trim]], remove leading and trailing whitespace.\n*[[Iterable.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[List.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Map.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Match.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Nil.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Num.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[NumStr.trim]], remove leading and trailing whitespace.\n*[[Numeric.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Range.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Rat.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[RatStr.trim]], remove leading and trailing whitespace.\n*[[Rational.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Real.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Seq.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Stash.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Str.trim]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.			
Complex.trim-leading	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_trim-leading
trim-leading	D								*[[Complex.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[ComplexStr.trim-leading]], remove the whitespace characters from the beginning of a string.\n*[[Cool.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Duration.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[FatRat.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Hash.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Instant.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Int.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[IntStr.trim-leading]], remove the whitespace characters from the beginning of a string.\n*[[Iterable.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[List.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Map.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Match.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Nil.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Num.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[NumStr.trim-leading]], remove the whitespace characters from the beginning of a string.\n*[[Numeric.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Range.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Rat.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[RatStr.trim-leading]], remove the whitespace characters from the beginning of a string.\n*[[Rational.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Real.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Seq.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Stash.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.\n*[[Str.trim-leading]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.			
Complex.trim-trailing	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_trim-trailing
trim-trailing	D								*[[Complex.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[ComplexStr.trim-trailing]], remove the whitespace characters from the end of a string.\n*[[Cool.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Duration.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[FatRat.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Hash.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Instant.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Int.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[IntStr.trim-trailing]], remove the whitespace characters from the end of a string.\n*[[Iterable.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[List.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Map.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Match.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Nil.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Num.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[NumStr.trim-trailing]], remove the whitespace characters from the end of a string.\n*[[Numeric.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Range.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Rat.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[RatStr.trim-trailing]], remove the whitespace characters from the end of a string.\n*[[Rational.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Real.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Seq.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Stash.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.\n*[[Str.trim-trailing]], coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.			
Complex.lc	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_lc
lc	D								*[[Complex.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[ComplexStr.lc]], returns a lower-case version of the string.\n*[[Cool.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Duration.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[FatRat.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Hash.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Instant.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Int.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[IntStr.lc]], returns a lower-case version of the string.\n*[[Iterable.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[List.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Map.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Match.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Nil.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Num.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[NumStr.lc]], returns a lower-case version of the string.\n*[[Numeric.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Range.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Rat.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[RatStr.lc]], returns a lower-case version of the string.\n*[[Rational.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Real.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Seq.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Stash.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.\n*[[Str.lc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.			
Complex.uc	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_uc
uc	D								*[[Complex.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[ComplexStr.uc]], returns an uppercase version of the string.\n*[[Cool.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Duration.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[FatRat.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Hash.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Instant.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Int.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[IntStr.uc]], returns an uppercase version of the string.\n*[[Iterable.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[List.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Map.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Match.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Nil.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Num.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[NumStr.uc]], returns an uppercase version of the string.\n*[[Numeric.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Range.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Rat.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[RatStr.uc]], returns an uppercase version of the string.\n*[[Rational.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Real.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Seq.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Stash.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).\n*[[Str.uc]], coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).			
Complex.fc	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_fc
fc	D								*[[Complex.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[ComplexStr.fc]], does a Unicode "fold case" operation suitable for doing caseless string comparisons.\n*[[Cool.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Duration.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[FatRat.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Hash.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Instant.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Int.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[IntStr.fc]], does a Unicode "fold case" operation suitable for doing caseless string comparisons.\n*[[Iterable.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[List.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Map.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Match.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Nil.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Num.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[NumStr.fc]], does a Unicode "fold case" operation suitable for doing caseless string comparisons.\n*[[Numeric.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Range.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Rat.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[RatStr.fc]], does a Unicode "fold case" operation suitable for doing caseless string comparisons.\n*[[Rational.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Real.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Seq.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Stash.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.\n*[[Str.fc]], coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.			
Complex.tc	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_tc
tc	D								*[[Complex.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[ComplexStr.tc]], does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping\n*[[Cool.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Duration.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[FatRat.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Hash.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Instant.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Int.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[IntStr.tc]], does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping\n*[[Iterable.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[List.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Map.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Match.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Nil.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Num.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[NumStr.tc]], does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping\n*[[Numeric.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Range.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Rat.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[RatStr.tc]], does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping\n*[[Rational.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Real.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Seq.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Stash.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Str.tc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).			
Complex.tclc	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_tclc
tclc	D								*[[Complex.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[ComplexStr.tclc]], turns the first character to title case, and all other characters to lower case\n*[[Cool.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Duration.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[FatRat.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Hash.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Instant.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Int.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[IntStr.tclc]], turns the first character to title case, and all other characters to lower case\n*[[Iterable.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[List.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Map.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Match.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Nil.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Num.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[NumStr.tclc]], turns the first character to title case, and all other characters to lower case\n*[[Numeric.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Range.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Rat.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[RatStr.tclc]], turns the first character to title case, and all other characters to lower case\n*[[Rational.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Real.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Seq.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Stash.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Str.tclc]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..			
Complex.wordcase	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_wordcase
wordcase	D								*[[Complex.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[ComplexStr.wordcase]], returns a string in which &amp;filter has been applied to all the words that match $where.\n*[[Cool.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Duration.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[FatRat.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Hash.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Instant.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Int.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[IntStr.wordcase]], returns a string in which &amp;filter has been applied to all the words that match $where.\n*[[Iterable.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[List.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Map.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Match.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Nil.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Num.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[NumStr.wordcase]], returns a string in which &amp;filter has been applied to all the words that match $where.\n*[[Numeric.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Range.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Rat.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[RatStr.wordcase]], returns a string in which &amp;filter has been applied to all the words that match $where.\n*[[Rational.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Real.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Seq.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Stash.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Str.wordcase]], coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.			
Complex.samecase	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_samecase
samecase	D								*[[Complex.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Cool.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Duration.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[FatRat.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Hash.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Instant.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Int.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Iterable.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[List.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Map.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Match.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Nil.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Num.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Numeric.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Range.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Rat.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Rational.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Real.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Seq.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Stash.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.\n*[[Str.samecase]], coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.			
Complex.uniprop	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_uniprop
uniprop	D								*[[Complex.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Cool.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Duration.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[FatRat.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Hash.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Instant.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Int.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Iterable.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[List.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Map.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Match.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Nil.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Num.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Numeric.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Range.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Rat.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Rational.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Real.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Seq.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Stash.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.\n*[[Str.uniprop]], interprets the invocant as a Str, and returns the unicode property of the first character.			
Complex.uniprops	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_uniprops
uniprops	D								*[[Complex.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Cool.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Duration.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[FatRat.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Hash.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Instant.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Int.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Iterable.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[List.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Map.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Match.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Nil.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Num.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Numeric.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Range.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Rat.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Rational.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Real.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Seq.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Stash.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.\n*[[Str.uniprops]], interprets the invocant as a Str, and returns the unicode property for each character as a Seq.			
Complex.uniname	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_uniname
uniname	D								*[[Complex.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Cool.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Duration.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[FatRat.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Hash.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Instant.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Int.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Iterable.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[List.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Map.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Match.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Nil.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Num.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Numeric.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Range.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Rat.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Rational.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Real.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Seq.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Stash.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.\n*[[Str.uniname]], interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.			
Complex.uninames	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_uninames
uninames	D								*[[Complex.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Cool.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Duration.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[FatRat.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Hash.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Instant.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Int.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Iterable.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[List.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Map.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Match.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Nil.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Num.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Numeric.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Range.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Rat.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Rational.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Real.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Seq.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Stash.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.\n*[[Str.uninames]], returns of a Seq of Unicode names for the all the codepoints in the Str provided.			
Complex.unimatch	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_unimatch
unimatch	D								*[[Complex.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Cool.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Duration.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[FatRat.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Hash.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Instant.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Int.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Iterable.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[List.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Map.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Match.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Nil.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Num.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Numeric.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Range.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Rat.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Rational.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Real.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Seq.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Stash.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.\n*[[Str.unimatch]], checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.			
Complex.chop	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_chop
chop	D								*[[Complex.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[ComplexStr.chop]], returns the string with $chars characters removed from the end.\n*[[Cool.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Duration.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[FatRat.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Hash.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Instant.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Int.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[IntStr.chop]], returns the string with $chars characters removed from the end.\n*[[Iterable.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[List.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Map.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Match.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Nil.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Num.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[NumStr.chop]], returns the string with $chars characters removed from the end.\n*[[Numeric.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Range.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Rat.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[RatStr.chop]], returns the string with $chars characters removed from the end.\n*[[Rational.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Real.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Seq.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Stash.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.\n*[[Str.chop]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.			
Complex.chomp	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_chomp
chomp	D								*[[Complex.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[ComplexStr.chomp]], returns the string with a logical newline (any codepoint that has the NEWLINE property) removed from the end.\n*[[Cool.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Duration.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[FatRat.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Hash.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Instant.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Int.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[IntStr.chomp]], returns the string with a logical newline (any codepoint that has the NEWLINE property) removed from the end.\n*[[Iterable.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[List.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Map.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Match.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Nil.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Num.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[NumStr.chomp]], returns the string with a logical newline (any codepoint that has the NEWLINE property) removed from the end.\n*[[Numeric.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Range.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Rat.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[RatStr.chomp]], returns the string with a logical newline (any codepoint that has the NEWLINE property) removed from the end.\n*[[Rational.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Real.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Seq.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Stash.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Str.chomp]], coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.			
Complex.substr	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_substr
substr	D								*[[Complex.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[ComplexStr.substr]], returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.\n*[[Cool.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Duration.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[FatRat.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Hash.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Instant.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Int.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[IntStr.substr]], returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.\n*[[Iterable.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[List.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Map.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Match.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Nil.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Num.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[NumStr.substr]], returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.\n*[[Numeric.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Range.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Rat.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[RatStr.substr]], returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.\n*[[Rational.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Real.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Seq.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Stash.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Str.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.			
Complex.ords	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_ords
ords	D								*[[Complex.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[ComplexStr.ords]], returns a list of Unicode codepoint numbers that describe the codepoints making up the string.\n*[[Cool.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Duration.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[FatRat.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Hash.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Instant.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Int.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[IntStr.ords]], returns a list of Unicode codepoint numbers that describe the codepoints making up the string.\n*[[Iterable.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[List.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Map.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Match.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Nil.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Num.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[NumStr.ords]], returns a list of Unicode codepoint numbers that describe the codepoints making up the string.\n*[[Numeric.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Range.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Rat.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[RatStr.ords]], returns a list of Unicode codepoint numbers that describe the codepoints making up the string.\n*[[Rational.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Real.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Seq.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Stash.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Str.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.			
Complex.chrs	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_chrs
chrs	D								*[[Complex.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Cool.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Duration.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[FatRat.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Hash.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Instant.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Int.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Iterable.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[List.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Map.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Match.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Nil.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Num.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Numeric.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Range.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Rat.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Rational.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Real.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Seq.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Stash.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.\n*[[Str.chrs]], coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.			
Complex.split	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_split
split	D								*[[Complex.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[ComplexStr.split]], splits a string up into pieces based on delimiters found in the string.\n*[[Cool.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Duration.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[FatRat.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Hash.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Instant.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Int.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[IntStr.split]], splits a string up into pieces based on delimiters found in the string.\n*[[Iterable.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[List.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Map.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Match.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Nil.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Num.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[NumStr.split]], splits a string up into pieces based on delimiters found in the string.\n*[[Numeric.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Range.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Rat.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[RatStr.split]], splits a string up into pieces based on delimiters found in the string.\n*[[Rational.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Real.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Seq.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Stash.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Str.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.			
Complex.lines	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_lines
lines	D								*[[Complex.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[ComplexStr.lines]], returns a list of lines (without trailing newline characters), i.e. \n*[[Cool.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Duration.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[FatRat.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Hash.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Instant.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Int.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[IntStr.lines]], returns a list of lines (without trailing newline characters), i.e. \n*[[Iterable.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[List.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Map.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Match.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Nil.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Num.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[NumStr.lines]], returns a list of lines (without trailing newline characters), i.e. \n*[[Numeric.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Range.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Rat.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[RatStr.lines]], returns a list of lines (without trailing newline characters), i.e. \n*[[Rational.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Real.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Seq.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Stash.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Str.lines]], coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.\n*[[Supply.lines]], creates a supply that will emit the characters coming in line by line from a supply that&amp;#39;s usually created by some asynchronous I/O operation.			
Complex.words	A			Perl 6 Complex							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_words
words	D								*[[Complex.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[ComplexStr.words]], returns a list of non-whitespace bits, i.e. \n*[[Cool.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Duration.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[FatRat.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Hash.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Instant.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Int.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[IntStr.words]], returns a list of non-whitespace bits, i.e. \n*[[Iterable.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[List.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Map.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Match.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Nil.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Num.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[NumStr.words]], returns a list of non-whitespace bits, i.e. \n*[[Numeric.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Range.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Rat.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[RatStr.words]], returns a list of non-whitespace bits, i.e. \n*[[Rational.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Real.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Seq.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Stash.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Str.words]], coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Supply.words]], creates a supply that will emit the characters coming in word for word from a supply that&amp;#39;s usually created by some asynchronous I/O operation.			
Complex.comb	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_comb
comb	D								*[[Complex.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[ComplexStr.comb]], searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.\n*[[Cool.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Duration.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[FatRat.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Hash.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Instant.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Int.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[IntStr.comb]], searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.\n*[[Iterable.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[List.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Map.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Match.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Nil.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Num.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[NumStr.comb]], searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.\n*[[Numeric.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Range.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Rat.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[RatStr.comb]], searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.\n*[[Rational.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Real.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Seq.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Stash.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.\n*[[Str.comb]], returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.			
Complex.contains	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_contains
contains	D								*[[Complex.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Cool.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Duration.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[FatRat.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Hash.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Instant.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Int.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Iterable.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[List.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Map.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Match.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Nil.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Num.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Numeric.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Range.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Rat.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Rational.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Real.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Seq.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Stash.contains]], returns True if the invocant contains the $needle at any position within the string.\n*[[Str.contains]], returns True if the invocant contains the $needle at any position within the string.			
Complex.index	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_index
index	D								*[[Complex.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[ComplexStr.index]], searches for $needle in the string starting from $startpos.\n*[[Cool.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Duration.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[FatRat.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Hash.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Instant.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Int.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[IntStr.index]], searches for $needle in the string starting from $startpos.\n*[[Iterable.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[List.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Map.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Match.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Nil.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Num.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[NumStr.index]], searches for $needle in the string starting from $startpos.\n*[[Numeric.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Range.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Rat.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[RatStr.index]], searches for $needle in the string starting from $startpos.\n*[[Rational.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Real.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Seq.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Stash.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.\n*[[Str.index]], coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.			
Complex.rindex	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_rindex
rindex	D								*[[Complex.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[ComplexStr.rindex]], returns the last position of $needle in $haystack not after $startpos.\n*[[Cool.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Duration.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[FatRat.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Hash.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Instant.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Int.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[IntStr.rindex]], returns the last position of $needle in $haystack not after $startpos.\n*[[Iterable.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[List.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Map.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Match.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Nil.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Num.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[NumStr.rindex]], returns the last position of $needle in $haystack not after $startpos.\n*[[Numeric.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Range.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Rat.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[RatStr.rindex]], returns the last position of $needle in $haystack not after $startpos.\n*[[Rational.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Real.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Seq.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Stash.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.\n*[[Str.rindex]], coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.			
Complex.match	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_match
match	D								*[[Complex.match]], coerces the invocant to Str and calls the method match on it.\n*[[ComplexStr.match]], performs a match of the string against $pat and returns a Match object if there is a successful match, and (Any) otherwise.\n*[[Cool.match]], coerces the invocant to Str and calls the method match on it.\n*[[Duration.match]], coerces the invocant to Str and calls the method match on it.\n*[[FatRat.match]], coerces the invocant to Str and calls the method match on it.\n*[[Hash.match]], coerces the invocant to Str and calls the method match on it.\n*[[Instant.match]], coerces the invocant to Str and calls the method match on it.\n*[[Int.match]], coerces the invocant to Str and calls the method match on it.\n*[[IntStr.match]], performs a match of the string against $pat and returns a Match object if there is a successful match, and (Any) otherwise.\n*[[Iterable.match]], coerces the invocant to Str and calls the method match on it.\n*[[List.match]], coerces the invocant to Str and calls the method match on it.\n*[[Map.match]], coerces the invocant to Str and calls the method match on it.\n*[[Match.match]], coerces the invocant to Str and calls the method match on it.\n*[[Nil.match]], coerces the invocant to Str and calls the method match on it.\n*[[Num.match]], coerces the invocant to Str and calls the method match on it.\n*[[NumStr.match]], performs a match of the string against $pat and returns a Match object if there is a successful match, and (Any) otherwise.\n*[[Numeric.match]], coerces the invocant to Str and calls the method match on it.\n*[[Range.match]], coerces the invocant to Str and calls the method match on it.\n*[[Rat.match]], coerces the invocant to Str and calls the method match on it.\n*[[RatStr.match]], performs a match of the string against $pat and returns a Match object if there is a successful match, and (Any) otherwise.\n*[[Rational.match]], coerces the invocant to Str and calls the method match on it.\n*[[Real.match]], coerces the invocant to Str and calls the method match on it.\n*[[Seq.match]], coerces the invocant to Str and calls the method match on it.\n*[[Stash.match]], coerces the invocant to Str and calls the method match on it.\n*[[Str.match]], coerces the invocant to Str and calls the method match on it.			
Complex.fmt	A			Perl 6 Complex							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_fmt
Complex.roots	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_roots
Complex.IO	A			Perl 6 Complex							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_method_IO
Complex.EVAL	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_EVAL
EVAL	D								*[[Complex.EVAL]], coerces the invocant to Str.\n*[[Cool.EVAL]], coerces the invocant to Str.\n*[[Duration.EVAL]], coerces the invocant to Str.\n*[[FatRat.EVAL]], coerces the invocant to Str.\n*[[Hash.EVAL]], coerces the invocant to Str.\n*[[Instant.EVAL]], coerces the invocant to Str.\n*[[Int.EVAL]], coerces the invocant to Str.\n*[[Iterable.EVAL]], coerces the invocant to Str.\n*[[List.EVAL]], coerces the invocant to Str.\n*[[Map.EVAL]], coerces the invocant to Str.\n*[[Match.EVAL]], coerces the invocant to Str.\n*[[Nil.EVAL]], coerces the invocant to Str.\n*[[Num.EVAL]], coerces the invocant to Str.\n*[[Numeric.EVAL]], coerces the invocant to Str.\n*[[Range.EVAL]], coerces the invocant to Str.\n*[[Rat.EVAL]], coerces the invocant to Str.\n*[[Rational.EVAL]], coerces the invocant to Str.\n*[[Real.EVAL]], coerces the invocant to Str.\n*[[Seq.EVAL]], coerces the invocant to Str.\n*[[Stash.EVAL]], coerces the invocant to Str.\n*[[Str.EVAL]], coerces the invocant to Str.			
Complex.EVALFILE	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Cool%29_routine_EVALFILE
EVALFILE	D								*[[Complex.EVALFILE]], slurps the specified file and evaluates it.\n*[[Cool.EVALFILE]], slurps the specified file and evaluates it.\n*[[Duration.EVALFILE]], slurps the specified file and evaluates it.\n*[[FatRat.EVALFILE]], slurps the specified file and evaluates it.\n*[[Hash.EVALFILE]], slurps the specified file and evaluates it.\n*[[Instant.EVALFILE]], slurps the specified file and evaluates it.\n*[[Int.EVALFILE]], slurps the specified file and evaluates it.\n*[[Iterable.EVALFILE]], slurps the specified file and evaluates it.\n*[[List.EVALFILE]], slurps the specified file and evaluates it.\n*[[Map.EVALFILE]], slurps the specified file and evaluates it.\n*[[Match.EVALFILE]], slurps the specified file and evaluates it.\n*[[Nil.EVALFILE]], slurps the specified file and evaluates it.\n*[[Num.EVALFILE]], slurps the specified file and evaluates it.\n*[[Numeric.EVALFILE]], slurps the specified file and evaluates it.\n*[[Range.EVALFILE]], slurps the specified file and evaluates it.\n*[[Rat.EVALFILE]], slurps the specified file and evaluates it.\n*[[Rational.EVALFILE]], slurps the specified file and evaluates it.\n*[[Real.EVALFILE]], slurps the specified file and evaluates it.\n*[[Seq.EVALFILE]], slurps the specified file and evaluates it.\n*[[Stash.EVALFILE]], slurps the specified file and evaluates it.\n*[[Str.EVALFILE]], slurps the specified file and evaluates it.			
Complex.ACCEPTS	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_ACCEPTS
Complex.any	A			Perl 6 Complex							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_any
Complex.all	A			Perl 6 Complex							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_all
Complex.one	A			Perl 6 Complex							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_one
Complex.none	A			Perl 6 Complex							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_none
Complex.list	A			Perl 6 Complex							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_list
Complex.push	A			Perl 6 Complex							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_push
Complex.reverse	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_routine_reverse
Complex.sort	A			Perl 6 Complex							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_sort
Complex.map	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_map
Complex.deepmap	A			Perl 6 Complex							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_deepmap
Complex.duckmap	A			Perl 6 Complex							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_duckmap
Complex.flat	A			Perl 6 Complex							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_flat
Complex.eager	A			Perl 6 Complex							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_eager
Complex.elems	A			Perl 6 Complex							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_elems
Complex.end	A			Perl 6 Complex							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_end
Complex.pairup	A			Perl 6 Complex							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_method_pairup
Complex.exit	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_sub_exit
Complex.item	A			Perl 6 Complex							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Any%29_sub_item
Complex.defined	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_routine_defined
Complex.isa	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_routine_isa
Complex.does	A			Perl 6 Complex							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_routine_does
Complex.Bool	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_routine_Bool
Complex.Str	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_Str
Complex.gist	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_routine_gist
Complex.perl	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_routine_perl
Complex.item	A			Perl 6 Complex							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_item
Complex.clone	A			Perl 6 Complex							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_clone
Complex.new	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_new
Complex.bless	A			Perl 6 Complex							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_bless
Complex.CREATE	A			Perl 6 Complex							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_CREATE
Complex.print	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_print
Complex.put	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_put
Complex.say	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_say
Complex.ACCEPTS	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_ACCEPTS
Complex.WHICH	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_WHICH
Complex.WHERE	A			Perl 6 Complex							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_WHERE
Complex.WHY	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_WHY
Complex.export	A			Perl 6 Complex							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_trait_is_export
Complex.return	A			Perl 6 Complex							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_return
Complex.return-rw	A			Perl 6 Complex							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_return-rw
Complex.emit	A			Perl 6 Complex							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_emit
Complex.take	A			Perl 6 Complex							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_take
Complex.take	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_routine_take
Complex.take-rw	A			Perl 6 Complex							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_routine_take-rw
Complex.so	A			Perl 6 Complex							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_so
Complex.not	A			Perl 6 Complex							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Complex.html#%28Mu%29_method_not
ComplexStr.new	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method new(Complex $i, Str $s)\n</code></pre><p>The constructor requires both the Complex and the Str value, when constructing one directly the values can be whatever is required:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#method_new
ComplexStr.Numeric	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method Numeric\n</code></pre><p>The numeric coercion is applied when the ComplexStr is used in a numeric context, such as a numeric comparison or smart match against a numeric value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#method_Numeric
ComplexStr.Complex	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method Complex\n</code></pre><p>Returns the Complex value of the ComplexStr.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#method_Complex
ComplexStr.Str	A			Perl 6 ComplexStr							<section class="prog__container"><p>Returns the string value of the ComplexStr.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#method_Str
ComplexStr.cmp	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub infix:&lt;cmp&gt;(ComplexStr:D $a, ComplexStr:D $b)\n</code></pre><p>Compare two ComplexStr objects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#infix_cmp
cmp	D								*[[ComplexStr.cmp]], compare two ComplexStr objects.\n*[[IntStr.cmp]], compare two IntStr objects.\n*[[NumStr.cmp]], compare two NumStr objects.\n*[[Order.cmp]], coerces its arguments to Stringy.\n*[[Pair.cmp]], the type-agnostic comparator; compares two Pairs.\n*[[RatStr.cmp]], compare two RatStr objects.			
ComplexStr.chop	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    chop(Str:D --&gt; Str:D)\nmulti method chop(Str:D: $chars = 1 --&gt; Str:D)\n</code></pre><p>Returns the string with $chars characters removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_chop
ComplexStr.chomp	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    chomp(Str:D  --&gt; Str:D)\nmulti method chomp(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string with a logical newline (any codepoint that has the NEWLINE property) removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_chomp
ComplexStr.lc	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    lc(Str:D  --&gt; Str:D)\nmulti method lc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns a lower-case version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_lc
ComplexStr.uc	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    uc(Str:D  --&gt; Str:D)\nmulti method uc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns an uppercase version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_uc
ComplexStr.fc	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    fc(Str:D  --&gt; Str:D)\nmulti method fc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "fold case" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_fc
ComplexStr.tc	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    tc(Str:D  --&gt; Str:D)\nmulti method tc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_tc
ComplexStr.tclc	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    tclc(Str:D  --&gt; Str:D)\nmulti method tclc(Str:D: --&gt; Str:D)\n</code></pre><p>Turns the first character to title case, and all other characters to lower case&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_tclc
ComplexStr.wordcase	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    wordcase(Cool $x  --&gt; Str)\nmulti sub    wordcase(Str:D $x --&gt; Str)\nmulti method wordcase(Str:D: :&amp;filter = &amp;tclc, Mu :$where = True --&gt; Str)\n</code></pre><p>Returns a string in which &amp;filter has been applied to all the words that match $where.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_wordcase
ComplexStr.unival	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method unival(Str:D --&gt; Numeric)\n</code></pre><p>Returns the numeric value that the first codepoint in the invocant represents, or NaN if it&amp;#39;s not numeric.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_unival
ComplexStr.univals	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method univals(Str:D --&gt; List)\n</code></pre><p>Returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_univals
univals	D								*[[ComplexStr.univals]], returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.\n*[[IntStr.univals]], returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.\n*[[NumStr.univals]], returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.\n*[[RatStr.univals]], returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.\n*[[Str.univals]], returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.			
ComplexStr.chars	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    chars(Cool  $x --&gt; Int:D)\nmulti sub    chars(Str:D $x --&gt; Int:D)\nmulti sub    chars(str   $x --&gt; int)\nmulti method chars(Str:D:   --&gt; Int:D)\n</code></pre><p>Returns the number of characters in the string in graphemes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_chars
ComplexStr.encode	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method encode(Str:D: $encoding, $nf --&gt; Blob)\n</code></pre><p>Returns a Blob which represents the original string in the given encoding and normal form.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_encode
encode	D								*[[ComplexStr.encode]], returns a Blob which represents the original string in the given encoding and normal form.\n*[[IntStr.encode]], returns a Blob which represents the original string in the given encoding and normal form.\n*[[NumStr.encode]], returns a Blob which represents the original string in the given encoding and normal form.\n*[[RatStr.encode]], returns a Blob which represents the original string in the given encoding and normal form.\n*[[Str.encode]], returns a Blob which represents the original string in the given encoding and normal form.			
ComplexStr.index	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    index(Cool $s, Str:D $needle, Cool $startpos = 0 --&gt; Int)\nmulti method index(Cool $needle, Cool $startpos = 0 --&gt; Int)\n</code></pre><p>Searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_index
ComplexStr.rindex	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    rindex(Str:D $haystack, Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\nmulti method rindex(Str:D $haystack: Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\n</code></pre><p>Returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_rindex
ComplexStr.match	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method match($pat, :continue(:$c), :pos(:$p), :global(:$g), :overlap(:$ov), :exhaustive(:$ex), :st(:$nd), :rd(:$th), :$nth, :$x --&gt; Match)\n</code></pre><p>Performs a match of the string against $pat and returns a Match object if there is a successful match, and (Any) otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_match
ComplexStr.parse-base	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    parse-base(Str:D $num, Int:D $radix --&gt; Numeric)\nmulti method parse-base(Str:D $num: Int:D $radix --&gt; Numeric)\n</code></pre><p>Performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_parse-base
parse-base	D								*[[ComplexStr.parse-base]], performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.\n*[[IntStr.parse-base]], performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.\n*[[NumStr.parse-base]], performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.\n*[[RatStr.parse-base]], performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.\n*[[Str.parse-base]], performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.			
ComplexStr.split	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(Regex:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(List:D $delimiters, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D:   Str:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: Regex:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: List:D $delimiters, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\n</code></pre><p>Splits a string up into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_split
ComplexStr.comb	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    comb(Str:D   $matcher, Str:D $input, $limit = Inf)\nmulti sub    comb(Regex:D $matcher, Str:D $input, $limit = Inf, Bool :$match)\nmulti sub    comb(Int:D $size, Str:D $input, $limit = Inf)\nmulti method comb(Str:D $input:)\nmulti method comb(Str:D $input: Str:D   $matcher, $limit = Inf)\nmulti method comb(Str:D $input: Regex:D $matcher, $limit = Inf, Bool :$match)\nmulti method comb(Str:D $input: Int:D $size, $limit = Inf)\n</code></pre><p>Searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_comb
ComplexStr.lines	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    lines(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method lines(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of lines (without trailing newline characters), i.e. the same as a call to $input.comb( / ^^ &#92;N* /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_lines
ComplexStr.words	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    words(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method words(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of non-whitespace bits, i.e. the same as a call to $input.comb( / &#92;S+ /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_words
ComplexStr.flip	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    flip(Str:D  --&gt; Str:D)\nmulti method flip(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string reversed character by character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_flip
ComplexStr.sprintf	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub sprintf( Str:D $format, *@args --&gt; Str:D)\n</code></pre><p>This function is mostly identical to the C library sprintf and printf functions.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_sub_sprintf
sprintf	D								*[[ComplexStr.sprintf]], this function is mostly identical to the C library sprintf and printf functions.\n*[[IntStr.sprintf]], this function is mostly identical to the C library sprintf and printf functions.\n*[[NumStr.sprintf]], this function is mostly identical to the C library sprintf and printf functions.\n*[[RatStr.sprintf]], this function is mostly identical to the C library sprintf and printf functions.\n*[[Str.sprintf]], this function is mostly identical to the C library sprintf and printf functions.			
ComplexStr.starts-with	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method starts-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or starts with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_starts-with
starts-with	D								*[[ComplexStr.starts-with]], returns True if the invocant is identical to or starts with $needle.\n*[[IntStr.starts-with]], returns True if the invocant is identical to or starts with $needle.\n*[[NumStr.starts-with]], returns True if the invocant is identical to or starts with $needle.\n*[[RatStr.starts-with]], returns True if the invocant is identical to or starts with $needle.\n*[[Str.starts-with]], returns True if the invocant is identical to or starts with $needle.			
ComplexStr.ends-with	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method ends-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or ends with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_ends-with
ends-with	D								*[[ComplexStr.ends-with]], returns True if the invocant is identical to or ends with $needle.\n*[[IntStr.ends-with]], returns True if the invocant is identical to or ends with $needle.\n*[[NumStr.ends-with]], returns True if the invocant is identical to or ends with $needle.\n*[[RatStr.ends-with]], returns True if the invocant is identical to or ends with $needle.\n*[[Str.ends-with]], returns True if the invocant is identical to or ends with $needle.			
ComplexStr.subst	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method subst(Str:D: $matcher, $replacement, *%opts)\n</code></pre><p>Returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_subst
subst	D								*[[ComplexStr.subst]], returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).\n*[[IntStr.subst]], returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).\n*[[NumStr.subst]], returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).\n*[[RatStr.subst]], returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).\n*[[Str.subst]], returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).			
ComplexStr.subst-mutate	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>my $some-string = "Some foo";\nmy $match = $some-string.subst-mutate(/foo/, "string");\nsay $some-string;  #-&gt; Some string \nsay $match;        #-&gt; ï½¢fooï½£ \n$some-string.subst-mutate(/&lt;[oe]&gt;/, &amp;#39;&amp;#39;, :g); # remove every o and e, notice the :g named argument from .subst \n</code></pre><p>Where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_subst-mutate
subst-mutate	D								*[[ComplexStr.subst-mutate]], where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.\n*[[IntStr.subst-mutate]], where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.\n*[[NumStr.subst-mutate]], where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.\n*[[RatStr.subst-mutate]], where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.\n*[[Str.subst-mutate]], where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.			
ComplexStr.substr	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    substr(Str:D $s, Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti sub    substr(Str:D $s, Range $from-to --&gt; Str:D)\nmulti method substr(Str:D $s: Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti method substr(Str:D $s: Range $from-to --&gt; Str:D)\n</code></pre><p>Returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_substr
ComplexStr.substr-eq	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method substr-eq(Str:D:  Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\nmulti method substr-eq(Cool:D: Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\n</code></pre><p>Returns True if the $test-string exactly matches the String object, starting from the given initial index $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_substr-eq
substr-eq	D								*[[ComplexStr.substr-eq]], returns True if the $test-string exactly matches the String object, starting from the given initial index $from.\n*[[IntStr.substr-eq]], returns True if the $test-string exactly matches the String object, starting from the given initial index $from.\n*[[NumStr.substr-eq]], returns True if the $test-string exactly matches the String object, starting from the given initial index $from.\n*[[RatStr.substr-eq]], returns True if the $test-string exactly matches the String object, starting from the given initial index $from.\n*[[Str.substr-eq]], returns True if the $test-string exactly matches the String object, starting from the given initial index $from.			
ComplexStr.substr-rw	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method substr-rw($from, $length?)\n</code></pre><p>A version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_substr-rw
substr-rw	D								*[[ComplexStr.substr-rw]], a version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.\n*[[IntStr.substr-rw]], a version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.\n*[[NumStr.substr-rw]], a version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.\n*[[RatStr.substr-rw]], a version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.\n*[[Str.substr-rw]], a version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.			
ComplexStr.samemark	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub samemark(Str:D $string, Str:D $pattern --&gt; Str:D)\nmethod    samemark(Str:D: Str:D $pattern --&gt; Str:D)\n</code></pre><p>Returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_samemark
samemark	D								*[[ComplexStr.samemark]], returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.\n*[[IntStr.samemark]], returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.\n*[[NumStr.samemark]], returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.\n*[[RatStr.samemark]], returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.\n*[[Str.samemark]], returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.			
ComplexStr.succ	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method succ(Str:D --&gt; Str:D)\n</code></pre><p>Returns the string incremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_succ
ComplexStr.pred	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method pred(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string decremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_pred
ComplexStr.ord	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub    ord(Str:D  --&gt; Int:D)\nmulti method ord(Str:D: --&gt; Int:D)\n</code></pre><p>Returns the codepoint number of the base characters of the first grapheme in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_routine_ord
ComplexStr.ords	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method ords(Str:D: --&gt; Positional)\n</code></pre><p>Returns a list of Unicode codepoint numbers that describe the codepoints making up the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_ords
ComplexStr.trans	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method trans(Str:D: Pair:D &#92;what, *%n --&gt; Str)\nmulti method trans(Str:D: *@changes, :complement(:$c), :squash(:$s), :delete(:$d) --&gt; Str)\n</code></pre><p>Replaces one or many characters with one or many characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_trans
trans	D								*[[ComplexStr.trans]], replaces one or many characters with one or many characters.\n*[[IntStr.trans]], replaces one or many characters with one or many characters.\n*[[NumStr.trans]], replaces one or many characters with one or many characters.\n*[[RatStr.trans]], replaces one or many characters with one or many characters.\n*[[Str.trans]], replaces one or many characters with one or many characters.			
ComplexStr.indent	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method indent(Int $steps where { $_ == 0 } )\nmulti method indent(Int $steps where { $_ &gt; 0  } )\nmulti method indent($steps where { .isa(Whatever) || .isa(Int) &amp;&amp; $_ &lt; 0 } )\n</code></pre><p>Indents each line of the string by $steps.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_indent
indent	D								*[[ComplexStr.indent]], indents each line of the string by $steps.\n*[[IntStr.indent]], indents each line of the string by $steps.\n*[[NumStr.indent]], indents each line of the string by $steps.\n*[[RatStr.indent]], indents each line of the string by $steps.\n*[[Str.indent]], indents each line of the string by $steps.			
ComplexStr.trim	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method trim(Str:D: --&gt; Str)\n</code></pre><p>Remove leading and trailing whitespace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_trim
ComplexStr.trim-trailing	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method trim-trailing(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the end of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_trim-trailing
ComplexStr.trim-leading	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method trim-leading(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the beginning of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_trim-leading
ComplexStr.NFC	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method NFC(Str:D: --&gt; NFC:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form C / Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_NFC
ComplexStr.NFD	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method NFD(Str:D: --&gt; NFD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form D / Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_NFD
ComplexStr.NFKC	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method NFKC(Str:D: --&gt; NFKC:D)\n</code></pre><p>Returns a codepoint string in NFKC format (Unicode Normalization Form KC / Compatibility Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_NFKC
ComplexStr.NFKD	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method NFKD(Str:D: --&gt; NFKD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form KD / Compatibility Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_NFKD
ComplexStr.ACCEPTS	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method ACCEPTS(Str:D: $other)\n</code></pre><p>Returns True if the string is the same as $other.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_method_ACCEPTS
ComplexStr.val	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi sub val(Str:D $MAYBEVAL, :$val-or-fail)\n</code></pre><p>Given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Str%29_sub_val
val	D								*[[ComplexStr.val]], given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.\n*[[IntStr.val]], given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.\n*[[NumStr.val]], given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.\n*[[RatStr.val]], given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.\n*[[Str.val]], given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.			
ComplexStr.i	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>say 2i;     # same as Complex.new(0, 2); \nsay 1-2e3i; # same as Complex.new(1, -2e3); \n</code></pre><p>Adding a trailing i to a number literal makes it a Complex, for example:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_postfix_i
ComplexStr.new	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method new(Real $re, Real $im --&gt; Complex:D)\n</code></pre><p>Creates a new Complex object from real and imaginary parts.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_new
ComplexStr.re	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method re(Complex:D: --&gt; Real:D)\n</code></pre><p>Returns the real part of the complex number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_re
ComplexStr.im	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method im(Complex:D: --&gt; Real:D)\n</code></pre><p>Returns the imaginary part of the complex number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_im
ComplexStr.reals	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method reals(Complex:D: --&gt; Positional:D)\n</code></pre><p>Returns a two-element list containing the real and imaginary parts for this value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_reals
ComplexStr.isNaN	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method isNaN(Complex:D: --&gt; Bool:D)\n</code></pre><p>Returns true if the real or imaginary part is NaN (not a number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_isNaN
ComplexStr.polar	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method polar(Complex:D: --&gt; Positional:D)\n</code></pre><p>Returns a two-element list of the polar coordinates for this value, i.e. magnitude and angle in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_polar
ComplexStr.floor	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method floor(Complex:D: --&gt; Complex:D)\n</code></pre><p>Returns self.re.floor + self.im.floor.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_floor
ComplexStr.ceiling	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method ceiling(Complex:D: --&gt; Complex:D)\n</code></pre><p>Returns self.re.ceiling + self.im.ceiling.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_ceiling
ComplexStr.round	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>multi method round(Complex:D: --&gt; Complex:D)\nmulti method round(Complex:D: Real() $scale --&gt; Complex:D)\n</code></pre><p>With no arguments, rounds both the real and imaginary parts to the nearest integer and returns a new Complex number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_round
ComplexStr.truncate	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method truncate(Complex:D: --&gt; Complex:D)\n</code></pre><p>Removes the fractional part of both the real and imaginary parts of the number, using Real.truncate, and returns the result as a new Complex.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_truncate
ComplexStr.abs	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method abs(Complex:D: --&gt; Num:D)\nmulti sub abs(Complex:D $z --&gt; Num:D)\n</code></pre><p>Returns the absolute value of the invocant (or the argument in sub form).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_abs
ComplexStr.conj	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method conj(Complex:D: --&gt; Complex:D)\n</code></pre><p>Returns the complex conjugate of the invocant (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_conj
ComplexStr.gist	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method gist(Complex:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation of the form "1+2i", without internal spaces.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_gist
ComplexStr.perl	A			Perl 6 ComplexStr							<section class="prog__container"><pre><code>method perl(Complex:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation corresponding to the unambiguous val()-based representation of complex literals, of the form "&lt;1+2i&gt;", without internal spaces, and including the angles that keep the + from being treated as a normal addition operator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ComplexStr.html#%28Complex%29_method_perl
ComplexStr.Real	R	Numeric.Real										
ComplexStr.Int	R	Numeric.Int										
ComplexStr.Rat	R	Numeric.Rat										
ComplexStr.Num	R	Numeric.Num										
ComplexStr.narrow	R	Numeric.narrow										
ComplexStr.ACCEPTS	R	Numeric.ACCEPTS										
ComplexStr.log	R	Numeric.log										
ComplexStr.log10	R	Numeric.log10										
ComplexStr.exp	R	Numeric.exp										
ComplexStr.roots	R	Numeric.roots										
ComplexStr.abs	R	Numeric.abs										
ComplexStr.sqrt	R	Numeric.sqrt										
ComplexStr.conj	R	Numeric.conj										
ComplexStr.Bool	R	Numeric.Bool										
ComplexStr.succ	R	Numeric.succ										
ComplexStr.pred	R	Numeric.pred										
ComplexStr.abs	R	Numeric.abs										
ComplexStr.conj	R	Numeric.conj										
ComplexStr.sqrt	R	Numeric.sqrt										
ComplexStr.sign	R	Numeric.sign										
ComplexStr.rand	R	Numeric.rand										
ComplexStr.sin	R	Numeric.sin										
ComplexStr.asin	R	Numeric.asin										
ComplexStr.cos	R	Numeric.cos										
ComplexStr.acos	R	Numeric.acos										
ComplexStr.tan	R	Numeric.tan										
ComplexStr.atan	R	Numeric.atan										
ComplexStr.atan2	R	Numeric.atan2										
ComplexStr.sec	R	Numeric.sec										
ComplexStr.asec	R	Numeric.asec										
ComplexStr.cosec	R	Numeric.cosec										
ComplexStr.acosec	R	Numeric.acosec										
ComplexStr.cotan	R	Numeric.cotan										
ComplexStr.acotan	R	Numeric.acotan										
ComplexStr.sinh	R	Numeric.sinh										
ComplexStr.asinh	R	Numeric.asinh										
ComplexStr.cosh	R	Numeric.cosh										
ComplexStr.acosh	R	Numeric.acosh										
ComplexStr.tanh	R	Numeric.tanh										
ComplexStr.atanh	R	Numeric.atanh										
ComplexStr.sech	R	Numeric.sech										
ComplexStr.asech	R	Numeric.asech										
ComplexStr.cosech	R	Numeric.cosech										
ComplexStr.acosech	R	Numeric.acosech										
ComplexStr.cotanh	R	Numeric.cotanh										
ComplexStr.acotanh	R	Numeric.acotanh										
ComplexStr.cis	R	Numeric.cis										
ComplexStr.log	R	Numeric.log										
ComplexStr.log10	R	Numeric.log10										
ComplexStr.exp	R	Numeric.exp										
ComplexStr.unpolar	R	Numeric.unpolar										
ComplexStr.round	R	Numeric.round										
ComplexStr.floor	R	Numeric.floor										
ComplexStr.ceiling	R	Numeric.ceiling										
ComplexStr.truncate	R	Numeric.truncate										
ComplexStr.ord	R	Numeric.ord										
ComplexStr.chr	R	Numeric.chr										
ComplexStr.chars	R	Numeric.chars										
ComplexStr.codes	R	Numeric.codes										
ComplexStr.flip	R	Numeric.flip										
ComplexStr.trim	R	Numeric.trim										
ComplexStr.trim-leading	R	Numeric.trim-leading										
ComplexStr.trim-trailing	R	Numeric.trim-trailing										
ComplexStr.lc	R	Numeric.lc										
ComplexStr.uc	R	Numeric.uc										
ComplexStr.fc	R	Numeric.fc										
ComplexStr.tc	R	Numeric.tc										
ComplexStr.tclc	R	Numeric.tclc										
ComplexStr.wordcase	R	Numeric.wordcase										
ComplexStr.samecase	R	Numeric.samecase										
ComplexStr.uniprop	R	Numeric.uniprop										
ComplexStr.uniprops	R	Numeric.uniprops										
ComplexStr.uniname	R	Numeric.uniname										
ComplexStr.uninames	R	Numeric.uninames										
ComplexStr.unimatch	R	Numeric.unimatch										
ComplexStr.chop	R	Numeric.chop										
ComplexStr.chomp	R	Numeric.chomp										
ComplexStr.substr	R	Numeric.substr										
ComplexStr.ords	R	Numeric.ords										
ComplexStr.chrs	R	Numeric.chrs										
ComplexStr.split	R	Numeric.split										
ComplexStr.lines	R	Numeric.lines										
ComplexStr.words	R	Numeric.words										
ComplexStr.comb	R	Numeric.comb										
ComplexStr.contains	R	Numeric.contains										
ComplexStr.index	R	Numeric.index										
ComplexStr.rindex	R	Numeric.rindex										
ComplexStr.match	R	Numeric.match										
ComplexStr.fmt	R	Numeric.fmt										
ComplexStr.roots	R	Numeric.roots										
ComplexStr.IO	R	Numeric.IO										
ComplexStr.EVAL	R	Numeric.EVAL										
ComplexStr.EVALFILE	R	Numeric.EVALFILE										
ComplexStr.ACCEPTS	R	Numeric.ACCEPTS										
ComplexStr.any	R	Numeric.any										
ComplexStr.all	R	Numeric.all										
ComplexStr.one	R	Numeric.one										
ComplexStr.none	R	Numeric.none										
ComplexStr.list	R	Numeric.list										
ComplexStr.push	R	Numeric.push										
ComplexStr.reverse	R	Numeric.reverse										
ComplexStr.sort	R	Numeric.sort										
ComplexStr.map	R	Numeric.map										
ComplexStr.deepmap	R	Numeric.deepmap										
ComplexStr.duckmap	R	Numeric.duckmap										
ComplexStr.flat	R	Numeric.flat										
ComplexStr.eager	R	Numeric.eager										
ComplexStr.elems	R	Numeric.elems										
ComplexStr.end	R	Numeric.end										
ComplexStr.pairup	R	Numeric.pairup										
ComplexStr.exit	R	Numeric.exit										
ComplexStr.item	R	Numeric.item										
ComplexStr.defined	R	Numeric.defined										
ComplexStr.isa	R	Numeric.isa										
ComplexStr.does	R	Numeric.does										
ComplexStr.Bool	R	Numeric.Bool										
ComplexStr.Str	R	Numeric.Str										
ComplexStr.gist	R	Numeric.gist										
ComplexStr.perl	R	Numeric.perl										
ComplexStr.item	R	Numeric.item										
ComplexStr.clone	R	Numeric.clone										
ComplexStr.new	R	Numeric.new										
ComplexStr.bless	R	Numeric.bless										
ComplexStr.CREATE	R	Numeric.CREATE										
ComplexStr.print	R	Numeric.print										
ComplexStr.put	R	Numeric.put										
ComplexStr.say	R	Numeric.say										
ComplexStr.ACCEPTS	R	Numeric.ACCEPTS										
ComplexStr.WHICH	R	Numeric.WHICH										
ComplexStr.WHERE	R	Numeric.WHERE										
ComplexStr.WHY	R	Numeric.WHY										
ComplexStr.export	R	Numeric.export										
ComplexStr.return	R	Numeric.return										
ComplexStr.return-rw	R	Numeric.return-rw										
ComplexStr.emit	R	Numeric.emit										
ComplexStr.take	R	Numeric.take										
ComplexStr.take	R	Numeric.take										
ComplexStr.take-rw	R	Numeric.take-rw										
ComplexStr.so	R	Numeric.so										
ComplexStr.not	R	Numeric.not										
Cool.abs	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_abs
Cool.conj	A			Perl 6 Cool							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_conj
Cool.sqrt	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_sqrt
Cool.sign	A			Perl 6 Cool							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_sign
Cool.rand	A			Perl 6 Cool							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_rand
Cool.sin	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_sin
Cool.asin	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_asin
Cool.cos	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_cos
Cool.acos	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_acos
Cool.tan	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_tan
Cool.atan	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_atan
Cool.atan2	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_atan2
Cool.sec	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_sec
Cool.asec	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_asec
Cool.cosec	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_cosec
Cool.acosec	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_acosec
Cool.cotan	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_cotan
Cool.acotan	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_acotan
Cool.sinh	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_sinh
Cool.asinh	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_asinh
Cool.cosh	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_cosh
Cool.acosh	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_acosh
Cool.tanh	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_tanh
Cool.atanh	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_atanh
Cool.sech	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_sech
Cool.asech	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_asech
Cool.cosech	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_cosech
Cool.acosech	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_acosech
Cool.cotanh	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_cotanh
Cool.acotanh	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_acotanh
Cool.cis	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_cis
Cool.log	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_log
Cool.log10	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_log10
Cool.exp	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_exp
Cool.unpolar	A			Perl 6 Cool							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_unpolar
Cool.round	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_round
Cool.floor	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_floor
Cool.ceiling	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_ceiling
Cool.truncate	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_truncate
Cool.ord	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_ord
Cool.chr	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_chr
Cool.chars	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_chars
Cool.codes	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_codes
Cool.flip	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_flip
Cool.trim	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_trim
Cool.trim-leading	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_trim-leading
Cool.trim-trailing	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_trim-trailing
Cool.lc	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_lc
Cool.uc	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_uc
Cool.fc	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_fc
Cool.tc	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_tc
Cool.tclc	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_tclc
Cool.wordcase	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_wordcase
Cool.samecase	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_samecase
Cool.uniprop	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_uniprop
Cool.uniprops	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_uniprops
Cool.uniname	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_uniname
Cool.uninames	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_uninames
Cool.unimatch	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_unimatch
Cool.chop	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_chop
Cool.chomp	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_chomp
Cool.substr	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_substr
Cool.ords	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_ords
Cool.chrs	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_chrs
Cool.split	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_split
Cool.lines	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_lines
Cool.words	A			Perl 6 Cool							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_words
Cool.comb	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_comb
Cool.contains	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_contains
Cool.index	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_index
Cool.rindex	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_rindex
Cool.match	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_match
Cool.fmt	A			Perl 6 Cool							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_fmt
Cool.roots	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_roots
Cool.IO	A			Perl 6 Cool							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#method_IO
Cool.EVAL	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_EVAL
Cool.EVALFILE	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#routine_EVALFILE
Cool.ACCEPTS	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_ACCEPTS
Cool.any	A			Perl 6 Cool							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_any
Cool.all	A			Perl 6 Cool							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_all
Cool.one	A			Perl 6 Cool							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_one
Cool.none	A			Perl 6 Cool							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_none
Cool.list	A			Perl 6 Cool							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_list
Cool.push	A			Perl 6 Cool							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_push
Cool.reverse	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_routine_reverse
Cool.sort	A			Perl 6 Cool							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_sort
Cool.map	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_map
Cool.deepmap	A			Perl 6 Cool							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_deepmap
Cool.duckmap	A			Perl 6 Cool							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_duckmap
Cool.flat	A			Perl 6 Cool							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_flat
Cool.eager	A			Perl 6 Cool							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_eager
Cool.elems	A			Perl 6 Cool							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_elems
Cool.end	A			Perl 6 Cool							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_end
Cool.pairup	A			Perl 6 Cool							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_method_pairup
Cool.exit	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_sub_exit
Cool.item	A			Perl 6 Cool							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Any%29_sub_item
Cool.defined	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_routine_defined
Cool.isa	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_routine_isa
Cool.does	A			Perl 6 Cool							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_routine_does
Cool.Bool	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_routine_Bool
Cool.Str	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_Str
Cool.gist	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_routine_gist
Cool.perl	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_routine_perl
Cool.item	A			Perl 6 Cool							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_item
Cool.clone	A			Perl 6 Cool							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_clone
Cool.new	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_new
Cool.bless	A			Perl 6 Cool							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_bless
Cool.CREATE	A			Perl 6 Cool							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_CREATE
Cool.print	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_print
Cool.put	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_put
Cool.say	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_say
Cool.ACCEPTS	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_ACCEPTS
Cool.WHICH	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_WHICH
Cool.WHERE	A			Perl 6 Cool							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_WHERE
Cool.WHY	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_WHY
Cool.export	A			Perl 6 Cool							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_trait_is_export
Cool.return	A			Perl 6 Cool							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_return
Cool.return-rw	A			Perl 6 Cool							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_return-rw
Cool.emit	A			Perl 6 Cool							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_emit
Cool.take	A			Perl 6 Cool							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_take
Cool.take	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_routine_take
Cool.take-rw	A			Perl 6 Cool							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_routine_take-rw
Cool.so	A			Perl 6 Cool							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_so
Cool.not	A			Perl 6 Cool							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cool.html#%28Mu%29_method_not
CurrentThreadScheduler.uncaught_handler	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method uncaught_handler() is rw\n</code></pre><p>RW-Accessor for the handler that is caught for uncaught exceptions from the code that is being scheduled and run.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Scheduler%29_method_uncaught_handler
uncaught_handler	D								*[[CurrentThreadScheduler.uncaught_handler]], rW-Accessor for the handler that is caught for uncaught exceptions from the code that is being scheduled and run.\n*[[Scheduler.uncaught_handler]], rW-Accessor for the handler that is caught for uncaught exceptions from the code that is being scheduled and run.\n*[[ThreadPoolScheduler.uncaught_handler]], rW-Accessor for the handler that is caught for uncaught exceptions from the code that is being scheduled and run.			
CurrentThreadScheduler.cue	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method cue(:&amp;code, Instant :$at, :$in, :$every, :$times = 1; :&amp;catch)\n</code></pre><p>Schedules a callable (&amp;code) for execution.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Scheduler%29_method_cue
cue	D								*[[CurrentThreadScheduler.cue]], schedules a callable (&amp;code) for execution.\n*[[Scheduler.cue]], schedules a callable (&amp;code) for execution.\n*[[ThreadPoolScheduler.cue]], schedules a callable (&amp;code) for execution.			
CurrentThreadScheduler.ACCEPTS	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_ACCEPTS
CurrentThreadScheduler.any	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_any
CurrentThreadScheduler.all	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_all
CurrentThreadScheduler.one	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_one
CurrentThreadScheduler.none	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_none
CurrentThreadScheduler.list	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_list
CurrentThreadScheduler.push	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_push
CurrentThreadScheduler.reverse	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_routine_reverse
CurrentThreadScheduler.sort	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_sort
CurrentThreadScheduler.map	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_map
CurrentThreadScheduler.deepmap	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_deepmap
CurrentThreadScheduler.duckmap	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_duckmap
CurrentThreadScheduler.flat	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_flat
CurrentThreadScheduler.eager	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_eager
CurrentThreadScheduler.elems	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_elems
CurrentThreadScheduler.end	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_end
CurrentThreadScheduler.pairup	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_method_pairup
CurrentThreadScheduler.exit	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_sub_exit
CurrentThreadScheduler.item	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Any%29_sub_item
CurrentThreadScheduler.defined	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_routine_defined
CurrentThreadScheduler.isa	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_routine_isa
CurrentThreadScheduler.does	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_routine_does
CurrentThreadScheduler.Bool	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_routine_Bool
CurrentThreadScheduler.Str	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_Str
CurrentThreadScheduler.gist	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_routine_gist
CurrentThreadScheduler.perl	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_routine_perl
CurrentThreadScheduler.item	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_item
CurrentThreadScheduler.clone	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_clone
CurrentThreadScheduler.new	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_new
CurrentThreadScheduler.bless	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_bless
CurrentThreadScheduler.CREATE	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_CREATE
CurrentThreadScheduler.print	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_print
CurrentThreadScheduler.put	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_put
CurrentThreadScheduler.say	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_say
CurrentThreadScheduler.ACCEPTS	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_ACCEPTS
CurrentThreadScheduler.WHICH	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_WHICH
CurrentThreadScheduler.WHERE	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_WHERE
CurrentThreadScheduler.WHY	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_WHY
CurrentThreadScheduler.export	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_trait_is_export
CurrentThreadScheduler.return	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_return
CurrentThreadScheduler.return-rw	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_return-rw
CurrentThreadScheduler.emit	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_emit
CurrentThreadScheduler.take	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_take
CurrentThreadScheduler.take	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_routine_take
CurrentThreadScheduler.take-rw	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_routine_take-rw
CurrentThreadScheduler.so	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_so
CurrentThreadScheduler.not	A			Perl 6 CurrentThreadScheduler							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/CurrentThreadScheduler.html#%28Mu%29_method_not
Cursor.ACCEPTS	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_ACCEPTS
Cursor.any	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_any
Cursor.all	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_all
Cursor.one	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_one
Cursor.none	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_none
Cursor.list	A			Perl 6 Cursor							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_list
Cursor.push	A			Perl 6 Cursor							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_push
Cursor.reverse	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_routine_reverse
Cursor.sort	A			Perl 6 Cursor							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_sort
Cursor.map	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_map
Cursor.deepmap	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_deepmap
Cursor.duckmap	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_duckmap
Cursor.flat	A			Perl 6 Cursor							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_flat
Cursor.eager	A			Perl 6 Cursor							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_eager
Cursor.elems	A			Perl 6 Cursor							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_elems
Cursor.end	A			Perl 6 Cursor							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_end
Cursor.pairup	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_method_pairup
Cursor.exit	A			Perl 6 Cursor							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_sub_exit
Cursor.item	A			Perl 6 Cursor							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Any%29_sub_item
Cursor.defined	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_routine_defined
Cursor.isa	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_routine_isa
Cursor.does	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_routine_does
Cursor.Bool	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_routine_Bool
Cursor.Str	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_Str
Cursor.gist	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_routine_gist
Cursor.perl	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_routine_perl
Cursor.item	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_item
Cursor.clone	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_clone
Cursor.new	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_new
Cursor.bless	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_bless
Cursor.CREATE	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_CREATE
Cursor.print	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_print
Cursor.put	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_put
Cursor.say	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_say
Cursor.ACCEPTS	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_ACCEPTS
Cursor.WHICH	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_WHICH
Cursor.WHERE	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_WHERE
Cursor.WHY	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_WHY
Cursor.export	A			Perl 6 Cursor							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_trait_is_export
Cursor.return	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_return
Cursor.return-rw	A			Perl 6 Cursor							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_return-rw
Cursor.emit	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_emit
Cursor.take	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_take
Cursor.take	A			Perl 6 Cursor							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_routine_take
Cursor.take-rw	A			Perl 6 Cursor							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_routine_take-rw
Cursor.so	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_so
Cursor.not	A			Perl 6 Cursor							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Cursor.html#%28Mu%29_method_not
Date.new	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method new($year, $month, $day, :&amp;formatter --&gt; Date:D)\nmulti method new(:$year!, :$month = 1, :$day = 1  --&gt; Date:D)\nmulti method new(Str $date                        --&gt; Date:D)\nmulti method new(Instant:D $dt                    --&gt; Date:D)\nmulti method new(DateTime:D $dt                   --&gt; Date:D)\n</code></pre><p>Creates a new Date object, either from a triple of (year, month, day) that can be coerced to integers, or from a string of the form YYYY-MM-DD (ISO 8601), or from an Instant or DateTime object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_new
Date.new-from-daycount	A			Perl 6 Date							<section class="prog__container"><pre><code>method new-from-daycount($daycount,:&amp;formatter --&gt; Date:D)\n</code></pre><p>Creates a new Date object given $daycount which is the number of days from epoch Nov.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_new-from-daycount
new-from-daycount	R	Date.new-from-daycount										
Date.clone	A			Perl 6 Date							<section class="prog__container"><pre><code>method clone(:$year, :$month, :$day)\n</code></pre><p>Creates a new Date object based on the invocant, but with the given arguments overriding the values from the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_clone
Date.today	A			Perl 6 Date							<section class="prog__container"><pre><code>method today(:&amp;formatter --&gt; Date:D)\n</code></pre><p>Returns a Date object for the current day.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_today
today	R	Date.today										
Date.later	A			Perl 6 Date							<section class="prog__container"><pre><code>method later(Date:D: *%unit)\n</code></pre><p>Returns a Date object based on the current one, but with a date delta applied.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_later
later	D								*[[Date.later]], returns a Date object based on the current one, but with a date delta applied.\n*[[DateTime.later]], returns a DateTime object based on the current one, but with a time delta applied.			
Date.earlier	A			Perl 6 Date							<section class="prog__container"><pre><code>method earlier(Date:D: *%unit)\n</code></pre><p>Returns a Date object based on the current one, but with a date delta towards the past applied.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_earlier
earlier	D								*[[Date.earlier]], returns a Date object based on the current one, but with a date delta towards the past applied.\n*[[DateTime.earlier]], returns a DateTime object based on the current one, but with a time delta towards the past applied.			
Date.truncated-to	A			Perl 6 Date							<section class="prog__container"><pre><code>method truncated-to(Date:D: Cool $unit)\n</code></pre><p>Returns a Date truncated to the first day of its year, month or week.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_truncated-to
truncated-to	D								*[[Date.truncated-to]], returns a Date truncated to the first day of its year, month or week.\n*[[DateTime.truncated-to]], returns a copy of the invocant, with everything smaller than the specified unit truncated to the smallest possible value.			
Date.succ	A			Perl 6 Date							<section class="prog__container"><pre><code>method succ(Date:D: --&gt; Date:D)\n</code></pre><p>Returns a Date of the following day.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_succ
Date.pred	A			Perl 6 Date							<section class="prog__container"><pre><code>method pred(Date:D: --&gt; Date:D)\n</code></pre><p>Returns a Date of the previous day.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_pred
Date.Str	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method Str(Date:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation of the invocant, as specified by the the formatter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_Str
Date.gist	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method gist(Date:D: --&gt; Str:D)\n</code></pre><p>Returns the date in YYYY-MM-DD format (ISO 8601)&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_gist
Date.Date	A			Perl 6 Date							<section class="prog__container"><pre><code>method Date(--&gt; Date)\n</code></pre><p>Returns the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_Date
Date.DateTime	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method DateTime(Date:U --&gt; DateTime:U)\nmulti method DateTime(Date:D --&gt; DateTime:D)\n</code></pre><p>Converts the invocant to DateTime&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#method_DateTime
Date.sleep	A			Perl 6 Date							<section class="prog__container"><pre><code>sub sleep($seconds = Inf --&gt; Nil)\n</code></pre><p>Attempt to sleep for the given number of $seconds.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#sub_sleep
sleep	R	Date.sleep										
Date.sleep-timer	A			Perl 6 Date							<section class="prog__container"><pre><code>sub sleep-timer(Real $seconds = Inf --&gt; Duration)\n</code></pre><p>This function is just like sleep, but returns the amount of time remaining to sleep as a Duration (which will be 0 if the call was not interrupted).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#sub_sleep-timer
sleep-timer	R	Date.sleep-timer										
Date.sleep-until	A			Perl 6 Date							<section class="prog__container"><pre><code>sub sleep-until(Instant $until --&gt; Bool)\n</code></pre><p>Works just like sleep but checks the current time and goes back to sleep if accidentally woken up early, to guarantee waiting until the specified time.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#sub_sleep-until
sleep-until	R	Date.sleep-until										
Date.infix:&lt;-&gt;	A			Perl 6 Date							<section class="prog__container"><pre><code>sub infix:&lt;-&gt; (Date:D, Int:D --&gt; Date:D)\nsub infix:&lt;-&gt; (Date:D, Date:D --&gt; Int:D)\n</code></pre><p>Takes a date to subtract from and either an Int, representing the number of days to subtract, or another Date object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#sub_infix%3A%3C-%3E
infix:&lt;-&gt;	D								*[[Date.infix:&lt;-&gt;]], takes a date to subtract from and either an Int, representing the number of days to subtract, or another Date object.\n*[[DateTime.infix:&lt;-&gt;]], takes a DateTime to subtract from and either a Duration or another DateTime object.			
Date.infix:&lt;+&gt;	A			Perl 6 Date							<section class="prog__container"><pre><code>sub infix:&lt;+&gt; (Date:D, Int:D --&gt; Date:D)\nsub infix:&lt;+&gt; (Int:D, Date:D --&gt; Date:D)\n</code></pre><p>Takes an Int and adds that many days to the given Date object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#sub_infix%3A%3C%2B%3E
infix:&lt;+&gt;	D								*[[Date.infix:&lt;+&gt;]], takes an Int and adds that many days to the given Date object.\n*[[DateTime.infix:&lt;+&gt;]], takes a DateTime and increases it by the given Duration, preserving the timezone.			
Date.year	A			Perl 6 Date							<section class="prog__container"><pre><code>method year(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the year of the date.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_year
year	D								*[[Date.year]], returns the year of the date.\n*[[DateTime.year]], returns the year of the date.\n*[[Dateish.year]], returns the year of the date.			
Date.month	A			Perl 6 Date							<section class="prog__container"><pre><code>method month(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the month of the date (1..12).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_month
month	D								*[[Date.month]], returns the month of the date (1..12).\n*[[DateTime.month]], returns the month of the date (1..12).\n*[[Dateish.month]], returns the month of the date (1..12).			
Date.day	A			Perl 6 Date							<section class="prog__container"><pre><code>method day(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the month of the date (1..31).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_day
day	D								*[[Date.day]], returns the day of the month of the date (1..31).\n*[[DateTime.day]], returns the day of the month of the date (1..31).\n*[[Dateish.day]], returns the day of the month of the date (1..31).			
Date.formatter	A			Perl 6 Date							<section class="prog__container"><pre><code>method formatter(Dateish:D:)\n</code></pre><p>Returns the formatting function which is used for conversion to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_formatter
formatter	D								*[[Date.formatter]], returns the formatting function which is used for conversion to Str.\n*[[DateTime.formatter]], returns the formatting function which is used for conversion to Str.\n*[[Dateish.formatter]], returns the formatting function which is used for conversion to Str.			
Date.is-leap-year	A			Perl 6 Date							<section class="prog__container"><pre><code>method is-leap-year(--&gt; Bool:D)\n</code></pre><p>Returns True if the year of the Dateish object is a leap year.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_is-leap-year
is-leap-year	D								*[[Date.is-leap-year]], returns True if the year of the Dateish object is a leap year.\n*[[DateTime.is-leap-year]], returns True if the year of the Dateish object is a leap year.\n*[[Dateish.is-leap-year]], returns True if the year of the Dateish object is a leap year.			
Date.day-of-month	A			Perl 6 Date							<section class="prog__container"><pre><code>method day-of-month(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the month of the date (1..31).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_day-of-month
day-of-month	D								*[[Date.day-of-month]], returns the day of the month of the date (1..31).\n*[[DateTime.day-of-month]], returns the day of the month of the date (1..31).\n*[[Dateish.day-of-month]], returns the day of the month of the date (1..31).			
Date.day-of-week	A			Perl 6 Date							<section class="prog__container"><pre><code>method day-of-week(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the week, where 1 is Monday, 2 is Tuesday and Sunday is 7.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_day-of-week
day-of-week	D								*[[Date.day-of-week]], returns the day of the week, where 1 is Monday, 2 is Tuesday and Sunday is 7.\n*[[DateTime.day-of-week]], returns the day of the week, where 1 is Monday, 2 is Tuesday and Sunday is 7.\n*[[Dateish.day-of-week]], returns the day of the week, where 1 is Monday, 2 is Tuesday and Sunday is 7.			
Date.day-of-year	A			Perl 6 Date							<section class="prog__container"><pre><code>method day-of-year(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the year (1..366).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_day-of-year
day-of-year	D								*[[Date.day-of-year]], returns the day of the year (1..366).\n*[[DateTime.day-of-year]], returns the day of the year (1..366).\n*[[Dateish.day-of-year]], returns the day of the year (1..366).			
Date.days-in-month	A			Perl 6 Date							<section class="prog__container"><pre><code>method days-in-month(Dateish:D: --&gt; Int:D)\n</code></pre><p>Returns the number of days in the month represented by the Dateish object:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_days-in-month
days-in-month	D								*[[Date.days-in-month]], returns the number of days in the month represented by the Dateish object:\n*[[DateTime.days-in-month]], returns the number of days in the month represented by the Dateish object:\n*[[Dateish.days-in-month]], returns the number of days in the month represented by the Dateish object:			
Date.week	A			Perl 6 Date							<section class="prog__container"><pre><code>method week()\n</code></pre><p>Returns a list of two integers: the year, and the week number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_week
week	D								*[[Date.week]], returns a list of two integers: the year, and the week number.\n*[[DateTime.week]], returns a list of two integers: the year, and the week number.\n*[[Dateish.week]], returns a list of two integers: the year, and the week number.			
Date.week-number	A			Perl 6 Date							<section class="prog__container"><pre><code>method week-number(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the week number (1..53) of the date specified by the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_week-number
week-number	D								*[[Date.week-number]], returns the week number (1..53) of the date specified by the invocant.\n*[[DateTime.week-number]], returns the week number (1..53) of the date specified by the invocant.\n*[[Dateish.week-number]], returns the week number (1..53) of the date specified by the invocant.			
Date.week-year	A			Perl 6 Date							<section class="prog__container"><pre><code>method week-year(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the week year of the date specified by the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_week-year
week-year	D								*[[Date.week-year]], returns the week year of the date specified by the invocant.\n*[[DateTime.week-year]], returns the week year of the date specified by the invocant.\n*[[Dateish.week-year]], returns the week year of the date specified by the invocant.			
Date.weekday-of-month	A			Perl 6 Date							<section class="prog__container"><pre><code>method weekday-of-month(Date:D: --&gt; Int:D)\n</code></pre><p>Returns a number (1..5) indicating the number of times a particular day-of-week has occurred so far during that month, the day itself included.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_weekday-of-month
weekday-of-month	D								*[[Date.weekday-of-month]], returns a number (1..5) indicating the number of times a particular day-of-week has occurred so far during that month, the day itself included.\n*[[DateTime.weekday-of-month]], returns a number (1..5) indicating the number of times a particular day-of-week has occurred so far during that month, the day itself included.\n*[[Dateish.weekday-of-month]], returns a number (1..5) indicating the number of times a particular day-of-week has occurred so far during that month, the day itself included.			
Date.yyyy-mm-dd	A			Perl 6 Date							<section class="prog__container"><pre><code>method yyyy-mm-dd(Date:D: --&gt; Str:D)\n</code></pre><p>Returns the date in YYYY-MM-DD format (ISO 8601)&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_yyyy-mm-dd
yyyy-mm-dd	D								*[[Date.yyyy-mm-dd]], returns the date in YYYY-MM-DD format (ISO 8601)\n*[[DateTime.yyyy-mm-dd]], returns the date in YYYY-MM-DD format (ISO 8601)\n*[[Dateish.yyyy-mm-dd]], returns the date in YYYY-MM-DD format (ISO 8601)			
Date.daycount	A			Perl 6 Date							<section class="prog__container"><pre><code>method daycount(Dateish:D: --&gt; Int:D)\n</code></pre><p>Returns the number of days from the epoch Nov.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_daycount
daycount	D								*[[Date.daycount]], returns the number of days from the epoch Nov.\n*[[DateTime.daycount]], returns the number of days from the epoch Nov.\n*[[Dateish.daycount]], returns the number of days from the epoch Nov.			
Date.IO	A			Perl 6 Date							<section class="prog__container"><pre><code>method IO(Dateish:D: --&gt; IO::Path:D)\n</code></pre><p>Returns an IO::Path object representing the stringified value of the Dateish object:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Dateish%29_method_IO
Date.ACCEPTS	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_ACCEPTS
Date.any	A			Perl 6 Date							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_any
Date.all	A			Perl 6 Date							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_all
Date.one	A			Perl 6 Date							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_one
Date.none	A			Perl 6 Date							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_none
Date.list	A			Perl 6 Date							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_list
Date.push	A			Perl 6 Date							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_push
Date.reverse	A			Perl 6 Date							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_routine_reverse
Date.sort	A			Perl 6 Date							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_sort
Date.map	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_map
Date.deepmap	A			Perl 6 Date							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_deepmap
Date.duckmap	A			Perl 6 Date							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_duckmap
Date.flat	A			Perl 6 Date							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_flat
Date.eager	A			Perl 6 Date							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_eager
Date.elems	A			Perl 6 Date							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_elems
Date.end	A			Perl 6 Date							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_end
Date.pairup	A			Perl 6 Date							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_method_pairup
Date.exit	A			Perl 6 Date							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_sub_exit
Date.item	A			Perl 6 Date							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Any%29_sub_item
Date.defined	A			Perl 6 Date							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_routine_defined
Date.isa	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_routine_isa
Date.does	A			Perl 6 Date							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_routine_does
Date.Bool	A			Perl 6 Date							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_routine_Bool
Date.Str	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_Str
Date.gist	A			Perl 6 Date							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_routine_gist
Date.perl	A			Perl 6 Date							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_routine_perl
Date.item	A			Perl 6 Date							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_item
Date.clone	A			Perl 6 Date							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_clone
Date.new	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_new
Date.bless	A			Perl 6 Date							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_bless
Date.CREATE	A			Perl 6 Date							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_CREATE
Date.print	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_print
Date.put	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_put
Date.say	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_say
Date.ACCEPTS	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_ACCEPTS
Date.WHICH	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_WHICH
Date.WHERE	A			Perl 6 Date							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_WHERE
Date.WHY	A			Perl 6 Date							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_WHY
Date.export	A			Perl 6 Date							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_trait_is_export
Date.return	A			Perl 6 Date							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_return
Date.return-rw	A			Perl 6 Date							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_return-rw
Date.emit	A			Perl 6 Date							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_emit
Date.take	A			Perl 6 Date							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_take
Date.take	A			Perl 6 Date							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_routine_take
Date.take-rw	A			Perl 6 Date							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_routine_take-rw
Date.so	A			Perl 6 Date							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_so
Date.not	A			Perl 6 Date							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Date.html#%28Mu%29_method_not
DateTime.new	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method new(Int :$year!, Int :$month = 1, Int :$day = 1,\n                 Int :$hour = 0, Int :$minute = 0, :$second = 0,\n                 Int :$timezone = 0, :&amp;formatter)\nmulti method new(Date :$date!,\n                 Int :$hour = 0, Int :$minute = 0, :$second = 0,\n                 Int :$timezone = 0, :&amp;formatter)\nmulti method new(Int() $year, Int() $month, Int() $day,\n                 Int() $hour, Int $minute, $second,\n                 Int() :$timezone = 0, :&amp;formatter)\nmulti method new(Instant:D $i,  :$timezone=0, :&amp;formatter)\nmulti method new(Int:D $posix,  :$timezone=0, :&amp;formatter)\nmulti method new(Str:D $format, :$timezone=0, :&amp;formatter)\n</code></pre><p>Creates a new DateTime object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_new
DateTime.now	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method now(:$timezone=$*TZ, :&amp;formatter --&gt; DateTime:D)\n</code></pre><p>Creates a new DateTime object from the current system time, optionally with a different timezone than the default attached.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_now
now	R	DateTime.now										
DateTime.clone	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method clone(:$year, :$month, :$day, :$hour, :$minute, :$second, :$timezone, :&amp;formatter)\n</code></pre><p>Creates a new DateTime object based on the invocant, but with the given arguments overriding the values from the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_clone
DateTime.hh-mm-ss	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method hh-mm-ss(DateTime:D: --&gt; Str:D)\n</code></pre><p>Returns the time represented by the object as a string in 24-hour HH:MM:SS format:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_hh-mm-ss
hh-mm-ss	R	DateTime.hh-mm-ss										
DateTime.hour	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method hour(DateTime:D: --&gt; Int:D)\n</code></pre><p>Returns the hour component.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_hour
hour	R	DateTime.hour										
DateTime.minute	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method minute(DateTime:D: --&gt; Int:D)\n</code></pre><p>Returns the minute component.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_minute
minute	R	DateTime.minute										
DateTime.second	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method second(DateTime:D:)\n</code></pre><p>Returns the second component, including potentially fractional seconds.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_second
second	R	DateTime.second										
DateTime.whole-second	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method whole-second(DateTime:D:)\n</code></pre><p>Returns the second component, rounded down to an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_whole-second
whole-second	R	DateTime.whole-second										
DateTime.timezone	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method timezone(DateTime:D: --&gt; Int:D)\n</code></pre><p>Returns the time zone in seconds as an offset from UTC.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_timezone
timezone	R	DateTime.timezone										
DateTime.offset	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method offset(DateTime:D: --&gt; Int:D)\n</code></pre><p>Returns the time zone in seconds as an offset from UTC.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_offset
offset	R	DateTime.offset										
DateTime.offset-in-minutes	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method offset-in-minutes(DateTime:D: --&gt; Real:D)\n</code></pre><p>Returns the time zone in minutes as an offset from UTC.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_offset-in-minutes
offset-in-minutes	R	DateTime.offset-in-minutes										
DateTime.offset-in-hours	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method offset-in-hours(DateTime:D: --&gt; Real:D)\n</code></pre><p>Returns the time zone in hours as an offset from UTC.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_offset-in-hours
offset-in-hours	R	DateTime.offset-in-hours										
DateTime.Str	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method Str(DateTime:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation of the invocant, as done by the formatter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_Str
DateTime.Instant	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method Instant(DateTime:D: --&gt; Instant:D)\n</code></pre><p>Returns an Instant object based on the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_Instant
DateTime.posix	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method posix(DateTime:D: $ignore-timezone = False --&gt; Int:D)\n</code></pre><p>Returns the date and time as a POSIX/UNIX timestamp (seconds since the Epoch, 1st January 1970 UTC).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_posix
posix	R	DateTime.posix										
DateTime.later	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method later(DateTime:D: *%unit)\n</code></pre><p>Returns a DateTime object based on the current one, but with a time delta applied.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_later
DateTime.earlier	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method earlier(DateTime:D: *%unit)\n</code></pre><p>Returns a DateTime object based on the current one, but with a time delta towards the past applied.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_earlier
DateTime.truncated-to	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method truncated-to(DateTime:D: Cool $unit)\n</code></pre><p>Returns a copy of the invocant, with everything smaller than the specified unit truncated to the smallest possible value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_truncated-to
DateTime.Date	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method Date(DateTime:U --&gt; Date:U)\nmulti method Date(DateTime:D --&gt; Date:D)\n</code></pre><p>Converts the invocant to Date.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_Date
DateTime.DateTime	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method DateTime(--&gt; DateTime)\n</code></pre><p>Returns the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_DateTime
DateTime.utc	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method utc(DateTime:D: --&gt; DateTime:D)\n</code></pre><p>Returns a DateTime object for the same time, but in time zone UTC.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_utc
utc	R	DateTime.utc										
DateTime.in-timezone	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method in-timezone(DateTime:D: $timezone = 0 --&gt; DateTime:D)\n</code></pre><p>Returns a DateTime object for the same time, but in the specified time zone.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_in-timezone
in-timezone	R	DateTime.in-timezone										
DateTime.local	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method local(DateTime:D: --&gt; DateTime:D)\n</code></pre><p>Returns a DateTime object for the same time, but in the local time zone ($*TZ).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#method_local
local	R	DateTime.local										
DateTime.infix:&lt;-&gt;	A			Perl 6 DateTime							<section class="prog__container"><pre><code>sub infix:&lt;-&gt; (DateTime:D, Duration:D --&gt; DateTime:D)\nsub infix:&lt;-&gt; (DateTime:D, DateTime:D --&gt; Duration:D)\n</code></pre><p>Takes a DateTime to subtract from and either a Duration or another DateTime object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#sub_infix%3A%3C-%3E
DateTime.infix:&lt;+&gt;	A			Perl 6 DateTime							<section class="prog__container"><pre><code>sub infix:&lt;+&gt; (DateTime:D, Duration:D --&gt; DateTime:D)\nsub infix:&lt;+&gt; (Duration:D, DateTime:D --&gt; DateTime:D)\n</code></pre><p>Takes a DateTime and increases it by the given Duration, preserving the timezone.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#sub_infix%3A%3C%2B%3E
DateTime.year	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method year(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the year of the date.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_year
DateTime.month	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method month(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the month of the date (1..12).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_month
DateTime.day	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method day(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the month of the date (1..31).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_day
DateTime.formatter	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method formatter(Dateish:D:)\n</code></pre><p>Returns the formatting function which is used for conversion to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_formatter
DateTime.is-leap-year	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method is-leap-year(--&gt; Bool:D)\n</code></pre><p>Returns True if the year of the Dateish object is a leap year.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_is-leap-year
DateTime.day-of-month	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method day-of-month(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the month of the date (1..31).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_day-of-month
DateTime.day-of-week	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method day-of-week(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the week, where 1 is Monday, 2 is Tuesday and Sunday is 7.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_day-of-week
DateTime.day-of-year	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method day-of-year(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the year (1..366).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_day-of-year
DateTime.days-in-month	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method days-in-month(Dateish:D: --&gt; Int:D)\n</code></pre><p>Returns the number of days in the month represented by the Dateish object:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_days-in-month
DateTime.week	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method week()\n</code></pre><p>Returns a list of two integers: the year, and the week number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_week
DateTime.week-number	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method week-number(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the week number (1..53) of the date specified by the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_week-number
DateTime.week-year	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method week-year(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the week year of the date specified by the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_week-year
DateTime.weekday-of-month	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method weekday-of-month(Date:D: --&gt; Int:D)\n</code></pre><p>Returns a number (1..5) indicating the number of times a particular day-of-week has occurred so far during that month, the day itself included.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_weekday-of-month
DateTime.yyyy-mm-dd	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method yyyy-mm-dd(Date:D: --&gt; Str:D)\n</code></pre><p>Returns the date in YYYY-MM-DD format (ISO 8601)&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_yyyy-mm-dd
DateTime.daycount	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method daycount(Dateish:D: --&gt; Int:D)\n</code></pre><p>Returns the number of days from the epoch Nov.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_daycount
DateTime.IO	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method IO(Dateish:D: --&gt; IO::Path:D)\n</code></pre><p>Returns an IO::Path object representing the stringified value of the Dateish object:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Dateish%29_method_IO
DateTime.ACCEPTS	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_ACCEPTS
DateTime.any	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_any
DateTime.all	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_all
DateTime.one	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_one
DateTime.none	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_none
DateTime.list	A			Perl 6 DateTime							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_list
DateTime.push	A			Perl 6 DateTime							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_push
DateTime.reverse	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_routine_reverse
DateTime.sort	A			Perl 6 DateTime							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_sort
DateTime.map	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_map
DateTime.deepmap	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_deepmap
DateTime.duckmap	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_duckmap
DateTime.flat	A			Perl 6 DateTime							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_flat
DateTime.eager	A			Perl 6 DateTime							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_eager
DateTime.elems	A			Perl 6 DateTime							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_elems
DateTime.end	A			Perl 6 DateTime							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_end
DateTime.pairup	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_method_pairup
DateTime.exit	A			Perl 6 DateTime							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_sub_exit
DateTime.item	A			Perl 6 DateTime							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Any%29_sub_item
DateTime.defined	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_routine_defined
DateTime.isa	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_routine_isa
DateTime.does	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_routine_does
DateTime.Bool	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_routine_Bool
DateTime.Str	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_Str
DateTime.gist	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_routine_gist
DateTime.perl	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_routine_perl
DateTime.item	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_item
DateTime.clone	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_clone
DateTime.new	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_new
DateTime.bless	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_bless
DateTime.CREATE	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_CREATE
DateTime.print	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_print
DateTime.put	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_put
DateTime.say	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_say
DateTime.ACCEPTS	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_ACCEPTS
DateTime.WHICH	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_WHICH
DateTime.WHERE	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_WHERE
DateTime.WHY	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_WHY
DateTime.export	A			Perl 6 DateTime							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_trait_is_export
DateTime.return	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_return
DateTime.return-rw	A			Perl 6 DateTime							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_return-rw
DateTime.emit	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_emit
DateTime.take	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_take
DateTime.take	A			Perl 6 DateTime							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_routine_take
DateTime.take-rw	A			Perl 6 DateTime							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_routine_take-rw
DateTime.so	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_so
DateTime.not	A			Perl 6 DateTime							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/DateTime.html#%28Mu%29_method_not
Dateish.year	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method year(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the year of the date.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_year
Dateish.month	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method month(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the month of the date (1..12).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_month
Dateish.day	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method day(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the month of the date (1..31).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_day
Dateish.formatter	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method formatter(Dateish:D:)\n</code></pre><p>Returns the formatting function which is used for conversion to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_formatter
Dateish.is-leap-year	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method is-leap-year(--&gt; Bool:D)\n</code></pre><p>Returns True if the year of the Dateish object is a leap year.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_is-leap-year
Dateish.day-of-month	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method day-of-month(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the month of the date (1..31).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_day-of-month
Dateish.day-of-week	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method day-of-week(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the week, where 1 is Monday, 2 is Tuesday and Sunday is 7.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_day-of-week
Dateish.day-of-year	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method day-of-year(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the day of the year (1..366).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_day-of-year
Dateish.days-in-month	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method days-in-month(Dateish:D: --&gt; Int:D)\n</code></pre><p>Returns the number of days in the month represented by the Dateish object:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_days-in-month
Dateish.week	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method week()\n</code></pre><p>Returns a list of two integers: the year, and the week number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_week
Dateish.week-number	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method week-number(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the week number (1..53) of the date specified by the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_week-number
Dateish.week-year	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method week-year(Date:D: --&gt; Int:D)\n</code></pre><p>Returns the week year of the date specified by the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_week-year
Dateish.weekday-of-month	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method weekday-of-month(Date:D: --&gt; Int:D)\n</code></pre><p>Returns a number (1..5) indicating the number of times a particular day-of-week has occurred so far during that month, the day itself included.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_weekday-of-month
Dateish.yyyy-mm-dd	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method yyyy-mm-dd(Date:D: --&gt; Str:D)\n</code></pre><p>Returns the date in YYYY-MM-DD format (ISO 8601)&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_yyyy-mm-dd
Dateish.daycount	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method daycount(Dateish:D: --&gt; Int:D)\n</code></pre><p>Returns the number of days from the epoch Nov.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_daycount
Dateish.IO	A			Perl 6 Dateish							<section class="prog__container"><pre><code>method IO(Dateish:D: --&gt; IO::Path:D)\n</code></pre><p>Returns an IO::Path object representing the stringified value of the Dateish object:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Dateish.html#method_IO
Duration.Rat	A			Perl 6 Duration							<section class="prog__container"><pre><code>method Rat(Real:D: Real $epsilon = 1e-6)\n</code></pre><p>Converts the number to a Rat with the precision $epsilon.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Real%29_method_Rat
Duration.rand	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub term:&lt;rand&gt; (--&gt; Num:D)\nmethod rand(Real:D: --&gt; Real:D)\n</code></pre><p>Returns a pseudo-random number between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Real%29_routine_rand
Duration.sign	A			Perl 6 Duration							<section class="prog__container"><pre><code>method sign(Real:D:)\n</code></pre><p>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Real%29_method_sign
Duration.round	A			Perl 6 Duration							<section class="prog__container"><pre><code>method round(Real:D: $scale = 1)\n</code></pre><p>Rounds the number to scale $scale.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Real%29_method_round
Duration.floor	A			Perl 6 Duration							<section class="prog__container"><pre><code>method floor(Real:D --&gt; Int:D)\n</code></pre><p>Return the largest integer not greater than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Real%29_method_floor
Duration.ceiling	A			Perl 6 Duration							<section class="prog__container"><pre><code>method ceiling(Real:D --&gt; Int:D)\n</code></pre><p>Returns the smallest integer not less than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Real%29_method_ceiling
Duration.truncate	A			Perl 6 Duration							<section class="prog__container"><pre><code>method truncate(Real:D --&gt; Int:D)\n</code></pre><p>Rounds the number towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Real%29_method_truncate
Duration.base	A			Perl 6 Duration							<section class="prog__container"><pre><code>method base(Real:D: Int:D $base where 2..36, $digits? --&gt; Str:D)\n</code></pre><p>Converts the number to a string, using $base as base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Real%29_method_base
base	D								*[[Duration.base]], converts the number to a string, using $base as base.\n*[[FatRat.base]], converts the number to a string, using $base as base.\n*[[Instant.base]], converts the number to a string, using $base as base.\n*[[Int.base]], converts the number to a string, using $base as base.\n*[[Num.base]], converts the number to a string, using $base as base.\n*[[Rat.base]], converts the number to a string, using $base as base.\n*[[Rational.base]], converts the number to a string, using $base as base.\n*[[Real.base]], converts the number to a string, using $base as base.			
Duration.Real	A			Perl 6 Duration							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_Real
Duration.Int	A			Perl 6 Duration							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_Int
Duration.Rat	A			Perl 6 Duration							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_Rat
Duration.Num	A			Perl 6 Duration							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_Num
Duration.narrow	A			Perl 6 Duration							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_narrow
Duration.ACCEPTS	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_ACCEPTS
Duration.log	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_routine_log
Duration.log10	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_routine_log10
Duration.exp	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_routine_exp
Duration.roots	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_roots
Duration.abs	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_routine_abs
Duration.sqrt	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_routine_sqrt
Duration.conj	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_conj
Duration.Bool	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_Bool
Duration.succ	A			Perl 6 Duration							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_succ
Duration.pred	A			Perl 6 Duration							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Numeric%29_method_pred
Duration.abs	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_abs
Duration.conj	A			Perl 6 Duration							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_conj
Duration.sqrt	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_sqrt
Duration.sign	A			Perl 6 Duration							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_sign
Duration.rand	A			Perl 6 Duration							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_rand
Duration.sin	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_sin
Duration.asin	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_asin
Duration.cos	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_cos
Duration.acos	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_acos
Duration.tan	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_tan
Duration.atan	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_atan
Duration.atan2	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_atan2
Duration.sec	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_sec
Duration.asec	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_asec
Duration.cosec	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_cosec
Duration.acosec	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_acosec
Duration.cotan	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_cotan
Duration.acotan	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_acotan
Duration.sinh	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_sinh
Duration.asinh	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_asinh
Duration.cosh	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_cosh
Duration.acosh	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_acosh
Duration.tanh	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_tanh
Duration.atanh	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_atanh
Duration.sech	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_sech
Duration.asech	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_asech
Duration.cosech	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_cosech
Duration.acosech	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_acosech
Duration.cotanh	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_cotanh
Duration.acotanh	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_acotanh
Duration.cis	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_cis
Duration.log	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_log
Duration.log10	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_log10
Duration.exp	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_exp
Duration.unpolar	A			Perl 6 Duration							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_unpolar
Duration.round	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_round
Duration.floor	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_floor
Duration.ceiling	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_ceiling
Duration.truncate	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_truncate
Duration.ord	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_ord
Duration.chr	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_chr
Duration.chars	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_chars
Duration.codes	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_codes
Duration.flip	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_flip
Duration.trim	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_trim
Duration.trim-leading	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_trim-leading
Duration.trim-trailing	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_trim-trailing
Duration.lc	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_lc
Duration.uc	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_uc
Duration.fc	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_fc
Duration.tc	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_tc
Duration.tclc	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_tclc
Duration.wordcase	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_wordcase
Duration.samecase	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_samecase
Duration.uniprop	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_uniprop
Duration.uniprops	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_uniprops
Duration.uniname	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_uniname
Duration.uninames	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_uninames
Duration.unimatch	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_unimatch
Duration.chop	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_chop
Duration.chomp	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_chomp
Duration.substr	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_substr
Duration.ords	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_ords
Duration.chrs	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_chrs
Duration.split	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_split
Duration.lines	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_lines
Duration.words	A			Perl 6 Duration							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_words
Duration.comb	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_comb
Duration.contains	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_contains
Duration.index	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_index
Duration.rindex	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_rindex
Duration.match	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_match
Duration.fmt	A			Perl 6 Duration							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_fmt
Duration.roots	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_roots
Duration.IO	A			Perl 6 Duration							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_method_IO
Duration.EVAL	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_EVAL
Duration.EVALFILE	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Cool%29_routine_EVALFILE
Duration.ACCEPTS	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_ACCEPTS
Duration.any	A			Perl 6 Duration							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_any
Duration.all	A			Perl 6 Duration							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_all
Duration.one	A			Perl 6 Duration							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_one
Duration.none	A			Perl 6 Duration							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_none
Duration.list	A			Perl 6 Duration							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_list
Duration.push	A			Perl 6 Duration							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_push
Duration.reverse	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_routine_reverse
Duration.sort	A			Perl 6 Duration							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_sort
Duration.map	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_map
Duration.deepmap	A			Perl 6 Duration							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_deepmap
Duration.duckmap	A			Perl 6 Duration							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_duckmap
Duration.flat	A			Perl 6 Duration							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_flat
Duration.eager	A			Perl 6 Duration							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_eager
Duration.elems	A			Perl 6 Duration							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_elems
Duration.end	A			Perl 6 Duration							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_end
Duration.pairup	A			Perl 6 Duration							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_method_pairup
Duration.exit	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_sub_exit
Duration.item	A			Perl 6 Duration							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Any%29_sub_item
Duration.defined	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_routine_defined
Duration.isa	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_routine_isa
Duration.does	A			Perl 6 Duration							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_routine_does
Duration.Bool	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_routine_Bool
Duration.Str	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_Str
Duration.gist	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_routine_gist
Duration.perl	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_routine_perl
Duration.item	A			Perl 6 Duration							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_item
Duration.clone	A			Perl 6 Duration							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_clone
Duration.new	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_new
Duration.bless	A			Perl 6 Duration							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_bless
Duration.CREATE	A			Perl 6 Duration							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_CREATE
Duration.print	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_print
Duration.put	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_put
Duration.say	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_say
Duration.ACCEPTS	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_ACCEPTS
Duration.WHICH	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_WHICH
Duration.WHERE	A			Perl 6 Duration							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_WHERE
Duration.WHY	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_WHY
Duration.export	A			Perl 6 Duration							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_trait_is_export
Duration.return	A			Perl 6 Duration							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_return
Duration.return-rw	A			Perl 6 Duration							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_return-rw
Duration.emit	A			Perl 6 Duration							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_emit
Duration.take	A			Perl 6 Duration							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_take
Duration.take	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_routine_take
Duration.take-rw	A			Perl 6 Duration							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_routine_take-rw
Duration.so	A			Perl 6 Duration							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_so
Duration.not	A			Perl 6 Duration							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Duration.html#%28Mu%29_method_not
Exception.message	A			Perl 6 Exception							<section class="prog__container"><pre><code>method message(Exception:D: --&gt; Str:D)\n</code></pre><p>This is a stub that must be overwritten by subclasses, and should return the exception message.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#method_message
message	R	Exception.message										
Exception.backtrace	A			Perl 6 Exception							<section class="prog__container"><pre><code>method backtrace(Exception:D: --&gt; Backtrace:D)\n</code></pre><p>Returns the backtrace associated with the exception.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#method_backtrace
backtrace	R	Exception.backtrace										
Exception.throw	A			Perl 6 Exception							<section class="prog__container"><pre><code>method throw(Exception:D:)\n</code></pre><p>Throws the exception.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#method_throw
throw	R	Exception.throw										
Exception.resume	A			Perl 6 Exception							<section class="prog__container"><pre><code>method resume(Exception:D:)\n</code></pre><p>Resumes control flow where .throw left it when handled in a CATCH block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#method_resume
resume	R	Exception.resume										
Exception.rethrow	A			Perl 6 Exception							<section class="prog__container"><pre><code>method rethrow(Exception:D:)\n</code></pre><p>Rethrows an exception that has already been thrown at least once.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#method_rethrow
rethrow	R	Exception.rethrow										
Exception.fail	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi sub    fail(*@text)\nmulti sub    fail(Exception $e)\nmulti method fail(Exception:D $e:)\n</code></pre><p>Exits the calling Routine and returns a Failure object wrapping the exception $e - or, for the *@text form, an X::AdHoc exception constructed from the concatenation of @text.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#method_fail
Exception.gist	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method gist(Exception:D:)\n</code></pre><p>Returns whatever the exception printer should produce for this exception.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#method_gist
Exception.die	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi sub die(*@message)\nmulti sub die(Exception:D $e)\nmethod    die(Exception:D $e)\n</code></pre><p>Throws a fatal Exception.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#sub_die
die	R	Exception.die										
Exception.warn	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi sub warn(*@message)\n</code></pre><p>Throws a resumable warning exception, which is considered a control exception, and hence is invisible to most normal exception handlers.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#sub_warn
warn	R	Exception.warn										
Exception.ACCEPTS	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_ACCEPTS
Exception.any	A			Perl 6 Exception							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_any
Exception.all	A			Perl 6 Exception							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_all
Exception.one	A			Perl 6 Exception							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_one
Exception.none	A			Perl 6 Exception							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_none
Exception.list	A			Perl 6 Exception							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_list
Exception.push	A			Perl 6 Exception							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_push
Exception.reverse	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_routine_reverse
Exception.sort	A			Perl 6 Exception							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_sort
Exception.map	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_map
Exception.deepmap	A			Perl 6 Exception							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_deepmap
Exception.duckmap	A			Perl 6 Exception							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_duckmap
Exception.flat	A			Perl 6 Exception							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_flat
Exception.eager	A			Perl 6 Exception							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_eager
Exception.elems	A			Perl 6 Exception							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_elems
Exception.end	A			Perl 6 Exception							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_end
Exception.pairup	A			Perl 6 Exception							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_method_pairup
Exception.exit	A			Perl 6 Exception							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_sub_exit
Exception.item	A			Perl 6 Exception							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Any%29_sub_item
Exception.defined	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_routine_defined
Exception.isa	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_routine_isa
Exception.does	A			Perl 6 Exception							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_routine_does
Exception.Bool	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_routine_Bool
Exception.Str	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_Str
Exception.gist	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_routine_gist
Exception.perl	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_routine_perl
Exception.item	A			Perl 6 Exception							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_item
Exception.clone	A			Perl 6 Exception							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_clone
Exception.new	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_new
Exception.bless	A			Perl 6 Exception							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_bless
Exception.CREATE	A			Perl 6 Exception							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_CREATE
Exception.print	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_print
Exception.put	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_put
Exception.say	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_say
Exception.ACCEPTS	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_ACCEPTS
Exception.WHICH	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_WHICH
Exception.WHERE	A			Perl 6 Exception							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_WHERE
Exception.WHY	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_WHY
Exception.export	A			Perl 6 Exception							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_trait_is_export
Exception.return	A			Perl 6 Exception							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_return
Exception.return-rw	A			Perl 6 Exception							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_return-rw
Exception.emit	A			Perl 6 Exception							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_emit
Exception.take	A			Perl 6 Exception							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_take
Exception.take	A			Perl 6 Exception							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_routine_take
Exception.take-rw	A			Perl 6 Exception							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_routine_take-rw
Exception.so	A			Perl 6 Exception							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_so
Exception.not	A			Perl 6 Exception							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Exception.html#%28Mu%29_method_not
Failure.handled	A			Perl 6 Failure							<section class="prog__container"><pre><code>method handled(Failure:D: --&gt; Bool:D)\n</code></pre><p>Returns True for handled failures, False otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#method_handled
handled	R	Failure.handled										
Failure.exception	A			Perl 6 Failure							<section class="prog__container"><pre><code>method exception(Failure:D: --&gt; Exception)\n</code></pre><p>Returns the Exception object that the failure wraps.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#method_exception
exception	R	Failure.exception										
Failure.Bool	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method Bool(Failure:D: --&gt; Bool:D)\n</code></pre><p>Returns False, and marks the failure as handled.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#method_Bool
Failure.defined	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method defined(Failure:D: --&gt; Bool:D)\n</code></pre><p>Returns False (failures are officially undefined), and marks the failure as handled.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#method_defined
Failure.ACCEPTS	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_ACCEPTS
Failure.any	A			Perl 6 Failure							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_any
Failure.all	A			Perl 6 Failure							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_all
Failure.one	A			Perl 6 Failure							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_one
Failure.none	A			Perl 6 Failure							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_none
Failure.list	A			Perl 6 Failure							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_list
Failure.push	A			Perl 6 Failure							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_push
Failure.reverse	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_routine_reverse
Failure.sort	A			Perl 6 Failure							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_sort
Failure.map	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_map
Failure.deepmap	A			Perl 6 Failure							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_deepmap
Failure.duckmap	A			Perl 6 Failure							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_duckmap
Failure.flat	A			Perl 6 Failure							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_flat
Failure.eager	A			Perl 6 Failure							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_eager
Failure.elems	A			Perl 6 Failure							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_elems
Failure.end	A			Perl 6 Failure							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_end
Failure.pairup	A			Perl 6 Failure							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_method_pairup
Failure.exit	A			Perl 6 Failure							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_sub_exit
Failure.item	A			Perl 6 Failure							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Any%29_sub_item
Failure.defined	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_routine_defined
Failure.isa	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_routine_isa
Failure.does	A			Perl 6 Failure							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_routine_does
Failure.Bool	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_routine_Bool
Failure.Str	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_Str
Failure.gist	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_routine_gist
Failure.perl	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_routine_perl
Failure.item	A			Perl 6 Failure							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_item
Failure.clone	A			Perl 6 Failure							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_clone
Failure.new	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_new
Failure.bless	A			Perl 6 Failure							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_bless
Failure.CREATE	A			Perl 6 Failure							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_CREATE
Failure.print	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_print
Failure.put	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_put
Failure.say	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_say
Failure.ACCEPTS	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_ACCEPTS
Failure.WHICH	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_WHICH
Failure.WHERE	A			Perl 6 Failure							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_WHERE
Failure.WHY	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_WHY
Failure.export	A			Perl 6 Failure							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_trait_is_export
Failure.return	A			Perl 6 Failure							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_return
Failure.return-rw	A			Perl 6 Failure							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_return-rw
Failure.emit	A			Perl 6 Failure							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_emit
Failure.take	A			Perl 6 Failure							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_take
Failure.take	A			Perl 6 Failure							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_routine_take
Failure.take-rw	A			Perl 6 Failure							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_routine_take-rw
Failure.so	A			Perl 6 Failure							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_so
Failure.not	A			Perl 6 Failure							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Failure.html#%28Mu%29_method_not
FatRat.new	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method new(NuT:D: $numerator, DeT:D: $denominator --&gt; Rational:D)\n</code></pre><p>Creates a new rational object from numerator and denominator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Rational%29_method_new
FatRat.isNaN	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method isNaN(Rational:D: --&gt; Bool:D)\n</code></pre><p>Tests whether the invocant&amp;#39;s Num value is a NaN.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Rational%29_method_isNaN
FatRat.numerator	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method numerator(Rational:D: --&gt; NuT:D)\n</code></pre><p>Returns the numerator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Rational%29_method_numerator
numerator	D								*[[FatRat.numerator]], returns the numerator.\n*[[Rat.numerator]], returns the numerator.\n*[[Rational.numerator]], returns the numerator.			
FatRat.denominator	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method denominator(Rational:D: --&gt; DeT:D)\n</code></pre><p>Returns the denominator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Rational%29_method_denominator
denominator	D								*[[FatRat.denominator]], returns the denominator.\n*[[Rat.denominator]], returns the denominator.\n*[[Rational.denominator]], returns the denominator.			
FatRat.nude	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method nude(Rational:D: --&gt; Positional)\n</code></pre><p>Returns a list of the numerator and denominator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Rational%29_method_nude
nude	D								*[[FatRat.nude]], returns a list of the numerator and denominator.\n*[[Rat.nude]], returns a list of the numerator and denominator.\n*[[Rational.nude]], returns a list of the numerator and denominator.			
FatRat.norm	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method norm(Rational:D: --&gt; Rational:D)\n</code></pre><p>Returns a normalized Rational object, i.e. with positive denominator, and numerator and denominator coprime.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Rational%29_method_norm
norm	D								*[[FatRat.norm]], returns a normalized Rational object, i.e. \n*[[Rat.norm]], returns a normalized Rational object, i.e. \n*[[Rational.norm]], returns a normalized Rational object, i.e. 			
FatRat.base-repeating	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method base-repeating(Rational:D: Int:D() $base)\n</code></pre><p>Returns a list of two strings that, when concatenated, represent the number in base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Rational%29_method_base-repeating
base-repeating	D								*[[FatRat.base-repeating]], returns a list of two strings that, when concatenated, represent the number in base $base.\n*[[Rat.base-repeating]], returns a list of two strings that, when concatenated, represent the number in base $base.\n*[[Rational.base-repeating]], returns a list of two strings that, when concatenated, represent the number in base $base.			
FatRat.Rat	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method Rat(Real:D: Real $epsilon = 1e-6)\n</code></pre><p>Converts the number to a Rat with the precision $epsilon.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Real%29_method_Rat
FatRat.rand	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub term:&lt;rand&gt; (--&gt; Num:D)\nmethod rand(Real:D: --&gt; Real:D)\n</code></pre><p>Returns a pseudo-random number between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Real%29_routine_rand
FatRat.sign	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method sign(Real:D:)\n</code></pre><p>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Real%29_method_sign
FatRat.round	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method round(Real:D: $scale = 1)\n</code></pre><p>Rounds the number to scale $scale.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Real%29_method_round
FatRat.floor	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method floor(Real:D --&gt; Int:D)\n</code></pre><p>Return the largest integer not greater than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Real%29_method_floor
FatRat.ceiling	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method ceiling(Real:D --&gt; Int:D)\n</code></pre><p>Returns the smallest integer not less than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Real%29_method_ceiling
FatRat.truncate	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method truncate(Real:D --&gt; Int:D)\n</code></pre><p>Rounds the number towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Real%29_method_truncate
FatRat.base	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method base(Real:D: Int:D $base where 2..36, $digits? --&gt; Str:D)\n</code></pre><p>Converts the number to a string, using $base as base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Real%29_method_base
FatRat.Real	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_Real
FatRat.Int	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_Int
FatRat.Rat	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_Rat
FatRat.Num	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_Num
FatRat.narrow	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_narrow
FatRat.ACCEPTS	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_ACCEPTS
FatRat.log	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_routine_log
FatRat.log10	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_routine_log10
FatRat.exp	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_routine_exp
FatRat.roots	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_roots
FatRat.abs	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_routine_abs
FatRat.sqrt	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_routine_sqrt
FatRat.conj	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_conj
FatRat.Bool	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_Bool
FatRat.succ	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_succ
FatRat.pred	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Numeric%29_method_pred
FatRat.abs	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_abs
FatRat.conj	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_conj
FatRat.sqrt	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_sqrt
FatRat.sign	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_sign
FatRat.rand	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_rand
FatRat.sin	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_sin
FatRat.asin	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_asin
FatRat.cos	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_cos
FatRat.acos	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_acos
FatRat.tan	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_tan
FatRat.atan	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_atan
FatRat.atan2	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_atan2
FatRat.sec	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_sec
FatRat.asec	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_asec
FatRat.cosec	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_cosec
FatRat.acosec	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_acosec
FatRat.cotan	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_cotan
FatRat.acotan	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_acotan
FatRat.sinh	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_sinh
FatRat.asinh	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_asinh
FatRat.cosh	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_cosh
FatRat.acosh	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_acosh
FatRat.tanh	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_tanh
FatRat.atanh	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_atanh
FatRat.sech	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_sech
FatRat.asech	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_asech
FatRat.cosech	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_cosech
FatRat.acosech	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_acosech
FatRat.cotanh	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_cotanh
FatRat.acotanh	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_acotanh
FatRat.cis	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_cis
FatRat.log	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_log
FatRat.log10	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_log10
FatRat.exp	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_exp
FatRat.unpolar	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_unpolar
FatRat.round	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_round
FatRat.floor	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_floor
FatRat.ceiling	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_ceiling
FatRat.truncate	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_truncate
FatRat.ord	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_ord
FatRat.chr	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_chr
FatRat.chars	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_chars
FatRat.codes	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_codes
FatRat.flip	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_flip
FatRat.trim	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_trim
FatRat.trim-leading	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_trim-leading
FatRat.trim-trailing	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_trim-trailing
FatRat.lc	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_lc
FatRat.uc	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_uc
FatRat.fc	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_fc
FatRat.tc	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_tc
FatRat.tclc	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_tclc
FatRat.wordcase	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_wordcase
FatRat.samecase	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_samecase
FatRat.uniprop	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_uniprop
FatRat.uniprops	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_uniprops
FatRat.uniname	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_uniname
FatRat.uninames	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_uninames
FatRat.unimatch	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_unimatch
FatRat.chop	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_chop
FatRat.chomp	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_chomp
FatRat.substr	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_substr
FatRat.ords	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_ords
FatRat.chrs	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_chrs
FatRat.split	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_split
FatRat.lines	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_lines
FatRat.words	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_words
FatRat.comb	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_comb
FatRat.contains	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_contains
FatRat.index	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_index
FatRat.rindex	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_rindex
FatRat.match	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_match
FatRat.fmt	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_fmt
FatRat.roots	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_roots
FatRat.IO	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_method_IO
FatRat.EVAL	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_EVAL
FatRat.EVALFILE	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Cool%29_routine_EVALFILE
FatRat.ACCEPTS	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_ACCEPTS
FatRat.any	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_any
FatRat.all	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_all
FatRat.one	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_one
FatRat.none	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_none
FatRat.list	A			Perl 6 FatRat							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_list
FatRat.push	A			Perl 6 FatRat							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_push
FatRat.reverse	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_routine_reverse
FatRat.sort	A			Perl 6 FatRat							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_sort
FatRat.map	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_map
FatRat.deepmap	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_deepmap
FatRat.duckmap	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_duckmap
FatRat.flat	A			Perl 6 FatRat							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_flat
FatRat.eager	A			Perl 6 FatRat							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_eager
FatRat.elems	A			Perl 6 FatRat							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_elems
FatRat.end	A			Perl 6 FatRat							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_end
FatRat.pairup	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_method_pairup
FatRat.exit	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_sub_exit
FatRat.item	A			Perl 6 FatRat							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Any%29_sub_item
FatRat.defined	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_routine_defined
FatRat.isa	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_routine_isa
FatRat.does	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_routine_does
FatRat.Bool	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_routine_Bool
FatRat.Str	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_Str
FatRat.gist	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_routine_gist
FatRat.perl	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_routine_perl
FatRat.item	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_item
FatRat.clone	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_clone
FatRat.new	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_new
FatRat.bless	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_bless
FatRat.CREATE	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_CREATE
FatRat.print	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_print
FatRat.put	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_put
FatRat.say	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_say
FatRat.ACCEPTS	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_ACCEPTS
FatRat.WHICH	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_WHICH
FatRat.WHERE	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_WHERE
FatRat.WHY	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_WHY
FatRat.export	A			Perl 6 FatRat							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_trait_is_export
FatRat.return	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_return
FatRat.return-rw	A			Perl 6 FatRat							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_return-rw
FatRat.emit	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_emit
FatRat.take	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_take
FatRat.take	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_routine_take
FatRat.take-rw	A			Perl 6 FatRat							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_routine_take-rw
FatRat.so	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_so
FatRat.not	A			Perl 6 FatRat							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/FatRat.html#%28Mu%29_method_not
Grammar.parse	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method parse($target, :$rule = &amp;#39;TOP&amp;#39;,  Capture() :$args = &#92;(), Mu :$actions = Mu, *%opt)\n</code></pre><p>Parses the $target (which will be coerced to Str if it isn&amp;#39;t one), using $rule as the starting rule.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#method_parse
parse	R	Grammar.parse										
Grammar.subparse	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method subparse($target, :$rule = &amp;#39;TOP&amp;#39;, Capture() :$args = &#92;(),  Mu :$actions = Mu, *%opt)\n</code></pre><p>Does exactly the same as method parse, except that cursor doesn&amp;#39;t have to reach the end of the string to succeed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#method_subparse
subparse	R	Grammar.subparse										
Grammar.parsefile	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method parsefile(Str(Cool) $filename, :$enc, *%opts)\n</code></pre><p>Reads file $filename, and parses it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#method_parsefile
parsefile	R	Grammar.parsefile										
Grammar.ACCEPTS	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_ACCEPTS
Grammar.any	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_any
Grammar.all	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_all
Grammar.one	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_one
Grammar.none	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_none
Grammar.list	A			Perl 6 Grammar							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_list
Grammar.push	A			Perl 6 Grammar							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_push
Grammar.reverse	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_routine_reverse
Grammar.sort	A			Perl 6 Grammar							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_sort
Grammar.map	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_map
Grammar.deepmap	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_deepmap
Grammar.duckmap	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_duckmap
Grammar.flat	A			Perl 6 Grammar							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_flat
Grammar.eager	A			Perl 6 Grammar							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_eager
Grammar.elems	A			Perl 6 Grammar							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_elems
Grammar.end	A			Perl 6 Grammar							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_end
Grammar.pairup	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_method_pairup
Grammar.exit	A			Perl 6 Grammar							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_sub_exit
Grammar.item	A			Perl 6 Grammar							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Any%29_sub_item
Grammar.defined	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_routine_defined
Grammar.isa	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_routine_isa
Grammar.does	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_routine_does
Grammar.Bool	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_routine_Bool
Grammar.Str	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_Str
Grammar.gist	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_routine_gist
Grammar.perl	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_routine_perl
Grammar.item	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_item
Grammar.clone	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_clone
Grammar.new	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_new
Grammar.bless	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_bless
Grammar.CREATE	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_CREATE
Grammar.print	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_print
Grammar.put	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_put
Grammar.say	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_say
Grammar.ACCEPTS	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_ACCEPTS
Grammar.WHICH	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_WHICH
Grammar.WHERE	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_WHERE
Grammar.WHY	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_WHY
Grammar.export	A			Perl 6 Grammar							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_trait_is_export
Grammar.return	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_return
Grammar.return-rw	A			Perl 6 Grammar							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_return-rw
Grammar.emit	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_emit
Grammar.take	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_take
Grammar.take	A			Perl 6 Grammar							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_routine_take
Grammar.take-rw	A			Perl 6 Grammar							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_routine_take-rw
Grammar.so	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_so
Grammar.not	A			Perl 6 Grammar							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Grammar.html#%28Mu%29_method_not
Hash.Slices	A			Perl 6 Hash							<section class="prog__container"><pre><code>my %h; %h&lt;a b c&gt; = 2 xx *; %h.perl.say;  # {:a(2), :b(2), :c(2)} \nmy %h; %h&lt;a b c&gt; = ^3;     %h.perl.say;  # {:a(0), :b(1), :c(2)} \n</code></pre><p>You can assign to multiple keys at the same time with a slice.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#Slices
Slices	R	Hash.Slices										
Hash.keys	A			Perl 6 Hash							<section class="prog__container"><pre><code>my $when = :{ (now) =&gt; "Instant", (DateTime.now) =&gt; "DateTime" };\n</code></pre><p>By default keys in { } are forced to strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#Non-string_keys
Hash.types	A			Perl 6 Hash							<section class="prog__container"><pre><code>subset Powerful of Int where * &gt; 9000;\nmy Powerful %h{Str};\nput %h&lt;Goku&gt;   = 9001;\ntry {\n    %h&lt;Vegeta&gt; = 900;\n    CATCH { when X::TypeCheck::Binding { .message.put } }\n}\n \n# OUTPUT: \n# 9001 \n# Type check failed in binding assignval; expected Powerful but got Int (900) \n</code></pre><p>Place a type object in-between the declarator and the name to constraint the type of all values of a Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#Constraint_value_types
types	R	Hash.types										
Hash.constraints	A			Perl 6 Hash							<section class="prog__container"><pre><code>my %intervals{Instant};\nmy $first-instant = now;\n%intervals{ $first-instant } = "Our first milestone.";\nsleep 1;\nmy $second-instant = now;\n%intervals{ $second-instant } = "Logging this Instant for spurious raisins.";\nfor %intervals.sort -&gt; (:$key, :$value) {\n    state $last-instant //= $key;\n    say "We noted &amp;#39;$value&amp;#39; at $key, with an interval of {$key - $last-instant}";\n    $last-instant = $key;\n}\n</code></pre><p>Hash keys are stored as Str values in a normal hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#Object_hashes_and_type_constraints
constraints	D								*[[Hash.constraints]], hash keys are stored as Str values in a normal hash.\n*[[Parameter.constraints]], returns additional constraints on the parameter (usually as an all-Junction).			
Hash.values	A			Perl 6 Hash							<section class="prog__container"><pre><code>my %answers = illuminatus =&gt; 23, hitchhikers =&gt; 42;\n# OUTPUT: Â«hitchhikers =&gt; 42, illuminatus =&gt; 23Â» \nfor %answers.values -&gt; $v { $v += 10 }; # Fails \nCATCH { default { put .^name, &amp;#39;: &amp;#39;, .Str } };\n# OUTPUT: Â«X::AdHoc: Cannot assign to a readonly variable or a valueâ¤Â» \n</code></pre><p>There may be times when you would like to modify the values of a hash while iterating over them.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#In_place_editing_of_values
Hash.classify-list	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method classify-list(&amp;mapper, *@list, :&amp;as --&gt; Hash:D)\nmulti method classify-list(%mapper, *@list, :&amp;as --&gt; Hash:D)\nmulti method classify-list(@mapper, *@list, :&amp;as --&gt; Hash:D)\n</code></pre><p>Populates a Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#method_classify-list
Hash.categorize-list	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method categorize-list(&amp;mapper, *@list, :&amp;as --&gt; Hash:D)\nmulti method categorize-list(%mapper, *@list, :&amp;as --&gt; Hash:D)\nmulti method categorize-list(@mapper, *@list, :&amp;as --&gt; Hash:D)\n</code></pre><p>Populates a Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#method_categorize-list
Hash.push	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method push(Hash:D: *@new)\n</code></pre><p>Adds the @new elements to the hash with the same semantics as hash assignment, but with three exceptions:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#method_push
Hash.append	A			Perl 6 Hash							<section class="prog__container"><pre><code>method append(+@values)\n</code></pre><p>Append the provided Pairs or even sized list to the Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#method_append
Hash.default	A			Perl 6 Hash							<section class="prog__container"><pre><code>method default()\n</code></pre><p>Returns the default value of the invocant, i.e. the value which is returned when a non existing key is used to access an element in the Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#method_default
Hash.keyof	A			Perl 6 Hash							<section class="prog__container"><pre><code>method keyof()\n</code></pre><p>Returns the type constraint for the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#method_keyof
keyof	D								*[[Hash.keyof]], returns the type constraint for the keys of the invocant.\n*[[Stash.keyof]], returns the type constraint for the keys of the invocant.			
Hash.of	A			Perl 6 Hash							<section class="prog__container"><pre><code>method of()\n</code></pre><p>Returns the type constraint for the values of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#method_of
Hash.:exists	A			Perl 6 Hash							<section class="prog__container"><pre><code>my %h = a =&gt; 1, b =&gt; 2;\nsay %h&lt;a&gt;:exists;   # True \nsay %h&lt;a b&gt;:exists; # (True True) \n</code></pre><p>The adverb :exists returns Bool::True if a key exists in the Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%3Aexists
:exists	R	Hash.:exists										
Hash.:delete	A			Perl 6 Hash							<section class="prog__container"><pre><code>my %h = a =&gt; 1;\ndd %h;         # Hash %h = {:a(1)} \n%h&lt;a&gt;:delete;\ndd %h;         # Hash %h = {} \n</code></pre><p>Use :delete to remove a Pair from the Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%3Adelete
:delete	R	Hash.:delete										
Hash.:p	A			Perl 6 Hash							<section class="prog__container"><pre><code>my %h = a =&gt; 1, b =&gt; 2;\nsay %h&lt;a&gt;:p;    # a =&gt; 1 \nsay %h&lt;a b&gt;:p;  # (a =&gt; 1 b=&gt; 2) \n</code></pre><p>The adverb :p returns a Pair or a List of Pair instead of just the value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%3Ap
:p	R	Hash.:p										
Hash.:k	A			Perl 6 Hash							<section class="prog__container"><pre><code>my %h = a =&gt; 1, b =&gt; 2;\nsay %h&lt;a&gt;:k;    # a \nsay %h&lt;a b&gt;:k;  # (a b) \n</code></pre><p>The adverbs :v and :k return the key or value or a list their of.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%3Av_and_%3Ak
:k	R	Hash.:k										
Hash.new	A			Perl 6 Hash							<section class="prog__container"><pre><code>method new(*@args)\n</code></pre><p>Creates a new Map from a list of alternating keys and values, with the same semantics as described for hash assigning in the Hash documentation, except, for literal pair handling.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_new
Hash.elems	A			Perl 6 Hash							<section class="prog__container"><pre><code>method elems(Map:D: --&gt; Int:D)\n</code></pre><p>Returns the number of pairs stored in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_elems
Hash.ACCEPTS	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method ACCEPTS(Map:D: Positional $topic)\nmulti method ACCEPTS(Map:D: Cool:D     $topic)\nmulti method ACCEPTS(Map:D: Regex      $topic)\nmulti method ACCEPTS(Map:D: Any        $topic)\n</code></pre><p>Used in smart-matching if the right-hand side is an Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_ACCEPTS
Hash.keys	A			Perl 6 Hash							<section class="prog__container"><pre><code>method keys(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of all keys in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_keys
Hash.values	A			Perl 6 Hash							<section class="prog__container"><pre><code>method values(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of all values in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_values
Hash.pairs	A			Perl 6 Hash							<section class="prog__container"><pre><code>method pairs(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of all pairs in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_pairs
Hash.antipairs	A			Perl 6 Hash							<section class="prog__container"><pre><code>method antipairs(Map:D: --&gt; Seq:D)\n</code></pre><p>Returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_antipairs
Hash.invert	A			Perl 6 Hash							<section class="prog__container"><pre><code>method invert(Map:D: --&gt; Seq:D)\n</code></pre><p>Returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_invert
Hash.kv	A			Perl 6 Hash							<section class="prog__container"><pre><code>method kv(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of keys and values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_kv
Hash.Int	A			Perl 6 Hash							<section class="prog__container"><pre><code>method Int(Map:D: --&gt; Int:D)\n</code></pre><p>Returns the number of pairs stored in the Map (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_Int
Hash.Numeric	A			Perl 6 Hash							<section class="prog__container"><pre><code>method Numeric(Map:D: --&gt; Int:D)\n</code></pre><p>Returns the number of pairs stored in the Map (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_Numeric
Hash.Bool	A			Perl 6 Hash							<section class="prog__container"><pre><code>method Bool(Map:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one key/value pair.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_Bool
Hash.Capture	A			Perl 6 Hash							<section class="prog__container"><pre><code>method Capture(Map:D: --&gt; Capture:D)\n</code></pre><p>Returns a Capture where each key, if any, has been converted to a named argument with the same value as it had in the original Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Map%29_method_Capture
Hash.iterator	A			Perl 6 Hash							<section class="prog__container"><pre><code>method iterator(--&gt; Iterator:D)\n</code></pre><p>Method stub that ensures all classes doing the Iterable role have a method iterator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Iterable%29_method_iterator
iterator	D								*[[Hash.iterator]], method stub that ensures all classes doing the Iterable role have a method iterator.\n*[[Iterable.iterator]], method stub that ensures all classes doing the Iterable role have a method iterator.\n*[[List.iterator]], method stub that ensures all classes doing the Iterable role have a method iterator.\n*[[Map.iterator]], method stub that ensures all classes doing the Iterable role have a method iterator.\n*[[PositionalBindFailover.iterator]], this method stub ensure that a class implementing role PositionalBindFailover provides an iterator method.\n*[[Range.iterator]], method stub that ensures all classes doing the Iterable role have a method iterator.\n*[[Seq.iterator]], this method stub ensure that a class implementing role PositionalBindFailover provides an iterator method.\n*[[Stash.iterator]], method stub that ensures all classes doing the Iterable role have a method iterator.			
Hash.flat	A			Perl 6 Hash							<section class="prog__container"><pre><code>method flat(--&gt; Iterable)\n</code></pre><p>Returns another Iterable that flattens out all iterables that the first one returns.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Iterable%29_method_flat
Hash.lazy	A			Perl 6 Hash							<section class="prog__container"><pre><code>method lazy(--&gt; Iterable)\n</code></pre><p>Returns a lazy iterable wrapping the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Iterable%29_method_lazy
lazy	D								*[[Hash.lazy]], returns a lazy iterable wrapping the invocant.\n*[[Iterable.lazy]], returns a lazy iterable wrapping the invocant.\n*[[List.lazy]], returns a lazy iterable wrapping the invocant.\n*[[Map.lazy]], returns a lazy iterable wrapping the invocant.\n*[[Range.lazy]], returns a lazy iterable wrapping the invocant.\n*[[Seq.lazy]], returns a lazy iterable wrapping the invocant.\n*[[Stash.lazy]], returns a lazy iterable wrapping the invocant.			
Hash.hyper	A			Perl 6 Hash							<section class="prog__container"><pre><code>method hyper(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Iterable%29_method_hyper
hyper	D								*[[Hash.hyper]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.\n*[[Iterable.hyper]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.\n*[[List.hyper]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.\n*[[Map.hyper]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.\n*[[Range.hyper]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.\n*[[Seq.hyper]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.\n*[[Stash.hyper]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.			
Hash.race	A			Perl 6 Hash							<section class="prog__container"><pre><code>method race(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Iterable%29_method_race
race	D								*[[Hash.race]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).\n*[[Iterable.race]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).\n*[[List.race]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).\n*[[Map.race]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).\n*[[Range.race]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).\n*[[Seq.race]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).\n*[[Stash.race]], returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).			
Hash.abs	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_abs
Hash.conj	A			Perl 6 Hash							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_conj
Hash.sqrt	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_sqrt
Hash.sign	A			Perl 6 Hash							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_sign
Hash.rand	A			Perl 6 Hash							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_rand
Hash.sin	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_sin
Hash.asin	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_asin
Hash.cos	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_cos
Hash.acos	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_acos
Hash.tan	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_tan
Hash.atan	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_atan
Hash.atan2	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_atan2
Hash.sec	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_sec
Hash.asec	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_asec
Hash.cosec	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_cosec
Hash.acosec	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_acosec
Hash.cotan	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_cotan
Hash.acotan	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_acotan
Hash.sinh	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_sinh
Hash.asinh	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_asinh
Hash.cosh	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_cosh
Hash.acosh	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_acosh
Hash.tanh	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_tanh
Hash.atanh	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_atanh
Hash.sech	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_sech
Hash.asech	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_asech
Hash.cosech	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_cosech
Hash.acosech	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_acosech
Hash.cotanh	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_cotanh
Hash.acotanh	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_acotanh
Hash.cis	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_cis
Hash.log	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_log
Hash.log10	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_log10
Hash.exp	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_exp
Hash.unpolar	A			Perl 6 Hash							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_unpolar
Hash.round	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_round
Hash.floor	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_floor
Hash.ceiling	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_ceiling
Hash.truncate	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_truncate
Hash.ord	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_ord
Hash.chr	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_chr
Hash.chars	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_chars
Hash.codes	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_codes
Hash.flip	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_flip
Hash.trim	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_trim
Hash.trim-leading	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_trim-leading
Hash.trim-trailing	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_trim-trailing
Hash.lc	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_lc
Hash.uc	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_uc
Hash.fc	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_fc
Hash.tc	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_tc
Hash.tclc	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_tclc
Hash.wordcase	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_wordcase
Hash.samecase	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_samecase
Hash.uniprop	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_uniprop
Hash.uniprops	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_uniprops
Hash.uniname	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_uniname
Hash.uninames	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_uninames
Hash.unimatch	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_unimatch
Hash.chop	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_chop
Hash.chomp	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_chomp
Hash.substr	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_substr
Hash.ords	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_ords
Hash.chrs	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_chrs
Hash.split	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_split
Hash.lines	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_lines
Hash.words	A			Perl 6 Hash							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_words
Hash.comb	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_comb
Hash.contains	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_contains
Hash.index	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_index
Hash.rindex	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_rindex
Hash.match	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_match
Hash.fmt	A			Perl 6 Hash							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_fmt
Hash.roots	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_roots
Hash.IO	A			Perl 6 Hash							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_method_IO
Hash.EVAL	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_EVAL
Hash.EVALFILE	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Cool%29_routine_EVALFILE
Hash.ACCEPTS	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_ACCEPTS
Hash.any	A			Perl 6 Hash							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_any
Hash.all	A			Perl 6 Hash							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_all
Hash.one	A			Perl 6 Hash							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_one
Hash.none	A			Perl 6 Hash							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_none
Hash.list	A			Perl 6 Hash							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_list
Hash.push	A			Perl 6 Hash							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_push
Hash.reverse	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_routine_reverse
Hash.sort	A			Perl 6 Hash							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_sort
Hash.map	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_map
Hash.deepmap	A			Perl 6 Hash							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_deepmap
Hash.duckmap	A			Perl 6 Hash							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_duckmap
Hash.flat	A			Perl 6 Hash							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_flat
Hash.eager	A			Perl 6 Hash							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_eager
Hash.elems	A			Perl 6 Hash							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_elems
Hash.end	A			Perl 6 Hash							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_end
Hash.pairup	A			Perl 6 Hash							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_method_pairup
Hash.exit	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_sub_exit
Hash.item	A			Perl 6 Hash							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Any%29_sub_item
Hash.defined	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_routine_defined
Hash.isa	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_routine_isa
Hash.does	A			Perl 6 Hash							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_routine_does
Hash.Bool	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_routine_Bool
Hash.Str	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_Str
Hash.gist	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_routine_gist
Hash.perl	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_routine_perl
Hash.item	A			Perl 6 Hash							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_item
Hash.clone	A			Perl 6 Hash							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_clone
Hash.new	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_new
Hash.bless	A			Perl 6 Hash							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_bless
Hash.CREATE	A			Perl 6 Hash							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_CREATE
Hash.print	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_print
Hash.put	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_put
Hash.say	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_say
Hash.ACCEPTS	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_ACCEPTS
Hash.WHICH	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_WHICH
Hash.WHERE	A			Perl 6 Hash							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_WHERE
Hash.WHY	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_WHY
Hash.export	A			Perl 6 Hash							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_trait_is_export
Hash.return	A			Perl 6 Hash							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_return
Hash.return-rw	A			Perl 6 Hash							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_return-rw
Hash.emit	A			Perl 6 Hash							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_emit
Hash.take	A			Perl 6 Hash							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_take
Hash.take	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_routine_take
Hash.take-rw	A			Perl 6 Hash							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_routine_take-rw
Hash.so	A			Perl 6 Hash							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_so
Hash.not	A			Perl 6 Hash							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Hash.html#%28Mu%29_method_not
IO.print	A			Perl 6 IO							<section class="prog__container"><pre><code>print "Hi there!&#92;n";   # Hi there! \n</code></pre><p>Print the given text on $*OUT (standard output), e.g.:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_print
IO.put	A			Perl 6 IO							<section class="prog__container"><pre><code>put &amp;#39;Merry 1.0!&amp;#39;;\nput (0..101).list;\n</code></pre><p>Print the given text on $*OUT (standard output) with appended $*OUT.nl-out.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_put
IO.say	A			Perl 6 IO							<section class="prog__container"><pre><code>say "Hi there!";\nsay "How are you?";\nsay (0..101).list;\n</code></pre><p>Print the given text in human readable form, followed by a $*OUT.nl-out (platform dependent newline) on $*OUT (standard output).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_say
IO.note	A			Perl 6 IO							<section class="prog__container"><pre><code>if ("path/to/pirate/treasure".IO.e) {\n    say "Found pirate treasure!";\n}\nelse {\n    note "Could not find pirate treasure.  Are you sure it exists?";\n}\n</code></pre><p>Print the given text, followed by a newline "&#92;n" on $*ERR (standard error).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_note
note	R	IO.note										
IO.prompt	A			Perl 6 IO							<section class="prog__container"><pre><code>sub prompt($msg)\n</code></pre><p>Prints $msg to standard output and waits for the user to type something and finish with an ENTER.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_prompt
prompt	R	IO.prompt										
IO.open	A			Perl 6 IO							<section class="prog__container"><pre><code>my $fh = open(IO::Path() $path, :$r, :$w, :$a, :$rw,\n              :$bin, :$enc, :$nl-in, :$nl-out, :$chomp)\n</code></pre><p>Opens the $path (by default in text mode) with the given options, returning an IO::Handle object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_open
open	R	IO.open										
IO.close	A			Perl 6 IO							<section class="prog__container"><pre><code>my $fh = open("path-to-file");\n# ... do stuff with the file \n$fh.close;\n</code></pre><p>To close an open file handle, simply call its close method:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#method_close
IO.slurp	A			Perl 6 IO							<section class="prog__container"><pre><code># read entire file as (Unicode) Str \n#my $text_contents   = slurp "path-to-file"; \n \n# read entire file as Latin1 Str \n#my $text_contents   = slurp "path-to-file", enc =&gt; "latin1"; \n \n# read entire file as Buf \n#my $binary_contents = slurp "path-to-file", :bin; \n</code></pre><p>Slurps the contents of the entire file into a Str (or Buf if :bin).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_slurp
slurp	R	IO.slurp										
IO.spurt	A			Perl 6 IO							<section class="prog__container"><pre><code>sub spurt($where, $what,\n    Str  :$enc        = &amp;#39;utf8&amp;#39;,\n    Bool :$bin        = False,\n    Bool :$append      = False,\n    Bool :$createonly = False\n    --&gt; Bool )\n</code></pre><p>Writes the indicated contents (2nd positional parameter, $what) to the location indicated by the first positional parameter, $where (which can either be a string or an IO::Path object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_spurt
spurt	R	IO.spurt										
IO.run	A			Perl 6 IO							<section class="prog__container"><pre><code>sub run(*@args ($, *@) --&gt; Proc)\n</code></pre><p>Runs an external command without involving a shell (if possible).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_run
run	D								*[[IO.run]], runs an external command without involving a shell (if possible).\n*[[Thread.run]], runs the thread, and returns the invocant.			
IO.shell	A			Perl 6 IO							<section class="prog__container"><pre><code>sub shell($cmd --&gt; Proc)\n</code></pre><p>Runs a command through the system shell.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IO.html#sub_shell
shell	D								*[[IO.shell]], runs a command through the system shell.\n*[[Proc.shell]], runs the Proc object with the given command, which is passed through to the shell for parsing and execution.			
Instant.from-posix	A			Perl 6 Instant							<section class="prog__container"><pre><code>method from-posix($posix, Bool $prefer-leap-second = False)\n</code></pre><p>Converts the POSIX timestamp $posix to an Instant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#method_from-posix
from-posix	R	Instant.from-posix										
Instant.to-posix	A			Perl 6 Instant							<section class="prog__container"><pre><code>method to-posix()\n</code></pre><p>Converts the invocant to a POSIX timestamp and returns a two element list containing the POSIX timestamp and a Bool.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#method_to-posix
to-posix	R	Instant.to-posix										
Instant.Date	A			Perl 6 Instant							<section class="prog__container"><pre><code>method Date(Instant:D: --&gt; Date:D)\n</code></pre><p>Returns a Date object set to the date of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#method_Date
Instant.Rat	A			Perl 6 Instant							<section class="prog__container"><pre><code>method Rat(Real:D: Real $epsilon = 1e-6)\n</code></pre><p>Converts the number to a Rat with the precision $epsilon.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Real%29_method_Rat
Instant.rand	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub term:&lt;rand&gt; (--&gt; Num:D)\nmethod rand(Real:D: --&gt; Real:D)\n</code></pre><p>Returns a pseudo-random number between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Real%29_routine_rand
Instant.sign	A			Perl 6 Instant							<section class="prog__container"><pre><code>method sign(Real:D:)\n</code></pre><p>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Real%29_method_sign
Instant.round	A			Perl 6 Instant							<section class="prog__container"><pre><code>method round(Real:D: $scale = 1)\n</code></pre><p>Rounds the number to scale $scale.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Real%29_method_round
Instant.floor	A			Perl 6 Instant							<section class="prog__container"><pre><code>method floor(Real:D --&gt; Int:D)\n</code></pre><p>Return the largest integer not greater than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Real%29_method_floor
Instant.ceiling	A			Perl 6 Instant							<section class="prog__container"><pre><code>method ceiling(Real:D --&gt; Int:D)\n</code></pre><p>Returns the smallest integer not less than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Real%29_method_ceiling
Instant.truncate	A			Perl 6 Instant							<section class="prog__container"><pre><code>method truncate(Real:D --&gt; Int:D)\n</code></pre><p>Rounds the number towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Real%29_method_truncate
Instant.base	A			Perl 6 Instant							<section class="prog__container"><pre><code>method base(Real:D: Int:D $base where 2..36, $digits? --&gt; Str:D)\n</code></pre><p>Converts the number to a string, using $base as base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Real%29_method_base
Instant.Real	A			Perl 6 Instant							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_Real
Instant.Int	A			Perl 6 Instant							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_Int
Instant.Rat	A			Perl 6 Instant							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_Rat
Instant.Num	A			Perl 6 Instant							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_Num
Instant.narrow	A			Perl 6 Instant							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_narrow
Instant.ACCEPTS	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_ACCEPTS
Instant.log	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_routine_log
Instant.log10	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_routine_log10
Instant.exp	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_routine_exp
Instant.roots	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_roots
Instant.abs	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_routine_abs
Instant.sqrt	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_routine_sqrt
Instant.conj	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_conj
Instant.Bool	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_Bool
Instant.succ	A			Perl 6 Instant							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_succ
Instant.pred	A			Perl 6 Instant							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Numeric%29_method_pred
Instant.abs	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_abs
Instant.conj	A			Perl 6 Instant							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_conj
Instant.sqrt	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_sqrt
Instant.sign	A			Perl 6 Instant							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_sign
Instant.rand	A			Perl 6 Instant							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_rand
Instant.sin	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_sin
Instant.asin	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_asin
Instant.cos	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_cos
Instant.acos	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_acos
Instant.tan	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_tan
Instant.atan	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_atan
Instant.atan2	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_atan2
Instant.sec	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_sec
Instant.asec	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_asec
Instant.cosec	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_cosec
Instant.acosec	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_acosec
Instant.cotan	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_cotan
Instant.acotan	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_acotan
Instant.sinh	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_sinh
Instant.asinh	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_asinh
Instant.cosh	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_cosh
Instant.acosh	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_acosh
Instant.tanh	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_tanh
Instant.atanh	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_atanh
Instant.sech	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_sech
Instant.asech	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_asech
Instant.cosech	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_cosech
Instant.acosech	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_acosech
Instant.cotanh	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_cotanh
Instant.acotanh	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_acotanh
Instant.cis	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_cis
Instant.log	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_log
Instant.log10	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_log10
Instant.exp	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_exp
Instant.unpolar	A			Perl 6 Instant							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_unpolar
Instant.round	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_round
Instant.floor	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_floor
Instant.ceiling	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_ceiling
Instant.truncate	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_truncate
Instant.ord	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_ord
Instant.chr	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_chr
Instant.chars	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_chars
Instant.codes	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_codes
Instant.flip	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_flip
Instant.trim	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_trim
Instant.trim-leading	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_trim-leading
Instant.trim-trailing	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_trim-trailing
Instant.lc	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_lc
Instant.uc	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_uc
Instant.fc	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_fc
Instant.tc	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_tc
Instant.tclc	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_tclc
Instant.wordcase	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_wordcase
Instant.samecase	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_samecase
Instant.uniprop	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_uniprop
Instant.uniprops	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_uniprops
Instant.uniname	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_uniname
Instant.uninames	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_uninames
Instant.unimatch	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_unimatch
Instant.chop	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_chop
Instant.chomp	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_chomp
Instant.substr	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_substr
Instant.ords	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_ords
Instant.chrs	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_chrs
Instant.split	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_split
Instant.lines	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_lines
Instant.words	A			Perl 6 Instant							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_words
Instant.comb	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_comb
Instant.contains	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_contains
Instant.index	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_index
Instant.rindex	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_rindex
Instant.match	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_match
Instant.fmt	A			Perl 6 Instant							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_fmt
Instant.roots	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_roots
Instant.IO	A			Perl 6 Instant							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_method_IO
Instant.EVAL	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_EVAL
Instant.EVALFILE	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Cool%29_routine_EVALFILE
Instant.ACCEPTS	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_ACCEPTS
Instant.any	A			Perl 6 Instant							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_any
Instant.all	A			Perl 6 Instant							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_all
Instant.one	A			Perl 6 Instant							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_one
Instant.none	A			Perl 6 Instant							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_none
Instant.list	A			Perl 6 Instant							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_list
Instant.push	A			Perl 6 Instant							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_push
Instant.reverse	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_routine_reverse
Instant.sort	A			Perl 6 Instant							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_sort
Instant.map	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_map
Instant.deepmap	A			Perl 6 Instant							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_deepmap
Instant.duckmap	A			Perl 6 Instant							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_duckmap
Instant.flat	A			Perl 6 Instant							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_flat
Instant.eager	A			Perl 6 Instant							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_eager
Instant.elems	A			Perl 6 Instant							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_elems
Instant.end	A			Perl 6 Instant							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_end
Instant.pairup	A			Perl 6 Instant							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_method_pairup
Instant.exit	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_sub_exit
Instant.item	A			Perl 6 Instant							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Any%29_sub_item
Instant.defined	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_routine_defined
Instant.isa	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_routine_isa
Instant.does	A			Perl 6 Instant							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_routine_does
Instant.Bool	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_routine_Bool
Instant.Str	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_Str
Instant.gist	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_routine_gist
Instant.perl	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_routine_perl
Instant.item	A			Perl 6 Instant							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_item
Instant.clone	A			Perl 6 Instant							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_clone
Instant.new	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_new
Instant.bless	A			Perl 6 Instant							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_bless
Instant.CREATE	A			Perl 6 Instant							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_CREATE
Instant.print	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_print
Instant.put	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_put
Instant.say	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_say
Instant.ACCEPTS	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_ACCEPTS
Instant.WHICH	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_WHICH
Instant.WHERE	A			Perl 6 Instant							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_WHERE
Instant.WHY	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_WHY
Instant.export	A			Perl 6 Instant							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_trait_is_export
Instant.return	A			Perl 6 Instant							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_return
Instant.return-rw	A			Perl 6 Instant							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_return-rw
Instant.emit	A			Perl 6 Instant							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_emit
Instant.take	A			Perl 6 Instant							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_take
Instant.take	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_routine_take
Instant.take-rw	A			Perl 6 Instant							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_routine_take-rw
Instant.so	A			Perl 6 Instant							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_so
Instant.not	A			Perl 6 Instant							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Instant.html#%28Mu%29_method_not
Int.chr	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    chr(Int:D  --&gt; Str:D)\nmulti method chr(Int:D: --&gt; Str:D)\n</code></pre><p>Returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#routine_chr
Int.expmod	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    expmod(      $x,     $y,     $mod --&gt; Int:D)\nmulti sub    expmod(Int:D $x, Int $y, Int $mod --&gt; Int:D)\nmulti method expmod(Int:D:    Int $y, Int $mod --&gt; Int:D)\n</code></pre><p>Returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#routine_expmod
Int.polymod	A			Perl 6 Int							<section class="prog__container"><pre><code>method polymod(Int:D: +@mods)\n</code></pre><p>Returns a sequence of mod results corresponding to the divisors in @mods.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#method_polymod
Int.is-prime	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    is-prime (Int:D $number --&gt; Bool:D)\nmulti method is-prime (Int:D: --&gt; Bool:D)\n</code></pre><p>Returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#routine_is-prime
Int.lsb	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method lsb(Int:D:)\nmulti sub    lsb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#routine_lsb
Int.msb	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method msb(Int:D:)\nmulti sub    msb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#routine_msb
Int.unival	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    unival(Int:D  --&gt; Numeric)\nmulti method unival(Int:D: --&gt; Numeric)\n</code></pre><p>Returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#routine_unival
Int.div	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub infix:&lt;div&gt;(Int:D, Int:D --&gt; Int:D)\n</code></pre><p>Does an integer division, rounded down.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#infix_div
Int.Rat	A			Perl 6 Int							<section class="prog__container"><pre><code>method Rat(Real:D: Real $epsilon = 1e-6)\n</code></pre><p>Converts the number to a Rat with the precision $epsilon.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Real%29_method_Rat
Int.rand	A			Perl 6 Int							<section class="prog__container"><pre><code>sub term:&lt;rand&gt; (--&gt; Num:D)\nmethod rand(Real:D: --&gt; Real:D)\n</code></pre><p>Returns a pseudo-random number between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Real%29_routine_rand
Int.sign	A			Perl 6 Int							<section class="prog__container"><pre><code>method sign(Real:D:)\n</code></pre><p>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Real%29_method_sign
Int.round	A			Perl 6 Int							<section class="prog__container"><pre><code>method round(Real:D: $scale = 1)\n</code></pre><p>Rounds the number to scale $scale.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Real%29_method_round
Int.floor	A			Perl 6 Int							<section class="prog__container"><pre><code>method floor(Real:D --&gt; Int:D)\n</code></pre><p>Return the largest integer not greater than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Real%29_method_floor
Int.ceiling	A			Perl 6 Int							<section class="prog__container"><pre><code>method ceiling(Real:D --&gt; Int:D)\n</code></pre><p>Returns the smallest integer not less than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Real%29_method_ceiling
Int.truncate	A			Perl 6 Int							<section class="prog__container"><pre><code>method truncate(Real:D --&gt; Int:D)\n</code></pre><p>Rounds the number towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Real%29_method_truncate
Int.base	A			Perl 6 Int							<section class="prog__container"><pre><code>method base(Real:D: Int:D $base where 2..36, $digits? --&gt; Str:D)\n</code></pre><p>Converts the number to a string, using $base as base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Real%29_method_base
Int.Real	A			Perl 6 Int							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_Real
Int.Int	A			Perl 6 Int							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_Int
Int.Rat	A			Perl 6 Int							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_Rat
Int.Num	A			Perl 6 Int							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_Num
Int.narrow	A			Perl 6 Int							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_narrow
Int.ACCEPTS	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_ACCEPTS
Int.log	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_routine_log
Int.log10	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_routine_log10
Int.exp	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_routine_exp
Int.roots	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_roots
Int.abs	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_routine_abs
Int.sqrt	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_routine_sqrt
Int.conj	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_conj
Int.Bool	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_Bool
Int.succ	A			Perl 6 Int							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_succ
Int.pred	A			Perl 6 Int							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Numeric%29_method_pred
Int.abs	A			Perl 6 Int							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_abs
Int.conj	A			Perl 6 Int							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_conj
Int.sqrt	A			Perl 6 Int							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_sqrt
Int.sign	A			Perl 6 Int							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_sign
Int.rand	A			Perl 6 Int							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_rand
Int.sin	A			Perl 6 Int							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_sin
Int.asin	A			Perl 6 Int							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_asin
Int.cos	A			Perl 6 Int							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_cos
Int.acos	A			Perl 6 Int							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_acos
Int.tan	A			Perl 6 Int							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_tan
Int.atan	A			Perl 6 Int							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_atan
Int.atan2	A			Perl 6 Int							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_atan2
Int.sec	A			Perl 6 Int							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_sec
Int.asec	A			Perl 6 Int							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_asec
Int.cosec	A			Perl 6 Int							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_cosec
Int.acosec	A			Perl 6 Int							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_acosec
Int.cotan	A			Perl 6 Int							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_cotan
Int.acotan	A			Perl 6 Int							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_acotan
Int.sinh	A			Perl 6 Int							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_sinh
Int.asinh	A			Perl 6 Int							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_asinh
Int.cosh	A			Perl 6 Int							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_cosh
Int.acosh	A			Perl 6 Int							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_acosh
Int.tanh	A			Perl 6 Int							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_tanh
Int.atanh	A			Perl 6 Int							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_atanh
Int.sech	A			Perl 6 Int							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_sech
Int.asech	A			Perl 6 Int							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_asech
Int.cosech	A			Perl 6 Int							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_cosech
Int.acosech	A			Perl 6 Int							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_acosech
Int.cotanh	A			Perl 6 Int							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_cotanh
Int.acotanh	A			Perl 6 Int							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_acotanh
Int.cis	A			Perl 6 Int							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_cis
Int.log	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_log
Int.log10	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_log10
Int.exp	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_exp
Int.unpolar	A			Perl 6 Int							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_unpolar
Int.round	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_round
Int.floor	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_floor
Int.ceiling	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_ceiling
Int.truncate	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_truncate
Int.ord	A			Perl 6 Int							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_ord
Int.chr	A			Perl 6 Int							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_chr
Int.chars	A			Perl 6 Int							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_chars
Int.codes	A			Perl 6 Int							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_codes
Int.flip	A			Perl 6 Int							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_flip
Int.trim	A			Perl 6 Int							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_trim
Int.trim-leading	A			Perl 6 Int							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_trim-leading
Int.trim-trailing	A			Perl 6 Int							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_trim-trailing
Int.lc	A			Perl 6 Int							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_lc
Int.uc	A			Perl 6 Int							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_uc
Int.fc	A			Perl 6 Int							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_fc
Int.tc	A			Perl 6 Int							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_tc
Int.tclc	A			Perl 6 Int							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_tclc
Int.wordcase	A			Perl 6 Int							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_wordcase
Int.samecase	A			Perl 6 Int							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_samecase
Int.uniprop	A			Perl 6 Int							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_uniprop
Int.uniprops	A			Perl 6 Int							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_uniprops
Int.uniname	A			Perl 6 Int							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_uniname
Int.uninames	A			Perl 6 Int							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_uninames
Int.unimatch	A			Perl 6 Int							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_unimatch
Int.chop	A			Perl 6 Int							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_chop
Int.chomp	A			Perl 6 Int							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_chomp
Int.substr	A			Perl 6 Int							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_substr
Int.ords	A			Perl 6 Int							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_ords
Int.chrs	A			Perl 6 Int							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_chrs
Int.split	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_split
Int.lines	A			Perl 6 Int							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_lines
Int.words	A			Perl 6 Int							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_words
Int.comb	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_comb
Int.contains	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_contains
Int.index	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_index
Int.rindex	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_rindex
Int.match	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_match
Int.fmt	A			Perl 6 Int							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_fmt
Int.roots	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_roots
Int.IO	A			Perl 6 Int							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_method_IO
Int.EVAL	A			Perl 6 Int							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_EVAL
Int.EVALFILE	A			Perl 6 Int							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Cool%29_routine_EVALFILE
Int.ACCEPTS	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_ACCEPTS
Int.any	A			Perl 6 Int							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_any
Int.all	A			Perl 6 Int							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_all
Int.one	A			Perl 6 Int							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_one
Int.none	A			Perl 6 Int							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_none
Int.list	A			Perl 6 Int							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_list
Int.push	A			Perl 6 Int							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_push
Int.reverse	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_routine_reverse
Int.sort	A			Perl 6 Int							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_sort
Int.map	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_map
Int.deepmap	A			Perl 6 Int							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_deepmap
Int.duckmap	A			Perl 6 Int							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_duckmap
Int.flat	A			Perl 6 Int							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_flat
Int.eager	A			Perl 6 Int							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_eager
Int.elems	A			Perl 6 Int							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_elems
Int.end	A			Perl 6 Int							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_end
Int.pairup	A			Perl 6 Int							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_method_pairup
Int.exit	A			Perl 6 Int							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_sub_exit
Int.item	A			Perl 6 Int							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Any%29_sub_item
Int.defined	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_routine_defined
Int.isa	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_routine_isa
Int.does	A			Perl 6 Int							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_routine_does
Int.Bool	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_routine_Bool
Int.Str	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_Str
Int.gist	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_routine_gist
Int.perl	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_routine_perl
Int.item	A			Perl 6 Int							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_item
Int.clone	A			Perl 6 Int							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_clone
Int.new	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_new
Int.bless	A			Perl 6 Int							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_bless
Int.CREATE	A			Perl 6 Int							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_CREATE
Int.print	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_print
Int.put	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_put
Int.say	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_say
Int.ACCEPTS	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_ACCEPTS
Int.WHICH	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_WHICH
Int.WHERE	A			Perl 6 Int							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_WHERE
Int.WHY	A			Perl 6 Int							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_WHY
Int.export	A			Perl 6 Int							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_trait_is_export
Int.return	A			Perl 6 Int							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_return
Int.return-rw	A			Perl 6 Int							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_return-rw
Int.emit	A			Perl 6 Int							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_emit
Int.take	A			Perl 6 Int							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_take
Int.take	A			Perl 6 Int							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_routine_take
Int.take-rw	A			Perl 6 Int							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_routine_take-rw
Int.so	A			Perl 6 Int							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_so
Int.not	A			Perl 6 Int							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Int.html#%28Mu%29_method_not
IntStr.new	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method new(Int $i, Str $s)\n</code></pre><p>The constructor requires both the Int and the Str value, when constructing one directly the values can be whatever is required:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#method_new
IntStr.Numeric	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method Numeric\n</code></pre><p>The numeric coercion is applied when the IntStr is used in a numeric context, such as a numeric comparison or smart match against a numeric value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#method_Numeric
IntStr.Int	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method Int\n</code></pre><p>Returns the integer value of the IntStr.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#method_Int
IntStr.Str	A			Perl 6 IntStr							<section class="prog__container"><p>Returns the string value of the IntStr.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#method_Str
IntStr.cmp	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub infix:&lt;cmp&gt;(IntStr:D $a, IntStr:D $b)\n</code></pre><p>Compare two IntStr objects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#infix_cmp
IntStr.chop	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    chop(Str:D --&gt; Str:D)\nmulti method chop(Str:D: $chars = 1 --&gt; Str:D)\n</code></pre><p>Returns the string with $chars characters removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_chop
IntStr.chomp	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    chomp(Str:D  --&gt; Str:D)\nmulti method chomp(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string with a logical newline (any codepoint that has the NEWLINE property) removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_chomp
IntStr.lc	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    lc(Str:D  --&gt; Str:D)\nmulti method lc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns a lower-case version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_lc
IntStr.uc	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    uc(Str:D  --&gt; Str:D)\nmulti method uc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns an uppercase version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_uc
IntStr.fc	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    fc(Str:D  --&gt; Str:D)\nmulti method fc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "fold case" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_fc
IntStr.tc	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    tc(Str:D  --&gt; Str:D)\nmulti method tc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_tc
IntStr.tclc	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    tclc(Str:D  --&gt; Str:D)\nmulti method tclc(Str:D: --&gt; Str:D)\n</code></pre><p>Turns the first character to title case, and all other characters to lower case&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_tclc
IntStr.wordcase	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    wordcase(Cool $x  --&gt; Str)\nmulti sub    wordcase(Str:D $x --&gt; Str)\nmulti method wordcase(Str:D: :&amp;filter = &amp;tclc, Mu :$where = True --&gt; Str)\n</code></pre><p>Returns a string in which &amp;filter has been applied to all the words that match $where.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_wordcase
IntStr.unival	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method unival(Str:D --&gt; Numeric)\n</code></pre><p>Returns the numeric value that the first codepoint in the invocant represents, or NaN if it&amp;#39;s not numeric.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_unival
IntStr.univals	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method univals(Str:D --&gt; List)\n</code></pre><p>Returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_univals
IntStr.chars	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    chars(Cool  $x --&gt; Int:D)\nmulti sub    chars(Str:D $x --&gt; Int:D)\nmulti sub    chars(str   $x --&gt; int)\nmulti method chars(Str:D:   --&gt; Int:D)\n</code></pre><p>Returns the number of characters in the string in graphemes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_chars
IntStr.encode	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method encode(Str:D: $encoding, $nf --&gt; Blob)\n</code></pre><p>Returns a Blob which represents the original string in the given encoding and normal form.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_encode
IntStr.index	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    index(Cool $s, Str:D $needle, Cool $startpos = 0 --&gt; Int)\nmulti method index(Cool $needle, Cool $startpos = 0 --&gt; Int)\n</code></pre><p>Searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_index
IntStr.rindex	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    rindex(Str:D $haystack, Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\nmulti method rindex(Str:D $haystack: Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\n</code></pre><p>Returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_rindex
IntStr.match	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method match($pat, :continue(:$c), :pos(:$p), :global(:$g), :overlap(:$ov), :exhaustive(:$ex), :st(:$nd), :rd(:$th), :$nth, :$x --&gt; Match)\n</code></pre><p>Performs a match of the string against $pat and returns a Match object if there is a successful match, and (Any) otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_match
IntStr.parse-base	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    parse-base(Str:D $num, Int:D $radix --&gt; Numeric)\nmulti method parse-base(Str:D $num: Int:D $radix --&gt; Numeric)\n</code></pre><p>Performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_parse-base
IntStr.split	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(Regex:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(List:D $delimiters, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D:   Str:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: Regex:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: List:D $delimiters, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\n</code></pre><p>Splits a string up into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_split
IntStr.comb	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    comb(Str:D   $matcher, Str:D $input, $limit = Inf)\nmulti sub    comb(Regex:D $matcher, Str:D $input, $limit = Inf, Bool :$match)\nmulti sub    comb(Int:D $size, Str:D $input, $limit = Inf)\nmulti method comb(Str:D $input:)\nmulti method comb(Str:D $input: Str:D   $matcher, $limit = Inf)\nmulti method comb(Str:D $input: Regex:D $matcher, $limit = Inf, Bool :$match)\nmulti method comb(Str:D $input: Int:D $size, $limit = Inf)\n</code></pre><p>Searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_comb
IntStr.lines	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    lines(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method lines(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of lines (without trailing newline characters), i.e. the same as a call to $input.comb( / ^^ &#92;N* /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_lines
IntStr.words	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    words(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method words(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of non-whitespace bits, i.e. the same as a call to $input.comb( / &#92;S+ /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_words
IntStr.flip	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    flip(Str:D  --&gt; Str:D)\nmulti method flip(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string reversed character by character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_flip
IntStr.sprintf	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub sprintf( Str:D $format, *@args --&gt; Str:D)\n</code></pre><p>This function is mostly identical to the C library sprintf and printf functions.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_sub_sprintf
IntStr.starts-with	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method starts-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or starts with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_starts-with
IntStr.ends-with	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method ends-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or ends with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_ends-with
IntStr.subst	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method subst(Str:D: $matcher, $replacement, *%opts)\n</code></pre><p>Returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_subst
IntStr.subst-mutate	A			Perl 6 IntStr							<section class="prog__container"><pre><code>my $some-string = "Some foo";\nmy $match = $some-string.subst-mutate(/foo/, "string");\nsay $some-string;  #-&gt; Some string \nsay $match;        #-&gt; ï½¢fooï½£ \n$some-string.subst-mutate(/&lt;[oe]&gt;/, &amp;#39;&amp;#39;, :g); # remove every o and e, notice the :g named argument from .subst \n</code></pre><p>Where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_subst-mutate
IntStr.substr	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    substr(Str:D $s, Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti sub    substr(Str:D $s, Range $from-to --&gt; Str:D)\nmulti method substr(Str:D $s: Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti method substr(Str:D $s: Range $from-to --&gt; Str:D)\n</code></pre><p>Returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_substr
IntStr.substr-eq	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method substr-eq(Str:D:  Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\nmulti method substr-eq(Cool:D: Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\n</code></pre><p>Returns True if the $test-string exactly matches the String object, starting from the given initial index $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_substr-eq
IntStr.substr-rw	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method substr-rw($from, $length?)\n</code></pre><p>A version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_substr-rw
IntStr.samemark	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub samemark(Str:D $string, Str:D $pattern --&gt; Str:D)\nmethod    samemark(Str:D: Str:D $pattern --&gt; Str:D)\n</code></pre><p>Returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_samemark
IntStr.succ	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method succ(Str:D --&gt; Str:D)\n</code></pre><p>Returns the string incremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_succ
IntStr.pred	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method pred(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string decremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_pred
IntStr.ord	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    ord(Str:D  --&gt; Int:D)\nmulti method ord(Str:D: --&gt; Int:D)\n</code></pre><p>Returns the codepoint number of the base characters of the first grapheme in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_routine_ord
IntStr.ords	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method ords(Str:D: --&gt; Positional)\n</code></pre><p>Returns a list of Unicode codepoint numbers that describe the codepoints making up the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_ords
IntStr.trans	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method trans(Str:D: Pair:D &#92;what, *%n --&gt; Str)\nmulti method trans(Str:D: *@changes, :complement(:$c), :squash(:$s), :delete(:$d) --&gt; Str)\n</code></pre><p>Replaces one or many characters with one or many characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_trans
IntStr.indent	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method indent(Int $steps where { $_ == 0 } )\nmulti method indent(Int $steps where { $_ &gt; 0  } )\nmulti method indent($steps where { .isa(Whatever) || .isa(Int) &amp;&amp; $_ &lt; 0 } )\n</code></pre><p>Indents each line of the string by $steps.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_indent
IntStr.trim	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method trim(Str:D: --&gt; Str)\n</code></pre><p>Remove leading and trailing whitespace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_trim
IntStr.trim-trailing	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method trim-trailing(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the end of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_trim-trailing
IntStr.trim-leading	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method trim-leading(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the beginning of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_trim-leading
IntStr.NFC	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method NFC(Str:D: --&gt; NFC:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form C / Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_NFC
IntStr.NFD	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method NFD(Str:D: --&gt; NFD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form D / Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_NFD
IntStr.NFKC	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method NFKC(Str:D: --&gt; NFKC:D)\n</code></pre><p>Returns a codepoint string in NFKC format (Unicode Normalization Form KC / Compatibility Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_NFKC
IntStr.NFKD	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method NFKD(Str:D: --&gt; NFKD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form KD / Compatibility Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_NFKD
IntStr.ACCEPTS	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method ACCEPTS(Str:D: $other)\n</code></pre><p>Returns True if the string is the same as $other.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_method_ACCEPTS
IntStr.val	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub val(Str:D $MAYBEVAL, :$val-or-fail)\n</code></pre><p>Given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Str%29_sub_val
IntStr.chr	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    chr(Int:D  --&gt; Str:D)\nmulti method chr(Int:D: --&gt; Str:D)\n</code></pre><p>Returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Int%29_routine_chr
IntStr.expmod	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    expmod(      $x,     $y,     $mod --&gt; Int:D)\nmulti sub    expmod(Int:D $x, Int $y, Int $mod --&gt; Int:D)\nmulti method expmod(Int:D:    Int $y, Int $mod --&gt; Int:D)\n</code></pre><p>Returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Int%29_routine_expmod
IntStr.polymod	A			Perl 6 IntStr							<section class="prog__container"><pre><code>method polymod(Int:D: +@mods)\n</code></pre><p>Returns a sequence of mod results corresponding to the divisors in @mods.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Int%29_method_polymod
IntStr.is-prime	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    is-prime (Int:D $number --&gt; Bool:D)\nmulti method is-prime (Int:D: --&gt; Bool:D)\n</code></pre><p>Returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Int%29_routine_is-prime
IntStr.lsb	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method lsb(Int:D:)\nmulti sub    lsb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Int%29_routine_lsb
IntStr.msb	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi method msb(Int:D:)\nmulti sub    msb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Int%29_routine_msb
IntStr.unival	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub    unival(Int:D  --&gt; Numeric)\nmulti method unival(Int:D: --&gt; Numeric)\n</code></pre><p>Returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Int%29_routine_unival
IntStr.div	A			Perl 6 IntStr							<section class="prog__container"><pre><code>multi sub infix:&lt;div&gt;(Int:D, Int:D --&gt; Int:D)\n</code></pre><p>Does an integer division, rounded down.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/IntStr.html#%28Int%29_infix_div
IntStr.Rat	R	Real.Rat										
IntStr.rand	R	Real.rand										
IntStr.sign	R	Real.sign										
IntStr.round	R	Real.round										
IntStr.floor	R	Real.floor										
IntStr.ceiling	R	Real.ceiling										
IntStr.truncate	R	Real.truncate										
IntStr.base	R	Real.base										
IntStr.abs	R	Real.abs										
IntStr.conj	R	Real.conj										
IntStr.sqrt	R	Real.sqrt										
IntStr.sign	R	Real.sign										
IntStr.rand	R	Real.rand										
IntStr.sin	R	Real.sin										
IntStr.asin	R	Real.asin										
IntStr.cos	R	Real.cos										
IntStr.acos	R	Real.acos										
IntStr.tan	R	Real.tan										
IntStr.atan	R	Real.atan										
IntStr.atan2	R	Real.atan2										
IntStr.sec	R	Real.sec										
IntStr.asec	R	Real.asec										
IntStr.cosec	R	Real.cosec										
IntStr.acosec	R	Real.acosec										
IntStr.cotan	R	Real.cotan										
IntStr.acotan	R	Real.acotan										
IntStr.sinh	R	Real.sinh										
IntStr.asinh	R	Real.asinh										
IntStr.cosh	R	Real.cosh										
IntStr.acosh	R	Real.acosh										
IntStr.tanh	R	Real.tanh										
IntStr.atanh	R	Real.atanh										
IntStr.sech	R	Real.sech										
IntStr.asech	R	Real.asech										
IntStr.cosech	R	Real.cosech										
IntStr.acosech	R	Real.acosech										
IntStr.cotanh	R	Real.cotanh										
IntStr.acotanh	R	Real.acotanh										
IntStr.cis	R	Real.cis										
IntStr.log	R	Real.log										
IntStr.log10	R	Real.log10										
IntStr.exp	R	Real.exp										
IntStr.unpolar	R	Real.unpolar										
IntStr.round	R	Real.round										
IntStr.floor	R	Real.floor										
IntStr.ceiling	R	Real.ceiling										
IntStr.truncate	R	Real.truncate										
IntStr.ord	R	Real.ord										
IntStr.chr	R	Real.chr										
IntStr.chars	R	Real.chars										
IntStr.codes	R	Real.codes										
IntStr.flip	R	Real.flip										
IntStr.trim	R	Real.trim										
IntStr.trim-leading	R	Real.trim-leading										
IntStr.trim-trailing	R	Real.trim-trailing										
IntStr.lc	R	Real.lc										
IntStr.uc	R	Real.uc										
IntStr.fc	R	Real.fc										
IntStr.tc	R	Real.tc										
IntStr.tclc	R	Real.tclc										
IntStr.wordcase	R	Real.wordcase										
IntStr.samecase	R	Real.samecase										
IntStr.uniprop	R	Real.uniprop										
IntStr.uniprops	R	Real.uniprops										
IntStr.uniname	R	Real.uniname										
IntStr.uninames	R	Real.uninames										
IntStr.unimatch	R	Real.unimatch										
IntStr.chop	R	Real.chop										
IntStr.chomp	R	Real.chomp										
IntStr.substr	R	Real.substr										
IntStr.ords	R	Real.ords										
IntStr.chrs	R	Real.chrs										
IntStr.split	R	Real.split										
IntStr.lines	R	Real.lines										
IntStr.words	R	Real.words										
IntStr.comb	R	Real.comb										
IntStr.contains	R	Real.contains										
IntStr.index	R	Real.index										
IntStr.rindex	R	Real.rindex										
IntStr.match	R	Real.match										
IntStr.fmt	R	Real.fmt										
IntStr.roots	R	Real.roots										
IntStr.IO	R	Real.IO										
IntStr.EVAL	R	Real.EVAL										
IntStr.EVALFILE	R	Real.EVALFILE										
IntStr.ACCEPTS	R	Real.ACCEPTS										
IntStr.any	R	Real.any										
IntStr.all	R	Real.all										
IntStr.one	R	Real.one										
IntStr.none	R	Real.none										
IntStr.list	R	Real.list										
IntStr.push	R	Real.push										
IntStr.reverse	R	Real.reverse										
IntStr.sort	R	Real.sort										
IntStr.map	R	Real.map										
IntStr.deepmap	R	Real.deepmap										
IntStr.duckmap	R	Real.duckmap										
IntStr.flat	R	Real.flat										
IntStr.eager	R	Real.eager										
IntStr.elems	R	Real.elems										
IntStr.end	R	Real.end										
IntStr.pairup	R	Real.pairup										
IntStr.exit	R	Real.exit										
IntStr.item	R	Real.item										
IntStr.defined	R	Real.defined										
IntStr.isa	R	Real.isa										
IntStr.does	R	Real.does										
IntStr.Bool	R	Real.Bool										
IntStr.Str	R	Real.Str										
IntStr.gist	R	Real.gist										
IntStr.perl	R	Real.perl										
IntStr.item	R	Real.item										
IntStr.clone	R	Real.clone										
IntStr.new	R	Real.new										
IntStr.bless	R	Real.bless										
IntStr.CREATE	R	Real.CREATE										
IntStr.print	R	Real.print										
IntStr.put	R	Real.put										
IntStr.say	R	Real.say										
IntStr.ACCEPTS	R	Real.ACCEPTS										
IntStr.WHICH	R	Real.WHICH										
IntStr.WHERE	R	Real.WHERE										
IntStr.WHY	R	Real.WHY										
IntStr.export	R	Real.export										
IntStr.return	R	Real.return										
IntStr.return-rw	R	Real.return-rw										
IntStr.emit	R	Real.emit										
IntStr.take	R	Real.take										
IntStr.take	R	Real.take										
IntStr.take-rw	R	Real.take-rw										
IntStr.so	R	Real.so										
IntStr.not	R	Real.not										
Iterable.iterator	A			Perl 6 Iterable							<section class="prog__container"><pre><code>method iterator(--&gt; Iterator:D)\n</code></pre><p>Method stub that ensures all classes doing the Iterable role have a method iterator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterable.html#method_iterator
Iterable.flat	A			Perl 6 Iterable							<section class="prog__container"><pre><code>method flat(--&gt; Iterable)\n</code></pre><p>Returns another Iterable that flattens out all iterables that the first one returns.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterable.html#method_flat
Iterable.lazy	A			Perl 6 Iterable							<section class="prog__container"><pre><code>method lazy(--&gt; Iterable)\n</code></pre><p>Returns a lazy iterable wrapping the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterable.html#method_lazy
Iterable.hyper	A			Perl 6 Iterable							<section class="prog__container"><pre><code>method hyper(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterable.html#method_hyper
Iterable.race	A			Perl 6 Iterable							<section class="prog__container"><pre><code>method race(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterable.html#method_race
Iterator.pull-one	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method pull-one(Iterator:D: --&gt; Mu)\n</code></pre><p>This method stub ensures that classes implementing the Iterator role provide a method named pull-one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_pull-one
pull-one	R	Iterator.pull-one										
Iterator.push-exactly	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method push-exactly(Iterator:D: $target, int $count --&gt; Mu)\n</code></pre><p>Produces $count elements, and for each of them, calls $target.push($value).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_push-exactly
push-exactly	R	Iterator.push-exactly										
Iterator.push-at-least	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method push-at-least(Iterator:D: $target, int $count --&gt; Mu)\n</code></pre><p>Produces at least $count elements, and for each of them, calls $target.push($value).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_push-at-least
push-at-least	R	Iterator.push-at-least										
Iterator.push-all	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method push-all(Iterator:D: $target)\n</code></pre><p>Produces all elements from the iterator and pushes them to $target.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_push-all
push-all	R	Iterator.push-all										
Iterator.push-until-lazy	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method push-until-lazy(Iterator:D: $target --&gt; Mu)\n</code></pre><p>Produces values until it considers itself to be lazy, and pushes them onto $target.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_push-until-lazy
push-until-lazy	R	Iterator.push-until-lazy										
Iterator.is-lazy	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method is-lazy(Iterator:D: --&gt; Bool:D)\n</code></pre><p>Returns True for iterators that consider themselves lazy, and False otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_is-lazy
is-lazy	D								*[[Iterator.is-lazy]], returns True for iterators that consider themselves lazy, and False otherwise.\n*[[Seq.is-lazy]], returns True if the sequence is lazy and potentially infinite, and False otherwise.			
Iterator.sink-all	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method sink-all(Iterator:D:)\n</code></pre><p>Exhausts the iterator (while discarding generated elements) purely for the side effects of the iteration.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_sink-all
sink-all	R	Iterator.sink-all										
Iterator.skip-one	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method skip-one(Iterator:D: $target --&gt; Mu)\n</code></pre><p>Skips one value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_skip-one
skip-one	R	Iterator.skip-one										
Iterator.skip-at-least	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method skip-at-least(Iterator:D: $target, int $to-skip --&gt; Mu)\n</code></pre><p>Skips $to-skip values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_skip-at-least
skip-at-least	R	Iterator.skip-at-least										
Iterator.skip-at-least-pull-one	A			Perl 6 Iterator							<section class="prog__container"><pre><code>method skip-at-least-pull-one(Iterator:D: $target, int $to-skip --&gt; Mu)\n</code></pre><p>Skips $to-skip values and pulls the next value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Iterator.html#method_skip-at-least-pull-one
skip-at-least-pull-one	R	Iterator.skip-at-least-pull-one										
Junction.defined	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_routine_defined
Junction.isa	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_routine_isa
Junction.does	A			Perl 6 Junction							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_routine_does
Junction.Bool	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_routine_Bool
Junction.Str	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_Str
Junction.gist	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_routine_gist
Junction.perl	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_routine_perl
Junction.item	A			Perl 6 Junction							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_item
Junction.clone	A			Perl 6 Junction							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_clone
Junction.new	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_new
Junction.bless	A			Perl 6 Junction							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_bless
Junction.CREATE	A			Perl 6 Junction							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_CREATE
Junction.print	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_print
Junction.put	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_put
Junction.say	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_say
Junction.ACCEPTS	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_ACCEPTS
Junction.WHICH	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_WHICH
Junction.WHERE	A			Perl 6 Junction							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_WHERE
Junction.WHY	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_WHY
Junction.export	A			Perl 6 Junction							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_trait_is_export
Junction.return	A			Perl 6 Junction							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_return
Junction.return-rw	A			Perl 6 Junction							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_return-rw
Junction.emit	A			Perl 6 Junction							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_emit
Junction.take	A			Perl 6 Junction							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_take
Junction.take	A			Perl 6 Junction							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_routine_take
Junction.take-rw	A			Perl 6 Junction							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_routine_take-rw
Junction.so	A			Perl 6 Junction							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_so
Junction.not	A			Perl 6 Junction							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Junction.html#%28Mu%29_method_not
Label.next	A			Perl 6 Label							<section class="prog__container"><pre><code>method next(Label:)\n</code></pre><p>Begin the next iteration of the loop associated with the label.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#method_next
next	R	Label.next										
Label.last	A			Perl 6 Label							<section class="prog__container"><pre><code>method last(Label:)\n</code></pre><p>Terminate the execution of the loop associated with the label.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#method_last
last	R	Label.last										
Label.ACCEPTS	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_ACCEPTS
Label.any	A			Perl 6 Label							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_any
Label.all	A			Perl 6 Label							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_all
Label.one	A			Perl 6 Label							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_one
Label.none	A			Perl 6 Label							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_none
Label.list	A			Perl 6 Label							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_list
Label.push	A			Perl 6 Label							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_push
Label.reverse	A			Perl 6 Label							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_routine_reverse
Label.sort	A			Perl 6 Label							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_sort
Label.map	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_map
Label.deepmap	A			Perl 6 Label							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_deepmap
Label.duckmap	A			Perl 6 Label							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_duckmap
Label.flat	A			Perl 6 Label							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_flat
Label.eager	A			Perl 6 Label							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_eager
Label.elems	A			Perl 6 Label							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_elems
Label.end	A			Perl 6 Label							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_end
Label.pairup	A			Perl 6 Label							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_method_pairup
Label.exit	A			Perl 6 Label							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_sub_exit
Label.item	A			Perl 6 Label							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Any%29_sub_item
Label.defined	A			Perl 6 Label							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_routine_defined
Label.isa	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_routine_isa
Label.does	A			Perl 6 Label							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_routine_does
Label.Bool	A			Perl 6 Label							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_routine_Bool
Label.Str	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_Str
Label.gist	A			Perl 6 Label							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_routine_gist
Label.perl	A			Perl 6 Label							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_routine_perl
Label.item	A			Perl 6 Label							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_item
Label.clone	A			Perl 6 Label							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_clone
Label.new	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_new
Label.bless	A			Perl 6 Label							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_bless
Label.CREATE	A			Perl 6 Label							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_CREATE
Label.print	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_print
Label.put	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_put
Label.say	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_say
Label.ACCEPTS	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_ACCEPTS
Label.WHICH	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_WHICH
Label.WHERE	A			Perl 6 Label							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_WHERE
Label.WHY	A			Perl 6 Label							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_WHY
Label.export	A			Perl 6 Label							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_trait_is_export
Label.return	A			Perl 6 Label							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_return
Label.return-rw	A			Perl 6 Label							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_return-rw
Label.emit	A			Perl 6 Label							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_emit
Label.take	A			Perl 6 Label							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_take
Label.take	A			Perl 6 Label							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_routine_take
Label.take-rw	A			Perl 6 Label							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_routine_take-rw
Label.so	A			Perl 6 Label							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_so
Label.not	A			Perl 6 Label							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Label.html#%28Mu%29_method_not
List.elems	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    elems($list --&gt; Int:D)\nmulti method elems(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_elems
List.end	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    end($list --&gt; Int:D)\nmulti method end(List:D: --&gt; Int:D)\n</code></pre><p>Returns the index of the last element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_end
List.keys	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    keys($list --&gt; Seq:D)\nmulti method keys(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_keys
List.values	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    values($list --&gt; Seq:D)\nmulti method values(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of the list elements, in order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_values
List.kv	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    kv($list --&gt; Seq:D)\nmulti method kv(List:D: --&gt; Seq:D)\n</code></pre><p>Returns an interleaved sequence of indexes and values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_kv
List.pairs	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    pairs($list --&gt; Seq:D)\nmulti method pairs(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of pairs, with the indexes as keys and the list values as values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_pairs
List.antipairs	A			Perl 6 List							<section class="prog__container"><pre><code>multi method antipairs(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of pairs, with the values as keys and the indexes as values, i.e. the direct opposite to pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_antipairs
List.join	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    join($separator, *@list --&gt; Str:D)\nmulti method join(List:D: $separator --&gt; Str:D)\n</code></pre><p>Treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_join
List.map	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    map(&amp;code, *@elems --&gt; Seq:D)\nmulti method map(List:D: &amp;code --&gt; Seq:D)\n</code></pre><p>Invokes &amp;code for each element and gathers the return values in a sequence and returns it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_map
List.flat	A			Perl 6 List							<section class="prog__container"><pre><code>sub flat(**@list is raw)\n</code></pre><p>Constructs a list which contains any arguments provided in the order provided, and returns the result of calling the .flat method (inherited from Any) on that list:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#sub_flat
List.flatmap	A			Perl 6 List							<section class="prog__container"><pre><code>method flatmap(List:D: &amp;code --&gt; Seq:D)\n</code></pre><p>Like map iterates over the elements of the invocant list, feeding each element in turn to the code reference, and assembling the return values from these invocations in a result list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_flatmap
List.grep	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    grep(Mu $matcher, *@elems, :$k, :$kv, :$p, :$v --&gt; Seq:D)\nmulti method grep(List:D:  Mu $matcher, :$k, :$kv, :$p, :$v --&gt; Seq:D)\n</code></pre><p>Returns a sequence of elements against which $matcher smart-matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_grep
List.first	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    first(Mu $matcher, *@elems, :$k, :$kv, :$p, :$end)\nmulti method first(List:D:  Mu $matcher?, :$k, :$kv, :$p, :$end)\n</code></pre><p>Returns the first item of the list which smart-matches against $matcher, returns Nil when no values match.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_first
List.head	A			Perl 6 List							<section class="prog__container"><pre><code>multi method head(List:D: Int(Cool) $number = 1 --&gt; Seq:D)\n</code></pre><p>Returns the first NUMBER items of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_head
List.tail	A			Perl 6 List							<section class="prog__container"><pre><code>multi method tail(List:D: Int(Cool) $number = 1 --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing the last NUMBER items of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_tail
List.categorize	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    categorize(&amp;mapper, *@values --&gt; Hash:D)\nmulti method categorize(List:D: &amp;mapper   --&gt; Hash:D)\n</code></pre><p>Transforms a list of values into a hash representing the categorizations of those values according to a mapper; each hash key represents one possible categorization for one or more of the incoming list values, and the corresponding hash value contains an array of those list values categorized by the mapper into the category of the associated key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_categorize
List.classify	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    classify(&amp;mapper, *@values --&gt; Hash:D)\nmulti method classify(List:D: &amp;mapper   --&gt; Hash:D)\n</code></pre><p>Transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_classify
List.Bool	A			Perl 6 List							<section class="prog__container"><pre><code>multi method Bool(List:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the list has at least one element, and False for the empty list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_Bool
List.Str	A			Perl 6 List							<section class="prog__container"><pre><code>multi method Str(List:D: --&gt; Str:D)\n</code></pre><p>Stringifies the elements of the list and joins them with spaces (same as .join(&amp;#39; &amp;#39;)).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_Str
List.Int	A			Perl 6 List							<section class="prog__container"><pre><code>multi method Int(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_Int
List.Numeric	A			Perl 6 List							<section class="prog__container"><pre><code>multi method Numeric(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_Numeric
List.Capture	A			Perl 6 List							<section class="prog__container"><pre><code>method Capture(--&gt; Capture:D)\n</code></pre><p>Returns a Capture where each Pair, if any, in the List has been converted to a named argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_Capture
List.pick	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    pick($count, *@list --&gt; Seq:D)\nmulti method pick(List:D: $count --&gt; Seq:D)\nmulti method pick(List:D: --&gt; Mu)\n</code></pre><p>If $count is supplied: Returns $count elements chosen at random and without repetition from the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_pick
List.roll	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    roll($count, *@list --&gt; Seq:D)\nmulti method roll(List:D: $count --&gt; Seq:D)\nmulti method roll(List:D: --&gt; Mu)\n</code></pre><p>If $count is supplied: Returns a sequence of $count elements, each randomly selected from the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_roll
List.eager	A			Perl 6 List							<section class="prog__container"><pre><code>multi method eager(List:D: --&gt; List:D)\nsub eager(*@elems --&gt; List:D)\n</code></pre><p>Evaluates all elements in the list eagerly, and returns them as a list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_eager
List.reverse	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_reverse
List.rotate	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    rotate(@list,  Int:D $n = 1 --&gt; List:D)\nmulti method rotate(List:D: Int:D $n = 1 --&gt; List:D)\n</code></pre><p>Returns the list rotated by $n elements.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_rotate
List.sort	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    sort(*@elems      --&gt; Seq:D)\nmulti sub    sort(&amp;by, *@elems --&gt; Seq:D)\nmulti method sort(List:D:      --&gt; Seq:D)\nmulti method sort(List:D: &amp;by  --&gt; Seq:D)\n</code></pre><p>Sorts the list, smallest element first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_sort
List.unique	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    unique(*@values, :&amp;as, :&amp;with --&gt; Seq:D)\nmulti method unique(List:D:  :&amp;as, :&amp;with --&gt; Seq:D)\n</code></pre><p>Returns a sequence of unique values from the invocant/argument list, such that only the first occurrence of each duplicated value remains in the result list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_unique
List.repeated	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    repeated(*@values, :&amp;as, :&amp;with --&gt; Seq:D)\nmulti method repeated(List:D:  :&amp;as, :&amp;with --&gt; Seq:D)\n</code></pre><p>Returns a sequence of repeated values from the invocant/argument list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_repeated
List.squish	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    squish(*@values, :&amp;as --&gt; Seq:D)\nmulti method squish(List:D:  :&amp;as --&gt; Seq:D)\n</code></pre><p>Returns a sequence of values from the invocant/argument list where runs of more than one value are replaced with only the first instance.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_squish
List.reduce	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    reduce(&amp;with, *@values)\nmulti method reduce(List:D: &amp;with)\n</code></pre><p>Generates a single "combined" value from a list of arbitrarily many of values, by iteratively applying a function which knows how to combine two values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_reduce
List.produce	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    produce(&amp;with, *@values)\nmulti method produce(List:D: &amp;with)\n</code></pre><p>Generates a list of all intermediate "combined" values along with the final result by iteratively applying a function which knows how to combine two values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_produce
List.combinations	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    combinations($n, $k                     --&gt; Seq:D)\nmulti method combinations(List:D: Int:D $of          --&gt; Seq:D)\nmulti method combinations(List:D: Range:D $of = 0..* --&gt; Seq:D)\n</code></pre><p>The Int variant returns all $of-combinations of the invocant list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_combinations
List.permutations	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    permutations($n      --&gt; Seq:D)\nmulti method permutations(List:D: --&gt; Seq:D)\n</code></pre><p>Returns all possible permutations of a list as a sequence of lists.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_permutations
List.rotor	A			Perl 6 List							<section class="prog__container"><pre><code>method rotor(*@cycle, Bool() :$partial --&gt; Seq:D)\n</code></pre><p>Returns a sequence of lists, where each sublist is made up of elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_rotor
List.cross	A			Perl 6 List							<section class="prog__container"><pre><code>sub cross(+@e, :&amp;with --&gt; Seq:D)\n</code></pre><p>Computes the cross-product of two or more lists or iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_cross
List.zip	A			Perl 6 List							<section class="prog__container"><pre><code>sub zip(+@e, :&amp;with --&gt; Seq:D)\n</code></pre><p>Builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_zip
List.roundrobin	A			Perl 6 List							<section class="prog__container"><pre><code>method roundrobin(List:D: --&gt; Seq)\n</code></pre><p>Builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#sub_roundrobin
List.sum	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    sum($list   --&gt; Numeric:D)\nmulti method sum(List:D: --&gt; Numeric:D)\n</code></pre><p>Returns the sum of all elements in the list or 0 if the list is empty.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#routine_sum
List.fmt	A			Perl 6 List							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39;, $separator = &amp;#39; &amp;#39; --&gt; Str:D)\n</code></pre><p>Returns a string where each element in the list has been formatted according to $format and where each element is separated by $separator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_fmt
List.from	A			Perl 6 List							<section class="prog__container"><pre><code>&amp;#39;abcdefg&amp;#39; ~~ /(c)(d)/;\nsay $/.list.from;         # 2 \n \n"abc123def" ~~ m:g/&#92;d/;\nsay $/.list.from;         # 3 \n</code></pre><p>Assumes the list contains Match objects and returns the value of .from called on the first element of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_from
List.to	A			Perl 6 List							<section class="prog__container"><pre><code>"abc123def" ~~ m:g/&#92;d/;\nsay $/.to; # 6 \n</code></pre><p>Assumes the List contains Match objects, such as the $/ variable being a List, when using :g modifier in regexes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#method_to
List.of	A			Perl 6 List							<section class="prog__container"><pre><code>method of()\n</code></pre><p>Returns the type constraint for elements of the positional container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Positional%29_method_of
List.iterator	A			Perl 6 List							<section class="prog__container"><pre><code>method iterator(--&gt; Iterator:D)\n</code></pre><p>Method stub that ensures all classes doing the Iterable role have a method iterator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Iterable%29_method_iterator
List.flat	A			Perl 6 List							<section class="prog__container"><pre><code>method flat(--&gt; Iterable)\n</code></pre><p>Returns another Iterable that flattens out all iterables that the first one returns.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Iterable%29_method_flat
List.lazy	A			Perl 6 List							<section class="prog__container"><pre><code>method lazy(--&gt; Iterable)\n</code></pre><p>Returns a lazy iterable wrapping the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Iterable%29_method_lazy
List.hyper	A			Perl 6 List							<section class="prog__container"><pre><code>method hyper(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Iterable%29_method_hyper
List.race	A			Perl 6 List							<section class="prog__container"><pre><code>method race(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Iterable%29_method_race
List.abs	A			Perl 6 List							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_abs
List.conj	A			Perl 6 List							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_conj
List.sqrt	A			Perl 6 List							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_sqrt
List.sign	A			Perl 6 List							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_sign
List.rand	A			Perl 6 List							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_rand
List.sin	A			Perl 6 List							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_sin
List.asin	A			Perl 6 List							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_asin
List.cos	A			Perl 6 List							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_cos
List.acos	A			Perl 6 List							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_acos
List.tan	A			Perl 6 List							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_tan
List.atan	A			Perl 6 List							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_atan
List.atan2	A			Perl 6 List							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_atan2
List.sec	A			Perl 6 List							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_sec
List.asec	A			Perl 6 List							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_asec
List.cosec	A			Perl 6 List							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_cosec
List.acosec	A			Perl 6 List							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_acosec
List.cotan	A			Perl 6 List							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_cotan
List.acotan	A			Perl 6 List							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_acotan
List.sinh	A			Perl 6 List							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_sinh
List.asinh	A			Perl 6 List							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_asinh
List.cosh	A			Perl 6 List							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_cosh
List.acosh	A			Perl 6 List							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_acosh
List.tanh	A			Perl 6 List							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_tanh
List.atanh	A			Perl 6 List							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_atanh
List.sech	A			Perl 6 List							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_sech
List.asech	A			Perl 6 List							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_asech
List.cosech	A			Perl 6 List							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_cosech
List.acosech	A			Perl 6 List							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_acosech
List.cotanh	A			Perl 6 List							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_cotanh
List.acotanh	A			Perl 6 List							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_acotanh
List.cis	A			Perl 6 List							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_cis
List.log	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_log
List.log10	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_log10
List.exp	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_exp
List.unpolar	A			Perl 6 List							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_unpolar
List.round	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_round
List.floor	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_floor
List.ceiling	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_ceiling
List.truncate	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_truncate
List.ord	A			Perl 6 List							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_ord
List.chr	A			Perl 6 List							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_chr
List.chars	A			Perl 6 List							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_chars
List.codes	A			Perl 6 List							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_codes
List.flip	A			Perl 6 List							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_flip
List.trim	A			Perl 6 List							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_trim
List.trim-leading	A			Perl 6 List							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_trim-leading
List.trim-trailing	A			Perl 6 List							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_trim-trailing
List.lc	A			Perl 6 List							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_lc
List.uc	A			Perl 6 List							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_uc
List.fc	A			Perl 6 List							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_fc
List.tc	A			Perl 6 List							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_tc
List.tclc	A			Perl 6 List							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_tclc
List.wordcase	A			Perl 6 List							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_wordcase
List.samecase	A			Perl 6 List							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_samecase
List.uniprop	A			Perl 6 List							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_uniprop
List.uniprops	A			Perl 6 List							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_uniprops
List.uniname	A			Perl 6 List							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_uniname
List.uninames	A			Perl 6 List							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_uninames
List.unimatch	A			Perl 6 List							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_unimatch
List.chop	A			Perl 6 List							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_chop
List.chomp	A			Perl 6 List							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_chomp
List.substr	A			Perl 6 List							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_substr
List.ords	A			Perl 6 List							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_ords
List.chrs	A			Perl 6 List							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_chrs
List.split	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_split
List.lines	A			Perl 6 List							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_lines
List.words	A			Perl 6 List							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_words
List.comb	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_comb
List.contains	A			Perl 6 List							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_contains
List.index	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_index
List.rindex	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_rindex
List.match	A			Perl 6 List							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_match
List.fmt	A			Perl 6 List							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_fmt
List.roots	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_roots
List.IO	A			Perl 6 List							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_method_IO
List.EVAL	A			Perl 6 List							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_EVAL
List.EVALFILE	A			Perl 6 List							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Cool%29_routine_EVALFILE
List.ACCEPTS	A			Perl 6 List							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_ACCEPTS
List.any	A			Perl 6 List							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_any
List.all	A			Perl 6 List							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_all
List.one	A			Perl 6 List							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_one
List.none	A			Perl 6 List							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_none
List.list	A			Perl 6 List							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_list
List.push	A			Perl 6 List							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_push
List.reverse	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_routine_reverse
List.sort	A			Perl 6 List							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_sort
List.map	A			Perl 6 List							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_map
List.deepmap	A			Perl 6 List							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_deepmap
List.duckmap	A			Perl 6 List							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_duckmap
List.flat	A			Perl 6 List							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_flat
List.eager	A			Perl 6 List							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_eager
List.elems	A			Perl 6 List							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_elems
List.end	A			Perl 6 List							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_end
List.pairup	A			Perl 6 List							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_method_pairup
List.exit	A			Perl 6 List							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_sub_exit
List.item	A			Perl 6 List							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Any%29_sub_item
List.defined	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_routine_defined
List.isa	A			Perl 6 List							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_routine_isa
List.does	A			Perl 6 List							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_routine_does
List.Bool	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_routine_Bool
List.Str	A			Perl 6 List							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_Str
List.gist	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_routine_gist
List.perl	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_routine_perl
List.item	A			Perl 6 List							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_item
List.clone	A			Perl 6 List							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_clone
List.new	A			Perl 6 List							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_new
List.bless	A			Perl 6 List							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_bless
List.CREATE	A			Perl 6 List							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_CREATE
List.print	A			Perl 6 List							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_print
List.put	A			Perl 6 List							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_put
List.say	A			Perl 6 List							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_say
List.ACCEPTS	A			Perl 6 List							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_ACCEPTS
List.WHICH	A			Perl 6 List							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_WHICH
List.WHERE	A			Perl 6 List							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_WHERE
List.WHY	A			Perl 6 List							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_WHY
List.export	A			Perl 6 List							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_trait_is_export
List.return	A			Perl 6 List							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_return
List.return-rw	A			Perl 6 List							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_return-rw
List.emit	A			Perl 6 List							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_emit
List.take	A			Perl 6 List							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_take
List.take	A			Perl 6 List							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_routine_take
List.take-rw	A			Perl 6 List							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_routine_take-rw
List.so	A			Perl 6 List							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_so
List.not	A			Perl 6 List							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/List.html#%28Mu%29_method_not
Lock.protect	A			Perl 6 Lock							<section class="prog__container"><pre><code>method protect(Lock:D: &amp;code)\n</code></pre><p>Runs &amp;code and makes sure it is only run in one thread at once.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#method_protect
protect	R	Lock.protect										
Lock.lock	A			Perl 6 Lock							<section class="prog__container"><pre><code>method lock(Lock:D:)\n</code></pre><p>Acquires the lock.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#method_lock
lock	R	Lock.lock										
Lock.unlock	A			Perl 6 Lock							<section class="prog__container"><pre><code>method unlock(Lock:D:)\n</code></pre><p>Releases the lock.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#method_unlock
unlock	R	Lock.unlock										
Lock.condition	A			Perl 6 Lock							<section class="prog__container"><pre><code>my class ConditionVariable {\n    method wait();\n    method signal();\n    method signal_all();\n}\n \nmethod condition(Lock:D: --&gt; ConditionVariable:D)\n</code></pre><p>Returns a condition variable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#method_condition
condition	R	Lock.condition										
Lock.ACCEPTS	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_ACCEPTS
Lock.any	A			Perl 6 Lock							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_any
Lock.all	A			Perl 6 Lock							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_all
Lock.one	A			Perl 6 Lock							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_one
Lock.none	A			Perl 6 Lock							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_none
Lock.list	A			Perl 6 Lock							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_list
Lock.push	A			Perl 6 Lock							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_push
Lock.reverse	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_routine_reverse
Lock.sort	A			Perl 6 Lock							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_sort
Lock.map	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_map
Lock.deepmap	A			Perl 6 Lock							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_deepmap
Lock.duckmap	A			Perl 6 Lock							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_duckmap
Lock.flat	A			Perl 6 Lock							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_flat
Lock.eager	A			Perl 6 Lock							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_eager
Lock.elems	A			Perl 6 Lock							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_elems
Lock.end	A			Perl 6 Lock							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_end
Lock.pairup	A			Perl 6 Lock							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_method_pairup
Lock.exit	A			Perl 6 Lock							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_sub_exit
Lock.item	A			Perl 6 Lock							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Any%29_sub_item
Lock.defined	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_routine_defined
Lock.isa	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_routine_isa
Lock.does	A			Perl 6 Lock							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_routine_does
Lock.Bool	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_routine_Bool
Lock.Str	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_Str
Lock.gist	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_routine_gist
Lock.perl	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_routine_perl
Lock.item	A			Perl 6 Lock							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_item
Lock.clone	A			Perl 6 Lock							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_clone
Lock.new	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_new
Lock.bless	A			Perl 6 Lock							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_bless
Lock.CREATE	A			Perl 6 Lock							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_CREATE
Lock.print	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_print
Lock.put	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_put
Lock.say	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_say
Lock.ACCEPTS	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_ACCEPTS
Lock.WHICH	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_WHICH
Lock.WHERE	A			Perl 6 Lock							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_WHERE
Lock.WHY	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_WHY
Lock.export	A			Perl 6 Lock							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_trait_is_export
Lock.return	A			Perl 6 Lock							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_return
Lock.return-rw	A			Perl 6 Lock							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_return-rw
Lock.emit	A			Perl 6 Lock							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_emit
Lock.take	A			Perl 6 Lock							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_take
Lock.take	A			Perl 6 Lock							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_routine_take
Lock.take-rw	A			Perl 6 Lock							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_routine_take-rw
Lock.so	A			Perl 6 Lock							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_so
Lock.not	A			Perl 6 Lock							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Lock.html#%28Mu%29_method_not
Macro.name	A			Perl 6 Macro							<section class="prog__container"><pre><code>method name(Routine:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_method_name
Macro.package	A			Perl 6 Macro							<section class="prog__container"><pre><code>method package(Routine:D:)\n</code></pre><p>Returns the package in which the routine is defined.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_method_package
Macro.multi	A			Perl 6 Macro							<section class="prog__container"><pre><code>method multi(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a multi sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_method_multi
multi	D								*[[Macro.multi]], returns True if the routine is a multi sub or method.\n*[[Method.multi]], returns True if the routine is a multi sub or method.\n*[[Regex.multi]], returns True if the routine is a multi sub or method.\n*[[Routine.multi]], returns True if the routine is a multi sub or method.\n*[[Sub.multi]], returns True if the routine is a multi sub or method.\n*[[Submethod.multi]], returns True if the routine is a multi sub or method.			
Macro.candidates	A			Perl 6 Macro							<section class="prog__container"><pre><code>method candidates(Routine:D: --&gt; Positional:D)\n</code></pre><p>Returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_method_candidates
candidates	D								*[[Macro.candidates]], returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi\n*[[Method.candidates]], returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi\n*[[Regex.candidates]], returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi\n*[[Routine.candidates]], returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi\n*[[Sub.candidates]], returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi\n*[[Submethod.candidates]], returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi			
Macro.cando	A			Perl 6 Macro							<section class="prog__container"><pre><code>method cando(Capture $c)\n</code></pre><p>Returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_method_cando
cando	D								*[[Macro.cando]], returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.\n*[[Method.cando]], returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.\n*[[Regex.cando]], returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.\n*[[Routine.cando]], returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.\n*[[Sub.cando]], returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.\n*[[Submethod.cando]], returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.			
Macro.wrap	A			Perl 6 Macro							<section class="prog__container"><pre><code>method wrap(Routine:D: &amp;wrapper)\n</code></pre><p>Wraps (i.e. in-place modifies) the routine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_method_wrap
wrap	D								*[[Macro.wrap]], wraps (i.e. \n*[[Method.wrap]], wraps (i.e. \n*[[Regex.wrap]], wraps (i.e. \n*[[Routine.wrap]], wraps (i.e. \n*[[Sub.wrap]], wraps (i.e. \n*[[Submethod.wrap]], wraps (i.e. 			
Macro.unwrap	A			Perl 6 Macro							<section class="prog__container"><pre><code>method unwrap(Routine:D: $wraphandler)\n</code></pre><p>Restores the original routine after it has been wrapped with wrap.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_method_unwrap
unwrap	D								*[[Macro.unwrap]], restores the original routine after it has been wrapped with wrap.\n*[[Method.unwrap]], restores the original routine after it has been wrapped with wrap.\n*[[Regex.unwrap]], restores the original routine after it has been wrapped with wrap.\n*[[Routine.unwrap]], restores the original routine after it has been wrapped with wrap.\n*[[Sub.unwrap]], restores the original routine after it has been wrapped with wrap.\n*[[Submethod.unwrap]], restores the original routine after it has been wrapped with wrap.			
Macro.yada	A			Perl 6 Macro							<section class="prog__container"><pre><code>method yada(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a stub&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_method_yada
yada	D								*[[Macro.yada]], returns True if the routine is a stub\n*[[Method.yada]], returns True if the routine is a stub\n*[[Regex.yada]], returns True if the routine is a stub\n*[[Routine.yada]], returns True if the routine is a stub\n*[[Sub.yada]], returns True if the routine is a stub\n*[[Submethod.yada]], returns True if the routine is a stub			
Macro.cached	A			Perl 6 Macro							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$cached!)\n</code></pre><p>NOTE: this feature is currently EXPERIMENTAL.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_trait_is_cached
cached	D								*[[Macro.cached]], nOTE: this feature is currently EXPERIMENTAL.\n*[[Method.cached]], nOTE: this feature is currently EXPERIMENTAL.\n*[[Regex.cached]], nOTE: this feature is currently EXPERIMENTAL.\n*[[Routine.cached]], nOTE: this feature is currently EXPERIMENTAL.\n*[[Sub.cached]], nOTE: this feature is currently EXPERIMENTAL.\n*[[Submethod.cached]], nOTE: this feature is currently EXPERIMENTAL.			
Macro.pure	A			Perl 6 Macro							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$pure!)\n</code></pre><p>Marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_trait_is_pure
pure	D								*[[Macro.pure]], marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.\n*[[Method.pure]], marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.\n*[[Regex.pure]], marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.\n*[[Routine.pure]], marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.\n*[[Sub.pure]], marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.\n*[[Submethod.pure]], marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.			
Macro.rw	A			Perl 6 Macro							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$rw!)\n</code></pre><p>When a routine is modified with this trait, its return value will be writable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_trait_is_rw
Macro.export	A			Perl 6 Macro							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$export!)\n</code></pre><p>Marks a routine as exported to the rest of the world&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_trait_is_export
Macro.DEPRECATED	A			Perl 6 Macro							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D $r, :$DEPRECATED!)\n</code></pre><p>Marks a routine as deprecated, optionally with a message what to use instead.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_trait_is_DEPRECATED
DEPRECATED	D								*[[Macro.DEPRECATED]], marks a routine as deprecated, optionally with a message what to use instead.\n*[[Method.DEPRECATED]], marks a routine as deprecated, optionally with a message what to use instead.\n*[[Regex.DEPRECATED]], marks a routine as deprecated, optionally with a message what to use instead.\n*[[Routine.DEPRECATED]], marks a routine as deprecated, optionally with a message what to use instead.\n*[[Sub.DEPRECATED]], marks a routine as deprecated, optionally with a message what to use instead.\n*[[Submethod.DEPRECATED]], marks a routine as deprecated, optionally with a message what to use instead.			
Macro.hidden-from-backtrace	A			Perl 6 Macro							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D, :$hidden-from-backtrace!)\n</code></pre><p>Hides a routine from showing up in a default backtrace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Routine%29_trait_is_hidden-from-backtrace
hidden-from-backtrace	D								*[[Macro.hidden-from-backtrace]], hides a routine from showing up in a default backtrace.\n*[[Method.hidden-from-backtrace]], hides a routine from showing up in a default backtrace.\n*[[Regex.hidden-from-backtrace]], hides a routine from showing up in a default backtrace.\n*[[Routine.hidden-from-backtrace]], hides a routine from showing up in a default backtrace.\n*[[Sub.hidden-from-backtrace]], hides a routine from showing up in a default backtrace.\n*[[Submethod.hidden-from-backtrace]], hides a routine from showing up in a default backtrace.			
Macro.ACCEPTS	A			Perl 6 Macro							<section class="prog__container"><pre><code>multi method ACCEPTS(Code:D: Mu $topic)\n</code></pre><p>Usually calls the code object and passes $topic as an argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Code%29_method_ACCEPTS
Macro.arity	A			Perl 6 Macro							<section class="prog__container"><pre><code>method arity(Code:D: --&gt; Int:D)\n</code></pre><p>Returns the minimum number of positional arguments that must be passed in order to call the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Code%29_method_arity
Macro.count	A			Perl 6 Macro							<section class="prog__container"><pre><code>method count(Code:D: --&gt; Real:D)\n</code></pre><p>Returns the maximum number of positional arguments that may be passed when calling the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Code%29_method_count
Macro.signature	A			Perl 6 Macro							<section class="prog__container"><pre><code>multi method signature(Code:D: --&gt; Signature:D)\n</code></pre><p>Returns the Signature object for this code object, which describes its parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Code%29_method_signature
Macro.Str	A			Perl 6 Macro							<section class="prog__container"><pre><code>multi method Str(Code:D: --&gt; Str:D)\n</code></pre><p>Will produce a warning.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Code%29_method_Str
Macro.file	A			Perl 6 Macro							<section class="prog__container"><pre><code>method file(Code:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the file in which the code object was declared.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Code%29_method_file
Macro.line	A			Perl 6 Macro							<section class="prog__container"><pre><code>method line(Code:D: --&gt; Int:D)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Macro.html#%28Code%29_method_line
Macro.CALL-ME	R	Callable.CALL-ME										
Macro.assuming	R	Callable.assuming										
Macro.ACCEPTS	R	Callable.ACCEPTS										
Macro.any	R	Callable.any										
Macro.all	R	Callable.all										
Macro.one	R	Callable.one										
Macro.none	R	Callable.none										
Macro.list	R	Callable.list										
Macro.push	R	Callable.push										
Macro.reverse	R	Callable.reverse										
Macro.sort	R	Callable.sort										
Macro.map	R	Callable.map										
Macro.deepmap	R	Callable.deepmap										
Macro.duckmap	R	Callable.duckmap										
Macro.flat	R	Callable.flat										
Macro.eager	R	Callable.eager										
Macro.elems	R	Callable.elems										
Macro.end	R	Callable.end										
Macro.pairup	R	Callable.pairup										
Macro.exit	R	Callable.exit										
Macro.item	R	Callable.item										
Macro.defined	R	Callable.defined										
Macro.isa	R	Callable.isa										
Macro.does	R	Callable.does										
Macro.Bool	R	Callable.Bool										
Macro.Str	R	Callable.Str										
Macro.gist	R	Callable.gist										
Macro.perl	R	Callable.perl										
Macro.item	R	Callable.item										
Macro.clone	R	Callable.clone										
Macro.new	R	Callable.new										
Macro.bless	R	Callable.bless										
Macro.CREATE	R	Callable.CREATE										
Macro.print	R	Callable.print										
Macro.put	R	Callable.put										
Macro.say	R	Callable.say										
Macro.ACCEPTS	R	Callable.ACCEPTS										
Macro.WHICH	R	Callable.WHICH										
Macro.WHERE	R	Callable.WHERE										
Macro.WHY	R	Callable.WHY										
Macro.export	R	Callable.export										
Macro.return	R	Callable.return										
Macro.return-rw	R	Callable.return-rw										
Macro.emit	R	Callable.emit										
Macro.take	R	Callable.take										
Macro.take	R	Callable.take										
Macro.take-rw	R	Callable.take-rw										
Macro.so	R	Callable.so										
Macro.not	R	Callable.not										
Map.new	A			Perl 6 Map							<section class="prog__container"><pre><code>method new(*@args)\n</code></pre><p>Creates a new Map from a list of alternating keys and values, with the same semantics as described for hash assigning in the Hash documentation, except, for literal pair handling.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_new
Map.elems	A			Perl 6 Map							<section class="prog__container"><pre><code>method elems(Map:D: --&gt; Int:D)\n</code></pre><p>Returns the number of pairs stored in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_elems
Map.ACCEPTS	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method ACCEPTS(Map:D: Positional $topic)\nmulti method ACCEPTS(Map:D: Cool:D     $topic)\nmulti method ACCEPTS(Map:D: Regex      $topic)\nmulti method ACCEPTS(Map:D: Any        $topic)\n</code></pre><p>Used in smart-matching if the right-hand side is an Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_ACCEPTS
Map.keys	A			Perl 6 Map							<section class="prog__container"><pre><code>method keys(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of all keys in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_keys
Map.values	A			Perl 6 Map							<section class="prog__container"><pre><code>method values(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of all values in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_values
Map.pairs	A			Perl 6 Map							<section class="prog__container"><pre><code>method pairs(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of all pairs in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_pairs
Map.antipairs	A			Perl 6 Map							<section class="prog__container"><pre><code>method antipairs(Map:D: --&gt; Seq:D)\n</code></pre><p>Returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_antipairs
Map.invert	A			Perl 6 Map							<section class="prog__container"><pre><code>method invert(Map:D: --&gt; Seq:D)\n</code></pre><p>Returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_invert
Map.kv	A			Perl 6 Map							<section class="prog__container"><pre><code>method kv(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of keys and values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_kv
Map.Int	A			Perl 6 Map							<section class="prog__container"><pre><code>method Int(Map:D: --&gt; Int:D)\n</code></pre><p>Returns the number of pairs stored in the Map (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_Int
Map.Numeric	A			Perl 6 Map							<section class="prog__container"><pre><code>method Numeric(Map:D: --&gt; Int:D)\n</code></pre><p>Returns the number of pairs stored in the Map (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_Numeric
Map.Bool	A			Perl 6 Map							<section class="prog__container"><pre><code>method Bool(Map:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one key/value pair.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_Bool
Map.Capture	A			Perl 6 Map							<section class="prog__container"><pre><code>method Capture(Map:D: --&gt; Capture:D)\n</code></pre><p>Returns a Capture where each key, if any, has been converted to a named argument with the same value as it had in the original Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#method_Capture
Map.iterator	A			Perl 6 Map							<section class="prog__container"><pre><code>method iterator(--&gt; Iterator:D)\n</code></pre><p>Method stub that ensures all classes doing the Iterable role have a method iterator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Iterable%29_method_iterator
Map.flat	A			Perl 6 Map							<section class="prog__container"><pre><code>method flat(--&gt; Iterable)\n</code></pre><p>Returns another Iterable that flattens out all iterables that the first one returns.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Iterable%29_method_flat
Map.lazy	A			Perl 6 Map							<section class="prog__container"><pre><code>method lazy(--&gt; Iterable)\n</code></pre><p>Returns a lazy iterable wrapping the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Iterable%29_method_lazy
Map.hyper	A			Perl 6 Map							<section class="prog__container"><pre><code>method hyper(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Iterable%29_method_hyper
Map.race	A			Perl 6 Map							<section class="prog__container"><pre><code>method race(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Iterable%29_method_race
Map.abs	A			Perl 6 Map							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_abs
Map.conj	A			Perl 6 Map							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_conj
Map.sqrt	A			Perl 6 Map							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_sqrt
Map.sign	A			Perl 6 Map							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_sign
Map.rand	A			Perl 6 Map							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_rand
Map.sin	A			Perl 6 Map							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_sin
Map.asin	A			Perl 6 Map							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_asin
Map.cos	A			Perl 6 Map							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_cos
Map.acos	A			Perl 6 Map							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_acos
Map.tan	A			Perl 6 Map							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_tan
Map.atan	A			Perl 6 Map							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_atan
Map.atan2	A			Perl 6 Map							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_atan2
Map.sec	A			Perl 6 Map							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_sec
Map.asec	A			Perl 6 Map							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_asec
Map.cosec	A			Perl 6 Map							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_cosec
Map.acosec	A			Perl 6 Map							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_acosec
Map.cotan	A			Perl 6 Map							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_cotan
Map.acotan	A			Perl 6 Map							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_acotan
Map.sinh	A			Perl 6 Map							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_sinh
Map.asinh	A			Perl 6 Map							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_asinh
Map.cosh	A			Perl 6 Map							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_cosh
Map.acosh	A			Perl 6 Map							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_acosh
Map.tanh	A			Perl 6 Map							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_tanh
Map.atanh	A			Perl 6 Map							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_atanh
Map.sech	A			Perl 6 Map							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_sech
Map.asech	A			Perl 6 Map							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_asech
Map.cosech	A			Perl 6 Map							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_cosech
Map.acosech	A			Perl 6 Map							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_acosech
Map.cotanh	A			Perl 6 Map							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_cotanh
Map.acotanh	A			Perl 6 Map							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_acotanh
Map.cis	A			Perl 6 Map							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_cis
Map.log	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_log
Map.log10	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_log10
Map.exp	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_exp
Map.unpolar	A			Perl 6 Map							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_unpolar
Map.round	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_round
Map.floor	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_floor
Map.ceiling	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_ceiling
Map.truncate	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_truncate
Map.ord	A			Perl 6 Map							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_ord
Map.chr	A			Perl 6 Map							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_chr
Map.chars	A			Perl 6 Map							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_chars
Map.codes	A			Perl 6 Map							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_codes
Map.flip	A			Perl 6 Map							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_flip
Map.trim	A			Perl 6 Map							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_trim
Map.trim-leading	A			Perl 6 Map							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_trim-leading
Map.trim-trailing	A			Perl 6 Map							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_trim-trailing
Map.lc	A			Perl 6 Map							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_lc
Map.uc	A			Perl 6 Map							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_uc
Map.fc	A			Perl 6 Map							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_fc
Map.tc	A			Perl 6 Map							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_tc
Map.tclc	A			Perl 6 Map							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_tclc
Map.wordcase	A			Perl 6 Map							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_wordcase
Map.samecase	A			Perl 6 Map							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_samecase
Map.uniprop	A			Perl 6 Map							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_uniprop
Map.uniprops	A			Perl 6 Map							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_uniprops
Map.uniname	A			Perl 6 Map							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_uniname
Map.uninames	A			Perl 6 Map							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_uninames
Map.unimatch	A			Perl 6 Map							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_unimatch
Map.chop	A			Perl 6 Map							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_chop
Map.chomp	A			Perl 6 Map							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_chomp
Map.substr	A			Perl 6 Map							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_substr
Map.ords	A			Perl 6 Map							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_ords
Map.chrs	A			Perl 6 Map							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_chrs
Map.split	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_split
Map.lines	A			Perl 6 Map							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_lines
Map.words	A			Perl 6 Map							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_words
Map.comb	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_comb
Map.contains	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_contains
Map.index	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_index
Map.rindex	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_rindex
Map.match	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_match
Map.fmt	A			Perl 6 Map							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_fmt
Map.roots	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_roots
Map.IO	A			Perl 6 Map							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_method_IO
Map.EVAL	A			Perl 6 Map							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_EVAL
Map.EVALFILE	A			Perl 6 Map							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Cool%29_routine_EVALFILE
Map.ACCEPTS	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_ACCEPTS
Map.any	A			Perl 6 Map							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_any
Map.all	A			Perl 6 Map							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_all
Map.one	A			Perl 6 Map							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_one
Map.none	A			Perl 6 Map							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_none
Map.list	A			Perl 6 Map							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_list
Map.push	A			Perl 6 Map							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_push
Map.reverse	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_routine_reverse
Map.sort	A			Perl 6 Map							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_sort
Map.map	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_map
Map.deepmap	A			Perl 6 Map							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_deepmap
Map.duckmap	A			Perl 6 Map							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_duckmap
Map.flat	A			Perl 6 Map							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_flat
Map.eager	A			Perl 6 Map							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_eager
Map.elems	A			Perl 6 Map							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_elems
Map.end	A			Perl 6 Map							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_end
Map.pairup	A			Perl 6 Map							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_method_pairup
Map.exit	A			Perl 6 Map							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_sub_exit
Map.item	A			Perl 6 Map							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Any%29_sub_item
Map.defined	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_routine_defined
Map.isa	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_routine_isa
Map.does	A			Perl 6 Map							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_routine_does
Map.Bool	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_routine_Bool
Map.Str	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_Str
Map.gist	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_routine_gist
Map.perl	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_routine_perl
Map.item	A			Perl 6 Map							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_item
Map.clone	A			Perl 6 Map							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_clone
Map.new	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_new
Map.bless	A			Perl 6 Map							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_bless
Map.CREATE	A			Perl 6 Map							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_CREATE
Map.print	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_print
Map.put	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_put
Map.say	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_say
Map.ACCEPTS	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_ACCEPTS
Map.WHICH	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_WHICH
Map.WHERE	A			Perl 6 Map							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_WHERE
Map.WHY	A			Perl 6 Map							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_WHY
Map.export	A			Perl 6 Map							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_trait_is_export
Map.return	A			Perl 6 Map							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_return
Map.return-rw	A			Perl 6 Map							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_return-rw
Map.emit	A			Perl 6 Map							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_emit
Map.take	A			Perl 6 Map							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_take
Map.take	A			Perl 6 Map							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_routine_take
Map.take-rw	A			Perl 6 Map							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_routine_take-rw
Map.so	A			Perl 6 Map							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_so
Map.not	A			Perl 6 Map							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Map.html#%28Mu%29_method_not
Match.orig	A			Perl 6 Match							<section class="prog__container"><p>Returns the original string that the regex was matched against.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_orig
orig	R	Match.orig										
Match.from	A			Perl 6 Match							<section class="prog__container"><p>Returns the index of the starting position of the match.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_from
Match.to	A			Perl 6 Match							<section class="prog__container"><p>Returns the index of the end position of the match.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_to
Match.made	A			Perl 6 Match							<section class="prog__container"><p>Returns the payload that was set with method make.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_made
made	R	Match.made										
Match.ast	A			Perl 6 Match							<section class="prog__container"><p>Alias for method made.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_ast
ast	R	Match.ast										
Match.Bool	A			Perl 6 Match							<section class="prog__container"><pre><code>method Bool(Capture:D: --&gt; Bool:D)\n</code></pre><p>Returns True on successful and False on unsuccessful matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_Bool
Match.Str	A			Perl 6 Match							<section class="prog__container"><pre><code>method Str(Match:D: --&gt; Str:D)\n</code></pre><p>Returns the matched text.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_Str
Match.caps	A			Perl 6 Match							<section class="prog__container"><p>Returns a list of pairs, with the index or submatch name as key and the submatches as values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_caps
caps	R	Match.caps										
Match.chunks	A			Perl 6 Match							<section class="prog__container"><p>Returns a list of pairs, with the index or submatch name as key and the submatches as values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_chunks
chunks	R	Match.chunks										
Match.list	A			Perl 6 Match							<section class="prog__container"><p>Returns a list of positional submatches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_list
Match.hash	A			Perl 6 Match							<section class="prog__container"><p>Returns a hash of named submatches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_hash
Match.prematch	A			Perl 6 Match							<section class="prog__container"><pre><code>method prematch(Match:D: --&gt; Str:D)\n</code></pre><p>Returns the part of the original string leading up to the match.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_prematch
prematch	R	Match.prematch										
Match.postmatch	A			Perl 6 Match							<section class="prog__container"><pre><code>method postmatch(Match:D: --&gt; Str:D)\n</code></pre><p>Returns the part of the original string following the match.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_postmatch
postmatch	R	Match.postmatch										
Match.make	A			Perl 6 Match							<section class="prog__container"><pre><code>method make(Match:D: Mu $ast)\nsub make(Mu $ast)\n</code></pre><p>Sets the AST to $ast, and returns it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#method_make
make	R	Match.make										
Match.list	A			Perl 6 Match							<section class="prog__container"><pre><code>method list(Capture:D: --&gt; Positional)\n</code></pre><p>Returns the positional part of the Capture.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_list
Match.hash	A			Perl 6 Match							<section class="prog__container"><pre><code>method hash(Capture:D: --&gt; Associative)\n</code></pre><p>Returns the named/hash part of the Capture.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_hash
Match.elems	A			Perl 6 Match							<section class="prog__container"><pre><code>method elems(Capture:D: --&gt; Int:D)\n</code></pre><p>Returns the number of positional elements in the Capture.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_elems
Match.keys	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method keys(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing all positional keys followed by all named keys.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_keys
Match.values	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method values(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing all positional values followed by all named argument values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_values
Match.kv	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method kv(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of alternating keys and values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_kv
Match.pairs	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method pairs(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns all arguments, the positional followed by the named, as a Seq of Pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_pairs
Match.antipairs	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method antipairs(Capture:D: --&gt; Seq:D)\n</code></pre><p>Returns all arguments, the positional followed by the named, as a Seq of pairs where the keys and values have been swapped, i.e. the value becomes the key and the key becomes the value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_antipairs
Match.Bool	A			Perl 6 Match							<section class="prog__container"><pre><code>method Bool(Capture:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the Capture contains at least one named or one positional argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_Bool
Match.Capture	A			Perl 6 Match							<section class="prog__container"><pre><code>method Capture(Capture:D: --&gt; Capture:D)\n</code></pre><p>Returns itself, i.e. the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_Capture
Match.Numeric	A			Perl 6 Match							<section class="prog__container"><pre><code>method Numeric(Capture:D: --&gt; Int:D)\n</code></pre><p>Returns the number of positional elements in the Capture.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Capture%29_method_Numeric
Match.abs	A			Perl 6 Match							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_abs
Match.conj	A			Perl 6 Match							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_conj
Match.sqrt	A			Perl 6 Match							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_sqrt
Match.sign	A			Perl 6 Match							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_sign
Match.rand	A			Perl 6 Match							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_rand
Match.sin	A			Perl 6 Match							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_sin
Match.asin	A			Perl 6 Match							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_asin
Match.cos	A			Perl 6 Match							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_cos
Match.acos	A			Perl 6 Match							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_acos
Match.tan	A			Perl 6 Match							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_tan
Match.atan	A			Perl 6 Match							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_atan
Match.atan2	A			Perl 6 Match							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_atan2
Match.sec	A			Perl 6 Match							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_sec
Match.asec	A			Perl 6 Match							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_asec
Match.cosec	A			Perl 6 Match							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_cosec
Match.acosec	A			Perl 6 Match							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_acosec
Match.cotan	A			Perl 6 Match							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_cotan
Match.acotan	A			Perl 6 Match							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_acotan
Match.sinh	A			Perl 6 Match							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_sinh
Match.asinh	A			Perl 6 Match							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_asinh
Match.cosh	A			Perl 6 Match							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_cosh
Match.acosh	A			Perl 6 Match							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_acosh
Match.tanh	A			Perl 6 Match							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_tanh
Match.atanh	A			Perl 6 Match							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_atanh
Match.sech	A			Perl 6 Match							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_sech
Match.asech	A			Perl 6 Match							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_asech
Match.cosech	A			Perl 6 Match							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_cosech
Match.acosech	A			Perl 6 Match							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_acosech
Match.cotanh	A			Perl 6 Match							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_cotanh
Match.acotanh	A			Perl 6 Match							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_acotanh
Match.cis	A			Perl 6 Match							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_cis
Match.log	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_log
Match.log10	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_log10
Match.exp	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_exp
Match.unpolar	A			Perl 6 Match							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_unpolar
Match.round	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_round
Match.floor	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_floor
Match.ceiling	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_ceiling
Match.truncate	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_truncate
Match.ord	A			Perl 6 Match							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_ord
Match.chr	A			Perl 6 Match							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_chr
Match.chars	A			Perl 6 Match							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_chars
Match.codes	A			Perl 6 Match							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_codes
Match.flip	A			Perl 6 Match							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_flip
Match.trim	A			Perl 6 Match							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_trim
Match.trim-leading	A			Perl 6 Match							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_trim-leading
Match.trim-trailing	A			Perl 6 Match							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_trim-trailing
Match.lc	A			Perl 6 Match							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_lc
Match.uc	A			Perl 6 Match							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_uc
Match.fc	A			Perl 6 Match							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_fc
Match.tc	A			Perl 6 Match							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_tc
Match.tclc	A			Perl 6 Match							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_tclc
Match.wordcase	A			Perl 6 Match							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_wordcase
Match.samecase	A			Perl 6 Match							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_samecase
Match.uniprop	A			Perl 6 Match							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_uniprop
Match.uniprops	A			Perl 6 Match							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_uniprops
Match.uniname	A			Perl 6 Match							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_uniname
Match.uninames	A			Perl 6 Match							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_uninames
Match.unimatch	A			Perl 6 Match							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_unimatch
Match.chop	A			Perl 6 Match							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_chop
Match.chomp	A			Perl 6 Match							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_chomp
Match.substr	A			Perl 6 Match							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_substr
Match.ords	A			Perl 6 Match							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_ords
Match.chrs	A			Perl 6 Match							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_chrs
Match.split	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_split
Match.lines	A			Perl 6 Match							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_lines
Match.words	A			Perl 6 Match							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_words
Match.comb	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_comb
Match.contains	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_contains
Match.index	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_index
Match.rindex	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_rindex
Match.match	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_match
Match.fmt	A			Perl 6 Match							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_fmt
Match.roots	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_roots
Match.IO	A			Perl 6 Match							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_method_IO
Match.EVAL	A			Perl 6 Match							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_EVAL
Match.EVALFILE	A			Perl 6 Match							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Cool%29_routine_EVALFILE
Match.ACCEPTS	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_ACCEPTS
Match.any	A			Perl 6 Match							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_any
Match.all	A			Perl 6 Match							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_all
Match.one	A			Perl 6 Match							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_one
Match.none	A			Perl 6 Match							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_none
Match.list	A			Perl 6 Match							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_list
Match.push	A			Perl 6 Match							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_push
Match.reverse	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_routine_reverse
Match.sort	A			Perl 6 Match							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_sort
Match.map	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_map
Match.deepmap	A			Perl 6 Match							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_deepmap
Match.duckmap	A			Perl 6 Match							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_duckmap
Match.flat	A			Perl 6 Match							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_flat
Match.eager	A			Perl 6 Match							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_eager
Match.elems	A			Perl 6 Match							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_elems
Match.end	A			Perl 6 Match							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_end
Match.pairup	A			Perl 6 Match							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_method_pairup
Match.exit	A			Perl 6 Match							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_sub_exit
Match.item	A			Perl 6 Match							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Any%29_sub_item
Match.defined	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_routine_defined
Match.isa	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_routine_isa
Match.does	A			Perl 6 Match							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_routine_does
Match.Bool	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_routine_Bool
Match.Str	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_Str
Match.gist	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_routine_gist
Match.perl	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_routine_perl
Match.item	A			Perl 6 Match							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_item
Match.clone	A			Perl 6 Match							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_clone
Match.new	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_new
Match.bless	A			Perl 6 Match							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_bless
Match.CREATE	A			Perl 6 Match							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_CREATE
Match.print	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_print
Match.put	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_put
Match.say	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_say
Match.ACCEPTS	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_ACCEPTS
Match.WHICH	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_WHICH
Match.WHERE	A			Perl 6 Match							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_WHERE
Match.WHY	A			Perl 6 Match							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_WHY
Match.export	A			Perl 6 Match							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_trait_is_export
Match.return	A			Perl 6 Match							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_return
Match.return-rw	A			Perl 6 Match							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_return-rw
Match.emit	A			Perl 6 Match							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_emit
Match.take	A			Perl 6 Match							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_take
Match.take	A			Perl 6 Match							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_routine_take
Match.take-rw	A			Perl 6 Match							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_routine_take-rw
Match.so	A			Perl 6 Match							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_so
Match.not	A			Perl 6 Match							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Match.html#%28Mu%29_method_not
Method.name	A			Perl 6 Method							<section class="prog__container"><pre><code>method name(Routine:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_method_name
Method.package	A			Perl 6 Method							<section class="prog__container"><pre><code>method package(Routine:D:)\n</code></pre><p>Returns the package in which the routine is defined.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_method_package
Method.multi	A			Perl 6 Method							<section class="prog__container"><pre><code>method multi(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a multi sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_method_multi
Method.candidates	A			Perl 6 Method							<section class="prog__container"><pre><code>method candidates(Routine:D: --&gt; Positional:D)\n</code></pre><p>Returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_method_candidates
Method.cando	A			Perl 6 Method							<section class="prog__container"><pre><code>method cando(Capture $c)\n</code></pre><p>Returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_method_cando
Method.wrap	A			Perl 6 Method							<section class="prog__container"><pre><code>method wrap(Routine:D: &amp;wrapper)\n</code></pre><p>Wraps (i.e. in-place modifies) the routine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_method_wrap
Method.unwrap	A			Perl 6 Method							<section class="prog__container"><pre><code>method unwrap(Routine:D: $wraphandler)\n</code></pre><p>Restores the original routine after it has been wrapped with wrap.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_method_unwrap
Method.yada	A			Perl 6 Method							<section class="prog__container"><pre><code>method yada(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a stub&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_method_yada
Method.cached	A			Perl 6 Method							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$cached!)\n</code></pre><p>NOTE: this feature is currently EXPERIMENTAL.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_trait_is_cached
Method.pure	A			Perl 6 Method							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$pure!)\n</code></pre><p>Marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_trait_is_pure
Method.rw	A			Perl 6 Method							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$rw!)\n</code></pre><p>When a routine is modified with this trait, its return value will be writable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_trait_is_rw
Method.export	A			Perl 6 Method							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$export!)\n</code></pre><p>Marks a routine as exported to the rest of the world&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_trait_is_export
Method.DEPRECATED	A			Perl 6 Method							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D $r, :$DEPRECATED!)\n</code></pre><p>Marks a routine as deprecated, optionally with a message what to use instead.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_trait_is_DEPRECATED
Method.hidden-from-backtrace	A			Perl 6 Method							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D, :$hidden-from-backtrace!)\n</code></pre><p>Hides a routine from showing up in a default backtrace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Routine%29_trait_is_hidden-from-backtrace
Method.ACCEPTS	A			Perl 6 Method							<section class="prog__container"><pre><code>multi method ACCEPTS(Code:D: Mu $topic)\n</code></pre><p>Usually calls the code object and passes $topic as an argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Code%29_method_ACCEPTS
Method.arity	A			Perl 6 Method							<section class="prog__container"><pre><code>method arity(Code:D: --&gt; Int:D)\n</code></pre><p>Returns the minimum number of positional arguments that must be passed in order to call the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Code%29_method_arity
Method.count	A			Perl 6 Method							<section class="prog__container"><pre><code>method count(Code:D: --&gt; Real:D)\n</code></pre><p>Returns the maximum number of positional arguments that may be passed when calling the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Code%29_method_count
Method.signature	A			Perl 6 Method							<section class="prog__container"><pre><code>multi method signature(Code:D: --&gt; Signature:D)\n</code></pre><p>Returns the Signature object for this code object, which describes its parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Code%29_method_signature
Method.Str	A			Perl 6 Method							<section class="prog__container"><pre><code>multi method Str(Code:D: --&gt; Str:D)\n</code></pre><p>Will produce a warning.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Code%29_method_Str
Method.file	A			Perl 6 Method							<section class="prog__container"><pre><code>method file(Code:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the file in which the code object was declared.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Code%29_method_file
Method.line	A			Perl 6 Method							<section class="prog__container"><pre><code>method line(Code:D: --&gt; Int:D)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Method.html#%28Code%29_method_line
Method.CALL-ME	R	Callable.CALL-ME										
Method.assuming	R	Callable.assuming										
Method.ACCEPTS	R	Callable.ACCEPTS										
Method.any	R	Callable.any										
Method.all	R	Callable.all										
Method.one	R	Callable.one										
Method.none	R	Callable.none										
Method.list	R	Callable.list										
Method.push	R	Callable.push										
Method.reverse	R	Callable.reverse										
Method.sort	R	Callable.sort										
Method.map	R	Callable.map										
Method.deepmap	R	Callable.deepmap										
Method.duckmap	R	Callable.duckmap										
Method.flat	R	Callable.flat										
Method.eager	R	Callable.eager										
Method.elems	R	Callable.elems										
Method.end	R	Callable.end										
Method.pairup	R	Callable.pairup										
Method.exit	R	Callable.exit										
Method.item	R	Callable.item										
Method.defined	R	Callable.defined										
Method.isa	R	Callable.isa										
Method.does	R	Callable.does										
Method.Bool	R	Callable.Bool										
Method.Str	R	Callable.Str										
Method.gist	R	Callable.gist										
Method.perl	R	Callable.perl										
Method.item	R	Callable.item										
Method.clone	R	Callable.clone										
Method.new	R	Callable.new										
Method.bless	R	Callable.bless										
Method.CREATE	R	Callable.CREATE										
Method.print	R	Callable.print										
Method.put	R	Callable.put										
Method.say	R	Callable.say										
Method.ACCEPTS	R	Callable.ACCEPTS										
Method.WHICH	R	Callable.WHICH										
Method.WHERE	R	Callable.WHERE										
Method.WHY	R	Callable.WHY										
Method.export	R	Callable.export										
Method.return	R	Callable.return										
Method.return-rw	R	Callable.return-rw										
Method.emit	R	Callable.emit										
Method.take	R	Callable.take										
Method.take	R	Callable.take										
Method.take-rw	R	Callable.take-rw										
Method.so	R	Callable.so										
Method.not	R	Callable.not										
Mix.mix	A			Perl 6 Mix							<section class="prog__container"><pre><code>sub mix(*@args --&gt; Mix)\n</code></pre><p>Creates a new Mix from @args.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#sub_mix
mix	R	Mix.mix										
Mix.Bag	A			Perl 6 Mix							<section class="prog__container"><pre><code>method Bag (--&gt; Bag:D)\n</code></pre><p>Coerces the Mix to a Bag.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#method_Bag
Mix.BagHash	A			Perl 6 Mix							<section class="prog__container"><pre><code>method BagHash (--&gt; BagHash:D)\n</code></pre><p>Coerces the Mix to a BagHash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#method_BagHash
Mix.total	A			Perl 6 Mix							<section class="prog__container"><pre><code>method total(--&gt; Real)\n</code></pre><p>Returns the sum of all the weights&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mixy%29_method_total
Mix.roll	A			Perl 6 Mix							<section class="prog__container"><pre><code>method roll($count = 1)\n</code></pre><p>Similar to a Bag.roll, but with Real weights rather than integral ones.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mixy%29_method_roll
Mix.new-from-pairs	A			Perl 6 Mix							<section class="prog__container"><pre><code>method new-from-pairs(*@pairs --&gt; Baggy:D)\n</code></pre><p>Constructs a Baggy objects from a list of Pair objects given as positional arguments:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_new-from-pairs
Mix.grab	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method grab(Baggy:D: --&gt; Any)\nmulti method grab(Baggy:D: $count --&gt; Array:D)\n</code></pre><p>Like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_grab
Mix.grabpairs	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method grabpairs(Baggy:D: --&gt; Any)\nmulti method grabpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_grabpairs
Mix.pick	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method pick(Baggy:D: --&gt; Any)\nmulti method pick(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_pick
Mix.pickpairs	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method pickpairs(Baggy:D: --&gt; Pair:D)\nmulti method pickpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_pickpairs
Mix.roll	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method roll(Baggy:D: --&gt; Any:D)\nmulti method roll(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_roll
Mix.pairs	A			Perl 6 Mix							<section class="prog__container"><pre><code>method pairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_pairs
Mix.antipairs	A			Perl 6 Mix							<section class="prog__container"><pre><code>method antipairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_antipairs
Mix.invert	A			Perl 6 Mix							<section class="prog__container"><pre><code>method invert(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_invert
Mix.classify-list	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method classify-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(%mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_classify-list
Mix.categorize-list	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method categorize-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(%mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_categorize-list
Mix.keys	A			Perl 6 Mix							<section class="prog__container"><pre><code>method keys(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_keys
Mix.values	A			Perl 6 Mix							<section class="prog__container"><pre><code>method values(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all values, i.e. weights, in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_values
Mix.kv	A			Perl 6 Mix							<section class="prog__container"><pre><code>method kv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of keys and values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_kv
Mix.kxxv	A			Perl 6 Mix							<section class="prog__container"><pre><code>method kxxv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of the keys of the invocant, with each key multiplied by its weight.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_kxxv
Mix.elems	A			Perl 6 Mix							<section class="prog__container"><pre><code>method elems(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the Baggy object without taking the individual elements weight into account.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_elems
Mix.total	A			Perl 6 Mix							<section class="prog__container"><pre><code>method total(Baggy:D:)\n</code></pre><p>Returns the sum of weights for all elements in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_total
Mix.default	A			Perl 6 Mix							<section class="prog__container"><pre><code>method default(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_default
Mix.hash	A			Perl 6 Mix							<section class="prog__container"><pre><code>method hash(Baggy:D: --&gt; Hash:D)\n</code></pre><p>Returns a Hash where the elements of the invocant are the keys and their respective weights the values;&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_hash
Mix.Bool	A			Perl 6 Mix							<section class="prog__container"><pre><code>method Bool(Baggy:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_Bool
Mix.Set	A			Perl 6 Mix							<section class="prog__container"><pre><code>method Set(--&gt; Set:D)\n</code></pre><p>Returns a Set whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_Set
Mix.SetHash	A			Perl 6 Mix							<section class="prog__container"><pre><code>method SetHash(--&gt; SetHash:D)\n</code></pre><p>Returns a SetHash whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_SetHash
Mix.ACCEPTS	A			Perl 6 Mix							<section class="prog__container"><pre><code>method ACCEPTS($other --&gt; Bool:D)\n</code></pre><p>Used in smart-matching if the right-hand side is a Baggy.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Baggy%29_method_ACCEPTS
Mix.ACCEPTS	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_ACCEPTS
Mix.any	A			Perl 6 Mix							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_any
Mix.all	A			Perl 6 Mix							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_all
Mix.one	A			Perl 6 Mix							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_one
Mix.none	A			Perl 6 Mix							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_none
Mix.list	A			Perl 6 Mix							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_list
Mix.push	A			Perl 6 Mix							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_push
Mix.reverse	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_routine_reverse
Mix.sort	A			Perl 6 Mix							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_sort
Mix.map	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_map
Mix.deepmap	A			Perl 6 Mix							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_deepmap
Mix.duckmap	A			Perl 6 Mix							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_duckmap
Mix.flat	A			Perl 6 Mix							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_flat
Mix.eager	A			Perl 6 Mix							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_eager
Mix.elems	A			Perl 6 Mix							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_elems
Mix.end	A			Perl 6 Mix							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_end
Mix.pairup	A			Perl 6 Mix							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_method_pairup
Mix.exit	A			Perl 6 Mix							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_sub_exit
Mix.item	A			Perl 6 Mix							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Any%29_sub_item
Mix.defined	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_routine_defined
Mix.isa	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_routine_isa
Mix.does	A			Perl 6 Mix							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_routine_does
Mix.Bool	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_routine_Bool
Mix.Str	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_Str
Mix.gist	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_routine_gist
Mix.perl	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_routine_perl
Mix.item	A			Perl 6 Mix							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_item
Mix.clone	A			Perl 6 Mix							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_clone
Mix.new	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_new
Mix.bless	A			Perl 6 Mix							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_bless
Mix.CREATE	A			Perl 6 Mix							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_CREATE
Mix.print	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_print
Mix.put	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_put
Mix.say	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_say
Mix.ACCEPTS	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_ACCEPTS
Mix.WHICH	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_WHICH
Mix.WHERE	A			Perl 6 Mix							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_WHERE
Mix.WHY	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_WHY
Mix.export	A			Perl 6 Mix							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_trait_is_export
Mix.return	A			Perl 6 Mix							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_return
Mix.return-rw	A			Perl 6 Mix							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_return-rw
Mix.emit	A			Perl 6 Mix							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_emit
Mix.take	A			Perl 6 Mix							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_take
Mix.take	A			Perl 6 Mix							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_routine_take
Mix.take-rw	A			Perl 6 Mix							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_routine_take-rw
Mix.so	A			Perl 6 Mix							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_so
Mix.not	A			Perl 6 Mix							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mix.html#%28Mu%29_method_not
MixHash.Bag	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method Bag (--&gt; Bag:D)\n</code></pre><p>Coerces the MixHash to a Bag.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#method_Bag
MixHash.BagHash	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method BagHash (--&gt; BagHash:D)\n</code></pre><p>Coerces the MixHash to a BagHash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#method_BagHash
MixHash.total	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method total(--&gt; Real)\n</code></pre><p>Returns the sum of all the weights&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mixy%29_method_total
MixHash.roll	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method roll($count = 1)\n</code></pre><p>Similar to a Bag.roll, but with Real weights rather than integral ones.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mixy%29_method_roll
MixHash.new-from-pairs	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method new-from-pairs(*@pairs --&gt; Baggy:D)\n</code></pre><p>Constructs a Baggy objects from a list of Pair objects given as positional arguments:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_new-from-pairs
MixHash.grab	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method grab(Baggy:D: --&gt; Any)\nmulti method grab(Baggy:D: $count --&gt; Array:D)\n</code></pre><p>Like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_grab
MixHash.grabpairs	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method grabpairs(Baggy:D: --&gt; Any)\nmulti method grabpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_grabpairs
MixHash.pick	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method pick(Baggy:D: --&gt; Any)\nmulti method pick(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_pick
MixHash.pickpairs	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method pickpairs(Baggy:D: --&gt; Pair:D)\nmulti method pickpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_pickpairs
MixHash.roll	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method roll(Baggy:D: --&gt; Any:D)\nmulti method roll(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_roll
MixHash.pairs	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method pairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_pairs
MixHash.antipairs	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method antipairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_antipairs
MixHash.invert	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method invert(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_invert
MixHash.classify-list	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method classify-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(%mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_classify-list
MixHash.categorize-list	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method categorize-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(%mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_categorize-list
MixHash.keys	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method keys(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_keys
MixHash.values	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method values(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all values, i.e. weights, in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_values
MixHash.kv	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method kv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of keys and values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_kv
MixHash.kxxv	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method kxxv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of the keys of the invocant, with each key multiplied by its weight.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_kxxv
MixHash.elems	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method elems(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the Baggy object without taking the individual elements weight into account.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_elems
MixHash.total	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method total(Baggy:D:)\n</code></pre><p>Returns the sum of weights for all elements in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_total
MixHash.default	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method default(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_default
MixHash.hash	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method hash(Baggy:D: --&gt; Hash:D)\n</code></pre><p>Returns a Hash where the elements of the invocant are the keys and their respective weights the values;&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_hash
MixHash.Bool	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method Bool(Baggy:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_Bool
MixHash.Set	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method Set(--&gt; Set:D)\n</code></pre><p>Returns a Set whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_Set
MixHash.SetHash	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method SetHash(--&gt; SetHash:D)\n</code></pre><p>Returns a SetHash whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_SetHash
MixHash.ACCEPTS	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method ACCEPTS($other --&gt; Bool:D)\n</code></pre><p>Used in smart-matching if the right-hand side is a Baggy.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Baggy%29_method_ACCEPTS
MixHash.ACCEPTS	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_ACCEPTS
MixHash.any	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_any
MixHash.all	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_all
MixHash.one	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_one
MixHash.none	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_none
MixHash.list	A			Perl 6 MixHash							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_list
MixHash.push	A			Perl 6 MixHash							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_push
MixHash.reverse	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_routine_reverse
MixHash.sort	A			Perl 6 MixHash							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_sort
MixHash.map	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_map
MixHash.deepmap	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_deepmap
MixHash.duckmap	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_duckmap
MixHash.flat	A			Perl 6 MixHash							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_flat
MixHash.eager	A			Perl 6 MixHash							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_eager
MixHash.elems	A			Perl 6 MixHash							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_elems
MixHash.end	A			Perl 6 MixHash							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_end
MixHash.pairup	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_method_pairup
MixHash.exit	A			Perl 6 MixHash							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_sub_exit
MixHash.item	A			Perl 6 MixHash							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Any%29_sub_item
MixHash.defined	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_routine_defined
MixHash.isa	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_routine_isa
MixHash.does	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_routine_does
MixHash.Bool	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_routine_Bool
MixHash.Str	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_Str
MixHash.gist	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_routine_gist
MixHash.perl	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_routine_perl
MixHash.item	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_item
MixHash.clone	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_clone
MixHash.new	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_new
MixHash.bless	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_bless
MixHash.CREATE	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_CREATE
MixHash.print	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_print
MixHash.put	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_put
MixHash.say	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_say
MixHash.ACCEPTS	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_ACCEPTS
MixHash.WHICH	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_WHICH
MixHash.WHERE	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_WHERE
MixHash.WHY	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_WHY
MixHash.export	A			Perl 6 MixHash							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_trait_is_export
MixHash.return	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_return
MixHash.return-rw	A			Perl 6 MixHash							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_return-rw
MixHash.emit	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_emit
MixHash.take	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_take
MixHash.take	A			Perl 6 MixHash							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_routine_take
MixHash.take-rw	A			Perl 6 MixHash							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_routine_take-rw
MixHash.so	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_so
MixHash.not	A			Perl 6 MixHash							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/MixHash.html#%28Mu%29_method_not
Mixy.total	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method total(--&gt; Real)\n</code></pre><p>Returns the sum of all the weights&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#method_total
Mixy.roll	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method roll($count = 1)\n</code></pre><p>Similar to a Bag.roll, but with Real weights rather than integral ones.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#method_roll
Mixy.new-from-pairs	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method new-from-pairs(*@pairs --&gt; Baggy:D)\n</code></pre><p>Constructs a Baggy objects from a list of Pair objects given as positional arguments:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_new-from-pairs
Mixy.grab	A			Perl 6 Mixy							<section class="prog__container"><pre><code>multi method grab(Baggy:D: --&gt; Any)\nmulti method grab(Baggy:D: $count --&gt; Array:D)\n</code></pre><p>Like pick, a grab returns a random selection of elements, weighted by the values corresponding to each key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_grab
Mixy.grabpairs	A			Perl 6 Mixy							<section class="prog__container"><pre><code>multi method grabpairs(Baggy:D: --&gt; Any)\nmulti method grabpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_grabpairs
Mixy.pick	A			Perl 6 Mixy							<section class="prog__container"><pre><code>multi method pick(Baggy:D: --&gt; Any)\nmulti method pick(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list pick, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list pick used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_pick
Mixy.pickpairs	A			Perl 6 Mixy							<section class="prog__container"><pre><code>multi method pickpairs(Baggy:D: --&gt; Pair:D)\nmulti method pickpairs(Baggy:D: $count --&gt; List:D)\n</code></pre><p>Returns a Pair or a List of Pairs depending on the version of the method being invoked.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_pickpairs
Mixy.roll	A			Perl 6 Mixy							<section class="prog__container"><pre><code>multi method roll(Baggy:D: --&gt; Any:D)\nmulti method roll(Baggy:D: $count --&gt; Seq:D)\n</code></pre><p>Like an ordinary list roll, but returns keys of the invocant weighted by their values, as if the keys were replicated the number of times indicated by the corresponding value and then list roll used.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_roll
Mixy.pairs	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method pairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs where the key is the element itself and the value is the weight of that element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_pairs
Mixy.antipairs	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method antipairs(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_antipairs
Mixy.invert	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method invert(Baggy:D: --&gt; Seq:D)\n</code></pre><p>Returns all elements and their respective weights as a Seq of Pairs, where the element itself is the value and the weight of that element is the key, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_invert
Mixy.classify-list	A			Perl 6 Mixy							<section class="prog__container"><pre><code>multi method classify-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(%mapper, *@list --&gt; Baggy:D)\nmulti method classify-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by classifying the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_classify-list
Mixy.categorize-list	A			Perl 6 Mixy							<section class="prog__container"><pre><code>multi method categorize-list(&amp;mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(%mapper, *@list --&gt; Baggy:D)\nmulti method categorize-list(@mapper, *@list --&gt; Baggy:D)\n</code></pre><p>Populates a mutable Baggy by categorizing the possibly-empty @list of values using the given mapper.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_categorize-list
Mixy.keys	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method keys(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all keys in the Baggy object without taking their individual weights into account as opposed to kxxv.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_keys
Mixy.values	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method values(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of all values, i.e. weights, in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_values
Mixy.kv	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method kv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of keys and values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_kv
Mixy.kxxv	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method kxxv(Baggy:D: --&gt; List:D)\n</code></pre><p>Returns a list of the keys of the invocant, with each key multiplied by its weight.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_kxxv
Mixy.elems	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method elems(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the Baggy object without taking the individual elements weight into account.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_elems
Mixy.total	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method total(Baggy:D:)\n</code></pre><p>Returns the sum of weights for all elements in the Baggy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_total
Mixy.default	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method default(Baggy:D: --&gt; Int:D)\n</code></pre><p>Returns zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_default
Mixy.hash	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method hash(Baggy:D: --&gt; Hash:D)\n</code></pre><p>Returns a Hash where the elements of the invocant are the keys and their respective weights the values;&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_hash
Mixy.Bool	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method Bool(Baggy:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_Bool
Mixy.Set	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method Set(--&gt; Set:D)\n</code></pre><p>Returns a Set whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_Set
Mixy.SetHash	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method SetHash(--&gt; SetHash:D)\n</code></pre><p>Returns a SetHash whose elements are the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_SetHash
Mixy.ACCEPTS	A			Perl 6 Mixy							<section class="prog__container"><pre><code>method ACCEPTS($other --&gt; Bool:D)\n</code></pre><p>Used in smart-matching if the right-hand side is a Baggy.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mixy.html#%28Baggy%29_method_ACCEPTS
Mu.defined	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#routine_defined
Mu.isa	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#routine_isa
Mu.does	A			Perl 6 Mu							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#routine_does
Mu.Bool	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#routine_Bool
Mu.Str	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_Str
Mu.gist	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#routine_gist
Mu.perl	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#routine_perl
Mu.item	A			Perl 6 Mu							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_item
Mu.clone	A			Perl 6 Mu							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_clone
Mu.new	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_new
Mu.bless	A			Perl 6 Mu							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_bless
Mu.CREATE	A			Perl 6 Mu							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_CREATE
Mu.print	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_print
Mu.put	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_put
Mu.say	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_say
Mu.ACCEPTS	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_ACCEPTS
Mu.WHICH	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_WHICH
Mu.WHERE	A			Perl 6 Mu							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_WHERE
Mu.WHY	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_WHY
Mu.export	A			Perl 6 Mu							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#trait_is_export
Mu.return	A			Perl 6 Mu							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_return
Mu.return-rw	A			Perl 6 Mu							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_return-rw
Mu.emit	A			Perl 6 Mu							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_emit
Mu.take	A			Perl 6 Mu							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_take
Mu.take	A			Perl 6 Mu							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#routine_take
Mu.take-rw	A			Perl 6 Mu							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#routine_take-rw
Mu.so	A			Perl 6 Mu							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_so
Mu.not	A			Perl 6 Mu							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Mu.html#method_not
NFC.new	A			Perl 6 NFC							<section class="prog__container"><pre><code>method new(*@codes --&gt; Uni:D)\n</code></pre><p>Creates a new Uni instance from the given codepoint numbers.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFC.html#%28Uni%29_method_new
NFC.NFC	A			Perl 6 NFC							<section class="prog__container"><pre><code>method NFC(Uni:D: --&gt; NFC:D)\n</code></pre><p>Returns a NFC (Normal Form Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFC.html#%28Uni%29_method_NFC
NFC.NFD	A			Perl 6 NFC							<section class="prog__container"><pre><code>method NFD(Uni:D: --&gt; NFD:D)\n</code></pre><p>Returns a NFD (Normal Form Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFC.html#%28Uni%29_method_NFD
NFC.NFKC	A			Perl 6 NFC							<section class="prog__container"><pre><code>method NFKC(Uni:D: --&gt; NFKC:D)\n</code></pre><p>Returns a NFKC (Normal Form Compatibility Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFC.html#%28Uni%29_method_NFKC
NFC.NFKD	A			Perl 6 NFC							<section class="prog__container"><pre><code>method NFKD(Uni:D: --&gt; NFKD:D)\n</code></pre><p>Returns a NFD (Normal Form Compatibility Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFC.html#%28Uni%29_method_NFKD
NFC.codes	A			Perl 6 NFC							<section class="prog__container"><pre><code>method codes(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFC.html#%28Uni%29_method_codes
NFC.elems	A			Perl 6 NFC							<section class="prog__container"><pre><code>method elems(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFC.html#%28Uni%29_method_elems
NFC.of	R	Positional.of										
NFC.ACCEPTS	R	Positional.ACCEPTS										
NFC.any	R	Positional.any										
NFC.all	R	Positional.all										
NFC.one	R	Positional.one										
NFC.none	R	Positional.none										
NFC.list	R	Positional.list										
NFC.push	R	Positional.push										
NFC.reverse	R	Positional.reverse										
NFC.sort	R	Positional.sort										
NFC.map	R	Positional.map										
NFC.deepmap	R	Positional.deepmap										
NFC.duckmap	R	Positional.duckmap										
NFC.flat	R	Positional.flat										
NFC.eager	R	Positional.eager										
NFC.elems	R	Positional.elems										
NFC.end	R	Positional.end										
NFC.pairup	R	Positional.pairup										
NFC.exit	R	Positional.exit										
NFC.item	R	Positional.item										
NFC.defined	R	Positional.defined										
NFC.isa	R	Positional.isa										
NFC.does	R	Positional.does										
NFC.Bool	R	Positional.Bool										
NFC.Str	R	Positional.Str										
NFC.gist	R	Positional.gist										
NFC.perl	R	Positional.perl										
NFC.item	R	Positional.item										
NFC.clone	R	Positional.clone										
NFC.new	R	Positional.new										
NFC.bless	R	Positional.bless										
NFC.CREATE	R	Positional.CREATE										
NFC.print	R	Positional.print										
NFC.put	R	Positional.put										
NFC.say	R	Positional.say										
NFC.ACCEPTS	R	Positional.ACCEPTS										
NFC.WHICH	R	Positional.WHICH										
NFC.WHERE	R	Positional.WHERE										
NFC.WHY	R	Positional.WHY										
NFC.export	R	Positional.export										
NFC.return	R	Positional.return										
NFC.return-rw	R	Positional.return-rw										
NFC.emit	R	Positional.emit										
NFC.take	R	Positional.take										
NFC.take	R	Positional.take										
NFC.take-rw	R	Positional.take-rw										
NFC.so	R	Positional.so										
NFC.not	R	Positional.not										
NFD.new	A			Perl 6 NFD							<section class="prog__container"><pre><code>method new(*@codes --&gt; Uni:D)\n</code></pre><p>Creates a new Uni instance from the given codepoint numbers.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFD.html#%28Uni%29_method_new
NFD.NFC	A			Perl 6 NFD							<section class="prog__container"><pre><code>method NFC(Uni:D: --&gt; NFC:D)\n</code></pre><p>Returns a NFC (Normal Form Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFD.html#%28Uni%29_method_NFC
NFD.NFD	A			Perl 6 NFD							<section class="prog__container"><pre><code>method NFD(Uni:D: --&gt; NFD:D)\n</code></pre><p>Returns a NFD (Normal Form Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFD.html#%28Uni%29_method_NFD
NFD.NFKC	A			Perl 6 NFD							<section class="prog__container"><pre><code>method NFKC(Uni:D: --&gt; NFKC:D)\n</code></pre><p>Returns a NFKC (Normal Form Compatibility Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFD.html#%28Uni%29_method_NFKC
NFD.NFKD	A			Perl 6 NFD							<section class="prog__container"><pre><code>method NFKD(Uni:D: --&gt; NFKD:D)\n</code></pre><p>Returns a NFD (Normal Form Compatibility Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFD.html#%28Uni%29_method_NFKD
NFD.codes	A			Perl 6 NFD							<section class="prog__container"><pre><code>method codes(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFD.html#%28Uni%29_method_codes
NFD.elems	A			Perl 6 NFD							<section class="prog__container"><pre><code>method elems(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFD.html#%28Uni%29_method_elems
NFD.of	R	Positional.of										
NFD.ACCEPTS	R	Positional.ACCEPTS										
NFD.any	R	Positional.any										
NFD.all	R	Positional.all										
NFD.one	R	Positional.one										
NFD.none	R	Positional.none										
NFD.list	R	Positional.list										
NFD.push	R	Positional.push										
NFD.reverse	R	Positional.reverse										
NFD.sort	R	Positional.sort										
NFD.map	R	Positional.map										
NFD.deepmap	R	Positional.deepmap										
NFD.duckmap	R	Positional.duckmap										
NFD.flat	R	Positional.flat										
NFD.eager	R	Positional.eager										
NFD.elems	R	Positional.elems										
NFD.end	R	Positional.end										
NFD.pairup	R	Positional.pairup										
NFD.exit	R	Positional.exit										
NFD.item	R	Positional.item										
NFD.defined	R	Positional.defined										
NFD.isa	R	Positional.isa										
NFD.does	R	Positional.does										
NFD.Bool	R	Positional.Bool										
NFD.Str	R	Positional.Str										
NFD.gist	R	Positional.gist										
NFD.perl	R	Positional.perl										
NFD.item	R	Positional.item										
NFD.clone	R	Positional.clone										
NFD.new	R	Positional.new										
NFD.bless	R	Positional.bless										
NFD.CREATE	R	Positional.CREATE										
NFD.print	R	Positional.print										
NFD.put	R	Positional.put										
NFD.say	R	Positional.say										
NFD.ACCEPTS	R	Positional.ACCEPTS										
NFD.WHICH	R	Positional.WHICH										
NFD.WHERE	R	Positional.WHERE										
NFD.WHY	R	Positional.WHY										
NFD.export	R	Positional.export										
NFD.return	R	Positional.return										
NFD.return-rw	R	Positional.return-rw										
NFD.emit	R	Positional.emit										
NFD.take	R	Positional.take										
NFD.take	R	Positional.take										
NFD.take-rw	R	Positional.take-rw										
NFD.so	R	Positional.so										
NFD.not	R	Positional.not										
NFKC.new	A			Perl 6 NFKC							<section class="prog__container"><pre><code>method new(*@codes --&gt; Uni:D)\n</code></pre><p>Creates a new Uni instance from the given codepoint numbers.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKC.html#%28Uni%29_method_new
NFKC.NFC	A			Perl 6 NFKC							<section class="prog__container"><pre><code>method NFC(Uni:D: --&gt; NFC:D)\n</code></pre><p>Returns a NFC (Normal Form Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKC.html#%28Uni%29_method_NFC
NFKC.NFD	A			Perl 6 NFKC							<section class="prog__container"><pre><code>method NFD(Uni:D: --&gt; NFD:D)\n</code></pre><p>Returns a NFD (Normal Form Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKC.html#%28Uni%29_method_NFD
NFKC.NFKC	A			Perl 6 NFKC							<section class="prog__container"><pre><code>method NFKC(Uni:D: --&gt; NFKC:D)\n</code></pre><p>Returns a NFKC (Normal Form Compatibility Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKC.html#%28Uni%29_method_NFKC
NFKC.NFKD	A			Perl 6 NFKC							<section class="prog__container"><pre><code>method NFKD(Uni:D: --&gt; NFKD:D)\n</code></pre><p>Returns a NFD (Normal Form Compatibility Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKC.html#%28Uni%29_method_NFKD
NFKC.codes	A			Perl 6 NFKC							<section class="prog__container"><pre><code>method codes(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKC.html#%28Uni%29_method_codes
NFKC.elems	A			Perl 6 NFKC							<section class="prog__container"><pre><code>method elems(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKC.html#%28Uni%29_method_elems
NFKC.of	R	Positional.of										
NFKC.ACCEPTS	R	Positional.ACCEPTS										
NFKC.any	R	Positional.any										
NFKC.all	R	Positional.all										
NFKC.one	R	Positional.one										
NFKC.none	R	Positional.none										
NFKC.list	R	Positional.list										
NFKC.push	R	Positional.push										
NFKC.reverse	R	Positional.reverse										
NFKC.sort	R	Positional.sort										
NFKC.map	R	Positional.map										
NFKC.deepmap	R	Positional.deepmap										
NFKC.duckmap	R	Positional.duckmap										
NFKC.flat	R	Positional.flat										
NFKC.eager	R	Positional.eager										
NFKC.elems	R	Positional.elems										
NFKC.end	R	Positional.end										
NFKC.pairup	R	Positional.pairup										
NFKC.exit	R	Positional.exit										
NFKC.item	R	Positional.item										
NFKC.defined	R	Positional.defined										
NFKC.isa	R	Positional.isa										
NFKC.does	R	Positional.does										
NFKC.Bool	R	Positional.Bool										
NFKC.Str	R	Positional.Str										
NFKC.gist	R	Positional.gist										
NFKC.perl	R	Positional.perl										
NFKC.item	R	Positional.item										
NFKC.clone	R	Positional.clone										
NFKC.new	R	Positional.new										
NFKC.bless	R	Positional.bless										
NFKC.CREATE	R	Positional.CREATE										
NFKC.print	R	Positional.print										
NFKC.put	R	Positional.put										
NFKC.say	R	Positional.say										
NFKC.ACCEPTS	R	Positional.ACCEPTS										
NFKC.WHICH	R	Positional.WHICH										
NFKC.WHERE	R	Positional.WHERE										
NFKC.WHY	R	Positional.WHY										
NFKC.export	R	Positional.export										
NFKC.return	R	Positional.return										
NFKC.return-rw	R	Positional.return-rw										
NFKC.emit	R	Positional.emit										
NFKC.take	R	Positional.take										
NFKC.take	R	Positional.take										
NFKC.take-rw	R	Positional.take-rw										
NFKC.so	R	Positional.so										
NFKC.not	R	Positional.not										
NFKD.new	A			Perl 6 NFKD							<section class="prog__container"><pre><code>method new(*@codes --&gt; Uni:D)\n</code></pre><p>Creates a new Uni instance from the given codepoint numbers.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKD.html#%28Uni%29_method_new
NFKD.NFC	A			Perl 6 NFKD							<section class="prog__container"><pre><code>method NFC(Uni:D: --&gt; NFC:D)\n</code></pre><p>Returns a NFC (Normal Form Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKD.html#%28Uni%29_method_NFC
NFKD.NFD	A			Perl 6 NFKD							<section class="prog__container"><pre><code>method NFD(Uni:D: --&gt; NFD:D)\n</code></pre><p>Returns a NFD (Normal Form Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKD.html#%28Uni%29_method_NFD
NFKD.NFKC	A			Perl 6 NFKD							<section class="prog__container"><pre><code>method NFKC(Uni:D: --&gt; NFKC:D)\n</code></pre><p>Returns a NFKC (Normal Form Compatibility Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKD.html#%28Uni%29_method_NFKC
NFKD.NFKD	A			Perl 6 NFKD							<section class="prog__container"><pre><code>method NFKD(Uni:D: --&gt; NFKD:D)\n</code></pre><p>Returns a NFD (Normal Form Compatibility Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKD.html#%28Uni%29_method_NFKD
NFKD.codes	A			Perl 6 NFKD							<section class="prog__container"><pre><code>method codes(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKD.html#%28Uni%29_method_codes
NFKD.elems	A			Perl 6 NFKD							<section class="prog__container"><pre><code>method elems(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NFKD.html#%28Uni%29_method_elems
NFKD.of	R	Positional.of										
NFKD.ACCEPTS	R	Positional.ACCEPTS										
NFKD.any	R	Positional.any										
NFKD.all	R	Positional.all										
NFKD.one	R	Positional.one										
NFKD.none	R	Positional.none										
NFKD.list	R	Positional.list										
NFKD.push	R	Positional.push										
NFKD.reverse	R	Positional.reverse										
NFKD.sort	R	Positional.sort										
NFKD.map	R	Positional.map										
NFKD.deepmap	R	Positional.deepmap										
NFKD.duckmap	R	Positional.duckmap										
NFKD.flat	R	Positional.flat										
NFKD.eager	R	Positional.eager										
NFKD.elems	R	Positional.elems										
NFKD.end	R	Positional.end										
NFKD.pairup	R	Positional.pairup										
NFKD.exit	R	Positional.exit										
NFKD.item	R	Positional.item										
NFKD.defined	R	Positional.defined										
NFKD.isa	R	Positional.isa										
NFKD.does	R	Positional.does										
NFKD.Bool	R	Positional.Bool										
NFKD.Str	R	Positional.Str										
NFKD.gist	R	Positional.gist										
NFKD.perl	R	Positional.perl										
NFKD.item	R	Positional.item										
NFKD.clone	R	Positional.clone										
NFKD.new	R	Positional.new										
NFKD.bless	R	Positional.bless										
NFKD.CREATE	R	Positional.CREATE										
NFKD.print	R	Positional.print										
NFKD.put	R	Positional.put										
NFKD.say	R	Positional.say										
NFKD.ACCEPTS	R	Positional.ACCEPTS										
NFKD.WHICH	R	Positional.WHICH										
NFKD.WHERE	R	Positional.WHERE										
NFKD.WHY	R	Positional.WHY										
NFKD.export	R	Positional.export										
NFKD.return	R	Positional.return										
NFKD.return-rw	R	Positional.return-rw										
NFKD.emit	R	Positional.emit										
NFKD.take	R	Positional.take										
NFKD.take	R	Positional.take										
NFKD.take-rw	R	Positional.take-rw										
NFKD.so	R	Positional.so										
NFKD.not	R	Positional.not										
Nil.append	A			Perl 6 Nil							<section class="prog__container"><pre><code>method append(*@)\n</code></pre><p>Warns the user that they tried to append onto a Nil.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#method_append
Nil.gist	A			Perl 6 Nil							<section class="prog__container"><pre><code>method gist(--&gt; Str:D)\n</code></pre><p>Returns "Nil".&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#method_gist
Nil.Str	A			Perl 6 Nil							<section class="prog__container"><pre><code>method Str()\n</code></pre><p>Warns the user that they tried to stringify a Nil.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#method_Str
Nil.new	A			Perl 6 Nil							<section class="prog__container"><pre><code>method new(*@)\n</code></pre><p>Returns Nil&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#method_new
Nil.prepend	A			Perl 6 Nil							<section class="prog__container"><pre><code>method prepend(*@)\n</code></pre><p>Warns the user that they tried to prepend onto a Nil.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#method_prepend
Nil.push	A			Perl 6 Nil							<section class="prog__container"><pre><code>method push(*@)\n</code></pre><p>Warns the user that they tried to push onto a Nil.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#method_push
Nil.unshift	A			Perl 6 Nil							<section class="prog__container"><pre><code>method unshift(*@)\n</code></pre><p>Warns the user that they tried to unshift onto a Nil.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#method_unshift
Nil.Numeric	A			Perl 6 Nil							<section class="prog__container"><pre><code>method Numeric()\n</code></pre><p>Warns the user that they tried to numify a Nil.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#method_Numeric
Nil.abs	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_abs
Nil.conj	A			Perl 6 Nil							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_conj
Nil.sqrt	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_sqrt
Nil.sign	A			Perl 6 Nil							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_sign
Nil.rand	A			Perl 6 Nil							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_rand
Nil.sin	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_sin
Nil.asin	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_asin
Nil.cos	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_cos
Nil.acos	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_acos
Nil.tan	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_tan
Nil.atan	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_atan
Nil.atan2	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_atan2
Nil.sec	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_sec
Nil.asec	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_asec
Nil.cosec	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_cosec
Nil.acosec	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_acosec
Nil.cotan	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_cotan
Nil.acotan	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_acotan
Nil.sinh	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_sinh
Nil.asinh	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_asinh
Nil.cosh	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_cosh
Nil.acosh	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_acosh
Nil.tanh	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_tanh
Nil.atanh	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_atanh
Nil.sech	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_sech
Nil.asech	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_asech
Nil.cosech	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_cosech
Nil.acosech	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_acosech
Nil.cotanh	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_cotanh
Nil.acotanh	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_acotanh
Nil.cis	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_cis
Nil.log	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_log
Nil.log10	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_log10
Nil.exp	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_exp
Nil.unpolar	A			Perl 6 Nil							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_unpolar
Nil.round	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_round
Nil.floor	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_floor
Nil.ceiling	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_ceiling
Nil.truncate	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_truncate
Nil.ord	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_ord
Nil.chr	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_chr
Nil.chars	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_chars
Nil.codes	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_codes
Nil.flip	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_flip
Nil.trim	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_trim
Nil.trim-leading	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_trim-leading
Nil.trim-trailing	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_trim-trailing
Nil.lc	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_lc
Nil.uc	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_uc
Nil.fc	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_fc
Nil.tc	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_tc
Nil.tclc	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_tclc
Nil.wordcase	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_wordcase
Nil.samecase	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_samecase
Nil.uniprop	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_uniprop
Nil.uniprops	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_uniprops
Nil.uniname	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_uniname
Nil.uninames	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_uninames
Nil.unimatch	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_unimatch
Nil.chop	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_chop
Nil.chomp	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_chomp
Nil.substr	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_substr
Nil.ords	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_ords
Nil.chrs	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_chrs
Nil.split	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_split
Nil.lines	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_lines
Nil.words	A			Perl 6 Nil							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_words
Nil.comb	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_comb
Nil.contains	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_contains
Nil.index	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_index
Nil.rindex	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_rindex
Nil.match	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_match
Nil.fmt	A			Perl 6 Nil							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_fmt
Nil.roots	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_roots
Nil.IO	A			Perl 6 Nil							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_method_IO
Nil.EVAL	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_EVAL
Nil.EVALFILE	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Cool%29_routine_EVALFILE
Nil.ACCEPTS	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_ACCEPTS
Nil.any	A			Perl 6 Nil							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_any
Nil.all	A			Perl 6 Nil							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_all
Nil.one	A			Perl 6 Nil							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_one
Nil.none	A			Perl 6 Nil							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_none
Nil.list	A			Perl 6 Nil							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_list
Nil.push	A			Perl 6 Nil							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_push
Nil.reverse	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_routine_reverse
Nil.sort	A			Perl 6 Nil							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_sort
Nil.map	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_map
Nil.deepmap	A			Perl 6 Nil							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_deepmap
Nil.duckmap	A			Perl 6 Nil							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_duckmap
Nil.flat	A			Perl 6 Nil							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_flat
Nil.eager	A			Perl 6 Nil							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_eager
Nil.elems	A			Perl 6 Nil							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_elems
Nil.end	A			Perl 6 Nil							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_end
Nil.pairup	A			Perl 6 Nil							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_method_pairup
Nil.exit	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_sub_exit
Nil.item	A			Perl 6 Nil							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Any%29_sub_item
Nil.defined	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_routine_defined
Nil.isa	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_routine_isa
Nil.does	A			Perl 6 Nil							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_routine_does
Nil.Bool	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_routine_Bool
Nil.Str	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_Str
Nil.gist	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_routine_gist
Nil.perl	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_routine_perl
Nil.item	A			Perl 6 Nil							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_item
Nil.clone	A			Perl 6 Nil							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_clone
Nil.new	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_new
Nil.bless	A			Perl 6 Nil							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_bless
Nil.CREATE	A			Perl 6 Nil							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_CREATE
Nil.print	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_print
Nil.put	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_put
Nil.say	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_say
Nil.ACCEPTS	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_ACCEPTS
Nil.WHICH	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_WHICH
Nil.WHERE	A			Perl 6 Nil							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_WHERE
Nil.WHY	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_WHY
Nil.export	A			Perl 6 Nil							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_trait_is_export
Nil.return	A			Perl 6 Nil							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_return
Nil.return-rw	A			Perl 6 Nil							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_return-rw
Nil.emit	A			Perl 6 Nil							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_emit
Nil.take	A			Perl 6 Nil							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_take
Nil.take	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_routine_take
Nil.take-rw	A			Perl 6 Nil							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_routine_take-rw
Nil.so	A			Perl 6 Nil							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_so
Nil.not	A			Perl 6 Nil							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Nil.html#%28Mu%29_method_not
Num.NaN	A			Perl 6 Num							<section class="prog__container"><p>The value NaN is an instance of Num and represents a float point not-a-number value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#NaN
NaN	R	Num.NaN										
Num.rand	A			Perl 6 Num							<section class="prog__container"><pre><code>method rand(Num:D: --&gt; Num)\n</code></pre><p>Returns a pseudo random number between 0 and the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#method_rand
Num.srand	A			Perl 6 Num							<section class="prog__container"><pre><code>sub srand(Int $seed --&gt; Int:D)\n</code></pre><p>Seeds the pseudo random number generator used by Num.rand with the provided value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#sub_srand
srand	D								*[[Num.srand]], seeds the pseudo random number generator used by Num.rand with the provided value.\n*[[NumStr.srand]], seeds the pseudo random number generator used by Num.rand with the provided value.			
Num.Rat	A			Perl 6 Num							<section class="prog__container"><pre><code>method Rat(Real:D: Real $epsilon = 1e-6)\n</code></pre><p>Converts the number to a Rat with the precision $epsilon.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Real%29_method_Rat
Num.rand	A			Perl 6 Num							<section class="prog__container"><pre><code>sub term:&lt;rand&gt; (--&gt; Num:D)\nmethod rand(Real:D: --&gt; Real:D)\n</code></pre><p>Returns a pseudo-random number between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Real%29_routine_rand
Num.sign	A			Perl 6 Num							<section class="prog__container"><pre><code>method sign(Real:D:)\n</code></pre><p>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Real%29_method_sign
Num.round	A			Perl 6 Num							<section class="prog__container"><pre><code>method round(Real:D: $scale = 1)\n</code></pre><p>Rounds the number to scale $scale.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Real%29_method_round
Num.floor	A			Perl 6 Num							<section class="prog__container"><pre><code>method floor(Real:D --&gt; Int:D)\n</code></pre><p>Return the largest integer not greater than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Real%29_method_floor
Num.ceiling	A			Perl 6 Num							<section class="prog__container"><pre><code>method ceiling(Real:D --&gt; Int:D)\n</code></pre><p>Returns the smallest integer not less than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Real%29_method_ceiling
Num.truncate	A			Perl 6 Num							<section class="prog__container"><pre><code>method truncate(Real:D --&gt; Int:D)\n</code></pre><p>Rounds the number towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Real%29_method_truncate
Num.base	A			Perl 6 Num							<section class="prog__container"><pre><code>method base(Real:D: Int:D $base where 2..36, $digits? --&gt; Str:D)\n</code></pre><p>Converts the number to a string, using $base as base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Real%29_method_base
Num.Real	A			Perl 6 Num							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_Real
Num.Int	A			Perl 6 Num							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_Int
Num.Rat	A			Perl 6 Num							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_Rat
Num.Num	A			Perl 6 Num							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_Num
Num.narrow	A			Perl 6 Num							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_narrow
Num.ACCEPTS	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_ACCEPTS
Num.log	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_routine_log
Num.log10	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_routine_log10
Num.exp	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_routine_exp
Num.roots	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_roots
Num.abs	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_routine_abs
Num.sqrt	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_routine_sqrt
Num.conj	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_conj
Num.Bool	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_Bool
Num.succ	A			Perl 6 Num							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_succ
Num.pred	A			Perl 6 Num							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Numeric%29_method_pred
Num.abs	A			Perl 6 Num							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_abs
Num.conj	A			Perl 6 Num							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_conj
Num.sqrt	A			Perl 6 Num							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_sqrt
Num.sign	A			Perl 6 Num							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_sign
Num.rand	A			Perl 6 Num							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_rand
Num.sin	A			Perl 6 Num							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_sin
Num.asin	A			Perl 6 Num							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_asin
Num.cos	A			Perl 6 Num							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_cos
Num.acos	A			Perl 6 Num							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_acos
Num.tan	A			Perl 6 Num							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_tan
Num.atan	A			Perl 6 Num							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_atan
Num.atan2	A			Perl 6 Num							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_atan2
Num.sec	A			Perl 6 Num							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_sec
Num.asec	A			Perl 6 Num							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_asec
Num.cosec	A			Perl 6 Num							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_cosec
Num.acosec	A			Perl 6 Num							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_acosec
Num.cotan	A			Perl 6 Num							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_cotan
Num.acotan	A			Perl 6 Num							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_acotan
Num.sinh	A			Perl 6 Num							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_sinh
Num.asinh	A			Perl 6 Num							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_asinh
Num.cosh	A			Perl 6 Num							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_cosh
Num.acosh	A			Perl 6 Num							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_acosh
Num.tanh	A			Perl 6 Num							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_tanh
Num.atanh	A			Perl 6 Num							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_atanh
Num.sech	A			Perl 6 Num							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_sech
Num.asech	A			Perl 6 Num							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_asech
Num.cosech	A			Perl 6 Num							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_cosech
Num.acosech	A			Perl 6 Num							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_acosech
Num.cotanh	A			Perl 6 Num							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_cotanh
Num.acotanh	A			Perl 6 Num							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_acotanh
Num.cis	A			Perl 6 Num							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_cis
Num.log	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_log
Num.log10	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_log10
Num.exp	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_exp
Num.unpolar	A			Perl 6 Num							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_unpolar
Num.round	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_round
Num.floor	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_floor
Num.ceiling	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_ceiling
Num.truncate	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_truncate
Num.ord	A			Perl 6 Num							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_ord
Num.chr	A			Perl 6 Num							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_chr
Num.chars	A			Perl 6 Num							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_chars
Num.codes	A			Perl 6 Num							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_codes
Num.flip	A			Perl 6 Num							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_flip
Num.trim	A			Perl 6 Num							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_trim
Num.trim-leading	A			Perl 6 Num							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_trim-leading
Num.trim-trailing	A			Perl 6 Num							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_trim-trailing
Num.lc	A			Perl 6 Num							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_lc
Num.uc	A			Perl 6 Num							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_uc
Num.fc	A			Perl 6 Num							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_fc
Num.tc	A			Perl 6 Num							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_tc
Num.tclc	A			Perl 6 Num							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_tclc
Num.wordcase	A			Perl 6 Num							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_wordcase
Num.samecase	A			Perl 6 Num							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_samecase
Num.uniprop	A			Perl 6 Num							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_uniprop
Num.uniprops	A			Perl 6 Num							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_uniprops
Num.uniname	A			Perl 6 Num							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_uniname
Num.uninames	A			Perl 6 Num							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_uninames
Num.unimatch	A			Perl 6 Num							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_unimatch
Num.chop	A			Perl 6 Num							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_chop
Num.chomp	A			Perl 6 Num							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_chomp
Num.substr	A			Perl 6 Num							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_substr
Num.ords	A			Perl 6 Num							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_ords
Num.chrs	A			Perl 6 Num							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_chrs
Num.split	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_split
Num.lines	A			Perl 6 Num							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_lines
Num.words	A			Perl 6 Num							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_words
Num.comb	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_comb
Num.contains	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_contains
Num.index	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_index
Num.rindex	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_rindex
Num.match	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_match
Num.fmt	A			Perl 6 Num							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_fmt
Num.roots	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_roots
Num.IO	A			Perl 6 Num							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_method_IO
Num.EVAL	A			Perl 6 Num							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_EVAL
Num.EVALFILE	A			Perl 6 Num							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Cool%29_routine_EVALFILE
Num.ACCEPTS	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_ACCEPTS
Num.any	A			Perl 6 Num							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_any
Num.all	A			Perl 6 Num							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_all
Num.one	A			Perl 6 Num							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_one
Num.none	A			Perl 6 Num							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_none
Num.list	A			Perl 6 Num							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_list
Num.push	A			Perl 6 Num							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_push
Num.reverse	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_routine_reverse
Num.sort	A			Perl 6 Num							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_sort
Num.map	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_map
Num.deepmap	A			Perl 6 Num							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_deepmap
Num.duckmap	A			Perl 6 Num							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_duckmap
Num.flat	A			Perl 6 Num							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_flat
Num.eager	A			Perl 6 Num							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_eager
Num.elems	A			Perl 6 Num							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_elems
Num.end	A			Perl 6 Num							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_end
Num.pairup	A			Perl 6 Num							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_method_pairup
Num.exit	A			Perl 6 Num							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_sub_exit
Num.item	A			Perl 6 Num							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Any%29_sub_item
Num.defined	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_routine_defined
Num.isa	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_routine_isa
Num.does	A			Perl 6 Num							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_routine_does
Num.Bool	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_routine_Bool
Num.Str	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_Str
Num.gist	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_routine_gist
Num.perl	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_routine_perl
Num.item	A			Perl 6 Num							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_item
Num.clone	A			Perl 6 Num							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_clone
Num.new	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_new
Num.bless	A			Perl 6 Num							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_bless
Num.CREATE	A			Perl 6 Num							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_CREATE
Num.print	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_print
Num.put	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_put
Num.say	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_say
Num.ACCEPTS	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_ACCEPTS
Num.WHICH	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_WHICH
Num.WHERE	A			Perl 6 Num							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_WHERE
Num.WHY	A			Perl 6 Num							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_WHY
Num.export	A			Perl 6 Num							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_trait_is_export
Num.return	A			Perl 6 Num							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_return
Num.return-rw	A			Perl 6 Num							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_return-rw
Num.emit	A			Perl 6 Num							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_emit
Num.take	A			Perl 6 Num							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_take
Num.take	A			Perl 6 Num							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_routine_take
Num.take-rw	A			Perl 6 Num							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_routine_take-rw
Num.so	A			Perl 6 Num							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_so
Num.not	A			Perl 6 Num							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Num.html#%28Mu%29_method_not
NumStr.new	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method new(Num $i, Str $s)\n</code></pre><p>The constructor requires both the Num and the Str value, when constructing one directly the values can be whatever is required:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#method_new
NumStr.Numeric	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method Numeric\n</code></pre><p>The numeric coercion is applied when the NumStr is used in a numeric context, such as a numeric comparison or smart match against a numeric value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#method_Numeric
NumStr.Num	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method Num\n</code></pre><p>Returns the Num value of the NumStr.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#method_Num
NumStr.Str	A			Perl 6 NumStr							<section class="prog__container"><p>Returns the string value of the NumStr.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#method_Str
NumStr.cmp	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub infix:&lt;cmp&gt;(NumStr:D $a, NumStr:D $b)\n</code></pre><p>Compare two NumStr objects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#infix_cmp
NumStr.chop	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    chop(Str:D --&gt; Str:D)\nmulti method chop(Str:D: $chars = 1 --&gt; Str:D)\n</code></pre><p>Returns the string with $chars characters removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_chop
NumStr.chomp	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    chomp(Str:D  --&gt; Str:D)\nmulti method chomp(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string with a logical newline (any codepoint that has the NEWLINE property) removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_chomp
NumStr.lc	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    lc(Str:D  --&gt; Str:D)\nmulti method lc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns a lower-case version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_lc
NumStr.uc	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    uc(Str:D  --&gt; Str:D)\nmulti method uc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns an uppercase version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_uc
NumStr.fc	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    fc(Str:D  --&gt; Str:D)\nmulti method fc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "fold case" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_fc
NumStr.tc	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    tc(Str:D  --&gt; Str:D)\nmulti method tc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_tc
NumStr.tclc	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    tclc(Str:D  --&gt; Str:D)\nmulti method tclc(Str:D: --&gt; Str:D)\n</code></pre><p>Turns the first character to title case, and all other characters to lower case&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_tclc
NumStr.wordcase	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    wordcase(Cool $x  --&gt; Str)\nmulti sub    wordcase(Str:D $x --&gt; Str)\nmulti method wordcase(Str:D: :&amp;filter = &amp;tclc, Mu :$where = True --&gt; Str)\n</code></pre><p>Returns a string in which &amp;filter has been applied to all the words that match $where.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_wordcase
NumStr.unival	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method unival(Str:D --&gt; Numeric)\n</code></pre><p>Returns the numeric value that the first codepoint in the invocant represents, or NaN if it&amp;#39;s not numeric.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_unival
NumStr.univals	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method univals(Str:D --&gt; List)\n</code></pre><p>Returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_univals
NumStr.chars	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    chars(Cool  $x --&gt; Int:D)\nmulti sub    chars(Str:D $x --&gt; Int:D)\nmulti sub    chars(str   $x --&gt; int)\nmulti method chars(Str:D:   --&gt; Int:D)\n</code></pre><p>Returns the number of characters in the string in graphemes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_chars
NumStr.encode	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method encode(Str:D: $encoding, $nf --&gt; Blob)\n</code></pre><p>Returns a Blob which represents the original string in the given encoding and normal form.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_encode
NumStr.index	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    index(Cool $s, Str:D $needle, Cool $startpos = 0 --&gt; Int)\nmulti method index(Cool $needle, Cool $startpos = 0 --&gt; Int)\n</code></pre><p>Searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_index
NumStr.rindex	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    rindex(Str:D $haystack, Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\nmulti method rindex(Str:D $haystack: Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\n</code></pre><p>Returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_rindex
NumStr.match	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method match($pat, :continue(:$c), :pos(:$p), :global(:$g), :overlap(:$ov), :exhaustive(:$ex), :st(:$nd), :rd(:$th), :$nth, :$x --&gt; Match)\n</code></pre><p>Performs a match of the string against $pat and returns a Match object if there is a successful match, and (Any) otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_match
NumStr.parse-base	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    parse-base(Str:D $num, Int:D $radix --&gt; Numeric)\nmulti method parse-base(Str:D $num: Int:D $radix --&gt; Numeric)\n</code></pre><p>Performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_parse-base
NumStr.split	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(Regex:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(List:D $delimiters, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D:   Str:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: Regex:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: List:D $delimiters, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\n</code></pre><p>Splits a string up into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_split
NumStr.comb	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    comb(Str:D   $matcher, Str:D $input, $limit = Inf)\nmulti sub    comb(Regex:D $matcher, Str:D $input, $limit = Inf, Bool :$match)\nmulti sub    comb(Int:D $size, Str:D $input, $limit = Inf)\nmulti method comb(Str:D $input:)\nmulti method comb(Str:D $input: Str:D   $matcher, $limit = Inf)\nmulti method comb(Str:D $input: Regex:D $matcher, $limit = Inf, Bool :$match)\nmulti method comb(Str:D $input: Int:D $size, $limit = Inf)\n</code></pre><p>Searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_comb
NumStr.lines	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    lines(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method lines(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of lines (without trailing newline characters), i.e. the same as a call to $input.comb( / ^^ &#92;N* /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_lines
NumStr.words	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    words(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method words(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of non-whitespace bits, i.e. the same as a call to $input.comb( / &#92;S+ /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_words
NumStr.flip	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    flip(Str:D  --&gt; Str:D)\nmulti method flip(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string reversed character by character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_flip
NumStr.sprintf	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub sprintf( Str:D $format, *@args --&gt; Str:D)\n</code></pre><p>This function is mostly identical to the C library sprintf and printf functions.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_sub_sprintf
NumStr.starts-with	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method starts-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or starts with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_starts-with
NumStr.ends-with	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method ends-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or ends with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_ends-with
NumStr.subst	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method subst(Str:D: $matcher, $replacement, *%opts)\n</code></pre><p>Returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_subst
NumStr.subst-mutate	A			Perl 6 NumStr							<section class="prog__container"><pre><code>my $some-string = "Some foo";\nmy $match = $some-string.subst-mutate(/foo/, "string");\nsay $some-string;  #-&gt; Some string \nsay $match;        #-&gt; ï½¢fooï½£ \n$some-string.subst-mutate(/&lt;[oe]&gt;/, &amp;#39;&amp;#39;, :g); # remove every o and e, notice the :g named argument from .subst \n</code></pre><p>Where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_subst-mutate
NumStr.substr	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    substr(Str:D $s, Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti sub    substr(Str:D $s, Range $from-to --&gt; Str:D)\nmulti method substr(Str:D $s: Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti method substr(Str:D $s: Range $from-to --&gt; Str:D)\n</code></pre><p>Returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_substr
NumStr.substr-eq	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method substr-eq(Str:D:  Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\nmulti method substr-eq(Cool:D: Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\n</code></pre><p>Returns True if the $test-string exactly matches the String object, starting from the given initial index $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_substr-eq
NumStr.substr-rw	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method substr-rw($from, $length?)\n</code></pre><p>A version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_substr-rw
NumStr.samemark	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub samemark(Str:D $string, Str:D $pattern --&gt; Str:D)\nmethod    samemark(Str:D: Str:D $pattern --&gt; Str:D)\n</code></pre><p>Returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_samemark
NumStr.succ	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method succ(Str:D --&gt; Str:D)\n</code></pre><p>Returns the string incremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_succ
NumStr.pred	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method pred(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string decremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_pred
NumStr.ord	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub    ord(Str:D  --&gt; Int:D)\nmulti method ord(Str:D: --&gt; Int:D)\n</code></pre><p>Returns the codepoint number of the base characters of the first grapheme in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_routine_ord
NumStr.ords	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method ords(Str:D: --&gt; Positional)\n</code></pre><p>Returns a list of Unicode codepoint numbers that describe the codepoints making up the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_ords
NumStr.trans	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method trans(Str:D: Pair:D &#92;what, *%n --&gt; Str)\nmulti method trans(Str:D: *@changes, :complement(:$c), :squash(:$s), :delete(:$d) --&gt; Str)\n</code></pre><p>Replaces one or many characters with one or many characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_trans
NumStr.indent	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method indent(Int $steps where { $_ == 0 } )\nmulti method indent(Int $steps where { $_ &gt; 0  } )\nmulti method indent($steps where { .isa(Whatever) || .isa(Int) &amp;&amp; $_ &lt; 0 } )\n</code></pre><p>Indents each line of the string by $steps.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_indent
NumStr.trim	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method trim(Str:D: --&gt; Str)\n</code></pre><p>Remove leading and trailing whitespace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_trim
NumStr.trim-trailing	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method trim-trailing(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the end of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_trim-trailing
NumStr.trim-leading	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method trim-leading(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the beginning of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_trim-leading
NumStr.NFC	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method NFC(Str:D: --&gt; NFC:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form C / Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_NFC
NumStr.NFD	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method NFD(Str:D: --&gt; NFD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form D / Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_NFD
NumStr.NFKC	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method NFKC(Str:D: --&gt; NFKC:D)\n</code></pre><p>Returns a codepoint string in NFKC format (Unicode Normalization Form KC / Compatibility Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_NFKC
NumStr.NFKD	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method NFKD(Str:D: --&gt; NFKD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form KD / Compatibility Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_NFKD
NumStr.ACCEPTS	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi method ACCEPTS(Str:D: $other)\n</code></pre><p>Returns True if the string is the same as $other.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_method_ACCEPTS
NumStr.val	A			Perl 6 NumStr							<section class="prog__container"><pre><code>multi sub val(Str:D $MAYBEVAL, :$val-or-fail)\n</code></pre><p>Given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Str%29_sub_val
NumStr.rand	A			Perl 6 NumStr							<section class="prog__container"><pre><code>method rand(Num:D: --&gt; Num)\n</code></pre><p>Returns a pseudo random number between 0 and the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Num%29_method_rand
NumStr.srand	A			Perl 6 NumStr							<section class="prog__container"><pre><code>sub srand(Int $seed --&gt; Int:D)\n</code></pre><p>Seeds the pseudo random number generator used by Num.rand with the provided value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/NumStr.html#%28Num%29_sub_srand
NumStr.Rat	R	Real.Rat										
NumStr.rand	R	Real.rand										
NumStr.sign	R	Real.sign										
NumStr.round	R	Real.round										
NumStr.floor	R	Real.floor										
NumStr.ceiling	R	Real.ceiling										
NumStr.truncate	R	Real.truncate										
NumStr.base	R	Real.base										
NumStr.abs	R	Real.abs										
NumStr.conj	R	Real.conj										
NumStr.sqrt	R	Real.sqrt										
NumStr.sign	R	Real.sign										
NumStr.rand	R	Real.rand										
NumStr.sin	R	Real.sin										
NumStr.asin	R	Real.asin										
NumStr.cos	R	Real.cos										
NumStr.acos	R	Real.acos										
NumStr.tan	R	Real.tan										
NumStr.atan	R	Real.atan										
NumStr.atan2	R	Real.atan2										
NumStr.sec	R	Real.sec										
NumStr.asec	R	Real.asec										
NumStr.cosec	R	Real.cosec										
NumStr.acosec	R	Real.acosec										
NumStr.cotan	R	Real.cotan										
NumStr.acotan	R	Real.acotan										
NumStr.sinh	R	Real.sinh										
NumStr.asinh	R	Real.asinh										
NumStr.cosh	R	Real.cosh										
NumStr.acosh	R	Real.acosh										
NumStr.tanh	R	Real.tanh										
NumStr.atanh	R	Real.atanh										
NumStr.sech	R	Real.sech										
NumStr.asech	R	Real.asech										
NumStr.cosech	R	Real.cosech										
NumStr.acosech	R	Real.acosech										
NumStr.cotanh	R	Real.cotanh										
NumStr.acotanh	R	Real.acotanh										
NumStr.cis	R	Real.cis										
NumStr.log	R	Real.log										
NumStr.log10	R	Real.log10										
NumStr.exp	R	Real.exp										
NumStr.unpolar	R	Real.unpolar										
NumStr.round	R	Real.round										
NumStr.floor	R	Real.floor										
NumStr.ceiling	R	Real.ceiling										
NumStr.truncate	R	Real.truncate										
NumStr.ord	R	Real.ord										
NumStr.chr	R	Real.chr										
NumStr.chars	R	Real.chars										
NumStr.codes	R	Real.codes										
NumStr.flip	R	Real.flip										
NumStr.trim	R	Real.trim										
NumStr.trim-leading	R	Real.trim-leading										
NumStr.trim-trailing	R	Real.trim-trailing										
NumStr.lc	R	Real.lc										
NumStr.uc	R	Real.uc										
NumStr.fc	R	Real.fc										
NumStr.tc	R	Real.tc										
NumStr.tclc	R	Real.tclc										
NumStr.wordcase	R	Real.wordcase										
NumStr.samecase	R	Real.samecase										
NumStr.uniprop	R	Real.uniprop										
NumStr.uniprops	R	Real.uniprops										
NumStr.uniname	R	Real.uniname										
NumStr.uninames	R	Real.uninames										
NumStr.unimatch	R	Real.unimatch										
NumStr.chop	R	Real.chop										
NumStr.chomp	R	Real.chomp										
NumStr.substr	R	Real.substr										
NumStr.ords	R	Real.ords										
NumStr.chrs	R	Real.chrs										
NumStr.split	R	Real.split										
NumStr.lines	R	Real.lines										
NumStr.words	R	Real.words										
NumStr.comb	R	Real.comb										
NumStr.contains	R	Real.contains										
NumStr.index	R	Real.index										
NumStr.rindex	R	Real.rindex										
NumStr.match	R	Real.match										
NumStr.fmt	R	Real.fmt										
NumStr.roots	R	Real.roots										
NumStr.IO	R	Real.IO										
NumStr.EVAL	R	Real.EVAL										
NumStr.EVALFILE	R	Real.EVALFILE										
NumStr.ACCEPTS	R	Real.ACCEPTS										
NumStr.any	R	Real.any										
NumStr.all	R	Real.all										
NumStr.one	R	Real.one										
NumStr.none	R	Real.none										
NumStr.list	R	Real.list										
NumStr.push	R	Real.push										
NumStr.reverse	R	Real.reverse										
NumStr.sort	R	Real.sort										
NumStr.map	R	Real.map										
NumStr.deepmap	R	Real.deepmap										
NumStr.duckmap	R	Real.duckmap										
NumStr.flat	R	Real.flat										
NumStr.eager	R	Real.eager										
NumStr.elems	R	Real.elems										
NumStr.end	R	Real.end										
NumStr.pairup	R	Real.pairup										
NumStr.exit	R	Real.exit										
NumStr.item	R	Real.item										
NumStr.defined	R	Real.defined										
NumStr.isa	R	Real.isa										
NumStr.does	R	Real.does										
NumStr.Bool	R	Real.Bool										
NumStr.Str	R	Real.Str										
NumStr.gist	R	Real.gist										
NumStr.perl	R	Real.perl										
NumStr.item	R	Real.item										
NumStr.clone	R	Real.clone										
NumStr.new	R	Real.new										
NumStr.bless	R	Real.bless										
NumStr.CREATE	R	Real.CREATE										
NumStr.print	R	Real.print										
NumStr.put	R	Real.put										
NumStr.say	R	Real.say										
NumStr.ACCEPTS	R	Real.ACCEPTS										
NumStr.WHICH	R	Real.WHICH										
NumStr.WHERE	R	Real.WHERE										
NumStr.WHY	R	Real.WHY										
NumStr.export	R	Real.export										
NumStr.return	R	Real.return										
NumStr.return-rw	R	Real.return-rw										
NumStr.emit	R	Real.emit										
NumStr.take	R	Real.take										
NumStr.take	R	Real.take										
NumStr.take-rw	R	Real.take-rw										
NumStr.so	R	Real.so										
NumStr.not	R	Real.not										
Numeric.Real	A			Perl 6 Numeric							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_Real
Numeric.Int	A			Perl 6 Numeric							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_Int
Numeric.Rat	A			Perl 6 Numeric							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_Rat
Numeric.Num	A			Perl 6 Numeric							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_Num
Numeric.narrow	A			Perl 6 Numeric							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_narrow
Numeric.ACCEPTS	A			Perl 6 Numeric							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_ACCEPTS
Numeric.log	A			Perl 6 Numeric							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#routine_log
Numeric.log10	A			Perl 6 Numeric							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#routine_log10
Numeric.exp	A			Perl 6 Numeric							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#routine_exp
Numeric.roots	A			Perl 6 Numeric							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_roots
Numeric.abs	A			Perl 6 Numeric							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#routine_abs
Numeric.sqrt	A			Perl 6 Numeric							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#routine_sqrt
Numeric.conj	A			Perl 6 Numeric							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_conj
Numeric.Bool	A			Perl 6 Numeric							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_Bool
Numeric.succ	A			Perl 6 Numeric							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_succ
Numeric.pred	A			Perl 6 Numeric							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Numeric.html#method_pred
ObjAt.ACCEPTS	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_ACCEPTS
ObjAt.any	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_any
ObjAt.all	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_all
ObjAt.one	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_one
ObjAt.none	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_none
ObjAt.list	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_list
ObjAt.push	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_push
ObjAt.reverse	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_routine_reverse
ObjAt.sort	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_sort
ObjAt.map	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_map
ObjAt.deepmap	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_deepmap
ObjAt.duckmap	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_duckmap
ObjAt.flat	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_flat
ObjAt.eager	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_eager
ObjAt.elems	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_elems
ObjAt.end	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_end
ObjAt.pairup	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_method_pairup
ObjAt.exit	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_sub_exit
ObjAt.item	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Any%29_sub_item
ObjAt.defined	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_routine_defined
ObjAt.isa	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_routine_isa
ObjAt.does	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_routine_does
ObjAt.Bool	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_routine_Bool
ObjAt.Str	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_Str
ObjAt.gist	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_routine_gist
ObjAt.perl	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_routine_perl
ObjAt.item	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_item
ObjAt.clone	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_clone
ObjAt.new	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_new
ObjAt.bless	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_bless
ObjAt.CREATE	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_CREATE
ObjAt.print	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_print
ObjAt.put	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_put
ObjAt.say	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_say
ObjAt.ACCEPTS	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_ACCEPTS
ObjAt.WHICH	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_WHICH
ObjAt.WHERE	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_WHERE
ObjAt.WHY	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_WHY
ObjAt.export	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_trait_is_export
ObjAt.return	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_return
ObjAt.return-rw	A			Perl 6 ObjAt							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_return-rw
ObjAt.emit	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_emit
ObjAt.take	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_take
ObjAt.take	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_routine_take
ObjAt.take-rw	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_routine_take-rw
ObjAt.so	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_so
ObjAt.not	A			Perl 6 ObjAt							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ObjAt.html#%28Mu%29_method_not
Order.cmp	A			Perl 6 Order							<section class="prog__container"><pre><code>multi sub infix:&lt;cmp&gt;(&#92;a, &#92;b --&gt; Order:D)\n</code></pre><p>Coerces its arguments to Stringy.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#infix_cmp
Order.&lt;=&gt;	A			Perl 6 Order							<section class="prog__container"><pre><code>multi sub infix:Â«&lt;=&gt;Â»(Int:D &#92;a, Int:D &#92;b --&gt; Order:D)\n</code></pre><p>Specialized form for Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#infix_%3C%3D%3E
&lt;=&gt;	R	Order.&lt;=&gt;										
Order.chr	A			Perl 6 Order							<section class="prog__container"><pre><code>multi sub    chr(Int:D  --&gt; Str:D)\nmulti method chr(Int:D: --&gt; Str:D)\n</code></pre><p>Returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#%28Int%29_routine_chr
Order.expmod	A			Perl 6 Order							<section class="prog__container"><pre><code>multi sub    expmod(      $x,     $y,     $mod --&gt; Int:D)\nmulti sub    expmod(Int:D $x, Int $y, Int $mod --&gt; Int:D)\nmulti method expmod(Int:D:    Int $y, Int $mod --&gt; Int:D)\n</code></pre><p>Returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#%28Int%29_routine_expmod
Order.polymod	A			Perl 6 Order							<section class="prog__container"><pre><code>method polymod(Int:D: +@mods)\n</code></pre><p>Returns a sequence of mod results corresponding to the divisors in @mods.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#%28Int%29_method_polymod
Order.is-prime	A			Perl 6 Order							<section class="prog__container"><pre><code>multi sub    is-prime (Int:D $number --&gt; Bool:D)\nmulti method is-prime (Int:D: --&gt; Bool:D)\n</code></pre><p>Returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#%28Int%29_routine_is-prime
Order.lsb	A			Perl 6 Order							<section class="prog__container"><pre><code>multi method lsb(Int:D:)\nmulti sub    lsb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#%28Int%29_routine_lsb
Order.msb	A			Perl 6 Order							<section class="prog__container"><pre><code>multi method msb(Int:D:)\nmulti sub    msb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#%28Int%29_routine_msb
Order.unival	A			Perl 6 Order							<section class="prog__container"><pre><code>multi sub    unival(Int:D  --&gt; Numeric)\nmulti method unival(Int:D: --&gt; Numeric)\n</code></pre><p>Returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#%28Int%29_routine_unival
Order.div	A			Perl 6 Order							<section class="prog__container"><pre><code>multi sub infix:&lt;div&gt;(Int:D, Int:D --&gt; Int:D)\n</code></pre><p>Does an integer division, rounded down.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Order.html#%28Int%29_infix_div
Order.Rat	R	Real.Rat										
Order.rand	R	Real.rand										
Order.sign	R	Real.sign										
Order.round	R	Real.round										
Order.floor	R	Real.floor										
Order.ceiling	R	Real.ceiling										
Order.truncate	R	Real.truncate										
Order.base	R	Real.base										
Order.abs	R	Real.abs										
Order.conj	R	Real.conj										
Order.sqrt	R	Real.sqrt										
Order.sign	R	Real.sign										
Order.rand	R	Real.rand										
Order.sin	R	Real.sin										
Order.asin	R	Real.asin										
Order.cos	R	Real.cos										
Order.acos	R	Real.acos										
Order.tan	R	Real.tan										
Order.atan	R	Real.atan										
Order.atan2	R	Real.atan2										
Order.sec	R	Real.sec										
Order.asec	R	Real.asec										
Order.cosec	R	Real.cosec										
Order.acosec	R	Real.acosec										
Order.cotan	R	Real.cotan										
Order.acotan	R	Real.acotan										
Order.sinh	R	Real.sinh										
Order.asinh	R	Real.asinh										
Order.cosh	R	Real.cosh										
Order.acosh	R	Real.acosh										
Order.tanh	R	Real.tanh										
Order.atanh	R	Real.atanh										
Order.sech	R	Real.sech										
Order.asech	R	Real.asech										
Order.cosech	R	Real.cosech										
Order.acosech	R	Real.acosech										
Order.cotanh	R	Real.cotanh										
Order.acotanh	R	Real.acotanh										
Order.cis	R	Real.cis										
Order.log	R	Real.log										
Order.log10	R	Real.log10										
Order.exp	R	Real.exp										
Order.unpolar	R	Real.unpolar										
Order.round	R	Real.round										
Order.floor	R	Real.floor										
Order.ceiling	R	Real.ceiling										
Order.truncate	R	Real.truncate										
Order.ord	R	Real.ord										
Order.chr	R	Real.chr										
Order.chars	R	Real.chars										
Order.codes	R	Real.codes										
Order.flip	R	Real.flip										
Order.trim	R	Real.trim										
Order.trim-leading	R	Real.trim-leading										
Order.trim-trailing	R	Real.trim-trailing										
Order.lc	R	Real.lc										
Order.uc	R	Real.uc										
Order.fc	R	Real.fc										
Order.tc	R	Real.tc										
Order.tclc	R	Real.tclc										
Order.wordcase	R	Real.wordcase										
Order.samecase	R	Real.samecase										
Order.uniprop	R	Real.uniprop										
Order.uniprops	R	Real.uniprops										
Order.uniname	R	Real.uniname										
Order.uninames	R	Real.uninames										
Order.unimatch	R	Real.unimatch										
Order.chop	R	Real.chop										
Order.chomp	R	Real.chomp										
Order.substr	R	Real.substr										
Order.ords	R	Real.ords										
Order.chrs	R	Real.chrs										
Order.split	R	Real.split										
Order.lines	R	Real.lines										
Order.words	R	Real.words										
Order.comb	R	Real.comb										
Order.contains	R	Real.contains										
Order.index	R	Real.index										
Order.rindex	R	Real.rindex										
Order.match	R	Real.match										
Order.fmt	R	Real.fmt										
Order.roots	R	Real.roots										
Order.IO	R	Real.IO										
Order.EVAL	R	Real.EVAL										
Order.EVALFILE	R	Real.EVALFILE										
Order.ACCEPTS	R	Real.ACCEPTS										
Order.any	R	Real.any										
Order.all	R	Real.all										
Order.one	R	Real.one										
Order.none	R	Real.none										
Order.list	R	Real.list										
Order.push	R	Real.push										
Order.reverse	R	Real.reverse										
Order.sort	R	Real.sort										
Order.map	R	Real.map										
Order.deepmap	R	Real.deepmap										
Order.duckmap	R	Real.duckmap										
Order.flat	R	Real.flat										
Order.eager	R	Real.eager										
Order.elems	R	Real.elems										
Order.end	R	Real.end										
Order.pairup	R	Real.pairup										
Order.exit	R	Real.exit										
Order.item	R	Real.item										
Order.defined	R	Real.defined										
Order.isa	R	Real.isa										
Order.does	R	Real.does										
Order.Bool	R	Real.Bool										
Order.Str	R	Real.Str										
Order.gist	R	Real.gist										
Order.perl	R	Real.perl										
Order.item	R	Real.item										
Order.clone	R	Real.clone										
Order.new	R	Real.new										
Order.bless	R	Real.bless										
Order.CREATE	R	Real.CREATE										
Order.print	R	Real.print										
Order.put	R	Real.put										
Order.say	R	Real.say										
Order.ACCEPTS	R	Real.ACCEPTS										
Order.WHICH	R	Real.WHICH										
Order.WHERE	R	Real.WHERE										
Order.WHY	R	Real.WHY										
Order.export	R	Real.export										
Order.return	R	Real.return										
Order.return-rw	R	Real.return-rw										
Order.emit	R	Real.emit										
Order.take	R	Real.take										
Order.take	R	Real.take										
Order.take-rw	R	Real.take-rw										
Order.so	R	Real.so										
Order.not	R	Real.not										
Pair.antipair	A			Perl 6 Pair							<section class="prog__container"><pre><code>method antipair(--&gt; Pair:D)\n</code></pre><p>Returns a new Pair object with key and value exchanged.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_antipair
antipair	R	Pair.antipair										
Pair.key	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method key(Pair:D:)\n</code></pre><p>Returns the key part of the Pair.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_key
key	R	Pair.key										
Pair.value	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method value(Pair:D:) is rw\n</code></pre><p>Returns the value part of the Pair.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_value
value	R	Pair.value										
Pair.cmp	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi sub infix:&lt;cmp&gt;(Pair:D, Pair:D)\n</code></pre><p>The type-agnostic comparator; compares two Pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#infix_cmp
Pair.fmt	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method fmt(Pair:D: Str:D $format --&gt; Str:D)\n</code></pre><p>Takes a format string, and returns a string the key and value parts of the Pair formatted.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_fmt
Pair.kv	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method kv(Pair:D: --&gt; List:D)\n</code></pre><p>Returns a two-element List with the key and value parts of Pair, in that order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_kv
Pair.pairs	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method pairs(Pair:D:)\n</code></pre><p>Returns a list of one Pair, namely this one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_pairs
Pair.antipairs	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method antipairs(Pair:D:)\n</code></pre><p>Returns a List containing the antipair of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_antipairs
Pair.invert	A			Perl 6 Pair							<section class="prog__container"><pre><code>method invert(Pair:D:)\n</code></pre><p>Returns a new Pair object with key and value exchanged, just like antipair, unless the value of the invocant does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_invert
Pair.keys	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method keys(Pair:D: --&gt; List:D)\n</code></pre><p>Returns a List containing the key of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_keys
Pair.values	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method values(Pair:D: --&gt; List:D)\n</code></pre><p>Returns a List containing the value of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_values
Pair.freeze	A			Perl 6 Pair							<section class="prog__container"><pre><code>method freeze(Pair:D:)\n</code></pre><p>Makes the value of the Pair read-only, by removing it from its Scalar container, and returns it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_freeze
freeze	R	Pair.freeze										
Pair.Str	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method Str(Pair:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation of the invocant formatted as key ~ &#92;t ~ value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#method_Str
Pair.ACCEPTS	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_ACCEPTS
Pair.any	A			Perl 6 Pair							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_any
Pair.all	A			Perl 6 Pair							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_all
Pair.one	A			Perl 6 Pair							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_one
Pair.none	A			Perl 6 Pair							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_none
Pair.list	A			Perl 6 Pair							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_list
Pair.push	A			Perl 6 Pair							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_push
Pair.reverse	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_routine_reverse
Pair.sort	A			Perl 6 Pair							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_sort
Pair.map	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_map
Pair.deepmap	A			Perl 6 Pair							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_deepmap
Pair.duckmap	A			Perl 6 Pair							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_duckmap
Pair.flat	A			Perl 6 Pair							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_flat
Pair.eager	A			Perl 6 Pair							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_eager
Pair.elems	A			Perl 6 Pair							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_elems
Pair.end	A			Perl 6 Pair							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_end
Pair.pairup	A			Perl 6 Pair							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_method_pairup
Pair.exit	A			Perl 6 Pair							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_sub_exit
Pair.item	A			Perl 6 Pair							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Any%29_sub_item
Pair.defined	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_routine_defined
Pair.isa	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_routine_isa
Pair.does	A			Perl 6 Pair							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_routine_does
Pair.Bool	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_routine_Bool
Pair.Str	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_Str
Pair.gist	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_routine_gist
Pair.perl	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_routine_perl
Pair.item	A			Perl 6 Pair							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_item
Pair.clone	A			Perl 6 Pair							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_clone
Pair.new	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_new
Pair.bless	A			Perl 6 Pair							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_bless
Pair.CREATE	A			Perl 6 Pair							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_CREATE
Pair.print	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_print
Pair.put	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_put
Pair.say	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_say
Pair.ACCEPTS	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_ACCEPTS
Pair.WHICH	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_WHICH
Pair.WHERE	A			Perl 6 Pair							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_WHERE
Pair.WHY	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_WHY
Pair.export	A			Perl 6 Pair							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_trait_is_export
Pair.return	A			Perl 6 Pair							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_return
Pair.return-rw	A			Perl 6 Pair							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_return-rw
Pair.emit	A			Perl 6 Pair							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_emit
Pair.take	A			Perl 6 Pair							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_take
Pair.take	A			Perl 6 Pair							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_routine_take
Pair.take-rw	A			Perl 6 Pair							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_routine_take-rw
Pair.so	A			Perl 6 Pair							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_so
Pair.not	A			Perl 6 Pair							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Pair.html#%28Mu%29_method_not
Parameter.name	A			Perl 6 Parameter							<section class="prog__container"><p>Returns the variable name, which includes all sigils and twigils.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_name
Parameter.sigil	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method sigil(Parameter:D: --&gt; Str:D)\n</code></pre><p>Returns a string containing the parameter&amp;#39;s sigil, for a looser definition of "sigil" than what is considered part of the variable&amp;#39;s name|method name.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_sigil
sigil	R	Parameter.sigil										
Parameter.type	A			Perl 6 Parameter							<section class="prog__container"><p>Returns the nominal type constraint of the parameter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_type
Parameter.constraints	A			Perl 6 Parameter							<section class="prog__container"><p>Returns additional constraints on the parameter (usually as an all-Junction).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_constraints
Parameter.named	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method named(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True if it&amp;#39;s a named parameter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_named
named	R	Parameter.named										
Parameter.named_names	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method named_names(Parameter:D: --&gt; List:D)\n</code></pre><p>Returns the list of externally usable names/aliases for a named parameter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_named_names
named_names	R	Parameter.named_names										
Parameter.positional	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method positional(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the parameter is positional.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_positional
positional	R	Parameter.positional										
Parameter.slurpy	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method slurpy(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True for slurpy parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_slurpy
slurpy	R	Parameter.slurpy										
Parameter.twigil	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method twigil(Parameter:D: --&gt; Str:D)\n</code></pre><p>Returns a string containing the twigil part of the parameter&amp;#39;s name.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_twigil
twigil	R	Parameter.twigil										
Parameter.optional	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method optional(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True for optional parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_optional
optional	R	Parameter.optional										
Parameter.raw	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method raw(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True for raw parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_raw
raw	R	Parameter.raw										
Parameter.capture	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method capture(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True for parameters that capture the rest of the argument list into a single Capture object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_capture
capture	R	Parameter.capture										
Parameter.rw	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method rw(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True for is rw parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_rw
Parameter.copy	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method copy(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True for is copy parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_copy
copy	R	Parameter.copy										
Parameter.readonly	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method readonly(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True for read-only parameters (the default).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_readonly
Parameter.invocant	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method invocant(Parameter:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the parameter is the invocant parameter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_invocant
invocant	R	Parameter.invocant										
Parameter.default	A			Perl 6 Parameter							<section class="prog__container"><p>Returns a closure that upon invocation returns the default value for this parameter, or Any if no default was provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_default
Parameter.type_captures	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method type_captures(Parameter:D: --&gt; List:D)\n</code></pre><p>Returns a list of variable names of type captures associated with this parameter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_type_captures
type_captures	R	Parameter.type_captures										
Parameter.sub_signature	A			Perl 6 Parameter							<section class="prog__container"><p>If the parameter has a sub-signature, returns a Signature object for it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#method_sub_signature
sub_signature	R	Parameter.sub_signature										
Parameter.ACCEPTS	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_ACCEPTS
Parameter.any	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_any
Parameter.all	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_all
Parameter.one	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_one
Parameter.none	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_none
Parameter.list	A			Perl 6 Parameter							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_list
Parameter.push	A			Perl 6 Parameter							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_push
Parameter.reverse	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_routine_reverse
Parameter.sort	A			Perl 6 Parameter							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_sort
Parameter.map	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_map
Parameter.deepmap	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_deepmap
Parameter.duckmap	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_duckmap
Parameter.flat	A			Perl 6 Parameter							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_flat
Parameter.eager	A			Perl 6 Parameter							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_eager
Parameter.elems	A			Perl 6 Parameter							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_elems
Parameter.end	A			Perl 6 Parameter							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_end
Parameter.pairup	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_method_pairup
Parameter.exit	A			Perl 6 Parameter							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_sub_exit
Parameter.item	A			Perl 6 Parameter							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Any%29_sub_item
Parameter.defined	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_routine_defined
Parameter.isa	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_routine_isa
Parameter.does	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_routine_does
Parameter.Bool	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_routine_Bool
Parameter.Str	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_Str
Parameter.gist	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_routine_gist
Parameter.perl	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_routine_perl
Parameter.item	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_item
Parameter.clone	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_clone
Parameter.new	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_new
Parameter.bless	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_bless
Parameter.CREATE	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_CREATE
Parameter.print	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_print
Parameter.put	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_put
Parameter.say	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_say
Parameter.ACCEPTS	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_ACCEPTS
Parameter.WHICH	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_WHICH
Parameter.WHERE	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_WHERE
Parameter.WHY	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_WHY
Parameter.export	A			Perl 6 Parameter							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_trait_is_export
Parameter.return	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_return
Parameter.return-rw	A			Perl 6 Parameter							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_return-rw
Parameter.emit	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_emit
Parameter.take	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_take
Parameter.take	A			Perl 6 Parameter							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_routine_take
Parameter.take-rw	A			Perl 6 Parameter							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_routine_take-rw
Parameter.so	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_so
Parameter.not	A			Perl 6 Parameter							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameter.html#%28Mu%29_method_not
Parameters.Parameters	A			Perl 6 Parameters							<section class="prog__container"><pre><code>role R[$d] { has $.a = $d };\nclass C does R["default"] { };\n \nmy $c = C.new;\ndd $c;\n# OUTPUTÂ«C $c = C.new(a =&gt; "default")â¤Â» \n</code></pre><p>Roles can be provided with parameters in-between [] behind a roles name.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Parameters.html#Parameters
Positional.of	A			Perl 6 Positional							<section class="prog__container"><pre><code>method of()\n</code></pre><p>Returns the type constraint for elements of the positional container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Positional.html#method_of
PositionalBindFailover.cache	A			Perl 6 PositionalBindFailover							<section class="prog__container"><pre><code>method cache(PositionalBindFailover:D: --&gt; List:D)\n</code></pre><p>Returns a List based on the iterator method, and caches it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/PositionalBindFailover.html#method_cache
cache	D								*[[PositionalBindFailover.cache]], returns a List based on the iterator method, and caches it.\n*[[Seq.cache]], returns a List based on the iterator method, and caches it.			
PositionalBindFailover.list	A			Perl 6 PositionalBindFailover							<section class="prog__container"><pre><code>method list(PositionalBindFailover:D: --&gt; List:D)\n</code></pre><p>Returns a List based on the iterator method without caching it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/PositionalBindFailover.html#method_list
PositionalBindFailover.iterator	A			Perl 6 PositionalBindFailover							<section class="prog__container"><pre><code>method iterator(PositionalBindFailover:D:) { ... }\n</code></pre><p>This method stub ensure that a class implementing role PositionalBindFailover provides an iterator method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/PositionalBindFailover.html#method_iterator
Proc.new	A			Perl 6 Proc							<section class="prog__container"><pre><code>method new(Proc:U:\n        :$in = &amp;#39;-&amp;#39;,\n        :$out = &amp;#39;-&amp;#39;,\n        :$err = &amp;#39;-&amp;#39;,\n        Bool :$bin = False,\n        Bool :$chomp = True,\n        Bool :$merge = False,\n        Str:D :$enc = &amp;#39;UTF-8&amp;#39;,\n        Str:D :$nl = "&#92;n",\n    --&gt; Proc:D)\nsub run(\n        :$in = &amp;#39;-&amp;#39;,\n        :$out = &amp;#39;-&amp;#39;,\n        :$err = &amp;#39;-&amp;#39;,\n        Bool :$bin = False,\n        Bool :$chomp = True,\n        Bool :$merge = False,\n        Str:D :$enc = &amp;#39;UTF-8&amp;#39;,\n        Str:D :$nl = "&#92;n",\n        :$cwd = $*CWD,\n        Hash() :$env = %*ENV,\n        *@args\n    --&gt; Proc:D)\n</code></pre><p>new creates a new Proc object, whereas run creates one, and spawns it with the command and arguments provided in @args.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#method_new
Proc.sink	A			Perl 6 Proc							<section class="prog__container"><p>When sunk, the Proc object will throw X::Proc::Unsuccessful if the process it ran exited unsuccessfully.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#method_sink
sink	R	Proc.sink										
Proc.spawn	A			Perl 6 Proc							<section class="prog__container"><pre><code>method spawn(*@args ($, *@), :$cwd = $*CWD, Hash() :$env = %*ENV --&gt; Bool:D)\n</code></pre><p>Runs the Proc object with the given command, argument list, working directory and environment.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#method_spawn
spawn	R	Proc.spawn										
Proc.shell	A			Perl 6 Proc							<section class="prog__container"><pre><code>method shell($cmd, :$cwd = $*CWD, :$env --&gt; Bool:D)\n</code></pre><p>Runs the Proc object with the given command, which is passed through to the shell for parsing and execution.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#method_shell
Proc.command	A			Perl 6 Proc							<section class="prog__container"><pre><code>method command(Proc:D: --&gt; Array:D)\n</code></pre><p>The command method is an accessor to an array containing the arguments that were passed when the Proc object was executed via spawn or shell or run.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#method_command
command	R	Proc.command										
Proc.exitcode	A			Perl 6 Proc							<section class="prog__container"><pre><code>method exitcode(Proc:D: --&gt; Int:D)\n</code></pre><p>Returns the exit code of the external process, or -1 if it has not exited yet.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#method_exitcode
exitcode	R	Proc.exitcode										
Proc.signal	A			Perl 6 Proc							<section class="prog__container"><pre><code>method signal(Proc:D:)\n</code></pre><p>Returns the signal number with which the external process was killed, or 0 or an undefined value otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#method_signal
signal	D								*[[Proc.signal]], returns the signal number with which the external process was killed, or 0 or an undefined value otherwise.\n*[[supplies.signal]], creates a supply for the Signal enums (such as SIGINT) specified, and an optional :scheduler parameter.			
Proc.pid	A			Perl 6 Proc							<section class="prog__container"><pre><code>method pid(Proc:D:)\n</code></pre><p>Returns the Process Identifier (pid) of the external process, if available.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#method_pid
pid	R	Proc.pid										
Proc.ACCEPTS	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_ACCEPTS
Proc.any	A			Perl 6 Proc							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_any
Proc.all	A			Perl 6 Proc							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_all
Proc.one	A			Perl 6 Proc							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_one
Proc.none	A			Perl 6 Proc							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_none
Proc.list	A			Perl 6 Proc							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_list
Proc.push	A			Perl 6 Proc							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_push
Proc.reverse	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_routine_reverse
Proc.sort	A			Perl 6 Proc							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_sort
Proc.map	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_map
Proc.deepmap	A			Perl 6 Proc							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_deepmap
Proc.duckmap	A			Perl 6 Proc							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_duckmap
Proc.flat	A			Perl 6 Proc							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_flat
Proc.eager	A			Perl 6 Proc							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_eager
Proc.elems	A			Perl 6 Proc							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_elems
Proc.end	A			Perl 6 Proc							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_end
Proc.pairup	A			Perl 6 Proc							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_method_pairup
Proc.exit	A			Perl 6 Proc							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_sub_exit
Proc.item	A			Perl 6 Proc							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Any%29_sub_item
Proc.defined	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_routine_defined
Proc.isa	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_routine_isa
Proc.does	A			Perl 6 Proc							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_routine_does
Proc.Bool	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_routine_Bool
Proc.Str	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_Str
Proc.gist	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_routine_gist
Proc.perl	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_routine_perl
Proc.item	A			Perl 6 Proc							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_item
Proc.clone	A			Perl 6 Proc							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_clone
Proc.new	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_new
Proc.bless	A			Perl 6 Proc							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_bless
Proc.CREATE	A			Perl 6 Proc							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_CREATE
Proc.print	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_print
Proc.put	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_put
Proc.say	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_say
Proc.ACCEPTS	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_ACCEPTS
Proc.WHICH	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_WHICH
Proc.WHERE	A			Perl 6 Proc							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_WHERE
Proc.WHY	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_WHY
Proc.export	A			Perl 6 Proc							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_trait_is_export
Proc.return	A			Perl 6 Proc							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_return
Proc.return-rw	A			Perl 6 Proc							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_return-rw
Proc.emit	A			Perl 6 Proc							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_emit
Proc.take	A			Perl 6 Proc							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_take
Proc.take	A			Perl 6 Proc							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_routine_take
Proc.take-rw	A			Perl 6 Proc							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_routine_take-rw
Proc.so	A			Perl 6 Proc							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_so
Proc.not	A			Perl 6 Proc							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proc.html#%28Mu%29_method_not
Promise.start	A			Perl 6 Promise							<section class="prog__container"><pre><code>method start(Promise:U: &amp;code, :$scheduler = $*SCHEDULER --&gt; Promise:D)\n</code></pre><p>Creates a new Promise that runs the given code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_start
start	D								*[[Promise.start]], creates a new Promise that runs the given code object.\n*[[Supply.start]], creates a supply of supplies.\n*[[Thread.start]], creates, runs and returns a new Thread.			
Promise.in	A			Perl 6 Promise							<section class="prog__container"><pre><code>method in(Promise:U: $seconds, :$scheduler = $*SCHEDULER --&gt; Promise:D)\n</code></pre><p>Creates a new Promise that will be kept in $seconds seconds, or later.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_in
in	R	Promise.in										
Promise.at	A			Perl 6 Promise							<section class="prog__container"><pre><code>method at(Promise:U: $time, :$scheduler = $*SCHEDULER --&gt; Promise:D)\n</code></pre><p>Creates a new Promise that will be kept at the given time, or later.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_at
at	R	Promise.at										
Promise.allof	A			Perl 6 Promise							<section class="prog__container"><pre><code>method allof(Promise:U: *@promises --&gt; Promise:D)\n</code></pre><p>Returns a new promise that will be kept when all the promises passed as arguments are kept or broken.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_allof
allof	R	Promise.allof										
Promise.anyof	A			Perl 6 Promise							<section class="prog__container"><pre><code>method anyof(Promise:U: *@promises --&gt; Promise:D)\n</code></pre><p>Returns a new promise that will be kept as soon as any of the promises passed as arguments is kept or broken.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_anyof
anyof	R	Promise.anyof										
Promise.then	A			Perl 6 Promise							<section class="prog__container"><pre><code>method then(Promise:D: &amp;code)\n</code></pre><p>Schedules a piece of code to be run after the invocant has been kept or broken, and returns a new promise for this computation.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_then
then	R	Promise.then										
Promise.keep	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method keep(Promise:D:)\nmulti method keep(Promise:D: &#92;result)\n</code></pre><p>Keeps a promise, optionally setting the result.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_keep
keep	R	Promise.keep										
Promise.break	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method break(Promise:D:)\nmulti method break(Promise:D: &#92;result)\n</code></pre><p>Breaks a promise, optionally setting the result.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_break
break	R	Promise.break										
Promise.result	A			Perl 6 Promise							<section class="prog__container"><pre><code>method result(Promise:D)\n</code></pre><p>Waits for the promise to be kept or broken.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_result
result	R	Promise.result										
Promise.cause	A			Perl 6 Promise							<section class="prog__container"><pre><code>method cause(Promise:D)\n</code></pre><p>If the promise was broken, returns the result (or exception).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_cause
cause	R	Promise.cause										
Promise.Bool	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method Bool(Promise:D:)\n</code></pre><p>Returns True for a kept or broken promise, and False for one in state Planned.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_Bool
Promise.status	A			Perl 6 Promise							<section class="prog__container"><pre><code>method status(Promise:D --&gt; PromiseStatus)\n</code></pre><p>Returns the current state of the promise: Kept, Broken or Planned:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_status
status	R	Promise.status										
Promise.scheduler	A			Perl 6 Promise							<section class="prog__container"><pre><code>method scheduler(Promise:D:)\n</code></pre><p>Returns the scheduler that manages the promise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_scheduler
scheduler	R	Promise.scheduler										
Promise.vow	A			Perl 6 Promise							<section class="prog__container"><pre><code>my class Vow {\n    has Promise $.promise;\n    method keep() { ... }\n    method break() { ... }\n}\nmethod vow(Promise:D: --&gt; Vow:D)\n</code></pre><p>Returns an object that holds the sole authority over keeping or breaking a promise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_vow
vow	R	Promise.vow										
Promise.Supply	A			Perl 6 Promise							<section class="prog__container"><pre><code>method Supply(Promise:D:)\n</code></pre><p>Returns a Supply that will emit the result of the Promise being Kept or quit with the cause if the Promise is Broken.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#method_Supply
Promise.await	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi sub await(Promise:D)\nmulti sub await(*@)\n</code></pre><p>Waits until one or more promises are all fulfilled, and then returns their values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#sub_await
Promise.ACCEPTS	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_ACCEPTS
Promise.any	A			Perl 6 Promise							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_any
Promise.all	A			Perl 6 Promise							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_all
Promise.one	A			Perl 6 Promise							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_one
Promise.none	A			Perl 6 Promise							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_none
Promise.list	A			Perl 6 Promise							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_list
Promise.push	A			Perl 6 Promise							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_push
Promise.reverse	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_routine_reverse
Promise.sort	A			Perl 6 Promise							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_sort
Promise.map	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_map
Promise.deepmap	A			Perl 6 Promise							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_deepmap
Promise.duckmap	A			Perl 6 Promise							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_duckmap
Promise.flat	A			Perl 6 Promise							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_flat
Promise.eager	A			Perl 6 Promise							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_eager
Promise.elems	A			Perl 6 Promise							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_elems
Promise.end	A			Perl 6 Promise							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_end
Promise.pairup	A			Perl 6 Promise							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_method_pairup
Promise.exit	A			Perl 6 Promise							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_sub_exit
Promise.item	A			Perl 6 Promise							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Any%29_sub_item
Promise.defined	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_routine_defined
Promise.isa	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_routine_isa
Promise.does	A			Perl 6 Promise							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_routine_does
Promise.Bool	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_routine_Bool
Promise.Str	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_Str
Promise.gist	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_routine_gist
Promise.perl	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_routine_perl
Promise.item	A			Perl 6 Promise							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_item
Promise.clone	A			Perl 6 Promise							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_clone
Promise.new	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_new
Promise.bless	A			Perl 6 Promise							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_bless
Promise.CREATE	A			Perl 6 Promise							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_CREATE
Promise.print	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_print
Promise.put	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_put
Promise.say	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_say
Promise.ACCEPTS	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_ACCEPTS
Promise.WHICH	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_WHICH
Promise.WHERE	A			Perl 6 Promise							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_WHERE
Promise.WHY	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_WHY
Promise.export	A			Perl 6 Promise							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_trait_is_export
Promise.return	A			Perl 6 Promise							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_return
Promise.return-rw	A			Perl 6 Promise							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_return-rw
Promise.emit	A			Perl 6 Promise							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_emit
Promise.take	A			Perl 6 Promise							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_take
Promise.take	A			Perl 6 Promise							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_routine_take
Promise.take-rw	A			Perl 6 Promise							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_routine_take-rw
Promise.so	A			Perl 6 Promise							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_so
Promise.not	A			Perl 6 Promise							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Promise.html#%28Mu%29_method_not
Proxy.new	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method new(:&amp;FETCH!, :&amp;STORE! --&gt; Proxy:D)\n</code></pre><p>Creates a new Proxy object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#method_new
Proxy.ACCEPTS	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_ACCEPTS
Proxy.any	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_any
Proxy.all	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_all
Proxy.one	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_one
Proxy.none	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_none
Proxy.list	A			Perl 6 Proxy							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_list
Proxy.push	A			Perl 6 Proxy							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_push
Proxy.reverse	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_routine_reverse
Proxy.sort	A			Perl 6 Proxy							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_sort
Proxy.map	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_map
Proxy.deepmap	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_deepmap
Proxy.duckmap	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_duckmap
Proxy.flat	A			Perl 6 Proxy							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_flat
Proxy.eager	A			Perl 6 Proxy							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_eager
Proxy.elems	A			Perl 6 Proxy							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_elems
Proxy.end	A			Perl 6 Proxy							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_end
Proxy.pairup	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_method_pairup
Proxy.exit	A			Perl 6 Proxy							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_sub_exit
Proxy.item	A			Perl 6 Proxy							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Any%29_sub_item
Proxy.defined	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_routine_defined
Proxy.isa	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_routine_isa
Proxy.does	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_routine_does
Proxy.Bool	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_routine_Bool
Proxy.Str	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_Str
Proxy.gist	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_routine_gist
Proxy.perl	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_routine_perl
Proxy.item	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_item
Proxy.clone	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_clone
Proxy.new	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_new
Proxy.bless	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_bless
Proxy.CREATE	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_CREATE
Proxy.print	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_print
Proxy.put	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_put
Proxy.say	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_say
Proxy.ACCEPTS	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_ACCEPTS
Proxy.WHICH	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_WHICH
Proxy.WHERE	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_WHERE
Proxy.WHY	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_WHY
Proxy.export	A			Perl 6 Proxy							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_trait_is_export
Proxy.return	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_return
Proxy.return-rw	A			Perl 6 Proxy							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_return-rw
Proxy.emit	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_emit
Proxy.take	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_take
Proxy.take	A			Perl 6 Proxy							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_routine_take
Proxy.take-rw	A			Perl 6 Proxy							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_routine_take-rw
Proxy.so	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_so
Proxy.not	A			Perl 6 Proxy							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Proxy.html#%28Mu%29_method_not
QuantHash.QuantHash	A			Perl 6 QuantHash							<section class="prog__container"><pre><code>role QuantHash does Associative { }\n</code></pre><p>A QuantHash represents a set of objects, represented as the keys of a Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/QuantHash.html#QuantHash
Range.subscripts	A			Perl 6 Range							<section class="prog__container"><pre><code>my @numbers =  &lt;4 8 15 16 23 42&gt;;\nmy $range := 0..2;\n.say for @numbers[$range];\n# OUTPUTÂ«4â¤8â¤15â¤Â» \nmy @range = 0..2;\n.say for @numbers[@range];\n# OUTPUTÂ«4â¤8â¤15â¤Â» \n</code></pre><p>A Range can be used in a subscript to get a range of values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#Ranges_in_subscripts
subscripts	R	Range.subscripts										
Range.min	A			Perl 6 Range							<section class="prog__container"><pre><code>method min(Range:D:)\n</code></pre><p>Returns the start point of the range.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_min
min	D								*[[Range.min]], returns the start point of the range.\n*[[Supply.min]], creates a supply that only emits values from the given supply if they are smaller than any value seen before.			
Range.excludes-min	A			Perl 6 Range							<section class="prog__container"><pre><code>method excludes-min(Range:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the start point is excluded from the range, and False otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_excludes-min
excludes-min	R	Range.excludes-min										
Range.max	A			Perl 6 Range							<section class="prog__container"><pre><code>method max(Range:D:)\n</code></pre><p>Returns the end point of the range.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_max
max	D								*[[Range.max]], returns the end point of the range.\n*[[Supply.max]], creates a supply that only emits values from the given supply if they are larger than any value seen before.			
Range.excludes-max	A			Perl 6 Range							<section class="prog__container"><pre><code>method excludes-max(Range:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the end point is excluded from the range, and False otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_excludes-max
excludes-max	R	Range.excludes-max										
Range.bounds	A			Perl 6 Range							<section class="prog__container"><pre><code>method bounds(Range:D: --&gt; Positional)\n</code></pre><p>Returns a list consisting of the start and end point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_bounds
bounds	R	Range.bounds										
Range.infinite	A			Perl 6 Range							<section class="prog__container"><pre><code>method infinite(Range:D: --&gt; Bool:D)\n</code></pre><p>Returns True if either end point was declared with Inf or *.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_infinite
infinite	R	Range.infinite										
Range.is-int	A			Perl 6 Range							<section class="prog__container"><pre><code>method is-int(Range:D: --&gt; Bool:D)\n</code></pre><p>Returns True if both end points are Int values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_is-int
is-int	R	Range.is-int										
Range.int-bounds	A			Perl 6 Range							<section class="prog__container"><pre><code>method bounds(Range:D: --&gt; Positional)\n</code></pre><p>If the Range is an integer range (as indicated by is-int), then this method returns a list with the first and last value it will iterate over (taking into account excludes-min and excludes-max).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_int-bounds
int-bounds	R	Range.int-bounds										
Range.minmax	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method minmax(Range:D: --&gt; List:D)\n</code></pre><p>If the Range is an integer range (as indicated by is-int), then this method returns a list with the first and last value it will iterate over (taking into account excludes-min and excludes-max).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_minmax
minmax	D								*[[Range.minmax]], if the Range is an integer range (as indicated by is-int), then this method returns a list with the first and last value it will iterate over (taking into account excludes-min and excludes-max).\n*[[Supply.minmax]], creates a supply that emits a Range every time a new minimum or maximum values is seen from the given supply.			
Range.elems	A			Perl 6 Range							<section class="prog__container"><pre><code>method elems(Range:D: --&gt; Numeric:D)\n</code></pre><p>Returns the number of elements in the range, e.g. when being iterated over, or when used as a List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_elems
Range.list	A			Perl 6 Range							<section class="prog__container"><pre><code>method list(Range:D: --&gt; List:D)\n</code></pre><p>Generates the list of elements that the range represents.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_list
Range.flat	A			Perl 6 Range							<section class="prog__container"><pre><code>method flat(Range:D: --&gt; List:D)\n</code></pre><p>Generates the list of elements that the range represents.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_flat
Range.pick	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method pick(Range:D:         --&gt; Any:D)\nmulti method pick(Range:D: $number --&gt; Seq:D)\n</code></pre><p>Performs the same function as Range.list.pick, but attempts to optimize by not actually generating the list if it is not necessary.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_pick
Range.roll	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method roll(Range:D:         --&gt; Any:D)\nmulti method roll(Range:D: $number --&gt; Seq:D)\n</code></pre><p>Performs the same function as Range.list.roll, but attempts to optimize by not actually generating the list if it is not necessary.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_roll
Range.sum	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method sum(--&gt; Numeric:D)\n</code></pre><p>Returns the sum of all elements in the Range.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_sum
Range.reverse	A			Perl 6 Range							<section class="prog__container"><pre><code>method reverse(Range:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq where all elements that the Range represents have been reversed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#method_reverse
Range.of	A			Perl 6 Range							<section class="prog__container"><pre><code>method of()\n</code></pre><p>Returns the type constraint for elements of the positional container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Positional%29_method_of
Range.iterator	A			Perl 6 Range							<section class="prog__container"><pre><code>method iterator(--&gt; Iterator:D)\n</code></pre><p>Method stub that ensures all classes doing the Iterable role have a method iterator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Iterable%29_method_iterator
Range.flat	A			Perl 6 Range							<section class="prog__container"><pre><code>method flat(--&gt; Iterable)\n</code></pre><p>Returns another Iterable that flattens out all iterables that the first one returns.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Iterable%29_method_flat
Range.lazy	A			Perl 6 Range							<section class="prog__container"><pre><code>method lazy(--&gt; Iterable)\n</code></pre><p>Returns a lazy iterable wrapping the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Iterable%29_method_lazy
Range.hyper	A			Perl 6 Range							<section class="prog__container"><pre><code>method hyper(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Iterable%29_method_hyper
Range.race	A			Perl 6 Range							<section class="prog__container"><pre><code>method race(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Iterable%29_method_race
Range.abs	A			Perl 6 Range							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_abs
Range.conj	A			Perl 6 Range							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_conj
Range.sqrt	A			Perl 6 Range							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_sqrt
Range.sign	A			Perl 6 Range							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_sign
Range.rand	A			Perl 6 Range							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_rand
Range.sin	A			Perl 6 Range							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_sin
Range.asin	A			Perl 6 Range							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_asin
Range.cos	A			Perl 6 Range							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_cos
Range.acos	A			Perl 6 Range							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_acos
Range.tan	A			Perl 6 Range							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_tan
Range.atan	A			Perl 6 Range							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_atan
Range.atan2	A			Perl 6 Range							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_atan2
Range.sec	A			Perl 6 Range							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_sec
Range.asec	A			Perl 6 Range							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_asec
Range.cosec	A			Perl 6 Range							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_cosec
Range.acosec	A			Perl 6 Range							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_acosec
Range.cotan	A			Perl 6 Range							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_cotan
Range.acotan	A			Perl 6 Range							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_acotan
Range.sinh	A			Perl 6 Range							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_sinh
Range.asinh	A			Perl 6 Range							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_asinh
Range.cosh	A			Perl 6 Range							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_cosh
Range.acosh	A			Perl 6 Range							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_acosh
Range.tanh	A			Perl 6 Range							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_tanh
Range.atanh	A			Perl 6 Range							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_atanh
Range.sech	A			Perl 6 Range							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_sech
Range.asech	A			Perl 6 Range							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_asech
Range.cosech	A			Perl 6 Range							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_cosech
Range.acosech	A			Perl 6 Range							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_acosech
Range.cotanh	A			Perl 6 Range							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_cotanh
Range.acotanh	A			Perl 6 Range							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_acotanh
Range.cis	A			Perl 6 Range							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_cis
Range.log	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_log
Range.log10	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_log10
Range.exp	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_exp
Range.unpolar	A			Perl 6 Range							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_unpolar
Range.round	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_round
Range.floor	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_floor
Range.ceiling	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_ceiling
Range.truncate	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_truncate
Range.ord	A			Perl 6 Range							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_ord
Range.chr	A			Perl 6 Range							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_chr
Range.chars	A			Perl 6 Range							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_chars
Range.codes	A			Perl 6 Range							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_codes
Range.flip	A			Perl 6 Range							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_flip
Range.trim	A			Perl 6 Range							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_trim
Range.trim-leading	A			Perl 6 Range							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_trim-leading
Range.trim-trailing	A			Perl 6 Range							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_trim-trailing
Range.lc	A			Perl 6 Range							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_lc
Range.uc	A			Perl 6 Range							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_uc
Range.fc	A			Perl 6 Range							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_fc
Range.tc	A			Perl 6 Range							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_tc
Range.tclc	A			Perl 6 Range							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_tclc
Range.wordcase	A			Perl 6 Range							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_wordcase
Range.samecase	A			Perl 6 Range							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_samecase
Range.uniprop	A			Perl 6 Range							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_uniprop
Range.uniprops	A			Perl 6 Range							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_uniprops
Range.uniname	A			Perl 6 Range							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_uniname
Range.uninames	A			Perl 6 Range							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_uninames
Range.unimatch	A			Perl 6 Range							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_unimatch
Range.chop	A			Perl 6 Range							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_chop
Range.chomp	A			Perl 6 Range							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_chomp
Range.substr	A			Perl 6 Range							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_substr
Range.ords	A			Perl 6 Range							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_ords
Range.chrs	A			Perl 6 Range							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_chrs
Range.split	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_split
Range.lines	A			Perl 6 Range							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_lines
Range.words	A			Perl 6 Range							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_words
Range.comb	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_comb
Range.contains	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_contains
Range.index	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_index
Range.rindex	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_rindex
Range.match	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_match
Range.fmt	A			Perl 6 Range							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_fmt
Range.roots	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_roots
Range.IO	A			Perl 6 Range							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_method_IO
Range.EVAL	A			Perl 6 Range							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_EVAL
Range.EVALFILE	A			Perl 6 Range							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Cool%29_routine_EVALFILE
Range.ACCEPTS	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_ACCEPTS
Range.any	A			Perl 6 Range							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_any
Range.all	A			Perl 6 Range							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_all
Range.one	A			Perl 6 Range							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_one
Range.none	A			Perl 6 Range							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_none
Range.list	A			Perl 6 Range							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_list
Range.push	A			Perl 6 Range							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_push
Range.reverse	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_routine_reverse
Range.sort	A			Perl 6 Range							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_sort
Range.map	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_map
Range.deepmap	A			Perl 6 Range							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_deepmap
Range.duckmap	A			Perl 6 Range							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_duckmap
Range.flat	A			Perl 6 Range							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_flat
Range.eager	A			Perl 6 Range							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_eager
Range.elems	A			Perl 6 Range							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_elems
Range.end	A			Perl 6 Range							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_end
Range.pairup	A			Perl 6 Range							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_method_pairup
Range.exit	A			Perl 6 Range							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_sub_exit
Range.item	A			Perl 6 Range							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Any%29_sub_item
Range.defined	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_routine_defined
Range.isa	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_routine_isa
Range.does	A			Perl 6 Range							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_routine_does
Range.Bool	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_routine_Bool
Range.Str	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_Str
Range.gist	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_routine_gist
Range.perl	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_routine_perl
Range.item	A			Perl 6 Range							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_item
Range.clone	A			Perl 6 Range							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_clone
Range.new	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_new
Range.bless	A			Perl 6 Range							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_bless
Range.CREATE	A			Perl 6 Range							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_CREATE
Range.print	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_print
Range.put	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_put
Range.say	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_say
Range.ACCEPTS	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_ACCEPTS
Range.WHICH	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_WHICH
Range.WHERE	A			Perl 6 Range							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_WHERE
Range.WHY	A			Perl 6 Range							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_WHY
Range.export	A			Perl 6 Range							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_trait_is_export
Range.return	A			Perl 6 Range							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_return
Range.return-rw	A			Perl 6 Range							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_return-rw
Range.emit	A			Perl 6 Range							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_emit
Range.take	A			Perl 6 Range							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_take
Range.take	A			Perl 6 Range							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_routine_take
Range.take-rw	A			Perl 6 Range							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_routine_take-rw
Range.so	A			Perl 6 Range							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_so
Range.not	A			Perl 6 Range							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Range.html#%28Mu%29_method_not
Rat.perl	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method perl(Rat:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation corresponding to the unambiguous val()-based representation of rational literals.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#method_perl
Rat.new	A			Perl 6 Rat							<section class="prog__container"><pre><code>method new(NuT:D: $numerator, DeT:D: $denominator --&gt; Rational:D)\n</code></pre><p>Creates a new rational object from numerator and denominator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Rational%29_method_new
Rat.isNaN	A			Perl 6 Rat							<section class="prog__container"><pre><code>method isNaN(Rational:D: --&gt; Bool:D)\n</code></pre><p>Tests whether the invocant&amp;#39;s Num value is a NaN.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Rational%29_method_isNaN
Rat.numerator	A			Perl 6 Rat							<section class="prog__container"><pre><code>method numerator(Rational:D: --&gt; NuT:D)\n</code></pre><p>Returns the numerator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Rational%29_method_numerator
Rat.denominator	A			Perl 6 Rat							<section class="prog__container"><pre><code>method denominator(Rational:D: --&gt; DeT:D)\n</code></pre><p>Returns the denominator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Rational%29_method_denominator
Rat.nude	A			Perl 6 Rat							<section class="prog__container"><pre><code>method nude(Rational:D: --&gt; Positional)\n</code></pre><p>Returns a list of the numerator and denominator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Rational%29_method_nude
Rat.norm	A			Perl 6 Rat							<section class="prog__container"><pre><code>method norm(Rational:D: --&gt; Rational:D)\n</code></pre><p>Returns a normalized Rational object, i.e. with positive denominator, and numerator and denominator coprime.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Rational%29_method_norm
Rat.base-repeating	A			Perl 6 Rat							<section class="prog__container"><pre><code>method base-repeating(Rational:D: Int:D() $base)\n</code></pre><p>Returns a list of two strings that, when concatenated, represent the number in base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Rational%29_method_base-repeating
Rat.Rat	A			Perl 6 Rat							<section class="prog__container"><pre><code>method Rat(Real:D: Real $epsilon = 1e-6)\n</code></pre><p>Converts the number to a Rat with the precision $epsilon.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Real%29_method_Rat
Rat.rand	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub term:&lt;rand&gt; (--&gt; Num:D)\nmethod rand(Real:D: --&gt; Real:D)\n</code></pre><p>Returns a pseudo-random number between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Real%29_routine_rand
Rat.sign	A			Perl 6 Rat							<section class="prog__container"><pre><code>method sign(Real:D:)\n</code></pre><p>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Real%29_method_sign
Rat.round	A			Perl 6 Rat							<section class="prog__container"><pre><code>method round(Real:D: $scale = 1)\n</code></pre><p>Rounds the number to scale $scale.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Real%29_method_round
Rat.floor	A			Perl 6 Rat							<section class="prog__container"><pre><code>method floor(Real:D --&gt; Int:D)\n</code></pre><p>Return the largest integer not greater than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Real%29_method_floor
Rat.ceiling	A			Perl 6 Rat							<section class="prog__container"><pre><code>method ceiling(Real:D --&gt; Int:D)\n</code></pre><p>Returns the smallest integer not less than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Real%29_method_ceiling
Rat.truncate	A			Perl 6 Rat							<section class="prog__container"><pre><code>method truncate(Real:D --&gt; Int:D)\n</code></pre><p>Rounds the number towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Real%29_method_truncate
Rat.base	A			Perl 6 Rat							<section class="prog__container"><pre><code>method base(Real:D: Int:D $base where 2..36, $digits? --&gt; Str:D)\n</code></pre><p>Converts the number to a string, using $base as base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Real%29_method_base
Rat.Real	A			Perl 6 Rat							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_Real
Rat.Int	A			Perl 6 Rat							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_Int
Rat.Rat	A			Perl 6 Rat							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_Rat
Rat.Num	A			Perl 6 Rat							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_Num
Rat.narrow	A			Perl 6 Rat							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_narrow
Rat.ACCEPTS	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_ACCEPTS
Rat.log	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_routine_log
Rat.log10	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_routine_log10
Rat.exp	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_routine_exp
Rat.roots	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_roots
Rat.abs	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_routine_abs
Rat.sqrt	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_routine_sqrt
Rat.conj	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_conj
Rat.Bool	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_Bool
Rat.succ	A			Perl 6 Rat							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_succ
Rat.pred	A			Perl 6 Rat							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Numeric%29_method_pred
Rat.abs	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_abs
Rat.conj	A			Perl 6 Rat							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_conj
Rat.sqrt	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_sqrt
Rat.sign	A			Perl 6 Rat							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_sign
Rat.rand	A			Perl 6 Rat							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_rand
Rat.sin	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_sin
Rat.asin	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_asin
Rat.cos	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_cos
Rat.acos	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_acos
Rat.tan	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_tan
Rat.atan	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_atan
Rat.atan2	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_atan2
Rat.sec	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_sec
Rat.asec	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_asec
Rat.cosec	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_cosec
Rat.acosec	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_acosec
Rat.cotan	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_cotan
Rat.acotan	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_acotan
Rat.sinh	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_sinh
Rat.asinh	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_asinh
Rat.cosh	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_cosh
Rat.acosh	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_acosh
Rat.tanh	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_tanh
Rat.atanh	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_atanh
Rat.sech	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_sech
Rat.asech	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_asech
Rat.cosech	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_cosech
Rat.acosech	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_acosech
Rat.cotanh	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_cotanh
Rat.acotanh	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_acotanh
Rat.cis	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_cis
Rat.log	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_log
Rat.log10	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_log10
Rat.exp	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_exp
Rat.unpolar	A			Perl 6 Rat							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_unpolar
Rat.round	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_round
Rat.floor	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_floor
Rat.ceiling	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_ceiling
Rat.truncate	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_truncate
Rat.ord	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_ord
Rat.chr	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_chr
Rat.chars	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_chars
Rat.codes	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_codes
Rat.flip	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_flip
Rat.trim	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_trim
Rat.trim-leading	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_trim-leading
Rat.trim-trailing	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_trim-trailing
Rat.lc	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_lc
Rat.uc	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_uc
Rat.fc	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_fc
Rat.tc	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_tc
Rat.tclc	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_tclc
Rat.wordcase	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_wordcase
Rat.samecase	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_samecase
Rat.uniprop	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_uniprop
Rat.uniprops	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_uniprops
Rat.uniname	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_uniname
Rat.uninames	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_uninames
Rat.unimatch	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_unimatch
Rat.chop	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_chop
Rat.chomp	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_chomp
Rat.substr	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_substr
Rat.ords	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_ords
Rat.chrs	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_chrs
Rat.split	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_split
Rat.lines	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_lines
Rat.words	A			Perl 6 Rat							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_words
Rat.comb	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_comb
Rat.contains	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_contains
Rat.index	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_index
Rat.rindex	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_rindex
Rat.match	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_match
Rat.fmt	A			Perl 6 Rat							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_fmt
Rat.roots	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_roots
Rat.IO	A			Perl 6 Rat							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_method_IO
Rat.EVAL	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_EVAL
Rat.EVALFILE	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Cool%29_routine_EVALFILE
Rat.ACCEPTS	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_ACCEPTS
Rat.any	A			Perl 6 Rat							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_any
Rat.all	A			Perl 6 Rat							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_all
Rat.one	A			Perl 6 Rat							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_one
Rat.none	A			Perl 6 Rat							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_none
Rat.list	A			Perl 6 Rat							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_list
Rat.push	A			Perl 6 Rat							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_push
Rat.reverse	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_routine_reverse
Rat.sort	A			Perl 6 Rat							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_sort
Rat.map	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_map
Rat.deepmap	A			Perl 6 Rat							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_deepmap
Rat.duckmap	A			Perl 6 Rat							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_duckmap
Rat.flat	A			Perl 6 Rat							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_flat
Rat.eager	A			Perl 6 Rat							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_eager
Rat.elems	A			Perl 6 Rat							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_elems
Rat.end	A			Perl 6 Rat							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_end
Rat.pairup	A			Perl 6 Rat							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_method_pairup
Rat.exit	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_sub_exit
Rat.item	A			Perl 6 Rat							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Any%29_sub_item
Rat.defined	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_routine_defined
Rat.isa	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_routine_isa
Rat.does	A			Perl 6 Rat							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_routine_does
Rat.Bool	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_routine_Bool
Rat.Str	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_Str
Rat.gist	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_routine_gist
Rat.perl	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_routine_perl
Rat.item	A			Perl 6 Rat							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_item
Rat.clone	A			Perl 6 Rat							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_clone
Rat.new	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_new
Rat.bless	A			Perl 6 Rat							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_bless
Rat.CREATE	A			Perl 6 Rat							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_CREATE
Rat.print	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_print
Rat.put	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_put
Rat.say	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_say
Rat.ACCEPTS	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_ACCEPTS
Rat.WHICH	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_WHICH
Rat.WHERE	A			Perl 6 Rat							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_WHERE
Rat.WHY	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_WHY
Rat.export	A			Perl 6 Rat							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_trait_is_export
Rat.return	A			Perl 6 Rat							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_return
Rat.return-rw	A			Perl 6 Rat							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_return-rw
Rat.emit	A			Perl 6 Rat							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_emit
Rat.take	A			Perl 6 Rat							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_take
Rat.take	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_routine_take
Rat.take-rw	A			Perl 6 Rat							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_routine_take-rw
Rat.so	A			Perl 6 Rat							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_so
Rat.not	A			Perl 6 Rat							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rat.html#%28Mu%29_method_not
RatStr.new	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method new(Rat $i, Str $s)\n</code></pre><p>The constructor requires both the Rat and the Str value, when constructing one directly the values can be whatever is required:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#method_new
RatStr.Numeric	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method Numeric\n</code></pre><p>The numeric coercion is applied when the RatStr is used in a numeric context, such as a numeric comparison or smart match against a numeric value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#method_Numeric
RatStr.Rat	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method Rat\n</code></pre><p>Returns the Rat value of the RatStr.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#method_Rat
RatStr.Str	A			Perl 6 RatStr							<section class="prog__container"><p>Returns the string value of the RatStr.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#method_Str
RatStr.cmp	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub infix:&lt;cmp&gt;(RatStr:D $a, RatStr:D $b)\n</code></pre><p>Compare two RatStr objects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#infix_cmp
RatStr.chop	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    chop(Str:D --&gt; Str:D)\nmulti method chop(Str:D: $chars = 1 --&gt; Str:D)\n</code></pre><p>Returns the string with $chars characters removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_chop
RatStr.chomp	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    chomp(Str:D  --&gt; Str:D)\nmulti method chomp(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string with a logical newline (any codepoint that has the NEWLINE property) removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_chomp
RatStr.lc	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    lc(Str:D  --&gt; Str:D)\nmulti method lc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns a lower-case version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_lc
RatStr.uc	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    uc(Str:D  --&gt; Str:D)\nmulti method uc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns an uppercase version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_uc
RatStr.fc	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    fc(Str:D  --&gt; Str:D)\nmulti method fc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "fold case" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_fc
RatStr.tc	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    tc(Str:D  --&gt; Str:D)\nmulti method tc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_tc
RatStr.tclc	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    tclc(Str:D  --&gt; Str:D)\nmulti method tclc(Str:D: --&gt; Str:D)\n</code></pre><p>Turns the first character to title case, and all other characters to lower case&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_tclc
RatStr.wordcase	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    wordcase(Cool $x  --&gt; Str)\nmulti sub    wordcase(Str:D $x --&gt; Str)\nmulti method wordcase(Str:D: :&amp;filter = &amp;tclc, Mu :$where = True --&gt; Str)\n</code></pre><p>Returns a string in which &amp;filter has been applied to all the words that match $where.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_wordcase
RatStr.unival	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method unival(Str:D --&gt; Numeric)\n</code></pre><p>Returns the numeric value that the first codepoint in the invocant represents, or NaN if it&amp;#39;s not numeric.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_unival
RatStr.univals	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method univals(Str:D --&gt; List)\n</code></pre><p>Returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_univals
RatStr.chars	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    chars(Cool  $x --&gt; Int:D)\nmulti sub    chars(Str:D $x --&gt; Int:D)\nmulti sub    chars(str   $x --&gt; int)\nmulti method chars(Str:D:   --&gt; Int:D)\n</code></pre><p>Returns the number of characters in the string in graphemes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_chars
RatStr.encode	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method encode(Str:D: $encoding, $nf --&gt; Blob)\n</code></pre><p>Returns a Blob which represents the original string in the given encoding and normal form.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_encode
RatStr.index	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    index(Cool $s, Str:D $needle, Cool $startpos = 0 --&gt; Int)\nmulti method index(Cool $needle, Cool $startpos = 0 --&gt; Int)\n</code></pre><p>Searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_index
RatStr.rindex	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    rindex(Str:D $haystack, Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\nmulti method rindex(Str:D $haystack: Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\n</code></pre><p>Returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_rindex
RatStr.match	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method match($pat, :continue(:$c), :pos(:$p), :global(:$g), :overlap(:$ov), :exhaustive(:$ex), :st(:$nd), :rd(:$th), :$nth, :$x --&gt; Match)\n</code></pre><p>Performs a match of the string against $pat and returns a Match object if there is a successful match, and (Any) otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_match
RatStr.parse-base	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    parse-base(Str:D $num, Int:D $radix --&gt; Numeric)\nmulti method parse-base(Str:D $num: Int:D $radix --&gt; Numeric)\n</code></pre><p>Performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_parse-base
RatStr.split	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(Regex:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(List:D $delimiters, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D:   Str:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: Regex:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: List:D $delimiters, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\n</code></pre><p>Splits a string up into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_split
RatStr.comb	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    comb(Str:D   $matcher, Str:D $input, $limit = Inf)\nmulti sub    comb(Regex:D $matcher, Str:D $input, $limit = Inf, Bool :$match)\nmulti sub    comb(Int:D $size, Str:D $input, $limit = Inf)\nmulti method comb(Str:D $input:)\nmulti method comb(Str:D $input: Str:D   $matcher, $limit = Inf)\nmulti method comb(Str:D $input: Regex:D $matcher, $limit = Inf, Bool :$match)\nmulti method comb(Str:D $input: Int:D $size, $limit = Inf)\n</code></pre><p>Searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_comb
RatStr.lines	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    lines(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method lines(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of lines (without trailing newline characters), i.e. the same as a call to $input.comb( / ^^ &#92;N* /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_lines
RatStr.words	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    words(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method words(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of non-whitespace bits, i.e. the same as a call to $input.comb( / &#92;S+ /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_words
RatStr.flip	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    flip(Str:D  --&gt; Str:D)\nmulti method flip(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string reversed character by character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_flip
RatStr.sprintf	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub sprintf( Str:D $format, *@args --&gt; Str:D)\n</code></pre><p>This function is mostly identical to the C library sprintf and printf functions.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_sub_sprintf
RatStr.starts-with	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method starts-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or starts with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_starts-with
RatStr.ends-with	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method ends-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or ends with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_ends-with
RatStr.subst	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method subst(Str:D: $matcher, $replacement, *%opts)\n</code></pre><p>Returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_subst
RatStr.subst-mutate	A			Perl 6 RatStr							<section class="prog__container"><pre><code>my $some-string = "Some foo";\nmy $match = $some-string.subst-mutate(/foo/, "string");\nsay $some-string;  #-&gt; Some string \nsay $match;        #-&gt; ï½¢fooï½£ \n$some-string.subst-mutate(/&lt;[oe]&gt;/, &amp;#39;&amp;#39;, :g); # remove every o and e, notice the :g named argument from .subst \n</code></pre><p>Where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_subst-mutate
RatStr.substr	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    substr(Str:D $s, Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti sub    substr(Str:D $s, Range $from-to --&gt; Str:D)\nmulti method substr(Str:D $s: Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti method substr(Str:D $s: Range $from-to --&gt; Str:D)\n</code></pre><p>Returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_substr
RatStr.substr-eq	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method substr-eq(Str:D:  Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\nmulti method substr-eq(Cool:D: Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\n</code></pre><p>Returns True if the $test-string exactly matches the String object, starting from the given initial index $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_substr-eq
RatStr.substr-rw	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method substr-rw($from, $length?)\n</code></pre><p>A version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_substr-rw
RatStr.samemark	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub samemark(Str:D $string, Str:D $pattern --&gt; Str:D)\nmethod    samemark(Str:D: Str:D $pattern --&gt; Str:D)\n</code></pre><p>Returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_samemark
RatStr.succ	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method succ(Str:D --&gt; Str:D)\n</code></pre><p>Returns the string incremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_succ
RatStr.pred	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method pred(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string decremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_pred
RatStr.ord	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub    ord(Str:D  --&gt; Int:D)\nmulti method ord(Str:D: --&gt; Int:D)\n</code></pre><p>Returns the codepoint number of the base characters of the first grapheme in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_routine_ord
RatStr.ords	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method ords(Str:D: --&gt; Positional)\n</code></pre><p>Returns a list of Unicode codepoint numbers that describe the codepoints making up the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_ords
RatStr.trans	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method trans(Str:D: Pair:D &#92;what, *%n --&gt; Str)\nmulti method trans(Str:D: *@changes, :complement(:$c), :squash(:$s), :delete(:$d) --&gt; Str)\n</code></pre><p>Replaces one or many characters with one or many characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_trans
RatStr.indent	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method indent(Int $steps where { $_ == 0 } )\nmulti method indent(Int $steps where { $_ &gt; 0  } )\nmulti method indent($steps where { .isa(Whatever) || .isa(Int) &amp;&amp; $_ &lt; 0 } )\n</code></pre><p>Indents each line of the string by $steps.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_indent
RatStr.trim	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method trim(Str:D: --&gt; Str)\n</code></pre><p>Remove leading and trailing whitespace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_trim
RatStr.trim-trailing	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method trim-trailing(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the end of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_trim-trailing
RatStr.trim-leading	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method trim-leading(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the beginning of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_trim-leading
RatStr.NFC	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method NFC(Str:D: --&gt; NFC:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form C / Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_NFC
RatStr.NFD	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method NFD(Str:D: --&gt; NFD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form D / Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_NFD
RatStr.NFKC	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method NFKC(Str:D: --&gt; NFKC:D)\n</code></pre><p>Returns a codepoint string in NFKC format (Unicode Normalization Form KC / Compatibility Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_NFKC
RatStr.NFKD	A			Perl 6 RatStr							<section class="prog__container"><pre><code>method NFKD(Str:D: --&gt; NFKD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form KD / Compatibility Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_NFKD
RatStr.ACCEPTS	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method ACCEPTS(Str:D: $other)\n</code></pre><p>Returns True if the string is the same as $other.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_method_ACCEPTS
RatStr.val	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi sub val(Str:D $MAYBEVAL, :$val-or-fail)\n</code></pre><p>Given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Str%29_sub_val
RatStr.perl	A			Perl 6 RatStr							<section class="prog__container"><pre><code>multi method perl(Rat:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation corresponding to the unambiguous val()-based representation of rational literals.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/RatStr.html#%28Rat%29_method_perl
RatStr.new	R	Rational.new										
RatStr.isNaN	R	Rational.isNaN										
RatStr.numerator	R	Rational.numerator										
RatStr.denominator	R	Rational.denominator										
RatStr.nude	R	Rational.nude										
RatStr.norm	R	Rational.norm										
RatStr.base-repeating	R	Rational.base-repeating										
RatStr.abs	R	Rational.abs										
RatStr.conj	R	Rational.conj										
RatStr.sqrt	R	Rational.sqrt										
RatStr.sign	R	Rational.sign										
RatStr.rand	R	Rational.rand										
RatStr.sin	R	Rational.sin										
RatStr.asin	R	Rational.asin										
RatStr.cos	R	Rational.cos										
RatStr.acos	R	Rational.acos										
RatStr.tan	R	Rational.tan										
RatStr.atan	R	Rational.atan										
RatStr.atan2	R	Rational.atan2										
RatStr.sec	R	Rational.sec										
RatStr.asec	R	Rational.asec										
RatStr.cosec	R	Rational.cosec										
RatStr.acosec	R	Rational.acosec										
RatStr.cotan	R	Rational.cotan										
RatStr.acotan	R	Rational.acotan										
RatStr.sinh	R	Rational.sinh										
RatStr.asinh	R	Rational.asinh										
RatStr.cosh	R	Rational.cosh										
RatStr.acosh	R	Rational.acosh										
RatStr.tanh	R	Rational.tanh										
RatStr.atanh	R	Rational.atanh										
RatStr.sech	R	Rational.sech										
RatStr.asech	R	Rational.asech										
RatStr.cosech	R	Rational.cosech										
RatStr.acosech	R	Rational.acosech										
RatStr.cotanh	R	Rational.cotanh										
RatStr.acotanh	R	Rational.acotanh										
RatStr.cis	R	Rational.cis										
RatStr.log	R	Rational.log										
RatStr.log10	R	Rational.log10										
RatStr.exp	R	Rational.exp										
RatStr.unpolar	R	Rational.unpolar										
RatStr.round	R	Rational.round										
RatStr.floor	R	Rational.floor										
RatStr.ceiling	R	Rational.ceiling										
RatStr.truncate	R	Rational.truncate										
RatStr.ord	R	Rational.ord										
RatStr.chr	R	Rational.chr										
RatStr.chars	R	Rational.chars										
RatStr.codes	R	Rational.codes										
RatStr.flip	R	Rational.flip										
RatStr.trim	R	Rational.trim										
RatStr.trim-leading	R	Rational.trim-leading										
RatStr.trim-trailing	R	Rational.trim-trailing										
RatStr.lc	R	Rational.lc										
RatStr.uc	R	Rational.uc										
RatStr.fc	R	Rational.fc										
RatStr.tc	R	Rational.tc										
RatStr.tclc	R	Rational.tclc										
RatStr.wordcase	R	Rational.wordcase										
RatStr.samecase	R	Rational.samecase										
RatStr.uniprop	R	Rational.uniprop										
RatStr.uniprops	R	Rational.uniprops										
RatStr.uniname	R	Rational.uniname										
RatStr.uninames	R	Rational.uninames										
RatStr.unimatch	R	Rational.unimatch										
RatStr.chop	R	Rational.chop										
RatStr.chomp	R	Rational.chomp										
RatStr.substr	R	Rational.substr										
RatStr.ords	R	Rational.ords										
RatStr.chrs	R	Rational.chrs										
RatStr.split	R	Rational.split										
RatStr.lines	R	Rational.lines										
RatStr.words	R	Rational.words										
RatStr.comb	R	Rational.comb										
RatStr.contains	R	Rational.contains										
RatStr.index	R	Rational.index										
RatStr.rindex	R	Rational.rindex										
RatStr.match	R	Rational.match										
RatStr.fmt	R	Rational.fmt										
RatStr.roots	R	Rational.roots										
RatStr.IO	R	Rational.IO										
RatStr.EVAL	R	Rational.EVAL										
RatStr.EVALFILE	R	Rational.EVALFILE										
RatStr.ACCEPTS	R	Rational.ACCEPTS										
RatStr.any	R	Rational.any										
RatStr.all	R	Rational.all										
RatStr.one	R	Rational.one										
RatStr.none	R	Rational.none										
RatStr.list	R	Rational.list										
RatStr.push	R	Rational.push										
RatStr.reverse	R	Rational.reverse										
RatStr.sort	R	Rational.sort										
RatStr.map	R	Rational.map										
RatStr.deepmap	R	Rational.deepmap										
RatStr.duckmap	R	Rational.duckmap										
RatStr.flat	R	Rational.flat										
RatStr.eager	R	Rational.eager										
RatStr.elems	R	Rational.elems										
RatStr.end	R	Rational.end										
RatStr.pairup	R	Rational.pairup										
RatStr.exit	R	Rational.exit										
RatStr.item	R	Rational.item										
RatStr.defined	R	Rational.defined										
RatStr.isa	R	Rational.isa										
RatStr.does	R	Rational.does										
RatStr.Bool	R	Rational.Bool										
RatStr.Str	R	Rational.Str										
RatStr.gist	R	Rational.gist										
RatStr.perl	R	Rational.perl										
RatStr.item	R	Rational.item										
RatStr.clone	R	Rational.clone										
RatStr.new	R	Rational.new										
RatStr.bless	R	Rational.bless										
RatStr.CREATE	R	Rational.CREATE										
RatStr.print	R	Rational.print										
RatStr.put	R	Rational.put										
RatStr.say	R	Rational.say										
RatStr.ACCEPTS	R	Rational.ACCEPTS										
RatStr.WHICH	R	Rational.WHICH										
RatStr.WHERE	R	Rational.WHERE										
RatStr.WHY	R	Rational.WHY										
RatStr.export	R	Rational.export										
RatStr.return	R	Rational.return										
RatStr.return-rw	R	Rational.return-rw										
RatStr.emit	R	Rational.emit										
RatStr.take	R	Rational.take										
RatStr.take	R	Rational.take										
RatStr.take-rw	R	Rational.take-rw										
RatStr.so	R	Rational.so										
RatStr.not	R	Rational.not										
Rational.new	A			Perl 6 Rational							<section class="prog__container"><pre><code>method new(NuT:D: $numerator, DeT:D: $denominator --&gt; Rational:D)\n</code></pre><p>Creates a new rational object from numerator and denominator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#method_new
Rational.isNaN	A			Perl 6 Rational							<section class="prog__container"><pre><code>method isNaN(Rational:D: --&gt; Bool:D)\n</code></pre><p>Tests whether the invocant&amp;#39;s Num value is a NaN.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#method_isNaN
Rational.numerator	A			Perl 6 Rational							<section class="prog__container"><pre><code>method numerator(Rational:D: --&gt; NuT:D)\n</code></pre><p>Returns the numerator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#method_numerator
Rational.denominator	A			Perl 6 Rational							<section class="prog__container"><pre><code>method denominator(Rational:D: --&gt; DeT:D)\n</code></pre><p>Returns the denominator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#method_denominator
Rational.nude	A			Perl 6 Rational							<section class="prog__container"><pre><code>method nude(Rational:D: --&gt; Positional)\n</code></pre><p>Returns a list of the numerator and denominator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#method_nude
Rational.norm	A			Perl 6 Rational							<section class="prog__container"><pre><code>method norm(Rational:D: --&gt; Rational:D)\n</code></pre><p>Returns a normalized Rational object, i.e. with positive denominator, and numerator and denominator coprime.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#method_norm
Rational.base-repeating	A			Perl 6 Rational							<section class="prog__container"><pre><code>method base-repeating(Rational:D: Int:D() $base)\n</code></pre><p>Returns a list of two strings that, when concatenated, represent the number in base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#method_base-repeating
Rational.Rat	A			Perl 6 Rational							<section class="prog__container"><pre><code>method Rat(Real:D: Real $epsilon = 1e-6)\n</code></pre><p>Converts the number to a Rat with the precision $epsilon.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Real%29_method_Rat
Rational.rand	A			Perl 6 Rational							<section class="prog__container"><pre><code>sub term:&lt;rand&gt; (--&gt; Num:D)\nmethod rand(Real:D: --&gt; Real:D)\n</code></pre><p>Returns a pseudo-random number between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Real%29_routine_rand
Rational.sign	A			Perl 6 Rational							<section class="prog__container"><pre><code>method sign(Real:D:)\n</code></pre><p>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Real%29_method_sign
Rational.round	A			Perl 6 Rational							<section class="prog__container"><pre><code>method round(Real:D: $scale = 1)\n</code></pre><p>Rounds the number to scale $scale.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Real%29_method_round
Rational.floor	A			Perl 6 Rational							<section class="prog__container"><pre><code>method floor(Real:D --&gt; Int:D)\n</code></pre><p>Return the largest integer not greater than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Real%29_method_floor
Rational.ceiling	A			Perl 6 Rational							<section class="prog__container"><pre><code>method ceiling(Real:D --&gt; Int:D)\n</code></pre><p>Returns the smallest integer not less than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Real%29_method_ceiling
Rational.truncate	A			Perl 6 Rational							<section class="prog__container"><pre><code>method truncate(Real:D --&gt; Int:D)\n</code></pre><p>Rounds the number towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Real%29_method_truncate
Rational.base	A			Perl 6 Rational							<section class="prog__container"><pre><code>method base(Real:D: Int:D $base where 2..36, $digits? --&gt; Str:D)\n</code></pre><p>Converts the number to a string, using $base as base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Real%29_method_base
Rational.Real	A			Perl 6 Rational							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_Real
Rational.Int	A			Perl 6 Rational							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_Int
Rational.Rat	A			Perl 6 Rational							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_Rat
Rational.Num	A			Perl 6 Rational							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_Num
Rational.narrow	A			Perl 6 Rational							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_narrow
Rational.ACCEPTS	A			Perl 6 Rational							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_ACCEPTS
Rational.log	A			Perl 6 Rational							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_routine_log
Rational.log10	A			Perl 6 Rational							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_routine_log10
Rational.exp	A			Perl 6 Rational							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_routine_exp
Rational.roots	A			Perl 6 Rational							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_roots
Rational.abs	A			Perl 6 Rational							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_routine_abs
Rational.sqrt	A			Perl 6 Rational							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_routine_sqrt
Rational.conj	A			Perl 6 Rational							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_conj
Rational.Bool	A			Perl 6 Rational							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_Bool
Rational.succ	A			Perl 6 Rational							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_succ
Rational.pred	A			Perl 6 Rational							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Rational.html#%28Numeric%29_method_pred
Real.Rat	A			Perl 6 Real							<section class="prog__container"><pre><code>method Rat(Real:D: Real $epsilon = 1e-6)\n</code></pre><p>Converts the number to a Rat with the precision $epsilon.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#method_Rat
Real.rand	A			Perl 6 Real							<section class="prog__container"><pre><code>sub term:&lt;rand&gt; (--&gt; Num:D)\nmethod rand(Real:D: --&gt; Real:D)\n</code></pre><p>Returns a pseudo-random number between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#routine_rand
Real.sign	A			Perl 6 Real							<section class="prog__container"><pre><code>method sign(Real:D:)\n</code></pre><p>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#method_sign
Real.round	A			Perl 6 Real							<section class="prog__container"><pre><code>method round(Real:D: $scale = 1)\n</code></pre><p>Rounds the number to scale $scale.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#method_round
Real.floor	A			Perl 6 Real							<section class="prog__container"><pre><code>method floor(Real:D --&gt; Int:D)\n</code></pre><p>Return the largest integer not greater than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#method_floor
Real.ceiling	A			Perl 6 Real							<section class="prog__container"><pre><code>method ceiling(Real:D --&gt; Int:D)\n</code></pre><p>Returns the smallest integer not less than the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#method_ceiling
Real.truncate	A			Perl 6 Real							<section class="prog__container"><pre><code>method truncate(Real:D --&gt; Int:D)\n</code></pre><p>Rounds the number towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#method_truncate
Real.base	A			Perl 6 Real							<section class="prog__container"><pre><code>method base(Real:D: Int:D $base where 2..36, $digits? --&gt; Str:D)\n</code></pre><p>Converts the number to a string, using $base as base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#method_base
Real.Real	A			Perl 6 Real							<section class="prog__container"><pre><code>method Real(Numeric:D: --&gt; Real:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_Real
Real.Int	A			Perl 6 Real							<section class="prog__container"><pre><code>method Int(Numeric:D: --&gt; Int:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_Int
Real.Rat	A			Perl 6 Real							<section class="prog__container"><pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6 --&gt; Rat:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real&amp;#39;s value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_Rat
Real.Num	A			Perl 6 Real							<section class="prog__container"><pre><code>method Num(Numeric:D: --&gt; Num:D)\n</code></pre><p>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_Num
Real.narrow	A			Perl 6 Real							<section class="prog__container"><pre><code>method narrow(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the number converted to the narrowest type that can hold it without loss of precision.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_narrow
Real.ACCEPTS	A			Perl 6 Real							<section class="prog__container"><pre><code>multi method ACCEPTS(Numeric:D: $other)\n</code></pre><p>Returns True if $other is numerically the same as the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_ACCEPTS
Real.log	A			Perl 6 Real							<section class="prog__container"><pre><code>multi sub    log(Numeric:D, Numeric $base = e --&gt; Numeric:D)\nmulti method log(Numeric:D: Numeric $base = e --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base $base.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_routine_log
Real.log10	A			Perl 6 Real							<section class="prog__container"><pre><code>multi sub    log10(Numeric:D  --&gt; Numeric:D)\nmulti method log10(Numeric:D: --&gt; Numeric:D)\n</code></pre><p>Calculates the logarithm to base 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_routine_log10
Real.exp	A			Perl 6 Real							<section class="prog__container"><pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e --&gt; Numeric:D)\nmulti method exp(Numeric:D: Numeric:D $base = e --&gt; Numeric:D)\n</code></pre><p>Returns $base to the power of the number, or e to the power of the number if called without a second argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_routine_exp
Real.roots	A			Perl 6 Real							<section class="prog__container"><pre><code>multi method roots(Numeric:D: Int:D $n --&gt; Positional)\n</code></pre><p>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_roots
Real.abs	A			Perl 6 Real							<section class="prog__container"><pre><code>multi sub    abs(Numeric:D  --&gt; Real:D)\nmulti method abs(Numeric:D: --&gt; Real:D)\n</code></pre><p>Returns the absolute value of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_routine_abs
Real.sqrt	A			Perl 6 Real							<section class="prog__container"><pre><code>multi sub    sqrt(Numeric:D --&gt; Numeric:D)\nmulti method sqrt(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns a square root of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_routine_sqrt
Real.conj	A			Perl 6 Real							<section class="prog__container"><pre><code>multi method conj(Numeric:D --&gt; Numeric:D)\n</code></pre><p>Returns the complex conjugate of the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_conj
Real.Bool	A			Perl 6 Real							<section class="prog__container"><pre><code>multi method Bool(Numeric:D:)\n</code></pre><p>Returns False if the number is equivalent to zero, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_Bool
Real.succ	A			Perl 6 Real							<section class="prog__container"><pre><code>method succ(Numeric:D:)\n</code></pre><p>Returns the number incremented by one (successor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_succ
Real.pred	A			Perl 6 Real							<section class="prog__container"><pre><code>method pred(Numeric:D:)\n</code></pre><p>Returns the number decremented by one (predecessor).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Real.html#%28Numeric%29_method_pred
Regex.ACCEPTS	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi method ACCEPTS(Regex:D: Mu --&gt; Match:D)\nmulti method ACCEPTS(Regex:D: @)\nmulti method ACCEPTS(Regex:D: %)\n</code></pre><p>Matches the regex against the argument passed in.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#method_ACCEPTS
Regex.Bool	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi method Bool(Regex:D: --&gt; Bool:D)\n</code></pre><p>Matches against the caller&amp;#39;s $_ variable, and returns True for a match or False for no match.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#method_Bool
Regex.name	A			Perl 6 Regex							<section class="prog__container"><pre><code>method name(Routine:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_method_name
Regex.package	A			Perl 6 Regex							<section class="prog__container"><pre><code>method package(Routine:D:)\n</code></pre><p>Returns the package in which the routine is defined.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_method_package
Regex.multi	A			Perl 6 Regex							<section class="prog__container"><pre><code>method multi(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a multi sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_method_multi
Regex.candidates	A			Perl 6 Regex							<section class="prog__container"><pre><code>method candidates(Routine:D: --&gt; Positional:D)\n</code></pre><p>Returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_method_candidates
Regex.cando	A			Perl 6 Regex							<section class="prog__container"><pre><code>method cando(Capture $c)\n</code></pre><p>Returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_method_cando
Regex.wrap	A			Perl 6 Regex							<section class="prog__container"><pre><code>method wrap(Routine:D: &amp;wrapper)\n</code></pre><p>Wraps (i.e. in-place modifies) the routine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_method_wrap
Regex.unwrap	A			Perl 6 Regex							<section class="prog__container"><pre><code>method unwrap(Routine:D: $wraphandler)\n</code></pre><p>Restores the original routine after it has been wrapped with wrap.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_method_unwrap
Regex.yada	A			Perl 6 Regex							<section class="prog__container"><pre><code>method yada(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a stub&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_method_yada
Regex.cached	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$cached!)\n</code></pre><p>NOTE: this feature is currently EXPERIMENTAL.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_trait_is_cached
Regex.pure	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$pure!)\n</code></pre><p>Marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_trait_is_pure
Regex.rw	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$rw!)\n</code></pre><p>When a routine is modified with this trait, its return value will be writable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_trait_is_rw
Regex.export	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$export!)\n</code></pre><p>Marks a routine as exported to the rest of the world&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_trait_is_export
Regex.DEPRECATED	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D $r, :$DEPRECATED!)\n</code></pre><p>Marks a routine as deprecated, optionally with a message what to use instead.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_trait_is_DEPRECATED
Regex.hidden-from-backtrace	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D, :$hidden-from-backtrace!)\n</code></pre><p>Hides a routine from showing up in a default backtrace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Routine%29_trait_is_hidden-from-backtrace
Regex.ACCEPTS	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi method ACCEPTS(Code:D: Mu $topic)\n</code></pre><p>Usually calls the code object and passes $topic as an argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Code%29_method_ACCEPTS
Regex.arity	A			Perl 6 Regex							<section class="prog__container"><pre><code>method arity(Code:D: --&gt; Int:D)\n</code></pre><p>Returns the minimum number of positional arguments that must be passed in order to call the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Code%29_method_arity
Regex.count	A			Perl 6 Regex							<section class="prog__container"><pre><code>method count(Code:D: --&gt; Real:D)\n</code></pre><p>Returns the maximum number of positional arguments that may be passed when calling the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Code%29_method_count
Regex.signature	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi method signature(Code:D: --&gt; Signature:D)\n</code></pre><p>Returns the Signature object for this code object, which describes its parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Code%29_method_signature
Regex.Str	A			Perl 6 Regex							<section class="prog__container"><pre><code>multi method Str(Code:D: --&gt; Str:D)\n</code></pre><p>Will produce a warning.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Code%29_method_Str
Regex.file	A			Perl 6 Regex							<section class="prog__container"><pre><code>method file(Code:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the file in which the code object was declared.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Code%29_method_file
Regex.line	A			Perl 6 Regex							<section class="prog__container"><pre><code>method line(Code:D: --&gt; Int:D)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Regex.html#%28Code%29_method_line
Regex.CALL-ME	R	Callable.CALL-ME										
Regex.assuming	R	Callable.assuming										
Regex.ACCEPTS	R	Callable.ACCEPTS										
Regex.any	R	Callable.any										
Regex.all	R	Callable.all										
Regex.one	R	Callable.one										
Regex.none	R	Callable.none										
Regex.list	R	Callable.list										
Regex.push	R	Callable.push										
Regex.reverse	R	Callable.reverse										
Regex.sort	R	Callable.sort										
Regex.map	R	Callable.map										
Regex.deepmap	R	Callable.deepmap										
Regex.duckmap	R	Callable.duckmap										
Regex.flat	R	Callable.flat										
Regex.eager	R	Callable.eager										
Regex.elems	R	Callable.elems										
Regex.end	R	Callable.end										
Regex.pairup	R	Callable.pairup										
Regex.exit	R	Callable.exit										
Regex.item	R	Callable.item										
Regex.defined	R	Callable.defined										
Regex.isa	R	Callable.isa										
Regex.does	R	Callable.does										
Regex.Bool	R	Callable.Bool										
Regex.Str	R	Callable.Str										
Regex.gist	R	Callable.gist										
Regex.perl	R	Callable.perl										
Regex.item	R	Callable.item										
Regex.clone	R	Callable.clone										
Regex.new	R	Callable.new										
Regex.bless	R	Callable.bless										
Regex.CREATE	R	Callable.CREATE										
Regex.print	R	Callable.print										
Regex.put	R	Callable.put										
Regex.say	R	Callable.say										
Regex.ACCEPTS	R	Callable.ACCEPTS										
Regex.WHICH	R	Callable.WHICH										
Regex.WHERE	R	Callable.WHERE										
Regex.WHY	R	Callable.WHY										
Regex.export	R	Callable.export										
Regex.return	R	Callable.return										
Regex.return-rw	R	Callable.return-rw										
Regex.emit	R	Callable.emit										
Regex.take	R	Callable.take										
Regex.take	R	Callable.take										
Regex.take-rw	R	Callable.take-rw										
Regex.so	R	Callable.so										
Regex.not	R	Callable.not										
Routine.name	A			Perl 6 Routine							<section class="prog__container"><pre><code>method name(Routine:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#method_name
Routine.package	A			Perl 6 Routine							<section class="prog__container"><pre><code>method package(Routine:D:)\n</code></pre><p>Returns the package in which the routine is defined.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#method_package
Routine.multi	A			Perl 6 Routine							<section class="prog__container"><pre><code>method multi(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a multi sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#method_multi
Routine.candidates	A			Perl 6 Routine							<section class="prog__container"><pre><code>method candidates(Routine:D: --&gt; Positional:D)\n</code></pre><p>Returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#method_candidates
Routine.cando	A			Perl 6 Routine							<section class="prog__container"><pre><code>method cando(Capture $c)\n</code></pre><p>Returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#method_cando
Routine.wrap	A			Perl 6 Routine							<section class="prog__container"><pre><code>method wrap(Routine:D: &amp;wrapper)\n</code></pre><p>Wraps (i.e. in-place modifies) the routine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#method_wrap
Routine.unwrap	A			Perl 6 Routine							<section class="prog__container"><pre><code>method unwrap(Routine:D: $wraphandler)\n</code></pre><p>Restores the original routine after it has been wrapped with wrap.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#method_unwrap
Routine.yada	A			Perl 6 Routine							<section class="prog__container"><pre><code>method yada(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a stub&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#method_yada
Routine.cached	A			Perl 6 Routine							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$cached!)\n</code></pre><p>NOTE: this feature is currently EXPERIMENTAL.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#trait_is_cached
Routine.pure	A			Perl 6 Routine							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$pure!)\n</code></pre><p>Marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#trait_is_pure
Routine.rw	A			Perl 6 Routine							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$rw!)\n</code></pre><p>When a routine is modified with this trait, its return value will be writable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#trait_is_rw
Routine.export	A			Perl 6 Routine							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$export!)\n</code></pre><p>Marks a routine as exported to the rest of the world&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#trait_is_export
Routine.DEPRECATED	A			Perl 6 Routine							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D $r, :$DEPRECATED!)\n</code></pre><p>Marks a routine as deprecated, optionally with a message what to use instead.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#trait_is_DEPRECATED
Routine.hidden-from-backtrace	A			Perl 6 Routine							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D, :$hidden-from-backtrace!)\n</code></pre><p>Hides a routine from showing up in a default backtrace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#trait_is_hidden-from-backtrace
Routine.ACCEPTS	A			Perl 6 Routine							<section class="prog__container"><pre><code>multi method ACCEPTS(Code:D: Mu $topic)\n</code></pre><p>Usually calls the code object and passes $topic as an argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#%28Code%29_method_ACCEPTS
Routine.arity	A			Perl 6 Routine							<section class="prog__container"><pre><code>method arity(Code:D: --&gt; Int:D)\n</code></pre><p>Returns the minimum number of positional arguments that must be passed in order to call the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#%28Code%29_method_arity
Routine.count	A			Perl 6 Routine							<section class="prog__container"><pre><code>method count(Code:D: --&gt; Real:D)\n</code></pre><p>Returns the maximum number of positional arguments that may be passed when calling the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#%28Code%29_method_count
Routine.signature	A			Perl 6 Routine							<section class="prog__container"><pre><code>multi method signature(Code:D: --&gt; Signature:D)\n</code></pre><p>Returns the Signature object for this code object, which describes its parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#%28Code%29_method_signature
Routine.Str	A			Perl 6 Routine							<section class="prog__container"><pre><code>multi method Str(Code:D: --&gt; Str:D)\n</code></pre><p>Will produce a warning.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#%28Code%29_method_Str
Routine.file	A			Perl 6 Routine							<section class="prog__container"><pre><code>method file(Code:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the file in which the code object was declared.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#%28Code%29_method_file
Routine.line	A			Perl 6 Routine							<section class="prog__container"><pre><code>method line(Code:D: --&gt; Int:D)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Routine.html#%28Code%29_method_line
Routine.CALL-ME	R	Callable.CALL-ME										
Routine.assuming	R	Callable.assuming										
Routine.ACCEPTS	R	Callable.ACCEPTS										
Routine.any	R	Callable.any										
Routine.all	R	Callable.all										
Routine.one	R	Callable.one										
Routine.none	R	Callable.none										
Routine.list	R	Callable.list										
Routine.push	R	Callable.push										
Routine.reverse	R	Callable.reverse										
Routine.sort	R	Callable.sort										
Routine.map	R	Callable.map										
Routine.deepmap	R	Callable.deepmap										
Routine.duckmap	R	Callable.duckmap										
Routine.flat	R	Callable.flat										
Routine.eager	R	Callable.eager										
Routine.elems	R	Callable.elems										
Routine.end	R	Callable.end										
Routine.pairup	R	Callable.pairup										
Routine.exit	R	Callable.exit										
Routine.item	R	Callable.item										
Routine.defined	R	Callable.defined										
Routine.isa	R	Callable.isa										
Routine.does	R	Callable.does										
Routine.Bool	R	Callable.Bool										
Routine.Str	R	Callable.Str										
Routine.gist	R	Callable.gist										
Routine.perl	R	Callable.perl										
Routine.item	R	Callable.item										
Routine.clone	R	Callable.clone										
Routine.new	R	Callable.new										
Routine.bless	R	Callable.bless										
Routine.CREATE	R	Callable.CREATE										
Routine.print	R	Callable.print										
Routine.put	R	Callable.put										
Routine.say	R	Callable.say										
Routine.ACCEPTS	R	Callable.ACCEPTS										
Routine.WHICH	R	Callable.WHICH										
Routine.WHERE	R	Callable.WHERE										
Routine.WHY	R	Callable.WHY										
Routine.export	R	Callable.export										
Routine.return	R	Callable.return										
Routine.return-rw	R	Callable.return-rw										
Routine.emit	R	Callable.emit										
Routine.take	R	Callable.take										
Routine.take	R	Callable.take										
Routine.take-rw	R	Callable.take-rw										
Routine.so	R	Callable.so										
Routine.not	R	Callable.not										
Scalar.ACCEPTS	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_ACCEPTS
Scalar.any	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_any
Scalar.all	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_all
Scalar.one	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_one
Scalar.none	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_none
Scalar.list	A			Perl 6 Scalar							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_list
Scalar.push	A			Perl 6 Scalar							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_push
Scalar.reverse	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_routine_reverse
Scalar.sort	A			Perl 6 Scalar							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_sort
Scalar.map	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_map
Scalar.deepmap	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_deepmap
Scalar.duckmap	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_duckmap
Scalar.flat	A			Perl 6 Scalar							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_flat
Scalar.eager	A			Perl 6 Scalar							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_eager
Scalar.elems	A			Perl 6 Scalar							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_elems
Scalar.end	A			Perl 6 Scalar							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_end
Scalar.pairup	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_method_pairup
Scalar.exit	A			Perl 6 Scalar							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_sub_exit
Scalar.item	A			Perl 6 Scalar							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Any%29_sub_item
Scalar.defined	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_routine_defined
Scalar.isa	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_routine_isa
Scalar.does	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_routine_does
Scalar.Bool	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_routine_Bool
Scalar.Str	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_Str
Scalar.gist	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_routine_gist
Scalar.perl	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_routine_perl
Scalar.item	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_item
Scalar.clone	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_clone
Scalar.new	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_new
Scalar.bless	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_bless
Scalar.CREATE	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_CREATE
Scalar.print	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_print
Scalar.put	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_put
Scalar.say	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_say
Scalar.ACCEPTS	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_ACCEPTS
Scalar.WHICH	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_WHICH
Scalar.WHERE	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_WHERE
Scalar.WHY	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_WHY
Scalar.export	A			Perl 6 Scalar							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_trait_is_export
Scalar.return	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_return
Scalar.return-rw	A			Perl 6 Scalar							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_return-rw
Scalar.emit	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_emit
Scalar.take	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_take
Scalar.take	A			Perl 6 Scalar							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_routine_take
Scalar.take-rw	A			Perl 6 Scalar							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_routine_take-rw
Scalar.so	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_so
Scalar.not	A			Perl 6 Scalar							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scalar.html#%28Mu%29_method_not
Scheduler.uncaught_handler	A			Perl 6 Scheduler							<section class="prog__container"><pre><code>method uncaught_handler() is rw\n</code></pre><p>RW-Accessor for the handler that is caught for uncaught exceptions from the code that is being scheduled and run.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scheduler.html#method_uncaught_handler
Scheduler.cue	A			Perl 6 Scheduler							<section class="prog__container"><pre><code>method cue(:&amp;code, Instant :$at, :$in, :$every, :$times = 1; :&amp;catch)\n</code></pre><p>Schedules a callable (&amp;code) for execution.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Scheduler.html#method_cue
Semaphore.new	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method new( int $permits )\n</code></pre><p>Initialize the semaphore with the number of permitted accesses.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#method_new
Semaphore.acquire	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method acquire()\n</code></pre><p>Acquire access.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#method_acquire
acquire	R	Semaphore.acquire										
Semaphore.try_acquire	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method try_acquire(--&gt; Bool)\n</code></pre><p>Same as acquire but will not block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#method_try_acquire
try_acquire	R	Semaphore.try_acquire										
Semaphore.release	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method release()\n</code></pre><p>Release the semaphore raising the number of permissions.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#method_release
release	R	Semaphore.release										
Semaphore.ACCEPTS	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_ACCEPTS
Semaphore.any	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_any
Semaphore.all	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_all
Semaphore.one	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_one
Semaphore.none	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_none
Semaphore.list	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_list
Semaphore.push	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_push
Semaphore.reverse	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_routine_reverse
Semaphore.sort	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_sort
Semaphore.map	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_map
Semaphore.deepmap	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_deepmap
Semaphore.duckmap	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_duckmap
Semaphore.flat	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_flat
Semaphore.eager	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_eager
Semaphore.elems	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_elems
Semaphore.end	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_end
Semaphore.pairup	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_method_pairup
Semaphore.exit	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_sub_exit
Semaphore.item	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Any%29_sub_item
Semaphore.defined	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_routine_defined
Semaphore.isa	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_routine_isa
Semaphore.does	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_routine_does
Semaphore.Bool	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_routine_Bool
Semaphore.Str	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_Str
Semaphore.gist	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_routine_gist
Semaphore.perl	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_routine_perl
Semaphore.item	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_item
Semaphore.clone	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_clone
Semaphore.new	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_new
Semaphore.bless	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_bless
Semaphore.CREATE	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_CREATE
Semaphore.print	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_print
Semaphore.put	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_put
Semaphore.say	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_say
Semaphore.ACCEPTS	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_ACCEPTS
Semaphore.WHICH	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_WHICH
Semaphore.WHERE	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_WHERE
Semaphore.WHY	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_WHY
Semaphore.export	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_trait_is_export
Semaphore.return	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_return
Semaphore.return-rw	A			Perl 6 Semaphore							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_return-rw
Semaphore.emit	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_emit
Semaphore.take	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_take
Semaphore.take	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_routine_take
Semaphore.take-rw	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_routine_take-rw
Semaphore.so	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_so
Semaphore.not	A			Perl 6 Semaphore							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Semaphore.html#%28Mu%29_method_not
Seq.new	A			Perl 6 Seq							<section class="prog__container"><pre><code>method new(Iterator:D $iter --&gt; Seq:D)\n</code></pre><p>Creates a new Seq object from the iterator passed as the single argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#method_new
Seq.iterator	A			Perl 6 Seq							<section class="prog__container"><pre><code>method iterator(Seq:D: --&gt; Iterator:D)\n</code></pre><p>Returns the underlying iterator, and marks the invocant as consumed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#method_iterator
Seq.is-lazy	A			Perl 6 Seq							<section class="prog__container"><pre><code>method is-lazy(Seq:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the sequence is lazy and potentially infinite, and False otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#method_is-lazy
Seq.eager	A			Perl 6 Seq							<section class="prog__container"><pre><code>method eager(Seq:D: --&gt; List:D)\n</code></pre><p>Returns an eagerly evaluated List based on the invocant sequence, and marks it as consumed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#method_eager
Seq.from-loop	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method from-loop(&amp;body --&gt; Seq:D)\nmulti method from-loop(&amp;body, &amp;cond, :$repeat --&gt; Seq:D)\nmulti method from-loop(&amp;body, &amp;cond, &amp;afterward --&gt; Seq:D)\n</code></pre><p>Creates a new Seq based callbacks.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#method_from-loop
from-loop	R	Seq.from-loop										
Seq.iterator	A			Perl 6 Seq							<section class="prog__container"><pre><code>method iterator(--&gt; Iterator:D)\n</code></pre><p>Method stub that ensures all classes doing the Iterable role have a method iterator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Iterable%29_method_iterator
Seq.flat	A			Perl 6 Seq							<section class="prog__container"><pre><code>method flat(--&gt; Iterable)\n</code></pre><p>Returns another Iterable that flattens out all iterables that the first one returns.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Iterable%29_method_flat
Seq.lazy	A			Perl 6 Seq							<section class="prog__container"><pre><code>method lazy(--&gt; Iterable)\n</code></pre><p>Returns a lazy iterable wrapping the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Iterable%29_method_lazy
Seq.hyper	A			Perl 6 Seq							<section class="prog__container"><pre><code>method hyper(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Iterable%29_method_hyper
Seq.race	A			Perl 6 Seq							<section class="prog__container"><pre><code>method race(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Iterable%29_method_race
Seq.cache	A			Perl 6 Seq							<section class="prog__container"><pre><code>method cache(PositionalBindFailover:D: --&gt; List:D)\n</code></pre><p>Returns a List based on the iterator method, and caches it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28PositionalBindFailover%29_method_cache
Seq.list	A			Perl 6 Seq							<section class="prog__container"><pre><code>method list(PositionalBindFailover:D: --&gt; List:D)\n</code></pre><p>Returns a List based on the iterator method without caching it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28PositionalBindFailover%29_method_list
Seq.iterator	A			Perl 6 Seq							<section class="prog__container"><pre><code>method iterator(PositionalBindFailover:D:) { ... }\n</code></pre><p>This method stub ensure that a class implementing role PositionalBindFailover provides an iterator method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28PositionalBindFailover%29_method_iterator
Seq.abs	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_abs
Seq.conj	A			Perl 6 Seq							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_conj
Seq.sqrt	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_sqrt
Seq.sign	A			Perl 6 Seq							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_sign
Seq.rand	A			Perl 6 Seq							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_rand
Seq.sin	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_sin
Seq.asin	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_asin
Seq.cos	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_cos
Seq.acos	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_acos
Seq.tan	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_tan
Seq.atan	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_atan
Seq.atan2	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_atan2
Seq.sec	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_sec
Seq.asec	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_asec
Seq.cosec	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_cosec
Seq.acosec	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_acosec
Seq.cotan	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_cotan
Seq.acotan	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_acotan
Seq.sinh	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_sinh
Seq.asinh	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_asinh
Seq.cosh	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_cosh
Seq.acosh	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_acosh
Seq.tanh	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_tanh
Seq.atanh	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_atanh
Seq.sech	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_sech
Seq.asech	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_asech
Seq.cosech	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_cosech
Seq.acosech	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_acosech
Seq.cotanh	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_cotanh
Seq.acotanh	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_acotanh
Seq.cis	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_cis
Seq.log	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_log
Seq.log10	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_log10
Seq.exp	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_exp
Seq.unpolar	A			Perl 6 Seq							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_unpolar
Seq.round	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_round
Seq.floor	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_floor
Seq.ceiling	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_ceiling
Seq.truncate	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_truncate
Seq.ord	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_ord
Seq.chr	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_chr
Seq.chars	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_chars
Seq.codes	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_codes
Seq.flip	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_flip
Seq.trim	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_trim
Seq.trim-leading	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_trim-leading
Seq.trim-trailing	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_trim-trailing
Seq.lc	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_lc
Seq.uc	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_uc
Seq.fc	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_fc
Seq.tc	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_tc
Seq.tclc	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_tclc
Seq.wordcase	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_wordcase
Seq.samecase	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_samecase
Seq.uniprop	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_uniprop
Seq.uniprops	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_uniprops
Seq.uniname	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_uniname
Seq.uninames	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_uninames
Seq.unimatch	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_unimatch
Seq.chop	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_chop
Seq.chomp	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_chomp
Seq.substr	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_substr
Seq.ords	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_ords
Seq.chrs	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_chrs
Seq.split	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_split
Seq.lines	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_lines
Seq.words	A			Perl 6 Seq							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_words
Seq.comb	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_comb
Seq.contains	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_contains
Seq.index	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_index
Seq.rindex	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_rindex
Seq.match	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_match
Seq.fmt	A			Perl 6 Seq							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_fmt
Seq.roots	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_roots
Seq.IO	A			Perl 6 Seq							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_method_IO
Seq.EVAL	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_EVAL
Seq.EVALFILE	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Cool%29_routine_EVALFILE
Seq.ACCEPTS	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_ACCEPTS
Seq.any	A			Perl 6 Seq							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_any
Seq.all	A			Perl 6 Seq							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_all
Seq.one	A			Perl 6 Seq							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_one
Seq.none	A			Perl 6 Seq							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_none
Seq.list	A			Perl 6 Seq							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_list
Seq.push	A			Perl 6 Seq							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_push
Seq.reverse	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_routine_reverse
Seq.sort	A			Perl 6 Seq							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_sort
Seq.map	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_map
Seq.deepmap	A			Perl 6 Seq							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_deepmap
Seq.duckmap	A			Perl 6 Seq							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_duckmap
Seq.flat	A			Perl 6 Seq							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_flat
Seq.eager	A			Perl 6 Seq							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_eager
Seq.elems	A			Perl 6 Seq							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_elems
Seq.end	A			Perl 6 Seq							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_end
Seq.pairup	A			Perl 6 Seq							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_method_pairup
Seq.exit	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_sub_exit
Seq.item	A			Perl 6 Seq							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Any%29_sub_item
Seq.defined	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_routine_defined
Seq.isa	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_routine_isa
Seq.does	A			Perl 6 Seq							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_routine_does
Seq.Bool	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_routine_Bool
Seq.Str	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_Str
Seq.gist	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_routine_gist
Seq.perl	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_routine_perl
Seq.item	A			Perl 6 Seq							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_item
Seq.clone	A			Perl 6 Seq							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_clone
Seq.new	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_new
Seq.bless	A			Perl 6 Seq							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_bless
Seq.CREATE	A			Perl 6 Seq							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_CREATE
Seq.print	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_print
Seq.put	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_put
Seq.say	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_say
Seq.ACCEPTS	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_ACCEPTS
Seq.WHICH	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_WHICH
Seq.WHERE	A			Perl 6 Seq							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_WHERE
Seq.WHY	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_WHY
Seq.export	A			Perl 6 Seq							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_trait_is_export
Seq.return	A			Perl 6 Seq							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_return
Seq.return-rw	A			Perl 6 Seq							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_return-rw
Seq.emit	A			Perl 6 Seq							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_emit
Seq.take	A			Perl 6 Seq							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_take
Seq.take	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_routine_take
Seq.take-rw	A			Perl 6 Seq							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_routine_take-rw
Seq.so	A			Perl 6 Seq							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_so
Seq.not	A			Perl 6 Seq							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Seq.html#%28Mu%29_method_not
Set.set	A			Perl 6 Set							<section class="prog__container"><pre><code>sub set(*@args --&gt; Set)\n</code></pre><p>Creates a Set from the given @args&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#sub_set
set	R	Set.set										
Set.new-from-pairs	A			Perl 6 Set							<section class="prog__container"><pre><code>method new-from-pairs(*@pairs --&gt; Setty:D)\n</code></pre><p>Constructs a Setty object from a list of Pair objects given as positional arguments:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_new-from-pairs
Set.grab	A			Perl 6 Set							<section class="prog__container"><pre><code>method grab($count = 1)\n</code></pre><p>Removes and returns $count elements chosen at random (without repetition) from the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_grab
Set.grabpairs	A			Perl 6 Set							<section class="prog__container"><pre><code>method grabpairs($count = 1)\n</code></pre><p>Removes $count elements chosen at random (without repetition) from the set, and returns a list of Pair objects whose keys are the grabbed elements and whose values are True.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_grabpairs
Set.pick	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method pick($count = 1)\n</code></pre><p>Returns $count elements chosen at random (without repetition) from the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_pick
Set.roll	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method roll($count = 1)\n</code></pre><p>Returns a lazy list of $count elements, each randomly selected from the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_roll
Set.keys	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method keys(Setty:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of all elements of the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_keys
Set.values	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method values(Setty:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing as many True values as the set has elements.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_values
Set.kv	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method kv(Setty:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of the set&amp;#39;s elements and True values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_kv
Set.elems	A			Perl 6 Set							<section class="prog__container"><pre><code>method elems(--&gt; Int)\n</code></pre><p>The number of elements of the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_elems
Set.total	A			Perl 6 Set							<section class="prog__container"><pre><code>method total(--&gt; Int)\n</code></pre><p>The total of all the values of the QuantHash object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_total
Set.default	A			Perl 6 Set							<section class="prog__container"><pre><code>method default returns False\n</code></pre><p>Returns the default value of the invocant, i.e. the value which is returned when trying to access an element in the Setty object which has not been previously initialized or when accessing an element which has explicitly been set to Nil or False.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_default
Set.ACCEPTS	A			Perl 6 Set							<section class="prog__container"><pre><code>method ACCEPTS($other)\n</code></pre><p>Returns True if $other and self contain all the same elements, and no others.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_ACCEPTS
Set.Bag	A			Perl 6 Set							<section class="prog__container"><pre><code>method Bag(Setty:D: --&gt; Bag:D)\n</code></pre><p>Returns a Bag containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_Bag
Set.BagHash	A			Perl 6 Set							<section class="prog__container"><pre><code>method BagHash(Setty:D: --&gt; BagHash:D)\n</code></pre><p>Returns a BagHash containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_BagHash
Set.Bool	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method Bool(Setty:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_Bool
Set.Mix	A			Perl 6 Set							<section class="prog__container"><pre><code>method Mix(Setty:D: --&gt; Mix:D)\n</code></pre><p>Returns a Mix containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_Mix
Set.MixHash	A			Perl 6 Set							<section class="prog__container"><pre><code>method MixHash(Setty:D: --&gt; MixHash:D)\n</code></pre><p>Returns a MixHash containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Setty%29_method_MixHash
Set.ACCEPTS	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_ACCEPTS
Set.any	A			Perl 6 Set							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_any
Set.all	A			Perl 6 Set							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_all
Set.one	A			Perl 6 Set							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_one
Set.none	A			Perl 6 Set							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_none
Set.list	A			Perl 6 Set							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_list
Set.push	A			Perl 6 Set							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_push
Set.reverse	A			Perl 6 Set							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_routine_reverse
Set.sort	A			Perl 6 Set							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_sort
Set.map	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_map
Set.deepmap	A			Perl 6 Set							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_deepmap
Set.duckmap	A			Perl 6 Set							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_duckmap
Set.flat	A			Perl 6 Set							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_flat
Set.eager	A			Perl 6 Set							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_eager
Set.elems	A			Perl 6 Set							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_elems
Set.end	A			Perl 6 Set							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_end
Set.pairup	A			Perl 6 Set							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_method_pairup
Set.exit	A			Perl 6 Set							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_sub_exit
Set.item	A			Perl 6 Set							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Any%29_sub_item
Set.defined	A			Perl 6 Set							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_routine_defined
Set.isa	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_routine_isa
Set.does	A			Perl 6 Set							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_routine_does
Set.Bool	A			Perl 6 Set							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_routine_Bool
Set.Str	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_Str
Set.gist	A			Perl 6 Set							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_routine_gist
Set.perl	A			Perl 6 Set							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_routine_perl
Set.item	A			Perl 6 Set							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_item
Set.clone	A			Perl 6 Set							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_clone
Set.new	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_new
Set.bless	A			Perl 6 Set							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_bless
Set.CREATE	A			Perl 6 Set							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_CREATE
Set.print	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_print
Set.put	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_put
Set.say	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_say
Set.ACCEPTS	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_ACCEPTS
Set.WHICH	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_WHICH
Set.WHERE	A			Perl 6 Set							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_WHERE
Set.WHY	A			Perl 6 Set							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_WHY
Set.export	A			Perl 6 Set							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_trait_is_export
Set.return	A			Perl 6 Set							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_return
Set.return-rw	A			Perl 6 Set							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_return-rw
Set.emit	A			Perl 6 Set							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_emit
Set.take	A			Perl 6 Set							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_take
Set.take	A			Perl 6 Set							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_routine_take
Set.take-rw	A			Perl 6 Set							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_routine_take-rw
Set.so	A			Perl 6 Set							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_so
Set.not	A			Perl 6 Set							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Set.html#%28Mu%29_method_not
SetHash.new-from-pairs	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method new-from-pairs(*@pairs --&gt; Setty:D)\n</code></pre><p>Constructs a Setty object from a list of Pair objects given as positional arguments:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_new-from-pairs
SetHash.grab	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method grab($count = 1)\n</code></pre><p>Removes and returns $count elements chosen at random (without repetition) from the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_grab
SetHash.grabpairs	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method grabpairs($count = 1)\n</code></pre><p>Removes $count elements chosen at random (without repetition) from the set, and returns a list of Pair objects whose keys are the grabbed elements and whose values are True.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_grabpairs
SetHash.pick	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method pick($count = 1)\n</code></pre><p>Returns $count elements chosen at random (without repetition) from the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_pick
SetHash.roll	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method roll($count = 1)\n</code></pre><p>Returns a lazy list of $count elements, each randomly selected from the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_roll
SetHash.keys	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method keys(Setty:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of all elements of the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_keys
SetHash.values	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method values(Setty:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing as many True values as the set has elements.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_values
SetHash.kv	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method kv(Setty:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of the set&amp;#39;s elements and True values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_kv
SetHash.elems	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method elems(--&gt; Int)\n</code></pre><p>The number of elements of the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_elems
SetHash.total	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method total(--&gt; Int)\n</code></pre><p>The total of all the values of the QuantHash object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_total
SetHash.default	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method default returns False\n</code></pre><p>Returns the default value of the invocant, i.e. the value which is returned when trying to access an element in the Setty object which has not been previously initialized or when accessing an element which has explicitly been set to Nil or False.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_default
SetHash.ACCEPTS	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method ACCEPTS($other)\n</code></pre><p>Returns True if $other and self contain all the same elements, and no others.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_ACCEPTS
SetHash.Bag	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method Bag(Setty:D: --&gt; Bag:D)\n</code></pre><p>Returns a Bag containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_Bag
SetHash.BagHash	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method BagHash(Setty:D: --&gt; BagHash:D)\n</code></pre><p>Returns a BagHash containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_BagHash
SetHash.Bool	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method Bool(Setty:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_Bool
SetHash.Mix	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method Mix(Setty:D: --&gt; Mix:D)\n</code></pre><p>Returns a Mix containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_Mix
SetHash.MixHash	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method MixHash(Setty:D: --&gt; MixHash:D)\n</code></pre><p>Returns a MixHash containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Setty%29_method_MixHash
SetHash.ACCEPTS	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_ACCEPTS
SetHash.any	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_any
SetHash.all	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_all
SetHash.one	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_one
SetHash.none	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_none
SetHash.list	A			Perl 6 SetHash							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_list
SetHash.push	A			Perl 6 SetHash							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_push
SetHash.reverse	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_routine_reverse
SetHash.sort	A			Perl 6 SetHash							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_sort
SetHash.map	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_map
SetHash.deepmap	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_deepmap
SetHash.duckmap	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_duckmap
SetHash.flat	A			Perl 6 SetHash							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_flat
SetHash.eager	A			Perl 6 SetHash							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_eager
SetHash.elems	A			Perl 6 SetHash							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_elems
SetHash.end	A			Perl 6 SetHash							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_end
SetHash.pairup	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_method_pairup
SetHash.exit	A			Perl 6 SetHash							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_sub_exit
SetHash.item	A			Perl 6 SetHash							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Any%29_sub_item
SetHash.defined	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_routine_defined
SetHash.isa	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_routine_isa
SetHash.does	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_routine_does
SetHash.Bool	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_routine_Bool
SetHash.Str	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_Str
SetHash.gist	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_routine_gist
SetHash.perl	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_routine_perl
SetHash.item	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_item
SetHash.clone	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_clone
SetHash.new	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_new
SetHash.bless	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_bless
SetHash.CREATE	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_CREATE
SetHash.print	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_print
SetHash.put	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_put
SetHash.say	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_say
SetHash.ACCEPTS	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_ACCEPTS
SetHash.WHICH	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_WHICH
SetHash.WHERE	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_WHERE
SetHash.WHY	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_WHY
SetHash.export	A			Perl 6 SetHash							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_trait_is_export
SetHash.return	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_return
SetHash.return-rw	A			Perl 6 SetHash							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_return-rw
SetHash.emit	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_emit
SetHash.take	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_take
SetHash.take	A			Perl 6 SetHash							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_routine_take
SetHash.take-rw	A			Perl 6 SetHash							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_routine_take-rw
SetHash.so	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_so
SetHash.not	A			Perl 6 SetHash							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/SetHash.html#%28Mu%29_method_not
Setty.new-from-pairs	A			Perl 6 Setty							<section class="prog__container"><pre><code>method new-from-pairs(*@pairs --&gt; Setty:D)\n</code></pre><p>Constructs a Setty object from a list of Pair objects given as positional arguments:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_new-from-pairs
Setty.grab	A			Perl 6 Setty							<section class="prog__container"><pre><code>method grab($count = 1)\n</code></pre><p>Removes and returns $count elements chosen at random (without repetition) from the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_grab
Setty.grabpairs	A			Perl 6 Setty							<section class="prog__container"><pre><code>method grabpairs($count = 1)\n</code></pre><p>Removes $count elements chosen at random (without repetition) from the set, and returns a list of Pair objects whose keys are the grabbed elements and whose values are True.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_grabpairs
Setty.pick	A			Perl 6 Setty							<section class="prog__container"><pre><code>multi method pick($count = 1)\n</code></pre><p>Returns $count elements chosen at random (without repetition) from the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_pick
Setty.roll	A			Perl 6 Setty							<section class="prog__container"><pre><code>multi method roll($count = 1)\n</code></pre><p>Returns a lazy list of $count elements, each randomly selected from the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_roll
Setty.keys	A			Perl 6 Setty							<section class="prog__container"><pre><code>multi method keys(Setty:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of all elements of the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_keys
Setty.values	A			Perl 6 Setty							<section class="prog__container"><pre><code>multi method values(Setty:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing as many True values as the set has elements.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_values
Setty.kv	A			Perl 6 Setty							<section class="prog__container"><pre><code>multi method kv(Setty:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of the set&amp;#39;s elements and True values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_kv
Setty.elems	A			Perl 6 Setty							<section class="prog__container"><pre><code>method elems(--&gt; Int)\n</code></pre><p>The number of elements of the set.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_elems
Setty.total	A			Perl 6 Setty							<section class="prog__container"><pre><code>method total(--&gt; Int)\n</code></pre><p>The total of all the values of the QuantHash object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_total
Setty.default	A			Perl 6 Setty							<section class="prog__container"><pre><code>method default returns False\n</code></pre><p>Returns the default value of the invocant, i.e. the value which is returned when trying to access an element in the Setty object which has not been previously initialized or when accessing an element which has explicitly been set to Nil or False.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_default
Setty.ACCEPTS	A			Perl 6 Setty							<section class="prog__container"><pre><code>method ACCEPTS($other)\n</code></pre><p>Returns True if $other and self contain all the same elements, and no others.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_ACCEPTS
Setty.Bag	A			Perl 6 Setty							<section class="prog__container"><pre><code>method Bag(Setty:D: --&gt; Bag:D)\n</code></pre><p>Returns a Bag containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_Bag
Setty.BagHash	A			Perl 6 Setty							<section class="prog__container"><pre><code>method BagHash(Setty:D: --&gt; BagHash:D)\n</code></pre><p>Returns a BagHash containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_BagHash
Setty.Bool	A			Perl 6 Setty							<section class="prog__container"><pre><code>multi method Bool(Setty:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_Bool
Setty.Mix	A			Perl 6 Setty							<section class="prog__container"><pre><code>method Mix(Setty:D: --&gt; Mix:D)\n</code></pre><p>Returns a Mix containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_Mix
Setty.MixHash	A			Perl 6 Setty							<section class="prog__container"><pre><code>method MixHash(Setty:D: --&gt; MixHash:D)\n</code></pre><p>Returns a MixHash containing the elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Setty.html#method_MixHash
Signature.Separators	A			Perl 6 Signature							<section class="prog__container"><pre><code>my $sig = :($a, @b, %c);\nsub add($a, $b) { $a + $b };\n</code></pre><p>A signature consists of zero or more parameters, separated by commas.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Parameter_Separators
Separators	R	Signature.Separators										
Signature.Constraints	A			Perl 6 Signature							<section class="prog__container"><pre><code>my $sig = :(Int $a, Str $b);\n \nsub divisors(Int $n) { $_ if $n %% $_ for 1..$n };\ndivisors 2.5;\nCATCH { default { put .^name, &amp;#39;: &amp;#39;, .Str } };\n# OUTPUTÂ«X::TypeCheck::Argument: Calling divisors(Rat) will never work with declared signature (Int $n)â¤Â» \n</code></pre><p>Parameters can optionally have a type constraint (the default is Any).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Type_Constraints
Constraints	R	Signature.Constraints										
Signature.Parameters	A			Perl 6 Signature							<section class="prog__container"><pre><code>$ = :($a, @b);     # exactly two arguments, where the second one must be Positional \n$ = :($a, *@b);    # at least one argument, @b slurps up any beyond that \n$ = :(*%h);        # no positional arguments, but any number of named arguments \n \nsub one-arg (@)  { }\nsub slurpy  (*@) { }\none-arg (5, 6, 7); # ok, same as one-arg((5, 6, 7)) \nslurpy  (5, 6, 7); # ok \nslurpy   5, 6, 7 ; # ok \n# one-arg(5, 6, 7) ; # X::TypeCheck::Argument \n# one-arg  5, 6, 7 ; # X::TypeCheck::Argument \n \nsub named-names (*%named-args) { %named-args.keys };\nsay named-names :foo(42) :bar&lt;baz&gt;; # foo bar \n</code></pre><p>A function is variadic if it can take a varying number of arguments; that is, its arity is not fixed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Slurpy_%28A.K.A._Variadic%29_Parameters
Signature.Parameters	A			Perl 6 Signature							<section class="prog__container"><pre><code>my @array = &lt;a b c&gt;;\nmy $list := &lt;d e f&gt;;\nsub a(*@a)  { @a.perl.say };\na(@array);                 # ["a", "b", "c"] \na(1, $list, [2, 3]);       # [1, "d", "e", "f", 2, 3] \na([1, 2]);                 # [1, 2] \na(1, [1, 2], ([3, 4], 5)); # [1, 1, 2, 3, 4 5] \na(($_ for 1, 2, 3));       # [1, 2, 3] \n</code></pre><p>There are three variations to slurpy array parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Types_of_Slurpy_Array_Parameters
Signature.Captures	A			Perl 6 Signature							<section class="prog__container"><pre><code>sub f(::T $p1, T $p2, ::C){\n    # $p1 and $p2 are of the same type T, that we don&amp;#39;t know yet \n    # C will hold a type we derive from a type object or value \n    my C $closure = $p1 / $p2;\n    return sub (T $p1) {\n        $closure * $p1;\n    }\n}\n \n# The first parameter is Int and so must be the 2nd. \n# We derive the 3rd type from calling the operator that is used in &amp;f. \nmy &amp;s = f(10, 2, Int.new / Int.new);\nsay s(2); # 10 / 2 * 2 == 10 \n</code></pre><p>Type Captures allow deferring the specification of a type constraint to the time the function is called.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Type_Captures
Captures	R	Signature.Captures										
Signature.Named	A			Perl 6 Signature							<section class="prog__container"><pre><code>$ = :($a);               # a positional parameter \n$ = :(:$a);              # a named parameter of name &amp;#39;a&amp;#39; \n$ = :(*@a);              # a slurpy positional parameter \n$ = :(*%h);              # a slurpy named parameter \n</code></pre><p>A parameter can be positional or named.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Positional_vs._Named
Named	R	Signature.Named										
Signature.Parameters	A			Perl 6 Signature							<section class="prog__container"><pre><code>$ = :(Str $id);         # required parameter \n$ = :($base = 10);      # optional parameter, default value 10 \n$ = :(Int $x?);         # optional parameter, default is the Int type object \n</code></pre><p>Positional parameters are mandatory by default, and can be made optional with a default value or a trailing question mark:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Optional_and_Mandatory_Parameters
Signature.Parameters	A			Perl 6 Signature							<section class="prog__container"><pre><code>sub first(@array ($first, *@rest)) { $first }\n</code></pre><p>Parameters can be followed by a sub-signature in brackets, which will destructure the argument given.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Destructuring_Parameters
Signature.Sub-signatures	A			Perl 6 Signature							<section class="prog__container"><pre><code>sub foo(|c(Int, Str)){\n   put "called with {c.perl}"\n};\nfoo(42, "answer");\n# OUTPUTÂ«called with &#92;(42, "answer")â¤Â» \n</code></pre><p>To match against a compound parameter use a sub-signature following the argument name in parentheses.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Sub-signatures
Sub-signatures	R	Signature.Sub-signatures										
Signature.Names	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi sub f(Int $i, Str $s;; :$b) { dd $i, $s, $b };\nf(10, &amp;#39;answer&amp;#39;);\n# OUTPUTÂ«10â¤"answer"â¤Any $b = Anyâ¤Â» \n</code></pre><p>To exclude certain parameters from being considered in multiple dispatch, separate them with a double semi-colon.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Long_Names
Names	R	Signature.Names										
Signature.Parameters	A			Perl 6 Signature							<section class="prog__container"><pre><code>sub a(Int $i, Str $s) { say $i.WHAT, $s.WHAT }\nsub b(|c) { say c.WHAT; a(|c) }\nb(42, "answer");\n# OUTPUTÂ«(Capture)â¤(Int)(Str)â¤Â» \n</code></pre><p>Prefixing a parameter with a vertical bar | makes the parameter a Capture, using up all the remaining positional and named arguments.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Capture_Parameters
Signature.Modifiers	A			Perl 6 Signature							<section class="prog__container"><pre><code>sub count-up($x is copy) {\n    $x = Inf if $x ~~ Whatever;\n    .say for 1..$x;\n}\n</code></pre><p>By default, parameters are bound to their argument and marked as read-only.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#Parameter_Traits_and_Modifiers
Modifiers	R	Signature.Modifiers										
Signature.params	A			Perl 6 Signature							<section class="prog__container"><pre><code>method params(Signature:D: --&gt; Positional)\n</code></pre><p>Returns the list of Parameter objects that make up the signature.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#method_params
params	R	Signature.params										
Signature.arity	A			Perl 6 Signature							<section class="prog__container"><pre><code>method arity(Signature:D: --&gt; Int:D)\n</code></pre><p>Returns the minimal number of positional arguments required to satisfy the signature.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#method_arity
Signature.count	A			Perl 6 Signature							<section class="prog__container"><pre><code>method count(Signature:D: --&gt; Real:D)\n</code></pre><p>Returns the maximal number of positional arguments which can be bound to the signature.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#method_count
Signature.returns	A			Perl 6 Signature							<section class="prog__container"><pre><code>:($a, $b --&gt; Int).returns # Int \n</code></pre><p>Whatever the Signature&amp;#39;s return constraint is:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#method_returns
returns	R	Signature.returns										
Signature.ACCEPTS	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method ACCEPTS(Signature:D: Capture $topic)\nmulti method ACCEPTS(Signature:D: @topic)\nmulti method ACCEPTS(Signature:D: %topic)\nmulti method ACCEPTS(Signature:D: Signature $topic)\n</code></pre><p>The first three see if the argument could be bound to the capture, i.e., if a function with that Signature would be able to be called with the $topic:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#method_ACCEPTS
Signature.ACCEPTS	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_ACCEPTS
Signature.any	A			Perl 6 Signature							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_any
Signature.all	A			Perl 6 Signature							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_all
Signature.one	A			Perl 6 Signature							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_one
Signature.none	A			Perl 6 Signature							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_none
Signature.list	A			Perl 6 Signature							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_list
Signature.push	A			Perl 6 Signature							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_push
Signature.reverse	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_routine_reverse
Signature.sort	A			Perl 6 Signature							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_sort
Signature.map	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_map
Signature.deepmap	A			Perl 6 Signature							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_deepmap
Signature.duckmap	A			Perl 6 Signature							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_duckmap
Signature.flat	A			Perl 6 Signature							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_flat
Signature.eager	A			Perl 6 Signature							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_eager
Signature.elems	A			Perl 6 Signature							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_elems
Signature.end	A			Perl 6 Signature							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_end
Signature.pairup	A			Perl 6 Signature							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_method_pairup
Signature.exit	A			Perl 6 Signature							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_sub_exit
Signature.item	A			Perl 6 Signature							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Any%29_sub_item
Signature.defined	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_routine_defined
Signature.isa	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_routine_isa
Signature.does	A			Perl 6 Signature							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_routine_does
Signature.Bool	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_routine_Bool
Signature.Str	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_Str
Signature.gist	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_routine_gist
Signature.perl	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_routine_perl
Signature.item	A			Perl 6 Signature							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_item
Signature.clone	A			Perl 6 Signature							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_clone
Signature.new	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_new
Signature.bless	A			Perl 6 Signature							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_bless
Signature.CREATE	A			Perl 6 Signature							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_CREATE
Signature.print	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_print
Signature.put	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_put
Signature.say	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_say
Signature.ACCEPTS	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_ACCEPTS
Signature.WHICH	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_WHICH
Signature.WHERE	A			Perl 6 Signature							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_WHERE
Signature.WHY	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_WHY
Signature.export	A			Perl 6 Signature							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_trait_is_export
Signature.return	A			Perl 6 Signature							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_return
Signature.return-rw	A			Perl 6 Signature							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_return-rw
Signature.emit	A			Perl 6 Signature							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_emit
Signature.take	A			Perl 6 Signature							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_take
Signature.take	A			Perl 6 Signature							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_routine_take
Signature.take-rw	A			Perl 6 Signature							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_routine_take-rw
Signature.so	A			Perl 6 Signature							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_so
Signature.not	A			Perl 6 Signature							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Signature.html#%28Mu%29_method_not
Slip.slip	A			Perl 6 Slip							<section class="prog__container"><pre><code>sub slip(*@ --&gt; Slip:D)\n</code></pre><p>Creates a Slip from its arguments.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#sub_slip
slip	R	Slip.slip										
Slip.Empty	A			Perl 6 Slip							<section class="prog__container"><p>Empty is a Slip of the empty List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#Empty
Empty	R	Slip.Empty										
Slip.elems	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    elems($list --&gt; Int:D)\nmulti method elems(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_elems
Slip.end	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    end($list --&gt; Int:D)\nmulti method end(List:D: --&gt; Int:D)\n</code></pre><p>Returns the index of the last element.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_end
Slip.keys	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    keys($list --&gt; Seq:D)\nmulti method keys(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_keys
Slip.values	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    values($list --&gt; Seq:D)\nmulti method values(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of the list elements, in order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_values
Slip.kv	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    kv($list --&gt; Seq:D)\nmulti method kv(List:D: --&gt; Seq:D)\n</code></pre><p>Returns an interleaved sequence of indexes and values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_kv
Slip.pairs	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    pairs($list --&gt; Seq:D)\nmulti method pairs(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a sequence of pairs, with the indexes as keys and the list values as values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_pairs
Slip.antipairs	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi method antipairs(List:D: --&gt; Seq:D)\n</code></pre><p>Returns a Seq of pairs, with the values as keys and the indexes as values, i.e. the direct opposite to pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_antipairs
Slip.join	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    join($separator, *@list --&gt; Str:D)\nmulti method join(List:D: $separator --&gt; Str:D)\n</code></pre><p>Treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_join
Slip.map	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    map(&amp;code, *@elems --&gt; Seq:D)\nmulti method map(List:D: &amp;code --&gt; Seq:D)\n</code></pre><p>Invokes &amp;code for each element and gathers the return values in a sequence and returns it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_map
Slip.flat	A			Perl 6 Slip							<section class="prog__container"><pre><code>sub flat(**@list is raw)\n</code></pre><p>Constructs a list which contains any arguments provided in the order provided, and returns the result of calling the .flat method (inherited from Any) on that list:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_sub_flat
Slip.flatmap	A			Perl 6 Slip							<section class="prog__container"><pre><code>method flatmap(List:D: &amp;code --&gt; Seq:D)\n</code></pre><p>Like map iterates over the elements of the invocant list, feeding each element in turn to the code reference, and assembling the return values from these invocations in a result list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_flatmap
Slip.grep	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    grep(Mu $matcher, *@elems, :$k, :$kv, :$p, :$v --&gt; Seq:D)\nmulti method grep(List:D:  Mu $matcher, :$k, :$kv, :$p, :$v --&gt; Seq:D)\n</code></pre><p>Returns a sequence of elements against which $matcher smart-matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_grep
Slip.first	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    first(Mu $matcher, *@elems, :$k, :$kv, :$p, :$end)\nmulti method first(List:D:  Mu $matcher?, :$k, :$kv, :$p, :$end)\n</code></pre><p>Returns the first item of the list which smart-matches against $matcher, returns Nil when no values match.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_first
Slip.head	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi method head(List:D: Int(Cool) $number = 1 --&gt; Seq:D)\n</code></pre><p>Returns the first NUMBER items of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_head
Slip.tail	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi method tail(List:D: Int(Cool) $number = 1 --&gt; Seq:D)\n</code></pre><p>Returns a Seq containing the last NUMBER items of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_tail
Slip.categorize	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    categorize(&amp;mapper, *@values --&gt; Hash:D)\nmulti method categorize(List:D: &amp;mapper   --&gt; Hash:D)\n</code></pre><p>Transforms a list of values into a hash representing the categorizations of those values according to a mapper; each hash key represents one possible categorization for one or more of the incoming list values, and the corresponding hash value contains an array of those list values categorized by the mapper into the category of the associated key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_categorize
Slip.classify	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    classify(&amp;mapper, *@values --&gt; Hash:D)\nmulti method classify(List:D: &amp;mapper   --&gt; Hash:D)\n</code></pre><p>Transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_classify
Slip.Bool	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi method Bool(List:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the list has at least one element, and False for the empty list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_Bool
Slip.Str	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi method Str(List:D: --&gt; Str:D)\n</code></pre><p>Stringifies the elements of the list and joins them with spaces (same as .join(&amp;#39; &amp;#39;)).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_Str
Slip.Int	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi method Int(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_Int
Slip.Numeric	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi method Numeric(List:D: --&gt; Int:D)\n</code></pre><p>Returns the number of elements in the list (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_Numeric
Slip.Capture	A			Perl 6 Slip							<section class="prog__container"><pre><code>method Capture(--&gt; Capture:D)\n</code></pre><p>Returns a Capture where each Pair, if any, in the List has been converted to a named argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_Capture
Slip.pick	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    pick($count, *@list --&gt; Seq:D)\nmulti method pick(List:D: $count --&gt; Seq:D)\nmulti method pick(List:D: --&gt; Mu)\n</code></pre><p>If $count is supplied: Returns $count elements chosen at random and without repetition from the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_pick
Slip.roll	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    roll($count, *@list --&gt; Seq:D)\nmulti method roll(List:D: $count --&gt; Seq:D)\nmulti method roll(List:D: --&gt; Mu)\n</code></pre><p>If $count is supplied: Returns a sequence of $count elements, each randomly selected from the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_roll
Slip.eager	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi method eager(List:D: --&gt; List:D)\nsub eager(*@elems --&gt; List:D)\n</code></pre><p>Evaluates all elements in the list eagerly, and returns them as a list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_eager
Slip.reverse	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_reverse
Slip.rotate	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    rotate(@list,  Int:D $n = 1 --&gt; List:D)\nmulti method rotate(List:D: Int:D $n = 1 --&gt; List:D)\n</code></pre><p>Returns the list rotated by $n elements.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_rotate
Slip.sort	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    sort(*@elems      --&gt; Seq:D)\nmulti sub    sort(&amp;by, *@elems --&gt; Seq:D)\nmulti method sort(List:D:      --&gt; Seq:D)\nmulti method sort(List:D: &amp;by  --&gt; Seq:D)\n</code></pre><p>Sorts the list, smallest element first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_sort
Slip.unique	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    unique(*@values, :&amp;as, :&amp;with --&gt; Seq:D)\nmulti method unique(List:D:  :&amp;as, :&amp;with --&gt; Seq:D)\n</code></pre><p>Returns a sequence of unique values from the invocant/argument list, such that only the first occurrence of each duplicated value remains in the result list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_unique
Slip.repeated	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    repeated(*@values, :&amp;as, :&amp;with --&gt; Seq:D)\nmulti method repeated(List:D:  :&amp;as, :&amp;with --&gt; Seq:D)\n</code></pre><p>Returns a sequence of repeated values from the invocant/argument list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_repeated
Slip.squish	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    squish(*@values, :&amp;as --&gt; Seq:D)\nmulti method squish(List:D:  :&amp;as --&gt; Seq:D)\n</code></pre><p>Returns a sequence of values from the invocant/argument list where runs of more than one value are replaced with only the first instance.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_squish
Slip.reduce	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    reduce(&amp;with, *@values)\nmulti method reduce(List:D: &amp;with)\n</code></pre><p>Generates a single "combined" value from a list of arbitrarily many of values, by iteratively applying a function which knows how to combine two values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_reduce
Slip.produce	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    produce(&amp;with, *@values)\nmulti method produce(List:D: &amp;with)\n</code></pre><p>Generates a list of all intermediate "combined" values along with the final result by iteratively applying a function which knows how to combine two values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_produce
Slip.combinations	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    combinations($n, $k                     --&gt; Seq:D)\nmulti method combinations(List:D: Int:D $of          --&gt; Seq:D)\nmulti method combinations(List:D: Range:D $of = 0..* --&gt; Seq:D)\n</code></pre><p>The Int variant returns all $of-combinations of the invocant list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_combinations
Slip.permutations	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    permutations($n      --&gt; Seq:D)\nmulti method permutations(List:D: --&gt; Seq:D)\n</code></pre><p>Returns all possible permutations of a list as a sequence of lists.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_permutations
Slip.rotor	A			Perl 6 Slip							<section class="prog__container"><pre><code>method rotor(*@cycle, Bool() :$partial --&gt; Seq:D)\n</code></pre><p>Returns a sequence of lists, where each sublist is made up of elements of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_rotor
Slip.cross	A			Perl 6 Slip							<section class="prog__container"><pre><code>sub cross(+@e, :&amp;with --&gt; Seq:D)\n</code></pre><p>Computes the cross-product of two or more lists or iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_cross
Slip.zip	A			Perl 6 Slip							<section class="prog__container"><pre><code>sub zip(+@e, :&amp;with --&gt; Seq:D)\n</code></pre><p>Builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_zip
Slip.roundrobin	A			Perl 6 Slip							<section class="prog__container"><pre><code>method roundrobin(List:D: --&gt; Seq)\n</code></pre><p>Builds a &amp;#39;list of lists&amp;#39;, returned as a sequence, from multiple input lists or other iterables.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_sub_roundrobin
Slip.sum	A			Perl 6 Slip							<section class="prog__container"><pre><code>multi sub    sum($list   --&gt; Numeric:D)\nmulti method sum(List:D: --&gt; Numeric:D)\n</code></pre><p>Returns the sum of all elements in the list or 0 if the list is empty.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_routine_sum
Slip.fmt	A			Perl 6 Slip							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39;, $separator = &amp;#39; &amp;#39; --&gt; Str:D)\n</code></pre><p>Returns a string where each element in the list has been formatted according to $format and where each element is separated by $separator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_fmt
Slip.from	A			Perl 6 Slip							<section class="prog__container"><pre><code>&amp;#39;abcdefg&amp;#39; ~~ /(c)(d)/;\nsay $/.list.from;         # 2 \n \n"abc123def" ~~ m:g/&#92;d/;\nsay $/.list.from;         # 3 \n</code></pre><p>Assumes the list contains Match objects and returns the value of .from called on the first element of the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_from
Slip.to	A			Perl 6 Slip							<section class="prog__container"><pre><code>"abc123def" ~~ m:g/&#92;d/;\nsay $/.to; # 6 \n</code></pre><p>Assumes the List contains Match objects, such as the $/ variable being a List, when using :g modifier in regexes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Slip.html#%28List%29_method_to
Slip.of	R	Positional.of										
Slip.iterator	R	Iterable.iterator										
Slip.flat	R	Iterable.flat										
Slip.lazy	R	Iterable.lazy										
Slip.hyper	R	Iterable.hyper										
Slip.race	R	Iterable.race										
Slip.abs	R	Iterable.abs										
Slip.conj	R	Iterable.conj										
Slip.sqrt	R	Iterable.sqrt										
Slip.sign	R	Iterable.sign										
Slip.rand	R	Iterable.rand										
Slip.sin	R	Iterable.sin										
Slip.asin	R	Iterable.asin										
Slip.cos	R	Iterable.cos										
Slip.acos	R	Iterable.acos										
Slip.tan	R	Iterable.tan										
Slip.atan	R	Iterable.atan										
Slip.atan2	R	Iterable.atan2										
Slip.sec	R	Iterable.sec										
Slip.asec	R	Iterable.asec										
Slip.cosec	R	Iterable.cosec										
Slip.acosec	R	Iterable.acosec										
Slip.cotan	R	Iterable.cotan										
Slip.acotan	R	Iterable.acotan										
Slip.sinh	R	Iterable.sinh										
Slip.asinh	R	Iterable.asinh										
Slip.cosh	R	Iterable.cosh										
Slip.acosh	R	Iterable.acosh										
Slip.tanh	R	Iterable.tanh										
Slip.atanh	R	Iterable.atanh										
Slip.sech	R	Iterable.sech										
Slip.asech	R	Iterable.asech										
Slip.cosech	R	Iterable.cosech										
Slip.acosech	R	Iterable.acosech										
Slip.cotanh	R	Iterable.cotanh										
Slip.acotanh	R	Iterable.acotanh										
Slip.cis	R	Iterable.cis										
Slip.log	R	Iterable.log										
Slip.log10	R	Iterable.log10										
Slip.exp	R	Iterable.exp										
Slip.unpolar	R	Iterable.unpolar										
Slip.round	R	Iterable.round										
Slip.floor	R	Iterable.floor										
Slip.ceiling	R	Iterable.ceiling										
Slip.truncate	R	Iterable.truncate										
Slip.ord	R	Iterable.ord										
Slip.chr	R	Iterable.chr										
Slip.chars	R	Iterable.chars										
Slip.codes	R	Iterable.codes										
Slip.flip	R	Iterable.flip										
Slip.trim	R	Iterable.trim										
Slip.trim-leading	R	Iterable.trim-leading										
Slip.trim-trailing	R	Iterable.trim-trailing										
Slip.lc	R	Iterable.lc										
Slip.uc	R	Iterable.uc										
Slip.fc	R	Iterable.fc										
Slip.tc	R	Iterable.tc										
Slip.tclc	R	Iterable.tclc										
Slip.wordcase	R	Iterable.wordcase										
Slip.samecase	R	Iterable.samecase										
Slip.uniprop	R	Iterable.uniprop										
Slip.uniprops	R	Iterable.uniprops										
Slip.uniname	R	Iterable.uniname										
Slip.uninames	R	Iterable.uninames										
Slip.unimatch	R	Iterable.unimatch										
Slip.chop	R	Iterable.chop										
Slip.chomp	R	Iterable.chomp										
Slip.substr	R	Iterable.substr										
Slip.ords	R	Iterable.ords										
Slip.chrs	R	Iterable.chrs										
Slip.split	R	Iterable.split										
Slip.lines	R	Iterable.lines										
Slip.words	R	Iterable.words										
Slip.comb	R	Iterable.comb										
Slip.contains	R	Iterable.contains										
Slip.index	R	Iterable.index										
Slip.rindex	R	Iterable.rindex										
Slip.match	R	Iterable.match										
Slip.fmt	R	Iterable.fmt										
Slip.roots	R	Iterable.roots										
Slip.IO	R	Iterable.IO										
Slip.EVAL	R	Iterable.EVAL										
Slip.EVALFILE	R	Iterable.EVALFILE										
Slip.ACCEPTS	R	Iterable.ACCEPTS										
Slip.any	R	Iterable.any										
Slip.all	R	Iterable.all										
Slip.one	R	Iterable.one										
Slip.none	R	Iterable.none										
Slip.list	R	Iterable.list										
Slip.push	R	Iterable.push										
Slip.reverse	R	Iterable.reverse										
Slip.sort	R	Iterable.sort										
Slip.map	R	Iterable.map										
Slip.deepmap	R	Iterable.deepmap										
Slip.duckmap	R	Iterable.duckmap										
Slip.flat	R	Iterable.flat										
Slip.eager	R	Iterable.eager										
Slip.elems	R	Iterable.elems										
Slip.end	R	Iterable.end										
Slip.pairup	R	Iterable.pairup										
Slip.exit	R	Iterable.exit										
Slip.item	R	Iterable.item										
Slip.defined	R	Iterable.defined										
Slip.isa	R	Iterable.isa										
Slip.does	R	Iterable.does										
Slip.Bool	R	Iterable.Bool										
Slip.Str	R	Iterable.Str										
Slip.gist	R	Iterable.gist										
Slip.perl	R	Iterable.perl										
Slip.item	R	Iterable.item										
Slip.clone	R	Iterable.clone										
Slip.new	R	Iterable.new										
Slip.bless	R	Iterable.bless										
Slip.CREATE	R	Iterable.CREATE										
Slip.print	R	Iterable.print										
Slip.put	R	Iterable.put										
Slip.say	R	Iterable.say										
Slip.ACCEPTS	R	Iterable.ACCEPTS										
Slip.WHICH	R	Iterable.WHICH										
Slip.WHERE	R	Iterable.WHERE										
Slip.WHY	R	Iterable.WHY										
Slip.export	R	Iterable.export										
Slip.return	R	Iterable.return										
Slip.return-rw	R	Iterable.return-rw										
Slip.emit	R	Iterable.emit										
Slip.take	R	Iterable.take										
Slip.take	R	Iterable.take										
Slip.take-rw	R	Iterable.take-rw										
Slip.so	R	Iterable.so										
Slip.not	R	Iterable.not										
Stash.classify-list	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method classify-list(&amp;mapper, *@list, :&amp;as --&gt; Hash:D)\nmulti method classify-list(%mapper, *@list, :&amp;as --&gt; Hash:D)\nmulti method classify-list(@mapper, *@list, :&amp;as --&gt; Hash:D)\n</code></pre><p>Populates a Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Hash%29_method_classify-list
Stash.categorize-list	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method categorize-list(&amp;mapper, *@list, :&amp;as --&gt; Hash:D)\nmulti method categorize-list(%mapper, *@list, :&amp;as --&gt; Hash:D)\nmulti method categorize-list(@mapper, *@list, :&amp;as --&gt; Hash:D)\n</code></pre><p>Populates a Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Hash%29_method_categorize-list
Stash.push	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method push(Hash:D: *@new)\n</code></pre><p>Adds the @new elements to the hash with the same semantics as hash assignment, but with three exceptions:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Hash%29_method_push
Stash.append	A			Perl 6 Stash							<section class="prog__container"><pre><code>method append(+@values)\n</code></pre><p>Append the provided Pairs or even sized list to the Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Hash%29_method_append
Stash.default	A			Perl 6 Stash							<section class="prog__container"><pre><code>method default()\n</code></pre><p>Returns the default value of the invocant, i.e. the value which is returned when a non existing key is used to access an element in the Hash.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Hash%29_method_default
Stash.keyof	A			Perl 6 Stash							<section class="prog__container"><pre><code>method keyof()\n</code></pre><p>Returns the type constraint for the keys of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Hash%29_method_keyof
Stash.of	A			Perl 6 Stash							<section class="prog__container"><pre><code>method of()\n</code></pre><p>Returns the type constraint for the values of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Hash%29_method_of
Stash.new	A			Perl 6 Stash							<section class="prog__container"><pre><code>method new(*@args)\n</code></pre><p>Creates a new Map from a list of alternating keys and values, with the same semantics as described for hash assigning in the Hash documentation, except, for literal pair handling.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_new
Stash.elems	A			Perl 6 Stash							<section class="prog__container"><pre><code>method elems(Map:D: --&gt; Int:D)\n</code></pre><p>Returns the number of pairs stored in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_elems
Stash.ACCEPTS	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method ACCEPTS(Map:D: Positional $topic)\nmulti method ACCEPTS(Map:D: Cool:D     $topic)\nmulti method ACCEPTS(Map:D: Regex      $topic)\nmulti method ACCEPTS(Map:D: Any        $topic)\n</code></pre><p>Used in smart-matching if the right-hand side is an Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_ACCEPTS
Stash.keys	A			Perl 6 Stash							<section class="prog__container"><pre><code>method keys(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of all keys in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_keys
Stash.values	A			Perl 6 Stash							<section class="prog__container"><pre><code>method values(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of all values in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_values
Stash.pairs	A			Perl 6 Stash							<section class="prog__container"><pre><code>method pairs(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of all pairs in the Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_pairs
Stash.antipairs	A			Perl 6 Stash							<section class="prog__container"><pre><code>method antipairs(Map:D: --&gt; Seq:D)\n</code></pre><p>Returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged, i.e. the opposite of method pairs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_antipairs
Stash.invert	A			Perl 6 Stash							<section class="prog__container"><pre><code>method invert(Map:D: --&gt; Seq:D)\n</code></pre><p>Returns all keys and their respective values as a Seq of Pairs where the keys and values have been exchanged.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_invert
Stash.kv	A			Perl 6 Stash							<section class="prog__container"><pre><code>method kv(Map:D: --&gt; List:D)\n</code></pre><p>Returns a list of keys and values interleaved.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_kv
Stash.Int	A			Perl 6 Stash							<section class="prog__container"><pre><code>method Int(Map:D: --&gt; Int:D)\n</code></pre><p>Returns the number of pairs stored in the Map (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_Int
Stash.Numeric	A			Perl 6 Stash							<section class="prog__container"><pre><code>method Numeric(Map:D: --&gt; Int:D)\n</code></pre><p>Returns the number of pairs stored in the Map (same as .elems).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_Numeric
Stash.Bool	A			Perl 6 Stash							<section class="prog__container"><pre><code>method Bool(Map:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains at least one key/value pair.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_Bool
Stash.Capture	A			Perl 6 Stash							<section class="prog__container"><pre><code>method Capture(Map:D: --&gt; Capture:D)\n</code></pre><p>Returns a Capture where each key, if any, has been converted to a named argument with the same value as it had in the original Map.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Map%29_method_Capture
Stash.iterator	A			Perl 6 Stash							<section class="prog__container"><pre><code>method iterator(--&gt; Iterator:D)\n</code></pre><p>Method stub that ensures all classes doing the Iterable role have a method iterator.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Iterable%29_method_iterator
Stash.flat	A			Perl 6 Stash							<section class="prog__container"><pre><code>method flat(--&gt; Iterable)\n</code></pre><p>Returns another Iterable that flattens out all iterables that the first one returns.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Iterable%29_method_flat
Stash.lazy	A			Perl 6 Stash							<section class="prog__container"><pre><code>method lazy(--&gt; Iterable)\n</code></pre><p>Returns a lazy iterable wrapping the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Iterable%29_method_lazy
Stash.hyper	A			Perl 6 Stash							<section class="prog__container"><pre><code>method hyper(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Iterable%29_method_hyper
Stash.race	A			Perl 6 Stash							<section class="prog__container"><pre><code>method race(Int(Cool) :$batch = 64, Int(Cool) :$degree = 4 --&gt; Iterable)\n</code></pre><p>Returns another Iterable that is potentially iterated in parallel, with a given batch size and degree of parallelism (number of parallel workers).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Iterable%29_method_race
Stash.abs	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_abs
Stash.conj	A			Perl 6 Stash							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_conj
Stash.sqrt	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_sqrt
Stash.sign	A			Perl 6 Stash							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_sign
Stash.rand	A			Perl 6 Stash							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_rand
Stash.sin	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_sin
Stash.asin	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_asin
Stash.cos	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_cos
Stash.acos	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_acos
Stash.tan	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_tan
Stash.atan	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_atan
Stash.atan2	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_atan2
Stash.sec	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_sec
Stash.asec	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_asec
Stash.cosec	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_cosec
Stash.acosec	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_acosec
Stash.cotan	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_cotan
Stash.acotan	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_acotan
Stash.sinh	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_sinh
Stash.asinh	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_asinh
Stash.cosh	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_cosh
Stash.acosh	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_acosh
Stash.tanh	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_tanh
Stash.atanh	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_atanh
Stash.sech	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_sech
Stash.asech	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_asech
Stash.cosech	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_cosech
Stash.acosech	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_acosech
Stash.cotanh	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_cotanh
Stash.acotanh	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_acotanh
Stash.cis	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_cis
Stash.log	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_log
Stash.log10	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_log10
Stash.exp	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_exp
Stash.unpolar	A			Perl 6 Stash							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_unpolar
Stash.round	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_round
Stash.floor	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_floor
Stash.ceiling	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_ceiling
Stash.truncate	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_truncate
Stash.ord	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_ord
Stash.chr	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_chr
Stash.chars	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_chars
Stash.codes	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_codes
Stash.flip	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_flip
Stash.trim	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_trim
Stash.trim-leading	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_trim-leading
Stash.trim-trailing	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_trim-trailing
Stash.lc	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_lc
Stash.uc	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_uc
Stash.fc	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_fc
Stash.tc	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_tc
Stash.tclc	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_tclc
Stash.wordcase	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_wordcase
Stash.samecase	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_samecase
Stash.uniprop	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_uniprop
Stash.uniprops	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_uniprops
Stash.uniname	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_uniname
Stash.uninames	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_uninames
Stash.unimatch	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_unimatch
Stash.chop	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_chop
Stash.chomp	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_chomp
Stash.substr	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_substr
Stash.ords	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_ords
Stash.chrs	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_chrs
Stash.split	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_split
Stash.lines	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_lines
Stash.words	A			Perl 6 Stash							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_words
Stash.comb	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_comb
Stash.contains	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_contains
Stash.index	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_index
Stash.rindex	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_rindex
Stash.match	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_match
Stash.fmt	A			Perl 6 Stash							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_fmt
Stash.roots	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_roots
Stash.IO	A			Perl 6 Stash							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_method_IO
Stash.EVAL	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_EVAL
Stash.EVALFILE	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Cool%29_routine_EVALFILE
Stash.ACCEPTS	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_ACCEPTS
Stash.any	A			Perl 6 Stash							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_any
Stash.all	A			Perl 6 Stash							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_all
Stash.one	A			Perl 6 Stash							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_one
Stash.none	A			Perl 6 Stash							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_none
Stash.list	A			Perl 6 Stash							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_list
Stash.push	A			Perl 6 Stash							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_push
Stash.reverse	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_routine_reverse
Stash.sort	A			Perl 6 Stash							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_sort
Stash.map	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_map
Stash.deepmap	A			Perl 6 Stash							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_deepmap
Stash.duckmap	A			Perl 6 Stash							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_duckmap
Stash.flat	A			Perl 6 Stash							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_flat
Stash.eager	A			Perl 6 Stash							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_eager
Stash.elems	A			Perl 6 Stash							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_elems
Stash.end	A			Perl 6 Stash							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_end
Stash.pairup	A			Perl 6 Stash							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_method_pairup
Stash.exit	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_sub_exit
Stash.item	A			Perl 6 Stash							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Any%29_sub_item
Stash.defined	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_routine_defined
Stash.isa	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_routine_isa
Stash.does	A			Perl 6 Stash							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_routine_does
Stash.Bool	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_routine_Bool
Stash.Str	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_Str
Stash.gist	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_routine_gist
Stash.perl	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_routine_perl
Stash.item	A			Perl 6 Stash							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_item
Stash.clone	A			Perl 6 Stash							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_clone
Stash.new	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_new
Stash.bless	A			Perl 6 Stash							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_bless
Stash.CREATE	A			Perl 6 Stash							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_CREATE
Stash.print	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_print
Stash.put	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_put
Stash.say	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_say
Stash.ACCEPTS	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_ACCEPTS
Stash.WHICH	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_WHICH
Stash.WHERE	A			Perl 6 Stash							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_WHERE
Stash.WHY	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_WHY
Stash.export	A			Perl 6 Stash							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_trait_is_export
Stash.return	A			Perl 6 Stash							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_return
Stash.return-rw	A			Perl 6 Stash							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_return-rw
Stash.emit	A			Perl 6 Stash							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_emit
Stash.take	A			Perl 6 Stash							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_take
Stash.take	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_routine_take
Stash.take-rw	A			Perl 6 Stash							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_routine_take-rw
Stash.so	A			Perl 6 Stash							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_so
Stash.not	A			Perl 6 Stash							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stash.html#%28Mu%29_method_not
Str.chop	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    chop(Str:D --&gt; Str:D)\nmulti method chop(Str:D: $chars = 1 --&gt; Str:D)\n</code></pre><p>Returns the string with $chars characters removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_chop
Str.chomp	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    chomp(Str:D  --&gt; Str:D)\nmulti method chomp(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string with a logical newline (any codepoint that has the NEWLINE property) removed from the end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_chomp
Str.lc	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    lc(Str:D  --&gt; Str:D)\nmulti method lc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns a lower-case version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_lc
Str.uc	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    uc(Str:D  --&gt; Str:D)\nmulti method uc(Str:D: --&gt; Str:D)\n</code></pre><p>Returns an uppercase version of the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_uc
Str.fc	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    fc(Str:D  --&gt; Str:D)\nmulti method fc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "fold case" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_fc
Str.tc	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    tc(Str:D  --&gt; Str:D)\nmulti method tc(Str:D: --&gt; Str:D)\n</code></pre><p>Does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_tc
Str.tclc	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    tclc(Str:D  --&gt; Str:D)\nmulti method tclc(Str:D: --&gt; Str:D)\n</code></pre><p>Turns the first character to title case, and all other characters to lower case&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_tclc
Str.wordcase	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    wordcase(Cool $x  --&gt; Str)\nmulti sub    wordcase(Str:D $x --&gt; Str)\nmulti method wordcase(Str:D: :&amp;filter = &amp;tclc, Mu :$where = True --&gt; Str)\n</code></pre><p>Returns a string in which &amp;filter has been applied to all the words that match $where.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_wordcase
Str.unival	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method unival(Str:D --&gt; Numeric)\n</code></pre><p>Returns the numeric value that the first codepoint in the invocant represents, or NaN if it&amp;#39;s not numeric.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_unival
Str.univals	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method univals(Str:D --&gt; List)\n</code></pre><p>Returns a list of numeric values represented by each codepoint in the invocant string, and NaN for non-numeric characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_univals
Str.chars	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    chars(Cool  $x --&gt; Int:D)\nmulti sub    chars(Str:D $x --&gt; Int:D)\nmulti sub    chars(str   $x --&gt; int)\nmulti method chars(Str:D:   --&gt; Int:D)\n</code></pre><p>Returns the number of characters in the string in graphemes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_chars
Str.encode	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method encode(Str:D: $encoding, $nf --&gt; Blob)\n</code></pre><p>Returns a Blob which represents the original string in the given encoding and normal form.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_encode
Str.index	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    index(Cool $s, Str:D $needle, Cool $startpos = 0 --&gt; Int)\nmulti method index(Cool $needle, Cool $startpos = 0 --&gt; Int)\n</code></pre><p>Searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_index
Str.rindex	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    rindex(Str:D $haystack, Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\nmulti method rindex(Str:D $haystack: Str:D $needle, Int $startpos = $haystack.chars --&gt; Int)\n</code></pre><p>Returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_rindex
Str.match	A			Perl 6 Str							<section class="prog__container"><pre><code>method match($pat, :continue(:$c), :pos(:$p), :global(:$g), :overlap(:$ov), :exhaustive(:$ex), :st(:$nd), :rd(:$th), :$nth, :$x --&gt; Match)\n</code></pre><p>Performs a match of the string against $pat and returns a Match object if there is a successful match, and (Any) otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_match
Str.parse-base	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    parse-base(Str:D $num, Int:D $radix --&gt; Numeric)\nmulti method parse-base(Str:D $num: Int:D $radix --&gt; Numeric)\n</code></pre><p>Performs the reverse of base by converting a string with a base-$radix number to its base-10 Numeric equivalent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_parse-base
Str.split	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(Regex:D $delimiter, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti sub    split(List:D $delimiters, Str:D $input, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D:   Str:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: Regex:D $delimiter, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\nmulti method split(Str:D: List:D $delimiters, $limit = Inf,\n  :$skip-empty, :$v, :$k, :$kv, :$p --&gt; Positional)\n</code></pre><p>Splits a string up into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_split
Str.comb	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    comb(Str:D   $matcher, Str:D $input, $limit = Inf)\nmulti sub    comb(Regex:D $matcher, Str:D $input, $limit = Inf, Bool :$match)\nmulti sub    comb(Int:D $size, Str:D $input, $limit = Inf)\nmulti method comb(Str:D $input:)\nmulti method comb(Str:D $input: Str:D   $matcher, $limit = Inf)\nmulti method comb(Str:D $input: Regex:D $matcher, $limit = Inf, Bool :$match)\nmulti method comb(Str:D $input: Int:D $size, $limit = Inf)\n</code></pre><p>Searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_comb
Str.lines	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    lines(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method lines(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of lines (without trailing newline characters), i.e. the same as a call to $input.comb( / ^^ &#92;N* /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_lines
Str.words	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    words(Str:D $input, $limit = Inf --&gt; Positional)\nmulti method words(Str:D $input: $limit = Inf --&gt; Positional)\n</code></pre><p>Returns a list of non-whitespace bits, i.e. the same as a call to $input.comb( / &#92;S+ /, $limit ) would.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_words
Str.flip	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    flip(Str:D  --&gt; Str:D)\nmulti method flip(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string reversed character by character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_flip
Str.sprintf	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub sprintf( Str:D $format, *@args --&gt; Str:D)\n</code></pre><p>This function is mostly identical to the C library sprintf and printf functions.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#sub_sprintf
Str.starts-with	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method starts-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or starts with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_starts-with
Str.ends-with	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method ends-with(Str:D: Str(Cool) $needle --&gt; True:D)\n</code></pre><p>Returns True if the invocant is identical to or ends with $needle.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_ends-with
Str.subst	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method subst(Str:D: $matcher, $replacement, *%opts)\n</code></pre><p>Returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_subst
Str.subst-mutate	A			Perl 6 Str							<section class="prog__container"><pre><code>my $some-string = "Some foo";\nmy $match = $some-string.subst-mutate(/foo/, "string");\nsay $some-string;  #-&gt; Some string \nsay $match;        #-&gt; ï½¢fooï½£ \n$some-string.subst-mutate(/&lt;[oe]&gt;/, &amp;#39;&amp;#39;, :g); # remove every o and e, notice the :g named argument from .subst \n</code></pre><p>Where subst returns the modified string and leaves the original unchanged, it is possible to mutate the original string by using subst-mutate.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_subst-mutate
Str.substr	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    substr(Str:D $s, Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti sub    substr(Str:D $s, Range $from-to --&gt; Str:D)\nmulti method substr(Str:D $s: Int:D $from, Int:D $chars = $s.chars - $from --&gt; Str:D)\nmulti method substr(Str:D $s: Range $from-to --&gt; Str:D)\n</code></pre><p>Returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_substr
Str.substr-eq	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method substr-eq(Str:D:  Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\nmulti method substr-eq(Cool:D: Str(Cool) $test-string, Int(Cool) $from --&gt; Bool)\n</code></pre><p>Returns True if the $test-string exactly matches the String object, starting from the given initial index $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_substr-eq
Str.substr-rw	A			Perl 6 Str							<section class="prog__container"><pre><code>method substr-rw($from, $length?)\n</code></pre><p>A version of substr that returns a Proxy functioning as a writable reference to a part of a string variable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_substr-rw
Str.samemark	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub samemark(Str:D $string, Str:D $pattern --&gt; Str:D)\nmethod    samemark(Str:D: Str:D $pattern --&gt; Str:D)\n</code></pre><p>Returns a copy of $string with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_samemark
Str.succ	A			Perl 6 Str							<section class="prog__container"><pre><code>method succ(Str:D --&gt; Str:D)\n</code></pre><p>Returns the string incremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_succ
Str.pred	A			Perl 6 Str							<section class="prog__container"><pre><code>method pred(Str:D: --&gt; Str:D)\n</code></pre><p>Returns the string decremented by one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_pred
Str.ord	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    ord(Str:D  --&gt; Int:D)\nmulti method ord(Str:D: --&gt; Int:D)\n</code></pre><p>Returns the codepoint number of the base characters of the first grapheme in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#routine_ord
Str.ords	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method ords(Str:D: --&gt; Positional)\n</code></pre><p>Returns a list of Unicode codepoint numbers that describe the codepoints making up the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_ords
Str.trans	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method trans(Str:D: Pair:D &#92;what, *%n --&gt; Str)\nmulti method trans(Str:D: *@changes, :complement(:$c), :squash(:$s), :delete(:$d) --&gt; Str)\n</code></pre><p>Replaces one or many characters with one or many characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_trans
Str.indent	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method indent(Int $steps where { $_ == 0 } )\nmulti method indent(Int $steps where { $_ &gt; 0  } )\nmulti method indent($steps where { .isa(Whatever) || .isa(Int) &amp;&amp; $_ &lt; 0 } )\n</code></pre><p>Indents each line of the string by $steps.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_indent
Str.trim	A			Perl 6 Str							<section class="prog__container"><pre><code>method trim(Str:D: --&gt; Str)\n</code></pre><p>Remove leading and trailing whitespace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_trim
Str.trim-trailing	A			Perl 6 Str							<section class="prog__container"><pre><code>method trim-trailing(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the end of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_trim-trailing
Str.trim-leading	A			Perl 6 Str							<section class="prog__container"><pre><code>method trim-leading(Str:D: --&gt; Str)\n</code></pre><p>Remove the whitespace characters from the beginning of a string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_trim-leading
Str.NFC	A			Perl 6 Str							<section class="prog__container"><pre><code>method NFC(Str:D: --&gt; NFC:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form C / Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_NFC
Str.NFD	A			Perl 6 Str							<section class="prog__container"><pre><code>method NFD(Str:D: --&gt; NFD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form D / Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_NFD
Str.NFKC	A			Perl 6 Str							<section class="prog__container"><pre><code>method NFKC(Str:D: --&gt; NFKC:D)\n</code></pre><p>Returns a codepoint string in NFKC format (Unicode Normalization Form KC / Compatibility Composed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_NFKC
Str.NFKD	A			Perl 6 Str							<section class="prog__container"><pre><code>method NFKD(Str:D: --&gt; NFKD:D)\n</code></pre><p>Returns a codepoint string in NFC format (Unicode Normalization Form KD / Compatibility Decomposed).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_NFKD
Str.ACCEPTS	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method ACCEPTS(Str:D: $other)\n</code></pre><p>Returns True if the string is the same as $other.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#method_ACCEPTS
Str.val	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub val(Str:D $MAYBEVAL, :$val-or-fail)\n</code></pre><p>Given a Str that may be parsable as a numeric value, it will attempt to construct the appropriate allomorph, returning one of IntStr, NumStr, RatStr or ComplexStr or a plain Str if a numeric value cannot be parsed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#sub_val
Str.abs	A			Perl 6 Str							<section class="prog__container"><pre><code>sub abs(Numeric() $x)\nmethod abs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric and returns the absolute value (that is, a non-negative number).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_abs
Str.conj	A			Perl 6 Str							<section class="prog__container"><pre><code>method conj()\n</code></pre><p>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_conj
Str.sqrt	A			Perl 6 Str							<section class="prog__container"><pre><code>sub sqrt(Numeric(Cool) $x)\nmethod sqrt()\n</code></pre><p>Coerces the invocant to Numeric (or in the sub form, the argument) and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_sqrt
Str.sign	A			Perl 6 Str							<section class="prog__container"><pre><code>method sign()\n</code></pre><p>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_sign
Str.rand	A			Perl 6 Str							<section class="prog__container"><pre><code>method rand()\n</code></pre><p>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_rand
Str.sin	A			Perl 6 Str							<section class="prog__container"><pre><code>sub sin(Numeric(Cool))\nmethod sin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, interprets it as radians, returns its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_sin
Str.asin	A			Perl 6 Str							<section class="prog__container"><pre><code>sub asin(Numeric(Cool))\nmethod asin()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument) to Numeric, and returns its arc-sine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_asin
Str.cos	A			Perl 6 Str							<section class="prog__container"><pre><code>sub cos(Numeric(Cool))\nmethod cos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_cos
Str.acos	A			Perl 6 Str							<section class="prog__container"><pre><code>sub acos(Numeric(Cool))\nmethod acos()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-cosine in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_acos
Str.tan	A			Perl 6 Str							<section class="prog__container"><pre><code>sub tan(Numeric(Cool))\nmethod tan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, interprets it as radians, returns its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_tan
Str.atan	A			Perl 6 Str							<section class="prog__container"><pre><code>sub atan(Numeric(Cool))\nmethod atan()\n</code></pre><p>Coerces the invocant (or in sub form, the argument) to Numeric, and returns its arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_atan
Str.atan2	A			Perl 6 Str							<section class="prog__container"><pre><code>sub atan2(Numeric() $x, Numeric() $y = 1e0)\nmethod atan2($y = 1e0)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns their two-argument arc-tangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_atan2
Str.sec	A			Perl 6 Str							<section class="prog__container"><pre><code>sub sec(Numeric(Cool))\nmethod sec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its secant, that is, the reciprocal of its cosine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_sec
Str.asec	A			Perl 6 Str							<section class="prog__container"><pre><code>sub asec(Numeric(Cool))\nmethod asec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-secant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_asec
Str.cosec	A			Perl 6 Str							<section class="prog__container"><pre><code>sub cosec(Numeric(Cool))\nmethod cosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cosecant, that is, the reciprocal of its sine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_cosec
Str.acosec	A			Perl 6 Str							<section class="prog__container"><pre><code>sub acosec(Numeric(Cool))\nmethod acosec()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cosecant in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_acosec
Str.cotan	A			Perl 6 Str							<section class="prog__container"><pre><code>sub cotan(Numeric(Cool))\nmethod cotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians, returns its cotangent, that is, the reciprocal of its tangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_cotan
Str.acotan	A			Perl 6 Str							<section class="prog__container"><pre><code>sub acotan(Numeric(Cool))\nmethod acotan()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its arc-cotangent in radians.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_acotan
Str.sinh	A			Perl 6 Str							<section class="prog__container"><pre><code>sub sinh(Numeric(Cool))\nmethod sinh()\n</code></pre><p>Coerces the invocant (or in method form, its argument) to Numeric, and returns its Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_sinh
Str.asinh	A			Perl 6 Str							<section class="prog__container"><pre><code>sub asinh(Numeric(Cool))\nmethod asinh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Sine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_asinh
Str.cosh	A			Perl 6 Str							<section class="prog__container"><pre><code>sub cosh(Numeric(Cool))\nmethod cosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_cosh
Str.acosh	A			Perl 6 Str							<section class="prog__container"><pre><code>sub acosh(Numeric(Cool))\nmethod acosh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse Cosine hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_acosh
Str.tanh	A			Perl 6 Str							<section class="prog__container"><pre><code>sub tanh(Numeric(Cool))\nmethod tanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, interprets it as radians and returns its Tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_tanh
Str.atanh	A			Perl 6 Str							<section class="prog__container"><pre><code>sub atanh(Numeric(Cool))\nmethod atanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse tangent hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_atanh
Str.sech	A			Perl 6 Str							<section class="prog__container"><pre><code>sub sech(Numeric(Cool))\nmethod sech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Secant hyperbolicus.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_sech
Str.asech	A			Perl 6 Str							<section class="prog__container"><pre><code>sub asech(Numeric(Cool))\nmethod asech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic secant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_asech
Str.cosech	A			Perl 6 Str							<section class="prog__container"><pre><code>sub cosech(Numeric(Cool))\nmethod cosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_cosech
Str.acosech	A			Perl 6 Str							<section class="prog__container"><pre><code>sub acosech(Numeric(Cool))\nmethod acosech()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cosecant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_acosech
Str.cotanh	A			Perl 6 Str							<section class="prog__container"><pre><code>sub cotanh(Numeric(Cool))\nmethod cotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_cotanh
Str.acotanh	A			Perl 6 Str							<section class="prog__container"><pre><code>sub acotanh(Numeric(Cool))\nmethod acotanh()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns its Inverse hyperbolic cotangent.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_acotanh
Str.cis	A			Perl 6 Str							<section class="prog__container"><pre><code>sub cis(Numeric(Cool))\nmethod cis()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and returns cos(argument) + i*sin(argument).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_cis
Str.log	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub log(Numeric(Cool) $number, Numeric(Cool) $base?)\nmulti method log(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns its Logarithm to base $base, or to base e (Euler&amp;#39;s Number) if no base was supplied (Natural logarithm).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_log
Str.log10	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub log10(Cool(Numeric))\nmulti method log10()\n</code></pre><p>Coerces the invocant (or in the sub form, the invocant) to Numeric, and returns its Logarithm to base 10, that is, a number that approximately produces the original number when raised to the power of 10.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_log10
Str.exp	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub exp(Cool:D $pow, Cool:D $base?)\nmulti method exp(Cool:D: Cool:D $base?)\n</code></pre><p>Coerces the arguments (including the invocant in the method from) to Numeric, and returns $base raised to the power of the first number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_exp
Str.unpolar	A			Perl 6 Str							<section class="prog__container"><pre><code>method unpolar(Numeric(Cool))\n</code></pre><p>Coerces the arguments (including the invocant in the method form) to Numeric, and returns a complex number from the given polar coordinates.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_unpolar
Str.round	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub round(Numeric(Cool))\nmulti method round(Cool:D: $unit = 1)\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it to the unit of $unit.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_round
Str.floor	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub floor(Numeric(Cool))\nmulti method floor\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it downwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_floor
Str.ceiling	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub ceiling(Numeric(Cool))\nmulti method ceiling\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it upwards to the nearest integer.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_ceiling
Str.truncate	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub truncate(Numeric(Cool))\nmulti method truncate()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Numeric, and rounds it towards zero.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_truncate
Str.ord	A			Perl 6 Str							<section class="prog__container"><pre><code>sub ord(Str(Cool))\nmethod ord()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the Unicode code point number of the first code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_ord
Str.chr	A			Perl 6 Str							<section class="prog__container"><pre><code>sub chr(Int(Cool))\nmethod chr()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Int, interprets it as a Unicode code points, and returns a string made of that code point.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_chr
Str.chars	A			Perl 6 Str							<section class="prog__container"><pre><code>sub chars(Str(Cool))\nmethod chars()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of characters in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_chars
Str.codes	A			Perl 6 Str							<section class="prog__container"><pre><code>sub codes(Str(Cool))\nmethod codes()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the number of Unicode code points.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_codes
Str.flip	A			Perl 6 Str							<section class="prog__container"><pre><code>sub flip(Str(Cool))\nmethod flip()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns a reversed version.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_flip
Str.trim	A			Perl 6 Str							<section class="prog__container"><pre><code>sub trim(Str(Cool))\nmethod trim()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with both leading and trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_trim
Str.trim-leading	A			Perl 6 Str							<section class="prog__container"><pre><code>sub trim-leading(Str(Cool))\nmethod trim-leading()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with leading whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_trim-leading
Str.trim-trailing	A			Perl 6 Str							<section class="prog__container"><pre><code>sub trim-trailing(Str(Cool))\nmethod trim-trailing()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the string with trailing whitespace stripped.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_trim-trailing
Str.lc	A			Perl 6 Str							<section class="prog__container"><pre><code>sub lc(Str(Cool))\nmethod lc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to lower case.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_lc
Str.uc	A			Perl 6 Str							<section class="prog__container"><pre><code>sub uc(Str(Cool))\nmethod uc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it case-folded to upper case (capital letters).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_uc
Str.fc	A			Perl 6 Str							<section class="prog__container"><pre><code>sub fc(Str(Cool))\nmethod fc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns the result a Unicode "case fold" operation suitable for doing caseless string comparisons.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_fc
Str.tc	A			Perl 6 Str							<section class="prog__container"><pre><code>sub tc(Str(Cool))\nmethod tc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_tc
Str.tclc	A			Perl 6 Str							<section class="prog__container"><pre><code>sub tclc(Str(Cool))\nmethod tclc()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_tclc
Str.wordcase	A			Perl 6 Str							<section class="prog__container"><pre><code>sub wordcase(Str(Cool) $input, :&amp;filter = &amp;tclc, Mu :$where = True)\nmethod wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and filters each word that smart-matches against $where through the &amp;filter.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_wordcase
Str.samecase	A			Perl 6 Str							<section class="prog__container"><pre><code>sub samecase(Cool $string, Cool $pattern)\nmethod samecase(Cool:D: Cool $pattern)\n</code></pre><p>Coerces the invocant (or in sub form, the first argument) to Str, and returns a copy of $string with case information for each individual character changed according to $pattern.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_samecase
Str.uniprop	A			Perl 6 Str							<section class="prog__container"><pre><code>sub uniprop(Str(Cool), |c)\nsub uniprop(Int:D $code, Stringy:D $propname)\nsub uniprop(Str, $propname, Stringy:D $propname)\nmethod uniprop(|c) { uniprop(self, |c)\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_uniprop
Str.uniprops	A			Perl 6 Str							<section class="prog__container"><pre><code>sub uniprops(Str:D $str, Stringy:D $propname = "General_Category")\n</code></pre><p>Interprets the invocant as a Str, and returns the unicode property for each character as a Seq.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_uniprops
Str.uniname	A			Perl 6 Str							<section class="prog__container"><pre><code>sub uniname(Str(Cool) --&gt; Str)\nmethod uniname(--&gt; Str)\n</code></pre><p>Interprets the invocant / first argument as a Str, and returns the Unicode codepoint name of the first codepoint of the first character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_uniname
Str.uninames	A			Perl 6 Str							<section class="prog__container"><pre><code>sub uninames(Str:D)\nmethod uninames()\n</code></pre><p>Returns of a Seq of Unicode names for the all the codepoints in the Str provided.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_uninames
Str.unimatch	A			Perl 6 Str							<section class="prog__container"><pre><code>sub unimatch(Str:D $str, |c)\nunimatch(Int:D $code, Stringy:D $pvalname, Stringy:D $propname = $pvalname)\n</code></pre><p>Checks if the given integer codepoint or the first letter of the string given have a unicode property equal to the value you give.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_unimatch
Str.chop	A			Perl 6 Str							<section class="prog__container"><pre><code>sub chop(Str(Cool))\nmethod chop()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_chop
Str.chomp	A			Perl 6 Str							<section class="prog__container"><pre><code>sub chomp(Str(Cool))\nmethod chomp()\n</code></pre><p>Coerces the invocant (or in sub form, its argument) to Str, and returns it with the last character removed, if it is a logical newline.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_chomp
Str.substr	A			Perl 6 Str							<section class="prog__container"><pre><code>sub substr(Str(Cool) $str, $from, $chars?)\nmethod substr($from, $chars?)\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_substr
Str.ords	A			Perl 6 Str							<section class="prog__container"><pre><code>sub ords(Str(Cool) $str)\nmethod ords()\n</code></pre><p>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_ords
Str.chrs	A			Perl 6 Str							<section class="prog__container"><pre><code>sub chrs(*@codepoints --&gt; Str:D)\nmethod chrs()\n</code></pre><p>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_chrs
Str.split	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti sub    split(@delimiters, Str(Cool) $input, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(  Str:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\nmulti method split(@delimiters, $limit = Inf, :$k, :$v, :$kv, :$p, :$skip-empty)\n</code></pre><p>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_split
Str.lines	A			Perl 6 Str							<section class="prog__container"><pre><code>sub lines(Str(Cool))\nmethod lines()\n</code></pre><p>Coerces the invocant (and in sub form, the argument) to Str, decomposes it into lines (with the newline characters stripped), and returns the list of lines.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_lines
Str.words	A			Perl 6 Str							<section class="prog__container"><pre><code>method words(Int() $limit)\n</code></pre><p>Coerces the invocant to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_words
Str.comb	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub comb(Regex $matcher, Str(Cool) $input, $limit = * --&gt; List:D)\nmulti method comb(Regex $matcher, $limit = * --&gt; List:D)\n</code></pre><p>Returns all (or if supplied, at most $limit) matches of the invocant (method form) or the second argument (sub form) against the Regex as a list of strings.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_comb
Str.contains	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method contains(Cool:D: Str(Cool) $needle, Cool $start? --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant contains the $needle at any position within the string.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_contains
Str.index	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    index(Str(Cool) $s, Str:D $needle, Int(Cool) $startpos = 0 --&gt; Int)\nmulti method index(Str(Cool) $needle, Int(Cool) $startpos = 0 --&gt; Int)\n</code></pre><p>Coerces the first two arguments (in method form, also counting the invocant) to Str, and searches for $needle in the string starting from $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_index
Str.rindex	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    rindex(Str(Cool) $haystack, Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\nmulti method rindex(Str(Cool) $haystack: Str(Cool) $needle, Int(Cool) $startpos = $haystack.chars)\n</code></pre><p>Coerces the first two arguments (including the invocant in method form) to Str and $startpos to Int, and returns the last position of $needle in $haystack not after $startpos.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_rindex
Str.match	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method match(Cool:D: $target, *%adverbs)\n</code></pre><p>Coerces the invocant to Str and calls the method match on it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_match
Str.fmt	A			Perl 6 Str							<section class="prog__container"><pre><code>method fmt($format = &amp;#39;%s&amp;#39; --&gt; Str:D)\n</code></pre><p>Uses $format to return a formatted representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_fmt
Str.roots	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub roots(Numeric(Cool) $x, Int(Cool) $n)\nmulti method roots(Int(Cool) $n)\n</code></pre><p>Coerces the first argument (and in method form, the invocant) to Numeric and the second ($n) to Int, and produces a list of $n Complex $n-roots, which means numbers that, raised to the $nth power, approximately produce the original number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_roots
Str.IO	A			Perl 6 Str							<section class="prog__container"><pre><code>method IO(--&gt; IO::Path:D)\n</code></pre><p>Coerces the invocant to IO::Path.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_method_IO
Str.EVAL	A			Perl 6 Str							<section class="prog__container"><pre><code>sub EVAL(Cool $code, :$lang = { ... })\n</code></pre><p>Coerces the invocant to Str.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_EVAL
Str.EVALFILE	A			Perl 6 Str							<section class="prog__container"><pre><code>sub EVALFILE(Cool $filename, :$lang = { ... })\n</code></pre><p>Slurps the specified file and evaluates it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Cool%29_routine_EVALFILE
Str.ACCEPTS	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_ACCEPTS
Str.any	A			Perl 6 Str							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_any
Str.all	A			Perl 6 Str							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_all
Str.one	A			Perl 6 Str							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_one
Str.none	A			Perl 6 Str							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_none
Str.list	A			Perl 6 Str							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_list
Str.push	A			Perl 6 Str							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_push
Str.reverse	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_routine_reverse
Str.sort	A			Perl 6 Str							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_sort
Str.map	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_map
Str.deepmap	A			Perl 6 Str							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_deepmap
Str.duckmap	A			Perl 6 Str							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_duckmap
Str.flat	A			Perl 6 Str							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_flat
Str.eager	A			Perl 6 Str							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_eager
Str.elems	A			Perl 6 Str							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_elems
Str.end	A			Perl 6 Str							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_end
Str.pairup	A			Perl 6 Str							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_method_pairup
Str.exit	A			Perl 6 Str							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_sub_exit
Str.item	A			Perl 6 Str							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Any%29_sub_item
Str.defined	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_routine_defined
Str.isa	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_routine_isa
Str.does	A			Perl 6 Str							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_routine_does
Str.Bool	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_routine_Bool
Str.Str	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_Str
Str.gist	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_routine_gist
Str.perl	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_routine_perl
Str.item	A			Perl 6 Str							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_item
Str.clone	A			Perl 6 Str							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_clone
Str.new	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_new
Str.bless	A			Perl 6 Str							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_bless
Str.CREATE	A			Perl 6 Str							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_CREATE
Str.print	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_print
Str.put	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_put
Str.say	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_say
Str.ACCEPTS	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_ACCEPTS
Str.WHICH	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_WHICH
Str.WHERE	A			Perl 6 Str							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_WHERE
Str.WHY	A			Perl 6 Str							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_WHY
Str.export	A			Perl 6 Str							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_trait_is_export
Str.return	A			Perl 6 Str							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_return
Str.return-rw	A			Perl 6 Str							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_return-rw
Str.emit	A			Perl 6 Str							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_emit
Str.take	A			Perl 6 Str							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_take
Str.take	A			Perl 6 Str							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_routine_take
Str.take-rw	A			Perl 6 Str							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_routine_take-rw
Str.so	A			Perl 6 Str							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_so
Str.not	A			Perl 6 Str							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Str.html#%28Mu%29_method_not
Stringy.Stringy	A			Perl 6 Stringy							<section class="prog__container"><pre><code>role Stringy { ... }\n</code></pre><p>Common role for string types (such as Str).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Stringy.html#Stringy
Sub.class)	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi sub f() is default { say "Hello there" }\nmulti sub f() { say "Hello friend" }\nf();   #"Hello there" is printed. \n</code></pre><p>There is a special trait for Subs called is default.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#trait_is_default_%28Sub_class%29
class)	R	Sub.class)										
Sub.name	A			Perl 6 Sub							<section class="prog__container"><pre><code>method name(Routine:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_method_name
Sub.package	A			Perl 6 Sub							<section class="prog__container"><pre><code>method package(Routine:D:)\n</code></pre><p>Returns the package in which the routine is defined.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_method_package
Sub.multi	A			Perl 6 Sub							<section class="prog__container"><pre><code>method multi(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a multi sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_method_multi
Sub.candidates	A			Perl 6 Sub							<section class="prog__container"><pre><code>method candidates(Routine:D: --&gt; Positional:D)\n</code></pre><p>Returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_method_candidates
Sub.cando	A			Perl 6 Sub							<section class="prog__container"><pre><code>method cando(Capture $c)\n</code></pre><p>Returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_method_cando
Sub.wrap	A			Perl 6 Sub							<section class="prog__container"><pre><code>method wrap(Routine:D: &amp;wrapper)\n</code></pre><p>Wraps (i.e. in-place modifies) the routine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_method_wrap
Sub.unwrap	A			Perl 6 Sub							<section class="prog__container"><pre><code>method unwrap(Routine:D: $wraphandler)\n</code></pre><p>Restores the original routine after it has been wrapped with wrap.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_method_unwrap
Sub.yada	A			Perl 6 Sub							<section class="prog__container"><pre><code>method yada(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a stub&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_method_yada
Sub.cached	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$cached!)\n</code></pre><p>NOTE: this feature is currently EXPERIMENTAL.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_trait_is_cached
Sub.pure	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$pure!)\n</code></pre><p>Marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_trait_is_pure
Sub.rw	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$rw!)\n</code></pre><p>When a routine is modified with this trait, its return value will be writable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_trait_is_rw
Sub.export	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$export!)\n</code></pre><p>Marks a routine as exported to the rest of the world&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_trait_is_export
Sub.DEPRECATED	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D $r, :$DEPRECATED!)\n</code></pre><p>Marks a routine as deprecated, optionally with a message what to use instead.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_trait_is_DEPRECATED
Sub.hidden-from-backtrace	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D, :$hidden-from-backtrace!)\n</code></pre><p>Hides a routine from showing up in a default backtrace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Routine%29_trait_is_hidden-from-backtrace
Sub.ACCEPTS	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi method ACCEPTS(Code:D: Mu $topic)\n</code></pre><p>Usually calls the code object and passes $topic as an argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Code%29_method_ACCEPTS
Sub.arity	A			Perl 6 Sub							<section class="prog__container"><pre><code>method arity(Code:D: --&gt; Int:D)\n</code></pre><p>Returns the minimum number of positional arguments that must be passed in order to call the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Code%29_method_arity
Sub.count	A			Perl 6 Sub							<section class="prog__container"><pre><code>method count(Code:D: --&gt; Real:D)\n</code></pre><p>Returns the maximum number of positional arguments that may be passed when calling the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Code%29_method_count
Sub.signature	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi method signature(Code:D: --&gt; Signature:D)\n</code></pre><p>Returns the Signature object for this code object, which describes its parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Code%29_method_signature
Sub.Str	A			Perl 6 Sub							<section class="prog__container"><pre><code>multi method Str(Code:D: --&gt; Str:D)\n</code></pre><p>Will produce a warning.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Code%29_method_Str
Sub.file	A			Perl 6 Sub							<section class="prog__container"><pre><code>method file(Code:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the file in which the code object was declared.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Code%29_method_file
Sub.line	A			Perl 6 Sub							<section class="prog__container"><pre><code>method line(Code:D: --&gt; Int:D)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Sub.html#%28Code%29_method_line
Sub.CALL-ME	R	Callable.CALL-ME										
Sub.assuming	R	Callable.assuming										
Sub.ACCEPTS	R	Callable.ACCEPTS										
Sub.any	R	Callable.any										
Sub.all	R	Callable.all										
Sub.one	R	Callable.one										
Sub.none	R	Callable.none										
Sub.list	R	Callable.list										
Sub.push	R	Callable.push										
Sub.reverse	R	Callable.reverse										
Sub.sort	R	Callable.sort										
Sub.map	R	Callable.map										
Sub.deepmap	R	Callable.deepmap										
Sub.duckmap	R	Callable.duckmap										
Sub.flat	R	Callable.flat										
Sub.eager	R	Callable.eager										
Sub.elems	R	Callable.elems										
Sub.end	R	Callable.end										
Sub.pairup	R	Callable.pairup										
Sub.exit	R	Callable.exit										
Sub.item	R	Callable.item										
Sub.defined	R	Callable.defined										
Sub.isa	R	Callable.isa										
Sub.does	R	Callable.does										
Sub.Bool	R	Callable.Bool										
Sub.Str	R	Callable.Str										
Sub.gist	R	Callable.gist										
Sub.perl	R	Callable.perl										
Sub.item	R	Callable.item										
Sub.clone	R	Callable.clone										
Sub.new	R	Callable.new										
Sub.bless	R	Callable.bless										
Sub.CREATE	R	Callable.CREATE										
Sub.print	R	Callable.print										
Sub.put	R	Callable.put										
Sub.say	R	Callable.say										
Sub.ACCEPTS	R	Callable.ACCEPTS										
Sub.WHICH	R	Callable.WHICH										
Sub.WHERE	R	Callable.WHERE										
Sub.WHY	R	Callable.WHY										
Sub.export	R	Callable.export										
Sub.return	R	Callable.return										
Sub.return-rw	R	Callable.return-rw										
Sub.emit	R	Callable.emit										
Sub.take	R	Callable.take										
Sub.take	R	Callable.take										
Sub.take-rw	R	Callable.take-rw										
Sub.so	R	Callable.so										
Sub.not	R	Callable.not										
Submethod.name	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method name(Routine:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_method_name
Submethod.package	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method package(Routine:D:)\n</code></pre><p>Returns the package in which the routine is defined.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_method_package
Submethod.multi	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method multi(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a multi sub or method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_method_multi
Submethod.candidates	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method candidates(Routine:D: --&gt; Positional:D)\n</code></pre><p>Returns a list of multi candidates, or a one-element list with itself if it&amp;#39;s not a multi&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_method_candidates
Submethod.cando	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method cando(Capture $c)\n</code></pre><p>Returns a possibly-empty list of candidates that can be called with the given Capture, ordered by narrowest candidate first.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_method_cando
Submethod.wrap	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method wrap(Routine:D: &amp;wrapper)\n</code></pre><p>Wraps (i.e. in-place modifies) the routine.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_method_wrap
Submethod.unwrap	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method unwrap(Routine:D: $wraphandler)\n</code></pre><p>Restores the original routine after it has been wrapped with wrap.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_method_unwrap
Submethod.yada	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method yada(Routine:D: --&gt; Bool:D)\n</code></pre><p>Returns True if the routine is a stub&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_method_yada
Submethod.cached	A			Perl 6 Submethod							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$cached!)\n</code></pre><p>NOTE: this feature is currently EXPERIMENTAL.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_trait_is_cached
Submethod.pure	A			Perl 6 Submethod							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$pure!)\n</code></pre><p>Marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_trait_is_pure
Submethod.rw	A			Perl 6 Submethod							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$rw!)\n</code></pre><p>When a routine is modified with this trait, its return value will be writable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_trait_is_rw
Submethod.export	A			Perl 6 Submethod							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$export!)\n</code></pre><p>Marks a routine as exported to the rest of the world&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_trait_is_export
Submethod.DEPRECATED	A			Perl 6 Submethod							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D $r, :$DEPRECATED!)\n</code></pre><p>Marks a routine as deprecated, optionally with a message what to use instead.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_trait_is_DEPRECATED
Submethod.hidden-from-backtrace	A			Perl 6 Submethod							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Routine:D, :$hidden-from-backtrace!)\n</code></pre><p>Hides a routine from showing up in a default backtrace.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Routine%29_trait_is_hidden-from-backtrace
Submethod.ACCEPTS	A			Perl 6 Submethod							<section class="prog__container"><pre><code>multi method ACCEPTS(Code:D: Mu $topic)\n</code></pre><p>Usually calls the code object and passes $topic as an argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Code%29_method_ACCEPTS
Submethod.arity	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method arity(Code:D: --&gt; Int:D)\n</code></pre><p>Returns the minimum number of positional arguments that must be passed in order to call the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Code%29_method_arity
Submethod.count	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method count(Code:D: --&gt; Real:D)\n</code></pre><p>Returns the maximum number of positional arguments that may be passed when calling the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Code%29_method_count
Submethod.signature	A			Perl 6 Submethod							<section class="prog__container"><pre><code>multi method signature(Code:D: --&gt; Signature:D)\n</code></pre><p>Returns the Signature object for this code object, which describes its parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Code%29_method_signature
Submethod.Str	A			Perl 6 Submethod							<section class="prog__container"><pre><code>multi method Str(Code:D: --&gt; Str:D)\n</code></pre><p>Will produce a warning.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Code%29_method_Str
Submethod.file	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method file(Code:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the file in which the code object was declared.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Code%29_method_file
Submethod.line	A			Perl 6 Submethod							<section class="prog__container"><pre><code>method line(Code:D: --&gt; Int:D)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Submethod.html#%28Code%29_method_line
Submethod.CALL-ME	R	Callable.CALL-ME										
Submethod.assuming	R	Callable.assuming										
Submethod.ACCEPTS	R	Callable.ACCEPTS										
Submethod.any	R	Callable.any										
Submethod.all	R	Callable.all										
Submethod.one	R	Callable.one										
Submethod.none	R	Callable.none										
Submethod.list	R	Callable.list										
Submethod.push	R	Callable.push										
Submethod.reverse	R	Callable.reverse										
Submethod.sort	R	Callable.sort										
Submethod.map	R	Callable.map										
Submethod.deepmap	R	Callable.deepmap										
Submethod.duckmap	R	Callable.duckmap										
Submethod.flat	R	Callable.flat										
Submethod.eager	R	Callable.eager										
Submethod.elems	R	Callable.elems										
Submethod.end	R	Callable.end										
Submethod.pairup	R	Callable.pairup										
Submethod.exit	R	Callable.exit										
Submethod.item	R	Callable.item										
Submethod.defined	R	Callable.defined										
Submethod.isa	R	Callable.isa										
Submethod.does	R	Callable.does										
Submethod.Bool	R	Callable.Bool										
Submethod.Str	R	Callable.Str										
Submethod.gist	R	Callable.gist										
Submethod.perl	R	Callable.perl										
Submethod.item	R	Callable.item										
Submethod.clone	R	Callable.clone										
Submethod.new	R	Callable.new										
Submethod.bless	R	Callable.bless										
Submethod.CREATE	R	Callable.CREATE										
Submethod.print	R	Callable.print										
Submethod.put	R	Callable.put										
Submethod.say	R	Callable.say										
Submethod.ACCEPTS	R	Callable.ACCEPTS										
Submethod.WHICH	R	Callable.WHICH										
Submethod.WHERE	R	Callable.WHERE										
Submethod.WHY	R	Callable.WHY										
Submethod.export	R	Callable.export										
Submethod.return	R	Callable.return										
Submethod.return-rw	R	Callable.return-rw										
Submethod.emit	R	Callable.emit										
Submethod.take	R	Callable.take										
Submethod.take	R	Callable.take										
Submethod.take-rw	R	Callable.take-rw										
Submethod.so	R	Callable.so										
Submethod.not	R	Callable.not										
Supplier.new	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method new()\n</code></pre><p>The Supplier constructor.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#method_new
Supplier.Supply	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method Supply(Supplier:D: --&gt; Supply)\n</code></pre><p>This creates a new Supply object to which any values which are emitted on this supplier are passed.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#method_Supply
Supplier.emit	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method emit(Supplier:D: Mu &#92;value)\n</code></pre><p>Sends the given value to all of the taps on all of the supplies created by Supply on this Supplier.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#method_emit
Supplier.done	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method done(Supplier:D:)\n</code></pre><p>Calls the done callback on all the taps that have one.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#method_done
done	D								*[[Supplier.done]], calls the done callback on all the taps that have one.\n*[[Tap.done]], returns the callback that is called on successfully shutting down a channel, if any.			
Supplier.quit	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method quit(Supplier:D: Exception $ex)\nmulti method quit(Supplier:D: Str() $message)\n</code></pre><p>Calls the quit callback on all the taps that have one, passing the exception to them.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#method_quit
quit	D								*[[Supplier.quit]], calls the quit callback on all the taps that have one, passing the exception to them.\n*[[Tap.quit]], returns the callback that is called on shutting down a channel with error, if any.			
Supplier.ACCEPTS	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_ACCEPTS
Supplier.any	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_any
Supplier.all	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_all
Supplier.one	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_one
Supplier.none	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_none
Supplier.list	A			Perl 6 Supplier							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_list
Supplier.push	A			Perl 6 Supplier							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_push
Supplier.reverse	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_routine_reverse
Supplier.sort	A			Perl 6 Supplier							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_sort
Supplier.map	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_map
Supplier.deepmap	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_deepmap
Supplier.duckmap	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_duckmap
Supplier.flat	A			Perl 6 Supplier							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_flat
Supplier.eager	A			Perl 6 Supplier							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_eager
Supplier.elems	A			Perl 6 Supplier							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_elems
Supplier.end	A			Perl 6 Supplier							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_end
Supplier.pairup	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_method_pairup
Supplier.exit	A			Perl 6 Supplier							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_sub_exit
Supplier.item	A			Perl 6 Supplier							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Any%29_sub_item
Supplier.defined	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_routine_defined
Supplier.isa	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_routine_isa
Supplier.does	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_routine_does
Supplier.Bool	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_routine_Bool
Supplier.Str	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_Str
Supplier.gist	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_routine_gist
Supplier.perl	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_routine_perl
Supplier.item	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_item
Supplier.clone	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_clone
Supplier.new	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_new
Supplier.bless	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_bless
Supplier.CREATE	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_CREATE
Supplier.print	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_print
Supplier.put	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_put
Supplier.say	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_say
Supplier.ACCEPTS	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_ACCEPTS
Supplier.WHICH	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_WHICH
Supplier.WHERE	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_WHERE
Supplier.WHY	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_WHY
Supplier.export	A			Perl 6 Supplier							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_trait_is_export
Supplier.return	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_return
Supplier.return-rw	A			Perl 6 Supplier							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_return-rw
Supplier.emit	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_emit
Supplier.take	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_take
Supplier.take	A			Perl 6 Supplier							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_routine_take
Supplier.take-rw	A			Perl 6 Supplier							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_routine_take-rw
Supplier.so	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_so
Supplier.not	A			Perl 6 Supplier							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supplier.html#%28Mu%29_method_not
Supply.tap	R	Taps.tap										
Supply.act	R	Taps.act										
Supply.Channel	R	Taps.Channel										
Supply.Promise	R	Taps.Promise										
Supply.live	R	Taps.live										
Supply.schedule-on	R	Taps.schedule-on										
Supply.wait	R	done.wait										
Supply.list	R	done.list										
Supply.grab	R	done.grab										
Supply.reverse	R	done.reverse										
Supply.sort	R	done.sort										
Supply.from-list	A			Perl 6 Supply							<section class="prog__container"><pre><code>method from-list(Supply:U: *@values --&gt; Supply:D)\n</code></pre><p>Creates an on-demand supply from the values passed to this method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_from-list
from-list	R	Supply.from-list										
Supply.share	A			Perl 6 Supply							<section class="prog__container"><pre><code>method share(Supply:D: --&gt; Supply:D)\n</code></pre><p>Creates a live supply from an on-demand supply, thus making it possible to share the values of the on-demand supply on multiple taps, instead of each tap seeing its own copy of all values from the on-demand supply.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_share
share	R	Supply.share										
Supply.flat	A			Perl 6 Supply							<section class="prog__container"><pre><code>method flat(Supply:D: --&gt; Supply:D)\n</code></pre><p>Creates a supply on which all of the values seen in the given supply are flattened before being emitted again.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_flat
Supply.do	A			Perl 6 Supply							<section class="prog__container"><pre><code>method do(Supply:D: &amp;do --&gt; Supply:D)\n</code></pre><p>Creates a supply to which all values seen in the given supply, are emitted again.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_do
do	R	Supply.do										
Supply.interval	A			Perl 6 Supply							<section class="prog__container"><pre><code>method interval(Supply:U: $interval, $delay = 0 --&gt; Supply:D)\n</code></pre><p>Creates a supply that emits a value every $interval seconds, starting $delay seconds from the call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_interval
interval	R	Supply.interval										
Supply.grep	A			Perl 6 Supply							<section class="prog__container"><pre><code>method grep(Supply:D: Mu $test --&gt; Supply:D)\n</code></pre><p>Creates a new supply that only emits those values from the original supply that smart-match against $test.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_grep
Supply.map	A			Perl 6 Supply							<section class="prog__container"><pre><code>method map(Supply:D: &amp;mapper --&gt; Supply:D)\n</code></pre><p>Returns a new supply that maps each value of the given supply through &amp;mapper and emits it to the new supply.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_map
Supply.batch	A			Perl 6 Supply							<section class="prog__container"><pre><code>method batch(Supply:D: :$elems, :$seconds --&gt; Supply:D)\n</code></pre><p>Creates a new supply that batches the values of the given supply by either the number of elements in the batch (using :elems) or the maximum number of seconds (using the :seconds) or both.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_batch
batch	R	Supply.batch										
Supply.elems	A			Perl 6 Supply							<section class="prog__container"><pre><code>method elems(Supply:D: $seconds? --&gt; Supply:D)\n</code></pre><p>Creates a new supply in which changes to the number of values seen are emitted.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_elems
Supply.head	A			Perl 6 Supply							<section class="prog__container"><pre><code>method head(Supply:D: Int(Cool) $number = 1 --&gt; Supply:D)\n</code></pre><p>Creates a "head" supply with the same semantics as List.head.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_head
Supply.tail	A			Perl 6 Supply							<section class="prog__container"><pre><code>method tail(Supply:D: Int(Cool) $number = 1 --&gt; Supply:D)\n</code></pre><p>Creates a "tail" supply with the same semantics as List.tail.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_tail
Supply.rotor	A			Perl 6 Supply							<section class="prog__container"><pre><code>method rotor(Supply:D: @cycle --&gt; Supply:D)\n</code></pre><p>Creates a "rotoring" supply with the same semantics as List.rotor.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_rotor
Supply.delayed	A			Perl 6 Supply							<section class="prog__container"><pre><code>method delayed(Supply:D: $seconds --&gt; Supply:D)\n</code></pre><p>Creates a new supply in which all values flowing through the given supply are emitted, but with the given delay in seconds.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_delayed
delayed	R	Supply.delayed										
Supply.throttle	A			Perl 6 Supply							<section class="prog__container"><pre><code>method throttle(Supply:D:\n  $limit,                 # values / time or simultaneous processing \n  $seconds or $callable,  # time-unit / code to process simultaneously \n  $delay = 0,             # initial delay before starting, in seconds \n  :$control,              # supply to emit control messages on (optional) \n  :$status,               # supply to tap status messages from (optional) \n  :$bleed,                # supply to bleed messages to (optional) \n  :$vent-at,              # bleed when so many buffered (optional) \n  :$scheduler,            # scheduler to use, default $*SCHEDULER \n  --&gt; Supply:D)\n</code></pre><p>Produces a Supply from a given Supply, but makes sure the number of messages passed through, is limited.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_throttle
throttle	R	Supply.throttle										
Supply.stable	A			Perl 6 Supply							<section class="prog__container"><pre><code>method stable(Supply:D: $seconds, :$scheduler --&gt; Supply:D)\n</code></pre><p>Creates a new supply that only passes on a value flowing through the given supply if it wasn&amp;#39;t superseded by another value in the given time (in seconds).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_stable
stable	R	Supply.stable										
Supply.reduce	A			Perl 6 Supply							<section class="prog__container"><pre><code>method reduce(Supply:D: &amp;with --&gt; Supply:D)\n</code></pre><p>Creates a "reducing" supply with the same semantics as List.reduce.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_reduce
Supply.lines	A			Perl 6 Supply							<section class="prog__container"><pre><code>method lines(Supply:D: :$chomp = True --&gt; Supply:D)\n</code></pre><p>Creates a supply that will emit the characters coming in line by line from a supply that&amp;#39;s usually created by some asynchronous I/O operation.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_lines
Supply.words	A			Perl 6 Supply							<section class="prog__container"><pre><code>method words(Supply:D: --&gt; Supply:D)\n</code></pre><p>Creates a supply that will emit the characters coming in word for word from a supply that&amp;#39;s usually created by some asynchronous I/O operation.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_words
Supply.unique	A			Perl 6 Supply							<section class="prog__container"><pre><code>method unique(Supply:D: :$as, :$with, :$expires --&gt; Supply:D)\n</code></pre><p>Creates a supply that only provides unique values, as defined by the optional :as and :with parameters (same as with List.unique).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_unique
Supply.squish	A			Perl 6 Supply							<section class="prog__container"><pre><code>method squish(Supply:D: :$as, :$with, :$expires --&gt; Supply:D)\n</code></pre><p>Creates a supply that only provides unique values, as defined by the optional :as and :with parameters (same as with List.squish).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_squish
Supply.max	A			Perl 6 Supply							<section class="prog__container"><pre><code>method max(Supply:D: &amp;by = &amp;infix:&lt;cmp&gt; --&gt; Supply:D)\n</code></pre><p>Creates a supply that only emits values from the given supply if they are larger than any value seen before.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_max
Supply.min	A			Perl 6 Supply							<section class="prog__container"><pre><code>method min(Supply:D: &amp;by = &amp;infix:&lt;cmp&gt; --&gt; Supply:D)\n</code></pre><p>Creates a supply that only emits values from the given supply if they are smaller than any value seen before.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_min
Supply.minmax	A			Perl 6 Supply							<section class="prog__container"><pre><code>method minmax(Supply:D: &amp;by = &amp;infix:&lt;cmp&gt; --&gt; Supply:D)\n</code></pre><p>Creates a supply that emits a Range every time a new minimum or maximum values is seen from the given supply.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_minmax
Supply.start	A			Perl 6 Supply							<section class="prog__container"><pre><code>method start(Supply:D: &amp;startee --&gt; Supply:D)\n</code></pre><p>Creates a supply of supplies.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_start
Supply.migrate	A			Perl 6 Supply							<section class="prog__container"><pre><code>method migrate(Supply:D: --&gt; Supply:D)\n</code></pre><p>Creates a supply that acts like the last supply emitted to the given supply of supplies (usually created with start.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Supply.html#method_migrate
migrate	R	Supply.migrate										
Supply.merge	R	supplies.merge										
Supply.zip	R	supplies.zip										
Supply.zip-latest	R	supplies.zip-latest										
Supply.signal	R	supplies.signal										
Supply.IO::Notification.watch-path	R	supplies.IO::Notification.watch-path										
Supply.ACCEPTS	R	supplies.ACCEPTS										
Supply.any	R	supplies.any										
Supply.all	R	supplies.all										
Supply.one	R	supplies.one										
Supply.none	R	supplies.none										
Supply.list	R	supplies.list										
Supply.push	R	supplies.push										
Supply.reverse	R	supplies.reverse										
Supply.sort	R	supplies.sort										
Supply.map	R	supplies.map										
Supply.deepmap	R	supplies.deepmap										
Supply.duckmap	R	supplies.duckmap										
Supply.flat	R	supplies.flat										
Supply.eager	R	supplies.eager										
Supply.elems	R	supplies.elems										
Supply.end	R	supplies.end										
Supply.pairup	R	supplies.pairup										
Supply.exit	R	supplies.exit										
Supply.item	R	supplies.item										
Supply.defined	R	supplies.defined										
Supply.isa	R	supplies.isa										
Supply.does	R	supplies.does										
Supply.Bool	R	supplies.Bool										
Supply.Str	R	supplies.Str										
Supply.gist	R	supplies.gist										
Supply.perl	R	supplies.perl										
Supply.item	R	supplies.item										
Supply.clone	R	supplies.clone										
Supply.new	R	supplies.new										
Supply.bless	R	supplies.bless										
Supply.CREATE	R	supplies.CREATE										
Supply.print	R	supplies.print										
Supply.put	R	supplies.put										
Supply.say	R	supplies.say										
Supply.ACCEPTS	R	supplies.ACCEPTS										
Supply.WHICH	R	supplies.WHICH										
Supply.WHERE	R	supplies.WHERE										
Supply.WHY	R	supplies.WHY										
Supply.export	R	supplies.export										
Supply.return	R	supplies.return										
Supply.return-rw	R	supplies.return-rw										
Supply.emit	R	supplies.emit										
Supply.take	R	supplies.take										
Supply.take	R	supplies.take										
Supply.take-rw	R	supplies.take-rw										
Supply.so	R	supplies.so										
Supply.not	R	supplies.not										
Tap.emit	A			Perl 6 Tap							<section class="prog__container"><pre><code>method emit(Tap:D: --&gt; Callable:D)\n</code></pre><p>Returns the callback that is called for emitted events.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#method_emit
Tap.done	A			Perl 6 Tap							<section class="prog__container"><pre><code>method done(Tap:D:)\n</code></pre><p>Returns the callback that is called on successfully shutting down a channel, if any.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#method_done
Tap.quit	A			Perl 6 Tap							<section class="prog__container"><pre><code>method quit(Tap:D:)\n</code></pre><p>Returns the callback that is called on shutting down a channel with error, if any.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#method_quit
Tap.closing	A			Perl 6 Tap							<section class="prog__container"><pre><code>method closing(Tap:D:)\n</code></pre><p>Returns the callback that is called on closing the tap.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#method_closing
closing	R	Tap.closing										
Tap.supply	A			Perl 6 Tap							<section class="prog__container"><pre><code>method supply(Tap:D:)\n</code></pre><p>Returns the supply to which the tap belongs.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#method_supply
supply	R	Tap.supply										
Tap.close	A			Perl 6 Tap							<section class="prog__container"><pre><code>method close(Tap:D:)\n</code></pre><p>Closes the tap.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#method_close
Tap.ACCEPTS	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_ACCEPTS
Tap.any	A			Perl 6 Tap							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_any
Tap.all	A			Perl 6 Tap							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_all
Tap.one	A			Perl 6 Tap							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_one
Tap.none	A			Perl 6 Tap							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_none
Tap.list	A			Perl 6 Tap							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_list
Tap.push	A			Perl 6 Tap							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_push
Tap.reverse	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_routine_reverse
Tap.sort	A			Perl 6 Tap							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_sort
Tap.map	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_map
Tap.deepmap	A			Perl 6 Tap							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_deepmap
Tap.duckmap	A			Perl 6 Tap							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_duckmap
Tap.flat	A			Perl 6 Tap							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_flat
Tap.eager	A			Perl 6 Tap							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_eager
Tap.elems	A			Perl 6 Tap							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_elems
Tap.end	A			Perl 6 Tap							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_end
Tap.pairup	A			Perl 6 Tap							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_method_pairup
Tap.exit	A			Perl 6 Tap							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_sub_exit
Tap.item	A			Perl 6 Tap							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Any%29_sub_item
Tap.defined	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_routine_defined
Tap.isa	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_routine_isa
Tap.does	A			Perl 6 Tap							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_routine_does
Tap.Bool	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_routine_Bool
Tap.Str	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_Str
Tap.gist	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_routine_gist
Tap.perl	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_routine_perl
Tap.item	A			Perl 6 Tap							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_item
Tap.clone	A			Perl 6 Tap							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_clone
Tap.new	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_new
Tap.bless	A			Perl 6 Tap							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_bless
Tap.CREATE	A			Perl 6 Tap							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_CREATE
Tap.print	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_print
Tap.put	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_put
Tap.say	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_say
Tap.ACCEPTS	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_ACCEPTS
Tap.WHICH	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_WHICH
Tap.WHERE	A			Perl 6 Tap							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_WHERE
Tap.WHY	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_WHY
Tap.export	A			Perl 6 Tap							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_trait_is_export
Tap.return	A			Perl 6 Tap							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_return
Tap.return-rw	A			Perl 6 Tap							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_return-rw
Tap.emit	A			Perl 6 Tap							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_emit
Tap.take	A			Perl 6 Tap							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_take
Tap.take	A			Perl 6 Tap							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_routine_take
Tap.take-rw	A			Perl 6 Tap							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_routine_take-rw
Tap.so	A			Perl 6 Tap							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_so
Tap.not	A			Perl 6 Tap							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Tap.html#%28Mu%29_method_not
Thread.new	A			Perl 6 Thread							<section class="prog__container"><pre><code>method new(:&amp;code!, Bool :$app_lifetime = False, Str :$name = &amp;#39;&lt;anon&gt;&amp;#39; --&gt; Thread:D)\n</code></pre><p>Creates and returns a new Thread, without starting it yet.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_new
Thread.start	A			Perl 6 Thread							<section class="prog__container"><pre><code>method start(Thread:U: &amp;code, Bool :$app_lifetime = False, Str :$name = &amp;#39;&lt;anon&gt;&amp;#39; --&gt; Thread:D)\n</code></pre><p>Creates, runs and returns a new Thread.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_start
Thread.run	A			Perl 6 Thread							<section class="prog__container"><pre><code>method run(Thread:D:)\n</code></pre><p>Runs the thread, and returns the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_run
Thread.id	A			Perl 6 Thread							<section class="prog__container"><pre><code>method id(Thread:D: --&gt; Int:D)\n</code></pre><p>Returns a numeric, unique thread identifier.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_id
id	R	Thread.id										
Thread.finish	A			Perl 6 Thread							<section class="prog__container"><pre><code>method finish(Thread:D)\n</code></pre><p>Waits for the thread to finish.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_finish
finish	R	Thread.finish										
Thread.join	A			Perl 6 Thread							<section class="prog__container"><pre><code>method join(Thread:D)\n</code></pre><p>Waits for the thread to finish.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_join
Thread.yield	A			Perl 6 Thread							<section class="prog__container"><pre><code>method yield(Thread:U)\n</code></pre><p>Tells the scheduler to prefer another thread for now.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_yield
yield	R	Thread.yield										
Thread.app_lifetime	A			Perl 6 Thread							<section class="prog__container"><pre><code>method app_lifetime(Thread:D: --&gt; Bool:D)\n</code></pre><p>Returns False unless the named parameter :app_lifetime is specifically set to True during object creation.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_app_lifetime
app_lifetime	R	Thread.app_lifetime										
Thread.name	A			Perl 6 Thread							<section class="prog__container"><pre><code>method name(Thread:D: --&gt; Str:D)\n</code></pre><p>Returns the user defined string, which can optionally be set during object creation in order to identify the Thread, or &amp;#39;&lt;anon&gt;&amp;#39; if no such string was specified.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_name
Thread.Str	A			Perl 6 Thread							<section class="prog__container"><pre><code>method Str(Thread:D: --&gt; Str:D)\n</code></pre><p>Returns a string which contains the invocants thread id and name.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#method_Str
Thread.ACCEPTS	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_ACCEPTS
Thread.any	A			Perl 6 Thread							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_any
Thread.all	A			Perl 6 Thread							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_all
Thread.one	A			Perl 6 Thread							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_one
Thread.none	A			Perl 6 Thread							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_none
Thread.list	A			Perl 6 Thread							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_list
Thread.push	A			Perl 6 Thread							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_push
Thread.reverse	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_routine_reverse
Thread.sort	A			Perl 6 Thread							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_sort
Thread.map	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_map
Thread.deepmap	A			Perl 6 Thread							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_deepmap
Thread.duckmap	A			Perl 6 Thread							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_duckmap
Thread.flat	A			Perl 6 Thread							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_flat
Thread.eager	A			Perl 6 Thread							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_eager
Thread.elems	A			Perl 6 Thread							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_elems
Thread.end	A			Perl 6 Thread							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_end
Thread.pairup	A			Perl 6 Thread							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_method_pairup
Thread.exit	A			Perl 6 Thread							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_sub_exit
Thread.item	A			Perl 6 Thread							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Any%29_sub_item
Thread.defined	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_routine_defined
Thread.isa	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_routine_isa
Thread.does	A			Perl 6 Thread							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_routine_does
Thread.Bool	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_routine_Bool
Thread.Str	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_Str
Thread.gist	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_routine_gist
Thread.perl	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_routine_perl
Thread.item	A			Perl 6 Thread							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_item
Thread.clone	A			Perl 6 Thread							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_clone
Thread.new	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_new
Thread.bless	A			Perl 6 Thread							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_bless
Thread.CREATE	A			Perl 6 Thread							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_CREATE
Thread.print	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_print
Thread.put	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_put
Thread.say	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_say
Thread.ACCEPTS	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_ACCEPTS
Thread.WHICH	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_WHICH
Thread.WHERE	A			Perl 6 Thread							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_WHERE
Thread.WHY	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_WHY
Thread.export	A			Perl 6 Thread							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_trait_is_export
Thread.return	A			Perl 6 Thread							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_return
Thread.return-rw	A			Perl 6 Thread							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_return-rw
Thread.emit	A			Perl 6 Thread							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_emit
Thread.take	A			Perl 6 Thread							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_take
Thread.take	A			Perl 6 Thread							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_routine_take
Thread.take-rw	A			Perl 6 Thread							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_routine_take-rw
Thread.so	A			Perl 6 Thread							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_so
Thread.not	A			Perl 6 Thread							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Thread.html#%28Mu%29_method_not
ThreadPoolScheduler.new	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method new(Int :$initial_threads = 0, Int :$max_threads=16)\n</code></pre><p>Creates a new ThreadPoolScheduler object with the given range of threads to maintain.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#new
ThreadPoolScheduler.uncaught_handler	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method uncaught_handler() is rw\n</code></pre><p>RW-Accessor for the handler that is caught for uncaught exceptions from the code that is being scheduled and run.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Scheduler%29_method_uncaught_handler
ThreadPoolScheduler.cue	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method cue(:&amp;code, Instant :$at, :$in, :$every, :$times = 1; :&amp;catch)\n</code></pre><p>Schedules a callable (&amp;code) for execution.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Scheduler%29_method_cue
ThreadPoolScheduler.ACCEPTS	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_ACCEPTS
ThreadPoolScheduler.any	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_any
ThreadPoolScheduler.all	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_all
ThreadPoolScheduler.one	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_one
ThreadPoolScheduler.none	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_none
ThreadPoolScheduler.list	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_list
ThreadPoolScheduler.push	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_push
ThreadPoolScheduler.reverse	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_routine_reverse
ThreadPoolScheduler.sort	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_sort
ThreadPoolScheduler.map	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_map
ThreadPoolScheduler.deepmap	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_deepmap
ThreadPoolScheduler.duckmap	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_duckmap
ThreadPoolScheduler.flat	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_flat
ThreadPoolScheduler.eager	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_eager
ThreadPoolScheduler.elems	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_elems
ThreadPoolScheduler.end	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_end
ThreadPoolScheduler.pairup	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_method_pairup
ThreadPoolScheduler.exit	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_sub_exit
ThreadPoolScheduler.item	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Any%29_sub_item
ThreadPoolScheduler.defined	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_routine_defined
ThreadPoolScheduler.isa	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_routine_isa
ThreadPoolScheduler.does	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_routine_does
ThreadPoolScheduler.Bool	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_routine_Bool
ThreadPoolScheduler.Str	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_Str
ThreadPoolScheduler.gist	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_routine_gist
ThreadPoolScheduler.perl	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_routine_perl
ThreadPoolScheduler.item	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_item
ThreadPoolScheduler.clone	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_clone
ThreadPoolScheduler.new	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_new
ThreadPoolScheduler.bless	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_bless
ThreadPoolScheduler.CREATE	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_CREATE
ThreadPoolScheduler.print	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_print
ThreadPoolScheduler.put	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_put
ThreadPoolScheduler.say	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_say
ThreadPoolScheduler.ACCEPTS	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_ACCEPTS
ThreadPoolScheduler.WHICH	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_WHICH
ThreadPoolScheduler.WHERE	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_WHERE
ThreadPoolScheduler.WHY	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_WHY
ThreadPoolScheduler.export	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_trait_is_export
ThreadPoolScheduler.return	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_return
ThreadPoolScheduler.return-rw	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_return-rw
ThreadPoolScheduler.emit	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_emit
ThreadPoolScheduler.take	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_take
ThreadPoolScheduler.take	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_routine_take
ThreadPoolScheduler.take-rw	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_routine_take-rw
ThreadPoolScheduler.so	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_so
ThreadPoolScheduler.not	A			Perl 6 ThreadPoolScheduler							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/ThreadPoolScheduler.html#%28Mu%29_method_not
UInt.UInt	A			Perl 6 UInt							<section class="prog__container"><pre><code>my subset UInt of Int where * &gt;= 0;\n</code></pre><p>The UInt is defined as a subset of Int:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/UInt.html#UInt
Uni.new	A			Perl 6 Uni							<section class="prog__container"><pre><code>method new(*@codes --&gt; Uni:D)\n</code></pre><p>Creates a new Uni instance from the given codepoint numbers.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#method_new
Uni.NFC	A			Perl 6 Uni							<section class="prog__container"><pre><code>method NFC(Uni:D: --&gt; NFC:D)\n</code></pre><p>Returns a NFC (Normal Form Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#method_NFC
Uni.NFD	A			Perl 6 Uni							<section class="prog__container"><pre><code>method NFD(Uni:D: --&gt; NFD:D)\n</code></pre><p>Returns a NFD (Normal Form Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#method_NFD
Uni.NFKC	A			Perl 6 Uni							<section class="prog__container"><pre><code>method NFKC(Uni:D: --&gt; NFKC:D)\n</code></pre><p>Returns a NFKC (Normal Form Compatibility Composed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#method_NFKC
Uni.NFKD	A			Perl 6 Uni							<section class="prog__container"><pre><code>method NFKD(Uni:D: --&gt; NFKD:D)\n</code></pre><p>Returns a NFD (Normal Form Compatibility Decomposed)-converted version of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#method_NFKD
Uni.codes	A			Perl 6 Uni							<section class="prog__container"><pre><code>method codes(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#method_codes
Uni.elems	A			Perl 6 Uni							<section class="prog__container"><pre><code>method elems(Uni:D: --&gt; Int:D)\n</code></pre><p>Returns the number of codepoints in the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#method_elems
Uni.of	A			Perl 6 Uni							<section class="prog__container"><pre><code>method of()\n</code></pre><p>Returns the type constraint for elements of the positional container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Positional%29_method_of
Uni.ACCEPTS	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_ACCEPTS
Uni.any	A			Perl 6 Uni							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_any
Uni.all	A			Perl 6 Uni							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_all
Uni.one	A			Perl 6 Uni							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_one
Uni.none	A			Perl 6 Uni							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_none
Uni.list	A			Perl 6 Uni							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_list
Uni.push	A			Perl 6 Uni							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_push
Uni.reverse	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_routine_reverse
Uni.sort	A			Perl 6 Uni							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_sort
Uni.map	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_map
Uni.deepmap	A			Perl 6 Uni							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_deepmap
Uni.duckmap	A			Perl 6 Uni							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_duckmap
Uni.flat	A			Perl 6 Uni							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_flat
Uni.eager	A			Perl 6 Uni							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_eager
Uni.elems	A			Perl 6 Uni							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_elems
Uni.end	A			Perl 6 Uni							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_end
Uni.pairup	A			Perl 6 Uni							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_method_pairup
Uni.exit	A			Perl 6 Uni							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_sub_exit
Uni.item	A			Perl 6 Uni							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Any%29_sub_item
Uni.defined	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_routine_defined
Uni.isa	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_routine_isa
Uni.does	A			Perl 6 Uni							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_routine_does
Uni.Bool	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_routine_Bool
Uni.Str	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_Str
Uni.gist	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_routine_gist
Uni.perl	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_routine_perl
Uni.item	A			Perl 6 Uni							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_item
Uni.clone	A			Perl 6 Uni							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_clone
Uni.new	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_new
Uni.bless	A			Perl 6 Uni							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_bless
Uni.CREATE	A			Perl 6 Uni							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_CREATE
Uni.print	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_print
Uni.put	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_put
Uni.say	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_say
Uni.ACCEPTS	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_ACCEPTS
Uni.WHICH	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_WHICH
Uni.WHERE	A			Perl 6 Uni							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_WHERE
Uni.WHY	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_WHY
Uni.export	A			Perl 6 Uni							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_trait_is_export
Uni.return	A			Perl 6 Uni							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_return
Uni.return-rw	A			Perl 6 Uni							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_return-rw
Uni.emit	A			Perl 6 Uni							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_emit
Uni.take	A			Perl 6 Uni							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_take
Uni.take	A			Perl 6 Uni							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_routine_take
Uni.take-rw	A			Perl 6 Uni							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_routine_take-rw
Uni.so	A			Perl 6 Uni							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_so
Uni.not	A			Perl 6 Uni							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Uni.html#%28Mu%29_method_not
Variable.name	A			Perl 6 Variable							<section class="prog__container"><pre><code>method name(Variable:D: str)\n</code></pre><p>Returns the name of the variable, including the sigil.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#method_name
Variable.(Variables)	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Variable:D, :$default!)\n</code></pre><p>Sets the default value with which a variable is initialized, and to which it is reset when Nil is assigned to it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#trait_is_default_%28Variables%29
(Variables)	R	Variable.(Variables)										
Variable.dynamic	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Variable:D, :$dynamic)\n</code></pre><p>Marks a variable as dynamic, that is, accessible from inner dynamic scopes without being in an inner lexical scope.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#trait_is_dynamic
dynamic	R	Variable.dynamic										
Variable.of	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;of&gt;(Mu:U $target, Mu:U $type)\n</code></pre><p>Sets the type constraint of a container bound to a variable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#trait_of
Variable.ACCEPTS	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_ACCEPTS
Variable.any	A			Perl 6 Variable							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_any
Variable.all	A			Perl 6 Variable							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_all
Variable.one	A			Perl 6 Variable							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_one
Variable.none	A			Perl 6 Variable							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_none
Variable.list	A			Perl 6 Variable							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_list
Variable.push	A			Perl 6 Variable							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_push
Variable.reverse	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_routine_reverse
Variable.sort	A			Perl 6 Variable							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_sort
Variable.map	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_map
Variable.deepmap	A			Perl 6 Variable							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_deepmap
Variable.duckmap	A			Perl 6 Variable							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_duckmap
Variable.flat	A			Perl 6 Variable							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_flat
Variable.eager	A			Perl 6 Variable							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_eager
Variable.elems	A			Perl 6 Variable							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_elems
Variable.end	A			Perl 6 Variable							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_end
Variable.pairup	A			Perl 6 Variable							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_method_pairup
Variable.exit	A			Perl 6 Variable							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_sub_exit
Variable.item	A			Perl 6 Variable							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Any%29_sub_item
Variable.defined	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_routine_defined
Variable.isa	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_routine_isa
Variable.does	A			Perl 6 Variable							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_routine_does
Variable.Bool	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_routine_Bool
Variable.Str	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_Str
Variable.gist	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_routine_gist
Variable.perl	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_routine_perl
Variable.item	A			Perl 6 Variable							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_item
Variable.clone	A			Perl 6 Variable							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_clone
Variable.new	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_new
Variable.bless	A			Perl 6 Variable							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_bless
Variable.CREATE	A			Perl 6 Variable							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_CREATE
Variable.print	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_print
Variable.put	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_put
Variable.say	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_say
Variable.ACCEPTS	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_ACCEPTS
Variable.WHICH	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_WHICH
Variable.WHERE	A			Perl 6 Variable							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_WHERE
Variable.WHY	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_WHY
Variable.export	A			Perl 6 Variable							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_trait_is_export
Variable.return	A			Perl 6 Variable							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_return
Variable.return-rw	A			Perl 6 Variable							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_return-rw
Variable.emit	A			Perl 6 Variable							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_emit
Variable.take	A			Perl 6 Variable							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_take
Variable.take	A			Perl 6 Variable							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_routine_take
Variable.take-rw	A			Perl 6 Variable							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_routine_take-rw
Variable.so	A			Perl 6 Variable							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_so
Variable.not	A			Perl 6 Variable							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Variable.html#%28Mu%29_method_not
Version.new	A			Perl 6 Version							<section class="prog__container"><pre><code>method new(Str:D $s)\n</code></pre><p>Creates a Version from a string $s.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#method_new
Version.parts	A			Perl 6 Version							<section class="prog__container"><pre><code>method parts(Version:D: --&gt; List:D)\n</code></pre><p>Returns the list of parts that make up this Version object&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#method_parts
parts	R	Version.parts										
Version.plus	A			Perl 6 Version							<section class="prog__container"><pre><code>method plus(Version:D: --&gt; Bool:D)\n</code></pre><p>Returns True if comparisons against this version allow larger versions too.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#method_plus
plus	R	Version.plus										
Version.Str	A			Perl 6 Version							<section class="prog__container"><pre><code>method Str(Version:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#method_Str
Version.gist	A			Perl 6 Version							<section class="prog__container"><pre><code>method gist(Version:D: --&gt; Str:D)\n</code></pre><p>Returns a string representation of the invocant, just like Str, prepended with a lower-case v.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#method_gist
Version.ACCEPTS	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_ACCEPTS
Version.any	A			Perl 6 Version							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_any
Version.all	A			Perl 6 Version							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_all
Version.one	A			Perl 6 Version							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_one
Version.none	A			Perl 6 Version							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_none
Version.list	A			Perl 6 Version							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_list
Version.push	A			Perl 6 Version							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_push
Version.reverse	A			Perl 6 Version							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_routine_reverse
Version.sort	A			Perl 6 Version							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_sort
Version.map	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_map
Version.deepmap	A			Perl 6 Version							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_deepmap
Version.duckmap	A			Perl 6 Version							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_duckmap
Version.flat	A			Perl 6 Version							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_flat
Version.eager	A			Perl 6 Version							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_eager
Version.elems	A			Perl 6 Version							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_elems
Version.end	A			Perl 6 Version							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_end
Version.pairup	A			Perl 6 Version							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_method_pairup
Version.exit	A			Perl 6 Version							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_sub_exit
Version.item	A			Perl 6 Version							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Any%29_sub_item
Version.defined	A			Perl 6 Version							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_routine_defined
Version.isa	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_routine_isa
Version.does	A			Perl 6 Version							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_routine_does
Version.Bool	A			Perl 6 Version							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_routine_Bool
Version.Str	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_Str
Version.gist	A			Perl 6 Version							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_routine_gist
Version.perl	A			Perl 6 Version							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_routine_perl
Version.item	A			Perl 6 Version							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_item
Version.clone	A			Perl 6 Version							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_clone
Version.new	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_new
Version.bless	A			Perl 6 Version							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_bless
Version.CREATE	A			Perl 6 Version							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_CREATE
Version.print	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_print
Version.put	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_put
Version.say	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_say
Version.ACCEPTS	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_ACCEPTS
Version.WHICH	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_WHICH
Version.WHERE	A			Perl 6 Version							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_WHERE
Version.WHY	A			Perl 6 Version							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_WHY
Version.export	A			Perl 6 Version							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_trait_is_export
Version.return	A			Perl 6 Version							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_return
Version.return-rw	A			Perl 6 Version							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_return-rw
Version.emit	A			Perl 6 Version							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_emit
Version.take	A			Perl 6 Version							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_take
Version.take	A			Perl 6 Version							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_routine_take
Version.take-rw	A			Perl 6 Version							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_routine_take-rw
Version.so	A			Perl 6 Version							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_so
Version.not	A			Perl 6 Version							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Version.html#%28Mu%29_method_not
Whatever.ACCEPTS	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method ACCEPTS(Whatever:D: Mu $other)\n</code></pre><p>Returns True.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#method_ACCEPTS
Whatever.ACCEPTS	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method ACCEPTS(Any:D: Mu $other)\n</code></pre><p>Usage:&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_ACCEPTS
Whatever.any	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method any(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an any-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_any
Whatever.all	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method all(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates an all-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_all
Whatever.one	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method one(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a one-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_one
Whatever.none	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method none(--&gt; Junction:D)\n</code></pre><p>Interprets the invocant as a list and creates a none-Junction from it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_none
Whatever.list	A			Perl 6 Whatever							<section class="prog__container"><pre><code>say 42.list.^name;           # List \nsay 42.list.elems;           # 1 \n</code></pre><p>Interprets the invocant as a list, and returns that List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_list
Whatever.push	A			Perl 6 Whatever							<section class="prog__container"><pre><code>my %h;\ndd %h&lt;a&gt;; # Any (and therefor undefined) \n%h&lt;a&gt;.push(1); # .push on Any \ndd %h; # Â«Hash %h = {:a($[1])}â¤Â» # please note the Array \n</code></pre><p>The method push is defined for undefined invocants and allows for autovivifying undefined to an empty Array, unless the undefined value implements Positional already.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_push
Whatever.reverse	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi sub    reverse(*@list  --&gt; List:D)\nmulti method reverse(List:D: --&gt; List:D)\n</code></pre><p>Returns a list with the same elements in reverse order.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_routine_reverse
Whatever.sort	A			Perl 6 Whatever							<section class="prog__container"><pre><code>say &lt;b c a&gt;.sort;                           # (a b c) \nsay &amp;#39;bca&amp;#39;.comb.sort.join;                   # abc \nsay &amp;#39;bca&amp;#39;.comb.sort({$^b cmp $^a}).join;    # cba \nsay &amp;#39;231&amp;#39;.comb.sort(&amp;infix:Â«&lt;=&gt;Â»).join;     # 123 \n</code></pre><p>Sorts iterables with infix:&lt;cmp&gt; or given code object and returns a new List.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_sort
Whatever.map	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method map(&#92;SELF: &amp;block;; :$label, :$item)\nmulti method map(HyperIterable:D: &amp;block;; :$label)\n</code></pre><p>map will iterate over the invocant and apply the number of positional parameters of the code object from the invocant per call.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_map
Whatever.deepmap	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method deepmap(&amp;block --&gt; List) is nodal\n</code></pre><p>deepmap will apply &amp;block to each element and return a new List with the return values of &amp;block, unless the element does the Iterable role.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_deepmap
Whatever.duckmap	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method duckmap(&amp;block) is rw is nodal\n</code></pre><p>duckmap will apply &amp;block on each element and return a new list with defined return values of the block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_duckmap
Whatever.flat	A			Perl 6 Whatever							<section class="prog__container"><pre><code>say ((1, 2), (3)).elems;        # 2 \nsay ((1, 2), (3)).flat.elems;   # 3 \n</code></pre><p>Interprets the invocant as a list, flattens it, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_flat
Whatever.eager	A			Perl 6 Whatever							<section class="prog__container"><pre><code>say (1..10).eager;              # (1 2 3 4 5 6 7 8 9 10) \n</code></pre><p>Interprets the invocant as a list, evaluates it eagerly, and returns that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_eager
Whatever.elems	A			Perl 6 Whatever							<section class="prog__container"><pre><code>say 42.elems;                   # 1 \nsay &lt;a b c&gt;.elems;              # 3 \n</code></pre><p>Interprets the invocant as a list, and returns the number of elements in the list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_elems
Whatever.end	A			Perl 6 Whatever							<section class="prog__container"><pre><code>say 6.end;                      # 0 \nsay &lt;a b c&gt;.end;                # 2 \n</code></pre><p>Interprets the invocant as a list, and returns the last index of that list.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_end
Whatever.pairup	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method pairup(--&gt; List)\n</code></pre><p>Interprets the invocant as a list, and constructs a list of pairs from it, in the same way that assignment to a Hash does.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_method_pairup
Whatever.exit	A			Perl 6 Whatever							<section class="prog__container"><pre><code>sub exit(Int() $status = 0)\n</code></pre><p>Exits the current process with return code $status.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_sub_exit
Whatever.item	A			Perl 6 Whatever							<section class="prog__container"><pre><code>proto sub item(|) is pure\nmulti sub item(&#92;x)\nmulti sub item(|c)\nmulti sub item(Mu $a)\n</code></pre><p>&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Any%29_sub_item
Whatever.defined	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi sub    defined(Mu --&gt; Bool:D)\nmulti method defined(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_routine_defined
Whatever.isa	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method isa(Mu $type     --&gt; Bool:D)\nmulti method isa(Str:D $type  --&gt; Bool:D)\n</code></pre><p>Returns True if the invocant is an instance of class $type, a subset type or a derived class (through inheritance) of $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_routine_isa
Whatever.does	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method does(Mu $type --&gt; Bool:D)\n</code></pre><p>Returns True if and only if the invocant conforms to type $type.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_routine_does
Whatever.Bool	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi sub    Bool(Mu --&gt; Bool:D)\nmulti method Bool(   --&gt; Bool:D)\n</code></pre><p>Returns False on the type object, and True otherwise.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_routine_Bool
Whatever.Str	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method Str(--&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, intended to be machine readable.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_Str
Whatever.gist	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi sub    gist(Mu --&gt; Str)\nmulti method gist(   --&gt; Str)\n</code></pre><p>Returns a string representation of the invocant, optimized for fast recognition by humans.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_routine_gist
Whatever.perl	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi sub    perl(Mu --&gt; Str)\nmulti method perl(   --&gt; Str)\n</code></pre><p>Returns a Perlish representation of the object (i.e., can usually be re-evaluated with EVAL to regenerate the object).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_routine_perl
Whatever.item	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method item(Mu &#92;item:) is raw\n</code></pre><p>Forces the invocant to be evaluated in item context and returns the value of it.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_item
Whatever.clone	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method clone(*%twiddles)\n</code></pre><p>Creates a shallow clone of the invocant.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_clone
Whatever.new	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method new(*%attrinit)\n</code></pre><p>Default method for constructing (create + initialize) new objects of a class.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_new
Whatever.bless	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method bless(*%attrinit --&gt; Mu:D)\n</code></pre><p>Lower-level object construction method than new.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_bless
Whatever.CREATE	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method CREATE(--&gt; Mu:D)\n</code></pre><p>Allocates a new object of the same type as the invocant, without initializing any attributes.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_CREATE
Whatever.print	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method print(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .Str method without adding a newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_print
Whatever.put	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method put(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT, adding a newline at end, and if necessary, stringifying non-Str object using the .Str method.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_put
Whatever.say	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method say(--&gt; Bool:D)\n</code></pre><p>Prints value to $*OUT after stringification using .gist method with newline at end.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_say
Whatever.ACCEPTS	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method ACCEPTS(Mu:U: $other)\n</code></pre><p>ACCEPTS is the method that smart matching with the infix ~~ operator and given/when invokes on the right-hand side (the matcher).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_ACCEPTS
Whatever.WHICH	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method WHICH(--&gt; ObjAt:D)\n</code></pre><p>Returns an object of type ObjAt which uniquely identifies the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_WHICH
Whatever.WHERE	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method WHERE(--&gt; Int)\n</code></pre><p>Returns an Int representing the memory address of the object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_WHERE
Whatever.WHY	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi method WHY()\n</code></pre><p>Returns the attached Pod value.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_WHY
Whatever.export	A			Perl 6 Whatever							<section class="prog__container"><pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)\n</code></pre><p>Marks a type as being exported, that is, available to external users.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_trait_is_export
Whatever.return	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method return()\n</code></pre><p>The method return will stop execution of a subroutine or method, run all relevant phasers and provide invocant as a return value to the caller.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_return
Whatever.return-rw	A			Perl 6 Whatever							<section class="prog__container"><p>Same as method return except that return-rw returns a writable container to the invocant (see more details here: return-rw).&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_return-rw
Whatever.emit	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method emit()\n</code></pre><p>Emits the invocant into the enclosing supply or react block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_emit
Whatever.take	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method take()\n</code></pre><p>Returns the invocant in the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_take
Whatever.take	A			Perl 6 Whatever							<section class="prog__container"><pre><code>sub take(&#92;item)\n</code></pre><p>Takes the given item and passes it to the enclosing gather block.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_routine_take
Whatever.take-rw	A			Perl 6 Whatever							<section class="prog__container"><pre><code>sub take-rw(&#92;item)\n</code></pre><p>Returns the given item to the enclosing gather block, without introducing a new container.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_routine_take-rw
Whatever.so	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method so()\n</code></pre><p>Returns a Bool value representing the logical non-negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_so
Whatever.not	A			Perl 6 Whatever							<section class="prog__container"><pre><code>method not()\n</code></pre><p>Returns a Bool value representing the logical negation of an expression.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/Whatever.html#%28Mu%29_method_not
WhateverCode.ACCEPTS	A			Perl 6 WhateverCode							<section class="prog__container"><pre><code>multi method ACCEPTS(Code:D: Mu $topic)\n</code></pre><p>Usually calls the code object and passes $topic as an argument.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/WhateverCode.html#%28Code%29_method_ACCEPTS
WhateverCode.arity	A			Perl 6 WhateverCode							<section class="prog__container"><pre><code>method arity(Code:D: --&gt; Int:D)\n</code></pre><p>Returns the minimum number of positional arguments that must be passed in order to call the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/WhateverCode.html#%28Code%29_method_arity
WhateverCode.count	A			Perl 6 WhateverCode							<section class="prog__container"><pre><code>method count(Code:D: --&gt; Real:D)\n</code></pre><p>Returns the maximum number of positional arguments that may be passed when calling the code object.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/WhateverCode.html#%28Code%29_method_count
WhateverCode.signature	A			Perl 6 WhateverCode							<section class="prog__container"><pre><code>multi method signature(Code:D: --&gt; Signature:D)\n</code></pre><p>Returns the Signature object for this code object, which describes its parameters.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/WhateverCode.html#%28Code%29_method_signature
WhateverCode.Str	A			Perl 6 WhateverCode							<section class="prog__container"><pre><code>multi method Str(Code:D: --&gt; Str:D)\n</code></pre><p>Will produce a warning.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/WhateverCode.html#%28Code%29_method_Str
WhateverCode.file	A			Perl 6 WhateverCode							<section class="prog__container"><pre><code>method file(Code:D: --&gt; Str:D)\n</code></pre><p>Returns the name of the file in which the code object was declared.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/WhateverCode.html#%28Code%29_method_file
WhateverCode.line	A			Perl 6 WhateverCode							<section class="prog__container"><pre><code>method line(Code:D: --&gt; Int:D)\n</code></pre><p>Defined as&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/WhateverCode.html#%28Code%29_method_line
WhateverCode.CALL-ME	R	Callable.CALL-ME										
WhateverCode.assuming	R	Callable.assuming										
WhateverCode.ACCEPTS	R	Callable.ACCEPTS										
WhateverCode.any	R	Callable.any										
WhateverCode.all	R	Callable.all										
WhateverCode.one	R	Callable.one										
WhateverCode.none	R	Callable.none										
WhateverCode.list	R	Callable.list										
WhateverCode.push	R	Callable.push										
WhateverCode.reverse	R	Callable.reverse										
WhateverCode.sort	R	Callable.sort										
WhateverCode.map	R	Callable.map										
WhateverCode.deepmap	R	Callable.deepmap										
WhateverCode.duckmap	R	Callable.duckmap										
WhateverCode.flat	R	Callable.flat										
WhateverCode.eager	R	Callable.eager										
WhateverCode.elems	R	Callable.elems										
WhateverCode.end	R	Callable.end										
WhateverCode.pairup	R	Callable.pairup										
WhateverCode.exit	R	Callable.exit										
WhateverCode.item	R	Callable.item										
WhateverCode.defined	R	Callable.defined										
WhateverCode.isa	R	Callable.isa										
WhateverCode.does	R	Callable.does										
WhateverCode.Bool	R	Callable.Bool										
WhateverCode.Str	R	Callable.Str										
WhateverCode.gist	R	Callable.gist										
WhateverCode.perl	R	Callable.perl										
WhateverCode.item	R	Callable.item										
WhateverCode.clone	R	Callable.clone										
WhateverCode.new	R	Callable.new										
WhateverCode.bless	R	Callable.bless										
WhateverCode.CREATE	R	Callable.CREATE										
WhateverCode.print	R	Callable.print										
WhateverCode.put	R	Callable.put										
WhateverCode.say	R	Callable.say										
WhateverCode.ACCEPTS	R	Callable.ACCEPTS										
WhateverCode.WHICH	R	Callable.WHICH										
WhateverCode.WHERE	R	Callable.WHERE										
WhateverCode.WHY	R	Callable.WHY										
WhateverCode.export	R	Callable.export										
WhateverCode.return	R	Callable.return										
WhateverCode.return-rw	R	Callable.return-rw										
WhateverCode.emit	R	Callable.emit										
WhateverCode.take	R	Callable.take										
WhateverCode.take	R	Callable.take										
WhateverCode.take-rw	R	Callable.take-rw										
WhateverCode.so	R	Callable.so										
WhateverCode.not	R	Callable.not										
WrapHandle.restore	A			Perl 6 WrapHandle							<section class="prog__container"><pre><code>method restore(--&gt; Bool:D)\n</code></pre><p>Unwraps a wrapped routine and returns Bool::True on success.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/WrapHandle.html#method_restore
restore	R	WrapHandle.restore										
nativeInt.chr	A			Perl 6 nativeInt							<section class="prog__container"><pre><code>multi sub    chr(Int:D  --&gt; Str:D)\nmulti method chr(Int:D: --&gt; Str:D)\n</code></pre><p>Returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it to the corresponding character.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/nativeInt.html#%28Int%29_routine_chr
nativeInt.expmod	A			Perl 6 nativeInt							<section class="prog__container"><pre><code>multi sub    expmod(      $x,     $y,     $mod --&gt; Int:D)\nmulti sub    expmod(Int:D $x, Int $y, Int $mod --&gt; Int:D)\nmulti method expmod(Int:D:    Int $y, Int $mod --&gt; Int:D)\n</code></pre><p>Returns the given Int raised to the $y power within modulus $mod, that is gives the result of ($x ** $y) mod $mod.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/nativeInt.html#%28Int%29_routine_expmod
nativeInt.polymod	A			Perl 6 nativeInt							<section class="prog__container"><pre><code>method polymod(Int:D: +@mods)\n</code></pre><p>Returns a sequence of mod results corresponding to the divisors in @mods.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/nativeInt.html#%28Int%29_method_polymod
nativeInt.is-prime	A			Perl 6 nativeInt							<section class="prog__container"><pre><code>multi sub    is-prime (Int:D $number --&gt; Bool:D)\nmulti method is-prime (Int:D: --&gt; Bool:D)\n</code></pre><p>Returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/nativeInt.html#%28Int%29_routine_is-prime
nativeInt.lsb	A			Perl 6 nativeInt							<section class="prog__container"><pre><code>multi method lsb(Int:D:)\nmulti sub    lsb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/nativeInt.html#%28Int%29_routine_lsb
nativeInt.msb	A			Perl 6 nativeInt							<section class="prog__container"><pre><code>multi method msb(Int:D:)\nmulti sub    msb(Int:D)\n</code></pre><p>Returns Nil if the number is 0.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/nativeInt.html#%28Int%29_routine_msb
nativeInt.unival	A			Perl 6 nativeInt							<section class="prog__container"><pre><code>multi sub    unival(Int:D  --&gt; Numeric)\nmulti method unival(Int:D: --&gt; Numeric)\n</code></pre><p>Returns the number represented by the Unicode codepoint with the given integer number, or NaN if it does not represent a number.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/nativeInt.html#%28Int%29_routine_unival
nativeInt.div	A			Perl 6 nativeInt							<section class="prog__container"><pre><code>multi sub infix:&lt;div&gt;(Int:D, Int:D --&gt; Int:D)\n</code></pre><p>Does an integer division, rounded down.&lt;/p&gt;&lt;/section&gt;	https://docs.perl6.org/type/nativeInt.html#%28Int%29_infix_div
nativeInt.Rat	R	Real.Rat										
nativeInt.rand	R	Real.rand										
nativeInt.sign	R	Real.sign										
nativeInt.round	R	Real.round										
nativeInt.floor	R	Real.floor										
nativeInt.ceiling	R	Real.ceiling										
nativeInt.truncate	R	Real.truncate										
nativeInt.base	R	Real.base										
nativeInt.abs	R	Real.abs										
nativeInt.conj	R	Real.conj										
nativeInt.sqrt	R	Real.sqrt										
nativeInt.sign	R	Real.sign										
nativeInt.rand	R	Real.rand										
nativeInt.sin	R	Real.sin										
nativeInt.asin	R	Real.asin										
nativeInt.cos	R	Real.cos										
nativeInt.acos	R	Real.acos										
nativeInt.tan	R	Real.tan										
nativeInt.atan	R	Real.atan										
nativeInt.atan2	R	Real.atan2										
nativeInt.sec	R	Real.sec										
nativeInt.asec	R	Real.asec										
nativeInt.cosec	R	Real.cosec										
nativeInt.acosec	R	Real.acosec										
nativeInt.cotan	R	Real.cotan										
nativeInt.acotan	R	Real.acotan										
nativeInt.sinh	R	Real.sinh										
nativeInt.asinh	R	Real.asinh										
nativeInt.cosh	R	Real.cosh										
nativeInt.acosh	R	Real.acosh										
nativeInt.tanh	R	Real.tanh										
nativeInt.atanh	R	Real.atanh										
nativeInt.sech	R	Real.sech										
nativeInt.asech	R	Real.asech										
nativeInt.cosech	R	Real.cosech										
nativeInt.acosech	R	Real.acosech										
nativeInt.cotanh	R	Real.cotanh										
nativeInt.acotanh	R	Real.acotanh										
nativeInt.cis	R	Real.cis										
nativeInt.log	R	Real.log										
nativeInt.log10	R	Real.log10										
nativeInt.exp	R	Real.exp										
nativeInt.unpolar	R	Real.unpolar										
nativeInt.round	R	Real.round										
nativeInt.floor	R	Real.floor										
nativeInt.ceiling	R	Real.ceiling										
nativeInt.truncate	R	Real.truncate										
nativeInt.ord	R	Real.ord										
nativeInt.chr	R	Real.chr										
nativeInt.chars	R	Real.chars										
nativeInt.codes	R	Real.codes										
nativeInt.flip	R	Real.flip										
nativeInt.trim	R	Real.trim										
nativeInt.trim-leading	R	Real.trim-leading										
nativeInt.trim-trailing	R	Real.trim-trailing										
nativeInt.lc	R	Real.lc										
nativeInt.uc	R	Real.uc										
nativeInt.fc	R	Real.fc										
nativeInt.tc	R	Real.tc										
nativeInt.tclc	R	Real.tclc										
nativeInt.wordcase	R	Real.wordcase										
nativeInt.samecase	R	Real.samecase										
nativeInt.uniprop	R	Real.uniprop										
nativeInt.uniprops	R	Real.uniprops										
nativeInt.uniname	R	Real.uniname										
nativeInt.uninames	R	Real.uninames										
nativeInt.unimatch	R	Real.unimatch										
nativeInt.chop	R	Real.chop										
nativeInt.chomp	R	Real.chomp										
nativeInt.substr	R	Real.substr										
nativeInt.ords	R	Real.ords										
nativeInt.chrs	R	Real.chrs										
nativeInt.split	R	Real.split										
nativeInt.lines	R	Real.lines										
nativeInt.words	R	Real.words										
nativeInt.comb	R	Real.comb										
nativeInt.contains	R	Real.contains										
nativeInt.index	R	Real.index										
nativeInt.rindex	R	Real.rindex										
nativeInt.match	R	Real.match										
nativeInt.fmt	R	Real.fmt										
nativeInt.roots	R	Real.roots										
nativeInt.IO	R	Real.IO										
nativeInt.EVAL	R	Real.EVAL										
nativeInt.EVALFILE	R	Real.EVALFILE										
nativeInt.ACCEPTS	R	Real.ACCEPTS										
nativeInt.any	R	Real.any										
nativeInt.all	R	Real.all										
nativeInt.one	R	Real.one										
nativeInt.none	R	Real.none										
nativeInt.list	R	Real.list										
nativeInt.push	R	Real.push										
nativeInt.reverse	R	Real.reverse										
nativeInt.sort	R	Real.sort										
nativeInt.map	R	Real.map										
nativeInt.deepmap	R	Real.deepmap										
nativeInt.duckmap	R	Real.duckmap										
nativeInt.flat	R	Real.flat										
nativeInt.eager	R	Real.eager										
nativeInt.elems	R	Real.elems										
nativeInt.end	R	Real.end										
nativeInt.pairup	R	Real.pairup										
nativeInt.exit	R	Real.exit										
nativeInt.item	R	Real.item										
nativeInt.defined	R	Real.defined										
nativeInt.isa	R	Real.isa										
nativeInt.does	R	Real.does										
nativeInt.Bool	R	Real.Bool										
nativeInt.Str	R	Real.Str										
nativeInt.gist	R	Real.gist										
nativeInt.perl	R	Real.perl										
nativeInt.item	R	Real.item										
nativeInt.clone	R	Real.clone										
nativeInt.new	R	Real.new										
nativeInt.bless	R	Real.bless										
nativeInt.CREATE	R	Real.CREATE										
nativeInt.print	R	Real.print										
nativeInt.put	R	Real.put										
nativeInt.say	R	Real.say										
nativeInt.ACCEPTS	R	Real.ACCEPTS										
nativeInt.WHICH	R	Real.WHICH										
nativeInt.WHERE	R	Real.WHERE										
nativeInt.WHY	R	Real.WHY										
nativeInt.export	R	Real.export										
nativeInt.return	R	Real.return										
nativeInt.return-rw	R	Real.return-rw										
nativeInt.emit	R	Real.emit										
nativeInt.take	R	Real.take										
nativeInt.take	R	Real.take										
nativeInt.take-rw	R	Real.take-rw										
nativeInt.so	R	Real.so										
nativeInt.not	R	Real.not										
