AST	A			Perl 6 AST							<pre><code>class AST { }</code></pre>An AST or Abstract Syntax Tree is a partially processed representation of a program.	http://doc.perl6.org/type/AST
AST.ACCEPTS	R	Any.ACCEPTS										
AST.any	R	Any.any										
AST.all	R	Any.all										
AST.one	R	Any.one										
AST.none	R	Any.none										
AST.list	R	Any.list										
AST.flat	R	Any.flat										
AST.eager	R	Any.eager										
AST.elems	R	Any.elems										
AST.end	R	Any.end										
AST.Str	R	Mu.Str										
AST.clone	R	Mu.clone										
AST.new	R	Mu.new										
AST.bless	R	Mu.bless										
AST.CREATE	R	Mu.CREATE										
AST.print	R	Mu.print										
AST.say	R	Mu.say										
AST.ACCEPTS	R	Mu.ACCEPTS										
AST.WHICH	R	Mu.WHICH										
AST.WHERE	R	Mu.WHERE										
AST.WHY	R	Mu.WHY										
Any	A			Perl 6 Any							<pre><code>class Any is Mu { ... }</code></pre>While Mu is the root of the Perl 6 class hierarchy, Any is the class that serves as a default base class for new classes, and as the base class for most built-in classes.	http://doc.perl6.org/type/Any
Any.ACCEPTS	A			Perl 6 Any							<pre><code>multi method ACCEPTS(Any:D: Mu $other)</code></pre>Returns True if $other === self (i.e. it checks object identity).	http://doc.perl6.org/type/Any#ACCEPTS
ACCEPTS	D								*[[Any.ACCEPTS]], returns True if $other === self (i.e. \n*[[Baggy.ACCEPTS]], \n*[[Code.ACCEPTS]], usually calls the code object and passes $topic as an argument.\n*[[EnumMap.ACCEPTS]], used in smart-matching if the right-hand side is an EnumMap.\n*[[Mu.ACCEPTS]], performs a type check.\n*[[Numeric.ACCEPTS]], returns True if $other is numerically the same as the invocant.\n*[[Regex.ACCEPTS]], matches the regex against the argument passed in.\n*[[Setty.ACCEPTS]], returns True if $other and self contain all the same elements, and no others.\n*[[Signature.ACCEPTS]], the first three see if the argument could be bound to the capture, i.e., if a function with that Signature would be able to be called with the $topic:\n*[[Str.ACCEPTS]], returns True if the string is the same as $other.\n*[[Whatever.ACCEPTS]], returns True.			
Any.any	A			Perl 6 Any							Interprets the invocant as a list and creates an any-Junction from it.	http://doc.perl6.org/type/Any#any
any	R	Any.any										
Any.all	A			Perl 6 Any							Interprets the invocant as a list and creates an all-Junction from it.	http://doc.perl6.org/type/Any#all
all	R	Any.all										
Any.one	A			Perl 6 Any							Interprets the invocant as a list and creates an one-Junction from it.	http://doc.perl6.org/type/Any#one
one	R	Any.one										
Any.none	A			Perl 6 Any							Interprets the invocant as a list and creates an none-Junction from it.	http://doc.perl6.org/type/Any#none
none	R	Any.none										
Any.list	A			Perl 6 Any							Interprets the invocant as a list, and returns that list.	http://doc.perl6.org/type/Any#list
list	D								*[[Any.list]], interprets the invocant as a list, and returns that list.\n*[[Capture.list]], returns the positional part of the Capture.\n*[[Channel.list]], returns a list of all remaining items in the queue, and removes them from the channel.\n*[[Match.list]], returns a list of positional submatches.\n*[[Range.list]], generates the list of elements that the range represents.\n*[[Supply.list]], waits until the supply is done, and returns a list of all items emitted since the list call.			
Any.flat	A			Perl 6 Any							Interprets the invocant as a list, flattens it, and returns that list.	http://doc.perl6.org/type/Any#flat
flat	D								*[[Any.flat]], interprets the invocant as a list, flattens it, and returns that list.\n*[[Range.flat]], generates the list of elements that the range represents.			
Any.eager	A			Perl 6 Any							Interprets the invocant as a list, evaluates it eagerly, and returns that list.	http://doc.perl6.org/type/Any#eager
eager	D								*[[Any.eager]], interprets the invocant as a list, evaluates it eagerly, and returns that list.\n*[[List.eager]], evaluates all elements in the list eagerly, and returns them as a list.			
Any.elems	A			Perl 6 Any							Interprets the invocant as a list, and returns the number of elements in the list.	http://doc.perl6.org/type/Any#elems
elems	D								*[[Any.elems]], interprets the invocant as a list, and returns the number of elements in the list.\n*[[Baggy.elems]], \n*[[Blob.elems]], returns the number of elements of the buffer.\n*[[Capture.elems]], returns the number of positional elements in the Capture.\n*[[EnumMap.elems]], returns the number of pairs stored in the EnumMap.\n*[[List.elems]], returns the number of elements in the list.\n*[[Setty.elems]], the number of elements of the set.			
Any.end	A			Perl 6 Any							Interprets the invocant as a list, and returns the last index of that list.	http://doc.perl6.org/type/Any#end
end	D								*[[Any.end]], interprets the invocant as a list, and returns the last index of that list.\n*[[List.end]], returns the index of the last element.			
Any.exit	A			Perl 6 Any							<pre><code>sub exit(Int() $status = 0)</code></pre>Exits the current process with return code $status.	http://doc.perl6.org/type/Any#exit
exit	D								*[[Any.exit]], exits the current process with return code $status.\n*[[Proc::Status.exit]], returns the numeric exit code from the program.			
Any.Str	R	Mu.Str										
Any.clone	R	Mu.clone										
Any.new	R	Mu.new										
Any.bless	R	Mu.bless										
Any.CREATE	R	Mu.CREATE										
Any.print	R	Mu.print										
Any.say	R	Mu.say										
Any.ACCEPTS	R	Mu.ACCEPTS										
Any.WHICH	R	Mu.WHICH										
Any.WHERE	R	Mu.WHERE										
Any.WHY	R	Mu.WHY										
Array	A			Perl 6 Array							<pre><code>class Array is List { ... }</code></pre>An Array is a List which forces all its elements to be scalar containers, which means you can assign to array elements.	http://doc.perl6.org/type/Array
Array.Bool	R	List.Bool										
Array.Str	R	List.Str										
Array.Int	R	List.Int										
Array.Numeric	R	List.Numeric										
Array.of	R	Positional.of										
Array.abs	R	Cool.abs										
Array.conj	R	Cool.conj										
Array.sqrt	R	Cool.sqrt										
Array.sign	R	Cool.sign										
Array.rand	R	Cool.rand										
Array.sin	R	Cool.sin										
Array.asin	R	Cool.asin										
Array.cos	R	Cool.cos										
Array.acos	R	Cool.acos										
Array.tan	R	Cool.tan										
Array.atan	R	Cool.atan										
Array.atan2	R	Cool.atan2										
Array.sec	R	Cool.sec										
Array.asec	R	Cool.asec										
Array.cosec	R	Cool.cosec										
Array.acosec	R	Cool.acosec										
Array.cotan	R	Cool.cotan										
Array.acotan	R	Cool.acotan										
Array.sinh	R	Cool.sinh										
Array.asinh	R	Cool.asinh										
Array.cosh	R	Cool.cosh										
Array.acosh	R	Cool.acosh										
Array.tanh	R	Cool.tanh										
Array.atanh	R	Cool.atanh										
Array.log	R	Cool.log										
Array.exp	R	Cool.exp										
Array.round	R	Cool.round										
Array.floor	R	Cool.floor										
Array.ceiling	R	Cool.ceiling										
Array.ord	R	Cool.ord										
Array.chr	R	Cool.chr										
Array.chars	R	Cool.chars										
Array.codes	R	Cool.codes										
Array.flip	R	Cool.flip										
Array.trim	R	Cool.trim										
Array.trim-leading	R	Cool.trim-leading										
Array.trim-trailing	R	Cool.trim-trailing										
Array.lc	R	Cool.lc										
Array.uc	R	Cool.uc										
Array.tc	R	Cool.tc										
Array.tclc	R	Cool.tclc										
Array.wordcase	R	Cool.wordcase										
Array.chop	R	Cool.chop										
Array.chomp	R	Cool.chomp										
Array.words	R	Cool.words										
Array.IO	R	Cool.IO										
Array.ACCEPTS	R	Any.ACCEPTS										
Array.any	R	Any.any										
Array.all	R	Any.all										
Array.one	R	Any.one										
Array.none	R	Any.none										
Array.list	R	Any.list										
Array.flat	R	Any.flat										
Array.eager	R	Any.eager										
Array.elems	R	Any.elems										
Array.end	R	Any.end										
Array.Str	R	Mu.Str										
Array.clone	R	Mu.clone										
Array.new	R	Mu.new										
Array.bless	R	Mu.bless										
Array.CREATE	R	Mu.CREATE										
Array.print	R	Mu.print										
Array.say	R	Mu.say										
Array.ACCEPTS	R	Mu.ACCEPTS										
Array.WHICH	R	Mu.WHICH										
Array.WHERE	R	Mu.WHERE										
Array.WHY	R	Mu.WHY										
Associative	A			Perl 6 Associative							<pre><code>role Associative { }</code></pre>A common role for types that support name-based lookup through postcircumfix:&lt;{ }&gt; , for example Hash and EnumMap.	http://doc.perl6.org/type/Associative
Attribute	A			Perl 6 Attribute							<pre><code>class Attribute { }</code></pre>In Perl 6 lingo, an attribute refers to a per-instance/object storage slot.	http://doc.perl6.org/type/Attribute
Attribute.name	A			Perl 6 Attribute							<pre><code>method name(Attribute:D:) returns Str:D</code></pre>Returns the name of the attribute.	http://doc.perl6.org/type/Attribute#name
name	D								*[[Attribute.name]], returns the name of the attribute.\n*[[Metamodel::Naming.name]], returns the name of the meta object, if any.\n*[[Parameter.name]], returns the variable name.\n*[[Pod::Block::Named.name]], returns the name of the block.\n*[[Variable.name]], returns the name of the variable, including the sigil.\n*[[X::Attribute::NoPackage.name]], returns the name of the attribute\n*[[X::Attribute::Package.name]], returns the name of the attribute that triggered this error.\n*[[X::Bind::NativeType.name]], returns the name of the variable.\n*[[X::Signature::NameClash.name]], returns the name that was used for more than one parameter.			
Attribute.package	A			Perl 6 Attribute							<pre><code>method package(Attribute:D:) returns Mu:U</code></pre>Returns the package (class/grammar/role) to which this attribute belongs.	http://doc.perl6.org/type/Attribute#package
package	D								*[[Attribute.package]], returns the package (class/grammar/role) to which this attribute belongs.\n*[[X::Augment::NoSuchType.package]], returns the name that was tried to augment, but which doesn't exist.			
Attribute.has-accessor	A			Perl 6 Attribute							<pre><code>method has-accessor(Attribute:D:) returns Bool:D</code></pre>Returns True if the attribute has a public accessor method.	http://doc.perl6.org/type/Attribute#has-accessor
has-accessor	R	Attribute.has-accessor										
Attribute.readonly	A			Perl 6 Attribute							<pre><code>method readonly(Attribute:D:) returns Bool:D</code></pre>Returns True for readonly attributes, which is the default.	http://doc.perl6.org/type/Attribute#readonly
readonly	D								*[[Attribute.readonly]], returns True for readonly attributes, which is the default.\n*[[Parameter.readonly]], returns True for read-only parameters (the default).			
Attribute.get_value	A			Perl 6 Attribute							<pre><code>method get_value(Attribute:D: Mu $instance)</code></pre>Returns the value stored in this attribute of object $instance.	http://doc.perl6.org/type/Attribute#get_value
get_value	R	Attribute.get_value										
Attribute.set_value	A			Perl 6 Attribute							<pre><code>method set_value(Attribute:D: Mu $instance, Mu &#92;new_val)</code></pre>Binds the value new_val to this attribute of object $instance.	http://doc.perl6.org/type/Attribute#set_value
set_value	R	Attribute.set_value										
Attribute.ACCEPTS	R	Any.ACCEPTS										
Attribute.any	R	Any.any										
Attribute.all	R	Any.all										
Attribute.one	R	Any.one										
Attribute.none	R	Any.none										
Attribute.list	R	Any.list										
Attribute.flat	R	Any.flat										
Attribute.eager	R	Any.eager										
Attribute.elems	R	Any.elems										
Attribute.end	R	Any.end										
Attribute.Str	R	Mu.Str										
Attribute.clone	R	Mu.clone										
Attribute.new	R	Mu.new										
Attribute.bless	R	Mu.bless										
Attribute.CREATE	R	Mu.CREATE										
Attribute.print	R	Mu.print										
Attribute.say	R	Mu.say										
Attribute.ACCEPTS	R	Mu.ACCEPTS										
Attribute.WHICH	R	Mu.WHICH										
Attribute.WHERE	R	Mu.WHERE										
Attribute.WHY	R	Mu.WHY										
Backtrace	A			Perl 6 Backtrace							<pre><code>class Backtrace is List { ... }</code></pre>A backtrace shows the dynamic call stack, usually leading up to a point where an exception was thrown.	http://doc.perl6.org/type/Backtrace
Backtrace.new	A			Perl 6 Backtrace							<pre><code>proto method new(*@, *%) {*}\nmulti method new()</code></pre>Creates a new backtrace, using its calling location as the origin of the backtrace.	http://doc.perl6.org/type/Backtrace#new
new	D								*[[Backtrace.new]], creates a new backtrace, using its calling location as the origin of the backtrace.\n*[[Blob.new]], creates a Blob from a list of integers.\n*[[Complex.new]], creates a new Complex object from real and imaginary parts.\n*[[Date.new]], creates a new Date object, either from a triple of (year, month, day) integers, or from a string of the form YYYY-MM-DD (ISO 8601), or from a DateTime object.\n*[[DateTime.new]], creates a new DateTime object.\n*[[EnumMap.new]], creates a new EnumMap from a list of alternating keys and values, with the same semantics as described for hash assigning in the Hash documentation.\n*[[IO::Path.new]], creates a new IO::Path object from a path string (which is being parsed for volume, directory name and basename), or from volume, directory name and basename passed as named arguments.\n*[[IO::Socket::INET.new]], creates a new socket.\n*[[Mu.new]], default method for constructing (create + initialize) new objects of a class.\n*[[Proc::Async.new]], creates a new Proc::Async object with external program name or path $path and the command line arguments @args.\n*[[Rational.new]], creates a new rational object from numerator and denominator.\n*[[Thread.new]], creates and returns a new Thread, without starting it yet.\n*[[ThreadPoolScheduler.new]], creates a new ThreadPoolScheduler object with the given range of threads to maintain.\n*[[Version.new]], creates a Version from a string $s.			
Backtrace.Str	A			Perl 6 Backtrace							<pre><code>multi method Str(Backtrace:D:) returns Str:D:</code></pre>Returns a concise string representation of the backtrace, omitting routines marked as is hidden_from_backtrace, and at the discretion of the implementor, also some routines from the setting.	http://doc.perl6.org/type/Backtrace#Str
Backtrace.full	A			Perl 6 Backtrace							<pre><code>multi method full(Backtrace:D:) returns Str:D:</code></pre>Returns a full string representation of the backtrace, including hidden frames, compiler-specific frames and those from the setting.	http://doc.perl6.org/type/Backtrace#full
full	R	Backtrace.full										
Backtrace.Bool	R	List.Bool										
Backtrace.Str	R	List.Str										
Backtrace.Int	R	List.Int										
Backtrace.Numeric	R	List.Numeric										
Backtrace.of	R	Positional.of										
Backtrace.abs	R	Cool.abs										
Backtrace.conj	R	Cool.conj										
Backtrace.sqrt	R	Cool.sqrt										
Backtrace.sign	R	Cool.sign										
Backtrace.rand	R	Cool.rand										
Backtrace.sin	R	Cool.sin										
Backtrace.asin	R	Cool.asin										
Backtrace.cos	R	Cool.cos										
Backtrace.acos	R	Cool.acos										
Backtrace.tan	R	Cool.tan										
Backtrace.atan	R	Cool.atan										
Backtrace.atan2	R	Cool.atan2										
Backtrace.sec	R	Cool.sec										
Backtrace.asec	R	Cool.asec										
Backtrace.cosec	R	Cool.cosec										
Backtrace.acosec	R	Cool.acosec										
Backtrace.cotan	R	Cool.cotan										
Backtrace.acotan	R	Cool.acotan										
Backtrace.sinh	R	Cool.sinh										
Backtrace.asinh	R	Cool.asinh										
Backtrace.cosh	R	Cool.cosh										
Backtrace.acosh	R	Cool.acosh										
Backtrace.tanh	R	Cool.tanh										
Backtrace.atanh	R	Cool.atanh										
Backtrace.log	R	Cool.log										
Backtrace.exp	R	Cool.exp										
Backtrace.round	R	Cool.round										
Backtrace.floor	R	Cool.floor										
Backtrace.ceiling	R	Cool.ceiling										
Backtrace.ord	R	Cool.ord										
Backtrace.chr	R	Cool.chr										
Backtrace.chars	R	Cool.chars										
Backtrace.codes	R	Cool.codes										
Backtrace.flip	R	Cool.flip										
Backtrace.trim	R	Cool.trim										
Backtrace.trim-leading	R	Cool.trim-leading										
Backtrace.trim-trailing	R	Cool.trim-trailing										
Backtrace.lc	R	Cool.lc										
Backtrace.uc	R	Cool.uc										
Backtrace.tc	R	Cool.tc										
Backtrace.tclc	R	Cool.tclc										
Backtrace.wordcase	R	Cool.wordcase										
Backtrace.chop	R	Cool.chop										
Backtrace.chomp	R	Cool.chomp										
Backtrace.words	R	Cool.words										
Backtrace.IO	R	Cool.IO										
Backtrace.ACCEPTS	R	Any.ACCEPTS										
Backtrace.any	R	Any.any										
Backtrace.all	R	Any.all										
Backtrace.one	R	Any.one										
Backtrace.none	R	Any.none										
Backtrace.list	R	Any.list										
Backtrace.flat	R	Any.flat										
Backtrace.eager	R	Any.eager										
Backtrace.elems	R	Any.elems										
Backtrace.end	R	Any.end										
Backtrace.Str	R	Mu.Str										
Backtrace.clone	R	Mu.clone										
Backtrace.new	R	Mu.new										
Backtrace.bless	R	Mu.bless										
Backtrace.CREATE	R	Mu.CREATE										
Backtrace.print	R	Mu.print										
Backtrace.say	R	Mu.say										
Backtrace.ACCEPTS	R	Mu.ACCEPTS										
Backtrace.WHICH	R	Mu.WHICH										
Backtrace.WHERE	R	Mu.WHERE										
Backtrace.WHY	R	Mu.WHY										
Backtrace::Frame	A			Perl 6 Backtrace::Frame							<pre><code>class Backtrace::Frame { }</code></pre>A single backtrace frame.	http://doc.perl6.org/type/Backtrace%3A%3AFrame
Backtrace::Frame.file	A			Perl 6 Backtrace::Frame							<pre><code>method file(Backtrace::Frame:D) returns Str</code></pre>Returns the file name.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#file
file	R	Backtrace::Frame.file										
Backtrace::Frame.line	A			Perl 6 Backtrace::Frame							<pre><code>method line(Backtrace::Frame:D) returns Int</code></pre>Returns the line number (line numbers start to count from 1).	http://doc.perl6.org/type/Backtrace%3A%3AFrame#line
line	D								*[[Backtrace::Frame.line]], returns the line number (line numbers start to count from 1).\n*[[X::Comp.line]], the line number in which the compilation error occurred.			
Backtrace::Frame.code	A			Perl 6 Backtrace::Frame							<pre><code>method code(Backtrace::Frame:D)</code></pre>Returns the code object into which .file and .line point, if available.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#code
code	R	Backtrace::Frame.code										
Backtrace::Frame.subname	A			Perl 6 Backtrace::Frame							<pre><code>method subname(Backtrace::Frame:D) returns Str</code></pre>Returns the name of the enclosing subroutine.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#subname
subname	R	Backtrace::Frame.subname										
Backtrace::Frame.is-hidden	A			Perl 6 Backtrace::Frame							<pre><code>method is-hidden(Backtrace::Frame:D) return Bool:D</code></pre>Returns True if the frame is marked as hidden with the is hidden_from_backtrace trait.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#is-hidden
is-hidden	R	Backtrace::Frame.is-hidden										
Backtrace::Frame.is-routine	A			Perl 6 Backtrace::Frame							<pre><code>method is-routine(Backtrace::Frame:D) return Bool:D</code></pre>Return True if the frame point into a routine (and not into a mere Block).	http://doc.perl6.org/type/Backtrace%3A%3AFrame#is-routine
is-routine	R	Backtrace::Frame.is-routine										
Backtrace::Frame.is-setting	A			Perl 6 Backtrace::Frame							<pre><code>method is-setting(Backtrace::Frame:D) return Bool:D</code></pre>Returns True if the frame is part of a setting.	http://doc.perl6.org/type/Backtrace%3A%3AFrame#is-setting
is-setting	R	Backtrace::Frame.is-setting										
Backtrace::Frame.ACCEPTS	R	Any.ACCEPTS										
Backtrace::Frame.any	R	Any.any										
Backtrace::Frame.all	R	Any.all										
Backtrace::Frame.one	R	Any.one										
Backtrace::Frame.none	R	Any.none										
Backtrace::Frame.list	R	Any.list										
Backtrace::Frame.flat	R	Any.flat										
Backtrace::Frame.eager	R	Any.eager										
Backtrace::Frame.elems	R	Any.elems										
Backtrace::Frame.end	R	Any.end										
Backtrace::Frame.Str	R	Mu.Str										
Backtrace::Frame.clone	R	Mu.clone										
Backtrace::Frame.new	R	Mu.new										
Backtrace::Frame.bless	R	Mu.bless										
Backtrace::Frame.CREATE	R	Mu.CREATE										
Backtrace::Frame.print	R	Mu.print										
Backtrace::Frame.say	R	Mu.say										
Backtrace::Frame.ACCEPTS	R	Mu.ACCEPTS										
Backtrace::Frame.WHICH	R	Mu.WHICH										
Backtrace::Frame.WHERE	R	Mu.WHERE										
Backtrace::Frame.WHY	R	Mu.WHY										
Bag	A			Perl 6 Bag							<pre><code>class Bag does Baggy { }</code></pre>A Bag is an immutable bag/multiset, meaning a collection of distinct elements in no particular order that each have an integer weight assigned to them signifying how many copies of that element are considered "in the bag".	http://doc.perl6.org/type/Bag
Bag.bag	A			Perl 6 Bag							<pre><code>sub bag(*@args --&gt; Bag)</code></pre>Creates a new Bag from @args.	http://doc.perl6.org/type/Bag#bag
bag	R	Bag.bag										
Bag.ACCEPTS	R	Any.ACCEPTS										
Bag.any	R	Any.any										
Bag.all	R	Any.all										
Bag.one	R	Any.one										
Bag.none	R	Any.none										
Bag.list	R	Any.list										
Bag.flat	R	Any.flat										
Bag.eager	R	Any.eager										
Bag.elems	R	Any.elems										
Bag.end	R	Any.end										
Bag.Str	R	Mu.Str										
Bag.clone	R	Mu.clone										
Bag.new	R	Mu.new										
Bag.bless	R	Mu.bless										
Bag.CREATE	R	Mu.CREATE										
Bag.print	R	Mu.print										
Bag.say	R	Mu.say										
Bag.ACCEPTS	R	Mu.ACCEPTS										
Bag.WHICH	R	Mu.WHICH										
Bag.WHERE	R	Mu.WHERE										
Bag.WHY	R	Mu.WHY										
BagHash	A			Perl 6 BagHash							<pre><code>class BagHash does Baggy { }</code></pre>A BagHash is a mutable bag/multiset, meaning a collection of distinct elements in no particular order that each have an integer weight assigned to them signifying how many copies of that element are considered "in the bag".	http://doc.perl6.org/type/BagHash
BagHash.ACCEPTS	R	Any.ACCEPTS										
BagHash.any	R	Any.any										
BagHash.all	R	Any.all										
BagHash.one	R	Any.one										
BagHash.none	R	Any.none										
BagHash.list	R	Any.list										
BagHash.flat	R	Any.flat										
BagHash.eager	R	Any.eager										
BagHash.elems	R	Any.elems										
BagHash.end	R	Any.end										
BagHash.Str	R	Mu.Str										
BagHash.clone	R	Mu.clone										
BagHash.new	R	Mu.new										
BagHash.bless	R	Mu.bless										
BagHash.CREATE	R	Mu.CREATE										
BagHash.print	R	Mu.print										
BagHash.say	R	Mu.say										
BagHash.ACCEPTS	R	Mu.ACCEPTS										
BagHash.WHICH	R	Mu.WHICH										
BagHash.WHERE	R	Mu.WHERE										
BagHash.WHY	R	Mu.WHY										
Baggy	A			Perl 6 Baggy							<pre><code>class Baggy does QuantHash { }</code></pre>A role for collections of weighted objects.	http://doc.perl6.org/type/Baggy
Baggy.ACCEPTS	A			Perl 6 Baggy							See AlsoSets, Bags, and Mixes	http://doc.perl6.org/type/Baggy#ACCEPTS
Blob	A			Perl 6 Blob							<pre><code>role Blob[::T = uint8] does Positional[T] does Stringy { }</code></pre>The Blob role is an immutable interface to binary types, and offers a list-like interface to lists of integers, typically unsigned integers.	http://doc.perl6.org/type/Blob
Blob.new	A			Perl 6 Blob							<pre><code>method new(*@codes)</code></pre>Creates a Blob from a list of integers.	http://doc.perl6.org/type/Blob#new
Blob.Bool	A			Perl 6 Blob							<pre><code>multi method Bool(Blob:D:)</code></pre>Returns False if and only if the buffer is empty.	http://doc.perl6.org/type/Blob#Bool
Blob.elems	A			Perl 6 Blob							<pre><code>multi method elems(Blob:D:) returns Int:D</code></pre>Returns the number of elements of the buffer.	http://doc.perl6.org/type/Blob#elems
Blob.decode	A			Perl 6 Blob							<pre><code>multi method decode(Blob:D: Str:D $encoding = 'UTF-8') returns Str:D</code></pre>Applies an encoding to turn the blob into a Str.	http://doc.perl6.org/type/Blob#decode
decode	R	Blob.decode										
Blob.subbuf	A			Perl 6 Blob							<pre><code>method subbuf(Int $from, Int $len = self.elems) returns Blob:D</code></pre>Extracts a part of the invocant buffer, starting from the index with elements $from, and taking $len elements (or less if the buffer is shorter), and creates a new buffer as the result.	http://doc.perl6.org/type/Blob#subbuf
subbuf	R	Blob.subbuf										
Blob.unpack	A			Perl 6 Blob							<pre><code>method unpack(Blob:D: $template) returns List:D</code></pre>Extracts features from the blob according to the template string, and returns them as a list.	http://doc.perl6.org/type/Blob#unpack
unpack	R	Blob.unpack										
Blob.pack	A			Perl 6 Blob							<pre><code>sub pack(Str $template, *@items) returns Buf</code></pre>Packs the given items according to the template and returns a buffer containing the packed bytes.	http://doc.perl6.org/type/Blob#pack
pack	R	Blob.pack										
Blob.of	R	Positional.of										
Block	A			Perl 6 Block							<pre><code>class Block is Code { }</code></pre>A Block is a code object meant for small-scale code reuse.	http://doc.perl6.org/type/Block
Block.ACCEPTS	R	Code.ACCEPTS										
Block.arity	R	Code.arity										
Block.count	R	Code.count										
Block.signature	R	Code.signature										
Block.Str	R	Code.Str										
Block.ACCEPTS	R	Any.ACCEPTS										
Block.any	R	Any.any										
Block.all	R	Any.all										
Block.one	R	Any.one										
Block.none	R	Any.none										
Block.list	R	Any.list										
Block.flat	R	Any.flat										
Block.eager	R	Any.eager										
Block.elems	R	Any.elems										
Block.end	R	Any.end										
Block.Str	R	Mu.Str										
Block.clone	R	Mu.clone										
Block.new	R	Mu.new										
Block.bless	R	Mu.bless										
Block.CREATE	R	Mu.CREATE										
Block.print	R	Mu.print										
Block.say	R	Mu.say										
Block.ACCEPTS	R	Mu.ACCEPTS										
Block.WHICH	R	Mu.WHICH										
Block.WHERE	R	Mu.WHERE										
Block.WHY	R	Mu.WHY										
Bool	A			Perl 6 Bool							<pre><code>enum Bool &lt;False True&gt;</code></pre>An enum for boolean true/false decisions.	http://doc.perl6.org/type/Bool
Bool.?	A			Perl 6 Bool							<pre><code>multi sub prefix:&lt;?&gt;(Mu) returns Bool:D</code></pre>Coerces its argument to Bool.	http://doc.perl6.org/type/Bool#%3F
?	R	Bool.?										
Bool.so	A			Perl 6 Bool							<pre><code>multi sub prefix:&lt;so&gt;(Mu) returns Bool:D</code></pre>Coerces its argument to Bool, has looser precedence than prefix:&lt;?&gt; .	http://doc.perl6.org/type/Bool#so
so	R	Bool.so										
Bool.abs	R	Cool.abs										
Bool.conj	R	Cool.conj										
Bool.sqrt	R	Cool.sqrt										
Bool.sign	R	Cool.sign										
Bool.rand	R	Cool.rand										
Bool.sin	R	Cool.sin										
Bool.asin	R	Cool.asin										
Bool.cos	R	Cool.cos										
Bool.acos	R	Cool.acos										
Bool.tan	R	Cool.tan										
Bool.atan	R	Cool.atan										
Bool.atan2	R	Cool.atan2										
Bool.sec	R	Cool.sec										
Bool.asec	R	Cool.asec										
Bool.cosec	R	Cool.cosec										
Bool.acosec	R	Cool.acosec										
Bool.cotan	R	Cool.cotan										
Bool.acotan	R	Cool.acotan										
Bool.sinh	R	Cool.sinh										
Bool.asinh	R	Cool.asinh										
Bool.cosh	R	Cool.cosh										
Bool.acosh	R	Cool.acosh										
Bool.tanh	R	Cool.tanh										
Bool.atanh	R	Cool.atanh										
Bool.log	R	Cool.log										
Bool.exp	R	Cool.exp										
Bool.round	R	Cool.round										
Bool.floor	R	Cool.floor										
Bool.ceiling	R	Cool.ceiling										
Bool.ord	R	Cool.ord										
Bool.chr	R	Cool.chr										
Bool.chars	R	Cool.chars										
Bool.codes	R	Cool.codes										
Bool.flip	R	Cool.flip										
Bool.trim	R	Cool.trim										
Bool.trim-leading	R	Cool.trim-leading										
Bool.trim-trailing	R	Cool.trim-trailing										
Bool.lc	R	Cool.lc										
Bool.uc	R	Cool.uc										
Bool.tc	R	Cool.tc										
Bool.tclc	R	Cool.tclc										
Bool.wordcase	R	Cool.wordcase										
Bool.chop	R	Cool.chop										
Bool.chomp	R	Cool.chomp										
Bool.words	R	Cool.words										
Bool.IO	R	Cool.IO										
Bool.ACCEPTS	R	Any.ACCEPTS										
Bool.any	R	Any.any										
Bool.all	R	Any.all										
Bool.one	R	Any.one										
Bool.none	R	Any.none										
Bool.list	R	Any.list										
Bool.flat	R	Any.flat										
Bool.eager	R	Any.eager										
Bool.elems	R	Any.elems										
Bool.end	R	Any.end										
Bool.Str	R	Mu.Str										
Bool.clone	R	Mu.clone										
Bool.new	R	Mu.new										
Bool.bless	R	Mu.bless										
Bool.CREATE	R	Mu.CREATE										
Bool.print	R	Mu.print										
Bool.say	R	Mu.say										
Bool.ACCEPTS	R	Mu.ACCEPTS										
Bool.WHICH	R	Mu.WHICH										
Bool.WHERE	R	Mu.WHERE										
Bool.WHY	R	Mu.WHY										
Buf	A			Perl 6 Buf							<pre><code>rule Buf[::T] does Blob[T] { ... }</code></pre>A Buf is a mutable sequence of (usually unsigned) integers.	http://doc.perl6.org/type/Buf
Buf.new	R	Blob.new										
Buf.Bool	R	Blob.Bool										
Buf.elems	R	Blob.elems										
Buf.decode	R	Blob.decode										
Buf.subbuf	R	Blob.subbuf										
Buf.unpack	R	Blob.unpack										
Buf.of	R	Positional.of										
Callable	A			Perl 6 Callable							<pre><code>role Callable { ... }</code></pre>Role for objects which support calling them.	http://doc.perl6.org/type/Callable
Capture	A			Perl 6 Capture							<pre><code>class Capture does Positional does Associative { }</code></pre>A Capture is a container for passing arguments to a code object.	http://doc.perl6.org/type/Capture
Capture.list	A			Perl 6 Capture							<pre><code>method list(Capture:D:) returns Positional</code></pre>Returns the positional part of the Capture.	http://doc.perl6.org/type/Capture#list
Capture.hash	A			Perl 6 Capture							<pre><code>method hash(Capture:D:) returns Associative</code></pre>Returns the named/hash part of the Capture.	http://doc.perl6.org/type/Capture#hash
hash	D								*[[Capture.hash]], returns the named/hash part of the Capture.\n*[[Match.hash]], returns a hash of named submatches.			
Capture.elems	A			Perl 6 Capture							<pre><code>method elems(Capture:D:) returns Int:D</code></pre>Returns the number of positional elements in the Capture.	http://doc.perl6.org/type/Capture#elems
Capture.ACCEPTS	R	Any.ACCEPTS										
Capture.any	R	Any.any										
Capture.all	R	Any.all										
Capture.one	R	Any.one										
Capture.none	R	Any.none										
Capture.list	R	Any.list										
Capture.flat	R	Any.flat										
Capture.eager	R	Any.eager										
Capture.elems	R	Any.elems										
Capture.end	R	Any.end										
Capture.Str	R	Mu.Str										
Capture.clone	R	Mu.clone										
Capture.new	R	Mu.new										
Capture.bless	R	Mu.bless										
Capture.CREATE	R	Mu.CREATE										
Capture.print	R	Mu.print										
Capture.say	R	Mu.say										
Capture.ACCEPTS	R	Mu.ACCEPTS										
Capture.WHICH	R	Mu.WHICH										
Capture.WHERE	R	Mu.WHERE										
Capture.WHY	R	Mu.WHY										
Channel	A			Perl 6 Channel							<pre><code>class Channel { ... }</code></pre>A Channel is a thread-safe queue that helps you to send a series of objects from one or more producers to one or more consumers.	http://doc.perl6.org/type/Channel
Channel.send	A			Perl 6 Channel							<pre><code>method send(Channel:D: &#92;item)</code></pre>Enqueues an item into the channel.	http://doc.perl6.org/type/Channel#send
send	D								*[[Channel.send]], enqueues an item into the channel.\n*[[IO::Socket.send]], writes the supplied string to the socket, thus sending it to other end of the connection.			
Channel.receive	A			Perl 6 Channel							<pre><code>method receive(Channel:D:)</code></pre>Receives and removes an item from the channel.	http://doc.perl6.org/type/Channel#receive
receive	R	Channel.receive										
Channel.poll	A			Perl 6 Channel							<pre><code>method poll(Channel:D:)</code></pre>Receives and removes an item from the channel.	http://doc.perl6.org/type/Channel#poll
poll	R	Channel.poll										
Channel.close	A			Perl 6 Channel							<pre><code>method close(Channel:D:)</code></pre>Close the channel.	http://doc.perl6.org/type/Channel#close
close	D								*[[Channel.close]], close the channel.\n*[[IO.close]], to close an open file handle, simply call its close method:\n*[[IO::Handle.close]], will close a previously opened filehandle.\n*[[IO::Socket.close]], closes the socket.\n*[[Supply.close]], closes the given tap, this is, calls its close callback (if any), and prevents it from getting any more events.\n*[[Tap.close]], closes the tap.			
Channel.list	A			Perl 6 Channel							<pre><code>method list(Channel:D:) returns List:D</code></pre>Returns a list of all remaining items in the queue, and removes them from the channel.	http://doc.perl6.org/type/Channel#list
Channel.closed	A			Perl 6 Channel							<pre><code>method closed(Channel:D:) returns Promise:D</code></pre>Returns a promise that will be kept once the channel is closed by a call to method close.	http://doc.perl6.org/type/Channel#closed
closed	R	Channel.closed										
Channel.fail	A			Perl 6 Channel							<pre><code>method fail(Channel:D: $error)</code></pre>Closes the channel (that is, makes subsequent send calls die), and enqueues the error as the final element in the channel.	http://doc.perl6.org/type/Channel#fail
fail	D								*[[Channel.fail]], closes the channel (that is, makes subsequent send calls die), and enqueues the error as the final element in the channel.\n*[[Exception.fail]], same as fail $exception; i.e., it exits the calling Routine and returns the exception wrapped in a Failure object.			
Channel.await	A			Perl 6 Channel							<pre><code>multi sub await(Channel:D)\nmulti sub await(*@)</code></pre>Waits until all of one or more channels has a value available, and returns those values (it calls .receive on the channel).	http://doc.perl6.org/type/Channel#await
await	D								*[[Channel.await]], waits until all of one or more channels has a value available, and returns those values (it calls .receive on the channel).\n*[[Promise.await]], waits until one or more promises are all fulfilled, and then returns their values.			
Channel.ACCEPTS	R	Any.ACCEPTS										
Channel.any	R	Any.any										
Channel.all	R	Any.all										
Channel.one	R	Any.one										
Channel.none	R	Any.none										
Channel.list	R	Any.list										
Channel.flat	R	Any.flat										
Channel.eager	R	Any.eager										
Channel.elems	R	Any.elems										
Channel.end	R	Any.end										
Channel.Str	R	Mu.Str										
Channel.clone	R	Mu.clone										
Channel.new	R	Mu.new										
Channel.bless	R	Mu.bless										
Channel.CREATE	R	Mu.CREATE										
Channel.print	R	Mu.print										
Channel.say	R	Mu.say										
Channel.ACCEPTS	R	Mu.ACCEPTS										
Channel.WHICH	R	Mu.WHICH										
Channel.WHERE	R	Mu.WHERE										
Channel.WHY	R	Mu.WHY										
Code	A			Perl 6 Code							<pre><code>class Code is Any does Callable { ... }</code></pre>Code is the ultimate base class of all code objects in Perl 6.	http://doc.perl6.org/type/Code
Code.ACCEPTS	A			Perl 6 Code							<pre><code>multi method ACCEPTS(Code:D: Mu $topic)</code></pre>Usually calls the code object and passes $topic as an argument.	http://doc.perl6.org/type/Code#ACCEPTS
Code.arity	A			Perl 6 Code							<pre><code>method arity(Code:D:) returns Int:D</code></pre>Returns the minimum number of positional arguments that must be passed in order to call the code object.	http://doc.perl6.org/type/Code#arity
arity	D								*[[Code.arity]], returns the minimum number of positional arguments that must be passed in order to call the code object.\n*[[Signature.arity]], returns the minimal number of positional arguments required to satisfy the signature.			
Code.count	A			Perl 6 Code							<pre><code>method count(Code:D:) returns Real:D</code></pre>Returns the maximum number of positional arguments that may be passed when calling the code object.	http://doc.perl6.org/type/Code#count
count	D								*[[Code.count]], returns the maximum number of positional arguments that may be passed when calling the code object.\n*[[Signature.count]], returns the maximal number of positional arguments which can be bound to the signature.			
Code.signature	A			Perl 6 Code							<pre><code>multi method signature(Code:D:) returns Signature:D</code></pre>Returns the Signature object for this code object, which describes its parameters.	http://doc.perl6.org/type/Code#signature
signature	R	Code.signature										
Code.Str	A			Perl 6 Code							<pre><code>multi method Str(Code:D:) returns Str:D</code></pre>Returns the name of the code object.	http://doc.perl6.org/type/Code#Str
Code.ACCEPTS	R	Any.ACCEPTS										
Code.any	R	Any.any										
Code.all	R	Any.all										
Code.one	R	Any.one										
Code.none	R	Any.none										
Code.list	R	Any.list										
Code.flat	R	Any.flat										
Code.eager	R	Any.eager										
Code.elems	R	Any.elems										
Code.end	R	Any.end										
Code.Str	R	Mu.Str										
Code.clone	R	Mu.clone										
Code.new	R	Mu.new										
Code.bless	R	Mu.bless										
Code.CREATE	R	Mu.CREATE										
Code.print	R	Mu.print										
Code.say	R	Mu.say										
Code.ACCEPTS	R	Mu.ACCEPTS										
Code.WHICH	R	Mu.WHICH										
Code.WHERE	R	Mu.WHERE										
Code.WHY	R	Mu.WHY										
Complex	A			Perl 6 Complex							<pre><code>class Complex is Cool does Numeric { ... }</code></pre>Represents a number in the complex plane.	http://doc.perl6.org/type/Complex
Complex.i	A			Perl 6 Complex							Adding a trailing i to a number literal makes it a Complex, for example:	http://doc.perl6.org/type/Complex#i
i	R	Complex.i										
Complex.new	A			Perl 6 Complex							<pre><code>proto method new(*@, *%) {*} returns Complex:D\nmulti method new(Real $re, Real $im) returns Complex:D</code></pre>Creates a new Complex object from real and imaginary parts.	http://doc.perl6.org/type/Complex#new
Complex.re	A			Perl 6 Complex							<pre><code>method re(Complex:D:) returns Real:D</code></pre>Returns the real part of the complex number.	http://doc.perl6.org/type/Complex#re
re	R	Complex.re										
Complex.im	A			Perl 6 Complex							<pre><code>method im(Complex:D:) returns Real:D</code></pre>Returns the imaginary part of the complex number.	http://doc.perl6.org/type/Complex#im
im	R	Complex.im										
Complex.isNaN	A			Perl 6 Complex							<pre><code>method isNaN(Complex:D:) returns Bool:D</code></pre>Returns true if the real or imaginary part is NaN (not a number).	http://doc.perl6.org/type/Complex#isNaN
isNaN	R	Complex.isNaN										
Complex.polar	A			Perl 6 Complex							<pre><code>method polar(Complex:D:) returns Positional:D</code></pre>Returns a two-element list of the polar coordinates for this value, i.e. magnitude and angle in radians.	http://doc.perl6.org/type/Complex#polar
polar	R	Complex.polar										
Complex.Real	R	Numeric.Real										
Complex.Int	R	Numeric.Int										
Complex.Rat	R	Numeric.Rat										
Complex.Num	R	Numeric.Num										
Complex.narrow	R	Numeric.narrow										
Complex.ACCEPTS	R	Numeric.ACCEPTS										
Complex.roots	R	Numeric.roots										
Complex.conj	R	Numeric.conj										
Complex.Bool	R	Numeric.Bool										
Complex.succ	R	Numeric.succ										
Complex.pred	R	Numeric.pred										
Complex.abs	R	Cool.abs										
Complex.conj	R	Cool.conj										
Complex.sqrt	R	Cool.sqrt										
Complex.sign	R	Cool.sign										
Complex.rand	R	Cool.rand										
Complex.sin	R	Cool.sin										
Complex.asin	R	Cool.asin										
Complex.cos	R	Cool.cos										
Complex.acos	R	Cool.acos										
Complex.tan	R	Cool.tan										
Complex.atan	R	Cool.atan										
Complex.atan2	R	Cool.atan2										
Complex.sec	R	Cool.sec										
Complex.asec	R	Cool.asec										
Complex.cosec	R	Cool.cosec										
Complex.acosec	R	Cool.acosec										
Complex.cotan	R	Cool.cotan										
Complex.acotan	R	Cool.acotan										
Complex.sinh	R	Cool.sinh										
Complex.asinh	R	Cool.asinh										
Complex.cosh	R	Cool.cosh										
Complex.acosh	R	Cool.acosh										
Complex.tanh	R	Cool.tanh										
Complex.atanh	R	Cool.atanh										
Complex.log	R	Cool.log										
Complex.exp	R	Cool.exp										
Complex.round	R	Cool.round										
Complex.floor	R	Cool.floor										
Complex.ceiling	R	Cool.ceiling										
Complex.ord	R	Cool.ord										
Complex.chr	R	Cool.chr										
Complex.chars	R	Cool.chars										
Complex.codes	R	Cool.codes										
Complex.flip	R	Cool.flip										
Complex.trim	R	Cool.trim										
Complex.trim-leading	R	Cool.trim-leading										
Complex.trim-trailing	R	Cool.trim-trailing										
Complex.lc	R	Cool.lc										
Complex.uc	R	Cool.uc										
Complex.tc	R	Cool.tc										
Complex.tclc	R	Cool.tclc										
Complex.wordcase	R	Cool.wordcase										
Complex.chop	R	Cool.chop										
Complex.chomp	R	Cool.chomp										
Complex.words	R	Cool.words										
Complex.IO	R	Cool.IO										
Complex.ACCEPTS	R	Any.ACCEPTS										
Complex.any	R	Any.any										
Complex.all	R	Any.all										
Complex.one	R	Any.one										
Complex.none	R	Any.none										
Complex.list	R	Any.list										
Complex.flat	R	Any.flat										
Complex.eager	R	Any.eager										
Complex.elems	R	Any.elems										
Complex.end	R	Any.end										
Complex.Str	R	Mu.Str										
Complex.clone	R	Mu.clone										
Complex.new	R	Mu.new										
Complex.bless	R	Mu.bless										
Complex.CREATE	R	Mu.CREATE										
Complex.print	R	Mu.print										
Complex.say	R	Mu.say										
Complex.ACCEPTS	R	Mu.ACCEPTS										
Complex.WHICH	R	Mu.WHICH										
Complex.WHERE	R	Mu.WHERE										
Complex.WHY	R	Mu.WHY										
Cool	A			Perl 6 Cool							<pre><code>class Cool is Any { }</code></pre>Cool, also known as the Convenient OO Loop, is a base class for strings, numbers and other built-in classes that you are supposed to use mostly interchangeably.	http://doc.perl6.org/type/Cool
Cool.abs	A			Perl 6 Cool							<pre><code>method abs()</code></pre>Coerces the invocant to Numeric and returns the absolute value (that is, a non-negative number).	http://doc.perl6.org/type/Cool#abs
abs	D								*[[Cool.abs]], coerces the invocant to Numeric and returns the absolute value (that is, a non-negative number).\n*[[Numeric.abs]], returns the absolute value of the number.			
Cool.conj	A			Perl 6 Cool							<pre><code>method conj()</code></pre>Coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).	http://doc.perl6.org/type/Cool#conj
conj	D								*[[Cool.conj]], coerces the invocant to Numeric and returns the complex conjugate (that is, the number with the sign of the imaginary part negated).\n*[[Numeric.conj]], returns the complex conjugate of the number.			
Cool.sqrt	A			Perl 6 Cool							<pre><code>method sqrt()</code></pre>Coerces the invocant to Numeric and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.	http://doc.perl6.org/type/Cool#sqrt
sqrt	D								*[[Cool.sqrt]], coerces the invocant to Numeric and returns the square root, that is, a non-negative number that, when multiplied with itself, produces the original number.\n*[[Numeric.sqrt]], returns a square root of the number.			
Cool.sign	A			Perl 6 Cool							<pre><code>method sign()</code></pre>Coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.	http://doc.perl6.org/type/Cool#sign
sign	D								*[[Cool.sign]], coerces the invocant to Numeric and returns its sign, that is, 0 if the number is 0, 1 for positive and -1 for negative values.\n*[[Real.sign]], returns -1 if the number is negative, 0 if it is zero and 1 otherwise.			
Cool.rand	A			Perl 6 Cool							<pre><code>method rand()</code></pre>Coerces the invocant to Num and returns a pseudo-random value between zero and the number.	http://doc.perl6.org/type/Cool#rand
rand	D								*[[Cool.rand]], coerces the invocant to Num and returns a pseudo-random value between zero and the number.\n*[[Real.rand]], returns a pseudo-random number between zero and the number.			
Cool.sin	A			Perl 6 Cool							<pre><code>method sin()</code></pre>Coerces the invocant to Numeric, interprets it as radians, returns its sine.	http://doc.perl6.org/type/Cool#sin
sin	R	Cool.sin										
Cool.asin	A			Perl 6 Cool							<pre><code>method asin()</code></pre>Coerces the invocant to Numeric, and returns its arc-sine in radians.	http://doc.perl6.org/type/Cool#asin
asin	R	Cool.asin										
Cool.cos	A			Perl 6 Cool							<pre><code>method cos()</code></pre>Coerces the invocant to Numeric, interprets it as radians, returns its sine.	http://doc.perl6.org/type/Cool#cos
cos	R	Cool.cos										
Cool.acos	A			Perl 6 Cool							<pre><code>method acos()</code></pre>Coerces the invocant to Numeric, and returns its arc-cosine in radians.	http://doc.perl6.org/type/Cool#acos
acos	R	Cool.acos										
Cool.tan	A			Perl 6 Cool							Coerces the invocant to Numeric, interprets it as radians, returns its tangens.	http://doc.perl6.org/type/Cool#tan
tan	R	Cool.tan										
Cool.atan	A			Perl 6 Cool							<pre><code>method atan()</code></pre>Coerces the invocant to Numeric, and returns its arc-tangens in radians.	http://doc.perl6.org/type/Cool#atan
atan	R	Cool.atan										
Cool.atan2	A			Perl 6 Cool							<pre><code>method atan2($y = 1e0)</code></pre>Coerces the invocant to Numeric, and together with its argument, returns its two-argument arc-tangens in radians.	http://doc.perl6.org/type/Cool#atan2
atan2	R	Cool.atan2										
Cool.sec	A			Perl 6 Cool							<pre><code>method sec()</code></pre>Coerces the invocant to Numeric, interprets it as radians, returns its secans, that is, the reciprocal of its cosine.	http://doc.perl6.org/type/Cool#sec
sec	R	Cool.sec										
Cool.asec	A			Perl 6 Cool							<pre><code>method asec()</code></pre>Coerces the invocant to Numeric, and returns its arc-secans in radians.	http://doc.perl6.org/type/Cool#asec
asec	R	Cool.asec										
Cool.cosec	A			Perl 6 Cool							<pre><code>method cosec()</code></pre>Coerces the invocant to Numeric, interprets it as radians, returns its cosecans, that is, the reciprocal of its sine.	http://doc.perl6.org/type/Cool#cosec
cosec	R	Cool.cosec										
Cool.acosec	A			Perl 6 Cool							<pre><code>method acosec()</code></pre>Coerces the invocant to Numeric, and returns its arc-cosecans in radians.	http://doc.perl6.org/type/Cool#acosec
acosec	R	Cool.acosec										
Cool.cotan	A			Perl 6 Cool							<pre><code>method cotan()</code></pre>Coerces the invocant to Numeric, interprets it as radians, returns its cotangens, that is, the reciprocal of its tangens.	http://doc.perl6.org/type/Cool#cotan
cotan	R	Cool.cotan										
Cool.acotan	A			Perl 6 Cool							<pre><code>method acotan()</code></pre>Coerces the invocant to Numeric, and returns its arc-cotangens in radians.	http://doc.perl6.org/type/Cool#acotan
acotan	R	Cool.acotan										
Cool.sinh	A			Perl 6 Cool							<pre><code>method sinh()</code></pre>Coerces the invocant to Numeric, and returns its Sine hyperbolicus.	http://doc.perl6.org/type/Cool#sinh
sinh	R	Cool.sinh										
Cool.asinh	A			Perl 6 Cool							<pre><code>method asinh()</code></pre>Coerces the invocant to Numeric, and returns its Inverse Sine hyperbolicus.	http://doc.perl6.org/type/Cool#asinh
asinh	R	Cool.asinh										
Cool.cosh	A			Perl 6 Cool							<pre><code>method cosh()</code></pre>Coerces the invocant to Numeric, and returns its Cosine hyperbolicus.	http://doc.perl6.org/type/Cool#cosh
cosh	R	Cool.cosh										
Cool.acosh	A			Perl 6 Cool							<pre><code>method acosh()</code></pre>Coerces the invocant to Numeric, and returns its Inverse Cosine hyperbolicus.	http://doc.perl6.org/type/Cool#acosh
acosh	R	Cool.acosh										
Cool.tanh	A			Perl 6 Cool							<pre><code>method tanh()</code></pre>Coerces the invocant to Numeric, and returns its Tangens hyperbolicus.	http://doc.perl6.org/type/Cool#tanh
tanh	R	Cool.tanh										
Cool.atanh	A			Perl 6 Cool							<pre><code>method atanh()</code></pre>Coerces the invocant to Numeric, and returns its Inverse tangens hyperbolicus.	http://doc.perl6.org/type/Cool#atanh
atanh	R	Cool.atanh										
Cool.log	A			Perl 6 Cool							<pre><code>multi method log(Cool:D: Cool:D $base?)</code></pre>Coerces the invocant to Numeric, and returns its Logarithm to base $base, or to base e (Euler's Number) if no base was supplied (Natural logarithm.	http://doc.perl6.org/type/Cool#log
log	D								*[[Cool.log]], coerces the invocant to Numeric, and returns its Logarithm to base $base, or to base e (Euler's Number) if no base was supplied (Natural logarithm.\n*[[Numeric.log]], calculates the logarithm to base $base.			
Cool.exp	A			Perl 6 Cool							<pre><code>multi method exp(Cool:D: Cool:D $base?)</code></pre>Coerces the invocant to Numeric, and returns $base raised to the power of this number.	http://doc.perl6.org/type/Cool#exp
exp	D								*[[Cool.exp]], coerces the invocant to Numeric, and returns $base raised to the power of this number.\n*[[Numeric.exp]], returns $base to the power of the number, or e to the power of the number if called without a second argument.			
Cool.round	A			Perl 6 Cool							<pre><code>multi method round(Cool:D: $unit = 1)</code></pre>Coerces the invocant to Numeric, and rounds it to the unit of $unit.	http://doc.perl6.org/type/Cool#round
round	D								*[[Cool.round]], coerces the invocant to Numeric, and rounds it to the unit of $unit.\n*[[Real.round]], rounds the number to scale $scale.			
Cool.floor	A			Perl 6 Cool							<pre><code>multi method floor</code></pre>Coerces the invocant to Numeric, and rounds it downwards to the nearest integer.	http://doc.perl6.org/type/Cool#floor
floor	D								*[[Cool.floor]], coerces the invocant to Numeric, and rounds it downwards to the nearest integer.\n*[[Real.floor]], return the largest integer not greater than the number.			
Cool.ceiling	A			Perl 6 Cool							<pre><code>multi method ceiling</code></pre>Coerces the invocant to Numeric, and rounds it upwards to the nearest integer.	http://doc.perl6.org/type/Cool#ceiling
ceiling	D								*[[Cool.ceiling]], coerces the invocant to Numeric, and rounds it upwards to the nearest integer.\n*[[Real.ceiling]], returns the smallest integer not less than the number.			
Cool.ord	A			Perl 6 Cool							<pre><code>method ord()</code></pre>Coerces the invocant to Str, and returns the Unicode code point, number of the code point.	http://doc.perl6.org/type/Cool#ord
ord	D								*[[Cool.ord]], coerces the invocant to Str, and returns the Unicode code point, number of the code point.\n*[[Str.ord]], returns the codepoint number of the first character of the string			
Cool.chr	A			Perl 6 Cool							<pre><code>method chr()</code></pre>Coerces the invocant to Int, interprets it as a Unicode code points, and returns a string made of that code point.	http://doc.perl6.org/type/Cool#chr
chr	D								*[[Cool.chr]], coerces the invocant to Int, interprets it as a Unicode code points, and returns a string made of that code point.\n*[[Int.chr]], returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it the corresponding character.			
Cool.chars	A			Perl 6 Cool							<pre><code>method chars()</code></pre>Coerces the invocant to Str, and returns the number of characters in the string.	http://doc.perl6.org/type/Cool#chars
chars	D								*[[Cool.chars]], coerces the invocant to Str, and returns the number of characters in the string.\n*[[Str.chars]], returns the number of characters in the string in the current (lexically scoped) idea of what a normal character is, usually graphemes.			
Cool.codes	A			Perl 6 Cool							<pre><code>method codes()</code></pre>Coerces the invocant to Str, and returns the number of Unicode code points.	http://doc.perl6.org/type/Cool#codes
codes	R	Cool.codes										
Cool.flip	A			Perl 6 Cool							<pre><code>method flip()</code></pre>Coerces the invocant to Str, and returns a reversed version.	http://doc.perl6.org/type/Cool#flip
flip	D								*[[Cool.flip]], coerces the invocant to Str, and returns a reversed version.\n*[[Str.flip]], returns the string reversed character by character.			
Cool.trim	A			Perl 6 Cool							<pre><code>method trim()</code></pre>Coerces the invocant to Str, and returns the string with both leading and trailing whitespace stripped.	http://doc.perl6.org/type/Cool#trim
trim	D								*[[Cool.trim]], coerces the invocant to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Str.trim]], remove leading and trailing whitespace.			
Cool.trim-leading	A			Perl 6 Cool							<pre><code>method trim(-leading)</code></pre>Coerces the invocant to Str, and returns the string with leading whitespace stripped.	http://doc.perl6.org/type/Cool#trim-leading
trim-leading	D								*[[Cool.trim-leading]], coerces the invocant to Str, and returns the string with leading whitespace stripped.\n*[[Str.trim-leading]], remove the whitespace characters from the beginning of a string.			
Cool.trim-trailing	A			Perl 6 Cool							<pre><code>method trim-trailing()</code></pre>Coerces the invocant to Str, and returns the string with both leading and trailing whitespace stripped.	http://doc.perl6.org/type/Cool#trim-trailing
trim-trailing	D								*[[Cool.trim-trailing]], coerces the invocant to Str, and returns the string with both leading and trailing whitespace stripped.\n*[[Str.trim-trailing]], remove the whitespace characters from the end of a string.			
Cool.lc	A			Perl 6 Cool							<pre><code>method lc()</code></pre>Coerces the invocant to Str, and returns it case-folded to lower case.	http://doc.perl6.org/type/Cool#lc
lc	D								*[[Cool.lc]], coerces the invocant to Str, and returns it case-folded to lower case.\n*[[Str.lc]], returns a lower-case version of the string.			
Cool.uc	A			Perl 6 Cool							<pre><code>method uc()</code></pre>Coerces the invocant to Str, and returns it case-folded to upper case (capital letters).	http://doc.perl6.org/type/Cool#uc
uc	D								*[[Cool.uc]], coerces the invocant to Str, and returns it case-folded to upper case (capital letters).\n*[[Str.uc]], returns an uppercase version of the string.			
Cool.tc	A			Perl 6 Cool							<pre><code>method tc()</code></pre>Coerces the invocant to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).	http://doc.perl6.org/type/Cool#tc
tc	D								*[[Cool.tc]], coerces the invocant to Str, and returns it with the first letter case-folded to title case (or where not available, upper case).\n*[[Str.tc]], does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping			
Cool.tclc	A			Perl 6 Cool							<pre><code>method tclc()</code></pre>Coerces the invocant to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..	http://doc.perl6.org/type/Cool#tclc
tclc	D								*[[Cool.tclc]], coerces the invocant to Str, and returns it with the first letter case-folded to title case (or where not available, upper case), and the rest of the string case-folded to lower case..\n*[[Str.tclc]], turns the first character to title case, and all other characters to lower case			
Cool.wordcase	A			Perl 6 Cool							<pre><code>method wordcase(:&amp;filter = &amp;tclc, Mu :$where = True)</code></pre>Coerces the invocant to Str, and filters each word that smart-matches against $where through the &amp;filter.	http://doc.perl6.org/type/Cool#wordcase
wordcase	D								*[[Cool.wordcase]], coerces the invocant to Str, and filters each word that smart-matches against $where through the &amp;filter.\n*[[Str.wordcase]], returns a string in which &amp;filter has been applied to all the words that match $where.			
Cool.chop	A			Perl 6 Cool							<pre><code>method chop()</code></pre>Coerces the invocant to Str, and returns it with the last character removed.	http://doc.perl6.org/type/Cool#chop
chop	D								*[[Cool.chop]], coerces the invocant to Str, and returns it with the last character removed.\n*[[Str.chop]], returns the string with $chars characters removed from the end.			
Cool.chomp	A			Perl 6 Cool							<pre><code>method chomp()</code></pre>Coerces the invocant to Str, and returns it with the last character removed, if it is a logical newline.	http://doc.perl6.org/type/Cool#chomp
chomp	D								*[[Cool.chomp]], coerces the invocant to Str, and returns it with the last character removed, if it is a logical newline.\n*[[Str.chomp]], returns the string with a logical newline removed from the end.			
Cool.substr	A			Perl 6 Cool							<pre><code>method substr($from, $chars?)\nsub substr(Str(Cool) $str, $from, $chars?)</code></pre>Coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.	http://doc.perl6.org/type/Cool#substr
substr	D								*[[Cool.substr]], coerces the invocant (or in the sub form, the first argument) to Str, and returns the string starting from offset $from.\n*[[Str.substr]], returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.			
Cool.ords	A			Perl 6 Cool							<pre><code>method ords()\nsub ords(Str(Cool) $str)</code></pre>Coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.	http://doc.perl6.org/type/Cool#ords
ords	D								*[[Cool.ords]], coerces the invocant (or in the sub form, the first argument) to Str, and returns a list of Unicode codepoints for each character.\n*[[Str.ords]], returns a list of codepoint numbers, one for each character in the string.			
Cool.chrs	A			Perl 6 Cool							<pre><code>method chrs()\nsub chrs(*@codepoints) return Str:D</code></pre>Coerces the invocant (or in the sub form, the argument list) to a list of integers, and returns the string created by interpreting each integer as a Unicode codepoint, and joining the characters.	http://doc.perl6.org/type/Cool#chrs
chrs	R	Cool.chrs										
Cool.split	A			Perl 6 Cool							<pre><code>multi method split(  Str:D $delimiter, $limit = Inf, :$all)\nmulti method split(Regex:D $delimiter, $limit = Inf, :$all)\nmulti sub    split(  Str:D $delimiter, Str(Cool) $input, $limit = Inf, :$all)\nmulti sub    split(Regex:D $delimiter, Str(Cool) $input, $limit = Inf, :$all)</code></pre>Coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.	http://doc.perl6.org/type/Cool#split
split	D								*[[Cool.split]], coerces the invocant (or in the sub form, the second argument) to Str, and splits it into pieces based on delimiters found in the string.\n*[[Str.split]], splits a string up into pieces based on delimiters found in the string.			
Cool.words	A			Perl 6 Cool							<pre><code>method words(Int() $limit)</code></pre>Coerces the invocan to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).	http://doc.perl6.org/type/Cool#words
words	D								*[[Cool.words]], coerces the invocan to Str, and returns a list of words that make up the string (and if $limit is supplied, only the first $limit words).\n*[[Str.words]], returns a list of non-whitespace bits, i.e. 			
Cool.IO	A			Perl 6 Cool							<pre><code>method IO() returns IO::Path:D</code></pre>Coerces the invocant to IO::Path.	http://doc.perl6.org/type/Cool#IO
Cool.ACCEPTS	R	Any.ACCEPTS										
Cool.any	R	Any.any										
Cool.all	R	Any.all										
Cool.one	R	Any.one										
Cool.none	R	Any.none										
Cool.list	R	Any.list										
Cool.flat	R	Any.flat										
Cool.eager	R	Any.eager										
Cool.elems	R	Any.elems										
Cool.end	R	Any.end										
Cool.Str	R	Mu.Str										
Cool.clone	R	Mu.clone										
Cool.new	R	Mu.new										
Cool.bless	R	Mu.bless										
Cool.CREATE	R	Mu.CREATE										
Cool.print	R	Mu.print										
Cool.say	R	Mu.say										
Cool.ACCEPTS	R	Mu.ACCEPTS										
Cool.WHICH	R	Mu.WHICH										
Cool.WHERE	R	Mu.WHERE										
Cool.WHY	R	Mu.WHY										
CurrentThreadScheduler	A			Perl 6 CurrentThreadScheduler							<pre><code>class CurrentThreadScheduler does Scheduler { ... }</code></pre>CurrentThreadScheduler executes tasks on the current threads.	http://doc.perl6.org/type/CurrentThreadScheduler
CurrentThreadScheduler.uncaught_handler	R	Scheduler.uncaught_handler										
CurrentThreadScheduler.cue	R	Scheduler.cue										
CurrentThreadScheduler.ACCEPTS	R	Any.ACCEPTS										
CurrentThreadScheduler.any	R	Any.any										
CurrentThreadScheduler.all	R	Any.all										
CurrentThreadScheduler.one	R	Any.one										
CurrentThreadScheduler.none	R	Any.none										
CurrentThreadScheduler.list	R	Any.list										
CurrentThreadScheduler.flat	R	Any.flat										
CurrentThreadScheduler.eager	R	Any.eager										
CurrentThreadScheduler.elems	R	Any.elems										
CurrentThreadScheduler.end	R	Any.end										
CurrentThreadScheduler.Str	R	Mu.Str										
CurrentThreadScheduler.clone	R	Mu.clone										
CurrentThreadScheduler.new	R	Mu.new										
CurrentThreadScheduler.bless	R	Mu.bless										
CurrentThreadScheduler.CREATE	R	Mu.CREATE										
CurrentThreadScheduler.print	R	Mu.print										
CurrentThreadScheduler.say	R	Mu.say										
CurrentThreadScheduler.ACCEPTS	R	Mu.ACCEPTS										
CurrentThreadScheduler.WHICH	R	Mu.WHICH										
CurrentThreadScheduler.WHERE	R	Mu.WHERE										
CurrentThreadScheduler.WHY	R	Mu.WHY										
Cursor	A			Perl 6 Cursor							<pre><code>class Cursor { }</code></pre>A Cursor object is used internally by the regex engine in regex matches to keep track of the current position, backtracking waypoints and information about capturing groups.	http://doc.perl6.org/type/Cursor
Cursor.ACCEPTS	R	Any.ACCEPTS										
Cursor.any	R	Any.any										
Cursor.all	R	Any.all										
Cursor.one	R	Any.one										
Cursor.none	R	Any.none										
Cursor.list	R	Any.list										
Cursor.flat	R	Any.flat										
Cursor.eager	R	Any.eager										
Cursor.elems	R	Any.elems										
Cursor.end	R	Any.end										
Cursor.Str	R	Mu.Str										
Cursor.clone	R	Mu.clone										
Cursor.new	R	Mu.new										
Cursor.bless	R	Mu.bless										
Cursor.CREATE	R	Mu.CREATE										
Cursor.print	R	Mu.print										
Cursor.say	R	Mu.say										
Cursor.ACCEPTS	R	Mu.ACCEPTS										
Cursor.WHICH	R	Mu.WHICH										
Cursor.WHERE	R	Mu.WHERE										
Cursor.WHY	R	Mu.WHY										
Date	A			Perl 6 Date							<pre><code>class Date { }</code></pre>A Date is an immutable object identifying a day in the Gregorian calendar.	http://doc.perl6.org/type/Date
Date.new	A			Perl 6 Date							<pre><code>proto method new() {*}\nmulti method new($year,   $month,  $day)          returns Date:D\nmulti method new(:$year!, :$month = 1, :$day = 1) returns Date:D\nmulti method new(Str $date)                       returns Date:D\nmulti method new(DateTime:D $dt)                  returns Date:D</code></pre>Creates a new Date object, either from a triple of (year, month, day) integers, or from a string of the form YYYY-MM-DD (ISO 8601), or from a DateTime object.	http://doc.perl6.org/type/Date#new
Date.today	A			Perl 6 Date							<pre><code>method today() returns Date:D</code></pre>Returns a Date object for the current day.	http://doc.perl6.org/type/Date#today
today	R	Date.today										
Date.truncated-to	A			Perl 6 Date							<pre><code>method truncated-to(Date:D: Cool $unit)</code></pre>Returns a Date truncated to the first day of its year, month or week.	http://doc.perl6.org/type/Date#truncated-to
truncated-to	D								*[[Date.truncated-to]], returns a Date truncated to the first day of its year, month or week.\n*[[DateTime.truncated-to]], returns a copy of the invocant, with everything smaller than the specified unit truncated to the smallest possible value.			
Date.succ	A			Perl 6 Date							<pre><code>method succ(Date:D:) returns Date:D</code></pre>Returns the following day	http://doc.perl6.org/type/Date#succ
succ	D								*[[Date.succ]], returns the following day\n*[[Numeric.succ]], returns the number incremented by one (successor).\n*[[Str.succ]], returns the string incremented by one.			
Date.prev	A			Perl 6 Date							<pre><code>method prev(Date:D:) return Date:D</code></pre>Returns the previous day	http://doc.perl6.org/type/Date#prev
prev	R	Date.prev										
Date.Str	A			Perl 6 Date							<pre><code>multi method Str(Date:D:) returns Str:D</code></pre>Returns the date in YYYY-MM-DD format (ISO 8601)	http://doc.perl6.org/type/Date#Str
Date.gist	A			Perl 6 Date							<pre><code>multi method gist(Date:D:) returns Str:D</code></pre>Returns the date in YYYY-MM-DD format (ISO 8601)	http://doc.perl6.org/type/Date#gist
gist	D								*[[Date.gist]], returns the date in YYYY-MM-DD format (ISO 8601)\n*[[Exception.gist]], returns whatever the exception printer should produce for this exception.\n*[[Mu.gist]], returns a string representation of the invocant, optimized for fast recognition by humans.\n*[[Nil.gist]], returns "Nil"			
Date.year	R	Dateish.year										
Date.month	R	Dateish.month										
Date.day	R	Dateish.day										
Date.is-leap-year	R	Dateish.is-leap-year										
Date.day-of-month	R	Dateish.day-of-month										
Date.day-of-week	R	Dateish.day-of-week										
Date.day-of-year	R	Dateish.day-of-year										
Date.days-in-month	R	Dateish.days-in-month										
Date.week	R	Dateish.week										
Date.ACCEPTS	R	Any.ACCEPTS										
Date.any	R	Any.any										
Date.all	R	Any.all										
Date.one	R	Any.one										
Date.none	R	Any.none										
Date.list	R	Any.list										
Date.flat	R	Any.flat										
Date.eager	R	Any.eager										
Date.elems	R	Any.elems										
Date.end	R	Any.end										
Date.Str	R	Mu.Str										
Date.clone	R	Mu.clone										
Date.new	R	Mu.new										
Date.bless	R	Mu.bless										
Date.CREATE	R	Mu.CREATE										
Date.print	R	Mu.print										
Date.say	R	Mu.say										
Date.ACCEPTS	R	Mu.ACCEPTS										
Date.WHICH	R	Mu.WHICH										
Date.WHERE	R	Mu.WHERE										
Date.WHY	R	Mu.WHY										
DateTime	A			Perl 6 DateTime							<pre><code>class DateTime does Dateish { ... }</code></pre>For handling points in civil time, a DateTime object stores year, month, day, hour, minute (all Int), second (potentially fractional) and a time zone.	http://doc.perl6.org/type/DateTime
DateTime.new	A			Perl 6 DateTime							<pre><code>multi method new(Int :$year!, Int :$month, Int :$day,\n                 Int :$hour, Int :$minute, :$second\n                 :$timezone, :&amp;formatter)\nmulti method new(Date :$date!,\n                 Int :$hour, Int :$minute, :$second\n                 :$timezone=0, :&amp;formatter)\nmulti method new(Instant:D $i,  :$timezone=0, :&amp;formatter)\nmulti method new(Int:D $posix,  :$timezone=0, :&amp;formatter)\nmulti method new(Str:D $format, :$timezone=0, :&amp;formatter)</code></pre>Creates a new DateTime object.	http://doc.perl6.org/type/DateTime#new
DateTime.now	A			Perl 6 DateTime							<pre><code>method now(:$timezone=*$TZ, &amp;formatter) returns DateTime:D</code></pre>Creates a new DateTime object from the current system time, optionally with a different timezone than the default attached.	http://doc.perl6.org/type/DateTime#now
now	R	DateTime.now										
DateTime.clone	A			Perl 6 DateTime							<pre><code>method clone(:$year, :$month, :$day, :$hour, :$minute, :$second,\n             :$timezone, :&amp;formatter)</code></pre>Creates a new DateTime object based on the invocant, but with the given arguments overriding the values from the invocant.	http://doc.perl6.org/type/DateTime#clone
clone	D								*[[DateTime.clone]], creates a new DateTime object based on the invocant, but with the given arguments overriding the values from the invocant.\n*[[Mu.clone]], creates a shallow clone of the invocant.			
DateTime.hour	A			Perl 6 DateTime							<pre><code>method hour(DateTime:D:) returns Int:D</code></pre>Returns the hour component.	http://doc.perl6.org/type/DateTime#hour
hour	R	DateTime.hour										
DateTime.minute	A			Perl 6 DateTime							<pre><code>method minute(DateTime:D:) returns Int:D</code></pre>Returns the minute component.	http://doc.perl6.org/type/DateTime#minute
minute	R	DateTime.minute										
DateTime.second	A			Perl 6 DateTime							<pre><code>method second(DateTime:D:)</code></pre>Returns the second component, including potentially fractional seconds.	http://doc.perl6.org/type/DateTime#second
second	R	DateTime.second										
DateTime.whole-second	A			Perl 6 DateTime							<pre><code>method whole-second(DateTime:D:)</code></pre>Returns the second component, rounded down to an Int.	http://doc.perl6.org/type/DateTime#whole-second
whole-second	R	DateTime.whole-second										
DateTime.timezone	A			Perl 6 DateTime							<pre><code>method timezone(DateTime:D:) returns Int:D</code></pre>Returns the time zone in seconds as an offset from UTC.	http://doc.perl6.org/type/DateTime#timezone
timezone	R	DateTime.timezone										
DateTime.offset	A			Perl 6 DateTime							<pre><code>method offset(DateTime:D:) returns Int:D</code></pre>Returns the time zone in seconds as an offset from UTC.	http://doc.perl6.org/type/DateTime#offset
offset	R	DateTime.offset										
DateTime.offset-in-minutes	A			Perl 6 DateTime							<pre><code>method offset-in-minutes(DateTime:D:) returns Real:D</code></pre>Returns the time zone in minutes as an offset from UTC.	http://doc.perl6.org/type/DateTime#offset-in-minutes
offset-in-minutes	R	DateTime.offset-in-minutes										
DateTime.offset-in-hours	A			Perl 6 DateTime							<pre><code>method offset-in-hours(DateTime:D:) returns Real:D</code></pre>Returns the time zone in hours as an offset from UTC.	http://doc.perl6.org/type/DateTime#offset-in-hours
offset-in-hours	R	DateTime.offset-in-hours										
DateTime.formatter	A			Perl 6 DateTime							<pre><code>method formatter(DateTime:D:)</code></pre>Returns the formatting function which is used for conversion to Str.	http://doc.perl6.org/type/DateTime#formatter
formatter	R	DateTime.formatter										
DateTime.Str	A			Perl 6 DateTime							<pre><code>method Str(DateTime:D:) returns Str:D</code></pre>Returns a string representation of the invocant, as done by the formatter.	http://doc.perl6.org/type/DateTime#Str
DateTime.Instant	A			Perl 6 DateTime							<pre><code>method Instant(DateTime:D:) returns Instant:D</code></pre>Returns an Instant object based on the invocant.	http://doc.perl6.org/type/DateTime#Instant
DateTime.posix	A			Perl 6 DateTime							<pre><code>method posix(DateTime:D: $ignore-timezone = False) returns Int:D</code></pre>Returns the date and time as a POSIX/UNIX timestamp.	http://doc.perl6.org/type/DateTime#posix
posix	R	DateTime.posix										
DateTime.later	A			Perl 6 DateTime							<pre><code>method later(DateTime:D: *%unit)</code></pre>Returns a DateTime object based on the current one, but with a time delta applied.	http://doc.perl6.org/type/DateTime#later
later	R	DateTime.later										
DateTime.earlier	A			Perl 6 DateTime							<pre><code>method earlier(DateTime:D: *%unit)</code></pre>Returns a DateTime object based on the current one, but with a time delta towards the past applied.	http://doc.perl6.org/type/DateTime#earlier
earlier	R	DateTime.earlier										
DateTime.truncated-to	A			Perl 6 DateTime							<pre><code>method truncated-to(DateTime:D: Cool $unit)</code></pre>Returns a copy of the invocant, with everything smaller than the specified unit truncated to the smallest possible value.	http://doc.perl6.org/type/DateTime#truncated-to
DateTime.Date	A			Perl 6 DateTime							<pre><code>method Date(DateTime:D:) returns Date:D</code></pre>Returns a Date object for this DateTime object.	http://doc.perl6.org/type/DateTime#Date
DateTime.utc	A			Perl 6 DateTime							<pre><code>method utc(DateTime:D:) returns DateTime:D</code></pre>Returns a DateTime object for the same time, but in time zone UTC.	http://doc.perl6.org/type/DateTime#utc
utc	R	DateTime.utc										
DateTime.in-timezone	A			Perl 6 DateTime							<pre><code>method in-timezone(DateTime:D: $timezone = 0) returns DateTime:D</code></pre>Returns a DateTime object for the same time, but in the specified time zone.	http://doc.perl6.org/type/DateTime#in-timezone
in-timezone	R	DateTime.in-timezone										
DateTime.local	A			Perl 6 DateTime							<pre><code>method local(DateTime:D:) returns DateTime:D</code></pre>Returns a DateTime object for the same time, but in the local time zone ($*TZ).	http://doc.perl6.org/type/DateTime#local
local	R	DateTime.local										
DateTime.year	R	Dateish.year										
DateTime.month	R	Dateish.month										
DateTime.day	R	Dateish.day										
DateTime.is-leap-year	R	Dateish.is-leap-year										
DateTime.day-of-month	R	Dateish.day-of-month										
DateTime.day-of-week	R	Dateish.day-of-week										
DateTime.day-of-year	R	Dateish.day-of-year										
DateTime.days-in-month	R	Dateish.days-in-month										
DateTime.week	R	Dateish.week										
DateTime.ACCEPTS	R	Any.ACCEPTS										
DateTime.any	R	Any.any										
DateTime.all	R	Any.all										
DateTime.one	R	Any.one										
DateTime.none	R	Any.none										
DateTime.list	R	Any.list										
DateTime.flat	R	Any.flat										
DateTime.eager	R	Any.eager										
DateTime.elems	R	Any.elems										
DateTime.end	R	Any.end										
DateTime.Str	R	Mu.Str										
DateTime.clone	R	Mu.clone										
DateTime.new	R	Mu.new										
DateTime.bless	R	Mu.bless										
DateTime.CREATE	R	Mu.CREATE										
DateTime.print	R	Mu.print										
DateTime.say	R	Mu.say										
DateTime.ACCEPTS	R	Mu.ACCEPTS										
DateTime.WHICH	R	Mu.WHICH										
DateTime.WHERE	R	Mu.WHERE										
DateTime.WHY	R	Mu.WHY										
Dateish	A			Perl 6 Dateish							<pre><code>role Dateish { ... }</code></pre>Both Date and DateTime support accessing a year, month and day-of-month, as well as related functionality such as calcuating the day of the week.	http://doc.perl6.org/type/Dateish
Dateish.year	A			Perl 6 Dateish							<pre><code>method year(Date:D:) returns Int:D</code></pre>Returns the year of the date	http://doc.perl6.org/type/Dateish#year
year	R	Dateish.year										
Dateish.month	A			Perl 6 Dateish							<pre><code>method month(Date:D:) returns Int:D</code></pre>Returns the month of the date (1..12)	http://doc.perl6.org/type/Dateish#month
month	R	Dateish.month										
Dateish.day	A			Perl 6 Dateish							<pre><code>method day(Date:D:) returns Int:D</code></pre>Returns the day of the month of the date (1..31)	http://doc.perl6.org/type/Dateish#day
day	R	Dateish.day										
Dateish.is-leap-year	A			Perl 6 Dateish							<pre><code>method is-leap-year($year = self.year) returns Bool:D</code></pre>Returns True if $year is a leap year.	http://doc.perl6.org/type/Dateish#is-leap-year
is-leap-year	R	Dateish.is-leap-year										
Dateish.day-of-month	A			Perl 6 Dateish							<pre><code>method day-of-month(Date:D:) returns Int:D</code></pre>Returns the day of the month of the date (1..31).	http://doc.perl6.org/type/Dateish#day-of-month
day-of-month	R	Dateish.day-of-month										
Dateish.day-of-week	A			Perl 6 Dateish							<pre><code>method day-of-week(Date:D:) returns Int:D</code></pre>Returns the day of the week, where 1 is Monday, 2 is Tuesday and Sunday is 7.	http://doc.perl6.org/type/Dateish#day-of-week
day-of-week	R	Dateish.day-of-week										
Dateish.day-of-year	A			Perl 6 Dateish							<pre><code>method day-of-year(Date:D:) returns Int:D</code></pre>Returns the day of the year (1..366).	http://doc.perl6.org/type/Dateish#day-of-year
day-of-year	R	Dateish.day-of-year										
Dateish.days-in-month	A			Perl 6 Dateish							<pre><code>method days-in-month(year = self.year, month = self.month) returns Int:D</code></pre>Returns the number of days in a month, where year and month default to that of the invocant.	http://doc.perl6.org/type/Dateish#days-in-month
days-in-month	R	Dateish.days-in-month										
Dateish.week	A			Perl 6 Dateish							<pre><code>method week()</code></pre>Returns a list of two integers: the year, and the week number.	http://doc.perl6.org/type/Dateish#week
week	R	Dateish.week										
Duration	A			Perl 6 Duration							<pre><code>class Duration is Cool does Real { }</code></pre>A Duration represents a length of time in atomic seconds, with fractions.	http://doc.perl6.org/type/Duration
Duration.Rat	R	Real.Rat										
Duration.sign	R	Real.sign										
Duration.round	R	Real.round										
Duration.floor	R	Real.floor										
Duration.ceiling	R	Real.ceiling										
Duration.truncate	R	Real.truncate										
Duration.base	R	Real.base										
Duration.Real	R	Numeric.Real										
Duration.Int	R	Numeric.Int										
Duration.Rat	R	Numeric.Rat										
Duration.Num	R	Numeric.Num										
Duration.narrow	R	Numeric.narrow										
Duration.ACCEPTS	R	Numeric.ACCEPTS										
Duration.roots	R	Numeric.roots										
Duration.conj	R	Numeric.conj										
Duration.Bool	R	Numeric.Bool										
Duration.succ	R	Numeric.succ										
Duration.pred	R	Numeric.pred										
Duration.abs	R	Cool.abs										
Duration.conj	R	Cool.conj										
Duration.sqrt	R	Cool.sqrt										
Duration.sign	R	Cool.sign										
Duration.rand	R	Cool.rand										
Duration.sin	R	Cool.sin										
Duration.asin	R	Cool.asin										
Duration.cos	R	Cool.cos										
Duration.acos	R	Cool.acos										
Duration.tan	R	Cool.tan										
Duration.atan	R	Cool.atan										
Duration.atan2	R	Cool.atan2										
Duration.sec	R	Cool.sec										
Duration.asec	R	Cool.asec										
Duration.cosec	R	Cool.cosec										
Duration.acosec	R	Cool.acosec										
Duration.cotan	R	Cool.cotan										
Duration.acotan	R	Cool.acotan										
Duration.sinh	R	Cool.sinh										
Duration.asinh	R	Cool.asinh										
Duration.cosh	R	Cool.cosh										
Duration.acosh	R	Cool.acosh										
Duration.tanh	R	Cool.tanh										
Duration.atanh	R	Cool.atanh										
Duration.log	R	Cool.log										
Duration.exp	R	Cool.exp										
Duration.round	R	Cool.round										
Duration.floor	R	Cool.floor										
Duration.ceiling	R	Cool.ceiling										
Duration.ord	R	Cool.ord										
Duration.chr	R	Cool.chr										
Duration.chars	R	Cool.chars										
Duration.codes	R	Cool.codes										
Duration.flip	R	Cool.flip										
Duration.trim	R	Cool.trim										
Duration.trim-leading	R	Cool.trim-leading										
Duration.trim-trailing	R	Cool.trim-trailing										
Duration.lc	R	Cool.lc										
Duration.uc	R	Cool.uc										
Duration.tc	R	Cool.tc										
Duration.tclc	R	Cool.tclc										
Duration.wordcase	R	Cool.wordcase										
Duration.chop	R	Cool.chop										
Duration.chomp	R	Cool.chomp										
Duration.words	R	Cool.words										
Duration.IO	R	Cool.IO										
Duration.ACCEPTS	R	Any.ACCEPTS										
Duration.any	R	Any.any										
Duration.all	R	Any.all										
Duration.one	R	Any.one										
Duration.none	R	Any.none										
Duration.list	R	Any.list										
Duration.flat	R	Any.flat										
Duration.eager	R	Any.eager										
Duration.elems	R	Any.elems										
Duration.end	R	Any.end										
Duration.Str	R	Mu.Str										
Duration.clone	R	Mu.clone										
Duration.new	R	Mu.new										
Duration.bless	R	Mu.bless										
Duration.CREATE	R	Mu.CREATE										
Duration.print	R	Mu.print										
Duration.say	R	Mu.say										
Duration.ACCEPTS	R	Mu.ACCEPTS										
Duration.WHICH	R	Mu.WHICH										
Duration.WHERE	R	Mu.WHERE										
Duration.WHY	R	Mu.WHY										
Enum	A			Perl 6 Enum							<pre><code>class Enum does Associative { ... }</code></pre>An Enum consists of a key and a value.	http://doc.perl6.org/type/Enum
Enum.key	A			Perl 6 Enum							<pre><code>multi method key(Enum:D:)</code></pre>Returns the key part of the Enum.	http://doc.perl6.org/type/Enum#key
key	D								*[[Enum.key]], returns the key part of the Enum.\n*[[X::Syntax::NegatedPair.key]], returns the key of the pair that caused the error.			
Enum.value	A			Perl 6 Enum							<pre><code>multi method value(Enum:D:)</code></pre>Returns the value part of the Enum.	http://doc.perl6.org/type/Enum#value
value	D								*[[Enum.value]], returns the value part of the Enum.\n*[[Pair.value]], returns the value part of the Pair.			
Enum.invert	A			Perl 6 Enum							<pre><code>multi method invert(Enum:D:) returns Enum:D</code></pre>Returns a new Enum with the original enum's value as the key, and the original enum's key as value.	http://doc.perl6.org/type/Enum#invert
invert	D								*[[Enum.invert]], returns a new Enum with the original enum's value as the key, and the original enum's key as value.\n*[[EnumMap.invert]], returns a list of pairs, but with key and value exchanged.			
Enum.ACCEPTS	R	Any.ACCEPTS										
Enum.any	R	Any.any										
Enum.all	R	Any.all										
Enum.one	R	Any.one										
Enum.none	R	Any.none										
Enum.list	R	Any.list										
Enum.flat	R	Any.flat										
Enum.eager	R	Any.eager										
Enum.elems	R	Any.elems										
Enum.end	R	Any.end										
Enum.Str	R	Mu.Str										
Enum.clone	R	Mu.clone										
Enum.new	R	Mu.new										
Enum.bless	R	Mu.bless										
Enum.CREATE	R	Mu.CREATE										
Enum.print	R	Mu.print										
Enum.say	R	Mu.say										
Enum.ACCEPTS	R	Mu.ACCEPTS										
Enum.WHICH	R	Mu.WHICH										
Enum.WHERE	R	Mu.WHERE										
Enum.WHY	R	Mu.WHY										
EnumMap	A			Perl 6 EnumMap							<pre><code>class EnumMap does Associative is Iterable { }</code></pre>An EnumMap is an immutable mapping from string keys to values of arbitrary types.	http://doc.perl6.org/type/EnumMap
EnumMap.new	A			Perl 6 EnumMap							<pre><code>proto method new(*@, *%) {*}\nmulti method new(*@args, *%pairs)</code></pre>Creates a new EnumMap from a list of alternating keys and values, with the same semantics as described for hash assigning in the Hash documentation.	http://doc.perl6.org/type/EnumMap#new
EnumMap.elems	A			Perl 6 EnumMap							<pre><code>method elems(EnumMap:D:) returns Int:D:</code></pre>Returns the number of pairs stored in the EnumMap.	http://doc.perl6.org/type/EnumMap#elems
EnumMap.ACCEPTS	A			Perl 6 EnumMap							<pre><code>multi method ACCEPTS(EnumMap:D: Positional $topic)\nmulti method ACCEPTS(EnumMap:D: Cool:D     $topic)\nmulti method ACCEPTS(EnumMap:D: Regex      $topic)\nmulti method ACCEPTS(EnumMap:D: Any        $topic)</code></pre>Used in smart-matching if the right-hand side is an EnumMap.	http://doc.perl6.org/type/EnumMap#ACCEPTS
EnumMap.keys	A			Perl 6 EnumMap							<pre><code>method keys(EnumMap:D:) returns List:D</code></pre>Returns a list of all keys in the EnumMap.	http://doc.perl6.org/type/EnumMap#keys
keys	D								*[[Baggy.keys]], \n*[[EnumMap.keys]], returns a list of all keys in the EnumMap.\n*[[List.keys]], returns a list of indexes into the list (e.g., 0..(@list.elems-1)).\n*[[Setty.keys]], returns a list of all elements of the set.			
EnumMap.values	A			Perl 6 EnumMap							<pre><code>method values(EnumMap:D:) returns List:D</code></pre>Returns a list of all values in the EnumMap.	http://doc.perl6.org/type/EnumMap#values
values	D								*[[Baggy.values]], \n*[[EnumMap.values]], returns a list of all values in the EnumMap.\n*[[List.values]], returns a copy of the list.\n*[[Setty.values]], returns a list containing as many True values as the set has elements.			
EnumMap.pairs	A			Perl 6 EnumMap							<pre><code>method pairs(EnumMap:D:) returns List:D</code></pre>Returns a list of all pairs in the EnumMap.	http://doc.perl6.org/type/EnumMap#pairs
pairs	D								*[[EnumMap.pairs]], returns a list of all pairs in the EnumMap.\n*[[List.pairs]], returns a list of pairs, with the indexes as keys and the list values as values.\n*[[Pair.pairs]], returns a list of one Pair, namely this one.			
EnumMap.invert	A			Perl 6 EnumMap							<pre><code>method invert(EnumMap:D:) returns List:D</code></pre>Returns a list of pairs, but with key and value exchanged.	http://doc.perl6.org/type/EnumMap#invert
EnumMap.kv	A			Perl 6 EnumMap							<pre><code>method kv(EnumMap:D:) returns List:D</code></pre>Returns a list of keys and values interleaved.	http://doc.perl6.org/type/EnumMap#kv
kv	D								*[[Baggy.kv]], \n*[[EnumMap.kv]], returns a list of keys and values interleaved.\n*[[List.kv]], returns an interleaved list of indexes and values.\n*[[Pair.kv]], returns a two-element Parcel with the key and value parts o Pair, in that order.\n*[[Setty.kv]], returns a list of the set's elements and True values interleaved.			
EnumMap.abs	R	Cool.abs										
EnumMap.conj	R	Cool.conj										
EnumMap.sqrt	R	Cool.sqrt										
EnumMap.sign	R	Cool.sign										
EnumMap.rand	R	Cool.rand										
EnumMap.sin	R	Cool.sin										
EnumMap.asin	R	Cool.asin										
EnumMap.cos	R	Cool.cos										
EnumMap.acos	R	Cool.acos										
EnumMap.tan	R	Cool.tan										
EnumMap.atan	R	Cool.atan										
EnumMap.atan2	R	Cool.atan2										
EnumMap.sec	R	Cool.sec										
EnumMap.asec	R	Cool.asec										
EnumMap.cosec	R	Cool.cosec										
EnumMap.acosec	R	Cool.acosec										
EnumMap.cotan	R	Cool.cotan										
EnumMap.acotan	R	Cool.acotan										
EnumMap.sinh	R	Cool.sinh										
EnumMap.asinh	R	Cool.asinh										
EnumMap.cosh	R	Cool.cosh										
EnumMap.acosh	R	Cool.acosh										
EnumMap.tanh	R	Cool.tanh										
EnumMap.atanh	R	Cool.atanh										
EnumMap.log	R	Cool.log										
EnumMap.exp	R	Cool.exp										
EnumMap.round	R	Cool.round										
EnumMap.floor	R	Cool.floor										
EnumMap.ceiling	R	Cool.ceiling										
EnumMap.ord	R	Cool.ord										
EnumMap.chr	R	Cool.chr										
EnumMap.chars	R	Cool.chars										
EnumMap.codes	R	Cool.codes										
EnumMap.flip	R	Cool.flip										
EnumMap.trim	R	Cool.trim										
EnumMap.trim-leading	R	Cool.trim-leading										
EnumMap.trim-trailing	R	Cool.trim-trailing										
EnumMap.lc	R	Cool.lc										
EnumMap.uc	R	Cool.uc										
EnumMap.tc	R	Cool.tc										
EnumMap.tclc	R	Cool.tclc										
EnumMap.wordcase	R	Cool.wordcase										
EnumMap.chop	R	Cool.chop										
EnumMap.chomp	R	Cool.chomp										
EnumMap.words	R	Cool.words										
EnumMap.IO	R	Cool.IO										
EnumMap.ACCEPTS	R	Any.ACCEPTS										
EnumMap.any	R	Any.any										
EnumMap.all	R	Any.all										
EnumMap.one	R	Any.one										
EnumMap.none	R	Any.none										
EnumMap.list	R	Any.list										
EnumMap.flat	R	Any.flat										
EnumMap.eager	R	Any.eager										
EnumMap.elems	R	Any.elems										
EnumMap.end	R	Any.end										
EnumMap.Str	R	Mu.Str										
EnumMap.clone	R	Mu.clone										
EnumMap.new	R	Mu.new										
EnumMap.bless	R	Mu.bless										
EnumMap.CREATE	R	Mu.CREATE										
EnumMap.print	R	Mu.print										
EnumMap.say	R	Mu.say										
EnumMap.ACCEPTS	R	Mu.ACCEPTS										
EnumMap.WHICH	R	Mu.WHICH										
EnumMap.WHERE	R	Mu.WHERE										
EnumMap.WHY	R	Mu.WHY										
Exception	A			Perl 6 Exception							<pre><code>class Exception { ... }</code></pre>All exceptions that are placed into the $! variable (or into $_ in CATCH blocks) inherit from Exception.	http://doc.perl6.org/type/Exception
Exception.message	A			Perl 6 Exception							<pre><code>method message(Exception:D:) returns Str:D</code></pre>This is a stub that must be overwritten by subclasses, and should return the exception message.	http://doc.perl6.org/type/Exception#message
message	R	Exception.message										
Exception.backtrace	A			Perl 6 Exception							<pre><code>method backtrace(Exception:D:) returns Backtrace:D</code></pre>Returns the backtrace associated with the exception.	http://doc.perl6.org/type/Exception#backtrace
backtrace	R	Exception.backtrace										
Exception.throw	A			Perl 6 Exception							<pre><code>method throw(Exception:D:)</code></pre>Throws the exception.	http://doc.perl6.org/type/Exception#throw
throw	R	Exception.throw										
Exception.rethrow	A			Perl 6 Exception							<pre><code>method rethrow(Exception:D:)</code></pre>Rethrows an exception that has already been thrown at least once.	http://doc.perl6.org/type/Exception#rethrow
rethrow	R	Exception.rethrow										
Exception.fail	A			Perl 6 Exception							<pre><code>method fail(Exception:D:)</code></pre>Same as fail $exception; i.e., it exits the calling Routine and returns the exception wrapped in a Failure object.	http://doc.perl6.org/type/Exception#fail
Exception.gist	A			Perl 6 Exception							<pre><code>multi method gist(Exception:D:)</code></pre>Returns whatever the exception printer should produce for this exception.	http://doc.perl6.org/type/Exception#gist
Exception.ACCEPTS	R	Any.ACCEPTS										
Exception.any	R	Any.any										
Exception.all	R	Any.all										
Exception.one	R	Any.one										
Exception.none	R	Any.none										
Exception.list	R	Any.list										
Exception.flat	R	Any.flat										
Exception.eager	R	Any.eager										
Exception.elems	R	Any.elems										
Exception.end	R	Any.end										
Exception.Str	R	Mu.Str										
Exception.clone	R	Mu.clone										
Exception.new	R	Mu.new										
Exception.bless	R	Mu.bless										
Exception.CREATE	R	Mu.CREATE										
Exception.print	R	Mu.print										
Exception.say	R	Mu.say										
Exception.ACCEPTS	R	Mu.ACCEPTS										
Exception.WHICH	R	Mu.WHICH										
Exception.WHERE	R	Mu.WHERE										
Exception.WHY	R	Mu.WHY										
Failure	A			Perl 6 Failure							<pre><code>class Failure { }</code></pre>A Failure is a soft or unthrown exception, usually generated by calling &amp;fail.	http://doc.perl6.org/type/Failure
Failure.handled	A			Perl 6 Failure							<pre><code>method handled(Failure:D:) returns Bool:D</code></pre>Returns True for handled failures, False otherwise.	http://doc.perl6.org/type/Failure#handled
handled	R	Failure.handled										
Failure.exception	A			Perl 6 Failure							<pre><code>method handled(Failure:D:) returns Exception</code></pre>Returns the Exception object that the failure wraps.	http://doc.perl6.org/type/Failure#exception
exception	R	Failure.exception										
Failure.Bool	A			Perl 6 Failure							<pre><code>multi method Bool(Failure:D:) returns Bool:D</code></pre>Returns False, and marks the failure as handled.	http://doc.perl6.org/type/Failure#Bool
Failure.defined	A			Perl 6 Failure							<pre><code>multi method defined(Failure:D:) returns Bool:D</code></pre>Returns False (failures are officially undefined), and marks the failure as handled.	http://doc.perl6.org/type/Failure#defined
defined	D								*[[Failure.defined]], returns False (failures are officially undefined), and marks the failure as handled.\n*[[Mu.defined]], returns False on the type object, and True otherwise.			
Failure.ACCEPTS	R	Any.ACCEPTS										
Failure.any	R	Any.any										
Failure.all	R	Any.all										
Failure.one	R	Any.one										
Failure.none	R	Any.none										
Failure.list	R	Any.list										
Failure.flat	R	Any.flat										
Failure.eager	R	Any.eager										
Failure.elems	R	Any.elems										
Failure.end	R	Any.end										
Failure.Str	R	Mu.Str										
Failure.clone	R	Mu.clone										
Failure.new	R	Mu.new										
Failure.bless	R	Mu.bless										
Failure.CREATE	R	Mu.CREATE										
Failure.print	R	Mu.print										
Failure.say	R	Mu.say										
Failure.ACCEPTS	R	Mu.ACCEPTS										
Failure.WHICH	R	Mu.WHICH										
Failure.WHERE	R	Mu.WHERE										
Failure.WHY	R	Mu.WHY										
FatRat	A			Perl 6 FatRat							<pre><code>class FatRat is Cool does Rational[Int, Int]</code></pre>A FatRat is a rational number stored with arbitrary size numerator and denominator.	http://doc.perl6.org/type/FatRat
FatRat.new	R	Rational.new										
FatRat.numerator	R	Rational.numerator										
FatRat.denominator	R	Rational.denominator										
FatRat.nude	R	Rational.nude										
FatRat.norm	R	Rational.norm										
FatRat.base-repeating	R	Rational.base-repeating										
FatRat.Rat	R	Real.Rat										
FatRat.sign	R	Real.sign										
FatRat.round	R	Real.round										
FatRat.floor	R	Real.floor										
FatRat.ceiling	R	Real.ceiling										
FatRat.truncate	R	Real.truncate										
FatRat.base	R	Real.base										
FatRat.Real	R	Numeric.Real										
FatRat.Int	R	Numeric.Int										
FatRat.Rat	R	Numeric.Rat										
FatRat.Num	R	Numeric.Num										
FatRat.narrow	R	Numeric.narrow										
FatRat.ACCEPTS	R	Numeric.ACCEPTS										
FatRat.roots	R	Numeric.roots										
FatRat.conj	R	Numeric.conj										
FatRat.Bool	R	Numeric.Bool										
FatRat.succ	R	Numeric.succ										
FatRat.pred	R	Numeric.pred										
FatRat.abs	R	Cool.abs										
FatRat.conj	R	Cool.conj										
FatRat.sqrt	R	Cool.sqrt										
FatRat.sign	R	Cool.sign										
FatRat.rand	R	Cool.rand										
FatRat.sin	R	Cool.sin										
FatRat.asin	R	Cool.asin										
FatRat.cos	R	Cool.cos										
FatRat.acos	R	Cool.acos										
FatRat.tan	R	Cool.tan										
FatRat.atan	R	Cool.atan										
FatRat.atan2	R	Cool.atan2										
FatRat.sec	R	Cool.sec										
FatRat.asec	R	Cool.asec										
FatRat.cosec	R	Cool.cosec										
FatRat.acosec	R	Cool.acosec										
FatRat.cotan	R	Cool.cotan										
FatRat.acotan	R	Cool.acotan										
FatRat.sinh	R	Cool.sinh										
FatRat.asinh	R	Cool.asinh										
FatRat.cosh	R	Cool.cosh										
FatRat.acosh	R	Cool.acosh										
FatRat.tanh	R	Cool.tanh										
FatRat.atanh	R	Cool.atanh										
FatRat.log	R	Cool.log										
FatRat.exp	R	Cool.exp										
FatRat.round	R	Cool.round										
FatRat.floor	R	Cool.floor										
FatRat.ceiling	R	Cool.ceiling										
FatRat.ord	R	Cool.ord										
FatRat.chr	R	Cool.chr										
FatRat.chars	R	Cool.chars										
FatRat.codes	R	Cool.codes										
FatRat.flip	R	Cool.flip										
FatRat.trim	R	Cool.trim										
FatRat.trim-leading	R	Cool.trim-leading										
FatRat.trim-trailing	R	Cool.trim-trailing										
FatRat.lc	R	Cool.lc										
FatRat.uc	R	Cool.uc										
FatRat.tc	R	Cool.tc										
FatRat.tclc	R	Cool.tclc										
FatRat.wordcase	R	Cool.wordcase										
FatRat.chop	R	Cool.chop										
FatRat.chomp	R	Cool.chomp										
FatRat.words	R	Cool.words										
FatRat.IO	R	Cool.IO										
FatRat.ACCEPTS	R	Any.ACCEPTS										
FatRat.any	R	Any.any										
FatRat.all	R	Any.all										
FatRat.one	R	Any.one										
FatRat.none	R	Any.none										
FatRat.list	R	Any.list										
FatRat.flat	R	Any.flat										
FatRat.eager	R	Any.eager										
FatRat.elems	R	Any.elems										
FatRat.end	R	Any.end										
FatRat.Str	R	Mu.Str										
FatRat.clone	R	Mu.clone										
FatRat.new	R	Mu.new										
FatRat.bless	R	Mu.bless										
FatRat.CREATE	R	Mu.CREATE										
FatRat.print	R	Mu.print										
FatRat.say	R	Mu.say										
FatRat.ACCEPTS	R	Mu.ACCEPTS										
FatRat.WHICH	R	Mu.WHICH										
FatRat.WHERE	R	Mu.WHERE										
FatRat.WHY	R	Mu.WHY										
Grammar	A			Perl 6 Grammar							<pre><code>class Grammar is Cursor { ... }</code></pre>Every type declared with grammar (which doesn't explicitly states its superclass) becomes a subclass of Grammar.	http://doc.perl6.org/type/Grammar
Grammar.parse	A			Perl 6 Grammar							<pre><code>method parse($target, :$rule = 'TOP', Parcel :$args = (), Mu :$actions, *%opts)</code></pre>Parses the $target (which will be coerced to Str if it isn't one), using $rule as the starting rule.	http://doc.perl6.org/type/Grammar#parse
parse	R	Grammar.parse										
Grammar.subparse	A			Perl 6 Grammar							<pre><code>method subparse($target, :$rule = 'TOP', Parcel :$args = (), Mu :$actions, *%opts)</code></pre>Does exactly the same as method parse, except that cursor doesn't have to reach the end of the string to succeed.	http://doc.perl6.org/type/Grammar#subparse
subparse	R	Grammar.subparse										
Grammar.parsefile	A			Perl 6 Grammar							<pre><code>method parsefile(Cool $filename, *%opts);</code></pre>Reads file $filename, and parses it.	http://doc.perl6.org/type/Grammar#parsefile
parsefile	R	Grammar.parsefile										
Grammar.ACCEPTS	R	Any.ACCEPTS										
Grammar.any	R	Any.any										
Grammar.all	R	Any.all										
Grammar.one	R	Any.one										
Grammar.none	R	Any.none										
Grammar.list	R	Any.list										
Grammar.flat	R	Any.flat										
Grammar.eager	R	Any.eager										
Grammar.elems	R	Any.elems										
Grammar.end	R	Any.end										
Grammar.Str	R	Mu.Str										
Grammar.clone	R	Mu.clone										
Grammar.new	R	Mu.new										
Grammar.bless	R	Mu.bless										
Grammar.CREATE	R	Mu.CREATE										
Grammar.print	R	Mu.print										
Grammar.say	R	Mu.say										
Grammar.ACCEPTS	R	Mu.ACCEPTS										
Grammar.WHICH	R	Mu.WHICH										
Grammar.WHERE	R	Mu.WHERE										
Grammar.WHY	R	Mu.WHY										
Hash	A			Perl 6 Hash							<pre><code>class Hash is EnumMap { }</code></pre>A Hash is a mutable mapping from keys to values (called dictionary, hash table or map in other programming languages).	http://doc.perl6.org/type/Hash
Hash.push	A			Perl 6 Hash							<pre><code>multi method push(Hash:D: *@new)</code></pre>Adds the @new elements to the hash with the same semantics as hash assignment, but with three exceptions:	http://doc.perl6.org/type/Hash#push
push	D								*[[Hash.push]], adds the @new elements to the hash with the same semantics as hash assignment, but with three exceptions:\n*[[List.push]], adds the @values to the end of the list, and returns the modified list.			
Hash.new	R	EnumMap.new										
Hash.elems	R	EnumMap.elems										
Hash.ACCEPTS	R	EnumMap.ACCEPTS										
Hash.keys	R	EnumMap.keys										
Hash.values	R	EnumMap.values										
Hash.pairs	R	EnumMap.pairs										
Hash.invert	R	EnumMap.invert										
Hash.kv	R	EnumMap.kv										
Hash.abs	R	Cool.abs										
Hash.conj	R	Cool.conj										
Hash.sqrt	R	Cool.sqrt										
Hash.sign	R	Cool.sign										
Hash.rand	R	Cool.rand										
Hash.sin	R	Cool.sin										
Hash.asin	R	Cool.asin										
Hash.cos	R	Cool.cos										
Hash.acos	R	Cool.acos										
Hash.tan	R	Cool.tan										
Hash.atan	R	Cool.atan										
Hash.atan2	R	Cool.atan2										
Hash.sec	R	Cool.sec										
Hash.asec	R	Cool.asec										
Hash.cosec	R	Cool.cosec										
Hash.acosec	R	Cool.acosec										
Hash.cotan	R	Cool.cotan										
Hash.acotan	R	Cool.acotan										
Hash.sinh	R	Cool.sinh										
Hash.asinh	R	Cool.asinh										
Hash.cosh	R	Cool.cosh										
Hash.acosh	R	Cool.acosh										
Hash.tanh	R	Cool.tanh										
Hash.atanh	R	Cool.atanh										
Hash.log	R	Cool.log										
Hash.exp	R	Cool.exp										
Hash.round	R	Cool.round										
Hash.floor	R	Cool.floor										
Hash.ceiling	R	Cool.ceiling										
Hash.ord	R	Cool.ord										
Hash.chr	R	Cool.chr										
Hash.chars	R	Cool.chars										
Hash.codes	R	Cool.codes										
Hash.flip	R	Cool.flip										
Hash.trim	R	Cool.trim										
Hash.trim-leading	R	Cool.trim-leading										
Hash.trim-trailing	R	Cool.trim-trailing										
Hash.lc	R	Cool.lc										
Hash.uc	R	Cool.uc										
Hash.tc	R	Cool.tc										
Hash.tclc	R	Cool.tclc										
Hash.wordcase	R	Cool.wordcase										
Hash.chop	R	Cool.chop										
Hash.chomp	R	Cool.chomp										
Hash.words	R	Cool.words										
Hash.IO	R	Cool.IO										
Hash.ACCEPTS	R	Any.ACCEPTS										
Hash.any	R	Any.any										
Hash.all	R	Any.all										
Hash.one	R	Any.one										
Hash.none	R	Any.none										
Hash.list	R	Any.list										
Hash.flat	R	Any.flat										
Hash.eager	R	Any.eager										
Hash.elems	R	Any.elems										
Hash.end	R	Any.end										
Hash.Str	R	Mu.Str										
Hash.clone	R	Mu.clone										
Hash.new	R	Mu.new										
Hash.bless	R	Mu.bless										
Hash.CREATE	R	Mu.CREATE										
Hash.print	R	Mu.print										
Hash.say	R	Mu.say										
Hash.ACCEPTS	R	Mu.ACCEPTS										
Hash.WHICH	R	Mu.WHICH										
Hash.WHERE	R	Mu.WHERE										
Hash.WHY	R	Mu.WHY										
IO	A			Perl 6 IO							<pre><code>role IO { }</code></pre>The IO role provides no functionality itself, and moreso just marks if a particular object relates to input/output.	http://doc.perl6.org/type/IO
IO.print	A			Perl 6 IO							Print the given text on $*OUT (standard output), e.g.:	http://doc.perl6.org/type/IO#print
print	D								*[[IO.print]], print the given text on $*OUT (standard output), e.g.:\n*[[IO::Handle.print]], text writing; writes the given @text to the filehandle.\n*[[Mu.print]], prints value to $*OUT after stringification using .Str method without newline at end.\n*[[Proc::Async.print]], write the text data in $str to the standard input stream of the external program, encoding it as UTF-8.			
IO.say	A			Perl 6 IO							Print the given text, followed by a newline "&#92;n" on $*OUT (standard output).	http://doc.perl6.org/type/IO#say
say	D								*[[IO.say]], print the given text, followed by a newline "&#92;n" on $*OUT (standard output).\n*[[Mu.say]], prints value to $*OUT after stringification using .gist method with newline at end.\n*[[Proc::Async.say]], calls method gist on the $output, adds a newline, encodes it as UTF-8, and sends it to the standard input stream of the external program, encoding it as UTF-8.			
IO.note	A			Perl 6 IO							Print the given text, followed by a newline "&#92;n" on $*ERR (standard error).	http://doc.perl6.org/type/IO#note
note	R	IO.note										
IO.dd	A			Perl 6 IO							The Tiny Data Dumper.	http://doc.perl6.org/type/IO#dd
dd	R	IO.dd										
IO.prompt	A			Perl 6 IO							<pre><code>sub prompt($msg)</code></pre>Prints $msg to the standard output and waits for the user to type in something and finish with an ENTER.	http://doc.perl6.org/type/IO#prompt
prompt	R	IO.prompt										
IO.open	A			Perl 6 IO							<pre><code>my $fh = open(IO::Path() $path, :$r, :$w, :$a, :$rw,\n              :$bin, :$enc, :$nl, :$chomp)</code></pre>Opens the $path (by default in text mode) with the given options, returning an IO::Handle object.	http://doc.perl6.org/type/IO#open
open	D								*[[IO.open]], opens the $path (by default in text mode) with the given options, returning an IO::Handle object.\n*[[IO::Path.open]], opens the path as a file; the named options control the mode, and are the same as the open function accepts.			
IO.close	A			Perl 6 IO							To close an open file handle, simply call its close method:	http://doc.perl6.org/type/IO#close
IO.dir	A			Perl 6 IO							<pre><code>sub dir(Cool $path = '.', Mu :$test = none('.', '..'))</code></pre>Returns a list of IO::File and IO::Path objects for the files and directories found in the $path.	http://doc.perl6.org/type/IO#dir
dir	D								*[[IO.dir]], returns a list of IO::File and IO::Path objects for the files and directories found in the $path.\n*[[IO::Path.dir]], tries to interpret the path as a directory, and returns a lazy list of IO::Path objects that match the $test smart-matcher.			
IO.slurp	A			Perl 6 IO							Slurps the contents of the entire file into a Str (or Buf if :bin).	http://doc.perl6.org/type/IO#slurp
slurp	D								*[[IO.slurp]], slurps the contents of the entire file into a Str (or Buf if :bin).\n*[[IO::Handle.slurp]], 			
IO.spurt	A			Perl 6 IO							<pre><code>sub spurt ($where, $what,\n    Str  :$enc        = $*ENC,\n    Bool :append      = False,\n    Bool :$createonly = False,\n    --&gt; Bool ) is export</code></pre>Writes the indicated contents (2nd positional parameter, $what) to the location indicated by the first positional parameter, $where (which can either be a string or an IO::Path object).	http://doc.perl6.org/type/IO#spurt
spurt	D								*[[IO.spurt]], writes the indicated contents (2nd positional parameter, $what) to the location indicated by the first positional parameter, $where (which can either be a string or an IO::Path object).\n*[[IO::Handle.spurt]], 			
IO.mkdir	A			Perl 6 IO							<pre><code>multi sub mkdir(Int:D $mode, *@dirnames, :$CWD = $*CWD);\nmulti sub mkdir($path, $mode = 0o777, :$CWD = $*CWD);</code></pre>Creates one or more directories with the permissions specified as an integer (thought still subject to umask).	http://doc.perl6.org/type/IO#mkdir
mkdir	R	IO.mkdir										
IO.run	A			Perl 6 IO							<pre><code>sub run(*@args ($, *@)) returns Proc::Status:D</code></pre>Runs an external command without involving a shell (if possible).	http://doc.perl6.org/type/IO#run
run	D								*[[IO.run]], runs an external command without involving a shell (if possible).\n*[[Thread.run]], runs the thread, and returns the invocant.			
IO.shell	A			Perl 6 IO							<pre><code>sub shell($cmd) returns Proc::Status:D</code></pre>Runs a command through the system shell.	http://doc.perl6.org/type/IO#shell
shell	R	IO.shell										
IO::FileTestable.operators	A			Perl 6 IO::FileTestable							-e -f	http://doc.perl6.org/type/IO%3A%3AFileTestable#operators
operators	R	IO::FileTestable.operators										
IO::FileTestable.retrieval	A			Perl 6 IO::FileTestable							There are also 3 methods for fetching the 3 timestamps of a file (inode), on Operating Systems where these are available:	http://doc.perl6.org/type/IO%3A%3AFileTestable#retrieval
retrieval	R	IO::FileTestable.retrieval										
IO::FileTestable.modified	A			Perl 6 IO::FileTestable							Return an Instant object representing the timestamp when the file was last modified.	http://doc.perl6.org/type/IO%3A%3AFileTestable#modified
modified	R	IO::FileTestable.modified										
IO::FileTestable.accessed	A			Perl 6 IO::FileTestable							Return an Instant object representing the timestamp when the file was last accessed.	http://doc.perl6.org/type/IO%3A%3AFileTestable#accessed
accessed	R	IO::FileTestable.accessed										
IO::FileTestable.changed	A			Perl 6 IO::FileTestable							Return an Instant object representing the timestamp when the inode was last changed.	http://doc.perl6.org/type/IO%3A%3AFileTestable#changed
changed	R	IO::FileTestable.changed										
IO::FileTestable.close	R	IO.close										
IO::Handle.get	A			Perl 6 IO::Handle							Reads a single line from the input stream (usually the Standard Input or a file).	http://doc.perl6.org/type/IO%3A%3AHandle#get
get	D								*[[IO::Handle.get]], reads a single line from the input stream (usually the Standard Input or a file).\n*[[IO::Socket::INET.get]], reads a line from the socket and returns it.			
IO::Handle.getc	A			Perl 6 IO::Handle							Read a single character from the input stream.	http://doc.perl6.org/type/IO%3A%3AHandle#getc
getc	R	IO::Handle.getc										
IO::Handle.eof	A			Perl 6 IO::Handle							Returns Bool::True if the read operations have exhausted the content of the file.	http://doc.perl6.org/type/IO%3A%3AHandle#eof
eof	R	IO::Handle.eof										
IO::Handle.lines	A			Perl 6 IO::Handle							<pre><code>method lines($limit = Inf)</code></pre>Return a lazy list of the file's lines read via get, limited to $limit lines.	http://doc.perl6.org/type/IO%3A%3AHandle#lines
lines	D								*[[IO::Handle.lines]], return a lazy list of the file's lines read via get, limited to $limit lines.\n*[[IO::Socket::INET.lines]], returns a lazy list of lines read from the socket.\n*[[Str.lines]], returns a list of lines (without trailing newline characters), i.e. 			
IO::Handle.print	A			Perl 6 IO::Handle							<pre><code>method print(*@text --&gt; Bool)</code></pre>Text writing; writes the given @text to the filehandle.	http://doc.perl6.org/type/IO%3A%3AHandle#print
IO::Handle.read	A			Perl 6 IO::Handle							<pre><code>method read(IO::Handle:D: Int(Cool:D) $bytes --&gt; Blob)</code></pre>Binary reading; reads and returns $bytes bytes from the handle	http://doc.perl6.org/type/IO%3A%3AHandle#read
read	D								*[[IO::Handle.read]], binary reading; reads and returns $bytes bytes from the handle\n*[[IO::Socket.read]], reads $bytes bytes from the socket and returns them in a Blob.			
IO::Handle.write	A			Perl 6 IO::Handle							<pre><code>method write(IO::Handle:D: Blob:D $buf)</code></pre>Binary writing; writes $buf to the filehandle.	http://doc.perl6.org/type/IO%3A%3AHandle#write
write	D								*[[IO::Handle.write]], binary writing; writes $buf to the filehandle.\n*[[IO::Socket.write]], writes the supplied buffer to the socket, thus sending it to other end of the connection.\n*[[Proc::Async.write]], write the binary data in $b to the standard input stream of the external program.			
IO::Handle.close	A			Perl 6 IO::Handle							Will close a previously opened filehandle.	http://doc.perl6.org/type/IO%3A%3AHandle#close
IO::Handle.close	R	IO.close										
IO::Handle.ACCEPTS	R	Any.ACCEPTS										
IO::Handle.any	R	Any.any										
IO::Handle.all	R	Any.all										
IO::Handle.one	R	Any.one										
IO::Handle.none	R	Any.none										
IO::Handle.list	R	Any.list										
IO::Handle.flat	R	Any.flat										
IO::Handle.eager	R	Any.eager										
IO::Handle.elems	R	Any.elems										
IO::Handle.end	R	Any.end										
IO::Handle.Str	R	Mu.Str										
IO::Handle.clone	R	Mu.clone										
IO::Handle.new	R	Mu.new										
IO::Handle.bless	R	Mu.bless										
IO::Handle.CREATE	R	Mu.CREATE										
IO::Handle.print	R	Mu.print										
IO::Handle.say	R	Mu.say										
IO::Handle.ACCEPTS	R	Mu.ACCEPTS										
IO::Handle.WHICH	R	Mu.WHICH										
IO::Handle.WHERE	R	Mu.WHERE										
IO::Handle.WHY	R	Mu.WHY										
IO::Path	A			Perl 6 IO::Path							<pre><code>class IO::Path is Cool does IO::FileTestable { }</code></pre>Built-in class for file and directory paths.	http://doc.perl6.org/type/IO%3A%3APath
IO::Path.new	A			Perl 6 IO::Path							<pre><code>multi method new(Str:D $path)\nmulti method new(:$basename!, :$dirname = '.', :$volume = '')</code></pre>Creates a new IO::Path object from a path string (which is being parsed for volume, directory name and basename), or from volume, directory name and basename passed as named arguments.	http://doc.perl6.org/type/IO%3A%3APath#new
IO::Path.abspath	A			Perl 6 IO::Path							Retturns the absolute path as a string.	http://doc.perl6.org/type/IO%3A%3APath#abspath
abspath	R	IO::Path.abspath										
IO::Path.basename	A			Perl 6 IO::Path							<pre><code>method basename(IO::Path:D)</code></pre>Returns the basename part of the path object.	http://doc.perl6.org/type/IO%3A%3APath#basename
basename	R	IO::Path.basename										
IO::Path.dirname	A			Perl 6 IO::Path							<pre><code>method dirname(IO::Path:D)</code></pre>Returns the directory name portion of the path object.	http://doc.perl6.org/type/IO%3A%3APath#dirname
dirname	R	IO::Path.dirname										
IO::Path.volume	A			Perl 6 IO::Path							<pre><code>method volume(IO::Path:D)</code></pre>Returns the volume portion of the path object.	http://doc.perl6.org/type/IO%3A%3APath#volume
volume	R	IO::Path.volume										
IO::Path.parts	A			Perl 6 IO::Path							<pre><code>method parts(IO::Path:D) returns Hash</code></pre>Returns a hash with the keys dirname, path and volume, and as values the return values of the methods with the same names.	http://doc.perl6.org/type/IO%3A%3APath#parts
parts	D								*[[IO::Path.parts]], returns a hash with the keys dirname, path and volume, and as values the return values of the methods with the same names.\n*[[Version.parts]], returns the list of parts that make up this Version object			
IO::Path.path	A			Perl 6 IO::Path							<pre><code>method path(IO::Path:D:)</code></pre>Returns the invocant.	http://doc.perl6.org/type/IO%3A%3APath#path
path	D								*[[IO::Path.path]], returns the invocant.\n*[[Proc::Async.path]], returns the name and/or path of the external program that was passed to the new method as first argument.\n*[[X::IO::Chdir.path]], returns the path that was passed to the failed chdir call.\n*[[X::IO::Dir.path]], returns the path that &amp;dir failed to read.\n*[[X::IO::Mkdir.path]], returns the path that the mkdir operation failed to create.\n*[[X::IO::Rmdir.path]], returns the path &amp;rmdir failed to remove\n*[[X::IO::Unlink.path]], returns the path that &amp;unlink failed to delete.			
IO::Path.Str	A			Perl 6 IO::Path							<pre><code>method Str(IO::Path:D:)</code></pre>Returns the full path as a string.	http://doc.perl6.org/type/IO%3A%3APath#Str
IO::Path.open	A			Perl 6 IO::Path							<pre><code>method open(IO::Path:D: *%opts)</code></pre>Opens the path as a file; the named options control the mode, and are the same as the open function accepts.	http://doc.perl6.org/type/IO%3A%3APath#open
IO::Path.watch	A			Perl 6 IO::Path							<pre><code>method watch(IO::Path:D: --&gt; Supply)</code></pre>Watches the path for modifications.	http://doc.perl6.org/type/IO%3A%3APath#watch
watch	R	IO::Path.watch										
IO::Path.is-absolute	A			Perl 6 IO::Path							<pre><code>method is-absolute(IO::Path:D: --&gt; Bool:D)</code></pre>Returns True if the path is an absolute path, and False otherwise.	http://doc.perl6.org/type/IO%3A%3APath#is-absolute
is-absolute	R	IO::Path.is-absolute										
IO::Path.is-relative	A			Perl 6 IO::Path							<pre><code>method is-relative(IO::Path:D: --&gt; Bool:D)</code></pre>Returns True if the path is a relative path, and False otherwise.	http://doc.perl6.org/type/IO%3A%3APath#is-relative
is-relative	R	IO::Path.is-relative										
IO::Path.absolute	A			Perl 6 IO::Path							<pre><code>method absolute (IO::Path:D: $base = ~$*CWD --&gt; IO::Path:D)</code></pre>Returns a new IO::Path object that is an absolute path, based on $base.	http://doc.perl6.org/type/IO%3A%3APath#absolute
absolute	R	IO::Path.absolute										
IO::Path.relative	A			Perl 6 IO::Path							<pre><code>method relative (IO::Path:D: $base = ~$*CWD --&gt; IO::Path:D)</code></pre>Returns a new IO::Path object relative to the $base path.	http://doc.perl6.org/type/IO%3A%3APath#relative
relative	R	IO::Path.relative										
IO::Path.dir	A			Perl 6 IO::Path							<pre><code>method dir(IO::Path:D: Mu :$test = none('.', '..'))</code></pre>Tries to interpret the path as a directory, and returns a lazy list of IO::Path objects that match the $test smart-matcher.	http://doc.perl6.org/type/IO%3A%3APath#dir
IO::Path.chmod	A			Perl 6 IO::Path							<pre><code>method chmod(IO::Path:D: Int:D $mode)</code></pre>Changes the POSIX permissions of a file to $mode.	http://doc.perl6.org/type/IO%3A%3APath#chmod
chmod	R	IO::Path.chmod										
IO::Path.abs	R	Cool.abs										
IO::Path.conj	R	Cool.conj										
IO::Path.sqrt	R	Cool.sqrt										
IO::Path.sign	R	Cool.sign										
IO::Path.rand	R	Cool.rand										
IO::Path.sin	R	Cool.sin										
IO::Path.asin	R	Cool.asin										
IO::Path.cos	R	Cool.cos										
IO::Path.acos	R	Cool.acos										
IO::Path.tan	R	Cool.tan										
IO::Path.atan	R	Cool.atan										
IO::Path.atan2	R	Cool.atan2										
IO::Path.sec	R	Cool.sec										
IO::Path.asec	R	Cool.asec										
IO::Path.cosec	R	Cool.cosec										
IO::Path.acosec	R	Cool.acosec										
IO::Path.cotan	R	Cool.cotan										
IO::Path.acotan	R	Cool.acotan										
IO::Path.sinh	R	Cool.sinh										
IO::Path.asinh	R	Cool.asinh										
IO::Path.cosh	R	Cool.cosh										
IO::Path.acosh	R	Cool.acosh										
IO::Path.tanh	R	Cool.tanh										
IO::Path.atanh	R	Cool.atanh										
IO::Path.log	R	Cool.log										
IO::Path.exp	R	Cool.exp										
IO::Path.round	R	Cool.round										
IO::Path.floor	R	Cool.floor										
IO::Path.ceiling	R	Cool.ceiling										
IO::Path.ord	R	Cool.ord										
IO::Path.chr	R	Cool.chr										
IO::Path.chars	R	Cool.chars										
IO::Path.codes	R	Cool.codes										
IO::Path.flip	R	Cool.flip										
IO::Path.trim	R	Cool.trim										
IO::Path.trim-leading	R	Cool.trim-leading										
IO::Path.trim-trailing	R	Cool.trim-trailing										
IO::Path.lc	R	Cool.lc										
IO::Path.uc	R	Cool.uc										
IO::Path.tc	R	Cool.tc										
IO::Path.tclc	R	Cool.tclc										
IO::Path.wordcase	R	Cool.wordcase										
IO::Path.chop	R	Cool.chop										
IO::Path.chomp	R	Cool.chomp										
IO::Path.words	R	Cool.words										
IO::Path.IO	R	Cool.IO										
IO::Path.ACCEPTS	R	Any.ACCEPTS										
IO::Path.any	R	Any.any										
IO::Path.all	R	Any.all										
IO::Path.one	R	Any.one										
IO::Path.none	R	Any.none										
IO::Path.list	R	Any.list										
IO::Path.flat	R	Any.flat										
IO::Path.eager	R	Any.eager										
IO::Path.elems	R	Any.elems										
IO::Path.end	R	Any.end										
IO::Path.Str	R	Mu.Str										
IO::Path.clone	R	Mu.clone										
IO::Path.new	R	Mu.new										
IO::Path.bless	R	Mu.bless										
IO::Path.CREATE	R	Mu.CREATE										
IO::Path.print	R	Mu.print										
IO::Path.say	R	Mu.say										
IO::Path.ACCEPTS	R	Mu.ACCEPTS										
IO::Path.WHICH	R	Mu.WHICH										
IO::Path.WHERE	R	Mu.WHERE										
IO::Path.WHY	R	Mu.WHY										
IO::Socket	A			Perl 6 IO::Socket							<pre><code>role IO::Socket does IO { ... }</code></pre>IO::Socket contains read and write methods for sockets.	http://doc.perl6.org/type/IO%3A%3ASocket
IO::Socket.recv	A			Perl 6 IO::Socket							<pre><code>method recv(IO::Socket:D: Cool $elems = Inf)</code></pre>Receive a package and return it, either as a Blob or a Str (depending on whether the socket is binary).	http://doc.perl6.org/type/IO%3A%3ASocket#recv
recv	R	IO::Socket.recv										
IO::Socket.read	A			Perl 6 IO::Socket							<pre><code>method read(IO::Socket:D: Int(Cool) $bytes)</code></pre>Reads $bytes bytes from the socket and returns them in a Blob.	http://doc.perl6.org/type/IO%3A%3ASocket#read
IO::Socket.send	A			Perl 6 IO::Socket							<pre><code>method send(IO::Socket:D: Str(Cool) $string)</code></pre>Writes the supplied string to the socket, thus sending it to other end of the connection.	http://doc.perl6.org/type/IO%3A%3ASocket#send
IO::Socket.write	A			Perl 6 IO::Socket							<pre><code>method write(IO::Socket:D: Blob:D $buf)</code></pre>Writes the supplied buffer to the socket, thus sending it to other end of the connection.	http://doc.perl6.org/type/IO%3A%3ASocket#write
IO::Socket.close	A			Perl 6 IO::Socket							<pre><code>method close(IO::Socket:D)</code></pre>Closes the socket.	http://doc.perl6.org/type/IO%3A%3ASocket#close
IO::Socket.close	R	IO.close										
IO::Socket::INET	A			Perl 6 IO::Socket::INET							<pre><code>class IO::Socket::INET does IO::Socket { ... }</code></pre>IO::Socket::INET provides TCP sockets, both the server and the client side.	http://doc.perl6.org/type/IO%3A%3ASocket%3A%3AINET
IO::Socket::INET.new	A			Perl 6 IO::Socket::INET							<pre><code>multi method new(\n        :$host,\n        :$port,\n        :$family = 2,\n        :$encoding = 'utf-8',\n        :input-line-separator = "&#92;n",\n    ) returns IO::Socket::INET:D\nmulti method new(\n        :$localhost,\n        :$localport,\n        :$family = 2,\n        :$listen,\n        :$encoding = 'utf-8',\n        :input-line-separator = "&#92;n",\n    ) returns IO::Socket::INET:D</code></pre>Creates a new socket.	http://doc.perl6.org/type/IO%3A%3ASocket%3A%3AINET#new
IO::Socket::INET.get	A			Perl 6 IO::Socket::INET							<pre><code>method get()</code></pre>Reads a line from the socket and returns it.	http://doc.perl6.org/type/IO%3A%3ASocket%3A%3AINET#get
IO::Socket::INET.lines	A			Perl 6 IO::Socket::INET							<pre><code>method lines()</code></pre>Returns a lazy list of lines read from the socket.	http://doc.perl6.org/type/IO%3A%3ASocket%3A%3AINET#lines
IO::Socket::INET.accept	A			Perl 6 IO::Socket::INET							<pre><code>method accept()</code></pre>In listen/server mode, waits for a new incomming connection, and returns it.	http://doc.perl6.org/type/IO%3A%3ASocket%3A%3AINET#accept
accept	R	IO::Socket::INET.accept										
IO::Socket::INET.recv	R	IO::Socket.recv										
IO::Socket::INET.read	R	IO::Socket.read										
IO::Socket::INET.send	R	IO::Socket.send										
IO::Socket::INET.write	R	IO::Socket.write										
IO::Socket::INET.close	R	IO::Socket.close										
IO::Socket::INET.close	R	IO.close										
IO::Socket::INET.ACCEPTS	R	Any.ACCEPTS										
IO::Socket::INET.any	R	Any.any										
IO::Socket::INET.all	R	Any.all										
IO::Socket::INET.one	R	Any.one										
IO::Socket::INET.none	R	Any.none										
IO::Socket::INET.list	R	Any.list										
IO::Socket::INET.flat	R	Any.flat										
IO::Socket::INET.eager	R	Any.eager										
IO::Socket::INET.elems	R	Any.elems										
IO::Socket::INET.end	R	Any.end										
IO::Socket::INET.Str	R	Mu.Str										
IO::Socket::INET.clone	R	Mu.clone										
IO::Socket::INET.new	R	Mu.new										
IO::Socket::INET.bless	R	Mu.bless										
IO::Socket::INET.CREATE	R	Mu.CREATE										
IO::Socket::INET.print	R	Mu.print										
IO::Socket::INET.say	R	Mu.say										
IO::Socket::INET.ACCEPTS	R	Mu.ACCEPTS										
IO::Socket::INET.WHICH	R	Mu.WHICH										
IO::Socket::INET.WHERE	R	Mu.WHERE										
IO::Socket::INET.WHY	R	Mu.WHY										
Instant	A			Perl 6 Instant							<pre><code>class Instant is Cool does Real { }</code></pre>An Instant is a particular moment in time measured in atomic seconds, with fractions.	http://doc.perl6.org/type/Instant
Instant.Rat	R	Real.Rat										
Instant.sign	R	Real.sign										
Instant.round	R	Real.round										
Instant.floor	R	Real.floor										
Instant.ceiling	R	Real.ceiling										
Instant.truncate	R	Real.truncate										
Instant.base	R	Real.base										
Instant.Real	R	Numeric.Real										
Instant.Int	R	Numeric.Int										
Instant.Rat	R	Numeric.Rat										
Instant.Num	R	Numeric.Num										
Instant.narrow	R	Numeric.narrow										
Instant.ACCEPTS	R	Numeric.ACCEPTS										
Instant.roots	R	Numeric.roots										
Instant.conj	R	Numeric.conj										
Instant.Bool	R	Numeric.Bool										
Instant.succ	R	Numeric.succ										
Instant.pred	R	Numeric.pred										
Instant.abs	R	Cool.abs										
Instant.conj	R	Cool.conj										
Instant.sqrt	R	Cool.sqrt										
Instant.sign	R	Cool.sign										
Instant.rand	R	Cool.rand										
Instant.sin	R	Cool.sin										
Instant.asin	R	Cool.asin										
Instant.cos	R	Cool.cos										
Instant.acos	R	Cool.acos										
Instant.tan	R	Cool.tan										
Instant.atan	R	Cool.atan										
Instant.atan2	R	Cool.atan2										
Instant.sec	R	Cool.sec										
Instant.asec	R	Cool.asec										
Instant.cosec	R	Cool.cosec										
Instant.acosec	R	Cool.acosec										
Instant.cotan	R	Cool.cotan										
Instant.acotan	R	Cool.acotan										
Instant.sinh	R	Cool.sinh										
Instant.asinh	R	Cool.asinh										
Instant.cosh	R	Cool.cosh										
Instant.acosh	R	Cool.acosh										
Instant.tanh	R	Cool.tanh										
Instant.atanh	R	Cool.atanh										
Instant.log	R	Cool.log										
Instant.exp	R	Cool.exp										
Instant.round	R	Cool.round										
Instant.floor	R	Cool.floor										
Instant.ceiling	R	Cool.ceiling										
Instant.ord	R	Cool.ord										
Instant.chr	R	Cool.chr										
Instant.chars	R	Cool.chars										
Instant.codes	R	Cool.codes										
Instant.flip	R	Cool.flip										
Instant.trim	R	Cool.trim										
Instant.trim-leading	R	Cool.trim-leading										
Instant.trim-trailing	R	Cool.trim-trailing										
Instant.lc	R	Cool.lc										
Instant.uc	R	Cool.uc										
Instant.tc	R	Cool.tc										
Instant.tclc	R	Cool.tclc										
Instant.wordcase	R	Cool.wordcase										
Instant.chop	R	Cool.chop										
Instant.chomp	R	Cool.chomp										
Instant.words	R	Cool.words										
Instant.IO	R	Cool.IO										
Instant.ACCEPTS	R	Any.ACCEPTS										
Instant.any	R	Any.any										
Instant.all	R	Any.all										
Instant.one	R	Any.one										
Instant.none	R	Any.none										
Instant.list	R	Any.list										
Instant.flat	R	Any.flat										
Instant.eager	R	Any.eager										
Instant.elems	R	Any.elems										
Instant.end	R	Any.end										
Instant.Str	R	Mu.Str										
Instant.clone	R	Mu.clone										
Instant.new	R	Mu.new										
Instant.bless	R	Mu.bless										
Instant.CREATE	R	Mu.CREATE										
Instant.print	R	Mu.print										
Instant.say	R	Mu.say										
Instant.ACCEPTS	R	Mu.ACCEPTS										
Instant.WHICH	R	Mu.WHICH										
Instant.WHERE	R	Mu.WHERE										
Instant.WHY	R	Mu.WHY										
Int	A			Perl 6 Int							<pre><code>class Int is Cool does Real { ... }</code></pre>Int objects store integral numbers of arbitrary size.	http://doc.perl6.org/type/Int
Int.chr	A			Perl 6 Int							<pre><code>multi sub    chr(Int:D ) returns Str:D\nmulti method chr(Int:D:) returns Str:D</code></pre>Returns a one-character string, by interpreting the integer as a Unicode codepoint number and converting it the corresponding character.	http://doc.perl6.org/type/Int#chr
Int.expmod	A			Perl 6 Int							<pre><code>multi sub    expmod (Int:D: Int $y, Int $mod) returns Int:D\nmulti method expmod (Int:D: Int $y, Int $mod) returns Int:D</code></pre>Returns the given Int raised to the $y power within modulus $mod.	http://doc.perl6.org/type/Int#expmod
expmod	R	Int.expmod										
Int.is-prime	A			Perl 6 Int							<pre><code>multi sub    is-prime (Int:D: Int $tries = 100) returns Bool:D\nmulti method is-prime (Int:D: Int $tries = 100) returns Bool:D</code></pre>Returns True if this Int is known to be a prime, or is likely to be a prime based on a probabilistic Miller-Rabin test.	http://doc.perl6.org/type/Int#is-prime
is-prime	R	Int.is-prime										
Int.lsb	A			Perl 6 Int							<pre><code>multi method lsb(Int:D:)\nmulti sub    lsb(Int:D)</code></pre>Returns Nil if the number is 0.	http://doc.perl6.org/type/Int#lsb
lsb	R	Int.lsb										
Int.msb	A			Perl 6 Int							<pre><code>multi method msb(Int:D:)\nmulti sub    msb(Int:D)</code></pre>Returns Nil if the number is 0.	http://doc.perl6.org/type/Int#msb
msb	R	Int.msb										
Int.div	A			Perl 6 Int							<pre><code>multi sub infix:&lt;div&gt;(Int:D, Int:D) returns Int:D</code></pre>Does an integer division, rounded down.	http://doc.perl6.org/type/Int#div
div	R	Int.div										
Int.Rat	R	Real.Rat										
Int.sign	R	Real.sign										
Int.round	R	Real.round										
Int.floor	R	Real.floor										
Int.ceiling	R	Real.ceiling										
Int.truncate	R	Real.truncate										
Int.base	R	Real.base										
Int.Real	R	Numeric.Real										
Int.Int	R	Numeric.Int										
Int.Rat	R	Numeric.Rat										
Int.Num	R	Numeric.Num										
Int.narrow	R	Numeric.narrow										
Int.ACCEPTS	R	Numeric.ACCEPTS										
Int.roots	R	Numeric.roots										
Int.conj	R	Numeric.conj										
Int.Bool	R	Numeric.Bool										
Int.succ	R	Numeric.succ										
Int.pred	R	Numeric.pred										
Int.abs	R	Cool.abs										
Int.conj	R	Cool.conj										
Int.sqrt	R	Cool.sqrt										
Int.sign	R	Cool.sign										
Int.rand	R	Cool.rand										
Int.sin	R	Cool.sin										
Int.asin	R	Cool.asin										
Int.cos	R	Cool.cos										
Int.acos	R	Cool.acos										
Int.tan	R	Cool.tan										
Int.atan	R	Cool.atan										
Int.atan2	R	Cool.atan2										
Int.sec	R	Cool.sec										
Int.asec	R	Cool.asec										
Int.cosec	R	Cool.cosec										
Int.acosec	R	Cool.acosec										
Int.cotan	R	Cool.cotan										
Int.acotan	R	Cool.acotan										
Int.sinh	R	Cool.sinh										
Int.asinh	R	Cool.asinh										
Int.cosh	R	Cool.cosh										
Int.acosh	R	Cool.acosh										
Int.tanh	R	Cool.tanh										
Int.atanh	R	Cool.atanh										
Int.log	R	Cool.log										
Int.exp	R	Cool.exp										
Int.round	R	Cool.round										
Int.floor	R	Cool.floor										
Int.ceiling	R	Cool.ceiling										
Int.ord	R	Cool.ord										
Int.chr	R	Cool.chr										
Int.chars	R	Cool.chars										
Int.codes	R	Cool.codes										
Int.flip	R	Cool.flip										
Int.trim	R	Cool.trim										
Int.trim-leading	R	Cool.trim-leading										
Int.trim-trailing	R	Cool.trim-trailing										
Int.lc	R	Cool.lc										
Int.uc	R	Cool.uc										
Int.tc	R	Cool.tc										
Int.tclc	R	Cool.tclc										
Int.wordcase	R	Cool.wordcase										
Int.chop	R	Cool.chop										
Int.chomp	R	Cool.chomp										
Int.words	R	Cool.words										
Int.IO	R	Cool.IO										
Int.ACCEPTS	R	Any.ACCEPTS										
Int.any	R	Any.any										
Int.all	R	Any.all										
Int.one	R	Any.one										
Int.none	R	Any.none										
Int.list	R	Any.list										
Int.flat	R	Any.flat										
Int.eager	R	Any.eager										
Int.elems	R	Any.elems										
Int.end	R	Any.end										
Int.Str	R	Mu.Str										
Int.clone	R	Mu.clone										
Int.new	R	Mu.new										
Int.bless	R	Mu.bless										
Int.CREATE	R	Mu.CREATE										
Int.print	R	Mu.print										
Int.say	R	Mu.say										
Int.ACCEPTS	R	Mu.ACCEPTS										
Int.WHICH	R	Mu.WHICH										
Int.WHERE	R	Mu.WHERE										
Int.WHY	R	Mu.WHY										
Iterable	A			Perl 6 Iterable							<pre><code>class Iterable is Cool { }</code></pre>Iterable serves as a superclass for objects that can be iterated with the for construct and related iteration constructs.	http://doc.perl6.org/type/Iterable
Iterable.ACCEPTS	R	Any.ACCEPTS										
Iterable.any	R	Any.any										
Iterable.all	R	Any.all										
Iterable.one	R	Any.one										
Iterable.none	R	Any.none										
Iterable.list	R	Any.list										
Iterable.flat	R	Any.flat										
Iterable.eager	R	Any.eager										
Iterable.elems	R	Any.elems										
Iterable.end	R	Any.end										
Iterable.Str	R	Mu.Str										
Iterable.clone	R	Mu.clone										
Iterable.new	R	Mu.new										
Iterable.bless	R	Mu.bless										
Iterable.CREATE	R	Mu.CREATE										
Iterable.print	R	Mu.print										
Iterable.say	R	Mu.say										
Iterable.ACCEPTS	R	Mu.ACCEPTS										
Iterable.WHICH	R	Mu.WHICH										
Iterable.WHERE	R	Mu.WHERE										
Iterable.WHY	R	Mu.WHY										
Iterator	A			Perl 6 Iterator							<pre><code>class Iterator is Iterable { }</code></pre>A Iterator is an object that can generate or provide elements of a sequence.	http://doc.perl6.org/type/Iterator
Iterator.reify	A			Perl 6 Iterator							<pre><code>method reify(Iterator:D: $n) returns Parcel:D</code></pre>Returns at least $n elements of the sequence, followed by additional iterators needed to generate the remaining elements.	http://doc.perl6.org/type/Iterator#reify
reify	R	Iterator.reify										
Iterator.infinite	A			Perl 6 Iterator							<pre><code>method infinite(Iterator:D:)</code></pre>Returns True if the sequence being iterated is known to be infinite, False if it is known to be finite, and Mu if the iterator does not know if the sequence is finite or infinite.	http://doc.perl6.org/type/Iterator#infinite
infinite	R	Iterator.infinite										
Iterator.ACCEPTS	R	Any.ACCEPTS										
Iterator.any	R	Any.any										
Iterator.all	R	Any.all										
Iterator.one	R	Any.one										
Iterator.none	R	Any.none										
Iterator.list	R	Any.list										
Iterator.flat	R	Any.flat										
Iterator.eager	R	Any.eager										
Iterator.elems	R	Any.elems										
Iterator.end	R	Any.end										
Iterator.Str	R	Mu.Str										
Iterator.clone	R	Mu.clone										
Iterator.new	R	Mu.new										
Iterator.bless	R	Mu.bless										
Iterator.CREATE	R	Mu.CREATE										
Iterator.print	R	Mu.print										
Iterator.say	R	Mu.say										
Iterator.ACCEPTS	R	Mu.ACCEPTS										
Iterator.WHICH	R	Mu.WHICH										
Iterator.WHERE	R	Mu.WHERE										
Iterator.WHY	R	Mu.WHY										
Junction	A			Perl 6 Junction							<pre><code>class Junction is Mu { }</code></pre>A junction is an unordered composite value of zero or more values.	http://doc.perl6.org/type/Junction
Junction.Str	R	Mu.Str										
Junction.clone	R	Mu.clone										
Junction.new	R	Mu.new										
Junction.bless	R	Mu.bless										
Junction.CREATE	R	Mu.CREATE										
Junction.print	R	Mu.print										
Junction.say	R	Mu.say										
Junction.ACCEPTS	R	Mu.ACCEPTS										
Junction.WHICH	R	Mu.WHICH										
Junction.WHERE	R	Mu.WHERE										
Junction.WHY	R	Mu.WHY										
Label	A			Perl 6 Label							<pre><code>class Label { ... }</code></pre>In Perl 6, you can give for example loops a label, and use it to control that loop (instead of the inner-most loop).	http://doc.perl6.org/type/Label
Label.next	A			Perl 6 Label							<pre><code>method next(Label:)</code></pre>Begin the next iteration of the loop assoicated with the label.	http://doc.perl6.org/type/Label#next
next	R	Label.next										
Label.last	A			Perl 6 Label							<pre><code>method last(Label:)</code></pre>Terminate the execution of the loop assoicated with the label.	http://doc.perl6.org/type/Label#last
last	R	Label.last										
Label.ACCEPTS	R	Any.ACCEPTS										
Label.any	R	Any.any										
Label.all	R	Any.all										
Label.one	R	Any.one										
Label.none	R	Any.none										
Label.list	R	Any.list										
Label.flat	R	Any.flat										
Label.eager	R	Any.eager										
Label.elems	R	Any.elems										
Label.end	R	Any.end										
Label.Str	R	Mu.Str										
Label.clone	R	Mu.clone										
Label.new	R	Mu.new										
Label.bless	R	Mu.bless										
Label.CREATE	R	Mu.CREATE										
Label.print	R	Mu.print										
Label.say	R	Mu.say										
Label.ACCEPTS	R	Mu.ACCEPTS										
Label.WHICH	R	Mu.WHICH										
Label.WHERE	R	Mu.WHERE										
Label.WHY	R	Mu.WHY										
List	A			Perl 6 List							<pre><code>my class List is Iterable does Positional { .. }</code></pre>List stores items sequentially and potentially lazily.	http://doc.perl6.org/type/List
List.elems	A			Perl 6 List							<pre><code>multi sub    elems($list)  returns Int:D\nmulti method elems(List:D:) returns Int:D</code></pre>Returns the number of elements in the list.	http://doc.perl6.org/type/List#elems
List.end	A			Perl 6 List							<pre><code>multi sub    end($list)  returns Int:D\nmulti method end(List:D:) returns Int:D</code></pre>Returns the index of the last element.	http://doc.perl6.org/type/List#end
List.keys	A			Perl 6 List							<pre><code>multi sub    keys($list)  returns List:D\nmulti method keys(List:D:) returns List:D</code></pre>Returns a list of indexes into the list (e.g., 0..(@list.elems-1)).	http://doc.perl6.org/type/List#keys
List.values	A			Perl 6 List							<pre><code>multi sub    values($list)  returns List:D\nmulti method values(List:D:) returns List:D</code></pre>Returns a copy of the list.	http://doc.perl6.org/type/List#values
List.kv	A			Perl 6 List							<pre><code>multi sub    kv($list)  returns List:D\nmulti method kv(List:D:) returns List:D</code></pre>Returns an interleaved list of indexes and values.	http://doc.perl6.org/type/List#kv
List.pairs	A			Perl 6 List							<pre><code>multi sub    pairs($list)   returns List:D\nmulti method pairs(List:D:) returns List:D</code></pre>Returns a list of pairs, with the indexes as keys and the list values as values.	http://doc.perl6.org/type/List#pairs
List.join	A			Perl 6 List							<pre><code>multi sub    join($separator, *@list) returns Str:D\nmulti method join(List:D: $separator) returns Str:D</code></pre>Treats the elements of the list as strings, interleaves them with $separator and concatenates everything into a single string.	http://doc.perl6.org/type/List#join
join	R	List.join										
List.map	A			Perl 6 List							<pre><code>multi sub    map(&amp;code, *@elems) returns List:D\nmulti method map(List:D: &amp;code) returns List:D</code></pre>Invokes &amp;code for each element and gathers the return values in another list and returns it.	http://doc.perl6.org/type/List#map
map	D								*[[List.map]], invokes &amp;code for each element and gathers the return values in another list and returns it.\n*[[Supply.map]], returns a new supply that receives the same elements as the original one, but with the element transformed through &amp;mapper;			
List.grep	A			Perl 6 List							<pre><code>multi sub    grep(Mu $matcher, *@elems) returns List:D\nmulti method grep(List:D:  Mu $matcher) returns List:D</code></pre>Returns a lazy list of elements against which $matcher smart-matches.	http://doc.perl6.org/type/List#grep
grep	D								*[[List.grep]], returns a lazy list of elements against which $matcher smart-matches.\n*[[Supply.grep]], creates a new supply that only receives those events from the original supply that smart-match against $test.			
List.grep-index	A			Perl 6 List							<pre><code>multi method grep-index(List:D: Mu $matcher) returns List:D</code></pre>Returns a lazy list of indices against which the associated elements smart-match.	http://doc.perl6.org/type/List#grep-index
grep-index	R	List.grep-index										
List.first	A			Perl 6 List							<pre><code>multi sub    first(Mu $matcher, *@elems)\nmulti method first(List:D:  Mu $matcher)</code></pre>Returns the first item of the list which smart-matches against $matcher, fails when no values match.	http://doc.perl6.org/type/List#first
first	R	List.first										
List.first-index	A			Perl 6 List							<pre><code>multi method first-index(List:D: Mu $matcher)</code></pre>Returns the first index against which $matcher smart-matches, or Nil if no match was found.	http://doc.perl6.org/type/List#first-index
first-index	R	List.first-index										
List.last-index	A			Perl 6 List							<pre><code>multi method last-index(List:D: Mu $matcher)</code></pre>Returns the last index against which $matcher smart-matches, or Nil if no match was found.	http://doc.perl6.org/type/List#last-index
last-index	R	List.last-index										
List.classify	A			Perl 6 List							<pre><code>multi sub    classify(&amp;mapper, *@values) returns Hash:D\nmulti method classify(List:D: &amp;mapper)   returns Hash:D</code></pre>Transforms a list of values into a hash representing the classification of those values according to a mapper; each hash key represents the classification for one or more of the incoming list values, and the corresponding hash value contains an array of those list values classified by the mapper into the category of the associated key.	http://doc.perl6.org/type/List#classify
classify	R	List.classify										
List.Bool	A			Perl 6 List							<pre><code>multi method Bool(List:D:) returns Bool:D</code></pre>Returns True if the list has at least one element, and False for the empty list.	http://doc.perl6.org/type/List#Bool
List.Str	A			Perl 6 List							<pre><code>multi method Str(List:D:) returns Str:D</code></pre>Stringifies the elements of the list and joins them with spaces (same as .join(' ')).	http://doc.perl6.org/type/List#Str
List.Int	A			Perl 6 List							<pre><code>multi method Int(List:D:) return Int:D</code></pre>Returns the number of elements in the list (same as .elems).	http://doc.perl6.org/type/List#Int
List.Numeric	A			Perl 6 List							<pre><code>multi method Numeric(List:D:) return Int:D</code></pre>Returns the number of elements in the list (same as .elems).	http://doc.perl6.org/type/List#Numeric
List.pick	A			Perl 6 List							<pre><code>multi sub    pick($count, *@list) returns List:D\nmulti method pick(List:D: $count = 1)</code></pre>Returns $count elements chosen at random and without repetition from the invocant.	http://doc.perl6.org/type/List#pick
pick	D								*[[Baggy.pick]], \n*[[List.pick]], returns $count elements chosen at random and without repetition from the invocant.\n*[[Setty.pick]], returns $count elements chosen at random (without repetition) from the set.			
List.roll	A			Perl 6 List							<pre><code>multi sub    roll($count, *@list) returns List:D\nmulti method roll(List:D: $count = 1)</code></pre>Returns a lazy list of $count elements, each randomly selected from the list.	http://doc.perl6.org/type/List#roll
roll	D								*[[Baggy.roll]], \n*[[List.roll]], returns a lazy list of $count elements, each randomly selected from the list.\n*[[Mixy.roll]], similar to a Bag.roll, but with Real weights rather than integral ones.\n*[[Setty.roll]], returns a lazy list of $count elements, each randomly selected from the set.			
List.eager	A			Perl 6 List							<pre><code>multi method eager(List:D:) returns List:D\nsub eager(*@elems) returns List:D</code></pre>Evaluates all elements in the list eagerly, and returns them as a list.	http://doc.perl6.org/type/List#eager
List.reverse	A			Perl 6 List							<pre><code>multi sub    reverse(*@list ) returns List:D\nmulti method reverse(List:D:) returns List:D</code></pre>Returns a list with the same elements in reverse order.	http://doc.perl6.org/type/List#reverse
reverse	R	List.reverse										
List.rotate	A			Perl 6 List							<pre><code>multi sub    rotate(@list,  Int:D $n = 1) returns List:D\nmulti method rotate(List:D: Int:D $n = 1) returns List:D</code></pre>Returns the list rotated by $n elements.	http://doc.perl6.org/type/List#rotate
rotate	R	List.rotate										
List.sort	A			Perl 6 List							<pre><code>multi sub    sort(*@elems)      returns List:D\nmulti sub    sort(&amp;by, *@elems) returns List:D\nmulti method sort(List:D:)      returns List:D\nmulti method sort(List:D:, &amp;by) returns List:D</code></pre>Sorts the list, smallest element first.	http://doc.perl6.org/type/List#sort
sort	R	List.sort										
List.reduce	A			Perl 6 List							<pre><code>multi sub    reduce(&amp;with, *@elems)\nmulti method reduce(List:D: &amp;with)</code></pre>Applies &amp;with to the first and the second value of the list, then to the result of that calculation and the third value and so on.	http://doc.perl6.org/type/List#reduce
reduce	R	List.reduce										
List.splice	A			Perl 6 List							<pre><code>multi sub    splice(@list,  $start, $elems?, *@replacement) returns List:D\nmulti method splice(List:D: $start, $elems?, *@replacement) returns List:D</code></pre>Deletes $elems elements starting from index $start from the list, returns them and replaces them by @replacement.	http://doc.perl6.org/type/List#splice
splice	R	List.splice										
List.pop	A			Perl 6 List							<pre><code>multi sub    pop(List:D )\nmulti method pop(List:D:)</code></pre>Removes and returns the last item from the list, fails for an empty list.	http://doc.perl6.org/type/List#pop
pop	R	List.pop										
List.push	A			Perl 6 List							<pre><code>multi sub    push(List:D, *@values) returns List:D\nmulti method push(List:D: *@values) returns List:D</code></pre>Adds the @values to the end of the list, and returns the modified list.	http://doc.perl6.org/type/List#push
List.shift	A			Perl 6 List							<pre><code>multi sub    shift(List:D )\nmulti method shift(List:D:)</code></pre>Removes and returns the first item from the list.	http://doc.perl6.org/type/List#shift
shift	R	List.shift										
List.unshift	A			Perl 6 List							<pre><code>multi sub    unshift(List:D, *@values) returns List:D\nmulti method unshift(List:D: *@values) returns List:D</code></pre>Adds the @values to the start of the list, and returns the modified list.	http://doc.perl6.org/type/List#unshift
unshift	R	List.unshift										
List.combinations	A			Perl 6 List							<pre><code>multi method combinations (List:D: Int:D $of)          returns List:D\nmulti method combinations (List:D: Range:D $of = 0..*) returns List:D\nmulti sub    combinations ($n, $k)                     returns List:D</code></pre>The Int variant returns all $of-combinations of the invocant list.	http://doc.perl6.org/type/List#combinations
combinations	R	List.combinations										
List.permutations	A			Perl 6 List							<pre><code>multi method permutations(List:D:) returns List:D\nmulti sub    permutations($n)      returns List:D</code></pre>Returns all possible permutations of a list as a list of arrays.	http://doc.perl6.org/type/List#permutations
permutations	R	List.permutations										
List.of	R	Positional.of										
List.abs	R	Cool.abs										
List.conj	R	Cool.conj										
List.sqrt	R	Cool.sqrt										
List.sign	R	Cool.sign										
List.rand	R	Cool.rand										
List.sin	R	Cool.sin										
List.asin	R	Cool.asin										
List.cos	R	Cool.cos										
List.acos	R	Cool.acos										
List.tan	R	Cool.tan										
List.atan	R	Cool.atan										
List.atan2	R	Cool.atan2										
List.sec	R	Cool.sec										
List.asec	R	Cool.asec										
List.cosec	R	Cool.cosec										
List.acosec	R	Cool.acosec										
List.cotan	R	Cool.cotan										
List.acotan	R	Cool.acotan										
List.sinh	R	Cool.sinh										
List.asinh	R	Cool.asinh										
List.cosh	R	Cool.cosh										
List.acosh	R	Cool.acosh										
List.tanh	R	Cool.tanh										
List.atanh	R	Cool.atanh										
List.log	R	Cool.log										
List.exp	R	Cool.exp										
List.round	R	Cool.round										
List.floor	R	Cool.floor										
List.ceiling	R	Cool.ceiling										
List.ord	R	Cool.ord										
List.chr	R	Cool.chr										
List.chars	R	Cool.chars										
List.codes	R	Cool.codes										
List.flip	R	Cool.flip										
List.trim	R	Cool.trim										
List.trim-leading	R	Cool.trim-leading										
List.trim-trailing	R	Cool.trim-trailing										
List.lc	R	Cool.lc										
List.uc	R	Cool.uc										
List.tc	R	Cool.tc										
List.tclc	R	Cool.tclc										
List.wordcase	R	Cool.wordcase										
List.chop	R	Cool.chop										
List.chomp	R	Cool.chomp										
List.words	R	Cool.words										
List.IO	R	Cool.IO										
List.ACCEPTS	R	Any.ACCEPTS										
List.any	R	Any.any										
List.all	R	Any.all										
List.one	R	Any.one										
List.none	R	Any.none										
List.list	R	Any.list										
List.flat	R	Any.flat										
List.eager	R	Any.eager										
List.elems	R	Any.elems										
List.end	R	Any.end										
List.Str	R	Mu.Str										
List.clone	R	Mu.clone										
List.new	R	Mu.new										
List.bless	R	Mu.bless										
List.CREATE	R	Mu.CREATE										
List.print	R	Mu.print										
List.say	R	Mu.say										
List.ACCEPTS	R	Mu.ACCEPTS										
List.WHICH	R	Mu.WHICH										
List.WHERE	R	Mu.WHERE										
List.WHY	R	Mu.WHY										
Lock	A			Perl 6 Lock							<pre><code>class Lock { ... }</code></pre>A Lock is a low-level constructor for ensuring that only one thread works with a certain object at a given time, or runs a piece of code (called the critical section).	http://doc.perl6.org/type/Lock
Lock.protect	A			Perl 6 Lock							<pre><code>method protect(Lock:D: &amp;code)</code></pre>Runs &amp;code and makes sure it is only run in one thread at once.	http://doc.perl6.org/type/Lock#protect
protect	R	Lock.protect										
Lock.lock	A			Perl 6 Lock							<pre><code>method lock(Lock:D:)</code></pre>Acquires the lock.	http://doc.perl6.org/type/Lock#lock
lock	R	Lock.lock										
Lock.unlock	A			Perl 6 Lock							<pre><code>method lock(Lock:D:)</code></pre>Releases the lock.	http://doc.perl6.org/type/Lock#unlock
unlock	R	Lock.unlock										
Lock.condition	A			Perl 6 Lock							<pre><code>my class ConditionVariable {\n    method wait();\n    method signal();\n    method signal_all();\n}\nmethod condition(Lock:D:) returns ConditionVariable:D\n</code></pre>Returns a condition variable.	http://doc.perl6.org/type/Lock#condition
condition	D								*[[Lock.condition]], returns a condition variable.\n*[[X::Phaser::PrePost.condition]], returns the part of the source code that describes the phaser condition.			
Lock.ACCEPTS	R	Any.ACCEPTS										
Lock.any	R	Any.any										
Lock.all	R	Any.all										
Lock.one	R	Any.one										
Lock.none	R	Any.none										
Lock.list	R	Any.list										
Lock.flat	R	Any.flat										
Lock.eager	R	Any.eager										
Lock.elems	R	Any.elems										
Lock.end	R	Any.end										
Lock.Str	R	Mu.Str										
Lock.clone	R	Mu.clone										
Lock.new	R	Mu.new										
Lock.bless	R	Mu.bless										
Lock.CREATE	R	Mu.CREATE										
Lock.print	R	Mu.print										
Lock.say	R	Mu.say										
Lock.ACCEPTS	R	Mu.ACCEPTS										
Lock.WHICH	R	Mu.WHICH										
Lock.WHERE	R	Mu.WHERE										
Lock.WHY	R	Mu.WHY										
Macro	A			Perl 6 Macro							<pre><code>class Macro is Routine { }</code></pre>A macro is a Routine whose invocation typically happens during parsing.	http://doc.perl6.org/type/Macro
Macro.multi	R	Routine.multi										
Macro.candidates	R	Routine.candidates										
Macro.wrap	R	Routine.wrap										
Macro.unwrap	R	Routine.unwrap										
Macro.yada	R	Routine.yada										
Macro.ACCEPTS	R	Code.ACCEPTS										
Macro.arity	R	Code.arity										
Macro.count	R	Code.count										
Macro.signature	R	Code.signature										
Macro.Str	R	Code.Str										
Macro.ACCEPTS	R	Any.ACCEPTS										
Macro.any	R	Any.any										
Macro.all	R	Any.all										
Macro.one	R	Any.one										
Macro.none	R	Any.none										
Macro.list	R	Any.list										
Macro.flat	R	Any.flat										
Macro.eager	R	Any.eager										
Macro.elems	R	Any.elems										
Macro.end	R	Any.end										
Macro.Str	R	Mu.Str										
Macro.clone	R	Mu.clone										
Macro.new	R	Mu.new										
Macro.bless	R	Mu.bless										
Macro.CREATE	R	Mu.CREATE										
Macro.print	R	Mu.print										
Macro.say	R	Mu.say										
Macro.ACCEPTS	R	Mu.ACCEPTS										
Macro.WHICH	R	Mu.WHICH										
Macro.WHERE	R	Mu.WHERE										
Macro.WHY	R	Mu.WHY										
Match	A			Perl 6 Match							<pre><code>class Match is Capture is Cool { ... }</code></pre>Match objects are the result of a successful regex match.	http://doc.perl6.org/type/Match
Match.orig	A			Perl 6 Match							Returns the original string that the regex was matched against.	http://doc.perl6.org/type/Match#orig
orig	R	Match.orig										
Match.from	A			Perl 6 Match							Returns the index of the starting position of the match.	http://doc.perl6.org/type/Match#from
from	D								*[[Match.from]], returns the index of the starting position of the match.\n*[[X::IO::Copy.from]], returns the source of the failed copy operation\n*[[X::IO::Rename.from]], returns the source of the failed rename operation			
Match.to	A			Perl 6 Match							Returns the index of the end position of the match.	http://doc.perl6.org/type/Match#to
to	D								*[[Match.to]], returns the index of the end position of the match.\n*[[X::IO::Copy.to]], returns the destination of the failed copy operation\n*[[X::IO::Rename.to]], returns the destination of the failed rename operation			
Match.made	A			Perl 6 Match							Returns the payload that was set with method make.	http://doc.perl6.org/type/Match#made
made	R	Match.made										
Match.ast	A			Perl 6 Match							Alias for method made.	http://doc.perl6.org/type/Match#ast
ast	R	Match.ast										
Match.Str	A			Perl 6 Match							Returns the matched text.	http://doc.perl6.org/type/Match#Str
Match.caps	A			Perl 6 Match							Returns a list of pairs, with the index or submatch name as key and the submatches as values.	http://doc.perl6.org/type/Match#caps
caps	R	Match.caps										
Match.chunks	A			Perl 6 Match							Returns a list of pairs, with the index or submatch name as key and the submatches as values.	http://doc.perl6.org/type/Match#chunks
chunks	R	Match.chunks										
Match.list	A			Perl 6 Match							Returns a list of positional submatches.	http://doc.perl6.org/type/Match#list
Match.hash	A			Perl 6 Match							Returns a hash of named submatches.	http://doc.perl6.org/type/Match#hash
Match.prematch	A			Perl 6 Match							Returns the part of the original string leading up to the match.	http://doc.perl6.org/type/Match#prematch
prematch	R	Match.prematch										
Match.postmatch	A			Perl 6 Match							Returns the part of the original string following the match.	http://doc.perl6.org/type/Match#postmatch
postmatch	R	Match.postmatch										
Match.make	A			Perl 6 Match							<pre><code>method make(Match:D: Mu $ast)</code></pre>Sets the AST to $ast, and returns it.	http://doc.perl6.org/type/Match#make
make	R	Match.make										
Match.list	R	Capture.list										
Match.hash	R	Capture.hash										
Match.elems	R	Capture.elems										
Match.abs	R	Cool.abs										
Match.conj	R	Cool.conj										
Match.sqrt	R	Cool.sqrt										
Match.sign	R	Cool.sign										
Match.rand	R	Cool.rand										
Match.sin	R	Cool.sin										
Match.asin	R	Cool.asin										
Match.cos	R	Cool.cos										
Match.acos	R	Cool.acos										
Match.tan	R	Cool.tan										
Match.atan	R	Cool.atan										
Match.atan2	R	Cool.atan2										
Match.sec	R	Cool.sec										
Match.asec	R	Cool.asec										
Match.cosec	R	Cool.cosec										
Match.acosec	R	Cool.acosec										
Match.cotan	R	Cool.cotan										
Match.acotan	R	Cool.acotan										
Match.sinh	R	Cool.sinh										
Match.asinh	R	Cool.asinh										
Match.cosh	R	Cool.cosh										
Match.acosh	R	Cool.acosh										
Match.tanh	R	Cool.tanh										
Match.atanh	R	Cool.atanh										
Match.log	R	Cool.log										
Match.exp	R	Cool.exp										
Match.round	R	Cool.round										
Match.floor	R	Cool.floor										
Match.ceiling	R	Cool.ceiling										
Match.ord	R	Cool.ord										
Match.chr	R	Cool.chr										
Match.chars	R	Cool.chars										
Match.codes	R	Cool.codes										
Match.flip	R	Cool.flip										
Match.trim	R	Cool.trim										
Match.trim-leading	R	Cool.trim-leading										
Match.trim-trailing	R	Cool.trim-trailing										
Match.lc	R	Cool.lc										
Match.uc	R	Cool.uc										
Match.tc	R	Cool.tc										
Match.tclc	R	Cool.tclc										
Match.wordcase	R	Cool.wordcase										
Match.chop	R	Cool.chop										
Match.chomp	R	Cool.chomp										
Match.words	R	Cool.words										
Match.IO	R	Cool.IO										
Match.ACCEPTS	R	Any.ACCEPTS										
Match.any	R	Any.any										
Match.all	R	Any.all										
Match.one	R	Any.one										
Match.none	R	Any.none										
Match.list	R	Any.list										
Match.flat	R	Any.flat										
Match.eager	R	Any.eager										
Match.elems	R	Any.elems										
Match.end	R	Any.end										
Match.Str	R	Mu.Str										
Match.clone	R	Mu.clone										
Match.new	R	Mu.new										
Match.bless	R	Mu.bless										
Match.CREATE	R	Mu.CREATE										
Match.print	R	Mu.print										
Match.say	R	Mu.say										
Match.ACCEPTS	R	Mu.ACCEPTS										
Match.WHICH	R	Mu.WHICH										
Match.WHERE	R	Mu.WHERE										
Match.WHY	R	Mu.WHY										
Metamodel::AttributeContainer	A			Perl 6 Metamodel::AttributeContainer							<pre><code>role Metamodel::AttributeContainer { ... }</code></pre>Classes, roles and grammars can have attributes.	http://doc.perl6.org/type/Metamodel%3A%3AAttributeContainer
Metamodel::AttributeContainer.add_attribute	A			Perl 6 Metamodel::AttributeContainer							<pre><code>method add_attribute(Metamodel::AttributeContainer: $obj, $name, $attribute)</code></pre>Adds an attribute.	http://doc.perl6.org/type/Metamodel%3A%3AAttributeContainer#add_attribute
add_attribute	R	Metamodel::AttributeContainer.add_attribute										
Metamodel::AttributeContainer.attributes	A			Perl 6 Metamodel::AttributeContainer							<pre><code>method attributes(Metamodel::AttributeContainer: $obj)</code></pre>Returns a list of attributes.	http://doc.perl6.org/type/Metamodel%3A%3AAttributeContainer#attributes
attributes	R	Metamodel::AttributeContainer.attributes										
Metamodel::AttributeContainer.set_rw	A			Perl 6 Metamodel::AttributeContainer							<pre><code>method set_rw(Metamodel::AttributeContainer: $obj)</code></pre>Marks a type whose attributes default to having a write accessor.	http://doc.perl6.org/type/Metamodel%3A%3AAttributeContainer#set_rw
set_rw	R	Metamodel::AttributeContainer.set_rw										
Metamodel::AttributeContainer.rw	A			Perl 6 Metamodel::AttributeContainer							<pre><code>method rw(Metamodel::AttributeContainer: $obj)</code></pre>Returns a true value if method set_rw has been called on this object, that is, if new public attributes are writable by default.	http://doc.perl6.org/type/Metamodel%3A%3AAttributeContainer#rw
rw	D								*[[Metamodel::AttributeContainer.rw]], returns a true value if method set_rw has been called on this object, that is, if new public attributes are writable by default.\n*[[Parameter.rw]], returns True for is rw parameters.\n*[[Routine.rw]], when a routine is modifies with this trait, its return value will be writable.			
Metamodel::C3MRO	A			Perl 6 Metamodel::C3MRO							<pre><code>role Metamodel::C3MRO { }</code></pre>Meta model role for the C3 method resolution order (MRO).	http://doc.perl6.org/type/Metamodel%3A%3AC3MRO
Metamodel::C3MRO.compute_mro	A			Perl 6 Metamodel::C3MRO							<pre><code>method compute_mro($type)</code></pre>Computes the method resolution order.	http://doc.perl6.org/type/Metamodel%3A%3AC3MRO#compute_mro
compute_mro	R	Metamodel::C3MRO.compute_mro										
Metamodel::C3MRO.mro	A			Perl 6 Metamodel::C3MRO							<pre><code>method mro($type)</code></pre>Returns a list of types in the method resolution order.	http://doc.perl6.org/type/Metamodel%3A%3AC3MRO#mro
mro	R	Metamodel::C3MRO.mro										
Metamodel::C3MRO.mro_unhidden	A			Perl 6 Metamodel::C3MRO							<pre><code>method mro_unhidden($type)</code></pre>Returns a list of types in method resolution order, excluding those that are marked with is hidden.	http://doc.perl6.org/type/Metamodel%3A%3AC3MRO#mro_unhidden
mro_unhidden	R	Metamodel::C3MRO.mro_unhidden										
Metamodel::ClassHOW	A			Perl 6 Metamodel::ClassHOW							<pre><code>class Metamodel::ClassHOW\n    does Metamodel::Naming\n    does Metamodel::Documenting\n    does Metamodel::Versioning\n    does Metamodel::Stashing\n    does Metamodel::AttributeContainer\n    does Metamodel::MethodContainer\n    does Metamodel::PrivateMethodContainer\n    does Metamodel::MultiMethodContainer\n    does Metamodel::RoleContainer\n    does Metamodel::MultipleInheritance\n    does Metamodel::DefaultParent\n    does Metamodel::C3MRO\n    does Metamodel::MROBasedMethodDispatch\n    does Metamodel::MROBasedTypeChecking\n    does Metamodel::Trusting\n    does Metamodel::BUILDPLAN\n    does Metamodel::Mixins\n    does Metamodel::ArrayType\n    does Metamodel::BoolificationProtocol\n    does Metamodel::REPRComposeProtocol\n    does Metamodel::InvocationProtocol\n    does Metamodel::Finalization\n        { }</code></pre>Metamodel::ClassHOW is the meta class behind the class keyword.	http://doc.perl6.org/type/Metamodel%3A%3AClassHOW
Metamodel::ClassHOW.add_fallback	A			Perl 6 Metamodel::ClassHOW							<pre><code>method add_fallback(Metamodel::ClassHOW:D: $condition, $calculator)</code></pre>Installs a method fallback, that is, add a way to call methods that weren't statically added.	http://doc.perl6.org/type/Metamodel%3A%3AClassHOW#add_fallback
add_fallback	R	Metamodel::ClassHOW.add_fallback										
Metamodel::ClassHOW.can	A			Perl 6 Metamodel::ClassHOW							<pre><code>method can(Metamodel::ClassHOW:D: $obj, $method-name)</code></pre>Given a method names, it returns a Parcel of methods that are available with this name.	http://doc.perl6.org/type/Metamodel%3A%3AClassHOW#can
can	R	Metamodel::ClassHOW.can										
Metamodel::ClassHOW.name	R	Metamodel::Naming.name										
Metamodel::ClassHOW.set_name	R	Metamodel::Naming.set_name										
Metamodel::ClassHOW.add_attribute	R	Metamodel::AttributeContainer.add_attribute										
Metamodel::ClassHOW.attributes	R	Metamodel::AttributeContainer.attributes										
Metamodel::ClassHOW.set_rw	R	Metamodel::AttributeContainer.set_rw										
Metamodel::ClassHOW.rw	R	Metamodel::AttributeContainer.rw										
Metamodel::ClassHOW.setup_finalization	R	Metamodel::Finalization.setup_finalization										
Metamodel::ClassHOW.destroyers	R	Metamodel::Finalization.destroyers										
Metamodel::ClassHOW.add_method	R	Metamodel::MethodContainer.add_method										
Metamodel::ClassHOW.methods	R	Metamodel::MethodContainer.methods										
Metamodel::ClassHOW.method_table	R	Metamodel::MethodContainer.method_table										
Metamodel::ClassHOW.add_private_method	R	Metamodel::PrivateMethodContainer.add_private_method										
Metamodel::ClassHOW.private_method_table	R	Metamodel::PrivateMethodContainer.private_method_table										
Metamodel::ClassHOW.add_role	R	Metamodel::RoleContainer.add_role										
Metamodel::ClassHOW.roles_to_compose	R	Metamodel::RoleContainer.roles_to_compose										
Metamodel::ClassHOW.add_parent	R	Metamodel::MultipleInheritance.add_parent										
Metamodel::ClassHOW.parents	R	Metamodel::MultipleInheritance.parents										
Metamodel::ClassHOW.hides	R	Metamodel::MultipleInheritance.hides										
Metamodel::ClassHOW.hidden	R	Metamodel::MultipleInheritance.hidden										
Metamodel::ClassHOW.set_hidden	R	Metamodel::MultipleInheritance.set_hidden										
Metamodel::ClassHOW.find_method	R	Metamodel::MROBasedMethodDispatch.find_method										
Metamodel::ClassHOW.find_method_qualified	R	Metamodel::MROBasedMethodDispatch.find_method_qualified										
Metamodel::ClassHOW.add_trustee	R	Metamodel::Trusting.add_trustee										
Metamodel::ClassHOW.trusts	R	Metamodel::Trusting.trusts										
Metamodel::ClassHOW.is_trusted	R	Metamodel::Trusting.is_trusted										
Metamodel::ClassHOW.ACCEPTS	R	Any.ACCEPTS										
Metamodel::ClassHOW.any	R	Any.any										
Metamodel::ClassHOW.all	R	Any.all										
Metamodel::ClassHOW.one	R	Any.one										
Metamodel::ClassHOW.none	R	Any.none										
Metamodel::ClassHOW.list	R	Any.list										
Metamodel::ClassHOW.flat	R	Any.flat										
Metamodel::ClassHOW.eager	R	Any.eager										
Metamodel::ClassHOW.elems	R	Any.elems										
Metamodel::ClassHOW.end	R	Any.end										
Metamodel::ClassHOW.Str	R	Mu.Str										
Metamodel::ClassHOW.clone	R	Mu.clone										
Metamodel::ClassHOW.new	R	Mu.new										
Metamodel::ClassHOW.bless	R	Mu.bless										
Metamodel::ClassHOW.CREATE	R	Mu.CREATE										
Metamodel::ClassHOW.print	R	Mu.print										
Metamodel::ClassHOW.say	R	Mu.say										
Metamodel::ClassHOW.ACCEPTS	R	Mu.ACCEPTS										
Metamodel::ClassHOW.WHICH	R	Mu.WHICH										
Metamodel::ClassHOW.WHERE	R	Mu.WHERE										
Metamodel::ClassHOW.WHY	R	Mu.WHY										
Metamodel::Finalization	A			Perl 6 Metamodel::Finalization							<pre><code>role Metamodel::Finalization { ... }</code></pre>This role takes care that DESTROY submethods are called (if they exist) when an object is garbage-collected.	http://doc.perl6.org/type/Metamodel%3A%3AFinalization
Metamodel::Finalization.setup_finalization	A			Perl 6 Metamodel::Finalization							<pre><code>method setup_finalization(Metamodel::Finalization:D: $obj)</code></pre>Collects the DESTROY submethods from this class and all its superclasses, and marks the class as needing action on garbage collection.	http://doc.perl6.org/type/Metamodel%3A%3AFinalization#setup_finalization
setup_finalization	R	Metamodel::Finalization.setup_finalization										
Metamodel::Finalization.destroyers	A			Perl 6 Metamodel::Finalization							<pre><code>method destroyers(Metamodel::Finalization:D: $obj) returns List:D</code></pre>Returns a list of all finalization methods.	http://doc.perl6.org/type/Metamodel%3A%3AFinalization#destroyers
destroyers	R	Metamodel::Finalization.destroyers										
Metamodel::MROBasedMethodDispatch	A			Perl 6 Metamodel::MROBasedMethodDispatch							<pre><code>role Metamodel::MROBasedMethodDispatch { ... }</code></pre>This role implements locating methods based on the method resolution order of related (usually "super"/"parent") types.	http://doc.perl6.org/type/Metamodel%3A%3AMROBasedMethodDispatch
Metamodel::MROBasedMethodDispatch.find_method	A			Perl 6 Metamodel::MROBasedMethodDispatch							<pre><code>method find_method(Metamodel::MROBasedMethodDispatch:D: $obj, $name, $no_fallback)</code></pre>Given a method name, returns the method object of that name which is closest in the method resolution order (MRO).	http://doc.perl6.org/type/Metamodel%3A%3AMROBasedMethodDispatch#find_method
find_method	R	Metamodel::MROBasedMethodDispatch.find_method										
Metamodel::MROBasedMethodDispatch.find_method_qualified	A			Perl 6 Metamodel::MROBasedMethodDispatch							<pre><code>method find_method(Metamodel::MROBasedMethodDispatch:D: $obj, $type, $name)</code></pre>Given a method name and a type, returns the method from that type.	http://doc.perl6.org/type/Metamodel%3A%3AMROBasedMethodDispatch#find_method_qualified
find_method_qualified	R	Metamodel::MROBasedMethodDispatch.find_method_qualified										
Metamodel::MethodContainer	A			Perl 6 Metamodel::MethodContainer							<pre><code>class Metamodel::MethodContainer { ... }</code></pre>roles, classes, grammars ane enums can contain methods.	http://doc.perl6.org/type/Metamodel%3A%3AMethodContainer
Metamodel::MethodContainer.add_method	A			Perl 6 Metamodel::MethodContainer							<pre><code>method add_method(Metamodel::MethodContainer: $obj, $name, $code)</code></pre>Adds a method to the meta class, to be called with name $name.	http://doc.perl6.org/type/Metamodel%3A%3AMethodContainer#add_method
add_method	R	Metamodel::MethodContainer.add_method										
Metamodel::MethodContainer.methods	A			Perl 6 Metamodel::MethodContainer							<pre><code>method methods(Metamodel::MethodContainer: $obj, :$all, :$local)</code></pre>Returns a list of public methods available on the class (which includes methods from superclasses and roles).	http://doc.perl6.org/type/Metamodel%3A%3AMethodContainer#methods
methods	R	Metamodel::MethodContainer.methods										
Metamodel::MethodContainer.method_table	A			Perl 6 Metamodel::MethodContainer							<pre><code>method method_table(Metamodel::MethodContainer:D: $obj) returns Hash:D</code></pre>Returns a hash where the keys are method names, and the values are methods.	http://doc.perl6.org/type/Metamodel%3A%3AMethodContainer#method_table
method_table	R	Metamodel::MethodContainer.method_table										
Metamodel::MultipleInheritance	A			Perl 6 Metamodel::MultipleInheritance							<pre><code>role Metamodel::MultipleInheritance { ... }</code></pre>Classes, roles and grammars can have parent classes, that is, classes to which method lookups fall back to, and to whose type the child class conforms to.	http://doc.perl6.org/type/Metamodel%3A%3AMultipleInheritance
Metamodel::MultipleInheritance.add_parent	A			Perl 6 Metamodel::MultipleInheritance							<pre><code>method add_parent(Metamodel::MultipleInheritance:D: $Obj, $parent, :$hides)</code></pre>Adds $parent as a parent type.	http://doc.perl6.org/type/Metamodel%3A%3AMultipleInheritance#add_parent
add_parent	R	Metamodel::MultipleInheritance.add_parent										
Metamodel::MultipleInheritance.parents	A			Perl 6 Metamodel::MultipleInheritance							<pre><code>method parents(Metamodel::MultipleInheritance:D: $obj, :$all, :$tree)</code></pre>Returns the list of parent classes.	http://doc.perl6.org/type/Metamodel%3A%3AMultipleInheritance#parents
parents	R	Metamodel::MultipleInheritance.parents										
Metamodel::MultipleInheritance.hides	A			Perl 6 Metamodel::MultipleInheritance							<pre><code>method hides(Metamodel::MultipleInheritance:D: $obj)</code></pre>Returns a list of all hidden parent classes.	http://doc.perl6.org/type/Metamodel%3A%3AMultipleInheritance#hides
hides	R	Metamodel::MultipleInheritance.hides										
Metamodel::MultipleInheritance.hidden	A			Perl 6 Metamodel::MultipleInheritance							<pre><code>method hidden(Metamodel::MultipleInheritance:D: $obj)</code></pre>Returns a true value if (and only if) the class is marked is hidden.	http://doc.perl6.org/type/Metamodel%3A%3AMultipleInheritance#hidden
hidden	R	Metamodel::MultipleInheritance.hidden										
Metamodel::MultipleInheritance.set_hidden	A			Perl 6 Metamodel::MultipleInheritance							<pre><code>method set_hidden(Metamodel::MultipleInheritance:D: $obj)</code></pre>Marks the type as hidden.	http://doc.perl6.org/type/Metamodel%3A%3AMultipleInheritance#set_hidden
set_hidden	R	Metamodel::MultipleInheritance.set_hidden										
Metamodel::Naming	A			Perl 6 Metamodel::Naming							<pre><code>role Metamodel::Naming { }</code></pre>Meta model role for (optionally) named things, like classes, roles and enums.	http://doc.perl6.org/type/Metamodel%3A%3ANaming
Metamodel::Naming.name	A			Perl 6 Metamodel::Naming							<pre><code>method name($type)</code></pre>Returns the name of the meta object, if any.	http://doc.perl6.org/type/Metamodel%3A%3ANaming#name
Metamodel::Naming.set_name	A			Perl 6 Metamodel::Naming							<pre><code>method set_name($type, $new_name)</code></pre>Sets the new name of the meta object.	http://doc.perl6.org/type/Metamodel%3A%3ANaming#set_name
set_name	R	Metamodel::Naming.set_name										
Metamodel::Primitives	A			Perl 6 Metamodel::Primitives							<pre><code>class Metamodel::Primitives is SuperClass { ... }</code></pre>Metamodel::Primitives provides low-level operations for working with types, which are otherwise only available as implementation-dependent directives.	http://doc.perl6.org/type/Metamodel%3A%3APrimitives
Metamodel::Primitives.create_type	A			Perl 6 Metamodel::Primitives							<pre><code>method create_type(Mu $how, $repr = 'P6opaque')</code></pre>Creates and returns a new type from a meta object $how and a representation name.	http://doc.perl6.org/type/Metamodel%3A%3APrimitives#create_type
create_type	R	Metamodel::Primitives.create_type										
Metamodel::Primitives.set_package	A			Perl 6 Metamodel::Primitives							<pre><code>method set_package(Mu $type, $package)</code></pre>Sets the package associated with the type.	http://doc.perl6.org/type/Metamodel%3A%3APrimitives#set_package
set_package	R	Metamodel::Primitives.set_package										
Metamodel::Primitives.install_method_cache	A			Perl 6 Metamodel::Primitives							<pre><code>method install_method_cache( Mu $type, %cache, :$authoritative = True)</code></pre>Installs a method cache, that is, a mapping from method names to code objects.	http://doc.perl6.org/type/Metamodel%3A%3APrimitives#install_method_cache
install_method_cache	R	Metamodel::Primitives.install_method_cache										
Metamodel::Primitives.configure_type_checking	A			Perl 6 Metamodel::Primitives							<pre><code>method configure_type_checking(\n    Mu $type,\n    @cache,\n    :$authoritative = True,\n    :$call_accepts = False\n)</code></pre>Configures the type checking for $type.	http://doc.perl6.org/type/Metamodel%3A%3APrimitives#configure_type_checking
configure_type_checking	R	Metamodel::Primitives.configure_type_checking										
Metamodel::Primitives.configure_destroy	A			Perl 6 Metamodel::Primitives							<pre><code>method configure_destroy(Mu $type, $destroy)</code></pre>Configures whether DESTROY methods are called (if present) when the garbage collector collects an object of this type (if $destroy is set to a true value).	http://doc.perl6.org/type/Metamodel%3A%3APrimitives#configure_destroy
configure_destroy	R	Metamodel::Primitives.configure_destroy										
Metamodel::Primitives.compose_type	A			Perl 6 Metamodel::Primitives							<pre><code>method compose_type(Mu $type, $configuration)</code></pre>Composes $type (that is, finalizes it to be ready for instantiation).	http://doc.perl6.org/type/Metamodel%3A%3APrimitives#compose_type
compose_type	R	Metamodel::Primitives.compose_type										
Metamodel::Primitives.rebless	A			Perl 6 Metamodel::Primitives							<pre><code>method rebless(Mu $object, Mu $type)</code></pre>Changes $obj to be of type $type.	http://doc.perl6.org/type/Metamodel%3A%3APrimitives#rebless
rebless	R	Metamodel::Primitives.rebless										
Metamodel::Primitives.is_type	A			Perl 6 Metamodel::Primitives							<pre><code>method is_type(Mu &#92;obj, Mu &#92;type) returns Bool:D</code></pre>Type-checks obj against type	http://doc.perl6.org/type/Metamodel%3A%3APrimitives#is_type
is_type	R	Metamodel::Primitives.is_type										
Metamodel::Primitives.ACCEPTS	R	Any.ACCEPTS										
Metamodel::Primitives.any	R	Any.any										
Metamodel::Primitives.all	R	Any.all										
Metamodel::Primitives.one	R	Any.one										
Metamodel::Primitives.none	R	Any.none										
Metamodel::Primitives.list	R	Any.list										
Metamodel::Primitives.flat	R	Any.flat										
Metamodel::Primitives.eager	R	Any.eager										
Metamodel::Primitives.elems	R	Any.elems										
Metamodel::Primitives.end	R	Any.end										
Metamodel::Primitives.Str	R	Mu.Str										
Metamodel::Primitives.clone	R	Mu.clone										
Metamodel::Primitives.new	R	Mu.new										
Metamodel::Primitives.bless	R	Mu.bless										
Metamodel::Primitives.CREATE	R	Mu.CREATE										
Metamodel::Primitives.print	R	Mu.print										
Metamodel::Primitives.say	R	Mu.say										
Metamodel::Primitives.ACCEPTS	R	Mu.ACCEPTS										
Metamodel::Primitives.WHICH	R	Mu.WHICH										
Metamodel::Primitives.WHERE	R	Mu.WHERE										
Metamodel::Primitives.WHY	R	Mu.WHY										
Metamodel::PrivateMethodContainer	A			Perl 6 Metamodel::PrivateMethodContainer							<pre><code>role Metamodel::PrivateMethodContainer { ... }</code></pre>In Perl 6, classes, roles and grammars can have private methods, that is, methods that are only callable from within the class, and are not inherited to types derived by inheritance.	http://doc.perl6.org/type/Metamodel%3A%3APrivateMethodContainer
Metamodel::PrivateMethodContainer.add_private_method	A			Perl 6 Metamodel::PrivateMethodContainer							<pre><code>method add_private_method(Metamodel::PrivateMethodContainer: $obj, $name, $code)</code></pre>Adds a private method $code with name $name.	http://doc.perl6.org/type/Metamodel%3A%3APrivateMethodContainer#add_private_method
add_private_method	R	Metamodel::PrivateMethodContainer.add_private_method										
Metamodel::PrivateMethodContainer.private_method_table	A			Perl 6 Metamodel::PrivateMethodContainer							<pre><code>method private_method_table(Metamodel::PrivateMethodContainer: $obj)</code></pre>Returns a hash of name =&gt; &amp;method_object	http://doc.perl6.org/type/Metamodel%3A%3APrivateMethodContainer#private_method_table
private_method_table	R	Metamodel::PrivateMethodContainer.private_method_table										
Metamodel::RoleContainer	A			Perl 6 Metamodel::RoleContainer							<pre><code>role Metamodel::RoleContainer { ... }</code></pre>Implements the ability to hold roles to be held for composition.	http://doc.perl6.org/type/Metamodel%3A%3ARoleContainer
Metamodel::RoleContainer.add_role	A			Perl 6 Metamodel::RoleContainer							<pre><code>method add_role(Metamodel::RoleContainer:D: $obj, Mu $role)</code></pre>Adds the $role to the list of roles to be composed.	http://doc.perl6.org/type/Metamodel%3A%3ARoleContainer#add_role
add_role	R	Metamodel::RoleContainer.add_role										
Metamodel::RoleContainer.roles_to_compose	A			Perl 6 Metamodel::RoleContainer							<pre><code>method add_role(Metamodel::RoleContainer:D: $obj) returns List:D</code></pre>returns a list of roles added with add_role, which are to be composed at type composition time.	http://doc.perl6.org/type/Metamodel%3A%3ARoleContainer#roles_to_compose
roles_to_compose	R	Metamodel::RoleContainer.roles_to_compose										
Metamodel::Trusting	A			Perl 6 Metamodel::Trusting							<pre><code>role Metamodel::Trusting is SuperClass { ... }</code></pre>Normally, code in a class or role can only access its own private methods.	http://doc.perl6.org/type/Metamodel%3A%3ATrusting
Metamodel::Trusting.add_trustee	A			Perl 6 Metamodel::Trusting							<pre><code>method add_trustee(Metamodel::Trusting:D: $type, Mu $trustee)</code></pre>Trust $trustee.	http://doc.perl6.org/type/Metamodel%3A%3ATrusting#add_trustee
add_trustee	R	Metamodel::Trusting.add_trustee										
Metamodel::Trusting.trusts	A			Perl 6 Metamodel::Trusting							<pre><code>method trusts(Metamodel::Trusting:D: $type) returns List</code></pre>Returns a list of types that the invocant trusts.	http://doc.perl6.org/type/Metamodel%3A%3ATrusting#trusts
trusts	R	Metamodel::Trusting.trusts										
Metamodel::Trusting.is_trusted	A			Perl 6 Metamodel::Trusting							<pre><code>method is_trusted(Metamodel::Trusting:D: $type, $claimant)</code></pre>Returns 1 if $type trusts $claimant, and 0 otherwise.	http://doc.perl6.org/type/Metamodel%3A%3ATrusting#is_trusted
is_trusted	R	Metamodel::Trusting.is_trusted										
Method	A			Perl 6 Method							<pre><code>class Method is Routine { }</code></pre>A type for methods.	http://doc.perl6.org/type/Method
Method.multi	R	Routine.multi										
Method.candidates	R	Routine.candidates										
Method.wrap	R	Routine.wrap										
Method.unwrap	R	Routine.unwrap										
Method.yada	R	Routine.yada										
Method.ACCEPTS	R	Code.ACCEPTS										
Method.arity	R	Code.arity										
Method.count	R	Code.count										
Method.signature	R	Code.signature										
Method.Str	R	Code.Str										
Method.ACCEPTS	R	Any.ACCEPTS										
Method.any	R	Any.any										
Method.all	R	Any.all										
Method.one	R	Any.one										
Method.none	R	Any.none										
Method.list	R	Any.list										
Method.flat	R	Any.flat										
Method.eager	R	Any.eager										
Method.elems	R	Any.elems										
Method.end	R	Any.end										
Method.Str	R	Mu.Str										
Method.clone	R	Mu.clone										
Method.new	R	Mu.new										
Method.bless	R	Mu.bless										
Method.CREATE	R	Mu.CREATE										
Method.print	R	Mu.print										
Method.say	R	Mu.say										
Method.ACCEPTS	R	Mu.ACCEPTS										
Method.WHICH	R	Mu.WHICH										
Method.WHERE	R	Mu.WHERE										
Method.WHY	R	Mu.WHY										
Mix	A			Perl 6 Mix							<pre><code>class Mix does Mixy { }</code></pre>A Mix is an immutable mix, meaning a collection of distinct elements in no particular order that each have a real-number weight assigned to them.	http://doc.perl6.org/type/Mix
Mix.mix	A			Perl 6 Mix							<pre><code>sub mix(*@args --&gt; Mix)</code></pre>Creates a new Mix from @args.	http://doc.perl6.org/type/Mix#mix
mix	R	Mix.mix										
Mix.total	R	Mixy.total										
Mix.roll	R	Mixy.roll										
Mix.ACCEPTS	R	Any.ACCEPTS										
Mix.any	R	Any.any										
Mix.all	R	Any.all										
Mix.one	R	Any.one										
Mix.none	R	Any.none										
Mix.list	R	Any.list										
Mix.flat	R	Any.flat										
Mix.eager	R	Any.eager										
Mix.elems	R	Any.elems										
Mix.end	R	Any.end										
Mix.Str	R	Mu.Str										
Mix.clone	R	Mu.clone										
Mix.new	R	Mu.new										
Mix.bless	R	Mu.bless										
Mix.CREATE	R	Mu.CREATE										
Mix.print	R	Mu.print										
Mix.say	R	Mu.say										
Mix.ACCEPTS	R	Mu.ACCEPTS										
Mix.WHICH	R	Mu.WHICH										
Mix.WHERE	R	Mu.WHERE										
Mix.WHY	R	Mu.WHY										
MixHash	A			Perl 6 MixHash							<pre><code>class MixHash does Mixy { }</code></pre>A MixHash is a mutable mix, meaning a collection of distinct elements in no particular order that each have a real-number weight assigned to them.	http://doc.perl6.org/type/MixHash
MixHash.total	R	Mixy.total										
MixHash.roll	R	Mixy.roll										
MixHash.ACCEPTS	R	Any.ACCEPTS										
MixHash.any	R	Any.any										
MixHash.all	R	Any.all										
MixHash.one	R	Any.one										
MixHash.none	R	Any.none										
MixHash.list	R	Any.list										
MixHash.flat	R	Any.flat										
MixHash.eager	R	Any.eager										
MixHash.elems	R	Any.elems										
MixHash.end	R	Any.end										
MixHash.Str	R	Mu.Str										
MixHash.clone	R	Mu.clone										
MixHash.new	R	Mu.new										
MixHash.bless	R	Mu.bless										
MixHash.CREATE	R	Mu.CREATE										
MixHash.print	R	Mu.print										
MixHash.say	R	Mu.say										
MixHash.ACCEPTS	R	Mu.ACCEPTS										
MixHash.WHICH	R	Mu.WHICH										
MixHash.WHERE	R	Mu.WHERE										
MixHash.WHY	R	Mu.WHY										
Mixy	A			Perl 6 Mixy							<pre><code>role Mixy does Baggy { }</code></pre>A role for collections of weighted values.	http://doc.perl6.org/type/Mixy
Mixy.total	A			Perl 6 Mixy							<pre><code>method total(--&gt; Real)</code></pre>Returns the sum of all the weights	http://doc.perl6.org/type/Mixy#total
total	D								*[[Baggy.total]], \n*[[Mixy.total]], returns the sum of all the weights\n*[[Setty.total]], the total of all the values of the QuantHash object.			
Mixy.roll	A			Perl 6 Mixy							<pre><code>method roll ($count = 1)</code></pre>Similar to a Bag.roll, but with Real weights rather than integral ones.	http://doc.perl6.org/type/Mixy#roll
Mixy.ACCEPTS	R	Baggy.ACCEPTS										
Mu	A			Perl 6 Mu							<pre><code>class Mu { ... }</code></pre>The root of the Perl 6 type hierarchy.	http://doc.perl6.org/type/Mu
Mu.defined	A			Perl 6 Mu							<pre><code>multi sub    defined(Mu) returns Bool:D\nmulti method defined()   returns Bool:D</code></pre>Returns False on the type object, and True otherwise.	http://doc.perl6.org/type/Mu#defined
Mu.Bool	A			Perl 6 Mu							<pre><code>multi sub    Bool(Mu) returns Bool:D\nmulti method Bool()   returns Bool:D</code></pre>Returns False on the type object, and True otherwise.	http://doc.perl6.org/type/Mu#Bool
Mu.Str	A			Perl 6 Mu							<pre><code>multi method Str()   returns Str</code></pre>Returns a string representation of the invocant, intended to be machine readable.	http://doc.perl6.org/type/Mu#Str
Mu.gist	A			Perl 6 Mu							<pre><code>multi sub    gist(Mu) returns Str\nmulti method gist()   returns Str</code></pre>Returns a string representation of the invocant, optimized for fast recognition by humans.	http://doc.perl6.org/type/Mu#gist
Mu.perl	A			Perl 6 Mu							<pre><code>multi sub    perl(Mu) returns Str\nmulti method perl()   returns Str</code></pre>Returns a Perlish representation of the object (i.e., can usually be re-parsed to regenerate the object).	http://doc.perl6.org/type/Mu#perl
perl	R	Mu.perl										
Mu.clone	A			Perl 6 Mu							<pre><code>method clone(*%twiddles)</code></pre>Creates a shallow clone of the invocant.	http://doc.perl6.org/type/Mu#clone
Mu.new	A			Perl 6 Mu							<pre><code>multi method new(*%attrinit)</code></pre>Default method for constructing (create + initialize) new objects of a class.	http://doc.perl6.org/type/Mu#new
Mu.bless	A			Perl 6 Mu							<pre><code>method bless(*%attrinit) returns Mu:D</code></pre>Lower-level object construction method than new.	http://doc.perl6.org/type/Mu#bless
bless	R	Mu.bless										
Mu.CREATE	A			Perl 6 Mu							<pre><code>method CREATE() returns Mu:D</code></pre>Allocates a new object of the same type as the invocant, without initializing any attributes.	http://doc.perl6.org/type/Mu#CREATE
CREATE	R	Mu.CREATE										
Mu.print	A			Perl 6 Mu							<pre><code>multi method print() returns Bool:D</code></pre>Prints value to $*OUT after stringification using .Str method without newline at end.	http://doc.perl6.org/type/Mu#print
Mu.say	A			Perl 6 Mu							<pre><code>multi method say() returns Bool:D</code></pre>Prints value to $*OUT after stringification using .gist method with newline at end.	http://doc.perl6.org/type/Mu#say
Mu.ACCEPTS	A			Perl 6 Mu							<pre><code>multi method ACCEPTS(Mu:U: $other)</code></pre>Performs a type check.	http://doc.perl6.org/type/Mu#ACCEPTS
Mu.WHICH	A			Perl 6 Mu							<pre><code>multi method WHICH() returns ObjAt:D</code></pre>Returns an object of type ObjAt which uniquely identifies the object.	http://doc.perl6.org/type/Mu#WHICH
WHICH	R	Mu.WHICH										
Mu.WHERE	A			Perl 6 Mu							<pre><code>method WHERE() returns Int</code></pre>Returns an Int representing the memory address of the object.	http://doc.perl6.org/type/Mu#WHERE
WHERE	R	Mu.WHERE										
Mu.WHY	A			Perl 6 Mu							<pre><code>multi method WHY()</code></pre>Returns the attached Pod value.	http://doc.perl6.org/type/Mu#WHY
WHY	R	Mu.WHY										
Mu.export	A			Perl 6 Mu							<pre><code>multi sub trait_mod:&lt;is&gt;(Mu:U &#92;type, :$export!)</code></pre>Marks a type as being exported, that is, available to external users.	http://doc.perl6.org/type/Mu#export
export	D								*[[Mu.export]], marks a type as being exported, that is, available to external users.\n*[[Routine.export]], marks a routine as exported to the rest of the world			
Nil	A			Perl 6 Nil							<pre><code>class Nil is Iterator { }</code></pre>Represents an empty list in list context, and an undefined value in item context.	http://doc.perl6.org/type/Nil
Nil.gist	A			Perl 6 Nil							<pre><code>method gist() returns Str:D</code></pre>Returns "Nil"	http://doc.perl6.org/type/Nil#gist
Nil.Str	A			Perl 6 Nil							<pre><code>method Str() returns Str:D</code></pre>Returns the empty string.	http://doc.perl6.org/type/Nil#Str
Nil.reify	R	Iterator.reify										
Nil.infinite	R	Iterator.infinite										
Nil.abs	R	Cool.abs										
Nil.conj	R	Cool.conj										
Nil.sqrt	R	Cool.sqrt										
Nil.sign	R	Cool.sign										
Nil.rand	R	Cool.rand										
Nil.sin	R	Cool.sin										
Nil.asin	R	Cool.asin										
Nil.cos	R	Cool.cos										
Nil.acos	R	Cool.acos										
Nil.tan	R	Cool.tan										
Nil.atan	R	Cool.atan										
Nil.atan2	R	Cool.atan2										
Nil.sec	R	Cool.sec										
Nil.asec	R	Cool.asec										
Nil.cosec	R	Cool.cosec										
Nil.acosec	R	Cool.acosec										
Nil.cotan	R	Cool.cotan										
Nil.acotan	R	Cool.acotan										
Nil.sinh	R	Cool.sinh										
Nil.asinh	R	Cool.asinh										
Nil.cosh	R	Cool.cosh										
Nil.acosh	R	Cool.acosh										
Nil.tanh	R	Cool.tanh										
Nil.atanh	R	Cool.atanh										
Nil.log	R	Cool.log										
Nil.exp	R	Cool.exp										
Nil.round	R	Cool.round										
Nil.floor	R	Cool.floor										
Nil.ceiling	R	Cool.ceiling										
Nil.ord	R	Cool.ord										
Nil.chr	R	Cool.chr										
Nil.chars	R	Cool.chars										
Nil.codes	R	Cool.codes										
Nil.flip	R	Cool.flip										
Nil.trim	R	Cool.trim										
Nil.trim-leading	R	Cool.trim-leading										
Nil.trim-trailing	R	Cool.trim-trailing										
Nil.lc	R	Cool.lc										
Nil.uc	R	Cool.uc										
Nil.tc	R	Cool.tc										
Nil.tclc	R	Cool.tclc										
Nil.wordcase	R	Cool.wordcase										
Nil.chop	R	Cool.chop										
Nil.chomp	R	Cool.chomp										
Nil.words	R	Cool.words										
Nil.IO	R	Cool.IO										
Nil.ACCEPTS	R	Any.ACCEPTS										
Nil.any	R	Any.any										
Nil.all	R	Any.all										
Nil.one	R	Any.one										
Nil.none	R	Any.none										
Nil.list	R	Any.list										
Nil.flat	R	Any.flat										
Nil.eager	R	Any.eager										
Nil.elems	R	Any.elems										
Nil.end	R	Any.end										
Nil.Str	R	Mu.Str										
Nil.clone	R	Mu.clone										
Nil.new	R	Mu.new										
Nil.bless	R	Mu.bless										
Nil.CREATE	R	Mu.CREATE										
Nil.print	R	Mu.print										
Nil.say	R	Mu.say										
Nil.ACCEPTS	R	Mu.ACCEPTS										
Nil.WHICH	R	Mu.WHICH										
Nil.WHERE	R	Mu.WHERE										
Nil.WHY	R	Mu.WHY										
Num	A			Perl 6 Num							<pre><code>class Num is Cool does Real { }</code></pre>A Num object stores a floating-point number.	http://doc.perl6.org/type/Num
Num.Rat	R	Real.Rat										
Num.sign	R	Real.sign										
Num.round	R	Real.round										
Num.floor	R	Real.floor										
Num.ceiling	R	Real.ceiling										
Num.truncate	R	Real.truncate										
Num.base	R	Real.base										
Num.Real	R	Numeric.Real										
Num.Int	R	Numeric.Int										
Num.Rat	R	Numeric.Rat										
Num.Num	R	Numeric.Num										
Num.narrow	R	Numeric.narrow										
Num.ACCEPTS	R	Numeric.ACCEPTS										
Num.roots	R	Numeric.roots										
Num.conj	R	Numeric.conj										
Num.Bool	R	Numeric.Bool										
Num.succ	R	Numeric.succ										
Num.pred	R	Numeric.pred										
Num.abs	R	Cool.abs										
Num.conj	R	Cool.conj										
Num.sqrt	R	Cool.sqrt										
Num.sign	R	Cool.sign										
Num.rand	R	Cool.rand										
Num.sin	R	Cool.sin										
Num.asin	R	Cool.asin										
Num.cos	R	Cool.cos										
Num.acos	R	Cool.acos										
Num.tan	R	Cool.tan										
Num.atan	R	Cool.atan										
Num.atan2	R	Cool.atan2										
Num.sec	R	Cool.sec										
Num.asec	R	Cool.asec										
Num.cosec	R	Cool.cosec										
Num.acosec	R	Cool.acosec										
Num.cotan	R	Cool.cotan										
Num.acotan	R	Cool.acotan										
Num.sinh	R	Cool.sinh										
Num.asinh	R	Cool.asinh										
Num.cosh	R	Cool.cosh										
Num.acosh	R	Cool.acosh										
Num.tanh	R	Cool.tanh										
Num.atanh	R	Cool.atanh										
Num.log	R	Cool.log										
Num.exp	R	Cool.exp										
Num.round	R	Cool.round										
Num.floor	R	Cool.floor										
Num.ceiling	R	Cool.ceiling										
Num.ord	R	Cool.ord										
Num.chr	R	Cool.chr										
Num.chars	R	Cool.chars										
Num.codes	R	Cool.codes										
Num.flip	R	Cool.flip										
Num.trim	R	Cool.trim										
Num.trim-leading	R	Cool.trim-leading										
Num.trim-trailing	R	Cool.trim-trailing										
Num.lc	R	Cool.lc										
Num.uc	R	Cool.uc										
Num.tc	R	Cool.tc										
Num.tclc	R	Cool.tclc										
Num.wordcase	R	Cool.wordcase										
Num.chop	R	Cool.chop										
Num.chomp	R	Cool.chomp										
Num.words	R	Cool.words										
Num.IO	R	Cool.IO										
Num.ACCEPTS	R	Any.ACCEPTS										
Num.any	R	Any.any										
Num.all	R	Any.all										
Num.one	R	Any.one										
Num.none	R	Any.none										
Num.list	R	Any.list										
Num.flat	R	Any.flat										
Num.eager	R	Any.eager										
Num.elems	R	Any.elems										
Num.end	R	Any.end										
Num.Str	R	Mu.Str										
Num.clone	R	Mu.clone										
Num.new	R	Mu.new										
Num.bless	R	Mu.bless										
Num.CREATE	R	Mu.CREATE										
Num.print	R	Mu.print										
Num.say	R	Mu.say										
Num.ACCEPTS	R	Mu.ACCEPTS										
Num.WHICH	R	Mu.WHICH										
Num.WHERE	R	Mu.WHERE										
Num.WHY	R	Mu.WHY										
Numeric	A			Perl 6 Numeric							<pre><code>role Numeric { ... }</code></pre>Common role for numbers and types that can act as numbers.	http://doc.perl6.org/type/Numeric
Numeric.Real	A			Perl 6 Numeric							<pre><code>method Real(Numeric:D:) returns Real:D</code></pre>If this Numeric is equivalent to a Real, return that Real.	http://doc.perl6.org/type/Numeric#Real
Numeric.Int	A			Perl 6 Numeric							<pre><code>method Int(Numeric:D:) returns Int:D</code></pre>If this Numeric is equivalent to a Real, return the equivalent of calling truncate on that Real to get an Int.	http://doc.perl6.org/type/Numeric#Int
Numeric.Rat	A			Perl 6 Numeric							<pre><code>method Rat(Numeric:D: Real $epsilon = 1.0e-6) returns Rat:D</code></pre>If this Numeric is equivalent to a Real, return a Rat which is within $epsilon of that Real's value.	http://doc.perl6.org/type/Numeric#Rat
Numeric.Num	A			Perl 6 Numeric							<pre><code>method Num(Numeric:D:) returns Num:D</code></pre>If this Numeric is equivalent to a Real, return that Real as a Num as accurately as is possible.	http://doc.perl6.org/type/Numeric#Num
Numeric.narrow	A			Perl 6 Numeric							<pre><code>method narrow(Numeric:D) returns Numeric:D</code></pre>Returns the number converted to the narrowest type that can hold it without loss of precision.	http://doc.perl6.org/type/Numeric#narrow
narrow	R	Numeric.narrow										
Numeric.ACCEPTS	A			Perl 6 Numeric							<pre><code>multi method ACCEPTS(Numeric:D: $other)</code></pre>Returns True if $other is numerically the same as the invocant.	http://doc.perl6.org/type/Numeric#ACCEPTS
Numeric.log	A			Perl 6 Numeric							<pre><code>multi sub    log(Numeric:D, Numeric $base = e) returns Numeric:D\nmulti method log(Numeric:D: Numeric $base = e) returns Numeric:D</code></pre>Calculates the logarithm to base $base.	http://doc.perl6.org/type/Numeric#log
Numeric.log10	A			Perl 6 Numeric							<pre><code>multi sub    log10(Numeric:D ) returns Numeric:D\nmulti method log10(Numeric:D:) returns Numeric:D</code></pre>Calculates the logarithm to base 10.	http://doc.perl6.org/type/Numeric#log10
log10	R	Numeric.log10										
Numeric.exp	A			Perl 6 Numeric							<pre><code>multi sub    exp(Numeric:D, Numeric:D $base = e) returns Numeric:D\nmulti method exp(Numeric:D: Numeric:D $base = e) returns Numeric:D</code></pre>Returns $base to the power of the number, or e to the power of the number if called without a second argument.	http://doc.perl6.org/type/Numeric#exp
Numeric.roots	A			Perl 6 Numeric							<pre><code>multi method roots(Numeric:D: Int:D $n) returns Positional</code></pre>Returns a list of the $n complex roots, which evaluate to the original number when raised to the $nth power.	http://doc.perl6.org/type/Numeric#roots
roots	R	Numeric.roots										
Numeric.abs	A			Perl 6 Numeric							<pre><code>multi sub    abs(Numeric:D ) returns Real:D\nmulti method abs(Numeric:D:) returns Real:D</code></pre>Returns the absolute value of the number.	http://doc.perl6.org/type/Numeric#abs
Numeric.sqrt	A			Perl 6 Numeric							<pre><code>multi sub    sqrt(Numeric:D) returns Numeric:D\nmulti method sqrt(Numeric:D) returns Numeric:D</code></pre>Returns a square root of the number.	http://doc.perl6.org/type/Numeric#sqrt
Numeric.conj	A			Perl 6 Numeric							<pre><code>multi method conj(Numeric:D) returns Numeric:D</code></pre>Returns the complex conjugate of the number.	http://doc.perl6.org/type/Numeric#conj
Numeric.Bool	A			Perl 6 Numeric							<pre><code>multi method Bool(Numeric:D:)</code></pre>Returns False if the number is equivalent to zero, and True otherwise.	http://doc.perl6.org/type/Numeric#Bool
Numeric.succ	A			Perl 6 Numeric							<pre><code>method succ(Numerid:D:)</code></pre>Returns the number incremented by one (successor).	http://doc.perl6.org/type/Numeric#succ
Numeric.pred	A			Perl 6 Numeric							<pre><code>method pred(Numerid:D:)</code></pre>Returns the number decremented by one (predecessor).	http://doc.perl6.org/type/Numeric#pred
pred	D								*[[Numeric.pred]], returns the number decremented by one (predecessor).\n*[[Str.pred]], returns the string decremented by one.			
ObjAt	A			Perl 6 ObjAt							<pre><code>class ObjAt { }</code></pre>Objects of type ObjAt are the return value of .WHICH calls on other objects, and identify an object uniquely.	http://doc.perl6.org/type/ObjAt
ObjAt.ACCEPTS	R	Any.ACCEPTS										
ObjAt.any	R	Any.any										
ObjAt.all	R	Any.all										
ObjAt.one	R	Any.one										
ObjAt.none	R	Any.none										
ObjAt.list	R	Any.list										
ObjAt.flat	R	Any.flat										
ObjAt.eager	R	Any.eager										
ObjAt.elems	R	Any.elems										
ObjAt.end	R	Any.end										
ObjAt.Str	R	Mu.Str										
ObjAt.clone	R	Mu.clone										
ObjAt.new	R	Mu.new										
ObjAt.bless	R	Mu.bless										
ObjAt.CREATE	R	Mu.CREATE										
ObjAt.print	R	Mu.print										
ObjAt.say	R	Mu.say										
ObjAt.ACCEPTS	R	Mu.ACCEPTS										
ObjAt.WHICH	R	Mu.WHICH										
ObjAt.WHERE	R	Mu.WHERE										
ObjAt.WHY	R	Mu.WHY										
Pair	A			Perl 6 Pair							<pre><code>class Pair is Enum { ... }</code></pre>Consists of two parts, a key and a value.	http://doc.perl6.org/type/Pair
Pair.value	A			Perl 6 Pair							<pre><code>multi method value(Pair:D:) is rw</code></pre>Returns the value part of the Pair.	http://doc.perl6.org/type/Pair#value
Pair.cmp	A			Perl 6 Pair							<pre><code>multi sub infix:&lt;cmp&gt;(Pair:D, Pair:D)</code></pre>The type-agnostic comparator; compares two Pairs.	http://doc.perl6.org/type/Pair#cmp
cmp	R	Pair.cmp										
Pair.fmt	A			Perl 6 Pair							<pre><code>multi method fmt(Pair:D:) returns Str:D</code></pre>Takes a format string, and returns a string the key and value parts of the Pair formatted.	http://doc.perl6.org/type/Pair#fmt
fmt	R	Pair.fmt										
Pair.kv	A			Perl 6 Pair							<pre><code>multi method kv(Pair:D:) returns Parcel:D</code></pre>Returns a two-element Parcel with the key and value parts o Pair, in that order.	http://doc.perl6.org/type/Pair#kv
Pair.pairs	A			Perl 6 Pair							<pre><code>multi method pairs(Pair:D:)</code></pre>Returns a list of one Pair, namely this one.	http://doc.perl6.org/type/Pair#pairs
Pair.key	R	Enum.key										
Pair.value	R	Enum.value										
Pair.invert	R	Enum.invert										
Pair.ACCEPTS	R	Any.ACCEPTS										
Pair.any	R	Any.any										
Pair.all	R	Any.all										
Pair.one	R	Any.one										
Pair.none	R	Any.none										
Pair.list	R	Any.list										
Pair.flat	R	Any.flat										
Pair.eager	R	Any.eager										
Pair.elems	R	Any.elems										
Pair.end	R	Any.end										
Pair.Str	R	Mu.Str										
Pair.clone	R	Mu.clone										
Pair.new	R	Mu.new										
Pair.bless	R	Mu.bless										
Pair.CREATE	R	Mu.CREATE										
Pair.print	R	Mu.print										
Pair.say	R	Mu.say										
Pair.ACCEPTS	R	Mu.ACCEPTS										
Pair.WHICH	R	Mu.WHICH										
Pair.WHERE	R	Mu.WHERE										
Pair.WHY	R	Mu.WHY										
Parameter	A			Perl 6 Parameter							<pre><code>class Parameter { }</code></pre>Represents a parameter, for purpose of introspection.	http://doc.perl6.org/type/Parameter
Parameter.name	A			Perl 6 Parameter							Returns the variable name.	http://doc.perl6.org/type/Parameter#name
Parameter.constraints	A			Perl 6 Parameter							Returns additional constraints on the parameter (usually as an all-Junction).	http://doc.perl6.org/type/Parameter#constraints
constraints	R	Parameter.constraints										
Parameter.type	A			Perl 6 Parameter							Returns the nominal type constraint of the parameter.	http://doc.perl6.org/type/Parameter#type
type	D								*[[Parameter.type]], returns the nominal type constraint of the parameter.\n*[[X::Bind::Slice.type]], returns the type object of the thing that you tried to slice-bind, for example Array, List or Hash.\n*[[X::Does::TypeObject.type]], returns the type object into which the code tried to mix in a role.			
Parameter.named	A			Perl 6 Parameter							Returns True if it's a named parameter.	http://doc.perl6.org/type/Parameter#named
named	R	Parameter.named										
Parameter.named_names	A			Perl 6 Parameter							Returns a list of names/aliases for this parameter.	http://doc.perl6.org/type/Parameter#named_names
named_names	R	Parameter.named_names										
Parameter.positional	A			Perl 6 Parameter							Returns True if the parameter is positional.	http://doc.perl6.org/type/Parameter#positional
positional	R	Parameter.positional										
Parameter.slurpy	A			Perl 6 Parameter							Returns True for slurpy parameters.	http://doc.perl6.org/type/Parameter#slurpy
slurpy	R	Parameter.slurpy										
Parameter.optional	A			Perl 6 Parameter							Returns True for optional parameters.	http://doc.perl6.org/type/Parameter#optional
optional	R	Parameter.optional										
Parameter.parcel	A			Perl 6 Parameter							Returns True for parcel parameters.	http://doc.perl6.org/type/Parameter#parcel
parcel	R	Parameter.parcel										
Parameter.capture	A			Perl 6 Parameter							Returns True for parameters that capture the rest of the argument list into a single object of type Capture.	http://doc.perl6.org/type/Parameter#capture
capture	R	Parameter.capture										
Parameter.rw	A			Perl 6 Parameter							Returns True for is rw parameters.	http://doc.perl6.org/type/Parameter#rw
Parameter.copy	A			Perl 6 Parameter							Returns True for is copy parameters.	http://doc.perl6.org/type/Parameter#copy
copy	R	Parameter.copy										
Parameter.readonly	A			Perl 6 Parameter							Returns True for read-only parameters (the default).	http://doc.perl6.org/type/Parameter#readonly
Parameter.invocant	A			Perl 6 Parameter							Returns True if the parameter is the invocant parameter.	http://doc.perl6.org/type/Parameter#invocant
invocant	D								*[[Parameter.invocant]], returns True if the parameter is the invocant parameter.\n*[[X::Method::InvalidQualifier.invocant]], returns the invocant of the failed, qualified method call\n*[[X::Temporal::Truncation.invocant]], returns the object on which the failed truncated-to method was called.			
Parameter.default	A			Perl 6 Parameter							Returns a closure that upon invocation returns the default value for this parameter, or Any if no default was provided.	http://doc.perl6.org/type/Parameter#default
default	D								*[[Parameter.default]], returns a closure that upon invocation returns the default value for this parameter, or Any if no default was provided.\n*[[Variable.default]], sets the default value with which a variable is initialized, and to which it is reset when Nil is assigned to it.			
Parameter.type_captures	A			Perl 6 Parameter							Returns a list of variable names of type captures associated with this parameter.	http://doc.perl6.org/type/Parameter#type_captures
type_captures	R	Parameter.type_captures										
Parameter.ACCEPTS	R	Any.ACCEPTS										
Parameter.any	R	Any.any										
Parameter.all	R	Any.all										
Parameter.one	R	Any.one										
Parameter.none	R	Any.none										
Parameter.list	R	Any.list										
Parameter.flat	R	Any.flat										
Parameter.eager	R	Any.eager										
Parameter.elems	R	Any.elems										
Parameter.end	R	Any.end										
Parameter.Str	R	Mu.Str										
Parameter.clone	R	Mu.clone										
Parameter.new	R	Mu.new										
Parameter.bless	R	Mu.bless										
Parameter.CREATE	R	Mu.CREATE										
Parameter.print	R	Mu.print										
Parameter.say	R	Mu.say										
Parameter.ACCEPTS	R	Mu.ACCEPTS										
Parameter.WHICH	R	Mu.WHICH										
Parameter.WHERE	R	Mu.WHERE										
Parameter.WHY	R	Mu.WHY										
Parcel	A			Perl 6 Parcel							<pre><code>class Parcel is Cool does Positional { }</code></pre>Parcel stands for Parenthesis cell, i.e. an expression surrounded by parenthesis.	http://doc.perl6.org/type/Parcel
Parcel.of	R	Positional.of										
Parcel.abs	R	Cool.abs										
Parcel.conj	R	Cool.conj										
Parcel.sqrt	R	Cool.sqrt										
Parcel.sign	R	Cool.sign										
Parcel.rand	R	Cool.rand										
Parcel.sin	R	Cool.sin										
Parcel.asin	R	Cool.asin										
Parcel.cos	R	Cool.cos										
Parcel.acos	R	Cool.acos										
Parcel.tan	R	Cool.tan										
Parcel.atan	R	Cool.atan										
Parcel.atan2	R	Cool.atan2										
Parcel.sec	R	Cool.sec										
Parcel.asec	R	Cool.asec										
Parcel.cosec	R	Cool.cosec										
Parcel.acosec	R	Cool.acosec										
Parcel.cotan	R	Cool.cotan										
Parcel.acotan	R	Cool.acotan										
Parcel.sinh	R	Cool.sinh										
Parcel.asinh	R	Cool.asinh										
Parcel.cosh	R	Cool.cosh										
Parcel.acosh	R	Cool.acosh										
Parcel.tanh	R	Cool.tanh										
Parcel.atanh	R	Cool.atanh										
Parcel.log	R	Cool.log										
Parcel.exp	R	Cool.exp										
Parcel.round	R	Cool.round										
Parcel.floor	R	Cool.floor										
Parcel.ceiling	R	Cool.ceiling										
Parcel.ord	R	Cool.ord										
Parcel.chr	R	Cool.chr										
Parcel.chars	R	Cool.chars										
Parcel.codes	R	Cool.codes										
Parcel.flip	R	Cool.flip										
Parcel.trim	R	Cool.trim										
Parcel.trim-leading	R	Cool.trim-leading										
Parcel.trim-trailing	R	Cool.trim-trailing										
Parcel.lc	R	Cool.lc										
Parcel.uc	R	Cool.uc										
Parcel.tc	R	Cool.tc										
Parcel.tclc	R	Cool.tclc										
Parcel.wordcase	R	Cool.wordcase										
Parcel.chop	R	Cool.chop										
Parcel.chomp	R	Cool.chomp										
Parcel.words	R	Cool.words										
Parcel.IO	R	Cool.IO										
Parcel.ACCEPTS	R	Any.ACCEPTS										
Parcel.any	R	Any.any										
Parcel.all	R	Any.all										
Parcel.one	R	Any.one										
Parcel.none	R	Any.none										
Parcel.list	R	Any.list										
Parcel.flat	R	Any.flat										
Parcel.eager	R	Any.eager										
Parcel.elems	R	Any.elems										
Parcel.end	R	Any.end										
Parcel.Str	R	Mu.Str										
Parcel.clone	R	Mu.clone										
Parcel.new	R	Mu.new										
Parcel.bless	R	Mu.bless										
Parcel.CREATE	R	Mu.CREATE										
Parcel.print	R	Mu.print										
Parcel.say	R	Mu.say										
Parcel.ACCEPTS	R	Mu.ACCEPTS										
Parcel.WHICH	R	Mu.WHICH										
Parcel.WHERE	R	Mu.WHERE										
Parcel.WHY	R	Mu.WHY										
Pod::Block	A			Perl 6 Pod::Block							<pre><code>class Pod::Block { }</code></pre>Class for a Pod block, and base class for most other Pod classes.	http://doc.perl6.org/type/Pod%3A%3ABlock
Pod::Block.contents	A			Perl 6 Pod::Block							<pre><code>method contents() returns Positional:D</code></pre>Returns a list of contents of this block.	http://doc.perl6.org/type/Pod%3A%3ABlock#contents
contents	R	Pod::Block.contents										
Pod::Block.config	A			Perl 6 Pod::Block							<pre><code>method config returns EnumMap:D</code></pre>Returns a hash of configs.	http://doc.perl6.org/type/Pod%3A%3ABlock#config
config	R	Pod::Block.config										
Pod::Block.ACCEPTS	R	Any.ACCEPTS										
Pod::Block.any	R	Any.any										
Pod::Block.all	R	Any.all										
Pod::Block.one	R	Any.one										
Pod::Block.none	R	Any.none										
Pod::Block.list	R	Any.list										
Pod::Block.flat	R	Any.flat										
Pod::Block.eager	R	Any.eager										
Pod::Block.elems	R	Any.elems										
Pod::Block.end	R	Any.end										
Pod::Block.Str	R	Mu.Str										
Pod::Block.clone	R	Mu.clone										
Pod::Block.new	R	Mu.new										
Pod::Block.bless	R	Mu.bless										
Pod::Block.CREATE	R	Mu.CREATE										
Pod::Block.print	R	Mu.print										
Pod::Block.say	R	Mu.say										
Pod::Block.ACCEPTS	R	Mu.ACCEPTS										
Pod::Block.WHICH	R	Mu.WHICH										
Pod::Block.WHERE	R	Mu.WHERE										
Pod::Block.WHY	R	Mu.WHY										
Pod::Block::Code	A			Perl 6 Pod::Block::Code							<pre><code>class Pod::Block::Code is Pod::Block { }</code></pre>Class for a code (verbatim) Pod block.	http://doc.perl6.org/type/Pod%3A%3ABlock%3A%3ACode
Pod::Block::Code.allowed	A			Perl 6 Pod::Block::Code							<pre><code>method allowed() returns Positional:D</code></pre>Returns a list of formatting codes that are allowed inside the code block.	http://doc.perl6.org/type/Pod%3A%3ABlock%3A%3ACode#allowed
allowed	R	Pod::Block::Code.allowed										
Pod::Block::Code.contents	R	Pod::Block.contents										
Pod::Block::Code.config	R	Pod::Block.config										
Pod::Block::Code.ACCEPTS	R	Any.ACCEPTS										
Pod::Block::Code.any	R	Any.any										
Pod::Block::Code.all	R	Any.all										
Pod::Block::Code.one	R	Any.one										
Pod::Block::Code.none	R	Any.none										
Pod::Block::Code.list	R	Any.list										
Pod::Block::Code.flat	R	Any.flat										
Pod::Block::Code.eager	R	Any.eager										
Pod::Block::Code.elems	R	Any.elems										
Pod::Block::Code.end	R	Any.end										
Pod::Block::Code.Str	R	Mu.Str										
Pod::Block::Code.clone	R	Mu.clone										
Pod::Block::Code.new	R	Mu.new										
Pod::Block::Code.bless	R	Mu.bless										
Pod::Block::Code.CREATE	R	Mu.CREATE										
Pod::Block::Code.print	R	Mu.print										
Pod::Block::Code.say	R	Mu.say										
Pod::Block::Code.ACCEPTS	R	Mu.ACCEPTS										
Pod::Block::Code.WHICH	R	Mu.WHICH										
Pod::Block::Code.WHERE	R	Mu.WHERE										
Pod::Block::Code.WHY	R	Mu.WHY										
Pod::Block::Named	A			Perl 6 Pod::Block::Named							<pre><code>class Pod::Block::Named is Pod::Block { }</code></pre>Class for a named Pod block.	http://doc.perl6.org/type/Pod%3A%3ABlock%3A%3ANamed
Pod::Block::Named.name	A			Perl 6 Pod::Block::Named							<pre><code>method name() returns Str:D</code></pre>Returns the name of the block.	http://doc.perl6.org/type/Pod%3A%3ABlock%3A%3ANamed#name
Pod::Block::Named.contents	R	Pod::Block.contents										
Pod::Block::Named.config	R	Pod::Block.config										
Pod::Block::Named.ACCEPTS	R	Any.ACCEPTS										
Pod::Block::Named.any	R	Any.any										
Pod::Block::Named.all	R	Any.all										
Pod::Block::Named.one	R	Any.one										
Pod::Block::Named.none	R	Any.none										
Pod::Block::Named.list	R	Any.list										
Pod::Block::Named.flat	R	Any.flat										
Pod::Block::Named.eager	R	Any.eager										
Pod::Block::Named.elems	R	Any.elems										
Pod::Block::Named.end	R	Any.end										
Pod::Block::Named.Str	R	Mu.Str										
Pod::Block::Named.clone	R	Mu.clone										
Pod::Block::Named.new	R	Mu.new										
Pod::Block::Named.bless	R	Mu.bless										
Pod::Block::Named.CREATE	R	Mu.CREATE										
Pod::Block::Named.print	R	Mu.print										
Pod::Block::Named.say	R	Mu.say										
Pod::Block::Named.ACCEPTS	R	Mu.ACCEPTS										
Pod::Block::Named.WHICH	R	Mu.WHICH										
Pod::Block::Named.WHERE	R	Mu.WHERE										
Pod::Block::Named.WHY	R	Mu.WHY										
Pod::Block::Para	A			Perl 6 Pod::Block::Para							<pre><code>class Pod::Block::Para is Pod::Block { }</code></pre>Class for a Pod paragraph.	http://doc.perl6.org/type/Pod%3A%3ABlock%3A%3APara
Pod::Block::Para.contents	R	Pod::Block.contents										
Pod::Block::Para.config	R	Pod::Block.config										
Pod::Block::Para.ACCEPTS	R	Any.ACCEPTS										
Pod::Block::Para.any	R	Any.any										
Pod::Block::Para.all	R	Any.all										
Pod::Block::Para.one	R	Any.one										
Pod::Block::Para.none	R	Any.none										
Pod::Block::Para.list	R	Any.list										
Pod::Block::Para.flat	R	Any.flat										
Pod::Block::Para.eager	R	Any.eager										
Pod::Block::Para.elems	R	Any.elems										
Pod::Block::Para.end	R	Any.end										
Pod::Block::Para.Str	R	Mu.Str										
Pod::Block::Para.clone	R	Mu.clone										
Pod::Block::Para.new	R	Mu.new										
Pod::Block::Para.bless	R	Mu.bless										
Pod::Block::Para.CREATE	R	Mu.CREATE										
Pod::Block::Para.print	R	Mu.print										
Pod::Block::Para.say	R	Mu.say										
Pod::Block::Para.ACCEPTS	R	Mu.ACCEPTS										
Pod::Block::Para.WHICH	R	Mu.WHICH										
Pod::Block::Para.WHERE	R	Mu.WHERE										
Pod::Block::Para.WHY	R	Mu.WHY										
Pod::Item	A			Perl 6 Pod::Item							<pre><code>class Pod::Item is Pod::Block</code></pre>Class for items in Pod enumeration lists.	http://doc.perl6.org/type/Pod%3A%3AItem
Pod::Item.level	A			Perl 6 Pod::Item							<pre><code>method level() returns Int</code></pre>Returns the level of the enumeration list, starting at 1.	http://doc.perl6.org/type/Pod%3A%3AItem#level
level	R	Pod::Item.level										
Pod::Item.contents	R	Pod::Block.contents										
Pod::Item.config	R	Pod::Block.config										
Pod::Item.ACCEPTS	R	Any.ACCEPTS										
Pod::Item.any	R	Any.any										
Pod::Item.all	R	Any.all										
Pod::Item.one	R	Any.one										
Pod::Item.none	R	Any.none										
Pod::Item.list	R	Any.list										
Pod::Item.flat	R	Any.flat										
Pod::Item.eager	R	Any.eager										
Pod::Item.elems	R	Any.elems										
Pod::Item.end	R	Any.end										
Pod::Item.Str	R	Mu.Str										
Pod::Item.clone	R	Mu.clone										
Pod::Item.new	R	Mu.new										
Pod::Item.bless	R	Mu.bless										
Pod::Item.CREATE	R	Mu.CREATE										
Pod::Item.print	R	Mu.print										
Pod::Item.say	R	Mu.say										
Pod::Item.ACCEPTS	R	Mu.ACCEPTS										
Pod::Item.WHICH	R	Mu.WHICH										
Pod::Item.WHERE	R	Mu.WHERE										
Pod::Item.WHY	R	Mu.WHY										
Positional	A			Perl 6 Positional							<pre><code>role Positional { ... }</code></pre>Role for objects which support indexing them using postcircumfix:«[ ]» (usually list-like objects).	http://doc.perl6.org/type/Positional
Positional.of	A			Perl 6 Positional							<pre><code>method of()</code></pre>Returns the type constraint for elements of the positional container.	http://doc.perl6.org/type/Positional#of
of	R	Positional.of										
Proc::Async	A			Perl 6 Proc::Async							<pre><code>class Proc::Async { ... }</code></pre>Note: only the MoarVM backend of Rakudo implements Proc::Async at the moment.	http://doc.perl6.org/type/Proc%3A%3AAsync
Proc::Async.new	A			Perl 6 Proc::Async							<pre><code>method new(:$path, *@args, :$w) returns Proc::Async:D</code></pre>Creates a new Proc::Async object with external program name or path $path and the command line arguments @args.	http://doc.perl6.org/type/Proc%3A%3AAsync#new
Proc::Async.stdout	A			Perl 6 Proc::Async							<pre><code>method stdout(Proc::Async:D: :$bin) returns Supply:D</code></pre>Returns the Supply for the external program's standard output stream.	http://doc.perl6.org/type/Proc%3A%3AAsync#stdout
stdout	R	Proc::Async.stdout										
Proc::Async.stderr	A			Perl 6 Proc::Async							<pre><code>method stderr(Proc::Async:D: :$bin) returns Supply:D</code></pre>Returns the Supply for the external program's standard error stream.	http://doc.perl6.org/type/Proc%3A%3AAsync#stderr
stderr	R	Proc::Async.stderr										
Proc::Async.w	A			Perl 6 Proc::Async							<pre><code>method w(Proc::Async:D:)</code></pre>Returns a true value if :w as passed to the constructor, that is, if the external program is started with its input stream made available to input from the program through print, say and write.	http://doc.perl6.org/type/Proc%3A%3AAsync#w
w	R	Proc::Async.w										
Proc::Async.start	A			Perl 6 Proc::Async							<pre><code>method start(Proc::Async:D:, :$scheduler = $*SCHEDULER) returns Promise:D</code></pre>Initiates spawning of the external program.	http://doc.perl6.org/type/Proc%3A%3AAsync#start
start	D								*[[Proc::Async.start]], initiates spawning of the external program.\n*[[Promise.start]], creates a new Promise that runs the given code object.\n*[[Supply.start]], returns a supply of supplies.\n*[[Thread.start]], creates, runs and returns a new Thread.			
Proc::Async.started	A			Perl 6 Proc::Async							<pre><code>method started(Proc::Async:D:) returns Bool:D</code></pre>Returns False before .start has been called, and True afterwards.	http://doc.perl6.org/type/Proc%3A%3AAsync#started
started	R	Proc::Async.started										
Proc::Async.path	A			Perl 6 Proc::Async							<pre><code>method path(Proc::Async:D:)</code></pre>Returns the name and/or path of the external program that was passed to the new method as first argument.	http://doc.perl6.org/type/Proc%3A%3AAsync#path
Proc::Async.args	A			Perl 6 Proc::Async							<pre><code>method args(Proc::Async:D:) returns Positional:D</code></pre>Returns the command line arguments for the external programs, as passed to the new method.	http://doc.perl6.org/type/Proc%3A%3AAsync#args
args	R	Proc::Async.args										
Proc::Async.write	A			Perl 6 Proc::Async							<pre><code>method write(Proc::Async:D: Blob:D $b, :$scheduler = $*SCHEDULER)</code></pre>Write the binary data in $b to the standard input stream of the external program.	http://doc.perl6.org/type/Proc%3A%3AAsync#write
Proc::Async.print	A			Perl 6 Proc::Async							<pre><code>method print(Proc::Async:D: Str(Any) $str, :$scheduler = $*SCHEDULER)</code></pre>Write the text data in $str to the standard input stream of the external program, encoding it as UTF-8.	http://doc.perl6.org/type/Proc%3A%3AAsync#print
Proc::Async.say	A			Perl 6 Proc::Async							<pre><code>method say(Proc::Async:D: $output, :$scheduler = $*SCHEDULER)</code></pre>Calls method gist on the $output, adds a newline, encodes it as UTF-8, and sends it to the standard input stream of the external program, encoding it as UTF-8.	http://doc.perl6.org/type/Proc%3A%3AAsync#say
Proc::Async.close-stdin	A			Perl 6 Proc::Async							<pre><code>method close-stdin(Proc::Async:D:)</code></pre>Closes the standard input stream of the external program.	http://doc.perl6.org/type/Proc%3A%3AAsync#close-stdin
close-stdin	R	Proc::Async.close-stdin										
Proc::Async.kill	A			Perl 6 Proc::Async							<pre><code>kill(Proc::Async:D: $signal = "HUP")</code></pre>Sends a signal to the running program.	http://doc.perl6.org/type/Proc%3A%3AAsync#kill
kill	R	Proc::Async.kill										
Proc::Async.ACCEPTS	R	Any.ACCEPTS										
Proc::Async.any	R	Any.any										
Proc::Async.all	R	Any.all										
Proc::Async.one	R	Any.one										
Proc::Async.none	R	Any.none										
Proc::Async.list	R	Any.list										
Proc::Async.flat	R	Any.flat										
Proc::Async.eager	R	Any.eager										
Proc::Async.elems	R	Any.elems										
Proc::Async.end	R	Any.end										
Proc::Async.Str	R	Mu.Str										
Proc::Async.clone	R	Mu.clone										
Proc::Async.new	R	Mu.new										
Proc::Async.bless	R	Mu.bless										
Proc::Async.CREATE	R	Mu.CREATE										
Proc::Async.print	R	Mu.print										
Proc::Async.say	R	Mu.say										
Proc::Async.ACCEPTS	R	Mu.ACCEPTS										
Proc::Async.WHICH	R	Mu.WHICH										
Proc::Async.WHERE	R	Mu.WHERE										
Proc::Async.WHY	R	Mu.WHY										
Proc::Status	A			Perl 6 Proc::Status							<pre><code>class Proc::Status { ... }</code></pre>run() and shell() return a Proc::Status object:	http://doc.perl6.org/type/Proc%3A%3AStatus
Proc::Status.exit	A			Perl 6 Proc::Status							<pre><code>method exit(Proc::Status:D:) returns Int:D</code></pre>Returns the numeric exit code from the program.	http://doc.perl6.org/type/Proc%3A%3AStatus#exit
Proc::Status.signal	A			Perl 6 Proc::Status							<pre><code>method signal(Proc::Status:D:) returns Int:D</code></pre>Returns the numeric signal which caused the program to terminate, or 0 if this wasn't the case.	http://doc.perl6.org/type/Proc%3A%3AStatus#signal
signal	R	Proc::Status.signal										
Proc::Status.pid	A			Perl 6 Proc::Status							<pre><code>method pid(Proc::Status:D:)</code></pre>Returns the PID (process identifier) from the external program, or an undefined value if that isn't known.	http://doc.perl6.org/type/Proc%3A%3AStatus#pid
pid	R	Proc::Status.pid										
Proc::Status.ACCEPTS	R	Any.ACCEPTS										
Proc::Status.any	R	Any.any										
Proc::Status.all	R	Any.all										
Proc::Status.one	R	Any.one										
Proc::Status.none	R	Any.none										
Proc::Status.list	R	Any.list										
Proc::Status.flat	R	Any.flat										
Proc::Status.eager	R	Any.eager										
Proc::Status.elems	R	Any.elems										
Proc::Status.end	R	Any.end										
Proc::Status.Str	R	Mu.Str										
Proc::Status.clone	R	Mu.clone										
Proc::Status.new	R	Mu.new										
Proc::Status.bless	R	Mu.bless										
Proc::Status.CREATE	R	Mu.CREATE										
Proc::Status.print	R	Mu.print										
Proc::Status.say	R	Mu.say										
Proc::Status.ACCEPTS	R	Mu.ACCEPTS										
Proc::Status.WHICH	R	Mu.WHICH										
Proc::Status.WHERE	R	Mu.WHERE										
Proc::Status.WHY	R	Mu.WHY										
Promise	A			Perl 6 Promise							<pre><code>my enum PromiseStatus (:Planned(0), :Kept(1), :Broken(2));\nclass Promise { ... }</code></pre>A Promise is used to handle the result of a computation that might not have finished.	http://doc.perl6.org/type/Promise
Promise.start	A			Perl 6 Promise							<pre><code>sub start(&amp;code);\nmethod start(Promise:U: &amp;code, :$scheduler = $*SCHEDULER) returns Promise:D</code></pre>Creates a new Promise that runs the given code object.	http://doc.perl6.org/type/Promise#start
Promise.in	A			Perl 6 Promise							<pre><code>method in(Promise:U: $seconds, :$scheduler = $*SCHEDULER) returns Promise:D</code></pre>Creates a new Promise that will be kept in $seconds seconds, or later.	http://doc.perl6.org/type/Promise#in
in	R	Promise.in										
Promise.allof	A			Perl 6 Promise							<pre><code>method allof(Promise:U: *@promises) returns Promise:D</code></pre>Returns a new promise that will be kept when all the promises passed as arguments are kept, and that will be broken as soon as any of the argument promises is broken.	http://doc.perl6.org/type/Promise#allof
allof	R	Promise.allof										
Promise.anyof	A			Perl 6 Promise							<pre><code>method anyof(Promise:U: *@promises) returns Promise:D</code></pre>Returns a new promise that will be kept as soon as any of the promises passed as arguments is kept, and will be broken when all of the argument promises are broken.	http://doc.perl6.org/type/Promise#anyof
anyof	R	Promise.anyof										
Promise.then	A			Perl 6 Promise							<pre><code>method then(Promise:D: &amp;code)</code></pre>Schedules a piece of code to be run after the invocant has been kept or broken, and returns a new promise for this computation.	http://doc.perl6.org/type/Promise#then
then	R	Promise.then										
Promise.keep	A			Perl 6 Promise							<pre><code>multi method keep(Promise:D:);\nmulti method keep(Promise:D: &#92;result);</code></pre>Keeps a promise, optionally setting the result.	http://doc.perl6.org/type/Promise#keep
keep	R	Promise.keep										
Promise.break	A			Perl 6 Promise							<pre><code>multi method break(Promise:D:);\nmulti method break(Promise:D: &#92;result);</code></pre>Breaks a promise, optionally setting the result.	http://doc.perl6.org/type/Promise#break
break	R	Promise.break										
Promise.result	A			Perl 6 Promise							<pre><code>method result(Promise:D)</code></pre>Waits for the promise to be kept or broken.	http://doc.perl6.org/type/Promise#result
result	R	Promise.result										
Promise.cause	A			Perl 6 Promise							<pre><code>method cause(Promise:D)</code></pre>If the promise was broken, returns the result (or exception).	http://doc.perl6.org/type/Promise#cause
cause	R	Promise.cause										
Promise.Bool	A			Perl 6 Promise							<pre><code>multi method Bool(Promise:D:)</code></pre>Returns True for a kept or broken promise, and False for one in state Planned.	http://doc.perl6.org/type/Promise#Bool
Promise.status	A			Perl 6 Promise							<pre><code>method status(Promise:D) returns PromiseStatus</code></pre>Returns the current state of the promise: Kept, Broken or Planned.	http://doc.perl6.org/type/Promise#status
status	R	Promise.status										
Promise.scheduler	A			Perl 6 Promise							<pre><code>method scheduler(Promise:D:)</code></pre>Returns the scheduler that manages the promise.	http://doc.perl6.org/type/Promise#scheduler
scheduler	R	Promise.scheduler										
Promise.vow	A			Perl 6 Promise							<pre><code>my class Vow {\n    has Promise $.promise;\n    method keep() { ... }\n    method break() { ... }\n}\nmethod vow(Promise:D:) returns Vow:D</code></pre>Returns an object that holds the sole authority over keeping or breaking a promise.	http://doc.perl6.org/type/Promise#vow
vow	R	Promise.vow										
Promise.await	A			Perl 6 Promise							<pre><code>multi sub await(Promise:D)\nmulti sub await(*@)</code></pre>Waits until one or more promises are all fulfilled, and then returns their values.	http://doc.perl6.org/type/Promise#await
Promise.ACCEPTS	R	Any.ACCEPTS										
Promise.any	R	Any.any										
Promise.all	R	Any.all										
Promise.one	R	Any.one										
Promise.none	R	Any.none										
Promise.list	R	Any.list										
Promise.flat	R	Any.flat										
Promise.eager	R	Any.eager										
Promise.elems	R	Any.elems										
Promise.end	R	Any.end										
Promise.Str	R	Mu.Str										
Promise.clone	R	Mu.clone										
Promise.new	R	Mu.new										
Promise.bless	R	Mu.bless										
Promise.CREATE	R	Mu.CREATE										
Promise.print	R	Mu.print										
Promise.say	R	Mu.say										
Promise.ACCEPTS	R	Mu.ACCEPTS										
Promise.WHICH	R	Mu.WHICH										
Promise.WHERE	R	Mu.WHERE										
Promise.WHY	R	Mu.WHY										
QuantHash	A			Perl 6 QuantHash							<pre><code>class QuantHash does Associative { }</code></pre>A QuantHash represents a set of objects, represented as the keys of a Hash.	http://doc.perl6.org/type/QuantHash
Range	A			Perl 6 Range							<pre><code>class Range is Iterable does Positional { ... }</code></pre>Ranges serve two main purposes: to generate lists of consecutive numbers or strings, and to act as a matcher to check if a number or string is within a certain range.	http://doc.perl6.org/type/Range
Range.min	A			Perl 6 Range							<pre><code>method min(Range:D:)</code></pre>Returns the start point of the range.	http://doc.perl6.org/type/Range#min
min	R	Range.min										
Range.excludes-min	A			Perl 6 Range							<pre><code>method excludes-min(Range:D:) returns Bool:D</code></pre>Returns True if the start point is excluded from the range, and False otherwise.	http://doc.perl6.org/type/Range#excludes-min
excludes-min	R	Range.excludes-min										
Range.max	A			Perl 6 Range							<pre><code>method max(Range:D:)</code></pre>Returns the end point of the range.	http://doc.perl6.org/type/Range#max
max	R	Range.max										
Range.excludes-max	A			Perl 6 Range							<pre><code>method excludes-max(Range:D:) returns Bool:D</code></pre>Returns True if the end point is excluded from the range, and False otherwise.	http://doc.perl6.org/type/Range#excludes-max
excludes-max	R	Range.excludes-max										
Range.bounds	A			Perl 6 Range							<pre><code>method bounds(Range:D:) returns Positional</code></pre>Returns a list consisting of the start and end point.	http://doc.perl6.org/type/Range#bounds
bounds	R	Range.bounds										
Range.list	A			Perl 6 Range							<pre><code>method list(Range:D:) returns List:D</code></pre>Generates the list of elements that the range represents.	http://doc.perl6.org/type/Range#list
Range.flat	A			Perl 6 Range							<pre><code>method flat(Range:D:) returns List:D</code></pre>Generates the list of elements that the range represents.	http://doc.perl6.org/type/Range#flat
Range.of	R	Positional.of										
Range.abs	R	Cool.abs										
Range.conj	R	Cool.conj										
Range.sqrt	R	Cool.sqrt										
Range.sign	R	Cool.sign										
Range.rand	R	Cool.rand										
Range.sin	R	Cool.sin										
Range.asin	R	Cool.asin										
Range.cos	R	Cool.cos										
Range.acos	R	Cool.acos										
Range.tan	R	Cool.tan										
Range.atan	R	Cool.atan										
Range.atan2	R	Cool.atan2										
Range.sec	R	Cool.sec										
Range.asec	R	Cool.asec										
Range.cosec	R	Cool.cosec										
Range.acosec	R	Cool.acosec										
Range.cotan	R	Cool.cotan										
Range.acotan	R	Cool.acotan										
Range.sinh	R	Cool.sinh										
Range.asinh	R	Cool.asinh										
Range.cosh	R	Cool.cosh										
Range.acosh	R	Cool.acosh										
Range.tanh	R	Cool.tanh										
Range.atanh	R	Cool.atanh										
Range.log	R	Cool.log										
Range.exp	R	Cool.exp										
Range.round	R	Cool.round										
Range.floor	R	Cool.floor										
Range.ceiling	R	Cool.ceiling										
Range.ord	R	Cool.ord										
Range.chr	R	Cool.chr										
Range.chars	R	Cool.chars										
Range.codes	R	Cool.codes										
Range.flip	R	Cool.flip										
Range.trim	R	Cool.trim										
Range.trim-leading	R	Cool.trim-leading										
Range.trim-trailing	R	Cool.trim-trailing										
Range.lc	R	Cool.lc										
Range.uc	R	Cool.uc										
Range.tc	R	Cool.tc										
Range.tclc	R	Cool.tclc										
Range.wordcase	R	Cool.wordcase										
Range.chop	R	Cool.chop										
Range.chomp	R	Cool.chomp										
Range.words	R	Cool.words										
Range.IO	R	Cool.IO										
Range.ACCEPTS	R	Any.ACCEPTS										
Range.any	R	Any.any										
Range.all	R	Any.all										
Range.one	R	Any.one										
Range.none	R	Any.none										
Range.list	R	Any.list										
Range.flat	R	Any.flat										
Range.eager	R	Any.eager										
Range.elems	R	Any.elems										
Range.end	R	Any.end										
Range.Str	R	Mu.Str										
Range.clone	R	Mu.clone										
Range.new	R	Mu.new										
Range.bless	R	Mu.bless										
Range.CREATE	R	Mu.CREATE										
Range.print	R	Mu.print										
Range.say	R	Mu.say										
Range.ACCEPTS	R	Mu.ACCEPTS										
Range.WHICH	R	Mu.WHICH										
Range.WHERE	R	Mu.WHERE										
Range.WHY	R	Mu.WHY										
Rat	A			Perl 6 Rat							<pre><code>class Rat is Cool does Rational[Int, UInt64] { ... }</code></pre>Rat objects store rational numbers as a pair of a numerator and denominator.	http://doc.perl6.org/type/Rat
Rat.new	R	Rational.new										
Rat.numerator	R	Rational.numerator										
Rat.denominator	R	Rational.denominator										
Rat.nude	R	Rational.nude										
Rat.norm	R	Rational.norm										
Rat.base-repeating	R	Rational.base-repeating										
Rat.Rat	R	Real.Rat										
Rat.sign	R	Real.sign										
Rat.round	R	Real.round										
Rat.floor	R	Real.floor										
Rat.ceiling	R	Real.ceiling										
Rat.truncate	R	Real.truncate										
Rat.base	R	Real.base										
Rat.Real	R	Numeric.Real										
Rat.Int	R	Numeric.Int										
Rat.Rat	R	Numeric.Rat										
Rat.Num	R	Numeric.Num										
Rat.narrow	R	Numeric.narrow										
Rat.ACCEPTS	R	Numeric.ACCEPTS										
Rat.roots	R	Numeric.roots										
Rat.conj	R	Numeric.conj										
Rat.Bool	R	Numeric.Bool										
Rat.succ	R	Numeric.succ										
Rat.pred	R	Numeric.pred										
Rat.abs	R	Cool.abs										
Rat.conj	R	Cool.conj										
Rat.sqrt	R	Cool.sqrt										
Rat.sign	R	Cool.sign										
Rat.rand	R	Cool.rand										
Rat.sin	R	Cool.sin										
Rat.asin	R	Cool.asin										
Rat.cos	R	Cool.cos										
Rat.acos	R	Cool.acos										
Rat.tan	R	Cool.tan										
Rat.atan	R	Cool.atan										
Rat.atan2	R	Cool.atan2										
Rat.sec	R	Cool.sec										
Rat.asec	R	Cool.asec										
Rat.cosec	R	Cool.cosec										
Rat.acosec	R	Cool.acosec										
Rat.cotan	R	Cool.cotan										
Rat.acotan	R	Cool.acotan										
Rat.sinh	R	Cool.sinh										
Rat.asinh	R	Cool.asinh										
Rat.cosh	R	Cool.cosh										
Rat.acosh	R	Cool.acosh										
Rat.tanh	R	Cool.tanh										
Rat.atanh	R	Cool.atanh										
Rat.log	R	Cool.log										
Rat.exp	R	Cool.exp										
Rat.round	R	Cool.round										
Rat.floor	R	Cool.floor										
Rat.ceiling	R	Cool.ceiling										
Rat.ord	R	Cool.ord										
Rat.chr	R	Cool.chr										
Rat.chars	R	Cool.chars										
Rat.codes	R	Cool.codes										
Rat.flip	R	Cool.flip										
Rat.trim	R	Cool.trim										
Rat.trim-leading	R	Cool.trim-leading										
Rat.trim-trailing	R	Cool.trim-trailing										
Rat.lc	R	Cool.lc										
Rat.uc	R	Cool.uc										
Rat.tc	R	Cool.tc										
Rat.tclc	R	Cool.tclc										
Rat.wordcase	R	Cool.wordcase										
Rat.chop	R	Cool.chop										
Rat.chomp	R	Cool.chomp										
Rat.words	R	Cool.words										
Rat.IO	R	Cool.IO										
Rat.ACCEPTS	R	Any.ACCEPTS										
Rat.any	R	Any.any										
Rat.all	R	Any.all										
Rat.one	R	Any.one										
Rat.none	R	Any.none										
Rat.list	R	Any.list										
Rat.flat	R	Any.flat										
Rat.eager	R	Any.eager										
Rat.elems	R	Any.elems										
Rat.end	R	Any.end										
Rat.Str	R	Mu.Str										
Rat.clone	R	Mu.clone										
Rat.new	R	Mu.new										
Rat.bless	R	Mu.bless										
Rat.CREATE	R	Mu.CREATE										
Rat.print	R	Mu.print										
Rat.say	R	Mu.say										
Rat.ACCEPTS	R	Mu.ACCEPTS										
Rat.WHICH	R	Mu.WHICH										
Rat.WHERE	R	Mu.WHERE										
Rat.WHY	R	Mu.WHY										
Rational	A			Perl 6 Rational							<pre><code>role Rational[::NuT, ::DenomT] does Real { ... }</code></pre>Rational is the common role for numbers that are stored as pairs of numerator and denominator.	http://doc.perl6.org/type/Rational
Rational.new	A			Perl 6 Rational							<pre><code>method new(NuT:D $numerator, DenomT:D $denominator) returns Rational:D</code></pre>Creates a new rational object from numerator and denominator.	http://doc.perl6.org/type/Rational#new
Rational.numerator	A			Perl 6 Rational							<pre><code>method numerator(Rational:D:) returns NuT:D</code></pre>Returns the numerator.	http://doc.perl6.org/type/Rational#numerator
numerator	R	Rational.numerator										
Rational.denominator	A			Perl 6 Rational							<pre><code>method denominator(Rational:D:) returns DenomT:D</code></pre>Returns the denominator.	http://doc.perl6.org/type/Rational#denominator
denominator	R	Rational.denominator										
Rational.nude	A			Perl 6 Rational							<pre><code>method nude(Rational:D:) returns Positional</code></pre>Returns a list of the numerator and denominator.	http://doc.perl6.org/type/Rational#nude
nude	R	Rational.nude										
Rational.norm	A			Perl 6 Rational							<pre><code>method norm(Rational:D:) returns Rational:D</code></pre>Returns a normalized Rational object, i.e. with positive denominator, and numerator and denominator coprime.	http://doc.perl6.org/type/Rational#norm
norm	R	Rational.norm										
Rational.base-repeating	A			Perl 6 Rational							<pre><code>method base-repeating(Rational:D: Int:D() $base)</code></pre>Returns a list of two strings that, when concatenated, represent the number in base $base.	http://doc.perl6.org/type/Rational#base-repeating
base-repeating	R	Rational.base-repeating										
Rational.Rat	R	Real.Rat										
Rational.sign	R	Real.sign										
Rational.round	R	Real.round										
Rational.floor	R	Real.floor										
Rational.ceiling	R	Real.ceiling										
Rational.truncate	R	Real.truncate										
Rational.base	R	Real.base										
Rational.Real	R	Numeric.Real										
Rational.Int	R	Numeric.Int										
Rational.Rat	R	Numeric.Rat										
Rational.Num	R	Numeric.Num										
Rational.narrow	R	Numeric.narrow										
Rational.ACCEPTS	R	Numeric.ACCEPTS										
Rational.roots	R	Numeric.roots										
Rational.conj	R	Numeric.conj										
Rational.Bool	R	Numeric.Bool										
Rational.succ	R	Numeric.succ										
Rational.pred	R	Numeric.pred										
Real	A			Perl 6 Real							<pre><code>role Real does Numeric { ... }</code></pre>Common role for non-Complex numbers.	http://doc.perl6.org/type/Real
Real.Rat	A			Perl 6 Real							<pre><code>method Rat(Real:D: Real $epsilon = 1e-6)</code></pre>Converts the number to a Rat with the precision $epsilon.	http://doc.perl6.org/type/Real#Rat
Real.rand	A			Perl 6 Real							<pre><code>sub term:&lt;rand&gt; returns Num:D\nmethod rand(Real:D:) returns Real:D</code></pre>Returns a pseudo-random number between zero and the number.	http://doc.perl6.org/type/Real#rand
Real.sign	A			Perl 6 Real							<pre><code>method sign(Real:D:)</code></pre>Returns -1 if the number is negative, 0 if it is zero and 1 otherwise.	http://doc.perl6.org/type/Real#sign
Real.round	A			Perl 6 Real							<pre><code>method round(Real:D: $scale = 1)</code></pre>Rounds the number to scale $scale.	http://doc.perl6.org/type/Real#round
Real.floor	A			Perl 6 Real							<pre><code>method floor(Real:D) returns Int:D</code></pre>Return the largest integer not greater than the number.	http://doc.perl6.org/type/Real#floor
Real.ceiling	A			Perl 6 Real							<pre><code>method ceiling(Real:D) returns Int:D</code></pre>Returns the smallest integer not less than the number.	http://doc.perl6.org/type/Real#ceiling
Real.truncate	A			Perl 6 Real							<pre><code>method truncate(Real:D) returns Int:D</code></pre>Rounds the number towards zero.	http://doc.perl6.org/type/Real#truncate
truncate	R	Real.truncate										
Real.base	A			Perl 6 Real							<pre><code>method base(Real:D: Int:D $base where 2..36, $digits?) returns Str:D</code></pre>Converts the number to a string, using $base as base.	http://doc.perl6.org/type/Real#base
base	R	Real.base										
Real.Real	R	Numeric.Real										
Real.Int	R	Numeric.Int										
Real.Rat	R	Numeric.Rat										
Real.Num	R	Numeric.Num										
Real.narrow	R	Numeric.narrow										
Real.ACCEPTS	R	Numeric.ACCEPTS										
Real.roots	R	Numeric.roots										
Real.conj	R	Numeric.conj										
Real.Bool	R	Numeric.Bool										
Real.succ	R	Numeric.succ										
Real.pred	R	Numeric.pred										
Regex	A			Perl 6 Regex							<pre><code>class Regex is Method { }</code></pre>A regex is a kind of pattern that describes a set of strings.	http://doc.perl6.org/type/Regex
Regex.ACCEPTS	A			Perl 6 Regex							<pre><code>multi method ACCEPTS(Regex:D: Mu) returns Match:D\nmulti method ACCEPTS(Regex:D: @)\nmulti method ACCEPTS(Regex:D: %)</code></pre>Matches the regex against the argument passed in.	http://doc.perl6.org/type/Regex#ACCEPTS
Regex.Bool	A			Perl 6 Regex							<pre><code>multi method Bool(Regex:D:) returns Bool:D</code></pre>Matches against the caller's $_ variable, and returns the Match object	http://doc.perl6.org/type/Regex#Bool
Regex.multi	R	Routine.multi										
Regex.candidates	R	Routine.candidates										
Regex.wrap	R	Routine.wrap										
Regex.unwrap	R	Routine.unwrap										
Regex.yada	R	Routine.yada										
Regex.ACCEPTS	R	Code.ACCEPTS										
Regex.arity	R	Code.arity										
Regex.count	R	Code.count										
Regex.signature	R	Code.signature										
Regex.Str	R	Code.Str										
Regex.ACCEPTS	R	Any.ACCEPTS										
Regex.any	R	Any.any										
Regex.all	R	Any.all										
Regex.one	R	Any.one										
Regex.none	R	Any.none										
Regex.list	R	Any.list										
Regex.flat	R	Any.flat										
Regex.eager	R	Any.eager										
Regex.elems	R	Any.elems										
Regex.end	R	Any.end										
Regex.Str	R	Mu.Str										
Regex.clone	R	Mu.clone										
Regex.new	R	Mu.new										
Regex.bless	R	Mu.bless										
Regex.CREATE	R	Mu.CREATE										
Regex.print	R	Mu.print										
Regex.say	R	Mu.say										
Regex.ACCEPTS	R	Mu.ACCEPTS										
Regex.WHICH	R	Mu.WHICH										
Regex.WHERE	R	Mu.WHERE										
Regex.WHY	R	Mu.WHY										
Routine	A			Perl 6 Routine							<pre><code>class Routine is Block { }</code></pre>A Routine is a code object meant for larger unities of code than Block.	http://doc.perl6.org/type/Routine
Routine.multi	A			Perl 6 Routine							<pre><code>method multi(Routine:D:) returns Bool:D</code></pre>Returns True if the routine is a multi sub or method.	http://doc.perl6.org/type/Routine#multi
multi	R	Routine.multi										
Routine.candidates	A			Perl 6 Routine							<pre><code>method candidates(Routine:D:) returns Positional:D</code></pre>Returns a list of multi candidates, or a one-element list with itself if it's not a multi	http://doc.perl6.org/type/Routine#candidates
candidates	R	Routine.candidates										
Routine.wrap	A			Perl 6 Routine							<pre><code>method wrap(Routine:D: &amp;wrapper)</code></pre>Wraps (i.e. in-place modifies) the routine.	http://doc.perl6.org/type/Routine#wrap
wrap	R	Routine.wrap										
Routine.unwrap	A			Perl 6 Routine							<pre><code>method unwrap(Routine:D: $wraphandler)</code></pre>Restores the original routine after it has been wrapped with wrap.	http://doc.perl6.org/type/Routine#unwrap
unwrap	R	Routine.unwrap										
Routine.yada	A			Perl 6 Routine							<pre><code>method yada(Routine:D:) returns Bool:D</code></pre>Returns True if the routine is a stub	http://doc.perl6.org/type/Routine#yada
yada	R	Routine.yada										
Routine.cached	A			Perl 6 Routine							<pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$cached!)</code></pre>Caches the return value of a routine, which means that when several calls with the same argument lists are performed, only the first one actually calls the routine, and subsequent calls retrieve the return value from the cache.	http://doc.perl6.org/type/Routine#cached
cached	R	Routine.cached										
Routine.pure	A			Perl 6 Routine							<pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :!$pure)</code></pre>Marks a subroutine as pure, that is, it asserts that for the same input, it will always produce the same output without any additional side effects.	http://doc.perl6.org/type/Routine#pure
pure	R	Routine.pure										
Routine.rw	A			Perl 6 Routine							<pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :!$rw)</code></pre>When a routine is modifies with this trait, its return value will be writable.	http://doc.perl6.org/type/Routine#rw
Routine.export	A			Perl 6 Routine							<pre><code>multi sub trait_mod:&lt;is&gt;(Routine $r, :$export!)</code></pre>Marks a routine as exported to the rest of the world	http://doc.perl6.org/type/Routine#export
Routine.ACCEPTS	R	Code.ACCEPTS										
Routine.arity	R	Code.arity										
Routine.count	R	Code.count										
Routine.signature	R	Code.signature										
Routine.Str	R	Code.Str										
Routine.ACCEPTS	R	Any.ACCEPTS										
Routine.any	R	Any.any										
Routine.all	R	Any.all										
Routine.one	R	Any.one										
Routine.none	R	Any.none										
Routine.list	R	Any.list										
Routine.flat	R	Any.flat										
Routine.eager	R	Any.eager										
Routine.elems	R	Any.elems										
Routine.end	R	Any.end										
Routine.Str	R	Mu.Str										
Routine.clone	R	Mu.clone										
Routine.new	R	Mu.new										
Routine.bless	R	Mu.bless										
Routine.CREATE	R	Mu.CREATE										
Routine.print	R	Mu.print										
Routine.say	R	Mu.say										
Routine.ACCEPTS	R	Mu.ACCEPTS										
Routine.WHICH	R	Mu.WHICH										
Routine.WHERE	R	Mu.WHERE										
Routine.WHY	R	Mu.WHY										
Scheduler	A			Perl 6 Scheduler							<pre><code>role Scheduler {\n    has &amp;.uncaught_handler is rw\n}</code></pre>Common role for schedulers.	http://doc.perl6.org/type/Scheduler
Scheduler.uncaught_handler	A			Perl 6 Scheduler							<pre><code>method uncaught_handler() is rew</code></pre>RW-Accessor for the handler that is caught for uncaught exceptions from the code that is being scheduled and run.	http://doc.perl6.org/type/Scheduler#uncaught_handler
uncaught_handler	R	Scheduler.uncaught_handler										
Scheduler.cue	A			Perl 6 Scheduler							<pre><code>method cue(:&amp;code, Instant :$at, :$in, :$every, :$times = 1; :&amp;catch)</code></pre>Schedules a callable (&amp;code) for execution.	http://doc.perl6.org/type/Scheduler#cue
cue	R	Scheduler.cue										
Set	A			Perl 6 Set							<pre><code>class Set does Setty { }</code></pre>A Set is an immutable set, meaning a collection of distinct elements in no particular order.	http://doc.perl6.org/type/Set
Set.set	A			Perl 6 Set							<pre><code>sub set(*@args --&gt; Set)</code></pre>Creates a Set from the given @args	http://doc.perl6.org/type/Set#set
set	R	Set.set										
Set.grab	R	Setty.grab										
Set.grabpairs	R	Setty.grabpairs										
Set.pick	R	Setty.pick										
Set.roll	R	Setty.roll										
Set.keys	R	Setty.keys										
Set.values	R	Setty.values										
Set.kv	R	Setty.kv										
Set.elems	R	Setty.elems										
Set.total	R	Setty.total										
Set.ACCEPTS	R	Setty.ACCEPTS										
Set.ACCEPTS	R	Any.ACCEPTS										
Set.any	R	Any.any										
Set.all	R	Any.all										
Set.one	R	Any.one										
Set.none	R	Any.none										
Set.list	R	Any.list										
Set.flat	R	Any.flat										
Set.eager	R	Any.eager										
Set.elems	R	Any.elems										
Set.end	R	Any.end										
Set.Str	R	Mu.Str										
Set.clone	R	Mu.clone										
Set.new	R	Mu.new										
Set.bless	R	Mu.bless										
Set.CREATE	R	Mu.CREATE										
Set.print	R	Mu.print										
Set.say	R	Mu.say										
Set.ACCEPTS	R	Mu.ACCEPTS										
Set.WHICH	R	Mu.WHICH										
Set.WHERE	R	Mu.WHERE										
Set.WHY	R	Mu.WHY										
SetHash	A			Perl 6 SetHash							<pre><code>class SetHash does Setty { }</code></pre>A SetHash is a mutable set, meaning a collection of distinct elements in no particular order.	http://doc.perl6.org/type/SetHash
SetHash.grab	R	Setty.grab										
SetHash.grabpairs	R	Setty.grabpairs										
SetHash.pick	R	Setty.pick										
SetHash.roll	R	Setty.roll										
SetHash.keys	R	Setty.keys										
SetHash.values	R	Setty.values										
SetHash.kv	R	Setty.kv										
SetHash.elems	R	Setty.elems										
SetHash.total	R	Setty.total										
SetHash.ACCEPTS	R	Setty.ACCEPTS										
SetHash.ACCEPTS	R	Any.ACCEPTS										
SetHash.any	R	Any.any										
SetHash.all	R	Any.all										
SetHash.one	R	Any.one										
SetHash.none	R	Any.none										
SetHash.list	R	Any.list										
SetHash.flat	R	Any.flat										
SetHash.eager	R	Any.eager										
SetHash.elems	R	Any.elems										
SetHash.end	R	Any.end										
SetHash.Str	R	Mu.Str										
SetHash.clone	R	Mu.clone										
SetHash.new	R	Mu.new										
SetHash.bless	R	Mu.bless										
SetHash.CREATE	R	Mu.CREATE										
SetHash.print	R	Mu.print										
SetHash.say	R	Mu.say										
SetHash.ACCEPTS	R	Mu.ACCEPTS										
SetHash.WHICH	R	Mu.WHICH										
SetHash.WHERE	R	Mu.WHERE										
SetHash.WHY	R	Mu.WHY										
Setty	A			Perl 6 Setty							<pre><code>class Setty does QuantHash { }</code></pre>A role for collections which make sure that each element can only appear once.	http://doc.perl6.org/type/Setty
Setty.grab	A			Perl 6 Setty							<pre><code>method grab($count = 1)</code></pre>Removes and returns $count elements chosen at random (without repetition) from the set.	http://doc.perl6.org/type/Setty#grab
grab	D								*[[Baggy.grab]], \n*[[Setty.grab]], removes and returns $count elements chosen at random (without repetition) from the set.			
Setty.grabpairs	A			Perl 6 Setty							<pre><code>method grabpairs($count = 1)</code></pre>Removes $count elements chosen at random (without repetition) from the set, and returns a list of Pair objects whose keys are the grabbed elements and whose values are True.	http://doc.perl6.org/type/Setty#grabpairs
grabpairs	D								*[[Baggy.grabpairs]], \n*[[Setty.grabpairs]], removes $count elements chosen at random (without repetition) from the set, and returns a list of Pair objects whose keys are the grabbed elements and whose values are True.			
Setty.pick	A			Perl 6 Setty							<pre><code>multi method pick($count = 1)</code></pre>Returns $count elements chosen at random (without repetition) from the set.	http://doc.perl6.org/type/Setty#pick
Setty.roll	A			Perl 6 Setty							<pre><code>multi method roll($count = 1)</code></pre>Returns a lazy list of $count elements, each randomly selected from the set.	http://doc.perl6.org/type/Setty#roll
Setty.keys	A			Perl 6 Setty							Returns a list of all elements of the set.	http://doc.perl6.org/type/Setty#keys
Setty.values	A			Perl 6 Setty							Returns a list containing as many True values as the set has elements.	http://doc.perl6.org/type/Setty#values
Setty.kv	A			Perl 6 Setty							Returns a list of the set's elements and True values interleaved.	http://doc.perl6.org/type/Setty#kv
Setty.elems	A			Perl 6 Setty							<pre><code>method elems(--&gt; Int)</code></pre>The number of elements of the set.	http://doc.perl6.org/type/Setty#elems
Setty.total	A			Perl 6 Setty							<pre><code>method total(--&gt; Int)</code></pre>The total of all the values of the QuantHash object.	http://doc.perl6.org/type/Setty#total
Setty.ACCEPTS	A			Perl 6 Setty							<pre><code>method ACCEPTS($other)</code></pre>Returns True if $other and self contain all the same elements, and no others.	http://doc.perl6.org/type/Setty#ACCEPTS
Signature	A			Perl 6 Signature							<pre><code>class Signature { ... }</code></pre>A signature is a static description of the parameter list of a code object.	http://doc.perl6.org/type/Signature
Signature.Separators	A			Perl 6 Signature							A signature consists of zero or more parameters, separated by comma.	http://doc.perl6.org/type/Signature#Separators
Separators	R	Signature.Separators										
Signature.Constraints	A			Perl 6 Signature							Parameters can optionally have a type constraint (the default is Any).	http://doc.perl6.org/type/Signature#Constraints
Constraints	R	Signature.Constraints										
Signature.Parameters	A			Perl 6 Signature							An array or hash parameter can be marked as slurpy by a leading asterisk, which means it can bind to an arbitrary amount of arguments (zero or more).	http://doc.perl6.org/type/Signature#Parameters
Parameters	R	Signature.Parameters										
Signature.Named	A			Perl 6 Signature							A parameter can be positional or named.	http://doc.perl6.org/type/Signature#Named
Named	R	Signature.Named										
Signature.Parameters	A			Perl 6 Signature							Positional parameters are mandatory by default, and can be made optional with a default value or a trailing question mark:	http://doc.perl6.org/type/Signature#Parameters
Parameters	R	Signature.Parameters										
Signature.Parameters	A			Perl 6 Signature							Parameters can be followed by a sub-signature in brackets, which will destructure the argument given.	http://doc.perl6.org/type/Signature#Parameters
Parameters	R	Signature.Parameters										
Signature.Parameters	A			Perl 6 Signature							Prefixing a parameter with a vertical bar | makes the parameter a Capture, using up all the remaining positional and named arguments.	http://doc.perl6.org/type/Signature#Parameters
Parameters	R	Signature.Parameters										
Signature.Modifiers	A			Perl 6 Signature							By default, parameters are bound to their argument and marked as read-only.	http://doc.perl6.org/type/Signature#Modifiers
Modifiers	R	Signature.Modifiers										
Signature.params	A			Perl 6 Signature							<pre><code>method params(Signature:D:) returns Positional</code></pre>Returns the list of Parameter objects that make up the signature.	http://doc.perl6.org/type/Signature#params
params	R	Signature.params										
Signature.arity	A			Perl 6 Signature							<pre><code>method arity(Signature:D:) returns Int:D</code></pre>Returns the minimal number of positional arguments required to satisfy the signature.	http://doc.perl6.org/type/Signature#arity
Signature.count	A			Perl 6 Signature							<pre><code>method count(Signature:D:) returns Real:D</code></pre>Returns the maximal number of positional arguments which can be bound to the signature.	http://doc.perl6.org/type/Signature#count
Signature.returns	A			Perl 6 Signature							Whatever the Signature's return constraint is:	http://doc.perl6.org/type/Signature#returns
returns	R	Signature.returns										
Signature.ACCEPTS	A			Perl 6 Signature							<pre><code>multi method ACCEPTS(Signature:D: Capture $topic)\nmulti method ACCEPTS(Signature:D: @topic)\nmulti method ACCEPTS(Signature:D: %topic)\nmulti method ACCEPTS(Signature:D: Signature $topic)</code></pre>The first three see if the argument could be bound to the capture, i.e., if a function with that Signature would be able to be called with the $topic:	http://doc.perl6.org/type/Signature#ACCEPTS
Signature.ACCEPTS	R	Any.ACCEPTS										
Signature.any	R	Any.any										
Signature.all	R	Any.all										
Signature.one	R	Any.one										
Signature.none	R	Any.none										
Signature.list	R	Any.list										
Signature.flat	R	Any.flat										
Signature.eager	R	Any.eager										
Signature.elems	R	Any.elems										
Signature.end	R	Any.end										
Signature.Str	R	Mu.Str										
Signature.clone	R	Mu.clone										
Signature.new	R	Mu.new										
Signature.bless	R	Mu.bless										
Signature.CREATE	R	Mu.CREATE										
Signature.print	R	Mu.print										
Signature.say	R	Mu.say										
Signature.ACCEPTS	R	Mu.ACCEPTS										
Signature.WHICH	R	Mu.WHICH										
Signature.WHERE	R	Mu.WHERE										
Signature.WHY	R	Mu.WHY										
Stash	A			Perl 6 Stash							<pre><code>class Stash is Hash { }</code></pre>A Stash is a hash that is used for symbol tables at the package scoped in Perl 6.	http://doc.perl6.org/type/Stash
Stash.push	R	Hash.push										
Stash.new	R	EnumMap.new										
Stash.elems	R	EnumMap.elems										
Stash.ACCEPTS	R	EnumMap.ACCEPTS										
Stash.keys	R	EnumMap.keys										
Stash.values	R	EnumMap.values										
Stash.pairs	R	EnumMap.pairs										
Stash.invert	R	EnumMap.invert										
Stash.kv	R	EnumMap.kv										
Stash.abs	R	Cool.abs										
Stash.conj	R	Cool.conj										
Stash.sqrt	R	Cool.sqrt										
Stash.sign	R	Cool.sign										
Stash.rand	R	Cool.rand										
Stash.sin	R	Cool.sin										
Stash.asin	R	Cool.asin										
Stash.cos	R	Cool.cos										
Stash.acos	R	Cool.acos										
Stash.tan	R	Cool.tan										
Stash.atan	R	Cool.atan										
Stash.atan2	R	Cool.atan2										
Stash.sec	R	Cool.sec										
Stash.asec	R	Cool.asec										
Stash.cosec	R	Cool.cosec										
Stash.acosec	R	Cool.acosec										
Stash.cotan	R	Cool.cotan										
Stash.acotan	R	Cool.acotan										
Stash.sinh	R	Cool.sinh										
Stash.asinh	R	Cool.asinh										
Stash.cosh	R	Cool.cosh										
Stash.acosh	R	Cool.acosh										
Stash.tanh	R	Cool.tanh										
Stash.atanh	R	Cool.atanh										
Stash.log	R	Cool.log										
Stash.exp	R	Cool.exp										
Stash.round	R	Cool.round										
Stash.floor	R	Cool.floor										
Stash.ceiling	R	Cool.ceiling										
Stash.ord	R	Cool.ord										
Stash.chr	R	Cool.chr										
Stash.chars	R	Cool.chars										
Stash.codes	R	Cool.codes										
Stash.flip	R	Cool.flip										
Stash.trim	R	Cool.trim										
Stash.trim-leading	R	Cool.trim-leading										
Stash.trim-trailing	R	Cool.trim-trailing										
Stash.lc	R	Cool.lc										
Stash.uc	R	Cool.uc										
Stash.tc	R	Cool.tc										
Stash.tclc	R	Cool.tclc										
Stash.wordcase	R	Cool.wordcase										
Stash.chop	R	Cool.chop										
Stash.chomp	R	Cool.chomp										
Stash.words	R	Cool.words										
Stash.IO	R	Cool.IO										
Stash.ACCEPTS	R	Any.ACCEPTS										
Stash.any	R	Any.any										
Stash.all	R	Any.all										
Stash.one	R	Any.one										
Stash.none	R	Any.none										
Stash.list	R	Any.list										
Stash.flat	R	Any.flat										
Stash.eager	R	Any.eager										
Stash.elems	R	Any.elems										
Stash.end	R	Any.end										
Stash.Str	R	Mu.Str										
Stash.clone	R	Mu.clone										
Stash.new	R	Mu.new										
Stash.bless	R	Mu.bless										
Stash.CREATE	R	Mu.CREATE										
Stash.print	R	Mu.print										
Stash.say	R	Mu.say										
Stash.ACCEPTS	R	Mu.ACCEPTS										
Stash.WHICH	R	Mu.WHICH										
Stash.WHERE	R	Mu.WHERE										
Stash.WHY	R	Mu.WHY										
Str	A			Perl 6 Str							<pre><code>class Str is Cool does Stringy { }</code></pre>Built-in class for strings.	http://doc.perl6.org/type/Str
Str.chop	A			Perl 6 Str							<pre><code>multi sub    chop(Str:D)  returns Str:D\nmulti method chop(Str:D: $chars = 1) returns Str:D</code></pre>Returns the string with $chars characters removed from the end.	http://doc.perl6.org/type/Str#chop
Str.chomp	A			Perl 6 Str							<pre><code>multi sub    chomp(Str:D ) returns Str:D\nmulti method chomp(Str:D:) returns Str:D</code></pre>Returns the string with a logical newline removed from the end.	http://doc.perl6.org/type/Str#chomp
Str.lc	A			Perl 6 Str							<pre><code>multi sub    lc(Str:D ) returns Str:D\nmulti method lc(Str:D:) returns Str:D</code></pre>Returns a lower-case version of the string.	http://doc.perl6.org/type/Str#lc
Str.uc	A			Perl 6 Str							<pre><code>multi sub    uc(Str:D ) returns Str:D\nmulti method uc(Str:D:) returns Str:D</code></pre>Returns an uppercase version of the string.	http://doc.perl6.org/type/Str#uc
Str.fc	A			Perl 6 Str							<pre><code>multi sub    fc(Str:D ) returns Str:D\nmulti method fc(Str:D:) returns Str:D</code></pre>Does a Unicode "fold case" operation suitable for doing caseless string comparisons.	http://doc.perl6.org/type/Str#fc
fc	R	Str.fc										
Str.tc	A			Perl 6 Str							<pre><code>multi sub    tc(Str:D ) returns Str:D\nmulti method tc(Str:D:) returns Str:D</code></pre>Does a Unicode "titlecase" operation, that is changes the first character in the string to title case, or to upper case if the character has no title case mapping	http://doc.perl6.org/type/Str#tc
Str.tclc	A			Perl 6 Str							<pre><code>multi sub    tclc(Str:D ) returns Str:D\nmulti method tclc(Str:D:) returns Str:D</code></pre>Turns the first character to title case, and all other characters to lower case	http://doc.perl6.org/type/Str#tclc
Str.tcuc	A			Perl 6 Str							<pre><code>multi sub    tcuc(Str:D ) returns Str:D\nmulti method tcuc(Str:D:) returns Str:D</code></pre>Turns the first character to title case, and all other characters to upper case	http://doc.perl6.org/type/Str#tcuc
tcuc	R	Str.tcuc										
Str.wordcase	A			Perl 6 Str							<pre><code>multi sub    wordcase(Cool $x)  returns Str\nmulti sub    wordcase(Str:D $x) returns Str\nmulti method wordcase(Str:D: :&amp;filter = &amp;tclc, Mu :$where = True) returns Str</code></pre>Returns a string in which &amp;filter has been applied to all the words that match $where.	http://doc.perl6.org/type/Str#wordcase
Str.lcfirst	A			Perl 6 Str							Perl 6 does not have a lcfirst function.	http://doc.perl6.org/type/Str#lcfirst
lcfirst	R	Str.lcfirst										
Str.ucfirst	A			Perl 6 Str							Perl 6 does not have a ucfirst function.	http://doc.perl6.org/type/Str#ucfirst
ucfirst	R	Str.ucfirst										
Str.length	A			Perl 6 Str							Perl 6 does not have a length function.	http://doc.perl6.org/type/Str#length
length	R	Str.length										
Str.chars	A			Perl 6 Str							<pre><code>multi sub    chars(Cool $x)  returns Int:D\nmulti sub    chars(Str:D $x) returns Int:D\nmulti sub    chars(str $x)   returns int\nmulti method chars(Str:D:)   returns Int:D</code></pre>Returns the number of characters in the string in the current (lexically scoped) idea of what a normal character is, usually graphemes.	http://doc.perl6.org/type/Str#chars
Str.encode	A			Perl 6 Str							<pre><code>multi method encode(Str:D: $encoding = $?ENC, $nf = $?NF) returns Buf</code></pre>Returns a Buf which represents the original string in the given encoding and normal form.	http://doc.perl6.org/type/Str#encode
encode	R	Str.encode										
Str.index	A			Perl 6 Str							<pre><code>multi sub    index(Cool $s, Str:D $needle, Cool $startpos = 0) returns Int\nmulti method index(Cool $needle, Cool $startpos = 0) returns Int</code></pre>Searches for $needle in the string starting from $startpos.	http://doc.perl6.org/type/Str#index
index	R	Str.index										
Str.rindex	A			Perl 6 Str							<pre><code>multi sub    rindex(Str:D $haystack, Str:D $needle, Int $startpos = $haystack.chars) returns StrPos\nmulti method rindex(Str:D $haystack: Str:D $needle, Int $startpos = $haystack.chars) returns StrPos</code></pre>Returns the last position of $needle in $haystack not after $startpos.	http://doc.perl6.org/type/Str#rindex
rindex	R	Str.rindex										
Str.split	A			Perl 6 Str							<pre><code>multi sub    split(  Str:D $delimiter, Str:D $input, $limit = Inf, :$all) returns Positional\nmulti sub    split(Regex:D $delimiter, Str:D $input, $limit = Inf, :$all) returns Positional\nmulti method split(Str:D $input:   Str:D $delimiter, $limit = Inf, :$all) returns Positional\nmulti method split(Str:D $input: Regex:D $delimiter, $limit = Inf, :$all) returns Positional</code></pre>Splits a string up into pieces based on delimiters found in the string.	http://doc.perl6.org/type/Str#split
Str.comb	A			Perl 6 Str							<pre><code>multi sub    comb(Str:D   $matcher, Str:D $input, $limit = Inf, Bool :$match)\nmulti sub    comb(Regex:D $matcher, Str:D $input, $limit = Inf, Bool :$match)\nmulti method comb(Str:D $input:)\nmulti method comb(Str:D $input: Str:D   $matcher, $limit = Inf, Bool :$match)\nmulti method comb(Str:D $input: Regex:D $matcher, $limit = Inf, Bool :$match)</code></pre>Searches for $matcher in $input and returns a list of all matches (as Str by default, or as Match if $match is True), limited to at most $limit matches.	http://doc.perl6.org/type/Str#comb
comb	R	Str.comb										
Str.lines	A			Perl 6 Str							<pre><code>multi sub    lines(Str:D $input, $limit = Inf) returns Positional\nmulti method lines(Str:D $input: $limit = Inf) returns Positional</code></pre>Returns a list of lines (without trailing newline characters), i.e. the same as a call to $input.comb( / ^^ &#92;N* /, $limit ) would.	http://doc.perl6.org/type/Str#lines
Str.words	A			Perl 6 Str							<pre><code>multi sub    words(Str:D $input, $limit = Inf) returns Positional\nmulti method words(Str:D $input: $limit = Inf) returns Positional</code></pre>Returns a list of non-whitespace bits, i.e. the same as a call to $input.comb( / &#92;S+ /, $limit ) would.	http://doc.perl6.org/type/Str#words
Str.flip	A			Perl 6 Str							<pre><code>multi sub    flip(Str:D ) returns Str:D\nmulti method flip(Str:D:) returns Str:D</code></pre>Returns the string reversed character by character.	http://doc.perl6.org/type/Str#flip
Str.sprintf	A			Perl 6 Str							<pre><code>multi sub sprintf ( Str:D $format, *@args) returns Str:D</code></pre>This function is mostly identical to the C library sprintf function.	http://doc.perl6.org/type/Str#sprintf
sprintf	R	Str.sprintf										
Str.subst	A			Perl 6 Str							<pre><code>multi method subst(Str:D: $matcher, $replacement, *%opts)</code></pre>Returns the invocant string where $matcher is replaced by $replacement (or the original string, if no match was found).	http://doc.perl6.org/type/Str#subst
subst	R	Str.subst										
Str.substr	A			Perl 6 Str							<pre><code>multi sub    substr(Str:D $s, Int:D $from, Int:D $chars = $s.chars - $from) returns Str:D\nmulti method substr(Str:D $s: Int:D $from, Int:D $chars = $s.chars - $from) returns Str:D</code></pre>Returns a part of the string, starting from the character with index $from (where the first character has index 0) and with length $chars.	http://doc.perl6.org/type/Str#substr
Str.succ	A			Perl 6 Str							<pre><code>method succ(Str:D) returns Str:D</code></pre>Returns the string incremented by one.	http://doc.perl6.org/type/Str#succ
Str.pred	A			Perl 6 Str							<pre><code>method pred(Str:D:) returns Str:D</code></pre>Returns the string decremented by one.	http://doc.perl6.org/type/Str#pred
Str.ord	A			Perl 6 Str							<pre><code>multi sub ord   (Str:D)  returns Int:D\nmulti method ord(Str:D:) returns Int:D</code></pre>Returns the codepoint number of the first character of the string	http://doc.perl6.org/type/Str#ord
Str.ords	A			Perl 6 Str							<pre><code>multi method ords(Str:D:) returns Positional</code></pre>Returns a list of codepoint numbers, one for each character in the string.	http://doc.perl6.org/type/Str#ords
Str.indent	A			Perl 6 Str							<pre><code>proto method indent($)\nmulti method indent(Int $steps where { $_ == 0 } )\nmulti method indent(Int $steps where { $_ &gt; 0  } )\nmulti method indent($steps where { .isa(Whatever) || .isa(Int) &amp;&amp; $_ &lt; 0 )</code></pre>Indents each line of the string by $steps, if $steps is positive, or dedents it by -$steps if $steps is negative.	http://doc.perl6.org/type/Str#indent
indent	R	Str.indent										
Str.trim	A			Perl 6 Str							<pre><code>method trim(Str:D:) returns Str</code></pre>Remove leading and trailing whitespace.	http://doc.perl6.org/type/Str#trim
Str.trim-trailing	A			Perl 6 Str							Remove the whitespace characters from the end of a string.	http://doc.perl6.org/type/Str#trim-trailing
Str.trim-leading	A			Perl 6 Str							Remove the whitespace characters from the beginning of a string.	http://doc.perl6.org/type/Str#trim-leading
Str.ACCEPTS	A			Perl 6 Str							<pre><code>multi method ACCEPTS(Str:D: $other)</code></pre>Returns True if the string is the same as $other.	http://doc.perl6.org/type/Str#ACCEPTS
Str.abs	R	Cool.abs										
Str.conj	R	Cool.conj										
Str.sqrt	R	Cool.sqrt										
Str.sign	R	Cool.sign										
Str.rand	R	Cool.rand										
Str.sin	R	Cool.sin										
Str.asin	R	Cool.asin										
Str.cos	R	Cool.cos										
Str.acos	R	Cool.acos										
Str.tan	R	Cool.tan										
Str.atan	R	Cool.atan										
Str.atan2	R	Cool.atan2										
Str.sec	R	Cool.sec										
Str.asec	R	Cool.asec										
Str.cosec	R	Cool.cosec										
Str.acosec	R	Cool.acosec										
Str.cotan	R	Cool.cotan										
Str.acotan	R	Cool.acotan										
Str.sinh	R	Cool.sinh										
Str.asinh	R	Cool.asinh										
Str.cosh	R	Cool.cosh										
Str.acosh	R	Cool.acosh										
Str.tanh	R	Cool.tanh										
Str.atanh	R	Cool.atanh										
Str.log	R	Cool.log										
Str.exp	R	Cool.exp										
Str.round	R	Cool.round										
Str.floor	R	Cool.floor										
Str.ceiling	R	Cool.ceiling										
Str.ord	R	Cool.ord										
Str.chr	R	Cool.chr										
Str.chars	R	Cool.chars										
Str.codes	R	Cool.codes										
Str.flip	R	Cool.flip										
Str.trim	R	Cool.trim										
Str.trim-leading	R	Cool.trim-leading										
Str.trim-trailing	R	Cool.trim-trailing										
Str.lc	R	Cool.lc										
Str.uc	R	Cool.uc										
Str.tc	R	Cool.tc										
Str.tclc	R	Cool.tclc										
Str.wordcase	R	Cool.wordcase										
Str.chop	R	Cool.chop										
Str.chomp	R	Cool.chomp										
Str.words	R	Cool.words										
Str.IO	R	Cool.IO										
Str.ACCEPTS	R	Any.ACCEPTS										
Str.any	R	Any.any										
Str.all	R	Any.all										
Str.one	R	Any.one										
Str.none	R	Any.none										
Str.list	R	Any.list										
Str.flat	R	Any.flat										
Str.eager	R	Any.eager										
Str.elems	R	Any.elems										
Str.end	R	Any.end										
Str.Str	R	Mu.Str										
Str.clone	R	Mu.clone										
Str.new	R	Mu.new										
Str.bless	R	Mu.bless										
Str.CREATE	R	Mu.CREATE										
Str.print	R	Mu.print										
Str.say	R	Mu.say										
Str.ACCEPTS	R	Mu.ACCEPTS										
Str.WHICH	R	Mu.WHICH										
Str.WHERE	R	Mu.WHERE										
Str.WHY	R	Mu.WHY										
Stringy	A			Perl 6 Stringy							<pre><code>role Stringy { ... }</code></pre>Common role for string types (such as Str) and types that can act as strings (such as Cat).	http://doc.perl6.org/type/Stringy
Sub	A			Perl 6 Sub							<pre><code>class Sub is Routine { }</code></pre>A type for subroutines.	http://doc.perl6.org/type/Sub
Sub.multi	R	Routine.multi										
Sub.candidates	R	Routine.candidates										
Sub.wrap	R	Routine.wrap										
Sub.unwrap	R	Routine.unwrap										
Sub.yada	R	Routine.yada										
Sub.ACCEPTS	R	Code.ACCEPTS										
Sub.arity	R	Code.arity										
Sub.count	R	Code.count										
Sub.signature	R	Code.signature										
Sub.Str	R	Code.Str										
Sub.ACCEPTS	R	Any.ACCEPTS										
Sub.any	R	Any.any										
Sub.all	R	Any.all										
Sub.one	R	Any.one										
Sub.none	R	Any.none										
Sub.list	R	Any.list										
Sub.flat	R	Any.flat										
Sub.eager	R	Any.eager										
Sub.elems	R	Any.elems										
Sub.end	R	Any.end										
Sub.Str	R	Mu.Str										
Sub.clone	R	Mu.clone										
Sub.new	R	Mu.new										
Sub.bless	R	Mu.bless										
Sub.CREATE	R	Mu.CREATE										
Sub.print	R	Mu.print										
Sub.say	R	Mu.say										
Sub.ACCEPTS	R	Mu.ACCEPTS										
Sub.WHICH	R	Mu.WHICH										
Sub.WHERE	R	Mu.WHERE										
Sub.WHY	R	Mu.WHY										
Submethod	A			Perl 6 Submethod							<pre><code>class Submethod is Routine { ... }</code></pre>A Submethod is a method that is not inherited to child classes.	http://doc.perl6.org/type/Submethod
Submethod.flurb	A			Perl 6 Submethod							<pre><code>method flurb(Submethod: *@args --&gt; Str)</code></pre>method description here	http://doc.perl6.org/type/Submethod#flurb
flurb	R	Submethod.flurb										
Submethod.multi	R	Routine.multi										
Submethod.candidates	R	Routine.candidates										
Submethod.wrap	R	Routine.wrap										
Submethod.unwrap	R	Routine.unwrap										
Submethod.yada	R	Routine.yada										
Submethod.ACCEPTS	R	Code.ACCEPTS										
Submethod.arity	R	Code.arity										
Submethod.count	R	Code.count										
Submethod.signature	R	Code.signature										
Submethod.Str	R	Code.Str										
Submethod.ACCEPTS	R	Any.ACCEPTS										
Submethod.any	R	Any.any										
Submethod.all	R	Any.all										
Submethod.one	R	Any.one										
Submethod.none	R	Any.none										
Submethod.list	R	Any.list										
Submethod.flat	R	Any.flat										
Submethod.eager	R	Any.eager										
Submethod.elems	R	Any.elems										
Submethod.end	R	Any.end										
Submethod.Str	R	Mu.Str										
Submethod.clone	R	Mu.clone										
Submethod.new	R	Mu.new										
Submethod.bless	R	Mu.bless										
Submethod.CREATE	R	Mu.CREATE										
Submethod.print	R	Mu.print										
Submethod.say	R	Mu.say										
Submethod.ACCEPTS	R	Mu.ACCEPTS										
Submethod.WHICH	R	Mu.WHICH										
Submethod.WHERE	R	Mu.WHERE										
Submethod.WHY	R	Mu.WHY										
Supply	A			Perl 6 Supply							<pre><code>role Supply is SuperClass { ... }</code></pre>A supply is a thread-safe, asynchronous data stream like a Channel, but it can have multiple subscribers (taps) that all get the same events.	http://doc.perl6.org/type/Supply
Supply.tap	A			Perl 6 Supply							<pre><code>method tap(Supply:D: &amp;emit=-&gt; $_ { },\n        :&amp;done,\n        :&amp;quit={ die $_ },\n        :&amp;closing,\n    ) returns Tap:D</code></pre>Creates a new subscription / tap, in addition to all existing taps.	http://doc.perl6.org/type/Supply#tap
tap	R	Supply.tap										
Supply.emit	A			Perl 6 Supply							<pre><code>method emit(Supply:D: &#92;msg)</code></pre>Sends the msg to all taps (that is, to all subscriptions).	http://doc.perl6.org/type/Supply#emit
emit	D								*[[Supply.emit]], sends the msg to all taps (that is, to all subscriptions).\n*[[Tap.emit]], returns the callback that is called for emitted events.			
Supply.done	A			Perl 6 Supply							<pre><code>method done(Supply:D:)</code></pre>Calls the done callback on all taps that have one.	http://doc.perl6.org/type/Supply#done
done	D								*[[Supply.done]], calls the done callback on all taps that have one.\n*[[Tap.done]], returns the callback that is called on successfully shutting down a channel, if any.			
Supply.quit	A			Perl 6 Supply							<pre><code>method quit(Supply:D: $ex)</code></pre>Calls the quit callback on the taps that have one, passing the exception to them.	http://doc.perl6.org/type/Supply#quit
quit	D								*[[Supply.quit]], calls the quit callback on the taps that have one, passing the exception to them.\n*[[Tap.quit]], returns the callback that is called on shutting down a channel with error, if any.			
Supply.taps	A			Perl 6 Supply							<pre><code>method taps(Supply:D:) returns Int:D</code></pre>Returns the number of taps.	http://doc.perl6.org/type/Supply#taps
taps	R	Supply.taps										
Supply.Channel	A			Perl 6 Supply							<pre><code>method Channel(Supply:D:) returns Channel:D</code></pre>Returns a Channel object that will receive all future values from the supply, and will be closed when the Supply is done, and quit (shut down with error) when the supply is quit.	http://doc.perl6.org/type/Supply#Channel
Supply.Promise	A			Perl 6 Supply							<pre><code>method Promise(Supply:D:) returns Promise:D</code></pre>Returns a Promise object for the next value.	http://doc.perl6.org/type/Supply#Promise
Supply.close	A			Perl 6 Supply							<pre><code>method close(Supply:D: Tap:D $t)</code></pre>Closes the given tap, this is, calls its close callback (if any), and prevents it from getting any more events.	http://doc.perl6.org/type/Supply#close
Supply.tappers	A			Perl 6 Supply							<pre><code>method tappers(Supply:D:) returns List:D</code></pre>Returns a list of taps as Tap objects.	http://doc.perl6.org/type/Supply#tappers
tappers	R	Supply.tappers										
Supply.live	A			Perl 6 Supply							<pre><code>method live(Supply:D:) returns Bool:D</code></pre>Returns True if the supply is "live", that is, events are emitted to taps as soon as they arrive.	http://doc.perl6.org/type/Supply#live
live	R	Supply.live										
Supply.wait	A			Perl 6 Supply							<pre><code>method wait(Supply:D:)</code></pre>Waits until the supply is done (in which case it returns True) or quit (in which case it will throw the exception that was passed to quit).	http://doc.perl6.org/type/Supply#wait
wait	R	Supply.wait										
Supply.list	A			Perl 6 Supply							<pre><code>method list(Supply:D:) returns List:D</code></pre>Waits until the supply is done, and returns a list of all items emitted since the list call.	http://doc.perl6.org/type/Supply#list
Supply.interval	A			Perl 6 Supply							<pre><code>method interval(Supply:U: $interval, $offset = 0)</code></pre>Creates a new interval that fires an event every $interval seconds, starting $offset seconds from the call.	http://doc.perl6.org/type/Supply#interval
interval	R	Supply.interval										
Supply.grep	A			Perl 6 Supply							<pre><code>method grep(Supply:D: Mu $test) returns Supply:D</code></pre>Creates a new supply that only receives those events from the original supply that smart-match against $test.	http://doc.perl6.org/type/Supply#grep
Supply.map	A			Perl 6 Supply							<pre><code>method map(Supply:D: &amp;mapper)</code></pre>Returns a new supply that receives the same elements as the original one, but with the element transformed through &amp;mapper;	http://doc.perl6.org/type/Supply#map
Supply.schedule_on	A			Perl 6 Supply							<pre><code>method schedule_on(Supply:D: $scheduler)</code></pre>Runs the emit, done and quit callbacks on the specified scheduler.	http://doc.perl6.org/type/Supply#schedule_on
schedule_on	R	Supply.schedule_on										
Supply.start	A			Perl 6 Supply							<pre><code>method start(Supply:D: &amp;startee)</code></pre>Returns a supply of supplies.	http://doc.perl6.org/type/Supply#start
Supply.migrate	A			Perl 6 Supply							<pre><code>method migrate(Supply:D:) returns Supply:D</code></pre>Produces a continuous supply from a supply of supplies.	http://doc.perl6.org/type/Supply#migrate
migrate	R	Supply.migrate										
Supply.delayed	A			Perl 6 Supply							<pre><code>method delayed(Supply:D: $delay) returns Supply:D</code></pre>Returns a supply thats delayed by $delay seconds.	http://doc.perl6.org/type/Supply#delayed
delayed	R	Supply.delayed										
Supply.from-list	A			Perl 6 Supply							<pre><code>method from-list(Supply:U: *@elems) returns Supply:D</code></pre>Creates an on-demand supply from the elements passed to this method.	http://doc.perl6.org/type/Supply#from-list
from-list	R	Supply.from-list										
Tap	A			Perl 6 Tap							<pre><code>class Tap { ... }</code></pre>A Tap is a subscription to a Supply.	http://doc.perl6.org/type/Tap
Tap.emit	A			Perl 6 Tap							<pre><code>method emit(Tap:D:) returns Callable:D</code></pre>Returns the callback that is called for emitted events.	http://doc.perl6.org/type/Tap#emit
Tap.done	A			Perl 6 Tap							<pre><code>method done(Tap:D:)</code></pre>Returns the callback that is called on successfully shutting down a channel, if any.	http://doc.perl6.org/type/Tap#done
Tap.quit	A			Perl 6 Tap							<pre><code>method quit(Tap:D:)</code></pre>Returns the callback that is called on shutting down a channel with error, if any.	http://doc.perl6.org/type/Tap#quit
Tap.closing	A			Perl 6 Tap							<pre><code>method closing(Tap:D:)</code></pre>Returns the callback that is called on closing the tap.	http://doc.perl6.org/type/Tap#closing
closing	R	Tap.closing										
Tap.supply	A			Perl 6 Tap							<pre><code>method supply(Tap:D:)</code></pre>Returns the supply to which the tap belongs.	http://doc.perl6.org/type/Tap#supply
supply	R	Tap.supply										
Tap.close	A			Perl 6 Tap							<pre><code>method closing(Tap:D:)</code></pre>Closes the tap.	http://doc.perl6.org/type/Tap#close
Tap.ACCEPTS	R	Any.ACCEPTS										
Tap.any	R	Any.any										
Tap.all	R	Any.all										
Tap.one	R	Any.one										
Tap.none	R	Any.none										
Tap.list	R	Any.list										
Tap.flat	R	Any.flat										
Tap.eager	R	Any.eager										
Tap.elems	R	Any.elems										
Tap.end	R	Any.end										
Tap.Str	R	Mu.Str										
Tap.clone	R	Mu.clone										
Tap.new	R	Mu.new										
Tap.bless	R	Mu.bless										
Tap.CREATE	R	Mu.CREATE										
Tap.print	R	Mu.print										
Tap.say	R	Mu.say										
Tap.ACCEPTS	R	Mu.ACCEPTS										
Tap.WHICH	R	Mu.WHICH										
Tap.WHERE	R	Mu.WHERE										
Tap.WHY	R	Mu.WHY										
Thread	A			Perl 6 Thread							<pre><code>class Thread { ... }</code></pre>A thread is a sequence of instructions that can (potentially) run in parallel to others.	http://doc.perl6.org/type/Thread
Thread.new	A			Perl 6 Thread							<pre><code>method new(:&amp;code!, Bool :$app_lifetime = False, Str $name = '&lt;anon&gt;') returns Thread:D</code></pre>Creates and returns a new Thread, without starting it yet.	http://doc.perl6.org/type/Thread#new
Thread.start	A			Perl 6 Thread							<pre><code>method start(Thread:U: &amp;code, Bool :$app_lifetime = False, Str $name = '&lt;anon&gt;') returns Thread:D </code></pre>Creates, runs and returns a new Thread.	http://doc.perl6.org/type/Thread#start
Thread.run	A			Perl 6 Thread							<pre><code>method run(Thread:D:)</code></pre>Runs the thread, and returns the invocant.	http://doc.perl6.org/type/Thread#run
Thread.id	A			Perl 6 Thread							<pre><code>method id(Thread:D:) returns Int:D</code></pre>Returns a numeric, unique thread identifier.	http://doc.perl6.org/type/Thread#id
id	R	Thread.id										
Thread.finish	A			Perl 6 Thread							<pre><code>method finish(Thread:D)</code></pre>Waits for the thread to finish.	http://doc.perl6.org/type/Thread#finish
finish	R	Thread.finish										
Thread.yield	A			Perl 6 Thread							<pre><code>method yield(Thread:U)</code></pre>Tells the scheduler to prefer another thread for now.	http://doc.perl6.org/type/Thread#yield
yield	R	Thread.yield										
Thread.ACCEPTS	R	Any.ACCEPTS										
Thread.any	R	Any.any										
Thread.all	R	Any.all										
Thread.one	R	Any.one										
Thread.none	R	Any.none										
Thread.list	R	Any.list										
Thread.flat	R	Any.flat										
Thread.eager	R	Any.eager										
Thread.elems	R	Any.elems										
Thread.end	R	Any.end										
Thread.Str	R	Mu.Str										
Thread.clone	R	Mu.clone										
Thread.new	R	Mu.new										
Thread.bless	R	Mu.bless										
Thread.CREATE	R	Mu.CREATE										
Thread.print	R	Mu.print										
Thread.say	R	Mu.say										
Thread.ACCEPTS	R	Mu.ACCEPTS										
Thread.WHICH	R	Mu.WHICH										
Thread.WHERE	R	Mu.WHERE										
Thread.WHY	R	Mu.WHY										
ThreadPoolScheduler	A			Perl 6 ThreadPoolScheduler							<pre><code>class ThreadPoolScheduler does Scheduler { ... }</code></pre>The ThreadPoolScheduler has a range of number of threads that it maintains, and it distributes work among those threads.	http://doc.perl6.org/type/ThreadPoolScheduler
ThreadPoolScheduler.new	A			Perl 6 ThreadPoolScheduler							<pre><code>method new(Int :$initial_threads = 0, Int :$max_threads=16)</code></pre>Creates a new ThreadPoolScheduler object with the given range of threads to maintain.	http://doc.perl6.org/type/ThreadPoolScheduler#new
ThreadPoolScheduler.uncaught_handler	R	Scheduler.uncaught_handler										
ThreadPoolScheduler.cue	R	Scheduler.cue										
ThreadPoolScheduler.ACCEPTS	R	Any.ACCEPTS										
ThreadPoolScheduler.any	R	Any.any										
ThreadPoolScheduler.all	R	Any.all										
ThreadPoolScheduler.one	R	Any.one										
ThreadPoolScheduler.none	R	Any.none										
ThreadPoolScheduler.list	R	Any.list										
ThreadPoolScheduler.flat	R	Any.flat										
ThreadPoolScheduler.eager	R	Any.eager										
ThreadPoolScheduler.elems	R	Any.elems										
ThreadPoolScheduler.end	R	Any.end										
ThreadPoolScheduler.Str	R	Mu.Str										
ThreadPoolScheduler.clone	R	Mu.clone										
ThreadPoolScheduler.new	R	Mu.new										
ThreadPoolScheduler.bless	R	Mu.bless										
ThreadPoolScheduler.CREATE	R	Mu.CREATE										
ThreadPoolScheduler.print	R	Mu.print										
ThreadPoolScheduler.say	R	Mu.say										
ThreadPoolScheduler.ACCEPTS	R	Mu.ACCEPTS										
ThreadPoolScheduler.WHICH	R	Mu.WHICH										
ThreadPoolScheduler.WHERE	R	Mu.WHERE										
ThreadPoolScheduler.WHY	R	Mu.WHY										
Variable	A			Perl 6 Variable							<pre><code>class Variable { ... }</code></pre>Variables have a wealth of compile-time information, but at run time, accesses to to a variable usually act on the value stored inside the variable, not the variable itself.	http://doc.perl6.org/type/Variable
Variable.name	A			Perl 6 Variable							<pre><code>method name(Variable:D: str)</code></pre>Returns the name of the variable, including the sigil.	http://doc.perl6.org/type/Variable#name
Variable.default	A			Perl 6 Variable							<pre><code>multi sub trait_mod:&lt;is&gt;(Variable:D, :$default!)</code></pre>Sets the default value with which a variable is initialized, and to which it is reset when Nil is assigned to it.	http://doc.perl6.org/type/Variable#default
Variable.dynamic	A			Perl 6 Variable							<pre><code>multi sub trait_mod:&lt;is&gt;(Variable:D, :$dynamic)</code></pre>Marks a variable as dynamic, that is, accessible from inner dynamic scopes without being in an inner lexical scope.	http://doc.perl6.org/type/Variable#dynamic
dynamic	R	Variable.dynamic										
Variable.ACCEPTS	R	Any.ACCEPTS										
Variable.any	R	Any.any										
Variable.all	R	Any.all										
Variable.one	R	Any.one										
Variable.none	R	Any.none										
Variable.list	R	Any.list										
Variable.flat	R	Any.flat										
Variable.eager	R	Any.eager										
Variable.elems	R	Any.elems										
Variable.end	R	Any.end										
Variable.Str	R	Mu.Str										
Variable.clone	R	Mu.clone										
Variable.new	R	Mu.new										
Variable.bless	R	Mu.bless										
Variable.CREATE	R	Mu.CREATE										
Variable.print	R	Mu.print										
Variable.say	R	Mu.say										
Variable.ACCEPTS	R	Mu.ACCEPTS										
Variable.WHICH	R	Mu.WHICH										
Variable.WHERE	R	Mu.WHERE										
Variable.WHY	R	Mu.WHY										
Version	A			Perl 6 Version							<pre><code>class Version { }</code></pre>Version objects identify version of software components (and potentially other entities).	http://doc.perl6.org/type/Version
Version.new	A			Perl 6 Version							<pre><code>method new(Str:d $s)</code></pre>Creates a Version from a string $s.	http://doc.perl6.org/type/Version#new
Version.parts	A			Perl 6 Version							<pre><code>method parts(Version:D:) returns List:D</code></pre>Returns the list of parts that make up this Version object	http://doc.perl6.org/type/Version#parts
Version.plus	A			Perl 6 Version							<pre><code>method plus(Version:D:) returns Bool:D</code></pre>Returns True if comparisons against this version allow larger versions too.	http://doc.perl6.org/type/Version#plus
plus	R	Version.plus										
Version.ACCEPTS	R	Any.ACCEPTS										
Version.any	R	Any.any										
Version.all	R	Any.all										
Version.one	R	Any.one										
Version.none	R	Any.none										
Version.list	R	Any.list										
Version.flat	R	Any.flat										
Version.eager	R	Any.eager										
Version.elems	R	Any.elems										
Version.end	R	Any.end										
Version.Str	R	Mu.Str										
Version.clone	R	Mu.clone										
Version.new	R	Mu.new										
Version.bless	R	Mu.bless										
Version.CREATE	R	Mu.CREATE										
Version.print	R	Mu.print										
Version.say	R	Mu.say										
Version.ACCEPTS	R	Mu.ACCEPTS										
Version.WHICH	R	Mu.WHICH										
Version.WHERE	R	Mu.WHERE										
Version.WHY	R	Mu.WHY										
Whatever	A			Perl 6 Whatever							<pre><code>class Whatever { }</code></pre>Whatever is a class whose objects don't really do much; it gets its semantic from other routines that accept Whatever-objects as markers to do something special.	http://doc.perl6.org/type/Whatever
Whatever.ACCEPTS	A			Perl 6 Whatever							<pre><code>multi method ACCEPTS(Whatever:D: Mu $other)</code></pre>Returns True.	http://doc.perl6.org/type/Whatever#ACCEPTS
Whatever.ACCEPTS	R	Any.ACCEPTS										
Whatever.any	R	Any.any										
Whatever.all	R	Any.all										
Whatever.one	R	Any.one										
Whatever.none	R	Any.none										
Whatever.list	R	Any.list										
Whatever.flat	R	Any.flat										
Whatever.eager	R	Any.eager										
Whatever.elems	R	Any.elems										
Whatever.end	R	Any.end										
Whatever.Str	R	Mu.Str										
Whatever.clone	R	Mu.clone										
Whatever.new	R	Mu.new										
Whatever.bless	R	Mu.bless										
Whatever.CREATE	R	Mu.CREATE										
Whatever.print	R	Mu.print										
Whatever.say	R	Mu.say										
Whatever.ACCEPTS	R	Mu.ACCEPTS										
Whatever.WHICH	R	Mu.WHICH										
Whatever.WHERE	R	Mu.WHERE										
Whatever.WHY	R	Mu.WHY										
WhateverCode	A			Perl 6 WhateverCode							<pre><code>class WhateverCode is Code { }</code></pre>WhateverCode objects are the result of Whatever-currying.	http://doc.perl6.org/type/WhateverCode
WhateverCode.ACCEPTS	R	Code.ACCEPTS										
WhateverCode.arity	R	Code.arity										
WhateverCode.count	R	Code.count										
WhateverCode.signature	R	Code.signature										
WhateverCode.Str	R	Code.Str										
WhateverCode.ACCEPTS	R	Any.ACCEPTS										
WhateverCode.any	R	Any.any										
WhateverCode.all	R	Any.all										
WhateverCode.one	R	Any.one										
WhateverCode.none	R	Any.none										
WhateverCode.list	R	Any.list										
WhateverCode.flat	R	Any.flat										
WhateverCode.eager	R	Any.eager										
WhateverCode.elems	R	Any.elems										
WhateverCode.end	R	Any.end										
WhateverCode.Str	R	Mu.Str										
WhateverCode.clone	R	Mu.clone										
WhateverCode.new	R	Mu.new										
WhateverCode.bless	R	Mu.bless										
WhateverCode.CREATE	R	Mu.CREATE										
WhateverCode.print	R	Mu.print										
WhateverCode.say	R	Mu.say										
WhateverCode.ACCEPTS	R	Mu.ACCEPTS										
WhateverCode.WHICH	R	Mu.WHICH										
WhateverCode.WHERE	R	Mu.WHERE										
WhateverCode.WHY	R	Mu.WHY										
X::AdHoc	A			Perl 6 X::AdHoc							<pre><code>class X::AdHoc is Exception { ... }</code></pre>X::AdHoc is the type into which objects are wrapped if they are thrown as exceptions, but don't inherit from Exception.	http://doc.perl6.org/type/X%3A%3AAdHoc
X::AdHoc.payload	A			Perl 6 X::AdHoc							<pre><code>method payload(X::AdHoc:D)</code></pre>Returns the original object which was passed to die.	http://doc.perl6.org/type/X%3A%3AAdHoc#payload
payload	R	X::AdHoc.payload										
X::AdHoc.message	R	Exception.message										
X::AdHoc.backtrace	R	Exception.backtrace										
X::AdHoc.throw	R	Exception.throw										
X::AdHoc.rethrow	R	Exception.rethrow										
X::AdHoc.fail	R	Exception.fail										
X::AdHoc.gist	R	Exception.gist										
X::AdHoc.ACCEPTS	R	Any.ACCEPTS										
X::AdHoc.any	R	Any.any										
X::AdHoc.all	R	Any.all										
X::AdHoc.one	R	Any.one										
X::AdHoc.none	R	Any.none										
X::AdHoc.list	R	Any.list										
X::AdHoc.flat	R	Any.flat										
X::AdHoc.eager	R	Any.eager										
X::AdHoc.elems	R	Any.elems										
X::AdHoc.end	R	Any.end										
X::AdHoc.Str	R	Mu.Str										
X::AdHoc.clone	R	Mu.clone										
X::AdHoc.new	R	Mu.new										
X::AdHoc.bless	R	Mu.bless										
X::AdHoc.CREATE	R	Mu.CREATE										
X::AdHoc.print	R	Mu.print										
X::AdHoc.say	R	Mu.say										
X::AdHoc.ACCEPTS	R	Mu.ACCEPTS										
X::AdHoc.WHICH	R	Mu.WHICH										
X::AdHoc.WHERE	R	Mu.WHERE										
X::AdHoc.WHY	R	Mu.WHY										
X::Anon::Augment	A			Perl 6 X::Anon::Augment							<pre><code>class X::Anon::Augment does X::Comp { }</code></pre>Compile time error thrown when trying to augment an anonymous package.	http://doc.perl6.org/type/X%3A%3AAnon%3A%3AAugment
X::Anon::Augment.package-kind	A			Perl 6 X::Anon::Augment							<pre><code>method package-kind returns Str:D</code></pre>Returns the kind of package (module, class, grammar, ...) that the code tried to augment.	http://doc.perl6.org/type/X%3A%3AAnon%3A%3AAugment#package-kind
package-kind	D								*[[X::Anon::Augment.package-kind]], returns the kind of package (module, class, grammar, ...) that the code tried to augment.\n*[[X::Attribute::Package.package-kind]], returns the kind of package (package, module) that doesn't support attributes.\n*[[X::Attribute::Undeclared.package-kind]], returns the kind of package the attribute was used in (for example class, grammar)\n*[[X::Augment::NoSuchType.package-kind]], returns the kind of package (class, grammar) that is being tried to augment			
X::Anon::Augment.filename	R	X::Comp.filename										
X::Anon::Augment.line	R	X::Comp.line										
X::Anon::Augment.column	R	X::Comp.column										
X::Anon::Augment.message	R	Exception.message										
X::Anon::Augment.backtrace	R	Exception.backtrace										
X::Anon::Augment.throw	R	Exception.throw										
X::Anon::Augment.rethrow	R	Exception.rethrow										
X::Anon::Augment.fail	R	Exception.fail										
X::Anon::Augment.gist	R	Exception.gist										
X::Anon::Augment.ACCEPTS	R	Any.ACCEPTS										
X::Anon::Augment.any	R	Any.any										
X::Anon::Augment.all	R	Any.all										
X::Anon::Augment.one	R	Any.one										
X::Anon::Augment.none	R	Any.none										
X::Anon::Augment.list	R	Any.list										
X::Anon::Augment.flat	R	Any.flat										
X::Anon::Augment.eager	R	Any.eager										
X::Anon::Augment.elems	R	Any.elems										
X::Anon::Augment.end	R	Any.end										
X::Anon::Augment.Str	R	Mu.Str										
X::Anon::Augment.clone	R	Mu.clone										
X::Anon::Augment.new	R	Mu.new										
X::Anon::Augment.bless	R	Mu.bless										
X::Anon::Augment.CREATE	R	Mu.CREATE										
X::Anon::Augment.print	R	Mu.print										
X::Anon::Augment.say	R	Mu.say										
X::Anon::Augment.ACCEPTS	R	Mu.ACCEPTS										
X::Anon::Augment.WHICH	R	Mu.WHICH										
X::Anon::Augment.WHERE	R	Mu.WHERE										
X::Anon::Augment.WHY	R	Mu.WHY										
X::Anon::Multi	A			Perl 6 X::Anon::Multi							<pre><code>class X::Anon::Multi does X::Comp { }</code></pre>Compile time error thrown when an anonymous multi is being declared.	http://doc.perl6.org/type/X%3A%3AAnon%3A%3AMulti
X::Anon::Multi.multiness	A			Perl 6 X::Anon::Multi							<pre><code>method multiness() returns Str:D</code></pre>Returns a string describing the multiness that the original code used, for example "multi" or "proto".	http://doc.perl6.org/type/X%3A%3AAnon%3A%3AMulti#multiness
multiness	R	X::Anon::Multi.multiness										
X::Anon::Multi.routine-type	A			Perl 6 X::Anon::Multi							<pre><code>method routine-type() returns Str:D</code></pre>Returns a string describing the type of routine that was declared, for example "sub" or "method".	http://doc.perl6.org/type/X%3A%3AAnon%3A%3AMulti#routine-type
routine-type	R	X::Anon::Multi.routine-type										
X::Anon::Multi.filename	R	X::Comp.filename										
X::Anon::Multi.line	R	X::Comp.line										
X::Anon::Multi.column	R	X::Comp.column										
X::Anon::Multi.message	R	Exception.message										
X::Anon::Multi.backtrace	R	Exception.backtrace										
X::Anon::Multi.throw	R	Exception.throw										
X::Anon::Multi.rethrow	R	Exception.rethrow										
X::Anon::Multi.fail	R	Exception.fail										
X::Anon::Multi.gist	R	Exception.gist										
X::Anon::Multi.ACCEPTS	R	Any.ACCEPTS										
X::Anon::Multi.any	R	Any.any										
X::Anon::Multi.all	R	Any.all										
X::Anon::Multi.one	R	Any.one										
X::Anon::Multi.none	R	Any.none										
X::Anon::Multi.list	R	Any.list										
X::Anon::Multi.flat	R	Any.flat										
X::Anon::Multi.eager	R	Any.eager										
X::Anon::Multi.elems	R	Any.elems										
X::Anon::Multi.end	R	Any.end										
X::Anon::Multi.Str	R	Mu.Str										
X::Anon::Multi.clone	R	Mu.clone										
X::Anon::Multi.new	R	Mu.new										
X::Anon::Multi.bless	R	Mu.bless										
X::Anon::Multi.CREATE	R	Mu.CREATE										
X::Anon::Multi.print	R	Mu.print										
X::Anon::Multi.say	R	Mu.say										
X::Anon::Multi.ACCEPTS	R	Mu.ACCEPTS										
X::Anon::Multi.WHICH	R	Mu.WHICH										
X::Anon::Multi.WHERE	R	Mu.WHERE										
X::Anon::Multi.WHY	R	Mu.WHY										
X::Assignment::RO	A			Perl 6 X::Assignment::RO							<pre><code>class X::Assignment::RO is Exception { ... }</code></pre>Code like	http://doc.perl6.org/type/X%3A%3AAssignment%3A%3ARO
X::Assignment::RO.typename	A			Perl 6 X::Assignment::RO							<pre><code>method typename(X::Assignment::RO:D:) returns Str</code></pre>Returns the type name of the value on the left-hand side	http://doc.perl6.org/type/X%3A%3AAssignment%3A%3ARO#typename
typename	D								*[[X::Assignment::RO.typename]], returns the type name of the value on the left-hand side\n*[[X::Method::NotFound.typename]], returns the name of the invocant type.			
X::Assignment::RO.message	R	Exception.message										
X::Assignment::RO.backtrace	R	Exception.backtrace										
X::Assignment::RO.throw	R	Exception.throw										
X::Assignment::RO.rethrow	R	Exception.rethrow										
X::Assignment::RO.fail	R	Exception.fail										
X::Assignment::RO.gist	R	Exception.gist										
X::Assignment::RO.ACCEPTS	R	Any.ACCEPTS										
X::Assignment::RO.any	R	Any.any										
X::Assignment::RO.all	R	Any.all										
X::Assignment::RO.one	R	Any.one										
X::Assignment::RO.none	R	Any.none										
X::Assignment::RO.list	R	Any.list										
X::Assignment::RO.flat	R	Any.flat										
X::Assignment::RO.eager	R	Any.eager										
X::Assignment::RO.elems	R	Any.elems										
X::Assignment::RO.end	R	Any.end										
X::Assignment::RO.Str	R	Mu.Str										
X::Assignment::RO.clone	R	Mu.clone										
X::Assignment::RO.new	R	Mu.new										
X::Assignment::RO.bless	R	Mu.bless										
X::Assignment::RO.CREATE	R	Mu.CREATE										
X::Assignment::RO.print	R	Mu.print										
X::Assignment::RO.say	R	Mu.say										
X::Assignment::RO.ACCEPTS	R	Mu.ACCEPTS										
X::Assignment::RO.WHICH	R	Mu.WHICH										
X::Assignment::RO.WHERE	R	Mu.WHERE										
X::Assignment::RO.WHY	R	Mu.WHY										
X::Attribute::NoPackage	A			Perl 6 X::Attribute::NoPackage							<pre><code>class X::Attribute::NoPackage does X::Comp { }</code></pre>Compile time error thrown when an attribute is declared where it does not make sense (for example in the mainline).	http://doc.perl6.org/type/X%3A%3AAttribute%3A%3ANoPackage
X::Attribute::NoPackage.name	A			Perl 6 X::Attribute::NoPackage							<pre><code>method name() returns Str:D</code></pre>Returns the name of the attribute	http://doc.perl6.org/type/X%3A%3AAttribute%3A%3ANoPackage#name
X::Attribute::NoPackage.filename	R	X::Comp.filename										
X::Attribute::NoPackage.line	R	X::Comp.line										
X::Attribute::NoPackage.column	R	X::Comp.column										
X::Attribute::NoPackage.message	R	Exception.message										
X::Attribute::NoPackage.backtrace	R	Exception.backtrace										
X::Attribute::NoPackage.throw	R	Exception.throw										
X::Attribute::NoPackage.rethrow	R	Exception.rethrow										
X::Attribute::NoPackage.fail	R	Exception.fail										
X::Attribute::NoPackage.gist	R	Exception.gist										
X::Attribute::NoPackage.ACCEPTS	R	Any.ACCEPTS										
X::Attribute::NoPackage.any	R	Any.any										
X::Attribute::NoPackage.all	R	Any.all										
X::Attribute::NoPackage.one	R	Any.one										
X::Attribute::NoPackage.none	R	Any.none										
X::Attribute::NoPackage.list	R	Any.list										
X::Attribute::NoPackage.flat	R	Any.flat										
X::Attribute::NoPackage.eager	R	Any.eager										
X::Attribute::NoPackage.elems	R	Any.elems										
X::Attribute::NoPackage.end	R	Any.end										
X::Attribute::NoPackage.Str	R	Mu.Str										
X::Attribute::NoPackage.clone	R	Mu.clone										
X::Attribute::NoPackage.new	R	Mu.new										
X::Attribute::NoPackage.bless	R	Mu.bless										
X::Attribute::NoPackage.CREATE	R	Mu.CREATE										
X::Attribute::NoPackage.print	R	Mu.print										
X::Attribute::NoPackage.say	R	Mu.say										
X::Attribute::NoPackage.ACCEPTS	R	Mu.ACCEPTS										
X::Attribute::NoPackage.WHICH	R	Mu.WHICH										
X::Attribute::NoPackage.WHERE	R	Mu.WHERE										
X::Attribute::NoPackage.WHY	R	Mu.WHY										
X::Attribute::Package	A			Perl 6 X::Attribute::Package							<pre><code>class X::Attribute::Package does X::Comp { }</code></pre>Compile time error, thrown when the compiler encounters an attribute declaration inside a package that does not support attributes.	http://doc.perl6.org/type/X%3A%3AAttribute%3A%3APackage
X::Attribute::Package.name	A			Perl 6 X::Attribute::Package							<pre><code>method name() returns Str:D</code></pre>Returns the name of the attribute that triggered this error.	http://doc.perl6.org/type/X%3A%3AAttribute%3A%3APackage#name
X::Attribute::Package.package-kind	A			Perl 6 X::Attribute::Package							<pre><code>method package-kind() returns Str:D</code></pre>Returns the kind of package (package, module) that doesn't support attributes.	http://doc.perl6.org/type/X%3A%3AAttribute%3A%3APackage#package-kind
X::Attribute::Package.filename	R	X::Comp.filename										
X::Attribute::Package.line	R	X::Comp.line										
X::Attribute::Package.column	R	X::Comp.column										
X::Attribute::Package.message	R	Exception.message										
X::Attribute::Package.backtrace	R	Exception.backtrace										
X::Attribute::Package.throw	R	Exception.throw										
X::Attribute::Package.rethrow	R	Exception.rethrow										
X::Attribute::Package.fail	R	Exception.fail										
X::Attribute::Package.gist	R	Exception.gist										
X::Attribute::Package.ACCEPTS	R	Any.ACCEPTS										
X::Attribute::Package.any	R	Any.any										
X::Attribute::Package.all	R	Any.all										
X::Attribute::Package.one	R	Any.one										
X::Attribute::Package.none	R	Any.none										
X::Attribute::Package.list	R	Any.list										
X::Attribute::Package.flat	R	Any.flat										
X::Attribute::Package.eager	R	Any.eager										
X::Attribute::Package.elems	R	Any.elems										
X::Attribute::Package.end	R	Any.end										
X::Attribute::Package.Str	R	Mu.Str										
X::Attribute::Package.clone	R	Mu.clone										
X::Attribute::Package.new	R	Mu.new										
X::Attribute::Package.bless	R	Mu.bless										
X::Attribute::Package.CREATE	R	Mu.CREATE										
X::Attribute::Package.print	R	Mu.print										
X::Attribute::Package.say	R	Mu.say										
X::Attribute::Package.ACCEPTS	R	Mu.ACCEPTS										
X::Attribute::Package.WHICH	R	Mu.WHICH										
X::Attribute::Package.WHERE	R	Mu.WHERE										
X::Attribute::Package.WHY	R	Mu.WHY										
X::Attribute::Undeclared	A			Perl 6 X::Attribute::Undeclared							<pre><code>class X::Attribute::Undeclared is X::Undeclared { }</code></pre>Thrown when code refers to an attribute that has not been declared.	http://doc.perl6.org/type/X%3A%3AAttribute%3A%3AUndeclared
X::Attribute::Undeclared.package-kind	A			Perl 6 X::Attribute::Undeclared							Returns the kind of package the attribute was used in (for example class, grammar)	http://doc.perl6.org/type/X%3A%3AAttribute%3A%3AUndeclared#package-kind
X::Attribute::Undeclared.package-name	A			Perl 6 X::Attribute::Undeclared							Returns the name of the package in which the offensive attribute reference was performed.	http://doc.perl6.org/type/X%3A%3AAttribute%3A%3AUndeclared#package-name
package-name	R	X::Attribute::Undeclared.package-name										
X::Attribute::Undeclared.symbol	R	X::Undeclared.symbol										
X::Attribute::Undeclared.what	R	X::Undeclared.what										
X::Attribute::Undeclared.filename	R	X::Comp.filename										
X::Attribute::Undeclared.line	R	X::Comp.line										
X::Attribute::Undeclared.column	R	X::Comp.column										
X::Attribute::Undeclared.message	R	Exception.message										
X::Attribute::Undeclared.backtrace	R	Exception.backtrace										
X::Attribute::Undeclared.throw	R	Exception.throw										
X::Attribute::Undeclared.rethrow	R	Exception.rethrow										
X::Attribute::Undeclared.fail	R	Exception.fail										
X::Attribute::Undeclared.gist	R	Exception.gist										
X::Attribute::Undeclared.ACCEPTS	R	Any.ACCEPTS										
X::Attribute::Undeclared.any	R	Any.any										
X::Attribute::Undeclared.all	R	Any.all										
X::Attribute::Undeclared.one	R	Any.one										
X::Attribute::Undeclared.none	R	Any.none										
X::Attribute::Undeclared.list	R	Any.list										
X::Attribute::Undeclared.flat	R	Any.flat										
X::Attribute::Undeclared.eager	R	Any.eager										
X::Attribute::Undeclared.elems	R	Any.elems										
X::Attribute::Undeclared.end	R	Any.end										
X::Attribute::Undeclared.Str	R	Mu.Str										
X::Attribute::Undeclared.clone	R	Mu.clone										
X::Attribute::Undeclared.new	R	Mu.new										
X::Attribute::Undeclared.bless	R	Mu.bless										
X::Attribute::Undeclared.CREATE	R	Mu.CREATE										
X::Attribute::Undeclared.print	R	Mu.print										
X::Attribute::Undeclared.say	R	Mu.say										
X::Attribute::Undeclared.ACCEPTS	R	Mu.ACCEPTS										
X::Attribute::Undeclared.WHICH	R	Mu.WHICH										
X::Attribute::Undeclared.WHERE	R	Mu.WHERE										
X::Attribute::Undeclared.WHY	R	Mu.WHY										
X::Augment::NoSuchType	A			Perl 6 X::Augment::NoSuchType							<pre><code>class X::Augment::NoSuchType does X::Comp { }</code></pre>Thrown when trying to augment a type which doesn't exist.	http://doc.perl6.org/type/X%3A%3AAugment%3A%3ANoSuchType
X::Augment::NoSuchType.package-kind	A			Perl 6 X::Augment::NoSuchType							<pre><code>method package-kind() returns Str:D</code></pre>Returns the kind of package (class, grammar) that is being tried to augment	http://doc.perl6.org/type/X%3A%3AAugment%3A%3ANoSuchType#package-kind
X::Augment::NoSuchType.package	A			Perl 6 X::Augment::NoSuchType							Returns the name that was tried to augment, but which doesn't exist.	http://doc.perl6.org/type/X%3A%3AAugment%3A%3ANoSuchType#package
X::Augment::NoSuchType.filename	R	X::Comp.filename										
X::Augment::NoSuchType.line	R	X::Comp.line										
X::Augment::NoSuchType.column	R	X::Comp.column										
X::Augment::NoSuchType.message	R	Exception.message										
X::Augment::NoSuchType.backtrace	R	Exception.backtrace										
X::Augment::NoSuchType.throw	R	Exception.throw										
X::Augment::NoSuchType.rethrow	R	Exception.rethrow										
X::Augment::NoSuchType.fail	R	Exception.fail										
X::Augment::NoSuchType.gist	R	Exception.gist										
X::Augment::NoSuchType.ACCEPTS	R	Any.ACCEPTS										
X::Augment::NoSuchType.any	R	Any.any										
X::Augment::NoSuchType.all	R	Any.all										
X::Augment::NoSuchType.one	R	Any.one										
X::Augment::NoSuchType.none	R	Any.none										
X::Augment::NoSuchType.list	R	Any.list										
X::Augment::NoSuchType.flat	R	Any.flat										
X::Augment::NoSuchType.eager	R	Any.eager										
X::Augment::NoSuchType.elems	R	Any.elems										
X::Augment::NoSuchType.end	R	Any.end										
X::Augment::NoSuchType.Str	R	Mu.Str										
X::Augment::NoSuchType.clone	R	Mu.clone										
X::Augment::NoSuchType.new	R	Mu.new										
X::Augment::NoSuchType.bless	R	Mu.bless										
X::Augment::NoSuchType.CREATE	R	Mu.CREATE										
X::Augment::NoSuchType.print	R	Mu.print										
X::Augment::NoSuchType.say	R	Mu.say										
X::Augment::NoSuchType.ACCEPTS	R	Mu.ACCEPTS										
X::Augment::NoSuchType.WHICH	R	Mu.WHICH										
X::Augment::NoSuchType.WHERE	R	Mu.WHERE										
X::Augment::NoSuchType.WHY	R	Mu.WHY										
X::Bind	A			Perl 6 X::Bind							<pre><code>class X::Bind is Exception { ... }</code></pre>If you write code like this:	http://doc.perl6.org/type/X%3A%3ABind
X::Bind.message	R	Exception.message										
X::Bind.backtrace	R	Exception.backtrace										
X::Bind.throw	R	Exception.throw										
X::Bind.rethrow	R	Exception.rethrow										
X::Bind.fail	R	Exception.fail										
X::Bind.gist	R	Exception.gist										
X::Bind.ACCEPTS	R	Any.ACCEPTS										
X::Bind.any	R	Any.any										
X::Bind.all	R	Any.all										
X::Bind.one	R	Any.one										
X::Bind.none	R	Any.none										
X::Bind.list	R	Any.list										
X::Bind.flat	R	Any.flat										
X::Bind.eager	R	Any.eager										
X::Bind.elems	R	Any.elems										
X::Bind.end	R	Any.end										
X::Bind.Str	R	Mu.Str										
X::Bind.clone	R	Mu.clone										
X::Bind.new	R	Mu.new										
X::Bind.bless	R	Mu.bless										
X::Bind.CREATE	R	Mu.CREATE										
X::Bind.print	R	Mu.print										
X::Bind.say	R	Mu.say										
X::Bind.ACCEPTS	R	Mu.ACCEPTS										
X::Bind.WHICH	R	Mu.WHICH										
X::Bind.WHERE	R	Mu.WHERE										
X::Bind.WHY	R	Mu.WHY										
X::Bind::NativeType	A			Perl 6 X::Bind::NativeType							<pre><code>class X::Bind::NativeType does X::Comp { }</code></pre>Compile-time error thrown when trying to bind to a natively typed variable.	http://doc.perl6.org/type/X%3A%3ABind%3A%3ANativeType
X::Bind::NativeType.name	A			Perl 6 X::Bind::NativeType							<pre><code>method name() returns Str:D</code></pre>Returns the name of the variable.	http://doc.perl6.org/type/X%3A%3ABind%3A%3ANativeType#name
X::Bind::NativeType.filename	R	X::Comp.filename										
X::Bind::NativeType.line	R	X::Comp.line										
X::Bind::NativeType.column	R	X::Comp.column										
X::Bind::NativeType.message	R	Exception.message										
X::Bind::NativeType.backtrace	R	Exception.backtrace										
X::Bind::NativeType.throw	R	Exception.throw										
X::Bind::NativeType.rethrow	R	Exception.rethrow										
X::Bind::NativeType.fail	R	Exception.fail										
X::Bind::NativeType.gist	R	Exception.gist										
X::Bind::NativeType.ACCEPTS	R	Any.ACCEPTS										
X::Bind::NativeType.any	R	Any.any										
X::Bind::NativeType.all	R	Any.all										
X::Bind::NativeType.one	R	Any.one										
X::Bind::NativeType.none	R	Any.none										
X::Bind::NativeType.list	R	Any.list										
X::Bind::NativeType.flat	R	Any.flat										
X::Bind::NativeType.eager	R	Any.eager										
X::Bind::NativeType.elems	R	Any.elems										
X::Bind::NativeType.end	R	Any.end										
X::Bind::NativeType.Str	R	Mu.Str										
X::Bind::NativeType.clone	R	Mu.clone										
X::Bind::NativeType.new	R	Mu.new										
X::Bind::NativeType.bless	R	Mu.bless										
X::Bind::NativeType.CREATE	R	Mu.CREATE										
X::Bind::NativeType.print	R	Mu.print										
X::Bind::NativeType.say	R	Mu.say										
X::Bind::NativeType.ACCEPTS	R	Mu.ACCEPTS										
X::Bind::NativeType.WHICH	R	Mu.WHICH										
X::Bind::NativeType.WHERE	R	Mu.WHERE										
X::Bind::NativeType.WHY	R	Mu.WHY										
X::Bind::Slice	A			Perl 6 X::Bind::Slice							<pre><code>class X::Bind::Slice is Exception { ... }</code></pre>When you try to bind to an array or hash slice:	http://doc.perl6.org/type/X%3A%3ABind%3A%3ASlice
X::Bind::Slice.type	A			Perl 6 X::Bind::Slice							<pre><code>method type(X::Bind::Slice:D:)</code></pre>returns the type object of the thing that you tried to slice-bind, for example Array, List or Hash.	http://doc.perl6.org/type/X%3A%3ABind%3A%3ASlice#type
X::Bind::Slice.message	R	Exception.message										
X::Bind::Slice.backtrace	R	Exception.backtrace										
X::Bind::Slice.throw	R	Exception.throw										
X::Bind::Slice.rethrow	R	Exception.rethrow										
X::Bind::Slice.fail	R	Exception.fail										
X::Bind::Slice.gist	R	Exception.gist										
X::Bind::Slice.ACCEPTS	R	Any.ACCEPTS										
X::Bind::Slice.any	R	Any.any										
X::Bind::Slice.all	R	Any.all										
X::Bind::Slice.one	R	Any.one										
X::Bind::Slice.none	R	Any.none										
X::Bind::Slice.list	R	Any.list										
X::Bind::Slice.flat	R	Any.flat										
X::Bind::Slice.eager	R	Any.eager										
X::Bind::Slice.elems	R	Any.elems										
X::Bind::Slice.end	R	Any.end										
X::Bind::Slice.Str	R	Mu.Str										
X::Bind::Slice.clone	R	Mu.clone										
X::Bind::Slice.new	R	Mu.new										
X::Bind::Slice.bless	R	Mu.bless										
X::Bind::Slice.CREATE	R	Mu.CREATE										
X::Bind::Slice.print	R	Mu.print										
X::Bind::Slice.say	R	Mu.say										
X::Bind::Slice.ACCEPTS	R	Mu.ACCEPTS										
X::Bind::Slice.WHICH	R	Mu.WHICH										
X::Bind::Slice.WHERE	R	Mu.WHERE										
X::Bind::Slice.WHY	R	Mu.WHY										
X::Comp	A			Perl 6 X::Comp							<pre><code>role X::Comp is Exception { }</code></pre>Common role for compile-time errors.	http://doc.perl6.org/type/X%3A%3AComp
X::Comp.filename	A			Perl 6 X::Comp							The filename in which the compilation error occurred	http://doc.perl6.org/type/X%3A%3AComp#filename
filename	R	X::Comp.filename										
X::Comp.line	A			Perl 6 X::Comp							The line number in which the compilation error occurred.	http://doc.perl6.org/type/X%3A%3AComp#line
X::Comp.column	A			Perl 6 X::Comp							The column number of location where the compilation error occurred.	http://doc.perl6.org/type/X%3A%3AComp#column
column	R	X::Comp.column										
X::Comp.message	R	Exception.message										
X::Comp.backtrace	R	Exception.backtrace										
X::Comp.throw	R	Exception.throw										
X::Comp.rethrow	R	Exception.rethrow										
X::Comp.fail	R	Exception.fail										
X::Comp.gist	R	Exception.gist										
X::Comp.ACCEPTS	R	Any.ACCEPTS										
X::Comp.any	R	Any.any										
X::Comp.all	R	Any.all										
X::Comp.one	R	Any.one										
X::Comp.none	R	Any.none										
X::Comp.list	R	Any.list										
X::Comp.flat	R	Any.flat										
X::Comp.eager	R	Any.eager										
X::Comp.elems	R	Any.elems										
X::Comp.end	R	Any.end										
X::Comp.Str	R	Mu.Str										
X::Comp.clone	R	Mu.clone										
X::Comp.new	R	Mu.new										
X::Comp.bless	R	Mu.bless										
X::Comp.CREATE	R	Mu.CREATE										
X::Comp.print	R	Mu.print										
X::Comp.say	R	Mu.say										
X::Comp.ACCEPTS	R	Mu.ACCEPTS										
X::Comp.WHICH	R	Mu.WHICH										
X::Comp.WHERE	R	Mu.WHERE										
X::Comp.WHY	R	Mu.WHY										
X::Composition::NotComposable	A			Perl 6 X::Composition::NotComposable							<pre><code>class X::Composition::NotComposable is Exception { }</code></pre>Thrown when trying to compose a type into a target type, but the composer type cannot be used for composition (roles and enums are generally OK).	http://doc.perl6.org/type/X%3A%3AComposition%3A%3ANotComposable
X::Composition::NotComposable.target-name	A			Perl 6 X::Composition::NotComposable							<pre><code>method target-name() returns Str:D</code></pre>Returns the name of the type that should be composed, but failed.	http://doc.perl6.org/type/X%3A%3AComposition%3A%3ANotComposable#target-name
target-name	R	X::Composition::NotComposable.target-name										
X::Composition::NotComposable.composer	A			Perl 6 X::Composition::NotComposable							<pre><code>method composer() returns Mu</code></pre>Returns the type that should be composed into the target, but which isn't a role.	http://doc.perl6.org/type/X%3A%3AComposition%3A%3ANotComposable#composer
composer	R	X::Composition::NotComposable.composer										
X::Composition::NotComposable.message	R	Exception.message										
X::Composition::NotComposable.backtrace	R	Exception.backtrace										
X::Composition::NotComposable.throw	R	Exception.throw										
X::Composition::NotComposable.rethrow	R	Exception.rethrow										
X::Composition::NotComposable.fail	R	Exception.fail										
X::Composition::NotComposable.gist	R	Exception.gist										
X::Composition::NotComposable.ACCEPTS	R	Any.ACCEPTS										
X::Composition::NotComposable.any	R	Any.any										
X::Composition::NotComposable.all	R	Any.all										
X::Composition::NotComposable.one	R	Any.one										
X::Composition::NotComposable.none	R	Any.none										
X::Composition::NotComposable.list	R	Any.list										
X::Composition::NotComposable.flat	R	Any.flat										
X::Composition::NotComposable.eager	R	Any.eager										
X::Composition::NotComposable.elems	R	Any.elems										
X::Composition::NotComposable.end	R	Any.end										
X::Composition::NotComposable.Str	R	Mu.Str										
X::Composition::NotComposable.clone	R	Mu.clone										
X::Composition::NotComposable.new	R	Mu.new										
X::Composition::NotComposable.bless	R	Mu.bless										
X::Composition::NotComposable.CREATE	R	Mu.CREATE										
X::Composition::NotComposable.print	R	Mu.print										
X::Composition::NotComposable.say	R	Mu.say										
X::Composition::NotComposable.ACCEPTS	R	Mu.ACCEPTS										
X::Composition::NotComposable.WHICH	R	Mu.WHICH										
X::Composition::NotComposable.WHERE	R	Mu.WHERE										
X::Composition::NotComposable.WHY	R	Mu.WHY										
X::Constructor::Positional	A			Perl 6 X::Constructor::Positional							<pre><code>class X::Constructor::Positional is Exception { }</code></pre>Thrown from Mu.new when positional arguments are passed to it.	http://doc.perl6.org/type/X%3A%3AConstructor%3A%3APositional
X::Constructor::Positional.message	R	Exception.message										
X::Constructor::Positional.backtrace	R	Exception.backtrace										
X::Constructor::Positional.throw	R	Exception.throw										
X::Constructor::Positional.rethrow	R	Exception.rethrow										
X::Constructor::Positional.fail	R	Exception.fail										
X::Constructor::Positional.gist	R	Exception.gist										
X::Constructor::Positional.ACCEPTS	R	Any.ACCEPTS										
X::Constructor::Positional.any	R	Any.any										
X::Constructor::Positional.all	R	Any.all										
X::Constructor::Positional.one	R	Any.one										
X::Constructor::Positional.none	R	Any.none										
X::Constructor::Positional.list	R	Any.list										
X::Constructor::Positional.flat	R	Any.flat										
X::Constructor::Positional.eager	R	Any.eager										
X::Constructor::Positional.elems	R	Any.elems										
X::Constructor::Positional.end	R	Any.end										
X::Constructor::Positional.Str	R	Mu.Str										
X::Constructor::Positional.clone	R	Mu.clone										
X::Constructor::Positional.new	R	Mu.new										
X::Constructor::Positional.bless	R	Mu.bless										
X::Constructor::Positional.CREATE	R	Mu.CREATE										
X::Constructor::Positional.print	R	Mu.print										
X::Constructor::Positional.say	R	Mu.say										
X::Constructor::Positional.ACCEPTS	R	Mu.ACCEPTS										
X::Constructor::Positional.WHICH	R	Mu.WHICH										
X::Constructor::Positional.WHERE	R	Mu.WHERE										
X::Constructor::Positional.WHY	R	Mu.WHY										
X::ControlFlow	A			Perl 6 X::ControlFlow							<pre><code>class X::ControlFlow is Exception { }</code></pre>Thrown when a control flow construct (such as next or redo) is called outside the dynamic scope of an enclosing construct that is supposed to catch them.	http://doc.perl6.org/type/X%3A%3AControlFlow
X::ControlFlow.illegal	A			Perl 6 X::ControlFlow							<pre><code>method illegal returns Str:D</code></pre>Returns the name of the control flow command that was called.	http://doc.perl6.org/type/X%3A%3AControlFlow#illegal
illegal	R	X::ControlFlow.illegal										
X::ControlFlow.enclosing	A			Perl 6 X::ControlFlow							<pre><code>method enclosing returns Str:D</code></pre>Returns the name of the missing enclosing construct.	http://doc.perl6.org/type/X%3A%3AControlFlow#enclosing
enclosing	R	X::ControlFlow.enclosing										
X::ControlFlow.message	R	Exception.message										
X::ControlFlow.backtrace	R	Exception.backtrace										
X::ControlFlow.throw	R	Exception.throw										
X::ControlFlow.rethrow	R	Exception.rethrow										
X::ControlFlow.fail	R	Exception.fail										
X::ControlFlow.gist	R	Exception.gist										
X::ControlFlow.ACCEPTS	R	Any.ACCEPTS										
X::ControlFlow.any	R	Any.any										
X::ControlFlow.all	R	Any.all										
X::ControlFlow.one	R	Any.one										
X::ControlFlow.none	R	Any.none										
X::ControlFlow.list	R	Any.list										
X::ControlFlow.flat	R	Any.flat										
X::ControlFlow.eager	R	Any.eager										
X::ControlFlow.elems	R	Any.elems										
X::ControlFlow.end	R	Any.end										
X::ControlFlow.Str	R	Mu.Str										
X::ControlFlow.clone	R	Mu.clone										
X::ControlFlow.new	R	Mu.new										
X::ControlFlow.bless	R	Mu.bless										
X::ControlFlow.CREATE	R	Mu.CREATE										
X::ControlFlow.print	R	Mu.print										
X::ControlFlow.say	R	Mu.say										
X::ControlFlow.ACCEPTS	R	Mu.ACCEPTS										
X::ControlFlow.WHICH	R	Mu.WHICH										
X::ControlFlow.WHERE	R	Mu.WHERE										
X::ControlFlow.WHY	R	Mu.WHY										
X::ControlFlow::Return	A			Perl 6 X::ControlFlow::Return							<pre><code>class X::ControlFlow::Return is X::ControlFlow { }</code></pre>Thrown when a return is called from outside a routine.	http://doc.perl6.org/type/X%3A%3AControlFlow%3A%3AReturn
X::ControlFlow::Return.illegal	R	X::ControlFlow.illegal										
X::ControlFlow::Return.enclosing	R	X::ControlFlow.enclosing										
X::ControlFlow::Return.message	R	Exception.message										
X::ControlFlow::Return.backtrace	R	Exception.backtrace										
X::ControlFlow::Return.throw	R	Exception.throw										
X::ControlFlow::Return.rethrow	R	Exception.rethrow										
X::ControlFlow::Return.fail	R	Exception.fail										
X::ControlFlow::Return.gist	R	Exception.gist										
X::ControlFlow::Return.ACCEPTS	R	Any.ACCEPTS										
X::ControlFlow::Return.any	R	Any.any										
X::ControlFlow::Return.all	R	Any.all										
X::ControlFlow::Return.one	R	Any.one										
X::ControlFlow::Return.none	R	Any.none										
X::ControlFlow::Return.list	R	Any.list										
X::ControlFlow::Return.flat	R	Any.flat										
X::ControlFlow::Return.eager	R	Any.eager										
X::ControlFlow::Return.elems	R	Any.elems										
X::ControlFlow::Return.end	R	Any.end										
X::ControlFlow::Return.Str	R	Mu.Str										
X::ControlFlow::Return.clone	R	Mu.clone										
X::ControlFlow::Return.new	R	Mu.new										
X::ControlFlow::Return.bless	R	Mu.bless										
X::ControlFlow::Return.CREATE	R	Mu.CREATE										
X::ControlFlow::Return.print	R	Mu.print										
X::ControlFlow::Return.say	R	Mu.say										
X::ControlFlow::Return.ACCEPTS	R	Mu.ACCEPTS										
X::ControlFlow::Return.WHICH	R	Mu.WHICH										
X::ControlFlow::Return.WHERE	R	Mu.WHERE										
X::ControlFlow::Return.WHY	R	Mu.WHY										
X::Declaration::Scope	A			Perl 6 X::Declaration::Scope							<pre><code>class X::Declaration::Scope does X::Comp { }</code></pre>Compile time error thrown when a declaration does not harmonize with the declared scope.	http://doc.perl6.org/type/X%3A%3ADeclaration%3A%3AScope
X::Declaration::Scope.scope	A			Perl 6 X::Declaration::Scope							<pre><code>method scope() returns Str:D</code></pre>Returns a string representation of the scope, usually the same keyword that is used for the declaration ("my", "our", "has", ...);	http://doc.perl6.org/type/X%3A%3ADeclaration%3A%3AScope#scope
scope	D								*[[X::Declaration::Scope.scope]], returns a string representation of the scope, usually the same keyword that is used for the declaration ("my", "our", "has", ...);\n*[[X::Syntax::Variable::Twigil.scope]], returns the scope that did not harmonize with the twigil.			
X::Declaration::Scope.declaration	A			Perl 6 X::Declaration::Scope							<pre><code>method declaration() returns Str:D</code></pre>Describes the symbol that has been declared in a wrong scope.	http://doc.perl6.org/type/X%3A%3ADeclaration%3A%3AScope#declaration
declaration	R	X::Declaration::Scope.declaration										
X::Declaration::Scope.filename	R	X::Comp.filename										
X::Declaration::Scope.line	R	X::Comp.line										
X::Declaration::Scope.column	R	X::Comp.column										
X::Declaration::Scope.message	R	Exception.message										
X::Declaration::Scope.backtrace	R	Exception.backtrace										
X::Declaration::Scope.throw	R	Exception.throw										
X::Declaration::Scope.rethrow	R	Exception.rethrow										
X::Declaration::Scope.fail	R	Exception.fail										
X::Declaration::Scope.gist	R	Exception.gist										
X::Declaration::Scope.ACCEPTS	R	Any.ACCEPTS										
X::Declaration::Scope.any	R	Any.any										
X::Declaration::Scope.all	R	Any.all										
X::Declaration::Scope.one	R	Any.one										
X::Declaration::Scope.none	R	Any.none										
X::Declaration::Scope.list	R	Any.list										
X::Declaration::Scope.flat	R	Any.flat										
X::Declaration::Scope.eager	R	Any.eager										
X::Declaration::Scope.elems	R	Any.elems										
X::Declaration::Scope.end	R	Any.end										
X::Declaration::Scope.Str	R	Mu.Str										
X::Declaration::Scope.clone	R	Mu.clone										
X::Declaration::Scope.new	R	Mu.new										
X::Declaration::Scope.bless	R	Mu.bless										
X::Declaration::Scope.CREATE	R	Mu.CREATE										
X::Declaration::Scope.print	R	Mu.print										
X::Declaration::Scope.say	R	Mu.say										
X::Declaration::Scope.ACCEPTS	R	Mu.ACCEPTS										
X::Declaration::Scope.WHICH	R	Mu.WHICH										
X::Declaration::Scope.WHERE	R	Mu.WHERE										
X::Declaration::Scope.WHY	R	Mu.WHY										
X::Declaration::Scope::Multi	A			Perl 6 X::Declaration::Scope::Multi							<pre><code>class X::Declaration::Scope::Multi is X::Declaration::Scope { }</code></pre>Thrown when a multi is declared with an incompatible scope.	http://doc.perl6.org/type/X%3A%3ADeclaration%3A%3AScope%3A%3AMulti
X::Declaration::Scope::Multi.scope	R	X::Declaration::Scope.scope										
X::Declaration::Scope::Multi.declaration	R	X::Declaration::Scope.declaration										
X::Declaration::Scope::Multi.filename	R	X::Comp.filename										
X::Declaration::Scope::Multi.line	R	X::Comp.line										
X::Declaration::Scope::Multi.column	R	X::Comp.column										
X::Declaration::Scope::Multi.message	R	Exception.message										
X::Declaration::Scope::Multi.backtrace	R	Exception.backtrace										
X::Declaration::Scope::Multi.throw	R	Exception.throw										
X::Declaration::Scope::Multi.rethrow	R	Exception.rethrow										
X::Declaration::Scope::Multi.fail	R	Exception.fail										
X::Declaration::Scope::Multi.gist	R	Exception.gist										
X::Declaration::Scope::Multi.ACCEPTS	R	Any.ACCEPTS										
X::Declaration::Scope::Multi.any	R	Any.any										
X::Declaration::Scope::Multi.all	R	Any.all										
X::Declaration::Scope::Multi.one	R	Any.one										
X::Declaration::Scope::Multi.none	R	Any.none										
X::Declaration::Scope::Multi.list	R	Any.list										
X::Declaration::Scope::Multi.flat	R	Any.flat										
X::Declaration::Scope::Multi.eager	R	Any.eager										
X::Declaration::Scope::Multi.elems	R	Any.elems										
X::Declaration::Scope::Multi.end	R	Any.end										
X::Declaration::Scope::Multi.Str	R	Mu.Str										
X::Declaration::Scope::Multi.clone	R	Mu.clone										
X::Declaration::Scope::Multi.new	R	Mu.new										
X::Declaration::Scope::Multi.bless	R	Mu.bless										
X::Declaration::Scope::Multi.CREATE	R	Mu.CREATE										
X::Declaration::Scope::Multi.print	R	Mu.print										
X::Declaration::Scope::Multi.say	R	Mu.say										
X::Declaration::Scope::Multi.ACCEPTS	R	Mu.ACCEPTS										
X::Declaration::Scope::Multi.WHICH	R	Mu.WHICH										
X::Declaration::Scope::Multi.WHERE	R	Mu.WHERE										
X::Declaration::Scope::Multi.WHY	R	Mu.WHY										
X::Does::TypeObject	A			Perl 6 X::Does::TypeObject							<pre><code>class X::Does::TypeObject is Exception { ... }</code></pre>When you try to add one or more roles to a type object with does after it has been composed, an error of type X::Does::TypeObject is thrown:	http://doc.perl6.org/type/X%3A%3ADoes%3A%3ATypeObject
X::Does::TypeObject.type	A			Perl 6 X::Does::TypeObject							<pre><code>method type(X::Codes::TypeObject:D:) returns Mu:U</code></pre>Returns the type object into which the code tried to mix in a role.	http://doc.perl6.org/type/X%3A%3ADoes%3A%3ATypeObject#type
X::Does::TypeObject.message	R	Exception.message										
X::Does::TypeObject.backtrace	R	Exception.backtrace										
X::Does::TypeObject.throw	R	Exception.throw										
X::Does::TypeObject.rethrow	R	Exception.rethrow										
X::Does::TypeObject.fail	R	Exception.fail										
X::Does::TypeObject.gist	R	Exception.gist										
X::Does::TypeObject.ACCEPTS	R	Any.ACCEPTS										
X::Does::TypeObject.any	R	Any.any										
X::Does::TypeObject.all	R	Any.all										
X::Does::TypeObject.one	R	Any.one										
X::Does::TypeObject.none	R	Any.none										
X::Does::TypeObject.list	R	Any.list										
X::Does::TypeObject.flat	R	Any.flat										
X::Does::TypeObject.eager	R	Any.eager										
X::Does::TypeObject.elems	R	Any.elems										
X::Does::TypeObject.end	R	Any.end										
X::Does::TypeObject.Str	R	Mu.Str										
X::Does::TypeObject.clone	R	Mu.clone										
X::Does::TypeObject.new	R	Mu.new										
X::Does::TypeObject.bless	R	Mu.bless										
X::Does::TypeObject.CREATE	R	Mu.CREATE										
X::Does::TypeObject.print	R	Mu.print										
X::Does::TypeObject.say	R	Mu.say										
X::Does::TypeObject.ACCEPTS	R	Mu.ACCEPTS										
X::Does::TypeObject.WHICH	R	Mu.WHICH										
X::Does::TypeObject.WHERE	R	Mu.WHERE										
X::Does::TypeObject.WHY	R	Mu.WHY										
X::Eval::NoSuchLang	A			Perl 6 X::Eval::NoSuchLang							<pre><code>class X::Eval::NoSuchLang is Exception { }</code></pre>Error thrown when EVAL($str, :$lang) specifies a language that the compiler does not know how to handle.	http://doc.perl6.org/type/X%3A%3AEval%3A%3ANoSuchLang
X::Eval::NoSuchLang.lang	A			Perl 6 X::Eval::NoSuchLang							<pre><code>method lang()</code></pre>Returns the language that &amp;EVAL did not know how to handle.	http://doc.perl6.org/type/X%3A%3AEval%3A%3ANoSuchLang#lang
lang	R	X::Eval::NoSuchLang.lang										
X::Eval::NoSuchLang.message	R	Exception.message										
X::Eval::NoSuchLang.backtrace	R	Exception.backtrace										
X::Eval::NoSuchLang.throw	R	Exception.throw										
X::Eval::NoSuchLang.rethrow	R	Exception.rethrow										
X::Eval::NoSuchLang.fail	R	Exception.fail										
X::Eval::NoSuchLang.gist	R	Exception.gist										
X::Eval::NoSuchLang.ACCEPTS	R	Any.ACCEPTS										
X::Eval::NoSuchLang.any	R	Any.any										
X::Eval::NoSuchLang.all	R	Any.all										
X::Eval::NoSuchLang.one	R	Any.one										
X::Eval::NoSuchLang.none	R	Any.none										
X::Eval::NoSuchLang.list	R	Any.list										
X::Eval::NoSuchLang.flat	R	Any.flat										
X::Eval::NoSuchLang.eager	R	Any.eager										
X::Eval::NoSuchLang.elems	R	Any.elems										
X::Eval::NoSuchLang.end	R	Any.end										
X::Eval::NoSuchLang.Str	R	Mu.Str										
X::Eval::NoSuchLang.clone	R	Mu.clone										
X::Eval::NoSuchLang.new	R	Mu.new										
X::Eval::NoSuchLang.bless	R	Mu.bless										
X::Eval::NoSuchLang.CREATE	R	Mu.CREATE										
X::Eval::NoSuchLang.print	R	Mu.print										
X::Eval::NoSuchLang.say	R	Mu.say										
X::Eval::NoSuchLang.ACCEPTS	R	Mu.ACCEPTS										
X::Eval::NoSuchLang.WHICH	R	Mu.WHICH										
X::Eval::NoSuchLang.WHERE	R	Mu.WHERE										
X::Eval::NoSuchLang.WHY	R	Mu.WHY										
X::Export::NameClash	A			Perl 6 X::Export::NameClash							<pre><code>class X::Export::NameClash does X::Comp { }</code></pre>Compile time error thrown when a symbol is exported twice.	http://doc.perl6.org/type/X%3A%3AExport%3A%3ANameClash
X::Export::NameClash.symbol	A			Perl 6 X::Export::NameClash							Returns the symbol that is exported twice.	http://doc.perl6.org/type/X%3A%3AExport%3A%3ANameClash#symbol
symbol	D								*[[X::Export::NameClash.symbol]], returns the symbol that is exported twice.\n*[[X::Redeclaration.symbol]], returns the name of the symbol that was redeclared.\n*[[X::Undeclared.symbol]], returns the name of the undeclared symbol			
X::Export::NameClash.message	R	Exception.message										
X::Export::NameClash.backtrace	R	Exception.backtrace										
X::Export::NameClash.throw	R	Exception.throw										
X::Export::NameClash.rethrow	R	Exception.rethrow										
X::Export::NameClash.fail	R	Exception.fail										
X::Export::NameClash.gist	R	Exception.gist										
X::Export::NameClash.ACCEPTS	R	Any.ACCEPTS										
X::Export::NameClash.any	R	Any.any										
X::Export::NameClash.all	R	Any.all										
X::Export::NameClash.one	R	Any.one										
X::Export::NameClash.none	R	Any.none										
X::Export::NameClash.list	R	Any.list										
X::Export::NameClash.flat	R	Any.flat										
X::Export::NameClash.eager	R	Any.eager										
X::Export::NameClash.elems	R	Any.elems										
X::Export::NameClash.end	R	Any.end										
X::Export::NameClash.Str	R	Mu.Str										
X::Export::NameClash.clone	R	Mu.clone										
X::Export::NameClash.new	R	Mu.new										
X::Export::NameClash.bless	R	Mu.bless										
X::Export::NameClash.CREATE	R	Mu.CREATE										
X::Export::NameClash.print	R	Mu.print										
X::Export::NameClash.say	R	Mu.say										
X::Export::NameClash.ACCEPTS	R	Mu.ACCEPTS										
X::Export::NameClash.WHICH	R	Mu.WHICH										
X::Export::NameClash.WHERE	R	Mu.WHERE										
X::Export::NameClash.WHY	R	Mu.WHY										
X::IO	A			Perl 6 X::IO							<pre><code>role X::IO does X::OS {}</code></pre>Common role for IO related errors.	http://doc.perl6.org/type/X%3A%3AIO
X::IO.os-error	R	X::OS.os-error										
X::IO::Chdir	A			Perl 6 X::IO::Chdir							<pre><code>class X::IO::Chdir does X::IO is Exception { }</code></pre>Error class when a chdir call failed.	http://doc.perl6.org/type/X%3A%3AIO%3A%3AChdir
X::IO::Chdir.path	A			Perl 6 X::IO::Chdir							Returns the path that was passed to the failed chdir call.	http://doc.perl6.org/type/X%3A%3AIO%3A%3AChdir#path
X::IO::Chdir.message	R	Exception.message										
X::IO::Chdir.backtrace	R	Exception.backtrace										
X::IO::Chdir.throw	R	Exception.throw										
X::IO::Chdir.rethrow	R	Exception.rethrow										
X::IO::Chdir.fail	R	Exception.fail										
X::IO::Chdir.gist	R	Exception.gist										
X::IO::Chdir.ACCEPTS	R	Any.ACCEPTS										
X::IO::Chdir.any	R	Any.any										
X::IO::Chdir.all	R	Any.all										
X::IO::Chdir.one	R	Any.one										
X::IO::Chdir.none	R	Any.none										
X::IO::Chdir.list	R	Any.list										
X::IO::Chdir.flat	R	Any.flat										
X::IO::Chdir.eager	R	Any.eager										
X::IO::Chdir.elems	R	Any.elems										
X::IO::Chdir.end	R	Any.end										
X::IO::Chdir.Str	R	Mu.Str										
X::IO::Chdir.clone	R	Mu.clone										
X::IO::Chdir.new	R	Mu.new										
X::IO::Chdir.bless	R	Mu.bless										
X::IO::Chdir.CREATE	R	Mu.CREATE										
X::IO::Chdir.print	R	Mu.print										
X::IO::Chdir.say	R	Mu.say										
X::IO::Chdir.ACCEPTS	R	Mu.ACCEPTS										
X::IO::Chdir.WHICH	R	Mu.WHICH										
X::IO::Chdir.WHERE	R	Mu.WHERE										
X::IO::Chdir.WHY	R	Mu.WHY										
X::IO::Chmod	A			Perl 6 X::IO::Chmod							<pre><code>class X::IO::Chmod does X::IO is Exception</code></pre>Error class for failed chmod calls.	http://doc.perl6.org/type/X%3A%3AIO%3A%3AChmod
X::IO::Chmod.message	R	Exception.message										
X::IO::Chmod.backtrace	R	Exception.backtrace										
X::IO::Chmod.throw	R	Exception.throw										
X::IO::Chmod.rethrow	R	Exception.rethrow										
X::IO::Chmod.fail	R	Exception.fail										
X::IO::Chmod.gist	R	Exception.gist										
X::IO::Chmod.ACCEPTS	R	Any.ACCEPTS										
X::IO::Chmod.any	R	Any.any										
X::IO::Chmod.all	R	Any.all										
X::IO::Chmod.one	R	Any.one										
X::IO::Chmod.none	R	Any.none										
X::IO::Chmod.list	R	Any.list										
X::IO::Chmod.flat	R	Any.flat										
X::IO::Chmod.eager	R	Any.eager										
X::IO::Chmod.elems	R	Any.elems										
X::IO::Chmod.end	R	Any.end										
X::IO::Chmod.Str	R	Mu.Str										
X::IO::Chmod.clone	R	Mu.clone										
X::IO::Chmod.new	R	Mu.new										
X::IO::Chmod.bless	R	Mu.bless										
X::IO::Chmod.CREATE	R	Mu.CREATE										
X::IO::Chmod.print	R	Mu.print										
X::IO::Chmod.say	R	Mu.say										
X::IO::Chmod.ACCEPTS	R	Mu.ACCEPTS										
X::IO::Chmod.WHICH	R	Mu.WHICH										
X::IO::Chmod.WHERE	R	Mu.WHERE										
X::IO::Chmod.WHY	R	Mu.WHY										
X::IO::Copy	A			Perl 6 X::IO::Copy							<pre><code>class X::IO::Copy does X::IO is Exception { }</code></pre>Error class for failed file copy operations.	http://doc.perl6.org/type/X%3A%3AIO%3A%3ACopy
X::IO::Copy.from	A			Perl 6 X::IO::Copy							Returns the source of the failed copy operation	http://doc.perl6.org/type/X%3A%3AIO%3A%3ACopy#from
X::IO::Copy.to	A			Perl 6 X::IO::Copy							Returns the destination of the failed copy operation	http://doc.perl6.org/type/X%3A%3AIO%3A%3ACopy#to
X::IO::Copy.message	R	Exception.message										
X::IO::Copy.backtrace	R	Exception.backtrace										
X::IO::Copy.throw	R	Exception.throw										
X::IO::Copy.rethrow	R	Exception.rethrow										
X::IO::Copy.fail	R	Exception.fail										
X::IO::Copy.gist	R	Exception.gist										
X::IO::Copy.ACCEPTS	R	Any.ACCEPTS										
X::IO::Copy.any	R	Any.any										
X::IO::Copy.all	R	Any.all										
X::IO::Copy.one	R	Any.one										
X::IO::Copy.none	R	Any.none										
X::IO::Copy.list	R	Any.list										
X::IO::Copy.flat	R	Any.flat										
X::IO::Copy.eager	R	Any.eager										
X::IO::Copy.elems	R	Any.elems										
X::IO::Copy.end	R	Any.end										
X::IO::Copy.Str	R	Mu.Str										
X::IO::Copy.clone	R	Mu.clone										
X::IO::Copy.new	R	Mu.new										
X::IO::Copy.bless	R	Mu.bless										
X::IO::Copy.CREATE	R	Mu.CREATE										
X::IO::Copy.print	R	Mu.print										
X::IO::Copy.say	R	Mu.say										
X::IO::Copy.ACCEPTS	R	Mu.ACCEPTS										
X::IO::Copy.WHICH	R	Mu.WHICH										
X::IO::Copy.WHERE	R	Mu.WHERE										
X::IO::Copy.WHY	R	Mu.WHY										
X::IO::Cwd	A			Perl 6 X::IO::Cwd							<pre><code>class X::IO::Cwd does X::IO is Exception { }</code></pre>Error class when the runtime fails to determine the current directory.	http://doc.perl6.org/type/X%3A%3AIO%3A%3ACwd
X::IO::Cwd.message	R	Exception.message										
X::IO::Cwd.backtrace	R	Exception.backtrace										
X::IO::Cwd.throw	R	Exception.throw										
X::IO::Cwd.rethrow	R	Exception.rethrow										
X::IO::Cwd.fail	R	Exception.fail										
X::IO::Cwd.gist	R	Exception.gist										
X::IO::Cwd.ACCEPTS	R	Any.ACCEPTS										
X::IO::Cwd.any	R	Any.any										
X::IO::Cwd.all	R	Any.all										
X::IO::Cwd.one	R	Any.one										
X::IO::Cwd.none	R	Any.none										
X::IO::Cwd.list	R	Any.list										
X::IO::Cwd.flat	R	Any.flat										
X::IO::Cwd.eager	R	Any.eager										
X::IO::Cwd.elems	R	Any.elems										
X::IO::Cwd.end	R	Any.end										
X::IO::Cwd.Str	R	Mu.Str										
X::IO::Cwd.clone	R	Mu.clone										
X::IO::Cwd.new	R	Mu.new										
X::IO::Cwd.bless	R	Mu.bless										
X::IO::Cwd.CREATE	R	Mu.CREATE										
X::IO::Cwd.print	R	Mu.print										
X::IO::Cwd.say	R	Mu.say										
X::IO::Cwd.ACCEPTS	R	Mu.ACCEPTS										
X::IO::Cwd.WHICH	R	Mu.WHICH										
X::IO::Cwd.WHERE	R	Mu.WHERE										
X::IO::Cwd.WHY	R	Mu.WHY										
X::IO::Dir	A			Perl 6 X::IO::Dir							<pre><code>class X::IO::Dir does X::IO is Exception { }</code></pre>Error class that is thrown when a &amp;dir call fails.	http://doc.perl6.org/type/X%3A%3AIO%3A%3ADir
X::IO::Dir.path	A			Perl 6 X::IO::Dir							Returns the path that &amp;dir failed to read.	http://doc.perl6.org/type/X%3A%3AIO%3A%3ADir#path
X::IO::Dir.message	R	Exception.message										
X::IO::Dir.backtrace	R	Exception.backtrace										
X::IO::Dir.throw	R	Exception.throw										
X::IO::Dir.rethrow	R	Exception.rethrow										
X::IO::Dir.fail	R	Exception.fail										
X::IO::Dir.gist	R	Exception.gist										
X::IO::Dir.ACCEPTS	R	Any.ACCEPTS										
X::IO::Dir.any	R	Any.any										
X::IO::Dir.all	R	Any.all										
X::IO::Dir.one	R	Any.one										
X::IO::Dir.none	R	Any.none										
X::IO::Dir.list	R	Any.list										
X::IO::Dir.flat	R	Any.flat										
X::IO::Dir.eager	R	Any.eager										
X::IO::Dir.elems	R	Any.elems										
X::IO::Dir.end	R	Any.end										
X::IO::Dir.Str	R	Mu.Str										
X::IO::Dir.clone	R	Mu.clone										
X::IO::Dir.new	R	Mu.new										
X::IO::Dir.bless	R	Mu.bless										
X::IO::Dir.CREATE	R	Mu.CREATE										
X::IO::Dir.print	R	Mu.print										
X::IO::Dir.say	R	Mu.say										
X::IO::Dir.ACCEPTS	R	Mu.ACCEPTS										
X::IO::Dir.WHICH	R	Mu.WHICH										
X::IO::Dir.WHERE	R	Mu.WHERE										
X::IO::Dir.WHY	R	Mu.WHY										
X::IO::Mkdir	A			Perl 6 X::IO::Mkdir							<pre><code>class X::IO::Mkdir does X::IO is Exception</code></pre>Error class for failed mkdir operations.	http://doc.perl6.org/type/X%3A%3AIO%3A%3AMkdir
X::IO::Mkdir.path	A			Perl 6 X::IO::Mkdir							Returns the path that the mkdir operation failed to create.	http://doc.perl6.org/type/X%3A%3AIO%3A%3AMkdir#path
X::IO::Mkdir.mode	A			Perl 6 X::IO::Mkdir							Returns the permissions mask of the failed mkdir operation as an Int.	http://doc.perl6.org/type/X%3A%3AIO%3A%3AMkdir#mode
mode	R	X::IO::Mkdir.mode										
X::IO::Mkdir.message	R	Exception.message										
X::IO::Mkdir.backtrace	R	Exception.backtrace										
X::IO::Mkdir.throw	R	Exception.throw										
X::IO::Mkdir.rethrow	R	Exception.rethrow										
X::IO::Mkdir.fail	R	Exception.fail										
X::IO::Mkdir.gist	R	Exception.gist										
X::IO::Mkdir.ACCEPTS	R	Any.ACCEPTS										
X::IO::Mkdir.any	R	Any.any										
X::IO::Mkdir.all	R	Any.all										
X::IO::Mkdir.one	R	Any.one										
X::IO::Mkdir.none	R	Any.none										
X::IO::Mkdir.list	R	Any.list										
X::IO::Mkdir.flat	R	Any.flat										
X::IO::Mkdir.eager	R	Any.eager										
X::IO::Mkdir.elems	R	Any.elems										
X::IO::Mkdir.end	R	Any.end										
X::IO::Mkdir.Str	R	Mu.Str										
X::IO::Mkdir.clone	R	Mu.clone										
X::IO::Mkdir.new	R	Mu.new										
X::IO::Mkdir.bless	R	Mu.bless										
X::IO::Mkdir.CREATE	R	Mu.CREATE										
X::IO::Mkdir.print	R	Mu.print										
X::IO::Mkdir.say	R	Mu.say										
X::IO::Mkdir.ACCEPTS	R	Mu.ACCEPTS										
X::IO::Mkdir.WHICH	R	Mu.WHICH										
X::IO::Mkdir.WHERE	R	Mu.WHERE										
X::IO::Mkdir.WHY	R	Mu.WHY										
X::IO::Rename	A			Perl 6 X::IO::Rename							<pre><code>class X::IO::Rename does X::IO is Exception { }</code></pre>Error class for failed file or directory rename operations.	http://doc.perl6.org/type/X%3A%3AIO%3A%3ARename
X::IO::Rename.from	A			Perl 6 X::IO::Rename							Returns the source of the failed rename operation	http://doc.perl6.org/type/X%3A%3AIO%3A%3ARename#from
X::IO::Rename.to	A			Perl 6 X::IO::Rename							Returns the destination of the failed rename operation	http://doc.perl6.org/type/X%3A%3AIO%3A%3ARename#to
X::IO::Rename.message	R	Exception.message										
X::IO::Rename.backtrace	R	Exception.backtrace										
X::IO::Rename.throw	R	Exception.throw										
X::IO::Rename.rethrow	R	Exception.rethrow										
X::IO::Rename.fail	R	Exception.fail										
X::IO::Rename.gist	R	Exception.gist										
X::IO::Rename.ACCEPTS	R	Any.ACCEPTS										
X::IO::Rename.any	R	Any.any										
X::IO::Rename.all	R	Any.all										
X::IO::Rename.one	R	Any.one										
X::IO::Rename.none	R	Any.none										
X::IO::Rename.list	R	Any.list										
X::IO::Rename.flat	R	Any.flat										
X::IO::Rename.eager	R	Any.eager										
X::IO::Rename.elems	R	Any.elems										
X::IO::Rename.end	R	Any.end										
X::IO::Rename.Str	R	Mu.Str										
X::IO::Rename.clone	R	Mu.clone										
X::IO::Rename.new	R	Mu.new										
X::IO::Rename.bless	R	Mu.bless										
X::IO::Rename.CREATE	R	Mu.CREATE										
X::IO::Rename.print	R	Mu.print										
X::IO::Rename.say	R	Mu.say										
X::IO::Rename.ACCEPTS	R	Mu.ACCEPTS										
X::IO::Rename.WHICH	R	Mu.WHICH										
X::IO::Rename.WHERE	R	Mu.WHERE										
X::IO::Rename.WHY	R	Mu.WHY										
X::IO::Rmdir	A			Perl 6 X::IO::Rmdir							<pre><code>my class X::IO::Rmdir does X::IO is Exception</code></pre>Error class for failed &amp;rmdir operations.	http://doc.perl6.org/type/X%3A%3AIO%3A%3ARmdir
X::IO::Rmdir.path	A			Perl 6 X::IO::Rmdir							Returns the path &amp;rmdir failed to remove	http://doc.perl6.org/type/X%3A%3AIO%3A%3ARmdir#path
X::IO::Rmdir.message	R	Exception.message										
X::IO::Rmdir.backtrace	R	Exception.backtrace										
X::IO::Rmdir.throw	R	Exception.throw										
X::IO::Rmdir.rethrow	R	Exception.rethrow										
X::IO::Rmdir.fail	R	Exception.fail										
X::IO::Rmdir.gist	R	Exception.gist										
X::IO::Rmdir.ACCEPTS	R	Any.ACCEPTS										
X::IO::Rmdir.any	R	Any.any										
X::IO::Rmdir.all	R	Any.all										
X::IO::Rmdir.one	R	Any.one										
X::IO::Rmdir.none	R	Any.none										
X::IO::Rmdir.list	R	Any.list										
X::IO::Rmdir.flat	R	Any.flat										
X::IO::Rmdir.eager	R	Any.eager										
X::IO::Rmdir.elems	R	Any.elems										
X::IO::Rmdir.end	R	Any.end										
X::IO::Rmdir.Str	R	Mu.Str										
X::IO::Rmdir.clone	R	Mu.clone										
X::IO::Rmdir.new	R	Mu.new										
X::IO::Rmdir.bless	R	Mu.bless										
X::IO::Rmdir.CREATE	R	Mu.CREATE										
X::IO::Rmdir.print	R	Mu.print										
X::IO::Rmdir.say	R	Mu.say										
X::IO::Rmdir.ACCEPTS	R	Mu.ACCEPTS										
X::IO::Rmdir.WHICH	R	Mu.WHICH										
X::IO::Rmdir.WHERE	R	Mu.WHERE										
X::IO::Rmdir.WHY	R	Mu.WHY										
X::IO::Unlink	A			Perl 6 X::IO::Unlink							<pre><code>class X::IO::Unlink does X::IO is Exception</code></pre>Error class for failed &amp;unlink operation.	http://doc.perl6.org/type/X%3A%3AIO%3A%3AUnlink
X::IO::Unlink.path	A			Perl 6 X::IO::Unlink							Returns the path that &amp;unlink failed to delete.	http://doc.perl6.org/type/X%3A%3AIO%3A%3AUnlink#path
X::IO::Unlink.message	R	Exception.message										
X::IO::Unlink.backtrace	R	Exception.backtrace										
X::IO::Unlink.throw	R	Exception.throw										
X::IO::Unlink.rethrow	R	Exception.rethrow										
X::IO::Unlink.fail	R	Exception.fail										
X::IO::Unlink.gist	R	Exception.gist										
X::IO::Unlink.ACCEPTS	R	Any.ACCEPTS										
X::IO::Unlink.any	R	Any.any										
X::IO::Unlink.all	R	Any.all										
X::IO::Unlink.one	R	Any.one										
X::IO::Unlink.none	R	Any.none										
X::IO::Unlink.list	R	Any.list										
X::IO::Unlink.flat	R	Any.flat										
X::IO::Unlink.eager	R	Any.eager										
X::IO::Unlink.elems	R	Any.elems										
X::IO::Unlink.end	R	Any.end										
X::IO::Unlink.Str	R	Mu.Str										
X::IO::Unlink.clone	R	Mu.clone										
X::IO::Unlink.new	R	Mu.new										
X::IO::Unlink.bless	R	Mu.bless										
X::IO::Unlink.CREATE	R	Mu.CREATE										
X::IO::Unlink.print	R	Mu.print										
X::IO::Unlink.say	R	Mu.say										
X::IO::Unlink.ACCEPTS	R	Mu.ACCEPTS										
X::IO::Unlink.WHICH	R	Mu.WHICH										
X::IO::Unlink.WHERE	R	Mu.WHERE										
X::IO::Unlink.WHY	R	Mu.WHY										
X::Inheritance::NotComposed	A			Perl 6 X::Inheritance::NotComposed							<pre><code>class X::Inheritance::NotComposed is Exception { ... }</code></pre>When you try to inherit from a class that hasn't been composed, an exception of type X::Inheritance::NotComposed is thrown.	http://doc.perl6.org/type/X%3A%3AInheritance%3A%3ANotComposed
X::Inheritance::NotComposed.child-name	A			Perl 6 X::Inheritance::NotComposed							<pre><code>method child-name(X::Inheritance::NotComposed:D:) returns Str:D</code></pre>Returns the name of the type that tries to inherit.	http://doc.perl6.org/type/X%3A%3AInheritance%3A%3ANotComposed#child-name
child-name	R	X::Inheritance::NotComposed.child-name										
X::Inheritance::NotComposed.parent-name	A			Perl 6 X::Inheritance::NotComposed							<pre><code>method parent-name(X::Inheritance::NotComposed:D:) returns Str:D</code></pre>Returns the name of the parent type that the type tries to inherit from	http://doc.perl6.org/type/X%3A%3AInheritance%3A%3ANotComposed#parent-name
parent-name	R	X::Inheritance::NotComposed.parent-name										
X::Inheritance::NotComposed.message	R	Exception.message										
X::Inheritance::NotComposed.backtrace	R	Exception.backtrace										
X::Inheritance::NotComposed.throw	R	Exception.throw										
X::Inheritance::NotComposed.rethrow	R	Exception.rethrow										
X::Inheritance::NotComposed.fail	R	Exception.fail										
X::Inheritance::NotComposed.gist	R	Exception.gist										
X::Inheritance::NotComposed.ACCEPTS	R	Any.ACCEPTS										
X::Inheritance::NotComposed.any	R	Any.any										
X::Inheritance::NotComposed.all	R	Any.all										
X::Inheritance::NotComposed.one	R	Any.one										
X::Inheritance::NotComposed.none	R	Any.none										
X::Inheritance::NotComposed.list	R	Any.list										
X::Inheritance::NotComposed.flat	R	Any.flat										
X::Inheritance::NotComposed.eager	R	Any.eager										
X::Inheritance::NotComposed.elems	R	Any.elems										
X::Inheritance::NotComposed.end	R	Any.end										
X::Inheritance::NotComposed.Str	R	Mu.Str										
X::Inheritance::NotComposed.clone	R	Mu.clone										
X::Inheritance::NotComposed.new	R	Mu.new										
X::Inheritance::NotComposed.bless	R	Mu.bless										
X::Inheritance::NotComposed.CREATE	R	Mu.CREATE										
X::Inheritance::NotComposed.print	R	Mu.print										
X::Inheritance::NotComposed.say	R	Mu.say										
X::Inheritance::NotComposed.ACCEPTS	R	Mu.ACCEPTS										
X::Inheritance::NotComposed.WHICH	R	Mu.WHICH										
X::Inheritance::NotComposed.WHERE	R	Mu.WHERE										
X::Inheritance::NotComposed.WHY	R	Mu.WHY										
X::Inheritance::Unsupported	A			Perl 6 X::Inheritance::Unsupported							<pre><code>class X::Inheritance::Unsupported does X::Comp { }</code></pre>Compile time error thrown when trying to inherit from a type that does not support inheritance (like a package or an enum).	http://doc.perl6.org/type/X%3A%3AInheritance%3A%3AUnsupported
X::Inheritance::Unsupported.child-typename	A			Perl 6 X::Inheritance::Unsupported							The name of the type that tries to inherit.	http://doc.perl6.org/type/X%3A%3AInheritance%3A%3AUnsupported#child-typename
child-typename	R	X::Inheritance::Unsupported.child-typename										
X::Inheritance::Unsupported.parent	A			Perl 6 X::Inheritance::Unsupported							The type object that the child tried to inherit from.	http://doc.perl6.org/type/X%3A%3AInheritance%3A%3AUnsupported#parent
parent	R	X::Inheritance::Unsupported.parent										
X::Inheritance::Unsupported.message	R	Exception.message										
X::Inheritance::Unsupported.backtrace	R	Exception.backtrace										
X::Inheritance::Unsupported.throw	R	Exception.throw										
X::Inheritance::Unsupported.rethrow	R	Exception.rethrow										
X::Inheritance::Unsupported.fail	R	Exception.fail										
X::Inheritance::Unsupported.gist	R	Exception.gist										
X::Inheritance::Unsupported.ACCEPTS	R	Any.ACCEPTS										
X::Inheritance::Unsupported.any	R	Any.any										
X::Inheritance::Unsupported.all	R	Any.all										
X::Inheritance::Unsupported.one	R	Any.one										
X::Inheritance::Unsupported.none	R	Any.none										
X::Inheritance::Unsupported.list	R	Any.list										
X::Inheritance::Unsupported.flat	R	Any.flat										
X::Inheritance::Unsupported.eager	R	Any.eager										
X::Inheritance::Unsupported.elems	R	Any.elems										
X::Inheritance::Unsupported.end	R	Any.end										
X::Inheritance::Unsupported.Str	R	Mu.Str										
X::Inheritance::Unsupported.clone	R	Mu.clone										
X::Inheritance::Unsupported.new	R	Mu.new										
X::Inheritance::Unsupported.bless	R	Mu.bless										
X::Inheritance::Unsupported.CREATE	R	Mu.CREATE										
X::Inheritance::Unsupported.print	R	Mu.print										
X::Inheritance::Unsupported.say	R	Mu.say										
X::Inheritance::Unsupported.ACCEPTS	R	Mu.ACCEPTS										
X::Inheritance::Unsupported.WHICH	R	Mu.WHICH										
X::Inheritance::Unsupported.WHERE	R	Mu.WHERE										
X::Inheritance::Unsupported.WHY	R	Mu.WHY										
X::Method::InvalidQualifier	A			Perl 6 X::Method::InvalidQualifier							<pre><code>class X::Method::InvalidQualifier is Exception { }</code></pre>Thrown when a method is call in the form $invocant.TheClass::method if &lt;$invocant&gt; does not conform to TheClass.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3AInvalidQualifier
X::Method::InvalidQualifier.method	A			Perl 6 X::Method::InvalidQualifier							<pre><code>method method() returns Str:D</code></pre>Returns the name of the (unqualified) method.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3AInvalidQualifier#method
method	D								*[[X::Method::InvalidQualifier.method]], returns the name of the (unqualified) method.\n*[[X::Method::NotFound.method]], returns the method name that was invoked.\n*[[X::Method::Private::Permission.method]], the name of the private method\n*[[X::Method::Private::Unqualified.method]], returns the name of the private method that triggered the error.\n*[[X::Proc::Async::MustBeStarted.method]], returns the name of the method that was illegally called before starting the external program.\n*[[X::Proc::Async::OpenForWriting.method]], returns the method name that was called and which caused the exception.			
X::Method::InvalidQualifier.invocant	A			Perl 6 X::Method::InvalidQualifier							Returns the invocant of the failed, qualified method call	http://doc.perl6.org/type/X%3A%3AMethod%3A%3AInvalidQualifier#invocant
X::Method::InvalidQualifier.qualifier-type	A			Perl 6 X::Method::InvalidQualifier							Returns the type by which the method call was qualified.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3AInvalidQualifier#qualifier-type
qualifier-type	R	X::Method::InvalidQualifier.qualifier-type										
X::Method::InvalidQualifier.message	R	Exception.message										
X::Method::InvalidQualifier.backtrace	R	Exception.backtrace										
X::Method::InvalidQualifier.throw	R	Exception.throw										
X::Method::InvalidQualifier.rethrow	R	Exception.rethrow										
X::Method::InvalidQualifier.fail	R	Exception.fail										
X::Method::InvalidQualifier.gist	R	Exception.gist										
X::Method::InvalidQualifier.ACCEPTS	R	Any.ACCEPTS										
X::Method::InvalidQualifier.any	R	Any.any										
X::Method::InvalidQualifier.all	R	Any.all										
X::Method::InvalidQualifier.one	R	Any.one										
X::Method::InvalidQualifier.none	R	Any.none										
X::Method::InvalidQualifier.list	R	Any.list										
X::Method::InvalidQualifier.flat	R	Any.flat										
X::Method::InvalidQualifier.eager	R	Any.eager										
X::Method::InvalidQualifier.elems	R	Any.elems										
X::Method::InvalidQualifier.end	R	Any.end										
X::Method::InvalidQualifier.Str	R	Mu.Str										
X::Method::InvalidQualifier.clone	R	Mu.clone										
X::Method::InvalidQualifier.new	R	Mu.new										
X::Method::InvalidQualifier.bless	R	Mu.bless										
X::Method::InvalidQualifier.CREATE	R	Mu.CREATE										
X::Method::InvalidQualifier.print	R	Mu.print										
X::Method::InvalidQualifier.say	R	Mu.say										
X::Method::InvalidQualifier.ACCEPTS	R	Mu.ACCEPTS										
X::Method::InvalidQualifier.WHICH	R	Mu.WHICH										
X::Method::InvalidQualifier.WHERE	R	Mu.WHERE										
X::Method::InvalidQualifier.WHY	R	Mu.WHY										
X::Method::NotFound	A			Perl 6 X::Method::NotFound							<pre><code>class X::Method::NotFound is Exception</code></pre>Thrown when the user tries to call a method that isn't there.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3ANotFound
X::Method::NotFound.method	A			Perl 6 X::Method::NotFound							<pre><code>method method() returns Str:D</code></pre>Returns the method name that was invoked.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3ANotFound#method
X::Method::NotFound.typename	A			Perl 6 X::Method::NotFound							<pre><code>method typename returns Str:D</code></pre>Returns the name of the invocant type.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3ANotFound#typename
X::Method::NotFound.private	A			Perl 6 X::Method::NotFound							<pre><code>method private returns Bool:D</code></pre>Returns True for private methods, and False for public methods.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3ANotFound#private
private	R	X::Method::NotFound.private										
X::Method::NotFound.message	R	Exception.message										
X::Method::NotFound.backtrace	R	Exception.backtrace										
X::Method::NotFound.throw	R	Exception.throw										
X::Method::NotFound.rethrow	R	Exception.rethrow										
X::Method::NotFound.fail	R	Exception.fail										
X::Method::NotFound.gist	R	Exception.gist										
X::Method::NotFound.ACCEPTS	R	Any.ACCEPTS										
X::Method::NotFound.any	R	Any.any										
X::Method::NotFound.all	R	Any.all										
X::Method::NotFound.one	R	Any.one										
X::Method::NotFound.none	R	Any.none										
X::Method::NotFound.list	R	Any.list										
X::Method::NotFound.flat	R	Any.flat										
X::Method::NotFound.eager	R	Any.eager										
X::Method::NotFound.elems	R	Any.elems										
X::Method::NotFound.end	R	Any.end										
X::Method::NotFound.Str	R	Mu.Str										
X::Method::NotFound.clone	R	Mu.clone										
X::Method::NotFound.new	R	Mu.new										
X::Method::NotFound.bless	R	Mu.bless										
X::Method::NotFound.CREATE	R	Mu.CREATE										
X::Method::NotFound.print	R	Mu.print										
X::Method::NotFound.say	R	Mu.say										
X::Method::NotFound.ACCEPTS	R	Mu.ACCEPTS										
X::Method::NotFound.WHICH	R	Mu.WHICH										
X::Method::NotFound.WHERE	R	Mu.WHERE										
X::Method::NotFound.WHY	R	Mu.WHY										
X::Method::Private::Permission	A			Perl 6 X::Method::Private::Permission							<pre><code>class X::Method::Private::Permission does X::Comp { }</code></pre>Compile time error thrown when the code contains a call to a private method that isn't defined in the current class, and when no appropriate trusts relation is defined that permits the private method call.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3APrivate%3A%3APermission
X::Method::Private::Permission.method	A			Perl 6 X::Method::Private::Permission							<pre><code>method method() returns Str:D</code></pre>The name of the private method	http://doc.perl6.org/type/X%3A%3AMethod%3A%3APrivate%3A%3APermission#method
X::Method::Private::Permission.source-package	A			Perl 6 X::Method::Private::Permission							<pre><code>method source-package() returns Mu:D</code></pre>Returns the type object that (supposedly) contains the private method.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3APrivate%3A%3APermission#source-package
source-package	R	X::Method::Private::Permission.source-package										
X::Method::Private::Permission.calling-package	A			Perl 6 X::Method::Private::Permission							<pre><code>method calling-package() returns Mu:D</code></pre>Returns the package in which the calling code is, and which the source package does not trust.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3APrivate%3A%3APermission#calling-package
calling-package	R	X::Method::Private::Permission.calling-package										
X::Method::Private::Permission.filename	R	X::Comp.filename										
X::Method::Private::Permission.line	R	X::Comp.line										
X::Method::Private::Permission.column	R	X::Comp.column										
X::Method::Private::Permission.message	R	Exception.message										
X::Method::Private::Permission.backtrace	R	Exception.backtrace										
X::Method::Private::Permission.throw	R	Exception.throw										
X::Method::Private::Permission.rethrow	R	Exception.rethrow										
X::Method::Private::Permission.fail	R	Exception.fail										
X::Method::Private::Permission.gist	R	Exception.gist										
X::Method::Private::Permission.ACCEPTS	R	Any.ACCEPTS										
X::Method::Private::Permission.any	R	Any.any										
X::Method::Private::Permission.all	R	Any.all										
X::Method::Private::Permission.one	R	Any.one										
X::Method::Private::Permission.none	R	Any.none										
X::Method::Private::Permission.list	R	Any.list										
X::Method::Private::Permission.flat	R	Any.flat										
X::Method::Private::Permission.eager	R	Any.eager										
X::Method::Private::Permission.elems	R	Any.elems										
X::Method::Private::Permission.end	R	Any.end										
X::Method::Private::Permission.Str	R	Mu.Str										
X::Method::Private::Permission.clone	R	Mu.clone										
X::Method::Private::Permission.new	R	Mu.new										
X::Method::Private::Permission.bless	R	Mu.bless										
X::Method::Private::Permission.CREATE	R	Mu.CREATE										
X::Method::Private::Permission.print	R	Mu.print										
X::Method::Private::Permission.say	R	Mu.say										
X::Method::Private::Permission.ACCEPTS	R	Mu.ACCEPTS										
X::Method::Private::Permission.WHICH	R	Mu.WHICH										
X::Method::Private::Permission.WHERE	R	Mu.WHERE										
X::Method::Private::Permission.WHY	R	Mu.WHY										
X::Method::Private::Unqualified	A			Perl 6 X::Method::Private::Unqualified							<pre><code>class X::Method::Private::Unqualified does X::Comp { }</code></pre>Compile time error thrown when a private method call on anything but self is not fully qualified.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3APrivate%3A%3AUnqualified
X::Method::Private::Unqualified.method	A			Perl 6 X::Method::Private::Unqualified							<pre><code>method method() returns Str:D</code></pre>Returns the name of the private method that triggered the error.	http://doc.perl6.org/type/X%3A%3AMethod%3A%3APrivate%3A%3AUnqualified#method
X::Method::Private::Unqualified.filename	R	X::Comp.filename										
X::Method::Private::Unqualified.line	R	X::Comp.line										
X::Method::Private::Unqualified.column	R	X::Comp.column										
X::Method::Private::Unqualified.message	R	Exception.message										
X::Method::Private::Unqualified.backtrace	R	Exception.backtrace										
X::Method::Private::Unqualified.throw	R	Exception.throw										
X::Method::Private::Unqualified.rethrow	R	Exception.rethrow										
X::Method::Private::Unqualified.fail	R	Exception.fail										
X::Method::Private::Unqualified.gist	R	Exception.gist										
X::Method::Private::Unqualified.ACCEPTS	R	Any.ACCEPTS										
X::Method::Private::Unqualified.any	R	Any.any										
X::Method::Private::Unqualified.all	R	Any.all										
X::Method::Private::Unqualified.one	R	Any.one										
X::Method::Private::Unqualified.none	R	Any.none										
X::Method::Private::Unqualified.list	R	Any.list										
X::Method::Private::Unqualified.flat	R	Any.flat										
X::Method::Private::Unqualified.eager	R	Any.eager										
X::Method::Private::Unqualified.elems	R	Any.elems										
X::Method::Private::Unqualified.end	R	Any.end										
X::Method::Private::Unqualified.Str	R	Mu.Str										
X::Method::Private::Unqualified.clone	R	Mu.clone										
X::Method::Private::Unqualified.new	R	Mu.new										
X::Method::Private::Unqualified.bless	R	Mu.bless										
X::Method::Private::Unqualified.CREATE	R	Mu.CREATE										
X::Method::Private::Unqualified.print	R	Mu.print										
X::Method::Private::Unqualified.say	R	Mu.say										
X::Method::Private::Unqualified.ACCEPTS	R	Mu.ACCEPTS										
X::Method::Private::Unqualified.WHICH	R	Mu.WHICH										
X::Method::Private::Unqualified.WHERE	R	Mu.WHERE										
X::Method::Private::Unqualified.WHY	R	Mu.WHY										
X::Mixin::NotComposable	A			Perl 6 X::Mixin::NotComposable							<pre><code>class X::Mixin::NotComposable is Exception { }</code></pre>Thrown when a mixin with infix does or but is done with a composer that cannot be used for mixin.	http://doc.perl6.org/type/X%3A%3AMixin%3A%3ANotComposable
X::Mixin::NotComposable.target	A			Perl 6 X::Mixin::NotComposable							<pre><code>method target()</code></pre>Returns the target of the failed mixin operation.	http://doc.perl6.org/type/X%3A%3AMixin%3A%3ANotComposable#target
target	D								*[[X::Mixin::NotComposable.target]], returns the target of the failed mixin operation.\n*[[X::Numeric::Real.target]], returns the type to which the coercion was attempted.			
X::Mixin::NotComposable.rolish	A			Perl 6 X::Mixin::NotComposable							<pre><code>method rolish()</code></pre>Returns the thing that could not act as a role for mixing it in	http://doc.perl6.org/type/X%3A%3AMixin%3A%3ANotComposable#rolish
rolish	R	X::Mixin::NotComposable.rolish										
X::Mixin::NotComposable.message	R	Exception.message										
X::Mixin::NotComposable.backtrace	R	Exception.backtrace										
X::Mixin::NotComposable.throw	R	Exception.throw										
X::Mixin::NotComposable.rethrow	R	Exception.rethrow										
X::Mixin::NotComposable.fail	R	Exception.fail										
X::Mixin::NotComposable.gist	R	Exception.gist										
X::Mixin::NotComposable.ACCEPTS	R	Any.ACCEPTS										
X::Mixin::NotComposable.any	R	Any.any										
X::Mixin::NotComposable.all	R	Any.all										
X::Mixin::NotComposable.one	R	Any.one										
X::Mixin::NotComposable.none	R	Any.none										
X::Mixin::NotComposable.list	R	Any.list										
X::Mixin::NotComposable.flat	R	Any.flat										
X::Mixin::NotComposable.eager	R	Any.eager										
X::Mixin::NotComposable.elems	R	Any.elems										
X::Mixin::NotComposable.end	R	Any.end										
X::Mixin::NotComposable.Str	R	Mu.Str										
X::Mixin::NotComposable.clone	R	Mu.clone										
X::Mixin::NotComposable.new	R	Mu.new										
X::Mixin::NotComposable.bless	R	Mu.bless										
X::Mixin::NotComposable.CREATE	R	Mu.CREATE										
X::Mixin::NotComposable.print	R	Mu.print										
X::Mixin::NotComposable.say	R	Mu.say										
X::Mixin::NotComposable.ACCEPTS	R	Mu.ACCEPTS										
X::Mixin::NotComposable.WHICH	R	Mu.WHICH										
X::Mixin::NotComposable.WHERE	R	Mu.WHERE										
X::Mixin::NotComposable.WHY	R	Mu.WHY										
X::NYI	A			Perl 6 X::NYI							<pre><code>class X::NYI is Exception { }</code></pre>Error class for unimplemented features.	http://doc.perl6.org/type/X%3A%3ANYI
X::NYI.features	A			Perl 6 X::NYI							Returns a Str describing the missing feature.	http://doc.perl6.org/type/X%3A%3ANYI#features
features	R	X::NYI.features										
X::NYI.message	R	Exception.message										
X::NYI.backtrace	R	Exception.backtrace										
X::NYI.throw	R	Exception.throw										
X::NYI.rethrow	R	Exception.rethrow										
X::NYI.fail	R	Exception.fail										
X::NYI.gist	R	Exception.gist										
X::NYI.ACCEPTS	R	Any.ACCEPTS										
X::NYI.any	R	Any.any										
X::NYI.all	R	Any.all										
X::NYI.one	R	Any.one										
X::NYI.none	R	Any.none										
X::NYI.list	R	Any.list										
X::NYI.flat	R	Any.flat										
X::NYI.eager	R	Any.eager										
X::NYI.elems	R	Any.elems										
X::NYI.end	R	Any.end										
X::NYI.Str	R	Mu.Str										
X::NYI.clone	R	Mu.clone										
X::NYI.new	R	Mu.new										
X::NYI.bless	R	Mu.bless										
X::NYI.CREATE	R	Mu.CREATE										
X::NYI.print	R	Mu.print										
X::NYI.say	R	Mu.say										
X::NYI.ACCEPTS	R	Mu.ACCEPTS										
X::NYI.WHICH	R	Mu.WHICH										
X::NYI.WHERE	R	Mu.WHERE										
X::NYI.WHY	R	Mu.WHY										
X::NoDispatcher	A			Perl 6 X::NoDispatcher							<pre><code>class X::NoDispatcher is Exception { }</code></pre>Error thrown when a redispatcher like nextsame is called without being in the dynamic scope of a call that could possible redispatch.	http://doc.perl6.org/type/X%3A%3ANoDispatcher
X::NoDispatcher.redispatcher	A			Perl 6 X::NoDispatcher							<pre><code>method redispatcher() returns Str:D</code></pre>Returns the name of the redispatcher function that did not succeed.	http://doc.perl6.org/type/X%3A%3ANoDispatcher#redispatcher
redispatcher	R	X::NoDispatcher.redispatcher										
X::NoDispatcher.message	R	Exception.message										
X::NoDispatcher.backtrace	R	Exception.backtrace										
X::NoDispatcher.throw	R	Exception.throw										
X::NoDispatcher.rethrow	R	Exception.rethrow										
X::NoDispatcher.fail	R	Exception.fail										
X::NoDispatcher.gist	R	Exception.gist										
X::NoDispatcher.ACCEPTS	R	Any.ACCEPTS										
X::NoDispatcher.any	R	Any.any										
X::NoDispatcher.all	R	Any.all										
X::NoDispatcher.one	R	Any.one										
X::NoDispatcher.none	R	Any.none										
X::NoDispatcher.list	R	Any.list										
X::NoDispatcher.flat	R	Any.flat										
X::NoDispatcher.eager	R	Any.eager										
X::NoDispatcher.elems	R	Any.elems										
X::NoDispatcher.end	R	Any.end										
X::NoDispatcher.Str	R	Mu.Str										
X::NoDispatcher.clone	R	Mu.clone										
X::NoDispatcher.new	R	Mu.new										
X::NoDispatcher.bless	R	Mu.bless										
X::NoDispatcher.CREATE	R	Mu.CREATE										
X::NoDispatcher.print	R	Mu.print										
X::NoDispatcher.say	R	Mu.say										
X::NoDispatcher.ACCEPTS	R	Mu.ACCEPTS										
X::NoDispatcher.WHICH	R	Mu.WHICH										
X::NoDispatcher.WHERE	R	Mu.WHERE										
X::NoDispatcher.WHY	R	Mu.WHY										
X::Numeric::Real	A			Perl 6 X::Numeric::Real							<pre><code>class X::Numeric::Real is Exception { }</code></pre>Occurs when an attempt to coerce a Numeric to a Real, Num, Int or Rat fails (due to a number with a nonzero imaginary part, for instance).	http://doc.perl6.org/type/X%3A%3ANumeric%3A%3AReal
X::Numeric::Real.source	A			Perl 6 X::Numeric::Real							<pre><code>method source() returns Numeric:D</code></pre>Returns the number that failed to coerce to Real.	http://doc.perl6.org/type/X%3A%3ANumeric%3A%3AReal#source
source	D								*[[X::Numeric::Real.source]], returns the number that failed to coerce to Real.\n*[[X::Str::Numeric.source]], returns the string that was attempted to convert to a number			
X::Numeric::Real.target	A			Perl 6 X::Numeric::Real							<pre><code>method target()</code></pre>Returns the type to which the coercion was attempted.	http://doc.perl6.org/type/X%3A%3ANumeric%3A%3AReal#target
X::Numeric::Real.reason	A			Perl 6 X::Numeric::Real							<pre><code>method reason() returns Str:D</code></pre>Returns the reason that the conversion failed.	http://doc.perl6.org/type/X%3A%3ANumeric%3A%3AReal#reason
reason	D								*[[X::Numeric::Real.reason]], returns the reason that the conversion failed.\n*[[X::Str::Numeric.reason]], verbal description of the reason why the conversion failed.			
X::Numeric::Real.message	R	Exception.message										
X::Numeric::Real.backtrace	R	Exception.backtrace										
X::Numeric::Real.throw	R	Exception.throw										
X::Numeric::Real.rethrow	R	Exception.rethrow										
X::Numeric::Real.fail	R	Exception.fail										
X::Numeric::Real.gist	R	Exception.gist										
X::Numeric::Real.ACCEPTS	R	Any.ACCEPTS										
X::Numeric::Real.any	R	Any.any										
X::Numeric::Real.all	R	Any.all										
X::Numeric::Real.one	R	Any.one										
X::Numeric::Real.none	R	Any.none										
X::Numeric::Real.list	R	Any.list										
X::Numeric::Real.flat	R	Any.flat										
X::Numeric::Real.eager	R	Any.eager										
X::Numeric::Real.elems	R	Any.elems										
X::Numeric::Real.end	R	Any.end										
X::Numeric::Real.Str	R	Mu.Str										
X::Numeric::Real.clone	R	Mu.clone										
X::Numeric::Real.new	R	Mu.new										
X::Numeric::Real.bless	R	Mu.bless										
X::Numeric::Real.CREATE	R	Mu.CREATE										
X::Numeric::Real.print	R	Mu.print										
X::Numeric::Real.say	R	Mu.say										
X::Numeric::Real.ACCEPTS	R	Mu.ACCEPTS										
X::Numeric::Real.WHICH	R	Mu.WHICH										
X::Numeric::Real.WHERE	R	Mu.WHERE										
X::Numeric::Real.WHY	R	Mu.WHY										
X::OS	A			Perl 6 X::OS							<pre><code>role X::OS { has $.os-error }</code></pre>Common role for all errors that are triggered by some error reported by the operating system (failed IO, system calls, fork, memory allocation).	http://doc.perl6.org/type/X%3A%3AOS
X::OS.os-error	A			Perl 6 X::OS							<pre><code>method os-error() returns Str:D</code></pre>Returns the error as reported by the operating system.	http://doc.perl6.org/type/X%3A%3AOS#os-error
os-error	R	X::OS.os-error										
X::Obsolete	A			Perl 6 X::Obsolete							<pre><code>class X::Obsolete does X::Comp { }</code></pre>Syntax error thrown when obsolete (mostly Perl 5) syntax is detected.	http://doc.perl6.org/type/X%3A%3AObsolete
X::Obsolete.old	A			Perl 6 X::Obsolete							<pre><code>method old() returns Str:D</code></pre>Returns a textual description of the obsolete syntax construct	http://doc.perl6.org/type/X%3A%3AObsolete#old
old	R	X::Obsolete.old										
X::Obsolete.replacement	A			Perl 6 X::Obsolete							<pre><code>method replacement() returns Str:D</code></pre>Describes what to use instead of the obsolete syntax.	http://doc.perl6.org/type/X%3A%3AObsolete#replacement
replacement	R	X::Obsolete.replacement										
X::Obsolete.when	A			Perl 6 X::Obsolete							<pre><code>method when() returns Str:D</code></pre>Returns a string describing the state of the language (usually " in Perl 6").	http://doc.perl6.org/type/X%3A%3AObsolete#when
when	R	X::Obsolete.when										
X::Obsolete.filename	R	X::Comp.filename										
X::Obsolete.line	R	X::Comp.line										
X::Obsolete.column	R	X::Comp.column										
X::Obsolete.message	R	Exception.message										
X::Obsolete.backtrace	R	Exception.backtrace										
X::Obsolete.throw	R	Exception.throw										
X::Obsolete.rethrow	R	Exception.rethrow										
X::Obsolete.fail	R	Exception.fail										
X::Obsolete.gist	R	Exception.gist										
X::Obsolete.ACCEPTS	R	Any.ACCEPTS										
X::Obsolete.any	R	Any.any										
X::Obsolete.all	R	Any.all										
X::Obsolete.one	R	Any.one										
X::Obsolete.none	R	Any.none										
X::Obsolete.list	R	Any.list										
X::Obsolete.flat	R	Any.flat										
X::Obsolete.eager	R	Any.eager										
X::Obsolete.elems	R	Any.elems										
X::Obsolete.end	R	Any.end										
X::Obsolete.Str	R	Mu.Str										
X::Obsolete.clone	R	Mu.clone										
X::Obsolete.new	R	Mu.new										
X::Obsolete.bless	R	Mu.bless										
X::Obsolete.CREATE	R	Mu.CREATE										
X::Obsolete.print	R	Mu.print										
X::Obsolete.say	R	Mu.say										
X::Obsolete.ACCEPTS	R	Mu.ACCEPTS										
X::Obsolete.WHICH	R	Mu.WHICH										
X::Obsolete.WHERE	R	Mu.WHERE										
X::Obsolete.WHY	R	Mu.WHY										
X::OutOfRange	A			Perl 6 X::OutOfRange							<pre><code>class X::OutOfRange is Exception { }</code></pre>General error when something (for example an array index) is out of an allowed range.	http://doc.perl6.org/type/X%3A%3AOutOfRange
X::OutOfRange.what	A			Perl 6 X::OutOfRange							<pre><code>method what() returns Str:D</code></pre>Verbal description of the thing that was out of range (e.g. "array index", "month").	http://doc.perl6.org/type/X%3A%3AOutOfRange#what
what	D								*[[X::OutOfRange.what]], verbal description of the thing that was out of range (e.g. \n*[[X::Redeclaration.what]], returns the kind of symbol that was redeclared.\n*[[X::Syntax::Malformed.what]], returns a description of the thing that was being parsed.\n*[[X::Syntax::Missing.what]], returns a string description of the missing syntax element.\n*[[X::Syntax::Variable::Numeric.what]], returns a verbal description of the kind of symbol that was declared (variable, parameter, attribute).\n*[[X::Undeclared.what]], returns the kind of symbol that was not declared (for example variable, type, routine).			
X::OutOfRange.got	A			Perl 6 X::OutOfRange							<pre><code>method got()</code></pre>Returns the object that was considered out of range (often an integer)	http://doc.perl6.org/type/X%3A%3AOutOfRange#got
got	D								*[[X::OutOfRange.got]], returns the object that was considered out of range (often an integer)\n*[[X::TypeCheck.got]], returns the object that failed to type check			
X::OutOfRange.range	A			Perl 6 X::OutOfRange							<pre><code>method range returns Range:D</code></pre>Returns a Range object describing the permissible range for the object returned from .got.	http://doc.perl6.org/type/X%3A%3AOutOfRange#range
range	R	X::OutOfRange.range										
X::OutOfRange.comment	A			Perl 6 X::OutOfRange							<pre><code>method comment returns Str</code></pre>Returns an additional comment that is included in the error message.	http://doc.perl6.org/type/X%3A%3AOutOfRange#comment
comment	R	X::OutOfRange.comment										
X::OutOfRange.message	R	Exception.message										
X::OutOfRange.backtrace	R	Exception.backtrace										
X::OutOfRange.throw	R	Exception.throw										
X::OutOfRange.rethrow	R	Exception.rethrow										
X::OutOfRange.fail	R	Exception.fail										
X::OutOfRange.gist	R	Exception.gist										
X::OutOfRange.ACCEPTS	R	Any.ACCEPTS										
X::OutOfRange.any	R	Any.any										
X::OutOfRange.all	R	Any.all										
X::OutOfRange.one	R	Any.one										
X::OutOfRange.none	R	Any.none										
X::OutOfRange.list	R	Any.list										
X::OutOfRange.flat	R	Any.flat										
X::OutOfRange.eager	R	Any.eager										
X::OutOfRange.elems	R	Any.elems										
X::OutOfRange.end	R	Any.end										
X::OutOfRange.Str	R	Mu.Str										
X::OutOfRange.clone	R	Mu.clone										
X::OutOfRange.new	R	Mu.new										
X::OutOfRange.bless	R	Mu.bless										
X::OutOfRange.CREATE	R	Mu.CREATE										
X::OutOfRange.print	R	Mu.print										
X::OutOfRange.say	R	Mu.say										
X::OutOfRange.ACCEPTS	R	Mu.ACCEPTS										
X::OutOfRange.WHICH	R	Mu.WHICH										
X::OutOfRange.WHERE	R	Mu.WHERE										
X::OutOfRange.WHY	R	Mu.WHY										
X::Package::Stubbed	A			Perl 6 X::Package::Stubbed							<pre><code>class X::Package::Stubbed does X::Comp { }</code></pre>Thrown at CHECK time when there are packages stubbed but not later defined.	http://doc.perl6.org/type/X%3A%3APackage%3A%3AStubbed
X::Package::Stubbed.packages	A			Perl 6 X::Package::Stubbed							<pre><code>method packages() returns Positional:D</code></pre>Returns a list of packages that were stubbed but not defined.	http://doc.perl6.org/type/X%3A%3APackage%3A%3AStubbed#packages
packages	R	X::Package::Stubbed.packages										
X::Package::Stubbed.filename	R	X::Comp.filename										
X::Package::Stubbed.line	R	X::Comp.line										
X::Package::Stubbed.column	R	X::Comp.column										
X::Package::Stubbed.message	R	Exception.message										
X::Package::Stubbed.backtrace	R	Exception.backtrace										
X::Package::Stubbed.throw	R	Exception.throw										
X::Package::Stubbed.rethrow	R	Exception.rethrow										
X::Package::Stubbed.fail	R	Exception.fail										
X::Package::Stubbed.gist	R	Exception.gist										
X::Package::Stubbed.ACCEPTS	R	Any.ACCEPTS										
X::Package::Stubbed.any	R	Any.any										
X::Package::Stubbed.all	R	Any.all										
X::Package::Stubbed.one	R	Any.one										
X::Package::Stubbed.none	R	Any.none										
X::Package::Stubbed.list	R	Any.list										
X::Package::Stubbed.flat	R	Any.flat										
X::Package::Stubbed.eager	R	Any.eager										
X::Package::Stubbed.elems	R	Any.elems										
X::Package::Stubbed.end	R	Any.end										
X::Package::Stubbed.Str	R	Mu.Str										
X::Package::Stubbed.clone	R	Mu.clone										
X::Package::Stubbed.new	R	Mu.new										
X::Package::Stubbed.bless	R	Mu.bless										
X::Package::Stubbed.CREATE	R	Mu.CREATE										
X::Package::Stubbed.print	R	Mu.print										
X::Package::Stubbed.say	R	Mu.say										
X::Package::Stubbed.ACCEPTS	R	Mu.ACCEPTS										
X::Package::Stubbed.WHICH	R	Mu.WHICH										
X::Package::Stubbed.WHERE	R	Mu.WHERE										
X::Package::Stubbed.WHY	R	Mu.WHY										
X::Parameter::Default	A			Perl 6 X::Parameter::Default							<pre><code>class X::Parameter::Default does X::Comp { }</code></pre>Compile-time error thrown when a parameter in a signature has default value, but isn't allowed to have one.	http://doc.perl6.org/type/X%3A%3AParameter%3A%3ADefault
X::Parameter::Default.how	A			Perl 6 X::Parameter::Default							Returns a string describing how the parameter is qualified that makes it disallow default values, for example "slurpy" or "mandatory".	http://doc.perl6.org/type/X%3A%3AParameter%3A%3ADefault#how
how	R	X::Parameter::Default.how										
X::Parameter::Default.parameter	A			Perl 6 X::Parameter::Default							Returns the parameter name	http://doc.perl6.org/type/X%3A%3AParameter%3A%3ADefault#parameter
parameter	D								*[[X::Parameter::Default.parameter]], returns the parameter name\n*[[X::Parameter::MultipleTypeConstraints.parameter]], returns the name of the offensive parameter.\n*[[X::Parameter::Placeholder.parameter]], the text of the offensive parameter declaration ($:param in the example above).\n*[[X::Parameter::Twigil.parameter]], the name of the offensive parameter ($=foo in the example above)\n*[[X::Parameter::WrongOrder.parameter]], returns the name of the (first) misplaced parameter			
X::Parameter::Default.filename	R	X::Comp.filename										
X::Parameter::Default.line	R	X::Comp.line										
X::Parameter::Default.column	R	X::Comp.column										
X::Parameter::Default.message	R	Exception.message										
X::Parameter::Default.backtrace	R	Exception.backtrace										
X::Parameter::Default.throw	R	Exception.throw										
X::Parameter::Default.rethrow	R	Exception.rethrow										
X::Parameter::Default.fail	R	Exception.fail										
X::Parameter::Default.gist	R	Exception.gist										
X::Parameter::Default.ACCEPTS	R	Any.ACCEPTS										
X::Parameter::Default.any	R	Any.any										
X::Parameter::Default.all	R	Any.all										
X::Parameter::Default.one	R	Any.one										
X::Parameter::Default.none	R	Any.none										
X::Parameter::Default.list	R	Any.list										
X::Parameter::Default.flat	R	Any.flat										
X::Parameter::Default.eager	R	Any.eager										
X::Parameter::Default.elems	R	Any.elems										
X::Parameter::Default.end	R	Any.end										
X::Parameter::Default.Str	R	Mu.Str										
X::Parameter::Default.clone	R	Mu.clone										
X::Parameter::Default.new	R	Mu.new										
X::Parameter::Default.bless	R	Mu.bless										
X::Parameter::Default.CREATE	R	Mu.CREATE										
X::Parameter::Default.print	R	Mu.print										
X::Parameter::Default.say	R	Mu.say										
X::Parameter::Default.ACCEPTS	R	Mu.ACCEPTS										
X::Parameter::Default.WHICH	R	Mu.WHICH										
X::Parameter::Default.WHERE	R	Mu.WHERE										
X::Parameter::Default.WHY	R	Mu.WHY										
X::Parameter::MultipleTypeConstraints	A			Perl 6 X::Parameter::MultipleTypeConstraints							<pre><code>class X::Parameter::MultipleTypeConstraints does X::Comp { }</code></pre>Compile time error thrown when a parameter has multiple type constraints.	http://doc.perl6.org/type/X%3A%3AParameter%3A%3AMultipleTypeConstraints
X::Parameter::MultipleTypeConstraints.parameter	A			Perl 6 X::Parameter::MultipleTypeConstraints							Returns the name of the offensive parameter.	http://doc.perl6.org/type/X%3A%3AParameter%3A%3AMultipleTypeConstraints#parameter
X::Parameter::MultipleTypeConstraints.filename	R	X::Comp.filename										
X::Parameter::MultipleTypeConstraints.line	R	X::Comp.line										
X::Parameter::MultipleTypeConstraints.column	R	X::Comp.column										
X::Parameter::MultipleTypeConstraints.message	R	Exception.message										
X::Parameter::MultipleTypeConstraints.backtrace	R	Exception.backtrace										
X::Parameter::MultipleTypeConstraints.throw	R	Exception.throw										
X::Parameter::MultipleTypeConstraints.rethrow	R	Exception.rethrow										
X::Parameter::MultipleTypeConstraints.fail	R	Exception.fail										
X::Parameter::MultipleTypeConstraints.gist	R	Exception.gist										
X::Parameter::MultipleTypeConstraints.ACCEPTS	R	Any.ACCEPTS										
X::Parameter::MultipleTypeConstraints.any	R	Any.any										
X::Parameter::MultipleTypeConstraints.all	R	Any.all										
X::Parameter::MultipleTypeConstraints.one	R	Any.one										
X::Parameter::MultipleTypeConstraints.none	R	Any.none										
X::Parameter::MultipleTypeConstraints.list	R	Any.list										
X::Parameter::MultipleTypeConstraints.flat	R	Any.flat										
X::Parameter::MultipleTypeConstraints.eager	R	Any.eager										
X::Parameter::MultipleTypeConstraints.elems	R	Any.elems										
X::Parameter::MultipleTypeConstraints.end	R	Any.end										
X::Parameter::MultipleTypeConstraints.Str	R	Mu.Str										
X::Parameter::MultipleTypeConstraints.clone	R	Mu.clone										
X::Parameter::MultipleTypeConstraints.new	R	Mu.new										
X::Parameter::MultipleTypeConstraints.bless	R	Mu.bless										
X::Parameter::MultipleTypeConstraints.CREATE	R	Mu.CREATE										
X::Parameter::MultipleTypeConstraints.print	R	Mu.print										
X::Parameter::MultipleTypeConstraints.say	R	Mu.say										
X::Parameter::MultipleTypeConstraints.ACCEPTS	R	Mu.ACCEPTS										
X::Parameter::MultipleTypeConstraints.WHICH	R	Mu.WHICH										
X::Parameter::MultipleTypeConstraints.WHERE	R	Mu.WHERE										
X::Parameter::MultipleTypeConstraints.WHY	R	Mu.WHY										
X::Parameter::Placeholder	A			Perl 6 X::Parameter::Placeholder							<pre><code>class X::Parameter::Placeholder does X::Comp</code></pre>Thrown when a placeholder parameter is used inside a signature where a normal parameter is expected.	http://doc.perl6.org/type/X%3A%3AParameter%3A%3APlaceholder
X::Parameter::Placeholder.parameter	A			Perl 6 X::Parameter::Placeholder							The text of the offensive parameter declaration ($:param in the example above).	http://doc.perl6.org/type/X%3A%3AParameter%3A%3APlaceholder#parameter
X::Parameter::Placeholder.right	A			Perl 6 X::Parameter::Placeholder							Suggestion on how to write the parameter declaration instead (:$param in the example above).	http://doc.perl6.org/type/X%3A%3AParameter%3A%3APlaceholder#right
right	R	X::Parameter::Placeholder.right										
X::Parameter::Placeholder.filename	R	X::Comp.filename										
X::Parameter::Placeholder.line	R	X::Comp.line										
X::Parameter::Placeholder.column	R	X::Comp.column										
X::Parameter::Placeholder.message	R	Exception.message										
X::Parameter::Placeholder.backtrace	R	Exception.backtrace										
X::Parameter::Placeholder.throw	R	Exception.throw										
X::Parameter::Placeholder.rethrow	R	Exception.rethrow										
X::Parameter::Placeholder.fail	R	Exception.fail										
X::Parameter::Placeholder.gist	R	Exception.gist										
X::Parameter::Placeholder.ACCEPTS	R	Any.ACCEPTS										
X::Parameter::Placeholder.any	R	Any.any										
X::Parameter::Placeholder.all	R	Any.all										
X::Parameter::Placeholder.one	R	Any.one										
X::Parameter::Placeholder.none	R	Any.none										
X::Parameter::Placeholder.list	R	Any.list										
X::Parameter::Placeholder.flat	R	Any.flat										
X::Parameter::Placeholder.eager	R	Any.eager										
X::Parameter::Placeholder.elems	R	Any.elems										
X::Parameter::Placeholder.end	R	Any.end										
X::Parameter::Placeholder.Str	R	Mu.Str										
X::Parameter::Placeholder.clone	R	Mu.clone										
X::Parameter::Placeholder.new	R	Mu.new										
X::Parameter::Placeholder.bless	R	Mu.bless										
X::Parameter::Placeholder.CREATE	R	Mu.CREATE										
X::Parameter::Placeholder.print	R	Mu.print										
X::Parameter::Placeholder.say	R	Mu.say										
X::Parameter::Placeholder.ACCEPTS	R	Mu.ACCEPTS										
X::Parameter::Placeholder.WHICH	R	Mu.WHICH										
X::Parameter::Placeholder.WHERE	R	Mu.WHERE										
X::Parameter::Placeholder.WHY	R	Mu.WHY										
X::Parameter::Twigil	A			Perl 6 X::Parameter::Twigil							<pre><code>class X::Parameter::Twigil does X::Comp</code></pre>Thrown when a parameter in a signature has a twigil that it may not have.	http://doc.perl6.org/type/X%3A%3AParameter%3A%3ATwigil
X::Parameter::Twigil.parameter	A			Perl 6 X::Parameter::Twigil							The name of the offensive parameter ($=foo in the example above)	http://doc.perl6.org/type/X%3A%3AParameter%3A%3ATwigil#parameter
X::Parameter::Twigil.twigil	A			Perl 6 X::Parameter::Twigil							The illegally used twigil.	http://doc.perl6.org/type/X%3A%3AParameter%3A%3ATwigil#twigil
twigil	D								*[[X::Parameter::Twigil.twigil]], the illegally used twigil.\n*[[X::Syntax::Variable::Twigil.twigil]], returns the twigil that was illegally used			
X::Parameter::Twigil.filename	R	X::Comp.filename										
X::Parameter::Twigil.line	R	X::Comp.line										
X::Parameter::Twigil.column	R	X::Comp.column										
X::Parameter::Twigil.message	R	Exception.message										
X::Parameter::Twigil.backtrace	R	Exception.backtrace										
X::Parameter::Twigil.throw	R	Exception.throw										
X::Parameter::Twigil.rethrow	R	Exception.rethrow										
X::Parameter::Twigil.fail	R	Exception.fail										
X::Parameter::Twigil.gist	R	Exception.gist										
X::Parameter::Twigil.ACCEPTS	R	Any.ACCEPTS										
X::Parameter::Twigil.any	R	Any.any										
X::Parameter::Twigil.all	R	Any.all										
X::Parameter::Twigil.one	R	Any.one										
X::Parameter::Twigil.none	R	Any.none										
X::Parameter::Twigil.list	R	Any.list										
X::Parameter::Twigil.flat	R	Any.flat										
X::Parameter::Twigil.eager	R	Any.eager										
X::Parameter::Twigil.elems	R	Any.elems										
X::Parameter::Twigil.end	R	Any.end										
X::Parameter::Twigil.Str	R	Mu.Str										
X::Parameter::Twigil.clone	R	Mu.clone										
X::Parameter::Twigil.new	R	Mu.new										
X::Parameter::Twigil.bless	R	Mu.bless										
X::Parameter::Twigil.CREATE	R	Mu.CREATE										
X::Parameter::Twigil.print	R	Mu.print										
X::Parameter::Twigil.say	R	Mu.say										
X::Parameter::Twigil.ACCEPTS	R	Mu.ACCEPTS										
X::Parameter::Twigil.WHICH	R	Mu.WHICH										
X::Parameter::Twigil.WHERE	R	Mu.WHERE										
X::Parameter::Twigil.WHY	R	Mu.WHY										
X::Parameter::WrongOrder	A			Perl 6 X::Parameter::WrongOrder							<pre><code>class X::Parameter::WrongOrder does X::Comp</code></pre>Compile time error that is thrown when parameters in a signature in the wrong order (for example if an optional parameter comes before a mandatory parameter).	http://doc.perl6.org/type/X%3A%3AParameter%3A%3AWrongOrder
X::Parameter::WrongOrder.misplaced	A			Perl 6 X::Parameter::WrongOrder							Returns the kind of misplaced parameter (for example "mandatory", "positional").	http://doc.perl6.org/type/X%3A%3AParameter%3A%3AWrongOrder#misplaced
misplaced	R	X::Parameter::WrongOrder.misplaced										
X::Parameter::WrongOrder.parameter	A			Perl 6 X::Parameter::WrongOrder							Returns the name of the (first) misplaced parameter	http://doc.perl6.org/type/X%3A%3AParameter%3A%3AWrongOrder#parameter
X::Parameter::WrongOrder.after	A			Perl 6 X::Parameter::WrongOrder							Returns a string describing other parameters after which the current parameter was illegally placed (for example "variadic", "positional" or "optional").	http://doc.perl6.org/type/X%3A%3AParameter%3A%3AWrongOrder#after
after	R	X::Parameter::WrongOrder.after										
X::Parameter::WrongOrder.filename	R	X::Comp.filename										
X::Parameter::WrongOrder.line	R	X::Comp.line										
X::Parameter::WrongOrder.column	R	X::Comp.column										
X::Parameter::WrongOrder.message	R	Exception.message										
X::Parameter::WrongOrder.backtrace	R	Exception.backtrace										
X::Parameter::WrongOrder.throw	R	Exception.throw										
X::Parameter::WrongOrder.rethrow	R	Exception.rethrow										
X::Parameter::WrongOrder.fail	R	Exception.fail										
X::Parameter::WrongOrder.gist	R	Exception.gist										
X::Parameter::WrongOrder.ACCEPTS	R	Any.ACCEPTS										
X::Parameter::WrongOrder.any	R	Any.any										
X::Parameter::WrongOrder.all	R	Any.all										
X::Parameter::WrongOrder.one	R	Any.one										
X::Parameter::WrongOrder.none	R	Any.none										
X::Parameter::WrongOrder.list	R	Any.list										
X::Parameter::WrongOrder.flat	R	Any.flat										
X::Parameter::WrongOrder.eager	R	Any.eager										
X::Parameter::WrongOrder.elems	R	Any.elems										
X::Parameter::WrongOrder.end	R	Any.end										
X::Parameter::WrongOrder.Str	R	Mu.Str										
X::Parameter::WrongOrder.clone	R	Mu.clone										
X::Parameter::WrongOrder.new	R	Mu.new										
X::Parameter::WrongOrder.bless	R	Mu.bless										
X::Parameter::WrongOrder.CREATE	R	Mu.CREATE										
X::Parameter::WrongOrder.print	R	Mu.print										
X::Parameter::WrongOrder.say	R	Mu.say										
X::Parameter::WrongOrder.ACCEPTS	R	Mu.ACCEPTS										
X::Parameter::WrongOrder.WHICH	R	Mu.WHICH										
X::Parameter::WrongOrder.WHERE	R	Mu.WHERE										
X::Parameter::WrongOrder.WHY	R	Mu.WHY										
X::Phaser::Multiple	A			Perl 6 X::Phaser::Multiple							<pre><code>class X::Phaser::Multiple does X::Comp</code></pre>Thrown when multiple phasers of the same type occur in a block, but only one is allowed (for example CATCH or CONTROL).	http://doc.perl6.org/type/X%3A%3APhaser%3A%3AMultiple
X::Phaser::Multiple.block	A			Perl 6 X::Phaser::Multiple							Returns the name of the phaser that occurred more than once.	http://doc.perl6.org/type/X%3A%3APhaser%3A%3AMultiple#block
block	R	X::Phaser::Multiple.block										
X::Phaser::Multiple.filename	R	X::Comp.filename										
X::Phaser::Multiple.line	R	X::Comp.line										
X::Phaser::Multiple.column	R	X::Comp.column										
X::Phaser::Multiple.message	R	Exception.message										
X::Phaser::Multiple.backtrace	R	Exception.backtrace										
X::Phaser::Multiple.throw	R	Exception.throw										
X::Phaser::Multiple.rethrow	R	Exception.rethrow										
X::Phaser::Multiple.fail	R	Exception.fail										
X::Phaser::Multiple.gist	R	Exception.gist										
X::Phaser::Multiple.ACCEPTS	R	Any.ACCEPTS										
X::Phaser::Multiple.any	R	Any.any										
X::Phaser::Multiple.all	R	Any.all										
X::Phaser::Multiple.one	R	Any.one										
X::Phaser::Multiple.none	R	Any.none										
X::Phaser::Multiple.list	R	Any.list										
X::Phaser::Multiple.flat	R	Any.flat										
X::Phaser::Multiple.eager	R	Any.eager										
X::Phaser::Multiple.elems	R	Any.elems										
X::Phaser::Multiple.end	R	Any.end										
X::Phaser::Multiple.Str	R	Mu.Str										
X::Phaser::Multiple.clone	R	Mu.clone										
X::Phaser::Multiple.new	R	Mu.new										
X::Phaser::Multiple.bless	R	Mu.bless										
X::Phaser::Multiple.CREATE	R	Mu.CREATE										
X::Phaser::Multiple.print	R	Mu.print										
X::Phaser::Multiple.say	R	Mu.say										
X::Phaser::Multiple.ACCEPTS	R	Mu.ACCEPTS										
X::Phaser::Multiple.WHICH	R	Mu.WHICH										
X::Phaser::Multiple.WHERE	R	Mu.WHERE										
X::Phaser::Multiple.WHY	R	Mu.WHY										
X::Phaser::PrePost	A			Perl 6 X::Phaser::PrePost							<pre><code>class X::Phaser::PrePost is Exception { }</code></pre>Thrown when the condition inside a PRE or POST phaser evaluate to a false value.	http://doc.perl6.org/type/X%3A%3APhaser%3A%3APrePost
X::Phaser::PrePost.phaser	A			Perl 6 X::Phaser::PrePost							<pre><code>method phaser() returns Str:D</code></pre>Returns the name of the failed phaser, "PRE" or "POST".	http://doc.perl6.org/type/X%3A%3APhaser%3A%3APrePost#phaser
phaser	R	X::Phaser::PrePost.phaser										
X::Phaser::PrePost.condition	A			Perl 6 X::Phaser::PrePost							<pre><code>method condition() returns Str:D</code></pre>Returns the part of the source code that describes the phaser condition.	http://doc.perl6.org/type/X%3A%3APhaser%3A%3APrePost#condition
X::Phaser::PrePost.message	R	Exception.message										
X::Phaser::PrePost.backtrace	R	Exception.backtrace										
X::Phaser::PrePost.throw	R	Exception.throw										
X::Phaser::PrePost.rethrow	R	Exception.rethrow										
X::Phaser::PrePost.fail	R	Exception.fail										
X::Phaser::PrePost.gist	R	Exception.gist										
X::Phaser::PrePost.ACCEPTS	R	Any.ACCEPTS										
X::Phaser::PrePost.any	R	Any.any										
X::Phaser::PrePost.all	R	Any.all										
X::Phaser::PrePost.one	R	Any.one										
X::Phaser::PrePost.none	R	Any.none										
X::Phaser::PrePost.list	R	Any.list										
X::Phaser::PrePost.flat	R	Any.flat										
X::Phaser::PrePost.eager	R	Any.eager										
X::Phaser::PrePost.elems	R	Any.elems										
X::Phaser::PrePost.end	R	Any.end										
X::Phaser::PrePost.Str	R	Mu.Str										
X::Phaser::PrePost.clone	R	Mu.clone										
X::Phaser::PrePost.new	R	Mu.new										
X::Phaser::PrePost.bless	R	Mu.bless										
X::Phaser::PrePost.CREATE	R	Mu.CREATE										
X::Phaser::PrePost.print	R	Mu.print										
X::Phaser::PrePost.say	R	Mu.say										
X::Phaser::PrePost.ACCEPTS	R	Mu.ACCEPTS										
X::Phaser::PrePost.WHICH	R	Mu.WHICH										
X::Phaser::PrePost.WHERE	R	Mu.WHERE										
X::Phaser::PrePost.WHY	R	Mu.WHY										
X::Placeholder::Block	A			Perl 6 X::Placeholder::Block							<pre><code>class X::Placeholder::Block does X::Comp</code></pre>Thrown when a placeholder variable is used in a block that does not allow a signature (for example class A { $^foo }.	http://doc.perl6.org/type/X%3A%3APlaceholder%3A%3ABlock
X::Placeholder::Block.placeholder	A			Perl 6 X::Placeholder::Block							Returns the name of the (first) illegally used placeholder.	http://doc.perl6.org/type/X%3A%3APlaceholder%3A%3ABlock#placeholder
placeholder	D								*[[X::Placeholder::Block.placeholder]], returns the name of the (first) illegally used placeholder.\n*[[X::Signature::Placeholder.placeholder]], returns the name of a placeholder that was used in a block that already had a signature.			
X::Placeholder::Block.filename	R	X::Comp.filename										
X::Placeholder::Block.line	R	X::Comp.line										
X::Placeholder::Block.column	R	X::Comp.column										
X::Placeholder::Block.message	R	Exception.message										
X::Placeholder::Block.backtrace	R	Exception.backtrace										
X::Placeholder::Block.throw	R	Exception.throw										
X::Placeholder::Block.rethrow	R	Exception.rethrow										
X::Placeholder::Block.fail	R	Exception.fail										
X::Placeholder::Block.gist	R	Exception.gist										
X::Placeholder::Block.ACCEPTS	R	Any.ACCEPTS										
X::Placeholder::Block.any	R	Any.any										
X::Placeholder::Block.all	R	Any.all										
X::Placeholder::Block.one	R	Any.one										
X::Placeholder::Block.none	R	Any.none										
X::Placeholder::Block.list	R	Any.list										
X::Placeholder::Block.flat	R	Any.flat										
X::Placeholder::Block.eager	R	Any.eager										
X::Placeholder::Block.elems	R	Any.elems										
X::Placeholder::Block.end	R	Any.end										
X::Placeholder::Block.Str	R	Mu.Str										
X::Placeholder::Block.clone	R	Mu.clone										
X::Placeholder::Block.new	R	Mu.new										
X::Placeholder::Block.bless	R	Mu.bless										
X::Placeholder::Block.CREATE	R	Mu.CREATE										
X::Placeholder::Block.print	R	Mu.print										
X::Placeholder::Block.say	R	Mu.say										
X::Placeholder::Block.ACCEPTS	R	Mu.ACCEPTS										
X::Placeholder::Block.WHICH	R	Mu.WHICH										
X::Placeholder::Block.WHERE	R	Mu.WHERE										
X::Placeholder::Block.WHY	R	Mu.WHY										
X::Placeholder::Mainline	A			Perl 6 X::Placeholder::Mainline							<pre><code>class X::Placeholder::Mainline is X::Placeholder::Block</code></pre>Thrown when a placeholder variable is used in the mainline, i.e. outside of any explicit block.	http://doc.perl6.org/type/X%3A%3APlaceholder%3A%3AMainline
X::Placeholder::Mainline.placeholder	R	X::Placeholder::Block.placeholder										
X::Placeholder::Mainline.filename	R	X::Comp.filename										
X::Placeholder::Mainline.line	R	X::Comp.line										
X::Placeholder::Mainline.column	R	X::Comp.column										
X::Placeholder::Mainline.message	R	Exception.message										
X::Placeholder::Mainline.backtrace	R	Exception.backtrace										
X::Placeholder::Mainline.throw	R	Exception.throw										
X::Placeholder::Mainline.rethrow	R	Exception.rethrow										
X::Placeholder::Mainline.fail	R	Exception.fail										
X::Placeholder::Mainline.gist	R	Exception.gist										
X::Placeholder::Mainline.ACCEPTS	R	Any.ACCEPTS										
X::Placeholder::Mainline.any	R	Any.any										
X::Placeholder::Mainline.all	R	Any.all										
X::Placeholder::Mainline.one	R	Any.one										
X::Placeholder::Mainline.none	R	Any.none										
X::Placeholder::Mainline.list	R	Any.list										
X::Placeholder::Mainline.flat	R	Any.flat										
X::Placeholder::Mainline.eager	R	Any.eager										
X::Placeholder::Mainline.elems	R	Any.elems										
X::Placeholder::Mainline.end	R	Any.end										
X::Placeholder::Mainline.Str	R	Mu.Str										
X::Placeholder::Mainline.clone	R	Mu.clone										
X::Placeholder::Mainline.new	R	Mu.new										
X::Placeholder::Mainline.bless	R	Mu.bless										
X::Placeholder::Mainline.CREATE	R	Mu.CREATE										
X::Placeholder::Mainline.print	R	Mu.print										
X::Placeholder::Mainline.say	R	Mu.say										
X::Placeholder::Mainline.ACCEPTS	R	Mu.ACCEPTS										
X::Placeholder::Mainline.WHICH	R	Mu.WHICH										
X::Placeholder::Mainline.WHERE	R	Mu.WHERE										
X::Placeholder::Mainline.WHY	R	Mu.WHY										
X::Pod	A			Perl 6 X::Pod							<pre><code>role X::Pod { }</code></pre>Common role for Pod related errors.	http://doc.perl6.org/type/X%3A%3APod
X::Proc::Async	A			Perl 6 X::Proc::Async							<pre><code>role X::Proc::Async is Exception { ... }</code></pre>All exceptions thrown by Proc::Async do this common role.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync
X::Proc::Async.proc	A			Perl 6 X::Proc::Async							<pre><code>method fproc(X::Proc::Async:D) returns Proc::Async</code></pre>Returns the object that threw the exception.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync#proc
proc	R	X::Proc::Async.proc										
X::Proc::Async.message	R	Exception.message										
X::Proc::Async.backtrace	R	Exception.backtrace										
X::Proc::Async.throw	R	Exception.throw										
X::Proc::Async.rethrow	R	Exception.rethrow										
X::Proc::Async.fail	R	Exception.fail										
X::Proc::Async.gist	R	Exception.gist										
X::Proc::Async.ACCEPTS	R	Any.ACCEPTS										
X::Proc::Async.any	R	Any.any										
X::Proc::Async.all	R	Any.all										
X::Proc::Async.one	R	Any.one										
X::Proc::Async.none	R	Any.none										
X::Proc::Async.list	R	Any.list										
X::Proc::Async.flat	R	Any.flat										
X::Proc::Async.eager	R	Any.eager										
X::Proc::Async.elems	R	Any.elems										
X::Proc::Async.end	R	Any.end										
X::Proc::Async.Str	R	Mu.Str										
X::Proc::Async.clone	R	Mu.clone										
X::Proc::Async.new	R	Mu.new										
X::Proc::Async.bless	R	Mu.bless										
X::Proc::Async.CREATE	R	Mu.CREATE										
X::Proc::Async.print	R	Mu.print										
X::Proc::Async.say	R	Mu.say										
X::Proc::Async.ACCEPTS	R	Mu.ACCEPTS										
X::Proc::Async.WHICH	R	Mu.WHICH										
X::Proc::Async.WHERE	R	Mu.WHERE										
X::Proc::Async.WHY	R	Mu.WHY										
X::Proc::Async::AlreadyStarted	A			Perl 6 X::Proc::Async::AlreadyStarted							<pre><code>class X::Proc::Async::AlreadyStarted is Exception { ... }</code></pre>When you call start twice on the same Proc::Async object, the second invocation will die with an X::Proc::Async::AlreadyStarted exception.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync%3A%3AAlreadyStarted
X::Proc::Async::AlreadyStarted.proc	R	X::Proc::Async.proc										
X::Proc::Async::AlreadyStarted.message	R	Exception.message										
X::Proc::Async::AlreadyStarted.backtrace	R	Exception.backtrace										
X::Proc::Async::AlreadyStarted.throw	R	Exception.throw										
X::Proc::Async::AlreadyStarted.rethrow	R	Exception.rethrow										
X::Proc::Async::AlreadyStarted.fail	R	Exception.fail										
X::Proc::Async::AlreadyStarted.gist	R	Exception.gist										
X::Proc::Async::AlreadyStarted.ACCEPTS	R	Any.ACCEPTS										
X::Proc::Async::AlreadyStarted.any	R	Any.any										
X::Proc::Async::AlreadyStarted.all	R	Any.all										
X::Proc::Async::AlreadyStarted.one	R	Any.one										
X::Proc::Async::AlreadyStarted.none	R	Any.none										
X::Proc::Async::AlreadyStarted.list	R	Any.list										
X::Proc::Async::AlreadyStarted.flat	R	Any.flat										
X::Proc::Async::AlreadyStarted.eager	R	Any.eager										
X::Proc::Async::AlreadyStarted.elems	R	Any.elems										
X::Proc::Async::AlreadyStarted.end	R	Any.end										
X::Proc::Async::AlreadyStarted.Str	R	Mu.Str										
X::Proc::Async::AlreadyStarted.clone	R	Mu.clone										
X::Proc::Async::AlreadyStarted.new	R	Mu.new										
X::Proc::Async::AlreadyStarted.bless	R	Mu.bless										
X::Proc::Async::AlreadyStarted.CREATE	R	Mu.CREATE										
X::Proc::Async::AlreadyStarted.print	R	Mu.print										
X::Proc::Async::AlreadyStarted.say	R	Mu.say										
X::Proc::Async::AlreadyStarted.ACCEPTS	R	Mu.ACCEPTS										
X::Proc::Async::AlreadyStarted.WHICH	R	Mu.WHICH										
X::Proc::Async::AlreadyStarted.WHERE	R	Mu.WHERE										
X::Proc::Async::AlreadyStarted.WHY	R	Mu.WHY										
X::Proc::Async::CharsOrBytes	A			Perl 6 X::Proc::Async::CharsOrBytes							<pre><code>class X::Proc::Async::CharsOrBytes is Exception { ... }</code></pre>A Proc::Async object allows subscription to the output or error stream either for bytes (Blob) or for text data (Str), but not for both.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync%3A%3ACharsOrBytes
X::Proc::Async::CharsOrBytes.handle	A			Perl 6 X::Proc::Async::CharsOrBytes							<pre><code>method handle(X::Proc::Async::CharsOrBytes:D:) returns Str:D</code></pre>Returns the name of the handle that was accessed both for text and for binary data, stdout or stderr.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync%3A%3ACharsOrBytes#handle
handle	D								*[[X::Proc::Async::CharsOrBytes.handle]], returns the name of the handle that was accessed both for text and for binary data, stdout or stderr.\n*[[X::Proc::Async::TapBeforeSpawn.handle]], returns the name of the handle (stdout or stderr) that was accessed after the program started.			
X::Proc::Async::CharsOrBytes.proc	R	X::Proc::Async.proc										
X::Proc::Async::CharsOrBytes.message	R	Exception.message										
X::Proc::Async::CharsOrBytes.backtrace	R	Exception.backtrace										
X::Proc::Async::CharsOrBytes.throw	R	Exception.throw										
X::Proc::Async::CharsOrBytes.rethrow	R	Exception.rethrow										
X::Proc::Async::CharsOrBytes.fail	R	Exception.fail										
X::Proc::Async::CharsOrBytes.gist	R	Exception.gist										
X::Proc::Async::CharsOrBytes.ACCEPTS	R	Any.ACCEPTS										
X::Proc::Async::CharsOrBytes.any	R	Any.any										
X::Proc::Async::CharsOrBytes.all	R	Any.all										
X::Proc::Async::CharsOrBytes.one	R	Any.one										
X::Proc::Async::CharsOrBytes.none	R	Any.none										
X::Proc::Async::CharsOrBytes.list	R	Any.list										
X::Proc::Async::CharsOrBytes.flat	R	Any.flat										
X::Proc::Async::CharsOrBytes.eager	R	Any.eager										
X::Proc::Async::CharsOrBytes.elems	R	Any.elems										
X::Proc::Async::CharsOrBytes.end	R	Any.end										
X::Proc::Async::CharsOrBytes.Str	R	Mu.Str										
X::Proc::Async::CharsOrBytes.clone	R	Mu.clone										
X::Proc::Async::CharsOrBytes.new	R	Mu.new										
X::Proc::Async::CharsOrBytes.bless	R	Mu.bless										
X::Proc::Async::CharsOrBytes.CREATE	R	Mu.CREATE										
X::Proc::Async::CharsOrBytes.print	R	Mu.print										
X::Proc::Async::CharsOrBytes.say	R	Mu.say										
X::Proc::Async::CharsOrBytes.ACCEPTS	R	Mu.ACCEPTS										
X::Proc::Async::CharsOrBytes.WHICH	R	Mu.WHICH										
X::Proc::Async::CharsOrBytes.WHERE	R	Mu.WHERE										
X::Proc::Async::CharsOrBytes.WHY	R	Mu.WHY										
X::Proc::Async::MustBeStarted	A			Perl 6 X::Proc::Async::MustBeStarted							<pre><code>class X::Proc::Async::MustBeStarted is Exception { ... }</code></pre>Several methods from Proc::Async excpect that the external program has been spawned (by calling .start on it), including say, write, print and close-stdin.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync%3A%3AMustBeStarted
X::Proc::Async::MustBeStarted.method	A			Perl 6 X::Proc::Async::MustBeStarted							<pre><code>method method(X::Proc::Async::MustBeStarted:D) returns Str:D</code></pre>Returns the name of the method that was illegally called before starting the external program.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync%3A%3AMustBeStarted#method
X::Proc::Async::MustBeStarted.proc	R	X::Proc::Async.proc										
X::Proc::Async::MustBeStarted.message	R	Exception.message										
X::Proc::Async::MustBeStarted.backtrace	R	Exception.backtrace										
X::Proc::Async::MustBeStarted.throw	R	Exception.throw										
X::Proc::Async::MustBeStarted.rethrow	R	Exception.rethrow										
X::Proc::Async::MustBeStarted.fail	R	Exception.fail										
X::Proc::Async::MustBeStarted.gist	R	Exception.gist										
X::Proc::Async::MustBeStarted.ACCEPTS	R	Any.ACCEPTS										
X::Proc::Async::MustBeStarted.any	R	Any.any										
X::Proc::Async::MustBeStarted.all	R	Any.all										
X::Proc::Async::MustBeStarted.one	R	Any.one										
X::Proc::Async::MustBeStarted.none	R	Any.none										
X::Proc::Async::MustBeStarted.list	R	Any.list										
X::Proc::Async::MustBeStarted.flat	R	Any.flat										
X::Proc::Async::MustBeStarted.eager	R	Any.eager										
X::Proc::Async::MustBeStarted.elems	R	Any.elems										
X::Proc::Async::MustBeStarted.end	R	Any.end										
X::Proc::Async::MustBeStarted.Str	R	Mu.Str										
X::Proc::Async::MustBeStarted.clone	R	Mu.clone										
X::Proc::Async::MustBeStarted.new	R	Mu.new										
X::Proc::Async::MustBeStarted.bless	R	Mu.bless										
X::Proc::Async::MustBeStarted.CREATE	R	Mu.CREATE										
X::Proc::Async::MustBeStarted.print	R	Mu.print										
X::Proc::Async::MustBeStarted.say	R	Mu.say										
X::Proc::Async::MustBeStarted.ACCEPTS	R	Mu.ACCEPTS										
X::Proc::Async::MustBeStarted.WHICH	R	Mu.WHICH										
X::Proc::Async::MustBeStarted.WHERE	R	Mu.WHERE										
X::Proc::Async::MustBeStarted.WHY	R	Mu.WHY										
X::Proc::Async::OpenForWriting	A			Perl 6 X::Proc::Async::OpenForWriting							<pre><code>class X::Proc::Async::OpenForWriting is Exception { ... }</code></pre>When a Proc::Async object is opened only for reading from the external program (no :w passed to open), and a write operation such as write, print and say is performed, an exception of type X::Proc::Async::OpenForWriting is thrown:	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync%3A%3AOpenForWriting
X::Proc::Async::OpenForWriting.method	A			Perl 6 X::Proc::Async::OpenForWriting							<pre><code>method method(X::Proc::Async::OpenForWriting:D:)</code></pre>Returns the method name that was called and which caused the exception.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync%3A%3AOpenForWriting#method
X::Proc::Async::OpenForWriting.proc	R	X::Proc::Async.proc										
X::Proc::Async::OpenForWriting.message	R	Exception.message										
X::Proc::Async::OpenForWriting.backtrace	R	Exception.backtrace										
X::Proc::Async::OpenForWriting.throw	R	Exception.throw										
X::Proc::Async::OpenForWriting.rethrow	R	Exception.rethrow										
X::Proc::Async::OpenForWriting.fail	R	Exception.fail										
X::Proc::Async::OpenForWriting.gist	R	Exception.gist										
X::Proc::Async::OpenForWriting.ACCEPTS	R	Any.ACCEPTS										
X::Proc::Async::OpenForWriting.any	R	Any.any										
X::Proc::Async::OpenForWriting.all	R	Any.all										
X::Proc::Async::OpenForWriting.one	R	Any.one										
X::Proc::Async::OpenForWriting.none	R	Any.none										
X::Proc::Async::OpenForWriting.list	R	Any.list										
X::Proc::Async::OpenForWriting.flat	R	Any.flat										
X::Proc::Async::OpenForWriting.eager	R	Any.eager										
X::Proc::Async::OpenForWriting.elems	R	Any.elems										
X::Proc::Async::OpenForWriting.end	R	Any.end										
X::Proc::Async::OpenForWriting.Str	R	Mu.Str										
X::Proc::Async::OpenForWriting.clone	R	Mu.clone										
X::Proc::Async::OpenForWriting.new	R	Mu.new										
X::Proc::Async::OpenForWriting.bless	R	Mu.bless										
X::Proc::Async::OpenForWriting.CREATE	R	Mu.CREATE										
X::Proc::Async::OpenForWriting.print	R	Mu.print										
X::Proc::Async::OpenForWriting.say	R	Mu.say										
X::Proc::Async::OpenForWriting.ACCEPTS	R	Mu.ACCEPTS										
X::Proc::Async::OpenForWriting.WHICH	R	Mu.WHICH										
X::Proc::Async::OpenForWriting.WHERE	R	Mu.WHERE										
X::Proc::Async::OpenForWriting.WHY	R	Mu.WHY										
X::Proc::Async::TapBeforeSpawn	A			Perl 6 X::Proc::Async::TapBeforeSpawn							<pre><code>class X::Proc::Async::TapBeforeSpawn is Exception { ... }</code></pre>If the stdout or stderr methods of Proc::Async are called after the program has been started, an exception of type X::Proc::Async::TapBeforeSpawn is thrown.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync%3A%3ATapBeforeSpawn
X::Proc::Async::TapBeforeSpawn.handle	A			Perl 6 X::Proc::Async::TapBeforeSpawn							<pre><code>method handle(X::Proc::Async::TapBeforeSpawn:D:) return Str:D</code></pre>Returns the name of the handle (stdout or stderr) that was accessed after the program started.	http://doc.perl6.org/type/X%3A%3AProc%3A%3AAsync%3A%3ATapBeforeSpawn#handle
X::Proc::Async::TapBeforeSpawn.proc	R	X::Proc::Async.proc										
X::Proc::Async::TapBeforeSpawn.message	R	Exception.message										
X::Proc::Async::TapBeforeSpawn.backtrace	R	Exception.backtrace										
X::Proc::Async::TapBeforeSpawn.throw	R	Exception.throw										
X::Proc::Async::TapBeforeSpawn.rethrow	R	Exception.rethrow										
X::Proc::Async::TapBeforeSpawn.fail	R	Exception.fail										
X::Proc::Async::TapBeforeSpawn.gist	R	Exception.gist										
X::Proc::Async::TapBeforeSpawn.ACCEPTS	R	Any.ACCEPTS										
X::Proc::Async::TapBeforeSpawn.any	R	Any.any										
X::Proc::Async::TapBeforeSpawn.all	R	Any.all										
X::Proc::Async::TapBeforeSpawn.one	R	Any.one										
X::Proc::Async::TapBeforeSpawn.none	R	Any.none										
X::Proc::Async::TapBeforeSpawn.list	R	Any.list										
X::Proc::Async::TapBeforeSpawn.flat	R	Any.flat										
X::Proc::Async::TapBeforeSpawn.eager	R	Any.eager										
X::Proc::Async::TapBeforeSpawn.elems	R	Any.elems										
X::Proc::Async::TapBeforeSpawn.end	R	Any.end										
X::Proc::Async::TapBeforeSpawn.Str	R	Mu.Str										
X::Proc::Async::TapBeforeSpawn.clone	R	Mu.clone										
X::Proc::Async::TapBeforeSpawn.new	R	Mu.new										
X::Proc::Async::TapBeforeSpawn.bless	R	Mu.bless										
X::Proc::Async::TapBeforeSpawn.CREATE	R	Mu.CREATE										
X::Proc::Async::TapBeforeSpawn.print	R	Mu.print										
X::Proc::Async::TapBeforeSpawn.say	R	Mu.say										
X::Proc::Async::TapBeforeSpawn.ACCEPTS	R	Mu.ACCEPTS										
X::Proc::Async::TapBeforeSpawn.WHICH	R	Mu.WHICH										
X::Proc::Async::TapBeforeSpawn.WHERE	R	Mu.WHERE										
X::Proc::Async::TapBeforeSpawn.WHY	R	Mu.WHY										
X::Redeclaration	A			Perl 6 X::Redeclaration							<pre><code>class X::Redeclaration does X::Comp { }</code></pre>Thrown when a symbol (variable, routine, type, parameter, ...) is redeclared.	http://doc.perl6.org/type/X%3A%3ARedeclaration
X::Redeclaration.symbol	A			Perl 6 X::Redeclaration							Returns the name of the symbol that was redeclared.	http://doc.perl6.org/type/X%3A%3ARedeclaration#symbol
X::Redeclaration.what	A			Perl 6 X::Redeclaration							Returns the kind of symbol that was redeclared.	http://doc.perl6.org/type/X%3A%3ARedeclaration#what
X::Redeclaration.postfix	A			Perl 6 X::Redeclaration							Returns a string that is attached to the end of the error message.	http://doc.perl6.org/type/X%3A%3ARedeclaration#postfix
postfix	R	X::Redeclaration.postfix										
X::Redeclaration.filename	R	X::Comp.filename										
X::Redeclaration.line	R	X::Comp.line										
X::Redeclaration.column	R	X::Comp.column										
X::Redeclaration.message	R	Exception.message										
X::Redeclaration.backtrace	R	Exception.backtrace										
X::Redeclaration.throw	R	Exception.throw										
X::Redeclaration.rethrow	R	Exception.rethrow										
X::Redeclaration.fail	R	Exception.fail										
X::Redeclaration.gist	R	Exception.gist										
X::Redeclaration.ACCEPTS	R	Any.ACCEPTS										
X::Redeclaration.any	R	Any.any										
X::Redeclaration.all	R	Any.all										
X::Redeclaration.one	R	Any.one										
X::Redeclaration.none	R	Any.none										
X::Redeclaration.list	R	Any.list										
X::Redeclaration.flat	R	Any.flat										
X::Redeclaration.eager	R	Any.eager										
X::Redeclaration.elems	R	Any.elems										
X::Redeclaration.end	R	Any.end										
X::Redeclaration.Str	R	Mu.Str										
X::Redeclaration.clone	R	Mu.clone										
X::Redeclaration.new	R	Mu.new										
X::Redeclaration.bless	R	Mu.bless										
X::Redeclaration.CREATE	R	Mu.CREATE										
X::Redeclaration.print	R	Mu.print										
X::Redeclaration.say	R	Mu.say										
X::Redeclaration.ACCEPTS	R	Mu.ACCEPTS										
X::Redeclaration.WHICH	R	Mu.WHICH										
X::Redeclaration.WHERE	R	Mu.WHERE										
X::Redeclaration.WHY	R	Mu.WHY										
X::Role::Initialization	A			Perl 6 X::Role::Initialization							<pre><code>class X::Role::Initialization is Exception { }</code></pre>Thrown when the SomeRole($init) syntax is used, but SomeRole does not have exactly one public attribute.	http://doc.perl6.org/type/X%3A%3ARole%3A%3AInitialization
X::Role::Initialization.role	A			Perl 6 X::Role::Initialization							<pre><code>method role()</code></pre>Returns the role that caused the error.	http://doc.perl6.org/type/X%3A%3ARole%3A%3AInitialization#role
role	R	X::Role::Initialization.role										
X::Role::Initialization.message	R	Exception.message										
X::Role::Initialization.backtrace	R	Exception.backtrace										
X::Role::Initialization.throw	R	Exception.throw										
X::Role::Initialization.rethrow	R	Exception.rethrow										
X::Role::Initialization.fail	R	Exception.fail										
X::Role::Initialization.gist	R	Exception.gist										
X::Role::Initialization.ACCEPTS	R	Any.ACCEPTS										
X::Role::Initialization.any	R	Any.any										
X::Role::Initialization.all	R	Any.all										
X::Role::Initialization.one	R	Any.one										
X::Role::Initialization.none	R	Any.none										
X::Role::Initialization.list	R	Any.list										
X::Role::Initialization.flat	R	Any.flat										
X::Role::Initialization.eager	R	Any.eager										
X::Role::Initialization.elems	R	Any.elems										
X::Role::Initialization.end	R	Any.end										
X::Role::Initialization.Str	R	Mu.Str										
X::Role::Initialization.clone	R	Mu.clone										
X::Role::Initialization.new	R	Mu.new										
X::Role::Initialization.bless	R	Mu.bless										
X::Role::Initialization.CREATE	R	Mu.CREATE										
X::Role::Initialization.print	R	Mu.print										
X::Role::Initialization.say	R	Mu.say										
X::Role::Initialization.ACCEPTS	R	Mu.ACCEPTS										
X::Role::Initialization.WHICH	R	Mu.WHICH										
X::Role::Initialization.WHERE	R	Mu.WHERE										
X::Role::Initialization.WHY	R	Mu.WHY										
X::Sequence::Deduction	A			Perl 6 X::Sequence::Deduction							<pre><code>class X::Sequence::Deduction is Exception { }</code></pre>Exception type thrown when the ... sequence operator is being called without an explicit closure, and the sequence cannot be deduced.	http://doc.perl6.org/type/X%3A%3ASequence%3A%3ADeduction
X::Sequence::Deduction.message	R	Exception.message										
X::Sequence::Deduction.backtrace	R	Exception.backtrace										
X::Sequence::Deduction.throw	R	Exception.throw										
X::Sequence::Deduction.rethrow	R	Exception.rethrow										
X::Sequence::Deduction.fail	R	Exception.fail										
X::Sequence::Deduction.gist	R	Exception.gist										
X::Sequence::Deduction.ACCEPTS	R	Any.ACCEPTS										
X::Sequence::Deduction.any	R	Any.any										
X::Sequence::Deduction.all	R	Any.all										
X::Sequence::Deduction.one	R	Any.one										
X::Sequence::Deduction.none	R	Any.none										
X::Sequence::Deduction.list	R	Any.list										
X::Sequence::Deduction.flat	R	Any.flat										
X::Sequence::Deduction.eager	R	Any.eager										
X::Sequence::Deduction.elems	R	Any.elems										
X::Sequence::Deduction.end	R	Any.end										
X::Sequence::Deduction.Str	R	Mu.Str										
X::Sequence::Deduction.clone	R	Mu.clone										
X::Sequence::Deduction.new	R	Mu.new										
X::Sequence::Deduction.bless	R	Mu.bless										
X::Sequence::Deduction.CREATE	R	Mu.CREATE										
X::Sequence::Deduction.print	R	Mu.print										
X::Sequence::Deduction.say	R	Mu.say										
X::Sequence::Deduction.ACCEPTS	R	Mu.ACCEPTS										
X::Sequence::Deduction.WHICH	R	Mu.WHICH										
X::Sequence::Deduction.WHERE	R	Mu.WHERE										
X::Sequence::Deduction.WHY	R	Mu.WHY										
X::Signature::NameClash	A			Perl 6 X::Signature::NameClash							<pre><code>my class X::Signature::NameClash does X::Comp { }</code></pre>Compile time error thrown when two named parameters have the same name, potentially through aliases.	http://doc.perl6.org/type/X%3A%3ASignature%3A%3ANameClash
X::Signature::NameClash.name	A			Perl 6 X::Signature::NameClash							<pre><code>method name() returns Str:D</code></pre>Returns the name that was used for more than one parameter.	http://doc.perl6.org/type/X%3A%3ASignature%3A%3ANameClash#name
X::Signature::NameClash.filename	R	X::Comp.filename										
X::Signature::NameClash.line	R	X::Comp.line										
X::Signature::NameClash.column	R	X::Comp.column										
X::Signature::NameClash.message	R	Exception.message										
X::Signature::NameClash.backtrace	R	Exception.backtrace										
X::Signature::NameClash.throw	R	Exception.throw										
X::Signature::NameClash.rethrow	R	Exception.rethrow										
X::Signature::NameClash.fail	R	Exception.fail										
X::Signature::NameClash.gist	R	Exception.gist										
X::Signature::NameClash.ACCEPTS	R	Any.ACCEPTS										
X::Signature::NameClash.any	R	Any.any										
X::Signature::NameClash.all	R	Any.all										
X::Signature::NameClash.one	R	Any.one										
X::Signature::NameClash.none	R	Any.none										
X::Signature::NameClash.list	R	Any.list										
X::Signature::NameClash.flat	R	Any.flat										
X::Signature::NameClash.eager	R	Any.eager										
X::Signature::NameClash.elems	R	Any.elems										
X::Signature::NameClash.end	R	Any.end										
X::Signature::NameClash.Str	R	Mu.Str										
X::Signature::NameClash.clone	R	Mu.clone										
X::Signature::NameClash.new	R	Mu.new										
X::Signature::NameClash.bless	R	Mu.bless										
X::Signature::NameClash.CREATE	R	Mu.CREATE										
X::Signature::NameClash.print	R	Mu.print										
X::Signature::NameClash.say	R	Mu.say										
X::Signature::NameClash.ACCEPTS	R	Mu.ACCEPTS										
X::Signature::NameClash.WHICH	R	Mu.WHICH										
X::Signature::NameClash.WHERE	R	Mu.WHERE										
X::Signature::NameClash.WHY	R	Mu.WHY										
X::Signature::Placeholder	A			Perl 6 X::Signature::Placeholder							<pre><code>class X::Signature::Placeholder does X::Comp</code></pre>Compile time error thrown when a block has both an explicit signature and placeholder parameters.	http://doc.perl6.org/type/X%3A%3ASignature%3A%3APlaceholder
X::Signature::Placeholder.placeholder	A			Perl 6 X::Signature::Placeholder							<pre><code>method placeholder() returns Str:D</code></pre>Returns the name of a placeholder that was used in a block that already had a signature.	http://doc.perl6.org/type/X%3A%3ASignature%3A%3APlaceholder#placeholder
X::Signature::Placeholder.filename	R	X::Comp.filename										
X::Signature::Placeholder.line	R	X::Comp.line										
X::Signature::Placeholder.column	R	X::Comp.column										
X::Signature::Placeholder.message	R	Exception.message										
X::Signature::Placeholder.backtrace	R	Exception.backtrace										
X::Signature::Placeholder.throw	R	Exception.throw										
X::Signature::Placeholder.rethrow	R	Exception.rethrow										
X::Signature::Placeholder.fail	R	Exception.fail										
X::Signature::Placeholder.gist	R	Exception.gist										
X::Signature::Placeholder.ACCEPTS	R	Any.ACCEPTS										
X::Signature::Placeholder.any	R	Any.any										
X::Signature::Placeholder.all	R	Any.all										
X::Signature::Placeholder.one	R	Any.one										
X::Signature::Placeholder.none	R	Any.none										
X::Signature::Placeholder.list	R	Any.list										
X::Signature::Placeholder.flat	R	Any.flat										
X::Signature::Placeholder.eager	R	Any.eager										
X::Signature::Placeholder.elems	R	Any.elems										
X::Signature::Placeholder.end	R	Any.end										
X::Signature::Placeholder.Str	R	Mu.Str										
X::Signature::Placeholder.clone	R	Mu.clone										
X::Signature::Placeholder.new	R	Mu.new										
X::Signature::Placeholder.bless	R	Mu.bless										
X::Signature::Placeholder.CREATE	R	Mu.CREATE										
X::Signature::Placeholder.print	R	Mu.print										
X::Signature::Placeholder.say	R	Mu.say										
X::Signature::Placeholder.ACCEPTS	R	Mu.ACCEPTS										
X::Signature::Placeholder.WHICH	R	Mu.WHICH										
X::Signature::Placeholder.WHERE	R	Mu.WHERE										
X::Signature::Placeholder.WHY	R	Mu.WHY										
X::Str::Numeric	A			Perl 6 X::Str::Numeric							<pre><code>class X::Str::Numeric is Exception { }</code></pre>Error thrown (or wrapped in a Failure) when a conversion from string to a number fails.	http://doc.perl6.org/type/X%3A%3AStr%3A%3ANumeric
X::Str::Numeric.source	A			Perl 6 X::Str::Numeric							<pre><code>method source() returns Str:D</code></pre>Returns the string that was attempted to convert to a number	http://doc.perl6.org/type/X%3A%3AStr%3A%3ANumeric#source
X::Str::Numeric.pos	A			Perl 6 X::Str::Numeric							<pre><code>method pos() returns Int:D</code></pre>Gives the position into the string where the parsing failed.	http://doc.perl6.org/type/X%3A%3AStr%3A%3ANumeric#pos
pos	R	X::Str::Numeric.pos										
X::Str::Numeric.reason	A			Perl 6 X::Str::Numeric							<pre><code>method reason() returns Int:D</code></pre>Verbal description of the reason why the conversion failed.	http://doc.perl6.org/type/X%3A%3AStr%3A%3ANumeric#reason
X::Str::Numeric.message	R	Exception.message										
X::Str::Numeric.backtrace	R	Exception.backtrace										
X::Str::Numeric.throw	R	Exception.throw										
X::Str::Numeric.rethrow	R	Exception.rethrow										
X::Str::Numeric.fail	R	Exception.fail										
X::Str::Numeric.gist	R	Exception.gist										
X::Str::Numeric.ACCEPTS	R	Any.ACCEPTS										
X::Str::Numeric.any	R	Any.any										
X::Str::Numeric.all	R	Any.all										
X::Str::Numeric.one	R	Any.one										
X::Str::Numeric.none	R	Any.none										
X::Str::Numeric.list	R	Any.list										
X::Str::Numeric.flat	R	Any.flat										
X::Str::Numeric.eager	R	Any.eager										
X::Str::Numeric.elems	R	Any.elems										
X::Str::Numeric.end	R	Any.end										
X::Str::Numeric.Str	R	Mu.Str										
X::Str::Numeric.clone	R	Mu.clone										
X::Str::Numeric.new	R	Mu.new										
X::Str::Numeric.bless	R	Mu.bless										
X::Str::Numeric.CREATE	R	Mu.CREATE										
X::Str::Numeric.print	R	Mu.print										
X::Str::Numeric.say	R	Mu.say										
X::Str::Numeric.ACCEPTS	R	Mu.ACCEPTS										
X::Str::Numeric.WHICH	R	Mu.WHICH										
X::Str::Numeric.WHERE	R	Mu.WHERE										
X::Str::Numeric.WHY	R	Mu.WHY										
X::Syntax	A			Perl 6 X::Syntax							<pre><code>role X::Syntax does X::Comp { }</code></pre>Common role for syntax errors thrown by the compiler.	http://doc.perl6.org/type/X%3A%3ASyntax
X::Syntax.filename	R	X::Comp.filename										
X::Syntax.line	R	X::Comp.line										
X::Syntax.column	R	X::Comp.column										
X::Syntax.message	R	Exception.message										
X::Syntax.backtrace	R	Exception.backtrace										
X::Syntax.throw	R	Exception.throw										
X::Syntax.rethrow	R	Exception.rethrow										
X::Syntax.fail	R	Exception.fail										
X::Syntax.gist	R	Exception.gist										
X::Syntax.ACCEPTS	R	Any.ACCEPTS										
X::Syntax.any	R	Any.any										
X::Syntax.all	R	Any.all										
X::Syntax.one	R	Any.one										
X::Syntax.none	R	Any.none										
X::Syntax.list	R	Any.list										
X::Syntax.flat	R	Any.flat										
X::Syntax.eager	R	Any.eager										
X::Syntax.elems	R	Any.elems										
X::Syntax.end	R	Any.end										
X::Syntax.Str	R	Mu.Str										
X::Syntax.clone	R	Mu.clone										
X::Syntax.new	R	Mu.new										
X::Syntax.bless	R	Mu.bless										
X::Syntax.CREATE	R	Mu.CREATE										
X::Syntax.print	R	Mu.print										
X::Syntax.say	R	Mu.say										
X::Syntax.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax.WHICH	R	Mu.WHICH										
X::Syntax.WHERE	R	Mu.WHERE										
X::Syntax.WHY	R	Mu.WHY										
X::Syntax::AddCategorial::MissingSeparator	A			Perl 6 X::Syntax::AddCategorial::MissingSeparator							<pre><code>class X::Syntax::AddCategorial::MissingSeparator does X::Syntax { }</code></pre>Syntax error when a circumfix operator is defined, but within the definition opening and closing terminators are not separated by a whitespace.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AAddCategorial%3A%3AMissingSeparator
X::Syntax::AddCategorial::MissingSeparator.message	R	Exception.message										
X::Syntax::AddCategorial::MissingSeparator.backtrace	R	Exception.backtrace										
X::Syntax::AddCategorial::MissingSeparator.throw	R	Exception.throw										
X::Syntax::AddCategorial::MissingSeparator.rethrow	R	Exception.rethrow										
X::Syntax::AddCategorial::MissingSeparator.fail	R	Exception.fail										
X::Syntax::AddCategorial::MissingSeparator.gist	R	Exception.gist										
X::Syntax::AddCategorial::MissingSeparator.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::AddCategorial::MissingSeparator.any	R	Any.any										
X::Syntax::AddCategorial::MissingSeparator.all	R	Any.all										
X::Syntax::AddCategorial::MissingSeparator.one	R	Any.one										
X::Syntax::AddCategorial::MissingSeparator.none	R	Any.none										
X::Syntax::AddCategorial::MissingSeparator.list	R	Any.list										
X::Syntax::AddCategorial::MissingSeparator.flat	R	Any.flat										
X::Syntax::AddCategorial::MissingSeparator.eager	R	Any.eager										
X::Syntax::AddCategorial::MissingSeparator.elems	R	Any.elems										
X::Syntax::AddCategorial::MissingSeparator.end	R	Any.end										
X::Syntax::AddCategorial::MissingSeparator.Str	R	Mu.Str										
X::Syntax::AddCategorial::MissingSeparator.clone	R	Mu.clone										
X::Syntax::AddCategorial::MissingSeparator.new	R	Mu.new										
X::Syntax::AddCategorial::MissingSeparator.bless	R	Mu.bless										
X::Syntax::AddCategorial::MissingSeparator.CREATE	R	Mu.CREATE										
X::Syntax::AddCategorial::MissingSeparator.print	R	Mu.print										
X::Syntax::AddCategorial::MissingSeparator.say	R	Mu.say										
X::Syntax::AddCategorial::MissingSeparator.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::AddCategorial::MissingSeparator.WHICH	R	Mu.WHICH										
X::Syntax::AddCategorial::MissingSeparator.WHERE	R	Mu.WHERE										
X::Syntax::AddCategorial::MissingSeparator.WHY	R	Mu.WHY										
X::Syntax::Augment::Role	A			Perl 6 X::Syntax::Augment::Role							<pre><code>class X::Syntax::Augment::Role does X::Syntax { }</code></pre>Compile time error thrown when trying to augment a role.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AAugment%3A%3ARole
X::Syntax::Augment::Role.role-name	A			Perl 6 X::Syntax::Augment::Role							<pre><code>method role-name() returns Str:D</code></pre>Returns the name of the role that was attempted to augment.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AAugment%3A%3ARole#role-name
role-name	R	X::Syntax::Augment::Role.role-name										
X::Syntax::Augment::Role.message	R	Exception.message										
X::Syntax::Augment::Role.backtrace	R	Exception.backtrace										
X::Syntax::Augment::Role.throw	R	Exception.throw										
X::Syntax::Augment::Role.rethrow	R	Exception.rethrow										
X::Syntax::Augment::Role.fail	R	Exception.fail										
X::Syntax::Augment::Role.gist	R	Exception.gist										
X::Syntax::Augment::Role.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Augment::Role.any	R	Any.any										
X::Syntax::Augment::Role.all	R	Any.all										
X::Syntax::Augment::Role.one	R	Any.one										
X::Syntax::Augment::Role.none	R	Any.none										
X::Syntax::Augment::Role.list	R	Any.list										
X::Syntax::Augment::Role.flat	R	Any.flat										
X::Syntax::Augment::Role.eager	R	Any.eager										
X::Syntax::Augment::Role.elems	R	Any.elems										
X::Syntax::Augment::Role.end	R	Any.end										
X::Syntax::Augment::Role.Str	R	Mu.Str										
X::Syntax::Augment::Role.clone	R	Mu.clone										
X::Syntax::Augment::Role.new	R	Mu.new										
X::Syntax::Augment::Role.bless	R	Mu.bless										
X::Syntax::Augment::Role.CREATE	R	Mu.CREATE										
X::Syntax::Augment::Role.print	R	Mu.print										
X::Syntax::Augment::Role.say	R	Mu.say										
X::Syntax::Augment::Role.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Augment::Role.WHICH	R	Mu.WHICH										
X::Syntax::Augment::Role.WHERE	R	Mu.WHERE										
X::Syntax::Augment::Role.WHY	R	Mu.WHY										
X::Syntax::Augment::WithoutMonkeyTyping	A			Perl 6 X::Syntax::Augment::WithoutMonkeyTyping							<pre><code>class X::Syntax::Augment::WithoutMonkeyTyping does X::Syntax { }</code></pre>Compile time error thrown when augment is used without use MONKEY_TYPING.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AAugment%3A%3AWithoutMonkeyTyping
X::Syntax::Augment::WithoutMonkeyTyping.message	R	Exception.message										
X::Syntax::Augment::WithoutMonkeyTyping.backtrace	R	Exception.backtrace										
X::Syntax::Augment::WithoutMonkeyTyping.throw	R	Exception.throw										
X::Syntax::Augment::WithoutMonkeyTyping.rethrow	R	Exception.rethrow										
X::Syntax::Augment::WithoutMonkeyTyping.fail	R	Exception.fail										
X::Syntax::Augment::WithoutMonkeyTyping.gist	R	Exception.gist										
X::Syntax::Augment::WithoutMonkeyTyping.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Augment::WithoutMonkeyTyping.any	R	Any.any										
X::Syntax::Augment::WithoutMonkeyTyping.all	R	Any.all										
X::Syntax::Augment::WithoutMonkeyTyping.one	R	Any.one										
X::Syntax::Augment::WithoutMonkeyTyping.none	R	Any.none										
X::Syntax::Augment::WithoutMonkeyTyping.list	R	Any.list										
X::Syntax::Augment::WithoutMonkeyTyping.flat	R	Any.flat										
X::Syntax::Augment::WithoutMonkeyTyping.eager	R	Any.eager										
X::Syntax::Augment::WithoutMonkeyTyping.elems	R	Any.elems										
X::Syntax::Augment::WithoutMonkeyTyping.end	R	Any.end										
X::Syntax::Augment::WithoutMonkeyTyping.Str	R	Mu.Str										
X::Syntax::Augment::WithoutMonkeyTyping.clone	R	Mu.clone										
X::Syntax::Augment::WithoutMonkeyTyping.new	R	Mu.new										
X::Syntax::Augment::WithoutMonkeyTyping.bless	R	Mu.bless										
X::Syntax::Augment::WithoutMonkeyTyping.CREATE	R	Mu.CREATE										
X::Syntax::Augment::WithoutMonkeyTyping.print	R	Mu.print										
X::Syntax::Augment::WithoutMonkeyTyping.say	R	Mu.say										
X::Syntax::Augment::WithoutMonkeyTyping.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Augment::WithoutMonkeyTyping.WHICH	R	Mu.WHICH										
X::Syntax::Augment::WithoutMonkeyTyping.WHERE	R	Mu.WHERE										
X::Syntax::Augment::WithoutMonkeyTyping.WHY	R	Mu.WHY										
X::Syntax::Comment::Embedded	A			Perl 6 X::Syntax::Comment::Embedded							<pre><code>class X::Syntax::Comment::Embedded does X::Syntax { }</code></pre>Syntax error thrown when #` is encountered and it is not followed by an opening bracket.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AComment%3A%3AEmbedded
X::Syntax::Comment::Embedded.message	R	Exception.message										
X::Syntax::Comment::Embedded.backtrace	R	Exception.backtrace										
X::Syntax::Comment::Embedded.throw	R	Exception.throw										
X::Syntax::Comment::Embedded.rethrow	R	Exception.rethrow										
X::Syntax::Comment::Embedded.fail	R	Exception.fail										
X::Syntax::Comment::Embedded.gist	R	Exception.gist										
X::Syntax::Comment::Embedded.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Comment::Embedded.any	R	Any.any										
X::Syntax::Comment::Embedded.all	R	Any.all										
X::Syntax::Comment::Embedded.one	R	Any.one										
X::Syntax::Comment::Embedded.none	R	Any.none										
X::Syntax::Comment::Embedded.list	R	Any.list										
X::Syntax::Comment::Embedded.flat	R	Any.flat										
X::Syntax::Comment::Embedded.eager	R	Any.eager										
X::Syntax::Comment::Embedded.elems	R	Any.elems										
X::Syntax::Comment::Embedded.end	R	Any.end										
X::Syntax::Comment::Embedded.Str	R	Mu.Str										
X::Syntax::Comment::Embedded.clone	R	Mu.clone										
X::Syntax::Comment::Embedded.new	R	Mu.new										
X::Syntax::Comment::Embedded.bless	R	Mu.bless										
X::Syntax::Comment::Embedded.CREATE	R	Mu.CREATE										
X::Syntax::Comment::Embedded.print	R	Mu.print										
X::Syntax::Comment::Embedded.say	R	Mu.say										
X::Syntax::Comment::Embedded.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Comment::Embedded.WHICH	R	Mu.WHICH										
X::Syntax::Comment::Embedded.WHERE	R	Mu.WHERE										
X::Syntax::Comment::Embedded.WHY	R	Mu.WHY										
X::Syntax::Confused	A			Perl 6 X::Syntax::Confused							<pre><code>class X::Syntax::Confused does X::Syntax { }</code></pre>The most general syntax error, if no more specific error message can be given.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AConfused
X::Syntax::Confused.message	R	Exception.message										
X::Syntax::Confused.backtrace	R	Exception.backtrace										
X::Syntax::Confused.throw	R	Exception.throw										
X::Syntax::Confused.rethrow	R	Exception.rethrow										
X::Syntax::Confused.fail	R	Exception.fail										
X::Syntax::Confused.gist	R	Exception.gist										
X::Syntax::Confused.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Confused.any	R	Any.any										
X::Syntax::Confused.all	R	Any.all										
X::Syntax::Confused.one	R	Any.one										
X::Syntax::Confused.none	R	Any.none										
X::Syntax::Confused.list	R	Any.list										
X::Syntax::Confused.flat	R	Any.flat										
X::Syntax::Confused.eager	R	Any.eager										
X::Syntax::Confused.elems	R	Any.elems										
X::Syntax::Confused.end	R	Any.end										
X::Syntax::Confused.Str	R	Mu.Str										
X::Syntax::Confused.clone	R	Mu.clone										
X::Syntax::Confused.new	R	Mu.new										
X::Syntax::Confused.bless	R	Mu.bless										
X::Syntax::Confused.CREATE	R	Mu.CREATE										
X::Syntax::Confused.print	R	Mu.print										
X::Syntax::Confused.say	R	Mu.say										
X::Syntax::Confused.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Confused.WHICH	R	Mu.WHICH										
X::Syntax::Confused.WHERE	R	Mu.WHERE										
X::Syntax::Confused.WHY	R	Mu.WHY										
X::Syntax::InfixInTermPosition	A			Perl 6 X::Syntax::InfixInTermPosition							<pre><code>class X::Syntax::InfixInTermPosition does X::Syntax { }</code></pre>Syntax error thrown when the parser expects a term, but finds an infix operator instead.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AInfixInTermPosition
X::Syntax::InfixInTermPosition.infix	A			Perl 6 X::Syntax::InfixInTermPosition							<pre><code>method infix() returns Str:D</code></pre>Returns the symbol of the infix that was found in term position.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AInfixInTermPosition#infix
infix	R	X::Syntax::InfixInTermPosition.infix										
X::Syntax::InfixInTermPosition.message	R	Exception.message										
X::Syntax::InfixInTermPosition.backtrace	R	Exception.backtrace										
X::Syntax::InfixInTermPosition.throw	R	Exception.throw										
X::Syntax::InfixInTermPosition.rethrow	R	Exception.rethrow										
X::Syntax::InfixInTermPosition.fail	R	Exception.fail										
X::Syntax::InfixInTermPosition.gist	R	Exception.gist										
X::Syntax::InfixInTermPosition.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::InfixInTermPosition.any	R	Any.any										
X::Syntax::InfixInTermPosition.all	R	Any.all										
X::Syntax::InfixInTermPosition.one	R	Any.one										
X::Syntax::InfixInTermPosition.none	R	Any.none										
X::Syntax::InfixInTermPosition.list	R	Any.list										
X::Syntax::InfixInTermPosition.flat	R	Any.flat										
X::Syntax::InfixInTermPosition.eager	R	Any.eager										
X::Syntax::InfixInTermPosition.elems	R	Any.elems										
X::Syntax::InfixInTermPosition.end	R	Any.end										
X::Syntax::InfixInTermPosition.Str	R	Mu.Str										
X::Syntax::InfixInTermPosition.clone	R	Mu.clone										
X::Syntax::InfixInTermPosition.new	R	Mu.new										
X::Syntax::InfixInTermPosition.bless	R	Mu.bless										
X::Syntax::InfixInTermPosition.CREATE	R	Mu.CREATE										
X::Syntax::InfixInTermPosition.print	R	Mu.print										
X::Syntax::InfixInTermPosition.say	R	Mu.say										
X::Syntax::InfixInTermPosition.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::InfixInTermPosition.WHICH	R	Mu.WHICH										
X::Syntax::InfixInTermPosition.WHERE	R	Mu.WHERE										
X::Syntax::InfixInTermPosition.WHY	R	Mu.WHY										
X::Syntax::Malformed	A			Perl 6 X::Syntax::Malformed							<pre><code>class X::Syntax::Malformed does X::Syntax { ... }</code></pre>The Perl 6 compiler throws errors of type X::Syntax::Malformed when it knows what kind of declaration it is parsing, and encounters a syntax error, but can't give a more specific error message.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AMalformed
X::Syntax::Malformed.what	A			Perl 6 X::Syntax::Malformed							<pre><code>method what(X::Syntax::Malformed:D:) returns Str:D:</code></pre>Returns a description of the thing that was being parsed.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AMalformed#what
X::Syntax::Malformed.message	R	Exception.message										
X::Syntax::Malformed.backtrace	R	Exception.backtrace										
X::Syntax::Malformed.throw	R	Exception.throw										
X::Syntax::Malformed.rethrow	R	Exception.rethrow										
X::Syntax::Malformed.fail	R	Exception.fail										
X::Syntax::Malformed.gist	R	Exception.gist										
X::Syntax::Malformed.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Malformed.any	R	Any.any										
X::Syntax::Malformed.all	R	Any.all										
X::Syntax::Malformed.one	R	Any.one										
X::Syntax::Malformed.none	R	Any.none										
X::Syntax::Malformed.list	R	Any.list										
X::Syntax::Malformed.flat	R	Any.flat										
X::Syntax::Malformed.eager	R	Any.eager										
X::Syntax::Malformed.elems	R	Any.elems										
X::Syntax::Malformed.end	R	Any.end										
X::Syntax::Malformed.Str	R	Mu.Str										
X::Syntax::Malformed.clone	R	Mu.clone										
X::Syntax::Malformed.new	R	Mu.new										
X::Syntax::Malformed.bless	R	Mu.bless										
X::Syntax::Malformed.CREATE	R	Mu.CREATE										
X::Syntax::Malformed.print	R	Mu.print										
X::Syntax::Malformed.say	R	Mu.say										
X::Syntax::Malformed.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Malformed.WHICH	R	Mu.WHICH										
X::Syntax::Malformed.WHERE	R	Mu.WHERE										
X::Syntax::Malformed.WHY	R	Mu.WHY										
X::Syntax::Missing	A			Perl 6 X::Syntax::Missing							<pre><code>class X::Syntax::Missing does X::Syntax { }</code></pre>Syntax error thrown when the previous piece of syntax requires the existence of another piece of syntax, and that second piece is missing.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AMissing
X::Syntax::Missing.what	A			Perl 6 X::Syntax::Missing							<pre><code>method what() returns Str:D</code></pre>Returns a string description of the missing syntax element.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AMissing#what
X::Syntax::Missing.message	R	Exception.message										
X::Syntax::Missing.backtrace	R	Exception.backtrace										
X::Syntax::Missing.throw	R	Exception.throw										
X::Syntax::Missing.rethrow	R	Exception.rethrow										
X::Syntax::Missing.fail	R	Exception.fail										
X::Syntax::Missing.gist	R	Exception.gist										
X::Syntax::Missing.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Missing.any	R	Any.any										
X::Syntax::Missing.all	R	Any.all										
X::Syntax::Missing.one	R	Any.one										
X::Syntax::Missing.none	R	Any.none										
X::Syntax::Missing.list	R	Any.list										
X::Syntax::Missing.flat	R	Any.flat										
X::Syntax::Missing.eager	R	Any.eager										
X::Syntax::Missing.elems	R	Any.elems										
X::Syntax::Missing.end	R	Any.end										
X::Syntax::Missing.Str	R	Mu.Str										
X::Syntax::Missing.clone	R	Mu.clone										
X::Syntax::Missing.new	R	Mu.new										
X::Syntax::Missing.bless	R	Mu.bless										
X::Syntax::Missing.CREATE	R	Mu.CREATE										
X::Syntax::Missing.print	R	Mu.print										
X::Syntax::Missing.say	R	Mu.say										
X::Syntax::Missing.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Missing.WHICH	R	Mu.WHICH										
X::Syntax::Missing.WHERE	R	Mu.WHERE										
X::Syntax::Missing.WHY	R	Mu.WHY										
X::Syntax::NegatedPair	A			Perl 6 X::Syntax::NegatedPair							<pre><code>class X::Syntax::NegatedPair does X::Syntax { }</code></pre>Thrown if a colonpair illegally has a value, for example :!a(1).	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ANegatedPair
X::Syntax::NegatedPair.key	A			Perl 6 X::Syntax::NegatedPair							Returns the key of the pair that caused the error.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ANegatedPair#key
X::Syntax::NegatedPair.message	R	Exception.message										
X::Syntax::NegatedPair.backtrace	R	Exception.backtrace										
X::Syntax::NegatedPair.throw	R	Exception.throw										
X::Syntax::NegatedPair.rethrow	R	Exception.rethrow										
X::Syntax::NegatedPair.fail	R	Exception.fail										
X::Syntax::NegatedPair.gist	R	Exception.gist										
X::Syntax::NegatedPair.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::NegatedPair.any	R	Any.any										
X::Syntax::NegatedPair.all	R	Any.all										
X::Syntax::NegatedPair.one	R	Any.one										
X::Syntax::NegatedPair.none	R	Any.none										
X::Syntax::NegatedPair.list	R	Any.list										
X::Syntax::NegatedPair.flat	R	Any.flat										
X::Syntax::NegatedPair.eager	R	Any.eager										
X::Syntax::NegatedPair.elems	R	Any.elems										
X::Syntax::NegatedPair.end	R	Any.end										
X::Syntax::NegatedPair.Str	R	Mu.Str										
X::Syntax::NegatedPair.clone	R	Mu.clone										
X::Syntax::NegatedPair.new	R	Mu.new										
X::Syntax::NegatedPair.bless	R	Mu.bless										
X::Syntax::NegatedPair.CREATE	R	Mu.CREATE										
X::Syntax::NegatedPair.print	R	Mu.print										
X::Syntax::NegatedPair.say	R	Mu.say										
X::Syntax::NegatedPair.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::NegatedPair.WHICH	R	Mu.WHICH										
X::Syntax::NegatedPair.WHERE	R	Mu.WHERE										
X::Syntax::NegatedPair.WHY	R	Mu.WHY										
X::Syntax::NoSelf	A			Perl 6 X::Syntax::NoSelf							<pre><code>class X::Syntax::NoSelf does X::Syntax { }</code></pre>Compile time error thrown when $.foo style calls are used where no invocant is available.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ANoSelf
X::Syntax::NoSelf.variable	A			Perl 6 X::Syntax::NoSelf							Returns the variable/method call that caused the error.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ANoSelf#variable
variable	R	X::Syntax::NoSelf.variable										
X::Syntax::NoSelf.message	R	Exception.message										
X::Syntax::NoSelf.backtrace	R	Exception.backtrace										
X::Syntax::NoSelf.throw	R	Exception.throw										
X::Syntax::NoSelf.rethrow	R	Exception.rethrow										
X::Syntax::NoSelf.fail	R	Exception.fail										
X::Syntax::NoSelf.gist	R	Exception.gist										
X::Syntax::NoSelf.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::NoSelf.any	R	Any.any										
X::Syntax::NoSelf.all	R	Any.all										
X::Syntax::NoSelf.one	R	Any.one										
X::Syntax::NoSelf.none	R	Any.none										
X::Syntax::NoSelf.list	R	Any.list										
X::Syntax::NoSelf.flat	R	Any.flat										
X::Syntax::NoSelf.eager	R	Any.eager										
X::Syntax::NoSelf.elems	R	Any.elems										
X::Syntax::NoSelf.end	R	Any.end										
X::Syntax::NoSelf.Str	R	Mu.Str										
X::Syntax::NoSelf.clone	R	Mu.clone										
X::Syntax::NoSelf.new	R	Mu.new										
X::Syntax::NoSelf.bless	R	Mu.bless										
X::Syntax::NoSelf.CREATE	R	Mu.CREATE										
X::Syntax::NoSelf.print	R	Mu.print										
X::Syntax::NoSelf.say	R	Mu.say										
X::Syntax::NoSelf.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::NoSelf.WHICH	R	Mu.WHICH										
X::Syntax::NoSelf.WHERE	R	Mu.WHERE										
X::Syntax::NoSelf.WHY	R	Mu.WHY										
X::Syntax::Number::RadixOutOfRange	A			Perl 6 X::Syntax::Number::RadixOutOfRange							<pre><code>class X::Syntax::Number::RadixOutOfRange does X::Syntax { }</code></pre>Syntax error that is thrown when the radix of a radix number is not allowed, like :1&lt;1&gt;  or :42&lt;ouch&gt; .	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ANumber%3A%3ARadixOutOfRange
X::Syntax::Number::RadixOutOfRange.radix	A			Perl 6 X::Syntax::Number::RadixOutOfRange							<pre><code>method radix() returns Int:D</code></pre>The offensive radix.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ANumber%3A%3ARadixOutOfRange#radix
radix	R	X::Syntax::Number::RadixOutOfRange.radix										
X::Syntax::Number::RadixOutOfRange.message	R	Exception.message										
X::Syntax::Number::RadixOutOfRange.backtrace	R	Exception.backtrace										
X::Syntax::Number::RadixOutOfRange.throw	R	Exception.throw										
X::Syntax::Number::RadixOutOfRange.rethrow	R	Exception.rethrow										
X::Syntax::Number::RadixOutOfRange.fail	R	Exception.fail										
X::Syntax::Number::RadixOutOfRange.gist	R	Exception.gist										
X::Syntax::Number::RadixOutOfRange.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Number::RadixOutOfRange.any	R	Any.any										
X::Syntax::Number::RadixOutOfRange.all	R	Any.all										
X::Syntax::Number::RadixOutOfRange.one	R	Any.one										
X::Syntax::Number::RadixOutOfRange.none	R	Any.none										
X::Syntax::Number::RadixOutOfRange.list	R	Any.list										
X::Syntax::Number::RadixOutOfRange.flat	R	Any.flat										
X::Syntax::Number::RadixOutOfRange.eager	R	Any.eager										
X::Syntax::Number::RadixOutOfRange.elems	R	Any.elems										
X::Syntax::Number::RadixOutOfRange.end	R	Any.end										
X::Syntax::Number::RadixOutOfRange.Str	R	Mu.Str										
X::Syntax::Number::RadixOutOfRange.clone	R	Mu.clone										
X::Syntax::Number::RadixOutOfRange.new	R	Mu.new										
X::Syntax::Number::RadixOutOfRange.bless	R	Mu.bless										
X::Syntax::Number::RadixOutOfRange.CREATE	R	Mu.CREATE										
X::Syntax::Number::RadixOutOfRange.print	R	Mu.print										
X::Syntax::Number::RadixOutOfRange.say	R	Mu.say										
X::Syntax::Number::RadixOutOfRange.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Number::RadixOutOfRange.WHICH	R	Mu.WHICH										
X::Syntax::Number::RadixOutOfRange.WHERE	R	Mu.WHERE										
X::Syntax::Number::RadixOutOfRange.WHY	R	Mu.WHY										
X::Syntax::P5	A			Perl 6 X::Syntax::P5							<pre><code>class X::Syntax::P5 does X::Syntax { }</code></pre>Syntax error thrown when some piece of code is clearly Perl 5, not Perl 6.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AP5
X::Syntax::P5.message	R	Exception.message										
X::Syntax::P5.backtrace	R	Exception.backtrace										
X::Syntax::P5.throw	R	Exception.throw										
X::Syntax::P5.rethrow	R	Exception.rethrow										
X::Syntax::P5.fail	R	Exception.fail										
X::Syntax::P5.gist	R	Exception.gist										
X::Syntax::P5.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::P5.any	R	Any.any										
X::Syntax::P5.all	R	Any.all										
X::Syntax::P5.one	R	Any.one										
X::Syntax::P5.none	R	Any.none										
X::Syntax::P5.list	R	Any.list										
X::Syntax::P5.flat	R	Any.flat										
X::Syntax::P5.eager	R	Any.eager										
X::Syntax::P5.elems	R	Any.elems										
X::Syntax::P5.end	R	Any.end										
X::Syntax::P5.Str	R	Mu.Str										
X::Syntax::P5.clone	R	Mu.clone										
X::Syntax::P5.new	R	Mu.new										
X::Syntax::P5.bless	R	Mu.bless										
X::Syntax::P5.CREATE	R	Mu.CREATE										
X::Syntax::P5.print	R	Mu.print										
X::Syntax::P5.say	R	Mu.say										
X::Syntax::P5.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::P5.WHICH	R	Mu.WHICH										
X::Syntax::P5.WHERE	R	Mu.WHERE										
X::Syntax::P5.WHY	R	Mu.WHY										
X::Syntax::Regex::Adverb	A			Perl 6 X::Syntax::Regex::Adverb							<pre><code>class X::Syntax::Regex::Adverb does X::Syntax { }</code></pre>Syntax error thrown when an unrecognized or illegal regex adverb is encountered.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ARegex%3A%3AAdverb
X::Syntax::Regex::Adverb.adverb	A			Perl 6 X::Syntax::Regex::Adverb							<pre><code>method adverb() returns Str:D</code></pre>Returns the illegally used adverb	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ARegex%3A%3AAdverb#adverb
adverb	R	X::Syntax::Regex::Adverb.adverb										
X::Syntax::Regex::Adverb.construct	A			Perl 6 X::Syntax::Regex::Adverb							<pre><code>method construct() returns Str:D</code></pre>Returns the name of the construct that adverb was used on (m, ms, rx, s, ss).	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ARegex%3A%3AAdverb#construct
construct	R	X::Syntax::Regex::Adverb.construct										
X::Syntax::Regex::Adverb.message	R	Exception.message										
X::Syntax::Regex::Adverb.backtrace	R	Exception.backtrace										
X::Syntax::Regex::Adverb.throw	R	Exception.throw										
X::Syntax::Regex::Adverb.rethrow	R	Exception.rethrow										
X::Syntax::Regex::Adverb.fail	R	Exception.fail										
X::Syntax::Regex::Adverb.gist	R	Exception.gist										
X::Syntax::Regex::Adverb.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Regex::Adverb.any	R	Any.any										
X::Syntax::Regex::Adverb.all	R	Any.all										
X::Syntax::Regex::Adverb.one	R	Any.one										
X::Syntax::Regex::Adverb.none	R	Any.none										
X::Syntax::Regex::Adverb.list	R	Any.list										
X::Syntax::Regex::Adverb.flat	R	Any.flat										
X::Syntax::Regex::Adverb.eager	R	Any.eager										
X::Syntax::Regex::Adverb.elems	R	Any.elems										
X::Syntax::Regex::Adverb.end	R	Any.end										
X::Syntax::Regex::Adverb.Str	R	Mu.Str										
X::Syntax::Regex::Adverb.clone	R	Mu.clone										
X::Syntax::Regex::Adverb.new	R	Mu.new										
X::Syntax::Regex::Adverb.bless	R	Mu.bless										
X::Syntax::Regex::Adverb.CREATE	R	Mu.CREATE										
X::Syntax::Regex::Adverb.print	R	Mu.print										
X::Syntax::Regex::Adverb.say	R	Mu.say										
X::Syntax::Regex::Adverb.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Regex::Adverb.WHICH	R	Mu.WHICH										
X::Syntax::Regex::Adverb.WHERE	R	Mu.WHERE										
X::Syntax::Regex::Adverb.WHY	R	Mu.WHY										
X::Syntax::Regex::SolitaryQuantifier	A			Perl 6 X::Syntax::Regex::SolitaryQuantifier							<pre><code>class X::Syntax::Regex::SolitaryQuantifier does X::Syntax { }</code></pre>Syntax error when a stand alone quantifier (without an preceding atom to quantify) is encountered in a regular expression.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ARegex%3A%3ASolitaryQuantifier
X::Syntax::Regex::SolitaryQuantifier.message	R	Exception.message										
X::Syntax::Regex::SolitaryQuantifier.backtrace	R	Exception.backtrace										
X::Syntax::Regex::SolitaryQuantifier.throw	R	Exception.throw										
X::Syntax::Regex::SolitaryQuantifier.rethrow	R	Exception.rethrow										
X::Syntax::Regex::SolitaryQuantifier.fail	R	Exception.fail										
X::Syntax::Regex::SolitaryQuantifier.gist	R	Exception.gist										
X::Syntax::Regex::SolitaryQuantifier.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Regex::SolitaryQuantifier.any	R	Any.any										
X::Syntax::Regex::SolitaryQuantifier.all	R	Any.all										
X::Syntax::Regex::SolitaryQuantifier.one	R	Any.one										
X::Syntax::Regex::SolitaryQuantifier.none	R	Any.none										
X::Syntax::Regex::SolitaryQuantifier.list	R	Any.list										
X::Syntax::Regex::SolitaryQuantifier.flat	R	Any.flat										
X::Syntax::Regex::SolitaryQuantifier.eager	R	Any.eager										
X::Syntax::Regex::SolitaryQuantifier.elems	R	Any.elems										
X::Syntax::Regex::SolitaryQuantifier.end	R	Any.end										
X::Syntax::Regex::SolitaryQuantifier.Str	R	Mu.Str										
X::Syntax::Regex::SolitaryQuantifier.clone	R	Mu.clone										
X::Syntax::Regex::SolitaryQuantifier.new	R	Mu.new										
X::Syntax::Regex::SolitaryQuantifier.bless	R	Mu.bless										
X::Syntax::Regex::SolitaryQuantifier.CREATE	R	Mu.CREATE										
X::Syntax::Regex::SolitaryQuantifier.print	R	Mu.print										
X::Syntax::Regex::SolitaryQuantifier.say	R	Mu.say										
X::Syntax::Regex::SolitaryQuantifier.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Regex::SolitaryQuantifier.WHICH	R	Mu.WHICH										
X::Syntax::Regex::SolitaryQuantifier.WHERE	R	Mu.WHERE										
X::Syntax::Regex::SolitaryQuantifier.WHY	R	Mu.WHY										
X::Syntax::Reserved	A			Perl 6 X::Syntax::Reserved							<pre><code>class X::Syntax::Reserved does X::Syntax { }</code></pre>Syntax error thrwon when a syntax is used which is reserved for future expansion.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AReserved
X::Syntax::Reserved.reserved	A			Perl 6 X::Syntax::Reserved							<pre><code>method reserved() returns Str:D</code></pre>Returns a text description of the reserved syntax.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AReserved#reserved
reserved	R	X::Syntax::Reserved.reserved										
X::Syntax::Reserved.instead	A			Perl 6 X::Syntax::Reserved							<pre><code>method instead() returns Str</code></pre>Describes what to use instead of the reserved syntax (if anything).	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AReserved#instead
instead	R	X::Syntax::Reserved.instead										
X::Syntax::Reserved.message	R	Exception.message										
X::Syntax::Reserved.backtrace	R	Exception.backtrace										
X::Syntax::Reserved.throw	R	Exception.throw										
X::Syntax::Reserved.rethrow	R	Exception.rethrow										
X::Syntax::Reserved.fail	R	Exception.fail										
X::Syntax::Reserved.gist	R	Exception.gist										
X::Syntax::Reserved.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Reserved.any	R	Any.any										
X::Syntax::Reserved.all	R	Any.all										
X::Syntax::Reserved.one	R	Any.one										
X::Syntax::Reserved.none	R	Any.none										
X::Syntax::Reserved.list	R	Any.list										
X::Syntax::Reserved.flat	R	Any.flat										
X::Syntax::Reserved.eager	R	Any.eager										
X::Syntax::Reserved.elems	R	Any.elems										
X::Syntax::Reserved.end	R	Any.end										
X::Syntax::Reserved.Str	R	Mu.Str										
X::Syntax::Reserved.clone	R	Mu.clone										
X::Syntax::Reserved.new	R	Mu.new										
X::Syntax::Reserved.bless	R	Mu.bless										
X::Syntax::Reserved.CREATE	R	Mu.CREATE										
X::Syntax::Reserved.print	R	Mu.print										
X::Syntax::Reserved.say	R	Mu.say										
X::Syntax::Reserved.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Reserved.WHICH	R	Mu.WHICH										
X::Syntax::Reserved.WHERE	R	Mu.WHERE										
X::Syntax::Reserved.WHY	R	Mu.WHY										
X::Syntax::Self::WithoutObject	A			Perl 6 X::Syntax::Self::WithoutObject							<pre><code>class X::Syntax::Self::WithoutObject does X::Syntax { }</code></pre>Syntax error thrown when self is referenced in a place where no invocant is available.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ASelf%3A%3AWithoutObject
X::Syntax::Self::WithoutObject.message	R	Exception.message										
X::Syntax::Self::WithoutObject.backtrace	R	Exception.backtrace										
X::Syntax::Self::WithoutObject.throw	R	Exception.throw										
X::Syntax::Self::WithoutObject.rethrow	R	Exception.rethrow										
X::Syntax::Self::WithoutObject.fail	R	Exception.fail										
X::Syntax::Self::WithoutObject.gist	R	Exception.gist										
X::Syntax::Self::WithoutObject.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Self::WithoutObject.any	R	Any.any										
X::Syntax::Self::WithoutObject.all	R	Any.all										
X::Syntax::Self::WithoutObject.one	R	Any.one										
X::Syntax::Self::WithoutObject.none	R	Any.none										
X::Syntax::Self::WithoutObject.list	R	Any.list										
X::Syntax::Self::WithoutObject.flat	R	Any.flat										
X::Syntax::Self::WithoutObject.eager	R	Any.eager										
X::Syntax::Self::WithoutObject.elems	R	Any.elems										
X::Syntax::Self::WithoutObject.end	R	Any.end										
X::Syntax::Self::WithoutObject.Str	R	Mu.Str										
X::Syntax::Self::WithoutObject.clone	R	Mu.clone										
X::Syntax::Self::WithoutObject.new	R	Mu.new										
X::Syntax::Self::WithoutObject.bless	R	Mu.bless										
X::Syntax::Self::WithoutObject.CREATE	R	Mu.CREATE										
X::Syntax::Self::WithoutObject.print	R	Mu.print										
X::Syntax::Self::WithoutObject.say	R	Mu.say										
X::Syntax::Self::WithoutObject.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Self::WithoutObject.WHICH	R	Mu.WHICH										
X::Syntax::Self::WithoutObject.WHERE	R	Mu.WHERE										
X::Syntax::Self::WithoutObject.WHY	R	Mu.WHY										
X::Syntax::Signature::InvocantMarker	A			Perl 6 X::Syntax::Signature::InvocantMarker							<pre><code>class X::Syntax::Signature::InvocantMarker does X::Syntax { }</code></pre>Syntax error when the invocant in a signature is anywhere else than after the first parameter.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ASignature%3A%3AInvocantMarker
X::Syntax::Signature::InvocantMarker.message	R	Exception.message										
X::Syntax::Signature::InvocantMarker.backtrace	R	Exception.backtrace										
X::Syntax::Signature::InvocantMarker.throw	R	Exception.throw										
X::Syntax::Signature::InvocantMarker.rethrow	R	Exception.rethrow										
X::Syntax::Signature::InvocantMarker.fail	R	Exception.fail										
X::Syntax::Signature::InvocantMarker.gist	R	Exception.gist										
X::Syntax::Signature::InvocantMarker.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Signature::InvocantMarker.any	R	Any.any										
X::Syntax::Signature::InvocantMarker.all	R	Any.all										
X::Syntax::Signature::InvocantMarker.one	R	Any.one										
X::Syntax::Signature::InvocantMarker.none	R	Any.none										
X::Syntax::Signature::InvocantMarker.list	R	Any.list										
X::Syntax::Signature::InvocantMarker.flat	R	Any.flat										
X::Syntax::Signature::InvocantMarker.eager	R	Any.eager										
X::Syntax::Signature::InvocantMarker.elems	R	Any.elems										
X::Syntax::Signature::InvocantMarker.end	R	Any.end										
X::Syntax::Signature::InvocantMarker.Str	R	Mu.Str										
X::Syntax::Signature::InvocantMarker.clone	R	Mu.clone										
X::Syntax::Signature::InvocantMarker.new	R	Mu.new										
X::Syntax::Signature::InvocantMarker.bless	R	Mu.bless										
X::Syntax::Signature::InvocantMarker.CREATE	R	Mu.CREATE										
X::Syntax::Signature::InvocantMarker.print	R	Mu.print										
X::Syntax::Signature::InvocantMarker.say	R	Mu.say										
X::Syntax::Signature::InvocantMarker.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Signature::InvocantMarker.WHICH	R	Mu.WHICH										
X::Syntax::Signature::InvocantMarker.WHERE	R	Mu.WHERE										
X::Syntax::Signature::InvocantMarker.WHY	R	Mu.WHY										
X::Syntax::Term::MissingInitializer	A			Perl 6 X::Syntax::Term::MissingInitializer							<pre><code>class X::Syntax::Term::MissingInitializer does X::Syntax { }</code></pre>Syntax error when a term (a backslash variable) is declared without initialization assignment.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3ATerm%3A%3AMissingInitializer
X::Syntax::Term::MissingInitializer.message	R	Exception.message										
X::Syntax::Term::MissingInitializer.backtrace	R	Exception.backtrace										
X::Syntax::Term::MissingInitializer.throw	R	Exception.throw										
X::Syntax::Term::MissingInitializer.rethrow	R	Exception.rethrow										
X::Syntax::Term::MissingInitializer.fail	R	Exception.fail										
X::Syntax::Term::MissingInitializer.gist	R	Exception.gist										
X::Syntax::Term::MissingInitializer.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Term::MissingInitializer.any	R	Any.any										
X::Syntax::Term::MissingInitializer.all	R	Any.all										
X::Syntax::Term::MissingInitializer.one	R	Any.one										
X::Syntax::Term::MissingInitializer.none	R	Any.none										
X::Syntax::Term::MissingInitializer.list	R	Any.list										
X::Syntax::Term::MissingInitializer.flat	R	Any.flat										
X::Syntax::Term::MissingInitializer.eager	R	Any.eager										
X::Syntax::Term::MissingInitializer.elems	R	Any.elems										
X::Syntax::Term::MissingInitializer.end	R	Any.end										
X::Syntax::Term::MissingInitializer.Str	R	Mu.Str										
X::Syntax::Term::MissingInitializer.clone	R	Mu.clone										
X::Syntax::Term::MissingInitializer.new	R	Mu.new										
X::Syntax::Term::MissingInitializer.bless	R	Mu.bless										
X::Syntax::Term::MissingInitializer.CREATE	R	Mu.CREATE										
X::Syntax::Term::MissingInitializer.print	R	Mu.print										
X::Syntax::Term::MissingInitializer.say	R	Mu.say										
X::Syntax::Term::MissingInitializer.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Term::MissingInitializer.WHICH	R	Mu.WHICH										
X::Syntax::Term::MissingInitializer.WHERE	R	Mu.WHERE										
X::Syntax::Term::MissingInitializer.WHY	R	Mu.WHY										
X::Syntax::UnlessElse	A			Perl 6 X::Syntax::UnlessElse							<pre><code>class X::Syntax::UnlessElse does X::Syntax { }</code></pre>Syntax error thrown when an unless clause is followed by an else clause.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AUnlessElse
X::Syntax::UnlessElse.message	R	Exception.message										
X::Syntax::UnlessElse.backtrace	R	Exception.backtrace										
X::Syntax::UnlessElse.throw	R	Exception.throw										
X::Syntax::UnlessElse.rethrow	R	Exception.rethrow										
X::Syntax::UnlessElse.fail	R	Exception.fail										
X::Syntax::UnlessElse.gist	R	Exception.gist										
X::Syntax::UnlessElse.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::UnlessElse.any	R	Any.any										
X::Syntax::UnlessElse.all	R	Any.all										
X::Syntax::UnlessElse.one	R	Any.one										
X::Syntax::UnlessElse.none	R	Any.none										
X::Syntax::UnlessElse.list	R	Any.list										
X::Syntax::UnlessElse.flat	R	Any.flat										
X::Syntax::UnlessElse.eager	R	Any.eager										
X::Syntax::UnlessElse.elems	R	Any.elems										
X::Syntax::UnlessElse.end	R	Any.end										
X::Syntax::UnlessElse.Str	R	Mu.Str										
X::Syntax::UnlessElse.clone	R	Mu.clone										
X::Syntax::UnlessElse.new	R	Mu.new										
X::Syntax::UnlessElse.bless	R	Mu.bless										
X::Syntax::UnlessElse.CREATE	R	Mu.CREATE										
X::Syntax::UnlessElse.print	R	Mu.print										
X::Syntax::UnlessElse.say	R	Mu.say										
X::Syntax::UnlessElse.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::UnlessElse.WHICH	R	Mu.WHICH										
X::Syntax::UnlessElse.WHERE	R	Mu.WHERE										
X::Syntax::UnlessElse.WHY	R	Mu.WHY										
X::Syntax::Variable::Match	A			Perl 6 X::Syntax::Variable::Match							<pre><code>class X::Syntax::Variable::Match does X::Syntax { }</code></pre>Syntax error thrown when a match variable like $&lt;thing&gt;  was declared.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AVariable%3A%3AMatch
X::Syntax::Variable::Match.message	R	Exception.message										
X::Syntax::Variable::Match.backtrace	R	Exception.backtrace										
X::Syntax::Variable::Match.throw	R	Exception.throw										
X::Syntax::Variable::Match.rethrow	R	Exception.rethrow										
X::Syntax::Variable::Match.fail	R	Exception.fail										
X::Syntax::Variable::Match.gist	R	Exception.gist										
X::Syntax::Variable::Match.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Variable::Match.any	R	Any.any										
X::Syntax::Variable::Match.all	R	Any.all										
X::Syntax::Variable::Match.one	R	Any.one										
X::Syntax::Variable::Match.none	R	Any.none										
X::Syntax::Variable::Match.list	R	Any.list										
X::Syntax::Variable::Match.flat	R	Any.flat										
X::Syntax::Variable::Match.eager	R	Any.eager										
X::Syntax::Variable::Match.elems	R	Any.elems										
X::Syntax::Variable::Match.end	R	Any.end										
X::Syntax::Variable::Match.Str	R	Mu.Str										
X::Syntax::Variable::Match.clone	R	Mu.clone										
X::Syntax::Variable::Match.new	R	Mu.new										
X::Syntax::Variable::Match.bless	R	Mu.bless										
X::Syntax::Variable::Match.CREATE	R	Mu.CREATE										
X::Syntax::Variable::Match.print	R	Mu.print										
X::Syntax::Variable::Match.say	R	Mu.say										
X::Syntax::Variable::Match.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Variable::Match.WHICH	R	Mu.WHICH										
X::Syntax::Variable::Match.WHERE	R	Mu.WHERE										
X::Syntax::Variable::Match.WHY	R	Mu.WHY										
X::Syntax::Variable::Numeric	A			Perl 6 X::Syntax::Variable::Numeric							<pre><code>class X::Syntax::Variable::Numeric does X::Syntax { }</code></pre>Syntax error thrown when trying to declare numeric symbols.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AVariable%3A%3ANumeric
X::Syntax::Variable::Numeric.what	A			Perl 6 X::Syntax::Variable::Numeric							<pre><code>method what returns Str:D</code></pre>Returns a verbal description of the kind of symbol that was declared (variable, parameter, attribute).	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AVariable%3A%3ANumeric#what
X::Syntax::Variable::Numeric.message	R	Exception.message										
X::Syntax::Variable::Numeric.backtrace	R	Exception.backtrace										
X::Syntax::Variable::Numeric.throw	R	Exception.throw										
X::Syntax::Variable::Numeric.rethrow	R	Exception.rethrow										
X::Syntax::Variable::Numeric.fail	R	Exception.fail										
X::Syntax::Variable::Numeric.gist	R	Exception.gist										
X::Syntax::Variable::Numeric.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Variable::Numeric.any	R	Any.any										
X::Syntax::Variable::Numeric.all	R	Any.all										
X::Syntax::Variable::Numeric.one	R	Any.one										
X::Syntax::Variable::Numeric.none	R	Any.none										
X::Syntax::Variable::Numeric.list	R	Any.list										
X::Syntax::Variable::Numeric.flat	R	Any.flat										
X::Syntax::Variable::Numeric.eager	R	Any.eager										
X::Syntax::Variable::Numeric.elems	R	Any.elems										
X::Syntax::Variable::Numeric.end	R	Any.end										
X::Syntax::Variable::Numeric.Str	R	Mu.Str										
X::Syntax::Variable::Numeric.clone	R	Mu.clone										
X::Syntax::Variable::Numeric.new	R	Mu.new										
X::Syntax::Variable::Numeric.bless	R	Mu.bless										
X::Syntax::Variable::Numeric.CREATE	R	Mu.CREATE										
X::Syntax::Variable::Numeric.print	R	Mu.print										
X::Syntax::Variable::Numeric.say	R	Mu.say										
X::Syntax::Variable::Numeric.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Variable::Numeric.WHICH	R	Mu.WHICH										
X::Syntax::Variable::Numeric.WHERE	R	Mu.WHERE										
X::Syntax::Variable::Numeric.WHY	R	Mu.WHY										
X::Syntax::Variable::Twigil	A			Perl 6 X::Syntax::Variable::Twigil							<pre><code>class X::Syntax::Variable::Twigil does X::Syntax { }</code></pre>Syntax error thrown when a variable with a twigil is used in an incompatible declaration.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AVariable%3A%3ATwigil
X::Syntax::Variable::Twigil.twigil	A			Perl 6 X::Syntax::Variable::Twigil							<pre><code>method twigil() returns Str:D</code></pre>Returns the twigil that was illegally used	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AVariable%3A%3ATwigil#twigil
X::Syntax::Variable::Twigil.scope	A			Perl 6 X::Syntax::Variable::Twigil							<pre><code>method scope() returns Str:D</code></pre>Returns the scope that did not harmonize with the twigil.	http://doc.perl6.org/type/X%3A%3ASyntax%3A%3AVariable%3A%3ATwigil#scope
X::Syntax::Variable::Twigil.message	R	Exception.message										
X::Syntax::Variable::Twigil.backtrace	R	Exception.backtrace										
X::Syntax::Variable::Twigil.throw	R	Exception.throw										
X::Syntax::Variable::Twigil.rethrow	R	Exception.rethrow										
X::Syntax::Variable::Twigil.fail	R	Exception.fail										
X::Syntax::Variable::Twigil.gist	R	Exception.gist										
X::Syntax::Variable::Twigil.ACCEPTS	R	Any.ACCEPTS										
X::Syntax::Variable::Twigil.any	R	Any.any										
X::Syntax::Variable::Twigil.all	R	Any.all										
X::Syntax::Variable::Twigil.one	R	Any.one										
X::Syntax::Variable::Twigil.none	R	Any.none										
X::Syntax::Variable::Twigil.list	R	Any.list										
X::Syntax::Variable::Twigil.flat	R	Any.flat										
X::Syntax::Variable::Twigil.eager	R	Any.eager										
X::Syntax::Variable::Twigil.elems	R	Any.elems										
X::Syntax::Variable::Twigil.end	R	Any.end										
X::Syntax::Variable::Twigil.Str	R	Mu.Str										
X::Syntax::Variable::Twigil.clone	R	Mu.clone										
X::Syntax::Variable::Twigil.new	R	Mu.new										
X::Syntax::Variable::Twigil.bless	R	Mu.bless										
X::Syntax::Variable::Twigil.CREATE	R	Mu.CREATE										
X::Syntax::Variable::Twigil.print	R	Mu.print										
X::Syntax::Variable::Twigil.say	R	Mu.say										
X::Syntax::Variable::Twigil.ACCEPTS	R	Mu.ACCEPTS										
X::Syntax::Variable::Twigil.WHICH	R	Mu.WHICH										
X::Syntax::Variable::Twigil.WHERE	R	Mu.WHERE										
X::Syntax::Variable::Twigil.WHY	R	Mu.WHY										
X::Temporal	A			Perl 6 X::Temporal							<pre><code>role X::Temporal is Exception { }</code></pre>A common exception type for all errors related to DateTime or Date.	http://doc.perl6.org/type/X%3A%3ATemporal
X::Temporal.message	R	Exception.message										
X::Temporal.backtrace	R	Exception.backtrace										
X::Temporal.throw	R	Exception.throw										
X::Temporal.rethrow	R	Exception.rethrow										
X::Temporal.fail	R	Exception.fail										
X::Temporal.gist	R	Exception.gist										
X::Temporal.ACCEPTS	R	Any.ACCEPTS										
X::Temporal.any	R	Any.any										
X::Temporal.all	R	Any.all										
X::Temporal.one	R	Any.one										
X::Temporal.none	R	Any.none										
X::Temporal.list	R	Any.list										
X::Temporal.flat	R	Any.flat										
X::Temporal.eager	R	Any.eager										
X::Temporal.elems	R	Any.elems										
X::Temporal.end	R	Any.end										
X::Temporal.Str	R	Mu.Str										
X::Temporal.clone	R	Mu.clone										
X::Temporal.new	R	Mu.new										
X::Temporal.bless	R	Mu.bless										
X::Temporal.CREATE	R	Mu.CREATE										
X::Temporal.print	R	Mu.print										
X::Temporal.say	R	Mu.say										
X::Temporal.ACCEPTS	R	Mu.ACCEPTS										
X::Temporal.WHICH	R	Mu.WHICH										
X::Temporal.WHERE	R	Mu.WHERE										
X::Temporal.WHY	R	Mu.WHY										
X::Temporal::Truncation	A			Perl 6 X::Temporal::Truncation							<pre><code>class X::Temporal::Truncation does X::Temporal { }</code></pre>Thrown when DateTime.truncated-to or Date.truncated-to are called in a way that doesn't make sense.	http://doc.perl6.org/type/X%3A%3ATemporal%3A%3ATruncation
X::Temporal::Truncation.invocant	A			Perl 6 X::Temporal::Truncation							Returns the object on which the failed truncated-to method was called.	http://doc.perl6.org/type/X%3A%3ATemporal%3A%3ATruncation#invocant
X::Temporal::Truncation.error	A			Perl 6 X::Temporal::Truncation							Returns a textual description of what actually went wrong.	http://doc.perl6.org/type/X%3A%3ATemporal%3A%3ATruncation#error
error	R	X::Temporal::Truncation.error										
X::Temporal::Truncation.message	R	Exception.message										
X::Temporal::Truncation.backtrace	R	Exception.backtrace										
X::Temporal::Truncation.throw	R	Exception.throw										
X::Temporal::Truncation.rethrow	R	Exception.rethrow										
X::Temporal::Truncation.fail	R	Exception.fail										
X::Temporal::Truncation.gist	R	Exception.gist										
X::Temporal::Truncation.ACCEPTS	R	Any.ACCEPTS										
X::Temporal::Truncation.any	R	Any.any										
X::Temporal::Truncation.all	R	Any.all										
X::Temporal::Truncation.one	R	Any.one										
X::Temporal::Truncation.none	R	Any.none										
X::Temporal::Truncation.list	R	Any.list										
X::Temporal::Truncation.flat	R	Any.flat										
X::Temporal::Truncation.eager	R	Any.eager										
X::Temporal::Truncation.elems	R	Any.elems										
X::Temporal::Truncation.end	R	Any.end										
X::Temporal::Truncation.Str	R	Mu.Str										
X::Temporal::Truncation.clone	R	Mu.clone										
X::Temporal::Truncation.new	R	Mu.new										
X::Temporal::Truncation.bless	R	Mu.bless										
X::Temporal::Truncation.CREATE	R	Mu.CREATE										
X::Temporal::Truncation.print	R	Mu.print										
X::Temporal::Truncation.say	R	Mu.say										
X::Temporal::Truncation.ACCEPTS	R	Mu.ACCEPTS										
X::Temporal::Truncation.WHICH	R	Mu.WHICH										
X::Temporal::Truncation.WHERE	R	Mu.WHERE										
X::Temporal::Truncation.WHY	R	Mu.WHY										
X::TypeCheck	A			Perl 6 X::TypeCheck							<pre><code>class X::TypeCheck is Exception { }</code></pre>Error class thrown when a type check fails.	http://doc.perl6.org/type/X%3A%3ATypeCheck
X::TypeCheck.operation	A			Perl 6 X::TypeCheck							<pre><code>method operation() returns Str:D</code></pre>Returns a string description of the operation that failed, for example "assignment", "binding", "return".	http://doc.perl6.org/type/X%3A%3ATypeCheck#operation
operation	R	X::TypeCheck.operation										
X::TypeCheck.got	A			Perl 6 X::TypeCheck							<pre><code>method got()</code></pre>Returns the object that failed to type check	http://doc.perl6.org/type/X%3A%3ATypeCheck#got
X::TypeCheck.expected	A			Perl 6 X::TypeCheck							<pre><code>method expected()</code></pre>Returns the type object against which the check failed.	http://doc.perl6.org/type/X%3A%3ATypeCheck#expected
expected	R	X::TypeCheck.expected										
X::TypeCheck.message	R	Exception.message										
X::TypeCheck.backtrace	R	Exception.backtrace										
X::TypeCheck.throw	R	Exception.throw										
X::TypeCheck.rethrow	R	Exception.rethrow										
X::TypeCheck.fail	R	Exception.fail										
X::TypeCheck.gist	R	Exception.gist										
X::TypeCheck.ACCEPTS	R	Any.ACCEPTS										
X::TypeCheck.any	R	Any.any										
X::TypeCheck.all	R	Any.all										
X::TypeCheck.one	R	Any.one										
X::TypeCheck.none	R	Any.none										
X::TypeCheck.list	R	Any.list										
X::TypeCheck.flat	R	Any.flat										
X::TypeCheck.eager	R	Any.eager										
X::TypeCheck.elems	R	Any.elems										
X::TypeCheck.end	R	Any.end										
X::TypeCheck.Str	R	Mu.Str										
X::TypeCheck.clone	R	Mu.clone										
X::TypeCheck.new	R	Mu.new										
X::TypeCheck.bless	R	Mu.bless										
X::TypeCheck.CREATE	R	Mu.CREATE										
X::TypeCheck.print	R	Mu.print										
X::TypeCheck.say	R	Mu.say										
X::TypeCheck.ACCEPTS	R	Mu.ACCEPTS										
X::TypeCheck.WHICH	R	Mu.WHICH										
X::TypeCheck.WHERE	R	Mu.WHERE										
X::TypeCheck.WHY	R	Mu.WHY										
X::TypeCheck::Assignment	A			Perl 6 X::TypeCheck::Assignment							<pre><code>class X::TypeCheck::Assignment is X::TypeCheck { }</code></pre>Error class thrown when the type check of an assignment fails.	http://doc.perl6.org/type/X%3A%3ATypeCheck%3A%3AAssignment
X::TypeCheck::Assignment.operation	R	X::TypeCheck.operation										
X::TypeCheck::Assignment.got	R	X::TypeCheck.got										
X::TypeCheck::Assignment.expected	R	X::TypeCheck.expected										
X::TypeCheck::Assignment.message	R	Exception.message										
X::TypeCheck::Assignment.backtrace	R	Exception.backtrace										
X::TypeCheck::Assignment.throw	R	Exception.throw										
X::TypeCheck::Assignment.rethrow	R	Exception.rethrow										
X::TypeCheck::Assignment.fail	R	Exception.fail										
X::TypeCheck::Assignment.gist	R	Exception.gist										
X::TypeCheck::Assignment.ACCEPTS	R	Any.ACCEPTS										
X::TypeCheck::Assignment.any	R	Any.any										
X::TypeCheck::Assignment.all	R	Any.all										
X::TypeCheck::Assignment.one	R	Any.one										
X::TypeCheck::Assignment.none	R	Any.none										
X::TypeCheck::Assignment.list	R	Any.list										
X::TypeCheck::Assignment.flat	R	Any.flat										
X::TypeCheck::Assignment.eager	R	Any.eager										
X::TypeCheck::Assignment.elems	R	Any.elems										
X::TypeCheck::Assignment.end	R	Any.end										
X::TypeCheck::Assignment.Str	R	Mu.Str										
X::TypeCheck::Assignment.clone	R	Mu.clone										
X::TypeCheck::Assignment.new	R	Mu.new										
X::TypeCheck::Assignment.bless	R	Mu.bless										
X::TypeCheck::Assignment.CREATE	R	Mu.CREATE										
X::TypeCheck::Assignment.print	R	Mu.print										
X::TypeCheck::Assignment.say	R	Mu.say										
X::TypeCheck::Assignment.ACCEPTS	R	Mu.ACCEPTS										
X::TypeCheck::Assignment.WHICH	R	Mu.WHICH										
X::TypeCheck::Assignment.WHERE	R	Mu.WHERE										
X::TypeCheck::Assignment.WHY	R	Mu.WHY										
X::TypeCheck::Binding	A			Perl 6 X::TypeCheck::Binding							<pre><code>class X::TypeCheck::Binding is X::TypeCheck { }</code></pre>Thrown when the type check of a binding operation fails.	http://doc.perl6.org/type/X%3A%3ATypeCheck%3A%3ABinding
X::TypeCheck::Binding.operation	R	X::TypeCheck.operation										
X::TypeCheck::Binding.got	R	X::TypeCheck.got										
X::TypeCheck::Binding.expected	R	X::TypeCheck.expected										
X::TypeCheck::Binding.message	R	Exception.message										
X::TypeCheck::Binding.backtrace	R	Exception.backtrace										
X::TypeCheck::Binding.throw	R	Exception.throw										
X::TypeCheck::Binding.rethrow	R	Exception.rethrow										
X::TypeCheck::Binding.fail	R	Exception.fail										
X::TypeCheck::Binding.gist	R	Exception.gist										
X::TypeCheck::Binding.ACCEPTS	R	Any.ACCEPTS										
X::TypeCheck::Binding.any	R	Any.any										
X::TypeCheck::Binding.all	R	Any.all										
X::TypeCheck::Binding.one	R	Any.one										
X::TypeCheck::Binding.none	R	Any.none										
X::TypeCheck::Binding.list	R	Any.list										
X::TypeCheck::Binding.flat	R	Any.flat										
X::TypeCheck::Binding.eager	R	Any.eager										
X::TypeCheck::Binding.elems	R	Any.elems										
X::TypeCheck::Binding.end	R	Any.end										
X::TypeCheck::Binding.Str	R	Mu.Str										
X::TypeCheck::Binding.clone	R	Mu.clone										
X::TypeCheck::Binding.new	R	Mu.new										
X::TypeCheck::Binding.bless	R	Mu.bless										
X::TypeCheck::Binding.CREATE	R	Mu.CREATE										
X::TypeCheck::Binding.print	R	Mu.print										
X::TypeCheck::Binding.say	R	Mu.say										
X::TypeCheck::Binding.ACCEPTS	R	Mu.ACCEPTS										
X::TypeCheck::Binding.WHICH	R	Mu.WHICH										
X::TypeCheck::Binding.WHERE	R	Mu.WHERE										
X::TypeCheck::Binding.WHY	R	Mu.WHY										
X::TypeCheck::Return	A			Perl 6 X::TypeCheck::Return							<pre><code>class X::TypeCheck::Return is X::TypeCheck { }</code></pre>Thrown when a return type check fails.	http://doc.perl6.org/type/X%3A%3ATypeCheck%3A%3AReturn
X::TypeCheck::Return.operation	R	X::TypeCheck.operation										
X::TypeCheck::Return.got	R	X::TypeCheck.got										
X::TypeCheck::Return.expected	R	X::TypeCheck.expected										
X::TypeCheck::Return.message	R	Exception.message										
X::TypeCheck::Return.backtrace	R	Exception.backtrace										
X::TypeCheck::Return.throw	R	Exception.throw										
X::TypeCheck::Return.rethrow	R	Exception.rethrow										
X::TypeCheck::Return.fail	R	Exception.fail										
X::TypeCheck::Return.gist	R	Exception.gist										
X::TypeCheck::Return.ACCEPTS	R	Any.ACCEPTS										
X::TypeCheck::Return.any	R	Any.any										
X::TypeCheck::Return.all	R	Any.all										
X::TypeCheck::Return.one	R	Any.one										
X::TypeCheck::Return.none	R	Any.none										
X::TypeCheck::Return.list	R	Any.list										
X::TypeCheck::Return.flat	R	Any.flat										
X::TypeCheck::Return.eager	R	Any.eager										
X::TypeCheck::Return.elems	R	Any.elems										
X::TypeCheck::Return.end	R	Any.end										
X::TypeCheck::Return.Str	R	Mu.Str										
X::TypeCheck::Return.clone	R	Mu.clone										
X::TypeCheck::Return.new	R	Mu.new										
X::TypeCheck::Return.bless	R	Mu.bless										
X::TypeCheck::Return.CREATE	R	Mu.CREATE										
X::TypeCheck::Return.print	R	Mu.print										
X::TypeCheck::Return.say	R	Mu.say										
X::TypeCheck::Return.ACCEPTS	R	Mu.ACCEPTS										
X::TypeCheck::Return.WHICH	R	Mu.WHICH										
X::TypeCheck::Return.WHERE	R	Mu.WHERE										
X::TypeCheck::Return.WHY	R	Mu.WHY										
X::TypeCheck::Splice	A			Perl 6 X::TypeCheck::Splice							<pre><code>class X::TypeCheck::Splice is X::TypeCheck does X::Comp { }</code></pre>Compile time error thrown when a Macro or an unquote/hole in a quasi quote does not return an AST.	http://doc.perl6.org/type/X%3A%3ATypeCheck%3A%3ASplice
X::TypeCheck::Splice.action	A			Perl 6 X::TypeCheck::Splice							<pre><code>method action() returns Str:D</code></pre>Returns a verbal description of the action that triggered the error, "macro application" or "unquote evaluation".	http://doc.perl6.org/type/X%3A%3ATypeCheck%3A%3ASplice#action
action	R	X::TypeCheck::Splice.action										
X::TypeCheck::Splice.operation	R	X::TypeCheck.operation										
X::TypeCheck::Splice.got	R	X::TypeCheck.got										
X::TypeCheck::Splice.expected	R	X::TypeCheck.expected										
X::TypeCheck::Splice.message	R	Exception.message										
X::TypeCheck::Splice.backtrace	R	Exception.backtrace										
X::TypeCheck::Splice.throw	R	Exception.throw										
X::TypeCheck::Splice.rethrow	R	Exception.rethrow										
X::TypeCheck::Splice.fail	R	Exception.fail										
X::TypeCheck::Splice.gist	R	Exception.gist										
X::TypeCheck::Splice.ACCEPTS	R	Any.ACCEPTS										
X::TypeCheck::Splice.any	R	Any.any										
X::TypeCheck::Splice.all	R	Any.all										
X::TypeCheck::Splice.one	R	Any.one										
X::TypeCheck::Splice.none	R	Any.none										
X::TypeCheck::Splice.list	R	Any.list										
X::TypeCheck::Splice.flat	R	Any.flat										
X::TypeCheck::Splice.eager	R	Any.eager										
X::TypeCheck::Splice.elems	R	Any.elems										
X::TypeCheck::Splice.end	R	Any.end										
X::TypeCheck::Splice.Str	R	Mu.Str										
X::TypeCheck::Splice.clone	R	Mu.clone										
X::TypeCheck::Splice.new	R	Mu.new										
X::TypeCheck::Splice.bless	R	Mu.bless										
X::TypeCheck::Splice.CREATE	R	Mu.CREATE										
X::TypeCheck::Splice.print	R	Mu.print										
X::TypeCheck::Splice.say	R	Mu.say										
X::TypeCheck::Splice.ACCEPTS	R	Mu.ACCEPTS										
X::TypeCheck::Splice.WHICH	R	Mu.WHICH										
X::TypeCheck::Splice.WHERE	R	Mu.WHERE										
X::TypeCheck::Splice.WHY	R	Mu.WHY										
X::Undeclared	A			Perl 6 X::Undeclared							<pre><code>class X::Undeclared does X::Comp</code></pre>Thrown when the compiler encounters a symbol that has not been declared, but needs to be.	http://doc.perl6.org/type/X%3A%3AUndeclared
X::Undeclared.symbol	A			Perl 6 X::Undeclared							Returns the name of the undeclared symbol	http://doc.perl6.org/type/X%3A%3AUndeclared#symbol
X::Undeclared.what	A			Perl 6 X::Undeclared							Returns the kind of symbol that was not declared (for example variable, type, routine).	http://doc.perl6.org/type/X%3A%3AUndeclared#what
X::Undeclared.filename	R	X::Comp.filename										
X::Undeclared.line	R	X::Comp.line										
X::Undeclared.column	R	X::Comp.column										
X::Undeclared.message	R	Exception.message										
X::Undeclared.backtrace	R	Exception.backtrace										
X::Undeclared.throw	R	Exception.throw										
X::Undeclared.rethrow	R	Exception.rethrow										
X::Undeclared.fail	R	Exception.fail										
X::Undeclared.gist	R	Exception.gist										
X::Undeclared.ACCEPTS	R	Any.ACCEPTS										
X::Undeclared.any	R	Any.any										
X::Undeclared.all	R	Any.all										
X::Undeclared.one	R	Any.one										
X::Undeclared.none	R	Any.none										
X::Undeclared.list	R	Any.list										
X::Undeclared.flat	R	Any.flat										
X::Undeclared.eager	R	Any.eager										
X::Undeclared.elems	R	Any.elems										
X::Undeclared.end	R	Any.end										
X::Undeclared.Str	R	Mu.Str										
X::Undeclared.clone	R	Mu.clone										
X::Undeclared.new	R	Mu.new										
X::Undeclared.bless	R	Mu.bless										
X::Undeclared.CREATE	R	Mu.CREATE										
X::Undeclared.print	R	Mu.print										
X::Undeclared.say	R	Mu.say										
X::Undeclared.ACCEPTS	R	Mu.ACCEPTS										
X::Undeclared.WHICH	R	Mu.WHICH										
X::Undeclared.WHERE	R	Mu.WHERE										
X::Undeclared.WHY	R	Mu.WHY										
nativeInt	A			Perl 6 nativeInt							<pre><code>class int is Int is repr('P6int') { }</code></pre>TODO	http://doc.perl6.org/type/nativeInt
nativeInt.abs	R	Cool.abs										
nativeInt.conj	R	Cool.conj										
nativeInt.sqrt	R	Cool.sqrt										
nativeInt.sign	R	Cool.sign										
nativeInt.rand	R	Cool.rand										
nativeInt.sin	R	Cool.sin										
nativeInt.asin	R	Cool.asin										
nativeInt.cos	R	Cool.cos										
nativeInt.acos	R	Cool.acos										
nativeInt.tan	R	Cool.tan										
nativeInt.atan	R	Cool.atan										
nativeInt.atan2	R	Cool.atan2										
nativeInt.sec	R	Cool.sec										
nativeInt.asec	R	Cool.asec										
nativeInt.cosec	R	Cool.cosec										
nativeInt.acosec	R	Cool.acosec										
nativeInt.cotan	R	Cool.cotan										
nativeInt.acotan	R	Cool.acotan										
nativeInt.sinh	R	Cool.sinh										
nativeInt.asinh	R	Cool.asinh										
nativeInt.cosh	R	Cool.cosh										
nativeInt.acosh	R	Cool.acosh										
nativeInt.tanh	R	Cool.tanh										
nativeInt.atanh	R	Cool.atanh										
nativeInt.log	R	Cool.log										
nativeInt.exp	R	Cool.exp										
nativeInt.round	R	Cool.round										
nativeInt.floor	R	Cool.floor										
nativeInt.ceiling	R	Cool.ceiling										
nativeInt.ord	R	Cool.ord										
nativeInt.chr	R	Cool.chr										
nativeInt.chars	R	Cool.chars										
nativeInt.codes	R	Cool.codes										
nativeInt.flip	R	Cool.flip										
nativeInt.trim	R	Cool.trim										
nativeInt.trim-leading	R	Cool.trim-leading										
nativeInt.trim-trailing	R	Cool.trim-trailing										
nativeInt.lc	R	Cool.lc										
nativeInt.uc	R	Cool.uc										
nativeInt.tc	R	Cool.tc										
nativeInt.tclc	R	Cool.tclc										
nativeInt.wordcase	R	Cool.wordcase										
nativeInt.chop	R	Cool.chop										
nativeInt.chomp	R	Cool.chomp										
nativeInt.words	R	Cool.words										
nativeInt.IO	R	Cool.IO										
nativeInt.ACCEPTS	R	Any.ACCEPTS										
nativeInt.any	R	Any.any										
nativeInt.all	R	Any.all										
nativeInt.one	R	Any.one										
nativeInt.none	R	Any.none										
nativeInt.list	R	Any.list										
nativeInt.flat	R	Any.flat										
nativeInt.eager	R	Any.eager										
nativeInt.elems	R	Any.elems										
nativeInt.end	R	Any.end										
nativeInt.Str	R	Mu.Str										
nativeInt.clone	R	Mu.clone										
nativeInt.new	R	Mu.new										
nativeInt.bless	R	Mu.bless										
nativeInt.CREATE	R	Mu.CREATE										
nativeInt.print	R	Mu.print										
nativeInt.say	R	Mu.say										
nativeInt.ACCEPTS	R	Mu.ACCEPTS										
nativeInt.WHICH	R	Mu.WHICH										
nativeInt.WHERE	R	Mu.WHERE										
nativeInt.WHY	R	Mu.WHY										
