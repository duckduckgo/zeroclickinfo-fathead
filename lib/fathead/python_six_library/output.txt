PY2	A										<section class="prog__container"><p>A boolean indicating if the code is running on Python 2.</p></section>	https://pythonhosted.org/six/index.html
PY3	A										<section class="prog__container"><p>A boolean indicating if the code is running on Python 3.</p></section>	https://pythonhosted.org/six/index.html
class_types	A										<section class="prog__container"><p>Possible class types.  In Python 2, this encompasses old-style and new-style\nclasses.  In Python 3, this is just new-styles.</p></section>	https://pythonhosted.org/six/index.html
integer_types	A										<section class="prog__container"><p>Possible integer types.  In Python 2, this is long and\nint, and in Python 3, just int.</p></section>	https://pythonhosted.org/six/index.html
string_types	A										<section class="prog__container"><p>Possible types for text data.  This is basestring() in Python 2 and\nstr in Python 3.</p></section>	https://pythonhosted.org/six/index.html
text_type	A										<section class="prog__container"><p>Type for representing (Unicode) textual data.  This is unicode() in\nPython 2 and str in Python 3.</p></section>	https://pythonhosted.org/six/index.html
binary_type	A										<section class="prog__container"><p>Type for representing binary data.  This is str in Python 2 and\nbytes in Python 3.</p></section>	https://pythonhosted.org/six/index.html
MAXSIZE	A										<section class="prog__container"><p>The maximum  size of a  container like list  or dict.\nThis  is  equivalent  to  sys.maxsize in  Python  2.6  and  later\n(including 3.x).   Note, this is temptingly  similar to, but not  the same as\nsys.maxint  in  Python  2.   There is  no  direct  equivalent  to\nsys.maxint in  Python 3  because its integer  type has  no limits\naside from memory.</p></section>	https://pythonhosted.org/six/index.html
get_unbound_function	A										<section class="prog__container"><p>Get the function out of unbound method meth.  In Python 3, unbound methods\ndon’t exist, so this function just returns meth unchanged.  Example\nusage:</p><pre><code>from six import get_unbound_function\n\nclass X(object):\n    def method(self):\n        pass\nmethod_function = get_unbound_function(X.method)\n\n</code></pre></section>	https://pythonhosted.org/six/index.html
get_method_function	A										<section class="prog__container"><p>Get the function out of method object meth.</p></section>	https://pythonhosted.org/six/index.html
get_method_self	A										<section class="prog__container"><p>Get the self of bound method meth.</p></section>	https://pythonhosted.org/six/index.html
get_function_closure	A										<section class="prog__container"><p>Get the closure (list of cells) associated with func.  This is equivalent\nto func.__closure__ on Python 2.6+ and func.func_closure on Python\n2.5.</p></section>	https://pythonhosted.org/six/index.html
get_function_code	A										<section class="prog__container"><p>Get the code object associated with func.  This is equivalent to\nfunc.__code__ on Python 2.6+ and func.func_code on Python 2.5.</p></section>	https://pythonhosted.org/six/index.html
get_function_defaults	A										<section class="prog__container"><p>Get the defaults tuple associated with func.  This is equivalent to\nfunc.__defaults__ on Python 2.6+ and func.func_defaults on Python\n2.5.</p></section>	https://pythonhosted.org/six/index.html
get_function_globals	A										<section class="prog__container"><p>Get the globals of func.  This is equivalent to func.__globals__ on\nPython 2.6+ and func.func_globals on Python 2.5.</p></section>	https://pythonhosted.org/six/index.html
next	A										<section class="prog__container"><p>Get the next item of iterator it.  StopIteration is raised if\nthe iterator is exhausted.  This is a replacement for calling it.next()\nin Python 2 and next(it) in Python 3.</p></section>	https://pythonhosted.org/six/index.html
callable	A										<section class="prog__container"><p>Check if obj can be called.  Note callable has returned in Python 3.2,\nso using six’s version is only necessary when supporting Python 3.0 or 3.1.</p></section>	https://pythonhosted.org/six/index.html
iterkeys	A										<section class="prog__container"><p>Returns an iterator over dictionary‘s keys. This replaces\ndictionary.iterkeys() on Python 2 and dictionary.keys() on\nPython 3.  kwargs are passed through to the underlying method.</p></section>	https://pythonhosted.org/six/index.html
itervalues	A										<section class="prog__container"><p>Returns an iterator over dictionary‘s values. This replaces\ndictionary.itervalues() on Python 2 and dictionary.values() on\nPython 3.  kwargs are passed through to the underlying method.</p></section>	https://pythonhosted.org/six/index.html
iteritems	A										<section class="prog__container"><p>Returns an iterator over dictionary‘s items. This replaces\ndictionary.iteritems() on Python 2 and dictionary.items() on\nPython 3.  kwargs are passed through to the underlying method.</p></section>	https://pythonhosted.org/six/index.html
iterlists	A										<section class="prog__container"><p>Calls dictionary.iterlists() on Python 2 and dictionary.lists() on\nPython 3.  No builtin Python mapping type has such a method; this method is\nintended for use with multi-valued dictionaries like Werkzeug’s.\nkwargs are passed through to the underlying method.</p></section>	https://pythonhosted.org/six/index.html
viewkeys	A										<section class="prog__container"><p>Return a view over dictionary‘s keys. This replaces\ndict.viewkeys() on Python 2.7 and dict.keys() on\nPython 3.</p></section>	https://pythonhosted.org/six/index.html
viewvalues	A										<section class="prog__container"><p>Return a view over dictionary‘s values. This replaces\ndict.viewvalues() on Python 2.7 and dict.values() on\nPython 3.</p></section>	https://pythonhosted.org/six/index.html
viewitems	A										<section class="prog__container"><p>Return a view over dictionary‘s items. This replaces\ndict.viewitems() on Python 2.7 and dict.items() on\nPython 3.</p></section>	https://pythonhosted.org/six/index.html
create_bound_method	A										<section class="prog__container"><p>Return a method object wrapping func and bound to obj.  On both Python 2\nand 3, this will return a types.MethodType object.  The reason\nthis wrapper exists is that on Python 2, the MethodType constructor\nrequires the obj‘s class to be passed.</p></section>	https://pythonhosted.org/six/index.html
create_unbound_method	A										<section class="prog__container"><p>Return an unbound method object wrapping func.  In Python 2, this will\nreturn a types.MethodType object.  In Python 3, unbound methods\ndo not exist and this wrapper will simply return func.</p></section>	https://pythonhosted.org/six/index.html
Iterator	A										<section class="prog__container"><p>A class for making portable iterators. The intention is that it be subclassed\nand subclasses provide a __next__ method. In Python 2, Iterator\nhas one method: next. It simply delegates to __next__. An alternate\nway to do this would be to simply alias next to __next__. However,\nthis interacts badly with subclasses that override\n__next__. Iterator is empty on Python 3. (In fact, it is just\naliased to object.)</p></section>	https://pythonhosted.org/six/index.html
wraps	A										<section class="prog__container"><p>This is exactly the functools.wraps() decorator, but it sets the\n__wrapped__ attribute on what it decorates as functools.wraps()\ndoes on Python versions after 3.2.</p></section>	https://pythonhosted.org/six/index.html
exec_	A										<section class="prog__container"><p>Execute code in the scope of globals and locals.  code can be a\nstring or a code object.  If globals or locals are not given, they will\ndefault to the scope of the caller.  If just globals is given, it will also\nbe used as locals.</p><pre><code>\nNote\nPython 3’s exec() doesn’t take keyword arguments, so calling\nexec() with them should be avoided.\n</code></pre></section>	https://pythonhosted.org/six/index.html
print_	A										<section class="prog__container"><p>Print args into file.  Each argument will be separated with sep and\nend will be written to the file after the last argument is printed.  If\nflush is true, file.flush() will be called after all data is written.</p><pre><code>\nNote\nIn Python 2, this function imitates Python 3’s print() by not\nhaving softspace support.  If you don’t know what that is, you’re probably\nok. :)\n</code></pre></section>	https://pythonhosted.org/six/index.html
raise_from	A										<section class="prog__container"><p>Raise an exception from a context.  On Python 3, this is equivalent to\nraise exc_value from exc_value_from.  On Python 2, which does not support\nexception chaining, it is equivalent to raise exc_value.</p></section>	https://pythonhosted.org/six/index.html
reraise	A										<section class="prog__container"><p>Reraise an exception, possibly with a different traceback.  In the simple\ncase, reraise(*sys.exc_info()) with an active exception (in an except\nblock) reraises the current exception with the last traceback.  A different\ntraceback can be specified with the exc_traceback parameter.  Note that\nsince the exception reraising is done within the reraise() function,\nPython will attach the call frame of reraise() to whatever traceback is\nraised.</p></section>	https://pythonhosted.org/six/index.html
with_metaclass	A										<section class="prog__container"><p>Create a new class with base classes bases and metaclass metaclass.  This\nis designed to be used in class declarations like this:</p><pre><code>from six import with_metaclass\n\nclass Meta(type):\n    pass\n\nclass Base(object):\n    pass\n\nclass MyClass(with_metaclass(Meta, Base)):\n    pass\n\n</code></pre></section>	https://pythonhosted.org/six/index.html
add_metaclass	A										<section class="prog__container"><p>Class decorator that replaces a normally-constructed class with a\nmetaclass-constructed one.  Example usage:</p><pre><code>@add_metaclass(Meta)\nclass MyClass(object):\n    pass\n\n</code></pre></section>	https://pythonhosted.org/six/index.html
b	A										<section class="prog__container"><p>A “fake” bytes literal.  data should always be a normal string literal.  In\nPython 2, b() returns a 8-bit string.  In Python 3, data is encoded\nwith the latin-1 encoding to bytes.</p><pre><code>\nNote\nSince all Python versions 2.6 and after support the b prefix,\nb(), code without 2.5 support doesn’t need b().\n</code></pre></section>	https://pythonhosted.org/six/index.html
u	A										<section class="prog__container"><p>A “fake” unicode literal.  text should always be a normal string literal.\nIn Python 2, u() returns unicode, and in Python 3, a string.  Also, in\nPython 2, the string is decoded with the unicode-escape codec, which\nallows unicode escapes to be used in it.</p><pre><code>\nNote\nIn Python 3.3, the u prefix has been reintroduced. Code that only\nsupports Python 3 versions of 3.3 and higher thus does not need\nu().\n</code></pre></section>	https://pythonhosted.org/six/index.html
unichr	A										<section class="prog__container"><p>Return the (Unicode) string representing the codepoint c.  This is\nequivalent to unichr() on Python 2 and chr() on Python 3.</p></section>	https://pythonhosted.org/six/index.html
int2byte	A										<section class="prog__container"><p>Converts i to a byte.  i must be in range(0, 256).  This is\nequivalent to chr() in Python 2 and bytes((i,)) in Python 3.</p></section>	https://pythonhosted.org/six/index.html
byte2int	A										<section class="prog__container"><p>Converts the first byte of bs to an integer.  This is equivalent to\nord(bs[0]) on Python 2 and bs[0] on Python 3.</p></section>	https://pythonhosted.org/six/index.html
indexbytes	A										<section class="prog__container"><p>Return the byte at index i of buf as an integer.  This is equivalent to\nindexing a bytes object in Python 3.</p></section>	https://pythonhosted.org/six/index.html
iterbytes	A										<section class="prog__container"><p>Return an iterator over bytes in buf as integers.  This is equivalent to\na bytes object iterator in Python 3.</p></section>	https://pythonhosted.org/six/index.html
StringIO	A										<section class="prog__container"><p>This is an fake file object for textual data.  It’s an alias for\nStringIO.StringIO in Python 2 and io.StringIO in\nPython 3.</p></section>	https://pythonhosted.org/six/index.html
BytesIO	A										<section class="prog__container"><p>This is a fake file object for binary data.  In Python 2, it’s an alias for\nStringIO.StringIO, but in Python 3, it’s an alias for\nio.BytesIO.</p></section>	https://pythonhosted.org/six/index.html
python_2_unicode_compatible	A										<section class="prog__container"><p>A class decorator that takes a class defining a __str__ method.  On\nPython 3, the decorator does nothing.  On Python 2, it aliases the\n__str__ method to __unicode__ and creates a new __str__ method\nthat returns the result of __unicode__() encoded with UTF-8.</p></section>	https://pythonhosted.org/six/index.html
assertCountEqual	A										<section class="prog__container"><p>Alias for assertCountEqual() on Python 3 and\nassertItemsEqual() on Python 2.</p></section>	https://pythonhosted.org/six/index.html
assertRaisesRegex	A										<section class="prog__container"><p>Alias for assertRaisesRegex() on Python 3 and\nassertRaisesRegexp() on Python 2.</p></section>	https://pythonhosted.org/six/index.html
assertRegex	A										<section class="prog__container"><p>Alias for assertRegex() on Python 3 and\nassertRegexpMatches() on Python 2.</p></section>	https://pythonhosted.org/six/index.html
add_move	A										<section class="prog__container"><p>Add item to the six.moves mapping.  item should be a\nMovedAttribute or MovedModule instance.</p></section>	https://pythonhosted.org/six/index.html
remove_move	A										<section class="prog__container"><p>Remove the six.moves mapping called name.  name should be a\nstring.</p></section>	https://pythonhosted.org/six/index.html
MovedModule	A										<section class="prog__container"><p>Create a mapping for six.moves called name that references different\nmodules in Python 2 and 3.  old_mod is the name of the Python 2 module.\nnew_mod is the name of the Python 3 module.</p></section>	https://pythonhosted.org/six/index.html
MovedAttribute	A										<section class="prog__container"><p>Create a mapping for six.moves called name that references different\nattributes in Python 2 and 3.  old_mod is the name of the Python 2 module.\nnew_mod is the name of the Python 3 module.  If new_attr is not given, it\ndefaults to old_attr.  If neither is given, they both default to name.</p></section>	https://pythonhosted.org/six/index.html
