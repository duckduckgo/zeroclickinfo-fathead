std::accumulate	A										<section class="prog__container">\n<p>Computes the sum of the given value <code>init</code> and the elements in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class InputIt, class T &gt;\nT accumulate( InputIt first, InputIt last, T init );</code></pre><pre><code>template&lt; class InputIt, class T, class BinaryOperation &gt;\nT accumulate( InputIt first, InputIt last, T init,\n              BinaryOperation op );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/accumulate
std::adjacent_difference	A										<section class="prog__container">\n<p>Computes the differences between the second and the first of each adjacent pair of elements of the range <code>[first, last)</code> and writes them to the range beginning at <code>d_first + 1</code>.</p>\n<pre><code>template&lt; class InputIt, class OutputIt &gt;\nOutputIt adjacent_difference( InputIt first, InputIt last, \n                              OutputIt d_first );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/adjacent_difference
std::adjacent_find	A										<section class="prog__container">\n<p>Searches the range <code>[first, last)</code> for two consecutive identical elements.</p>\n<pre><code>template&lt; class ForwardIt &gt;\nForwardIt adjacent_find( ForwardIt first, ForwardIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt &gt;\nForwardIt adjacent_find( ExecutionPolicy&& policy,\n                         ForwardIt first, ForwardIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/adjacent_find
std::binary_search	A										<section class="prog__container">\n<p>Checks if an element equivalent to <code>value</code> appears within the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class ForwardIt, class T &gt;\nbool binary_search( ForwardIt first, ForwardIt last, const T& value );</code></pre><pre><code>template&lt; class ForwardIt, class T, class Compare &gt;\nbool binary_search( ForwardIt first, ForwardIt last, const T& value, Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/binary_search
std::bsearch	A										<section class="prog__container">\n<p>Finds an element equal to element pointed to by <code>key</code> in an array pointed to by <code>ptr</code>.</p>\n<pre><code>void* bsearch( const void* key, const void* ptr, std::size_t count,\n               std::size_t size, /*compare-pred*/* comp );\nvoid* bsearch( const void* key, const void* ptr, std::size_t count,\n               std::size_t size, /*c-compare-pred*/* comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/bsearch
std::copy	A										<section class="prog__container">\n<p>Copies the elements in the range, defined by <code>[first, last)</code>, to another range beginning at <code>d_first</code>.</p>\n<pre><code>template&lt; class InputIt, class OutputIt &gt;\nOutputIt copy( InputIt first, InputIt last, OutputIt d_first );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class OutputIt &gt;\nOutputIt copy( ExecutionPolicy&& policy, InputIt first, InputIt last, OutputIt d_first );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/copy
std::copy_if	A										<section class="prog__container">\n<p>Copies the elements in the range, defined by <code>[first, last)</code>, to another range beginning at <code>d_first</code>.</p>\n<pre><code>template&lt; class InputIt, class OutputIt, class UnaryPredicate &gt;\nOutputIt copy_if( InputIt first, InputIt last,\n                  OutputIt d_first,\n                  UnaryPredicate pred );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/copy
std::copy_backward	A										<section class="prog__container">\n<p>Copies the elements from the range, defined by <code>[first, last)</code>, to another range ending at <code>d_last</code>.</p>\n<pre><code>template&lt; class BidirIt1, class BidirIt2 &gt;\nBidirIt2 copy_backward( BidirIt1 first, BidirIt1 last, BidirIt2 d_last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/copy_backward
std::count	A										<section class="prog__container">\n<p>Returns the number of elements in the range <code>[first, last)</code> satisfying specific criteria.</p>\n<pre><code>template&lt; class InputIt, class T &gt;\ntypename iterator_traits&lt;InputIt&gt;::difference_type\n    count( InputIt first, InputIt last, const T &value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class T &gt;\ntypename iterator_traits&lt;InputIt&gt;::difference_type\n    count( ExecutionPolicy&& policy, InputIt first, InputIt last, const T &value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/count
std::count_if	A										<section class="prog__container">\n<p>Returns the number of elements in the range <code>[first, last)</code> satisfying specific criteria.</p>\n<pre><code>template&lt; class InputIt, class UnaryPredicate &gt;\ntypename iterator_traits&lt;InputIt&gt;::difference_type\n    count_if( InputIt first, InputIt last, UnaryPredicate p );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class UnaryPredicate &gt;\ntypename iterator_traits&lt;InputIt&gt;::difference_type\n    count_if( ExecutionPolicy&& policy, InputIt first, InputIt last, UnaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/count
std::equal_range	A										<section class="prog__container">\n<p>Returns a range containing all elements equivalent to <code>value</code> in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class ForwardIt, class T &gt;\nstd::pair&lt;ForwardIt,ForwardIt&gt; \n    equal_range( ForwardIt first, ForwardIt last,\n                 const T& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/equal_range
std::exclusive_scan	A										<section class="prog__container">\n<p>Computes an exclusive prefix sum operation using <code>binary_op</code> (or <code>std::plus&lt;&gt;(void)</code> for overloads (1-2)) for the range <code>[first, last)</code>, using <code>init</code> as...</p>\n<pre><code>template&lt; class InputIt, class OutputIt, class T &gt;\nOutputIt exclusive_scan( InputIt first, InputIt last,\n                         OutputIt d_first, T init );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/exclusive_scan
std::execution::parallel_policy	A										<section class="prog__container">\n<p> The execution policy type used as a unique type to disambiguate parallel algorithm overloading and indicate that a parallel algorithm's execution may be parallelized.</p>\n<pre><code>class parallel_policy { /* unspecified */ };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/execution_policy_tag_t
std::execution::parallel_unsequenced_policy	A										<section class="prog__container">\n<p> The execution policy type used as a unique type to disambiguate parallel algorithm overloading and indicate that a parallel algorithm's execution may be parallelized, vectorized, or migrated across...</p>\n<pre><code>class parallel_unsequenced_policy { /* unspecified */ };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/execution_policy_tag_t
std::execution::sequenced_policy	A										<section class="prog__container">\n<p> The execution policy type used as a unique type to disambiguate parallel algorithm overloading and require that a parallel algorithm's execution may not be parallelized.</p>\n<pre><code>class sequenced_policy { /* unspecified */ };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/execution_policy_tag_t
std::fill_n	A										<section class="prog__container">\n<p> Same as (1), but executed according to <code>policy</code>.</p>\n<pre><code>template&lt; class OutputIt, class Size, class T &gt;\nOutputIt fill_n( OutputIt first, Size count, const T& value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class OutputIt, class Size, class T &gt;\nOutputIt fill_n( ExecutionPolicy&& policy, OutputIt first, Size count, const T& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/fill_n
std::find	A										<section class="prog__container">\n<p>Returns the first element in the range <code>[first, last)</code> that satisfies specific criteria...</p>\n<pre><code>template&lt; class InputIt, class T &gt;\nInputIt find( InputIt first, InputIt last, const T& value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class T &gt;\nInputIt find( ExecutionPolicy&& policy, InputIt first, InputIt last, const T& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/find
std::find_if	A										<section class="prog__container">\n<p>Returns the first element in the range <code>[first, last)</code> that satisfies specific criteria...</p>\n<pre><code>template&lt; class InputIt, class UnaryPredicate &gt;\nInputIt find_if( InputIt first, InputIt last, \n                 UnaryPredicate p );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class UnaryPredicate &gt;\nInputIt find_if( ExecutionPolicy&& policy, InputIt first, InputIt last, \n                 UnaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/find
std::find_if_not	A										<section class="prog__container">\n<p>Returns the first element in the range <code>[first, last)</code> that satisfies specific criteria...</p>\n<pre><code>template&lt; class InputIt, class UnaryPredicate &gt;\nInputIt find_if_not( InputIt first, InputIt last, \n                     UnaryPredicate q );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class UnaryPredicate &gt;\nInputIt find_if_not( ExecutionPolicy&& policy, InputIt first, InputIt last, \n                     UnaryPredicate q );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/find
std::find_end	A										<section class="prog__container">\n<p>Searches for the last subsequence of elements <code>[s_first, s_last)</code> in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class ForwardIt1, class ForwardIt2 &gt;\nForwardIt1 find_end( ForwardIt1 first, ForwardIt1 last,\n                     ForwardIt2 s_first, ForwardIt2 s_last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/find_end
std::find_first_of	A										<section class="prog__container">\n<p>Searches the range <code>[first, last)</code> for any of the elements in the range <code>[s_first, s_last)</code>.</p>\n<pre><code>template&lt; class InputIt, class ForwardIt &gt;\nInputIt find_first_of( InputIt first, InputIt last,\n                       ForwardIt s_first, ForwardIt s_last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/find_first_of
std::generate_n	A										<section class="prog__container">\n<p> Same as (1), but executed according to <code>policy</code>.</p>\n<pre><code>template&lt; class OutputIt, class Size, class Generator &gt;\nOutputIt generate_n( OutputIt first, Size count, Generator g );</code></pre><pre><code>template&lt; class ExecutionPolicy, class OutputIt, class Size, class Generator &gt;\nOutputIt generate_n( ExecutionPolicy&& policy, OutputIt first, Size count, Generator g );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/generate_n
std::includes	A										<section class="prog__container">\n<p>Returns <code>true</code> if every element from the sorted range <code>[first2, last2)</code> is found within the sorted range <code>[first1, last1)</code>.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2 &gt;\nbool includes( InputIt1 first1, InputIt1 last1,\n               InputIt2 first2, InputIt2 last2 );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/includes
std::inclusive_scan	A										<section class="prog__container">\n<p>Computes an inclusive prefix sum operation using <code>binary_op</code> (or <code>std::plus&lt;&gt;(void)</code> for overloads (1-2)) for the range <code>[first, last)</code>, using <code>init</code> as...</p>\n<pre><code>template&lt; class InputIt, class OutputIt &gt;\nOutputIt inclusive_scan( InputIt first, \n                         InputIt last, OutputIt d_first );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/inclusive_scan
std::inner_product	A										<section class="prog__container">\n<p>Computes inner product (i.e. sum of products) of the range <code>[first1, last1)</code> and another range beginning at <code>first2</code>.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2, class T &gt;\nT inner_product( InputIt1 first1, InputIt1 last1,\n                 InputIt2 first2, T value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/inner_product
std::inplace_merge	A										<section class="prog__container">\n<p>Merges two consecutive sorted ranges <code>[first, middle)</code> and <code>[middle, last)</code> into one sorted range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class BidirIt &gt;\nvoid inplace_merge( BidirIt first, BidirIt middle, BidirIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class BidirIt &gt;\nvoid inplace_merge( ExecutionPolicy&& policy, BidirIt first, BidirIt middle, BidirIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/inplace_merge
std::iota	A										<section class="prog__container">\n<p>Fills the range <code>[first, last)</code> with sequentially increasing values, starting with <code>value</code> and repetitively evaluating <code>++value</code>.</p>\n<pre><code>template&lt; class ForwardIterator, class T &gt;\nvoid iota( ForwardIterator first, ForwardIterator last, T value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/iota
std::is_execution_policy	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a standard or implementation-defined execution policy type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_execution_policy;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/is_execution_policy
std::is_heap	A										<section class="prog__container">\n<p>Checks if the elements in range <code>[first, last)</code> are a <i>max heap</i>.</p>\n<pre><code>template&lt; class RandomIt &gt;\nbool is_heap( RandomIt first, RandomIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class RandomIt &gt;\nbool is_heap( ExecutionPolicy&& policy, RandomIt first, RandomIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/is_heap
std::is_heap_until	A										<section class="prog__container">\n<p>Examines the range <code>[first, last)</code> and finds the largest range beginning at <code>first</code> which is a <i>max heap</i>.</p>\n<pre><code>template&lt; class RandomIt &gt;\nRandomIt is_heap_until( RandomIt first, RandomIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class RandomIt &gt;\nRandomIt is_heap_until( ExecutionPolicy&& policy, RandomIt first, RandomIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/is_heap_until
std::is_permutation	A										<section class="prog__container">\n<p>Returns <code>true</code> if there exists a permutation of the elements in the range <code>[first1, last1)</code> that makes that range equal to the range <code>[first2,last2)</code>, where...</p>\n<pre><code>template&lt; class ForwardIt1, class ForwardIt2 &gt;\nbool is_permutation( ForwardIt1 first1, ForwardIt1 last1,\n                     ForwardIt2 first2 );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/is_permutation
std::is_sorted	A										<section class="prog__container">\n<p>Checks if the elements in range <code>[first, last)</code> are sorted in non-descending order.</p>\n<pre><code>template&lt; class ForwardIt &gt;\nbool is_sorted( ForwardIt first, ForwardIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt &gt;\nbool is_sorted( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/is_sorted
std::is_sorted_until	A										<section class="prog__container">\n<p>Examines the range <code>[first, last)</code> and finds the largest range beginning at <code>first</code> in which the elements are sorted in ascending order.</p>\n<pre><code>template&lt; class ForwardIt &gt;\nForwardIt is_sorted_until( ForwardIt first, ForwardIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt &gt;\nForwardIt is_sorted_until( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/is_sorted_until
std::iter_swap	A										<section class="prog__container">\n<p>Swaps the values of the elements the given iterators are pointing to.</p>\n<pre><code>template&lt; class ForwardIt1, class ForwardIt2 &gt;\nvoid iter_swap( ForwardIt1 a, ForwardIt2 b );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/iter_swap
std::lexicographical_compare	A										<section class="prog__container">\n<p>Checks if the first range <code>[first1, last1)</code> is lexicographically <i>less</i> than the second range <code>[first2, last2)</code>.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2 &gt;\nbool lexicographical_compare( InputIt1 first1, InputIt1 last1,\n                              InputIt2 first2, InputIt2 last2 );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/lexicographical_compare
std::lower_bound	A										<section class="prog__container">\n<p>Returns an iterator pointing to the first element in the range <code>[first, last)</code> that is <i>not less</i> than (i.e. greater or equal to) <code>value</code>.</p>\n<pre><code>template&lt; class ForwardIt, class T &gt;\nForwardIt lower_bound( ForwardIt first, ForwardIt last, const T& value );</code></pre><pre><code>template&lt; class ForwardIt, class T, class Compare &gt;\nForwardIt lower_bound( ForwardIt first, ForwardIt last, const T& value, Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/lower_bound
std::make_heap	A										<section class="prog__container">\n<p>Constructs a <i>max heap</i> in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class RandomIt &gt;\nvoid make_heap( RandomIt first, RandomIt last );</code></pre><pre><code>template&lt; class RandomIt, class Compare &gt;\nvoid make_heap( RandomIt first, RandomIt last,\n                Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/make_heap
std::max	A										<section class="prog__container">\n<p>Returns the greater of the given values.</p>\n<pre><code>template&lt; class T &gt; \nconstexpr const T& max( const T& a, const T& b );</code></pre><pre><code>template&lt; class T, class Compare &gt;\nconstexpr const T& max( const T& a, const T& b, Compare comp );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/max
std::max_element	A										<section class="prog__container">\n<p>Finds the greatest element in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class ForwardIt &gt; \nconstexpr ForwardIt max_element(ForwardIt first, ForwardIt last);</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt &gt; \nForwardIt max_element( ExecutionPolicy&& policy,ForwardIt first, ForwardIt last);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/max_element
std::merge	A										<section class="prog__container">\n<p>Merges two sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> into one sorted range beginning at <code>d_first</code>.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2, class OutputIt &gt;\nOutputIt merge( InputIt1 first1, InputIt1 last1,\n                InputIt2 first2, InputIt2 last2,\n                OutputIt d_first );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/merge
std::min	A										<section class="prog__container">\n<p>Returns the smaller of the given values.</p>\n<pre><code>template&lt; class T &gt; \nconstexpr const T& min( const T& a, const T& b );</code></pre><pre><code>template&lt; class T, class Compare &gt;\nconstexpr const T& min( const T& a, const T& b, Compare comp );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/min
std::min_element	A										<section class="prog__container">\n<p>Finds the smallest element in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class ForwardIt &gt; \nconstexpr ForwardIt min_element( ForwardIt first, ForwardIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt &gt; \nForwardIt min_element( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/min_element
std::minmax	A										<section class="prog__container">\n<p>Returns the lowest and the greatest of the given values.</p>\n<pre><code>template&lt; class T &gt; \nstd::pair&lt;const T&,const T&&gt; minmax( const T& a, const T& b );</code></pre><pre><code>template&lt; class T &gt; \nconstexpr std::pair&lt;const T&,const T&&gt; minmax( const T& a, const T& b );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/minmax
std::minmax_element	A										<section class="prog__container">\n<p>Finds the smallest and greatest element in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class ForwardIt &gt; \nstd::pair&lt;ForwardIt,ForwardIt&gt; \n    minmax_element( ForwardIt first, ForwardIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/minmax_element
std::mismatch	A										<section class="prog__container">\n<p>Returns the first mismatching pair of elements from two ranges: one defined by <code>[first1, last1)</code> and another defined by <code>[first2,last2)</code>.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2 &gt;\nstd::pair&lt;InputIt1,InputIt2&gt;\n    mismatch( InputIt1 first1, InputIt1 last1,\n              InputIt2 first2 );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/mismatch
std::move_backward	A										<section class="prog__container">\n<p>Moves the elements from the range <code>[first, last)</code>, to another range ending at <code>d_last</code>.</p>\n<pre><code>template&lt; class BidirIt1, class BidirIt2 &gt;\nBidirIt2 move_backward( BidirIt1 first, BidirIt1 last, BidirIt2 d_last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/move_backward
std::next_permutation	A										<section class="prog__container">\n<p>Transforms the range <code>[first, last)</code> into the next permutation from the set of all permutations that are lexicographically ordered with respect to <code>operator&lt;</code> or...</p>\n<pre><code>template&lt; class BidirIt &gt;\nbool next_permutation( BidirIt first, BidirIt last );</code></pre><pre><code>template&lt; class BidirIt, class Compare &gt;\nbool next_permutation( BidirIt first, BidirIt last, Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/next_permutation
std::nth_element	A										<section class="prog__container">\n<p><code>nth_element</code> is a partial sorting algorithm that rearranges elements in <code>[first, last)</code> such that...</p>\n<pre><code>template&lt; class RandomIt &gt;\nvoid nth_element( RandomIt first, RandomIt nth, RandomIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class RandomIt &gt;\nvoid nth_element( ExecutionPolicy&& policy, RandomIt first, RandomIt nth, RandomIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/nth_element
std::partial_sort	A										<section class="prog__container">\n<p>Rearranges elements such that the range <code>[first, middle)</code> contains the sorted <code>middle - first</code> smallest elements in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class RandomIt &gt;\nvoid partial_sort( RandomIt first, RandomIt middle, RandomIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class RandomIt &gt;\nvoid partial_sort( ExecutionPolicy&& policy, RandomIt first, RandomIt middle, RandomIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/partial_sort
std::partial_sort_copy	A										<section class="prog__container">\n<p>Sorts some of the elements in the range <code>[first, last)</code> in ascending order, storing the result in the range <code>[d_first, d_last)</code>.</p>\n<pre><code>template&lt; class InputIt, class RandomIt &gt;\nRandomIt partial_sort_copy( InputIt first, InputIt last,\n                            RandomIt d_first, RandomIt d_last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/partial_sort_copy
std::partial_sum	A										<section class="prog__container">\n<p>Computes the partial sums of the elements in the subranges of the range <code>[first, last)</code> and writes them to the range beginning at <code>d_first</code>.</p>\n<pre><code>template&lt; class InputIt, class OutputIt &gt;\nOutputIt partial_sum( InputIt first, InputIt last, OutputIt d_first );</code></pre><pre><code>template&lt; class InputIt, class OutputIt, class BinaryOperation &gt;\nOutputIt partial_sum( InputIt first, InputIt last, OutputIt d_first,\n                      BinaryOperation op );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/partial_sum
std::partition	A										<section class="prog__container">\n<p> Same as (1), but executed according to <code>policy</code>.</p>\n<pre><code>template&lt; class ForwardIt, class UnaryPredicate &gt;\nForwardIt partition( ForwardIt first, ForwardIt last, UnaryPredicate p );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPredicate &gt;\nForwardIt partition( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last, UnaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/partition
std::partition_point	A										<section class="prog__container">\n<p>Examines the partitioned (as if by std::partition) range <code>[first, last)</code> and locates the end of the first partition...</p>\n<pre><code>template&lt; class ForwardIt, class UnaryPredicate &gt;\nForwardIt partition_point( ForwardIt first, ForwardIt last, UnaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/partition_point
std::pop_heap	A										<section class="prog__container">\n<p>Swaps the value in the position <code>first</code> and the value in the position <code>last-1</code> and makes the subrange <code>[first, last-1)</code> into a <i>max heap</i>.</p>\n<pre><code>template&lt; class RandomIt &gt;\nvoid pop_heap( RandomIt first, RandomIt last );</code></pre><pre><code>template&lt; class RandomIt, class Compare &gt;\nvoid pop_heap( RandomIt first, RandomIt last, Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/pop_heap
std::prev_permutation	A										<section class="prog__container">\n<p>Transforms the range <code>[first, last)</code> into the previous permutation from the set of all permutations that are lexicographically ordered with respect to <code>operator&lt;</code> or...</p>\n<pre><code>template&lt; class BidirIt &gt;\nbool prev_permutation( BidirIt first, BidirIt last);</code></pre><pre><code>template&lt; class BidirIt, class Compare &gt;\nbool prev_permutation( BidirIt first, BidirIt last, Compare comp);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/prev_permutation
std::push_heap	A										<section class="prog__container">\n<p>Inserts the element at the position <code>last-1</code> into the <i>max heap</i> defined by the range <code>[first, last-1)</code>.</p>\n<pre><code>template&lt; class RandomIt &gt;\nvoid push_heap( RandomIt first, RandomIt last );</code></pre><pre><code>template&lt; class RandomIt, class Compare &gt;\nvoid push_heap( RandomIt first, RandomIt last,\n                Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/push_heap
std::qsort	A										<section class="prog__container">\n<p>Sorts the given array pointed to by <code>ptr</code> in ascending order.</p>\n<pre><code>void qsort( void *ptr, std::size_t count, std::size_t size, /*compare-pred*/* comp );\nvoid qsort( void *ptr, std::size_t count, std::size_t size, /*c-compare-pred*/* comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/qsort
std::random_shuffle	A										<section class="prog__container">\n<p>Reorders the elements in the given range <code>[first, last)</code> such that each possible permutation of those elements has equal probability of appearance.</p>\n<pre><code>template&lt; class RandomIt, class RandomFunc &gt;\nvoid random_shuffle( RandomIt first, RandomIt last, RandomFunc&& r );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/random_shuffle
std::shuffle	A										<section class="prog__container">\n<p>Reorders the elements in the given range <code>[first, last)</code> such that each possible permutation of those elements has equal probability of appearance.</p>\n<pre><code>template&lt; class RandomIt, class URBG &gt;\nvoid shuffle( RandomIt first, RandomIt last, URBG&& g );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/random_shuffle
std::remove_if	A										<section class="prog__container">\n<p>Removes all elements satisfying specific criteria from the range <code>[first, last)</code> and returns a past-the-end iterator for the new end of the range.</p>\n<pre><code>template&lt; class ForwardIt, class UnaryPredicate &gt;\nForwardIt remove_if( ForwardIt first, ForwardIt last, UnaryPredicate p );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPredicate &gt;\nForwardIt remove_if( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last, UnaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/remove
std::remove_copy	A										<section class="prog__container">\n<p>Copies elements from the range <code>[first, last)</code>, to another range beginning at <code>d_first</code>, omitting the elements which satisfy specific criteria.</p>\n<pre><code>template&lt; class InputIt, class OutputIt, class T &gt;\nOutputIt remove_copy( InputIt first, InputIt last, OutputIt d_first,\n                      const T& value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class OutputIt, class T &gt;\nOutputIt remove_copy( ExecutionPolicy&& policy, InputIt first, InputIt last, OutputIt d_first,\n                      const T& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/remove_copy
std::remove_copy_if	A										<section class="prog__container">\n<p>Copies elements from the range <code>[first, last)</code>, to another range beginning at <code>d_first</code>, omitting the elements which satisfy specific criteria.</p>\n<pre><code>template&lt; class InputIt, class OutputIt, class UnaryPredicate &gt;\nOutputIt remove_copy_if( InputIt first, InputIt last, OutputIt d_first,\n                         UnaryPredicate p );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class OutputIt, class UnaryPredicate &gt;\nOutputIt remove_copy_if( ExecutionPolicy&& policy, InputIt first, InputIt last, OutputIt d_first,\n                         UnaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/remove_copy
std::replace	A										<section class="prog__container">\n<p>Replaces all elements satisfying specific criteria with <code>new_value</code> in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class ForwardIt, class T &gt;\nvoid replace( ForwardIt first, ForwardIt last,\n              const T& old_value, const T& new_value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt, class T &gt;\nvoid replace( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last,\n              const T& old_value, const T& new_value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/replace
std::replace_if	A										<section class="prog__container">\n<p>Replaces all elements satisfying specific criteria with <code>new_value</code> in the range <code>[first, last)</code>.</p>\n<pre><code>template&lt; class ForwardIt, class UnaryPredicate, class T &gt;\nvoid replace_if( ForwardIt first, ForwardIt last,\n                 UnaryPredicate p, const T& new_value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt, class UnaryPredicate, class T &gt;\nvoid replace_if( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last,\n                 UnaryPredicate p, const T& new_value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/replace
std::replace_copy	A										<section class="prog__container">\n<p>Copies the all elements from the range <code>[first, last)</code> to another range beginning at <code>d_first</code> replacing all elements satisfying specific criteria with <code>new_value</code>.</p>\n<pre><code>template&lt; class InputIt, class OutputIt, class T &gt;\nOutputIt replace_copy( InputIt first, InputIt last, OutputIt d_first,\n                       const T& old_value, const T& new_value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class OutputIt, class T &gt;\nOutputIt replace_copy( ExecutionPolicy&& policy, InputIt first, InputIt last, OutputIt d_first,\n                       const T& old_value, const T& new_value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/replace_copy
std::replace_copy_if	A										<section class="prog__container">\n<p>Copies the all elements from the range <code>[first, last)</code> to another range beginning at <code>d_first</code> replacing all elements satisfying specific criteria with <code>new_value</code>.</p>\n<pre><code>template&lt; class InputIt, class OutputIt, class UnaryPredicate, class T &gt;\nOutputIt replace_copy_if( InputIt first, InputIt last, OutputIt d_first,\n                          UnaryPredicate p, const T& new_value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class InputIt, class OutputIt, class UnaryPredicate, class T &gt;\nOutputIt replace_copy_if( ExecutionPolicy&& policy, InputIt first, InputIt last, OutputIt d_first,\n                          UnaryPredicate p, const T& new_value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/replace_copy
std::rotate	A										<section class="prog__container">\n<p> Same as (1), but executed according to <code>policy</code>.</p>\n<pre><code>template&lt; class ForwardIt &gt;\nForwardIt rotate( ForwardIt first, ForwardIt n_first, ForwardIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt &gt;\nForwardIt rotate( ExecutionPolicy&& policy, ForwardIt first, ForwardIt n_first, ForwardIt last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/rotate
std::sample	A										<section class="prog__container">\n<p>Selects <code>n</code> elements from the sequence [first; last) such that each possible sample has equal probability of appearance, and writes those selected elements into the output iterator...</p>\n<pre><code>template&lt; class PopulationIterator, class SampleIterator,\n          class Distance, class UniformRandomBitGenerator &gt;\nSampleIterator sample( PopulationIterator first, PopulationIterator last,\n                       SampleIterator out, Distance n, \n                       UniformRandomBitGenerator&& g);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/sample
std::search_n	A										<section class="prog__container">\n<p>Searches the range <code>[first, last)</code> for the first sequence of count identical elements, each equal to the given value value.</p>\n<pre><code>template&lt; class ForwardIt, class Size, class T &gt;\nForwardIt search_n( ForwardIt first, ForwardIt last, Size count, const T& value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt, class Size, class T &gt;\nForwardIt search_n( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last, Size count, const T& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/search_n
std::set_difference	A										<section class="prog__container">\n<p>Copies the elements from the sorted range <code>[first1, last1)</code> which are not found in the sorted range <code>[first2, last2)</code> to the range beginning at <code>d_first</code>.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2, class OutputIt &gt;\nOutputIt set_difference( InputIt1 first1, InputIt1 last1,\n                         InputIt2 first2, InputIt2 last2,\n                         OutputIt d_first );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/set_difference
std::set_intersection	A										<section class="prog__container">\n<p>Constructs a sorted range beginning at <code>d_first</code> consisting of elements that are found in both sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2, class OutputIt &gt;\nOutputIt set_intersection( InputIt1 first1, InputIt1 last1,\n                           InputIt2 first2, InputIt2 last2,\n                           OutputIt d_first );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/set_intersection
std::set_symmetric_difference	A										<section class="prog__container">\n<p>Computes symmetric difference of two sorted ranges: the elements that are found in either of the ranges, but not in both of them are copied to the range beginning at <code>d_first</code>.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2, class OutputIt &gt;\nOutputIt set_symmetric_difference( InputIt1 first1, InputIt1 last1,\n                                   InputIt2 first2, InputIt2 last2,\n                                   OutputIt d_first );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference
std::set_union	A										<section class="prog__container">\n<p>Constructs a sorted range beginning at <code>d_first</code> consisting of all elements present in one or both sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2, class OutputIt &gt;\nOutputIt set_union( InputIt1 first1, InputIt1 last1,\n                    InputIt2 first2, InputIt2 last2,\n                    OutputIt d_first );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/set_union
std::sort	A										<section class="prog__container">\n<p>Sorts the elements in the range <code>[first, last)</code> in ascending order.</p>\n<pre><code>template&lt; class RandomIt &gt;\nvoid sort( RandomIt first, RandomIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class RandomIt &gt;\nvoid sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/sort
std::sort_heap	A										<section class="prog__container">\n<p>Converts the <i>max heap</i> <code>[first, last)</code> into a sorted range in ascending order.</p>\n<pre><code>template&lt; class RandomIt &gt;\nvoid sort_heap( RandomIt first, RandomIt last );</code></pre><pre><code>template&lt; class RandomIt, class Compare &gt;\nvoid sort_heap( RandomIt first, RandomIt last, Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/sort_heap
std::stable_sort	A										<section class="prog__container">\n<p>Sorts the elements in the range <code>[first, last)</code> in ascending order.</p>\n<pre><code>template&lt; class RandomIt &gt;\nvoid stable_sort( RandomIt first, RandomIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class RandomIt &gt;\nvoid stable_sort( ExecutionPolicy&& policy, RandomIt first, RandomIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/stable_sort
std::swap	A										<section class="prog__container">\n<p>Exchanges the given values.</p>\n<pre><code>template&lt; class T &gt;\nvoid swap( T& a, T& b );</code></pre><pre><code>template&lt; class T2, std::size_t N &gt;\nvoid swap( T2 (&a)[N], T2 (&b)[N]);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/swap
std::transform	A										<section class="prog__container">\n<p><code>std::transform</code> applies the given function to a range and stores the result in another range, beginning at <code>d_first</code>.</p>\n<pre><code>template&lt; class InputIt, class OutputIt, class UnaryOperation &gt;\nOutputIt transform( InputIt first1, InputIt last1, OutputIt d_first,\n                    UnaryOperation unary_op );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/transform
std::transform_exclusive_scan	A										<section class="prog__container">\n<p>Transforms each element in the range <code>[first, last)</code> with <code>unary_op</code>, then computes an exclusive prefix sum operation using <code>binary_op</code> over the resulting range, with...</p>\n<pre><code>template&lt; class InputIt, class OutputIt,\n          class UnaryOperation, class T, \n          class BinaryOperation &gt;\nOutputIt transform_exclusive_scan( InputIt first, InputIt last,\n                                   OutputIt d_first, UnaryOperation unary_op,\n                                   T init, BinaryOperation binary_op );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/transform_exclusive_scan
std::transform_inclusive_scan	A										<section class="prog__container">\n<p>Transforms each element in the range <code>[first, last)</code> with <code>unary_op</code>, then computes an inclusive prefix sum operation using <code>binary_op</code> over the resulting range...</p>\n<pre><code>template&lt; class InputIt, class OutputIt,\n          class UnaryOperation, class BinaryOperation &gt;\nOutputIt transform_inclusive_scan( InputIt first, InputIt last,\n                                   OutputIt d_first, UnaryOperation unary_op,\n                                   BinaryOperation binary_op );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/transform_inclusive_scan
std::unique	A										<section class="prog__container">\n<p>Eliminates all but the first element from every consecutive group of equivalent elements from the range <code>[first, last)</code> and returns a past-the-end iterator for the new <i>logical</i> end...</p>\n<pre><code>template&lt; class ForwardIt &gt;\nForwardIt unique( ForwardIt first, ForwardIt last );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt &gt;\nForwardIt unique( ExecutionPolicy&& policy, ForwardIt first, ForwardIt last );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/unique
std::unique_copy	A										<section class="prog__container">\n<p>Copies the elements from the range <code>[first, last)</code>, to another range beginning at <code>d_first</code> in such a way that there are no consecutive equal elements.</p>\n<pre><code>template&lt; class InputIt, class OutputIt &gt;\nOutputIt unique_copy( InputIt first, InputIt last,\n                      OutputIt d_first );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/algorithm/unique_copy
std::upper_bound	A										<section class="prog__container">\n<p>Returns an iterator pointing to the first element in the range <code>[first, last)</code> that is <i>greater</i> than <code>value</code>.</p>\n<pre><code>template&lt; class ForwardIt, class T &gt;\nForwardIt upper_bound( ForwardIt first, ForwardIt last, const T& value );</code></pre><pre><code>template&lt; class ForwardIt, class T, class Compare &gt;\nForwardIt upper_bound( ForwardIt first, ForwardIt last, const T& value, Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/algorithm/upper_bound
ATOMIC_VAR_INIT	A										<section class="prog__container">\n<p>Expands to an expression which can be used to initialize an std::atomic object that can be initialized from <code>value</code>.</p>\n<pre><code>#define ATOMIC_VAR_INIT(value) /* implementation-defined */</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/ATOMIC_VAR_INIT
std::atomic	A										<section class="prog__container">\n<p>Each instantiation and full specialization of the <code>std::atomic</code> template defines an atomic type.</p>\n<pre><code>template&lt; class T &gt;\nstruct atomic;</code></pre><pre><code>template&lt;&gt;\nstruct atomic&lt;Integral&gt;;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic
std::atomic::atomic	A										<section class="prog__container">\n<p>Constructs new atomic variable.</p>\n<pre><code>constexpr atomic( T desired );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/atomic
std::atomic::compare_exchange_strong	A										<section class="prog__container">\n<p>Atomically compares the object representation of <code>*this</code> with the object representation of <code>expected</code>, as if by std::memcmp, and if those are bitwise-equal, replaces the former...</p>\n<pre><code>bool compare_exchange_strong( T& expected, T desired,\n                              std::memory_order success, \n                              std::memory_order failure );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange
std::atomic::compare_exchange_weak	A										<section class="prog__container">\n<p>Atomically compares the object representation of <code>*this</code> with the object representation of <code>expected</code>, as if by std::memcmp, and if those are bitwise-equal, replaces the former...</p>\n<pre><code>bool compare_exchange_weak( T& expected, T desired,\n                            std::memory_order success, \n                            std::memory_order failure );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange
std::atomic::exchange	A										<section class="prog__container">\n<p>Atomically replaces the underlying value with <code>desired</code>.</p>\n<pre><code>T exchange( T desired, std::memory_order order = std::memory_order_seq_cst );</code></pre><pre><code>T exchange( T desired, std::memory_order order = std::memory_order_seq_cst ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/exchange
std::atomic::fetch_add	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of arithmetic addition of the value and <code>arg</code>.</p>\n<pre><code>T fetch_add( T arg, \n             std::memory_order order = std::memory_order_seq_cst );</code></pre><pre><code>T fetch_add( T arg, \n             std::memory_order order = std::memory_order_seq_cst ) volatile;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/fetch_add
std::atomic::fetch_and	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of bitwise AND of the value and <code>arg</code>.</p>\n<pre><code>T fetch_and( T arg, \n             std::memory_order order = std::memory_order_seq_cst );</code></pre><pre><code>T fetch_and( T arg, \n             std::memory_order order = std::memory_order_seq_cst ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/fetch_and
std::atomic::fetch_or	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of bitwise OR of the value and <code>arg</code>.</p>\n<pre><code>T fetch_or( T arg, \n            std::memory_order order = std::memory_order_seq_cst );</code></pre><pre><code>T fetch_or( T arg, \n            std::memory_order order = std::memory_order_seq_cst ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/fetch_or
std::atomic::fetch_sub	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of arithmetic subtraction of the value and <code>arg</code>.</p>\n<pre><code>T fetch_sub( T arg, \n             std::memory_order order = std::memory_order_seq_cst );</code></pre><pre><code>T fetch_sub( T arg, \n             std::memory_order order = std::memory_order_seq_cst ) volatile;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/fetch_sub
std::atomic::fetch_xor	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of bitwise XOR of the value and <code>arg</code>.</p>\n<pre><code>T fetch_xor( T arg, \n             std::memory_order order = std::memory_order_seq_cst );</code></pre><pre><code>T fetch_xor( T arg, \n             std::memory_order order = std::memory_order_seq_cst ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/fetch_xor
std::atomic::is_lock_free	A										<section class="prog__container">\n<p>Checks whether the atomic operations on all objects of this type are lock-free.</p>\n<pre><code>bool is_lock_free(void) const;</code></pre><pre><code>bool is_lock_free(void) const volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/is_lock_free
std::atomic::load	A										<section class="prog__container">\n<p>Atomically loads and returns the current value of the atomic variable.</p>\n<pre><code>T load( std::memory_order order = std::memory_order_seq_cst ) const;</code></pre><pre><code>T load( std::memory_order order = std::memory_order_seq_cst ) const volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/load
std::atomic::operator=	A										<section class="prog__container">\n<p> Atomically assigns a value <code>desired</code> to the atomic variable.</p>\n<pre><code>T operator=( T desired );</code></pre><pre><code>T operator=( T desired ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator=
std::atomic::operator++	A										<section class="prog__container">\n<p>Atomically increments or decrements the current value.</p>\n<pre><code>T operator++(void);\nT operator++(void) volatile;</code></pre><pre><code>T* operator++(void);\nT* operator++(void) volatile;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith
std::atomic::operator++(int)	A										<section class="prog__container">\n<p>Atomically increments or decrements the current value.</p>\n<pre><code>T operator++(void);\nT operator++(void) volatile;</code></pre><pre><code>T* operator++(void);\nT* operator++(void) volatile;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith
std::atomic::operator--	A										<section class="prog__container">\n<p>Atomically increments or decrements the current value.</p>\n<pre><code>T operator--(void);\nT operator--(void) volatile;</code></pre><pre><code>T* operator--(void);\nT* operator--(void) volatile;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith
std::atomic::operator--(int)	A										<section class="prog__container">\n<p>Atomically increments or decrements the current value.</p>\n<pre><code>T operator--(void);\nT operator--(void) volatile;</code></pre><pre><code>T* operator--(void);\nT* operator--(void) volatile;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith
std::atomic::operator&=	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.</p>\n<pre><code>T operator&=( T arg );</code></pre><pre><code>T operator&=( T arg ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2
std::atomic::operator+=	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.</p>\n<pre><code>T operator+=( T arg );</code></pre><pre><code>T operator+=( T arg ) volatile;</code></pre><pre><code>T* operator+=( std::ptrdiff_t arg );</code></pre><pre><code>T* operator+=( std::ptrdiff_t arg ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2
std::atomic::operator-=	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.</p>\n<pre><code>T operator-=( T arg );</code></pre><pre><code>T operator-=( T arg ) volatile;</code></pre><pre><code>T* operator-=( std::ptrdiff_t arg );</code></pre><pre><code>T* operator-=( std::ptrdiff_t arg ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2
std::atomic::operator^=	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.</p>\n<pre><code>T operator^=( T arg );</code></pre><pre><code>T operator^=( T arg ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2
std::atomic::operator|=	A										<section class="prog__container">\n<p>Atomically replaces the current value with the result of computation involving the previous value and <code>arg</code>.</p>\n<pre><code>T operator|=( T arg );</code></pre><pre><code>T operator|=( T arg ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/operator_arith2
std::atomic::store	A										<section class="prog__container">\n<p>Atomically replaces the current value with <code>desired</code>.</p>\n<pre><code>void store( T desired, std::memory_order order = std::memory_order_seq_cst );</code></pre><pre><code>void store( T desired, std::memory_order order = std::memory_order_seq_cst ) volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic/store
std::atomic_compare_exchange_strong	A										<section class="prog__container">\n<p>Atomically compares the object representation of the object pointed to by <code>obj</code> with the object representation of the object pointed to by <code>expected</code>, as if by std::memcmp, and...</p>\n<pre><code>template&lt; class T &gt;\nbool atomic_compare_exchange_strong( std::atomic&lt;T&gt;* obj,\n                                     T* expected, T desired );</code></pre><pre><code>template&lt; class T &gt;\nbool atomic_compare_exchange_strong( volatile std::atomic&lt;T&gt;* obj,\n                                     T* expected, T desired );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_compare_exchange
std::atomic_compare_exchange_strong_explicit	A										<section class="prog__container">\n<p>Atomically compares the object representation of the object pointed to by <code>obj</code> with the object representation of the object pointed to by <code>expected</code>, as if by std::memcmp, and...</p>\n<pre><code>template&lt; class T &gt;\nbool atomic_compare_exchange_strong_explicit( std::atomic&lt;T&gt;* obj,\n                                              T* expected, T desired,\n                                              std::memory_order succ, \n                                              std::memory_order fail );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_compare_exchange
std::atomic_compare_exchange_weak	A										<section class="prog__container">\n<p>Atomically compares the object representation of the object pointed to by <code>obj</code> with the object representation of the object pointed to by <code>expected</code>, as if by std::memcmp, and...</p>\n<pre><code>template&lt; class T &gt;\nbool atomic_compare_exchange_weak( std::atomic&lt;T&gt;* obj, \n                                   T* expected, T desired );</code></pre><pre><code>template&lt; class T &gt;\nbool atomic_compare_exchange_weak( volatile std::atomic&lt;T&gt;* obj, \n                                   T* expected, T desired );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_compare_exchange
std::atomic_compare_exchange_weak_explicit	A										<section class="prog__container">\n<p>Atomically compares the object representation of the object pointed to by <code>obj</code> with the object representation of the object pointed to by <code>expected</code>, as if by std::memcmp, and...</p>\n<pre><code>template&lt; class T &gt;\nbool atomic_compare_exchange_weak_explicit( std::atomic&lt;T&gt;* obj,\n                                            T* expected, T desired,\n                                            std::memory_order succ, \n                                            std::memory_order fail );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_compare_exchange
std::atomic_fetch_add	A										<section class="prog__container">\n<p>Performs atomic addition.</p>\n<pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_add( std::atomic&lt;Integral&gt;* obj, Integral arg );</code></pre><pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_add( volatile std::atomic&lt;Integral&gt;* obj, Integral arg );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_fetch_add
std::atomic_fetch_add_explicit	A										<section class="prog__container">\n<p>Performs atomic addition.</p>\n<pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_add_explicit( std::atomic&lt;Integral&gt;* obj, Integral arg, \n                                    std::memory_order order );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_fetch_add
std::atomic_fetch_or	A										<section class="prog__container">\n<p>Atomically replaces the value pointed by <code>arg</code> with the result of bitwise OR between the old value of <code>obj</code> and <code>arg</code>.</p>\n<pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_or( std::atomic&lt;Integral&gt;* obj, Integral arg );</code></pre><pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_or( volatile std::atomic&lt;Integral&gt;* obj, Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_fetch_or
std::atomic_fetch_or_explicit	A										<section class="prog__container">\n<p>Atomically replaces the value pointed by <code>arg</code> with the result of bitwise OR between the old value of <code>obj</code> and <code>arg</code>.</p>\n<pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_or_explicit( std::atomic&lt;Integral&gt;* obj,\n                                   Integral arg, \n                                   std::memory_order order );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_fetch_or
std::atomic_fetch_sub	A										<section class="prog__container">\n<p>Performs atomic subtraction.</p>\n<pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_sub( std::atomic&lt;Integral&gt;* obj, Integral arg );</code></pre><pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_sub( volatile std::atomic&lt;Integral&gt;* obj, Integral arg );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_fetch_sub
std::atomic_fetch_sub_explicit	A										<section class="prog__container">\n<p>Performs atomic subtraction.</p>\n<pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_sub_explicit( std::atomic&lt;Integral&gt;* obj, Integral arg, \n                                    std::memory_order order );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_fetch_sub
std::atomic_fetch_xor	A										<section class="prog__container">\n<p>Atomically replaces the value pointed by <code>arg</code> with the result of bitwise XOR between the old value of <code>obj</code> and <code>arg</code>.</p>\n<pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_xor( std::atomic&lt;Integral&gt;* obj, Integral arg );</code></pre><pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_xor( volatile std::atomic&lt;Integral&gt;* obj, Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_fetch_xor
std::atomic_fetch_xor_explicit	A										<section class="prog__container">\n<p>Atomically replaces the value pointed by <code>arg</code> with the result of bitwise XOR between the old value of <code>obj</code> and <code>arg</code>.</p>\n<pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_xor_explicit( std::atomic&lt;Integral&gt;* obj, Integral arg, \n                                    std::memory_order order );</code></pre><pre><code>template&lt; class Integral &gt;\nIntegral atomic_fetch_xor_explicit( volatile std::atomic&lt;Integral&gt;* obj, Integral arg, \n                                    std::memory_order order );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_fetch_xor
std::atomic_flag	A										<section class="prog__container">\n<p>std::atomic_flag is an atomic boolean type.</p>\n<pre><code>class atomic_flag;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_flag
std::atomic_flag::clear	A										<section class="prog__container">\n<p>Atomically changes the state of a std::atomic_flag to clear (<code>false</code>).</p>\n<pre><code>void clear( std::memory_order order = std::memory_order_seq_cst ) volatile;</code></pre><pre><code>void clear( std::memory_order order = std::memory_order_seq_cst );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_flag/clear
std::atomic_flag::test_and_set	A										<section class="prog__container">\n<p>Atomically changes the state of a std::atomic_flag to set (<code>true</code>) and returns the value it held before.</p>\n<pre><code>bool test_and_set(std::memory_order order = std::memory_order_seq_cst) volatile;</code></pre><pre><code>bool test_and_set(std::memory_order order = std::memory_order_seq_cst);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_flag/test_and_set
std::atomic_init	A										<section class="prog__container">\n<p>Initializes the default-constructed atomic object <code>obj</code> with the value <code>desired</code>.</p>\n<pre><code>template&lt; class T &gt;\nvoid atomic_init( std::atomic&lt;T&gt;* obj, T desired );</code></pre><pre><code>template&lt; class T &gt;\nvoid atomic_init( volatile std::atomic&lt;T&gt;* obj, T desired );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_init
std::atomic_signal_fence	A										<section class="prog__container">\n<p>Establishes memory synchronization ordering of non-atomic and relaxed atomic accesses, as instructed by <code>order</code>, between a thread and a signal handler executed on the same thread.</p>\n<pre><code>extern "C" void atomic_signal_fence( std::memory_order order );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_signal_fence
std::atomic_thread_fence	A										<section class="prog__container">\n<p>Establishes memory synchronization ordering of non-atomic and relaxed atomic accesses, as instructed by <code>order</code>, without an associated atomic operation.</p>\n<pre><code>extern "C" void atomic_thread_fence( std::memory_order order );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/atomic_thread_fence
std::kill_dependency	A										<section class="prog__container">\n<p>Informs the compiler that the dependency tree started by an std::memory_order_consume atomic load operation does not extend past the return value of std::kill_dependency...</p>\n<pre><code>template&lt; class T &gt;\nT kill_dependency( T y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/atomic/kill_dependency
std::asctime	A										<section class="prog__container">\n<p>Converts given calendar time std::tm to a textual representation of the following fixed 25-character form: <code>Www Mmm dd hh:mm:ss yyyy\n</code>...</p>\n<pre><code>char* asctime( const std::tm* time_ptr );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/asctime
std::clock	A										<section class="prog__container">\n<p>Returns the approximate processor time used by the process since the beginning of an implementation-defined era related to the program's execution.</p>\n<pre><code>std::clock_t clock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/clock
std::ctime	A										<section class="prog__container">\n<p>Converts given time since epoch to a calendar local time and then to a textual representation, as if by calling <code>std::asctime(std::localtime(time))</code>.</p>\n<pre><code>char* ctime( const std::time_t* time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/ctime
std::difftime	A										<section class="prog__container">\n<p>Computes difference between two calendar times as std::time_t objects (<code>time_end - time_beg</code>) in seconds.</p>\n<pre><code>double difftime( std::time_t time_end, std::time_t time_beg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/difftime
std::gmtime	A										<section class="prog__container">\n<p>Converts given time since epoch as std::time_t value into calendar time, expressed in Coordinated Universal Time (UTC).</p>\n<pre><code>std::tm* gmtime( const std::time_t* time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/gmtime
std::localtime	A										<section class="prog__container">\n<p>Converts given time since epoch as std::time_t value into calendar time, expressed in local time.</p>\n<pre><code>std::tm* localtime( const std::time_t *time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/localtime
std::mktime	A										<section class="prog__container">\n<p>Converts local calendar time to a time since epoch as a <code>time_t</code> object.</p>\n<pre><code>std::time_t mktime( std::tm* time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/mktime
std::strftime	A										<section class="prog__container">\n<p>Converts the date and time information from a given calendar time <code>time</code> to a null-terminated multibyte character string <code>str</code> according to format string <code>format</code>.</p>\n<pre><code>std::size_t strftime( char* str, std::size_t count, const char* format, const std::tm* time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/strftime
std::time	A										<section class="prog__container">\n<p>Returns the current calendar time encoded as a std::time_t object, and also stores it in the object pointed to by <code>arg</code>, unless <code>arg</code> is a null pointer.</p>\n<pre><code>std::time_t time( std::time_t* arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/time
std::timespec	A										<section class="prog__container">\n<p>Structure holding an interval broken down into seconds and nanoseconds.</p>\n<pre><code>struct timespec;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/timespec
std::tm	A										<section class="prog__container">\n<p>Structure holding a calendar date and time broken down into its components.</p>\n<pre><code>struct tm;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/tm
std::wcsftime	A										<section class="prog__container">\n<p>Converts the date and time information from a given calendar time <code>time</code> to a null-terminated wide character string <code>str</code> according to format string <code>format</code>.</p>\n<pre><code>std::size_t wcsftime( wchar_t* str, std::size_t count, const wchar_t* format, const std::tm* time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/c/wcsftime
std::chrono::duration	A										<section class="prog__container">\n<p>Class template <code>std::chrono::duration</code> represents a time interval.</p>\n<pre><code>template&lt;\n    class Rep, \n    class Period = std::ratio&lt;1&gt; \n&gt; class duration;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration
std::chrono::duration::count	A										<section class="prog__container">\n<p>Returns the number of ticks for this duration.</p>\n<pre><code>constexpr rep count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/count
std::chrono::duration::duration	A										<section class="prog__container">\n<p>Constructs a new <code>duration</code> from one of several optional data sources.</p>\n<pre><code>constexpr duration(void) = default;</code></pre><pre><code>duration( const duration& ) = default;</code></pre><pre><code>template&lt; class Rep2 &gt;\nconstexpr explicit duration( const Rep2& r );</code></pre><pre><code>template&lt; class Rep2, class Period2 &gt;\nconstexpr duration( const duration&lt;Rep2,Period2&gt;& d );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/duration
std::chrono::duration_cast	A										<section class="prog__container">\n<p>Converts a std::chrono::duration to a duration of different type <code>ToDuration</code>.</p>\n<pre><code>template &lt;class ToDuration, class Rep, class Period&gt;\nconstexpr ToDuration duration_cast(const duration&lt;Rep,Period&gt;& d);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/duration_cast
std::chrono::duration::max	A										<section class="prog__container">\n<p>Returns a duration with the largest possible value.</p>\n<pre><code>static constexpr duration max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/max
std::chrono::duration::min	A										<section class="prog__container">\n<p>Returns a duration with the lowest possible value.</p>\n<pre><code>static constexpr duration min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/min
std::chrono::duration::operator=	A										<section class="prog__container">\n<p>Assigns the contents of one <code>duration</code> to another.</p>\n<pre><code>duration& operator=( const duration &other ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator=
std::chrono::duration::operator+	A										<section class="prog__container">\n<p>Implements unary plus and unary minus for the durations.</p>\n<pre><code>constexpr duration operator+(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith
std::chrono::duration::operator-	A										<section class="prog__container">\n<p>Implements unary plus and unary minus for the durations.</p>\n<pre><code>constexpr duration operator-(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith
std::chrono::duration::operator++	A										<section class="prog__container">\n<p>Increments or decrements the number of ticks for this duration.</p>\n<pre><code>constexpr duration& operator++(void);</code></pre><pre><code>constexpr duration operator++(int);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith2
std::chrono::duration::operator++(int)	A										<section class="prog__container">\n<p>Increments or decrements the number of ticks for this duration.</p>\n<pre><code>constexpr duration& operator++(void);</code></pre><pre><code>constexpr duration operator++(int);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith2
std::chrono::duration::operator--	A										<section class="prog__container">\n<p>Increments or decrements the number of ticks for this duration.</p>\n<pre><code>constexpr duration& operator--(void);</code></pre><pre><code>constexpr duration operator--(int);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith2
std::chrono::duration::operator--(int)	A										<section class="prog__container">\n<p>Increments or decrements the number of ticks for this duration.</p>\n<pre><code>constexpr duration& operator--(void);</code></pre><pre><code>constexpr duration operator--(int);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith2
std::chrono::duration::operator%=	A										<section class="prog__container">\n<p>Performs compound assignments between two durations with the same period or between a duration and a tick count value.</p>\n<pre><code>constexpr duration& operator%=(const rep& rhs);</code></pre><pre><code>constexpr duration& operator%=(const duration& rhs);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3
std::chrono::duration::operator*=	A										<section class="prog__container">\n<p>Performs compound assignments between two durations with the same period or between a duration and a tick count value.</p>\n<pre><code>constexpr duration& operator*=(const rep& rhs);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3
std::chrono::duration::operator+=	A										<section class="prog__container">\n<p>Performs compound assignments between two durations with the same period or between a duration and a tick count value.</p>\n<pre><code>constexpr duration& operator+=(const duration& d);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3
std::chrono::duration::operator-=	A										<section class="prog__container">\n<p>Performs compound assignments between two durations with the same period or between a duration and a tick count value.</p>\n<pre><code>constexpr duration& operator-=(const duration& d);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3
std::chrono::duration::operator/=	A										<section class="prog__container">\n<p>Performs compound assignments between two durations with the same period or between a duration and a tick count value.</p>\n<pre><code>constexpr duration& operator/=(const rep& rhs);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/operator_arith3
std::chrono::duration::zero	A										<section class="prog__container">\n<p>Returns a zero-length duration.</p>\n<pre><code>static constexpr duration zero(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration/zero
std::chrono::duration_values	A										<section class="prog__container">\n<p>The <code>std::chrono::duration_values</code> type defines three common durations...</p>\n<pre><code>template &lt;class Rep&gt;\nstruct duration_values;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration_values
std::chrono::duration_values::max	A										<section class="prog__container">\n<p>Returns the largest possible representation.</p>\n<pre><code>static constexpr Rep max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration_values/max
std::chrono::duration_values::min	A										<section class="prog__container">\n<p>Returns the lowest possible representation.</p>\n<pre><code>static constexpr Rep min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration_values/min
std::chrono::duration_values::zero	A										<section class="prog__container">\n<p>Returns a zero-length representation.</p>\n<pre><code>static constexpr Rep zero(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/duration_values/zero
std::chrono::high_resolution_clock	A										<section class="prog__container">\n<p>Class <code>std::chrono::high_resolution_clock</code> represents the clock with the smallest tick period provided by the implementation.</p>\n<pre><code>class high_resolution_clock;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/high_resolution_clock
std::chrono::high_resolution_clock::now	A										<section class="prog__container">\n<p>Returns a time point representing the current point in time.</p>\n<pre><code>static std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; now(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/high_resolution_clock/now
std::chrono::steady_clock	A										<section class="prog__container">\n<p>Class <code>std::chrono::steady_clock</code> represents a monotonic clock.</p>\n<pre><code>class steady_clock;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/steady_clock
std::chrono::steady_clock::now	A										<section class="prog__container">\n<p>Returns a time point representing the current point in time.</p>\n<pre><code>static std::chrono::time_point&lt;std::chrono::steady_clock&gt; now(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/steady_clock/now
std::chrono::system_clock	A										<section class="prog__container">\n<p>Class <code>std::chrono::system_clock</code> represents the system-wide real time wall clock.</p>\n<pre><code>class system_clock;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/system_clock
std::chrono::system_clock::from_time_t	A										<section class="prog__container">\n<p>Converts <code>t</code> to a time point type, using the coarser precision of the two types.</p>\n<pre><code>static std::chrono::system_clock::time_point from_time_t( std::time_t t );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/system_clock/from_time_t
std::chrono::system_clock::now	A										<section class="prog__container">\n<p>Returns a time point representing the current point in time.</p>\n<pre><code>static std::chrono::time_point&lt;std::chrono::system_clock&gt; now(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/system_clock/now
std::chrono::system_clock::to_time_t	A										<section class="prog__container">\n<p>Converts <code>t</code> to a std::time_t type.</p>\n<pre><code>static std::time_t to_time_t( const time_point& t );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/system_clock/to_time_t
std::chrono::time_point	A										<section class="prog__container">\n<p>Class template <code>std::chrono::time_point</code> represents a point in time.</p>\n<pre><code>template&lt; \n    class Clock, \n    class Duration = typename Clock::duration \n&gt; class time_point;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/time_point
std::chrono::time_point::max	A										<section class="prog__container">\n<p>Returns a <code>time_point</code> with the largest possible duration, i.e. <code>std::chrono::time_point(std::chrono::duration::max(void))</code>.</p>\n<pre><code>static constexpr time_point max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/time_point/max
std::chrono::time_point::min	A										<section class="prog__container">\n<p>Returns a <code>time_point</code> with the smallest possible duration, i.e. <code>std::chrono::time_point(std::chrono::duration::min(void))</code>.</p>\n<pre><code>static constexpr time_point min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/time_point/min
std::chrono::time_point::operator+	A										<section class="prog__container">\n<p>Modifies the time point by the given duration.</p>\n<pre><code>constexpr time_point& operator+=( const duration& d );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/time_point/operator_arith
std::chrono::time_point::operator-	A										<section class="prog__container">\n<p>Modifies the time point by the given duration.</p>\n<pre><code>constexpr time_point& operator-=( const duration& d );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/time_point/operator_arith
std::chrono::time_point::time_point	A										<section class="prog__container">\n<p>Constructs a new <code>time_point</code> from one of several optional data sources.</p>\n<pre><code>constexpr time_point(void);</code></pre><pre><code>explicit time_point( const duration& d );</code></pre><pre><code>constexpr explicit time_point( const duration& d );</code></pre><pre><code>template&lt; class Duration2 &gt;\ntime_point( const time_point&lt;Clock,Duration2&gt;& t );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/chrono/time_point/time_point
std::chrono::time_point_cast	A										<section class="prog__container">\n<p>Converts a std::chrono::time_point from one duration to another.</p>\n<pre><code>template &lt;class ToDuration, class Clock, class Duration&gt;\ntime_point&lt;Clock, ToDuration&gt; time_point_cast(\n                                 const time_point&lt;Clock, Duration&gt; &t);</code></pre><pre><code>template &lt;class ToDuration, class Clock, class Duration&gt;\nconstexpr time_point&lt;Clock, ToDuration&gt; time_point_cast(\n                                 const time_point&lt;Clock, Duration&gt; &t);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/time_point/time_point_cast
std::chrono::time_point::time_since_epoch	A										<section class="prog__container">\n<p>Returns a duration representing the amount of time between <code>*this</code> and the <code>clock</code>'s epoch.</p>\n<pre><code>duration time_since_epoch(void) const;</code></pre><pre><code>constexpr duration time_since_epoch(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/time_point/time_since_epoch
std::chrono::treat_as_floating_point	A										<section class="prog__container">\n<p>The <code>std::chrono::treat_as_floating_point</code> trait helps determine if a duration can be converted to another duration with a different tick period.</p>\n<pre><code>template &lt;class Rep&gt; \nstruct treat_as_floating_point : std::is_floating_point&lt;Rep&gt; {};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/chrono/treat_as_floating_point
std::array	A										<section class="prog__container">\n<p><code>std::array</code> is a container that encapsulates fixed size arrays.</p>\n<pre><code>template&lt; \n    class T, \n    std::size_t N \n&gt; struct array;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array
std::array::at	A										<section class="prog__container">\n<p>Returns a reference to the element at specified location <code>pos</code>, with bounds checking.</p>\n<pre><code>constexpr reference at( size_type pos );</code></pre><pre><code>constexpr const_reference at( size_type pos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/at
std::array::back	A										<section class="prog__container">\n<p>Returns reference to the last element in the container.</p>\n<pre><code>constexpr reference back(void);</code></pre><pre><code>constexpr const_reference back(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/back
std::array::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>constexpr iterator begin(void);</code></pre><pre><code>constexpr const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/begin
std::array::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>constexpr const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/begin
std::array::data	A										<section class="prog__container">\n<p>Returns pointer to the underlying array serving as element storage.</p>\n<pre><code>constexpr T* data(void);</code></pre><pre><code>constexpr const T* data(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/data
std::array::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>constexpr bool empty(void);</code></pre><pre><code>constexpr bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/empty
std::array::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>constexpr const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/end
std::array::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>constexpr iterator end(void);</code></pre><pre><code>constexpr const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/end
std::array::fill	A										<section class="prog__container">\n<p>Assigns the given value <code>value</code> to all elements in the container.</p>\n<pre><code>void fill( const T& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/fill
std::array::front	A										<section class="prog__container">\n<p>Returns a reference to the first element in the container.</p>\n<pre><code>constexpr reference front(void);</code></pre><pre><code>constexpr const_reference front(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/front
std::array::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>constexpr size_type max_size(void);</code></pre><pre><code>constexpr size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/max_size
std::array::operator[]	A										<section class="prog__container">\n<p>Returns a reference to the element at specified location <code>pos</code>.</p>\n<pre><code>constexpr reference operator[]( size_type pos );</code></pre><pre><code>constexpr const_reference operator[]( size_type pos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/operator_at
std::array::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>constexpr const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/rbegin
std::array::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>constexpr reverse_iterator rbegin(void);</code></pre><pre><code>constexpr const_reverse_iterator  rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/rbegin
std::array::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>constexpr const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/rend
std::array::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>constexpr reverse_iterator  rend(void);</code></pre><pre><code>constexpr const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/rend
std::array::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>constexpr size_type size(void);</code></pre><pre><code>constexpr size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/size
std::array::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( array& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/array/swap
std::deque	A										<section class="prog__container">\n<p><code>std::deque</code> (double-ended queue) is an indexed sequence container that allows fast insertion and deletion at both its beginning and its end.</p>\n<pre><code>template&lt;\n    class T,\n    class Allocator = std::allocator&lt;T&gt;\n&gt; class deque;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/deque
std::deque::assign	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>void assign( size_type count, const T& value );</code></pre><pre><code>template&lt; class InputIt &gt;\nvoid assign( InputIt first, InputIt last );</code></pre><pre><code>void assign( std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/assign
std::deque::at	A										<section class="prog__container">\n<p>Returns a reference to the element at specified location <code>pos</code>, with bounds checking.</p>\n<pre><code>reference       at( size_type pos );</code></pre><pre><code>const_reference at( size_type pos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/at
std::deque::back	A										<section class="prog__container">\n<p>Returns reference to the last element in the container.</p>\n<pre><code>reference back(void);</code></pre><pre><code>const_reference back(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/back
std::deque::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/begin
std::deque::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/begin
std::deque::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/clear
std::deque::deque	A										<section class="prog__container">\n<p>Constructs a new container from a variety of data sources, optionally using a user supplied allocator <code>alloc</code>.</p>\n<pre><code>deque(void) : deque( Allocator(void) ) {}\nexplicit deque( const Allocator& alloc );</code></pre><pre><code>deque( size_type count, \n                const T& value,\n                const Allocator& alloc = Allocator(void));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/deque/deque
std::deque::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container directly before <code>pos</code>.</p>\n<pre><code>template&lt; class... Args &gt; \niterator emplace( const_iterator pos, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/emplace
std::deque::emplace_back	A										<section class="prog__container">\n<p>Appends a new element to the end of the container.</p>\n<pre><code>template&lt; class... Args &gt;\nvoid emplace_back( Args&&... args );</code></pre><pre><code>template&lt; class... Args &gt;\nreference emplace_back( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/emplace_back
std::deque::emplace_front	A										<section class="prog__container">\n<p>Inserts a new element to the beginning of the container.</p>\n<pre><code>template&lt; class... Args &gt;\nvoid emplace_front( Args&&... args );</code></pre><pre><code>template&lt; class... Args &gt;\nreference emplace_front( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/emplace_front
std::deque::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/empty
std::deque::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/end
std::deque::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/end
std::deque::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/erase
std::deque::front	A										<section class="prog__container">\n<p>Returns a reference to the first element in the container.</p>\n<pre><code>reference front(void);</code></pre><pre><code>const_reference front(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/front
std::deque::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/get_allocator
std::deque::insert	A										<section class="prog__container">\n<p>Inserts elements at the specified location in the container.</p>\n<pre><code>iterator insert( const_iterator pos, const T& value );</code></pre><pre><code>iterator insert( const_iterator pos, T&& value );</code></pre><pre><code>iterator insert( const_iterator pos, size_type count, const T& value );</code></pre><pre><code>template&lt; class InputIt &gt;\niterator insert( const_iterator pos, InputIt first, InputIt last );</code></pre><pre><code>iterator insert( const_iterator pos, std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/insert
std::deque::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/max_size
std::deque::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>deque& operator=( const deque& other );</code></pre><pre><code>deque& operator=( deque&& other );</code></pre><pre><code>deque& operator=( std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/operator=
std::deque::operator[]	A										<section class="prog__container">\n<p>Returns a reference to the element at specified location <code>pos</code>.</p>\n<pre><code>reference       operator[]( size_type pos );</code></pre><pre><code>const_reference operator[]( size_type pos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/operator_at
std::deque::pop_back	A										<section class="prog__container">\n<p>Removes the last element of the container.</p>\n<pre><code>void pop_back(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/pop_back
std::deque::pop_front	A										<section class="prog__container">\n<p>Removes the first element of the container.</p>\n<pre><code>void pop_front(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/pop_front
std::deque::push_back	A										<section class="prog__container">\n<p>Appends the given element <code>value</code> to the end of the container.</p>\n<pre><code>void push_back( const T& value );</code></pre><pre><code>void push_back( T&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/push_back
std::deque::push_front	A										<section class="prog__container">\n<p>Prepends the given element <code>value</code> to the beginning of the container.</p>\n<pre><code>void push_front( const T& value );</code></pre><pre><code>void push_front( T&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/push_front
std::deque::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/rbegin
std::deque::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>reverse_iterator rbegin(void);</code></pre><pre><code>const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/rbegin
std::deque::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/rend
std::deque::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>reverse_iterator rend(void);</code></pre><pre><code>const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/rend
std::deque::resize	A										<section class="prog__container">\n<p>Resizes the container to contain <code>count</code> elements.</p>\n<pre><code>void resize( size_type count );</code></pre><pre><code>void resize( size_type count, const value_type& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/resize
std::deque::shrink_to_fit	A										<section class="prog__container">\n<p>Requests the removal of unused capacity.</p>\n<pre><code>void shrink_to_fit(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/shrink_to_fit
std::deque::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/size
std::deque::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( deque& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/deque/swap
std::forward_list	A										<section class="prog__container">\n<p><code>std::forward_list</code> is a container that supports fast insertion and removal of elements from anywhere in the container.</p>\n<pre><code>template&lt;\n    class T,\n    class Allocator = std::allocator&lt;T&gt;\n&gt; class forward_list;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list
std::forward_list::assign	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>void assign( size_type count, const T& value );</code></pre><pre><code>template&lt; class InputIt &gt;\nvoid assign( InputIt first, InputIt last );</code></pre><pre><code>void assign( std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/assign
std::forward_list::before_begin	A										<section class="prog__container">\n<p>Returns an iterator to the element before the first element of the container.</p>\n<pre><code>iterator before_begin(void);</code></pre><pre><code>const_iterator before_begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/before_begin
std::forward_list::cbefore_begin	A										<section class="prog__container">\n<p>Returns an iterator to the element before the first element of the container.</p>\n<pre><code>const_iterator cbefore_begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/before_begin
std::forward_list::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/begin
std::forward_list::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/begin
std::forward_list::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/clear
std::forward_list::emplace_after	A										<section class="prog__container">\n<p>Inserts a new element into a position after the specified position in the container.</p>\n<pre><code>template&lt; class... Args &gt; \niterator emplace_after( const_iterator pos, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/emplace_after
std::forward_list::emplace_front	A										<section class="prog__container">\n<p>Inserts a new element to the beginning of the container.</p>\n<pre><code>template&lt; class... Args &gt;\nvoid emplace_front( Args&&... args );</code></pre><pre><code>template&lt; class... Args &gt;\nreference emplace_front( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/emplace_front
std::forward_list::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/empty
std::forward_list::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/end
std::forward_list::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/end
std::forward_list::erase_after	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase_after( const_iterator pos );</code></pre><pre><code>iterator erase_after( const_iterator first, const_iterator last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/erase_after
std::forward_list::forward_list	A										<section class="prog__container">\n<p>Constructs a new container from a variety of data sources, optionally using a user supplied allocator <code>alloc</code>.</p>\n<pre><code>explicit forward_list( const Allocator& alloc = Allocator(void) );</code></pre><pre><code>forward_list(void) : forward_list( Allocator(void) ) {}\nexplicit forward_list( const Allocator& alloc );</code></pre><pre><code>explicit forward_list( size_type count );</code></pre><pre><code>explicit forward_list( size_type count, const Allocator& alloc = Allocator(void) );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/forward_list
std::forward_list::front	A										<section class="prog__container">\n<p>Returns a reference to the first element in the container.</p>\n<pre><code>reference front(void);</code></pre><pre><code>const_reference front(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/front
std::forward_list::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/get_allocator
std::forward_list::insert_after	A										<section class="prog__container">\n<p>Inserts elements after the specified position in the container.</p>\n<pre><code>iterator insert_after( const_iterator pos, const T& value );</code></pre><pre><code>iterator insert_after( const_iterator pos, T&& value );</code></pre><pre><code>iterator insert_after( const_iterator pos, size_type count, const T& value );</code></pre><pre><code>template&lt; class InputIt &gt;\niterator insert_after( const_iterator pos, InputIt first, InputIt last );</code></pre><pre><code>iterator insert_after( const_iterator pos, std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/insert_after
std::forward_list::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/max_size
std::forward_list::merge	A										<section class="prog__container">\n<p>Merges two sorted lists into one.</p>\n<pre><code>void merge( forward_list& other );</code></pre><pre><code>void merge( forward_list&& other );</code></pre><pre><code>template &lt;class Compare&gt; \nvoid merge( forward_list& other, Compare comp );</code></pre><pre><code>template &lt;class Compare&gt; \nvoid merge( forward_list&& other, Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/merge
std::forward_list::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>forward_list& operator=( const forward_list& other );</code></pre><pre><code>forward_list& operator=( forward_list&& other );</code></pre><pre><code>forward_list& operator=( std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/operator=
std::forward_list::pop_front	A										<section class="prog__container">\n<p>Removes the first element of the container.</p>\n<pre><code>void pop_front(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/pop_front
std::forward_list::push_front	A										<section class="prog__container">\n<p>Prepends the given element <code>value</code> to the beginning of the container.</p>\n<pre><code>void push_front( const T& value );</code></pre><pre><code>void push_front( T&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/push_front
std::forward_list::remove	A										<section class="prog__container">\n<p>Removes all elements satisfying specific criteria.</p>\n<pre><code>void remove( const T& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/remove
std::forward_list::remove_if	A										<section class="prog__container">\n<p>Removes all elements satisfying specific criteria.</p>\n<pre><code>template&lt; class UnaryPredicate &gt;\nvoid remove_if( UnaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/remove
std::forward_list::resize	A										<section class="prog__container">\n<p>Resizes the container to contain <code>count</code> elements.</p>\n<pre><code>void resize( size_type count );</code></pre><pre><code>void resize( size_type count, const value_type& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/resize
std::forward_list::reverse	A										<section class="prog__container">\n<p>Reverses the order of the elements in the container.</p>\n<pre><code>void reverse(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/reverse
std::forward_list::sort	A										<section class="prog__container">\n<p>Sorts the elements in ascending order.</p>\n<pre><code>void sort(void);</code></pre><pre><code>template&lt; class Compare &gt; \nvoid sort( Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/sort
std::forward_list::splice_after	A										<section class="prog__container">\n<p>Moves elements from another <code>forward_list</code> to <code>*this</code>.</p>\n<pre><code>void splice_after( const_iterator pos, forward_list& other );</code></pre><pre><code>void splice_after( const_iterator pos, forward_list&& other );</code></pre><pre><code>void splice_after( const_iterator pos, forward_list& other, \n                   const_iterator it );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/splice_after
std::forward_list::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( forward_list& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/swap
std::forward_list::unique	A										<section class="prog__container">\n<p>Removes all <i>consecutive</i> duplicate elements from the container.</p>\n<pre><code>void unique(void);</code></pre><pre><code>template&lt; class BinaryPredicate &gt;\nvoid unique( BinaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/forward_list/unique
std::list	A										<section class="prog__container">\n<p><code>std::list</code> is a container that supports constant time insertion and removal of elements from anywhere in the container.</p>\n<pre><code>template&lt;\n    class T,\n    class Allocator = std::allocator&lt;T&gt;\n&gt; class list;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/list
std::list::assign	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>void assign( size_type count, const T& value );</code></pre><pre><code>template&lt; class InputIt &gt;\nvoid assign( InputIt first, InputIt last );</code></pre><pre><code>void assign( std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/assign
std::list::back	A										<section class="prog__container">\n<p>Returns reference to the last element in the container.</p>\n<pre><code>reference back(void);</code></pre><pre><code>const_reference back(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/back
std::list::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/begin
std::list::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/begin
std::list::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/clear
std::list::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container directly before <code>pos</code>.</p>\n<pre><code>template&lt; class... Args &gt; \niterator emplace( const_iterator pos, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/emplace
std::list::emplace_back	A										<section class="prog__container">\n<p>Appends a new element to the end of the container.</p>\n<pre><code>template&lt; class... Args &gt;\nvoid emplace_back( Args&&... args );</code></pre><pre><code>template&lt; class... Args &gt;\nreference emplace_back( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/emplace_back
std::list::emplace_front	A										<section class="prog__container">\n<p>Inserts a new element to the beginning of the container.</p>\n<pre><code>template&lt; class... Args &gt;\nvoid emplace_front( Args&&... args );</code></pre><pre><code>template&lt; class... Args &gt;\nreference emplace_front( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/emplace_front
std::list::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/empty
std::list::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/end
std::list::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/end
std::list::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/erase
std::list::front	A										<section class="prog__container">\n<p>Returns a reference to the first element in the container.</p>\n<pre><code>reference front(void);</code></pre><pre><code>const_reference front(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/front
std::list::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/get_allocator
std::list::insert	A										<section class="prog__container">\n<p>Inserts elements at the specified location in the container.</p>\n<pre><code>iterator insert( const_iterator pos, const T& value );</code></pre><pre><code>iterator insert( const_iterator pos, T&& value );</code></pre><pre><code>iterator insert( const_iterator pos, size_type count, const T& value );</code></pre><pre><code>template&lt; class InputIt &gt;\niterator insert( const_iterator pos, InputIt first, InputIt last );</code></pre><pre><code>iterator insert( const_iterator pos, std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/insert
std::list::list	A										<section class="prog__container">\n<p>Constructs a new container from a variety of data sources, optionally using a user supplied allocator <code>alloc</code>.</p>\n<pre><code>list(void) : list( Allocator(void) ) {}\nexplicit list( const Allocator& alloc );</code></pre><pre><code>list( size_type count, \n               const T& value,\n               const Allocator& alloc = Allocator(void));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/list/list
std::list::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/max_size
std::list::merge	A										<section class="prog__container">\n<p>Merges two sorted lists into one.</p>\n<pre><code>void merge( list& other );</code></pre><pre><code>void merge( list&& other );</code></pre><pre><code>template &lt;class Compare&gt; \nvoid merge( list& other, Compare comp );</code></pre><pre><code>template &lt;class Compare&gt; \nvoid merge( list&& other, Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/merge
std::list::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>list& operator=( const list& other );</code></pre><pre><code>list& operator=( list&& other );</code></pre><pre><code>list& operator=( std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/operator=
std::list::pop_back	A										<section class="prog__container">\n<p>Removes the last element of the container.</p>\n<pre><code>void pop_back(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/pop_back
std::list::pop_front	A										<section class="prog__container">\n<p>Removes the first element of the container.</p>\n<pre><code>void pop_front(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/pop_front
std::list::push_back	A										<section class="prog__container">\n<p>Appends the given element <code>value</code> to the end of the container.</p>\n<pre><code>void push_back( const T& value );</code></pre><pre><code>void push_back( T&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/push_back
std::list::push_front	A										<section class="prog__container">\n<p>Prepends the given element <code>value</code> to the beginning of the container.</p>\n<pre><code>void push_front( const T& value );</code></pre><pre><code>void push_front( T&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/push_front
std::list::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/rbegin
std::list::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>reverse_iterator rbegin(void);</code></pre><pre><code>const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/rbegin
std::list::remove	A										<section class="prog__container">\n<p>Removes all elements satisfying specific criteria.</p>\n<pre><code>void remove( const T& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/remove
std::list::remove_if	A										<section class="prog__container">\n<p>Removes all elements satisfying specific criteria.</p>\n<pre><code>template&lt; class UnaryPredicate &gt;\nvoid remove_if( UnaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/remove
std::list::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/rend
std::list::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>reverse_iterator rend(void);</code></pre><pre><code>const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/rend
std::list::resize	A										<section class="prog__container">\n<p>Resizes the container to contain <code>count</code> elements.</p>\n<pre><code>void resize( size_type count );</code></pre><pre><code>void resize( size_type count, const value_type& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/resize
std::list::reverse	A										<section class="prog__container">\n<p>Reverses the order of the elements in the container.</p>\n<pre><code>void reverse(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/reverse
std::list::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/size
std::list::sort	A										<section class="prog__container">\n<p>Sorts the elements in ascending order.</p>\n<pre><code>void sort(void);</code></pre><pre><code>template&lt; class Compare &gt; \nvoid sort( Compare comp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/sort
std::list::splice	A										<section class="prog__container">\n<p>Transfers elements from one list to another.</p>\n<pre><code>void splice( const_iterator pos, list& other );</code></pre><pre><code>void splice( const_iterator pos, list&& other );</code></pre><pre><code>void splice( const_iterator pos, list& other, const_iterator it );</code></pre><pre><code>void splice( const_iterator pos, list&& other, const_iterator it );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/list/splice
std::list::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( list& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/swap
std::list::unique	A										<section class="prog__container">\n<p>Removes all <i>consecutive</i> duplicate elements from the container.</p>\n<pre><code>void unique(void);</code></pre><pre><code>template&lt; class BinaryPredicate &gt;\nvoid unique( BinaryPredicate p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/list/unique
std::map	A										<section class="prog__container">\n<p><code>std::map</code> is a sorted associative container that contains key-value pairs with unique keys.</p>\n<pre><code>template&lt;\n    class Key,\n    class T,\n    class Compare = std::less&lt;Key&gt;,\n    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt; &gt;\n&gt; class map;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/map
std::map::at	A										<section class="prog__container">\n<p>Returns a reference to the mapped value of the element with key equivalent to <code>key</code>.</p>\n<pre><code>T& at( const Key& key );</code></pre><pre><code>const T& at( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/at
std::map::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/begin
std::map::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/begin
std::map::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/clear
std::map::count	A										<section class="prog__container">\n<p>Returns the number of elements with key that compares <i>equivalent</i> to the specified argument, which is either 1 or 0 since this container does not allow duplicates.</p>\n<pre><code>size_type count( const Key& key ) const;</code></pre><pre><code>template&lt; class K &gt; \nsize_type count( const K& x ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/count
std::map::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container constructed in-place with the given <code>args</code>  if there is no element with the key in the container.</p>\n<pre><code>template&lt; class... Args &gt;\nstd::pair&lt;iterator,bool&gt; emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/emplace
std::map::emplace_hint	A										<section class="prog__container">\n<p>Inserts a new element to the container as close as possible to the position just before <code>hint</code>.</p>\n<pre><code>template &lt;class... Args&gt;\niterator emplace_hint( const_iterator hint, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/emplace_hint
std::map::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/empty
std::map::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/end
std::map::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/end
std::map::equal_range	A										<section class="prog__container">\n<p>Returns a range containing all elements with the given key in the container.</p>\n<pre><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key& key );</code></pre><pre><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key& key ) const;</code></pre><pre><code>template&lt; class K &gt;\nstd::pair&lt;iterator,iterator&gt; equal_range( const K& x );</code></pre><pre><code>template&lt; class K &gt;\nstd::pair&lt;const_iterator,const_iterator&gt; equal_range( const K& x ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/equal_range
std::map::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre><pre><code>size_type erase( const key_type& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/erase
std::map::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/get_allocator
std::map::insert	A										<section class="prog__container">\n<p>Inserts element(s) into the container, if the container doesn't already contain an element with an equivalent key.</p>\n<pre><code>std::pair&lt;iterator,bool&gt; insert( const value_type& value );</code></pre><pre><code>template&lt; class P &gt;\nstd::pair&lt;iterator,bool&gt; insert( P&& value );</code></pre><pre><code>std::pair&lt;iterator,bool&gt; insert( value_type&& value );</code></pre><pre><code>iterator insert( const_iterator hint, const value_type& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/map/insert
std::map::key_comp	A										<section class="prog__container">\n<p>Returns the function object that compares the keys, which is a copy of this container's constructor argument <code>comp</code>.</p>\n<pre><code>key_compare key_comp(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/key_comp
std::map::map	A										<section class="prog__container">\n<p>Constructs new container from a variety of data sources and optionally using user supplied allocator <code>alloc</code> or comparison function object <code>comp</code>.</p>\n<pre><code>map(void) : map( Compare(void) ) {}\nexplicit map( const Compare& comp, \n              const Allocator& alloc = Allocator(void) );</code></pre><pre><code>explicit map( const Allocator& alloc );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/map/map
std::map::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/max_size
std::map::merge	A										<section class="prog__container">\n<p>Attempts to extract ("splice") each element in <code>source</code> and insert it into <code>*this</code> using the the comparison object of <code>*this</code>.</p>\n<pre><code>template&lt;class C2&gt;\nvoid merge(std::map&lt;Key, T, C2, Allocator&gt;& source);</code></pre><pre><code>template&lt;class C2&gt;\nvoid merge(std::map&lt;Key, T, C2, Allocator&gt;&& source);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/map/merge
std::map::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>map& operator=( const map& other );</code></pre><pre><code>map& operator=( map&& other );</code></pre><pre><code>map& operator=( std::initializer_list&lt;value_type&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/operator=
std::map::operator[]	A										<section class="prog__container">\n<p>Returns a reference to the value that is mapped to a key equivalent to <code>key</code>, performing an insertion if such key does not already exist.</p>\n<pre><code>T& operator[]( const Key& key );</code></pre><pre><code>T& operator[]( Key&& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/operator_at
std::map::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/rbegin
std::map::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>reverse_iterator rbegin(void);</code></pre><pre><code>const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/rbegin
std::map::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/rend
std::map::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>reverse_iterator rend(void);</code></pre><pre><code>const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/rend
std::map::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/size
std::map::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( map& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/swap
std::map::value_comp	A										<section class="prog__container">\n<p>Returns a function object that compares objects of type std::map::value_type (key-value pairs) by using key_comp to compare the first components of the pairs.</p>\n<pre><code>std::map::value_compare value_comp(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/value_comp
std::map::value_compare	A										<section class="prog__container">\n<p><code>std::map::value_compare</code> is a function object that compares objects of type <code>std::map::value_type</code> (key-value pairs) by comparing of the first components of the pairs.</p>\n<pre><code>class value_compare;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/map/value_compare
std::multimap	A										<section class="prog__container">\n<p>Multimap is an associative container that contains a sorted list of key-value pairs, while multiple entries with the same key is permitted.</p>\n<pre><code>template&lt;\n    class Key,\n    class T,\n    class Compare = std::less&lt;Key&gt;,\n    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt; &gt;\n&gt; class multimap;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/multimap
std::multimap::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/begin
std::multimap::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/begin
std::multimap::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/clear
std::multimap::count	A										<section class="prog__container">\n<p>Returns the number of elements with key that compares <i>equivalent</i> to the specified argument.</p>\n<pre><code>size_type count( const Key& key ) const;</code></pre><pre><code>template&lt; class K &gt; \nsize_type count( const K& x ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/count
std::multimap::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container constructed in-place with the given <code>args</code>  .</p>\n<pre><code>template&lt; class... Args &gt;\niterator emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/emplace
std::multimap::emplace_hint	A										<section class="prog__container">\n<p>Inserts a new element into the container as close as possible to the position just before <code>hint</code>.</p>\n<pre><code>template &lt;class... Args&gt;\niterator emplace_hint( const_iterator hint, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/emplace_hint
std::multimap::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/empty
std::multimap::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/end
std::multimap::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/end
std::multimap::equal_range	A										<section class="prog__container">\n<p>Returns a range containing all elements with the given key in the container.</p>\n<pre><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key& key );</code></pre><pre><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key& key ) const;</code></pre><pre><code>template&lt; class K &gt;\nstd::pair&lt;iterator,iterator&gt; equal_range( const K& x );</code></pre><pre><code>template&lt; class K &gt;\nstd::pair&lt;const_iterator,const_iterator&gt; equal_range( const K& x ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/equal_range
std::multimap::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre><pre><code>size_type erase( const key_type& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/erase
std::multimap::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/get_allocator
std::multimap::insert	A										<section class="prog__container">\n<p>Inserts element(s) into the container.</p>\n<pre><code>iterator insert( const value_type& value );</code></pre><pre><code>template&lt; class P &gt;\niterator insert( P&& value );</code></pre><pre><code>iterator insert( value_type&& value );</code></pre><pre><code>iterator insert( const_iterator hint, const value_type& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/insert
std::multimap::key_comp	A										<section class="prog__container">\n<p>Returns the function object that compares the keys, which is a copy of this container's constructor argument <code>comp</code>.</p>\n<pre><code>key_compare key_comp(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/key_comp
std::multimap::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/max_size
std::multimap::merge	A										<section class="prog__container">\n<p>Attempts to extract ("splice") each element in <code>source</code> and insert it into <code>*this</code> using the the comparison object of <code>*this</code>.</p>\n<pre><code>template&lt;class C2&gt;\nvoid merge(std::map&lt;Key, T, C2, Allocator&gt;& source);</code></pre><pre><code>template&lt;class C2&gt;\nvoid merge(std::map&lt;Key, T, C2, Allocator&gt;&& source);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/merge
std::multimap::multimap	A										<section class="prog__container">\n<p>Constructs new container from a variety of data sources and optionally using user supplied allocator <code>alloc</code> or comparison function object <code>comp</code>.</p>\n<pre><code>multimap(void) : multimap( Compare(void) ) {}\nexplicit multimap( const Compare& comp, \n                   const Allocator& alloc = Allocator(void) );</code></pre><pre><code>explicit multimap( const Allocator& alloc );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/multimap
std::multimap::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>multimap& operator=( const multimap& other );</code></pre><pre><code>multimap& operator=( multimap&& other );</code></pre><pre><code>multimap& operator=( std::initializer_list&lt;value_type&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/operator=
std::multimap::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/rbegin
std::multimap::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>reverse_iterator rbegin(void);</code></pre><pre><code>const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/rbegin
std::multimap::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/rend
std::multimap::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>reverse_iterator rend(void);</code></pre><pre><code>const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/rend
std::multimap::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/size
std::multimap::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( multimap& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/swap
std::multimap::value_comp	A										<section class="prog__container">\n<p>Returns a function object that compares objects of type std::multimap::value_type (key-value pairs) by using key_comp to compare the first components of the pairs.</p>\n<pre><code>std::multimap::value_compare value_comp(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/value_comp
std::multimap::value_compare	A										<section class="prog__container">\n<p><code>std::multimap::value_compare</code> is a function object that compares objects of type <code>std::multimap::value_type</code> (key-value pairs) by comparing of the first components of the pairs.</p>\n<pre><code>class value_compare;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multimap/value_compare
std::multiset	A										<section class="prog__container">\n<p><code>std::multiset</code> is an associative container that contains a sorted set of objects of type Key.</p>\n<pre><code>template&lt;\n    class Key,\n    class Compare = std::less&lt;Key&gt;,\n    class Allocator = std::allocator&lt;Key&gt;\n&gt; class multiset;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/multiset
std::multiset::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/begin
std::multiset::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/begin
std::multiset::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/clear
std::multiset::count	A										<section class="prog__container">\n<p>Returns the number of elements with key that compares <i>equivalent</i> to the specified argument.</p>\n<pre><code>size_type count( const Key& key ) const;</code></pre><pre><code>template&lt; class K &gt; \nsize_type count( const K& x ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/count
std::multiset::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container constructed in-place with the given <code>args</code>  .</p>\n<pre><code>template&lt; class... Args &gt;\niterator emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/emplace
std::multiset::emplace_hint	A										<section class="prog__container">\n<p>Inserts a new element to the container as close as possible to the position just before <code>hint</code>.</p>\n<pre><code>template &lt;class... Args&gt;\niterator emplace_hint( const_iterator hint, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/emplace_hint
std::multiset::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/empty
std::multiset::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/end
std::multiset::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/end
std::multiset::equal_range	A										<section class="prog__container">\n<p>Returns a range containing all elements with the given key in the container.</p>\n<pre><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key& key );</code></pre><pre><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key& key ) const;</code></pre><pre><code>template&lt; class K &gt;\nstd::pair&lt;iterator,iterator&gt; equal_range( const K& x );</code></pre><pre><code>template&lt; class K &gt;\nstd::pair&lt;const_iterator,const_iterator&gt; equal_range( const K& x ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/equal_range
std::multiset::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre><pre><code>size_type erase( const key_type& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/erase
std::multiset::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/get_allocator
std::multiset::insert	A										<section class="prog__container">\n<p>Inserts element(s) into the container.</p>\n<pre><code>iterator insert( const value_type& value );</code></pre><pre><code>iterator insert( value_type&& value );</code></pre><pre><code>iterator insert( const_iterator hint, const value_type& value );</code></pre><pre><code>iterator insert( const_iterator hint, value_type&& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/insert
std::multiset::key_comp	A										<section class="prog__container">\n<p>Returns the function object that compares the keys, which is a copy of this container's constructor argument <code>comp</code>.</p>\n<pre><code>key_compare key_comp(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/key_comp
std::multiset::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/max_size
std::multiset::merge	A										<section class="prog__container">\n<p>Attempts to extract ("splice") each element in <code>source</code> and insert it into <code>*this</code> using the the comparison object of <code>*this</code>.</p>\n<pre><code>template&lt;class C2&gt;\nvoid merge(std::set&lt;Key, C2, Allocator&gt;& source);</code></pre><pre><code>template&lt;class C2&gt;\nvoid merge(std::set&lt;Key, C2, Allocator&gt;&& source);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/merge
std::multiset::multiset	A										<section class="prog__container">\n<p>Constructs new container from a variety of data sources and optionally using user supplied allocator <code>alloc</code> or comparison function object <code>comp</code>.</p>\n<pre><code>multiset(void) : multiset( Compare(void) ) {}\nexplicit multiset( const Compare& comp, \n                   const Allocator& alloc = Allocator(void) );</code></pre><pre><code>explicit multiset( const Allocator& alloc );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/multiset
std::multiset::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>multiset& operator=( const multiset& other );</code></pre><pre><code>multiset& operator=( multiset&& other );</code></pre><pre><code>multiset& operator=( std::initializer_list&lt;value_type&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/operator=
std::multiset::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/rbegin
std::multiset::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>reverse_iterator rbegin(void);</code></pre><pre><code>const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/rbegin
std::multiset::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/rend
std::multiset::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>reverse_iterator rend(void);</code></pre><pre><code>const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/rend
std::multiset::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/size
std::multiset::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( multiset& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/swap
std::multiset::value_comp	A										<section class="prog__container">\n<p>Returns the function object that compares the values.</p>\n<pre><code>std::multiset::value_compare value_comp(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/multiset/value_comp
std::priority_queue	A										<section class="prog__container">\n<p>A priority queue is a container adaptor that provides constant time lookup of the largest (by default) element, at the expense of logarithmic insertion and extraction.</p>\n<pre><code>template&lt;\n    class T,\n    class Container = std::vector&lt;T&gt;,\n    class Compare = std::less&lt;typename Container::value_type&gt;\n&gt; class priority_queue;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue
std::priority_queue::emplace	A										<section class="prog__container">\n<p>Pushes new element to the priority queue.</p>\n<pre><code>template&lt; class... Args &gt;\nvoid emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue/emplace
std::priority_queue::empty	A										<section class="prog__container">\n<p>Checks if the underlying container has no elements, i.e. whether <code>c.empty(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue/empty
std::priority_queue::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container adaptor with those of <code>other</code>.</p>\n<pre><code>priority_queue operator=( const priority_queue& other );</code></pre><pre><code>priority_queue operator=( priority_queue&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue/operator=
std::priority_queue::pop	A										<section class="prog__container">\n<p>Removes the top element from the priority queue.</p>\n<pre><code>void pop(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue/pop
std::priority_queue::priority_queue	A										<section class="prog__container">\n<p>Constructs new underlying container of the container adaptor from a variety of data sources.</p>\n<pre><code>explicit priority_queue( const Compare& compare = Compare(void),\n                         Container&& cont = Container(void) );</code></pre><pre><code>priority_queue( const priority_queue& other );</code></pre><pre><code>priority_queue( priority_queue&& other );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue/priority_queue
std::priority_queue::push	A										<section class="prog__container">\n<p>Pushes the given element <code>value</code> to the priority queue.</p>\n<pre><code>void push( const value_type& value );</code></pre><pre><code>void push( value_type&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue/push
std::priority_queue::size	A										<section class="prog__container">\n<p>Returns the number of elements in the underlying container, that is, <code>c.size(void)</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue/size
std::priority_queue::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container adaptor with those of <code>other</code>.</p>\n<pre><code>void swap( priority_queue& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue/swap
std::priority_queue::top	A										<section class="prog__container">\n<p>Returns reference to the top element in the priority queue.</p>\n<pre><code>const_reference top(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/priority_queue/top
std::queue	A										<section class="prog__container">\n<p>The <code>std::queue</code> class is a container adapter that gives the programmer the functionality of a queue - specifically, a FIFO (first-in, first-out) data structure.</p>\n<pre><code>template&lt;\n    class T,\n    class Container = std::deque&lt;T&gt;\n&gt; class queue;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue
std::queue::back	A										<section class="prog__container">\n<p>Returns reference to the last element in the queue.</p>\n<pre><code>reference back(void);</code></pre><pre><code>const_reference back(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue/back
std::queue::emplace	A										<section class="prog__container">\n<p>Pushes new element to the end of the queue.</p>\n<pre><code>template&lt; class... Args &gt;\nvoid emplace( Args&&... args );</code></pre><pre><code>template&lt; class... Args &gt;\nreference emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue/emplace
std::queue::empty	A										<section class="prog__container">\n<p>Checks if the underlying container has no elements, i.e. whether <code>c.empty(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue/empty
std::queue::front	A										<section class="prog__container">\n<p>Returns reference to the first element in the queue.</p>\n<pre><code>reference front(void);</code></pre><pre><code>const_reference front(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue/front
std::queue::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container adaptor with those of <code>other</code>.</p>\n<pre><code>queue operator=( const queue& other );</code></pre><pre><code>queue operator=( queue&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue/operator=
std::queue::pop	A										<section class="prog__container">\n<p>Removes an element from the front of the queue.</p>\n<pre><code>void pop(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue/pop
std::queue::push	A										<section class="prog__container">\n<p>Pushes the given element <code>value</code> to the end of the queue.</p>\n<pre><code>void push( const value_type& value );</code></pre><pre><code>void push( value_type&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue/push
std::queue::queue	A										<section class="prog__container">\n<p>Constructs new underlying container of the container adaptor from a variety of data sources.</p>\n<pre><code>explicit queue( const Container& cont );</code></pre><pre><code>explicit queue( Container&& cont = Container(void) );</code></pre><pre><code>queue( const queue& other );</code></pre><pre><code>queue( queue&& other );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/queue/queue
std::queue::size	A										<section class="prog__container">\n<p>Returns the number of elements in the underlying container, that is, <code>c.size(void)</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue/size
std::queue::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container adaptor with those of <code>other</code>.</p>\n<pre><code>void swap( queue& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/queue/swap
std::set	A										<section class="prog__container">\n<p><code>std::set</code> is an associative container that contains a sorted set of unique objects of type <code>Key</code>.</p>\n<pre><code>template&lt;\n    class Key,\n    class Compare = std::less&lt;Key&gt;,\n    class Allocator = std::allocator&lt;Key&gt;\n&gt; class set;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/set
std::set::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/begin
std::set::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/begin
std::set::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/clear
std::set::count	A										<section class="prog__container">\n<p>Returns the number of elements with key that compares <i>equivalent</i> to the specified argument, which is either 1 or 0 since this container does not allow duplicates.</p>\n<pre><code>size_type count( const Key& key ) const;</code></pre><pre><code>template&lt; class K &gt; \nsize_type count( const K& x ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/count
std::set::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container constructed in-place with the given <code>args</code>  if there is no element with the key in the container.</p>\n<pre><code>template&lt; class... Args &gt;\nstd::pair&lt;iterator,bool&gt; emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/emplace
std::set::emplace_hint	A										<section class="prog__container">\n<p>Inserts a new element into the container as close as possible to the position just before <code>hint</code>.</p>\n<pre><code>template &lt;class... Args&gt;\niterator emplace_hint( const_iterator hint, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/emplace_hint
std::set::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/empty
std::set::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/end
std::set::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/end
std::set::equal_range	A										<section class="prog__container">\n<p>Returns a range containing all elements with the given key in the container.</p>\n<pre><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key& key );</code></pre><pre><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key& key ) const;</code></pre><pre><code>template&lt; class K &gt;\nstd::pair&lt;iterator,iterator&gt; equal_range( const K& x );</code></pre><pre><code>template&lt; class K &gt;\nstd::pair&lt;const_iterator,const_iterator&gt; equal_range( const K& x ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/equal_range
std::set::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre><pre><code>size_type erase( const key_type& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/erase
std::set::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/get_allocator
std::set::insert	A										<section class="prog__container">\n<p>Inserts element(s) into the container, if the container doesn't already contain an element with an equivalent key.</p>\n<pre><code>std::pair&lt;iterator,bool&gt; insert( const value_type& value );</code></pre><pre><code>std::pair&lt;iterator,bool&gt; insert( value_type&& value );</code></pre><pre><code>iterator insert( const_iterator hint, const value_type& value );</code></pre><pre><code>iterator insert( const_iterator hint, value_type&& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/set/insert
std::set::key_comp	A										<section class="prog__container">\n<p>Returns the function object that compares the keys, which is a copy of this container's constructor argument <code>comp</code>.</p>\n<pre><code>key_compare key_comp(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/key_comp
std::set::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/max_size
std::set::merge	A										<section class="prog__container">\n<p>Attempts to extract ("splice") each element in <code>source</code> and insert it into <code>*this</code> using the the comparison object of <code>*this</code>.</p>\n<pre><code>template&lt;class C2&gt;\nvoid merge(std::set&lt;Key, C2, Allocator&gt;& source);</code></pre><pre><code>template&lt;class C2&gt;\nvoid merge(std::set&lt;Key, C2, Allocator&gt;&& source);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/set/merge
std::set::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>set& operator=( const set& other );</code></pre><pre><code>set& operator=( set&& other );</code></pre><pre><code>set& operator=( std::initializer_list&lt;value_type&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/operator=
std::set::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/rbegin
std::set::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>reverse_iterator rbegin(void);</code></pre><pre><code>const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/rbegin
std::set::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/rend
std::set::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>reverse_iterator rend(void);</code></pre><pre><code>const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/rend
std::set::set	A										<section class="prog__container">\n<p>Constructs new container from a variety of data sources and optionally using user supplied allocator <code>alloc</code> or comparison function object <code>comp</code>.</p>\n<pre><code>set(void) : set( Compare(void) ) {}\nexplicit set( const Compare& comp, \n              const Allocator& alloc = Allocator(void) );</code></pre><pre><code>explicit set( const Allocator& alloc );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/set/set
std::set::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/size
std::set::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( set& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/swap
std::set::value_comp	A										<section class="prog__container">\n<p>Returns the function object that compares the values.</p>\n<pre><code>std::set::value_compare value_comp(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/set/value_comp
std::stack	A										<section class="prog__container">\n<p>The <code>std::stack</code> class is a container adapter that gives the programmer the functionality of a stack - specifically, a FILO (first-in, last-out) data structure.</p>\n<pre><code>template&lt;\n    class T,\n    class Container = std::deque&lt;T&gt;\n&gt; class stack;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/stack
std::stack::emplace	A										<section class="prog__container">\n<p>Pushes new element on top of the stack.</p>\n<pre><code>template&lt; class... Args &gt;\nvoid emplace( Args&&... args );</code></pre><pre><code>template&lt; class... Args &gt;\nreference emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/stack/emplace
std::stack::empty	A										<section class="prog__container">\n<p>Checks if the underlying container has no elements, i.e. whether <code>c.empty(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/stack/empty
std::stack::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container adaptor with those of <code>other</code>.</p>\n<pre><code>stack operator=( const stack& other );</code></pre><pre><code>stack operator=( stack&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/stack/operator=
std::stack::pop	A										<section class="prog__container">\n<p>Removes the top element from the stack.</p>\n<pre><code>void pop(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/stack/pop
std::stack::push	A										<section class="prog__container">\n<p>Pushes the given element <code>value</code> to the top of the stack.</p>\n<pre><code>void push( const value_type& value );</code></pre><pre><code>void push( value_type&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/stack/push
std::stack::size	A										<section class="prog__container">\n<p>Returns the number of elements in the underlying container, that is, <code>c.size(void)</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/stack/size
std::stack::stack	A										<section class="prog__container">\n<p>Constructs new underlying container of the container adaptor from a variety of data sources.</p>\n<pre><code>explicit stack( const Container& cont );</code></pre><pre><code>explicit stack( Container&& cont = Container(void) );</code></pre><pre><code>stack( const stack& other );</code></pre><pre><code>stack( stack&& other );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/stack/stack
std::stack::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container adaptor with those of <code>other</code>.</p>\n<pre><code>void swap( stack& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/stack/swap
std::stack::top	A										<section class="prog__container">\n<p>Returns reference to the top element in the stack.</p>\n<pre><code>reference top(void);</code></pre><pre><code>const_reference top(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/stack/top
std::unordered_map	A										<section class="prog__container">\n<p>Unordered map is an associative container that contains key-value pairs with unique keys.</p>\n<pre><code>template&lt;\n    class Key,\n    class T,\n    class Hash = std::hash&lt;Key&gt;,\n    class KeyEqual = std::equal_to&lt;Key&gt;,\n    class Allocator = std::allocator&lt; std::pair&lt;const Key, T&gt; &gt;\n&gt; class unordered_map;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map
std::unordered_map::at	A										<section class="prog__container">\n<p>Returns a reference to the mapped value of the element with key equivalent to <code>key</code>.</p>\n<pre><code>T& at( const Key& key );</code></pre><pre><code>const T& at( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/at
std::unordered_map::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/begin
std::unordered_map::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/begin
std::unordered_map::begin(int)	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the bucket with index <code>n</code>.</p>\n<pre><code>local_iterator begin( size_type n );</code></pre><pre><code>const_local_iterator begin( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/begin2
std::unordered_map::cbegin(int)	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the bucket with index <code>n</code>.</p>\n<pre><code>const_local_iterator cbegin( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/begin2
std::unordered_map::bucket	A										<section class="prog__container">\n<p>Returns the index of the bucket for key <code>key</code>.</p>\n<pre><code>size_type bucket( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/bucket
std::unordered_map::bucket_count	A										<section class="prog__container">\n<p>Returns the number of buckets in the container.</p>\n<pre><code>size_type bucket_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/bucket_count
std::unordered_map::bucket_size	A										<section class="prog__container">\n<p>Returns the number of elements in the bucket with index <code>n</code>.</p>\n<pre><code>size_type bucket_size( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/bucket_size
std::unordered_map::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/clear
std::unordered_map::count	A										<section class="prog__container">\n<p>Returns the number of elements with key that compares equal to the specified argument <code>key</code>, which is either 1 or 0 since this container does not allow duplicates.</p>\n<pre><code>size_type count( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/count
std::unordered_map::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container constructed in-place with the given <code>args</code>  if there is no element with the key in the container.</p>\n<pre><code>template&lt; class... Args &gt;\nstd::pair&lt;iterator,bool&gt; emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/emplace
std::unordered_map::emplace_hint	A										<section class="prog__container">\n<p>Inserts a new element to the container, using <code>hint</code> as a suggestion where the element should go.</p>\n<pre><code>template &lt;class... Args&gt;\niterator emplace_hint( const_iterator hint, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/emplace_hint
std::unordered_map::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/empty
std::unordered_map::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/end
std::unordered_map::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/end
std::unordered_map::cend(int)	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.</p>\n<pre><code>const_local_iterator cend( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/end2
std::unordered_map::end(int)	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.</p>\n<pre><code>local_iterator end( size_type n );</code></pre><pre><code>const_local_iterator end( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/end2
std::unordered_map::equal_range	A										<section class="prog__container">\n<p>Returns a range containing all elements with key <code>key</code> in the container.</p>\n<pre><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key& key );</code></pre><pre><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/equal_range
std::unordered_map::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre><pre><code>size_type erase( const key_type& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/erase
std::unordered_map::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/get_allocator
std::unordered_map::hash_function	A										<section class="prog__container">\n<p>Returns the function that hashes the keys.</p>\n<pre><code>hasher hash_function(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/hash_function
std::unordered_map::insert	A										<section class="prog__container">\n<p>Inserts element(s) into the container, if the container doesn't already contain an element with an equivalent key.</p>\n<pre><code>std::pair&lt;iterator,bool&gt; insert( const value_type& value );</code></pre><pre><code>template&lt; class P &gt;\nstd::pair&lt;iterator,bool&gt; insert( P&& value );</code></pre><pre><code>std::pair&lt;iterator,bool&gt; insert( value_type&& value );</code></pre><pre><code>iterator insert( const_iterator hint, const value_type& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/insert
std::unordered_map::key_eq	A										<section class="prog__container">\n<p>Returns the function that compares keys for equality.</p>\n<pre><code>key_equal key_eq(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/key_eq
std::unordered_map::load_factor	A										<section class="prog__container">\n<p>Returns the average number of elements per bucket, that is, size(void) divided by bucket_count(void).</p>\n<pre><code>float load_factor(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/load_factor
std::unordered_map::max_bucket_count	A										<section class="prog__container">\n<p>Returns the maximum number of buckets the container is able to hold due to system or library implementation limitations.</p>\n<pre><code>size_type max_bucket_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/max_bucket_count
std::unordered_map::max_load_factor	A										<section class="prog__container">\n<p>Manages the maximum load factor (number of elements per bucket).</p>\n<pre><code>float max_load_factor(void) const;</code></pre><pre><code>void max_load_factor( float ml );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/max_load_factor
std::unordered_map::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/max_size
std::unordered_map::merge	A										<section class="prog__container">\n<p>Attempts to extract ("splice") each element in <code>source</code> and insert it into <code>*this</code> using the hash function and key equality predicate of <code>*this</code>.</p>\n<pre><code>template&lt;class H2, class P2&gt;\nvoid merge(std::unordered_map&lt;Key, T, H2, P2, Allocator&gt;& source);</code></pre><pre><code>template&lt;class H2, class P2&gt;\nvoid merge(std::unordered_map&lt;Key, T, H2, P2, Allocator&gt;&& source);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/merge
std::unordered_map::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>unordered_map& operator=( const unordered_map& other );</code></pre><pre><code>unordered_map& operator=( unordered_map&& other );</code></pre><pre><code>unordered_map& operator=( std::initializer_list&lt;value_type&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/operator=
std::unordered_map::operator[]	A										<section class="prog__container">\n<p>Returns a reference to the value that is mapped to a key equivalent to <code>key</code>, performing an insertion if such key does not already exist.</p>\n<pre><code>T& operator[]( const Key& key );</code></pre><pre><code>T& operator[]( Key&& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/operator_at
std::unordered_map::rehash	A										<section class="prog__container">\n<p>Sets the number of buckets to <code>count</code> and rehashes the container, i.e. puts the elements into appropriate buckets considering that total number of buckets has changed.</p>\n<pre><code>void rehash( size_type count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/rehash
std::unordered_map::reserve	A										<section class="prog__container">\n<p>Sets the number of buckets to the number needed to accomodate at least <code>count</code> elements without exceeding maximum load factor and rehashes the container...</p>\n<pre><code>void reserve( size_type count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/reserve
std::unordered_map::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/size
std::unordered_map::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( unordered_map& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/swap
std::unordered_map::unordered_map	A										<section class="prog__container">\n<p>Constructs new container from a variety of data sources.</p>\n<pre><code>explicit unordered_map( size_type bucket_count = /*implementation-defined*/,\n                        const Hash& hash = Hash(void),\n                        const KeyEqual& equal = KeyEqual(void),\n                        const Allocator& alloc = Allocator(void) );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_map/unordered_map
std::unordered_multimap	A										<section class="prog__container">\n<p>Unordered multimap is an unordered associative container that supports equivalent keys (an unordered_multimap may contain multiple copies of each key value) and that associates values of another type...</p>\n<pre><code>template&lt;\n    class Key,\n    class T,\n    class Hash = std::hash&lt;Key&gt;,\n    class KeyEqual = std::equal_to&lt;Key&gt;,\n    class Allocator = std::allocator&lt; std::pair&lt;const Key, T&gt; &gt;\n&gt; class unordered_multimap;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap
std::unordered_multimap::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/begin
std::unordered_multimap::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/begin
std::unordered_multimap::begin(int)	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the bucket with index <code>n</code>.</p>\n<pre><code>local_iterator begin( size_type n );</code></pre><pre><code>const_local_iterator begin( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/begin2
std::unordered_multimap::cbegin(int)	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the bucket with index <code>n</code>.</p>\n<pre><code>const_local_iterator cbegin( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/begin2
std::unordered_multimap::bucket	A										<section class="prog__container">\n<p>Returns the index of the bucket for key <code>key</code>.</p>\n<pre><code>size_type bucket( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/bucket
std::unordered_multimap::bucket_count	A										<section class="prog__container">\n<p>Returns the number of buckets in the container.</p>\n<pre><code>size_type bucket_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/bucket_count
std::unordered_multimap::bucket_size	A										<section class="prog__container">\n<p>Returns the number of elements in the bucket with index <code>n</code>.</p>\n<pre><code>size_type bucket_size( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/bucket_size
std::unordered_multimap::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/clear
std::unordered_multimap::count	A										<section class="prog__container">\n<p>Returns the number of elements with key that compares equal to the specified argument <code>key</code>.</p>\n<pre><code>size_type count( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/count
std::unordered_multimap::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container constructed in-place with the given <code>args</code>  .</p>\n<pre><code>template&lt; class... Args &gt;\niterator emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/emplace
std::unordered_multimap::emplace_hint	A										<section class="prog__container">\n<p>Inserts a new element to the container, using <code>hint</code> as a suggestion where the element should go.</p>\n<pre><code>template &lt;class... Args&gt;\niterator emplace_hint( const_iterator hint, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/emplace_hint
std::unordered_multimap::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/empty
std::unordered_multimap::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/end
std::unordered_multimap::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/end
std::unordered_multimap::cend(int)	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.</p>\n<pre><code>const_local_iterator cend( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/end2
std::unordered_multimap::end(int)	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.</p>\n<pre><code>local_iterator end( size_type n );</code></pre><pre><code>const_local_iterator end( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/end2
std::unordered_multimap::equal_range	A										<section class="prog__container">\n<p>Returns a range containing all elements with key <code>key</code> in the container.</p>\n<pre><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key& key );</code></pre><pre><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/equal_range
std::unordered_multimap::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre><pre><code>size_type erase( const key_type& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/erase
std::unordered_multimap::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/get_allocator
std::unordered_multimap::hash_function	A										<section class="prog__container">\n<p>Returns the function that hashes the keys.</p>\n<pre><code>hasher hash_function(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/hash_function
std::unordered_multimap::insert	A										<section class="prog__container">\n<p>Inserts element(s) into the container.</p>\n<pre><code>iterator insert( const value_type& value );</code></pre><pre><code>template&lt; class P &gt;\niterator insert( P&& value );</code></pre><pre><code>iterator insert( value_type&& value );</code></pre><pre><code>iterator insert( const_iterator hint, const value_type& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/insert
std::unordered_multimap::key_eq	A										<section class="prog__container">\n<p>Returns the function that compares keys for equality.</p>\n<pre><code>key_equal key_eq(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/key_eq
std::unordered_multimap::load_factor	A										<section class="prog__container">\n<p>Returns the average number of elements per bucket, that is, size(void) divided by bucket_count(void).</p>\n<pre><code>float load_factor(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/load_factor
std::unordered_multimap::max_bucket_count	A										<section class="prog__container">\n<p>Returns the maximum number of buckets the container is able to hold due to system or library implementation limitations.</p>\n<pre><code>size_type max_bucket_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/max_bucket_count
std::unordered_multimap::max_load_factor	A										<section class="prog__container">\n<p>Manages the maximum load factor (number of elements per bucket).</p>\n<pre><code>float max_load_factor(void) const;</code></pre><pre><code>void max_load_factor( float ml );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/max_load_factor
std::unordered_multimap::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/max_size
std::unordered_multimap::merge	A										<section class="prog__container">\n<p>Attempts to extract ("splice") each element in <code>source</code> and insert it into <code>*this</code> using the hash function and key equality predicate of <code>*this</code>.</p>\n<pre><code>template&lt;class H2, class P2&gt;\nvoid merge(std::unordered_map&lt;Key, T, H2, P2, Allocator&gt;& source);</code></pre><pre><code>template&lt;class H2, class P2&gt;\nvoid merge(std::unordered_map&lt;Key, T, H2, P2, Allocator&gt;&& source);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/merge
std::unordered_multimap::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>unordered_multimap& operator=( const unordered_multimap& other );</code></pre><pre><code>unordered_multimap& operator=( unordered_multimap&& other );</code></pre><pre><code>unordered_multimap& operator=( std::initializer_list&lt;value_type&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/operator=
std::unordered_multimap::rehash	A										<section class="prog__container">\n<p>Sets the number of buckets to <code>count</code> and rehashes the container, i.e. puts the elements into appropriate buckets considering that total number of buckets has changed.</p>\n<pre><code>void rehash( size_type count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/rehash
std::unordered_multimap::reserve	A										<section class="prog__container">\n<p>Sets the number of buckets to the number needed to accomodate at least <code>count</code> elements without exceeding maximum load factor and rehashes the container...</p>\n<pre><code>void reserve( size_type count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/reserve
std::unordered_multimap::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/size
std::unordered_multimap::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( unordered_multimap& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/swap
std::unordered_multimap::unordered_multimap	A										<section class="prog__container">\n<p>Constructs new container from a variety of data sources.</p>\n<pre><code>explicit unordered_multimap( size_type bucket_count = /*implementation-defined*/,\n                             const Hash& hash = Hash(void),\n                             const KeyEqual& equal = KeyEqual(void),\n                             const Allocator& alloc = Allocator(void) );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multimap/unordered_multimap
std::unordered_multiset	A										<section class="prog__container">\n<p>Unordered multiset is an associative container that contains set of possibly non-unique objects of type Key.</p>\n<pre><code>template&lt;\n    class Key,\n    class Hash = std::hash&lt;Key&gt;,\n    class KeyEqual = std::equal_to&lt;Key&gt;,\n    class Allocator = std::allocator&lt;Key&gt;\n&gt; class unordered_multiset;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset
std::unordered_multiset::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/begin
std::unordered_multiset::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/begin
std::unordered_multiset::begin(int)	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the bucket with index <code>n</code>.</p>\n<pre><code>local_iterator begin( size_type n );</code></pre><pre><code>const_local_iterator begin( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/begin2
std::unordered_multiset::cbegin(int)	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the bucket with index <code>n</code>.</p>\n<pre><code>const_local_iterator cbegin( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/begin2
std::unordered_multiset::bucket	A										<section class="prog__container">\n<p>Returns the index of the bucket for key <code>key</code>.</p>\n<pre><code>size_type bucket( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/bucket
std::unordered_multiset::bucket_count	A										<section class="prog__container">\n<p>Returns the number of buckets in the container.</p>\n<pre><code>size_type bucket_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/bucket_count
std::unordered_multiset::bucket_size	A										<section class="prog__container">\n<p>Returns the number of elements in the bucket with index <code>n</code>.</p>\n<pre><code>size_type bucket_size( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/bucket_size
std::unordered_multiset::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/clear
std::unordered_multiset::count	A										<section class="prog__container">\n<p>Returns the number of elements with key that compares equal to the specified argument <code>key</code>.</p>\n<pre><code>size_type count( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/count
std::unordered_multiset::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container constructed in-place with the given <code>args</code>  .</p>\n<pre><code>template&lt; class... Args &gt;\niterator emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/emplace
std::unordered_multiset::emplace_hint	A										<section class="prog__container">\n<p>Inserts a new element to the container, using <code>hint</code> as a suggestion where the element should go.</p>\n<pre><code>template &lt;class... Args&gt;\niterator emplace_hint( const_iterator hint, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/emplace_hint
std::unordered_multiset::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/empty
std::unordered_multiset::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/end
std::unordered_multiset::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/end
std::unordered_multiset::cend(int)	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.</p>\n<pre><code>const_local_iterator cend( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/end2
std::unordered_multiset::end(int)	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.</p>\n<pre><code>local_iterator end( size_type n );</code></pre><pre><code>const_local_iterator end( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/end2
std::unordered_multiset::equal_range	A										<section class="prog__container">\n<p>Returns a range containing all elements with key <code>key</code> in the container.</p>\n<pre><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key& key );</code></pre><pre><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/equal_range
std::unordered_multiset::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre><pre><code>size_type erase( const key_type& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/erase
std::unordered_multiset::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/get_allocator
std::unordered_multiset::hash_function	A										<section class="prog__container">\n<p>Returns the function that hashes the keys.</p>\n<pre><code>hasher hash_function(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/hash_function
std::unordered_multiset::insert	A										<section class="prog__container">\n<p>Inserts element(s) into the container.</p>\n<pre><code>iterator insert( const value_type& value );</code></pre><pre><code>iterator insert( value_type&& value );</code></pre><pre><code>iterator insert( const_iterator hint, const value_type& value );</code></pre><pre><code>iterator insert( const_iterator hint, value_type&& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/insert
std::unordered_multiset::key_eq	A										<section class="prog__container">\n<p>Returns the function that compares keys for equality.</p>\n<pre><code>key_equal key_eq(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/key_eq
std::unordered_multiset::load_factor	A										<section class="prog__container">\n<p>Returns the average number of elements per bucket, that is, size(void) divided by bucket_count(void).</p>\n<pre><code>float load_factor(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/load_factor
std::unordered_multiset::max_bucket_count	A										<section class="prog__container">\n<p>Returns the maximum number of buckets the container is able to hold due to system or library implementation limitations.</p>\n<pre><code>size_type max_bucket_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/max_bucket_count
std::unordered_multiset::max_load_factor	A										<section class="prog__container">\n<p>Manages the maximum load factor (number of elements per bucket).</p>\n<pre><code>float max_load_factor(void) const;</code></pre><pre><code>void max_load_factor( float ml );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/max_load_factor
std::unordered_multiset::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/max_size
std::unordered_multiset::merge	A										<section class="prog__container">\n<p>Attempts to extract ("splice") each element in <code>source</code> and insert it into <code>*this</code> using the hash function and key equality predicate of <code>*this</code>.</p>\n<pre><code>template&lt;class H2, class P2&gt;\nvoid merge(std::unordered_set&lt;Key, H2, P2, Allocator&gt;& source);</code></pre><pre><code>template&lt;class H2, class P2&gt;\nvoid merge(std::unordered_set&lt;Key, H2, P2, Allocator&gt;&& source);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/merge
std::unordered_multiset::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>unordered_multiset& operator=( const unordered_multiset& other );</code></pre><pre><code>unordered_multiset& operator=( unordered_multiset&& other );</code></pre><pre><code>unordered_multiset& operator=( std::initializer_list&lt;value_type&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/operator=
std::unordered_multiset::rehash	A										<section class="prog__container">\n<p>Sets the number of buckets to <code>count</code> and rehashes the container, i.e. puts the elements into appropriate buckets considering that total number of buckets has changed.</p>\n<pre><code>void rehash( size_type count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/rehash
std::unordered_multiset::reserve	A										<section class="prog__container">\n<p>Sets the number of buckets to the number needed to accomodate at least <code>count</code> elements without exceeding maximum load factor and rehashes the container...</p>\n<pre><code>void reserve( size_type count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/reserve
std::unordered_multiset::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/size
std::unordered_multiset::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( unordered_multiset& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/swap
std::unordered_multiset::unordered_multiset	A										<section class="prog__container">\n<p>Constructs new container from a variety of data sources.</p>\n<pre><code>explicit unordered_multiset( size_type bucket_count = /*implementation-defined*/,\n                             const Hash& hash = Hash(void),\n                             const KeyEqual& equal = KeyEqual(void),\n                             const Allocator& alloc = Allocator(void) );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_multiset/unordered_multiset
std::unordered_set	A										<section class="prog__container">\n<p>Unordered set is an associative container that contains a set of unique objects of type Key.</p>\n<pre><code>template&lt;\n    class Key,\n    class Hash = std::hash&lt;Key&gt;,\n    class KeyEqual = std::equal_to&lt;Key&gt;,\n    class Allocator = std::allocator&lt;Key&gt;\n&gt; class unordered_set;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set
std::unordered_set::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/begin
std::unordered_set::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/begin
std::unordered_set::begin(int)	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the bucket with index <code>n</code>.</p>\n<pre><code>local_iterator begin( size_type n );</code></pre><pre><code>const_local_iterator begin( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/begin2
std::unordered_set::cbegin(int)	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the bucket with index <code>n</code>.</p>\n<pre><code>const_local_iterator cbegin( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/begin2
std::unordered_set::bucket	A										<section class="prog__container">\n<p>Returns the index of the bucket for key <code>key</code>.</p>\n<pre><code>size_type bucket( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/bucket
std::unordered_set::bucket_count	A										<section class="prog__container">\n<p>Returns the number of buckets in the container.</p>\n<pre><code>size_type bucket_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/bucket_count
std::unordered_set::bucket_size	A										<section class="prog__container">\n<p>Returns the number of elements in the bucket with index <code>n</code>.</p>\n<pre><code>size_type bucket_size( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/bucket_size
std::unordered_set::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/clear
std::unordered_set::count	A										<section class="prog__container">\n<p>Returns the number of elements with key that compares equal to the specified argument <code>key</code>, which is either 1 or 0 since this container does not allow duplicates.</p>\n<pre><code>size_type count( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/count
std::unordered_set::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container constructed in-place with the given <code>args</code>  if there is no element with the key in the container.</p>\n<pre><code>template&lt; class... Args &gt;\nstd::pair&lt;iterator,bool&gt; emplace( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/emplace
std::unordered_set::emplace_hint	A										<section class="prog__container">\n<p>Inserts a new element to the container, using <code>hint</code> as a suggestion where the element should go.</p>\n<pre><code>template &lt;class... Args&gt;\niterator emplace_hint( const_iterator hint, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/emplace_hint
std::unordered_set::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/empty
std::unordered_set::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/end
std::unordered_set::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/end
std::unordered_set::cend(int)	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.</p>\n<pre><code>const_local_iterator cend( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/end2
std::unordered_set::end(int)	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the bucket with index <code>n</code>.</p>\n<pre><code>local_iterator end( size_type n );</code></pre><pre><code>const_local_iterator end( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/end2
std::unordered_set::equal_range	A										<section class="prog__container">\n<p>Returns a range containing all elements with key <code>key</code> in the container.</p>\n<pre><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key& key );</code></pre><pre><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key& key ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/equal_range
std::unordered_set::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre><pre><code>size_type erase( const key_type& key );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/erase
std::unordered_set::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/get_allocator
std::unordered_set::hash_function	A										<section class="prog__container">\n<p>Returns the function that hashes the keys.</p>\n<pre><code>hasher hash_function(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/hash_function
std::unordered_set::insert	A										<section class="prog__container">\n<p>Inserts element(s) into the container, if the container doesn't already contain an element with an equivalent key.</p>\n<pre><code>std::pair&lt;iterator,bool&gt; insert( const value_type& value );</code></pre><pre><code>std::pair&lt;iterator,bool&gt; insert( value_type&& value );</code></pre><pre><code>iterator insert( const_iterator hint, const value_type& value );</code></pre><pre><code>iterator insert( const_iterator hint, value_type&& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/insert
std::unordered_set::key_eq	A										<section class="prog__container">\n<p>Returns the function that compares keys for equality.</p>\n<pre><code>key_equal key_eq(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/key_eq
std::unordered_set::load_factor	A										<section class="prog__container">\n<p>Returns the average number of elements per bucket, that is, size(void) divided by bucket_count(void).</p>\n<pre><code>float load_factor(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/load_factor
std::unordered_set::max_bucket_count	A										<section class="prog__container">\n<p>Returns the maximum number of buckets the container is able to hold due to system or library implementation limitations.</p>\n<pre><code>size_type max_bucket_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/max_bucket_count
std::unordered_set::max_load_factor	A										<section class="prog__container">\n<p>Manages the maximum load factor (number of elements per bucket).</p>\n<pre><code>float max_load_factor(void) const;</code></pre><pre><code>void max_load_factor( float ml );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/max_load_factor
std::unordered_set::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/max_size
std::unordered_set::merge	A										<section class="prog__container">\n<p>Attempts to extract ("splice") each element in <code>source</code> and insert it into <code>*this</code> using the hash function and key equality predicate of <code>*this</code>.</p>\n<pre><code>template&lt;class H2, class P2&gt;\nvoid merge(std::unordered_set&lt;Key, H2, P2, Allocator&gt;& source);</code></pre><pre><code>template&lt;class H2, class P2&gt;\nvoid merge(std::unordered_set&lt;Key, H2, P2, Allocator&gt;&& source);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/merge
std::unordered_set::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>unordered_set& operator=( const unordered_set& other );</code></pre><pre><code>unordered_set& operator=( unordered_set&& other );</code></pre><pre><code>unordered_set& operator=( std::initializer_list&lt;value_type&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/operator=
std::unordered_set::rehash	A										<section class="prog__container">\n<p>Sets the number of buckets to <code>count</code> and rehashes the container, i.e. puts the elements into appropriate buckets considering that total number of buckets has changed.</p>\n<pre><code>void rehash( size_type count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/rehash
std::unordered_set::reserve	A										<section class="prog__container">\n<p>Sets the number of buckets to the number needed to accomodate at least <code>count</code> elements without exceeding maximum load factor and rehashes the container...</p>\n<pre><code>void reserve( size_type count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/reserve
std::unordered_set::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/size
std::unordered_set::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( unordered_set& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/swap
std::unordered_set::unordered_set	A										<section class="prog__container">\n<p>Constructs new container from a variety of data sources.</p>\n<pre><code>explicit unordered_set( size_type bucket_count = /*implementation-defined*/,\n                        const Hash& hash = Hash(void),\n                        const KeyEqual& equal = KeyEqual(void),\n                        const Allocator& alloc = Allocator(void) );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/unordered_set/unordered_set
std::vector::assign	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>void assign( size_type count, const T& value );</code></pre><pre><code>template&lt; class InputIt &gt;\nvoid assign( InputIt first, InputIt last );</code></pre><pre><code>void assign( std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/assign
std::vector::at	A										<section class="prog__container">\n<p>Returns a reference to the element at specified location <code>pos</code>, with bounds checking.</p>\n<pre><code>reference       at( size_type pos );</code></pre><pre><code>const_reference at( size_type pos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/at
std::vector::back	A										<section class="prog__container">\n<p>Returns reference to the last element in the container.</p>\n<pre><code>reference back(void);</code></pre><pre><code>const_reference back(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/back
std::vector::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/begin
std::vector::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first element of the container.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/begin
std::vector::capacity	A										<section class="prog__container">\n<p>Returns the number of elements that the container has currently allocated space for.</p>\n<pre><code>size_type capacity(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/capacity
std::vector::clear	A										<section class="prog__container">\n<p>Removes all elements from the container.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/clear
std::vector::data	A										<section class="prog__container">\n<p>Returns pointer to the underlying array serving as element storage.</p>\n<pre><code>T* data(void);</code></pre><pre><code>const T* data(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/data
std::vector::emplace	A										<section class="prog__container">\n<p>Inserts a new element into the container directly before <code>pos</code>.</p>\n<pre><code>template&lt; class... Args &gt; \niterator emplace( const_iterator pos, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/emplace
std::vector::emplace_back	A										<section class="prog__container">\n<p>Appends a new element to the end of the container.</p>\n<pre><code>template&lt; class... Args &gt;\nvoid emplace_back( Args&&... args );</code></pre><pre><code>template&lt; class... Args &gt;\nreference emplace_back( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/emplace_back
std::vector::empty	A										<section class="prog__container">\n<p>Checks if the container has no elements, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/empty
std::vector::cend	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/end
std::vector::end	A										<section class="prog__container">\n<p>Returns an iterator to the element following the last element of the container.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/end
std::vector::erase	A										<section class="prog__container">\n<p>Removes specified elements from the container.</p>\n<pre><code>iterator erase( const_iterator pos );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/erase
std::vector::front	A										<section class="prog__container">\n<p>Returns a reference to the first element in the container.</p>\n<pre><code>reference front(void);</code></pre><pre><code>const_reference front(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/front
std::vector::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the container.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/get_allocator
std::vector::insert	A										<section class="prog__container">\n<p>Inserts elements at the specified location in the container.</p>\n<pre><code>iterator insert( const_iterator pos, const T& value );</code></pre><pre><code>iterator insert( const_iterator pos, T&& value );</code></pre><pre><code>iterator insert( const_iterator pos, size_type count, const T& value );</code></pre><pre><code>template&lt; class InputIt &gt;\niterator insert( const_iterator pos, InputIt first, InputIt last );</code></pre><pre><code>iterator insert( const_iterator pos, std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/insert
std::vector::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the container is able to hold due to system or library implementation limitations, i.e. <code>std::distance(begin(void), end(void))</code> for the largest container.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/max_size
std::vector::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the container.</p>\n<pre><code>vector& operator=( const vector& other );</code></pre><pre><code>vector& operator=( vector&& other );</code></pre><pre><code>vector& operator=( std::initializer_list&lt;T&gt; ilist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/operator=
std::vector::operator[]	A										<section class="prog__container">\n<p>Returns a reference to the element at specified location <code>pos</code>.</p>\n<pre><code>reference       operator[]( size_type pos );</code></pre><pre><code>const_reference operator[]( size_type pos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/operator_at
std::vector::pop_back	A										<section class="prog__container">\n<p>Removes the last element of the container.</p>\n<pre><code>void pop_back(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/pop_back
std::vector::push_back	A										<section class="prog__container">\n<p>Appends the given element <code>value</code> to the end of the container.</p>\n<pre><code>void push_back( const T& value );</code></pre><pre><code>void push_back( T&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/push_back
std::vector::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/rbegin
std::vector::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first element of the reversed container.</p>\n<pre><code>reverse_iterator rbegin(void);</code></pre><pre><code>const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/rbegin
std::vector::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/rend
std::vector::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the element following the last element of the reversed container.</p>\n<pre><code>reverse_iterator rend(void);</code></pre><pre><code>const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/rend
std::vector::reserve	A										<section class="prog__container">\n<p>Increase the capacity of the container to a value that's greater or equal to <code>new_cap</code>.</p>\n<pre><code>void reserve( size_type new_cap );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/reserve
std::vector::resize	A										<section class="prog__container">\n<p>Resizes the container to contain <code>count</code> elements.</p>\n<pre><code>void resize( size_type count );</code></pre><pre><code>void resize( size_type count, const value_type& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/resize
std::vector::shrink_to_fit	A										<section class="prog__container">\n<p>Requests the removal of unused capacity.</p>\n<pre><code>void shrink_to_fit(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/shrink_to_fit
std::vector::size	A										<section class="prog__container">\n<p>Returns the number of elements in the container, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/size
std::vector::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the container with those of <code>other</code>.</p>\n<pre><code>void swap( vector& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/container/vector/swap
std::vector::vector	A										<section class="prog__container">\n<p>Constructs a new container from a variety of data sources, optionally using a user supplied allocator <code>alloc</code>.</p>\n<pre><code>vector(void) : vector( Allocator(void) ) {}\nexplicit vector( const Allocator& alloc );</code></pre><pre><code>vector( size_type count, \n                 const T& value,\n                 const Allocator& alloc = Allocator(void));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/container/vector/vector
assert	A										<section class="prog__container">\n<p>The definition of the macro <code>assert</code> depends on another macro, <code>NDEBUG</code>, which is not defined by the standard library.</p>\n<pre><code>#ifdef NDEBUG\n#define assert(condition) ((void)0)\n#else\n#define assert(condition) /*implementation defined*/\n#endif</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/assert
std::bad_exception	A										<section class="prog__container">\n<p><code>std::bad_exception</code> is the type of the exception thrown by the C++ runtime in the following situations...</p>\n<pre><code>class bad_exception;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/bad_exception
std::current_exception	A										<section class="prog__container">\n<p>If called during exception handling (typically, in a <code>catch</code> clause), captures the current exception object and creates an std::exception_ptr that holds either a copy or a reference to...</p>\n<pre><code>std::exception_ptr current_exception(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/current_exception
std::domain_error	A										<section class="prog__container">\n<p>Defines a type of object to be thrown as exception.</p>\n<pre><code>class domain_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/domain_error
std::errc	A										<section class="prog__container">\n<p>The scoped enumeration <code>std::errc</code> defines the values of portable error conditions that correspond to the POSIX error codes.</p>\n<pre><code>enum class errc;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/errc
std::error_category	A										<section class="prog__container">\n<p><code>std::error_category</code> serves as the base class for specific error category types, such as std::system_category, <code>std::iostream_category</code>, etc.</p>\n<pre><code>class error_category;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category
std::error_category::default_error_condition	A										<section class="prog__container">\n<p>Returns the error condition for the given error code.</p>\n<pre><code>virtual std::error_condition default_error_condition( int code ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category/default_error_condition
std::error_category::equivalent	A										<section class="prog__container">\n<p>Checks whether error code is equivalent to an error condition for the error category represented by <code>*this</code>.</p>\n<pre><code>virtual bool equivalent( int code, \n                         const std::error_condition& condition ) const;</code></pre><pre><code>virtual bool equivalent( const std::error_code& code,\n                         int condition ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category/equivalent
std::error_category::error_category	A										<section class="prog__container">\n<p>Constructs the error category object.</p>\n<pre><code>constexpr error_category(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category/error_category
std::error_category::message	A										<section class="prog__container">\n<p>Returns a string describing the given error condition for the error category represented by <code>*this</code>.</p>\n<pre><code>virtual std::string message( int condition ) const = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category/message
std::error_category::name	A										<section class="prog__container">\n<p>Returns a pointer to a null-terminated byte string that specifies the name of the error category.</p>\n<pre><code>virtual const char* name(void) const = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category/name
std::error_category::operator!=	A										<section class="prog__container">\n<p>Compares to another error category.</p>\n<pre><code>bool operator!=( const error_category& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category/operator_cmp
std::error_category::operator<	A										<section class="prog__container">\n<p>Compares to another error category.</p>\n<pre><code>bool operator&lt;( const error_category& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category/operator_cmp
std::error_category::operator==	A										<section class="prog__container">\n<p>Compares to another error category.</p>\n<pre><code>bool operator==( const error_category& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category/operator_cmp
std::error_category::~error_category	A										<section class="prog__container">\n<p>Destroys the object.</p>\n<pre><code>virtual ~error_category(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_category/~error_category
std::error_code	A										<section class="prog__container">\n<p><code>std::error_code</code> is a platform-dependent error code.</p>\n<pre><code>class error_code;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code
std::error_code::assign	A										<section class="prog__container">\n<p>Replaces the contents with error code <code>ec</code> and corresponding category <code>ecat</code>.</p>\n<pre><code>void assign( int ec, const error_category& ecat );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/assign
std::error_code::category	A										<section class="prog__container">\n<p>Returns the error category of the error value.</p>\n<pre><code>const std::error_category& category(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/category
std::error_code::clear	A										<section class="prog__container">\n<p>Replaces the error code and error category with default values.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/clear
std::error_code::default_error_condition	A										<section class="prog__container">\n<p>Returns the default error condition for the current error value.</p>\n<pre><code>std::error_condition default_error_condition(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/default_error_condition
std::error_code::error_code	A										<section class="prog__container">\n<p>Constructs new error code.</p>\n<pre><code>template&lt; class ErrorCodeEnum &gt;\nerror_code( ErrorCodeEnum e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/error_code
std::is_error_code_enum	A										<section class="prog__container">\n<p>If <code>T</code> is an error code enumeration, this template provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_error_code_enum;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/is_error_code_enum
std::error_code::message	A										<section class="prog__container">\n<p>Returns the message corresponding to the current error value and category.</p>\n<pre><code>std::string message(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/message
std::error_code::operator=	A										<section class="prog__container">\n<p>Replaces the error code and corresponding category with those representing error code enum <code>e</code>.</p>\n<pre><code>template&lt; class ErrorCodeEnum &gt;\nerror_code& operator=( ErrorCodeEnum e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/operator=
std::error_code::operator bool	A										<section class="prog__container">\n<p>Checks if the error value is valid, i.e. non-zero.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/operator_bool
std::error_code::value	A										<section class="prog__container">\n<p>Returns the platform dependent error value.</p>\n<pre><code>int value(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_code/value
std::error_condition	A										<section class="prog__container">\n<p><code>std::error_condition</code> is a platform-independent error code.</p>\n<pre><code>class error_condition;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition
std::error_condition::assign	A										<section class="prog__container">\n<p>Assigns contents to an error condition.</p>\n<pre><code>void assign( int val, const error_category& cat );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition/assign
std::error_condition::category	A										<section class="prog__container">\n<p>Returns the stored error category.</p>\n<pre><code>const error_category& category(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition/category
std::error_condition::clear	A										<section class="prog__container">\n<p>Clears the state of the error condition.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition/clear
std::error_condition::error_condition	A										<section class="prog__container">\n<p>Constructs new error condition.</p>\n<pre><code>error_condition( const error_condition& other );</code></pre><pre><code>template&lt; class ErrorConditionEnum &gt;\nerror_condition( ErrorConditionEnum e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition/error_condition
std::is_error_condition_enum	A										<section class="prog__container">\n<p>If <code>T</code> is an error condition enum, this template provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_error_condition_enum;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition/is_error_condition_enum
std::error_condition::message	A										<section class="prog__container">\n<p>Returns an explanatory message for the stored error code and error category.</p>\n<pre><code>std::string message(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition/message
std::error_condition::operator=	A										<section class="prog__container">\n<p>Assigns contents to an error condition.</p>\n<pre><code>error_condition& operator=( const error_condition& other );</code></pre><pre><code>template&lt; class ErrorConditionEnum &gt;\nerror_condition& operator=( ErrorConditionEnum e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition/operator=
std::error_condition::operator bool	A										<section class="prog__container">\n<p>Checks whether the stored error code is not zero.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition/operator_bool
std::error_condition::value	A										<section class="prog__container">\n<p>Returns the stored error code.</p>\n<pre><code>int value(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/error_condition/value
std::exception	A										<section class="prog__container">\n<p>Provides consistent interface to handle errors through the throw expression.</p>\n<pre><code>class exception;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception
std::exception::exception	A										<section class="prog__container">\n<p>Constructs new exception object.</p>\n<pre><code>exception( const exception& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/exception
std::exception::operator=	A										<section class="prog__container">\n<p>Copy assignment operator.</p>\n<pre><code>exception& operator=( const exception& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/operator=
std::bad_alloc::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::bad_array_length::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::bad_array_new_length::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::bad_cast::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::bad_function_call::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::bad_typeid::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::bad_weak_ptr::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_fstream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_ifstream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_ios::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_iostream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_istream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_istringstream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_ofstream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_ostream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_ostringstream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::basic_stringstream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::domain_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::exception::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::experimental::bad_optional_access::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::future_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::invalid_argument::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::ios_base::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::istrstream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::length_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::logic_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::ostrstream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::out_of_range::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::overflow_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::range_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::regex_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::runtime_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::strstream::failure::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::system_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::underflow_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/what
std::exception::~exception	A										<section class="prog__container">\n<p>Destroys the exception object.</p>\n<pre><code>virtual ~exception(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/exception/~exception
std::generic_category	A										<section class="prog__container">\n<p>Obtains a reference to the static error category object for generic errors.</p>\n<pre><code>const std::error_category& generic_category(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/generic_category
std::get_terminate	A										<section class="prog__container">\n<p>Returns the currently installed std::terminate_handler, which may be a null pointer.</p>\n<pre><code>std::terminate_handler get_terminate(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/get_terminate
std::invalid_argument	A										<section class="prog__container">\n<p>Defines a type of object to be thrown as exception.</p>\n<pre><code>class invalid_argument;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/invalid_argument
std::length_error	A										<section class="prog__container">\n<p>Defines a type of object to be thrown as exception.</p>\n<pre><code>class length_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/length_error
std::logic_error	A										<section class="prog__container">\n<p>Defines a type of object to be thrown as exception.</p>\n<pre><code>class logic_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/logic_error
std::make_exception_ptr	A										<section class="prog__container">\n<p>Creates an std::exception_ptr that holds a reference to a copy of <code>e</code>.</p>\n<pre><code>template&lt; class E &gt;\nstd::exception_ptr make_exception_ptr( E e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/make_exception_ptr
std::nested_exception	A										<section class="prog__container">\n<p><code>std::nested_exceptions</code> is a polymorphic mixin class which can capture and store the current exception, making it possible to nest exceptions of arbitrary types within each other.</p>\n<pre><code>class nested_exception;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/nested_exception
std::nested_exception::nested_exception	A										<section class="prog__container">\n<p>Constructs new <code>nested_exception</code> object.</p>\n<pre><code>nested_exception( const nested_exception& other ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/nested_exception/nested_exception
std::nested_exception::nested_ptr	A										<section class="prog__container">\n<p>Returns a pointer to the stored exception, if any.</p>\n<pre><code>std::exception_ptr nested_ptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/nested_exception/nested_ptr
std::nested_exception::operator=	A										<section class="prog__container">\n<p>Replaces the stored exception with the one held in <code>other</code>.</p>\n<pre><code>nested_exception& operator=( const nested_exception& other ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/nested_exception/operator=
std::nested_exception::rethrow_nested	A										<section class="prog__container">\n<p>Rethrows the stored exception.</p>\n<pre><code>[[noreturn]] void rethrow_nested(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/nested_exception/rethrow_nested
std::nested_exception::~nested_exception	A										<section class="prog__container">\n<p>Destroys the nested exception object.</p>\n<pre><code>virtual ~nested_exception(void) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/nested_exception/~nested_exception
std::out_of_range	A										<section class="prog__container">\n<p>Defines a type of object to be thrown as exception.</p>\n<pre><code>class out_of_range;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/out_of_range
std::overflow_error	A										<section class="prog__container">\n<p>Defines a type of object to be thrown as exception.</p>\n<pre><code>class overflow_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/overflow_error
std::range_error	A										<section class="prog__container">\n<p>Defines a type of object to be thrown as exception.</p>\n<pre><code>class range_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/range_error
std::rethrow_exception	A										<section class="prog__container">\n<p>Throws the previously captured exception object, referred to by the exception pointer <code>p</code>.</p>\n<pre><code>[[noreturn]] void rethrow_exception( std::exception_ptr p )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/rethrow_exception
std::rethrow_if_nested	A										<section class="prog__container">\n<p>If <code>E</code> is not a polymorphic class type, does nothing.</p>\n<pre><code>template&lt; class E &gt;\nvoid rethrow_if_nested( const E& e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/rethrow_if_nested
std::runtime_error	A										<section class="prog__container">\n<p>Defines a type of object to be thrown as exception.</p>\n<pre><code>class runtime_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/runtime_error
std::set_terminate	A										<section class="prog__container">\n<p>Makes <code>f</code> the new global terminate handler function and returns the previously installed std::terminate_handler.</p>\n<pre><code>std::terminate_handler set_terminate( std::terminate_handler f );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/set_terminate
std::system_category	A										<section class="prog__container">\n<p>Obtains a reference to the static error category object for errors reported by the operating system.</p>\n<pre><code>const std::error_category& system_category(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/system_category
std::system_error	A										<section class="prog__container">\n<p><code>std::system_error</code> is the type of the exception thrown by various library functions (typically the functions that interface with the OS facilities, e.</p>\n<pre><code>class system_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/system_error
std::system_error::code	A										<section class="prog__container">\n<p>Returns the stored error code.</p>\n<pre><code>const std::error_code& code(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/system_error/code
std::system_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/system_error/what
std::terminate	A										<section class="prog__container">\n<p><code>std::terminate(void)</code> is called by the C++ runtime when exception handling fails for any of the following reasons...</p>\n<pre><code>[[noreturn]] void terminate(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/terminate
std::throw_with_nested	A										<section class="prog__container">\n<p>If <code>std::remove_reference_t&lt;T&gt;</code> is a non-final non-union class type that is neither std::nested_exception nor derived from std::nested_exception, throws an exception of an...</p>\n<pre><code>template&lt; class T &gt;\n[[noreturn]] void throw_with_nested( T&& t );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/throw_with_nested
std::uncaught_exception	A										<section class="prog__container">\n<p> Detects if the current thread has a live exception object, that is, an exception has been thrown or rethrown and not yet entered a matching catch clause, std::terminate or std::unexpected.</p>\n<pre><code>bool uncaught_exception(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/uncaught_exception
std::underflow_error	A										<section class="prog__container">\n<p>Defines a type of object to be thrown as exception.</p>\n<pre><code>class underflow_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/error/underflow_error
std::experimental::any	A										<section class="prog__container">\n<p>The class <code>any</code> describes a type-safe container for single values of any type.</p>\n<pre><code>class any;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/any
std::experimental::any::any	A										<section class="prog__container">\n<p>Constructs a new <code>any</code> object.</p>\n<pre><code>any( const any& other );</code></pre><pre><code>any( any&& other );</code></pre><pre><code>template&lt;typename ValueType&gt;\n    any( ValueType&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/any/any
std::experimental::any_cast	A										<section class="prog__container">\n<p>Performs type-safe access to the contained object.</p>\n<pre><code>template&lt;class ValueType&gt;\n    ValueType any_cast(const any& operand);</code></pre><pre><code>template&lt;class ValueType&gt;\n    ValueType any_cast(any& operand);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/experimental/any/any_cast
std::experimental::any::clear	A										<section class="prog__container">\n<p>If not empty, destroys the contained object.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/any/clear
std::experimental::any::empty	A										<section class="prog__container">\n<p>Checks whether the object contains a value.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/any/empty
std::experimental::any::operator=	A										<section class="prog__container">\n<p>Assigns contents to the contained value.</p>\n<pre><code>any& operator=( const any& rhs );</code></pre><pre><code>any& operator=( any&& rhs );</code></pre><pre><code>template&lt;typename ValueType&gt;\n    any& operator=( ValueType&& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/any/operator=
std::experimental::any::swap	A										<section class="prog__container">\n<p>Swaps the content of two <code>any</code> objects.</p>\n<pre><code>void swap(any& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/any/swap
std::experimental::any::type	A										<section class="prog__container">\n<p>Queries the contained type.</p>\n<pre><code>const type_info& type(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/any/type
std::experimental::apply	A										<section class="prog__container">\n<p>Invoke the <code>Callable</code> object <code>f</code> with a tuple of arguments.</p>\n<pre><code>template &lt;class F, class Tuple&gt;\nconstexpr decltype(auto) apply(F&& f, Tuple&& t);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/apply
std::experimental::basic_string_view	A										<section class="prog__container">\n<p>The class template <code>basic_string_view</code> describes an object that can refer to a constant contiguous sequence of <code>char</code>-like objects with the first element of the sequence at...</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt; \n&gt; class basic_string_view;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view
std::experimental::basic_string_view::at	A										<section class="prog__container">\n<p>Returns a reference to the character at specified location <code>pos</code>.</p>\n<pre><code>constexpr const_reference at(size_type pos) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/at
std::experimental::basic_string_view::back	A										<section class="prog__container">\n<p>Returns reference to the last character in the view.</p>\n<pre><code>constexpr const_reference back(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/back
std::experimental::basic_string_view::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first character of the view.</p>\n<pre><code>constexpr const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/begin
std::experimental::basic_string_view::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first character of the view.</p>\n<pre><code>constexpr const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/begin
std::experimental::basic_string_view::compare	A										<section class="prog__container">\n<p>Compares two character sequences.</p>\n<pre><code>constexpr int compare(basic_string_view v) const;</code></pre><pre><code>constexpr int compare(size_type pos1, size_type count1,\n                      basic_string_view v) const</code></pre><pre><code>constexpr int compare(size_type pos1, size_type count1, basic_string_view v,\n                      size_type pos2, size_type count2) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/compare
std::experimental::basic_string_view::copy	A										<section class="prog__container">\n<p>Copies the substring <code>[pos, pos + rcount)</code> to the character string pointed to by <code>dest</code>, where <code>rcount</code> is the smaller of <code>count</code> and...</p>\n<pre><code>size_type copy( CharT* dest,\n                size_type count,\n                size_type pos = 0) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/copy
std::experimental::basic_string_view::data	A										<section class="prog__container">\n<p>Returns a pointer to the underlying character array.</p>\n<pre><code>constexpr const_pointer data(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/data
std::experimental::basic_string_view::empty	A										<section class="prog__container">\n<p>Checks if the view has no characters, i.e. whether <code>size(void) == 0</code>.</p>\n<pre><code>constexpr bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/empty
std::experimental::basic_string_view::cend	A										<section class="prog__container">\n<p>Returns an iterator to the character following the last character of the view.</p>\n<pre><code>constexpr const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/end
std::experimental::basic_string_view::end	A										<section class="prog__container">\n<p>Returns an iterator to the character following the last character of the view.</p>\n<pre><code>constexpr const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/end
std::experimental::basic_string_view::find	A										<section class="prog__container">\n<p>Finds the first substring equal to the given character sequence.</p>\n<pre><code>constexpr size_type find(basic_string_view v, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type find(CharT c, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type find(const CharT* s, size_type pos, size_type count) const;</code></pre><pre><code>constexpr size_type find(const CharT* s, size_type pos = 0) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/find
std::experimental::basic_string_view::find_first_not_of	A										<section class="prog__container">\n<p>Finds the first character not equal to any of the characters in the given character sequence.</p>\n<pre><code>constexpr size_type \n    find_first_not_of(basic_string_view v, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type\n    find_first_not_of(CharT c, size_type pos = 0) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/find_first_not_of
std::experimental::basic_string_view::find_first_of	A										<section class="prog__container">\n<p>Finds the first character equal to any of the characters in the given character sequence.</p>\n<pre><code>constexpr size_type find_first_of(basic_string_view v, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type find_first_of(CharT c, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type find_first_of(const CharT* s, size_type pos, size_type count) const;</code></pre><pre><code>constexpr size_type find_first_of(const CharT* s, size_type pos = 0) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/find_first_of
std::experimental::basic_string_view::find_last_not_of	A										<section class="prog__container">\n<p>Finds the last character not equal to any of the characters in the given character sequence.</p>\n<pre><code>constexpr size_type \n    find_last_not_of(basic_string_view v, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type\n    find_last_not_of(CharT c, size_type pos = npos) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/find_last_not_of
std::experimental::basic_string_view::find_last_of	A										<section class="prog__container">\n<p>Finds the last character equal to any of the characters in the given character sequence.</p>\n<pre><code>constexpr size_type find_last_of(basic_string_view v, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type find_last_of(CharT c, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type find_last_of(const CharT* s, size_type pos, size_type count) const;</code></pre><pre><code>constexpr size_type find_last_of(const CharT* s, size_type pos = npos) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/find_last_of
std::experimental::basic_string_view::front	A										<section class="prog__container">\n<p>Returns reference to the first character in the view.</p>\n<pre><code>constexpr const_reference front(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/front
std::experimental::basic_string_view::max_size	A										<section class="prog__container">\n<p>The largest possible number of char-like objects that can be referred to by a <code>basic_string_view</code>.</p>\n<pre><code>constexpr size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/max_size
std::experimental::basic_string_view::operator=	A										<section class="prog__container">\n<p>Replaces the view with that of <code>view</code>.</p>\n<pre><code>basic_string_view& operator=( const basic_string_view& view ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/operator=
std::experimental::basic_string_view::operator[]	A										<section class="prog__container">\n<p>Returns a const reference to the character at specified location <code>pos</code>.</p>\n<pre><code>constexpr const_reference operator[](size_type pos) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/operator_at
std::experimental::basic_string_view::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first character of the reversed view.</p>\n<pre><code>constexpr const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/rbegin
std::experimental::basic_string_view::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first character of the reversed view.</p>\n<pre><code>constexpr const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/rbegin
std::experimental::basic_string_view::remove_prefix	A										<section class="prog__container">\n<p>Moves the start of the view forward by <code>n</code> characters.</p>\n<pre><code>constexpr void remove_prefix(size_type n);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/remove_prefix
std::experimental::basic_string_view::remove_suffix	A										<section class="prog__container">\n<p>Moves the end of the view back by <code>n</code> characters.</p>\n<pre><code>constexpr void remove_suffix(size_type n);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/remove_suffix
std::experimental::basic_string_view::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the character following the last character of the reversed view.</p>\n<pre><code>constexpr const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/rend
std::experimental::basic_string_view::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the character following the last character of the reversed view.</p>\n<pre><code>constexpr const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/rend
std::experimental::basic_string_view::rfind	A										<section class="prog__container">\n<p>Finds the last substring equal to the given character sequence.</p>\n<pre><code>constexpr size_type rfind(basic_string_view v, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type rfind(CharT c, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type rfind(const CharT* s, size_type pos, size_type count) const;</code></pre><pre><code>constexpr size_type rfind(const CharT* s, size_type pos = npos) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/rfind
std::experimental::basic_string_view::length	A										<section class="prog__container">\n<p>Returns the number of <code>CharT</code> elements in the view, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>constexpr size_type length(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/size
std::experimental::basic_string_view::size	A										<section class="prog__container">\n<p>Returns the number of <code>CharT</code> elements in the view, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>constexpr size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/size
std::experimental::basic_string_view::substr	A										<section class="prog__container">\n<p>Returns a view of the substring <code>[pos, pos + rcount)</code>, where <code>rcount</code> is the smaller of <code>count</code> and <code>size(void) - pos</code>.</p>\n<pre><code>constexpr basic_string_view\n    substr(size_type pos = 0, size_type count = npos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/substr
std::experimental::basic_string_view::swap	A										<section class="prog__container">\n<p>Exchanges the view with that of <code>v</code>.</p>\n<pre><code>constexpr void swap(basic_string_view& v);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/swap
std::experimental::basic_string_view::operator basic_string	A										<section class="prog__container">\n<p>Creates a <code>basic_string</code> with a copy of the content of the current view.</p>\n<pre><code>template&lt;class Allocator&gt;\nexplicit operator basic_string&lt;CharT, Traits, Allocator&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/to_string
std::experimental::basic_string_view::to_string	A										<section class="prog__container">\n<p>Creates a <code>basic_string</code> with a copy of the content of the current view.</p>\n<pre><code>template&lt;class Allocator = allocator&lt;CharT&gt;&gt;\nbasic_string&lt;CharT, Traits, Allocator&gt;\n    to_string(const Allocator& a = Allocator(void)) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/basic_string_view/to_string
std::experimental::boyer_moore_horspool_searcher	A										<section class="prog__container">\n<p>A searcher suitable for use with std::experimental::search that implements the Boyer-Moore-Horspool string searching algorithm.</p>\n<pre><code>template&lt; class RandomIt1,\n          class Hash = std::hash&lt;typename std::iterator_traits&lt;RandomIt1&gt;::value_type&gt;,\n          class BinaryPredicate = std::equal_to&lt;&gt; &gt;\nclass boyer_moore_horspool_searcher;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/boyer_moore_horspool_searcher
std::experimental::boyer_moore_searcher	A										<section class="prog__container">\n<p>A searcher suitable for use with std::experimental::search that implements the Boyer-Moore string searching algorithm.</p>\n<pre><code>template&lt; class RandomIt1,\n          class Hash = std::hash&lt;typename std::iterator_traits&lt;RandomIt1&gt;::value_type&gt;,\n          class BinaryPredicate = std::equal_to&lt;&gt; &gt;\nclass boyer_moore_searcher;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/boyer_moore_searcher
std::experimental::default_searcher	A										<section class="prog__container">\n<p>A class suitable for use with std::experimental::search that delegates the search operation to the standard library's std::search.</p>\n<pre><code>template&lt; class ForwardIterator1, class BinaryPredicate = std::equal_to&lt;&gt; &gt;\nclass default_searcher;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/default_searcher
std::experimental::erased_type	A										<section class="prog__container">\n<p>The struct <code>erased_type</code> is an empty struct that serves as a placeholder for a type in situations where the actual type is determined at runtime.</p>\n<pre><code>struct erased_type { };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/erased_type
std::experimental::filesystem::absolute	A										<section class="prog__container">\n<p> Returns absolute path of <code>p</code> relative to <code>base</code> according to the following rules:  If <code>p</code> has both root name and root directory (e.</p>\n<pre><code>path absolute( const path& p, const path& base = current_path(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/absolute
std::experimental::filesystem::system_complete	A										<section class="prog__container">\n<p> Obtains the absolute path that identifies the file that the OS file opening API would access given the pathname <code>p</code>.</p>\n<pre><code>path system_complete(const path& p);\npath system_complete(const path& p, error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/absolute
std::experimental::filesystem::canonical	A										<section class="prog__container">\n<p>Converts path <code>p</code> to a canonical absolute path, i.e. an absolute path that has no dot, dot-dot elements or symbolic links.</p>\n<pre><code>path canonical( const path& p, const path& base = current_path(void) );</code></pre><pre><code>path canonical( const path& p, error_code& ec );</code></pre><pre><code>path canonical( const path& p, const path& base, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/canonical
std::experimental::filesystem::copy	A										<section class="prog__container">\n<p>Copies files and directories, with a variety of options...</p>\n<pre><code>void copy( const path& from, const path& to );\nvoid copy( const path& from, const path& to, error_code& ec );</code></pre><pre><code>void copy( const path& from, const path& to, copy_options options );\nvoid copy( const path& from, const path& to, copy_options options, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/copy
std::experimental::filesystem::copy_options	A										<section class="prog__container">\n<p>This type represents available options that control the behavior of the copy(void) and copy_file(void) function.</p>\n<pre><code>enum class copy_options {\n    none = 0,\n    skip_existing = 1,\n    overwrite_existing = 2,\n    update_existing = 4,\n    recursive = 8,\n    copy_symlinks = 16,\n    skip_symlinks = 32,\n    directories_only = 64,\n    create_symlinks = 128,\n    create_hard_links = 256\n};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/copy_options
std::experimental::filesystem::copy_symlink	A										<section class="prog__container">\n<p>Copies a symlink to another location.</p>\n<pre><code>void copy_symlink( const path& from, const path& to);</code></pre><pre><code>void copy_symlink( const path& from, const path& to,\n                   error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/copy_symlink
std::experimental::filesystem::create_directories	A										<section class="prog__container">\n<p> Executes (1) for every element of <code>p</code> that does not already exist.</p>\n<pre><code>bool create_directories( const path& p );\nbool create_directories( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/create_directory
std::experimental::filesystem::create_hard_link	A										<section class="prog__container">\n<p>Creates a hard link <code>link</code> with its target set to <code>target</code> as if by POSIX link(void): the pathname <code>target</code> must exist.</p>\n<pre><code>void create_hard_link( const path& target, const path& link );\nvoid create_hard_link( const path& target, const path& link, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/create_hard_link
std::experimental::filesystem::create_directory_symlink	A										<section class="prog__container">\n<p>Creates a symbolic link <code>link</code> with its target set to <code>target</code> as if by POSIX symlink(void): the pathname <code>target</code> may be invalid or non-existing.</p>\n<pre><code>void create_directory_symlink( const path& target, const path& link );\nvoid create_directory_symlink( const path& target, const path& link, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/create_symlink
std::experimental::filesystem::create_symlink	A										<section class="prog__container">\n<p>Creates a symbolic link <code>link</code> with its target set to <code>target</code> as if by POSIX symlink(void): the pathname <code>target</code> may be invalid or non-existing.</p>\n<pre><code>void create_symlink( const path& target, const path& link );\nvoid create_symlink( const path& target, const path& link, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/create_symlink
std::experimental::filesystem::current_path	A										<section class="prog__container">\n<p>Returns or changes the current path.</p>\n<pre><code>path current_path(void);</code></pre><pre><code>path current_path( error_code& ec );</code></pre><pre><code>void current_path( const path& p );</code></pre><pre><code>void current_path( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/current_path
std::experimental::filesystem::directory_entry	A										<section class="prog__container">\n<p>Represents a directory entry.</p>\n<pre><code>class directory_entry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_entry
std::experimental::filesystem::directory_entry::assign	A										<section class="prog__container">\n<p>Assigns new content to the directory entry object.</p>\n<pre><code>void assign( const path& p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_entry/assign
std::experimental::filesystem::directory_entry::directory_entry	A										<section class="prog__container">\n<p>Constructs a new <code>directory_entry</code> object.</p>\n<pre><code>directory_entry( const directory_entry& ) = default;</code></pre><pre><code>directory_entry( directory_entry&& ) = default;</code></pre><pre><code>explicit directory_entry( const path& p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_entry/directory_entry
std::experimental::filesystem::directory_entry::operator=	A										<section class="prog__container">\n<p>Assigns another directory entry.</p>\n<pre><code>directory_entry& operator=( const directory_entry& ) = default;</code></pre><pre><code>directory_entry& operator=( directory_entry&&) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_entry/operator=
std::experimental::filesystem::directory_entry::path	A										<section class="prog__container">\n<p>Returns the full path the directory entry refers to.</p>\n<pre><code>const path& path(void) const;</code></pre><pre><code>operator const path& (void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_entry/path
std::experimental::filesystem::directory_entry::replace_filename	A										<section class="prog__container">\n<p>Changes the filename of the directory entry.</p>\n<pre><code>void replace_filename( const path& p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_entry/replace_filename
std::experimental::filesystem::directory_entry::status	A										<section class="prog__container">\n<p> Returns the potentially cached status of the entry, as if determined by a  status call (symlinks are followed to their targets)...</p>\n<pre><code>file_status status(void) const;\nfile_status status( error_code& ec ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_entry/status
std::experimental::filesystem::directory_entry::symlink_status	A										<section class="prog__container">\n<p> Returns the potentially cached status of the entry, as if determined by a  symlink_status call (symlinks are not followed)...</p>\n<pre><code>file_status symlink_status(void) const;\nfile_status symlink_status( error_code& ec ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_entry/status
std::experimental::filesystem::directory_iterator	A										<section class="prog__container">\n<p><code>directory_iterator</code> is an <code>InputIterator</code> that iterates over the directory_entry elements of a directory (but does not visit the subdirectories).</p>\n<pre><code>class directory_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_iterator
std::experimental::filesystem::directory_iterator::directory_iterator	A										<section class="prog__container">\n<p>Constructs a new directory iterator.</p>\n<pre><code>explicit directory_iterator( const path& p );</code></pre><pre><code>directory_iterator( const directory_iterator& ) = default;</code></pre><pre><code>directory_iterator( directory_iterator&& ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_iterator/directory_iterator
std::experimental::filesystem::directory_iterator::increment	A										<section class="prog__container">\n<p>Advances the iterator to the next entry.</p>\n<pre><code>directory_iterator& operator++(void);\ndirectory_iterator& increment( error_code& ec ) noexcept;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_iterator/increment
std::experimental::filesystem::directory_iterator::operator++	A										<section class="prog__container">\n<p>Advances the iterator to the next entry.</p>\n<pre><code>directory_iterator& operator++(void);\ndirectory_iterator& increment( error_code& ec ) noexcept;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_iterator/increment
std::experimental::filesystem::directory_iterator::operator*	A										<section class="prog__container">\n<p>Accesses the pointed-to directory_entry.</p>\n<pre><code>const directory_entry& operator*(void) const;\n        \nconst directory_entry* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_iterator/operator*
std::experimental::filesystem::directory_iterator::operator->	A										<section class="prog__container">\n<p>Accesses the pointed-to directory_entry.</p>\n<pre><code>const directory_entry& operator*(void) const;\n        \nconst directory_entry* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_iterator/operator*
std::experimental::filesystem::directory_options	A										<section class="prog__container">\n<p>This type represents available options that control the behavior of the directory_iterator and recursive_directory_iterator.</p>\n<pre><code>enum class directory_options {\n    none,\n    follow_directory_symlink,\n    skip_permission_denied\n};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/directory_options
std::experimental::filesystem::equivalent	A										<section class="prog__container">\n<p>Checks whether the paths <code>p1</code> and <code>p2</code> refer to the same file or directory and have the same file status as determined by status (symlinks are followed).</p>\n<pre><code>bool equivalent( const path& p1, const path& p2 );\nbool equivalent( const path& p1, const path& p2, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/equivalent
std::experimental::filesystem::exists	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to an existing file or directory.</p>\n<pre><code>bool exists( file_status s )</code></pre><pre><code>bool exists( const path& p );\nbool exists( const path& p, error_code& ec )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/exists
std::experimental::filesystem::file_size	A										<section class="prog__container">\n<p>Returns the size of the regular file <code>p</code>, determined as if by reading the <code>st_size</code> member of the structure obtained by POSIX stat (symlinks are followed)...</p>\n<pre><code>std::uintmax_t file_size( const path& p );\nstd::uintmax_t file_size( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/file_size
std::experimental::filesystem::file_status	A										<section class="prog__container">\n<p>Stores information about the type and permissions of a file.</p>\n<pre><code>class file_status;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/file_status
std::experimental::filesystem::file_status::file_status	A										<section class="prog__container">\n<p>Constructs a new <code>file_status</code> object.</p>\n<pre><code>file_status( const file_status& ) = default;</code></pre><pre><code>file_status( file_status&& ) = default;</code></pre><pre><code>explicit file_status( file_type type = file_type::none,\n                      perms permissions = perms::unknown);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/file_status/file_status
std::experimental::filesystem::file_status::operator=	A										<section class="prog__container">\n<p>Copy- or move-assigns another file type object.</p>\n<pre><code>file_status& operator=( const file_status& other ) = default;</code></pre><pre><code>file_status& operator=( file_status&& other ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/file_status/operator=
std::experimental::filesystem::file_status::permissions	A										<section class="prog__container">\n<p>Accesses the file permissions information.</p>\n<pre><code>perms permissions(void) const;</code></pre><pre><code>void permissions( perms perm );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/file_status/permissions
std::experimental::filesystem::file_status::type	A										<section class="prog__container">\n<p>Accesses the file type information.</p>\n<pre><code>file_type type(void) const;</code></pre><pre><code>void type( file_type type );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/file_status/type
std::experimental::filesystem::file_type	A										<section class="prog__container">\n<p>Indicates a type of a file or directory a path refers to.</p>\n<pre><code>enum class file_type {\n    none = 0,\n    not_found = -1,\n    regular = 1,\n    directory = 2,\n    symlink = 3,\n    block = 4,\n    character = 5,\n    fifo = 6,\n    socket = 7,\n    unknown = 8\n};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/file_type
std::experimental::filesystem::filesystem_error	A										<section class="prog__container">\n<p>An exception type thrown when errors are encountered.</p>\n<pre><code>class filesystem_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/filesystem_error
std::experimental::filesystem::filesystem_error::path1	A										<section class="prog__container">\n<p>Returns the paths that were stored in the exception object.</p>\n<pre><code>const path& path1(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/filesystem_error/path
std::experimental::filesystem::filesystem_error::path2	A										<section class="prog__container">\n<p>Returns the paths that were stored in the exception object.</p>\n<pre><code>const path& path2(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/filesystem_error/path
std::experimental::filesystem::filesystem_error::what	A										<section class="prog__container">\n<p>Returns the explanatory byte string that was stored in the exception object.</p>\n<pre><code>const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/filesystem_error/what
std::experimental::filesystem::hard_link_count	A										<section class="prog__container">\n<p>Returns the number of hard links for the filesystem object identified by path <code>p</code>.</p>\n<pre><code>std::uintmax_t hard_link_count( const path& p );\nstd::uintmax_t hard_link_count( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/hard_link_count
std::experimental::filesystem::is_block_file	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a block special file, as if determined by the POSIX S_ISBLK .</p>\n<pre><code>bool is_block_file( file_status s );</code></pre><pre><code>bool is_block_file( const path& p );\nbool is_block_file( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/is_block_file
std::experimental::filesystem::is_character_file	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a character special file, as if determined by POSIX S_ISCHR.</p>\n<pre><code>bool is_character_file( file_status s );</code></pre><pre><code>bool is_character_file( const path& p );\nbool is_character_file( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/is_character_file
std::experimental::filesystem::is_directory	A										<section class="prog__container">\n<p>Checks if the gived file status or path corresponds to a directory.</p>\n<pre><code>bool is_directory( file_status s );</code></pre><pre><code>bool is_directory( const path& p );</code></pre><pre><code>bool is_directory( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/is_directory
std::experimental::filesystem::is_empty	A										<section class="prog__container">\n<p>Checks whether the given path refers to an empty file or directory.</p>\n<pre><code>bool is_empty( const path& p );</code></pre><pre><code>bool is_empty( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/is_empty
std::experimental::filesystem::is_fifo	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a FIFO or pipe file.</p>\n<pre><code>bool is_fifo( file_status s );</code></pre><pre><code>bool is_fifo( const path& p );</code></pre><pre><code>bool is_fifo( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/is_fifo
std::experimental::filesystem::is_other	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a file of type <i>other</i> type.</p>\n<pre><code>bool is_other( file_status s );</code></pre><pre><code>bool is_other( const path& p );</code></pre><pre><code>bool is_other( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/is_other
std::experimental::filesystem::is_regular_file	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a regular file.</p>\n<pre><code>bool is_regular_file( file_status s );</code></pre><pre><code>bool is_regular_file( const path& p );</code></pre><pre><code>bool is_regular_file( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/is_regular_file
std::experimental::filesystem::is_socket	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a named IPC socket, as if determined by the POSIX S_IFSOCK.</p>\n<pre><code>bool is_socket( file_status s );</code></pre><pre><code>bool is_socket( const path& p );\nbool is_socket( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/is_socket
std::experimental::filesystem::is_symlink	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a symbolic link, as if determined by the POSIX S_IFLNK.</p>\n<pre><code>bool is_symlink( file_status s );</code></pre><pre><code>bool is_symlink( const path& p );\nbool is_symlink( const path& p, error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/is_symlink
std::experimental::filesystem::path	A										<section class="prog__container">\n<p>Objects of type <code>path</code> represent paths on a filesystem.</p>\n<pre><code>class path;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path
std::experimental::filesystem::path::assign	A										<section class="prog__container">\n<p>Assigns the contents to the <code>path</code> object.</p>\n<pre><code>template&lt; class Source &gt;\npath& assign( const Source& source );</code></pre><pre><code>template&lt; class InputIt &gt;\npath& assign( InputIt first, InputIt last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/assign
std::experimental::filesystem::path::begin	A										<section class="prog__container">\n<p> Returns an iterator to the first element of the path.</p>\n<pre><code>iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/begin
std::experimental::filesystem::path::end	A										<section class="prog__container">\n<p> Returns an iterator one past the last element of the path.</p>\n<pre><code>iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/begin
std::experimental::filesystem::path::clear	A										<section class="prog__container">\n<p>Clears the stored pathname.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/clear
std::experimental::filesystem::path::compare	A										<section class="prog__container">\n<p>Compares the lexical representations of the path and another path.</p>\n<pre><code>int compare( const path& p ) const;</code></pre><pre><code>int compare( const string_type& str ) const;</code></pre><pre><code>int compare( const value_type* s ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/compare
std::experimental::filesystem::path::concat	A										<section class="prog__container">\n<p>Concatenates the current path and the argument...</p>\n<pre><code>template&lt; class Source &gt;\npath& concat( const Source& source );</code></pre><pre><code>template&lt; class InputIt &gt;\npath& concat( InputIterator first, InputIterator last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/concat
std::experimental::filesystem::path::operator+=	A										<section class="prog__container">\n<p>Concatenates the current path and the argument...</p>\n<pre><code>path& operator+=( const path& p );</code></pre><pre><code>path& operator+=( const string_type& str );</code></pre><pre><code>path& operator+=( const value_type* ptr );</code></pre><pre><code>path& operator+=( value_type x );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/concat
std::experimental::filesystem::path::empty	A										<section class="prog__container">\n<p>Checks if the path is empty.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/empty
std::experimental::filesystem::path::extension	A										<section class="prog__container">\n<p>Returns the extension of the filename component of the path <code>*this</code>.</p>\n<pre><code>path extension(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/extension
std::experimental::filesystem::path::filename	A										<section class="prog__container">\n<p>Returns the filename component of the path.</p>\n<pre><code>path filename(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/filename
std::experimental::filesystem::path::generic_string	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt;\n          class Alloc = std::allocator&lt;CharT&gt; &gt;\nstd::basic_string&lt;CharT,Traits,Alloc&gt;\n    generic_string( const Allocator& a = Allocator(void) ) const;</code></pre><pre><code>std::string generic_string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/generic_string
std::experimental::filesystem::path::generic_u16string	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>std::u16string generic_u16string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/generic_string
std::experimental::filesystem::path::generic_u32string	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>std::u32string generic_u32string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/generic_string
std::experimental::filesystem::path::generic_u8string	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>std::u8string generic_u8string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/generic_string
std::experimental::filesystem::path::generic_wstring	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>std::wstring generic_wstring(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/generic_string
std::experimental::filesystem::path::has_extension	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_extension(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/has_path
std::experimental::filesystem::path::has_filename	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_filename(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/has_path
std::experimental::filesystem::path::has_parent_path	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_parent_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/has_path
std::experimental::filesystem::path::has_relative_path	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_relative_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/has_path
std::experimental::filesystem::path::has_root_directory	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_root_directory(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/has_path
std::experimental::filesystem::path::has_root_name	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_root_name(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/has_path
std::experimental::filesystem::path::has_root_path	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_root_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/has_path
std::experimental::filesystem::path::has_stem	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_stem(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/has_path
std::experimental::filesystem::path::make_preferred	A										<section class="prog__container">\n<p>Converts all directory separators in path to the preferred directory separator.</p>\n<pre><code>path& make_preferred(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/make_preferred
std::experimental::filesystem::path::c_str	A										<section class="prog__container">\n<p>Accesses the native path name as a character string.</p>\n<pre><code>const value_type* c_str(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/native
std::experimental::filesystem::path::native	A										<section class="prog__container">\n<p>Accesses the native path name as a character string.</p>\n<pre><code>const string_type& native(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/native
std::experimental::filesystem::path::parent_path	A										<section class="prog__container">\n<p>Returns the path to the parent directory.</p>\n<pre><code>path parent_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/parent_path
std::experimental::filesystem::path::path	A										<section class="prog__container">\n<p>Constructs a new <code>path</code> object.</p>\n<pre><code>path( const path& p );</code></pre><pre><code>path( path&& p );</code></pre><pre><code>template&lt; class Source &gt;\npath( const Source& source );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/path
std::experimental::filesystem::path::relative_path	A										<section class="prog__container">\n<p>Returns path relative to root path.</p>\n<pre><code>path relative_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/relative_path
std::experimental::filesystem::path::remove_filename	A										<section class="prog__container">\n<p>Removes a single filename component.</p>\n<pre><code>path& remove_filename(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/remove_filename
std::experimental::filesystem::path::replace_extension	A										<section class="prog__container">\n<p>Replaces the extension with <code>replacement</code> or removes it when the default value of <code>replacement</code> is used.</p>\n<pre><code>path& replace_extension( const path& replacement = path(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/replace_extension
std::experimental::filesystem::path::replace_filename	A										<section class="prog__container">\n<p>Replaces a single filename component with <code>replacement</code>.</p>\n<pre><code>path& replace_filename( const path& replacement );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/replace_filename
std::experimental::filesystem::path::root_directory	A										<section class="prog__container">\n<p>Returns the root directory of the path.</p>\n<pre><code>path root_directory(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/root_directory
std::experimental::filesystem::path::root_name	A										<section class="prog__container">\n<p>Returns the root name of the path.</p>\n<pre><code>path root_name(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/root_name
std::experimental::filesystem::path::root_path	A										<section class="prog__container">\n<p>Returns the root path of the path.</p>\n<pre><code>path root_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/root_path
std::experimental::filesystem::path::stem	A										<section class="prog__container">\n<p>Returns the filename identified by the path stripped of its extension.</p>\n<pre><code>path stem(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/stem
std::experimental::filesystem::path::string	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt;\n          class Alloc = std::allocator&lt;CharT&gt; &gt;\nstd::basic_string&lt;CharT,Traits,Alloc&gt;\n    string( const Alloc& a = Allocator(void) ) const;</code></pre><pre><code>std::string string(void) const;</code></pre><pre><code>std::string u8string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/string
std::experimental::filesystem::path::u16string	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>std::u16string u16string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/string
std::experimental::filesystem::path::u32string	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>std::u32string u32string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/string
std::experimental::filesystem::path::u8string	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>std::string u8string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/string
std::experimental::filesystem::path::wstring	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>std::wstring wstring(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/string
std::experimental::filesystem::path::swap	A										<section class="prog__container">\n<p>Swaps the contents of <code>*this</code> and <code>other</code>.</p>\n<pre><code>void swap( path& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/path/swap
std::experimental::filesystem::permissions	A										<section class="prog__container">\n<p>Changes access permissions of the file to which <code>p</code> resolves, as if by POSIX fchmodat.</p>\n<pre><code>void permissions(const path& p, perms prms);\nvoid permissions(const path& p, perms prms, error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/permissions
std::experimental::filesystem::perms	A										<section class="prog__container">\n<p>This type represents file access permissions.</p>\n<pre><code>enum class perms;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/perms
std::experimental::filesystem::read_symlink	A										<section class="prog__container">\n<p>If the path <code>p</code> refers to a symbolic link, returns a new path object which refers to the target of that symbolic link.</p>\n<pre><code>path read_symlink(const path& p);\npath read_symlink(const path& p, error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/read_symlink
std::experimental::filesystem::recursive_directory_iterator	A										<section class="prog__container">\n<p><code>recursive_directory_iterator</code> is an <code>InputIterator</code> that iterates over the directory_entry elements of a directory, and, recursively, over the entries of all subdirectories.</p>\n<pre><code>class recursive_directory_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator
std::experimental::filesystem::recursive_directory_iterator::depth	A										<section class="prog__container">\n<p>Returns the number of directories from the starting directory to the currently iterated directory, i.e. the current depth of the directory hierarchy.</p>\n<pre><code>int depth(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/depth
std::experimental::filesystem::recursive_directory_iterator::disable_recursion_pending	A										<section class="prog__container">\n<p>Disables recursion to the currently referred subdirectory, if any.</p>\n<pre><code>void disable_recursion_pending(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/disable_recursion_pending
std::experimental::filesystem::recursive_directory_iterator::increment	A										<section class="prog__container">\n<p>Advances the iterator to the next entry.</p>\n<pre><code>recursive_directory_iterator& increment( error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/increment
std::experimental::filesystem::recursive_directory_iterator::operator++	A										<section class="prog__container">\n<p>Advances the iterator to the next entry.</p>\n<pre><code>recursive_directory_iterator& operator++(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/increment
std::experimental::filesystem::recursive_directory_iterator::operator*	A										<section class="prog__container">\n<p>Accesses the pointed-to directory_entry...</p>\n<pre><code>const directory_entry& operator*(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/operator*
std::experimental::filesystem::recursive_directory_iterator::operator->	A										<section class="prog__container">\n<p>Accesses the pointed-to directory_entry...</p>\n<pre><code>const directory_entry* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/operator*
std::experimental::filesystem::recursive_directory_iterator::operator=	A										<section class="prog__container">\n<p>Assigns a recursive directory iterator.</p>\n<pre><code>recursive_directory_iterator& operator=( const recursive_directory_iterator& ) = default;</code></pre><pre><code>recursive_directory_iterator& operator=( recursive_directory_iterator&& ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/operator=
std::experimental::filesystem::recursive_directory_iterator::options	A										<section class="prog__container">\n<p>Returns the options that affect the directory iteration.</p>\n<pre><code>directory_options options(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/options
std::experimental::filesystem::recursive_directory_iterator::pop	A										<section class="prog__container">\n<p>Moves the iterator one level up in the directory hierarchy.</p>\n<pre><code>void pop(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/pop
std::experimental::filesystem::recursive_directory_iterator::recursion_pending	A										<section class="prog__container">\n<p>Returns <code>true</code> if the next increment will cause the directory currently referred to by <code>*this</code> to be iterated into.</p>\n<pre><code>bool recursion_pending(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/recursion_pending
std::experimental::filesystem::recursive_directory_iterator::recursive_directory_iterator	A										<section class="prog__container">\n<p>Contructs new recursive directory iterator.</p>\n<pre><code>recursive_directory_iterator( const recursive_directory_iterator& ) = default;</code></pre><pre><code>recursive_directory_iterator( recursive_directory_iterator&& ) = default;</code></pre><pre><code>explicit recursive_directory_iterator( const path& p,\n                                       directory_options options = directory_options::none );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/recursive_directory_iterator/recursive_directory_iterator
std::experimental::filesystem::remove	A										<section class="prog__container">\n<p> The file or empty directory identified by the path <code>p</code> is deleted as if by the POSIX remove.</p>\n<pre><code>bool remove(const path& p);\nbool remove(const path& p, error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/remove
std::experimental::filesystem::remove_all	A										<section class="prog__container">\n<p> Deletes the contents of <code>p</code> (if it is a directory) and the contents of all its subdirectories, recursively, then deletes <code>p</code> itself as if by repeatedly applying the POSIX...</p>\n<pre><code>std::uintmax_t remove_all(const path& p);\nstd::uintmax_t remove_all(const path& p, error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/remove
std::experimental::filesystem::rename	A										<section class="prog__container">\n<p>Moves or renames the filesystem object identified by <code>old_p</code> to <code>new_p</code> as if by the POSIX rename...</p>\n<pre><code>void rename(const path& old_p, const path& new_p);\nvoid rename(const path& old_p, const path& new_p, std::error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/rename
std::experimental::filesystem::resize_file	A										<section class="prog__container">\n<p>Changes the size of the regular file named by <code>p</code> as if by POSIX truncate: if the file size was previously larger than <code>new_size</code>, the remainder of the file is discarded.</p>\n<pre><code>void resize_file(const path& p, std::uintmax_t new_size);\nvoid resize_file(const path& p, std::uintmax_t new_size, error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/resize_file
std::experimental::filesystem::space	A										<section class="prog__container">\n<p>Determines the information about the filesystem on which the pathname <code>p</code> is located, as if by POSIX statvfs...</p>\n<pre><code>space_info space(const path& p);\nspace_info space(const path& p, error_code& ec) noexcept;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/space
std::experimental::filesystem::space_info	A										<section class="prog__container">\n<p>Represents the filesystem information as determined by space...</p>\n<pre><code>struct space_info {\n    uintmax_t capacity;\n    uintmax_t free; \n    uintmax_t available; \n};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/space_info
std::experimental::filesystem::status	A										<section class="prog__container">\n<p> Determines the type and attributes of the filesystem object identified by <code>p</code> as if by POSIX stat (symlinks are followed to their targets).</p>\n<pre><code>file_status status(const path& p);\nfile_status status(const path& p, error_code& ec) noexcept;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/status
std::experimental::filesystem::symlink_status	A										<section class="prog__container">\n<p> Same as (1) except that the behavior is as if the POSIX lstat is used (symlinks are not followed):  If <code>p</code> is a symlink, returns <code>file_status(file_type::symlink)</code>...</p>\n<pre><code>file_status symlink_status(const path& p);\nfile_status symlink_status(const path& p, error_code& ec) noexcept;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/status
std::experimental::filesystem::status_known	A										<section class="prog__container">\n<p>Checks if the given file status is known, Equivalent to <code>s.type(void) != file_type::none</code>.</p>\n<pre><code>bool status_known( file_status s );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/status_known
std::experimental::filesystem::temp_directory_path	A										<section class="prog__container">\n<p>Returns the directory location suitable for temporary files.</p>\n<pre><code>path temp_directory_path(void);\npath temp_directory_path( error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/fs/temp_directory_path
std::experimental::gcd	A										<section class="prog__container">\n<p>Computes the greatest common divisor of the integers <code>m</code> and <code>n</code>.</p>\n<pre><code>template&lt; class M, class N&gt;\nconstexpr std::common_type_t&lt;M, N&gt; gcd(M m, N n);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/gcd
std::experimental::pmr::get_default_resource	A										<section class="prog__container">\n<p>Gets the default memory resource pointer.</p>\n<pre><code>memory_resource* get_default_resource(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/get_default_resource
std::experimental::invocation_type	A										<section class="prog__container">\n<p>Computes the <i>invocation parameters</i> when <code>Fn</code> is called with the arguments <code>ArgTypes...</code>, as in...</p>\n<pre><code>template&lt;class&gt;\nstruct invocation_type; //undefined\ntemplate&lt;class Fn, class... ArgTypes&gt;\nstruct invocation_type&lt;Fn(ArgTypes...)&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/invocation_type
std::experimental::detected_or	A										<section class="prog__container">\n<p>The alias template <code>detected_or</code> is an alias for an unspecified class type with two public member typedefs <code>value_t</code> and <code>type</code>, which are defined as follows...</p>\n<pre><code>template&lt; class Default, template&lt;class...&gt; class Op, class... Args &gt;\nusing detected_or = /* see below */;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/is_detected
std::experimental::is_detected	A										<section class="prog__container">\n<p>The alias template <code>detected_or</code> is an alias for an unspecified class type with two public member typedefs <code>value_t</code> and <code>type</code>, which are defined as follows...</p>\n<pre><code>template&lt; template&lt;class...&gt; class Op, class... Args &gt;\nusing is_detected = /* see below */;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/is_detected
std::experimental::lcm	A										<section class="prog__container">\n<p>Computes the least common multiple of the integers <code>m</code> and <code>n</code>.</p>\n<pre><code>template&lt; class M, class N&gt;\nconstexpr std::common_type_t&lt;M, N&gt; lcm(M m, N n);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/lcm
std::experimental::make_array	A										<section class="prog__container">\n<p>Creates a std::array whose size is equal to the number of arguments and whose elements are initialized from the corresponding arguments.</p>\n<pre><code>template &lt;class D = void, class... Types&gt;\nconstexpr std::array&lt;VT /* see below */, sizeof...(Types)&gt; make_array(Types&&... t);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/make_array
std::experimental::pmr::memory_resource	A										<section class="prog__container">\n<p>The class <code>std::experimental::pmr::memory_resource</code> is an abstract interface to an unbounded set of classes encapsulating memory resources.</p>\n<pre><code>class memory_resource;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/memory_resource
std::experimental::pmr::memory_resource::allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>void* allocate(std::size_t bytes, std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/memory_resource/allocate
std::experimental::pmr::memory_resource::deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>void* deallocate(void* p, std::size_t bytes, std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/memory_resource/deallocate
std::experimental::pmr::memory_resource::do_allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>virtual void* do_allocate(std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/memory_resource/do_allocate
std::experimental::pmr::memory_resource::do_deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>virtual void* do_deallocate(void* p, std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/memory_resource/do_deallocate
std::experimental::pmr::memory_resource::is_equal	A										<section class="prog__container">\n<p>Compares <code>*this</code> for equality with <code>other</code>.</p>\n<pre><code>bool is_equal(const memory_resource& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/memory_resource/is_equal
std::experimental::pmr::memory_resource::memory_resource	A										<section class="prog__container">\n<p>1) Implicitly declared default constructor.</p>\n<pre><code>memory_resource(const memory_resource&) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/memory_resource/memory_resource
std::experimental::pmr::monotonic_buffer_resource	A										<section class="prog__container">\n<p>The class <code>std::experimental::pmr::monotonic_buffer_resource</code> is an special-purpose memory resource class that releases the allocated memory only when the resource is destroyed.</p>\n<pre><code>class monotonic_buffer_resource : public memory_resource;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/monotonic_buffer_resource
std::experimental::pmr::new_delete_resource	A										<section class="prog__container">\n<p>Returns a pointer to a <code>memory_resource</code> that uses the global operator new and operator delete to allocate memory.</p>\n<pre><code>memory_resource* new_delete_resource(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/new_delete_resource
std::experimental::not_fn	A										<section class="prog__container">\n<p>Creates a forwarding call wrapper that returns the complement of the callable object it holds.</p>\n<pre><code>template&lt; class F&gt;\n/*unspecified*/ not_fn( F&& f );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/not_fn
std::experimental::observer_ptr	A										<section class="prog__container">\n<p><code>std::experimental::observer_ptr</code> is a non-owning pointer, or <i>observer</i>.</p>\n<pre><code>template&lt; class W &gt;\nclass observer_ptr;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/observer_ptr
std::experimental::optional	A										<section class="prog__container">\n<p>The class template <code>std::experimental::optional</code> manages an <i>optional</i> contained value, i.e. a value that may or may not be present.</p>\n<pre><code>template&lt; class T &gt;\nclass optional;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional
std::experimental::optional::emplace	A										<section class="prog__container">\n<p>Constructs the contained value in-place.</p>\n<pre><code>template&lt; class... Args &gt; \nvoid emplace( Args&&... args );</code></pre><pre><code>template&lt; class U, class... Args &gt; \nvoid emplace( std::initializer_list&lt;U&gt; ilist, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/emplace
std::experimental::make_optional	A										<section class="prog__container">\n<p>Creates an optional object from <code>value</code>.</p>\n<pre><code>template&lt; class T &gt; \nconstexpr optional&lt;typename std::decay&lt;T&gt;::type&gt; \n    make_optional( T&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/make_optional
std::experimental::optional::operator*	A										<section class="prog__container">\n<p>Accesses the contained value.</p>\n<pre><code>constexpr const T& operator*(void) const&;</code></pre><pre><code>constexpr T& operator*(void) &;</code></pre><pre><code>constexpr const T&& operator*(void) const&&;</code></pre><pre><code>constexpr T&& operator*(void) &&;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/operator*
std::experimental::optional::operator->	A										<section class="prog__container">\n<p>Accesses the contained value.</p>\n<pre><code>constexpr const T* operator-&gt;(void) const;</code></pre><pre><code>constexpr T* operator-&gt;(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/operator*
std::experimental::optional::operator=	A										<section class="prog__container">\n<p>Replaces contents of <code>*this</code> with the contents of <code>other</code>...</p>\n<pre><code>optional& operator=( std::experimental::nullopt_t );</code></pre><pre><code>optional& operator=( const optional& other );</code></pre><pre><code>optional& operator=( optional&& other );</code></pre><pre><code>template&lt; class U &gt; \noptional& operator=( U&& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/operator=
std::experimental::optional::operator bool	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> contains a value.</p>\n<pre><code>constexpr explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/operator_bool
std::experimental::optional::optional	A										<section class="prog__container">\n<p>Constructs a new <code>optional</code> object.</p>\n<pre><code>constexpr optional(void);\nconstexpr optional( std::experimental::nullopt_t );</code></pre><pre><code>optional( const optional& other );</code></pre><pre><code>optional( optional&& other );</code></pre><pre><code>constexpr optional( const T& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/optional
std::experimental::optional::swap	A										<section class="prog__container">\n<p>Swaps the contents with those of <code>other</code>.</p>\n<pre><code>void swap( optional& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/swap
std::experimental::optional::value	A										<section class="prog__container">\n<p>Returns the contained value.</p>\n<pre><code>constexpr T& value(void) &;\nconstexpr const T & value(void) const &;</code></pre><pre><code>constexpr T&& value(void) &&;\nconstexpr const T&& value(void) const &&;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/value
std::experimental::optional::value_or	A										<section class="prog__container">\n<p>Returns the contained value if <code>*this</code> has a value, otherwise returns <code>default_value</code>.</p>\n<pre><code>template&lt; class U &gt; \nconstexpr T value_or( U&& default_value ) const&;</code></pre><pre><code>template&lt; class U &gt; \nconstexpr T value_or( U&& default_value ) &&;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/optional/value_or
std::experimental::ostream_joiner	A										<section class="prog__container">\n<p><code>std::experimental::ostream_joiner</code> is a single-pass <code>OutputIterator</code> that writes successive objects into the std::basic_ostream object for which it was constructed, using...</p>\n<pre><code>template&lt; class DelimT,\n          class CharT = char,\n          class Traits = std::char_traits&lt;CharT&gt;&gt;\nclass ostream_joiner;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/ostream_joiner
std::experimental::pmr::polymorphic_allocator	A										<section class="prog__container">\n<p>The class template <code>std::experimental::pmr::polymorphic_allocator</code> is an <code>Allocator</code> whose allocation behavior depends on the memory resource it is constructed with.</p>\n<pre><code>template&lt; class T &gt;\nclass polymorphic_allocator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/polymorphic_allocator
std::experimental::propagate_const	A										<section class="prog__container">\n<p><code>std::experimental::propagate_const</code> is a const-propagating wrapper for pointers and pointer-like objects.</p>\n<pre><code>template&lt;class T&gt;\nclass propagate_const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/propagate_const
std::experimental::randint	A										<section class="prog__container">\n<p>Generates a random integer in the closed interval <code>[a, b]</code>.</p>\n<pre><code>template &lt;class IntType&gt;\nIntType randint(IntType a, IntType b);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/randint
std::experimental::reseed	A										<section class="prog__container">\n<p>Reseeds the per-thread random number engine and any std::uniform_int_distribution instances used by randint.</p>\n<pre><code>void reseed(void);</code></pre><pre><code>void reseed(std::default_random_engine::result_type value);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/reseed
std::experimental::pmr::resource_adaptor	A										<section class="prog__container">\n<p>The alias template <code>resource_adaptor</code> adapts the allocator type <code>Allocator</code> with a <code>memory_resource</code> interface.</p>\n<pre><code>template &lt; class Alloc &gt;\nclass resource_adaptor_imp : public memory_resource; // for exposition only\ntemplate &lt; class Allocator &gt;\nusing resource_adaptor = resource_adaptor_imp&lt;\n                             typename std::allocator_traits&lt;Allocator&gt;::\n                             template rebind_alloc&lt;char&gt;&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/resource_adaptor
std::experimental::sample	A										<section class="prog__container">\n<p>Selects <code>n</code> elements from the sequence [first; last) such that each possible sample has equal probability of appearance, and writes those selected elements into the output iterator...</p>\n<pre><code>template&lt; class PopulationIterator, class SampleIterator,\n          class Distance, class UniformRandomBitGenerator &gt;\nSampleIterator sample( PopulationIterator first, PopulationIterator last,\n                       SampleIterator out, Distance n, \n                       UniformRandomBitGenerator&& g);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/experimental/sample
std::experimental::search	A										<section class="prog__container">\n<p>Searches the sequence [first, last) for the pattern specified in the constructor of <code>searcher</code>.</p>\n<pre><code>template&lt;class ForwardIterator, class Searcher&gt;\nForwardIterator search( ForwardIterator first, ForwardIterator last,\n                        const Searcher& searcher );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/search
std::experimental::pmr::set_default_resource	A										<section class="prog__container">\n<p>If <code>r</code> is not null, sets the default memory resource pointer to <code>r</code>; otherwise, sets the default memory resource pointer to <code>new_delete_resource(void)</code>.</p>\n<pre><code>memory_resource* set_default_resource(memory_resource* r);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/set_default_resource
std::experimental::source_location	A										<section class="prog__container">\n<p>The <code>source_location</code> class represents certain information about the source code, such as file names, line numbers, and function names.</p>\n<pre><code>struct source_location;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/source_location
std::experimental::pmr::synchronized_pool_resource	A										<section class="prog__container">\n<p>The class <code>std::experimental::pmr::synchronized_pool_resource</code> is a general-purpose memory resource class with the following properties...</p>\n<pre><code>class synchronized_pool_resource : public memory_resource;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/synchronized_pool_resource
std::experimental::to_array	A										<section class="prog__container">\n<p>Creates a std::array from the built-in array <code>a</code>.</p>\n<pre><code>template &lt;class T, std::size_t N&gt;\nconstexpr std::array&lt;std::remove_cv_t&lt;T&gt;, N&gt; to_array(T (&a)[N]);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/to_array
std::experimental::pmr::unsynchronized_pool_resource	A										<section class="prog__container">\n<p>The class <code>std::experimental::pmr::unsynchronized_pool_resource</code> is a general-purpose memory resource class with the following properties...</p>\n<pre><code>class unsynchronized_pool_resource : public memory_resource;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/experimental/unsynchronized_pool_resource
std::filesystem::absolute	A										<section class="prog__container">\n<p> Returns absolute path of <code>p</code> relative to <code>base</code> according to the following rules:  If <code>p</code> has both root name and root directory (e.</p>\n<pre><code>path absolute( const std::filesystem::path& p,\n               const std::filesystem::path& base = std::filesystem::current_path(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/absolute
std::filesystem::system_complete	A										<section class="prog__container">\n<p> Obtains the absolute path that identifies the file that the OS file opening API would access given the pathname <code>p</code>.</p>\n<pre><code>path system_complete(const std::filesystem::path& p);\npath system_complete(const std::filesystem::path& p, std::error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/absolute
std::filesystem::copy	A										<section class="prog__container">\n<p>Copies files and directories, with a variety of options...</p>\n<pre><code>void copy( const std::filesystem::path& from,\n           const std::filesystem::path& to );\nvoid copy( const std::filesystem::path& from,\n           const std::filesystem::path& to,\n           std::error_code& ec );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/filesystem/copy
std::filesystem::copy_options	A										<section class="prog__container">\n<p>This type represents available options that control the behavior of the copy(void) and copy_file(void) function.</p>\n<pre><code>enum class copy_options {\n    none = /* unspecified */,\n    skip_existing = /* unspecified */,\n    overwrite_existing = /* unspecified */,\n    update_existing = /* unspecified */,\n    recursive = /* unspecified */,\n    copy_symlinks = /* unspecified */,\n    skip_symlinks = /* unspecified */,\n    directories_only = /* unspecified */,\n    create_symlinks = /* unspecified */,\n    create_hard_links = /* unspecified */\n};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/copy_options
std::filesystem::copy_symlink	A										<section class="prog__container">\n<p>Copies a symlink to another location.</p>\n<pre><code>void copy_symlink( const std::filesystem::path& from,\n                   const std::filesystem::path& to);</code></pre><pre><code>void copy_symlink( const std::filesystem::path& from,\n                   const std::filesystem::path& to,\n                   std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/copy_symlink
std::filesystem::create_directories	A										<section class="prog__container">\n<p> Executes (1) for every element of <code>p</code> that does not already exist.</p>\n<pre><code>bool create_directories( const std::filesystem::path& p );\nbool create_directories( const std::filesystem::path& p,\n                         std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/create_directory
std::filesystem::create_hard_link	A										<section class="prog__container">\n<p>Creates a hard link <code>link</code> with its target set to <code>target</code> as if by POSIX link(void): the pathname <code>target</code> must exist.</p>\n<pre><code>void create_hard_link( const std::filesystem::path& target,\n                       const path& std::filesystem::link );\nvoid create_hard_link( const std::filesystem::path& target,\n                       const path& std::filesystem::link,\n                       std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/create_hard_link
std::filesystem::create_directory_symlink	A										<section class="prog__container">\n<p>Creates a symbolic link <code>link</code> with its target set to <code>target</code> as if by POSIX symlink(void): the pathname <code>target</code> may be invalid or non-existing.</p>\n<pre><code>void create_directory_symlink( const std::filesystem::path& target,\n                               const std::filesystem::path& link );\nvoid create_directory_symlink( const std::filesystem::path& target,\n                               const std::filesystem::path& link,\n                               std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/create_symlink
std::filesystem::create_symlink	A										<section class="prog__container">\n<p>Creates a symbolic link <code>link</code> with its target set to <code>target</code> as if by POSIX symlink(void): the pathname <code>target</code> may be invalid or non-existing.</p>\n<pre><code>void create_symlink( const std::filesystem::path& target,\n                     const std::filesystem::path& link );\nvoid create_symlink( const std::filesystem::path& target,\n                     const std::filesystem::path& link,\n                     std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/create_symlink
std::filesystem::current_path	A										<section class="prog__container">\n<p>Returns or changes the current path.</p>\n<pre><code>path current_path(void);</code></pre><pre><code>path current_path( std::error_code& ec );</code></pre><pre><code>void current_path( const std::filesystem::path& p );</code></pre><pre><code>void current_path( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/current_path
std::filesystem::directory_entry	A										<section class="prog__container">\n<p>Represents a directory entry.</p>\n<pre><code>class directory_entry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_entry
std::filesystem::directory_entry::assign	A										<section class="prog__container">\n<p>Assigns new content to the directory entry object.</p>\n<pre><code>void assign( const std::filesystem::path& p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_entry/assign
std::filesystem::directory_entry::directory_entry	A										<section class="prog__container">\n<p>Constructs a new <code>directory_entry</code> object.</p>\n<pre><code>directory_entry( const directory_entry& ) = default;</code></pre><pre><code>directory_entry( directory_entry&& ) = default;</code></pre><pre><code>explicit directory_entry( const std::filesystem::path& p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_entry/directory_entry
std::filesystem::directory_entry::operator=	A										<section class="prog__container">\n<p>Assigns another directory entry.</p>\n<pre><code>directory_entry& operator=( const directory_entry& ) = default;</code></pre><pre><code>directory_entry& operator=( directory_entry&&) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_entry/operator=
std::filesystem::directory_entry::path	A										<section class="prog__container">\n<p>Returns the full path the directory entry refers to.</p>\n<pre><code>const std::filesystem::path& path(void) const;</code></pre><pre><code>operator const std::filesystem::path& (void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_entry/path
std::filesystem::directory_entry::replace_filename	A										<section class="prog__container">\n<p>Changes the filename of the directory entry.</p>\n<pre><code>void replace_filename( const std::filesystem::path& p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_entry/replace_filename
std::filesystem::directory_entry::status	A										<section class="prog__container">\n<p> Returns status of the entry, as if determined by a  status call (symlinks are followed to their targets)...</p>\n<pre><code>std::filesystem::file_status status(void) const;\nstd::filesystem::file_status status( std::error_code& ec ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_entry/status
std::filesystem::directory_entry::symlink_status	A										<section class="prog__container">\n<p> Returns status of the entry, as if determined by a  symlink_status call (symlinks are not followed)...</p>\n<pre><code>std::filesystem::file_status symlink_status(void) const;\nstd::filesystem::file_status symlink_status( std::error_code& ec ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_entry/status
std::filesystem::directory_iterator	A										<section class="prog__container">\n<p><code>directory_iterator</code> is an <code>InputIterator</code> that iterates over the directory_entry elements of a directory (but does not visit the subdirectories).</p>\n<pre><code>class directory_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_iterator
std::filesystem::directory_iterator::directory_iterator	A										<section class="prog__container">\n<p>Constructs a new directory iterator.</p>\n<pre><code>explicit directory_iterator( const std::filesystem::path& p );</code></pre><pre><code>directory_iterator( const directory_iterator& ) = default;</code></pre><pre><code>directory_iterator( directory_iterator&& ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_iterator/directory_iterator
std::filesystem::directory_iterator::increment	A										<section class="prog__container">\n<p>Advances the iterator to the next entry.</p>\n<pre><code>directory_iterator& operator++(void)\ndirectory_iterator& increment( std::error_code& ec )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_iterator/increment
std::filesystem::directory_iterator::operator++	A										<section class="prog__container">\n<p>Advances the iterator to the next entry.</p>\n<pre><code>directory_iterator& operator++(void)\ndirectory_iterator& increment( std::error_code& ec )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_iterator/increment
std::filesystem::directory_iterator::operator*	A										<section class="prog__container">\n<p>Accesses the pointed-to directory_entry.</p>\n<pre><code>const directory_entry& operator*(void) const;\n        \nconst directory_entry* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_iterator/operator*
std::filesystem::directory_iterator::operator->	A										<section class="prog__container">\n<p>Accesses the pointed-to directory_entry.</p>\n<pre><code>const directory_entry& operator*(void) const;\n        \nconst directory_entry* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_iterator/operator*
std::filesystem::directory_options	A										<section class="prog__container">\n<p>This type represents available options that control the behavior of the directory_iterator and recursive_directory_iterator.</p>\n<pre><code>enum class directory_options {\n    none = /* unspecified */,\n    follow_directory_symlink = /* unspecified */,\n    skip_permission_denied = /* unspecified */\n};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/directory_options
std::filesystem::equivalent	A										<section class="prog__container">\n<p>Checks whether the paths <code>p1</code> and <code>p2</code> refer to the same file or directory and have the same file status as determined by status (symlinks are followed).</p>\n<pre><code>bool equivalent( const std::filesystem::path& p1,\n                 const std::filesystem::path& p2 );\nbool equivalent( const std::filesystem::path& p1,\n                 const std::filesystem::path& p2,\n                 std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/equivalent
std::filesystem::exists	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to an existing file or directory.</p>\n<pre><code>bool exists( std::filesystem::file_status s )</code></pre><pre><code>bool exists( const std::filesystem::path& p );\nbool exists( const std::filesystem::path& p, std::error_code& ec )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/exists
std::filesystem::file_size	A										<section class="prog__container">\n<p>Returns the size of the regular file <code>p</code>, determined as if by reading the <code>st_size</code> member of the structure obtained by POSIX stat (symlinks are followed)...</p>\n<pre><code>std::uintmax_t file_size( const std::filesystem::path& p );\nstd::uintmax_t file_size( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/file_size
std::filesystem::file_status	A										<section class="prog__container">\n<p>Stores information about the type and permissions of a file.</p>\n<pre><code>class file_status;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/file_status
std::filesystem::file_status::file_status	A										<section class="prog__container">\n<p>Constructs a new <code>file_status</code> object.</p>\n<pre><code>file_status( const file_status& ) = default;</code></pre><pre><code>file_status( file_status&& ) = default;</code></pre><pre><code>explicit file_status(\n  std::filesystem::file_type type = std::filesystem::file_type::none,\n  std::filesystem::perms permissions = std::filesystem::perms::unknown);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/file_status/file_status
std::filesystem::file_status::operator=	A										<section class="prog__container">\n<p>Copy- or move-assigns another file status object.</p>\n<pre><code>file_status& operator=( const file_status& other ) = default;</code></pre><pre><code>file_status& operator=( file_status&& other ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/file_status/operator=
std::filesystem::file_status::permissions	A										<section class="prog__container">\n<p>Accesses the file permissions information.</p>\n<pre><code>std::filesystem::perms permissions(void) const;</code></pre><pre><code>void permissions( std::filesystem::perms perm );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/file_status/permissions
std::filesystem::file_status::type	A										<section class="prog__container">\n<p>Accesses the file type information.</p>\n<pre><code>std::filesystem::file_type type(void) const;</code></pre><pre><code>void type( std::filesystem::file_type type );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/file_status/type
std::filesystem::file_type	A										<section class="prog__container">\n<p>Indicates a type of a file or directory a path refers to.</p>\n<pre><code>enum class file_type {\n    none = /* unspecified */,\n    not_found = /* unspecified */,\n    regular = /* unspecified */,\n    directory = /* unspecified */,\n    symlink = /* unspecified */,\n    block = /* unspecified */,\n    character = /* unspecified */,\n    fifo = /* unspecified */,\n    socket = /* unspecified */,\n    unknown = /* unspecified */,\n    /* implementation-defined */\n};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/file_type
std::filesystem::filesystem_error	A										<section class="prog__container">\n<p>The class <code>std::filesystem::filesystem_error</code> defines an exception object that is thrown on failure by the throwing overloads of the functions in the filesystem library.</p>\n<pre><code>class filesystem_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/filesystem_error
std::filesystem::filesystem_error::path1	A										<section class="prog__container">\n<p>Returns the paths that were stored in the exception object.</p>\n<pre><code>const std::filesystem::path& path1(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/filesystem_error/path
std::filesystem::filesystem_error::path2	A										<section class="prog__container">\n<p>Returns the paths that were stored in the exception object.</p>\n<pre><code>const std::filesystem::path& path2(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/filesystem_error/path
std::filesystem::filesystem_error::what	A										<section class="prog__container">\n<p>Returns the explanatory byte string that was stored in the exception object.</p>\n<pre><code>const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/filesystem_error/what
std::filesystem::hard_link_count	A										<section class="prog__container">\n<p>Returns the number of hard links for the filesystem object identified by path <code>p</code>.</p>\n<pre><code>std::uintmax_t hard_link_count( const std::filesystem::path& p );\nstd::uintmax_t hard_link_count( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/hard_link_count
std::filesystem::is_block_file	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a block special file, as if determined by the POSIX S_ISBLK .</p>\n<pre><code>bool is_block_file( std::filesystem::file_status s );</code></pre><pre><code>bool is_block_file( const std::filesystem::path& p );\nbool is_block_file( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/is_block_file
std::filesystem::is_character_file	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a character special file, as if determined by POSIX S_ISCHR.</p>\n<pre><code>bool is_character_file( std::filesystem::file_status s );</code></pre><pre><code>bool is_character_file( const std::filesystem::path& p );\nbool is_character_file( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/is_character_file
std::filesystem::is_directory	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a directory.</p>\n<pre><code>bool is_directory( std::filesystem::file_status s );</code></pre><pre><code>bool is_directory( const std::filesystem::path& p );\nbool is_directory( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/is_directory
std::filesystem::is_empty	A										<section class="prog__container">\n<p>Checks whether the given path refers to an empty file or directory.</p>\n<pre><code>bool is_empty( const std::filesystem::path& p );\nbool is_empty( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/is_empty
std::filesystem::is_fifo	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a FIFO or pipe file as if determined by POSIX S_ISFIFO.</p>\n<pre><code>bool is_fifo( std::filesystem::file_status s );</code></pre><pre><code>bool is_fifo( const std::filesystem::path& p );\nbool is_fifo( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/is_fifo
std::filesystem::is_other	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a file of type <i>other</i> type.</p>\n<pre><code>bool is_other( std::filesystem::file_status s );</code></pre><pre><code>bool is_other( const std::filesystem::path& p );\nbool is_other( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/is_other
std::filesystem::is_regular_file	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a regular file.</p>\n<pre><code>bool is_regular_file( std::filesystem::file_status s );</code></pre><pre><code>bool is_regular_file( const std::filesystem::path& p );\nbool is_regular_file( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/is_regular_file
std::filesystem::is_socket	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a named IPC socket, as if determined by the POSIX S_IFSOCK.</p>\n<pre><code>bool is_socket( std::filesystem::file_status s );</code></pre><pre><code>bool is_socket( const std::filesystem::path& p );\nbool is_socket( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/is_socket
std::filesystem::is_symlink	A										<section class="prog__container">\n<p>Checks if the given file status or path corresponds to a symbolic link, as if determined by the POSIX S_IFLNK.</p>\n<pre><code>bool is_symlink( std::filesystem::file_status s );</code></pre><pre><code>bool is_symlink( const std::filesystem::path& p );\nbool is_symlink( const std::filesystem::path& p, std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/is_symlink
std::filesystem::path	A										<section class="prog__container">\n<p>Objects of type <code>path</code> represent paths on a filesystem.</p>\n<pre><code>class path;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path
std::filesystem::path::assign	A										<section class="prog__container">\n<p>Replaces the contents to the <code>path</code> object by a new pathname constructed from the given character sequence.</p>\n<pre><code>template&lt; class Source &gt;\npath& assign( const Source& source );</code></pre><pre><code>template&lt; class InputIt &gt;\npath& assign( InputIt first, InputIt last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/assign
std::filesystem::path::begin	A										<section class="prog__container">\n<p> Returns an iterator to the first element of the path.</p>\n<pre><code>iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/begin
std::filesystem::path::end	A										<section class="prog__container">\n<p> Returns an iterator one past the last element of the path.</p>\n<pre><code>iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/begin
std::filesystem::path::clear	A										<section class="prog__container">\n<p>Clears the stored pathname.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/clear
std::filesystem::path::compare	A										<section class="prog__container">\n<p>Compares the lexical representations of the path and another path.</p>\n<pre><code>int compare( const path& p ) const;</code></pre><pre><code>int compare( const string_type& str ) const;\nint compare( std::basic_string_view&lt;value_type&gt; str ) const;</code></pre><pre><code>int compare( const value_type* s ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/compare
std::filesystem::path::concat	A										<section class="prog__container">\n<p>Concatenates the current path and the argument...</p>\n<pre><code>template&lt; class Source &gt;\npath& concat( const Source& source );</code></pre><pre><code>template&lt; class InputIt &gt;\npath& concat( InputIterator first, InputIterator last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/concat
std::filesystem::path::operator+=	A										<section class="prog__container">\n<p>Concatenates the current path and the argument...</p>\n<pre><code>path& operator+=( const path& p );</code></pre><pre><code>path& operator+=( const string_type& str );\npath& operator+=( std::basic_string_view&lt;value_type&gt; str );</code></pre><pre><code>path& operator+=( const value_type* ptr );</code></pre><pre><code>path& operator+=( value_type x );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/concat
std::filesystem::path::empty	A										<section class="prog__container">\n<p>Checks if the path is empty.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/empty
std::filesystem::path::extension	A										<section class="prog__container">\n<p>Returns the extension of the filename component of the path <code>*this</code>.</p>\n<pre><code>path extension(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/extension
std::filesystem::path::filename	A										<section class="prog__container">\n<p>Returns the filename component of the path.</p>\n<pre><code>path filename(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/filename
std::filesystem::path::generic_string	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt;\n          class Alloc = std::allocator&lt;CharT&gt; &gt;\nstd::basic_string&lt;CharT,Traits,Alloc&gt;\n    generic_string( const Allocator& a = Allocator(void) ) const;</code></pre><pre><code>std::string generic_string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/generic_string
std::filesystem::path::generic_u16string	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>std::u16string generic_u16string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/generic_string
std::filesystem::path::generic_u32string	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>std::u32string generic_u32string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/generic_string
std::filesystem::path::generic_u8string	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>std::u8string generic_u8string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/generic_string
std::filesystem::path::generic_wstring	A										<section class="prog__container">\n<p>Returns the internal pathname in generic pathname format, converted to specific string type.</p>\n<pre><code>std::wstring generic_wstring(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/generic_string
std::filesystem::path::has_extension	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_extension(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/has_path
std::filesystem::path::has_filename	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_filename(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/has_path
std::filesystem::path::has_parent_path	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_parent_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/has_path
std::filesystem::path::has_relative_path	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_relative_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/has_path
std::filesystem::path::has_root_directory	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_root_directory(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/has_path
std::filesystem::path::has_root_name	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_root_name(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/has_path
std::filesystem::path::has_root_path	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_root_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/has_path
std::filesystem::path::has_stem	A										<section class="prog__container">\n<p>Checks whether the path contains the corresponding path element.</p>\n<pre><code>bool has_stem(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/has_path
std::filesystem::path::is_absolute	A										<section class="prog__container">\n<p>Checks whether the path is absolute or relative.</p>\n<pre><code>bool is_absolute(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/is_absrel
std::filesystem::path::is_relative	A										<section class="prog__container">\n<p>Checks whether the path is absolute or relative.</p>\n<pre><code>bool is_relative(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/is_absrel
std::filesystem::path::lexically_normal	A										<section class="prog__container">\n<p> Returns <code>*this</code> converted to normal form (no redundant <i>dot</i> or <i>dot-dot</i> elements, and if the last element is a non-root directory separator, <i>dot</i> is added)...</p>\n<pre><code>path lexically_normal(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/lexically_normal
std::filesystem::path::lexically_proximate	A										<section class="prog__container">\n<p> If the value of <code>lexically_relative(base)</code> is not an empty path, return it.</p>\n<pre><code>path lexically_proximate(const path& base) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/lexically_normal
std::filesystem::path::lexically_relative	A										<section class="prog__container">\n<p> Returns <code>*this</code> made relative to <code>base</code>.</p>\n<pre><code>path lexically_relative(const path& base) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/lexically_normal
std::filesystem::path::make_preferred	A										<section class="prog__container">\n<p>Converts all directory separators in path to the preferred directory separator.</p>\n<pre><code>path& make_preferred(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/make_preferred
std::filesystem::path::c_str	A										<section class="prog__container">\n<p>Accesses the native path name as a character string.</p>\n<pre><code>const value_type* c_str(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/native
std::filesystem::path::native	A										<section class="prog__container">\n<p>Accesses the native path name as a character string.</p>\n<pre><code>const string_type& native(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/native
std::filesystem::path::parent_path	A										<section class="prog__container">\n<p>Returns the path to the parent directory.</p>\n<pre><code>path parent_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/parent_path
std::filesystem::path::path	A										<section class="prog__container">\n<p>Constructs a new <code>path</code> object.</p>\n<pre><code>path( const path& p );</code></pre><pre><code>path( path&& p );</code></pre><pre><code>template&lt; class Source &gt;\npath( const Source& source );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/path
std::filesystem::path::relative_path	A										<section class="prog__container">\n<p>Returns path relative to root path.</p>\n<pre><code>path relative_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/relative_path
std::filesystem::path::remove_filename	A										<section class="prog__container">\n<p>Removes a single filename component.</p>\n<pre><code>path& remove_filename(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/remove_filename
std::filesystem::path::replace_extension	A										<section class="prog__container">\n<p>Replaces the extension with <code>replacement</code> or removes it when the default value of <code>replacement</code> is used.</p>\n<pre><code>path& replace_extension( const path& replacement = path(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/replace_extension
std::filesystem::path::replace_filename	A										<section class="prog__container">\n<p>Replaces a single filename component with <code>replacement</code>.</p>\n<pre><code>path& replace_filename( const path& replacement );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/replace_filename
std::filesystem::path::root_directory	A										<section class="prog__container">\n<p>Returns the root directory of the path.</p>\n<pre><code>path root_directory(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/root_directory
std::filesystem::path::root_name	A										<section class="prog__container">\n<p>Returns the root name of the path.</p>\n<pre><code>path root_name(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/root_name
std::filesystem::path::root_path	A										<section class="prog__container">\n<p>Returns the root path of the path.</p>\n<pre><code>path root_path(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/root_path
std::filesystem::path::stem	A										<section class="prog__container">\n<p>Returns the filename identified by the path stripped of its extension.</p>\n<pre><code>path stem(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/stem
std::filesystem::path::string	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt;\n          class Alloc = std::allocator&lt;CharT&gt; &gt;\nstd::basic_string&lt;CharT,Traits,Alloc&gt;\n    string( const Alloc& a = Allocator(void) ) const;</code></pre><pre><code>std::string string(void) const;</code></pre><pre><code>std::string u8string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/string
std::filesystem::path::u16string	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>std::u16string u16string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/string
std::filesystem::path::u32string	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>std::u32string u32string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/string
std::filesystem::path::u8string	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>std::string u8string(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/string
std::filesystem::path::wstring	A										<section class="prog__container">\n<p>Returns the internal pathname in native pathname format, converted to specific string type.</p>\n<pre><code>std::wstring wstring(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/string
std::filesystem::path::swap	A										<section class="prog__container">\n<p>Swaps the contents of <code>*this</code> and <code>other</code>.</p>\n<pre><code>void swap( path& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/swap
std::filesystem::u8path	A										<section class="prog__container">\n<p>Constructs a path <code>p</code> from a UTF-8 encoded sequence of <code>char</code>s, supplied either as an std::string, or as std::string_view, or as a null-terminated multibyte string, or as a...</p>\n<pre><code>template&lt; class Source &gt;\npath u8path( const Source& source );</code></pre><pre><code>template&lt; class InputIt &gt;\npath u8path( InputIt first, InputIt last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/path/u8path
std::filesystem::permissions	A										<section class="prog__container">\n<p>Changes access permissions of the file to which <code>p</code> resolves, as if by POSIX fchmodat.</p>\n<pre><code>void permissions(const std::filesystem::path& p,\n                 std::filesystem::perms prms);\nvoid permissions(const std::filesystem::path& p,\n                 std::filesystem::perms prms,\n                 std::error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/permissions
std::filesystem::perms	A										<section class="prog__container">\n<p>This type represents file access permissions.</p>\n<pre><code>enum class perms;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/perms
std::filesystem::read_symlink	A										<section class="prog__container">\n<p>If the path <code>p</code> refers to a symbolic link, returns a new path object which refers to the target of that symbolic link.</p>\n<pre><code>std::filesystem::path read_symlink(const std::filesystem::path& p);\nstd::filesystem::path read_symlink(const std::filesystem::path& p,\n                                   std::error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/read_symlink
std::filesystem::recursive_directory_iterator	A										<section class="prog__container">\n<p><code>recursive_directory_iterator</code> is an <code>InputIterator</code> that iterates over the directory_entry elements of a directory, and, recursively, over the entries of all subdirectories.</p>\n<pre><code>class recursive_directory_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator
std::filesystem::recursive_directory_iterator::depth	A										<section class="prog__container">\n<p>Returns the number of directories from the starting directory to the currently iterated directory, i.e. the current depth of the directory hierarchy.</p>\n<pre><code>int depth(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/depth
std::filesystem::recursive_directory_iterator::disable_recursion_pending	A										<section class="prog__container">\n<p>Disables recursion to the currently referred subdirectory, if any.</p>\n<pre><code>void disable_recursion_pending(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/disable_recursion_pending
std::filesystem::recursive_directory_iterator::increment	A										<section class="prog__container">\n<p>Advances the iterator to the next entry.</p>\n<pre><code>recursive_directory_iterator& increment( std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/increment
std::filesystem::recursive_directory_iterator::operator++	A										<section class="prog__container">\n<p>Advances the iterator to the next entry.</p>\n<pre><code>recursive_directory_iterator& operator++(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/increment
std::filesystem::recursive_directory_iterator::operator*	A										<section class="prog__container">\n<p>Accesses the pointed-to directory_entry...</p>\n<pre><code>const std::filesystem::directory_entry& operator*(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/operator*
std::filesystem::recursive_directory_iterator::operator->	A										<section class="prog__container">\n<p>Accesses the pointed-to directory_entry...</p>\n<pre><code>const std::filesystem::directory_entry* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/operator*
std::filesystem::recursive_directory_iterator::operator=	A										<section class="prog__container">\n<p>Assigns a recursive directory iterator.</p>\n<pre><code>recursive_directory_iterator& operator=( const recursive_directory_iterator& ) = default;</code></pre><pre><code>recursive_directory_iterator& operator=( recursive_directory_iterator&& ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/operator=
std::filesystem::recursive_directory_iterator::options	A										<section class="prog__container">\n<p>Returns the options that affect the directory iteration.</p>\n<pre><code>directory_options options(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/options
std::filesystem::recursive_directory_iterator::pop	A										<section class="prog__container">\n<p>Moves the iterator one level up in the directory hierarchy.</p>\n<pre><code>void pop(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/pop
std::filesystem::recursive_directory_iterator::recursion_pending	A										<section class="prog__container">\n<p>Returns <code>true</code> if the next increment will cause the directory currently referred to by <code>*this</code> to be iterated into.</p>\n<pre><code>bool recursion_pending(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/recursion_pending
std::filesystem::recursive_directory_iterator::recursive_directory_iterator	A										<section class="prog__container">\n<p>Contructs new recursive directory iterator.</p>\n<pre><code>recursive_directory_iterator( const recursive_directory_iterator& ) = default;</code></pre><pre><code>recursive_directory_iterator( recursive_directory_iterator&& ) = default;</code></pre><pre><code>explicit recursive_directory_iterator(\n  const std::filesystem::path& p,\n  std::filesystem::directory_options options = std::filesystem::directory_options::none );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/recursive_directory_iterator/recursive_directory_iterator
std::filesystem::remove	A										<section class="prog__container">\n<p> The file or empty directory identified by the path <code>p</code> is deleted as if by the POSIX remove.</p>\n<pre><code>bool remove(const std::filesystem::path& p);\nbool remove(const std::filesystem::path& p, std::error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/remove
std::filesystem::remove_all	A										<section class="prog__container">\n<p> Deletes the contents of <code>p</code> (if it is a directory) and the contents of all its subdirectories, recursively, then deletes <code>p</code> itself as if by repeatedly applying the POSIX...</p>\n<pre><code>std::uintmax_t remove_all(const std::filesystem::path& p);\nstd::uintmax_t remove_all(const std::filesystem::path& p, std::error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/remove
std::filesystem::rename	A										<section class="prog__container">\n<p>Moves or renames the filesystem object identified by <code>old_p</code> to <code>new_p</code> as if by the POSIX rename...</p>\n<pre><code>void rename(const std::filesystem::path& old_p,\n            const std::filesystem::path& new_p);\nvoid rename(const std::filesystem::path& old_p,\n            const std::filesystem::path& new_p,\n            std::error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/rename
std::filesystem::resize_file	A										<section class="prog__container">\n<p>Changes the size of the regular file named by <code>p</code> as if by POSIX truncate: if the file size was previously larger than <code>new_size</code>, the remainder of the file is discarded.</p>\n<pre><code>void resize_file(const std::filesystem::path& p,\n                 std::uintmax_t new_size);\nvoid resize_file(const std::filesystem::path& p,\n                 std::uintmax_t new_size,\n                 std::error_code& ec);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/resize_file
std::filesystem::space	A										<section class="prog__container">\n<p>Determines the information about the filesystem on which the pathname <code>p</code> is located, as if by POSIX statvfs...</p>\n<pre><code>std::filesystem::space_info space(const std::filesystem::path& p)\nstd::filesystem::space_info space(const std::filesystem::path& p,\n                                  std::error_code& ec)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/space
std::filesystem::space_info	A										<section class="prog__container">\n<p>Represents the filesystem information as determined by space...</p>\n<pre><code>struct space_info {\n    std::uintmax_t capacity;\n    std::uintmax_t free; \n    std::uintmax_t available; \n};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/space_info
std::filesystem::status	A										<section class="prog__container">\n<p> Determines the type and attributes of the filesystem object identified by <code>p</code> as if by POSIX stat (symlinks are followed to their targets).</p>\n<pre><code>std::filesystem::file_status status(const std::filesystem::path& p)\nstd::filesystem::file_status status(const std::filesystem::path& p,\n                                    std::error_code& ec)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/status
std::filesystem::symlink_status	A										<section class="prog__container">\n<p> Same as (1) except that the behavior is as if the POSIX lstat is used (symlinks are not followed):  If <code>p</code> is a symlink, returns <code>file_status(file_type::symlink)</code>...</p>\n<pre><code>std::filesystem::file_status symlink_status(const std::filesystem::path& p)\nstd::filesystem::file_status symlink_status(const std::filesystem::path& p,\n                                            std::error_code& ec)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/status
std::filesystem::status_known	A										<section class="prog__container">\n<p>Checks if the given file status is known, Equivalent to <code>s.type(void) != file_type::none</code>.</p>\n<pre><code>bool status_known( std::filesystem::file_status s );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/status_known
std::filesystem::temp_directory_path	A										<section class="prog__container">\n<p>Returns the directory location suitable for temporary files.</p>\n<pre><code>path temp_directory_path(void);\npath temp_directory_path( std::error_code& ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/filesystem/temp_directory_path
std::basic_filebuf	A										<section class="prog__container">\n<p><code>std::basic_filebuf</code> is a std::basic_streambuf whose associated character sequence is a file.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;\n&gt; class basic_filebuf : public std::basic_streambuf&lt;CharT, Traits&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf
std::basic_filebuf::basic_filebuf	A										<section class="prog__container">\n<p>Contructs new <code>std::basic_filebuf</code> object.</p>\n<pre><code>basic_filebuf( std::basic_filebuf&& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/basic_filebuf
std::basic_filebuf::close	A										<section class="prog__container">\n<p>If a put area exist (e.</p>\n<pre><code>std::basic_filebuf&lt;CharT, Traits&gt;* close(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/close
std::basic_filebuf::imbue	A										<section class="prog__container">\n<p>Changes the associated locale so that all characters inserted or extracted after this call (and until another call to <code>imbue(void)</code>) are converted using the std::codecvt facet of...</p>\n<pre><code>protected:\nvirtual void imbue( const std::locale& loc )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/imbue
std::basic_filebuf::is_open	A										<section class="prog__container">\n<p>Returns <code>true</code> if the most recent call to open(void) succeeded and there has been no call to close(void) since then.</p>\n<pre><code>bool is_open(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/is_open
std::basic_filebuf::open	A										<section class="prog__container">\n<p>Opens the file with the given name - either <code>s</code> or <code>str.c_str(void)</code>.</p>\n<pre><code>std::basic_filebuf&lt;CharT, Traits&gt;* open( const char* s, std::ios_base::openmode mode )</code></pre><pre><code>std::basic_filebuf&lt;CharT, Traits&gt;* open( const std::string& str, std::ios_base::openmode mode )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/open
std::basic_filebuf::operator=	A										<section class="prog__container">\n<p>Assigns another <code>basic_filebuf</code> object.</p>\n<pre><code>std::basic_filebuf& operator=( std::basic_filebuf&& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/operator=
std::basic_filebuf::overflow	A										<section class="prog__container">\n<p>Writes some data from the put area to the associated character sequence (to the file).</p>\n<pre><code>protected:\nvirtual int_type overflow ( int_type c = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/overflow
std::basic_filebuf::pbackfail	A										<section class="prog__container">\n<p>This protected virtual function is called by the public functions basic_streambuf::sungetc and basic_streambuf::sputbackc (which, in turn, are called by basic_istream::unget and...</p>\n<pre><code>protected:\nvirtual int_type pbackfail( int_type c = Traits::eof(void) )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/pbackfail
std::basic_filebuf::seekoff	A										<section class="prog__container">\n<p>Repositions the file pointer, if possible, to the position that corresponds to exactly <code>off</code> characters from beginning, end, or current position of the file (depending on the value of...</p>\n<pre><code>protected:\nvirtual pos_type seekoff( off_type off,\n                          std::ios_base::seekdir dir,\n                          std::ios_base::openmode which = std::ios_base::in | std::ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/seekoff
std::basic_filebuf::seekpos	A										<section class="prog__container">\n<p>Repositions the file pointer, if possible, to the position indicated by <code>sp</code>.</p>\n<pre><code>protected:\nvirtual pos_type seekpos( pos_type sp,\n                          std::ios_base::openmode which = std::ios_base::in | std::ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/seekpos
std::basic_filebuf::setbuf	A										<section class="prog__container">\n<p>If <code>s</code> is a null pointer and <code>n</code> is zero, the filebuf becomes <i>unbuffered</i> for output, meaning <code>pbase(void)</code> and <code>pptr(void)</code> are null and any output is...</p>\n<pre><code>protected:\nvirtual std::basic_streambuf&lt;CharT, Traits&gt;* setbuf( char_type* s, std::streamsize n )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/setbuf
std::basic_filebuf::showmanyc	A										<section class="prog__container">\n<p>If implemented, returns the number of characters left to read from the file.</p>\n<pre><code>protected:\nvirtual std::streamsize showmanyc(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/showmanyc
std::basic_filebuf::swap	A										<section class="prog__container">\n<p>Swaps the state and the contents of <code>*this</code> and <code>rhs</code>.</p>\n<pre><code>void swap( std::basic_filebuf& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/swap
std::basic_filebuf::sync	A										<section class="prog__container">\n<p>If a put area exists (e.</p>\n<pre><code>protected:\nvirtual int sync(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/sync
std::basic_filebuf::uflow	A										<section class="prog__container">\n<p>Behaves like the underflow(void), except that if underflow(void) succeeds (does not return <code>Traits::eof(void)</code>), then advances the next pointer for the get area.</p>\n<pre><code>protected:\nvirtual int_type uflow(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/uflow
std::basic_filebuf::underflow	A										<section class="prog__container">\n<p>Reads more data into the input area.</p>\n<pre><code>protected:\nvirtual int_type underflow(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_filebuf/underflow
std::basic_fstream	A										<section class="prog__container">\n<p>The class template <code>basic_fstream</code> implements high-level input/output operations on file based streams.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;\n&gt; class basic_fstream : public std::basic_iostream&lt;CharT, Traits&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_fstream
std::basic_fstream::basic_fstream	A										<section class="prog__container">\n<p>Constructs new file stream.</p>\n<pre><code>explicit basic_fstream( const char* filename,\n               ios_base::openmode mode = ios_base::in|ios_base::out );</code></pre><pre><code>explicit basic_fstream( const string& filename,                                  \n               ios_base::openmode mode = ios_base::in|ios_base::out );</code></pre><pre><code>basic_fstream( basic_fstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_fstream/basic_fstream
std::basic_fstream::close	A										<section class="prog__container">\n<p>Closes the associated file.</p>\n<pre><code>void close(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_fstream/close
std::basic_fstream::is_open	A										<section class="prog__container">\n<p>Checks if the file stream has an associated file.</p>\n<pre><code>bool is_open(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_fstream/is_open
std::basic_fstream::open	A										<section class="prog__container">\n<p>Opens and associates the file with name <code>filename</code> with the file stream.</p>\n<pre><code>void open( const char *filename,\n           ios_base::openmode mode = ios_base::in|ios_base::out );</code></pre><pre><code>void open( const std::string &filename,                                  \n           ios_base::openmode mode = ios_base::in|ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_fstream/open
std::basic_fstream::operator=	A										<section class="prog__container">\n<p>Move assigns the file stream <code>other</code> to <code>*this</code>, effectively move-assigning both the std::basic_iostream base class and the associated std::basic_filebuf.</p>\n<pre><code>basic_fstream& operator=( basic_fstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_fstream/operator=
std::basic_fstream::rdbuf	A										<section class="prog__container">\n<p>Returns pointer to the underlying raw file device object.</p>\n<pre><code>std::basic_filebuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_fstream/rdbuf
std::basic_fstream::swap	A										<section class="prog__container">\n<p>Exchanges the state of the stream with those of <code>other</code>.</p>\n<pre><code>void swap( basic_fstream& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_fstream/swap
std::basic_ifstream	A										<section class="prog__container">\n<p>The class template <code>basic_ifstream</code> implements high-level input operations on file based streams.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;\n&gt; class basic_ifstream : public std::basic_istream&lt;CharT, Traits&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ifstream
std::basic_ifstream::basic_ifstream	A										<section class="prog__container">\n<p>Constructs new file stream.</p>\n<pre><code>explicit basic_ifstream( const char* filename,\n                ios_base::openmode mode = ios_base::in );</code></pre><pre><code>explicit basic_ifstream( const string& filename,                                  \n                ios_base::openmode mode = ios_base::in );</code></pre><pre><code>basic_ifstream( basic_ifstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ifstream/basic_ifstream
std::basic_ifstream::close	A										<section class="prog__container">\n<p>Closes the associated file.</p>\n<pre><code>void close(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ifstream/close
std::basic_ifstream::is_open	A										<section class="prog__container">\n<p>Checks if the file stream has an associated file.</p>\n<pre><code>bool is_open(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ifstream/is_open
std::basic_ifstream::open	A										<section class="prog__container">\n<p>Opens and associates the file with name <code>filename</code> with the file stream.</p>\n<pre><code>void open( const char *filename,\n           ios_base::openmode mode = ios_base::in );</code></pre><pre><code>void open( const std::string &filename,                                  \n           ios_base::openmode mode = ios_base::in );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ifstream/open
std::basic_ifstream::operator=	A										<section class="prog__container">\n<p>Move assigns the file stream <code>other</code> to <code>*this</code>, effectively move-assigning both the std::basic_istream base class and the associated std::basic_filebuf.</p>\n<pre><code>basic_ifstream& operator=( basic_ifstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ifstream/operator=
std::basic_ifstream::rdbuf	A										<section class="prog__container">\n<p>Returns pointer to the underlying raw file device object.</p>\n<pre><code>std::basic_filebuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ifstream/rdbuf
std::basic_ifstream::swap	A										<section class="prog__container">\n<p>Exchanges the state of the stream with those of <code>other</code>.</p>\n<pre><code>void swap( basic_ifstream& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ifstream/swap
std::basic_ios	A										<section class="prog__container">\n<p>The class <code>std::basic_ios</code> provides facilities for interfacing with objects that have std::basic_streambuf interface.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;\n&gt; class basic_ios : public std::ios_base</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios
std::basic_fstream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_ifstream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_ios::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_iostream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_istream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_istringstream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_ofstream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_ostream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_ostringstream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_stringstream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::istrstream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::ostrstream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::strstream::bad	A										<section class="prog__container">\n<p>Returns <code>true</code> if non-recoverable error has occurred on the associated stream.</p>\n<pre><code>bool bad(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/bad
std::basic_ios::basic_ios	A										<section class="prog__container">\n<p>Constructs new <code>basic_ios</code> object.</p>\n<pre><code>protected:\nbasic_ios(void);</code></pre><pre><code>public:\nexplicit basic_ios( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/basic_ios
std::basic_fstream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_ifstream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_ios::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_iostream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_istream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_istringstream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_ofstream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_ostream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_ostringstream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_stringstream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::istrstream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::ostrstream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::strstream::clear	A										<section class="prog__container">\n<p>Sets the stream error state flags by assigning them the value of <code>state</code>.</p>\n<pre><code>void clear( std::ios_base::iostate state = std::ios_base::goodbit );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/clear
std::basic_fstream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_ifstream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_ios::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_iostream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_istream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_istringstream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_ofstream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_ostream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_ostringstream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_stringstream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::istrstream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::ostrstream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::strstream::copyfmt	A										<section class="prog__container">\n<p>Copies the state of the stream <code>other</code> into <code>*this</code>.</p>\n<pre><code>basic_ios& copyfmt(const basic_ios& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/copyfmt
std::basic_fstream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_ifstream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_ios::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_iostream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_istream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_istringstream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_ofstream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_ostream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_ostringstream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_stringstream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::istrstream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::ostrstream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::strstream::eof	A										<section class="prog__container">\n<p>Returns <code>true</code> if the associated stream has reached end-of-file.</p>\n<pre><code>bool eof(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/eof
std::basic_fstream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_ifstream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_ios::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_iostream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_istream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_istringstream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_ofstream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_ostream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_ostringstream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_stringstream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::istrstream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::ostrstream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::strstream::exceptions	A										<section class="prog__container">\n<p>Gets and sets the exception mask of the stream.</p>\n<pre><code>std::ios_base::iostate exceptions(void) const;</code></pre><pre><code>void exceptions( std::ios_base::iostate except );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/exceptions
std::basic_fstream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_ifstream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_ios::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_iostream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_istream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_istringstream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_ofstream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_ostream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_ostringstream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_stringstream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::istrstream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::ostrstream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::strstream::fail	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool fail(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fail
std::basic_fstream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_ifstream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_ios::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_iostream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_istream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_istringstream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_ofstream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_ostream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_ostringstream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_stringstream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::istrstream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::ostrstream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::strstream::fill	A										<section class="prog__container">\n<p>Manages the fill character used to pad the output conversions to the specified field width.</p>\n<pre><code>CharT fill(void) const;</code></pre><pre><code>CharT fill( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/fill
std::basic_fstream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_ifstream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_ios::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_iostream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_istream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_istringstream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_ofstream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_ostream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_ostringstream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_stringstream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::istrstream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::ostrstream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::strstream::good	A										<section class="prog__container">\n<p>Returns <code>true</code> if the the most recent I/O operation on the stream completed successfully.</p>\n<pre><code>bool good(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/good
std::basic_fstream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_ifstream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_ios::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_iostream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_istream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_istringstream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_ofstream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_ostream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_ostringstream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_stringstream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::istrstream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::ostrstream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::strstream::imbue	A										<section class="prog__container">\n<p>Replaces the current locale.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/imbue
std::basic_fstream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_ifstream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_ios::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_iostream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_istream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_istringstream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_ofstream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_ostream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_ostringstream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_stringstream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::istrstream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::ostrstream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::strstream::init	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> and initializes the internal state.</p>\n<pre><code>protected:\nvoid init( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/init
std::basic_fstream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_ifstream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_ios::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_iostream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_istream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_istringstream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_ofstream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_ostream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_ostringstream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_stringstream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::istrstream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::ostrstream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::strstream::move	A										<section class="prog__container">\n<p>Replaces the current state with that of <code>other</code>, except for the associated <code>rdbuf</code>.</p>\n<pre><code>protected:\nvoid move( basic_ios& other );</code></pre><pre><code>protected:\nvoid move( basic_ios&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/move
std::basic_fstream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_ifstream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_ios::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_iostream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_istream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_istringstream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_ofstream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_ostream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_ostringstream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_stringstream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::istrstream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::ostrstream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::strstream::narrow	A										<section class="prog__container">\n<p>Converts a current locale-specific character <code>c</code> to its standard equivalent.</p>\n<pre><code>char narrow( char_type c, char dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/narrow
std::basic_fstream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_ifstream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_ios::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_iostream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_istream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_istringstream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_ofstream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_ostream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_ostringstream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_stringstream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::istrstream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::ostrstream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::strstream::operator!	A										<section class="prog__container">\n<p>Returns <code>true</code> if an error has occurred on the associated stream.</p>\n<pre><code>bool operator!(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator!
std::basic_fstream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_ifstream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_ios::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_iostream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_istream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_istringstream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_ofstream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_ostream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_ostringstream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_stringstream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::istrstream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::ostrstream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::strstream::operator bool	A										<section class="prog__container">\n<p>Checks whether the stream has no errors.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/operator_bool
std::basic_fstream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_ifstream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_ios::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_iostream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_istream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_istringstream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_ofstream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_ostream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_ostringstream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_stringstream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::istrstream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::ostrstream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::strstream::rdbuf	A										<section class="prog__container">\n<p>Manages the associated stream buffer.</p>\n<pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre><pre><code>std::basic_streambuf&lt;CharT, Traits&gt;* rdbuf( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdbuf
std::basic_fstream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_ifstream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_ios::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_iostream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_istream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_istringstream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_ofstream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_ostream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_ostringstream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_stringstream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::istrstream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::ostrstream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::strstream::rdstate	A										<section class="prog__container">\n<p>Returns the current stream error state.</p>\n<pre><code>iostate rdstate(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/rdstate
std::basic_fstream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_ifstream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_ios::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_iostream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_istream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_istringstream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_ofstream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_ostream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_ostringstream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_stringstream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::istrstream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::ostrstream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::strstream::set_rdbuf	A										<section class="prog__container">\n<p>Sets the associated stream buffer to <code>sb</code> without clearing the error state.</p>\n<pre><code>protected:\nvoid set_rdbuf( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/set_rdbuf
std::basic_fstream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_ifstream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_ios::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_iostream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_istream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_istringstream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_ofstream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_ostream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_ostringstream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_stringstream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::istrstream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::ostrstream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::strstream::setstate	A										<section class="prog__container">\n<p>Sets the stream error flags <code>state</code> in addition to currently set flags.</p>\n<pre><code>void setstate( iostate state );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/setstate
std::basic_fstream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_ifstream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_ios::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_iostream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_istream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_istringstream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_ofstream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_ostream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_ostringstream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_stringstream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::istrstream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::ostrstream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::strstream::swap	A										<section class="prog__container">\n<p>Exchanges the states of <code>*this</code> and <code>other</code>, except for the associated <code>rdbuf</code> objects.</p>\n<pre><code>protected:\nvoid swap( basic_ios& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/swap
std::basic_fstream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_ifstream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_ios::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_iostream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_istream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_istringstream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_ofstream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_ostream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_ostringstream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_stringstream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::istrstream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::ostrstream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::strstream::tie	A										<section class="prog__container">\n<p>Manages the tied stream.</p>\n<pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie(void) const;</code></pre><pre><code>std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/tie
std::basic_fstream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_ifstream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_ios::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_iostream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_istream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_istringstream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_ofstream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_ostream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_ostringstream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_stringstream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::istrstream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::ostrstream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::strstream::widen	A										<section class="prog__container">\n<p>Converts a character <code>c</code> to its equivalent in the current locale.</p>\n<pre><code>char_type widen( char c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/widen
std::basic_ios::~basic_ios	A										<section class="prog__container">\n<p>Destroys the <code>basic_ios</code> object.</p>\n<pre><code>virtual ~basic_ios(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ios/~basic_ios
std::basic_iostream	A										<section class="prog__container">\n<p>The class template <code>basic_iostream</code> provides support for high level input/output operations on streams.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;\n&gt; class basic_iostream;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_iostream
std::basic_iostream::basic_iostream	A										<section class="prog__container">\n<p>Constructs new stream object.</p>\n<pre><code>explicit basic_iostream( std::basic_streambuf&lt;CharT,Traits&gt;* sb );</code></pre><pre><code>protected:\nbasic_iostream( basic_iostream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_iostream/basic_iostream
std::basic_iostream::~basic_iostream	A										<section class="prog__container">\n<p>Destructs the input/output stream.</p>\n<pre><code>virtual ~basic_iostream(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_iostream/~basic_iostream
std::basic_istream	A										<section class="prog__container">\n<p>The class template <code>basic_istream</code> provides support for high level input operations on character streams.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;\n&gt; class basic_istream : virtual public std::basic_ios&lt;CharT, Traits&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream
std::basic_istream::basic_istream	A										<section class="prog__container">\n<p>1) Constructs the <code>basic_istream</code> object, assigning initial values to the base class by calling <code>basic_ios::init(sb)</code>.</p>\n<pre><code>explicit basic_istream( std::basic_streambuf&lt;CharT, Traits&gt;* sb);</code></pre><pre><code>protected:\nbasic_istream( basic_istream&& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/basic_istream
std::basic_fstream::gcount	A										<section class="prog__container">\n<p>Returns the number of characters extracted by the last unformatted input operation.</p>\n<pre><code>std::streamsize gcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/gcount
std::basic_ifstream::gcount	A										<section class="prog__container">\n<p>Returns the number of characters extracted by the last unformatted input operation.</p>\n<pre><code>std::streamsize gcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/gcount
std::basic_iostream::gcount	A										<section class="prog__container">\n<p>Returns the number of characters extracted by the last unformatted input operation.</p>\n<pre><code>std::streamsize gcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/gcount
std::basic_istream::gcount	A										<section class="prog__container">\n<p>Returns the number of characters extracted by the last unformatted input operation.</p>\n<pre><code>std::streamsize gcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/gcount
std::basic_istringstream::gcount	A										<section class="prog__container">\n<p>Returns the number of characters extracted by the last unformatted input operation.</p>\n<pre><code>std::streamsize gcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/gcount
std::basic_stringstream::gcount	A										<section class="prog__container">\n<p>Returns the number of characters extracted by the last unformatted input operation.</p>\n<pre><code>std::streamsize gcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/gcount
std::istrstream::gcount	A										<section class="prog__container">\n<p>Returns the number of characters extracted by the last unformatted input operation.</p>\n<pre><code>std::streamsize gcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/gcount
std::strstream::gcount	A										<section class="prog__container">\n<p>Returns the number of characters extracted by the last unformatted input operation.</p>\n<pre><code>std::streamsize gcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/gcount
std::basic_fstream::get	A										<section class="prog__container">\n<p>Extracts character or characters from stream.</p>\n<pre><code>int_type get(void);</code></pre><pre><code>basic_istream& get( char_type& ch );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count, char_type delim );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/get
std::basic_ifstream::get	A										<section class="prog__container">\n<p>Extracts character or characters from stream.</p>\n<pre><code>int_type get(void);</code></pre><pre><code>basic_istream& get( char_type& ch );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count, char_type delim );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/get
std::basic_iostream::get	A										<section class="prog__container">\n<p>Extracts character or characters from stream.</p>\n<pre><code>int_type get(void);</code></pre><pre><code>basic_istream& get( char_type& ch );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count, char_type delim );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/get
std::basic_istream::get	A										<section class="prog__container">\n<p>Extracts character or characters from stream.</p>\n<pre><code>int_type get(void);</code></pre><pre><code>basic_istream& get( char_type& ch );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count, char_type delim );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/get
std::basic_istringstream::get	A										<section class="prog__container">\n<p>Extracts character or characters from stream.</p>\n<pre><code>int_type get(void);</code></pre><pre><code>basic_istream& get( char_type& ch );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count, char_type delim );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/get
std::basic_stringstream::get	A										<section class="prog__container">\n<p>Extracts character or characters from stream.</p>\n<pre><code>int_type get(void);</code></pre><pre><code>basic_istream& get( char_type& ch );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count, char_type delim );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/get
std::istrstream::get	A										<section class="prog__container">\n<p>Extracts character or characters from stream.</p>\n<pre><code>int_type get(void);</code></pre><pre><code>basic_istream& get( char_type& ch );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count, char_type delim );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/get
std::strstream::get	A										<section class="prog__container">\n<p>Extracts character or characters from stream.</p>\n<pre><code>int_type get(void);</code></pre><pre><code>basic_istream& get( char_type& ch );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& get( char_type* s, std::streamsize count, char_type delim );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf );</code></pre><pre><code>basic_istream& get( basic_streambuf& strbuf, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/get
std::basic_fstream::getline	A										<section class="prog__container">\n<p>Extracts characters from stream until end of line or the specified delimiter <code>delim</code>.</p>\n<pre><code>basic_istream& getline( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& getline( char_type* s, std::streamsize count, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/getline
std::basic_ifstream::getline	A										<section class="prog__container">\n<p>Extracts characters from stream until end of line or the specified delimiter <code>delim</code>.</p>\n<pre><code>basic_istream& getline( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& getline( char_type* s, std::streamsize count, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/getline
std::basic_iostream::getline	A										<section class="prog__container">\n<p>Extracts characters from stream until end of line or the specified delimiter <code>delim</code>.</p>\n<pre><code>basic_istream& getline( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& getline( char_type* s, std::streamsize count, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/getline
std::basic_istream::getline	A										<section class="prog__container">\n<p>Extracts characters from stream until end of line or the specified delimiter <code>delim</code>.</p>\n<pre><code>basic_istream& getline( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& getline( char_type* s, std::streamsize count, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/getline
std::basic_istringstream::getline	A										<section class="prog__container">\n<p>Extracts characters from stream until end of line or the specified delimiter <code>delim</code>.</p>\n<pre><code>basic_istream& getline( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& getline( char_type* s, std::streamsize count, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/getline
std::basic_stringstream::getline	A										<section class="prog__container">\n<p>Extracts characters from stream until end of line or the specified delimiter <code>delim</code>.</p>\n<pre><code>basic_istream& getline( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& getline( char_type* s, std::streamsize count, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/getline
std::istrstream::getline	A										<section class="prog__container">\n<p>Extracts characters from stream until end of line or the specified delimiter <code>delim</code>.</p>\n<pre><code>basic_istream& getline( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& getline( char_type* s, std::streamsize count, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/getline
std::strstream::getline	A										<section class="prog__container">\n<p>Extracts characters from stream until end of line or the specified delimiter <code>delim</code>.</p>\n<pre><code>basic_istream& getline( char_type* s, std::streamsize count );</code></pre><pre><code>basic_istream& getline( char_type* s, std::streamsize count, char_type delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/getline
std::basic_fstream::ignore	A										<section class="prog__container">\n<p>Extracts and discards characters from the input stream until and including <code>delim</code>.</p>\n<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/ignore
std::basic_ifstream::ignore	A										<section class="prog__container">\n<p>Extracts and discards characters from the input stream until and including <code>delim</code>.</p>\n<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/ignore
std::basic_iostream::ignore	A										<section class="prog__container">\n<p>Extracts and discards characters from the input stream until and including <code>delim</code>.</p>\n<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/ignore
std::basic_istream::ignore	A										<section class="prog__container">\n<p>Extracts and discards characters from the input stream until and including <code>delim</code>.</p>\n<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/ignore
std::basic_istringstream::ignore	A										<section class="prog__container">\n<p>Extracts and discards characters from the input stream until and including <code>delim</code>.</p>\n<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/ignore
std::basic_stringstream::ignore	A										<section class="prog__container">\n<p>Extracts and discards characters from the input stream until and including <code>delim</code>.</p>\n<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/ignore
std::istrstream::ignore	A										<section class="prog__container">\n<p>Extracts and discards characters from the input stream until and including <code>delim</code>.</p>\n<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/ignore
std::strstream::ignore	A										<section class="prog__container">\n<p>Extracts and discards characters from the input stream until and including <code>delim</code>.</p>\n<pre><code>basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/ignore
std::basic_fstream::peek	A										<section class="prog__container">\n<p>Behaves as <code>UnformattedInputFunction</code>.</p>\n<pre><code>int_type peek(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/peek
std::basic_ifstream::peek	A										<section class="prog__container">\n<p>Behaves as <code>UnformattedInputFunction</code>.</p>\n<pre><code>int_type peek(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/peek
std::basic_iostream::peek	A										<section class="prog__container">\n<p>Behaves as <code>UnformattedInputFunction</code>.</p>\n<pre><code>int_type peek(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/peek
std::basic_istream::peek	A										<section class="prog__container">\n<p>Behaves as <code>UnformattedInputFunction</code>.</p>\n<pre><code>int_type peek(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/peek
std::basic_istringstream::peek	A										<section class="prog__container">\n<p>Behaves as <code>UnformattedInputFunction</code>.</p>\n<pre><code>int_type peek(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/peek
std::basic_stringstream::peek	A										<section class="prog__container">\n<p>Behaves as <code>UnformattedInputFunction</code>.</p>\n<pre><code>int_type peek(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/peek
std::istrstream::peek	A										<section class="prog__container">\n<p>Behaves as <code>UnformattedInputFunction</code>.</p>\n<pre><code>int_type peek(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/peek
std::strstream::peek	A										<section class="prog__container">\n<p>Behaves as <code>UnformattedInputFunction</code>.</p>\n<pre><code>int_type peek(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/peek
std::basic_fstream::putback	A										<section class="prog__container">\n<p>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.</p>\n<pre><code>basic_istream& putback( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/putback
std::basic_ifstream::putback	A										<section class="prog__container">\n<p>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.</p>\n<pre><code>basic_istream& putback( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/putback
std::basic_iostream::putback	A										<section class="prog__container">\n<p>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.</p>\n<pre><code>basic_istream& putback( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/putback
std::basic_istream::putback	A										<section class="prog__container">\n<p>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.</p>\n<pre><code>basic_istream& putback( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/putback
std::basic_istringstream::putback	A										<section class="prog__container">\n<p>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.</p>\n<pre><code>basic_istream& putback( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/putback
std::basic_stringstream::putback	A										<section class="prog__container">\n<p>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.</p>\n<pre><code>basic_istream& putback( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/putback
std::istrstream::putback	A										<section class="prog__container">\n<p>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.</p>\n<pre><code>basic_istream& putback( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/putback
std::strstream::putback	A										<section class="prog__container">\n<p>Puts the character <code>ch</code> back to the input stream so the next extracted character will be <code>ch</code>.</p>\n<pre><code>basic_istream& putback( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/putback
std::basic_fstream::read	A										<section class="prog__container">\n<p>Extracts characters from stream.</p>\n<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/read
std::basic_ifstream::read	A										<section class="prog__container">\n<p>Extracts characters from stream.</p>\n<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/read
std::basic_iostream::read	A										<section class="prog__container">\n<p>Extracts characters from stream.</p>\n<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/read
std::basic_istream::read	A										<section class="prog__container">\n<p>Extracts characters from stream.</p>\n<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/read
std::basic_istringstream::read	A										<section class="prog__container">\n<p>Extracts characters from stream.</p>\n<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/read
std::basic_stringstream::read	A										<section class="prog__container">\n<p>Extracts characters from stream.</p>\n<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/read
std::istrstream::read	A										<section class="prog__container">\n<p>Extracts characters from stream.</p>\n<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/read
std::strstream::read	A										<section class="prog__container">\n<p>Extracts characters from stream.</p>\n<pre><code>basic_istream& read( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/read
std::basic_fstream::readsome	A										<section class="prog__container">\n<p>Extracts up to <code>count</code> immediately available characters from the input stream.</p>\n<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/readsome
std::basic_ifstream::readsome	A										<section class="prog__container">\n<p>Extracts up to <code>count</code> immediately available characters from the input stream.</p>\n<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/readsome
std::basic_iostream::readsome	A										<section class="prog__container">\n<p>Extracts up to <code>count</code> immediately available characters from the input stream.</p>\n<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/readsome
std::basic_istream::readsome	A										<section class="prog__container">\n<p>Extracts up to <code>count</code> immediately available characters from the input stream.</p>\n<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/readsome
std::basic_istringstream::readsome	A										<section class="prog__container">\n<p>Extracts up to <code>count</code> immediately available characters from the input stream.</p>\n<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/readsome
std::basic_stringstream::readsome	A										<section class="prog__container">\n<p>Extracts up to <code>count</code> immediately available characters from the input stream.</p>\n<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/readsome
std::istrstream::readsome	A										<section class="prog__container">\n<p>Extracts up to <code>count</code> immediately available characters from the input stream.</p>\n<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/readsome
std::strstream::readsome	A										<section class="prog__container">\n<p>Extracts up to <code>count</code> immediately available characters from the input stream.</p>\n<pre><code>std::streamsize readsome( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/readsome
std::basic_fstream::seekg	A										<section class="prog__container">\n<p>Sets input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_istream& seekg( pos_type pos );</code></pre><pre><code>basic_istream& seekg( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/seekg
std::basic_ifstream::seekg	A										<section class="prog__container">\n<p>Sets input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_istream& seekg( pos_type pos );</code></pre><pre><code>basic_istream& seekg( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/seekg
std::basic_iostream::seekg	A										<section class="prog__container">\n<p>Sets input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_istream& seekg( pos_type pos );</code></pre><pre><code>basic_istream& seekg( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/seekg
std::basic_istream::seekg	A										<section class="prog__container">\n<p>Sets input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_istream& seekg( pos_type pos );</code></pre><pre><code>basic_istream& seekg( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/seekg
std::basic_istringstream::seekg	A										<section class="prog__container">\n<p>Sets input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_istream& seekg( pos_type pos );</code></pre><pre><code>basic_istream& seekg( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/seekg
std::basic_stringstream::seekg	A										<section class="prog__container">\n<p>Sets input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_istream& seekg( pos_type pos );</code></pre><pre><code>basic_istream& seekg( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/seekg
std::istrstream::seekg	A										<section class="prog__container">\n<p>Sets input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_istream& seekg( pos_type pos );</code></pre><pre><code>basic_istream& seekg( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/seekg
std::strstream::seekg	A										<section class="prog__container">\n<p>Sets input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_istream& seekg( pos_type pos );</code></pre><pre><code>basic_istream& seekg( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/seekg
std::basic_fstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sentry
std::basic_ifstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sentry
std::basic_iostream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sentry
std::basic_istream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sentry
std::basic_istringstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sentry
std::basic_stringstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sentry
std::istrstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sentry
std::strstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_istream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_istream that performs input (both formatted and unformatted).</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sentry
std::basic_fstream::sync	A										<section class="prog__container">\n<p>Synchronizes the input buffer with the associated data source.</p>\n<pre><code>int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sync
std::basic_ifstream::sync	A										<section class="prog__container">\n<p>Synchronizes the input buffer with the associated data source.</p>\n<pre><code>int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sync
std::basic_iostream::sync	A										<section class="prog__container">\n<p>Synchronizes the input buffer with the associated data source.</p>\n<pre><code>int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sync
std::basic_istream::sync	A										<section class="prog__container">\n<p>Synchronizes the input buffer with the associated data source.</p>\n<pre><code>int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sync
std::basic_istringstream::sync	A										<section class="prog__container">\n<p>Synchronizes the input buffer with the associated data source.</p>\n<pre><code>int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sync
std::basic_stringstream::sync	A										<section class="prog__container">\n<p>Synchronizes the input buffer with the associated data source.</p>\n<pre><code>int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sync
std::istrstream::sync	A										<section class="prog__container">\n<p>Synchronizes the input buffer with the associated data source.</p>\n<pre><code>int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sync
std::strstream::sync	A										<section class="prog__container">\n<p>Synchronizes the input buffer with the associated data source.</p>\n<pre><code>int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/sync
std::basic_fstream::tellg	A										<section class="prog__container">\n<p>Returns input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellg(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/tellg
std::basic_ifstream::tellg	A										<section class="prog__container">\n<p>Returns input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellg(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/tellg
std::basic_iostream::tellg	A										<section class="prog__container">\n<p>Returns input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellg(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/tellg
std::basic_istream::tellg	A										<section class="prog__container">\n<p>Returns input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellg(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/tellg
std::basic_istringstream::tellg	A										<section class="prog__container">\n<p>Returns input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellg(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/tellg
std::basic_stringstream::tellg	A										<section class="prog__container">\n<p>Returns input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellg(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/tellg
std::istrstream::tellg	A										<section class="prog__container">\n<p>Returns input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellg(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/tellg
std::strstream::tellg	A										<section class="prog__container">\n<p>Returns input position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellg(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/tellg
std::basic_fstream::unget	A										<section class="prog__container">\n<p>Makes the most recently extracted character available again.</p>\n<pre><code>basic_istream& unget(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/unget
std::basic_ifstream::unget	A										<section class="prog__container">\n<p>Makes the most recently extracted character available again.</p>\n<pre><code>basic_istream& unget(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/unget
std::basic_iostream::unget	A										<section class="prog__container">\n<p>Makes the most recently extracted character available again.</p>\n<pre><code>basic_istream& unget(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/unget
std::basic_istream::unget	A										<section class="prog__container">\n<p>Makes the most recently extracted character available again.</p>\n<pre><code>basic_istream& unget(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/unget
std::basic_istringstream::unget	A										<section class="prog__container">\n<p>Makes the most recently extracted character available again.</p>\n<pre><code>basic_istream& unget(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/unget
std::basic_stringstream::unget	A										<section class="prog__container">\n<p>Makes the most recently extracted character available again.</p>\n<pre><code>basic_istream& unget(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/unget
std::istrstream::unget	A										<section class="prog__container">\n<p>Makes the most recently extracted character available again.</p>\n<pre><code>basic_istream& unget(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/unget
std::strstream::unget	A										<section class="prog__container">\n<p>Makes the most recently extracted character available again.</p>\n<pre><code>basic_istream& unget(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/unget
std::basic_istream::~basic_istream	A										<section class="prog__container">\n<p>Destructs the input stream.</p>\n<pre><code>virtual ~basic_istream(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istream/~basic_istream
std::basic_istringstream	A										<section class="prog__container">\n<p>The class template <code>std::basic_istringstream</code> implements input operations on memory (std::basic_string) based streams.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;,\n    class Allocator = std::allocator&lt;CharT&gt;\n&gt; class basic_istringstream;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istringstream
std::basic_istringstream::basic_istringstream	A										<section class="prog__container">\n<p>Constructs new string stream.</p>\n<pre><code>explicit basic_istringstream( ios_base::openmode mode = ios_base::in );</code></pre><pre><code>explicit basic_istringstream( const std::basic_string&lt;CharT,Traits,Allocator&gt;& str,\n                     ios_base::openmode mode = ios_base::in );</code></pre><pre><code>basic_istringstream( basic_istringstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istringstream/basic_istringstream
std::basic_istringstream::operator=	A										<section class="prog__container">\n<p>Moves the string stream.</p>\n<pre><code>basic_istringstream& operator=( basic_istringstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istringstream/operator=
std::basic_istringstream::rdbuf	A										<section class="prog__container">\n<p>Returns pointer to the underlying raw string device object.</p>\n<pre><code>std::basic_stringbuf&lt;CharT, Traits, Allocator&gt;* rdbuf(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istringstream/rdbuf
std::basic_istringstream::str	A										<section class="prog__container">\n<p>Manages the contents of the underlying string object.</p>\n<pre><code>std::basic_string&lt;CharT,Traits,Allocator&gt; str(void) const;</code></pre><pre><code>void str(const std::basic_string&lt;CharT,Traits,Allocator&gt;& new_str);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istringstream/str
std::basic_istringstream::swap	A										<section class="prog__container">\n<p>Exchanges the state of the stream with those of <code>other</code>.</p>\n<pre><code>void swap( basic_istringstream& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_istringstream/swap
std::basic_ofstream	A										<section class="prog__container">\n<p>The class template <code>basic_ofstream</code> implements high-level output operations on file based streams.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;\n&gt; class basic_ofstream : public std::basic_ostream&lt;CharT, Traits&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ofstream
std::basic_ofstream::basic_ofstream	A										<section class="prog__container">\n<p>Constructs new file stream.</p>\n<pre><code>explicit basic_ofstream( const char* filename,\n                ios_base::openmode mode = ios_base::out );</code></pre><pre><code>explicit basic_ofstream( const string& filename,                                  \n                ios_base::openmode mode = ios_base::out );</code></pre><pre><code>basic_ofstream( basic_ofstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ofstream/basic_ofstream
std::basic_ofstream::close	A										<section class="prog__container">\n<p>Closes the associated file.</p>\n<pre><code>void close(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ofstream/close
std::basic_ofstream::is_open	A										<section class="prog__container">\n<p>Checks if the file stream has an associated file.</p>\n<pre><code>bool is_open(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ofstream/is_open
std::basic_ofstream::open	A										<section class="prog__container">\n<p>Opens and associates the file with name <code>filename</code> with the file stream.</p>\n<pre><code>void open( const char *filename,\n           ios_base::openmode mode = ios_base::out );</code></pre><pre><code>void open( const std::string &filename,                                  \n           ios_base::openmode mode = ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ofstream/open
std::basic_ofstream::operator=	A										<section class="prog__container">\n<p>Move assigns the file stream <code>other</code> to <code>*this</code>, effectively move-assigning both the std::basic_ostream base class and the associated std::basic_filebuf.</p>\n<pre><code>basic_ofstream& operator=( basic_ofstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ofstream/operator=
std::basic_ofstream::rdbuf	A										<section class="prog__container">\n<p>Returns pointer to the underlying raw file device object.</p>\n<pre><code>std::basic_filebuf&lt;CharT, Traits&gt;* rdbuf(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ofstream/rdbuf
std::basic_ofstream::swap	A										<section class="prog__container">\n<p>Exchanges the state of the stream with those of <code>other</code>.</p>\n<pre><code>void swap( basic_ofstream& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ofstream/swap
std::basic_ostream	A										<section class="prog__container">\n<p>The class template <code>basic_ostream</code> provides support for high level output operations on character streams.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;\n&gt; class basic_ostream : virtual public std::basic_ios&lt;CharT, Traits&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream
std::basic_ostream::basic_ostream	A										<section class="prog__container">\n<p>1) Constructs the <code>basic_ostream</code> object, assigning initial values to the base class by calling <code>basic_ios::init(sb)</code>.</p>\n<pre><code>explicit basic_ostream( std::basic_streambuf&lt;CharT, Traits&gt;* sb );</code></pre><pre><code>protected:\nbasic_ostream( basic_ostream&& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/basic_ostream
std::basic_fstream::flush	A										<section class="prog__container">\n<p>Writes uncommitted changes to the underlying output sequence.</p>\n<pre><code>basic_ostream& flush(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/flush
std::basic_iostream::flush	A										<section class="prog__container">\n<p>Writes uncommitted changes to the underlying output sequence.</p>\n<pre><code>basic_ostream& flush(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/flush
std::basic_ofstream::flush	A										<section class="prog__container">\n<p>Writes uncommitted changes to the underlying output sequence.</p>\n<pre><code>basic_ostream& flush(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/flush
std::basic_ostream::flush	A										<section class="prog__container">\n<p>Writes uncommitted changes to the underlying output sequence.</p>\n<pre><code>basic_ostream& flush(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/flush
std::basic_ostringstream::flush	A										<section class="prog__container">\n<p>Writes uncommitted changes to the underlying output sequence.</p>\n<pre><code>basic_ostream& flush(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/flush
std::basic_stringstream::flush	A										<section class="prog__container">\n<p>Writes uncommitted changes to the underlying output sequence.</p>\n<pre><code>basic_ostream& flush(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/flush
std::ostrstream::flush	A										<section class="prog__container">\n<p>Writes uncommitted changes to the underlying output sequence.</p>\n<pre><code>basic_ostream& flush(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/flush
std::strstream::flush	A										<section class="prog__container">\n<p>Writes uncommitted changes to the underlying output sequence.</p>\n<pre><code>basic_ostream& flush(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/flush
std::basic_fstream::operator<<	A										<section class="prog__container">\n<p>Inserts data into the stream.</p>\n<pre><code>basic_ostream& operator&lt;&lt;( short value );\nbasic_ostream& operator&lt;&lt;( unsigned short value );</code></pre><pre><code>basic_ostream& operator&lt;&lt;( int value );\nbasic_ostream& operator&lt;&lt;( unsigned int value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt
std::basic_iostream::operator<<	A										<section class="prog__container">\n<p>Inserts data into the stream.</p>\n<pre><code>basic_ostream& operator&lt;&lt;( short value );\nbasic_ostream& operator&lt;&lt;( unsigned short value );</code></pre><pre><code>basic_ostream& operator&lt;&lt;( int value );\nbasic_ostream& operator&lt;&lt;( unsigned int value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt
std::basic_ofstream::operator<<	A										<section class="prog__container">\n<p>Inserts data into the stream.</p>\n<pre><code>basic_ostream& operator&lt;&lt;( short value );\nbasic_ostream& operator&lt;&lt;( unsigned short value );</code></pre><pre><code>basic_ostream& operator&lt;&lt;( int value );\nbasic_ostream& operator&lt;&lt;( unsigned int value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt
std::basic_ostream::operator<<	A										<section class="prog__container">\n<p>Inserts data into the stream.</p>\n<pre><code>basic_ostream& operator&lt;&lt;( short value );\nbasic_ostream& operator&lt;&lt;( unsigned short value );</code></pre><pre><code>basic_ostream& operator&lt;&lt;( int value );\nbasic_ostream& operator&lt;&lt;( unsigned int value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt
std::basic_ostringstream::operator<<	A										<section class="prog__container">\n<p>Inserts data into the stream.</p>\n<pre><code>basic_ostream& operator&lt;&lt;( short value );\nbasic_ostream& operator&lt;&lt;( unsigned short value );</code></pre><pre><code>basic_ostream& operator&lt;&lt;( int value );\nbasic_ostream& operator&lt;&lt;( unsigned int value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt
std::basic_stringstream::operator<<	A										<section class="prog__container">\n<p>Inserts data into the stream.</p>\n<pre><code>basic_ostream& operator&lt;&lt;( short value );\nbasic_ostream& operator&lt;&lt;( unsigned short value );</code></pre><pre><code>basic_ostream& operator&lt;&lt;( int value );\nbasic_ostream& operator&lt;&lt;( unsigned int value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt
std::ostrstream::operator<<	A										<section class="prog__container">\n<p>Inserts data into the stream.</p>\n<pre><code>basic_ostream& operator&lt;&lt;( short value );\nbasic_ostream& operator&lt;&lt;( unsigned short value );</code></pre><pre><code>basic_ostream& operator&lt;&lt;( int value );\nbasic_ostream& operator&lt;&lt;( unsigned int value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt
std::strstream::operator<<	A										<section class="prog__container">\n<p>Inserts data into the stream.</p>\n<pre><code>basic_ostream& operator&lt;&lt;( short value );\nbasic_ostream& operator&lt;&lt;( unsigned short value );</code></pre><pre><code>basic_ostream& operator&lt;&lt;( int value );\nbasic_ostream& operator&lt;&lt;( unsigned int value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt
std::basic_fstream::put	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& put( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/put
std::basic_iostream::put	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& put( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/put
std::basic_ofstream::put	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& put( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/put
std::basic_ostream::put	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& put( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/put
std::basic_ostringstream::put	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& put( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/put
std::basic_stringstream::put	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& put( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/put
std::ostrstream::put	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& put( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/put
std::strstream::put	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& put( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/put
std::basic_fstream::seekp	A										<section class="prog__container">\n<p>Sets the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_ostream& seekp( pos_type pos );</code></pre><pre><code>basic_ostream& seekp( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/seekp
std::basic_iostream::seekp	A										<section class="prog__container">\n<p>Sets the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_ostream& seekp( pos_type pos );</code></pre><pre><code>basic_ostream& seekp( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/seekp
std::basic_ofstream::seekp	A										<section class="prog__container">\n<p>Sets the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_ostream& seekp( pos_type pos );</code></pre><pre><code>basic_ostream& seekp( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/seekp
std::basic_ostream::seekp	A										<section class="prog__container">\n<p>Sets the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_ostream& seekp( pos_type pos );</code></pre><pre><code>basic_ostream& seekp( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/seekp
std::basic_ostringstream::seekp	A										<section class="prog__container">\n<p>Sets the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_ostream& seekp( pos_type pos );</code></pre><pre><code>basic_ostream& seekp( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/seekp
std::basic_stringstream::seekp	A										<section class="prog__container">\n<p>Sets the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_ostream& seekp( pos_type pos );</code></pre><pre><code>basic_ostream& seekp( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/seekp
std::ostrstream::seekp	A										<section class="prog__container">\n<p>Sets the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_ostream& seekp( pos_type pos );</code></pre><pre><code>basic_ostream& seekp( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/seekp
std::strstream::seekp	A										<section class="prog__container">\n<p>Sets the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>basic_ostream& seekp( pos_type pos );</code></pre><pre><code>basic_ostream& seekp( off_type off, std::ios_base::seekdir dir);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/seekp
std::basic_fstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and...</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/sentry
std::basic_iostream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and...</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/sentry
std::basic_ofstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and...</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/sentry
std::basic_ostream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and...</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/sentry
std::basic_ostringstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and...</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/sentry
std::basic_stringstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and...</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/sentry
std::ostrstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and...</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/sentry
std::strstream::sentry	A										<section class="prog__container">\n<p>An object of class <code>basic_ostream::sentry</code> is constructed in local scope at the beginning of each member function of std::basic_ostream that performs output (both formatted and...</p>\n<pre><code>class sentry;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/sentry
std::basic_fstream::tellp	A										<section class="prog__container">\n<p>Returns the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellp(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/tellp
std::basic_iostream::tellp	A										<section class="prog__container">\n<p>Returns the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellp(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/tellp
std::basic_ofstream::tellp	A										<section class="prog__container">\n<p>Returns the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellp(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/tellp
std::basic_ostream::tellp	A										<section class="prog__container">\n<p>Returns the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellp(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/tellp
std::basic_ostringstream::tellp	A										<section class="prog__container">\n<p>Returns the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellp(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/tellp
std::basic_stringstream::tellp	A										<section class="prog__container">\n<p>Returns the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellp(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/tellp
std::ostrstream::tellp	A										<section class="prog__container">\n<p>Returns the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellp(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/tellp
std::strstream::tellp	A										<section class="prog__container">\n<p>Returns the output position indicator of the current associated <code>streambuf</code> object.</p>\n<pre><code>pos_type tellp(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/tellp
std::basic_fstream::write	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/write
std::basic_iostream::write	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/write
std::basic_ofstream::write	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/write
std::basic_ostream::write	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/write
std::basic_ostringstream::write	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/write
std::basic_stringstream::write	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/write
std::ostrstream::write	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/write
std::strstream::write	A										<section class="prog__container">\n<p>Behaves as an <code>UnformattedOutputFunction</code>.</p>\n<pre><code>basic_ostream& write( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/write
std::basic_ostream::~basic_ostream	A										<section class="prog__container">\n<p>Destroys the <code>basic_ostream</code> object.</p>\n<pre><code>virtual ~basic_ostream(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostream/~basic_ostream
std::basic_ostringstream	A										<section class="prog__container">\n<p>The class template <code>std::basic_ostringstream</code> implements output operations on memory (std::basic_string) based streams.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;,\n    class Allocator = std::allocator&lt;CharT&gt;\n&gt; class basic_ostringstream;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostringstream
std::basic_ostringstream::basic_ostringstream	A										<section class="prog__container">\n<p>Constructs new string stream.</p>\n<pre><code>explicit basic_ostringstream( ios_base::openmode mode = ios_base::out );</code></pre><pre><code>explicit basic_ostringstream( const std::basic_string&lt;CharT,Traits,Allocator&gt;& str,\n                     ios_base::openmode mode = ios_base::out );</code></pre><pre><code>basic_ostringstream( basic_ostringstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostringstream/basic_ostringstream
std::basic_ostringstream::operator=	A										<section class="prog__container">\n<p>Moves the string stream.</p>\n<pre><code>basic_ostringstream& operator=( basic_ostringstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostringstream/operator=
std::basic_ostringstream::rdbuf	A										<section class="prog__container">\n<p>Returns pointer to the underlying raw string device object.</p>\n<pre><code>std::basic_stringbuf&lt;CharT, Traits, Allocator&gt;* rdbuf(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostringstream/rdbuf
std::basic_ostringstream::str	A										<section class="prog__container">\n<p>Manages the contents of the underlying string object.</p>\n<pre><code>std::basic_string&lt;CharT,Traits,Allocator&gt; str(void) const;</code></pre><pre><code>void str(const std::basic_string&lt;CharT,Traits,Allocator&gt;& new_str);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostringstream/str
std::basic_ostringstream::swap	A										<section class="prog__container">\n<p>Exchanges the state of the stream with those of <code>other</code>.</p>\n<pre><code>void swap( basic_ostringstream& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_ostringstream/swap
std::basic_streambuf	A										<section class="prog__container">\n<p>The class <code>basic_streambuf</code> controls input and output to a character sequence.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;\n&gt; class basic_streambuf;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf
std::basic_filebuf::gbump	A										<section class="prog__container">\n<p>Skips <code>count</code> characters in the get area.</p>\n<pre><code>void gbump( int count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gbump
std::basic_streambuf::gbump	A										<section class="prog__container">\n<p>Skips <code>count</code> characters in the get area.</p>\n<pre><code>void gbump( int count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gbump
std::basic_stringbuf::gbump	A										<section class="prog__container">\n<p>Skips <code>count</code> characters in the get area.</p>\n<pre><code>void gbump( int count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gbump
std::strstreambuf::gbump	A										<section class="prog__container">\n<p>Skips <code>count</code> characters in the get area.</p>\n<pre><code>void gbump( int count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gbump
std::basic_filebuf::getloc	A										<section class="prog__container">\n<p>Returns the associated locale.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/getloc
std::basic_streambuf::getloc	A										<section class="prog__container">\n<p>Returns the associated locale.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/getloc
std::basic_stringbuf::getloc	A										<section class="prog__container">\n<p>Returns the associated locale.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/getloc
std::strstreambuf::getloc	A										<section class="prog__container">\n<p>Returns the associated locale.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/getloc
std::basic_filebuf::eback	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* eback(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::basic_filebuf::egptr	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* egptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::basic_filebuf::gptr	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* gptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::basic_streambuf::eback	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* eback(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::basic_streambuf::egptr	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* egptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::basic_streambuf::gptr	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* gptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::basic_stringbuf::eback	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* eback(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::basic_stringbuf::egptr	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* egptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::basic_stringbuf::gptr	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* gptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::strstreambuf::eback	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* eback(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::strstreambuf::egptr	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* egptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::strstreambuf::gptr	A										<section class="prog__container">\n<p>Returns pointers defining the get area.</p>\n<pre><code>char_type* gptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/gptr
std::basic_filebuf::in_avail	A										<section class="prog__container">\n<p>Returns the number of characters available in the get area.</p>\n<pre><code>std::streamsize in_avail(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/in_avail
std::basic_streambuf::in_avail	A										<section class="prog__container">\n<p>Returns the number of characters available in the get area.</p>\n<pre><code>std::streamsize in_avail(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/in_avail
std::basic_stringbuf::in_avail	A										<section class="prog__container">\n<p>Returns the number of characters available in the get area.</p>\n<pre><code>std::streamsize in_avail(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/in_avail
std::strstreambuf::in_avail	A										<section class="prog__container">\n<p>Returns the number of characters available in the get area.</p>\n<pre><code>std::streamsize in_avail(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/in_avail
std::basic_streambuf::operator=	A										<section class="prog__container">\n<p>Assigns the data members of <code>other</code> to <code>*this</code>.</p>\n<pre><code>basic_streambuf& operator=( const basic_streambuf& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/operator=
std::basic_filebuf::overflow	A										<section class="prog__container">\n<p>Ensures that there is space at the put area for at least one character by saving some initial subsequence of characters starting at pbase(void) to the output sequence and updating the pointers to the put...</p>\n<pre><code>virtual int_type overflow( int_type ch = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/overflow
std::basic_streambuf::overflow	A										<section class="prog__container">\n<p>Ensures that there is space at the put area for at least one character by saving some initial subsequence of characters starting at pbase(void) to the output sequence and updating the pointers to the put...</p>\n<pre><code>virtual int_type overflow( int_type ch = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/overflow
std::basic_stringbuf::overflow	A										<section class="prog__container">\n<p>Ensures that there is space at the put area for at least one character by saving some initial subsequence of characters starting at pbase(void) to the output sequence and updating the pointers to the put...</p>\n<pre><code>virtual int_type overflow( int_type ch = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/overflow
std::strstreambuf::overflow	A										<section class="prog__container">\n<p>Ensures that there is space at the put area for at least one character by saving some initial subsequence of characters starting at pbase(void) to the output sequence and updating the pointers to the put...</p>\n<pre><code>virtual int_type overflow( int_type ch = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/overflow
std::basic_filebuf::pbackfail	A										<section class="prog__container">\n<p>This protected virtual function is called by the public functions sungetc(void) and sputbackc(void) (which, in turn, are called by basic_istream::unget and basic_istream::putback) when either...</p>\n<pre><code>protected:\nvirtual int_type pbackfail( int_type c = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pbackfail
std::basic_streambuf::pbackfail	A										<section class="prog__container">\n<p>This protected virtual function is called by the public functions sungetc(void) and sputbackc(void) (which, in turn, are called by basic_istream::unget and basic_istream::putback) when either...</p>\n<pre><code>protected:\nvirtual int_type pbackfail( int_type c = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pbackfail
std::basic_stringbuf::pbackfail	A										<section class="prog__container">\n<p>This protected virtual function is called by the public functions sungetc(void) and sputbackc(void) (which, in turn, are called by basic_istream::unget and basic_istream::putback) when either...</p>\n<pre><code>protected:\nvirtual int_type pbackfail( int_type c = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pbackfail
std::strstreambuf::pbackfail	A										<section class="prog__container">\n<p>This protected virtual function is called by the public functions sungetc(void) and sputbackc(void) (which, in turn, are called by basic_istream::unget and basic_istream::putback) when either...</p>\n<pre><code>protected:\nvirtual int_type pbackfail( int_type c = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pbackfail
std::basic_filebuf::pbump	A										<section class="prog__container">\n<p>Repositions the <i>put pointer</i> (pptr(void)) by <code>count</code> characters, where <code>count</code> may be positive or negative.</p>\n<pre><code>void pbump( int count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pbump
std::basic_streambuf::pbump	A										<section class="prog__container">\n<p>Repositions the <i>put pointer</i> (pptr(void)) by <code>count</code> characters, where <code>count</code> may be positive or negative.</p>\n<pre><code>void pbump( int count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pbump
std::basic_stringbuf::pbump	A										<section class="prog__container">\n<p>Repositions the <i>put pointer</i> (pptr(void)) by <code>count</code> characters, where <code>count</code> may be positive or negative.</p>\n<pre><code>void pbump( int count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pbump
std::strstreambuf::pbump	A										<section class="prog__container">\n<p>Repositions the <i>put pointer</i> (pptr(void)) by <code>count</code> characters, where <code>count</code> may be positive or negative.</p>\n<pre><code>void pbump( int count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pbump
std::basic_filebuf::epptr	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* epptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::basic_filebuf::pbase	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* pbase(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::basic_filebuf::pptr	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* pptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::basic_streambuf::epptr	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* epptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::basic_streambuf::pbase	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* pbase(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::basic_streambuf::pptr	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* pptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::basic_stringbuf::epptr	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* epptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::basic_stringbuf::pbase	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* pbase(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::basic_stringbuf::pptr	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* pptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::strstreambuf::epptr	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* epptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::strstreambuf::pbase	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* pbase(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::strstreambuf::pptr	A										<section class="prog__container">\n<p>Returns pointers defining the put area.</p>\n<pre><code>char_type* pptr(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pptr
std::basic_filebuf::imbue	A										<section class="prog__container">\n<p>Changes the associated locale.</p>\n<pre><code>protected:\nvirtual void imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue
std::basic_filebuf::pubimbue	A										<section class="prog__container">\n<p>Changes the associated locale.</p>\n<pre><code>std::locale pubimbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue
std::basic_streambuf::imbue	A										<section class="prog__container">\n<p>Changes the associated locale.</p>\n<pre><code>protected:\nvirtual void imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue
std::basic_streambuf::pubimbue	A										<section class="prog__container">\n<p>Changes the associated locale.</p>\n<pre><code>std::locale pubimbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue
std::basic_stringbuf::imbue	A										<section class="prog__container">\n<p>Changes the associated locale.</p>\n<pre><code>protected:\nvirtual void imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue
std::basic_stringbuf::pubimbue	A										<section class="prog__container">\n<p>Changes the associated locale.</p>\n<pre><code>std::locale pubimbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue
std::strstreambuf::imbue	A										<section class="prog__container">\n<p>Changes the associated locale.</p>\n<pre><code>protected:\nvirtual void imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue
std::strstreambuf::pubimbue	A										<section class="prog__container">\n<p>Changes the associated locale.</p>\n<pre><code>std::locale pubimbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubimbue
std::basic_filebuf::pubseekoff	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence relative to some other position.</p>\n<pre><code>pos_type pubseekoff( off_type off, std::ios_base::seekdir dir,\n                     std::ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff
std::basic_filebuf::seekoff	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence relative to some other position.</p>\n<pre><code>protected:\nvirtual pos_type seekoff( off_type off, std::ios_base::seekdir dir,\n                          std::ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff
std::basic_streambuf::pubseekoff	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence relative to some other position.</p>\n<pre><code>pos_type pubseekoff( off_type off, std::ios_base::seekdir dir,\n                     std::ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff
std::basic_streambuf::seekoff	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence relative to some other position.</p>\n<pre><code>protected:\nvirtual pos_type seekoff( off_type off, std::ios_base::seekdir dir,\n                          std::ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff
std::basic_stringbuf::pubseekoff	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence relative to some other position.</p>\n<pre><code>pos_type pubseekoff( off_type off, std::ios_base::seekdir dir,\n                     std::ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff
std::basic_stringbuf::seekoff	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence relative to some other position.</p>\n<pre><code>protected:\nvirtual pos_type seekoff( off_type off, std::ios_base::seekdir dir,\n                          std::ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff
std::strstreambuf::pubseekoff	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence relative to some other position.</p>\n<pre><code>pos_type pubseekoff( off_type off, std::ios_base::seekdir dir,\n                     std::ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff
std::strstreambuf::seekoff	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence relative to some other position.</p>\n<pre><code>protected:\nvirtual pos_type seekoff( off_type off, std::ios_base::seekdir dir,\n                          std::ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekoff
std::basic_filebuf::pubseekpos	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence to an absolute position.</p>\n<pre><code>pos_type pubseekpos( pos_type pos,\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos
std::basic_filebuf::seekpos	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence to an absolute position.</p>\n<pre><code>protected:\nvirtual pos_type seekpos( pos_type pos,\n                          ios_base::openmode which = ios_base::in | ios_base::out);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos
std::basic_streambuf::pubseekpos	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence to an absolute position.</p>\n<pre><code>pos_type pubseekpos( pos_type pos,\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos
std::basic_streambuf::seekpos	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence to an absolute position.</p>\n<pre><code>protected:\nvirtual pos_type seekpos( pos_type pos,\n                          ios_base::openmode which = ios_base::in | ios_base::out);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos
std::basic_stringbuf::pubseekpos	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence to an absolute position.</p>\n<pre><code>pos_type pubseekpos( pos_type pos,\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos
std::basic_stringbuf::seekpos	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence to an absolute position.</p>\n<pre><code>protected:\nvirtual pos_type seekpos( pos_type pos,\n                          ios_base::openmode which = ios_base::in | ios_base::out);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos
std::strstreambuf::pubseekpos	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence to an absolute position.</p>\n<pre><code>pos_type pubseekpos( pos_type pos,\n                     ios_base::openmode which = ios_base::in | ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos
std::strstreambuf::seekpos	A										<section class="prog__container">\n<p>Sets the position indicator of the input and/or output sequence to an absolute position.</p>\n<pre><code>protected:\nvirtual pos_type seekpos( pos_type pos,\n                          ios_base::openmode which = ios_base::in | ios_base::out);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubseekpos
std::basic_filebuf::pubsetbuf	A										<section class="prog__container">\n<p> Calls <code>setbuf(s, n)</code> of the most derived class...</p>\n<pre><code>basic_streambuf&lt;CharT, Traits&gt;* pubsetbuf( char_type* s, std::streamsize n )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsetbuf
std::basic_filebuf::setbuf	A										<section class="prog__container">\n<p> The base class version of this function has no effect.</p>\n<pre><code>protected:\nvirtual basic_streambuf&lt;CharT, Traits&gt;* setbuf( char_type* s, std::streamsize n )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsetbuf
std::basic_filebuf::pubsync	A										<section class="prog__container">\n<p>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.</p>\n<pre><code>int pubsync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync
std::basic_filebuf::sync	A										<section class="prog__container">\n<p>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.</p>\n<pre><code>protected:\nvirtual int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync
std::basic_streambuf::pubsync	A										<section class="prog__container">\n<p>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.</p>\n<pre><code>int pubsync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync
std::basic_streambuf::sync	A										<section class="prog__container">\n<p>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.</p>\n<pre><code>protected:\nvirtual int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync
std::basic_stringbuf::pubsync	A										<section class="prog__container">\n<p>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.</p>\n<pre><code>int pubsync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync
std::basic_stringbuf::sync	A										<section class="prog__container">\n<p>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.</p>\n<pre><code>protected:\nvirtual int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync
std::strstreambuf::pubsync	A										<section class="prog__container">\n<p>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.</p>\n<pre><code>int pubsync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync
std::strstreambuf::sync	A										<section class="prog__container">\n<p>Synchronizes the controlled character sequence (the buffers) with the associated character sequence.</p>\n<pre><code>protected:\nvirtual int sync(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/pubsync
std::basic_filebuf::sbumpc	A										<section class="prog__container">\n<p>Reads one character and advances the input sequence by one character.</p>\n<pre><code>int_type sbumpc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sbumpc
std::basic_streambuf::sbumpc	A										<section class="prog__container">\n<p>Reads one character and advances the input sequence by one character.</p>\n<pre><code>int_type sbumpc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sbumpc
std::basic_stringbuf::sbumpc	A										<section class="prog__container">\n<p>Reads one character and advances the input sequence by one character.</p>\n<pre><code>int_type sbumpc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sbumpc
std::strstreambuf::sbumpc	A										<section class="prog__container">\n<p>Reads one character and advances the input sequence by one character.</p>\n<pre><code>int_type sbumpc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sbumpc
std::basic_filebuf::setg	A										<section class="prog__container">\n<p>Sets the values of the pointers defining the get area.</p>\n<pre><code>void setg( char_type* gbeg, char_type* gcurr, char_type* gend );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/setg
std::basic_streambuf::setg	A										<section class="prog__container">\n<p>Sets the values of the pointers defining the get area.</p>\n<pre><code>void setg( char_type* gbeg, char_type* gcurr, char_type* gend );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/setg
std::basic_stringbuf::setg	A										<section class="prog__container">\n<p>Sets the values of the pointers defining the get area.</p>\n<pre><code>void setg( char_type* gbeg, char_type* gcurr, char_type* gend );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/setg
std::strstreambuf::setg	A										<section class="prog__container">\n<p>Sets the values of the pointers defining the get area.</p>\n<pre><code>void setg( char_type* gbeg, char_type* gcurr, char_type* gend );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/setg
std::basic_filebuf::setp	A										<section class="prog__container">\n<p>Sets the values of the pointers defining the put area.</p>\n<pre><code>void setp( char_type* pbeg, char_type* pend );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/setp
std::basic_streambuf::setp	A										<section class="prog__container">\n<p>Sets the values of the pointers defining the put area.</p>\n<pre><code>void setp( char_type* pbeg, char_type* pend );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/setp
std::basic_stringbuf::setp	A										<section class="prog__container">\n<p>Sets the values of the pointers defining the put area.</p>\n<pre><code>void setp( char_type* pbeg, char_type* pend );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/setp
std::strstreambuf::setp	A										<section class="prog__container">\n<p>Sets the values of the pointers defining the put area.</p>\n<pre><code>void setp( char_type* pbeg, char_type* pend );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/setp
std::basic_filebuf::sgetc	A										<section class="prog__container">\n<p>Reads one character from the input sequence.</p>\n<pre><code>int_type sgetc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetc
std::basic_streambuf::sgetc	A										<section class="prog__container">\n<p>Reads one character from the input sequence.</p>\n<pre><code>int_type sgetc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetc
std::basic_stringbuf::sgetc	A										<section class="prog__container">\n<p>Reads one character from the input sequence.</p>\n<pre><code>int_type sgetc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetc
std::strstreambuf::sgetc	A										<section class="prog__container">\n<p>Reads one character from the input sequence.</p>\n<pre><code>int_type sgetc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetc
std::basic_filebuf::sgetn	A										<section class="prog__container">\n<p> Calls <code>xsgetn(s, count)</code> of the most derived class.</p>\n<pre><code>std::streamsize sgetn( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetn
std::basic_filebuf::xsgetn	A										<section class="prog__container">\n<p> Reads <code>count</code> characters from the input sequence and stores them into a character array pointed to by <code>s</code>.</p>\n<pre><code>protected:\nvirtual std::streamsize xsgetn( char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sgetn
std::basic_filebuf::showmanyc	A										<section class="prog__container">\n<p>Estimates the number of characters available for input in the associated character sequence.</p>\n<pre><code>protected:\nvirtual std::streamsize showmanyc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/showmanyc
std::basic_streambuf::showmanyc	A										<section class="prog__container">\n<p>Estimates the number of characters available for input in the associated character sequence.</p>\n<pre><code>protected:\nvirtual std::streamsize showmanyc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/showmanyc
std::basic_stringbuf::showmanyc	A										<section class="prog__container">\n<p>Estimates the number of characters available for input in the associated character sequence.</p>\n<pre><code>protected:\nvirtual std::streamsize showmanyc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/showmanyc
std::strstreambuf::showmanyc	A										<section class="prog__container">\n<p>Estimates the number of characters available for input in the associated character sequence.</p>\n<pre><code>protected:\nvirtual std::streamsize showmanyc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/showmanyc
std::basic_filebuf::snextc	A										<section class="prog__container">\n<p>Advances the input sequence by one character and reads one character.</p>\n<pre><code>int_type snextc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/snextc
std::basic_streambuf::snextc	A										<section class="prog__container">\n<p>Advances the input sequence by one character and reads one character.</p>\n<pre><code>int_type snextc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/snextc
std::basic_stringbuf::snextc	A										<section class="prog__container">\n<p>Advances the input sequence by one character and reads one character.</p>\n<pre><code>int_type snextc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/snextc
std::strstreambuf::snextc	A										<section class="prog__container">\n<p>Advances the input sequence by one character and reads one character.</p>\n<pre><code>int_type snextc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/snextc
std::basic_filebuf::sputbackc	A										<section class="prog__container">\n<p>Puts back a character back to the get area.</p>\n<pre><code>int_type sputbackc( char_type c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputbackc
std::basic_streambuf::sputbackc	A										<section class="prog__container">\n<p>Puts back a character back to the get area.</p>\n<pre><code>int_type sputbackc( char_type c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputbackc
std::basic_stringbuf::sputbackc	A										<section class="prog__container">\n<p>Puts back a character back to the get area.</p>\n<pre><code>int_type sputbackc( char_type c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputbackc
std::strstreambuf::sputbackc	A										<section class="prog__container">\n<p>Puts back a character back to the get area.</p>\n<pre><code>int_type sputbackc( char_type c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputbackc
std::basic_filebuf::sputc	A										<section class="prog__container">\n<p>Writes one character to the output sequence.</p>\n<pre><code>int_type sputc( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputc
std::basic_streambuf::sputc	A										<section class="prog__container">\n<p>Writes one character to the output sequence.</p>\n<pre><code>int_type sputc( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputc
std::basic_stringbuf::sputc	A										<section class="prog__container">\n<p>Writes one character to the output sequence.</p>\n<pre><code>int_type sputc( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputc
std::strstreambuf::sputc	A										<section class="prog__container">\n<p>Writes one character to the output sequence.</p>\n<pre><code>int_type sputc( char_type ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputc
std::basic_filebuf::sputn	A										<section class="prog__container">\n<p> Calls <code>xsputn(s, count)</code> of the most derived class.</p>\n<pre><code>std::streamsize sputn( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputn
std::basic_filebuf::xsputn	A										<section class="prog__container">\n<p> Writes <code>count</code> characters to the output sequence from the character array whose first element is pointed to by <code>s</code>.</p>\n<pre><code>protected:\nvirtual std::streamsize xsputn( const char_type* s, std::streamsize count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sputn
std::basic_filebuf::sungetc	A										<section class="prog__container">\n<p>If a putback position is available in the get area (<code>gptr(void) &gt; eback(void)</code>), then decrements the next pointer (gptr(void)) and returns the character it now points to.</p>\n<pre><code>int_type sungetc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sungetc
std::basic_streambuf::sungetc	A										<section class="prog__container">\n<p>If a putback position is available in the get area (<code>gptr(void) &gt; eback(void)</code>), then decrements the next pointer (gptr(void)) and returns the character it now points to.</p>\n<pre><code>int_type sungetc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sungetc
std::basic_stringbuf::sungetc	A										<section class="prog__container">\n<p>If a putback position is available in the get area (<code>gptr(void) &gt; eback(void)</code>), then decrements the next pointer (gptr(void)) and returns the character it now points to.</p>\n<pre><code>int_type sungetc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sungetc
std::strstreambuf::sungetc	A										<section class="prog__container">\n<p>If a putback position is available in the get area (<code>gptr(void) &gt; eback(void)</code>), then decrements the next pointer (gptr(void)) and returns the character it now points to.</p>\n<pre><code>int_type sungetc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/sungetc
std::basic_filebuf::swap	A										<section class="prog__container">\n<p>Exchanges  the contents of the stream buffer with those of <code>other</code>.</p>\n<pre><code>void swap( basic_streambuf& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/swap
std::basic_streambuf::swap	A										<section class="prog__container">\n<p>Exchanges  the contents of the stream buffer with those of <code>other</code>.</p>\n<pre><code>void swap( basic_streambuf& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/swap
std::basic_stringbuf::swap	A										<section class="prog__container">\n<p>Exchanges  the contents of the stream buffer with those of <code>other</code>.</p>\n<pre><code>void swap( basic_streambuf& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/swap
std::strstreambuf::swap	A										<section class="prog__container">\n<p>Exchanges  the contents of the stream buffer with those of <code>other</code>.</p>\n<pre><code>void swap( basic_streambuf& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/swap
std::basic_filebuf::uflow	A										<section class="prog__container">\n<p>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).</p>\n<pre><code>virtual int_type uflow(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/uflow
std::basic_streambuf::uflow	A										<section class="prog__container">\n<p>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).</p>\n<pre><code>virtual int_type uflow(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/uflow
std::basic_stringbuf::uflow	A										<section class="prog__container">\n<p>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).</p>\n<pre><code>virtual int_type uflow(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/uflow
std::strstreambuf::uflow	A										<section class="prog__container">\n<p>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed).</p>\n<pre><code>virtual int_type uflow(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/uflow
std::basic_filebuf::underflow	A										<section class="prog__container">\n<p>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed) and reading more data in from the input sequence (if applicable).</p>\n<pre><code>virtual int_type underflow(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/underflow
std::basic_streambuf::underflow	A										<section class="prog__container">\n<p>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed) and reading more data in from the input sequence (if applicable).</p>\n<pre><code>virtual int_type underflow(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/underflow
std::basic_stringbuf::underflow	A										<section class="prog__container">\n<p>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed) and reading more data in from the input sequence (if applicable).</p>\n<pre><code>virtual int_type underflow(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/underflow
std::strstreambuf::underflow	A										<section class="prog__container">\n<p>Ensures that at least one character is available in the input area by updating the pointers to the input area (if needed) and reading more data in from the input sequence (if applicable).</p>\n<pre><code>virtual int_type underflow(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/underflow
std::basic_streambuf::~basic_streambuf	A										<section class="prog__container">\n<p>This destruction is empty: the members of this <code>basic_streambuf</code> (the pointers and the locale) are destructed in accordance with the usual object destruction sequence after this destructor...</p>\n<pre><code>virtual ~basic_streambuf(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_streambuf/~basic_streambuf
std::basic_stringbuf	A										<section class="prog__container">\n<p><code>std::basic_stringbuf</code> is a std::basic_streambuf whose associated character sequence is a memory-resident sequence of arbitrary characters, which can be initialized from or made available...</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;, \n    class Allocator = std::allocator&lt;CharT&gt; \n&gt; class basic_stringbuf : public std::basic_streambuf&lt;CharT, Traits&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf
std::basic_stringbuf::operator=	A										<section class="prog__container">\n<p> Move assignment operator: Moves the contents of <code>rhs</code> into <code>*this</code>.</p>\n<pre><code>std::basic_stringbuf& operator=( std::basic_stringbuf&& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf/operator=
std::basic_stringbuf::overflow	A										<section class="prog__container">\n<p>Appends the character <code>c</code> to the output character sequence.</p>\n<pre><code>protected:\nvirtual int_type overflow ( int_type c = Traits::eof(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf/overflow
std::basic_stringbuf::pbackfail	A										<section class="prog__container">\n<p>This protected virtual function is called by the public functions basic_streambuf::sungetc and basic_streambuf::sputbackc (which, in turn, are called by basic_istream::unget and...</p>\n<pre><code>protected:\nvirtual int_type pbackfail( int_type c = Traits::eof(void) )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf/pbackfail
std::basic_stringbuf::seekoff	A										<section class="prog__container">\n<p>Repositions std::basic_streambuf::gptr and/or std::basic_streambuf::pptr, if possible, to the position that corresponds to exactly <code>off</code> characters from beginning, end, or current position...</p>\n<pre><code>protected:\nvirtual pos_type seekoff(off_type off,\n                         ios_base::seekdir dir,\n                         ios_base::openmode which = ios_base::in | ios_base::out);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf/seekoff
std::basic_stringbuf::seekpos	A										<section class="prog__container">\n<p>Repositions std::basic_streambuf::gptr and/or std::basic_streambuf::pptr, if possible, to the position indicated by <code>sp</code>...</p>\n<pre><code>protected:\nvirtual pos_type seekpos(pos_type sp,\n                         std::ios_base::openmode which = std::ios_base::in | std::ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf/seekpos
std::basic_stringbuf::setbuf	A										<section class="prog__container">\n<p>If <code>s</code> is a null pointer and <code>n</code> is zero, this function has no effect.</p>\n<pre><code>protected:\nvirtual std::basic_streambuf&lt;CharT, Traits&gt;* setbuf( char_type* s, std::streamsize n )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf/setbuf
std::basic_stringbuf::str	A										<section class="prog__container">\n<p>Gets and sets the underlying string.</p>\n<pre><code>std::basic_string&lt;CharT, Traits, Allocator&gt; str(void) const;</code></pre><pre><code>void str( const std::basic_string&lt;CharT, Traits, Allocator&gt;& s);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf/str
std::basic_stringbuf::swap	A										<section class="prog__container">\n<p>Swaps the state and the contents of <code>*this</code> and <code>rhs</code>.</p>\n<pre><code>void swap( std::basic_stringbuf& rhs )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf/swap
std::basic_stringbuf::underflow	A										<section class="prog__container">\n<p>Reads the next character from the get area of the buffer.</p>\n<pre><code>protected:\nvirtual int_type underflow(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringbuf/underflow
std::basic_stringstream	A										<section class="prog__container">\n<p>The class template <code>std::basic_stringstream</code> implements input/output operations on memory (std::basic_string) based streams.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;,\n    class Allocator = std::allocator&lt;CharT&gt;\n&gt; class basic_stringstream;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringstream
std::basic_stringstream::basic_stringstream	A										<section class="prog__container">\n<p>Constructs new string stream.</p>\n<pre><code>explicit basic_stringstream( ios_base::openmode mode = ios_base::in|ios_base::out );</code></pre><pre><code>explicit basic_stringstream( const std::basic_string&lt;CharT,Traits,Allocator&gt;& str,\n                    ios_base::openmode mode = ios_base::in|ios_base::out );</code></pre><pre><code>basic_stringstream( basic_stringstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringstream/basic_stringstream
std::basic_stringstream::operator=	A										<section class="prog__container">\n<p>Moves the string stream.</p>\n<pre><code>basic_stringstream& operator=( basic_stringstream&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringstream/operator=
std::basic_stringstream::rdbuf	A										<section class="prog__container">\n<p>Returns pointer to the underlying raw string device object.</p>\n<pre><code>std::basic_stringbuf&lt;CharT, Traits, Allocator&gt;* rdbuf(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringstream/rdbuf
std::basic_stringstream::str	A										<section class="prog__container">\n<p>Manages the contents of the underlying string object.</p>\n<pre><code>std::basic_string&lt;CharT,Traits,Allocator&gt; str(void) const;</code></pre><pre><code>void str(const std::basic_string&lt;CharT,Traits,Allocator&gt;& new_str);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringstream/str
std::basic_stringstream::swap	A										<section class="prog__container">\n<p>Exchanges the state of the stream with those of <code>other</code>.</p>\n<pre><code>void swap( basic_stringstream& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/basic_stringstream/swap
std::clearerr	A										<section class="prog__container">\n<p>Resets the error flags and the <code>EOF</code> indicator for the given file stream.</p>\n<pre><code>void clearerr( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/clearerr
std::fclose	A										<section class="prog__container">\n<p>Closes the given file stream.</p>\n<pre><code>int fclose( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fclose
std::feof	A										<section class="prog__container">\n<p>Checks if the end of the given file stream has been reached.</p>\n<pre><code>int feof( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/feof
std::ferror	A										<section class="prog__container">\n<p>Checks the given stream for errors.</p>\n<pre><code>int ferror( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/ferror
std::fflush	A										<section class="prog__container">\n<p>For output streams (and for update streams on which the last operation was output), writes any unwritten data from the <code>stream</code>'s buffer to the associated output device.</p>\n<pre><code>int fflush( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fflush
std::fgetc	A										<section class="prog__container">\n<p>Reads the next character from the given input stream.</p>\n<pre><code>int fgetc( std::FILE* stream );\nint getc( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fgetc
std::getc	A										<section class="prog__container">\n<p>Reads the next character from the given input stream.</p>\n<pre><code>int fgetc( std::FILE* stream );\nint getc( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fgetc
std::fgetpos	A										<section class="prog__container">\n<p>Obtains the file position indicator and the current parse state (if any) for the file stream <code>stream</code> and stores them in the object pointed to by <code>pos</code>.</p>\n<pre><code>int fgetpos( std::FILE* stream, std::fpos_t* pos );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fgetpos
std::fgets	A										<section class="prog__container">\n<p>Reads at most <code>count - 1</code> characters from the given file stream and stores them in the character array pointed to by <code>str</code>.</p>\n<pre><code>char* fgets( char* str, int count, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fgets
std::fgetwc	A										<section class="prog__container">\n<p>Reads the next wide character from the given input stream.</p>\n<pre><code>wint_t fgetwc( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fgetwc
std::fgetws	A										<section class="prog__container">\n<p>Reads at most <code>count - 1</code> wide characters from the given file stream and stores them in <code>str</code>.</p>\n<pre><code>wchar_t* fgetws( wchar_t* str, int count, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fgetws
std::fopen	A										<section class="prog__container">\n<p>Opens a file indicated by <code>filename</code> and returns a file stream associated with that file.</p>\n<pre><code>std::FILE* fopen( const char* filename, const char* mode );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fopen
std::fprintf	A										<section class="prog__container">\n<p>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int fprintf( std::FILE* stream, const char* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fprintf
std::printf	A										<section class="prog__container">\n<p>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int printf( const char* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fprintf
std::snprintf	A										<section class="prog__container">\n<p>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int snprintf( char* buffer, std::size_t buf_size, const char* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fprintf
std::sprintf	A										<section class="prog__container">\n<p>Loads the data from the given locations, converts them to character string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int sprintf( char* buffer, const char* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fprintf
std::fputc	A										<section class="prog__container">\n<p>Writes a character <code>ch</code> to the given output stream <code>stream</code>.</p>\n<pre><code>int fputc( int ch, std::FILE* stream );\nint putc( int ch, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fputc
std::putc	A										<section class="prog__container">\n<p>Writes a character <code>ch</code> to the given output stream <code>stream</code>.</p>\n<pre><code>int fputc( int ch, std::FILE* stream );\nint putc( int ch, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fputc
std::fputs	A										<section class="prog__container">\n<p>Writes every character from the null-terminated string <code>str</code> to the output stream <code>stream</code>, as if by repeatedly executing std::fputc.</p>\n<pre><code>int fputs( const char* str, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fputs
std::fputwc	A										<section class="prog__container">\n<p>Writes a wide character <code>ch</code> to the given output stream <code>stream</code>.</p>\n<pre><code>wint_t fputwc( wchar_t ch, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fputwc
std::fputws	A										<section class="prog__container">\n<p>Writes every wide character from the null-terminated wide string <code>str</code> to the output stream <code>stream</code>, as if by repeatedly executing std::fputwc.</p>\n<pre><code>int fputws( const wchar_t* str, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fputws
std::fread	A										<section class="prog__container">\n<p>Reads up to <code>count</code> objects into the array <code>buffer</code> from the given input stream <code>stream</code> as if by calling std::fgetc <code>size</code> times for each object, and...</p>\n<pre><code>std::size_t fread( void* buffer, std::size_t size, std::size_t count, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fread
std::freopen	A										<section class="prog__container">\n<p>First, attempts to close the file associated with <code>stream</code>, ignoring any errors.</p>\n<pre><code>std::FILE* freopen( const char* filename, const char* mode, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/freopen
std::fscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.</p>\n<pre><code>int fscanf( std::FILE* stream, const char* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fscanf
std::scanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.</p>\n<pre><code>​int scanf( const char* format, ... );​</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fscanf
std::sscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.</p>\n<pre><code>int sscanf( const char* buffer, const char* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fscanf
std::fseek	A										<section class="prog__container">\n<p>Sets the file position indicator for the file stream <code>stream</code>.</p>\n<pre><code>int fseek( std::FILE* stream, long offset, int origin );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fseek
std::fsetpos	A										<section class="prog__container">\n<p>Sets the file position indicator and the multibyte parsing state (if any) for the C file stream <code>stream</code> according to the value pointed to by <code>pos</code>.</p>\n<pre><code>int fsetpos( std::FILE* stream, const std::fpos_t* pos );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fsetpos
std::ftell	A										<section class="prog__container">\n<p>Returns the current value of the file position indicator for the file stream <code>stream</code>.</p>\n<pre><code>long ftell( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/ftell
std::fwprintf	A										<section class="prog__container">\n<p>Loads the data from the given locations, converts them to wide string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int fwprintf( std::FILE* stream, const wchar_t* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fwprintf
std::swprintf	A										<section class="prog__container">\n<p>Loads the data from the given locations, converts them to wide string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int swprintf( wchar_t* buffer, std::size_t size, const wchar_t* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fwprintf
std::wprintf	A										<section class="prog__container">\n<p>Loads the data from the given locations, converts them to wide string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int wprintf( const wchar_t* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fwprintf
std::fwrite	A										<section class="prog__container">\n<p>Writes up to <code>count</code> binary objects from the given array <code>buffer</code> to the output stream <code>stream</code>.</p>\n<pre><code>std::size_t fwrite( const void* buffer, std::size_t size, std::size_t count, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fwrite
std::fwscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.</p>\n<pre><code>int fwscanf( std::FILE* stream, const wchar_t* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fwscanf
std::swscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.</p>\n<pre><code>int swscanf( const wchar_t* buffer, const wchar_t* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fwscanf
std::wscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into given locations.</p>\n<pre><code>int wscanf( const wchar_t* format, ... );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/fwscanf
std::getchar	A										<section class="prog__container">\n<p>Reads the next character from stdin.</p>\n<pre><code>int getchar(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/getchar
std::getwchar	A										<section class="prog__container">\n<p>Reads the next wide character from stdin.</p>\n<pre><code>wint_t getwchar(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/getwchar
std::perror	A										<section class="prog__container">\n<p>Prints a textual description of the error code currently stored in the system variable errno to stderr.</p>\n<pre><code>void perror( const char *s );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/perror
std::putchar	A										<section class="prog__container">\n<p>Writes a character <code>ch</code> to <code>stdout</code>.</p>\n<pre><code>int putchar( int ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/putchar
std::puts	A										<section class="prog__container">\n<p>Writes every character from the null-terminated string <code>str</code> and one additional newline character <code>'\n'</code> to the output stream stdout, as if by repeatedly executing std::fputc.</p>\n<pre><code>int puts( const char *str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/puts
std::putwchar	A										<section class="prog__container">\n<p>Writes a wide character <code>ch</code> to <code>stdout</code>...</p>\n<pre><code>wint_t putwchar( wchar_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/putwchar
std::rename	A										<section class="prog__container">\n<p>Changes the filename of a file.</p>\n<pre><code>int rename( const char *old_filename, const char *new_filename );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/rename
std::rewind	A										<section class="prog__container">\n<p>Moves the file position indicator to the beginning of the given file stream.</p>\n<pre><code>void rewind( std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/rewind
std::setbuf	A										<section class="prog__container">\n<p>Sets the internal buffer to use for I/O operations performed on the C stream <code>stream</code>.</p>\n<pre><code>void setbuf( std::FILE* stream, char* buffer );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/setbuf
std::setvbuf	A										<section class="prog__container">\n<p>Changes the the buffering mode of the given file stream <code>stream</code> as indicated by the argument <code>mode</code>.</p>\n<pre><code>int setvbuf( std::FILE* stream, char* buffer, int mode, std::size_t size );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/setvbuf
std::tmpfile	A										<section class="prog__container">\n<p>Creates and opens a temporary file with unique auto-generated filename.</p>\n<pre><code>std::FILE* tmpfile(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/tmpfile
std::tmpnam	A										<section class="prog__container">\n<p>Creates a unique filename that does not name a currently existing file, and stores it in the character string pointed to by <code>filename</code>.</p>\n<pre><code>char* tmpnam( char* filename );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/tmpnam
std::ungetc	A										<section class="prog__container">\n<p>If <code>ch</code> does not equal EOF, pushes the character <code>ch</code> (reinterpreted as <code>unsigned char</code>) into the input buffer associated with the stream <code>stream</code> in such...</p>\n<pre><code>int ungetc( int ch, std::FILE *stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/ungetc
std::ungetwc	A										<section class="prog__container">\n<p>If <code>ch</code> does not equal WEOF, pushes the wide character <code>ch</code> into the input buffer associated with the stream <code>stream</code> in such a manner than subsequent read operation...</p>\n<pre><code>wint_t ungetwc( wint_t ch, std::FILE* stream );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/ungetwc
std::vfprintf	A										<section class="prog__container">\n<p>Loads the data from the locations, defined by <code>vlist</code>, converts them to character string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int vfprintf( std::FILE* stream, const char* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfprintf
std::vprintf	A										<section class="prog__container">\n<p>Loads the data from the locations, defined by <code>vlist</code>, converts them to character string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int vprintf( const char* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfprintf
std::vsnprintf	A										<section class="prog__container">\n<p>Loads the data from the locations, defined by <code>vlist</code>, converts them to character string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int vsnprintf( char* buffer, std::size_t buf_size, const char* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfprintf
std::vsprintf	A										<section class="prog__container">\n<p>Loads the data from the locations, defined by <code>vlist</code>, converts them to character string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int vsprintf( char* buffer, const char* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfprintf
std::vfscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.</p>\n<pre><code>int vfscanf( std::FILE* stream, const char* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfscanf
std::vscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.</p>\n<pre><code>​int vscanf( const char* format, va_list vlist );​</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfscanf
std::vsscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.</p>\n<pre><code>int vsscanf( const char* buffer, const char* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfscanf
std::vfwprintf	A										<section class="prog__container">\n<p>Loads the data from locations, defined by <code>vlist</code>,, converts them to wide string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int vfwprintf( std::FILE* stream, const wchar_t* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfwprintf
std::vswprintf	A										<section class="prog__container">\n<p>Loads the data from locations, defined by <code>vlist</code>,, converts them to wide string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int vswprintf( const wchar_t* buffer, std::size_t buf_size,\n               const wchar_t* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfwprintf
std::vwprintf	A										<section class="prog__container">\n<p>Loads the data from locations, defined by <code>vlist</code>,, converts them to wide string equivalents and writes the results to a variety of sinks.</p>\n<pre><code>int vwprintf( const wchar_t* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfwprintf
std::vfwscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.</p>\n<pre><code>int vfwscanf( std::FILE* stream, const wchar_t* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfwscanf
std::vswscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.</p>\n<pre><code>int vswscanf( const wchar_t* buffer, const wchar_t* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfwscanf
std::vwscanf	A										<section class="prog__container">\n<p>Reads data from the a variety of sources, interprets it according to <code>format</code> and stores the results into locations defined by <code>vlist</code>.</p>\n<pre><code>int vwscanf( const wchar_t* format, va_list vlist );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/c/vfwscanf
std::cerr	A										<section class="prog__container">\n<p>The global objects <code>std::cerr</code> and <code>std::wcerr</code> control output to a stream buffer of implementation-defined type (derived from std::streambuf and std::wstreambuf, respectively)...</p>\n<pre><code>extern std::ostream cerr;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/cerr
std::wcerr	A										<section class="prog__container">\n<p>The global objects <code>std::cerr</code> and <code>std::wcerr</code> control output to a stream buffer of implementation-defined type (derived from std::streambuf and std::wstreambuf, respectively)...</p>\n<pre><code>extern std::wostream wcerr;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/cerr
std::cin	A										<section class="prog__container">\n<p>The global objects <code>std::cin</code> and <code>std::wcin</code> control input from a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C...</p>\n<pre><code>extern std::istream cin;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/cin
std::wcin	A										<section class="prog__container">\n<p>The global objects <code>std::cin</code> and <code>std::wcin</code> control input from a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C...</p>\n<pre><code>extern std::wistream wcin;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/cin
std::clog	A										<section class="prog__container">\n<p>The global objects <code>std::clog</code> and <code>std::wclog</code> control output to a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C...</p>\n<pre><code>extern std::ostream clog;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/clog
std::wclog	A										<section class="prog__container">\n<p>The global objects <code>std::clog</code> and <code>std::wclog</code> control output to a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C...</p>\n<pre><code>extern std::wostream wclog;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/clog
std::cout	A										<section class="prog__container">\n<p>The global objects <code>std::cout</code> and <code>std::wcout</code> control output to a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C...</p>\n<pre><code>extern std::ostream cout;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/cout
std::wcout	A										<section class="prog__container">\n<p>The global objects <code>std::cout</code> and <code>std::wcout</code> control output to a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C...</p>\n<pre><code>extern std::wostream wcout;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/cout
std::fpos	A										<section class="prog__container">\n<p>Specializations of the class template std::fpos identify absolute positions in a stream or in a file.</p>\n<pre><code>template&lt; class State &gt;\nclass fpos;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/fpos
std::fpos::state	A										<section class="prog__container">\n<p>Manages the file position state.</p>\n<pre><code>State state(void) const;</code></pre><pre><code>void state( State st );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/fpos/state
std::ios_base	A										<section class="prog__container">\n<p>The class <code>ios_base</code> is a multipurpose class that serves as the base class for all I/O stream classes.</p>\n<pre><code>class ios_base;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base
std::basic_fstream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_ifstream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_ios::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_iostream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_istream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_istringstream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_ofstream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_ostream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_ostringstream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_stringstream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::ios_base::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::istrstream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::ostrstream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::strstream::Init	A										<section class="prog__container">\n<p>This class is used to ensure that the default C++ streams (std::cin, std::cout, etc.</p>\n<pre><code>class Init;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/Init
std::basic_fstream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_ifstream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_ios::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_iostream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_istream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_istringstream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_ofstream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_ostream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_ostringstream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_stringstream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::ios_base::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::istrstream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::ostrstream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::strstream::failure	A										<section class="prog__container">\n<p>The class std::ios_base::failure defines an exception object that is thrown on failure by the functions in the Input/Output library.</p>\n<pre><code>class failure;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/failure
std::basic_fstream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_ifstream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_ios::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_iostream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_istream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_istringstream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_ofstream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_ostream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_ostringstream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_stringstream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::ios_base::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::istrstream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::ostrstream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::strstream::flags	A										<section class="prog__container">\n<p>Manages format flags.</p>\n<pre><code>fmtflags flags(void) const;</code></pre><pre><code>fmtflags flags( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/flags
std::basic_fstream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_ifstream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_ios::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_iostream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_istream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_istringstream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_ofstream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_ostream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_ostringstream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_stringstream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::ios_base::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::istrstream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::ostrstream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::strstream::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the stream.</p>\n<pre><code>std::locale getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/getloc
std::basic_fstream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::basic_ifstream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::basic_ios::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::basic_iostream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::basic_istream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::basic_istringstream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::basic_ofstream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::basic_ostream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::basic_ostringstream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::basic_stringstream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::ios_base::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::istrstream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::ostrstream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::strstream::imbue	A										<section class="prog__container">\n<p>Sets the associated locale of the stream to the given one.</p>\n<pre><code>std::locale imbue( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/imbue
std::ios_base::ios_base	A										<section class="prog__container">\n<p>1) The copy constuctor is deleted: streams are not copyable...</p>\n<pre><code>protected:\nios_base(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/ios_base
std::basic_fstream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_ifstream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_ios::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_iostream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_istream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_istringstream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_ofstream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_ostream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_ostringstream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_stringstream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::ios_base::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::istrstream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::ostrstream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::strstream::iword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>long</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>long& iword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/iword
std::basic_fstream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_ifstream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_ios::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_iostream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_istream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_istringstream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_ofstream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_ostream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_ostringstream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_stringstream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::ios_base::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::istrstream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::ostrstream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::strstream::precision	A										<section class="prog__container">\n<p>Manages the precision (i.e. how many digits are generated) of floating point output performed by std::num_put::do_put.</p>\n<pre><code>streamsize precision(void) const;</code></pre><pre><code>streamsize precision( streamsize new_precision );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/precision
std::basic_fstream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_ifstream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_ios::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_iostream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_istream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_istringstream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_ofstream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_ostream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_ostringstream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_stringstream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::ios_base::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::istrstream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::ostrstream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::strstream::pword	A										<section class="prog__container">\n<p>First, allocates or resizes the private storage (dynamic array of <code>void*</code> or another indexable data structure) sufficiently to make <code>index</code> a valid index, then returns a...</p>\n<pre><code>void*& pword( int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/pword
std::basic_fstream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_ifstream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_ios::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_iostream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_istream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_istringstream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_ofstream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_ostream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_ostringstream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_stringstream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::ios_base::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::istrstream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::ostrstream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::strstream::register_callback	A										<section class="prog__container">\n<p>Registers a user-defined function which will be called by imbue(void), std::basic_ios::copyfmt(void) and ~ios_base(void).</p>\n<pre><code>void register_callback( event_callback function, int index );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/register_callback
std::basic_fstream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_ifstream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_ios::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_iostream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_istream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_istringstream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_ofstream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_ostream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_ostringstream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_stringstream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::ios_base::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::istrstream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::ostrstream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::strstream::setf	A										<section class="prog__container">\n<p>Sets the formatting flags to specified settings.</p>\n<pre><code>fmtflags setf( fmtflags flags );</code></pre><pre><code>fmtflags setf( fmtflags flags, fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/setf
std::basic_fstream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_ifstream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_ios::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_iostream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_istream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_istringstream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_ofstream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_ostream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_ostringstream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_stringstream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::ios_base::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::istrstream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::ostrstream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::strstream::sync_with_stdio	A										<section class="prog__container">\n<p>Sets whether the standard C++ streams are synchronized to the standard C streams after each input/output operation.</p>\n<pre><code>static bool sync_with_stdio( bool sync = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio
std::basic_fstream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_ifstream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_ios::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_iostream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_istream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_istringstream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_ofstream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_ostream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_ostringstream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_stringstream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::ios_base::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::istrstream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::ostrstream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::strstream::unsetf	A										<section class="prog__container">\n<p>Unsets the formatting flags identified by <code>flags</code>.</p>\n<pre><code>void unsetf( fmtflags flags );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/unsetf
std::basic_fstream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_ifstream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_ios::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_iostream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_istream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_istringstream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_ofstream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_ostream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_ostringstream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_stringstream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::ios_base::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::istrstream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::ostrstream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::strstream::width	A										<section class="prog__container">\n<p>Manages the minimum number of characters to generate on certain output operations and the maximum number of characters to generate on certain output operations.</p>\n<pre><code>streamsize width(void) const;</code></pre><pre><code>streamsize width( streamsize new_width );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/width
std::basic_fstream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::basic_ifstream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::basic_ios::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::basic_iostream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::basic_istream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::basic_istringstream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::basic_ofstream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::basic_ostream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::basic_ostringstream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::basic_stringstream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::ios_base::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::istrstream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::ostrstream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::strstream::xalloc	A										<section class="prog__container">\n<p>Returns a unique (program-wide) index value that can be used to access one <code>long</code> and one <code>void*</code> elements in the private storage of <code>std::ios_base</code> by calling...</p>\n<pre><code>static int xalloc(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/xalloc
std::ios_base::~ios_base	A										<section class="prog__container">\n<p>Destroys the <code>ios_base</code> object.</p>\n<pre><code>virtual ~ios_base(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ios_base/~ios_base
std::iostream_category	A										<section class="prog__container">\n<p>Obtains a reference to the static error category object for iostream errors.</p>\n<pre><code>const std::error_category& iostream_category(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/iostream_category
std::istrstream	A										<section class="prog__container">\n<p>The class <code>istrstream</code> implements input operations on array-backed streams.</p>\n<pre><code>class istrstream : public std::istream</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/istrstream
std::istrstream::istrstream	A										<section class="prog__container">\n<p>Constructs new istrstream and its underlying std::strstreambuf.</p>\n<pre><code>explicit istrstream(const char* s);</code></pre><pre><code>explicit istrstream(char* s);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/istrstream/istrstream
std::istrstream::rdbuf	A										<section class="prog__container">\n<p>Returns a pointer to the associated <code>std::strstreambuf</code>, casting away its constness (despite the const qualifier on the member function)...</p>\n<pre><code>strstreambuf* rdbuf(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/istrstream/rdbuf
std::istrstream::str	A										<section class="prog__container">\n<p>Returns the pointer to the beginning of the buffer, after freezing it.</p>\n<pre><code>char* str(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/istrstream/str
std::istrstream::~istrstream	A										<section class="prog__container">\n<p>Destroys a <code>std::istrstream</code> object, which also destroys the member std::strstreambuf.</p>\n<pre><code>virtual ~istrstream(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/istrstream/~istrstream
std::boolalpha	A										<section class="prog__container">\n<p> Enables the <code>boolalpha</code> flag in the stream <code>str</code> as if by calling <code>str.setf(std::ios_base::boolalpha)</code>...</p>\n<pre><code>std::ios_base& boolalpha( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/boolalpha
std::noboolalpha	A										<section class="prog__container">\n<p> Disables the <code>boolalpha</code> flag in the stream <code>str</code> as if by calling <code>str.unsetf(std::ios_base::boolalpha)</code>...</p>\n<pre><code>std::ios_base& noboolalpha( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/boolalpha
std::endl	A										<section class="prog__container">\n<p>Inserts a newline character into the output sequence <code>os</code> and flushes it as if by calling <code>os.put(os.widen('\n'))</code> followed by <code>os.flush(void)</code>.</p>\n<pre><code>template&lt; class CharT, class Traits &gt;\nstd::basic_ostream&lt;CharT, Traits&gt;& endl( std::basic_ostream&lt;CharT, Traits&gt;& os );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/endl
std::ends	A										<section class="prog__container">\n<p>Inserts a null character into the output sequence <code>os</code> as if by calling <code>os.put(CharT(void))</code>.</p>\n<pre><code>template&lt; class CharT, class Traits &gt;\nstd::basic_ostream&lt;CharT, Traits&gt;& ends( std::basic_ostream&lt;CharT, Traits&gt;& os );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/ends
std::defaultfloat	A										<section class="prog__container">\n<p>Modifies the default formatting for floating-point input/output.</p>\n<pre><code>std::ios_base& defaultfloat( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/fixed
std::fixed	A										<section class="prog__container">\n<p>Modifies the default formatting for floating-point input/output.</p>\n<pre><code>std::ios_base& fixed( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/fixed
std::hexfloat	A										<section class="prog__container">\n<p>Modifies the default formatting for floating-point input/output.</p>\n<pre><code>std::ios_base& hexfloat( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/fixed
std::scientific	A										<section class="prog__container">\n<p>Modifies the default formatting for floating-point input/output.</p>\n<pre><code>std::ios_base& scientific( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/fixed
std::flush	A										<section class="prog__container">\n<p>Flushes the output sequence <code>os</code> as if by calling <code>os.flush(void)</code>.</p>\n<pre><code>template&lt; class CharT, class Traits &gt;\nstd::basic_ostream&lt;CharT, Traits&gt;& flush( std::basic_ostream&lt;CharT, Traits&gt;& os );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/flush
std::get_money	A										<section class="prog__container">\n<p>When used in an expression <code>in &gt;&gt; get_money(mon, intl)</code>, parses the character input as a monetary value, as specified by the std::money_get facet of the locale currently imbued in...</p>\n<pre><code>template&lt; class MoneyT &gt;\n/*unspecified*/ get_money( MoneyT& mon, bool intl = false );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/get_money
std::get_time	A										<section class="prog__container">\n<p>When used in an expression <code>in &gt;&gt; get_time(tmb, fmt)</code>, parses the character input as a date/time value according to format string <code>fmt</code> according to the std::time_get...</p>\n<pre><code>template&lt; class CharT &gt;\n/*unspecified*/ get_time( std::tm* tmb, const CharT* fmt);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/get_time
std::dec	A										<section class="prog__container">\n<p>Modifies the default numeric base for integer I/O.</p>\n<pre><code>std::ios_base& dec( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/hex
std::hex	A										<section class="prog__container">\n<p>Modifies the default numeric base for integer I/O.</p>\n<pre><code>std::ios_base& hex( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/hex
std::oct	A										<section class="prog__container">\n<p>Modifies the default numeric base for integer I/O.</p>\n<pre><code>std::ios_base& oct( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/hex
std::internal	A										<section class="prog__container">\n<p>Modifies the default positioning of the fill characters.</p>\n<pre><code>std::ios_base& internal( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/left
std::left	A										<section class="prog__container">\n<p>Modifies the default positioning of the fill characters.</p>\n<pre><code>std::ios_base& left( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/left
std::right	A										<section class="prog__container">\n<p>Modifies the default positioning of the fill characters.</p>\n<pre><code>std::ios_base& right( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/left
std::put_money	A										<section class="prog__container">\n<p>When used in an expression <code>out &lt;&lt; put_money(mon, intl)</code>, converts the monetary value <code>mon</code> to its character representation as specified by the std::money_put facet of the...</p>\n<pre><code>template&lt; class MoneyT &gt;\n/*unspecified*/ put_money( const MoneyT& mon, bool intl = false );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/put_money
std::put_time	A										<section class="prog__container">\n<p>When used in an expression <code>out &lt;&lt; put_time(tmb, fmt)</code>, converts the date and time information from a given calendar time <code>tmb</code> to a character string according to format...</p>\n<pre><code>template&lt; class CharT &gt;\n/*unspecified*/ put_time( const std::tm* tmb, const CharT* fmt );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/put_time
std::quoted	A										<section class="prog__container">\n<p>Allows insertion and extraction of quoted strings, such as the ones found in CSV or XML.</p>\n<pre><code>template&lt; class CharT &gt;\n/*unspecified*/ quoted(const CharT* s,\n                       CharT delim=CharT('"'), CharT escape=CharT('\\'));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/io/manip/quoted
std::resetiosflags	A										<section class="prog__container">\n<p>When used in an expression <code>out &lt;&lt; resetiosflags(mask)</code> or <code>in &gt;&gt; resetiosflags(mask)</code>, clears all format flags of the stream <code>out</code> or <code>in</code> as...</p>\n<pre><code>/*unspecified*/ resetiosflags( std::ios_base::fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/resetiosflags
std::setbase	A										<section class="prog__container">\n<p>Sets the numeric base of the stream.</p>\n<pre><code>/*unspecified*/ setbase( int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/setbase
std::setfill	A										<section class="prog__container">\n<p>When used in an expression <code>out &lt;&lt; setfill(c)</code> sets the fill character of the stream <code>out</code> to <code>c</code>.</p>\n<pre><code>template&lt; class CharT &gt;\n/*unspecified*/ setfill( CharT c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/setfill
std::setiosflags	A										<section class="prog__container">\n<p>When used in an expression <code>out &lt;&lt; setiosflags(mask)</code> or <code>in &gt;&gt; setiosflags(mask)</code>, sets all format flags of the stream <code>out</code> or <code>in</code> as...</p>\n<pre><code>/*unspecified*/ setiosflags( std::ios_base::fmtflags mask );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/setiosflags
std::setprecision	A										<section class="prog__container">\n<p>When used in an expression <code>out &lt;&lt; setprecision(n)</code> or <code>in &gt;&gt; setprecision(n)</code>, sets the <code>precision</code> parameter of the stream <code>out</code> or...</p>\n<pre><code>/*unspecified*/ setprecision( int n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/setprecision
std::setw	A										<section class="prog__container">\n<p>When used in an expression <code>out &lt;&lt; setw(n)</code> or <code>in &gt;&gt; setw(n)</code>, sets the <code>width</code> parameter of the stream <code>out</code> or <code>in</code> to exactly...</p>\n<pre><code>/*unspecified*/ setw( int n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/setw
std::noshowbase	A										<section class="prog__container">\n<p>1) enables the <code>showbase</code> flag in the stream <code>str</code> as if by calling <code>str.setf(std::ios_base::showbase)</code>...</p>\n<pre><code>std::ios_base& noshowbase( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/showbase
std::showbase	A										<section class="prog__container">\n<p>1) enables the <code>showbase</code> flag in the stream <code>str</code> as if by calling <code>str.setf(std::ios_base::showbase)</code>...</p>\n<pre><code>std::ios_base& showbase( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/showbase
std::noshowpoint	A										<section class="prog__container">\n<p>Enables or disables the unconditional inclusion of the decimal point character in floating-point output.</p>\n<pre><code>std::ios_base& noshowpoint( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/showpoint
std::showpoint	A										<section class="prog__container">\n<p>Enables or disables the unconditional inclusion of the decimal point character in floating-point output.</p>\n<pre><code>std::ios_base& showpoint( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/showpoint
std::noshowpos	A										<section class="prog__container">\n<p>Enables or disables the display of the plus sign <code>'+'</code> in non-negative integer output.</p>\n<pre><code>std::ios_base& noshowpos( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/showpos
std::showpos	A										<section class="prog__container">\n<p>Enables or disables the display of the plus sign <code>'+'</code> in non-negative integer output.</p>\n<pre><code>std::ios_base& showpos( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/showpos
std::noskipws	A										<section class="prog__container">\n<p>Enables or disables skipping of leading whitespace by the formatted input functions (enabled by default).</p>\n<pre><code>std::ios_base& noskipws( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/skipws
std::skipws	A										<section class="prog__container">\n<p>Enables or disables skipping of leading whitespace by the formatted input functions (enabled by default).</p>\n<pre><code>std::ios_base& skipws( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/skipws
std::nounitbuf	A										<section class="prog__container">\n<p>Enables or disables automatic flushing of the output stream after any output operation.</p>\n<pre><code>std::ios_base& nounitbuf( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/unitbuf
std::unitbuf	A										<section class="prog__container">\n<p>Enables or disables automatic flushing of the output stream after any output operation.</p>\n<pre><code>std::ios_base& unitbuf( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/unitbuf
std::nouppercase	A										<section class="prog__container">\n<p>Enables the use of uppercase characters in floating-point and hexadecimal integer output.</p>\n<pre><code>std::ios_base& nouppercase( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/uppercase
std::uppercase	A										<section class="prog__container">\n<p>Enables the use of uppercase characters in floating-point and hexadecimal integer output.</p>\n<pre><code>std::ios_base& uppercase( std::ios_base& str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/uppercase
std::ws	A										<section class="prog__container">\n<p>Discards leading whitespace from an input stream.</p>\n<pre><code>template&lt; class CharT, class Traits &gt;\nstd::basic_istream&lt;CharT,Traits&gt;& ws( std::basic_istream&lt;CharT, Traits&gt;& is );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/manip/ws
std::ostrstream	A										<section class="prog__container">\n<p>The class <code>ostrstream</code> implements output operations on array-backed streams.</p>\n<pre><code>class ostrstream : public std::ostream</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ostrstream
std::ostrstream::freeze	A										<section class="prog__container">\n<p>If the stream is using a dynamically-allocated array for output, disables (<code>flag == true</code>) or enables (<code>flag == false</code>) automatic allocation/deallocation of the buffer.</p>\n<pre><code>void freeze(bool flag = true);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ostrstream/freeze
std::ostrstream::pcount	A										<section class="prog__container">\n<p>Returns the number of characters that were output in the put area of the associated <code>std::strstreambuf</code>.</p>\n<pre><code>int pcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ostrstream/pcount
std::ostrstream::rdbuf	A										<section class="prog__container">\n<p>Returns a pointer to the associated <code>std::strstreambuf</code>, casting away its constness (despite the const qualifier on the member function)...</p>\n<pre><code>strstreambuf* rdbuf(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ostrstream/rdbuf
std::ostrstream::str	A										<section class="prog__container">\n<p>Returns the pointer to the beginning of the buffer, after freezing it.</p>\n<pre><code>char* str(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ostrstream/str
std::ostrstream::~ostrstream	A										<section class="prog__container">\n<p>Destroys a <code>std::ostrstream</code> object, which also destroys the member std::strstreambuf, which may call the deallocation function if the underlying buffer was dynamically-allocated and not...</p>\n<pre><code>virtual ~ostrstream(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/ostrstream/~ostrstream
std::strstream	A										<section class="prog__container">\n<p>The class <code>strstream</code> implements input and output operations on array-backed streams.</p>\n<pre><code>class strstream : public std::iostream</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstream
std::strstream::freeze	A										<section class="prog__container">\n<p>If the stream is using a dynamically-allocated array for output, disables (<code>flag == true</code>) or enables (<code>flag == false</code>) automatic allocation/deallocation of the buffer.</p>\n<pre><code>void freeze(bool flag = true);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstream/freeze
std::strstream::pcount	A										<section class="prog__container">\n<p>Returns the number of characters that were output in the put area of the associated <code>std::strstreambuf</code>.</p>\n<pre><code>int pcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstream/pcount
std::strstream::rdbuf	A										<section class="prog__container">\n<p>Returns a pointer to the associated <code>std::strstreambuf</code>, casting away its constness (despite the const qualifier on the member function)...</p>\n<pre><code>strstreambuf* rdbuf(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstream/rdbuf
std::strstream::str	A										<section class="prog__container">\n<p>Returns the pointer to the beginning of the buffer, after freezing it.</p>\n<pre><code>char* str(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstream/str
std::strstream::~strstream	A										<section class="prog__container">\n<p>Destroys a <code>std::strstream</code> object, which also destroys the member std::strstreambuf, which may call the deallocation function if the underlying buffer was dynamically-allocated and not...</p>\n<pre><code>virtual ~strstream(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstream/~strstream
std::strstreambuf	A										<section class="prog__container">\n<p><code>std::strstreambuf</code> is a std::basic_streambuf whose associated character sequence is a character array, which may be constant (e.</p>\n<pre><code>class strstreambuf : public std::basic_streambuf&lt;char&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf
std::strstreambuf::freeze	A										<section class="prog__container">\n<p>If the buffer uses dynamic allocation, sets the frozen status of the stream to <code>freezefl</code>.</p>\n<pre><code>void freeze( bool freezefl = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/freeze
std::strstreambuf::overflow	A										<section class="prog__container">\n<p>Appends the character <code>c</code> to the put area of the buffer, reallocating if possible.</p>\n<pre><code>protected:\nvirtual int_type overflow (int_type c = EOF);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/overflow
std::strstreambuf::pbackfail	A										<section class="prog__container">\n<p>This protected virtual function is called by the public functions basic_streambuf::sungetc and basic_streambuf::sputbackc (which, in turn, are called by basic_istream::unget and...</p>\n<pre><code>protected:\nvirtual int_type pbackfail( int_type c = EOF );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/pbackfail
std::strstreambuf::pcount	A										<section class="prog__container">\n<p> Returns the number of characters written to the output sequence.</p>\n<pre><code>int pcount(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/pcount
std::strstreambuf::seekoff	A										<section class="prog__container">\n<p>Repositions std::basic_streambuf::gptr and/or std::basic_streambuf::pptr, if possible, to the position that corresponds to exactly <code>off</code> characters from beginning, end, or current position...</p>\n<pre><code>protected:\nvirtual pos_type seekoff(off_type off,\n                         ios_base::seekdir way,\n                         ios_base::openmode which = ios_base::in | ios_base::out);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/seekoff
std::strstreambuf::seekpos	A										<section class="prog__container">\n<p>Repositions std::basic_streambuf::gptr and/or std::basic_streambuf::pptr, if possible, to the position indicated by <code>sp</code>...</p>\n<pre><code>protected:\nvirtual pos_type seekpos(pos_type sp,\n                         std::ios_base::openmode which = std::ios_base::in | std::ios_base::out );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/seekpos
std::strstreambuf::setbuf	A										<section class="prog__container">\n<p>If <code>s</code> is a null pointer and <code>n</code> is zero, this function has no effect.</p>\n<pre><code>protected:\nvirtual streambuf&lt;char&gt;* setbuf(char* s, std::streamsize n);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/setbuf
std::strstreambuf::str	A										<section class="prog__container">\n<p>Calls freeze(void), then returns a copy of start pointer of the get area, std::streambuf::eback(void).</p>\n<pre><code>char* str(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/str
std::strstreambuf::strstreambuf	A										<section class="prog__container">\n<p> Constructs a <code>std::strstreambuf</code> object: initializes the base class by calling the default constructor of std::streambuf, initializes the buffer state to "dynamic" (the buffer will be...</p>\n<pre><code>explicit strstreambuf( std::streamsize alsize = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/strstreambuf
std::strstreambuf::underflow	A										<section class="prog__container">\n<p>Reads the next character from the get area of the buffer.</p>\n<pre><code>protected:\nvirtual int_type underflow(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/underflow
std::strstreambuf::~strstreambuf	A										<section class="prog__container">\n<p>Destroys a <code>std::strstreambuf</code> object.</p>\n<pre><code>virtual ~strstreambuf(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/io/strstreambuf/~strstreambuf
std::advance	A										<section class="prog__container">\n<p>Increments given iterator <code>it</code> by <code>n</code> elements.</p>\n<pre><code>template&lt; class InputIt, class Distance &gt;\nconstexpr void advance( InputIt& it, Distance n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/advance
std::back_insert_iterator	A										<section class="prog__container">\n<p><code>std::back_insert_iterator</code> is an <code>OutputIterator</code> that appends to a container for which it was constructed.</p>\n<pre><code>template&lt; class Container &gt;\nclass back_insert_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/back_insert_iterator
std::back_inserter	A										<section class="prog__container">\n<p><code>back_inserter</code> is a convenience function template that constructs a std::back_insert_iterator for the container <code>c</code> with the type deduced from the type of the argument.</p>\n<pre><code>template&lt; class Container &gt;\nstd::back_insert_iterator&lt;Container&gt; back_inserter( Container& c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/back_inserter
std::begin	A										<section class="prog__container">\n<p>Returns an iterator to the beginning of the given container <code>c</code> or array <code>array</code>.</p>\n<pre><code>template&lt; class C &gt; \nauto begin( C& c ) -&gt; decltype(c.begin(void));</code></pre><pre><code>template&lt; class C &gt; \nconstexpr auto begin( C& c ) -&gt; decltype(c.begin(void));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/iterator/begin
std::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the beginning of the given container <code>c</code> or array <code>array</code>.</p>\n<pre><code>template&lt; class C &gt; \nconstexpr auto cbegin( const C& c ) -&gt; decltype(std::begin(c));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/begin
std::data	A										<section class="prog__container">\n<p>Returns a pointer to the block of memory containing the elements of the container.</p>\n<pre><code>template &lt;class C&gt; \nconstexpr auto data(C& c) -&gt; decltype(c.data(void));</code></pre><pre><code>template &lt;class C&gt; \nconstexpr auto data(const C& c) -&gt; decltype(c.data(void));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/iterator/data
std::distance	A										<section class="prog__container">\n<p>Returns the number of elements between <code>first</code> and <code>last</code>.</p>\n<pre><code>template&lt; class InputIt &gt;\nconstexpr typename std::iterator_traits&lt;InputIt&gt;::difference_type \n    distance( InputIt first, InputIt last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/distance
std::empty	A										<section class="prog__container">\n<p>Returns whether the given container is empty.</p>\n<pre><code>template &lt;class C&gt;\nconstexpr auto empty(const C& c) -&gt; decltype(c.empty(void));</code></pre><pre><code>template &lt;class T, std::size_t N&gt;\nconstexpr bool empty(const T (&array)[N]) noexcept;</code></pre><pre><code>template &lt;class E&gt;\nconstexpr bool empty(std::initializer_list&lt;E&gt; il) noexcept;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/empty
std::cend	A										<section class="prog__container">\n<p>Returns an iterator to the end (i.e. the element after the last element) of the given container <code>c</code> or array <code>array</code>.</p>\n<pre><code>template&lt; class C &gt; \nconstexpr auto cend( const C& c ) -&gt; decltype(std::end(c));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/end
std::end	A										<section class="prog__container">\n<p>Returns an iterator to the end (i.e. the element after the last element) of the given container <code>c</code> or array <code>array</code>.</p>\n<pre><code>template&lt; class C &gt; \nauto end( C& c ) -&gt; decltype(c.end(void));</code></pre><pre><code>template&lt; class C &gt; \nconstexpr auto end( C& c ) -&gt; decltype(c.end(void));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/iterator/end
std::front_insert_iterator	A										<section class="prog__container">\n<p><code>std::front_insert_iterator</code> is an <code>OutputIterator</code> that prepends elements to a container for which it was constructed.</p>\n<pre><code>template&lt; class Container &gt;\nclass front_insert_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/front_insert_iterator
std::front_inserter	A										<section class="prog__container">\n<p><code>front_inserter</code> is a convenience function template that constructs a std::front_insert_iterator for the container <code>c</code> with the type deduced from the type of the argument.</p>\n<pre><code>template&lt; class Container &gt;\nstd::front_insert_iterator&lt;Container&gt; front_inserter( Container& c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/front_inserter
std::insert_iterator	A										<section class="prog__container">\n<p><code>std::insert_iterator</code> is an <code>OutputIterator</code> that inserts elements into a container for which it was constructed, at the position pointed to by the supplied iterator.</p>\n<pre><code>template&lt; class Container &gt;\nclass insert_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/insert_iterator
std::inserter	A										<section class="prog__container">\n<p><code>inserter</code> is a convenience function template that constructs a std::insert_iterator for the container <code>c</code> and its iterator <code>i</code> with the type deduced from the type of...</p>\n<pre><code>template&lt; class Container &gt;\nstd::insert_iterator&lt;Container&gt; inserter( Container& c, typename Container::iterator i );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/inserter
std::istream_iterator	A										<section class="prog__container">\n<p><code>std::istream_iterator</code> is a single-pass input iterator that reads successive objects of type <code>T</code> from the std::basic_istream object for which it was constructed, by calling the...</p>\n<pre><code>template&lt; class T,\n          class CharT = char,\n          class Traits = std::char_traits&lt;CharT&gt;,\n          class Distance = std::ptrdiff_t &gt;\nclass istream_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/istream_iterator
std::istreambuf_iterator	A										<section class="prog__container">\n<p><code>std::istreambuf_iterator</code> is a single-pass input iterator that reads successive characters from the std::basic_streambuf object for which it was constructed.</p>\n<pre><code>template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt; &gt;\nclass istreambuf_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/istreambuf_iterator
std::iterator	A										<section class="prog__container">\n<p><code>std::iterator</code> is the base class provided to simplify definitions of the required types for iterators.</p>\n<pre><code>template&lt; \n    class Category,\n    class T,\n    class Distance = std::ptrdiff_t,\n    class Pointer = T*,\n    class Reference = T& \n&gt; struct iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/iterator
std::bidirectional_iterator_tag	A										<section class="prog__container">\n<p>Defines the category of an iterator.</p>\n<pre><code>struct bidirectional_iterator_tag : public forward_iterator_tag { };</code></pre><pre><code>struct random_access_iterator_tag : public bidirectional_iterator_tag { };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/iterator_tags
std::forward_iterator_tag	A										<section class="prog__container">\n<p>Defines the category of an iterator.</p>\n<pre><code>struct forward_iterator_tag : public input_iterator_tag { };</code></pre><pre><code>struct bidirectional_iterator_tag : public forward_iterator_tag { };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/iterator_tags
std::input_iterator_tag	A										<section class="prog__container">\n<p>Defines the category of an iterator.</p>\n<pre><code>struct input_iterator_tag { };</code></pre><pre><code>struct forward_iterator_tag : public input_iterator_tag { };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/iterator_tags
std::output_iterator_tag	A										<section class="prog__container">\n<p>Defines the category of an iterator.</p>\n<pre><code>struct output_iterator_tag { };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/iterator_tags
std::random_access_iterator_tag	A										<section class="prog__container">\n<p>Defines the category of an iterator.</p>\n<pre><code>struct random_access_iterator_tag : public bidirectional_iterator_tag { };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/iterator_tags
std::iterator_traits	A										<section class="prog__container">\n<p><code>std::iterator_traits</code> is the type trait class that provides uniform interface to the properties of <code>Iterator</code> types.</p>\n<pre><code>template&lt; class Iterator&gt;\nstruct iterator_traits;</code></pre><pre><code>template&lt; class T &gt;\nstruct iterator_traits&lt;T*&gt;;</code></pre><pre><code>template&lt; class T &gt;\nstruct iterator_traits&lt;const T*&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/iterator_traits
std::make_move_iterator	A										<section class="prog__container">\n<p><code>make_move_iterator</code> is a convenience function template that constructs a std::move_iterator for the given iterator <code>i</code> with the type deduced from the type of the argument.</p>\n<pre><code>template&lt; class Iterator &gt;\nstd::move_iterator&lt;Iterator&gt; make_move_iterator( const Iterator& i );</code></pre><pre><code>template&lt; class Iterator &gt;\nstd::move_iterator&lt;Iterator&gt; make_move_iterator( Iterator i );</code></pre><pre><code>template&lt; class Iterator &gt;\nconstexpr std::move_iterator&lt;Iterator&gt; make_move_iterator( Iterator i );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/make_move_iterator
std::make_reverse_iterator	A										<section class="prog__container">\n<p><code>make_reverse_iterator</code> is a convenience function template that constructs a std::reverse_iterator for the given iterator <code>i</code> with the type deduced from the type of the argument.</p>\n<pre><code>template &lt;class Iterator&gt;\nstd::reverse_iterator&lt;Iterator&gt; make_reverse_iterator( Iterator i );</code></pre><pre><code>template &lt;class Iterator&gt;\nconstexpr std::reverse_iterator&lt;Iterator&gt; make_reverse_iterator( Iterator i );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/make_reverse_iterator
std::move_iterator	A										<section class="prog__container">\n<p><code>std::move_iterator</code> is an iterator adaptor which behaves exactly like the underlying iterator (which must be at least an <code>InputIterator</code>), except that dereferencing converts...</p>\n<pre><code>template&lt; class Iterator &gt;\nclass move_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/move_iterator
std::next	A										<section class="prog__container">\n<p>Return the <code>n</code>th successor of iterator <code>it</code>.</p>\n<pre><code>template&lt; class ForwardIt &gt;\nForwardIt next(\n  ForwardIt it, \n  typename std::iterator_traits&lt;ForwardIt&gt;::difference_type n = 1 );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/iterator/next
std::ostream_iterator	A										<section class="prog__container">\n<p><code>std::ostream_iterator</code> is a single-pass <code>OutputIterator</code> that writes successive objects of type <code>T</code> into the std::basic_ostream object for which it was constructed...</p>\n<pre><code>template&lt; class T,\n          class CharT = char,\n          class Traits = std::char_traits&lt;CharT&gt;&gt;\nclass ostream_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/ostream_iterator
std::ostreambuf_iterator	A										<section class="prog__container">\n<p><code>std::ostreambuf_iterator</code> is a single-pass <code>OutputIterator</code> that writes successive characters into the std::basic_streambuf object for which it was constructed.</p>\n<pre><code>template&lt; class CharT, class Traits = std::char_traits&lt;CharT&gt; &gt;\nclass ostreambuf_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/ostreambuf_iterator
std::prev	A										<section class="prog__container">\n<p>Return the <code>n</code>th predecessor of iterator <code>it</code>.</p>\n<pre><code>template&lt; class BidirIt &gt;\nBidirIt prev(\n  BidirIt it, \n  typename std::iterator_traits&lt;BidirIt&gt;::difference_type n = 1 );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/iterator/prev
std::crbegin	A										<section class="prog__container">\n<p>Returns an iterator to the reverse-beginning of the given container <code>c</code> or array <code>array</code>.</p>\n<pre><code>template&lt; class C &gt; \nauto crbegin( const C& c ) -&gt; decltype(std::rbegin(c));</code></pre><pre><code>template&lt; class C &gt; \nconstexpr auto crbegin( const C& c ) -&gt; decltype(std::rbegin(c));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/rbegin
std::rbegin	A										<section class="prog__container">\n<p>Returns an iterator to the reverse-beginning of the given container <code>c</code> or array <code>array</code>.</p>\n<pre><code>template&lt; class C &gt; \nauto rbegin( C& c ) -&gt; decltype(c.rbegin(void));</code></pre><pre><code>template&lt; class C &gt; \nconstexpr auto rbegin( C& c ) -&gt; decltype(c.rbegin(void));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/iterator/rbegin
std::crend	A										<section class="prog__container">\n<p>Returns an iterator to the reverse-end of the given container <code>c</code> or array <code>array</code>.</p>\n<pre><code>template&lt; class C &gt; \nauto crend( const C& c ) -&gt; decltype(std::rend(c));</code></pre><pre><code>template&lt; class C &gt; \nconstexpr auto crend( const C& c ) -&gt; decltype(std::rend(c));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/rend
std::rend	A										<section class="prog__container">\n<p>Returns an iterator to the reverse-end of the given container <code>c</code> or array <code>array</code>.</p>\n<pre><code>template&lt; class C &gt; \nauto rend( C& c ) -&gt; decltype(c.rend(void));</code></pre><pre><code>template&lt; class C &gt; \nconstexpr auto rend( C& c ) -&gt; decltype(c.rend(void));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/iterator/rend
std::reverse_iterator	A										<section class="prog__container">\n<p><code>std::reverse_iterator</code> is an iterator adaptor that reverses the direction of a given iterator.</p>\n<pre><code>template&lt; class Iterator &gt;\nclass reverse_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/reverse_iterator
std::size	A										<section class="prog__container">\n<p>Returns the size of the given container <code>c</code> or array <code>array</code>.</p>\n<pre><code>template &lt; class C &gt;\nconstexpr auto size( const C& c ) -&gt; decltype(c.size(void));</code></pre><pre><code>template &lt; class T, size_t N &gt;\nconstexpr size_t size( const T (&array)[N] ) noexcept;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/iterator/size
std::codecvt	A										<section class="prog__container">\n<p>Class std::codecvt encapsulates conversion of character strings, including wide and multibyte, from one encoding to another.</p>\n<pre><code>template&lt; \n    class InternT, \n    class ExternT, \n    class State\n&gt; class codecvt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt
std::codecvt::always_noconv	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_always_noconv</code> of the most derived class.</p>\n<pre><code>public:\nbool always_noconv(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/always_noconv
std::codecvt::do_always_noconv	A										<section class="prog__container">\n<p> Returns <code>true</code> if both do_in(void) and do_out(void) return <code>std::codecvt_base::noconv</code> for all valid inputs.</p>\n<pre><code>protected:\nvirtual bool do_always_noconv(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/always_noconv
std::codecvt::codecvt	A										<section class="prog__container">\n<p>Creates a <code>std::codecvt</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit codecvt( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/codecvt
std::codecvt::do_encoding	A										<section class="prog__container">\n<p> if the encoding represented by this codecvt facet maps each internal character to the same, constant number of external characters, returns that number.</p>\n<pre><code>protected:\nvirtual int do_encoding(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/encoding
std::codecvt::encoding	A										<section class="prog__container">\n<p> public member function, calls the member function <code>do_encoding</code> of the most derived class.</p>\n<pre><code>public:\nint encoding(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/encoding
std::codecvt::do_in	A										<section class="prog__container">\n<p> If this <code>codecvt</code> facet defines a conversion, translates the external characters from the source range <code>[from, from_end)</code> to internal characters, placing the results in the...</p>\n<pre><code>protected:\nvirtual result do_in( StateT& state,\n                      const ExternT* from,\n                      const ExternT* from_end,\n                      const ExternT*& from_next,\n                      InternT* to,\n                      InternT* to_end,\n                      InternT*& to_next ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/in
std::codecvt::in	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_in</code> of the most derived class.</p>\n<pre><code>public:\nresult in( StateT& state,\n           const ExternT* from,\n           const ExternT* from_end,\n           const ExternT*& from_next,\n           InternT* to,\n           InternT* to_end,\n           InternT*& to_next ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/in
std::codecvt::do_length	A										<section class="prog__container">\n<p> attempts to convert the <code>externT</code> characters from the character array defined by <code>[from, from_end)</code>, given initial conversion state <code>state</code>, to at most...</p>\n<pre><code>protected:\nvirtual int do_length( StateT& state,\n                       const ExternT* from,\n                       const ExternT* from_end,\n                       std::size_t max ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/length
std::codecvt::length	A										<section class="prog__container">\n<p> public member function, calls the member function <code>do_length</code> of the most derived class.</p>\n<pre><code>public:\nint length( StateT& state,\n            const ExternT* from,\n            const ExternT* from_end,\n            std::size_t max ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/length
std::codecvt::do_max_length	A										<section class="prog__container">\n<p> Returns the maximum value that <code>do_length(state, from, from_end, 1)</code> can return for any valid range <code>[from, from_end)</code> and any valid <code>state</code>.</p>\n<pre><code>protected:\nvirtual int do_max_length(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/max_length
std::codecvt::max_length	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_max_length</code> of the most derived class.</p>\n<pre><code>public:\nint max_length(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/max_length
std::codecvt::do_out	A										<section class="prog__container">\n<p> If this <code>codecvt</code> facet defines a conversion, translates the internal characters from the source range <code>[from, from_end)</code> to external characters, placing the results in the...</p>\n<pre><code>protected:\nvirtual result do_out( StateT& state,\n                       const InternT* from,\n                       const InternT* from_end,\n                       const InternT*& from_next,\n                       ExternT* to,\n                       ExternT* to_end,\n                       ExternT*& to_next ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/out
std::codecvt::out	A										<section class="prog__container">\n<p> public member function, calls the member function <code>do_out</code> of the most derived class.</p>\n<pre><code>public:\nresult out( StateT& state,\n            const InternT* from,\n            const InternT* from_end,\n            const InternT*& from_next,\n            ExternT* to,\n            ExternT* to_end,\n            ExternT*& to_next ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/out
std::codecvt::do_unshift	A										<section class="prog__container">\n<p> if the encoding represented by this <code>codecvt</code> facet is state-dependent, and <code>state</code> represents a conversion state that is not the initial shift state, writes the characters...</p>\n<pre><code>protected:\nvirtual result do_unshift( StateT& state,\n                           ExternT* to,\n                           ExternT* to_end,\n                           ExternT*& to_next) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/unshift
std::codecvt::unshift	A										<section class="prog__container">\n<p> public member function, calls the member function <code>do_unshift</code> of the most derived class.</p>\n<pre><code>public:\nresult unshift( StateT& state,\n                ExternT* to,\n                ExternT* to_end,\n                ExternT*& to_next) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/unshift
std::codecvt::~codecvt	A										<section class="prog__container">\n<p>Destructs a <code>std::codecvt</code> facet.</p>\n<pre><code>protected: ~codecvt(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt/~codecvt
std::codecvt_base	A										<section class="prog__container">\n<p>The class std::codecvt_base provides the conversion status constants which are inherited and used by the std::codecvt facets.</p>\n<pre><code>class codecvt_base;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt_base
std::codecvt_byname	A										<section class="prog__container">\n<p>std::codecvt_byname is a std::codecvt facet which encapsulates multibyte/wide character conversion rules of a locale specified at its construction.</p>\n<pre><code>template&lt; class InternT, class ExternT, class State &gt;\nclass codecvt_byname : public std::codecvt&lt;InternT, ExternT, State&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt_byname
std::codecvt_utf16	A										<section class="prog__container">\n<p>std::codecvt_utf16 is a std::codecvt facet which encapsulates conversion between a UTF-16 encoded byte string and UCS2 or UCS4 character string (depending on the type of <code>Elem</code>).</p>\n<pre><code>template&lt; class Elem,\n          unsigned long Maxcode = 0x10ffff,\n          std::codecvt_mode Mode = (std::codecvt_mode)0 &gt;\nclass codecvt_utf16 : public std::codecvt&lt;Elem, char, std::mbstate_t&gt;;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt_utf16
std::codecvt_utf8	A										<section class="prog__container">\n<p>std::codecvt_utf8 is a std::codecvt facet which encapsulates conversion between a UTF-8 encoded byte string and UCS2 or UCS4 character string (depending on the type of <code>Elem</code>).</p>\n<pre><code>template&lt; \n    class Elem,\n    unsigned long Maxcode = 0x10ffff,\n    std::codecvt_mode Mode = (std::codecvt_mode)0 \n&gt; class codecvt_utf8 : public std::codecvt&lt;Elem, char, std::mbstate_t&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt_utf8
std::codecvt_utf8_utf16	A										<section class="prog__container">\n<p>std::codecvt_utf8_utf16 is a std::codecvt facet which encapsulates conversion between a UTF-8 encoded byte string and UTF-16 encoded character string.</p>\n<pre><code>template&lt; class Elem,\n          unsigned long Maxcode = 0x10ffff,\n          std::codecvt_mode Mode = (std::codecvt_mode)0 &gt;\nclass codecvt_utf8_utf16 : public std::codecvt&lt;Elem, char, std::mbstate_t&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/codecvt_utf8_utf16
std::collate	A										<section class="prog__container">\n<p>Class std::collate encapsulates locale-specific collation (comparison) and hashing of strings.</p>\n<pre><code>template&lt; class CharT &gt;\nclass collate;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate
std::collate::collate	A										<section class="prog__container">\n<p>Creates a <code>std::collate</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit collate( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate/collate
std::collate::compare	A										<section class="prog__container">\n<p> Public member function, calls the protected virtual member function <code>do_compare</code> of the most derived class.</p>\n<pre><code>public:\nint compare( const CharT* low1, const CharT* high1,\n             const CharT* low2, const CharT* high2 ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate/compare
std::collate::do_compare	A										<section class="prog__container">\n<p> Compares the character sequence <code>[low1, high1)</code> to the character sequence <code>[low2, high2)</code>, using this locale's collation rules, and returns 1 if the first string follows the...</p>\n<pre><code>protected:\nvirtual int do_compare( const CharT* low1, const CharT* high1,\n                        const CharT* low2, const CharT* high2 ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate/compare
std::collate::do_hash	A										<section class="prog__container">\n<p> Converts the character sequence <code>[beg, end)</code> to an integer value that is equal to the hash obtained for all strings that collate equivalent in this locale (compare(void) returns...</p>\n<pre><code>protected:\nvirtual long do_hash( const CharT* beg, const CharT* end ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate/hash
std::collate::hash	A										<section class="prog__container">\n<p> Public member function, calls the protected virtual member function <code>do_hash</code> of the most derived class.</p>\n<pre><code>public:\nlong hash( const CharT* beg, const CharT* end ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate/hash
std::collate::do_transform	A										<section class="prog__container">\n<p> Converts the character sequence <code>[low, high)</code> to a string that, compared lexicographically (e.</p>\n<pre><code>protected:\nvirtual string_type do_transform( const CharT* low, const CharT* high ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate/transform
std::collate::transform	A										<section class="prog__container">\n<p> Public member function, calls the protected virtual member function <code>do_transform</code> of the most derived class.</p>\n<pre><code>public:\nstring_type transform( const CharT* low, const CharT* high ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate/transform
std::collate::~collate	A										<section class="prog__container">\n<p>Destructs a <code>std::collate</code> facet.</p>\n<pre><code>protected: ~collate(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate/~collate
std::collate_byname	A										<section class="prog__container">\n<p>std::collate_byname is a std::collate facet which encapsulates locale-specific collation (comparison) and hashing of strings.</p>\n<pre><code>template&lt; class CharT &gt;\nclass collate_byname : public std::collate&lt;CharT&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/collate_byname
std::ctype	A										<section class="prog__container">\n<p>Class ctype encapsulates character classification features.</p>\n<pre><code>template&lt; class CharT &gt;\nclass ctype;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/ctype
std::ctype::ctype	A										<section class="prog__container">\n<p>Creates a <code>std::ctype</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit ctype( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/ctype/ctype
std::ctype::do_scan_is	A										<section class="prog__container">\n<p> Locates the first character in the character array <code>[beg, end)</code> that satisfies the classification mask <code>m</code>...</p>\n<pre><code>protected:\nvirtual const CharT* do_scan_is( mask m, const CharT* beg, const CharT* end) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/ctype/scan_is
std::ctype::scan_is	A										<section class="prog__container">\n<p> public member function, calls the protected virtual member function <code>do_scan_is</code> of the most derived class.</p>\n<pre><code>public:\nconst CharT* scan_is( mask m, const CharT* beg, const CharT* end ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/ctype/scan_is
std::ctype::~ctype	A										<section class="prog__container">\n<p>Destructs a <code>std::ctype</code> facet.</p>\n<pre><code>protected: ~ctype(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/ctype/~ctype
std::ctype_base	A										<section class="prog__container">\n<p>The class std::ctype_base lists the character classification categories which are inherited by the std::ctype facets.</p>\n<pre><code>class ctype_base;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/ctype_base
std::ctype_byname	A										<section class="prog__container">\n<p>std::ctype_byname is a std::ctype facet which encapsulates character classification rules of the locale specified at its construction.</p>\n<pre><code>template&lt; class CharT &gt;\nclass ctype_byname : public std::ctype&lt;CharT&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/ctype_byname
std::has_facet	A										<section class="prog__container">\n<p>Checks if the locale <code>loc</code> implements the facet <code>Facet</code>.</p>\n<pre><code>template&lt; class Facet &gt;\nbool has_facet( const locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/has_facet
std::lconv	A										<section class="prog__container">\n<p>The class <code>std::lconv</code> contains numeric and monetary formatting rules as defined by a C locale.</p>\n<pre><code>struct lconv;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/lconv
std::locale	A										<section class="prog__container">\n<p>An object of class <code>std::locale</code> is an immutable indexed set of immutable facets.</p>\n<pre><code>class locale;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale
std::locale::classic	A										<section class="prog__container">\n<p>Obtains a reference to the C++ locale that implements the classic "C" locale semantics.</p>\n<pre><code>static const locale& classic(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/classic
std::locale::combine	A										<section class="prog__container">\n<p>Constructs a locale object which is a copy of <code>*this</code> except for the facet of type <code>Facet</code>, which is copied from <code>other</code>.</p>\n<pre><code>template&lt; class Facet &gt;\nlocale combine( const locale& other ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/combine
std::locale::facet	A										<section class="prog__container">\n<p>std::locale::facet is the base class for facets.</p>\n<pre><code>class locale::facet;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/facet
std::locale::facet::facet	A										<section class="prog__container">\n<p>1) creates a facet with starting reference count <code>refs</code>.</p>\n<pre><code>explicit facet( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/facet/facet
std::locale::global	A										<section class="prog__container">\n<p>Replaces the global C++ locale with <code>loc</code>, which means all future calls to the std::locale default constructor will now return a copy of <code>loc</code>.</p>\n<pre><code>static locale global( const locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/global
std::locale::id	A										<section class="prog__container">\n<p>The class std::locale::id provides implementation-specific identification of a locale facet.</p>\n<pre><code>class locale::id;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/id
std::locale::locale	A										<section class="prog__container">\n<p>Contstructs a new locale object.</p>\n<pre><code>locale( const locale& other );</code></pre><pre><code>explicit locale( const char* std_name );</code></pre><pre><code>explicit locale( const std::string& std_name );</code></pre><pre><code>locale( const locale& other, const char* std_name, category cat );</code></pre><pre><code>locale( const locale& other, const std::string& std_name, category cat );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/locale
std::locale::name	A										<section class="prog__container">\n<p>Returns the name of the locale, which is the name by which it is known to the operating system, such as "POSIX" or "en_US.</p>\n<pre><code>std::string name(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/name
std::locale::operator()	A										<section class="prog__container">\n<p>Compares two string arguments <code>s1</code> and <code>s2</code> according to the lexicographic comparison rules defined by this locale's <code>std::collate&lt;charT&gt;</code> facet.</p>\n<pre><code>template&lt; class CharT, class Traits, class Alloc &gt;\nbool operator(void)( const basic_string&lt;CharT,Traits,Alloc&gt;& s1,\n                 const basic_string&lt;CharT,Traits,Alloc&gt;& s2) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/operator()
std::locale::operator=	A										<section class="prog__container">\n<p>Creates a copy of <code>other</code>, replacing the contents of <code>*this</code>.</p>\n<pre><code>const locale& operator=( const locale& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/operator=
std::locale::operator!=	A										<section class="prog__container">\n<p>Tests two locales for equality.</p>\n<pre><code>bool operator!=( const locale& other ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/operator_cmp
std::locale::operator==	A										<section class="prog__container">\n<p>Tests two locales for equality.</p>\n<pre><code>bool operator==( const locale& other ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/locale/operator_cmp
std::localeconv	A										<section class="prog__container">\n<p>The <code>localeconv</code> function obtains a pointer to a static object of type std::lconv, which represents numeric and monetary formatting rules of the current C locale.</p>\n<pre><code>std::lconv* localeconv(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/localeconv
std::messages	A										<section class="prog__container">\n<p>Class template std::messages is a standard locale facet that encapsulates retrieval of strings from message catalogs, such as the ones provided by GNU gettext or by POSIX catgets.</p>\n<pre><code>template&lt; class CharT &gt;\nclass messages;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages
std::messages::close	A										<section class="prog__container">\n<p>1) public member function, calls the protected virtual member function <code>do_close</code> of the most derived class.</p>\n<pre><code>public:\nvoid close( catalog c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/close
std::messages::do_close	A										<section class="prog__container">\n<p>1) public member function, calls the protected virtual member function <code>do_close</code> of the most derived class.</p>\n<pre><code>protected:\nvirtual void do_close( catalog c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/close
std::messages_byname::close	A										<section class="prog__container">\n<p>1) public member function, calls the protected virtual member function <code>do_close</code> of the most derived class.</p>\n<pre><code>public:\nvoid close( catalog c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/close
std::messages_byname::do_close	A										<section class="prog__container">\n<p>1) public member function, calls the protected virtual member function <code>do_close</code> of the most derived class.</p>\n<pre><code>protected:\nvirtual void do_close( catalog c ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/close
std::messages::do_get	A										<section class="prog__container">\n<p>1) Public member function, calls the protected virtual member function <code>do_get</code> of the most derived class.</p>\n<pre><code>protected:\nvirtual string_type do_get( catalog cat, int set, int msgid, const string_type& dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/get
std::messages::get	A										<section class="prog__container">\n<p>1) Public member function, calls the protected virtual member function <code>do_get</code> of the most derived class.</p>\n<pre><code>public:\nstring_type get( catalog cat, int set, int msgid, const string_type& dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/get
std::messages_byname::do_get	A										<section class="prog__container">\n<p>1) Public member function, calls the protected virtual member function <code>do_get</code> of the most derived class.</p>\n<pre><code>protected:\nvirtual string_type do_get( catalog cat, int set, int msgid, const string_type& dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/get
std::messages_byname::get	A										<section class="prog__container">\n<p>1) Public member function, calls the protected virtual member function <code>do_get</code> of the most derived class.</p>\n<pre><code>public:\nstring_type get( catalog cat, int set, int msgid, const string_type& dfault ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/get
std::messages::messages	A										<section class="prog__container">\n<p>Creates a <code>std::messages</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit messages( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/messages
std::messages::do_open	A										<section class="prog__container">\n<p>1) Public member function, calls the protected virtual member function <code>do_open</code> of the most derived class.</p>\n<pre><code>protected:\nvirtual catalog do_open( const std::basic_string&lt;char&gt;& name, const std::locale& loc ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/open
std::messages::open	A										<section class="prog__container">\n<p>1) Public member function, calls the protected virtual member function <code>do_open</code> of the most derived class.</p>\n<pre><code>public:\ncatalog open( const std::basic_string&lt;char&gt;& name, const std::locale& loc ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/open
std::messages_byname::do_open	A										<section class="prog__container">\n<p>1) Public member function, calls the protected virtual member function <code>do_open</code> of the most derived class.</p>\n<pre><code>protected:\nvirtual catalog do_open( const std::basic_string&lt;char&gt;& name, const std::locale& loc ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/open
std::messages_byname::open	A										<section class="prog__container">\n<p>1) Public member function, calls the protected virtual member function <code>do_open</code> of the most derived class.</p>\n<pre><code>public:\ncatalog open( const std::basic_string&lt;char&gt;& name, const std::locale& loc ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/open
std::messages::~messages	A										<section class="prog__container">\n<p>Destructs a <code>std::messages</code> facet.</p>\n<pre><code>protected: ~messages(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages/~messages
std::messages_base	A										<section class="prog__container">\n<p>The class std::messages_base provides a type definition which is inherited and used by the std::messages facets.</p>\n<pre><code>class messages_base;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages_base
std::messages_byname	A										<section class="prog__container">\n<p>std::messages_byname is a std::messages facet which encapsulates retrieval of strings from message catalogs of the locale specified at its construction.</p>\n<pre><code>template&lt; class CharT &gt;\nclass messages_byname : public std::messages&lt;CharT&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/messages_byname
std::money_base	A										<section class="prog__container">\n<p>The class std::money_base provides constants which are inherited and used by the std::moneypunct, std::money_get and std::money_put facets.</p>\n<pre><code>class money_base;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_base
std::money_get	A										<section class="prog__container">\n<p>Class template <code>std::money_get</code> encapsulates the rules for parsing monetary values from character streams.</p>\n<pre><code>template&lt; \n    class CharT,\n    class InputIt = std::istreambuf_iterator&lt;CharT&gt;\n&gt; class money_get;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_get
std::money_get::do_get	A										<section class="prog__container">\n<p>Parses monetary value from an input iterator and writes the result to a <code>long double</code> or string.</p>\n<pre><code>protected:\nvirtual iter_type do_get(iter_type beg, iter_type end, bool intl, std::ios_base& str,\n                         std::ios_base::iostate& err, long double& units) const;</code></pre><pre><code>virtual iter_type do_get(iter_type beg, iter_type end, bool intl, std::ios_base& str,\n                         std::ios_base::iostate& err, string_type& digits) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_get/get
std::money_get::get	A										<section class="prog__container">\n<p>Parses monetary value from an input iterator and writes the result to a <code>long double</code> or string.</p>\n<pre><code>public:\niter_type get(iter_type beg, iter_type end, bool intl, std::ios_base& str,\n              std::ios_base::iostate& err, long double& units) const;</code></pre><pre><code>iter_type get(iter_type beg, iter_type end, bool intl, std::ios_base& str,\n              std::ios_base::iostate& err, string_type& digits) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_get/get
std::money_get::money_get	A										<section class="prog__container">\n<p>Creates a <code>std::money_get</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit money_get( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_get/money_get
std::money_get::~money_get	A										<section class="prog__container">\n<p>Destructs a <code>std::money_get</code> facet.</p>\n<pre><code>protected: ~money_get(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_get/~money_get
std::money_put	A										<section class="prog__container">\n<p>Class <code>std::money_put</code> encapsulates the rules for formatting monetary values as strings.</p>\n<pre><code>template&lt; \n    class CharT,\n    class OutputIt = std::ostreambuf_iterator&lt;CharT&gt;\n&gt; class money_put;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_put
std::money_put::money_put	A										<section class="prog__container">\n<p>Creates a <code>std::money_put</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit money_put( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_put/money_put
std::money_put::do_put	A										<section class="prog__container">\n<p>Formats monetary value and writes the result to output stream.</p>\n<pre><code>protected:\nvirtual iter_type do_put(iter_type out, bool intl, std::ios_base& str,\n                         char_type fill, long double units) const;</code></pre><pre><code>virtual iter_type do_put(iter_type out, bool intl, std::ios_base& str,\n                         char_type fill, const string_type& digits) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_put/put
std::money_put::put	A										<section class="prog__container">\n<p>Formats monetary value and writes the result to output stream.</p>\n<pre><code>public:\niter_type put(iter_type out, bool intl, std::ios_base& f,\n              char_type fill, long double quant) const;</code></pre><pre><code>iter_type put(iter_type out, bool intl, std::ios_base& f,\n             char_type fill, const string_type& quant) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_put/put
std::money_put::~money_put	A										<section class="prog__container">\n<p>Destructs a <code>std::money_put</code> facet.</p>\n<pre><code>protected: ~money_put(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/money_put/~money_put
std::moneypunct	A										<section class="prog__container">\n<p>The facet std::moneypunct encapsulates monetary value format preferences.</p>\n<pre><code>template&lt; class CharT, bool International = false &gt;\nclass moneypunct;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct
std::moneypunct::curr_symbol	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_curr_symbol</code> of the most derived class.</p>\n<pre><code>public:\nstring_type curr_symbol(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/curr_symbol
std::moneypunct::do_curr_symbol	A										<section class="prog__container">\n<p> Returns the string used as the currency identifier by this locale.</p>\n<pre><code>protected:\nvirtual string_type do_curr_symbol(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/curr_symbol
std::moneypunct::decimal_point	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_decimal_point</code> of the most derived class.</p>\n<pre><code>public:\nCharT decimal_point(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/decimal_point
std::moneypunct::do_decimal_point	A										<section class="prog__container">\n<p> Returns the character to use as the decimal point separator in monetary I/O if the format uses fractions (that is, if do_frac_digits(void) is greater than zero).</p>\n<pre><code>protected:\nvirtual CharT do_decimal_point(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/decimal_point
std::moneypunct::do_frac_digits	A										<section class="prog__container">\n<p> Returns the number of digits to be displayed after the decimal point when printing monetary values...</p>\n<pre><code>protected:\nvirtual int do_frac_digits(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/frac_digits
std::moneypunct::frac_digits	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_frac_digits</code> of the most derived class.</p>\n<pre><code>public:\nint frac_digits(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/frac_digits
std::moneypunct::do_grouping	A										<section class="prog__container">\n<p> Returns the pattern that determines the grouping of the digits in the monetary output, with the same exact meaning as std::numpunct::do_grouping...</p>\n<pre><code>protected:\nvirtual std::string do_grouping(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/grouping
std::moneypunct::grouping	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_grouping</code> of the most derived class.</p>\n<pre><code>public:\nstd::string grouping(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/grouping
std::moneypunct::moneypunct	A										<section class="prog__container">\n<p>Creates a <code>std::moneypunct</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit moneypunct( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/moneypunct
std::moneypunct::do_neg_format	A										<section class="prog__container">\n<p> Returns the format structure (of type std::money_base::format) which describes the formatting of negative monetary values.</p>\n<pre><code>protected:\nvirtual pattern do_neg_format(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/pos_format
std::moneypunct::do_pos_format	A										<section class="prog__container">\n<p> Returns the format structure (of type std::money_base::format) which describes the formatting of positive monetary values.</p>\n<pre><code>protected:\nvirtual pattern do_pos_format(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/pos_format
std::moneypunct::neg_format	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_neg_format</code> of the most derived class.</p>\n<pre><code>public:\npattern neg_format(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/pos_format
std::moneypunct::pos_format	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_pos_format</code> of the most derived class.</p>\n<pre><code>public:\npattern pos_format(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/pos_format
std::moneypunct::do_positive_sign	A										<section class="prog__container">\n<p> Returns the string that is used for formatting of positive monetary values.</p>\n<pre><code>protected:\nvirtual string_type do_positive_sign(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/positive_sign
std::moneypunct::negative_sign	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_negative_sign</code> of the most derived class.</p>\n<pre><code>public:\nstring_type negative_sign(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/positive_sign
std::moneypunct::positive_sign	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_positive_sign</code> of the most derived class.</p>\n<pre><code>public:\nstring_type positive_sign(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/positive_sign
std::moneypunct_byname::do_positive_sign	A										<section class="prog__container">\n<p> Returns the string that is used for formatting of negative monetary values.</p>\n<pre><code>protected:\nvirtual string_type do_positive_sign(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/positive_sign
std::moneypunct::do_thousands_sep	A										<section class="prog__container">\n<p> Returns the character to be used as the separator between digit groups when parsing or formatting the integral parts of monetary values.</p>\n<pre><code>protected:\nvirtual char_type do_thousands_sep(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/thousands_sep
std::moneypunct::thousands_sep	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.</p>\n<pre><code>public:\nchar_type thousands_sep(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/thousands_sep
std::moneypunct::~moneypunct	A										<section class="prog__container">\n<p>Destructs a <code>std::moneypunct</code> facet.</p>\n<pre><code>protected: ~moneypunct(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct/~moneypunct
std::moneypunct_byname	A										<section class="prog__container">\n<p>std::moneypunct_byname is a std::moneypunct facet which encapsulates monetary formatting preferences of a locale specified at its construction.</p>\n<pre><code>template&lt; class CharT, bool Intl = false &gt;\nclass moneypunct_byname : public std::moneypunct&lt;CharT, Intl&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/moneypunct_byname
std::num_get	A										<section class="prog__container">\n<p>Class <code>std::num_get</code> encapsulates the rules for parsing string representations of numeric values.</p>\n<pre><code>template&lt; \n    class CharT,\n    class InputIt = std::istreambuf_iterator&lt;CharT&gt;\n&gt; class num_get;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/num_get
std::num_get::num_get	A										<section class="prog__container">\n<p>Creates a <code>std::num_get</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit num_get( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/num_get/num_get
std::num_get::~num_get	A										<section class="prog__container">\n<p>Destructs a <code>std::num_get</code> facet.</p>\n<pre><code>protected: ~num_get(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/num_get/~num_get
std::num_put	A										<section class="prog__container">\n<p>Class <code>std::num_put</code> encapsulates the rules for formatting numeric values as strings.</p>\n<pre><code>template&lt; \n    class CharT,\n    class OutputIt = std::ostreambuf_iterator&lt;CharT&gt;\n&gt; class num_put;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/num_put
std::num_put::num_put	A										<section class="prog__container">\n<p>Creates a <code>std::num_put</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit num_put( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/num_put/num_put
std::num_put::~num_put	A										<section class="prog__container">\n<p>Destructs a <code>std::num_put</code> facet.</p>\n<pre><code>protected: ~num_put(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/num_put/~num_put
std::numpunct	A										<section class="prog__container">\n<p>The facet std::numpunct encapsulates numeric punctuation preferences.</p>\n<pre><code>template&lt; class CharT &gt;\nclass numpunct;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct
std::numpunct::decimal_point	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_decimal_point</code> of the most derived class.</p>\n<pre><code>public:\nchar_type decimal_point(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/decimal_point
std::numpunct::do_decimal_point	A										<section class="prog__container">\n<p> Returns the character to be used as the decimal separator between integer and fractional parts.</p>\n<pre><code>protected:\nvirtual char_type do_decimal_point(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/decimal_point
std::numpunct::do_grouping	A										<section class="prog__container">\n<p> Returns an std::string holding, in each <code>char</code> element, the number of digits in each group of the numeric output formatted by num_put::put(void) (and, therefore...</p>\n<pre><code>protected:\nvirtual std::string do_grouping(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/grouping
std::numpunct::grouping	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_grouping</code> of the most derived class.</p>\n<pre><code>public:\nstd::string grouping(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/grouping
std::numpunct::numpunct	A										<section class="prog__container">\n<p>Creates a <code>std::numpunct</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit numpunct( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/numpunct
std::numpunct::do_thousands_sep	A										<section class="prog__container">\n<p> Returns the character to be used as the separator between digit groups when parsing or formatting integers and integral parts of floating-point values.</p>\n<pre><code>protected:\nvirtual char_type do_thousands_sep(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/thousands_sep
std::numpunct::thousands_sep	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_thousands_sep</code> of the most derived class.</p>\n<pre><code>public:\nchar_type thousands_sep(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/thousands_sep
std::numpunct::do_falsename	A										<section class="prog__container">\n<p> Returns the string to be used as the representation of the boolean value <code>false</code>.</p>\n<pre><code>protected:\nvirtual string_type do_falsename(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename
std::numpunct::do_truename	A										<section class="prog__container">\n<p> Returns the string to be used as the representation of the boolean value <code>true</code>.</p>\n<pre><code>protected:\nvirtual string_type do_truename(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename
std::numpunct::falsename	A										<section class="prog__container">\n<p> Public member function, calls the member function <code>do_truename</code> and <code>do_falsename</code> of the most derived class respectively.</p>\n<pre><code>public:\nstring_type falsename(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/truefalsename
std::numpunct::~numpunct	A										<section class="prog__container">\n<p>Destructs a <code>std::numpunct</code> facet.</p>\n<pre><code>protected: ~numpunct(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct/~numpunct
std::numpunct_byname	A										<section class="prog__container">\n<p>std::numpunct_byname is a std::numpunct facet which encapsulates numeric punctuation preferences of a locale specified at its construction.</p>\n<pre><code>template&lt; class CharT &gt;\nclass numpunct_byname : public std::numpunct&lt;CharT&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/numpunct_byname
std::setlocale	A										<section class="prog__container">\n<p>The <code>setlocale</code> function installs the specified system locale or its portion as the new C locale.</p>\n<pre><code>char* setlocale( int category, const char* locale);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/setlocale
std::time_base	A										<section class="prog__container">\n<p>The class std::time_base provides the date order constants which are inherited by the std::time_get facets.</p>\n<pre><code>class time_base;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_base
std::time_get	A										<section class="prog__container">\n<p>Class template <code>std::time_get</code> encapsulates date and time parsing rules.</p>\n<pre><code>template&lt; \n    class CharT, \n    class InputIt = std::istreambuf_iterator&lt;CharT&gt; \n&gt; class time_get;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get
std::time_get::date_order	A										<section class="prog__container">\n<p> Public member function, calls the protected virtual member function <code>do_date_order</code> of the most derived class.</p>\n<pre><code>public:\ndateorder date_order(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/date_order
std::time_get::do_date_order	A										<section class="prog__container">\n<p> Returns a value of type std::time_base::dateorder, which describes the default date format used by this locale (expected by get_date(void) and produced by std::strftime(void) with format specifier...</p>\n<pre><code>protected:\nvirtual dateorder do_date_order(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/date_order
std::time_get::get	A										<section class="prog__container">\n<p> Parses the date and time from the input character sequence <code>[beg, end)</code> according to the format provided in the character sequence <code>[fmtbeg, fmtend)</code>.</p>\n<pre><code>public:\niter_type get(iter_type beg, iter_type end, std::ios_base& str,\n              std::ios_base::iostate& err, std::tm* t,\n              const char_type* fmtbeg, const char_type* fmtend) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/get
std::time_get::do_get_date	A										<section class="prog__container">\n<p> Reads successive characters from the sequence <code>[beg, end)</code> and parses out the calendar date value using the default format expected by this locale, which is the same format as...</p>\n<pre><code>protected:\nvirtual iter_type do_get_date( iter_type beg, iter_type end, std::ios_base& str,\n                               std::ios_base::iostate& err, std::tm* t ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/get_date
std::time_get::get_date	A										<section class="prog__container">\n<p> Public member function, calls the protected virtual member function <code>do_get_date(void)</code> of the most derived class.</p>\n<pre><code>public:\niter_type get_date( iter_type beg, iter_type end, std::ios_base& str,\n                    std::ios_base::iostate& err, std::tm* t ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/get_date
std::time_get::do_get_monthname	A										<section class="prog__container">\n<p> Reads successive characters from the sequence <code>[beg, end)</code> and parses out the month name (possibly abbreviated), using the default format for month names expected by this locale, which is...</p>\n<pre><code>protected:\nvirtual iter_type do_get_monthname( iter_type beg, iter_type end, std::ios_base& str,\n                                    std::ios_base::iostate& err, std::tm* t) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/get_monthname
std::time_get::get_monthname	A										<section class="prog__container">\n<p> public member function, calls the protected virtual member function <code>do_get_monthname</code> of the most derived class.</p>\n<pre><code>public:\niter_type get_monthname( iter_type beg, iter_type end, std::ios_base& str,\n                         std::ios_base::iostate& err, std::tm* t) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/get_monthname
std::time_get::do_get_weekday	A										<section class="prog__container">\n<p> Reads successive characters from the sequence <code>[beg, end)</code> and parses out the weekday name (possibly abbreviated), using the default format for weekdays expected by this locale, which is...</p>\n<pre><code>protected:\nvirtual iter_type do_get_weekday( iter_type beg, iter_type end, std::ios_base& str,\n                                  std::ios_base::iostate& err, std::tm* t) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/get_weekday
std::time_get::get_weekday	A										<section class="prog__container">\n<p> public member function, calls the protected virtual member function <code>do_get_weekday</code> of the most derived class.</p>\n<pre><code>public:\niter_type get_weekday( iter_type beg, iter_type end, std::ios_base& str,\n                       std::ios_base::iostate& err, std::tm* t) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/get_weekday
std::time_get::time_get	A										<section class="prog__container">\n<p>Creates a <code>std::time_get</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit time_get( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/time_get
std::time_get::~time_get	A										<section class="prog__container">\n<p>Destructs a <code>std::time_get</code> facet.</p>\n<pre><code>protected: ~time_get(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get/~time_get
std::time_get_byname	A										<section class="prog__container">\n<p>std::time_get_byname is a std::time_get facet which encapsulates time and date parsing rules of the locale specified at its construction.</p>\n<pre><code>template&lt;\n    class CharT,\n    class InputIterator = std::istreambuf_iterator&lt;CharT&gt;\n&gt; class time_get_byname : public std::time_get&lt;CharT, InputIterator&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_get_byname
std::time_put	A										<section class="prog__container">\n<p>Class template <code>std::time_put</code> encapsulates date and time formatting rules.</p>\n<pre><code>template&lt; \n    class CharT, \n    class OutputIt = std::ostreambuf_iterator&lt;CharT&gt; \n&gt; class time_put;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_put
std::time_put::do_put	A										<section class="prog__container">\n<p>Converts the calendar date and time stored in the std::tm object pointed to by <code>t</code> into a character string, according to the format string <code>[fmtbeg, fmtend)</code>.</p>\n<pre><code>protected:\nvirtual iter_type do_put( iter_type out, std::ios_base& str,\n                          char_type fill, const std::tm* t,\n                          char format, char modifier ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_put/put
std::time_put::put	A										<section class="prog__container">\n<p>Converts the calendar date and time stored in the std::tm object pointed to by <code>t</code> into a character string, according to the format string <code>[fmtbeg, fmtend)</code>.</p>\n<pre><code>public:\niter_type put( iter_type out, std::ios_base& str,\n               char_type fill, const std::tm* t,\n               const CharT* fmtbeg, const CharT* fmtend ) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/locale/time_put/put
std::time_put_byname::do_put	A										<section class="prog__container">\n<p>Converts the calendar date and time stored in the std::tm object pointed to by <code>t</code> into a character string, according to the format string <code>[fmtbeg, fmtend)</code>.</p>\n<pre><code>protected:\nvirtual iter_type do_put( iter_type out, std::ios_base& str,\n                          char_type fill, const std::tm* t,\n                          char format, char modifier ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_put/put
std::time_put_byname::put	A										<section class="prog__container">\n<p>Converts the calendar date and time stored in the std::tm object pointed to by <code>t</code> into a character string, according to the format string <code>[fmtbeg, fmtend)</code>.</p>\n<pre><code>public:\niter_type put( iter_type out, std::ios_base& str,\n               char_type fill, const std::tm* t,\n               const CharT* fmtbeg, const CharT* fmtend ) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/locale/time_put/put
std::time_put::time_put	A										<section class="prog__container">\n<p>Creates a <code>std::time_put</code> facet and forwards the starting reference count <code>refs</code> to the base class constructor, locale::facet::facet(void)...</p>\n<pre><code>explicit time_put( std::size_t refs = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_put/time_put
std::time_put::~time_put	A										<section class="prog__container">\n<p>Destructs a <code>std::time_put</code> facet.</p>\n<pre><code>protected: ~time_put(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_put/~time_put
std::time_put_byname	A										<section class="prog__container">\n<p>std::time_put_byname is a std::time_put facet which encapsulates time and date formatting rules of the locale specified at its construction.</p>\n<pre><code>template&lt; class CharT, class OutputIterator = std::ostreambuf_iterator&lt;CharT&gt; &gt;\nclass time_put_byname : public std::time_put&lt;CharT, OutputIterator&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/time_put_byname
std::use_facet	A										<section class="prog__container">\n<p>Obtains a reference to a facet implemented by <code>loc</code>.</p>\n<pre><code>template&lt; class Facet &gt;\nconst Facet& use_facet( const std::locale& loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/use_facet
std::wbuffer_convert	A										<section class="prog__container">\n<p>std::wbuffer_convert is a wrapper over stream buffer of type <code>std::basic_streambuf&lt;char&gt;</code> which gives it the appearance of <code>std::basic_streambuf&lt;Elem&gt;</code>.</p>\n<pre><code>template&lt;class Codecvt,\n         class Elem = wchar_t,\n         class Tr = std::char_traits&lt;Elem&gt; &gt;\nclass wbuffer_convert : public std::basic_streambuf&lt;Elem, Tr&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/wbuffer_convert
std::wbuffer_convert::rdbuf	A										<section class="prog__container">\n<p>1) returns the pointer to the underlying byte stream...</p>\n<pre><code>std::streambuf* rdbuf(void) const;</code></pre><pre><code>std::streambuf* rdbuf( std::streambuf* bytebuf );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/wbuffer_convert/rdbuf
std::wbuffer_convert::state	A										<section class="prog__container">\n<p>Returns the current value of the conversion state, which is stored in this <code>wbuffer_convert</code> object.</p>\n<pre><code>state_type state(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/wbuffer_convert/state
std::wbuffer_convert::wbuffer_convert	A										<section class="prog__container">\n<p> Constructs the <code>wbuffer_convert</code> object with the specified underlying byte stream, specified <code>codecvt</code> facet, and specified initial conversion state (all parameters are...</p>\n<pre><code>explicit wbuffer_convert( std::streambuf* bytebuf = 0,\n                          Codecvt* pcvt = new Codecvt,\n                          state_type state = state_type(void) );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/wbuffer_convert/wbuffer_convert
std::wstring_convert	A										<section class="prog__container">\n<p>Class template std::wstring_convert performs conversions between byte string std::string and wide string <code>std::basic_string&lt;Elem&gt;</code>, using an individual code conversion facet...</p>\n<pre><code>template&lt; class Codecvt,\n          class Elem = wchar_t,\n          class Wide_alloc = std::allocator&lt;Elem&gt;,\n          class Byte_alloc = std::allocator&lt;char&gt; &gt;\nclass wstring_convert;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/wstring_convert
std::wstring_convert::converted	A										<section class="prog__container">\n<p>Returns the number of source characters that were processed by the most recent from_bytes(void) or to_bytes(void).</p>\n<pre><code>std::size_t converted(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/wstring_convert/converted
std::wstring_convert::from_bytes	A										<section class="prog__container">\n<p>Performs multibyte to wide conversion, using the codecvt facet supplied at construction.</p>\n<pre><code>wide_string from_bytes( char byte );</code></pre><pre><code>wide_string from_bytes( const char* ptr );</code></pre><pre><code>wide_string from_bytes( const byte_string& str );</code></pre><pre><code>wide_string from_bytes( const char* first, const char* last);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/wstring_convert/from_bytes
std::wstring_convert::state	A										<section class="prog__container">\n<p>Returns the current value of the conversion state, which is stored in this <code>wstring_convert</code> object.</p>\n<pre><code>state_type state(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/wstring_convert/state
std::wstring_convert::to_bytes	A										<section class="prog__container">\n<p>Performs wide to multibyte conversion, using the <code>codecvt</code> facet supplied at construction.</p>\n<pre><code>byte_string to_bytes( Elem wchar );</code></pre><pre><code>byte_string to_bytes( const Elem* wptr );</code></pre><pre><code>byte_string to_bytes( const wide_string& wstr );</code></pre><pre><code>byte_string to_bytes( const Elem* first, const Elem* last);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/locale/wstring_convert/to_bytes
std::align	A										<section class="prog__container">\n<p>Given a pointer <code>ptr</code> to a buffer of size <code>space</code>, returns a pointer aligned by the specified <code>alignment</code> for <code>size</code> number of bytes and decreases...</p>\n<pre><code>void* align( std::size_t alignment,\n             std::size_t size,\n             void*& ptr,\n             std::size_t& space );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/align
std::allocator	A										<section class="prog__container">\n<p>The <code>std::allocator</code> class template is the default <code>Allocator</code> used by all standard library containers if no user-specified allocator is provided.</p>\n<pre><code>template&lt; class T &gt;\nstruct allocator;</code></pre><pre><code>template&lt;&gt;\nstruct allocator&lt;void&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator
std::allocator::address	A										<section class="prog__container">\n<p>Returns the actual address of <code>x</code> even in presence of overloaded <code>operator&amp;</code>.</p>\n<pre><code>pointer address( reference x ) const;</code></pre><pre><code>const_pointer address( const_reference x ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator/address
std::allocator::allocate	A										<section class="prog__container">\n<p>Allocates <code>n * sizeof(T)</code> bytes of uninitialized storage by calling <code>::operator new(std::size_t)</code>, but it is unspecified when and how this function is called.</p>\n<pre><code>T* allocate( std::size_t n, const void * hint);</code></pre><pre><code>T* allocate( std::size_t n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator/allocate
std::allocator::allocator	A										<section class="prog__container">\n<p>Constructs the default allocator.</p>\n<pre><code>allocator( const allocator& other );</code></pre><pre><code>template&lt; class U &gt; \nallocator( const allocator&lt;U&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator/allocator
std::allocator::construct	A										<section class="prog__container">\n<p>Constructs an object of type <code>T</code> in allocated uninitialized storage pointed to by <code>p</code>, using placement-new...</p>\n<pre><code>template&lt; class U, class... Args &gt;\nvoid construct( U* p, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator/construct
std::allocator::deallocate	A										<section class="prog__container">\n<p>Deallocates the storage referenced by the pointer <code>p</code>, which must be a pointer obtained by an earlier call to allocate(void).</p>\n<pre><code>void deallocate( T* p, std::size_t n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator/deallocate
std::allocator::destroy	A										<section class="prog__container">\n<p>Calls the destructor of the object pointed to by <code>p</code>...</p>\n<pre><code>template&lt; class U &gt;\nvoid destroy( U* p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator/destroy
std::allocator::max_size	A										<section class="prog__container">\n<p>Returns the maximum theoretically possible value of <code>n</code>, for which the call <code>allocate(n, 0)</code> could succeed.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator/max_size
std::allocator_arg_t	A										<section class="prog__container">\n<p> <code>std::allocator_arg_t</code> is an empty class type used to disambiguate the overloads of constructors and member functions of allocator-aware objects, including std::tuple, std::function...</p>\n<pre><code>struct allocator_arg_t {};</code></pre><pre><code>struct allocator_arg_t { explicit allocator_arg_t(void) = default; };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator_arg_t
std::allocator_traits	A										<section class="prog__container">\n<p>The <code>allocator_traits</code> class template provides the standardized way to access various properties of <code>Allocator</code>s.</p>\n<pre><code>template&lt; class Alloc &gt;\nstruct allocator_traits;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator_traits
std::allocator_traits::allocate	A										<section class="prog__container">\n<p>Uses the allocator <code>a</code> to allocate <code>n*sizeof(Alloc::value_type)</code> bytes of uninitialized storage.</p>\n<pre><code>static pointer allocate( Alloc& a, size_type n );</code></pre><pre><code>static pointer allocate( Alloc& a, size_type n, const_void_pointer hint );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator_traits/allocate
std::allocator_traits::construct	A										<section class="prog__container">\n<p>If possible, constructs an object of type <code>T</code> in allocated uninitialized storage pointed to by <code>p</code>, by calling...</p>\n<pre><code>template&lt; class T, class... Args &gt;\nstatic void construct( Alloc& a, T* p, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator_traits/construct
std::allocator_traits::deallocate	A										<section class="prog__container">\n<p>Uses the allocator <code>a</code> to deallocate the storage referenced by <code>p</code>, by calling <code>a.deallocate(p, n)</code>...</p>\n<pre><code>static void deallocate( Alloc& a, pointer p, size_type n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator_traits/deallocate
std::allocator_traits::destroy	A										<section class="prog__container">\n<p>Calls the destructor of the object pointed to by <code>p</code>.</p>\n<pre><code>template&lt; class T &gt;\nstatic void destroy( Alloc& a, T* p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator_traits/destroy
std::allocator_traits::max_size	A										<section class="prog__container">\n<p>If possible, obtains the maximum theoretically possible allocation size from the allocator <code>a</code>, by calling...</p>\n<pre><code>static size_type max_size( const Alloc& a );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator_traits/max_size
std::allocator_traits::select_on_container_copy_construction	A										<section class="prog__container">\n<p>If possible, obtains the copy-constructed version of the allocator <code>a</code>, by calling <code>a.select_on_container_copy_construction(void)</code>.</p>\n<pre><code>static Alloc select_on_container_copy_construction( const Alloc& a );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/allocator_traits/select_on_container_copy_construction
std::auto_ptr::auto_ptr	A										<section class="prog__container">\n<p>Constructs the <code>auto_ptr</code> from a pointer that refers to the object to manage.</p>\n<pre><code>explicit auto_ptr( X* p = 0 );</code></pre><pre><code>auto_ptr( auto_ptr& r );</code></pre><pre><code>template&lt; class Y &gt;\nauto_ptr( auto_ptr&lt;Y&gt;& r );</code></pre><pre><code>template&lt; class Y &gt;\nauto_ptr( auto_ptr_ref&lt;Y&gt; m );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/auto_ptr/auto_ptr
std::auto_ptr::get	A										<section class="prog__container">\n<p>Returns the pointer that is held by <code>*this</code>.</p>\n<pre><code>T* get(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/auto_ptr/get
std::auto_ptr::operator*	A										<section class="prog__container">\n<p>Dereferences a pointer to the managed object.</p>\n<pre><code>T& operator*(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/auto_ptr/operator*
std::auto_ptr::operator->	A										<section class="prog__container">\n<p>Dereferences a pointer to the managed object.</p>\n<pre><code>T* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/auto_ptr/operator*
std::auto_ptr::operator=	A										<section class="prog__container">\n<p>Replaces the managed object with the one managed by <code>r</code>.</p>\n<pre><code>auto_ptr& operator=( auto_ptr& r );</code></pre><pre><code>template&lt; class Y &gt;\nauto_ptr& operator=( auto_ptr&lt;Y&gt;& r );</code></pre><pre><code>auto_ptr& operator=( auto_ptr_ref m );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/auto_ptr/operator=
std::auto_ptr::operator auto_ptr<Y>	A										<section class="prog__container">\n<p>Converts <code>*this</code> to an <code>auto_ptr</code> for a different type <code>Y</code>.</p>\n<pre><code>template&lt; class Y &gt;\noperator auto_ptr&lt;Y&gt;(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/auto_ptr/operator_auto_ptr
std::auto_ptr::release	A										<section class="prog__container">\n<p>Releases the held pointer.</p>\n<pre><code>T* release(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/auto_ptr/release
std::auto_ptr::reset	A										<section class="prog__container">\n<p>Replaces the held pointer by <code>p</code>.</p>\n<pre><code>void reset( T* p = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/auto_ptr/reset
std::bad_weak_ptr	A										<section class="prog__container">\n<p><code>std::bad_weak_ptr</code> is the type of the object thrown as exceptions by the constructors of std::shared_ptr that take std::weak_ptr as the argument, when the std::weak_ptr refers to an...</p>\n<pre><code>class bad_weak_ptr;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/bad_weak_ptr
std::aligned_alloc	A										<section class="prog__container">\n<p>Allocate <code>size</code> bytes of uninitialized storage whose alignment is specified by <code>alignment</code>.</p>\n<pre><code>void* aligned_alloc( std::size_t alignment, std::size_t size );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/c/aligned_alloc
std::calloc	A										<section class="prog__container">\n<p>Allocates memory for an array of <code>num</code> objects of size <code>size</code> and initializes it to all bits zero.</p>\n<pre><code>void* calloc( std::size_t num, std::size_t size );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/c/calloc
std::free	A										<section class="prog__container">\n<p>Deallocates the space previously allocated by std::malloc(void), std::calloc(void) or std::realloc(void).</p>\n<pre><code>void free( void* ptr );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/c/free
std::malloc	A										<section class="prog__container">\n<p>Allocates <code>size</code> bytes of uninitialized storage.</p>\n<pre><code>void* malloc( std::size_t size );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/c/malloc
std::realloc	A										<section class="prog__container">\n<p>Reallocates the given area of memory.</p>\n<pre><code>void* realloc( void* ptr, std::size_t new_size );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/c/realloc
std::default_delete	A										<section class="prog__container">\n<p><code>std::default_delete</code> is the default destruction policy used by std::unique_ptr when no deleter is specified.</p>\n<pre><code>template&lt; class T &gt; struct default_delete&lt;T[]&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/default_delete
std::destroy_at	A										<section class="prog__container">\n<p>Calls the destructor of the object pointed to by <code>p</code>, as if by <code>p-&gt;~T(void)</code>.</p>\n<pre><code>template&lt; class T &gt;\nvoid destroy_at( T* p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/destroy_at
std::enable_shared_from_this	A										<section class="prog__container">\n<p><code>std::enable_shared_from_this</code> allows an object <code>t</code> that is currently managed by a std::shared_ptr named <code>pt</code> to safely generate additional std::shared_ptr instances...</p>\n<pre><code>template&lt; class T &gt; class enable_shared_from_this;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/enable_shared_from_this
std::enable_shared_from_this::enable_shared_from_this	A										<section class="prog__container">\n<p>Constructs new <code>enable_shared_from_this</code> object.</p>\n<pre><code>constexpr enable_shared_from_this(void);</code></pre><pre><code>enable_shared_from_this( const enable_shared_from_this&lt;T&gt;&obj );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/enable_shared_from_this/enable_shared_from_this
std::enable_shared_from_this::operator=	A										<section class="prog__container">\n<p>Does nothing; returns <code>*this</code>.</p>\n<pre><code>enable_shared_from_this&lt;T&gt;& operator=( const enable_shared_from_this&lt;T&gt; &obj );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/enable_shared_from_this/operator=
std::enable_shared_from_this::shared_from_this	A										<section class="prog__container">\n<p>Returns a <code>std::shared_ptr&lt;T&gt;</code> that shares ownership of <code>*this</code> with all existing <code>std::shared_ptr</code> that refer to <code>*this</code>.</p>\n<pre><code>shared_ptr&lt;T&gt; shared_from_this(void);</code></pre><pre><code>shared_ptr&lt;T const&gt; shared_from_this(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/enable_shared_from_this/shared_from_this
std::enable_shared_from_this::weak_from_this	A										<section class="prog__container">\n<p>Returns a <code>std::weak_ptr&lt;T&gt;</code> that tracks ownership of <code>*this</code> by all existing <code>std::shared_ptr</code> that refer to <code>*this</code>.</p>\n<pre><code>std::weak_ptr&lt;T&gt; weak_from_this(void);</code></pre><pre><code>std::weak_ptr&lt;T const&gt; weak_from_this(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/enable_shared_from_this/weak_from_this
std::declare_no_pointers	A										<section class="prog__container">\n<p>Informs the garbage collector or leak detector that the specified memory region (<code>n</code> bytes beginning at the byte pointed to by <code>p</code>) contains no traceable pointers.</p>\n<pre><code>void declare_no_pointers( char *p, std::size_t n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/gc/declare_no_pointers
std::declare_reachable	A										<section class="prog__container">\n<p>Declares the object referenced by the pointer <code>p</code> reachable.</p>\n<pre><code>void declare_reachable( void* p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/gc/declare_reachable
std::get_pointer_safety	A										<section class="prog__container">\n<p>Obtains the implementation-defined pointer safety model, which is a value of type std::pointer_safety.</p>\n<pre><code>std::pointer_safety get_pointer_safety(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/gc/get_pointer_safety
std::pointer_safety	A										<section class="prog__container">\n<p>The scoped enumeration type <code>pointer_safety</code> lists the pointer safety modes supported by C++...</p>\n<pre><code>enum class pointer_safety {\n     relaxed,\n     preferred,\n     strict\n};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/gc/pointer_safety
std::undeclare_no_pointers	A										<section class="prog__container">\n<p>Unregisters a range earlier registered with <code>std::declare_no_pointers(void)</code>.</p>\n<pre><code>void undeclare_no_pointers( char *p, std::size_t n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/gc/undeclare_no_pointers
std::undeclare_reachable	A										<section class="prog__container">\n<p>Removes the reachable status of the object, referenced by the pointer <code>p</code>, if it was previously set by std::declare_reachable.</p>\n<pre><code>template&lt; class T &gt;\nT* undeclare_reachable( T* p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/gc/undeclare_reachable
std::pmr::get_default_resource	A										<section class="prog__container">\n<p>Gets the default memory resource pointer.</p>\n<pre><code>std::pmr::memory_resource* get_default_resource(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/get_default_resource
std::get_temporary_buffer	A										<section class="prog__container">\n<p>Allocates uninitialized contiguous storage, which should be sufficient to store up to <code>count</code> adjacent objects of type <code>T</code>.</p>\n<pre><code>template&lt; class T &gt;\nstd::pair&lt; T*, std::ptrdiff_t &gt; get_temporary_buffer( std::ptrdiff_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/get_temporary_buffer
std::pmr::memory_resource	A										<section class="prog__container">\n<p>The class <code>std::pmr::memory_resource</code> is an abstract interface to an unbounded set of classes encapsulating memory resources.</p>\n<pre><code>class memory_resource;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource
std::pmr::memory_resource::allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>void* allocate(std::size_t bytes,\n               std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/allocate
std::pmr::monotonic_buffer_resource::allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>void* allocate(std::size_t bytes,\n               std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/allocate
std::pmr::synchronized_pool_resource::allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>void* allocate(std::size_t bytes,\n               std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/allocate
std::pmr::unsynchronized_pool_resource::allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>void* allocate(std::size_t bytes,\n               std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/allocate
std::pmr::memory_resource::deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>void deallocate(void* p,\n                std::size_t bytes,\n                std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/deallocate
std::pmr::monotonic_buffer_resource::deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>void deallocate(void* p,\n                std::size_t bytes,\n                std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/deallocate
std::pmr::synchronized_pool_resource::deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>void deallocate(void* p,\n                std::size_t bytes,\n                std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/deallocate
std::pmr::unsynchronized_pool_resource::deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>void deallocate(void* p,\n                std::size_t bytes,\n                std::size_t alignment = alignof(std::max_align_t));</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/deallocate
std::pmr::memory_resource::do_allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>virtual void* do_allocate(std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/do_allocate
std::pmr::monotonic_buffer_resource::do_allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>virtual void* do_allocate(std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/do_allocate
std::pmr::synchronized_pool_resource::do_allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>virtual void* do_allocate(std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/do_allocate
std::pmr::unsynchronized_pool_resource::do_allocate	A										<section class="prog__container">\n<p>Allocates storage with a size of at least <code>bytes</code> bytes.</p>\n<pre><code>virtual void* do_allocate(std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/do_allocate
std::pmr::memory_resource::do_deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>virtual void do_deallocate(void* p, std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/do_deallocate
std::pmr::monotonic_buffer_resource::do_deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>virtual void do_deallocate(void* p, std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/do_deallocate
std::pmr::synchronized_pool_resource::do_deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>virtual void do_deallocate(void* p, std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/do_deallocate
std::pmr::unsynchronized_pool_resource::do_deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>.</p>\n<pre><code>virtual void do_deallocate(void* p, std::size_t bytes, std::size_t alignment) = 0;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/do_deallocate
std::pmr::memory_resource::is_equal	A										<section class="prog__container">\n<p>Compares <code>*this</code> for equality with <code>other</code>.</p>\n<pre><code>bool is_equal(const memory_resource& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/is_equal
std::pmr::monotonic_buffer_resource::is_equal	A										<section class="prog__container">\n<p>Compares <code>*this</code> for equality with <code>other</code>.</p>\n<pre><code>bool is_equal(const memory_resource& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/is_equal
std::pmr::synchronized_pool_resource::is_equal	A										<section class="prog__container">\n<p>Compares <code>*this</code> for equality with <code>other</code>.</p>\n<pre><code>bool is_equal(const memory_resource& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/is_equal
std::pmr::unsynchronized_pool_resource::is_equal	A										<section class="prog__container">\n<p>Compares <code>*this</code> for equality with <code>other</code>.</p>\n<pre><code>bool is_equal(const memory_resource& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/is_equal
std::pmr::memory_resource::memory_resource	A										<section class="prog__container">\n<p> Implicitly declared copy constructor.</p>\n<pre><code>memory_resource(const memory_resource&) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/memory_resource/memory_resource
std::pmr::monotonic_buffer_resource	A										<section class="prog__container">\n<p>The class <code>std::pmr::monotonic_buffer_resource</code> is a special-purpose memory resource class that releases the allocated memory only when the resource is destroyed.</p>\n<pre><code>class monotonic_buffer_resource : public std::pmr::memory_resource;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/monotonic_buffer_resource
std::pmr::monotonic_buffer_resource::do_allocate	A										<section class="prog__container">\n<p>Allocates storage.</p>\n<pre><code>virtual void* do_allocate(std::size_t bytes, std::size_t alignment);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/monotonic_buffer_resource/do_allocate
std::pmr::monotonic_buffer_resource::do_deallocate	A										<section class="prog__container">\n<p>This function has no effect.</p>\n<pre><code>virtual void do_deallocate(void* p, std::size_t bytes, std::size_t alignment);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/monotonic_buffer_resource/do_deallocate
std::pmr::monotonic_buffer_resource::do_is_equal	A										<section class="prog__container">\n<p>Compare <code>*this</code> with <code>other</code> for identity - memory allocated using a <code>monotonic_buffer_resource</code> can only be deallocated using that same resource.</p>\n<pre><code>virtual bool do_is_equal(const std::pmr::memory_resource& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/monotonic_buffer_resource/do_is_equal
std::pmr::monotonic_buffer_resource::monotonic_buffer_resource	A										<section class="prog__container">\n<p>Constructs a <code>monotonic_buffer_resource</code>.</p>\n<pre><code>explicit monotonic_buffer_resource(std::pmr::memory_resource* upstream);</code></pre><pre><code>explicit monotonic_buffer_resource(std::size_t initial_size);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/monotonic_buffer_resource/monotonic_buffer_resource
std::pmr::monotonic_buffer_resource::release	A										<section class="prog__container">\n<p>Releases all allocated memory by calling the <code>deallocate</code> function on the upstream memory resource as necessary.</p>\n<pre><code>void release(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/monotonic_buffer_resource/release
std::pmr::monotonic_buffer_resource::upstream_resource	A										<section class="prog__container">\n<p>Returns a pointer to the upstream memory resource.</p>\n<pre><code>std::pmr::memory_resource* upstream_resource(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/monotonic_buffer_resource/upstream_resource
std::align_val_t	A										<section class="prog__container">\n<p>Both new-expression and delete-expression, when used with objects whose alignment requirement is greater than <code>__STDCPP_DEFAULT_NEW_ALIGNMENT__</code>, pass that alignment requirement as an...</p>\n<pre><code>enum class align_val_t : std::size_t {};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/new/align_val_t
std::bad_alloc	A										<section class="prog__container">\n<p><code>std::bad_alloc</code> is the type of the object thrown as exceptions by the allocation functions to report failure to allocate storage.</p>\n<pre><code>class bad_alloc;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/new/bad_alloc
std::bad_array_length	A										<section class="prog__container">\n<p><code>std::bad_array_length</code> is the type of the object thrown as exceptions by the constructors of arrays of runtime bound and objects of type <code>std::dynarray</code> to report invalid array...</p>\n<pre><code>class bad_array_length : public std::bad_alloc;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/new/bad_array_length
std::bad_array_new_length	A										<section class="prog__container">\n<p><code>std::bad_array_new_length</code> is the type of the object thrown as exceptions by the new-expressions to report invalid array lengths if...</p>\n<pre><code>class bad_array_new_length;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/new/bad_array_new_length
std::get_new_handler	A										<section class="prog__container">\n<p>Returns the currently installed new-handler, which may be a null pointer.</p>\n<pre><code>std::new_handler get_new_handler(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/new/get_new_handler
std::nothrow_t	A										<section class="prog__container">\n<p><code>std::nothrow_t</code> is an empty class type used to disambiguate the overloads of throwing and non-throwing allocation functions.</p>\n<pre><code>struct nothrow_t { explicit nothrow_t(void) = default; };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/new/nothrow_t
operator delete	A										<section class="prog__container">\n<p>Deallocates storage previously allocated by a matching operator new.</p>\n<pre><code>void operator delete  ( void* ptr );</code></pre><pre><code>void operator delete[]( void* ptr );</code></pre><pre><code>void operator delete  ( void* ptr, std::align_val_t al );</code></pre><pre><code>void operator delete[]( void* ptr, std::align_val_t al );</code></pre><pre><code>void operator delete  ( void* ptr, std::size_t sz );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/new/operator_delete
operator delete[]	A										<section class="prog__container">\n<p>Deallocates storage previously allocated by a matching operator new.</p>\n<pre><code>void operator delete[]( void* ptr );</code></pre><pre><code>void operator delete[]( void* ptr, std::align_val_t al );</code></pre><pre><code>void operator delete[]( void* ptr, std::size_t sz );</code></pre><pre><code>void operator delete[]( void* ptr, std::size_t sz, std::align_val_t al );</code></pre><pre><code>void operator delete[]( void* ptr, const std::nothrow_t& tag );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/new/operator_delete
operator new	A										<section class="prog__container">\n<p>Allocates requested number of bytes.</p>\n<pre><code>void* operator new  ( std::size_t count );</code></pre><pre><code>void* operator new[]( std::size_t count );</code></pre><pre><code>void* operator new  ( std::size_t count, std::align_val_t al);</code></pre><pre><code>void* operator new[]( std::size_t count, std::align_val_t al);</code></pre><pre><code>void* operator new  ( std::size_t count, const std::nothrow_t& tag);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/new/operator_new
operator new[]	A										<section class="prog__container">\n<p>Allocates requested number of bytes.</p>\n<pre><code>void* operator new[]( std::size_t count );</code></pre><pre><code>void* operator new[]( std::size_t count, std::align_val_t al);</code></pre><pre><code>void* operator new[]( std::size_t count, const std::nothrow_t& tag);</code></pre><pre><code>void* operator new[]( std::size_t count,\n                      std::align_val_t al, const std::nothrow_t&);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/new/operator_new
std::set_new_handler	A										<section class="prog__container">\n<p>Makes <code>new_p</code> the new global new-handler function and returns the previously installed new-handler.</p>\n<pre><code>std::new_handler set_new_handler( std::new_handler new_p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/new/set_new_handler
std::pmr::new_delete_resource	A										<section class="prog__container">\n<p>Returns a pointer to a <code>memory_resource</code> that uses the global operator new and operator delete to allocate memory.</p>\n<pre><code>std::pmr::memory_resource* new_delete_resource(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/new_delete_resource
std::pmr::null_memory_resource	A										<section class="prog__container">\n<p>Returns a pointer to a <code>memory_resource</code> that doesn't perform any allocation.</p>\n<pre><code>std::pmr::memory_resource* null_memory_resource(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/null_memory_resource
std::owner_less	A										<section class="prog__container">\n<p>This function object provides owner-based (as opposed to value-based) mixed-type ordering of both std::weak_ptr and std::shared_ptr.</p>\n<pre><code>template&lt; class T &gt;\nstruct owner_less; /* undefined */</code></pre><pre><code>template&lt; class T = void &gt;\nstruct owner_less; /* undefined */</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/owner_less
std::pointer_traits	A										<section class="prog__container">\n<p>The <code>pointer_traits</code> class template provides the standardized way to access certain properties of pointer-like types (fancy pointers, such as boost::interprocess::offset_ptr).</p>\n<pre><code>template&lt; class Ptr &gt; struct pointer_traits;</code></pre><pre><code>template&lt; class T &gt; struct pointer_traits&lt;T*&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/pointer_traits
std::pointer_traits::pointer_to	A										<section class="prog__container">\n<p>Constructs a dereferenceable pointer or pointer-like object ("fancy pointer") to its argument.</p>\n<pre><code>static pointer pointer_to( element_type& r );</code></pre><pre><code>static pointer pointer_to( element_type& r );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/pointer_traits/pointer_to
std::pmr::polymorphic_allocator	A										<section class="prog__container">\n<p>The class template <code>std::pmr::polymorphic_allocator</code> is an <code>Allocator</code> whose allocation behavior depends on the memory resource it is constructed with.</p>\n<pre><code>template&lt; class T &gt;\nclass polymorphic_allocator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/polymorphic_allocator
std::pmr::polymorphic_allocator::allocate	A										<section class="prog__container">\n<p>Allocates storage for <code>n</code> objects of type <code>T</code> using the underlying memory resource.</p>\n<pre><code>T* allocate( std::size_t n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/polymorphic_allocator/allocate
std::pmr::polymorphic_allocator::construct	A										<section class="prog__container">\n<p>Constructs an object in allocated, but not initialized storage pointed to by <code>p</code> the provided constructor arguments.</p>\n<pre><code>template &lt; class U, class... Args &gt;\nvoid construct( U* p, Args&&... args );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/polymorphic_allocator/construct
std::pmr::polymorphic_allocator::deallocate	A										<section class="prog__container">\n<p>Deallocates the storage pointed to by <code>p</code>, which must have been allocated from a std::pmr::memory_resource <code>x</code> that compares equal to <code>*resource(void)</code> using...</p>\n<pre><code>void deallocate(T* p, std::size_t n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/polymorphic_allocator/deallocate
std::pmr::polymorphic_allocator::destroy	A										<section class="prog__container">\n<p>Destroys the object pointed to by <code>p</code>, as if by calling <code>p-&gt;~U(void)</code>.</p>\n<pre><code>template&lt;class U&gt;\nvoid destroy(U* p);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/polymorphic_allocator/destroy
std::pmr::polymorphic_allocator::polymorphic_allocator	A										<section class="prog__container">\n<p>Constructs a new <code>polymorphic_allocator</code>.</p>\n<pre><code>polymorphic_allocator( const polymorphic_allocator& other ) = default;</code></pre><pre><code>template&lt; class U &gt; \npolymorphic_allocator( const polymorphic_allocator&lt;U&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/polymorphic_allocator/polymorphic_allocator
std::pmr::polymorphic_allocator::resource	A										<section class="prog__container">\n<p>Returns the memory resource pointer used by this polymorphic allocator.</p>\n<pre><code>memory_resource* resource(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/polymorphic_allocator/resource
std::pmr::pool_options	A										<section class="prog__container">\n<p><code>std::pmr::pool_options</code> is a set of constructor options for pool resources including std::pmr::synchronized_pool_resource and std::pmr::unsynchronized_pool_resource.</p>\n<pre><code>struct pool_options;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/pool_options
std::raw_storage_iterator	A										<section class="prog__container">\n<p>The output iterator <code>std::raw_storage_iterator</code> makes it possible for standard algorithms to store results in uninitialized memory.</p>\n<pre><code>template&lt; class OutputIt, class T &gt;\nclass raw_storage_iterator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/raw_storage_iterator
std::raw_storage_iterator::operator*	A										<section class="prog__container">\n<p>Dereferences the iterator.</p>\n<pre><code>raw_storage_iterator& operator*(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/raw_storage_iterator/operator*
std::raw_storage_iterator::operator++	A										<section class="prog__container">\n<p>Advances the iterator.</p>\n<pre><code>raw_storage_iterator& operator++(void);</code></pre><pre><code>raw_storage_iterator operator++(int);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/raw_storage_iterator/operator_arith
std::raw_storage_iterator::raw_storage_iterator	A										<section class="prog__container">\n<p>Initializes the iterator to point to the same value as <code>it</code> points.</p>\n<pre><code>explicit raw_storage_iterator( OutputIt it );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/raw_storage_iterator/raw_storage_iterator
std::return_temporary_buffer	A										<section class="prog__container">\n<p>Deallocates storage previously allocated with std::get_temporary_buffer.</p>\n<pre><code>template&lt; class T &gt;\nvoid return_temporary_buffer( T* p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/return_temporary_buffer
std::scoped_allocator_adaptor	A										<section class="prog__container">\n<p>The <code>std::scoped_allocator_adaptor</code> class template is an allocator which can be used with multilevel containers (vector of sets of lists of tuples of maps, etc).</p>\n<pre><code>template&lt; class OuterAlloc, class... InnerAlloc &gt;\nclass scoped_allocator_adaptor : public OuterAlloc;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor
std::scoped_allocator_adaptor::allocate	A										<section class="prog__container">\n<p>Uses the outer allocator to allocate uninitialized storage.</p>\n<pre><code>pointer allocate( size_type n );</code></pre><pre><code>pointer allocate( size_type n, const_void_pointer hint );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/allocate
std::scoped_allocator_adaptor::construct	A										<section class="prog__container">\n<p>Constructs an object in allocated, but not initialized storage pointed to by <code>p</code> using OuterAllocator and the provided constructor arguments.</p>\n<pre><code>template &lt; class T, class... Args &gt;\nvoid construct( T* p, Args&&... args );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/construct
std::scoped_allocator_adaptor::deallocate	A										<section class="prog__container">\n<p>Uses the outer allocator to deallocate the storage referenced by <code>p</code>, by calling <code>std::allocator_traits&lt;OuterAlloc&gt;::deallocate(outer_allocator(void), p, n)</code>...</p>\n<pre><code>void deallocate( pointer p, size_type n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/deallocate
std::scoped_allocator_adaptor::destroy	A										<section class="prog__container">\n<p>Uses the outer allocator to call the destructor of the object pointed to by <code>p</code>, by calling...</p>\n<pre><code>template&lt; class T &gt;\nvoid destroy( T* p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/destroy
std::scoped_allocator_adaptor::inner_allocator	A										<section class="prog__container">\n<p>Obtains a reference to the inner allocator used to declare this <code>scoped_allocator_adaptor</code>.</p>\n<pre><code>inner_allocator_type& inner_allocator(void);</code></pre><pre><code>const inner_allocator_type& inner_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/inner_allocator
std::scoped_allocator_adaptor::max_size	A										<section class="prog__container">\n<p>Reports the maximum allocation size supported by the outer allocator, by calling <code>std::allocator_traits&lt;OuterAlloc&gt;::max_size(outer_allocator(void))</code>...</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/max_size
std::scoped_allocator_adaptor::outer_allocator	A										<section class="prog__container">\n<p>Obtains a reference to the outer allocator used to declare this class.</p>\n<pre><code>outer_allocator_type& outer_allocator(void);</code></pre><pre><code>const outer_allocator_type& outer_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/outer_allocator
std::scoped_allocator_adaptor::scoped_allocator_adaptor	A										<section class="prog__container">\n<p>1) Default constructor: value-initializes the <code>OuterAlloc</code> base class and the inner allocator member object, if used by the implementation.</p>\n<pre><code>template&lt; class OuterA2 &gt;\nscoped_allocator_adaptor( OuterA2&& outerAlloc, const InnerAllocs&... innerAllocs);</code></pre><pre><code>scoped_allocator_adaptor( const scoped_allocator_adaptor& other );</code></pre><pre><code>scoped_allocator_adaptor( scoped_allocator_adaptor&& other );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/scoped_allocator_adaptor
std::scoped_allocator_adaptor::select_on_container_copy_construction	A										<section class="prog__container">\n<p>Creates a new instance of <code>std::scoped_allocator_adaptor</code>, where the outer allocator base class and each inner allocator subobject are obtained by calling...</p>\n<pre><code>scoped_allocator_adaptor select_on_container_copy_construction(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor/select_on_container_copy_construction
std::pmr::set_default_resource	A										<section class="prog__container">\n<p>If <code>r</code> is not null, sets the default memory resource pointer to <code>r</code>; otherwise, sets the default memory resource pointer to std::pmr::new_delete_resource.</p>\n<pre><code>std::pmr::memory_resource* set_default_resource(std::pmr::memory_resource* r);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/set_default_resource
std::shared_ptr	A										<section class="prog__container">\n<p><code>std::shared_ptr</code> is a smart pointer that retains shared ownership of an object through a pointer.</p>\n<pre><code>template&lt; class T &gt; class shared_ptr;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr
std::allocate_shared	A										<section class="prog__container">\n<p>Constructs an object of type <code>T</code> and wraps it in a std::shared_ptr using <code>args</code> as the parameter list for the constructor of <code>T</code>.</p>\n<pre><code>template&lt; class T, class Alloc, class... Args &gt;\nshared_ptr&lt;T&gt; allocate_shared( const Alloc& alloc, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/allocate_shared
std::shared_ptr::get	A										<section class="prog__container">\n<p>Returns the stored pointer.</p>\n<pre><code>element_type* get(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/get
std::make_shared	A										<section class="prog__container">\n<p>Constructs an object of type <code>T</code> and wraps it in a std::shared_ptr using <code>args</code> as the parameter list for the constructor of <code>T</code>.</p>\n<pre><code>template&lt; class T, class... Args &gt;\nshared_ptr&lt;T&gt; make_shared( Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/make_shared
std::shared_ptr::operator*	A										<section class="prog__container">\n<p>Dereferences the stored pointer.</p>\n<pre><code>T& operator*(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/operator*
std::shared_ptr::operator->	A										<section class="prog__container">\n<p>Dereferences the stored pointer.</p>\n<pre><code>T* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/operator*
std::shared_ptr::operator=	A										<section class="prog__container">\n<p>Replaces the managed object with the one managed by <code>r</code>.</p>\n<pre><code>shared_ptr& operator=( const shared_ptr& r );</code></pre><pre><code>template&lt; class Y &gt; \nshared_ptr& operator=( const shared_ptr&lt;Y&gt;& r );</code></pre><pre><code>shared_ptr& operator=( shared_ptr&& r );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/operator=
std::shared_ptr::operator[]	A										<section class="prog__container">\n<p>Index into the array pointed to by the stored pointer.</p>\n<pre><code>element_type& operator[]( std::ptrdiff_t idx )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/operator_at
std::shared_ptr::operator bool	A										<section class="prog__container">\n<p>Checks if <code>*this</code> stores a non-null pointer, i.e. whether <code>get(void) != nullptr</code>.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/operator_bool
std::shared_ptr::owner_before	A										<section class="prog__container">\n<p>Checks whether this <code>shared_ptr</code> precedes <code>other</code> in implementation defined owner-based (as opposed to value-based) order.</p>\n<pre><code>template&lt; class Y &gt; \nbool owner_before( const shared_ptr&lt;Y&gt;& other) const;</code></pre><pre><code>template&lt; class Y &gt;\nbool owner_before( const std::weak_ptr&lt;Y&gt;& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/owner_before
std::const_pointer_cast	A										<section class="prog__container">\n<p>Creates a new instance of std::shared_ptr whose stored pointer is obtained from <code>r</code>'s stored pointer using a cast expression.</p>\n<pre><code>template&lt; class T, class U &gt; \nstd::shared_ptr&lt;T&gt; const_pointer_cast( const std::shared_ptr&lt;U&gt;& r );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/pointer_cast
std::dynamic_pointer_cast	A										<section class="prog__container">\n<p>Creates a new instance of std::shared_ptr whose stored pointer is obtained from <code>r</code>'s stored pointer using a cast expression.</p>\n<pre><code>template&lt; class T, class U &gt; \nstd::shared_ptr&lt;T&gt; dynamic_pointer_cast( const std::shared_ptr&lt;U&gt;& r );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/pointer_cast
std::static_pointer_cast	A										<section class="prog__container">\n<p>Creates a new instance of std::shared_ptr whose stored pointer is obtained from <code>r</code>'s stored pointer using a cast expression.</p>\n<pre><code>template&lt; class T, class U &gt; \nstd::shared_ptr&lt;T&gt; static_pointer_cast( const std::shared_ptr&lt;U&gt;& r );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/pointer_cast
std::shared_ptr::reset	A										<section class="prog__container">\n<p>Replaces the managed object with an object pointed to by <code>ptr</code>.</p>\n<pre><code>void reset(void);</code></pre><pre><code>template&lt; class Y &gt; \nvoid reset( Y* ptr );</code></pre><pre><code>template&lt; class Y, class Deleter &gt; \nvoid reset( Y* ptr, Deleter d );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/reset
std::shared_ptr::shared_ptr	A										<section class="prog__container">\n<p>Constructs new <code>shared_ptr</code> from a variety of pointer types that refer to an object to manage.</p>\n<pre><code>constexpr shared_ptr(void);</code></pre><pre><code>constexpr shared_ptr( std::nullptr_t );</code></pre><pre><code>template&lt; class Y &gt; \nexplicit shared_ptr( Y* ptr );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/shared_ptr
std::shared_ptr::swap	A										<section class="prog__container">\n<p>Exchanges the contents of <code>*this</code> and <code>r</code>...</p>\n<pre><code>void swap( shared_ptr& r );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/swap
std::shared_ptr::unique	A										<section class="prog__container">\n<p>Checks if <code>*this</code> is the only <code>shared_ptr</code> instance managing the current object, i.e. whether <code>use_count(void) == 1</code>.</p>\n<pre><code>bool unique(void) const noexcept;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/unique
std::shared_ptr::use_count	A										<section class="prog__container">\n<p>Returns the number of different <code>shared_ptr</code> instances (<code>this</code> included) managing the current object.</p>\n<pre><code>long use_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/shared_ptr/use_count
std::pmr::synchronized_pool_resource	A										<section class="prog__container">\n<p>The class <code>std::pmr::synchronized_pool_resource</code> is a general-purpose memory resource class with the following properties...</p>\n<pre><code>class synchronized_pool_resource : public std::pmr::memory_resource;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/synchronized_pool_resource
std::pmr::synchronized_pool_resource::do_allocate	A										<section class="prog__container">\n<p>Allocates storage.</p>\n<pre><code>virtual void* do_allocate(std::size_t bytes, std::size_t alignment);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/synchronized_pool_resource/do_allocate
std::pmr::synchronized_pool_resource::do_deallocate	A										<section class="prog__container">\n<p>Returns the memory at <code>p</code> to the pool.</p>\n<pre><code>virtual void do_deallocate(void* p, std::size_t bytes, std::size_t alignment);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/synchronized_pool_resource/do_deallocate
std::pmr::synchronized_pool_resource::do_is_equal	A										<section class="prog__container">\n<p>Compare <code>*this</code> with <code>other</code> for identity - memory allocated using a <code>synchronized_pool_resource</code> can only be deallocated using that same resource.</p>\n<pre><code>virtual bool do_is_equal(const std::pmr::memory_resource& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/synchronized_pool_resource/do_is_equal
std::pmr::synchronized_pool_resource::options	A										<section class="prog__container">\n<p>Returns the options that controls the pooling behavior of this resource.</p>\n<pre><code>std::pmr::pool_options options(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/synchronized_pool_resource/options
std::pmr::synchronized_pool_resource::release	A										<section class="prog__container">\n<p>Releases all memory owned by this resource by calling the <code>deallocate</code> function of the upstream memory resource as needed.</p>\n<pre><code>void release(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/synchronized_pool_resource/release
std::pmr::synchronized_pool_resource::synchronized_pool_resource	A										<section class="prog__container">\n<p>Constructs a <code>synchronized_pool_resource</code>.</p>\n<pre><code>explicit synchronized_pool_resource(std::pmr::memory_resource* upstream);</code></pre><pre><code>explicit synchronized_pool_resource(const std::pmr::pool_options& opts);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/synchronized_pool_resource/synchronized_pool_resource
std::pmr::synchronized_pool_resource::upstream_resource	A										<section class="prog__container">\n<p>Returns a pointer to the upstream memory resource.</p>\n<pre><code>std::pmr::memory_resource* upstream_resource(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/synchronized_pool_resource/upstream_resource
std::uninitialized_fill_n	A										<section class="prog__container">\n<p> Same as (1), but executed according to <code>policy</code>.</p>\n<pre><code>template&lt; class ForwardIt, class Size, class T &gt;\nForwardIt uninitialized_fill_n( ForwardIt first, Size count, const T& value );</code></pre><pre><code>template&lt; class ExecutionPolicy, class ForwardIt, class Size, class T &gt;\nForwardIt uninitialized_fill_n( ExecutionPolicy&& policy, ForwardIt first, Size count, const T& value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/uninitialized_fill_n
std::unique_ptr	A										<section class="prog__container">\n<p><code>std::unique_ptr</code> is a smart pointer that owns and manages another object through a pointer and disposes of that object when the <code>unique_ptr</code> goes out of scope.</p>\n<pre><code>template&lt;\n    class T,\n    class Deleter = std::default_delete&lt;T&gt;\n&gt; class unique_ptr;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr
std::unique_ptr::get	A										<section class="prog__container">\n<p>Returns a pointer to the managed object or <code>nullptr</code> if no object is owned.</p>\n<pre><code>pointer get(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr/get
std::unique_ptr::get_deleter	A										<section class="prog__container">\n<p>Returns the deleter object which would be used for destruction of the managed object.</p>\n<pre><code>Deleter& get_deleter(void);</code></pre><pre><code>const Deleter& get_deleter(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr/get_deleter
std::make_unique	A										<section class="prog__container">\n<p>Constructs an object of type <code>T</code> and wraps it in a std::unique_ptr.</p>\n<pre><code>template&lt; class T, class... Args &gt;\nunique_ptr&lt;T&gt; make_unique( Args&&... args );</code></pre><pre><code>template&lt; class T &gt;\nunique_ptr&lt;T&gt; make_unique( std::size_t size );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique
std::unique_ptr::operator*	A										<section class="prog__container">\n<p><code>operator*</code> and <code>operator-&gt;</code> provide access to the object owned by <code>*this</code>.</p>\n<pre><code>typename std::add_lvalue_reference&lt;T&gt;::type operator*(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr/operator*
std::unique_ptr::operator->	A										<section class="prog__container">\n<p><code>operator*</code> and <code>operator-&gt;</code> provide access to the object owned by <code>*this</code>.</p>\n<pre><code>pointer operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr/operator*
std::unique_ptr::operator bool	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> owns an object, i.e. whether <code>get(void) != nullptr</code>.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr/operator_bool
std::unique_ptr::release	A										<section class="prog__container">\n<p>Releases the ownership of the managed object if any.</p>\n<pre><code>pointer release(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr/release
std::unique_ptr::reset	A										<section class="prog__container">\n<p>Replaces the managed object.</p>\n<pre><code>void reset( pointer ptr = pointer(void) );</code></pre><pre><code>template&lt; class U &gt; \nvoid reset( U );</code></pre><pre><code>void reset( std::nullptr_t p = nullptr );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr/reset
std::unique_ptr::swap	A										<section class="prog__container">\n<p>Swaps the managed objects and associated deleters of <code>*this</code> and another <code>unique_ptr</code> object <code>other</code>.</p>\n<pre><code>void swap(unique_ptr& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unique_ptr/swap
std::pmr::unsynchronized_pool_resource	A										<section class="prog__container">\n<p>The class <code>std::pmr::unsynchronized_pool_resource</code> is a general-purpose memory resource class with the following properties...</p>\n<pre><code>class unsynchronized_pool_resource : public std::pmr::memory_resource;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unsynchronized_pool_resource
std::pmr::unsynchronized_pool_resource::do_allocate	A										<section class="prog__container">\n<p>Allocates storage.</p>\n<pre><code>virtual void* do_allocate(std::size_t bytes, std::size_t alignment);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unsynchronized_pool_resource/do_allocate
std::pmr::unsynchronized_pool_resource::do_deallocate	A										<section class="prog__container">\n<p>Returns the memory at <code>p</code> to the pool.</p>\n<pre><code>virtual void do_deallocate(void* p, std::size_t bytes, std::size_t alignment);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unsynchronized_pool_resource/do_deallocate
std::pmr::unsynchronized_pool_resource::do_is_equal	A										<section class="prog__container">\n<p>Compare <code>*this</code> with <code>other</code> for identity - memory allocated using a <code>unsynchronized_pool_resource</code> can only be deallocated using that same resource.</p>\n<pre><code>virtual bool do_is_equal(const std::pmr::memory_resource& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unsynchronized_pool_resource/do_is_equal
std::pmr::unsynchronized_pool_resource::options	A										<section class="prog__container">\n<p>Returns the options that controls the pooling behavior of this resource.</p>\n<pre><code>std::pmr::pool_options options(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unsynchronized_pool_resource/options
std::pmr::unsynchronized_pool_resource::release	A										<section class="prog__container">\n<p>Releases all memory owned by this resource by calling the <code>deallocate</code> function of the upstream memory resource as needed.</p>\n<pre><code>void release(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unsynchronized_pool_resource/release
std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource	A										<section class="prog__container">\n<p>Constructs a <code>unsynchronized_pool_resource</code>.</p>\n<pre><code>explicit unsynchronized_pool_resource(std::pmr::memory_resource* upstream);</code></pre><pre><code>explicit unsynchronized_pool_resource(const std::pmr::pool_options& opts);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unsynchronized_pool_resource/unsynchronized_pool_resource
std::pmr::unsynchronized_pool_resource::upstream_resource	A										<section class="prog__container">\n<p>Returns a pointer to the upstream memory resource.</p>\n<pre><code>std::pmr::memory_resource* upstream_resource(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/unsynchronized_pool_resource/upstream_resource
std::uses_allocator	A										<section class="prog__container">\n<p>If <code>T</code> has a member typedef <code>allocator_type</code> which is convertible from <code>Alloc</code> or is an alias of std::experimental::erased_type (library fundamentals TS), the member...</p>\n<pre><code>template&lt; class T, class Alloc &gt; struct uses_allocator;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/uses_allocator
std::weak_ptr	A										<section class="prog__container">\n<p><code>std::weak_ptr</code> is a smart pointer that holds a non-owning ("weak") reference to an object that is managed by std::shared_ptr.</p>\n<pre><code>template&lt; class T &gt; class weak_ptr;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/weak_ptr
std::weak_ptr::expired	A										<section class="prog__container">\n<p>Checks whether the managed object has already been deleted.</p>\n<pre><code>bool expired(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/weak_ptr/expired
std::weak_ptr::lock	A										<section class="prog__container">\n<p>Creates a new std::shared_ptr that shares ownership of the managed object.</p>\n<pre><code>std::shared_ptr&lt;T&gt; lock(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/weak_ptr/lock
std::weak_ptr::operator=	A										<section class="prog__container">\n<p>Replaces the managed object with the one managed by <code>r</code>.</p>\n<pre><code>weak_ptr& operator=( const weak_ptr& r );</code></pre><pre><code>template&lt; class Y &gt; \nweak_ptr& operator=( const weak_ptr&lt;Y&gt;& r );</code></pre><pre><code>template&lt; class Y &gt; \nweak_ptr& operator=( const shared_ptr&lt;Y&gt;& r );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/weak_ptr/operator=
std::weak_ptr::owner_before	A										<section class="prog__container">\n<p>Checks whether this <code>weak_ptr</code> precedes <code>other</code> in implementation defined owner-based (as opposed to value-based) order.</p>\n<pre><code>template&lt; class Y &gt; \nbool owner_before( const weak_ptr&lt;Y&gt;& other) const;</code></pre><pre><code>template&lt; class Y &gt;\nbool owner_before( const std::shared_ptr&lt;Y&gt;& other) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/weak_ptr/owner_before
std::weak_ptr::reset	A										<section class="prog__container">\n<p>Releases the reference to the managed object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/weak_ptr/reset
std::weak_ptr::swap	A										<section class="prog__container">\n<p>Exchanges the contents of <code>*this</code> and <code>r</code>...</p>\n<pre><code>void swap( weak_ptr& r );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/weak_ptr/swap
std::weak_ptr::use_count	A										<section class="prog__container">\n<p>Returns the number of <code>shared_ptr</code> instances that share ownership of the managed object, or <code>​0​</code> if the managed object has already been deleted, i.e. <code>*this</code> is empty.</p>\n<pre><code>long use_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/memory/weak_ptr/use_count
std::weak_ptr::weak_ptr	A										<section class="prog__container">\n<p>Constructs new <code>weak_ptr</code> that potentially shares an object with <code>r</code>.</p>\n<pre><code>constexpr weak_ptr(void);</code></pre><pre><code>weak_ptr( const weak_ptr& r );</code></pre><pre><code>template&lt; class Y &gt; \nweak_ptr( const weak_ptr&lt;Y&gt;& r );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/memory/weak_ptr/weak_ptr
std::complex	A										<section class="prog__container">\n<p>The specializations <code>std::complex&lt;float&gt;</code>, <code>std::complex&lt;double&gt;</code>, and <code>std::complex&lt;long double&gt;</code> are <code>LiteralType</code>s for representing...</p>\n<pre><code>template&lt; class T &gt;\nclass complex;</code></pre><pre><code>template&lt;&gt; class complex&lt;float&gt;;</code></pre><pre><code>template&lt;&gt; class complex&lt;double&gt;;</code></pre><pre><code>template&lt;&gt; class complex&lt;long double&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/complex
std::complex::complex	A										<section class="prog__container">\n<p>Constructs the std::complex object.</p>\n<pre><code>constexpr complex( const T& re = T(void), const T& im = T(void) );</code></pre><pre><code>constexpr complex( const complex& other );</code></pre><pre><code>template&lt; class X &gt;\nconstexpr complex( const complex&lt;X&gt;&  other);</code></pre><pre><code>constexpr complex(float re = 0.0f, float im = 0.0f);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/numeric/complex/complex
std::complex::imag	A										<section class="prog__container">\n<p>Accesses the imaginary part of the complex number.</p>\n<pre><code>constexpr T imag(void) const;</code></pre><pre><code>void imag( T value );</code></pre><pre><code>constexpr float imag(void);</code></pre><pre><code>constexpr float imag(void) const;</code></pre><pre><code>void imag( float value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/numeric/complex/imag
std::complex::operator=	A										<section class="prog__container">\n<p>Assigns new values to the contents.</p>\n<pre><code>complex&lt;T&gt;& operator=( const T& x );</code></pre><pre><code>template&lt; class X &gt;\ncomplex&lt;T&gt;& operator=( const complex&lt;X&gt;& cx );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/complex/operator=
std::complex::operator*=	A										<section class="prog__container">\n<p>Implements the compound assignment operators for complex arithmetic and for mixed complex/scalar arithmetic.</p>\n<pre><code>complex&lt;T&gt;& operator*=( const T& other );</code></pre><pre><code>template&lt; class X &gt;\ncomplex&lt;T&gt;& operator*=( const complex&lt;X&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/complex/operator_arith
std::complex::operator+=	A										<section class="prog__container">\n<p>Implements the compound assignment operators for complex arithmetic and for mixed complex/scalar arithmetic.</p>\n<pre><code>complex&lt;T&gt;& operator+=( const T& other );</code></pre><pre><code>template&lt; class X &gt;\ncomplex&lt;T&gt;& operator+=( const complex&lt;X&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/complex/operator_arith
std::complex::operator-=	A										<section class="prog__container">\n<p>Implements the compound assignment operators for complex arithmetic and for mixed complex/scalar arithmetic.</p>\n<pre><code>complex&lt;T&gt;& operator-=( const T& other );</code></pre><pre><code>template&lt; class X &gt;\ncomplex&lt;T&gt;& operator-=( const complex&lt;X&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/complex/operator_arith
std::complex::operator/=	A										<section class="prog__container">\n<p>Implements the compound assignment operators for complex arithmetic and for mixed complex/scalar arithmetic.</p>\n<pre><code>complex&lt;T&gt;& operator/=( const T& other );</code></pre><pre><code>template&lt; class X &gt;\ncomplex&lt;T&gt;& operator/=( const complex&lt;X&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/complex/operator_arith
std::complex::real	A										<section class="prog__container">\n<p>Accesses the real part of the complex number.</p>\n<pre><code>constexpr T real(void) const;</code></pre><pre><code>void real( T value );</code></pre><pre><code>constexpr float real(void);</code></pre><pre><code>constexpr float real(void) const;</code></pre><pre><code>void real( float value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/numeric/complex/real
std::feclearexcept	A										<section class="prog__container">\n<p>Attempts to clear the floating-point exceptions that are listed in the bitmask argument <code>excepts</code>, which is a bitwise OR of the floating point exception macros.</p>\n<pre><code>int feclearexcept( int excepts );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feclearexcept
std::fegetenv	A										<section class="prog__container">\n<p>Manages the status of the floating-point environment.</p>\n<pre><code>int fegetenv( std::fenv_t* envp )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feenv
std::fesetenv	A										<section class="prog__container">\n<p>Manages the status of the floating-point environment.</p>\n<pre><code>int fesetenv( const std::fenv_t* envp );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feenv
std::fegetexceptflag	A										<section class="prog__container">\n<p>1) Attempts to obtain the full contents of the floating-point exception flags that are listed in the bitmask argument <code>excepts</code>, which is a bitwise OR of the floating point exception...</p>\n<pre><code>int fegetexceptflag( std::fexcept_t* flagp, int excepts );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feexceptflag
std::fesetexceptflag	A										<section class="prog__container">\n<p>1) Attempts to obtain the full contents of the floating-point exception flags that are listed in the bitmask argument <code>excepts</code>, which is a bitwise OR of the floating point exception...</p>\n<pre><code>int fesetexceptflag( const std::fexcept_t* flagp, int excepts );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feexceptflag
std::feholdexcept	A										<section class="prog__container">\n<p>First, saves the current floating-point environment to the object pointed to by <code>envp</code> (similar to std::fegetenv), then clears all floating-point status flags, and then installs the...</p>\n<pre><code>int feholdexcept( std::fenv_t* envp )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feholdexcept
std::feraiseexcept	A										<section class="prog__container">\n<p>Attempts to raise all floating point exceptions listed in <code>excepts</code> (a bitwise OR of the floating point exception macros).</p>\n<pre><code>int feraiseexcept( int excepts );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feraiseexcept
std::fegetround	A										<section class="prog__container">\n<p>Manages the floating-point rounding direction.</p>\n<pre><code>int fegetround(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feround
std::fesetround	A										<section class="prog__container">\n<p>Manages the floating-point rounding direction.</p>\n<pre><code>int fesetround( int round )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feround
std::fetestexcept	A										<section class="prog__container">\n<p>Determines which of the specified subset of the floating point exceptions are currently set.</p>\n<pre><code>int fetestexcept( int excepts );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/fetestexcept
std::feupdateenv	A										<section class="prog__container">\n<p>First, remembers the currently raised floating-point exceptions, then restores the floating-point environment from the object pointed to by <code>envp</code> (similar to std::fesetenv), then raises...</p>\n<pre><code>int feupdateenv( const std::fenv_t* envp )</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/fenv/feupdateenv
std::gcd	A										<section class="prog__container">\n<p>Computes the greatest common divisor of the integers <code>m</code> and <code>n</code>.</p>\n<pre><code>template&lt; class M, class N&gt;\nconstexpr std::common_type_t&lt;M, N&gt; gcd(M m, N n);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/gcd
std::lcm	A										<section class="prog__container">\n<p>Computes the least common multiple of the integers <code>m</code> and <code>n</code>.</p>\n<pre><code>template&lt; class M, class N&gt;\nconstexpr std::common_type_t&lt;M, N&gt; lcm(M m, N n);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/lcm
std::abs(int)	A										<section class="prog__container">\n<p>Computes the absolute value of an integer number.</p>\n<pre><code>int       abs( int n );</code></pre><pre><code>long      abs( long n );</code></pre><pre><code>long long abs( long long n );</code></pre><pre><code>std::intmax_t abs( std::intmax_t n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/abs
std::labs	A										<section class="prog__container">\n<p>Computes the absolute value of an integer number.</p>\n<pre><code>long       labs( long n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/abs
std::llabs	A										<section class="prog__container">\n<p>Computes the absolute value of an integer number.</p>\n<pre><code>long long llabs( long long n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/abs
std::acos	A										<section class="prog__container">\n<p>Computes the principal value of the arc cosine of <code>arg</code>.</p>\n<pre><code>float       acos( float arg );</code></pre><pre><code>double      acos( double arg );</code></pre><pre><code>long double acos( long double arg );</code></pre><pre><code>double      acos( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/acos
std::acosh	A										<section class="prog__container">\n<p>Computes the inverse hyperbolic cosine of <code>arg</code>.</p>\n<pre><code>float       acosh( float arg );</code></pre><pre><code>double      acosh( double arg );</code></pre><pre><code>long double acosh( long double arg );</code></pre><pre><code>double      acosh( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/acosh
std::asin	A										<section class="prog__container">\n<p>Computes the principal value of the arc sine of <code>arg</code>.</p>\n<pre><code>float       asin( float arg );</code></pre><pre><code>double      asin( double arg );</code></pre><pre><code>long double asin( long double arg );</code></pre><pre><code>double      asin( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/asin
std::asinh	A										<section class="prog__container">\n<p>Computes the inverse hyperbolic sine of <code>arg</code>.</p>\n<pre><code>float       asinh( float arg );</code></pre><pre><code>double      asinh( double arg );</code></pre><pre><code>long double asinh( long double arg );</code></pre><pre><code>double      asinh( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/asinh
std::atan	A										<section class="prog__container">\n<p>Computes the principal value of the arc tangent of <code>arg</code>...</p>\n<pre><code>float       atan( float arg );</code></pre><pre><code>double      atan( double arg );</code></pre><pre><code>long double atan( long double arg );</code></pre><pre><code>double      atan( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/atan
std::atan2	A										<section class="prog__container">\n<p>Computes the arc tangent of <code>y/x</code> using the signs of arguments to determine the correct quadrant.</p>\n<pre><code>float       atan2( float y, float x );</code></pre><pre><code>double      atan2( double y, double x );</code></pre><pre><code>long double atan2( long double y, long double x );</code></pre><pre><code>Promoted    atan2( Arithmetic1 y, Arithmetic2 x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/atan2
std::atanh	A										<section class="prog__container">\n<p>Computes the inverse hyperbolic tangent of <code>arg</code>.</p>\n<pre><code>float       atanh( float arg );</code></pre><pre><code>double      atanh( double arg );</code></pre><pre><code>long double atanh( long double arg );</code></pre><pre><code>double      atanh( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/atanh
std::cbrt	A										<section class="prog__container">\n<p>Computes the cubic root of <code>arg</code>.</p>\n<pre><code>float       cbrt( float arg );</code></pre><pre><code>double      cbrt( double arg );</code></pre><pre><code>long double cbrt( long double arg );</code></pre><pre><code>double      cbrt( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/cbrt
std::cos	A										<section class="prog__container">\n<p>Computes the cosine of <code>arg</code> (measured in radians).</p>\n<pre><code>float       cos( float arg );</code></pre><pre><code>double      cos( double arg );</code></pre><pre><code>long double cos( long double arg );</code></pre><pre><code>double      cos( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/cos
std::cosh	A										<section class="prog__container">\n<p>Computes the hyperbolic cosine of <code>arg</code>...</p>\n<pre><code>float       cosh( float arg );</code></pre><pre><code>double      cosh( double arg );</code></pre><pre><code>long double cosh( long double arg );</code></pre><pre><code>double      cosh( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/cosh
std::div	A										<section class="prog__container">\n<p>Computes both the quotient and the remainder of the division of the numerator <code>x</code> by the denominator <code>y</code>...</p>\n<pre><code>std::div_t     div( int x, int y );</code></pre><pre><code>std::ldiv_t    div( long x, long y );</code></pre><pre><code>std::lldiv_t   div( long long x, long long y );</code></pre><pre><code>std::imaxdiv_t div( std::intmax_t x, std::intmax_t y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/div
std::div_t	A										<section class="prog__container">\n<p>Computes both the quotient and the remainder of the division of the numerator <code>x</code> by the denominator <code>y</code>...</p>\n<pre><code>std::div_t     div( int x, int y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/div
std::imaxdiv	A										<section class="prog__container">\n<p>Computes both the quotient and the remainder of the division of the numerator <code>x</code> by the denominator <code>y</code>...</p>\n<pre><code>std::imaxdiv_t imaxdiv( std::intmax_t x, std::intmax_t y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/div
std::imaxdiv_t	A										<section class="prog__container">\n<p>Computes both the quotient and the remainder of the division of the numerator <code>x</code> by the denominator <code>y</code>...</p>\n<pre><code>std::imaxdiv_t div( std::intmax_t x, std::intmax_t y );</code></pre><pre><code>std::imaxdiv_t imaxdiv( std::intmax_t x, std::intmax_t y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/div
std::ldiv	A										<section class="prog__container">\n<p>Computes both the quotient and the remainder of the division of the numerator <code>x</code> by the denominator <code>y</code>...</p>\n<pre><code>std::ldiv_t   ldiv( long x, long y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/div
std::ldiv_t	A										<section class="prog__container">\n<p>Computes both the quotient and the remainder of the division of the numerator <code>x</code> by the denominator <code>y</code>...</p>\n<pre><code>std::ldiv_t    div( long x, long y );</code></pre><pre><code>std::ldiv_t   ldiv( long x, long y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/div
std::lldiv	A										<section class="prog__container">\n<p>Computes both the quotient and the remainder of the division of the numerator <code>x</code> by the denominator <code>y</code>...</p>\n<pre><code>std::lldiv_t lldiv( long long x, long long y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/div
std::lldiv_t	A										<section class="prog__container">\n<p>Computes both the quotient and the remainder of the division of the numerator <code>x</code> by the denominator <code>y</code>...</p>\n<pre><code>std::lldiv_t   div( long long x, long long y );</code></pre><pre><code>std::lldiv_t lldiv( long long x, long long y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/div
std::exp	A										<section class="prog__container">\n<p>Computes the <i>e</i> (Euler's number, <code>2.7182818</code>) raised to the given power <code>arg</code>...</p>\n<pre><code>float       exp( float arg );</code></pre><pre><code>double      exp( double arg );</code></pre><pre><code>long double exp( long double arg );</code></pre><pre><code>double      exp( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/exp
std::nan	A										<section class="prog__container">\n<p>Converts the implementation-defined character string <code>arg</code> into the corresponding quiet NaN value, as if by calling std::strtod, std::strtof, or std::strtold, respectively, as follows...</p>\n<pre><code>double      nan( const char* arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/nan
std::nanf	A										<section class="prog__container">\n<p>Converts the implementation-defined character string <code>arg</code> into the corresponding quiet NaN value, as if by calling std::strtod, std::strtof, or std::strtold, respectively, as follows...</p>\n<pre><code>float       nanf( const char* arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/nan
std::nanl	A										<section class="prog__container">\n<p>Converts the implementation-defined character string <code>arg</code> into the corresponding quiet NaN value, as if by calling std::strtod, std::strtof, or std::strtold, respectively, as follows...</p>\n<pre><code>long double nanl( const char* arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/nan
std::nextafter	A										<section class="prog__container">\n<p>Returns the next representable value of <code>from</code> in the direction of <code>to</code>.</p>\n<pre><code>float       nextafter( float from, float to );</code></pre><pre><code>double      nextafter( double from, double to );</code></pre><pre><code>long double nextafter( long double from, long double to );</code></pre><pre><code>Promoted    nextafter( Arithmetic from, Arithmetic to );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/nextafter
std::nexttoward	A										<section class="prog__container">\n<p>Returns the next representable value of <code>from</code> in the direction of <code>to</code>.</p>\n<pre><code>float       nexttoward( float from, long double to );</code></pre><pre><code>double      nexttoward( double from, long double to );</code></pre><pre><code>long double nexttoward( long double from, long double to );</code></pre><pre><code>double      nexttoward( Integral from, long double to );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/nextafter
std::sin	A										<section class="prog__container">\n<p>Computes the sine of <code>arg</code> (measured in radians).</p>\n<pre><code>float       sin( float arg );</code></pre><pre><code>double      sin( double arg );</code></pre><pre><code>long double sin( long double arg );</code></pre><pre><code>double      sin( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/sin
std::sinh	A										<section class="prog__container">\n<p>Computes the hyperbolic sine of <code>arg</code>...</p>\n<pre><code>float       sinh( float arg );</code></pre><pre><code>double      sinh( double arg );</code></pre><pre><code>long double sinh( long double arg );</code></pre><pre><code>double      sinh( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/sinh
std::sqrt	A										<section class="prog__container">\n<p>Computes the square root of <code>arg</code>.</p>\n<pre><code>float       sqrt( float arg );</code></pre><pre><code>double      sqrt( double arg );</code></pre><pre><code>long double sqrt( long double arg );</code></pre><pre><code>double      sqrt( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/sqrt
std::tan	A										<section class="prog__container">\n<p>Computes the tangent of <code>arg</code> (measured in radians).</p>\n<pre><code>float       tan( float arg );</code></pre><pre><code>double      tan( double arg );</code></pre><pre><code>long double tan( long double arg );</code></pre><pre><code>double      tan( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/tan
std::tanh	A										<section class="prog__container">\n<p>Computes the hyperbolic tangent of <code>arg</code>...</p>\n<pre><code>float       tanh( float arg );</code></pre><pre><code>double      tanh( double arg );</code></pre><pre><code>long double tanh( long double arg );</code></pre><pre><code>double      tanh( Integral arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/math/tanh
std::bernoulli_distribution	A										<section class="prog__container">\n<p>Produces random boolean values, according to the discrete probability function.</p>\n<pre><code>class bernoulli_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution
std::bernoulli_distribution::bernoulli_distribution	A										<section class="prog__container">\n<p>Constructs new distribution object.</p>\n<pre><code>explicit bernoulli_distribution( double p = 0.5 );</code></pre><pre><code>explicit bernoulli_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution/bernoulli_distribution
std::bernoulli_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution/max
std::bernoulli_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution/min
std::bernoulli_distribution::p	A										<section class="prog__container">\n<p>Returns the p parameter the distribution was constructed with.</p>\n<pre><code>double p(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution/p
std::bernoulli_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution/param
std::bernoulli_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/bernoulli_distribution/reset
std::binomial_distribution	A										<section class="prog__container">\n<p>Produces random non-negative integer values i, distributed according to discrete probability function...</p>\n<pre><code>template&lt; class IntType = int &gt;\nclass binomial_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution
std::binomial_distribution::binomial_distribution	A										<section class="prog__container">\n<p>Constructs new distribution object.</p>\n<pre><code>explicit binomial_distribution( IntType t = 1, double p = 0.5 );</code></pre><pre><code>explicit binomial_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution/binomial_distribution
std::binomial_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution/max
std::binomial_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution/min
std::binomial_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution/param
std::binomial_distribution::p	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>double p(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution/params
std::binomial_distribution::t	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>IntType t(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution/params
std::binomial_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/binomial_distribution/reset
std::cauchy_distribution	A										<section class="prog__container">\n<p>Produces random numbers according to a Cauchy distribution (also called Lorentz distribution)...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass cauchy_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution
std::cauchy_distribution::cauchy_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit cauchy_distribution( RealType a = 0.0, RealType b = 1.0 );</code></pre><pre><code>explicit cauchy_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/cauchy_distribution
std::cauchy_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/max
std::cauchy_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/min
std::cauchy_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/operator()
std::cauchy_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/param
std::cauchy_distribution::a	A										<section class="prog__container">\n<p>Returns the distribution parameters with which the distribution was constructed.</p>\n<pre><code>RealType a(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/params
std::cauchy_distribution::b	A										<section class="prog__container">\n<p>Returns the distribution parameters with which the distribution was constructed.</p>\n<pre><code>RealType b(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/params
std::cauchy_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/cauchy_distribution/reset
std::chi_squared_distribution	A										<section class="prog__container">\n<p>The <code>chi_squared_distribution</code> produces random numbers x&gt;0 according to the Chi-squared distribution...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass chi_squared_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution
std::chi_squared_distribution::chi_squared_distribution	A										<section class="prog__container">\n<p>Constructs new distribution object.</p>\n<pre><code>explicit chi_squared_distribution( RealType n = 1.0 );</code></pre><pre><code>explicit chi_squared_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/chi_squared_distribution
std::chi_squared_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/max
std::chi_squared_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/min
std::chi_squared_distribution::n	A										<section class="prog__container">\n<p>Returns the n parameter the distribution was constructed with.</p>\n<pre><code>RealType n(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/n
std::chi_squared_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/operator()
std::chi_squared_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/param
std::chi_squared_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/chi_squared_distribution/reset
std::discard_block_engine	A										<section class="prog__container">\n<p><code>discard_block_engine</code> is a pseudo-random number generator adaptor that discards a certain amount of data produced by the base engine.</p>\n<pre><code>template&lt;\n    class Engine, \n    size_t P, size_t R\n&gt; class discard_block_engine;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine
std::discard_block_engine::base	A										<section class="prog__container">\n<p>Returns the underlying engine.</p>\n<pre><code>const Engine& base(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/base
std::discard_block_engine::discard	A										<section class="prog__container">\n<p>Advances the internal state by <code>z</code> times.</p>\n<pre><code>void discard( unsigned long long z );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/discard
std::discard_block_engine::discard_block_engine	A										<section class="prog__container">\n<p>Constructs new pseudo-random engine adaptor.</p>\n<pre><code>explicit discard_block_engine( result_type s );</code></pre><pre><code>template&lt; class Sseq &gt;\nexplicit discard_block_engine( Sseq& seq );</code></pre><pre><code>explicit discard_block_engine( const Engine& e );</code></pre><pre><code>explicit discard_block_engine( Engine&& e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/discard_block_engine
std::discard_block_engine::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the engine adaptor.</p>\n<pre><code>static constexpr result_type max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/max
std::discard_block_engine::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the engine adaptor.</p>\n<pre><code>static constexpr result_type min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/min
std::discard_block_engine::operator()	A										<section class="prog__container">\n<p>Generates a random value.</p>\n<pre><code>result_type operator(void)();</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/operator()
std::discard_block_engine::seed	A										<section class="prog__container">\n<p>Reinitializes the internal state of the underlying engine using a new seed value.</p>\n<pre><code>void seed(void);</code></pre><pre><code>void seed( result_type value );</code></pre><pre><code>template&lt; class Sseq &gt; \nvoid seed( Sseq& seq );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discard_block_engine/seed
std::discrete_distribution	A										<section class="prog__container">\n<p><code>std::discrete_distribution</code> produces random integers on the interval <code>[0, n)</code>, where the probability of each individual integer <code>i</code> is defined as wi/S, that is the...</p>\n<pre><code>template&lt; class IntType = int &gt;\nclass discrete_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution
std::discrete_distribution::discrete_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>template&lt; class InputIt &gt;\ndiscrete_distribution( InputIt first, InputIt last );</code></pre><pre><code>template&lt; class UnaryOperation &gt;\ndiscrete_distribution( std::size_t count, double xmin, double xmax,\n                       UnaryOperation unary_op );</code></pre><pre><code>explicit discrete_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/discrete_distribution
std::discrete_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/max
std::discrete_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/min
std::discrete_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/operator()
std::discrete_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/param
std::discrete_distribution::probabilities	A										<section class="prog__container">\n<p>Obtains a <code>std::vector&lt;double&gt;</code> containing the individual probabilities of each integer that is generated by this distribution.</p>\n<pre><code>std::vector&lt;double&gt; probabilities(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/probabilities
std::discrete_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution/reset
std::exponential_distribution	A										<section class="prog__container">\n<p>Produces random non-negative floating-point values x, distributed according to probability density function...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass exponential_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution
std::exponential_distribution::exponential_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit exponential_distribution( RealType lambda = 1.0 );</code></pre><pre><code>explicit exponential_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/exponential_distribution
std::exponential_distribution::lambda	A										<section class="prog__container">\n<p>Returns the λ distribution parameter the distribution was constructed with.</p>\n<pre><code>RealType lambda(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/lambda
std::exponential_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/max
std::exponential_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/min
std::exponential_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/operator()
std::exponential_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/param
std::exponential_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/exponential_distribution/reset
std::extreme_value_distribution	A										<section class="prog__container">\n<p>Produces random numbers according to the extreme value distribution (it is also known as Gumbel Type I, log-Weibull, Fisher-Tippett Type I)...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass extreme_value_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution
std::extreme_value_distribution::extreme_value_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit extreme_value_distribution( RealType a = 0.0, RealType b = 1.0 );</code></pre><pre><code>explicit extreme_value_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/extreme_value_distribution
std::extreme_value_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/max
std::extreme_value_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/min
std::extreme_value_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/operator()
std::extreme_value_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/param
std::extreme_value_distribution::a	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType a(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/params
std::extreme_value_distribution::b	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType b(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/params
std::extreme_value_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/extreme_value_distribution/reset
std::fisher_f_distribution	A										<section class="prog__container">\n<p>Produces random numbers according to the f-distribution...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass fisher_f_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution
std::fisher_f_distribution::fisher_f_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit fisher_f_distribution( RealType m = 1.0, RealType n = 1.0 );</code></pre><pre><code>explicit fisher_f_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/fisher_f_distribution
std::fisher_f_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/max
std::fisher_f_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/min
std::fisher_f_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/operator()
std::fisher_f_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/param
std::fisher_f_distribution::m	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType m(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/params
std::fisher_f_distribution::n	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType n(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/params
std::fisher_f_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/fisher_f_distribution/reset
std::gamma_distribution	A										<section class="prog__container">\n<p>Produces random positive floating-point values x, distributed according to probability density function...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass gamma_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution
std::gamma_distribution::gamma_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit gamma_distribution( RealType alpha = 1.0, RealType beta = 1.0 );</code></pre><pre><code>explicit gamma_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/gamma_distribution
std::gamma_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/max
std::gamma_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/min
std::gamma_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/operator()
std::gamma_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/param
std::gamma_distribution::alpha	A										<section class="prog__container">\n<p>Returns the distribution parameters the distribution has been constructed with.</p>\n<pre><code>RealType alpha(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/params
std::gamma_distribution::beta	A										<section class="prog__container">\n<p>Returns the distribution parameters the distribution has been constructed with.</p>\n<pre><code>RealType beta(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/params
std::gamma_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/gamma_distribution/reset
std::generate_canonical	A										<section class="prog__container">\n<p>Generates a random floating point number in range [0; 1).</p>\n<pre><code>template&lt; class RealType, size_t bits, class Generator &gt;\nRealType generate_canonical( Generator& g );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/generate_canonical
std::geometric_distribution	A										<section class="prog__container">\n<p>Produces random non-negative integer values i, distributed according to discrete probability function...</p>\n<pre><code>template&lt; class IntType = int &gt;\nclass geometric_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution
std::geometric_distribution::geometric_distribution	A										<section class="prog__container">\n<p>Constructs new distribution object.</p>\n<pre><code>explicit geometric_distribution( double p = 0.5 );</code></pre><pre><code>explicit geometric_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution/geometric_distribution
std::geometric_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution/max
std::geometric_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution/min
std::geometric_distribution::p	A										<section class="prog__container">\n<p>Returns the p distribution parameter the distribution was constructed with.</p>\n<pre><code>double p(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution/p
std::geometric_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution/param
std::geometric_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/geometric_distribution/reset
std::independent_bits_engine	A										<section class="prog__container">\n<p><code>independent_bits_engine</code> is a random number engine adaptor that produces random numbers with different number of bits than that of the wrapped engine.</p>\n<pre><code>template&lt;\n    class Engine, \n    std::size_t W, \n    class UIntType\n&gt; class independent_bits_engine;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine
std::independent_bits_engine::base	A										<section class="prog__container">\n<p>Returns the underlying engine.</p>\n<pre><code>const Engine& base(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/base
std::independent_bits_engine::discard	A										<section class="prog__container">\n<p>Advances the internal state by <code>z</code> times.</p>\n<pre><code>void discard( unsigned long long z );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/discard
std::independent_bits_engine::independent_bits_engine	A										<section class="prog__container">\n<p>Constructs new pseudo-random engine adaptor.</p>\n<pre><code>explicit independent_bits_engine( result_type s );</code></pre><pre><code>template&lt; class Sseq &gt;\nexplicit independent_bits_engine( Sseq& seq );</code></pre><pre><code>explicit independent_bits_engine( const Engine& e );</code></pre><pre><code>explicit independent_bits_engine( Engine&& e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/independent_bits_engine
std::independent_bits_engine::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the engine adaptor.</p>\n<pre><code>static constexpr result_type max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/max
std::independent_bits_engine::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the engine adaptor.</p>\n<pre><code>static constexpr result_type min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/min
std::independent_bits_engine::operator()	A										<section class="prog__container">\n<p>Generates a random value.</p>\n<pre><code>result_type operator(void)();</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/operator()
std::independent_bits_engine::seed	A										<section class="prog__container">\n<p>Reinitializes the internal state of the underlying engine using a new seed value.</p>\n<pre><code>void seed(void);</code></pre><pre><code>void seed( result_type value );</code></pre><pre><code>template&lt; class Sseq &gt; \nvoid seed( Sseq& seq );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/independent_bits_engine/seed
std::linear_congruential_engine	A										<section class="prog__container">\n<p><code>linear_congruential_engine</code> is a random number engine based on Linear congruential generator (LCG).</p>\n<pre><code>template&lt;\n    class UIntType, \n    UIntType a, \n    UIntType c, \n    UIntType m\n&gt; class linear_congruential_engine;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine
std::linear_congruential_engine::discard	A										<section class="prog__container">\n<p>Advances the internal state by <code>z</code> times.</p>\n<pre><code>void discard( unsigned long long z );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/discard
std::linear_congruential_engine::linear_congruential_engine	A										<section class="prog__container">\n<p>Constructs the pseudo-random number engine.</p>\n<pre><code>explicit linear_congruential_engine( result_type value = default_seed );</code></pre><pre><code>template&lt; class Sseq &gt; \nexplicit linear_congruential_engine( Sseq& s );</code></pre><pre><code>linear_congruential_engine( const linear_congruential_engine& );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/linear_congruential_engine
std::linear_congruential_engine::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the random-number engine.</p>\n<pre><code>static constexpr result_type max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/max
std::linear_congruential_engine::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the random-number engine.</p>\n<pre><code>static constexpr result_type min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/min
std::linear_congruential_engine::operator()	A										<section class="prog__container">\n<p>Generates a pseudo-random value.</p>\n<pre><code>result_type operator(void)();</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/operator()
std::linear_congruential_engine::seed	A										<section class="prog__container">\n<p>Reinitializes the internal state of the random-number engine using new seed value.</p>\n<pre><code>void seed( result_type value = default_seed );</code></pre><pre><code>template&lt; class Sseq &gt; \nvoid seed( Sseq& seq );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/linear_congruential_engine/seed
std::lognormal_distribution	A										<section class="prog__container">\n<p>The lognormal_distribution random number distribution produces random numbers x &gt; 0 according to a log-normal distribution...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass lognormal_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution
std::lognormal_distribution::lognormal_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit lognormal_distribution( RealType m = 0.0, RealType s = 1.0 );</code></pre><pre><code>explicit lognormal_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/lognormal_distribution
std::lognormal_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/max
std::lognormal_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/min
std::lognormal_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/operator()
std::lognormal_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/param
std::lognormal_distribution::m	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType m(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/params
std::lognormal_distribution::s	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType s(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/params
std::lognormal_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/lognormal_distribution/reset
std::mersenne_twister_engine	A										<section class="prog__container">\n<p><code>mersenne_twister_engine</code> is a random number engine based on Mersenne Twister algorithm.</p>\n<pre><code>template&lt;\n    class UIntType, \n    size_t w, size_t n, size_t m, size_t r,\n    UIntType a, size_t u, UIntType d, size_t s,\n    UIntType b, size_t t,\n    UIntType c, size_t l, UIntType f\n&gt; class mersenne_twister_engine;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine
std::mersenne_twister_engine::discard	A										<section class="prog__container">\n<p>Advances the internal state by <code>z</code> times.</p>\n<pre><code>void discard( unsigned long long z );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/discard
std::mersenne_twister_engine::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the random-number engine.</p>\n<pre><code>static constexpr result_type max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/max
std::mersenne_twister_engine::mersenne_twister_engine	A										<section class="prog__container">\n<p>Constructs the pseudo-random number engine.</p>\n<pre><code>explicit mersenne_twister_engine( result_type value = default_seed );</code></pre><pre><code>template&lt; class Sseq &gt; \nexplicit mersenne_twister_engine( Sseq& s );</code></pre><pre><code>mersenne_twister_engine( const mersenne_twister_engine& );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/mersenne_twister_engine
std::mersenne_twister_engine::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the random-number engine.</p>\n<pre><code>static constexpr result_type min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/min
std::mersenne_twister_engine::operator()	A										<section class="prog__container">\n<p>Generates a pseudo-random value.</p>\n<pre><code>result_type operator(void)();</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/operator()
std::mersenne_twister_engine::seed	A										<section class="prog__container">\n<p>Reinitializes the internal state of the random-number engine using new seed value.</p>\n<pre><code>void seed( result_type value = default_seed );</code></pre><pre><code>template&lt; class Sseq &gt; \nvoid seed( Sseq& seq );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine/seed
std::negative_binomial_distribution	A										<section class="prog__container">\n<p>Produces random non-negative integer values i, distributed according to discrete probability function...</p>\n<pre><code>template&lt; class IntType = int &gt;\nclass negative_binomial_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution
std::negative_binomial_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution/max
std::negative_binomial_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution/min
std::negative_binomial_distribution::negative_binomial_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit negative_binomial_distribution( IntType k = 1, double p = 0.5 );</code></pre><pre><code>explicit negative_binomial_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution/negative_binomial_distribution
std::negative_binomial_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution/param
std::negative_binomial_distribution::k	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>IntType k(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution/params
std::negative_binomial_distribution::p	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>double p(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution/params
std::negative_binomial_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/negative_binomial_distribution/reset
std::normal_distribution	A										<section class="prog__container">\n<p>Generates random numbers according to the Normal (or Gaussian) random number distribution.</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass normal_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/normal_distribution
std::normal_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/max
std::normal_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/min
std::normal_distribution::normal_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit normal_distribution( RealType mean = 0.0, RealType stddev = 1.0 );</code></pre><pre><code>explicit normal_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/normal_distribution
std::normal_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/operator()
std::normal_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/param
std::normal_distribution::mean	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType mean(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/params
std::normal_distribution::stddev	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType stddev(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/params
std::normal_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/normal_distribution/reset
std::piecewise_constant_distribution	A										<section class="prog__container">\n<p><code>std::piecewise_constant_distribution</code> produces random floating-point numbers, which are uniformly distributed within each of the several subintervals [bi, bi+1), each with its own weight...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass piecewise_constant_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution
std::piecewise_constant_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/max
std::piecewise_constant_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/min
std::piecewise_constant_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/operator()
std::piecewise_constant_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/param
std::piecewise_constant_distribution::densities	A										<section class="prog__container">\n<p>Returns the distribution parameters.</p>\n<pre><code>std::vector&lt;RealType&gt; densities(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/params
std::piecewise_constant_distribution::intervals	A										<section class="prog__container">\n<p>Returns the distribution parameters.</p>\n<pre><code>std::vector&lt;RealType&gt; intervals(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/params
std::piecewise_constant_distribution::piecewise_constant_distribution	A										<section class="prog__container">\n<p>Constructs new piecewise constant distribution object.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2 &gt;\npiecewise_constant_distribution( InputIt1 first_i, InputIt1 last_i,\n                                 InputIt2 first_w );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/piecewise_constant_distribution
std::piecewise_constant_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_constant_distribution/reset
std::piecewise_linear_distribution	A										<section class="prog__container">\n<p><code>std::piecewise_linear_distribution</code> produces random floating-point numbers, which are distributed according to a linear probability density function within each of the several...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass piecewise_linear_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution
std::piecewise_linear_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/max
std::piecewise_linear_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/min
std::piecewise_linear_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/operator()
std::piecewise_linear_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/param
std::piecewise_linear_distribution::densities	A										<section class="prog__container">\n<p>Returns the distribution parameters.</p>\n<pre><code>std::vector&lt;RealType&gt; densities(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/params
std::piecewise_linear_distribution::intervals	A										<section class="prog__container">\n<p>Returns the distribution parameters.</p>\n<pre><code>std::vector&lt;RealType&gt; intervals(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/params
std::piecewise_linear_distribution::piecewise_linear_distribution	A										<section class="prog__container">\n<p>Constructs new piecewise linear distribution object.</p>\n<pre><code>template&lt; class InputIt1, class InputIt2 &gt;\npiecewise_linear_distribution( InputIt1 first_i, InputIt1 last_i,\n                               InputIt2 first_w );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/piecewise_linear_distribution
std::piecewise_linear_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/piecewise_linear_distribution/reset
std::poisson_distribution	A										<section class="prog__container">\n<p>Produces random non-negative integer values i, distributed according to discrete probability function...</p>\n<pre><code>template&lt; class IntType = int &gt;\nclass poisson_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution
std::poisson_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution/max
std::poisson_distribution::mean	A										<section class="prog__container">\n<p>Returns the μ parameter the distribution was constructed with.</p>\n<pre><code>double mean(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution/mean
std::poisson_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution/min
std::poisson_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution/param
std::poisson_distribution::poisson_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit poisson_distribution( double mean = 1.0 );</code></pre><pre><code>explicit poisson_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution/poisson_distribution
std::poisson_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/poisson_distribution/reset
std::rand	A										<section class="prog__container">\n<p>Returns a pseudo-random integral value between <code>​0​</code> and RAND_MAX (0 and <code>RAND_MAX</code> included).</p>\n<pre><code>int rand(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/rand
std::random_device	A										<section class="prog__container">\n<p><code>std::random_device</code> is a uniformly-distributed integer random number generator that produces non-deterministic random numbers.</p>\n<pre><code>class random_device;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/random_device
std::random_device::entropy	A										<section class="prog__container">\n<p>Obtains an estimate of the random number device entropy, which is a floating-point value between 0 and log2(max(void)+1) (which is equal to <code>std::numeric_limits&lt;unsigned int&gt;::digits</code>).</p>\n<pre><code>double entropy(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/random_device/entropy
std::random_device::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the random-number engine.</p>\n<pre><code>static constexpr result_type max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/random_device/max
std::random_device::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the random-number engine.</p>\n<pre><code>static constexpr result_type min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/random_device/min
std::random_device::operator()	A										<section class="prog__container">\n<p>Generates a non-deterministic uniformly-distributed random value.</p>\n<pre><code>result_type operator(void)();</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/random_device/operator()
std::random_device::random_device	A										<section class="prog__container">\n<p> Constructs a new std::random_device object, making use of the argument <code>token</code>, if provided, in implementation-defined manner.</p>\n<pre><code>explicit random_device(const std::string& token = /*implementation-defined*/ );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/random_device/random_device
std::seed_seq	A										<section class="prog__container">\n<p><code>std::seed_seq</code> consumes a sequence of integer-valued data and produces a requested number of unsigned integer values <code>i</code>, 0 ≤ i &lt; 232, based on the consumed data.</p>\n<pre><code>class seed_seq;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/seed_seq
std::seed_seq::generate	A										<section class="prog__container">\n<p>Fills the range <code>[begin, end)</code> with unsigned integer values <code>i</code>, 0 ≤ i &lt; 232, based on the data originally provided in the constructor of this <code>seed_seq</code>.</p>\n<pre><code>template&lt; class RandomIt &gt;\nvoid generate( RandomIt begin, RandomIt end );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/seed_seq/generate
std::seed_seq::param	A										<section class="prog__container">\n<p>Outputs the initial seed sequence that's stored in the <code>std::seed_seq</code> object.</p>\n<pre><code>template&lt; class OutputIt &gt;\nvoid param( OutputIt dest ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/seed_seq/param
std::seed_seq::size	A										<section class="prog__container">\n<p>Returns the size of the stored initial seed sequence.</p>\n<pre><code>std::size_t size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/seed_seq/size
std::shuffle_order_engine	A										<section class="prog__container">\n<p><code>shuffle_order_engine</code> is a random number engine adaptor that shuffles the random numbers generated by the base engine.</p>\n<pre><code>template&lt;\n    class Engine, \n    std::size_t K\n&gt; class shuffle_order_engine;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine
std::shuffle_order_engine::base	A										<section class="prog__container">\n<p>Returns the underlying engine.</p>\n<pre><code>const Engine& base(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/base
std::shuffle_order_engine::discard	A										<section class="prog__container">\n<p>Advances the internal state by <code>z</code> times.</p>\n<pre><code>void discard( unsigned long long z );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/discard
std::shuffle_order_engine::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the engine adaptor.</p>\n<pre><code>static constexpr result_type max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/max
std::shuffle_order_engine::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the engine adaptor.</p>\n<pre><code>static constexpr result_type min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/min
std::shuffle_order_engine::operator()	A										<section class="prog__container">\n<p>Generates a random value.</p>\n<pre><code>result_type operator(void)();</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/operator()
std::shuffle_order_engine::seed	A										<section class="prog__container">\n<p>Reinitializes the internal state of the underlying engine using a new seed value.</p>\n<pre><code>void seed(void);</code></pre><pre><code>void seed( result_type value );</code></pre><pre><code>template&lt; class Sseq &gt; \nvoid seed( Sseq& seq );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/seed
std::shuffle_order_engine::shuffle_order_engine	A										<section class="prog__container">\n<p>Constructs new pseudo-random engine adaptor.</p>\n<pre><code>explicit shuffle_order_engine( result_type s );</code></pre><pre><code>template&lt; class Sseq &gt;\nexplicit shuffle_order_engine( Sseq& seq );</code></pre><pre><code>explicit shuffle_order_engine( const Engine& e );</code></pre><pre><code>explicit shuffle_order_engine( Engine&& e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/shuffle_order_engine/shuffle_order_engine
std::srand	A										<section class="prog__container">\n<p>Seeds the pseudo-random number generator used by std::rand(void) with the value <code>seed</code>.</p>\n<pre><code>void srand( unsigned seed );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/srand
std::student_t_distribution	A										<section class="prog__container">\n<p>Produces random floating-point values x, distributed according to probability density function...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass student_t_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution
std::student_t_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/max
std::student_t_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/min
std::student_t_distribution::n	A										<section class="prog__container">\n<p>Returns the n distribution parameter (number of the degrees of freedom) the distribution was constructed with.</p>\n<pre><code>RealType n(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/n
std::student_t_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/operator()
std::student_t_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/param
std::student_t_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/reset
std::student_t_distribution::student_t_distribution	A										<section class="prog__container">\n<p>Constructs new distribution object.</p>\n<pre><code>explicit student_t_distribution( RealType n = 1 );</code></pre><pre><code>explicit student_t_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/student_t_distribution/student_t_distribution
std::subtract_with_carry_engine	A										<section class="prog__container">\n<p><code>subtract_with_carry_engine</code> is a random number engine that uses subtract with carry algorithm.</p>\n<pre><code>template&lt;\n    class UIntType, \n    size_t w, size_t s, size_t r\n&gt; class subtract_with_carry_engine;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine
std::subtract_with_carry_engine::discard	A										<section class="prog__container">\n<p>Advances the internal state by <code>z</code> times.</p>\n<pre><code>void discard( unsigned long long z );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/discard
std::subtract_with_carry_engine::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the random-number engine.</p>\n<pre><code>static constexpr result_type max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/max
std::subtract_with_carry_engine::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the random-number engine.</p>\n<pre><code>static constexpr result_type min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/min
std::subtract_with_carry_engine::operator()	A										<section class="prog__container">\n<p>Generates a pseudo-random value.</p>\n<pre><code>result_type operator(void)();</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/operator()
std::subtract_with_carry_engine::seed	A										<section class="prog__container">\n<p>Reinitializes the internal state of the random-number engine using new seed value.</p>\n<pre><code>void seed( result_type value = default_seed );</code></pre><pre><code>template&lt; class Sseq &gt; \nvoid seed( Sseq& seq );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/seed
std::subtract_with_carry_engine::subtract_with_carry_engine	A										<section class="prog__container">\n<p>Constructs the pseudo-random number engine.</p>\n<pre><code>explicit subtract_with_carry_engine( result_type value = default_seed );</code></pre><pre><code>template&lt; class Sseq &gt; \nexplicit subtract_with_carry_engine( Sseq& s );</code></pre><pre><code>subtract_with_carry_engine( const subtract_with_carry_engine& );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine/subtract_with_carry_engine
std::uniform_int_distribution	A										<section class="prog__container">\n<p>Produces random integer values i, uniformly distributed on the closed interval <code>[a, b]</code>, that is, distributed according to the discrete probability function...</p>\n<pre><code>template&lt; class IntType = int &gt;\nclass uniform_int_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution
std::uniform_int_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/max
std::uniform_int_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/min
std::uniform_int_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/operator()
std::uniform_int_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/param
std::uniform_int_distribution::a	A										<section class="prog__container">\n<p>Returns the parameters the distribution has been constructed with.</p>\n<pre><code>result_type a(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/params
std::uniform_int_distribution::b	A										<section class="prog__container">\n<p>Returns the parameters the distribution has been constructed with.</p>\n<pre><code>result_type b(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/params
std::uniform_int_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/reset
std::uniform_int_distribution::uniform_int_distribution	A										<section class="prog__container">\n<p>Constructs new distribution object.</p>\n<pre><code>explicit uniform_int_distribution( IntType a = 0, \n                                   IntType b = std::numeric_limits&lt;IntType&gt;::max(void) );</code></pre><pre><code>explicit uniform_int_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution/uniform_int_distribution
std::uniform_real_distribution	A										<section class="prog__container">\n<p>Produces random floating-point values i, uniformly distributed on the interval <code>[a, b)</code>, that is, distributed according to the probability function...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass uniform_real_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution
std::uniform_real_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution/max
std::uniform_real_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution/min
std::uniform_real_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution/param
std::uniform_real_distribution::a	A										<section class="prog__container">\n<p>Returns the parameters the distribution has been constructed with.</p>\n<pre><code>result_type a(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution/params
std::uniform_real_distribution::b	A										<section class="prog__container">\n<p>Returns the parameters the distribution has been constructed with.</p>\n<pre><code>result_type b(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution/params
std::uniform_real_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution/reset
std::uniform_real_distribution::uniform_real_distribution	A										<section class="prog__container">\n<p>Constructs new distribution object.</p>\n<pre><code>explicit uniform_real_distribution( RealType a = 0.0, RealType b = 1.0 );</code></pre><pre><code>explicit uniform_real_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution/uniform_real_distribution
std::weibull_distribution	A										<section class="prog__container">\n<p>The <code>weibull_distribution</code> meets the requirements of a <code>RandomNumberDistribution</code> and produces random numbers according to the Weibull distribution...</p>\n<pre><code>template&lt; class RealType = double &gt;\nclass weibull_distribution;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution
std::weibull_distribution::max	A										<section class="prog__container">\n<p>Returns the maximum value potentially generated by the distribution.</p>\n<pre><code>result_type max(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/max
std::weibull_distribution::min	A										<section class="prog__container">\n<p>Returns the minimum value potentially generated by the distribution.</p>\n<pre><code>result_type min(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/min
std::weibull_distribution::operator()	A										<section class="prog__container">\n<p>Generates random numbers that are distributed according to the associated probability function.</p>\n<pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g );</code></pre><pre><code>template&lt; class Generator &gt;\nresult_type operator(void)( Generator& g, const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/operator()
std::weibull_distribution::param	A										<section class="prog__container">\n<p>Manages the associated distribution parameter set.</p>\n<pre><code>param_type param(void) const;</code></pre><pre><code>void param( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/param
std::weibull_distribution::a	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType a(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/params
std::weibull_distribution::b	A										<section class="prog__container">\n<p>Returns the parameters the distribution was constructed with.</p>\n<pre><code>RealType b(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/params
std::weibull_distribution::reset	A										<section class="prog__container">\n<p>Resets the internal state of the distribution object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/reset
std::weibull_distribution::weibull_distribution	A										<section class="prog__container">\n<p>Constructs a new distribution object.</p>\n<pre><code>explicit weibull_distribution( RealType a = 1.0, RealType b = 1.0 );</code></pre><pre><code>explicit weibull_distribution( const param_type& params );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/random/weibull_distribution/weibull_distribution
std::ratio	A										<section class="prog__container">\n<p>The class template <code>std::ratio</code> provides compile-time rational arithmetic support.</p>\n<pre><code>template&lt; \n    std::intmax_t Num, \n    std::intmax_t Denom = 1 \n&gt; class ratio;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio
std::ratio_add	A										<section class="prog__container">\n<p>The alias template <code>std::ratio_add</code> denotes the result of adding two exact rational fractions represented by the std::ratio specializations <code>R1</code> and <code>R2</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nusing ratio_add = /* see below */;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_add
std::ratio_divide	A										<section class="prog__container">\n<p>The alias template <code>std::ratio_divide</code> denotes the result of dividing two exact rational fractions represented by the std::ratio specializations <code>R1</code> and <code>R2</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nusing ratio_divide = /* see below */;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_divide
std::ratio_equal	A										<section class="prog__container">\n<p>If the ratios R1 and R2 are equal, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nstruct ratio_equal : std::integral_constant;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_equal
std::ratio_greater	A										<section class="prog__container">\n<p>If the ratio <code>R1</code> is greater than than the ratio <code>R2</code>, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nstruct ratio_greater : std::integral_constant;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_greater
std::ratio_greater_equal	A										<section class="prog__container">\n<p>If the ratio <code>R1</code> is greater than or equal to the ratio <code>R2</code>, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nstruct ratio_greater_equal : std::integral_constant;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_greater_equal
std::ratio_less	A										<section class="prog__container">\n<p>If the ratio R1 is less than the ratio R2, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nstruct ratio_less : std::integral_constant;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_less
std::ratio_less_equal	A										<section class="prog__container">\n<p>If the ratio <code>R1</code> is less than or equal to the ratio <code>R2</code>, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nstruct ratio_less_equal : std::integral_constant;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_less_equal
std::ratio_multiply	A										<section class="prog__container">\n<p> The alias template <code>std::ratio_multiply</code> denotes the result of multiplying two exact rational fractions represented by the std::ratio specializations <code>R1</code> and <code>R2</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nusing ratio_multiply = /* see below */;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_multiply
std::ratio_not_equal	A										<section class="prog__container">\n<p>If the ratios R1 and R2 are not equal, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nstruct ratio_not_equal : std::integral_constant;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_not_equal
std::ratio_subtract	A										<section class="prog__container">\n<p>The alias template <code>std::ratio_subtract</code> denotes the result of subtracting two exact rational fractions represented by the std::ratio specializations <code>R1</code> and <code>R2</code>.</p>\n<pre><code>template&lt; class R1, class R2 &gt;\nusing ratio_subtract = /* see below */;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/ratio/ratio_subtract
std::assoc_laguerref	A										<section class="prog__container">\n<p> Computes the associated Laguerre polynomials of the degree <code>n</code>, order <code>m</code>, and argument <code>x</code>...</p>\n<pre><code>double      assoc_laguerre( unsigned int n, unsigned int m, double x );\ndouble      assoc_laguerre( unsigned int n, unsigned int m, float x );\ndouble      assoc_laguerre( unsigned int n, unsigned int m, long double x );\nfloat       assoc_laguerref( unsigned int n, unsigned int m, float x );\nlong double assoc_laguerrel( unsigned int n, unsigned int m, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/assoc_laguerre
std::assoc_legendref	A										<section class="prog__container">\n<p> Computes the associated Legendre polynomials of the degree <code>n</code>, order <code>m</code>, and argument <code>x</code>...</p>\n<pre><code>double      assoc_legendre( unsigned int n, unsigned int m, double x );\ndouble      assoc_legendre( unsigned int n, unsigned int m, float x );\ndouble      assoc_legendre( unsigned int n, unsigned int m, long double x );\nfloat       assoc_legendref( unsigned int n, unsigned int m, float x );\nlong double assoc_legendrel( unsigned int n, unsigned int m, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/assoc_legendre
std::betaf	A										<section class="prog__container">\n<p> Computes the beta function of <code>x</code> and <code>y</code>.</p>\n<pre><code>double      beta( double x, double y );\nfloat       betaf( float x, float y );\nlong double betal( long double x, long double y );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/beta
std::comp_ellint_1f	A										<section class="prog__container">\n<p> Computes the complete elliptic integral of the first kind of <code>k</code>.</p>\n<pre><code>double      comp_ellint_1( double k );\ndouble      comp_ellint_1( float k );\ndouble      comp_ellint_1( long double k );\nfloat       comp_ellint_1f( float k );\nlong double comp_ellint_1l( long double k );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/comp_ellint_1
std::comp_ellint_2f	A										<section class="prog__container">\n<p> Computes the complete elliptic integral of the second kind of <code>k</code>.</p>\n<pre><code>double      comp_ellint_2( double k);\ndouble      comp_ellint_2( float k );\ndouble      comp_ellint_2( long double k );\nfloat       comp_ellint_2f( float k );\nlong double comp_ellint_2l( long double k );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/comp_ellint_2
std::comp_ellint_3f	A										<section class="prog__container">\n<p> Computes the complete elliptic integral of the third kind of the arguments <code>k</code> and <code>ν</code>.</p>\n<pre><code>double      comp_ellint_3( double k, double ν );\nfloat       comp_ellint_3f( float k, float ν );\nlong double comp_ellint_3l( long double k, long double ν );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/comp_ellint_3
std::cyl_bessel_if	A										<section class="prog__container">\n<p> Computes the regular modified cylindrical Bessel function of <code>ν</code> and <code>x</code>.</p>\n<pre><code>double      cyl_bessel_i( double ν, double x );\nfloat       cyl_bessel_if( float ν, float x  );\nlong double cyl_bessel_il( long double ν, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/cyl_bessel_i
std::cyl_bessel_jf	A										<section class="prog__container">\n<p> Computes the cylindrical Bessel function of the first kind of <code>ν</code> and <code>x</code>.</p>\n<pre><code>double      cyl_bessel_j( double ν, double x );\nfloat       cyl_bessel_jf( float ν, float x  );\nlong double cyl_bessel_jl( long double ν, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/cyl_bessel_j
std::cyl_bessel_kf	A										<section class="prog__container">\n<p> Computes the irregular modified cylindrical Bessel function (also known as modified Bessel function of the second kind) of <code>ν</code> and <code>x</code>.</p>\n<pre><code>double      cyl_bessel_k( double ν, double x );\nfloat       cyl_bessel_kf( float ν, float x  );\nlong double cyl_bessel_kl( long double ν, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/cyl_bessel_k
std::cyl_neumannf	A										<section class="prog__container">\n<p> Computes the cylindrical Neumann function (also known as Bessel function of the second kind or Weber function) of <code>ν</code> and <code>x</code>.</p>\n<pre><code>double      cyl_neumann( double ν, double x );\nfloat       cyl_neumannf( float ν, float x  );\nlong double cyl_neumannl( long double ν, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/cyl_neumann
std::ellint_1f	A										<section class="prog__container">\n<p> Computes the incomplete elliptic integral of the first kind of <code>k</code> and <code>φ</code>.</p>\n<pre><code>double      ellint_1( double k, double φ );\nfloat       ellint_1f( float k, float φ  );\nlong double ellint_1l( long double k, long double φ );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/ellint_1
std::ellint_2f	A										<section class="prog__container">\n<p> Computes the incomplete elliptic integral of the second kind of <code>k</code> and <code>φ</code>.</p>\n<pre><code>double      ellint_2( double k, double φ );\nfloat       ellint_2f( float k, float φ  );\nlong double ellint_2l( long double k, long double φ );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/ellint_2
std::ellint_3f	A										<section class="prog__container">\n<p> Computes the incomplete elliptic integral of the third kind of <code>k</code>, <code>ν</code>, and <code>φ</code>.</p>\n<pre><code>double      ellint_3( double k, double ν, double φ );\nfloat       ellint_3f( float k, float ν, float φ  );\nlong double ellint_3l( long double k, long double ν, long double φ );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/ellint_3
std::expintf	A										<section class="prog__container">\n<p> Computes the exponential integral of <code>arg</code>.</p>\n<pre><code>double      expint( double arg );\ndouble      expint( float arg );\ndouble      expint( long double arg );\nfloat       expintf( float arg );\nlong double expintl( long double arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/expint
std::hermitef	A										<section class="prog__container">\n<p> Computes the (physicist's) Hermite polynomials of the degree <code>n</code> and argument <code>x</code>...</p>\n<pre><code>double      hermite( unsigned int n, double x );\ndouble      hermite( unsigned int n, float x );\ndouble      hermite( unsigned int n, long double x );\nfloat       hermitef( unsigned int n, float x );\nlong double hermitel( unsigned int n, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/hermite
std::laguerref	A										<section class="prog__container">\n<p> Computes the non-associated Laguerre polynomials of the degree <code>n</code> and argument <code>x</code>...</p>\n<pre><code>double      laguerre( unsigned int n, double x );\ndouble      laguerre( unsigned int n, float x );\ndouble      laguerre( unsigned int n, long double x );\nfloat       laguerref( unsigned int n, float x );\nlong double laguerrel( unsigned int n, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/laguerre
std::legendref	A										<section class="prog__container">\n<p> Computes the unassociated Legendre polynomials of the degree <code>n</code> and argument <code>x</code>...</p>\n<pre><code>double      legendre( unsigned int n, double x );\ndouble      legendre( unsigned int n, float x );\ndouble      legendre( unsigned int n, long double x );\nfloat       legendref( unsigned int n, float x );\nlong double legendrel( unsigned int n, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/legendre
std::riemann_zetaf	A										<section class="prog__container">\n<p> Computes the Riemann zeta function of <code>arg</code>.</p>\n<pre><code>double      riemann_zeta( double arg );\ndouble      riemann_zeta( float arg );\ndouble      riemann_zeta( long double arg );\nfloat       riemann_zetaf( float arg );\nlong double riemann_zetal( long double arg );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/riemann_zeta
std::sph_besself	A										<section class="prog__container">\n<p> Computes the spherical Bessel function of the first kind of <code>n</code> and <code>x</code>.</p>\n<pre><code>double      sph_bessel ( unsigned n, double x );\ndouble      sph_bessel ( unsigned n, float x );\ndouble      sph_bessel ( unsigned n, long double x );\nfloat       sph_besself( unsigned n, float x  );\nlong double sph_bessell( unsigned n, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/sph_bessel
std::sph_legendref	A										<section class="prog__container">\n<p> Computes the spherical associated Legendre function of degree <code>l</code>, order <code>m</code>, and polar angle <code>θ</code>.</p>\n<pre><code>double      sph_legendre ( unsigned l, unsigned m, double θ );\ndouble      sph_legendre ( unsigned l, unsigned m, float θ );\ndouble      sph_legendre ( unsigned l, unsigned m, long double θ );\nfloat       sph_legendref( unsigned l, unsigned m, float θ  );\nlong double sph_legendrel( unsigned l, unsigned m, long double θ );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/sph_legendre
std::sph_neumannf	A										<section class="prog__container">\n<p> Computes the spherical Bessel function of the second kind, also known as the spherical Neumann function, of <code>n</code> and <code>x</code>.</p>\n<pre><code>double      sph_neumann ( unsigned n, double x );\ndouble      sph_neumann ( unsigned n, float x );\ndouble      sph_neumann ( unsigned n, long double x );\nfloat       sph_neumannf( unsigned n, float x  );\nlong double sph_neumannl( unsigned n, long double x );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/special_math/sph_neumann
std::valarray	A										<section class="prog__container">\n<p>std::valarray is the class for representing and manipulating arrays of values.</p>\n<pre><code>template&lt; class T &gt;\nclass valarray;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/valarray
std::gslice	A										<section class="prog__container">\n<p><code>std::gslice</code> is the selector class that identifies a subset of std::valarray indices defined by a multi-level set of strides and sizes.</p>\n<pre><code>class gslice;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/valarray/gslice
std::gslice_array	A										<section class="prog__container">\n<p><code>std::gslice_array</code> is a helper template used by <code>std::gslice</code> subscript operator.</p>\n<pre><code>template&lt; class T &gt; class gslice_array;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/valarray/gslice_array
std::indirect_array	A										<section class="prog__container">\n<p><code>std::gslice_array</code> is a helper template used by <code>std::indirect_array</code> subscript operator.</p>\n<pre><code>template&lt; class T &gt; class indirect_array;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/valarray/indirect_array
std::mask_array	A										<section class="prog__container">\n<p><code>std::mask_array</code> is a helper template used by the valarray subscript operator with std::valarray&lt;bool&gt; argument.</p>\n<pre><code>template&lt; class T &gt; class mask_array;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/valarray/mask_array
std::slice	A										<section class="prog__container">\n<p><code>std::slice</code> is the selector class that identifies a subset of std::valarray similar to BLAS slice.</p>\n<pre><code>class slice;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/valarray/slice
std::slice_array	A										<section class="prog__container">\n<p><code>std::slice_array</code> is a helper template used by <code>std::slice</code> subscript operator.</p>\n<pre><code>template&lt; class T &gt; class slice_array;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/numeric/valarray/slice_array
std::basic_regex	A										<section class="prog__container">\n<p>The class template <code>basic_regex</code> provides a general framework for holding regular expressions.</p>\n<pre><code>template &lt;\n    class CharT,\n    class Traits = std::regex_traits&lt;CharT&gt;\n&gt; class basic_regex;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/basic_regex
std::basic_regex::assign	A										<section class="prog__container">\n<p>Assigns the contents to the regular expression.</p>\n<pre><code>basic_regex& assign( const basic_regex& other );</code></pre><pre><code>basic_regex& assign( basic_regex&& that );</code></pre><pre><code>basic_regex& assign( const CharT* s, \n                     flag_type f = std::regex_constants::ECMAScript );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/regex/basic_regex/assign
std::basic_regex::basic_regex	A										<section class="prog__container">\n<p>Constructs a new regular expression from a sequence of characters interpreted according to the flags <code>f</code>.</p>\n<pre><code>explicit basic_regex( const CharT* s, \n                      flag_type f = std::regex_constants::ECMAScript );</code></pre><pre><code>basic_regex( const basic_regex& other );</code></pre><pre><code>basic_regex( basic_regex&& other );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/regex/basic_regex/basic_regex
std::basic_regex::flags	A										<section class="prog__container">\n<p>Returns the regular expression syntax flags as set in the constructor or the last call to assign(void).</p>\n<pre><code>flag_type flags(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/basic_regex/flags
std::basic_regex::getloc	A										<section class="prog__container">\n<p>Returns the current locale associated with the regular expression.</p>\n<pre><code>locale_type getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/basic_regex/getloc
std::basic_regex::imbue	A										<section class="prog__container">\n<p>Replaces the current locale with <code>loc</code>.</p>\n<pre><code>locale_type imbue( locale_type loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/basic_regex/imbue
std::basic_regex::mark_count	A										<section class="prog__container">\n<p>Returns the number of marked sub-expressions within the regular expression.</p>\n<pre><code>unsigned mark_count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/basic_regex/mark_count
std::basic_regex::operator=	A										<section class="prog__container">\n<p>Assigns the contents.</p>\n<pre><code>basic_regex& operator=( const basic_regex& other );</code></pre><pre><code>basic_regex& operator=( basic_regex&& other );</code></pre><pre><code>basic_regex& operator=( const CharT* ptr );</code></pre><pre><code>basic_regex& operator=( std::initializer_list&lt;CharT&gt; il );</code></pre><pre><code>template&lt; class ST, class SA &gt;\nbasic_regex& operator=( const std::basic_string&lt;CharT,ST,SA&gt;& p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/basic_regex/operator=
std::basic_regex::swap	A										<section class="prog__container">\n<p>Exchanges the contents of two regular expressions.</p>\n<pre><code>void swap( basic_regex& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/basic_regex/swap
std::match_results	A										<section class="prog__container">\n<p>The class template std::match_results holds a collection of character sequences that represent the result of a regular expression match.</p>\n<pre><code>template&lt;\n    class BidirIt,\n    class Alloc = std::allocator&lt;std::sub_match&lt;BidirIt&gt;&gt;\n&gt; class match_results;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results
std::match_results::begin	A										<section class="prog__container">\n<p>Returns an iterator to the beginning of the list of sub-matches.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/begin
std::match_results::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the beginning of the list of sub-matches.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/begin
std::match_results::empty	A										<section class="prog__container">\n<p>Checks whether the match was successful.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/empty
std::match_results::cend	A										<section class="prog__container">\n<p>Returns an iterator to the end of the list of sub-matches.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/end
std::match_results::end	A										<section class="prog__container">\n<p>Returns an iterator to the end of the list of sub-matches.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/end
std::match_results::format	A										<section class="prog__container">\n<p><code>format</code> outputs a format string, replacing any format specifiers or escape sequences in that string with match data from <code>*this</code>.</p>\n<pre><code>template&lt; class OutputIt &gt;\nOutputIter format( OutputIt out,\n                   const char_type* fmt_first, const char_type* fmt_last,\n                   std::regex_constants::match_flag_type flags =\n                       std::regex_constants::format_default ) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/format
std::match_results::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the object.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/get_allocator
std::match_results::length	A										<section class="prog__container">\n<p>Returns the length of the specified sub-match.</p>\n<pre><code>difference_type length( size_type n = 0 ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/length
std::match_results::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of submatches the <code>match_results</code> type is able to hold due to system or library implementation limitations...</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/max_size
std::match_results::operator[]	A										<section class="prog__container">\n<p>If <code>n &gt; 0</code> and <code>n &lt; size(void)</code>, returns a reference to the std::sub_match representing the part of the target sequence that was matched by the <i>n</i>th captured  marked...</p>\n<pre><code>const_reference operator[]( size_type n ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/operator_at
std::match_results::position	A										<section class="prog__container">\n<p>Returns the position of the first character of the specified sub-match.</p>\n<pre><code>difference_type position( size_type n = 0 ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/position
std::match_results::prefix	A										<section class="prog__container">\n<p>Obtains a reference to the std::sub_match object representing the target sequence between the start of the beginning of the target sequence and the start of the entire match of the regular expression.</p>\n<pre><code>const_reference prefix(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/prefix
std::match_results::ready	A										<section class="prog__container">\n<p>Indicates if the match results are ready (valid) or not.</p>\n<pre><code>bool ready(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/ready
std::match_results::size	A										<section class="prog__container">\n<p>Returns the number of submatches, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/size
std::match_results::str	A										<section class="prog__container">\n<p>Returns a string representing the indicated sub-match.</p>\n<pre><code>string_type str( size_type n = 0 ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/str
std::match_results::suffix	A										<section class="prog__container">\n<p>Obtains a reference to the std::sub_match object representing the target sequence between the end of the entire match of the regular expression and the end of the target sequence...</p>\n<pre><code>const_reference suffix(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/suffix
std::match_results::swap	A										<section class="prog__container">\n<p>Exchanges the shared states of two <code>match_results</code> objects.</p>\n<pre><code>void swap( match_results& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/match_results/swap
std::regex_error	A										<section class="prog__container">\n<p>Defines the type of exception object thrown to report errors in the regular expressions library.</p>\n<pre><code>class regex_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_error
std::regex_error::code	A										<section class="prog__container">\n<p>Returns the std::regex_constants::error_type that was passed to the std::regex_error constructor.</p>\n<pre><code>std::regex_constants::error_type code(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_error/code
std::regex_iterator::operator*	A										<section class="prog__container">\n<p>Extracts the current std::match_results from a <code>regex_iterator</code>...</p>\n<pre><code>const value_type& operator*(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_iterator/operator*
std::regex_iterator::operator->	A										<section class="prog__container">\n<p>Extracts the current std::match_results from a <code>regex_iterator</code>...</p>\n<pre><code>const value_type* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_iterator/operator*
std::regex_iterator::operator=	A										<section class="prog__container">\n<p>Assigns the contents of <code>other</code>.</p>\n<pre><code>regex_iterator& operator=( const regex_iterator& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_iterator/operator=
std::regex_iterator::operator++	A										<section class="prog__container">\n<p>Advances the iterator on the next match.</p>\n<pre><code>regex_iterator& operator++(void);</code></pre><pre><code>regex_iterator operator++(int);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_iterator/operator_arith
std::regex_iterator::operator++(int)	A										<section class="prog__container">\n<p>Advances the iterator on the next match.</p>\n<pre><code>regex_iterator& operator++(void);</code></pre><pre><code>regex_iterator operator++(int);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_iterator/operator_arith
std::regex_iterator::operator!=	A										<section class="prog__container">\n<p>Compares two <code>regex_iterator</code>s.</p>\n<pre><code>bool operator!=(const regex_iterator& rhs) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_iterator/operator_cmp
std::regex_iterator::operator==	A										<section class="prog__container">\n<p>Compares two <code>regex_iterator</code>s.</p>\n<pre><code>bool operator==(const regex_iterator& rhs) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_iterator/operator_cmp
std::regex_iterator::regex_iterator	A										<section class="prog__container">\n<p>Constructs a new <code>regex_iterator</code>...</p>\n<pre><code>regex_iterator(const regex_iterator&);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_iterator/regex_iterator
std::regex_match	A										<section class="prog__container">\n<p>Determines if the regular expression <code>el</code> matches the entire target character sequence, which may be specified as std::string, a C-string, or an iterator pair.</p>\n<pre><code>template&lt; class BidirIt, \n          class Alloc, class CharT, class Traits &gt;\nbool regex_match( BidirIt first, BidirIt last,\n                  std::match_results&lt;BidirIt,Alloc&gt;& m,\n                  const std::basic_regex&lt;CharT,Traits&gt;& e,\n                  std::regex_constants::match_flag_type flags = \n                      std::regex_constants::match_default );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_match
std::regex_replace	A										<section class="prog__container">\n<p><code>regex_replace</code> uses a regular expression to perform substitution on a sequence of characters...</p>\n<pre><code>template&lt; class OutputIt, class BidirIt,\n          class Traits, class CharT,\n          class STraits, class SAlloc &gt;\nOutputIt regex_replace( OutputIt out, BidirIt first, BidirIt last,\n                        const std::basic_regex&lt;CharT,Traits&gt;& re,\n                        const std::basic_string&lt;CharT,STraits,SAlloc&gt;& fmt,\n                        std::regex_constants::match_flag_type flags = \n                            std::regex_constants::match_default );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_replace
std::regex_search	A										<section class="prog__container">\n<p>Determines if there is a match between the regular expression <code>e</code> and some subsequence in the target character sequence.</p>\n<pre><code>template&lt; class BidirIt, \n          class Alloc, class CharT, class Traits &gt;\nbool regex_search( BidirIt first, BidirIt last,\n                   std::match_results&lt;BidirIt,Alloc&gt;& m,\n                   const std::basic_regex&lt;CharT,Traits&gt;& e,\n                   std::regex_constants::match_flag_type flags = \n                       std::regex_constants::match_default );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_search
std::regex_token_iterator::operator*	A										<section class="prog__container">\n<p>Returns a pointer or reference to the current match.</p>\n<pre><code>const value_type& operator*(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_token_iterator/operator*
std::regex_token_iterator::operator->	A										<section class="prog__container">\n<p>Returns a pointer or reference to the current match.</p>\n<pre><code>const value_type* operator-&gt;(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_token_iterator/operator*
std::regex_token_iterator::operator=	A										<section class="prog__container">\n<p>Assigns the contents of <code>other</code>.</p>\n<pre><code>regex_token_iterator& operator=( const regex_token_iterator& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_token_iterator/operator=
std::regex_token_iterator::operator++	A										<section class="prog__container">\n<p>Advances the iterator on the next sub match.</p>\n<pre><code>regex_token_iterator& operator++(void);</code></pre><pre><code>regex_token_iterator operator++(int);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_token_iterator/operator_arith
std::regex_token_iterator::operator++(int)	A										<section class="prog__container">\n<p>Advances the iterator on the next sub match.</p>\n<pre><code>regex_token_iterator& operator++(void);</code></pre><pre><code>regex_token_iterator operator++(int);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_token_iterator/operator_arith
std::regex_token_iterator::operator!=	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> and <code>other</code> are equivalent.</p>\n<pre><code>bool operator!=( const regex_token_iterator& other ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_token_iterator/operator_cmp
std::regex_token_iterator::operator==	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> and <code>other</code> are equivalent.</p>\n<pre><code>bool operator==( const regex_token_iterator& other ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_token_iterator/operator_cmp
std::regex_token_iterator::regex_token_iterator	A										<section class="prog__container">\n<p>Constructs a new <code>regex_token_iterator</code>...</p>\n<pre><code>template &lt;std::size_t N&gt;\nregex_token_iterator( BidirectionalIterator a, BidirectionalIterator b,\n                      const regex_type& re,\n                      const int (&submatches)[N],\n                      std::regex_constants::match_flag_type m =\n                          std::regex_constants::match_default );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_token_iterator/regex_token_iterator
std::regex_traits	A										<section class="prog__container">\n<p>The type trait template <code>regex_traits</code> supplies std::basic_regex with the set of types and functions necessary to operate on the type <code>CharT</code>.</p>\n<pre><code>template&lt; class CharT &gt;\nclass regex_traits;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits
std::regex_traits::getloc	A										<section class="prog__container">\n<p>Returns the current locale of the traits object.</p>\n<pre><code>locale_type getloc(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/getloc
std::regex_traits::imbue	A										<section class="prog__container">\n<p>Replaces the current locale with a copy of <code>loc</code>.</p>\n<pre><code>locale_type imbue( locale_type loc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/imbue
std::regex_traits::isctype	A										<section class="prog__container">\n<p>Determines whether the character <code>c</code> belongs to the character class identified by <code>f</code>, which, in turn, is a value returned by lookup_classname(void) or a bitwise OR of several such...</p>\n<pre><code>bool isctype( CharT c, char_class_type f ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/isctype
std::regex_traits::length	A										<section class="prog__container">\n<p>Calculates the length of a null-terminated character sequence, that is, the smallest <code>i</code> such that <code>p[i]==0</code>.</p>\n<pre><code>static std::size_t length(const char_type* p);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/length
std::regex_traits::lookup_classname	A										<section class="prog__container">\n<p>If the character sequence <code>[first, last)</code> represents the name of a valid character class in the currently imbued locale (...</p>\n<pre><code>template&lt; class ForwardIt &gt;\nchar_class_type lookup_classname( ForwardIt first,\n                                  ForwardIt last,\n                                  bool icase = false ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/lookup_classname
std::regex_traits::lookup_collatename	A										<section class="prog__container">\n<p>If the character sequence <code>[first, last)</code> represents the name of a valid collating element in the currently imbued locale, returns the name of that collating element.</p>\n<pre><code>template&lt; class ForwardIt &gt;\nstring_type lookup_collatename( ForwardIt first, ForwardIt last ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/lookup_collatename
std::regex_traits::transform	A										<section class="prog__container">\n<p>Obtains the sort key for the character sequence <code>[first, last)</code>, such that if a sort key compares less than another sort key with <code>operator&lt;</code>, then the character sequence...</p>\n<pre><code>template&lt; class ForwardIt &gt;\nstring_type transform( ForwardIt first, ForwardIt last) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/transform
std::regex_traits::transform_primary	A										<section class="prog__container">\n<p>For the character sequence <code>[first, last)</code>, obtains the primary sort key in the imbued locale's collating order...</p>\n<pre><code>template&lt; class ForwardIt &gt;\nstring_type transform_primary( ForwardIt first, ForwardIt last ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/transform_primary
std::regex_traits::translate	A										<section class="prog__container">\n<p>Obtains the comparison key for the character <code>c</code>, such that all characters that are equivalent to this character in the imbued locale produce the same key.</p>\n<pre><code>CharT translate(CharT c) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/translate
std::regex_traits::translate_nocase	A										<section class="prog__container">\n<p>Obtains the comparison key for the character <code>c</code>, such that all characters that are equivalent to this character in the imbued locale, ignoring the case differences, if any, produce the...</p>\n<pre><code>CharT translate_nocase(CharT c) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/translate_nocase
std::regex_traits::value	A										<section class="prog__container">\n<p>Determines the value represented by the digit <code>ch</code> in the numeric base <code>radix</code>, given the currently imbued locale.</p>\n<pre><code>int value( CharT ch, int radix ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/regex_traits/value
std::sub_match	A										<section class="prog__container">\n<p>The class template <code>sub_match</code> is used by the regular expression engine to denote sequences of characters matched by marked sub-expressions.</p>\n<pre><code>template&lt;\n    class BidirIt\n&gt; class sub_match;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/sub_match
std::sub_match::str	A										<section class="prog__container">\n<p>Converts to an object of the underlying std::basic_string type.</p>\n<pre><code>string_type str(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/sub_match/str
std::sub_match::sub_match	A										<section class="prog__container">\n<p>Default constructs a std::sub_match.</p>\n<pre><code>constexpr sub_match(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/regex/sub_match/sub_match
std::basic_string	A										<section class="prog__container">\n<p>The class template <code>basic_string</code> stores and manipulates sequences of <code>char</code>-like objects.</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt;, \n    class Allocator = std::allocator&lt;CharT&gt;\n&gt; class basic_string;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string
std::basic_string::append	A										<section class="prog__container">\n<p>Appends additional characters to the string.</p>\n<pre><code>basic_string& append( size_type count, CharT ch );</code></pre><pre><code>basic_string& append( const basic_string& str );</code></pre><pre><code>basic_string& append( const basic_string& str,\n                      size_type pos,\n                      size_type count = npos );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/append
std::basic_string::assign	A										<section class="prog__container">\n<p>Replaces the contents of the string.</p>\n<pre><code>basic_string& assign( size_type count, CharT ch );</code></pre><pre><code>basic_string& assign( const basic_string& str );</code></pre><pre><code>basic_string& assign( const basic_string& str,\n                      size_type pos,\n                      size_type count = npos);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/assign
std::basic_string::at	A										<section class="prog__container">\n<p>Returns a reference to the character at specified location <code>pos</code>.</p>\n<pre><code>reference       at( size_type pos );</code></pre><pre><code>const_reference at( size_type pos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/at
std::basic_string::back	A										<section class="prog__container">\n<p>Returns reference to the last character in the string.</p>\n<pre><code>CharT& back(void);</code></pre><pre><code>const CharT& back(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/back
std::basic_string::basic_string	A										<section class="prog__container">\n<p>Constructs new string from a variety of data sources and optionally using user supplied allocator <code>alloc</code>.</p>\n<pre><code>basic_string(void) : basic_string( Allocator(void) ) {}\nexplicit basic_string( const Allocator& alloc );</code></pre><pre><code>basic_string( const basic_string& other,\n              size_type pos,\n              const Allocator& a = Allocator(void));</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/basic_string
std::basic_string::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first character of the string.</p>\n<pre><code>iterator begin(void);</code></pre><pre><code>const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/begin
std::basic_string::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first character of the string.</p>\n<pre><code>const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/begin
std::basic_string::c_str	A										<section class="prog__container">\n<p>Returns a pointer to a null-terminated character array with data equivalent to those stored in the string.</p>\n<pre><code>const CharT* c_str(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/c_str
std::basic_string::capacity	A										<section class="prog__container">\n<p>Returns the number of characters that the string has currently allocated space for.</p>\n<pre><code>size_type capacity(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/capacity
std::basic_string::clear	A										<section class="prog__container">\n<p>Removes all characters from the string as if by executing <code>erase(begin(void), end(void))</code>.</p>\n<pre><code>void clear(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/clear
std::basic_string::compare	A										<section class="prog__container">\n<p>Compares two character sequences.</p>\n<pre><code>int compare( const basic_string& str ) const;</code></pre><pre><code>int compare( size_type pos1, size_type count1,\n             const basic_string& str ) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/compare
std::basic_string::copy	A										<section class="prog__container">\n<p>Copies a substring <code>[pos, pos+count)</code> to character string pointed to by <code>dest</code>.</p>\n<pre><code>size_type copy( CharT* dest,\n                size_type count,\n                size_type pos = 0) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/copy
std::basic_string::data	A										<section class="prog__container">\n<p>Returns a pointer to the underlying array serving as character storage.</p>\n<pre><code>const CharT* data(void) const;</code></pre><pre><code>CharT* data(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/data
std::basic_string::empty	A										<section class="prog__container">\n<p>Checks if the string has no characters, i.e. whether <code>begin(void) == end(void)</code>.</p>\n<pre><code>bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/empty
std::basic_string::cend	A										<section class="prog__container">\n<p>Returns an iterator to the character following the last character of the string.</p>\n<pre><code>const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/end
std::basic_string::end	A										<section class="prog__container">\n<p>Returns an iterator to the character following the last character of the string.</p>\n<pre><code>iterator end(void);</code></pre><pre><code>const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/end
std::basic_string::erase	A										<section class="prog__container">\n<p>Removes specified characters from the string.</p>\n<pre><code>basic_string& erase( size_type index = 0, size_type count = npos );</code></pre><pre><code>iterator erase( const_iterator position );</code></pre><pre><code>iterator erase( const_iterator first, const_iterator last );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/erase
std::basic_string::find	A										<section class="prog__container">\n<p>Finds the first substring equal to the given character sequence.</p>\n<pre><code>size_type find( const basic_string& str, size_type pos = 0 ) const</code></pre><pre><code>size_type find( const CharT* s, size_type pos, size_type count ) const;</code></pre><pre><code>size_type find( const CharT* s, size_type pos = 0 ) const;</code></pre><pre><code>size_type find( CharT ch, size_type pos = 0 ) const;</code></pre><pre><code>size_type find( std::basic_string_view&lt;CharT, Traits&gt; sv,\n                size_type pos = 0) const</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/find
std::basic_string::find_first_not_of	A										<section class="prog__container">\n<p>Finds the first character equal to none of the characters in the given character sequence.</p>\n<pre><code>size_type find_first_not_of( const basic_string& str, size_type pos = 0 ) const;</code></pre><pre><code>size_type find_first_not_of( const CharT* s, size_type pos, size_type count ) const;</code></pre><pre><code>size_type find_first_not_of( const CharT* s, size_type pos = 0 ) const;</code></pre><pre><code>size_type find_first_not_of( CharT ch, size_type pos = 0 ) const;</code></pre><pre><code>size_type find_first_not_of( std::basic_string_view&lt;CharT, Traits&gt; sv,\n                             size_type pos = 0) const</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/find_first_not_of
std::basic_string::find_first_of	A										<section class="prog__container">\n<p>Finds the first character equal to one of the characters in the given character sequence.</p>\n<pre><code>size_type find_first_of( const basic_string& str, size_type pos = 0 ) const;</code></pre><pre><code>size_type find_first_of( const CharT* s, size_type pos, size_type count ) const;</code></pre><pre><code>size_type find_first_of( const CharT* s, size_type pos = 0 ) const;</code></pre><pre><code>size_type find_first_of( CharT ch, size_type pos = 0 ) const;</code></pre><pre><code>size_type find_first_of( std::basic_string_view&lt;CharT, Traits&gt; sv,\n                         size_type pos = 0 ) const</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/find_first_of
std::basic_string::find_last_not_of	A										<section class="prog__container">\n<p>Finds the last character equal to none of the characters in the given character sequence.</p>\n<pre><code>size_type find_last_not_of( const basic_string& str, size_type pos = npos ) const;</code></pre><pre><code>size_type find_last_not_of( const CharT* s, size_type pos, size_type count ) const;</code></pre><pre><code>size_type find_last_not_of( const CharT* s, size_type pos = npos ) const;</code></pre><pre><code>size_type find_last_not_of( CharT ch, size_type pos = npos ) const;</code></pre><pre><code>size_type find_last_not_of( std::basic_string_view&lt;CharT, Traits&gt; sv,\n                            size_type pos = npos) const</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/find_last_not_of
std::basic_string::find_last_of	A										<section class="prog__container">\n<p>Finds the last character equal to one of characters in the given character sequence.</p>\n<pre><code>size_type find_last_of( const basic_string& str, size_type pos = npos ) const;</code></pre><pre><code>size_type find_last_of( const CharT* s, size_type pos, size_type count ) const;</code></pre><pre><code>size_type find_last_of( const CharT* s, size_type pos = npos ) const;</code></pre><pre><code>size_type find_last_of( CharT ch, size_type pos = npos ) const;</code></pre><pre><code>size_type find_last_of( std::basic_string_view&lt;CharT, Traits&gt; sv,\n                        size_type pos = npos) const</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/find_last_of
std::basic_string::front	A										<section class="prog__container">\n<p>Returns reference to the first character in the string.</p>\n<pre><code>CharT& front(void);</code></pre><pre><code>const CharT& front(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/front
std::basic_string::get_allocator	A										<section class="prog__container">\n<p>Returns the allocator associated with the string.</p>\n<pre><code>allocator_type get_allocator(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/get_allocator
std::getline	A										<section class="prog__container">\n<p><code>getline</code> reads characters from an input stream and places them into a string...</p>\n<pre><code>template&lt; class CharT, class Traits, class Allocator &gt;\nstd::basic_istream&lt;CharT,Traits&gt;& getline( std::basic_istream&lt;CharT,Traits&gt;& input,\n                                           std::basic_string&lt;CharT,Traits,Allocator&gt;& str,\n                                           CharT delim );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/getline
std::basic_string::insert	A										<section class="prog__container">\n<p>Inserts characters into the string.</p>\n<pre><code>basic_string& insert( size_type index, size_type count, CharT ch );</code></pre><pre><code>basic_string& insert( size_type index, const CharT* s );</code></pre><pre><code>basic_string& insert( size_type index, const CharT* s, size_type count );</code></pre><pre><code>basic_string& insert( size_type index, const basic_string& str );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/insert
std::basic_string::max_size	A										<section class="prog__container">\n<p>Returns the maximum number of elements the string is able to hold due to system or library implementation limitations, i.e. ​<code>std::distance(begin(void), end(void))</code>​ for the largest string.</p>\n<pre><code>size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/max_size
std::basic_string::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the string.</p>\n<pre><code>basic_string& operator=( const basic_string& str );</code></pre><pre><code>basic_string& operator=( basic_string&& str );</code></pre><pre><code>basic_string& operator=( const CharT* s );</code></pre><pre><code>basic_string& operator=( CharT ch );</code></pre><pre><code>basic_string& operator=( std::initializer_list&lt;CharT&gt; ilist );</code></pre><pre><code>basic_string& operator=( std::basic_string_view&lt;CharT, Traits&gt; sv);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/operator=
std::basic_string::operator[]	A										<section class="prog__container">\n<p>Returns a reference to the character at specified location <code>pos</code>.</p>\n<pre><code>reference       operator[]( size_type pos );</code></pre><pre><code>const_reference operator[]( size_type pos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/operator_at
std::basic_string::pop_back	A										<section class="prog__container">\n<p>Removes the last character from the string.</p>\n<pre><code>void pop_back(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/pop_back
std::basic_string::push_back	A										<section class="prog__container">\n<p>Appends the given character <code>ch</code> to the end of the string.</p>\n<pre><code>void push_back( CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/push_back
std::basic_string::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first character of the reversed string.</p>\n<pre><code>const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/rbegin
std::basic_string::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first character of the reversed string.</p>\n<pre><code>reverse_iterator rbegin(void);</code></pre><pre><code>const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/rbegin
std::basic_string::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the character following the last character of the reversed string.</p>\n<pre><code>const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/rend
std::basic_string::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the character following the last character of the reversed string.</p>\n<pre><code>reverse_iterator rend(void);</code></pre><pre><code>const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/rend
std::basic_string::replace	A										<section class="prog__container">\n<p>Replaces the part of the string indicated by either <code>[pos, pos + count)</code> or <code>[first, last)</code> with a new string.</p>\n<pre><code>basic_string& replace( size_type pos, size_type count,\n                       const basic_string& str );</code></pre><pre><code>basic_string& replace( const_iterator first, const_iterator last,\n                       const basic_string& str );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/replace
std::basic_string::reserve	A										<section class="prog__container">\n<p>Informs a <code>std::basic_string</code> object of a planned change in size, so that it can manage the storage allocation appropriately.</p>\n<pre><code>void reserve( size_type new_cap = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/reserve
std::basic_string::resize	A										<section class="prog__container">\n<p>Resizes the string to contain <code>count</code> characters.</p>\n<pre><code>void resize( size_type count );</code></pre><pre><code>void resize( size_type count, CharT ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/resize
std::basic_string::rfind	A										<section class="prog__container">\n<p>Finds the last substring equal to the given character sequence.</p>\n<pre><code>size_type rfind( const basic_string& str, size_type pos = npos ) const;</code></pre><pre><code>size_type rfind( const CharT* s, size_type pos, size_type count ) const;</code></pre><pre><code>size_type rfind( const CharT* s, size_type pos = npos ) const;</code></pre><pre><code>size_type rfind( CharT ch, size_type pos = npos ) const;</code></pre><pre><code>size_type rfind( std::basic_string_view&lt;CharT, Traits&gt; sv,\n                 size_type pos = npos) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/rfind
std::basic_string::shrink_to_fit	A										<section class="prog__container">\n<p>Requests the removal of unused capacity.</p>\n<pre><code>void shrink_to_fit(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/shrink_to_fit
std::basic_string::length	A										<section class="prog__container">\n<p>Returns the number of <code>CharT</code> elements in the string, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type length(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/size
std::basic_string::size	A										<section class="prog__container">\n<p>Returns the number of <code>CharT</code> elements in the string, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/size
std::stod	A										<section class="prog__container">\n<p>Interprets a floating point value in a string <code>str</code>.</p>\n<pre><code>double      stod( const std::string& str, std::size_t* pos = 0 );\ndouble      stod( const std::wstring& str, std::size_t* pos = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/stof
std::stof	A										<section class="prog__container">\n<p>Interprets a floating point value in a string <code>str</code>.</p>\n<pre><code>float       stof( const std::string& str, std::size_t* pos = 0 );\nfloat       stof( const std::wstring& str, std::size_t* pos = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/stof
std::stold	A										<section class="prog__container">\n<p>Interprets a floating point value in a string <code>str</code>.</p>\n<pre><code>long double stold( const std::string& str, std::size_t* pos = 0 );\nlong double stold( const std::wstring& str, std::size_t* pos = 0 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/stof
std::stoi	A										<section class="prog__container">\n<p>Interprets a signed integer value in the string <code>str</code>.</p>\n<pre><code>int       stoi( const std::string& str, std::size_t* pos = 0, int base = 10 );\nint       stoi( const std::wstring& str, std::size_t* pos = 0, int base = 10 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/stol
std::stol	A										<section class="prog__container">\n<p>Interprets a signed integer value in the string <code>str</code>.</p>\n<pre><code>long      stol( const std::string& str, std::size_t* pos = 0, int base = 10 );\nlong      stol( const std::wstring& str, std::size_t* pos = 0, int base = 10 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/stol
std::stoll	A										<section class="prog__container">\n<p>Interprets a signed integer value in the string <code>str</code>.</p>\n<pre><code>long long stoll( const std::string& str, std::size_t* pos = 0, int base = 10 );\nlong long stoll( const std::wstring& str, std::size_t* pos = 0, int base = 10 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/stol
std::stoul	A										<section class="prog__container">\n<p>Interprets an unsigned integer value in the string <code>str</code>.</p>\n<pre><code>unsigned long      stoul( const std::string& str, std::size_t* pos = 0, int base = 10 );\nunsigned long      stoul( const std::wstring& str, std::size_t* pos = 0, int base = 10 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/stoul
std::stoull	A										<section class="prog__container">\n<p>Interprets an unsigned integer value in the string <code>str</code>.</p>\n<pre><code>unsigned long long stoull( const std::string& str, std::size_t* pos = 0, int base = 10 );\nunsigned long long stoull( const std::wstring& str, std::size_t* pos = 0, int base = 10 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/stoul
std::basic_string::substr	A										<section class="prog__container">\n<p>Returns a substring <code>[pos, pos+count)</code>.</p>\n<pre><code>basic_string substr( size_type pos = 0,\n                     size_type count = npos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/substr
std::basic_string::swap	A										<section class="prog__container">\n<p>Exchanges the contents of the string with those of <code>other</code>.</p>\n<pre><code>void swap( basic_string& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/swap
std::to_string	A										<section class="prog__container">\n<p>Converts a numeric value to std::string.</p>\n<pre><code>std::string to_string( int value );</code></pre><pre><code>std::string to_string( long value );</code></pre><pre><code>std::string to_string( long long value );</code></pre><pre><code>std::string to_string( unsigned value );</code></pre><pre><code>std::string to_string( unsigned long value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/to_string
std::to_wstring	A										<section class="prog__container">\n<p>Converts a numeric value to std::wstring.</p>\n<pre><code>std::wstring to_wstring( int value );</code></pre><pre><code>std::wstring to_wstring( long value );</code></pre><pre><code>std::wstring to_wstring( long long value );</code></pre><pre><code>std::wstring to_wstring( unsigned value );</code></pre><pre><code>std::wstring to_wstring( unsigned long value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string/to_wstring
std::basic_string_view	A										<section class="prog__container">\n<p>The class template <code>basic_string_view</code> describes an object that can refer to a constant contiguous sequence of <code>char</code>-like objects with the first element of the sequence at...</p>\n<pre><code>template&lt; \n    class CharT, \n    class Traits = std::char_traits&lt;CharT&gt; \n&gt; class basic_string_view;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view
std::basic_string_view::at	A										<section class="prog__container">\n<p>Returns a reference to the character at specified location <code>pos</code>.</p>\n<pre><code>constexpr const_reference at(size_type pos) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/at
std::basic_string_view::back	A										<section class="prog__container">\n<p>Returns reference to the last character in the view.</p>\n<pre><code>constexpr const_reference back(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/back
std::basic_string_view::begin	A										<section class="prog__container">\n<p>Returns an iterator to the first character of the view.</p>\n<pre><code>constexpr const_iterator begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/begin
std::basic_string_view::cbegin	A										<section class="prog__container">\n<p>Returns an iterator to the first character of the view.</p>\n<pre><code>constexpr const_iterator cbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/begin
std::basic_string_view::compare	A										<section class="prog__container">\n<p>Compares two character sequences.</p>\n<pre><code>constexpr int compare(basic_string_view v) const;</code></pre><pre><code>constexpr int compare(size_type pos1, size_type count1,\n                      basic_string_view v) const;</code></pre><pre><code>constexpr int compare(size_type pos1, size_type count1, basic_string_view v,\n                      size_type pos2, size_type count2) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/compare
std::basic_string_view::copy	A										<section class="prog__container">\n<p>Copies the substring <code>[pos, pos + rcount)</code> to the character string pointed to by <code>dest</code>, where <code>rcount</code> is the smaller of <code>count</code> and...</p>\n<pre><code>size_type copy( CharT* dest,\n                size_type count,\n                size_type pos = 0) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/copy
std::basic_string_view::data	A										<section class="prog__container">\n<p>Returns a pointer to the underlying character array.</p>\n<pre><code>constexpr const_pointer data(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/data
std::basic_string_view::empty	A										<section class="prog__container">\n<p>Checks if the view has no characters, i.e. whether <code>size(void) == 0</code>.</p>\n<pre><code>constexpr bool empty(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/empty
std::basic_string_view::cend	A										<section class="prog__container">\n<p>Returns an iterator to the character following the last character of the view.</p>\n<pre><code>constexpr const_iterator cend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/end
std::basic_string_view::end	A										<section class="prog__container">\n<p>Returns an iterator to the character following the last character of the view.</p>\n<pre><code>constexpr const_iterator end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/end
std::basic_string_view::find	A										<section class="prog__container">\n<p>Finds the first substring equal to the given character sequence.</p>\n<pre><code>constexpr size_type find(basic_string_view v, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type find(CharT c, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type find(const CharT* s, size_type pos, size_type count) const;</code></pre><pre><code>constexpr size_type find(const CharT* s, size_type pos = 0) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/find
std::basic_string_view::find_first_not_of	A										<section class="prog__container">\n<p>Finds the first character not equal to any of the characters in the given character sequence.</p>\n<pre><code>constexpr size_type \n    find_first_not_of(basic_string_view v, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type\n    find_first_not_of(CharT c, size_type pos = 0) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/find_first_not_of
std::basic_string_view::find_first_of	A										<section class="prog__container">\n<p>Finds the first character equal to any of the characters in the given character sequence.</p>\n<pre><code>constexpr size_type find_first_of(basic_string_view v, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type find_first_of(CharT c, size_type pos = 0) const;</code></pre><pre><code>constexpr size_type find_first_of(const CharT* s, size_type pos, size_type count) const;</code></pre><pre><code>constexpr size_type find_first_of(const CharT* s, size_type pos = 0) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/find_first_of
std::basic_string_view::find_last_not_of	A										<section class="prog__container">\n<p>Finds the last character not equal to any of the characters in the given character sequence.</p>\n<pre><code>constexpr size_type \n    find_last_not_of(basic_string_view v, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type\n    find_last_not_of(CharT c, size_type pos = npos) const;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/find_last_not_of
std::basic_string_view::find_last_of	A										<section class="prog__container">\n<p>Finds the last character equal to any of the characters in the given character sequence.</p>\n<pre><code>constexpr size_type find_last_of(basic_string_view v, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type find_last_of(CharT c, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type find_last_of(const CharT* s, size_type pos, size_type count) const;</code></pre><pre><code>constexpr size_type find_last_of(const CharT* s, size_type pos = npos) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/find_last_of
std::basic_string_view::front	A										<section class="prog__container">\n<p>Returns reference to the first character in the view.</p>\n<pre><code>constexpr const_reference front(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/front
std::basic_string_view::max_size	A										<section class="prog__container">\n<p>The largest possible number of char-like objects that can be referred to by a <code>basic_string_view</code>.</p>\n<pre><code>constexpr size_type max_size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/max_size
std::basic_string_view::operator=	A										<section class="prog__container">\n<p>Replaces the view with that of <code>view</code>.</p>\n<pre><code>constexpr basic_string_view& operator=( const basic_string_view& view ) = default;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/operator=
std::basic_string_view::operator[]	A										<section class="prog__container">\n<p>Returns a const reference to the character at specified location <code>pos</code>.</p>\n<pre><code>constexpr const_reference operator[](size_type pos) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/operator_at
std::basic_string_view::crbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first character of the reversed view.</p>\n<pre><code>constexpr const_reverse_iterator crbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/rbegin
std::basic_string_view::rbegin	A										<section class="prog__container">\n<p>Returns a reverse iterator to the first character of the reversed view.</p>\n<pre><code>constexpr const_reverse_iterator rbegin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/rbegin
std::basic_string_view::remove_prefix	A										<section class="prog__container">\n<p>Moves the start of the view forward by <code>n</code> characters.</p>\n<pre><code>constexpr void remove_prefix(size_type n);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/remove_prefix
std::basic_string_view::remove_suffix	A										<section class="prog__container">\n<p>Moves the end of the view back by <code>n</code> characters.</p>\n<pre><code>constexpr void remove_suffix(size_type n);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/remove_suffix
std::basic_string_view::crend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the character following the last character of the reversed view.</p>\n<pre><code>constexpr const_reverse_iterator crend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/rend
std::basic_string_view::rend	A										<section class="prog__container">\n<p>Returns a reverse iterator to the character following the last character of the reversed view.</p>\n<pre><code>constexpr const_reverse_iterator rend(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/rend
std::basic_string_view::rfind	A										<section class="prog__container">\n<p>Finds the last substring equal to the given character sequence.</p>\n<pre><code>constexpr size_type rfind(basic_string_view v, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type rfind(CharT c, size_type pos = npos) const;</code></pre><pre><code>constexpr size_type rfind(const CharT* s, size_type pos, size_type count) const;</code></pre><pre><code>constexpr size_type rfind(const CharT* s, size_type pos = npos) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/rfind
std::basic_string_view::length	A										<section class="prog__container">\n<p>Returns the number of <code>CharT</code> elements in the view, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>constexpr size_type length(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/size
std::basic_string_view::size	A										<section class="prog__container">\n<p>Returns the number of <code>CharT</code> elements in the view, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>constexpr size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/size
std::basic_string_view::substr	A										<section class="prog__container">\n<p>Returns a view of the substring <code>[pos, pos + rcount)</code>, where <code>rcount</code> is the smaller of <code>count</code> and <code>size(void) - pos</code>.</p>\n<pre><code>constexpr basic_string_view\n    substr(size_type pos = 0, size_type count = npos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/substr
std::basic_string_view::swap	A										<section class="prog__container">\n<p>Exchanges the view with that of <code>v</code>.</p>\n<pre><code>constexpr void swap(basic_string_view& v);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/basic_string_view/swap
std::atof	A										<section class="prog__container">\n<p>Interprets a floating point value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>double atof( const char *str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/atof
std::atoi	A										<section class="prog__container">\n<p>Interprets an integer value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>int       atoi( const char *str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/atoi
std::atol	A										<section class="prog__container">\n<p>Interprets an integer value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>long      atol( const char *str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/atoi
std::atoll	A										<section class="prog__container">\n<p>Interprets an integer value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>long long atoll( const char *str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/atoi
std::memchr	A										<section class="prog__container">\n<p>Converts <code>ch</code> to <code>unsigned char</code> and locates the first occurrence of that value in the initial <code>count</code> characters (each interpreted as <code>unsigned char</code>) of...</p>\n<pre><code>const void* memchr( const void* ptr, int ch, std::size_t count );</code></pre><pre><code>void* memchr(       void* ptr, int ch, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/memchr
std::memcmp	A										<section class="prog__container">\n<p>Reinterprets the objects pointed to by <code>lhs</code> and <code>rhs</code> as arrays of <code>unsigned char</code> and compares the first <code>count</code> characters of these arrays.</p>\n<pre><code>int memcmp( const void* lhs, const void* rhs, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/memcmp
std::memcpy	A										<section class="prog__container">\n<p>Copies <code>count</code> bytes from the object pointed to by <code>src</code> to the object pointed to by <code>dest</code>.</p>\n<pre><code>void* memcpy( void* dest, const void* src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/memcpy
std::memmove	A										<section class="prog__container">\n<p>Copies <code>count</code> characters from the object pointed to by <code>src</code> to the object pointed to by <code>dest</code>.</p>\n<pre><code>void* memmove( void* dest, const void* src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/memmove
std::memset	A										<section class="prog__container">\n<p>Converts the value <code>ch</code> to <code>unsigned char</code> and copies it into each of the first <code>count</code> characters of the object pointed to by <code>dest</code>.</p>\n<pre><code>void* memset( void* dest, int ch, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/memset
std::strcat	A										<section class="prog__container">\n<p>Appends a copy of the character string pointed to by <code>src</code> to the end of the character string pointed to by <code>dest</code>.</p>\n<pre><code>char *strcat( char *dest, const char *src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strcat
std::strchr	A										<section class="prog__container">\n<p>Finds the first occurrence of the character <code>static_cast&lt;char&gt;(ch)</code> in the byte string pointed to by <code>str</code>.</p>\n<pre><code>const char* strchr( const char* str, int ch );</code></pre><pre><code>char* strchr(       char* str, int ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strchr
std::strcmp	A										<section class="prog__container">\n<p>Compares two null-terminated byte strings lexicographically.</p>\n<pre><code>int strcmp( const char *lhs, const char *rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strcmp
std::strcoll	A										<section class="prog__container">\n<p>Compares two null-terminated byte strings according to the current locale as defined by the LC_COLLATE category.</p>\n<pre><code>int strcoll( const char* lhs, const char* rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strcoll
std::strcpy	A										<section class="prog__container">\n<p>Copies the character string pointed to by <code>src</code>, including the null terminator, to the character array whose first element is pointed to by <code>dest</code>.</p>\n<pre><code>char* strcpy( char* dest, const char* src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strcpy
std::strcspn	A										<section class="prog__container">\n<p>Returns the length of the maximum initial segment of the byte string pointed to by <code>dest</code>, that consists of only the characters <i>not</i> found in byte string pointed to by...</p>\n<pre><code>size_t strcspn( const char *dest, const char *src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strcspn
std::strerror	A										<section class="prog__container">\n<p>Returns a pointer to the textual description of the system error code <code>errnum</code>, identical to the description that would be printed by perror(void).</p>\n<pre><code>char* strerror( int errnum );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strerror
std::strlen	A										<section class="prog__container">\n<p>Returns the length of the given byte string, that is, the number of characters in a character array whose first element is pointed to by <code>str</code> up to and not including the first null character.</p>\n<pre><code>std::size_t strlen( const char* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strlen
std::strncat	A										<section class="prog__container">\n<p>Appends a byte string pointed to by <code>src</code> to a byte string pointed to by <code>dest</code>.</p>\n<pre><code>char *strncat( char *dest, const char *src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strncat
std::strncmp	A										<section class="prog__container">\n<p>Compares at most <code>count</code> characters of two null-terminated byte strings.</p>\n<pre><code>int strncmp( const char* lhs, const char* rhs, size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strncmp
std::strncpy	A										<section class="prog__container">\n<p>Copies at most <code>count</code> characters of the byte string pointed to by <code>src</code> (including the terminating null character) to character array pointed to by <code>dest</code>.</p>\n<pre><code>char *strncpy( char *dest, const char *src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strncpy
std::strpbrk	A										<section class="prog__container">\n<p>Scans the null-terminated byte string pointed to by <code>dest</code> for any character from the null-terminated byte string pointed to by <code>breakset</code>, and returns a pointer to that...</p>\n<pre><code>const char* strpbrk( const char* dest, const char* breakset );</code></pre><pre><code>char* strpbrk(       char* dest, const char* breakset );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strpbrk
std::strrchr	A										<section class="prog__container">\n<p>Finds the last occurrence of <code>ch</code> (after conversion to <code>char</code>) in the byte string pointed to by <code>str</code>.</p>\n<pre><code>const char* strrchr( const char* str, int ch );</code></pre><pre><code>char* strrchr(       char* str, int ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strrchr
std::strspn	A										<section class="prog__container">\n<p>Returns the length of the maximum initial segment (span) of the byte string pointed to by <code>dest</code>, that consists of only the characters found in byte string pointed to by <code>src</code>.</p>\n<pre><code>size_t strspn( const char* dest, const char* src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strspn
std::strstr	A										<section class="prog__container">\n<p>Finds the first occurrence of the byte string <code>target</code> in the byte string pointed to by <code>str</code>.</p>\n<pre><code>const char* strstr( const char* str, const char* target );</code></pre><pre><code>char* strstr(       char* str, const char* target );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strstr
std::strtod	A										<section class="prog__container">\n<p>Interprets a floating point value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>double      strtod( const char* str, char** str_end );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtof
std::strtof	A										<section class="prog__container">\n<p>Interprets a floating point value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>float       strtof( const char* str, char** str_end );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtof
std::strtold	A										<section class="prog__container">\n<p>Interprets a floating point value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>long double strtold( const char* str, char** str_end );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtof
std::strtoimax	A										<section class="prog__container">\n<p>Interprets an integer value in a byte string pointed to by <code>nptr</code>.</p>\n<pre><code>std::intmax_t strtoimax( const char* nptr, char** endptr, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtoimax
std::strtoumax	A										<section class="prog__container">\n<p>Interprets an integer value in a byte string pointed to by <code>nptr</code>.</p>\n<pre><code>std::uintmax_t strtoumax( const char* nptr, char** endptr, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtoimax
std::strtok	A										<section class="prog__container">\n<p>Finds the next token in a null-terminated byte string pointed to by <code>str</code>.</p>\n<pre><code>char* strtok( char* str, const char* delim );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtok
std::strtol	A										<section class="prog__container">\n<p>Interprets an integer value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>long      strtol( const char *str, char **str_end, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtol
std::strtoll	A										<section class="prog__container">\n<p>Interprets an integer value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>long long strtoll( const char *str, char **str_end, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtol
std::strtoul	A										<section class="prog__container">\n<p>Interprets an unsigned integer value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>unsigned long      strtoul( const char *str, char **str_end, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtoul
std::strtoull	A										<section class="prog__container">\n<p>Interprets an unsigned integer value in a byte string pointed to by <code>str</code>.</p>\n<pre><code>unsigned long long strtoull( const char *str, char **str_end, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strtoul
std::strxfrm	A										<section class="prog__container">\n<p>Transforms the null-terminated byte string pointed to by <code>src</code> into the implementation-defined form such that comparing two transformed strings with std::strcmp gives the same result as...</p>\n<pre><code>std::size_t strxfrm( char* dest, const char* src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/byte/strxfrm
std::char_traits	A										<section class="prog__container">\n<p>The <code>char_traits</code> class is a traits class template that abstracts basic character and string operations for a given character type.</p>\n<pre><code>template&lt;\n    class CharT \n&gt; class char_traits;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits
std::char_traits::assign	A										<section class="prog__container">\n<p>Assigns a character.</p>\n<pre><code>static constexpr void assign( char_type& r, const char_type& a );</code></pre><pre><code>static char_type* assign( char_type* p, std::size_t count, char_type a );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/assign
std::char_traits::eq	A										<section class="prog__container">\n<p>Compares two characters.</p>\n<pre><code>static constexpr bool eq( char_type a, char_type b );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/cmp
std::char_traits::lt	A										<section class="prog__container">\n<p>Compares two characters.</p>\n<pre><code>static constexpr bool lt( char_type a, char_type b );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/cmp
std::char_traits::compare	A										<section class="prog__container">\n<p>Compares the first <code>count</code> characters of the character strings <code>s1</code> and <code>s2</code>.</p>\n<pre><code>static constexpr int compare( const char_type* s1, const char_type* s2, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/compare
std::char_traits::copy	A										<section class="prog__container">\n<p>Copies <code>count</code> character from character string pointed to by <code>src</code> to character string pointed to by <code>dest</code>.</p>\n<pre><code>static char_type* copy( char_type* dest, const char_type* src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/copy
std::char_traits::eof	A										<section class="prog__container">\n<p>Returns a value not equivalent to any value of type <code>char_type</code>.</p>\n<pre><code>static constexpr int_type eof(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/eof
std::char_traits::eq_int_type	A										<section class="prog__container">\n<p>Checks whether two values of type <code>int_type</code> are equal.</p>\n<pre><code>static constexpr bool eq_int_type( int_type c1, int_type c2 );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/eq_int_type
std::char_traits::find	A										<section class="prog__container">\n<p>Searches for character <code>ch</code> within the first <code>count</code> characters of the sequence pointed to by <code>p</code>.</p>\n<pre><code>static constexpr const char_type* find( const char_type* p, std::size_t count, const char_type& ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/find
std::char_traits::length	A										<section class="prog__container">\n<p>Returns the length of the character sequence pointed to by <code>s</code>, that is, the position of the terminating null character (<code>CharT(void)</code>).</p>\n<pre><code>static constexpr std::size_t length( const char_type* s );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/length
std::char_traits::move	A										<section class="prog__container">\n<p>Copies <code>count</code> character from character string pointed to by <code>src</code> to character string pointed to by <code>dest</code>.</p>\n<pre><code>static char_type* move( char_type* dest, const char_type* src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/move
std::char_traits::not_eof	A										<section class="prog__container">\n<p>Checks whether <code>e</code> is not equivalent to <i>eof</i> value.</p>\n<pre><code>static constexpr int_type not_eof( int_type e );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/not_eof
std::char_traits::to_char_type	A										<section class="prog__container">\n<p>Converts a value of <code>int_type</code> to <code>char_type</code>.</p>\n<pre><code>static constexpr char_type to_char_type( int_type c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/to_char_type
std::char_traits::to_int_type	A										<section class="prog__container">\n<p>Converts a value of <code>char_type</code> to <code>int_type</code>.</p>\n<pre><code>static constexpr int_type to_int_type( char_type c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/char_traits/to_int_type
std::btowc	A										<section class="prog__container">\n<p>Widens a single-byte character <code>c</code> to its wide character equivalent.</p>\n<pre><code>std::wint_t btowc( int c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/btowc
std::c16rtomb	A										<section class="prog__container">\n<p>Converts a single code point from variable-length 16-bit character representation (typically, UTF-16) to a narrow multibyte character representation.</p>\n<pre><code>std::size_t c16rtomb( char* s, char16_t c16, std::mbstate_t* ps );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/c16rtomb
std::c32rtomb	A										<section class="prog__container">\n<p>Converts a UTF-32 character to its narrow multibyte representation.</p>\n<pre><code>std::size_t c32rtomb( char* s, char32_t c32, std::mbstate_t* ps );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/c32rtomb
std::mblen	A										<section class="prog__container">\n<p>Determines the size, in bytes, of the multibyte character whose first byte is pointed to by <code>s</code>.</p>\n<pre><code>int mblen( const char* s, std::size_t n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mblen
std::mbrlen	A										<section class="prog__container">\n<p>Determines the size, in bytes, of the remainder of the multibyte character whose first byte is pointed to by <code>s</code>, given the current conversion state <code>ps</code>.</p>\n<pre><code>std::size_t mbrlen( const char* s, std::size_t n, std::mbstate_t* ps);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mbrlen
std::mbrtoc16	A										<section class="prog__container">\n<p>Converts a narrow multibyte character to UTF-16 character representation.</p>\n<pre><code>std::size_t mbrtoc16( char16_t* pc16,\n                      const char* s,\n                      std::size_t n,\n                      std::mbstate_t* ps );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mbrtoc16
std::mbrtoc32	A										<section class="prog__container">\n<p>Converts a narrow multibyte character to its UTF-32 character representation.</p>\n<pre><code>std::size_t mbrtoc32( char32_t* pc32,\n                      const char* s,\n                      std::size_t n,\n                      std::mbstate_t* ps );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mbrtoc32
std::mbrtowc	A										<section class="prog__container">\n<p>Converts a narrow multibyte character to a wide character.</p>\n<pre><code>std::size_t mbrtowc( wchar_t* pwc,\n                     const char* s,\n                     std::size_t n,\n                     std::mbstate_t* ps );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mbrtowc
std::mbsinit	A										<section class="prog__container">\n<p>If <code>ps</code> is not a null pointer, the <code>mbsinit</code> function determines whether the pointed-to std::mbstate_t object describes the initial conversion state.</p>\n<pre><code>int mbsinit( const std::mbstate_t* ps);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mbsinit
std::mbsrtowcs	A										<section class="prog__container">\n<p>Converts a null-terminated multibyte character sequence, which begins in the conversion state described by <code>*ps</code>, from the array whose first element is pointed to by <code>*src</code> to...</p>\n<pre><code>std::size_t mbsrtowcs( wchar_t* dst,\n                       const char** src,\n                       std::size_t len,\n                       std::mbstate_t* ps );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mbsrtowcs
std::mbstate_t	A										<section class="prog__container">\n<p>The type mbstate_t is a trivial non-array type that can represent any of the conversion states that can occur in an implementation-defined set of supported multibyte character encoding rules.</p>\n<pre><code>struct mbstate_t;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mbstate_t
std::mbstowcs	A										<section class="prog__container">\n<p>Converts a multibyte character string from the array whose first element is pointed to by <code>src</code> to its wide character  representation.</p>\n<pre><code>std::size_t mbstowcs( wchar_t* dst, const char* src, std::size_t len);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mbstowcs
std::mbtowc	A										<section class="prog__container">\n<p>Converts a multibyte character whose first byte is pointed to by <code>s</code> to a wide character, written to <code>*pwc</code> if <code>pwc</code> is not null.</p>\n<pre><code>int mbtowc( wchar_t* pwc, const char* s, std::size_t n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/mbtowc
std::wcrtomb	A										<section class="prog__container">\n<p>Converts a wide character to its narrow multibyte representation.</p>\n<pre><code>std::size_t wcrtomb( char* s, wchar_t wc, std::mbstate_t* ps );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/wcrtomb
std::wcsrtombs	A										<section class="prog__container">\n<p>Converts a sequence of wide characters from the array whose first element is pointed to by <code>*src</code> to its narrow multibyte representation that begins in the conversion state described by...</p>\n<pre><code>std::size_t wcsrtombs( char* dst,\n                       const wchar_t** src,\n                       std::size_t len,\n                       std::mbstate_t* ps );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/wcsrtombs
std::wcstombs	A										<section class="prog__container">\n<p>Converts a sequence of wide characters from the array whose first element is pointed to by <code>src</code> to its narrow multibyte representation that begins in the initial shift state.</p>\n<pre><code>std::size_t wcstombs( char* dst, const wchar_t* src, std::size_t len);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/wcstombs
std::wctob	A										<section class="prog__container">\n<p>Narrows a wide character <code>c</code> if its multibyte character equivalent in the initial shift state is a single byte.</p>\n<pre><code>int wctob( std::wint_t c );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/wctob
std::wctomb	A										<section class="prog__container">\n<p>Converts a wide character <code>wc</code> to multibyte encoding and stores it (including any shift sequences) in the char array whose first element is pointed to by <code>s</code>.</p>\n<pre><code>int wctomb( char *s, wchar_t wc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/multibyte/wctomb
std::iswalnum	A										<section class="prog__container">\n<p>Checks if the given wide character is an alphanumeric character...</p>\n<pre><code>int iswalnum( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswalnum
std::iswalpha	A										<section class="prog__container">\n<p>Checks if the given wide character is an alphabetic character...</p>\n<pre><code>int iswalpha( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswalpha
std::iswblank	A										<section class="prog__container">\n<p>Checks if the given wide character is classified as blank character (that is, a whitespace character used to separate words in a sentence) by the current C locale.</p>\n<pre><code>int iswblank( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswblank
std::iswcntrl	A										<section class="prog__container">\n<p>Checks if the given wide character is a control character, i.e. codes <code>0x00-0x1F</code> and <code>0x7F</code> and any control characters specific to the current locale.</p>\n<pre><code>int iswcntrl( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswcntrl
std::iswctype	A										<section class="prog__container">\n<p>Classifies the wide character <code>wc</code> using the current C locale's LC_CTYPE category identified by <code>desc</code>.</p>\n<pre><code>int iswctype( std::wint_t wc, std::wctype_t desc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswctype
std::iswdigit	A										<section class="prog__container">\n<p>Checks if the given wide character corresponds (if narrowed) to one of the ten decimal digit characters <code>0123456789</code>.</p>\n<pre><code>int iswdigit( wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswdigit
std::iswgraph	A										<section class="prog__container">\n<p>Checks if the given wide character has a graphical representation...</p>\n<pre><code>int iswgraph( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswgraph
std::iswlower	A										<section class="prog__container">\n<p>Checks if the given wide character is a lowercase letter, i.e. one of <code>abcdefghijklmnopqrstuvwxyz</code> or any lowercase letter specific to the current locale.</p>\n<pre><code>int iswlower( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswlower
std::iswprint	A										<section class="prog__container">\n<p>Checks if the given wide character can be printed...</p>\n<pre><code>int iswprint( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswprint
std::iswpunct	A										<section class="prog__container">\n<p>Checks if the given wide character is a punctuation character, i.e. it is one of <code>!"#$%&amp;'(void)*+,-./:;&lt;=&gt;?@[\]^_`{|}~</code> or any punctuation character specific to the current locale.</p>\n<pre><code>int iswpunct( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswpunct
std::iswspace	A										<section class="prog__container">\n<p>Checks if the given wide character is a wide whitespace character as classified by the currently installed C locale.</p>\n<pre><code>int iswspace( wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswspace
std::iswupper	A										<section class="prog__container">\n<p>Checks if the given wide character is an uppercase letter, i.e. one of <code>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code> or any uppercase letter specific to the current locale.</p>\n<pre><code>int iswupper( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswupper
std::iswxdigit	A										<section class="prog__container">\n<p>Checks if the given wide character corresponds (if narrowed) to a hexadecimal numeric character, i.e. one of <code>0123456789abcdefABCDEF</code>.</p>\n<pre><code>int iswxdigit( wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/iswxdigit
std::towctrans	A										<section class="prog__container">\n<p>Maps the wide character <code>wc</code> using the current C locale's LC_CTYPE mapping category identified by <code>desc</code>.</p>\n<pre><code>std::wint_t towctrans( std::wint_t wc, std::wctrans_t desc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/towctrans
std::towlower	A										<section class="prog__container">\n<p>Converts the given wide character to lowercase, if possible.</p>\n<pre><code>std::wint_t towlower( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/towlower
std::towupper	A										<section class="prog__container">\n<p>Converts the given wide character to uppercase, if possible.</p>\n<pre><code>std::wint_t towupper( std::wint_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/towupper
std::wcscat	A										<section class="prog__container">\n<p>Appends a copy of the wide string pointed to by <code>src</code> to the end of the wide string pointed to by <code>dest</code>.</p>\n<pre><code>wchar_t *wcscat( wchar_t *dest, const wchar_t *src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcscat
std::wcschr	A										<section class="prog__container">\n<p>Finds the first occurrence of the wide character <code>ch</code> in the wide string pointed to by <code>str</code>.</p>\n<pre><code>const wchar_t* wcschr( const wchar_t* str, wchar_t ch );</code></pre><pre><code>wchar_t* wcschr(       wchar_t* str, wchar_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcschr
std::wcscmp	A										<section class="prog__container">\n<p>Compares two null-terminated wide strings lexicographically.</p>\n<pre><code>int wcscmp( const wchar_t* lhs, const wchar_t* rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcscmp
std::wcscoll	A										<section class="prog__container">\n<p>Compares two null-terminated wide strings according to the locale most recently installed by std::setlocale, as defined by the LC_COLLATE category.</p>\n<pre><code>int wcscoll( const wchar_t* lhs, const wchar_t* rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcscoll
std::wcscpy	A										<section class="prog__container">\n<p>Copies the wide string pointed to by <code>src</code> (including the terminating null wide character) to wide character array pointed to by <code>dest</code>.</p>\n<pre><code>wchar_t *wcscpy( wchar_t *dest, const wchar_t *src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcscpy
std::wcscspn	A										<section class="prog__container">\n<p>Returns the length of the maximum initial segment of the wide string pointed to by <code>dest</code>, that consists of only the characters <i>not</i> found in wide string pointed to by...</p>\n<pre><code>std::size_t wcscspn( const wchar_t* dest, const wchar_t* src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcscspn
std::wcslen	A										<section class="prog__container">\n<p>Returns the length of a wide string, that is the number of non-null wide characters that precede the terminating null wide character.</p>\n<pre><code>std::size_t wcslen( const wchar_t* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcslen
std::wcsncat	A										<section class="prog__container">\n<p>Appends at most <code>count</code> wide characters from the wide string pointed to by <code>src</code> to the end of the character string pointed to by <code>dest</code>, stopping if the null...</p>\n<pre><code>wchar_t *wcsncat( wchar_t *dest, const wchar_t *src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcsncat
std::wcsncmp	A										<section class="prog__container">\n<p>Compares at most <code>count</code> wide characters of two null-terminated wide strings.</p>\n<pre><code>int wcsncmp( const wchar_t* lhs, const wchar_t* rhs, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcsncmp
std::wcsncpy	A										<section class="prog__container">\n<p>Copies at most <code>count</code> characters of the wide string pointed to by <code>src</code> (including the terminating null wide character) to wide character array pointed to by <code>dest</code>.</p>\n<pre><code>wchar_t *wcsncpy( wchar_t *dest, const wchar_t *src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcsncpy
std::wcspbrk	A										<section class="prog__container">\n<p>Finds the first character in wide string pointed to by <code>dest</code>, that is also in wide string pointed to by <code>str</code>.</p>\n<pre><code>const wchar_t* wcspbrk( const wchar_t* dest, const wchar_t* str );</code></pre><pre><code>wchar_t* wcspbrk(       wchar_t* dest, const wchar_t* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcspbrk
std::wcsrchr	A										<section class="prog__container">\n<p>Finds the last occurrence of the wide character <code>ch</code> in the wide string pointed to by <code>str</code>.</p>\n<pre><code>const wchar_t* wcsrchr( const wchar_t* str, wchar_t ch );</code></pre><pre><code>wchar_t* wcsrchr(       wchar_t* str, wchar_t ch );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcsrchr
std::wcsspn	A										<section class="prog__container">\n<p>Returns the length of the maximum initial segment of the wide string pointed to by <code>dest</code>, that consists of only the characters found in wide string pointed to by <code>src</code>.</p>\n<pre><code>size_t wcsspn( const wchar_t* dest, const wchar_t* src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcsspn
std::wcsstr	A										<section class="prog__container">\n<p>Finds the first occurrence of the wide string <code>src</code> in the wide string pointed to by <code>dest</code>.</p>\n<pre><code>const wchar_t* wcsstr( const wchar_t* dest, const wchar_t* src );</code></pre><pre><code>wchar_t* wcsstr(       wchar_t* dest, const wchar_t* src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcsstr
std::wcstod	A										<section class="prog__container">\n<p>Interprets a floating point value in a wide string pointed to by <code>str</code>.</p>\n<pre><code>double      wcstod( const wchar_t* str, wchar_t** str_end );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstof
std::wcstof	A										<section class="prog__container">\n<p>Interprets a floating point value in a wide string pointed to by <code>str</code>.</p>\n<pre><code>float       wcstof( const wchar_t* str, wchar_t** str_end );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstof
std::wcstold	A										<section class="prog__container">\n<p>Interprets a floating point value in a wide string pointed to by <code>str</code>.</p>\n<pre><code>long double wcstold( const wchar_t* str, wchar_t** str_end );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstof
std::wcstoimax	A										<section class="prog__container">\n<p>Interprets an unsigned integer value in a wide string pointed to by <code>nptr</code>.</p>\n<pre><code>std::intmax_t wcstoimax( const wchar_t* nptr, wchar_t** endptr, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstoimax
std::wcstoumax	A										<section class="prog__container">\n<p>Interprets an unsigned integer value in a wide string pointed to by <code>nptr</code>.</p>\n<pre><code>std::uintmax_t wcstoumax( const wchar_t* nptr, wchar_t** endptr, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstoimax
std::wcstok	A										<section class="prog__container">\n<p>Finds the next token in a null-terminated wide string pointed to by <code>str</code>.</p>\n<pre><code>wchar_t* wcstok( wchar_t* str, const wchar_t* delim, wchar_t ** ptr);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstok
std::wcstol	A										<section class="prog__container">\n<p>Interprets an integer value in a wide string pointed to by <code>str</code>.</p>\n<pre><code>long      wcstol( const wchar_t* str, wchar_t** str_end, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstol
std::wcstoll	A										<section class="prog__container">\n<p>Interprets an integer value in a wide string pointed to by <code>str</code>.</p>\n<pre><code>long long wcstoll( const wchar_t* str, wchar_t** str_end, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstol
std::wcstoul	A										<section class="prog__container">\n<p>Interprets an unsigned integer value in a wide string pointed to by <code>str</code>.</p>\n<pre><code>unsigned long      wcstoul( const wchar_t* str, wchar_t** str_end, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstoul
std::wcstoull	A										<section class="prog__container">\n<p>Interprets an unsigned integer value in a wide string pointed to by <code>str</code>.</p>\n<pre><code>unsigned long long wcstoull( const wchar_t* str, wchar_t** str_end, int base );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wcstoul
std::wctrans	A										<section class="prog__container">\n<p>Constructs a value of type <code>std::wctrans_t</code> that describes a LC_CTYPE category of wide character mapping.</p>\n<pre><code>std::wctrans_t wctrans( const char* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wctrans
std::wctype	A										<section class="prog__container">\n<p>Constructs a value of type <code>std::wctype_t</code> that describes a LC_CTYPE category of wide character classification.</p>\n<pre><code>std::wctype_t wctype( const char* str );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wctype
std::wmemchr	A										<section class="prog__container">\n<p>Locates the first occurrence of wide character <code>ch</code> in the initial <code>count</code> wide characters of the wide character array pointed to by <code>ptr</code>.</p>\n<pre><code>const wchar_t* wmemchr( const wchar_t* ptr, wchar_t ch, std::size_t count );</code></pre><pre><code>wchar_t* wmemchr(       wchar_t* ptr, wchar_t ch, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wmemchr
std::wmemcmp	A										<section class="prog__container">\n<p>Compares the first <code>count</code> wide characters of the wide character arrays pointed to by <code>lhs</code> and <code>rhs</code>.</p>\n<pre><code>int wmemcmp( const wchar_t* lhs, const wchar_t* rhs, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wmemcmp
std::wmemcpy	A										<section class="prog__container">\n<p>Copies exactly <code>count</code> successive wide characters from the wide character array pointed to by <code>src</code> to the wide character array pointed to by <code>dest</code>.</p>\n<pre><code>wchar_t* wmemcpy( wchar_t* dest, const wchar_t* src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wmemcpy
std::wmemmove	A										<section class="prog__container">\n<p>Copies exactly <code>count</code> successive wide characters from the wide character array pointed to by <code>src</code> to the wide character array pointed to by <code>dest</code>.</p>\n<pre><code>wchar_t* wmemmove( wchar_t* dest, const wchar_t* src, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wmemmove
std::wmemset	A										<section class="prog__container">\n<p>Copies the wide character <code>ch</code> into each of the first <code>count</code> wide characters of the wide character array pointed to by <code>dest</code>.</p>\n<pre><code>wchar_t* wmemset( wchar_t* dest, wchar_t ch, std::size_t count );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/string/wide/wmemset
std::async	A										<section class="prog__container">\n<p>The template function <code>async</code> runs the function <code>f</code> asynchronously (potentially in a separate thread which may be part of a thread pool) and returns a std::future that will...</p>\n<pre><code>template&lt; class Function, class... Args&gt;\nstd::future&lt;typename std::result_of&lt;Function(Args...)&gt;::type&gt;\n    async( Function&& f, Args&&... args );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/thread/async
std::call_once	A										<section class="prog__container">\n<p>Executes the <code>Callable</code> object <code>f</code> exactly once, even if called from several threads.</p>\n<pre><code>template&lt; class Callable, class... Args &gt;\nvoid call_once( std::once_flag& flag, Callable&& f, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/call_once
std::condition_variable	A										<section class="prog__container">\n<p>The <code>condition_variable</code> class is a synchronization primitive that can be used to block a thread, or multiple threads at the same time, until another thread both modifies a shared variable...</p>\n<pre><code>class condition_variable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable
std::condition_variable::native_handle	A										<section class="prog__container">\n<p>Accesses the native handle of <code>*this</code>.</p>\n<pre><code>native_handle_type native_handle(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable/native_handle
std::condition_variable::notify_all	A										<section class="prog__container">\n<p>Unblocks all threads currently waiting for <code>*this</code>.</p>\n<pre><code>void notify_all(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable/notify_all
std::condition_variable::notify_one	A										<section class="prog__container">\n<p>If any threads are waiting on <code>*this</code>, calling <code>notify_one</code> unblocks one of the waiting threads.</p>\n<pre><code>void notify_one(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable/notify_one
std::condition_variable::wait	A										<section class="prog__container">\n<p><code>wait</code> causes the current thread to block until the condition variable is notified or a spurious wakeup occurs, optionally looping until some predicate is satisfied.</p>\n<pre><code>void wait( std::unique_lock&lt;std::mutex&gt;& lock );</code></pre><pre><code>template&lt; class Predicate &gt;\nvoid wait( std::unique_lock&lt;std::mutex&gt;& lock, Predicate pred );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable/wait
std::condition_variable::wait_until	A										<section class="prog__container">\n<p><code>wait_until</code> causes the current thread to block until the condition variable is notified, a specific time is reached, or a spurious wakeup occurs, optionally looping until some predicate...</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nstd::cv_status wait_until( std::unique_lock&lt;std::mutex&gt;& lock,\n                           const std::chrono::time_point&lt;Clock, Duration&gt;& timeout_time );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable/wait_until
std::condition_variable_any	A										<section class="prog__container">\n<p>The <code>condition_variable_any</code> class is a generalization of std::condition_variable.</p>\n<pre><code>class condition_variable_any;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable_any
std::condition_variable_any::notify_all	A										<section class="prog__container">\n<p>Unblocks all threads currently waiting for <code>*this</code>.</p>\n<pre><code>void notify_all(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable_any/notify_all
std::condition_variable_any::notify_one	A										<section class="prog__container">\n<p>If any threads are waiting on <code>*this</code>, calling <code>notify_one</code> unblocks one of the waiting threads.</p>\n<pre><code>void notify_one(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable_any/notify_one
std::condition_variable_any::wait	A										<section class="prog__container">\n<p><code>wait</code> causes the current thread to block until the condition variable is notified or a spurious wakeup occurs, optionally looping until some predicate is satisfied.</p>\n<pre><code>template&lt; class Lock &gt;\nvoid wait( Lock& lock );</code></pre><pre><code>template&lt; class Lock, class Predicate &gt;\nvoid wait( Lock& lock, Predicate pred );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable_any/wait
std::condition_variable_any::wait_until	A										<section class="prog__container">\n<p><code>wait_until</code> causes the current thread to block until the condition variable is notified, a specific time is reached, or a spurious wakeup occurs, optionally looping until some predicate...</p>\n<pre><code>template&lt; class Lock, class Clock, class Duration &gt;\nstd::cv_status wait_until( Lock& lock,\n                           const std::chrono::time_point&lt;Clock, Duration&gt;& timeout_time );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/thread/condition_variable_any/wait_until
std::future	A										<section class="prog__container">\n<p>The class template <code>std::future</code> provides a mechanism to access the result of asynchronous operations...</p>\n<pre><code>template&lt; class T &gt; class future;</code></pre><pre><code>template&lt; class T &gt; class future&lt;T&&gt;;</code></pre><pre><code>template&lt;&gt;          class future&lt;void&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future
std::future::future	A										<section class="prog__container">\n<p>Constructs a <code>std::future</code> object.</p>\n<pre><code>future( future&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future/future
std::future_category	A										<section class="prog__container">\n<p>Obtains a reference to the static error category object for future object errors.</p>\n<pre><code>const std::error_category& future_category(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future/future_category
std::future::get	A										<section class="prog__container">\n<p>The <code>get</code> method waits until the <code>future</code> has a valid result and (depending on which template is used) retrieves it.</p>\n<pre><code>T get(void);</code></pre><pre><code>T& get(void);</code></pre><pre><code>void get(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future/get
std::future::operator=	A										<section class="prog__container">\n<p>Assigns the contents of another future object.</p>\n<pre><code>future& operator=( future&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future/operator=
std::future::share	A										<section class="prog__container">\n<p>Transfers the shared state of <code>*this</code>, if any, to a std::shared_future object.</p>\n<pre><code>std::shared_future&lt;T&gt; share(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future/share
std::future::valid	A										<section class="prog__container">\n<p>Checks if the future refers to a shared state.</p>\n<pre><code>bool valid(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future/valid
std::future::wait	A										<section class="prog__container">\n<p>Blocks until the result becomes available.</p>\n<pre><code>void wait(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future/wait
std::future::wait_for	A										<section class="prog__container">\n<p>Waits for the result to become available.</p>\n<pre><code>template&lt; class Rep, class Period &gt;\nstd::future_status wait_for( const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future/wait_for
std::future::wait_until	A										<section class="prog__container">\n<p><code>wait_until</code> waits for a result to become available.</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nstd::future_status wait_until( const std::chrono::time_point&lt;Clock,Duration&gt;& timeout_time ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future/wait_until
std::future_category	A										<section class="prog__container">\n<p>Obtains a reference to the static error category object for the errors related to futures and promises.</p>\n<pre><code>const std::error_category& future_category(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future_category
std::future_error	A										<section class="prog__container">\n<p>The class std::future_error defines an exception object that is thrown on failure by the functions in the thread library that deal with asynchronous execution and shared states (std::future...</p>\n<pre><code>class future_error;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future_error
std::future_error::code	A										<section class="prog__container">\n<p>Returns the stored error code.</p>\n<pre><code>const std::error_code& code(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future_error/code
std::future_error::future_error	A										<section class="prog__container">\n<p>Constructs a new future error object containing error code <code>ec</code> (until C++17)std::make_error_code(ec) (since C++17).</p>\n<pre><code>explicit future_error( std::future_errc ec );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future_error/future_error
std::future_error::what	A										<section class="prog__container">\n<p>Returns the explanatory string.</p>\n<pre><code>virtual const char* what(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/future_error/what
std::this_thread::get_id	A										<section class="prog__container">\n<p>Returns the <i>id</i> of the current thread.</p>\n<pre><code>std::thread::id get_id(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/get_id
std::lock	A										<section class="prog__container">\n<p>Locks the given <code>Lockable</code> objects <code>lock1</code>, <code>lock2</code>, <code>...</code>, <code>lockn</code> using a deadlock avoidance algorithm to avoid deadlock.</p>\n<pre><code>template&lt; class Lockable1, class Lockable2, class... LockableN &gt;\nvoid lock( Lockable1& lock1, Lockable2& lock2, LockableN&... lockn );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/lock
std::lock_guard	A										<section class="prog__container">\n<p>The class <code>lock_guard</code> is a mutex wrapper that provides a convenient RAII-style mechanism for owning a mutex for the duration of a scoped block.</p>\n<pre><code>template&lt; class Mutex &gt;\nclass lock_guard;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/lock_guard
std::lock_guard::lock_guard	A										<section class="prog__container">\n<p>Acquires ownership of the given mutex <code>m</code>.</p>\n<pre><code>explicit lock_guard( MutexTypes&... m );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/lock_guard/lock_guard
std::adopt_lock_t	A										<section class="prog__container">\n<p><code>std::defer_lock_t</code>, <code>std::try_to_lock_t</code> and <code>std::adopt_lock_t</code> are empty struct tag types used to specify locking strategy for std::lock_guard, std::unique_lock...</p>\n<pre><code>struct defer_lock_t { };\nstruct try_to_lock_t { };\nstruct adopt_lock_t { };</code></pre><pre><code>struct defer_lock_t { explicit defer_lock_t(void) = default; };\nstruct try_to_lock_t { explicit try_to_lock_t(void) = default; };\nstruct adopt_lock_t { explicit adopt_lock_t(void) = default; };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/lock_tag_t
std::defer_lock_t	A										<section class="prog__container">\n<p><code>std::defer_lock_t</code>, <code>std::try_to_lock_t</code> and <code>std::adopt_lock_t</code> are empty struct tag types used to specify locking strategy for std::lock_guard, std::unique_lock...</p>\n<pre><code>struct defer_lock_t { };\nstruct try_to_lock_t { };\nstruct adopt_lock_t { };</code></pre><pre><code>struct defer_lock_t { explicit defer_lock_t(void) = default; };\nstruct try_to_lock_t { explicit try_to_lock_t(void) = default; };\nstruct adopt_lock_t { explicit adopt_lock_t(void) = default; };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/lock_tag_t
std::try_to_lock_t	A										<section class="prog__container">\n<p><code>std::defer_lock_t</code>, <code>std::try_to_lock_t</code> and <code>std::adopt_lock_t</code> are empty struct tag types used to specify locking strategy for std::lock_guard, std::unique_lock...</p>\n<pre><code>struct defer_lock_t { };\nstruct try_to_lock_t { };\nstruct adopt_lock_t { };</code></pre><pre><code>struct defer_lock_t { explicit defer_lock_t(void) = default; };\nstruct try_to_lock_t { explicit try_to_lock_t(void) = default; };\nstruct adopt_lock_t { explicit adopt_lock_t(void) = default; };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/lock_tag_t
std::mutex	A										<section class="prog__container">\n<p>The <code>mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.</p>\n<pre><code>class mutex;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/mutex
std::mutex::lock	A										<section class="prog__container">\n<p>Locks the mutex.</p>\n<pre><code>void lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/mutex/lock
std::mutex::mutex	A										<section class="prog__container">\n<p> Constructs the mutex.</p>\n<pre><code>constexpr mutex(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/mutex/mutex
std::mutex::native_handle	A										<section class="prog__container">\n<p>Returns the underlying implementation-defined native handle object.</p>\n<pre><code>native_handle_type native_handle(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/mutex/native_handle
std::mutex::try_lock	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>bool try_lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/mutex/try_lock
std::mutex::unlock	A										<section class="prog__container">\n<p>Unlocks the mutex.</p>\n<pre><code>void unlock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/mutex/unlock
std::notify_all_at_thread_exit	A										<section class="prog__container">\n<p><code>notify_all_at_thread_exit</code> provides a mechanism to notify other threads that a given thread has completely finished, including destroying all thread_local objects.</p>\n<pre><code>void notify_all_at_thread_exit( std::condition_variable& cond,\n                                std::unique_lock&lt;std::mutex&gt; lk );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/notify_all_at_thread_exit
std::once_flag	A										<section class="prog__container">\n<p>The class <code>std::once_flag</code> is a helper structure for std::call_once.</p>\n<pre><code>class once_flag;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/once_flag
std::packaged_task	A										<section class="prog__container">\n<p>The class template <code>std::packaged_task</code> wraps any <code>Callable</code> target (function, lambda expression, bind expression, or another function object) so that it can be invoked...</p>\n<pre><code>template&lt; class &gt; class packaged_task; //not defined</code></pre><pre><code>template&lt; class R, class ...Args &gt; \nclass packaged_task&lt;R(Args...)&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/packaged_task
std::packaged_task::get_future	A										<section class="prog__container">\n<p>Returns a <code>future</code> which shares the same shared state as <code>*this</code>.</p>\n<pre><code>std::future&lt;R&gt; get_future(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/packaged_task/get_future
std::packaged_task::make_ready_at_thread_exit	A										<section class="prog__container">\n<p>Calls the stored task with forwarded <code>args</code> as the arguments.</p>\n<pre><code>void make_ready_at_thread_exit( ArgTypes... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/packaged_task/make_ready_at_thread_exit
std::packaged_task::operator()	A										<section class="prog__container">\n<p>Calls the stored task with <code>args</code> as the arguments.</p>\n<pre><code>void operator(void)( ArgTypes... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/packaged_task/operator()
std::packaged_task::operator=	A										<section class="prog__container">\n<p> Releases the shared state, if any, destroys the previously-held task, and moves the shared state and the task owned by <code>rhs</code> into <code>*this</code>.</p>\n<pre><code>packaged_task& operator=( packaged_task&& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/packaged_task/operator=
std::packaged_task::packaged_task	A										<section class="prog__container">\n<p>Constructs a new <code>std::packaged_task</code> object.</p>\n<pre><code>template &lt;class F&gt;\nexplicit packaged_task( F&& f );</code></pre><pre><code>template &lt;class F, class Allocator&gt;\nexplicit packaged_task( std::allocator_arg_t, const Allocator& a, F&& f );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/thread/packaged_task/packaged_task
std::packaged_task::reset	A										<section class="prog__container">\n<p>Resets the state abandoning the results of previous executions.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/packaged_task/reset
std::packaged_task::swap	A										<section class="prog__container">\n<p>Exchanges the shared states and stored tasks of <code>*this</code> and <code>other</code>.</p>\n<pre><code>void swap( packaged_task& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/packaged_task/swap
std::packaged_task::valid	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> has a shared state.</p>\n<pre><code>bool valid(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/packaged_task/valid
std::promise::get_future	A										<section class="prog__container">\n<p>Returns a future object associated with the same shared state as <code>*this</code>.</p>\n<pre><code>std::future&lt;T&gt; get_future(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/promise/get_future
std::promise::operator=	A										<section class="prog__container">\n<p>Assigns the contents.</p>\n<pre><code>promise& operator=( promise&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/promise/operator=
std::promise::promise	A										<section class="prog__container">\n<p>Constructs a <code>promise</code> object.</p>\n<pre><code>template&lt; class Alloc &gt;\npromise( std::allocator_arg_t, const Alloc& alloc );</code></pre><pre><code>promise( promise&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/promise/promise
std::promise::set_exception	A										<section class="prog__container">\n<p>Atomically stores the exception pointer <code>p</code> into the shared state and makes the state ready.</p>\n<pre><code>void set_exception( std::exception_ptr p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/promise/set_exception
std::promise::set_exception_at_thread_exit	A										<section class="prog__container">\n<p>Stores the exception pointer <code>p</code> into the shared state without making the state ready immediately.</p>\n<pre><code>void set_exception_at_thread_exit( std::exception_ptr p );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/promise/set_exception_at_thread_exit
std::promise::set_value	A										<section class="prog__container">\n<p>Atomically stores the <code>value</code> into the shared state and makes the state ready.</p>\n<pre><code>void set_value( const R& value );</code></pre><pre><code>void set_value( R&& value );</code></pre><pre><code>void set_value( R& value );</code></pre><pre><code>void set_value(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/promise/set_value
std::promise::set_value_at_thread_exit	A										<section class="prog__container">\n<p>Stores the <code>value</code> into the shared state without making the state ready immediately.</p>\n<pre><code>void set_value_at_thread_exit( const R& value );</code></pre><pre><code>void set_value_at_thread_exit( R&& value );</code></pre><pre><code>void set_value_at_thread_exit( R& value );</code></pre><pre><code>void set_value_at_thread_exit(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/promise/set_value_at_thread_exit
std::promise::swap	A										<section class="prog__container">\n<p>Exchanges the shared states of two promise objects.</p>\n<pre><code>void swap( promise& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/promise/swap
std::recursive_mutex	A										<section class="prog__container">\n<p>The <code>recursive_mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.</p>\n<pre><code>class recursive_mutex;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_mutex
std::recursive_mutex::lock	A										<section class="prog__container">\n<p>Locks the mutex.</p>\n<pre><code>void lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_mutex/lock
std::recursive_mutex::native_handle	A										<section class="prog__container">\n<p>Returns the underlying implementation-defined native handle object.</p>\n<pre><code>native_handle_type native_handle(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_mutex/native_handle
std::recursive_mutex::try_lock	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>bool try_lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_mutex/try_lock
std::recursive_mutex::unlock	A										<section class="prog__container">\n<p>Unlocks the mutex if its level of ownership is <code>1</code> (there was exactly one more call to lock(void) than there were calls to <code>unlock(void)</code> made by this thread), reduces the level of...</p>\n<pre><code>void unlock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_mutex/unlock
std::recursive_timed_mutex	A										<section class="prog__container">\n<p>The <code>recursive_timed_mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.</p>\n<pre><code>class recursive_timed_mutex;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_timed_mutex
std::recursive_timed_mutex::lock	A										<section class="prog__container">\n<p>Locks the mutex.</p>\n<pre><code>void lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_timed_mutex/lock
std::recursive_timed_mutex::native_handle	A										<section class="prog__container">\n<p>Returns the underlying implementation-defined native handle object.</p>\n<pre><code>native_handle_type native_handle(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_timed_mutex/native_handle
std::recursive_timed_mutex::try_lock	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>bool try_lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_timed_mutex/try_lock
std::recursive_timed_mutex::try_lock_for	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>template&lt; class Rep, class Period &gt;\nbool try_lock_for( const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_timed_mutex/try_lock_for
std::recursive_timed_mutex::try_lock_until	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nbool try_lock_until( const std::chrono::time_point&lt;Clock,Duration&gt;& timeout_time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_timed_mutex/try_lock_until
std::recursive_timed_mutex::unlock	A										<section class="prog__container">\n<p>Unlocks the mutex if its level of ownership is <code>1</code> (there was exactly one more call to lock(void) than there were calls to <code>unlock(void)</code> made by this thread), reduces the level of...</p>\n<pre><code>void unlock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/recursive_timed_mutex/unlock
std::shared_future	A										<section class="prog__container">\n<p>The class template <code>std::shared_future</code> provides a mechanism to access the result of asynchronous operations, similar to std::future, except that multiple threads are allowed to wait for...</p>\n<pre><code>template&lt; class T &gt; class shared_future;</code></pre><pre><code>template&lt; class T &gt; class shared_future&lt;T&&gt;;</code></pre><pre><code>template&lt;&gt;          class shared_future&lt;void&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_future
std::shared_future::get	A										<section class="prog__container">\n<p>The <code>get</code> method waits until the <code>shared_future</code> has a valid result and (depending on which template is used) retrieves it.</p>\n<pre><code>const T& get(void) const;</code></pre><pre><code>T& get(void) const;</code></pre><pre><code>void get(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_future/get
std::shared_future::operator=	A										<section class="prog__container">\n<p>Assigns the contents of another <code>shared_future</code>.</p>\n<pre><code>shared_future& operator=( const shared_future& other );</code></pre><pre><code>shared_future& operator=( shared_future&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_future/operator=
std::shared_future::shared_future	A										<section class="prog__container">\n<p>Constructs a new <code>shared_future</code>.</p>\n<pre><code>shared_future( const shared_future& other );</code></pre><pre><code>shared_future( shared_future&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_future/shared_future
std::shared_future::valid	A										<section class="prog__container">\n<p>Checks if the future refers to a shared state.</p>\n<pre><code>bool valid(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_future/valid
std::shared_future::wait	A										<section class="prog__container">\n<p>Blocks until the result becomes available.</p>\n<pre><code>void wait(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_future/wait
std::shared_future::wait_for	A										<section class="prog__container">\n<p>Waits for the result to become available.</p>\n<pre><code>template&lt; class Rep, class Period &gt;\nstd::future_status wait_for( const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_future/wait_for
std::shared_future::wait_until	A										<section class="prog__container">\n<p><code>wait_until</code> waits for a result to become available.</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nstd::future_status wait_until( const std::chrono::time_point&lt;Clock,Duration&gt;& timeout_time ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_future/wait_until
std::shared_lock	A										<section class="prog__container">\n<p>The class <code>shared_lock</code> is a general-purpose shared mutex ownership wrapper allowing deferred locking, timed locking and transfer of lock ownership.</p>\n<pre><code>template&lt; class Mutex &gt;\nclass shared_lock;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock
std::shared_lock::lock	A										<section class="prog__container">\n<p>Locks the associated mutex in shared mode.</p>\n<pre><code>void lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/lock
std::shared_lock::mutex	A										<section class="prog__container">\n<p>Returns a pointer to the associated mutex, or a null pointer if there is no associated mutex.</p>\n<pre><code>mutex_type* mutex(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/mutex
std::shared_lock::operator=	A										<section class="prog__container">\n<p>Move assignment operator.</p>\n<pre><code>shared_lock& operator=( shared_lock&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/operator=
std::shared_lock::operator bool	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> owns a locked mutex or not.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/operator_bool
std::shared_lock::owns_lock	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> owns a locked mutex or not.</p>\n<pre><code>bool owns_lock(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/owns_lock
std::shared_lock::release	A										<section class="prog__container">\n<p>Breaks the association of the associated mutex, if any, and <code>*this</code>.</p>\n<pre><code>mutex_type* release(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/release
std::shared_lock::shared_lock	A										<section class="prog__container">\n<p>Constructs a <code>shared_lock</code>, optionally locking the supplied mutex.</p>\n<pre><code>shared_lock( shared_lock&& other );</code></pre><pre><code>explicit shared_lock( mutex_type& m );</code></pre><pre><code>template&lt; class Rep, class Period &gt;\nshared_lock( mutex_type& m, \n             const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/shared_lock
std::shared_lock::swap	A										<section class="prog__container">\n<p>Exchanges the internal states of the lock objects.</p>\n<pre><code>template&lt; class Mutex &gt;\nvoid swap( shared_lock&lt;Mutex&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/swap
std::shared_lock::try_lock	A										<section class="prog__container">\n<p>Tries to lock the associated mutex in shared mode without blocking.</p>\n<pre><code>bool try_lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/try_lock
std::shared_lock::try_lock_for	A										<section class="prog__container">\n<p>Tries to lock the associated mutex in shared mode.</p>\n<pre><code>template&lt; class Rep, class Period &gt;\nbool try_lock_for( const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/try_lock_for
std::shared_lock::try_lock_until	A										<section class="prog__container">\n<p>Tries to lock the associated mutex in shared mode.</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nbool try_lock_until( const std::chrono::time_point&lt;Clock,Duration&gt;& timeout_time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/try_lock_until
std::shared_lock::unlock	A										<section class="prog__container">\n<p>Unlocks the associated mutex from shared mode.</p>\n<pre><code>void unlock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_lock/unlock
std::shared_mutex	A										<section class="prog__container">\n<p>The <code>shared_mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.</p>\n<pre><code>class shared_mutex;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_mutex
std::shared_mutex::lock	A										<section class="prog__container">\n<p>Locks the mutex.</p>\n<pre><code>void lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_mutex/lock
std::shared_mutex::lock_shared	A										<section class="prog__container">\n<p>Acquires shared ownership of the mutex.</p>\n<pre><code>void lock_shared(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_mutex/lock_shared
std::shared_mutex::native_handle	A										<section class="prog__container">\n<p>Returns the underlying implementation-defined native handle object.</p>\n<pre><code>native_handle_type native_handle(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_mutex/native_handle
std::shared_mutex::try_lock	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>bool try_lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_mutex/try_lock
std::shared_mutex::try_lock_shared	A										<section class="prog__container">\n<p>Tries to lock the mutex in shared mode.</p>\n<pre><code>bool try_lock_shared(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_mutex/try_lock_shared
std::shared_mutex::unlock	A										<section class="prog__container">\n<p>Unlocks the mutex.</p>\n<pre><code>void unlock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_mutex/unlock
std::shared_mutex::unlock_shared	A										<section class="prog__container">\n<p>Releases the mutex from shared ownership by the calling thread.</p>\n<pre><code>void unlock_shared(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_mutex/unlock_shared
std::shared_timed_mutex	A										<section class="prog__container">\n<p>The <code>shared_timed_mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.</p>\n<pre><code>class shared_timed_mutex;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex
std::shared_timed_mutex::lock	A										<section class="prog__container">\n<p>Locks the mutex.</p>\n<pre><code>void lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/lock
std::shared_timed_mutex::lock_shared	A										<section class="prog__container">\n<p>Acquires shared ownership of the mutex.</p>\n<pre><code>void lock_shared(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/lock_shared
std::shared_timed_mutex::try_lock	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>bool try_lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/try_lock
std::shared_timed_mutex::try_lock_for	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>template&lt; class Rep, class Period &gt;\nbool try_lock_for( const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/try_lock_for
std::shared_timed_mutex::try_lock_shared	A										<section class="prog__container">\n<p>Tries to lock the mutex in shared mode.</p>\n<pre><code>bool try_lock_shared(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/try_lock_shared
std::shared_timed_mutex::try_lock_shared_for	A										<section class="prog__container">\n<p>Tries to lock the mutex in shared mode.</p>\n<pre><code>template&lt; class Rep, class Period &gt;\nbool try_lock_shared_for( const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/try_lock_shared_for
std::shared_timed_mutex::try_lock_shared_until	A										<section class="prog__container">\n<p>Tries to lock the mutex in shared mode.</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nbool try_lock_shared_until( const std::chrono::time_point&lt;Clock,Duration&gt;& timeout_time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/try_lock_shared_until
std::shared_timed_mutex::try_lock_until	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nbool try_lock_until( const std::chrono::time_point&lt;Clock,Duration&gt;& timeout_time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/try_lock_until
std::shared_timed_mutex::unlock	A										<section class="prog__container">\n<p>Unlocks the mutex.</p>\n<pre><code>void unlock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/unlock
std::shared_timed_mutex::unlock_shared	A										<section class="prog__container">\n<p>Releases the mutex from shared ownership by the calling thread.</p>\n<pre><code>void unlock_shared(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/shared_timed_mutex/unlock_shared
std::this_thread::sleep_for	A										<section class="prog__container">\n<p>Blocks the execution of the current thread for <i>at least</i> the specified <code>sleep_duration</code>.</p>\n<pre><code>template&lt; class Rep, class Period &gt;\nvoid sleep_for( const std::chrono::duration&lt;Rep, Period&gt;& sleep_duration );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/sleep_for
std::this_thread::sleep_until	A										<section class="prog__container">\n<p>Blocks the execution of the current thread until specified <code>sleep_time</code> has been reached.</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nvoid sleep_until( const std::chrono::time_point&lt;Clock,Duration&gt;& sleep_time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/sleep_until
std::thread	A										<section class="prog__container">\n<p>The class <code>thread</code> represents a single thread of execution.</p>\n<pre><code>class thread;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread
std::thread::detach	A										<section class="prog__container">\n<p>Separates the thread of execution from the thread object, allowing execution to continue independently.</p>\n<pre><code>void detach(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/detach
std::thread::get_id	A										<section class="prog__container">\n<p>Returns a value of std::thread::id identifying the thread associated with <code>*this</code>.</p>\n<pre><code>std::thread::id get_id(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/get_id
std::thread::hardware_concurrency	A										<section class="prog__container">\n<p>Returns the number of concurrent threads supported by the implementation.</p>\n<pre><code>static unsigned hardware_concurrency(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/hardware_concurrency
std::thread::id	A										<section class="prog__container">\n<p>The class <code>thread::id</code> is a lightweight, trivially copyable class that serves as a unique identifier of std::thread objects.</p>\n<pre><code>class thread::id;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/id
std::thread::id::operator!=	A										<section class="prog__container">\n<p>Compares two thread identifiers.</p>\n<pre><code>bool operator!=( thread::id lhs, thread::id rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp
std::thread::id::operator<	A										<section class="prog__container">\n<p>Compares two thread identifiers.</p>\n<pre><code>bool operator&lt;( thread::id lhs, thread::id rhs );</code></pre><pre><code>bool operator&lt;=( thread::id lhs, thread::id rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp
std::thread::id::operator<=	A										<section class="prog__container">\n<p>Compares two thread identifiers.</p>\n<pre><code>bool operator&lt;=( thread::id lhs, thread::id rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp
std::thread::id::operator==	A										<section class="prog__container">\n<p>Compares two thread identifiers.</p>\n<pre><code>bool operator==( thread::id lhs, thread::id rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp
std::thread::id::operator>	A										<section class="prog__container">\n<p>Compares two thread identifiers.</p>\n<pre><code>bool operator&gt;( thread::id lhs, thread::id rhs );</code></pre><pre><code>bool operator&gt;=( thread::id lhs, thread::id rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp
std::thread::id::operator>=	A										<section class="prog__container">\n<p>Compares two thread identifiers.</p>\n<pre><code>bool operator&gt;=( thread::id lhs, thread::id rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/id/operator_cmp
std::thread::id::operator<<	A										<section class="prog__container">\n<p>Writes a textual representation of a thread identifier <code>id</code> to the output stream <code>ost</code>.</p>\n<pre><code>template&lt; class CharT, class Traits &gt;\nstd::basic_ostream&lt;CharT,Traits&gt;&\n    operator&lt;&lt;( std::basic_ostream&lt;CharT,Traits&gt;& ost, thread::id id );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/id/operator_ltlt
std::thread::join	A										<section class="prog__container">\n<p>Blocks the current thread until the thread identified by <code>*this</code> finishes its execution.</p>\n<pre><code>void join(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/join
std::thread::joinable	A										<section class="prog__container">\n<p>Checks if the thread object identifies an active thread of execution.</p>\n<pre><code>bool joinable(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/joinable
std::thread::native_handle	A										<section class="prog__container">\n<p>Returns the implementation defined underlying thread handle.</p>\n<pre><code>native_handle_type native_handle(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/native_handle
std::thread::operator=	A										<section class="prog__container">\n<p>If <code>*this</code> still has an associated running thread (i.e. <code>joinable(void) == true</code>), call <code>std::terminate(void)</code>.</p>\n<pre><code>thread& operator=( thread&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/operator=
std::thread::swap	A										<section class="prog__container">\n<p>Exchanges the underlying handles of two thread objects.</p>\n<pre><code>void swap( thread& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/swap
std::thread::thread	A										<section class="prog__container">\n<p>Constructs new thread object.</p>\n<pre><code>thread( thread&& other );</code></pre><pre><code>template&lt; class Function, class... Args &gt; \nexplicit thread( Function&& f, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/thread/thread
std::timed_mutex	A										<section class="prog__container">\n<p>The <code>timed_mutex</code> class is a synchronization primitive that can be used to protect shared data from being simultaneously accessed by multiple threads.</p>\n<pre><code>class timed_mutex;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/timed_mutex
std::timed_mutex::lock	A										<section class="prog__container">\n<p>Locks the mutex.</p>\n<pre><code>void lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/timed_mutex/lock
std::timed_mutex::native_handle	A										<section class="prog__container">\n<p>Returns the underlying implementation-defined native handle object.</p>\n<pre><code>native_handle_type native_handle(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/timed_mutex/native_handle
std::timed_mutex::try_lock	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>bool try_lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/timed_mutex/try_lock
std::timed_mutex::try_lock_for	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>template&lt; class Rep, class Period &gt;\nbool try_lock_for( const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/timed_mutex/try_lock_for
std::timed_mutex::try_lock_until	A										<section class="prog__container">\n<p>Tries to lock the mutex.</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nbool try_lock_until( const std::chrono::time_point&lt;Clock,Duration&gt;& timeout_time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/timed_mutex/try_lock_until
std::timed_mutex::unlock	A										<section class="prog__container">\n<p>Unlocks the mutex.</p>\n<pre><code>void unlock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/timed_mutex/unlock
std::try_lock	A										<section class="prog__container">\n<p>Tries to lock each of the given <code>Lockable</code> objects <code>lock1</code>, <code>lock2</code>, <code>...</code>, <code>lockn</code> by calling <code>try_lock</code> in order beginning with the...</p>\n<pre><code>template&lt; class Lockable1, class Lockable2, class... LockableN&gt;\nint try_lock( Lockable1& lock1, Lockable2& lock2, LockableN&... lockn);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/try_lock
std::unique_lock	A										<section class="prog__container">\n<p>The class <code>unique_lock</code> is a general-purpose mutex ownership wrapper allowing deferred locking, time-constrained attempts at locking, recursive locking, transfer of lock ownership, and use...</p>\n<pre><code>template&lt; class Mutex &gt;\nclass unique_lock;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock
std::unique_lock::lock	A										<section class="prog__container">\n<p>Locks the associated mutex.</p>\n<pre><code>void lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/lock
std::unique_lock::mutex	A										<section class="prog__container">\n<p>Returns a pointer to the associated mutex, or a null pointer if there is no associated mutex.</p>\n<pre><code>mutex_type* mutex(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/mutex
std::unique_lock::operator=	A										<section class="prog__container">\n<p>Move assignment operator.</p>\n<pre><code>unique_lock& operator=( unique_lock&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/operator=
std::unique_lock::operator bool	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> owns a locked mutex or not.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/operator_bool
std::unique_lock::owns_lock	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> owns a locked mutex or not.</p>\n<pre><code>bool owns_lock(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/owns_lock
std::unique_lock::release	A										<section class="prog__container">\n<p>Breaks the association of the associated mutex, if any, and <code>*this</code>.</p>\n<pre><code>mutex_type* release(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/release
std::unique_lock::swap	A										<section class="prog__container">\n<p>Exchanges the internal states of the lock objects.</p>\n<pre><code>void swap( unique_lock& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/swap
std::unique_lock::try_lock	A										<section class="prog__container">\n<p>Tries to lock the associated mutex without blocking.</p>\n<pre><code>bool try_lock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/try_lock
std::unique_lock::try_lock_for	A										<section class="prog__container">\n<p>Tries to lock the associated mutex.</p>\n<pre><code>template&lt; class Rep, class Period &gt;\nbool try_lock_for( const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/try_lock_for
std::unique_lock::try_lock_until	A										<section class="prog__container">\n<p>Tries to lock the associated mutex.</p>\n<pre><code>template&lt; class Clock, class Duration &gt;\nbool try_lock_until( const std::chrono::time_point&lt;Clock,Duration&gt;& timeout_time );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/try_lock_until
std::unique_lock::unique_lock	A										<section class="prog__container">\n<p>Constructs a <code>unique_lock</code>, optionally locking the supplied mutex.</p>\n<pre><code>unique_lock( unique_lock&& other );</code></pre><pre><code>explicit unique_lock( mutex_type& m );</code></pre><pre><code>template&lt; class Rep, class Period &gt;\nunique_lock( mutex_type& m, \n             const std::chrono::duration&lt;Rep,Period&gt;& timeout_duration );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/unique_lock
std::unique_lock::unlock	A										<section class="prog__container">\n<p>Unlocks the associated mutex and releases ownership.</p>\n<pre><code>void unlock(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/unique_lock/unlock
std::this_thread::yield	A										<section class="prog__container">\n<p>Provides a hint to the implementation to reschedule the execution of threads, allowing other threads to run.</p>\n<pre><code>void yield(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/thread/yield
std::add_const	A										<section class="prog__container">\n<p>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except it has a cv-qualifier added (unless <code>T</code> is a function, a reference, or already has this...</p>\n<pre><code>template&lt; class T &gt;\nstruct add_const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/add_cv
std::add_cv	A										<section class="prog__container">\n<p>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except it has a cv-qualifier added (unless <code>T</code> is a function, a reference, or already has this...</p>\n<pre><code>template&lt; class T &gt;\nstruct add_cv;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/add_cv
std::add_volatile	A										<section class="prog__container">\n<p>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except it has a cv-qualifier added (unless <code>T</code> is a function, a reference, or already has this...</p>\n<pre><code>template&lt; class T &gt;\nstruct add_volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/add_cv
std::add_pointer	A										<section class="prog__container">\n<p>If <code>T</code> is a reference type, then provides the member typedef <code>type</code> which is a pointer to the referred type.</p>\n<pre><code>template&lt; class T &gt;\nstruct add_pointer;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/add_pointer
std::add_lvalue_reference	A										<section class="prog__container">\n<p>Creates a lvalue or rvalue reference type of <code>T</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct add_lvalue_reference;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/add_reference
std::add_rvalue_reference	A										<section class="prog__container">\n<p>Creates a lvalue or rvalue reference type of <code>T</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct add_rvalue_reference;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/add_reference
std::aligned_storage	A										<section class="prog__container">\n<p>Provides the member typedef <code>type</code>, which is a <code>PODType</code> suitable for use as uninitialized storage for any object whose size is at most <code>Len</code> and whose alignment...</p>\n<pre><code>template&lt; std::size_t Len, std::size_t Align = /*default-alignment*/ &gt;\nstruct aligned_storage;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/aligned_storage
std::aligned_union	A										<section class="prog__container">\n<p>Provides the member typedef <code>type</code>, which is a POD type of a size and alignment suitable for use as uninitialized storage for an object of any of the types listed in <code>Types</code>.</p>\n<pre><code>template&lt; std::size_t Len, class... Types &gt;\nstruct aligned_union;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/aligned_union
std::alignment_of	A										<section class="prog__container">\n<p>Provides the member constant <code>value</code> equal to the alignment requirement of the type <code>T</code>, as if obtained by an <code>alignof</code> expression.</p>\n<pre><code>template&lt; class T &gt;\nstruct alignment_of;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/alignment_of
std::bad_cast	A										<section class="prog__container">\n<p>An exception of this type is thrown when a dynamic_cast to a reference type fails the run-time check (e.</p>\n<pre><code>class bad_cast : public std::exception;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/bad_cast
std::bad_typeid	A										<section class="prog__container">\n<p>An exception of this type is thrown when a typeid operator is applied to a dereferenced null pointer value of a polymorphic type.</p>\n<pre><code>class bad_typeid : public std::exception;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/bad_typeid
std::common_type	A										<section class="prog__container">\n<p>Determines the common type among all types <code>T...</code>, that is the type all <code>T...</code> can be implicitly converted to.</p>\n<pre><code>template&lt; class... T &gt;\nstruct common_type;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/common_type
std::conditional	A										<section class="prog__container">\n<p>Provides member typedef <code>type</code>, which is defined as <code>T</code> if <code>B</code> is <code>true</code> at compile time, or as <code>F</code> if <code>B</code> is <code>false</code>.</p>\n<pre><code>template&lt; bool B, class T, class F &gt;\nstruct conditional;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/conditional
std::conjunction	A										<section class="prog__container">\n<p>Forms the logical conjunction of the type traits <code>B...</code>, effectively performing a logical AND on the sequence of traits.</p>\n<pre><code>template&lt;class... B&gt;\nstruct conjunction;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/conjunction
std::decay	A										<section class="prog__container">\n<p>Applies lvalue-to-rvalue, array-to-pointer, and function-to-pointer implicit conversions to the type <code>T</code>, removes cv-qualifiers, and defines the resulting type as the member typedef...</p>\n<pre><code>template&lt; class T &gt;\nstruct decay;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/decay
std::disjunction	A										<section class="prog__container">\n<p>Forms the logical disjunction of the type traits <code>B...</code>, effectively performing a logical or on the sequence of traits.</p>\n<pre><code>template&lt;class... B&gt;\nstruct disjunction;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/disjunction
std::enable_if	A										<section class="prog__container">\n<p>If <code>B</code> is <code>true</code>, std::enable_if has a public member typedef <code>type</code>, equal to <code>T</code>; otherwise, there is no member typedef.</p>\n<pre><code>template&lt; bool B, class T = void &gt;\nstruct enable_if;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/enable_if
std::extent	A										<section class="prog__container">\n<p>If <code>T</code> is an array type, provides the member constant <code>value</code> equal to the number of elements along the <code>N</code>th dimension of the array, if <code>N</code> is in...</p>\n<pre><code>template&lt; class T, unsigned N = 0&gt;\nstruct extent;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/extent
std::has_unique_object_representations	A										<section class="prog__container">\n<p>If <code>T</code> is <code>TriviallyCopyable</code> and if any two objects of type <code>T</code> with the same value have the same object representation, provides the member constant...</p>\n<pre><code>template&lt; class T &gt;\nstruct has_unique_object_representations;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/has_unique_object_representations
std::has_virtual_destructor	A										<section class="prog__container">\n<p>If <code>T</code> is a type with a virtual destructor, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct has_virtual_destructor;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/has_virtual_destructor
std::integral_constant	A										<section class="prog__container">\n<p>std::integral_constant wraps a static constant of specified type.</p>\n<pre><code>template&lt; class T, T v &gt;\nstruct integral_constant;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/integral_constant
std::is_abstract	A										<section class="prog__container">\n<p>If <code>T</code> is an abstract class (that is, a non-union class that declares or inherits at least one pure virtual function), provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_abstract;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_abstract
std::is_arithmetic	A										<section class="prog__container">\n<p>If <code>T</code> is an arithmetic type (that is, an integral type or a floating-point type), provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_arithmetic;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_arithmetic
std::is_array	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is an array type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_array;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_array
std::is_assignable	A										<section class="prog__container">\n<p> If the expression <code>std::declval&lt;T&gt;(void) = std::declval&lt;U&gt;(void)</code> is well-formed in unevaluated context, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T, class U &gt;\nstruct is_assignable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_assignable
std::is_nothrow_assignable	A										<section class="prog__container">\n<p> same as (1), but the evaluation of the assignment expression will not call any operation that is not noexcept.</p>\n<pre><code>template&lt; class T, class U &gt;\nstruct is_nothrow_assignable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_assignable
std::is_trivially_assignable	A										<section class="prog__container">\n<p> same as (1), but the evaluation of the assignment expression will not call any operation that is not trivial.</p>\n<pre><code>template&lt; class T, class U &gt;\nstruct is_trivially_assignable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_assignable
std::is_base_of	A										<section class="prog__container">\n<p>If <code>Derived</code> is derived from <code>Base</code> or if both are the same non-union class, provides the member constant <code>value</code> equal to <code>true</code>.</p>\n<pre><code>template&lt; class Base, class Derived &gt;\nstruct is_base_of;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_base_of
std::is_callable	A										<section class="prog__container">\n<p> Determines whether <code>Fn</code> is callable with the arguments <code>ArgTypes...</code> and the result would be convertible to <code>R</code>.</p>\n<pre><code>template &lt;class, class R = void&gt; struct is_callable; // not defined\ntemplate &lt;class Fn, class... ArgTypes, class R&gt;\nstruct is_callable&lt;Fn(ArgTypes...), R&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_callable
std::is_nothrow_callable	A										<section class="prog__container">\n<p> Determines whether <code>Fn</code> is callable with the arguments <code>ArgTypes...</code> and the result would be convertible to <code>R</code> (same as (1)), and that such call is known not to...</p>\n<pre><code>template &lt;class, class R = void&gt; struct is_nothrow_callable; // not defined\ntemplate &lt;class Fn, class... ArgTypes, class R&gt;\nstruct is_nothrow_callable&lt;Fn(ArgTypes...), R&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_callable
std::is_class	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a class type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_class;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_class
std::is_compound	A										<section class="prog__container">\n<p>If <code>T</code> is a compound type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_compound;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_compound
std::is_const	A										<section class="prog__container">\n<p>If <code>T</code> is a const-qualified type (that is, <code>const</code>, or <code>const volatile</code>), provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_const
std::is_constructible	A										<section class="prog__container">\n<p>1) If <code>T</code> is an object or reference type and the variable definition <code>T obj(std::declval&lt;Args&gt;(void)...);</code> is well-formed, provides the member constant <code>value</code>...</p>\n<pre><code>template&lt; class T, class... Args &gt;\nstruct is_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_constructible
std::is_nothrow_constructible	A										<section class="prog__container">\n<p>1) If <code>T</code> is an object or reference type and the variable definition <code>T obj(std::declval&lt;Args&gt;(void)...);</code> is well-formed, provides the member constant <code>value</code>...</p>\n<pre><code>template&lt; class T, class... Args &gt;\nstruct is_nothrow_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_constructible
std::is_trivially_constructible	A										<section class="prog__container">\n<p>1) If <code>T</code> is an object or reference type and the variable definition <code>T obj(std::declval&lt;Args&gt;(void)...);</code> is well-formed, provides the member constant <code>value</code>...</p>\n<pre><code>template&lt; class T, class... Args &gt;\nstruct is_trivially_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_constructible
std::is_convertible	A										<section class="prog__container">\n<p>If the imaginary function definition <code>To test(void) { return std::declval&lt;From&gt;(void); }</code> is well-formed, (...</p>\n<pre><code>template&lt; class From, class To &gt;\nstruct is_convertible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_convertible
std::is_copy_assignable	A										<section class="prog__container">\n<p> If <code>T</code> is not a referenceable type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_copy_assignable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_copy_assignable
std::is_trivially_copy_assignable	A										<section class="prog__container">\n<p> Same as 1), but uses <code>std::is_trivially_assignable&lt;T&amp;, const T&amp;&gt;</code>...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_trivially_copy_assignable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_copy_assignable
std::is_copy_constructible	A										<section class="prog__container">\n<p>1) If <code>T</code> is not a referenceable type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_copy_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_copy_constructible
std::is_nothrow_copy_constructible	A										<section class="prog__container">\n<p>1) If <code>T</code> is not a referenceable type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_nothrow_copy_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_copy_constructible
std::is_trivially_copy_constructible	A										<section class="prog__container">\n<p>1) If <code>T</code> is not a referenceable type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_trivially_copy_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_copy_constructible
std::is_default_constructible	A										<section class="prog__container">\n<p>1) If <code>std::is_constructible&lt;T&gt;::value</code> is <code>true</code>, provides the member constant <code>value</code> equal to <code>true</code>, otherwise <code>value</code> is...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_default_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_default_constructible
std::is_nothrow_default_constructible	A										<section class="prog__container">\n<p>1) If <code>std::is_constructible&lt;T&gt;::value</code> is <code>true</code>, provides the member constant <code>value</code> equal to <code>true</code>, otherwise <code>value</code> is...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_nothrow_default_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_default_constructible
std::is_trivially_default_constructible	A										<section class="prog__container">\n<p>1) If <code>std::is_constructible&lt;T&gt;::value</code> is <code>true</code>, provides the member constant <code>value</code> equal to <code>true</code>, otherwise <code>value</code> is...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_trivially_default_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_default_constructible
std::is_empty	A										<section class="prog__container">\n<p>If <code>T</code> is an empty type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_empty;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_empty
std::is_enum	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is an enumeration type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_enum;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_enum
std::is_final	A										<section class="prog__container">\n<p>If <code>T</code> is a final class (that is, a class declared with the final specifier), provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_final;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_final
std::is_floating_point	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a floating-point type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_floating_point;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_floating_point
std::is_function	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a function type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_function;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_function
std::is_fundamental	A										<section class="prog__container">\n<p>If <code>T</code> is a fundamental type (that is, arithmetic type, <code>void</code>, or <code>nullptr_t</code>), provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_fundamental;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_fundamental
std::is_integral	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is an integral type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_integral;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_integral
std::is_literal_type	A										<section class="prog__container">\n<p>If <code>T</code> satisfies all requirements of <code>LiteralType</code>, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_literal_type;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_literal_type
std::is_lvalue_reference	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a lvalue reference type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_lvalue_reference;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_lvalue_reference
std::is_member_function_pointer	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a non-static member function pointer.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_member_function_pointer;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_member_function_pointer
std::is_member_object_pointer	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a non-static member object.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_member_object_pointer;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_member_object_pointer
std::is_member_pointer	A										<section class="prog__container">\n<p>If <code>T</code> is pointer to non-static member object or a pointer to non-static member function, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_member_pointer;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_member_pointer
std::is_move_assignable	A										<section class="prog__container">\n<p> If <code>T</code> is not a referenceable type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_move_assignable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_move_assignable
std::is_nothrow_move_assignable	A										<section class="prog__container">\n<p> Same as 1), but uses <code>std::is_nothrow_assignable&lt;T&amp;, T&amp;&amp;&gt;</code>...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_nothrow_move_assignable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_move_assignable
std::is_trivially_move_assignable	A										<section class="prog__container">\n<p> Same as 1), but uses <code>std::is_trivially_assignable&lt;T&amp;, T&amp;&amp;&gt;</code>...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_trivially_move_assignable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_move_assignable
std::is_move_constructible	A										<section class="prog__container">\n<p>1) If <code>T</code> is not a referenceable type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_move_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_move_constructible
std::is_nothrow_move_constructible	A										<section class="prog__container">\n<p>1) If <code>T</code> is not a referenceable type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_nothrow_move_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_move_constructible
std::is_trivially_move_constructible	A										<section class="prog__container">\n<p>1) If <code>T</code> is not a referenceable type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_trivially_move_constructible;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_move_constructible
std::is_null_pointer	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is the type std::nullptr_t.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_null_pointer;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_null_pointer
std::is_object	A										<section class="prog__container">\n<p>If <code>T</code> is an object type (that is any possibly cv-qualified type other than function, reference, or <code>void</code> types), provides the member constant <code>value</code> equal...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_object;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_object
std::is_pod	A										<section class="prog__container">\n<p>If <code>T</code> is a <code>PODType</code> ("plain old data type"), that is, both trivial and standard-layout, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_pod;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_pod
std::is_pointer	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a pointer to object or a pointer to function (but not a pointer to member/member function).</p>\n<pre><code>template&lt; class T &gt;\nstruct is_pointer;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_pointer
std::is_polymorphic	A										<section class="prog__container">\n<p>If <code>T</code> is a polymorphic class (that is, a non-union class that declares or inherits at least one virtual function), provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_polymorphic;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_polymorphic
std::is_reference	A										<section class="prog__container">\n<p>If <code>T</code> is a reference type (lvalue reference or rvalue reference), provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_reference;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_reference
std::is_rvalue_reference	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a rvalue reference type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_rvalue_reference;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_rvalue_reference
std::is_same	A										<section class="prog__container">\n<p>If <code>T</code> and <code>U</code> name the same type with the same const-volatile qualifications, provides the member constant <code>value</code> equal to <code>true</code>.</p>\n<pre><code>template&lt; class T, class U &gt;\nstruct is_same;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_same
std::is_scalar	A										<section class="prog__container">\n<p>If <code>T</code> is a scalar type (that is a possibly cv-qualified arithmetic, pointer, pointer to  member, enumeration, or <code>std::nullptr_t</code> type), provides the member constant...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_scalar;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_scalar
std::is_signed	A										<section class="prog__container">\n<p>If <code>T</code> is an arithmetic type, provides the member constant <code>value</code> equal <code>true</code> if <code>T(-1) &lt; T(0)</code>: this results in <code>true</code> for the...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_signed;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_signed
std::is_standard_layout	A										<section class="prog__container">\n<p>If <code>T</code> is a standard layout type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_standard_layout;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_standard_layout
std::is_nothrow_swappable	A										<section class="prog__container">\n<p> Same as (2), but uses <code>is_nothrow_swappable_with</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_nothrow_swappable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_swappable
std::is_swappable	A										<section class="prog__container">\n<p> If <code>T</code> is not a referenceable type (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_swappable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_swappable
std::is_trivial	A										<section class="prog__container">\n<p>If <code>T</code> is <code>TrivialType</code> (...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_trivial;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_trivial
std::is_trivially_copyable	A										<section class="prog__container">\n<p>If <code>T</code> is a <code>TriviallyCopyable</code> type, provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_trivially_copyable;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_trivially_copyable
std::is_union	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a union type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_union;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_union
std::is_unsigned	A										<section class="prog__container">\n<p>If <code>T</code> is an arithmetic type, provides the member constant <code>value</code> equal <code>true</code> if <code>T(0) &lt; T(-1)</code>: this results in <code>true</code> for the unsigned...</p>\n<pre><code>template&lt; class T &gt;\nstruct is_unsigned;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_unsigned
std::is_void	A										<section class="prog__container">\n<p>Checks whether <code>T</code> is a void type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_void;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_void
std::is_volatile	A										<section class="prog__container">\n<p>If <code>T</code> is a volatile-qualified type (that is, <code>volatile</code>, or <code>const volatile</code>), provides the member constant <code>value</code> equal <code>true</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/is_volatile
std::make_signed	A										<section class="prog__container">\n<p>If <code>T</code> is an integral (except bool) or enumeration type, provides the member typedef <code>type</code> which is the signed integer type corresponding to <code>T</code>, with the same...</p>\n<pre><code>template&lt; class T &gt;\nstruct make_signed;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/make_signed
std::make_unsigned	A										<section class="prog__container">\n<p>If <code>T</code> is an integral (except bool) or enumeration type, provides the member typedef <code>type</code> which is the unsigned integer type corresponding to <code>T</code>, with the same...</p>\n<pre><code>template&lt; class T &gt;\nstruct make_unsigned;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/make_unsigned
std::negation	A										<section class="prog__container">\n<p>Forms the logical negation of the type trait <code>B</code>.</p>\n<pre><code>template&lt;class B&gt;\nstruct negation;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/negation
std::numeric_limits	A										<section class="prog__container">\n<p>The <code>numeric_limits</code> class template provides a standardized way to query various properties of arithmetic types (e.</p>\n<pre><code>template&lt; class T &gt; class numeric_limits;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits
std::numeric_limits::denorm_min	A										<section class="prog__container">\n<p>Returns the minimum positive subnormal value of the type <code>T</code>, if <code>std::numeric_limits&lt;T&gt;::has_denorm != std::denorm_absent</code>, otherwise returns...</p>\n<pre><code>static constexpr T denorm_min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits/denorm_min
std::numeric_limits::epsilon	A										<section class="prog__container">\n<p>Returns the machine epsilon, that is, the difference between <code>1.0</code> and the next value representable by the floating-point type <code>T</code>.</p>\n<pre><code>static constexpr T epsilon(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits/epsilon
std::numeric_limits::infinity	A										<section class="prog__container">\n<p>Returns the special value "positive infinity", as represented by the floating-point type <code>T</code>.</p>\n<pre><code>static constexpr T infinity(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits/infinity
std::numeric_limits::lowest	A										<section class="prog__container">\n<p>Returns the lowest finite value representable by the numeric type <code>T</code>, that is, a finite value <code>x</code> such that there is no other finite value <code>y</code> where <code>y &lt; x</code>.</p>\n<pre><code>static constexpr T lowest(void)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits/lowest
std::numeric_limits::max	A										<section class="prog__container">\n<p>Returns the maximum finite value representable by the numeric type <code>T</code>.</p>\n<pre><code>static constexpr T max(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits/max
std::numeric_limits::min	A										<section class="prog__container">\n<p>Returns the minimum finite value representable by the numeric type <code>T</code>.</p>\n<pre><code>static constexpr T min(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits/min
std::numeric_limits::quiet_NaN	A										<section class="prog__container">\n<p>Returns the special value "quiet not-a-number", as represented by the floating-point type <code>T</code>.</p>\n<pre><code>static constexpr T quiet_NaN(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits/quiet_NaN
std::numeric_limits::round_error	A										<section class="prog__container">\n<p>Returns the largest possible rounding error in ULPs (units in the last place) as defined by ISO 10967, which can vary from 0.</p>\n<pre><code>static constexpr T round_error(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits/round_error
std::numeric_limits::signaling_NaN	A										<section class="prog__container">\n<p>Returns the special value "signaling not-a-number", as represented by the floating-point type <code>T</code>.</p>\n<pre><code>static constexpr T signaling_NaN(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/numeric_limits/signaling_NaN
offsetof	A										<section class="prog__container">\n<p>The macro offsetof expands to an integral constant expression of type std::size_t, the value of which is the offset, in bytes, from the beginning of an object of specified type to its specified...</p>\n<pre><code>#define offsetof(type, member) /*implementation-defined*/</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/offsetof
std::rank	A										<section class="prog__container">\n<p>If <code>T</code> is an array type, provides the member constant <code>value</code> equal to the number of dimensions of the array.</p>\n<pre><code>template&lt; class T &gt;\nstruct rank;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/rank
std::remove_all_extents	A										<section class="prog__container">\n<p>If <code>T</code> is a multidimensional array of some type <code>X</code>, provides the member typedef <code>type</code> equal to <code>X</code>, otherwise <code>type</code> is <code>T</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct remove_all_extents;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/remove_all_extents
std::remove_const	A										<section class="prog__container">\n<p>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except that its topmost cv-qualifiers are removed.</p>\n<pre><code>template&lt; class T &gt;\nstruct remove_const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/remove_cv
std::remove_cv	A										<section class="prog__container">\n<p>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except that its topmost cv-qualifiers are removed.</p>\n<pre><code>template&lt; class T &gt;\nstruct remove_cv;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/remove_cv
std::remove_volatile	A										<section class="prog__container">\n<p>Provides the member typedef <code>type</code> which is the same as <code>T</code>, except that its topmost cv-qualifiers are removed.</p>\n<pre><code>template&lt; class T &gt;\nstruct remove_volatile;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/remove_cv
std::remove_extent	A										<section class="prog__container">\n<p>If <code>T</code> is an array of some type <code>X</code>, provides the member typedef <code>type</code> equal to <code>X</code>, otherwise <code>type</code> is <code>T</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct remove_extent;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/remove_extent
std::remove_pointer	A										<section class="prog__container">\n<p>Provides the member typedef <code>type</code> which is the type pointed to by <code>T</code>, or, if <code>T</code> is not a pointer, then <code>type</code> is the same as <code>T</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct remove_pointer;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/remove_pointer
std::remove_reference	A										<section class="prog__container">\n<p>If the type <code>T</code> is a reference type, provides the member typedef <code>type</code> which is the type referred to by <code>T</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct remove_reference;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/remove_reference
std::result_of	A										<section class="prog__container">\n<p>Deduces the return type of a function call expression at compile time.</p>\n<pre><code>template&lt; class &gt;\nclass result_of; // not defined\ntemplate&lt; class F, class... ArgTypes &gt;\nclass result_of&lt;F(ArgTypes...)&gt;;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/result_of
std::type_index	A										<section class="prog__container">\n<p>The <code>type_index</code> class is a wrapper class around a std::type_info object, that can be used as index in associative and unordered associative containers.</p>\n<pre><code>class type_index;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_index
std::type_index::hash_code	A										<section class="prog__container">\n<p>Returns the hash code of the associated std::type_info object.</p>\n<pre><code>size_t hash_code(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_index/hash_code
std::type_index::name	A										<section class="prog__container">\n<p>Returns the name of the associated std::type_info object.</p>\n<pre><code>const char* name(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_index/name
std::type_index::operator!=	A										<section class="prog__container">\n<p>Compares the underlying std::type_info objects.</p>\n<pre><code>bool operator!=( const type_index& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_index/operator_cmp
std::type_index::operator<	A										<section class="prog__container">\n<p>Compares the underlying std::type_info objects.</p>\n<pre><code>bool operator&lt;( const type_index& rhs ) const;</code></pre><pre><code>bool operator&lt;=( const type_index& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_index/operator_cmp
std::type_index::operator<=	A										<section class="prog__container">\n<p>Compares the underlying std::type_info objects.</p>\n<pre><code>bool operator&lt;=( const type_index& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_index/operator_cmp
std::type_index::operator==	A										<section class="prog__container">\n<p>Compares the underlying std::type_info objects.</p>\n<pre><code>bool operator==( const type_index& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_index/operator_cmp
std::type_index::operator>	A										<section class="prog__container">\n<p>Compares the underlying std::type_info objects.</p>\n<pre><code>bool operator&gt;( const type_index& rhs ) const;</code></pre><pre><code>bool operator&gt;=( const type_index& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_index/operator_cmp
std::type_index::operator>=	A										<section class="prog__container">\n<p>Compares the underlying std::type_info objects.</p>\n<pre><code>bool operator&gt;=( const type_index& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_index/operator_cmp
std::type_info	A										<section class="prog__container">\n<p>The class <code>type_info</code> holds implementation-specific information about a type, including the name of the type and means to compare two types for equality or collating order.</p>\n<pre><code>class type_info;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_info
std::type_info::before	A										<section class="prog__container">\n<p>Returns <code>true</code> if the type of this <code>type_info</code> precedes the type of <code>rhs</code> in the implementation's collation order.</p>\n<pre><code>bool before( const type_info& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_info/before
std::type_info::hash_code	A										<section class="prog__container">\n<p>Returns an unspecified value, which is identical for the <code>type_info</code> objects referring to the same type.</p>\n<pre><code>size_t hash_code(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_info/hash_code
std::type_info::name	A										<section class="prog__container">\n<p>Returns an implementation defined null-terminated character string containing the name of the type.</p>\n<pre><code>const char* name(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_info/name
std::type_info::operator!=	A										<section class="prog__container">\n<p>Checks if the objects refer to the same types.</p>\n<pre><code>bool operator!=( const type_info& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_info/operator_cmp
std::type_info::operator==	A										<section class="prog__container">\n<p>Checks if the objects refer to the same types.</p>\n<pre><code>bool operator==( const type_info& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/type_info/operator_cmp
std::underlying_type	A										<section class="prog__container">\n<p>If <code>T</code> is a complete enumeration type, provides a member typedef <code>type</code> that names the underlying type of <code>T</code>.</p>\n<pre><code>template&lt; class T &gt;\nstruct underlying_type;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/types/underlying_type
std::any	A										<section class="prog__container">\n<p>The class <code>any</code> describes a type-safe container for single values of any type.</p>\n<pre><code>class any;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/any
std::any::any	A										<section class="prog__container">\n<p>Constructs a new <code>any</code> object.</p>\n<pre><code>constexpr any(void);</code></pre><pre><code>any( const any& other );</code></pre><pre><code>any( any&& other );</code></pre><pre><code>template&lt; class ValueType &gt;\nany( ValueType&& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/any/any
std::any_cast	A										<section class="prog__container">\n<p>Performs type-safe access to the contained object.</p>\n<pre><code>template&lt;class ValueType&gt;\n    ValueType any_cast(const any& operand);</code></pre><pre><code>template&lt;class ValueType&gt;\n    ValueType any_cast(any& operand);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/any/any_cast
std::bad_any_cast	A										<section class="prog__container">\n<p>Defines a type of object to be thrown by the value-returning forms of std::any_cast on failure.</p>\n<pre><code>class bad_any_cast : public std::bad_cast;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/any/bad_any_cast
std::any::emplace	A										<section class="prog__container">\n<p>Changes the contained object to one of type <code>std::decay_t&lt;ValueType&gt;</code> constructed from the arguments.</p>\n<pre><code>template&lt; class ValueType, class... Args &gt;\nvoid emplace( Args&&... args );</code></pre><pre><code>template&lt; class ValueType, class U, class... Args &gt;\nvoid emplace( std::initializer_list&lt;U&gt; il, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/any/emplace
std::any::has_value	A										<section class="prog__container">\n<p>Checks whether the object contains a value.</p>\n<pre><code>bool has_value(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/any/has_value
std::make_any	A										<section class="prog__container">\n<p>Constructs an <code>any</code> object containing an object of type <code>T</code>, passing the provided arguments to <code>T</code>'s constructor.</p>\n<pre><code>template&lt; class T, class... Args &gt;\nstd::any make_any( Args&&... args );</code></pre><pre><code>template&lt; class T, class U, class... Args &gt;\nstd::any make_any( std::initializer_list&lt;U&gt; il, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/any/make_any
std::any::operator=	A										<section class="prog__container">\n<p>Assigns contents to the contained value.</p>\n<pre><code>any& operator=( const any& rhs );</code></pre><pre><code>any& operator=( any&& rhs );</code></pre><pre><code>template&lt;typename ValueType&gt;\n    any& operator=( ValueType&& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/any/operator=
std::any::reset	A										<section class="prog__container">\n<p>If not empty, destroys the contained object.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/any/reset
std::any::swap	A										<section class="prog__container">\n<p>Swaps the content of two <code>any</code> objects.</p>\n<pre><code>void swap(any& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/any/swap
std::any::type	A										<section class="prog__container">\n<p>Queries the contained type.</p>\n<pre><code>const type_info& type(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/any/type
std::apply	A										<section class="prog__container">\n<p>Invoke the <code>Callable</code> object <code>f</code> with a tuple of arguments.</p>\n<pre><code>template &lt;class F, class Tuple&gt;\nconstexpr decltype(auto) apply(F&& f, Tuple&& t);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/apply
std::as_const	A										<section class="prog__container">\n<p> Forms lvalue reference to const type of <code>t</code>...</p>\n<pre><code>template &lt;class T&gt;\nconstexpr std::add_const_t&lt;T&gt;& as_const(T& t) noexcept;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/as_const
std::bitset	A										<section class="prog__container">\n<p>The class template <code>bitset</code> represents a fixed-size sequence of <code>N</code> bits.</p>\n<pre><code>template&lt; std::size_t N &gt;\nclass bitset;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset
std::bitset::all	A										<section class="prog__container">\n<p>Checks if all, any or none of the bits are set to <code>true</code>.</p>\n<pre><code>bool all(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/all_any_none
std::bitset::any	A										<section class="prog__container">\n<p>Checks if all, any or none of the bits are set to <code>true</code>.</p>\n<pre><code>bool any(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/all_any_none
std::bitset::none	A										<section class="prog__container">\n<p>Checks if all, any or none of the bits are set to <code>true</code>.</p>\n<pre><code>bool none(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/all_any_none
std::bitset::bitset	A										<section class="prog__container">\n<p>Constructs a new bitset from one of several optional data sources...</p>\n<pre><code>constexpr bitset(void);</code></pre><pre><code>constexpr bitset( unsigned long long val );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/bitset
std::bitset::count	A										<section class="prog__container">\n<p>Returns the number of bits that are set to <code>true</code>.</p>\n<pre><code>std::size_t count(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/count
std::bitset::flip	A										<section class="prog__container">\n<p>Flips bits, i.e. changes <code>true</code> values to <code>false</code> and <code>false</code> values to <code>true</code>.</p>\n<pre><code>bitset&lt;N&gt;& flip(void);</code></pre><pre><code>bitset&lt;N&gt;& flip( size_t pos );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/flip
std::bitset::operator[]	A										<section class="prog__container">\n<p>Accesses the bit at position <code>pos</code>.</p>\n<pre><code>constexpr bool operator[]( std::size_t pos ) const;</code></pre><pre><code>reference operator[]( std::size_t pos );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_at
std::bitset::operator!=	A										<section class="prog__container">\n<p>1) Returns true if all of the bits in <code>*this</code> and <code>rhs</code> are equal.</p>\n<pre><code>bool operator!=( const bitset&lt;N&gt;& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_cmp
std::bitset::operator==	A										<section class="prog__container">\n<p>1) Returns true if all of the bits in <code>*this</code> and <code>rhs</code> are equal.</p>\n<pre><code>bool operator==( const bitset&lt;N&gt;& rhs ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_cmp
std::bitset::operator&=	A										<section class="prog__container">\n<p>Performs binary AND, OR, XOR and NOT.</p>\n<pre><code>bitset&lt;N&gt;& operator&=( const bitset&lt;N&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_logic
std::bitset::operator^=	A										<section class="prog__container">\n<p>Performs binary AND, OR, XOR and NOT.</p>\n<pre><code>bitset&lt;N&gt;& operator^=( const bitset&lt;N&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_logic
std::bitset::operator|=	A										<section class="prog__container">\n<p>Performs binary AND, OR, XOR and NOT.</p>\n<pre><code>bitset&lt;N&gt;& operator|=( const bitset&lt;N&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_logic
std::bitset::operator~	A										<section class="prog__container">\n<p>Performs binary AND, OR, XOR and NOT.</p>\n<pre><code>bitset&lt;N&gt; operator~(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_logic
std::bitset::operator<<	A										<section class="prog__container">\n<p>Performs binary shift left and binary shift right.</p>\n<pre><code>bitset&lt;N&gt; operator&lt;&lt;( std::size_t pos ) const;</code></pre><pre><code>bitset&lt;N&gt;& operator&lt;&lt;=( std::size_t pos );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_ltltgtgt
std::bitset::operator<<=	A										<section class="prog__container">\n<p>Performs binary shift left and binary shift right.</p>\n<pre><code>bitset&lt;N&gt;& operator&lt;&lt;=( std::size_t pos );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_ltltgtgt
std::bitset::operator>>	A										<section class="prog__container">\n<p>Performs binary shift left and binary shift right.</p>\n<pre><code>bitset&lt;N&gt; operator&gt;&gt;( std::size_t pos ) const;</code></pre><pre><code>bitset&lt;N&gt;& operator&gt;&gt;=( std::size_t pos );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_ltltgtgt
std::bitset::operator>>=	A										<section class="prog__container">\n<p>Performs binary shift left and binary shift right.</p>\n<pre><code>bitset&lt;N&gt;& operator&gt;&gt;=( std::size_t pos );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/operator_ltltgtgt
std::bitset::reference	A										<section class="prog__container">\n<p>The std::bitset class includes std::bitset::reference as a publicly-accessible nested class.</p>\n<pre><code>class reference;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/reference
std::bitset::reset	A										<section class="prog__container">\n<p>Sets bits to <code>false</code>.</p>\n<pre><code>bitset&lt;N&gt;& reset(void);</code></pre><pre><code>bitset&lt;N&gt;& reset( size_t pos );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/reset
std::bitset::set	A										<section class="prog__container">\n<p>Sets all bits to <code>true</code> or to specified value.</p>\n<pre><code>bitset&lt;N&gt;& set(void);</code></pre><pre><code>bitset&lt;N&gt;& set( size_t pos, bool value = true );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/set
std::bitset::size	A										<section class="prog__container">\n<p>Returns the number of bits that the bitset can hold.</p>\n<pre><code>constexpr std::size_t size(void);</code></pre><pre><code>constexpr std::size_t size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/size
std::bitset::test	A										<section class="prog__container">\n<p>Returns the value of the bit at the position <code>pos</code>.</p>\n<pre><code>bool test( size_t pos ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/test
std::bitset::to_string	A										<section class="prog__container">\n<p>Converts the contents of the bitset to a string.</p>\n<pre><code>template&lt;\n    class CharT = char,\n    class Traits = std::char_traits&lt;CharT&gt;,\n    class Allocator = std::allocator&lt;CharT&gt; \n&gt; std::basic_string&lt;CharT,Traits,Allocator&gt;\n    to_string(CharT zero = CharT('0'), CharT one = CharT('1')) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/to_string
std::bitset::to_ullong	A										<section class="prog__container">\n<p>Converts the contents of the bitset to an <code>unsigned long long</code> integer.</p>\n<pre><code>unsigned long long to_ullong(void) const</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/to_ullong
std::bitset::to_ulong	A										<section class="prog__container">\n<p>Converts the contents of the bitset to an <code>unsigned long</code> integer.</p>\n<pre><code>unsigned long to_ulong(void) const</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/bitset/to_ulong
std::declval	A										<section class="prog__container">\n<p>Converts any type <code>T</code> to a reference type, making it possible to use member functions in <code>decltype</code> expressions without the need to go through constructors.</p>\n<pre><code>template&lt;class T&gt;\ntypename std::add_rvalue_reference&lt;T&gt;::type declval(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/declval
std::exchange	A										<section class="prog__container">\n<p>Replaces the value of <code>obj</code> with <code>new_value</code> and returns the old value of <code>obj</code>.</p>\n<pre><code>template&lt; class T, class U = T &gt;\nT exchange( T& obj, U&& new_value );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/exchange
std::bad_function_call	A										<section class="prog__container">\n<p><code>std::bad_function_call</code> is the type of the exception thrown by  <code>std::function::operator(void)</code>  if the function wrapper has no target.</p>\n<pre><code>class bad_function_call;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/bad_function_call
std::binary_negate	A										<section class="prog__container">\n<p><code>binary_negate</code> is a wrapper function object returning the complement of the binary predicate it holds.</p>\n<pre><code>template&lt; class Predicate &gt;\nstruct binary_negate;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/binary_negate
std::bind	A										<section class="prog__container">\n<p>The function template <code>bind</code> generates a forwarding call wrapper for <code>f</code>.</p>\n<pre><code>template&lt; class F, class... Args &gt;\n/*unspecified*/ bind( F&& f, Args&&... args );</code></pre><pre><code>template&lt; class R, class F, class... Args &gt;\n/*unspecified*/ bind( F&& f, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/bind
std::bit_and	A										<section class="prog__container">\n<p>Function object for performing bitwise AND.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct bit_and;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/bit_and
std::bit_not	A										<section class="prog__container">\n<p>Function object for performing bitwise NOT.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct bit_not;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/bit_not
std::bit_or	A										<section class="prog__container">\n<p>Function object for performing bitwise OR.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct bit_or;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/bit_or
std::boyer_moore_horspool_searcher	A										<section class="prog__container">\n<p>A searcher suitable for use with the <code>Searcher</code> overload of std::search that implements the Boyer-Moore-Horspool string searching algorithm.</p>\n<pre><code>template&lt; class RandomIt1,\n          class Hash = std::hash&lt;typename std::iterator_traits&lt;RandomIt1&gt;::value_type&gt;,\n          class BinaryPredicate = std::equal_to&lt;&gt; &gt;\nclass boyer_moore_horspool_searcher;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/boyer_moore_horspool_searcher
std::boyer_moore_searcher	A										<section class="prog__container">\n<p>A searcher suitable for use with the <code>Searcher</code> overload of std::search that implements the Boyer-Moore string searching algorithm.</p>\n<pre><code>template&lt; class RandomIt1,\n          class Hash = std::hash&lt;typename std::iterator_traits&lt;RandomIt1&gt;::value_type&gt;,\n          class BinaryPredicate = std::equal_to&lt;&gt; &gt;\nclass boyer_moore_searcher;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/boyer_moore_searcher
std::default_searcher	A										<section class="prog__container">\n<p>A class suitable for use with <code>Searcher</code> overload of std::search that delegates the search operation to the pre-C++17 standard library's std::search.</p>\n<pre><code>template&lt; class ForwardIterator1, class BinaryPredicate = std::equal_to&lt;&gt; &gt;\nclass default_searcher;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/default_searcher
std::divides	A										<section class="prog__container">\n<p>Function object for performing division.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct divides;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/divides
std::equal_to	A										<section class="prog__container">\n<p>Function object for performing comparisons.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct equal_to;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/equal_to
std::function	A										<section class="prog__container">\n<p>Class template <code>std::function</code> is a general-purpose polymorphic function wrapper.</p>\n<pre><code>template&lt; class &gt;\nclass function; /* undefined */</code></pre><pre><code>template&lt; class R, class... Args &gt;\nclass function&lt;R(Args...)&gt;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/function
std::function::assign	A										<section class="prog__container">\n<p>Initializes the <i>target</i> with <code>f</code>.</p>\n<pre><code>template&lt; class F, class Alloc &gt;\nvoid assign( F&& f, const Alloc& alloc );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/function/assign
std::function::function	A										<section class="prog__container">\n<p>Constructs a <code>std::function</code> from a variety of sources.</p>\n<pre><code>function( const function& other );</code></pre><pre><code>function( function&& other );</code></pre><pre><code>template&lt; class F &gt; \nfunction( F f );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/function/function
std::function::operator()	A										<section class="prog__container">\n<p>Invokes the stored callable function target with the parameters <code>args</code>.</p>\n<pre><code>R operator(void)( Args... args ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/function/operator()
std::function::operator=	A										<section class="prog__container">\n<p>Assigns a new <i>target</i> to <code>std::function</code>.</p>\n<pre><code>function& operator=( const function& other );</code></pre><pre><code>function& operator=( function&& other );</code></pre><pre><code>function& operator=( std::nullptr_t );</code></pre><pre><code>template&lt; class F &gt; \nfunction& operator=( F&& f );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/function/operator=
std::function::operator bool	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> stores a callable function target, i.e. is not empty.</p>\n<pre><code>explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/function/operator_bool
std::function::swap	A										<section class="prog__container">\n<p>Exchanges the stored callable objects of <code>*this</code> and <code>other</code>.</p>\n<pre><code>void swap( function& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/function/swap
std::function::target	A										<section class="prog__container">\n<p>Returns a pointer to the stored callable function target.</p>\n<pre><code>template&lt; class T &gt; \nT* target(void);</code></pre><pre><code>template&lt; class T &gt; \nconst T* target(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/function/target
std::function::target_type	A										<section class="prog__container">\n<p>Returns the type of the stored function.</p>\n<pre><code>const std::type_info& target_type(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/function/target_type
std::greater	A										<section class="prog__container">\n<p>Function object for performing comparisons.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct greater;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/greater
std::greater_equal	A										<section class="prog__container">\n<p>Function object for performing comparisons.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct greater_equal;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/greater_equal
std::invoke	A										<section class="prog__container">\n<p>Invoke the <code>Callable</code> object <code>f</code> with the parameters <code>args</code>.</p>\n<pre><code>template&lt; class F, class... ArgTypes&gt;\nstd::result_of_t&lt;F&&(ArgTypes&&...)&gt; invoke(F&& f, ArgTypes&&... args);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/invoke
std::is_bind_expression	A										<section class="prog__container">\n<p>If <code>T</code> is the type produced by a call to std::bind, this template is derived from std::true_type.</p>\n<pre><code>template&lt; class T &gt;\nstruct is_bind_expression;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/is_bind_expression
std::is_placeholder	A										<section class="prog__container">\n<p>If <code>T</code> is the type of a standard placeholder (_1, _2, _3, .</p>\n<pre><code>template&lt; class T &gt;\nstruct is_placeholder;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/is_placeholder
std::less	A										<section class="prog__container">\n<p>Function object for performing comparisons.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct less;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/less
std::less_equal	A										<section class="prog__container">\n<p>Function object for performing comparisons.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct less_equal;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/less_equal
std::logical_and	A										<section class="prog__container">\n<p>Function object for performing logical AND (logical conjunction).</p>\n<pre><code>template&lt; class T = void &gt;\nstruct logical_and;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/logical_and
std::logical_not	A										<section class="prog__container">\n<p>Function object for performing logical NOT (logical negation).</p>\n<pre><code>template&lt; class T = void &gt;\nstruct logical_not;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/logical_not
std::logical_or	A										<section class="prog__container">\n<p>Function object for performing logical OR (logical disjunction).</p>\n<pre><code>template&lt; class T = void &gt;\nstruct logical_or;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/logical_or
std::mem_fn	A										<section class="prog__container">\n<p>Function template <code>std::mem_fn</code> generates wrapper objects for pointers to members, which can store, copy, and invoke a pointer to member.</p>\n<pre><code>template&lt; class R, class T &gt;\n/*unspecified*/ mem_fn(R T::* pm);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/mem_fn
std::minus	A										<section class="prog__container">\n<p>Function object for performing subtraction.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct minus;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/minus
std::modulus	A										<section class="prog__container">\n<p>Function object for computing remainders of divisions.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct modulus;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/modulus
std::multiplies	A										<section class="prog__container">\n<p>Function object for performing multiplication.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct multiplies;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/multiplies
std::negate	A										<section class="prog__container">\n<p>Function object for performing negation.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct negate;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/negate
std::not1	A										<section class="prog__container">\n<p><code>not1</code> is a helper function to create a function object that returns the complement of the unary predicate function passed.</p>\n<pre><code>template&lt; class Predicate &gt;\nconstexpr std::unary_negate&lt;Predicate&gt; not1(const Predicate& pred);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/not1
std::not2	A										<section class="prog__container">\n<p><code>not2</code> is a helper function to create a function object that returns the complement of the binary predicate function passed.</p>\n<pre><code>template&lt; class Predicate &gt;\nconstexpr std::binary_negate&lt;Predicate&gt; not2(const Predicate& pred);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/not2
std::not_equal_to	A										<section class="prog__container">\n<p>Function object for performing comparisons.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct not_equal_to;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/not_equal_to
std::not_fn	A										<section class="prog__container">\n<p>Creates a forwarding call wrapper that returns the complement of the callable object it holds.</p>\n<pre><code>template&lt; class F&gt;\n/*unspecified*/ not_fn( F&& f );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/not_fn
std::plus	A										<section class="prog__container">\n<p>Function object for performing addition.</p>\n<pre><code>template&lt; class T = void &gt;\nstruct plus;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/plus
std::cref	A										<section class="prog__container">\n<p>Function templates <code>ref</code> and <code>cref</code> are helper functions that generate an object of type std::reference_wrapper, using template argument deduction to determine the template...</p>\n<pre><code>template&lt; class T &gt;\nstd::reference_wrapper&lt;const T&gt; cref( const T& t );</code></pre><pre><code>template&lt; class T &gt;\nstd::reference_wrapper&lt;const T&gt; cref( std::reference_wrapper&lt;T&gt; t );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/ref
std::ref	A										<section class="prog__container">\n<p>Function templates <code>ref</code> and <code>cref</code> are helper functions that generate an object of type std::reference_wrapper, using template argument deduction to determine the template...</p>\n<pre><code>template&lt; class T &gt;\nstd::reference_wrapper&lt;T&gt; ref(T& t);</code></pre><pre><code>template&lt; class T &gt;\nstd::reference_wrapper&lt;T&gt; ref( std::reference_wrapper&lt;T&gt; t );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/ref
std::reference_wrapper	A										<section class="prog__container">\n<p><code>std::reference_wrapper</code> is a class template that wraps a reference in a copyable, assignable object.</p>\n<pre><code>template&lt; class T &gt;\nclass reference_wrapper;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper
std::reference_wrapper::get	A										<section class="prog__container">\n<p>Returns the stored reference.</p>\n<pre><code>T& get(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper/get
std::reference_wrapper::operator()	A										<section class="prog__container">\n<p>Calls the <code>Callable</code> object, reference to which is stored.</p>\n<pre><code>template&lt; class... ArgTypes &gt;\ntypename std::result_of&lt;T&(ArgTypes&&...)&gt;::type\n    operator(void) ( ArgTypes&&... args ) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper/operator()
std::reference_wrapper::operator=	A										<section class="prog__container">\n<p>Copy assignment operator.</p>\n<pre><code>reference_wrapper& operator=( const reference_wrapper&lt;T&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper/operator=
std::reference_wrapper::reference_wrapper	A										<section class="prog__container">\n<p>Constructs a new reference wrapper.</p>\n<pre><code>reference_wrapper( const reference_wrapper&lt;T&gt;& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper/reference_wrapper
std::unary_negate	A										<section class="prog__container">\n<p><code>unary_negate</code> is a wrapper function object returning the complement of the unary predicate it holds.</p>\n<pre><code>template&lt; class Predicate &gt;\nstruct unary_negate;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/functional/unary_negate
std::in_place	A										<section class="prog__container">\n<p><code>std::in_place</code>, <code>std::in_place_type</code>, and <code>std::in_place_index</code> are disambiguation tags that can be passed to the constructors of std::optional, std::variant, and...</p>\n<pre><code>struct in_place_t {\n    explicit in_place_t(void) = default;\n};\ninline constexpr std::in_place_t in_place{};</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/in_place
std::initializer_list	A										<section class="prog__container">\n<p>An object of type <code>std::initializer_list&lt;T&gt;</code> is a lightweight proxy object that provides access to an array of objects of type <code>const T</code>.</p>\n<pre><code>template&lt; class T &gt;\nclass initializer_list;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/initializer_list
std::initializer_list::begin	A										<section class="prog__container">\n<p>Returns a pointer to the first element in the initializer list.</p>\n<pre><code>const T* begin(void) const;</code></pre><pre><code>constexpr const T* begin(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/initializer_list/begin
std::initializer_list::end	A										<section class="prog__container">\n<p>Returns a pointer to one past the last element in the initializer list, i.e. <code>begin(void) + size(void)</code>.</p>\n<pre><code>const T* end(void) const;</code></pre><pre><code>constexpr const T* end(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/initializer_list/end
std::initializer_list::initializer_list	A										<section class="prog__container">\n<p>Constructs an empty initializer list.</p>\n<pre><code>constexpr initializer_list(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/initializer_list/initializer_list
std::initializer_list::size	A										<section class="prog__container">\n<p>Returns the number of elements in the initializer list, i.e. <code>std::distance(begin(void), end(void))</code>.</p>\n<pre><code>size_type size(void) const;</code></pre><pre><code>constexpr size_type size(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/initializer_list/size
std::integer_sequence	A										<section class="prog__container">\n<p>The class template <code>std::integer_sequence</code> represents a compile-time sequence of integers.</p>\n<pre><code>template&lt; class T, T... Ints &gt;\nclass integer_sequence;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/integer_sequence
std::launder	A										<section class="prog__container">\n<p>Obtains a pointer to an object created in storage occupied by an existing object of the same type, even if it has const or reference members.</p>\n<pre><code>template &lt;class T&gt;\nconstexpr T* launder(T* p)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/launder
std::make_from_tuple	A										<section class="prog__container">\n<p>Construct an object of type <code>T</code>, using the elements of the tuple <code>t</code> as the arguments to the constructor.</p>\n<pre><code>template &lt;class T, class Tuple&gt;\nconstexpr T make_from_tuple(Tuple&& t);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/make_from_tuple
std::move_if_noexcept	A										<section class="prog__container">\n<p><code>move_if_noexcept</code> obtains an rvalue reference to its argument if its move constructor does not throw exceptions, otherwise obtains an lvalue reference to its argument.</p>\n<pre><code>template&lt; class T &gt;\ntypename std::conditional&lt;  \n    !std::is_nothrow_move_constructible&lt;T&gt;::value && std::is_copy_constructible&lt;T&gt;::value,\n    const T&,\n    T&& \n&gt;::type move_if_noexcept(T& x);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/move_if_noexcept
std::optional	A										<section class="prog__container">\n<p>The class template <code>std::optional</code> manages an <i>optional</i> contained value, i.e. a value that may or may not be present.</p>\n<pre><code>template&lt; class T &gt;\nclass optional;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional
std::bad_optional_access	A										<section class="prog__container">\n<p>Defines a type of object to be thrown by std::optional::value when accessing an optional object that does not contain a value.</p>\n<pre><code>class bad_optional_access;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/bad_optional_access
std::experimental::bad_optional_access	A										<section class="prog__container">\n<p>Defines a type of object to be thrown by std::optional::value when accessing an optional object that does not contain a value.</p>\n<pre><code>class bad_optional_access;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/bad_optional_access
std::optional::emplace	A										<section class="prog__container">\n<p>Constructs the contained value in-place.</p>\n<pre><code>template&lt; class... Args &gt; \nvoid emplace( Args&&... args );</code></pre><pre><code>template&lt; class U, class... Args &gt; \nvoid emplace( std::initializer_list&lt;U&gt; ilist, Args&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/emplace
std::nullopt_t	A										<section class="prog__container">\n<p><code>std::nullopt_t</code> is an empty class type used to indicate <code>optional</code> type with uninitialized state.</p>\n<pre><code>struct nullopt_t;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/nullopt_t
std::optional::operator*	A										<section class="prog__container">\n<p>Accesses the contained value.</p>\n<pre><code>constexpr const T& operator*(void) const&;</code></pre><pre><code>constexpr T& operator*(void) &;</code></pre><pre><code>constexpr const T&& operator*(void) const&&;</code></pre><pre><code>constexpr T&& operator*(void) &&;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/operator*
std::optional::operator->	A										<section class="prog__container">\n<p>Accesses the contained value.</p>\n<pre><code>constexpr const T* operator-&gt;(void) const;</code></pre><pre><code>constexpr T* operator-&gt;(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/operator*
std::optional::operator=	A										<section class="prog__container">\n<p>Replaces contents of <code>*this</code> with the contents of <code>other</code>...</p>\n<pre><code>optional& operator=( std::nullopt_t );</code></pre><pre><code>optional& operator=( const optional& other );</code></pre><pre><code>optional& operator=( optional&& other );</code></pre><pre><code>template&lt; class U = T &gt; \noptional& operator=( U&& value );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/operator=
std::optional::has_value	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> contains a value.</p>\n<pre><code>constexpr bool has_value(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/operator_bool
std::optional::operator bool	A										<section class="prog__container">\n<p>Checks whether <code>*this</code> contains a value.</p>\n<pre><code>constexpr explicit operator bool(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/operator_bool
std::optional::optional	A										<section class="prog__container">\n<p>Constructs a new <code>optional</code> object.</p>\n<pre><code>constexpr optional(void);\nconstexpr optional( std::nullopt_t );</code></pre><pre><code>optional( const optional& other );</code></pre><pre><code>optional( optional&& other );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/optional
std::optional::reset	A										<section class="prog__container">\n<p>If <code>*this</code> contains a value, destroy that value as if by <code>value(void).T::~T(void)</code>.</p>\n<pre><code>void reset(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/reset
std::optional::swap	A										<section class="prog__container">\n<p>Swaps the contents with those of <code>other</code>.</p>\n<pre><code>void swap( optional& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/swap
std::optional::value	A										<section class="prog__container">\n<p>If <code>*this</code> contains a value, returns a reference to the contained value.</p>\n<pre><code>constexpr T& value(void) &;\nconstexpr const T & value(void) const &;</code></pre><pre><code>constexpr T&& value(void) &&;\nconstexpr const T&& value(void) const &&;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/value
std::optional::value_or	A										<section class="prog__container">\n<p>Returns the contained value if <code>*this</code> has a value, otherwise returns <code>default_value</code>.</p>\n<pre><code>template&lt; class U &gt; \nconstexpr T value_or( U&& default_value ) const&;</code></pre><pre><code>template&lt; class U &gt; \nconstexpr T value_or( U&& default_value ) &&;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/optional/value_or
std::pair	A										<section class="prog__container">\n<p><code>std::pair</code> is a struct template that provides a way to store two heterogeneous objects as a single unit.</p>\n<pre><code>template&lt;\n    class T1,\n    class T2\n&gt; struct pair;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/pair
std::make_pair	A										<section class="prog__container">\n<p>Creates a std::pair object, deducing the target type from the types of arguments.</p>\n<pre><code>template&lt; class T1, class T2 &gt;\nstd::pair&lt;V1,V2&gt; make_pair( T1&& t, T2&& u );</code></pre><pre><code>template&lt; class T1, class T2 &gt;\nconstexpr std::pair&lt;V1,V2&gt; make_pair( T1&& t, T2&& u );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/pair/make_pair
std::pair::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the pair.</p>\n<pre><code>pair& operator=( const pair& other );</code></pre><pre><code>template&lt; class U1, class U2 &gt;\npair& operator=( const pair&lt;U1,U2&gt;& other );</code></pre><pre><code>pair& operator=( pair&& other );</code></pre><pre><code>template&lt; class U1, class U2 &gt;\npair& operator=( pair&lt;U1,U2&gt;&& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/pair/operator=
std::pair::pair	A										<section class="prog__container">\n<p> Constructs a new pair.</p>\n<pre><code>constexpr pair(void);</code></pre><pre><code>/*EXPLICIT*/ constexpr pair(void);</code></pre><pre><code>constexpr pair( const T1& x, const T2& y );</code></pre><pre><code>/*EXPLICIT*/ constexpr pair( const T1& x, const T2& y );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/pair/pair
std::pair::swap	A										<section class="prog__container">\n<p>Swaps <code>first</code> with <code>other.first</code> and <code>second</code> with <code>other.second</code>.</p>\n<pre><code>void swap(pair& other);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/pair/swap
std::piecewise_construct_t	A										<section class="prog__container">\n<p>std::piecewise_construct_t is an empty struct tag type used to disambiguate between different functions that take two tuple arguments.</p>\n<pre><code>struct piecewise_construct_t { };</code></pre><pre><code>struct piecewise_construct_t { explicit piecewise_construct_t(void) = default; };</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/piecewise_construct_t
std::_Exit	A										<section class="prog__container">\n<p>Causes normal program termination to occur without completely cleaning the resources.</p>\n<pre><code>[[noreturn]] void _Exit( int exit_code );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/_Exit
std::abort	A										<section class="prog__container">\n<p>Causes abnormal program termination unless SIGABRT is being caught by a signal handler passed to signal and the handler does not return.</p>\n<pre><code>[[noreturn]] void abort(void);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/abort
std::at_quick_exit	A										<section class="prog__container">\n<p>Registers the function pointed to by <code>func</code> to be called on quick program termination (via std::quick_exit).</p>\n<pre><code>int at_quick_exit( /*atexit-handler*/* func );\nint at_quick_exit( /*c-atexit-handler*/* func );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/at_quick_exit
std::atexit	A										<section class="prog__container">\n<p>Registers the function pointed to by <code>func</code> to be called on normal program termination (via std::exit(void) or returning from the main function)...</p>\n<pre><code>int atexit( /*c-atexit-handler*/* func );\nint atexit( /*atexit-handler*/* func );</code></pre><pre><code>extern "C++" using /*atexit-handler*/ = void(void); // exposition-only\nextern "C" using /*c-atexit-handler*/ = void(void); // exposition-only</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/atexit
std::exit	A										<section class="prog__container">\n<p>Causes normal program termination to occur.</p>\n<pre><code>[[noreturn]] void exit( int exit_code );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/exit
std::getenv	A										<section class="prog__container">\n<p>Searches the <i>environment list</i> provided by the host environment (the OS), for a string that matches the C string pointed to by <code>env_var</code> and returns a pointer to the C string that is...</p>\n<pre><code>char* getenv( const char* env_var );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/getenv
std::longjmp	A										<section class="prog__container">\n<p>Loads the execution context <code>env</code> saved by a previous call to setjmp.</p>\n<pre><code>void longjmp( std::jmp_buf env, int status );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/longjmp
std::quick_exit	A										<section class="prog__container">\n<p>Causes normal program termination to occur without completely cleaning the resources.</p>\n<pre><code>[[noreturn]] void quick_exit( int exit_code );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/quick_exit
std::raise	A										<section class="prog__container">\n<p>Sends signal sig to the program.</p>\n<pre><code>int raise( int sig );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/raise
setjmp	A										<section class="prog__container">\n<p>Saves the current execution context into a variable <code>env</code> of type std::jmp_buf.</p>\n<pre><code>#define setjmp(env) /* implementation-defined */</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/setjmp
std::signal	A										<section class="prog__container">\n<p>Sets the error handler for signal <code>sig</code>.</p>\n<pre><code>/*signal-handler*/* signal(int sig, /*signal-handler*/* handler);</code></pre><pre><code>extern "C" using /*signal-handler*/ = void(int); // exposition-only</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/signal
std::system	A										<section class="prog__container">\n<p>Calls the host environment's command processor (<code>/bin/sh</code>, <code>cmd.exe</code>, <code>command.com</code>) with the parameter <code>command</code>.</p>\n<pre><code>int system( const char* command );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/program/system
std::rel_ops::operator!=	A										<section class="prog__container">\n<p>Given a user-defined <code>operator==</code> and <code>operator&lt;</code> for objects of type <code>T</code>, implements the usual semantics of other comparison operators.</p>\n<pre><code>template&lt; class T &gt;\nbool operator!=( const T& lhs, const T& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/rel_ops/operator_cmp
std::rel_ops::operator<=	A										<section class="prog__container">\n<p>Given a user-defined <code>operator==</code> and <code>operator&lt;</code> for objects of type <code>T</code>, implements the usual semantics of other comparison operators.</p>\n<pre><code>template&lt; class T &gt;\nbool operator&lt;=( const T& lhs, const T& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/rel_ops/operator_cmp
std::rel_ops::operator>	A										<section class="prog__container">\n<p>Given a user-defined <code>operator==</code> and <code>operator&lt;</code> for objects of type <code>T</code>, implements the usual semantics of other comparison operators.</p>\n<pre><code>template&lt; class T &gt;\nbool operator&gt;( const T& lhs, const T& rhs );</code></pre><pre><code>template&lt; class T &gt;\nbool operator&gt;=( const T& lhs, const T& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/rel_ops/operator_cmp
std::rel_ops::operator>=	A										<section class="prog__container">\n<p>Given a user-defined <code>operator==</code> and <code>operator&lt;</code> for objects of type <code>T</code>, implements the usual semantics of other comparison operators.</p>\n<pre><code>template&lt; class T &gt;\nbool operator&gt;=( const T& lhs, const T& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/rel_ops/operator_cmp
std::tuple	A										<section class="prog__container">\n<p>Class template <code>std::tuple</code> is a fixed-size collection of heterogeneous values.</p>\n<pre><code>template&lt; class... Types &gt;\nclass tuple;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/tuple
std::forward_as_tuple	A										<section class="prog__container">\n<p>Constructs a tuple of references to the arguments in <code>args</code> suitable for forwarding as an argument to a function.</p>\n<pre><code>template&lt; class... Types &gt;\ntuple&lt;Types&&...&gt; forward_as_tuple( Types&&... args );</code></pre><pre><code>template&lt; class... Types &gt;\nconstexpr tuple&lt;Types&&...&gt; forward_as_tuple( Types&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/tuple/forward_as_tuple
std::make_tuple	A										<section class="prog__container">\n<p>Creates a tuple object, deducing the target type from the types of arguments.</p>\n<pre><code>template&lt; class... Types &gt;\ntuple&lt;VTypes...&gt; make_tuple( Types&&... args );</code></pre><pre><code>template&lt; class... Types &gt;\nconstexpr tuple&lt;VTypes...&gt; make_tuple( Types&&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/tuple/make_tuple
std::tuple::operator=	A										<section class="prog__container">\n<p>Replaces the contents of the tuple with the contents of another tuple or a pair.</p>\n<pre><code>tuple& operator=( const tuple& other );</code></pre><pre><code>tuple& operator=( tuple&& other );</code></pre><pre><code>template&lt; class... UTypes &gt;\ntuple& operator=( const tuple&lt;UTypes...&gt;& other );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/tuple/operator=
std::tuple::swap	A										<section class="prog__container">\n<p>Calls <code>swap</code> (which might be std::swap, or might be found via ADL) for each element in <code>*this</code> and its corresponding element in <code>other</code>.</p>\n<pre><code>void swap( tuple& other );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/tuple/swap
std::tie	A										<section class="prog__container">\n<p>Creates a tuple of lvalue references to its arguments or instances of std::ignore.</p>\n<pre><code>template&lt; class... Types &gt;\ntuple&lt;Types&...&gt; tie( Types&... args );</code></pre><pre><code>template&lt; class... Types &gt;\nconstexpr tuple&lt;Types&...&gt; tie( Types&... args );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/tuple/tie
std::tuple::tuple	A										<section class="prog__container">\n<p>Constructs a new tuple.</p>\n<pre><code>constexpr tuple(void);</code></pre><pre><code>/*EXPLICIT*/ constexpr tuple(void);</code></pre><pre><code>explicit tuple( const Types&... args );</code></pre><pre><code>explicit constexpr tuple( const Types&... args );</code></pre><pre><code>/*EXPLICIT*/ constexpr tuple( const Types&... args );</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/tuple/tuple
std::tuple_cat	A										<section class="prog__container">\n<p>Constructs a tuple that is a concatenation of all tuples in <code>args</code>.</p>\n<pre><code>template&lt; class... Tuples &gt;\nstd::tuple&lt;CTypes...&gt; tuple_cat(Tuples&&... args);</code></pre><pre><code>template&lt; class... Tuples &gt;\nconstexpr std::tuple&lt;CTypes...&gt; tuple_cat(Tuples&&... args);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/tuple/tuple_cat
va_arg	A										<section class="prog__container">\n<p>The <code>va_arg</code> macro expands to an expression of type <code>T</code> that corresponds to the next parameter from the va_list <code>ap</code>.</p>\n<pre><code>T va_arg( va_list ap, T );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variadic/va_arg
va_copy	A										<section class="prog__container">\n<p>The <code>va_copy</code> macro copies <code>src</code> to <code>dest</code>.</p>\n<pre><code>void va_copy( va_list dest, va_list src );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variadic/va_copy
va_end	A										<section class="prog__container">\n<p>The <code>va_end</code> macro performs cleanup for an <code>ap</code> object initialized by a call to va_start or va_copy.</p>\n<pre><code>void va_end( va_list ap );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variadic/va_end
va_list	A										<section class="prog__container">\n<p><code>va_list</code> is a complete object type suitable for holding the information needed by the macros va_start, va_copy, va_arg, and va_end.</p>\n<pre><code>typedef /* unspecified */ va_list;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variadic/va_list
va_start	A										<section class="prog__container">\n<p>The <code>va_start</code> macro enables access to the variable arguments following the named argument <code>parm_n</code>.</p>\n<pre><code>void va_start( va_list ap, parm_n );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variadic/va_start
std::variant	A										<section class="prog__container">\n<p>The class template <code>std::variant</code> represents a type-safe union.</p>\n<pre><code>template &lt;class... Types&gt;\nclass variant;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variant
std::bad_variant_access	A										<section class="prog__container">\n<p><code>std::bad_variant_access</code> is the type of the exception thrown in the following situations...</p>\n<pre><code>class bad_variant_access : public std::exception</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/bad_variant_access
std::variant::emplace	A										<section class="prog__container">\n<p>Creates a new value in-place, in an existing <code>variant</code> object...</p>\n<pre><code>template &lt;class T, class... Args&gt;\nvoid emplace(Args&&... args);</code></pre><pre><code>template &lt;class T, class U, class... Args&gt;\nvoid emplace(std::initializer_list&lt;U&gt; il, Args&&... args);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/emplace
std::holds_alternative	A										<section class="prog__container">\n<p>Checks if the variant <code>v</code> holds the alternative <code>T</code>.</p>\n<pre><code>template &lt;class T, class... Types&gt;\nconstexpr bool holds_alternative(const std::variant&lt;Types...&gt;& v)</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/holds_alternative
std::variant::index	A										<section class="prog__container">\n<p>Returns the zero-based index of the alternative that is currently held by the variant.</p>\n<pre><code>constexpr std::size_t index(void) const</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/index
std::monostate	A										<section class="prog__container">\n<p>Unit type intended for use as a well-behaved empty alternative in std::variant.</p>\n<pre><code>struct monostate { }</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/monostate
std::variant::operator=	A										<section class="prog__container">\n<p>Assigns a new value to an existing <code>variant</code> object...</p>\n<pre><code>variant& operator=(const variant& rhs);</code></pre><pre><code>variant& operator=(variant&& rhs) noexcept(/* see below */);</code></pre><pre><code>template &lt;class T&gt; variant& operator=(T&& t) noexcept(/* see below */);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/operator=
std::variant::swap	A										<section class="prog__container">\n<p>Swaps two <code>variant</code> objects.</p>\n<pre><code>void swap( variant& rhs );</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/swap
std::variant::valueless_by_exception	A										<section class="prog__container">\n<p>Returns <code>false</code> if and only if the variant holds a value.</p>\n<pre><code>constexpr bool valueless_by_exception(void) const;</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/valueless_by_exception
std::variant::variant	A										<section class="prog__container">\n<p> Constructs a new <code>variant</code> object.</p>\n<pre><code>constexpr variant(void);</code></pre><pre><code>variant(const variant& other);</code></pre><pre><code>variant(variant&& other);</code></pre><pre><code>template&lt; class T &gt;\nconstexpr variant(T&& t);</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/variant
std::variant_alternative	A										<section class="prog__container">\n<p>Provides compile-time indexed access to the types of the alternatives of the possibly cv-qualified variant, combining cv-qualifications of the variant (if any) with the cv-qualifications of the...</p>\n<pre><code>template &lt;std::size_t I, class T&gt;\nstruct variant_alternative; /* undefined */</code></pre><pre><code>template &lt;size_t I, class... Types&gt;\nstruct variant_alternative&lt;I, variant&lt;Types...&gt;&gt;;</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/variant_alternative
std::variant_size	A										<section class="prog__container">\n<p>Provides access to the number of alternatives in a possibly cv-qualified variant as a compile-time constant expression.</p>\n<pre><code>template &lt;class T&gt;\nstruct variant_size; /* undefined */</code></pre><pre><code>template &lt;class... Types&gt;\nstruct variant_size&lt;std::variant&lt;Types...&gt;&gt;\n: std::integral_constant&lt;std::size_t, sizeof...(Types)&gt; { };</code></pre>\n<p><em>Additional declarations have been omitted</em></p>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/variant_size
std::visit	A										<section class="prog__container">\n<p>Applies the visitor <code>vis</code> to the variants <code>vars</code>...</p>\n<pre><code>template &lt;class Visitor, class... Variants&gt;\nconstexpr /*see below*/ visit(Visitor&& vis, Variants&&... vars);</code></pre>\n</section>	http://en.cppreference.com/w/cpp/utility/variant/visit
 Exit	R	std::_Exit											
ATOMIC VAR INIT	R	ATOMIC_VAR_INIT											
ATOMIC_VAR_INIT	R	ATOMIC_VAR_INIT											
_Exit	R	std::_Exit											
abort	R	std::abort											
absolute	R	std::filesystem::absolute											
accumulate	R	std::accumulate											
acos	R	std::acos											
acosh	R	std::acosh											
add const	R	std::add_const											
add cv	R	std::add_cv											
add lvalue reference	R	std::add_lvalue_reference											
add pointer	R	std::add_pointer											
add rvalue reference	R	std::add_rvalue_reference											
add volatile	R	std::add_volatile											
add_const	R	std::add_const											
add_cv	R	std::add_cv											
add_lvalue_reference	R	std::add_lvalue_reference											
add_pointer	R	std::add_pointer											
add_rvalue_reference	R	std::add_rvalue_reference											
add_volatile	R	std::add_volatile											
address	R	std::allocator::address											
adjacent difference	R	std::adjacent_difference											
adjacent find	R	std::adjacent_find											
adjacent_difference	R	std::adjacent_difference											
adjacent_find	R	std::adjacent_find											
adopt lock t	R	std::adopt_lock_t											
adopt_lock_t	R	std::adopt_lock_t											
advance	R	std::advance											
align	R	std::align											
align val t	R	std::align_val_t											
align_val_t	R	std::align_val_t											
aligned alloc	R	std::aligned_alloc											
aligned storage	R	std::aligned_storage											
aligned union	R	std::aligned_union											
aligned_alloc	R	std::aligned_alloc											
aligned_storage	R	std::aligned_storage											
aligned_union	R	std::aligned_union											
alignment of	R	std::alignment_of											
alignment_of	R	std::alignment_of											
all	R	std::bitset::all											
allocate shared	R	std::allocate_shared											
allocate_shared	R	std::allocate_shared											
allocator	R	std::allocator											
allocator address	R	std::allocator::address											
allocator allocate	R	std::allocator::allocate											
allocator arg t	R	std::allocator_arg_t											
allocator construct	R	std::allocator::construct											
allocator constructor	R	std::allocator::allocator											
allocator deallocate	R	std::allocator::deallocate											
allocator destroy	R	std::allocator::destroy											
allocator max size	R	std::allocator::max_size											
allocator max_size	R	std::allocator::max_size											
allocator traits	R	std::allocator_traits											
allocator traits allocate	R	std::allocator_traits::allocate											
allocator traits construct	R	std::allocator_traits::construct											
allocator traits deallocate	R	std::allocator_traits::deallocate											
allocator traits destroy	R	std::allocator_traits::destroy											
allocator traits max size	R	std::allocator_traits::max_size											
allocator traits select on container copy construction	R	std::allocator_traits::select_on_container_copy_construction											
allocator_arg_t	R	std::allocator_arg_t											
allocator_traits	R	std::allocator_traits											
allocator_traits allocate	R	std::allocator_traits::allocate											
allocator_traits construct	R	std::allocator_traits::construct											
allocator_traits deallocate	R	std::allocator_traits::deallocate											
allocator_traits destroy	R	std::allocator_traits::destroy											
allocator_traits max_size	R	std::allocator_traits::max_size											
allocator_traits select_on_container_copy_construction	R	std::allocator_traits::select_on_container_copy_construction											
alpha	R	std::gamma_distribution::alpha											
always noconv	R	std::codecvt::always_noconv											
always_noconv	R	std::codecvt::always_noconv											
any	R	std::any											
any cast	R	std::any_cast											
any clear	R	std::experimental::any::clear											
any constructor	R	std::any::any											
any emplace	R	std::any::emplace											
any empty	R	std::experimental::any::empty											
any has value	R	std::any::has_value											
any has_value	R	std::any::has_value											
any reset	R	std::any::reset											
any swap	R	std::any::swap											
any type	R	std::any::type											
any_cast	R	std::any_cast											
append	R	std::basic_string::append											
apply	R	std::apply											
array	R	std::array											
array at	R	std::array::at											
array back	R	std::array::back											
array begin	R	std::array::begin											
array cbegin	R	std::array::cbegin											
array cend	R	std::array::cend											
array crbegin	R	std::array::crbegin											
array crend	R	std::array::crend											
array data	R	std::array::data											
array empty	R	std::array::empty											
array end	R	std::array::end											
array fill	R	std::array::fill											
array front	R	std::array::front											
array max size	R	std::array::max_size											
array max_size	R	std::array::max_size											
array rbegin	R	std::array::rbegin											
array rend	R	std::array::rend											
array size	R	std::array::size											
array swap	R	std::array::swap											
as const	R	std::as_const											
as_const	R	std::as_const											
asctime	R	std::asctime											
asin	R	std::asin											
asinh	R	std::asinh											
assert	R	assert											
assoc laguerref	R	std::assoc_laguerref											
assoc legendref	R	std::assoc_legendref											
assoc_laguerref	R	std::assoc_laguerref											
assoc_legendref	R	std::assoc_legendref											
async	R	std::async											
at quick exit	R	std::at_quick_exit											
at_quick_exit	R	std::at_quick_exit											
atan	R	std::atan											
atan2	R	std::atan2											
atanh	R	std::atanh											
atexit	R	std::atexit											
atof	R	std::atof											
atoi	R	std::atoi											
atol	R	std::atol											
atoll	R	std::atoll											
atomic	R	std::atomic											
atomic compare exchange strong explicit	R	std::atomic_compare_exchange_strong_explicit											
atomic compare exchange weak explicit	R	std::atomic_compare_exchange_weak_explicit											
atomic compare_exchange_strong	R	std::atomic::compare_exchange_strong											
atomic compare_exchange_weak	R	std::atomic::compare_exchange_weak											
atomic constructor	R	std::atomic::atomic											
atomic exchange	R	std::atomic::exchange											
atomic fetch add explicit	R	std::atomic_fetch_add_explicit											
atomic fetch and	R	std::atomic::fetch_and											
atomic fetch or explicit	R	std::atomic_fetch_or_explicit											
atomic fetch sub explicit	R	std::atomic_fetch_sub_explicit											
atomic fetch xor explicit	R	std::atomic_fetch_xor_explicit											
atomic fetch_add	R	std::atomic::fetch_add											
atomic fetch_and	R	std::atomic::fetch_and											
atomic fetch_or	R	std::atomic::fetch_or											
atomic fetch_sub	R	std::atomic::fetch_sub											
atomic fetch_xor	R	std::atomic::fetch_xor											
atomic flag	R	std::atomic_flag											
atomic flag clear	R	std::atomic_flag::clear											
atomic flag test and set	R	std::atomic_flag::test_and_set											
atomic init	R	std::atomic_init											
atomic is lock free	R	std::atomic::is_lock_free											
atomic is_lock_free	R	std::atomic::is_lock_free											
atomic load	R	std::atomic::load											
atomic signal fence	R	std::atomic_signal_fence											
atomic store	R	std::atomic::store											
atomic thread fence	R	std::atomic_thread_fence											
atomic_compare_exchange_strong	R	std::atomic_compare_exchange_strong											
atomic_compare_exchange_strong_explicit	R	std::atomic_compare_exchange_strong_explicit											
atomic_compare_exchange_weak	R	std::atomic_compare_exchange_weak											
atomic_compare_exchange_weak_explicit	R	std::atomic_compare_exchange_weak_explicit											
atomic_fetch_add	R	std::atomic_fetch_add											
atomic_fetch_add_explicit	R	std::atomic_fetch_add_explicit											
atomic_fetch_or	R	std::atomic_fetch_or											
atomic_fetch_or_explicit	R	std::atomic_fetch_or_explicit											
atomic_fetch_sub	R	std::atomic_fetch_sub											
atomic_fetch_sub_explicit	R	std::atomic_fetch_sub_explicit											
atomic_fetch_xor	R	std::atomic_fetch_xor											
atomic_fetch_xor_explicit	R	std::atomic_fetch_xor_explicit											
atomic_flag	R	std::atomic_flag											
atomic_flag clear	R	std::atomic_flag::clear											
atomic_flag test_and_set	R	std::atomic_flag::test_and_set											
atomic_init	R	std::atomic_init											
atomic_signal_fence	R	std::atomic_signal_fence											
atomic_thread_fence	R	std::atomic_thread_fence											
auto ptr constructor	R	std::auto_ptr::auto_ptr											
auto ptr get	R	std::auto_ptr::get											
auto ptr release	R	std::auto_ptr::release											
auto ptr reset	R	std::auto_ptr::reset											
auto_ptr constructor	R	std::auto_ptr::auto_ptr											
auto_ptr get	R	std::auto_ptr::get											
auto_ptr release	R	std::auto_ptr::release											
auto_ptr reset	R	std::auto_ptr::reset											
back insert iterator	R	std::back_insert_iterator											
back inserter	R	std::back_inserter											
back_insert_iterator	R	std::back_insert_iterator											
back_inserter	R	std::back_inserter											
bad alloc	R	std::bad_alloc											
bad alloc what	R	std::bad_alloc::what											
bad any cast	R	std::bad_any_cast											
bad array length	R	std::bad_array_length											
bad array length what	R	std::bad_array_length::what											
bad array new length	R	std::bad_array_new_length											
bad array new length what	R	std::bad_array_new_length::what											
bad cast	R	std::bad_cast											
bad cast what	R	std::bad_cast::what											
bad exception	R	std::bad_exception											
bad function call	R	std::bad_function_call											
bad function call what	R	std::bad_function_call::what											
bad optional access	R	std::bad_optional_access											
bad optional access what	R	std::experimental::bad_optional_access::what											
bad typeid	R	std::bad_typeid											
bad typeid what	R	std::bad_typeid::what											
bad variant access	R	std::bad_variant_access											
bad weak ptr	R	std::bad_weak_ptr											
bad weak ptr what	R	std::bad_weak_ptr::what											
bad_alloc	R	std::bad_alloc											
bad_alloc what	R	std::bad_alloc::what											
bad_any_cast	R	std::bad_any_cast											
bad_array_length	R	std::bad_array_length											
bad_array_length what	R	std::bad_array_length::what											
bad_array_new_length	R	std::bad_array_new_length											
bad_array_new_length what	R	std::bad_array_new_length::what											
bad_cast	R	std::bad_cast											
bad_cast what	R	std::bad_cast::what											
bad_exception	R	std::bad_exception											
bad_function_call	R	std::bad_function_call											
bad_function_call what	R	std::bad_function_call::what											
bad_optional_access	R	std::bad_optional_access											
bad_optional_access what	R	std::experimental::bad_optional_access::what											
bad_typeid	R	std::bad_typeid											
bad_typeid what	R	std::bad_typeid::what											
bad_variant_access	R	std::bad_variant_access											
bad_weak_ptr	R	std::bad_weak_ptr											
bad_weak_ptr what	R	std::bad_weak_ptr::what											
basic filebuf	R	std::basic_filebuf											
basic filebuf close	R	std::basic_filebuf::close											
basic filebuf constructor	R	std::basic_filebuf::basic_filebuf											
basic filebuf eback	R	std::basic_filebuf::eback											
basic filebuf egptr	R	std::basic_filebuf::egptr											
basic filebuf epptr	R	std::basic_filebuf::epptr											
basic filebuf gbump	R	std::basic_filebuf::gbump											
basic filebuf getloc	R	std::basic_filebuf::getloc											
basic filebuf gptr	R	std::basic_filebuf::gptr											
basic filebuf in avail	R	std::basic_filebuf::in_avail											
basic filebuf is open	R	std::basic_filebuf::is_open											
basic filebuf open	R	std::basic_filebuf::open											
basic filebuf pbase	R	std::basic_filebuf::pbase											
basic filebuf pbump	R	std::basic_filebuf::pbump											
basic filebuf pptr	R	std::basic_filebuf::pptr											
basic filebuf pubimbue	R	std::basic_filebuf::pubimbue											
basic filebuf pubseekoff	R	std::basic_filebuf::pubseekoff											
basic filebuf pubseekpos	R	std::basic_filebuf::pubseekpos											
basic filebuf pubsetbuf	R	std::basic_filebuf::pubsetbuf											
basic filebuf pubsync	R	std::basic_filebuf::pubsync											
basic filebuf sbumpc	R	std::basic_filebuf::sbumpc											
basic filebuf setg	R	std::basic_filebuf::setg											
basic filebuf setp	R	std::basic_filebuf::setp											
basic filebuf sgetc	R	std::basic_filebuf::sgetc											
basic filebuf sgetn	R	std::basic_filebuf::sgetn											
basic filebuf snextc	R	std::basic_filebuf::snextc											
basic filebuf sputbackc	R	std::basic_filebuf::sputbackc											
basic filebuf sputc	R	std::basic_filebuf::sputc											
basic filebuf sputn	R	std::basic_filebuf::sputn											
basic filebuf sungetc	R	std::basic_filebuf::sungetc											
basic filebuf xsgetn	R	std::basic_filebuf::xsgetn											
basic filebuf xsputn	R	std::basic_filebuf::xsputn											
basic fstream	R	std::basic_fstream											
basic fstream Init	R	std::basic_fstream::Init											
basic fstream bad	R	std::basic_fstream::bad											
basic fstream clear	R	std::basic_fstream::clear											
basic fstream close	R	std::basic_fstream::close											
basic fstream constructor	R	std::basic_fstream::basic_fstream											
basic fstream copyfmt	R	std::basic_fstream::copyfmt											
basic fstream eof	R	std::basic_fstream::eof											
basic fstream exceptions	R	std::basic_fstream::exceptions											
basic fstream fail	R	std::basic_fstream::fail											
basic fstream failure	R	std::basic_fstream::failure											
basic fstream failure what	R	std::basic_fstream::failure::what											
basic fstream fill	R	std::basic_fstream::fill											
basic fstream flags	R	std::basic_fstream::flags											
basic fstream flush	R	std::basic_fstream::flush											
basic fstream gcount	R	std::basic_fstream::gcount											
basic fstream get	R	std::basic_fstream::get											
basic fstream getline	R	std::basic_fstream::getline											
basic fstream getloc	R	std::basic_fstream::getloc											
basic fstream good	R	std::basic_fstream::good											
basic fstream ignore	R	std::basic_fstream::ignore											
basic fstream init	R	std::basic_fstream::init											
basic fstream is open	R	std::basic_fstream::is_open											
basic fstream iword	R	std::basic_fstream::iword											
basic fstream move	R	std::basic_fstream::move											
basic fstream narrow	R	std::basic_fstream::narrow											
basic fstream open	R	std::basic_fstream::open											
basic fstream peek	R	std::basic_fstream::peek											
basic fstream precision	R	std::basic_fstream::precision											
basic fstream put	R	std::basic_fstream::put											
basic fstream putback	R	std::basic_fstream::putback											
basic fstream pword	R	std::basic_fstream::pword											
basic fstream rdstate	R	std::basic_fstream::rdstate											
basic fstream read	R	std::basic_fstream::read											
basic fstream readsome	R	std::basic_fstream::readsome											
basic fstream register callback	R	std::basic_fstream::register_callback											
basic fstream seekg	R	std::basic_fstream::seekg											
basic fstream seekp	R	std::basic_fstream::seekp											
basic fstream set rdbuf	R	std::basic_fstream::set_rdbuf											
basic fstream setf	R	std::basic_fstream::setf											
basic fstream setstate	R	std::basic_fstream::setstate											
basic fstream sync	R	std::basic_fstream::sync											
basic fstream sync with stdio	R	std::basic_fstream::sync_with_stdio											
basic fstream tellg	R	std::basic_fstream::tellg											
basic fstream tellp	R	std::basic_fstream::tellp											
basic fstream tie	R	std::basic_fstream::tie											
basic fstream unget	R	std::basic_fstream::unget											
basic fstream unsetf	R	std::basic_fstream::unsetf											
basic fstream widen	R	std::basic_fstream::widen											
basic fstream width	R	std::basic_fstream::width											
basic fstream write	R	std::basic_fstream::write											
basic fstream xalloc	R	std::basic_fstream::xalloc											
basic ifstream	R	std::basic_ifstream											
basic ifstream Init	R	std::basic_ifstream::Init											
basic ifstream bad	R	std::basic_ifstream::bad											
basic ifstream clear	R	std::basic_ifstream::clear											
basic ifstream close	R	std::basic_ifstream::close											
basic ifstream constructor	R	std::basic_ifstream::basic_ifstream											
basic ifstream copyfmt	R	std::basic_ifstream::copyfmt											
basic ifstream eof	R	std::basic_ifstream::eof											
basic ifstream exceptions	R	std::basic_ifstream::exceptions											
basic ifstream fail	R	std::basic_ifstream::fail											
basic ifstream failure	R	std::basic_ifstream::failure											
basic ifstream failure what	R	std::basic_ifstream::failure::what											
basic ifstream fill	R	std::basic_ifstream::fill											
basic ifstream flags	R	std::basic_ifstream::flags											
basic ifstream gcount	R	std::basic_ifstream::gcount											
basic ifstream get	R	std::basic_ifstream::get											
basic ifstream getline	R	std::basic_ifstream::getline											
basic ifstream getloc	R	std::basic_ifstream::getloc											
basic ifstream good	R	std::basic_ifstream::good											
basic ifstream ignore	R	std::basic_ifstream::ignore											
basic ifstream init	R	std::basic_ifstream::init											
basic ifstream is open	R	std::basic_ifstream::is_open											
basic ifstream iword	R	std::basic_ifstream::iword											
basic ifstream move	R	std::basic_ifstream::move											
basic ifstream narrow	R	std::basic_ifstream::narrow											
basic ifstream open	R	std::basic_ifstream::open											
basic ifstream peek	R	std::basic_ifstream::peek											
basic ifstream precision	R	std::basic_ifstream::precision											
basic ifstream putback	R	std::basic_ifstream::putback											
basic ifstream pword	R	std::basic_ifstream::pword											
basic ifstream rdstate	R	std::basic_ifstream::rdstate											
basic ifstream read	R	std::basic_ifstream::read											
basic ifstream readsome	R	std::basic_ifstream::readsome											
basic ifstream register callback	R	std::basic_ifstream::register_callback											
basic ifstream seekg	R	std::basic_ifstream::seekg											
basic ifstream sentry	R	std::basic_ifstream::sentry											
basic ifstream set rdbuf	R	std::basic_ifstream::set_rdbuf											
basic ifstream setf	R	std::basic_ifstream::setf											
basic ifstream setstate	R	std::basic_ifstream::setstate											
basic ifstream sync	R	std::basic_ifstream::sync											
basic ifstream sync with stdio	R	std::basic_ifstream::sync_with_stdio											
basic ifstream tellg	R	std::basic_ifstream::tellg											
basic ifstream tie	R	std::basic_ifstream::tie											
basic ifstream unget	R	std::basic_ifstream::unget											
basic ifstream unsetf	R	std::basic_ifstream::unsetf											
basic ifstream widen	R	std::basic_ifstream::widen											
basic ifstream width	R	std::basic_ifstream::width											
basic ifstream xalloc	R	std::basic_ifstream::xalloc											
basic ios	R	std::basic_ios											
basic ios Init	R	std::basic_ios::Init											
basic ios bad	R	std::basic_ios::bad											
basic ios clear	R	std::basic_ios::clear											
basic ios constructor	R	std::basic_ios::basic_ios											
basic ios copyfmt	R	std::basic_ios::copyfmt											
basic ios destructor	R	std::basic_ios::~basic_ios											
basic ios eof	R	std::basic_ios::eof											
basic ios exceptions	R	std::basic_ios::exceptions											
basic ios fail	R	std::basic_ios::fail											
basic ios failure	R	std::basic_ios::failure											
basic ios failure what	R	std::basic_ios::failure::what											
basic ios fill	R	std::basic_ios::fill											
basic ios flags	R	std::basic_ios::flags											
basic ios getloc	R	std::basic_ios::getloc											
basic ios good	R	std::basic_ios::good											
basic ios init	R	std::basic_ios::init											
basic ios iword	R	std::basic_ios::iword											
basic ios move	R	std::basic_ios::move											
basic ios narrow	R	std::basic_ios::narrow											
basic ios precision	R	std::basic_ios::precision											
basic ios pword	R	std::basic_ios::pword											
basic ios rdbuf	R	std::basic_ios::rdbuf											
basic ios rdstate	R	std::basic_ios::rdstate											
basic ios register callback	R	std::basic_ios::register_callback											
basic ios set rdbuf	R	std::basic_ios::set_rdbuf											
basic ios setf	R	std::basic_ios::setf											
basic ios setstate	R	std::basic_ios::setstate											
basic ios swap	R	std::basic_ios::swap											
basic ios sync with stdio	R	std::basic_ios::sync_with_stdio											
basic ios tie	R	std::basic_ios::tie											
basic ios unsetf	R	std::basic_ios::unsetf											
basic ios widen	R	std::basic_ios::widen											
basic ios width	R	std::basic_ios::width											
basic ios xalloc	R	std::basic_ios::xalloc											
basic iostream	R	std::basic_iostream											
basic iostream Init	R	std::basic_iostream::Init											
basic iostream bad	R	std::basic_iostream::bad											
basic iostream clear	R	std::basic_iostream::clear											
basic iostream constructor	R	std::basic_iostream::basic_iostream											
basic iostream copyfmt	R	std::basic_iostream::copyfmt											
basic iostream destructor	R	std::basic_iostream::~basic_iostream											
basic iostream eof	R	std::basic_iostream::eof											
basic iostream exceptions	R	std::basic_iostream::exceptions											
basic iostream fail	R	std::basic_iostream::fail											
basic iostream failure	R	std::basic_iostream::failure											
basic iostream failure what	R	std::basic_iostream::failure::what											
basic iostream fill	R	std::basic_iostream::fill											
basic iostream flags	R	std::basic_iostream::flags											
basic iostream flush	R	std::basic_iostream::flush											
basic iostream gcount	R	std::basic_iostream::gcount											
basic iostream get	R	std::basic_iostream::get											
basic iostream getline	R	std::basic_iostream::getline											
basic iostream getloc	R	std::basic_iostream::getloc											
basic iostream good	R	std::basic_iostream::good											
basic iostream ignore	R	std::basic_iostream::ignore											
basic iostream init	R	std::basic_iostream::init											
basic iostream iword	R	std::basic_iostream::iword											
basic iostream move	R	std::basic_iostream::move											
basic iostream narrow	R	std::basic_iostream::narrow											
basic iostream peek	R	std::basic_iostream::peek											
basic iostream precision	R	std::basic_iostream::precision											
basic iostream put	R	std::basic_iostream::put											
basic iostream putback	R	std::basic_iostream::putback											
basic iostream pword	R	std::basic_iostream::pword											
basic iostream rdbuf	R	std::basic_iostream::rdbuf											
basic iostream rdstate	R	std::basic_iostream::rdstate											
basic iostream read	R	std::basic_iostream::read											
basic iostream readsome	R	std::basic_iostream::readsome											
basic iostream register callback	R	std::basic_iostream::register_callback											
basic iostream seekg	R	std::basic_iostream::seekg											
basic iostream seekp	R	std::basic_iostream::seekp											
basic iostream set rdbuf	R	std::basic_iostream::set_rdbuf											
basic iostream setf	R	std::basic_iostream::setf											
basic iostream setstate	R	std::basic_iostream::setstate											
basic iostream swap	R	std::basic_iostream::swap											
basic iostream sync	R	std::basic_iostream::sync											
basic iostream sync with stdio	R	std::basic_iostream::sync_with_stdio											
basic iostream tellg	R	std::basic_iostream::tellg											
basic iostream tellp	R	std::basic_iostream::tellp											
basic iostream tie	R	std::basic_iostream::tie											
basic iostream unget	R	std::basic_iostream::unget											
basic iostream unsetf	R	std::basic_iostream::unsetf											
basic iostream widen	R	std::basic_iostream::widen											
basic iostream width	R	std::basic_iostream::width											
basic iostream write	R	std::basic_iostream::write											
basic iostream xalloc	R	std::basic_iostream::xalloc											
basic istream	R	std::basic_istream											
basic istream Init	R	std::basic_istream::Init											
basic istream bad	R	std::basic_istream::bad											
basic istream clear	R	std::basic_istream::clear											
basic istream constructor	R	std::basic_istream::basic_istream											
basic istream copyfmt	R	std::basic_istream::copyfmt											
basic istream destructor	R	std::basic_istream::~basic_istream											
basic istream eof	R	std::basic_istream::eof											
basic istream exceptions	R	std::basic_istream::exceptions											
basic istream fail	R	std::basic_istream::fail											
basic istream failure	R	std::basic_istream::failure											
basic istream failure what	R	std::basic_istream::failure::what											
basic istream fill	R	std::basic_istream::fill											
basic istream flags	R	std::basic_istream::flags											
basic istream gcount	R	std::basic_istream::gcount											
basic istream get	R	std::basic_istream::get											
basic istream getline	R	std::basic_istream::getline											
basic istream getloc	R	std::basic_istream::getloc											
basic istream good	R	std::basic_istream::good											
basic istream ignore	R	std::basic_istream::ignore											
basic istream init	R	std::basic_istream::init											
basic istream iword	R	std::basic_istream::iword											
basic istream move	R	std::basic_istream::move											
basic istream narrow	R	std::basic_istream::narrow											
basic istream peek	R	std::basic_istream::peek											
basic istream precision	R	std::basic_istream::precision											
basic istream putback	R	std::basic_istream::putback											
basic istream pword	R	std::basic_istream::pword											
basic istream rdbuf	R	std::basic_istream::rdbuf											
basic istream rdstate	R	std::basic_istream::rdstate											
basic istream read	R	std::basic_istream::read											
basic istream readsome	R	std::basic_istream::readsome											
basic istream register callback	R	std::basic_istream::register_callback											
basic istream seekg	R	std::basic_istream::seekg											
basic istream sentry	R	std::basic_istream::sentry											
basic istream set rdbuf	R	std::basic_istream::set_rdbuf											
basic istream setf	R	std::basic_istream::setf											
basic istream setstate	R	std::basic_istream::setstate											
basic istream swap	R	std::basic_istream::swap											
basic istream sync	R	std::basic_istream::sync											
basic istream sync with stdio	R	std::basic_istream::sync_with_stdio											
basic istream tellg	R	std::basic_istream::tellg											
basic istream tie	R	std::basic_istream::tie											
basic istream unget	R	std::basic_istream::unget											
basic istream unsetf	R	std::basic_istream::unsetf											
basic istream widen	R	std::basic_istream::widen											
basic istream width	R	std::basic_istream::width											
basic istream xalloc	R	std::basic_istream::xalloc											
basic istringstream	R	std::basic_istringstream											
basic istringstream Init	R	std::basic_istringstream::Init											
basic istringstream bad	R	std::basic_istringstream::bad											
basic istringstream clear	R	std::basic_istringstream::clear											
basic istringstream constructor	R	std::basic_istringstream::basic_istringstream											
basic istringstream copyfmt	R	std::basic_istringstream::copyfmt											
basic istringstream eof	R	std::basic_istringstream::eof											
basic istringstream exceptions	R	std::basic_istringstream::exceptions											
basic istringstream fail	R	std::basic_istringstream::fail											
basic istringstream failure	R	std::basic_istringstream::failure											
basic istringstream failure what	R	std::basic_istringstream::failure::what											
basic istringstream fill	R	std::basic_istringstream::fill											
basic istringstream flags	R	std::basic_istringstream::flags											
basic istringstream gcount	R	std::basic_istringstream::gcount											
basic istringstream get	R	std::basic_istringstream::get											
basic istringstream getline	R	std::basic_istringstream::getline											
basic istringstream getloc	R	std::basic_istringstream::getloc											
basic istringstream good	R	std::basic_istringstream::good											
basic istringstream ignore	R	std::basic_istringstream::ignore											
basic istringstream init	R	std::basic_istringstream::init											
basic istringstream iword	R	std::basic_istringstream::iword											
basic istringstream move	R	std::basic_istringstream::move											
basic istringstream narrow	R	std::basic_istringstream::narrow											
basic istringstream peek	R	std::basic_istringstream::peek											
basic istringstream precision	R	std::basic_istringstream::precision											
basic istringstream putback	R	std::basic_istringstream::putback											
basic istringstream pword	R	std::basic_istringstream::pword											
basic istringstream rdstate	R	std::basic_istringstream::rdstate											
basic istringstream read	R	std::basic_istringstream::read											
basic istringstream readsome	R	std::basic_istringstream::readsome											
basic istringstream register callback	R	std::basic_istringstream::register_callback											
basic istringstream seekg	R	std::basic_istringstream::seekg											
basic istringstream sentry	R	std::basic_istringstream::sentry											
basic istringstream set rdbuf	R	std::basic_istringstream::set_rdbuf											
basic istringstream setf	R	std::basic_istringstream::setf											
basic istringstream setstate	R	std::basic_istringstream::setstate											
basic istringstream str	R	std::basic_istringstream::str											
basic istringstream sync	R	std::basic_istringstream::sync											
basic istringstream sync with stdio	R	std::basic_istringstream::sync_with_stdio											
basic istringstream tellg	R	std::basic_istringstream::tellg											
basic istringstream tie	R	std::basic_istringstream::tie											
basic istringstream unget	R	std::basic_istringstream::unget											
basic istringstream unsetf	R	std::basic_istringstream::unsetf											
basic istringstream widen	R	std::basic_istringstream::widen											
basic istringstream width	R	std::basic_istringstream::width											
basic istringstream xalloc	R	std::basic_istringstream::xalloc											
basic ofstream	R	std::basic_ofstream											
basic ofstream Init	R	std::basic_ofstream::Init											
basic ofstream bad	R	std::basic_ofstream::bad											
basic ofstream clear	R	std::basic_ofstream::clear											
basic ofstream close	R	std::basic_ofstream::close											
basic ofstream constructor	R	std::basic_ofstream::basic_ofstream											
basic ofstream copyfmt	R	std::basic_ofstream::copyfmt											
basic ofstream eof	R	std::basic_ofstream::eof											
basic ofstream exceptions	R	std::basic_ofstream::exceptions											
basic ofstream fail	R	std::basic_ofstream::fail											
basic ofstream failure	R	std::basic_ofstream::failure											
basic ofstream failure what	R	std::basic_ofstream::failure::what											
basic ofstream fill	R	std::basic_ofstream::fill											
basic ofstream flags	R	std::basic_ofstream::flags											
basic ofstream flush	R	std::basic_ofstream::flush											
basic ofstream getloc	R	std::basic_ofstream::getloc											
basic ofstream good	R	std::basic_ofstream::good											
basic ofstream init	R	std::basic_ofstream::init											
basic ofstream is open	R	std::basic_ofstream::is_open											
basic ofstream iword	R	std::basic_ofstream::iword											
basic ofstream move	R	std::basic_ofstream::move											
basic ofstream narrow	R	std::basic_ofstream::narrow											
basic ofstream open	R	std::basic_ofstream::open											
basic ofstream precision	R	std::basic_ofstream::precision											
basic ofstream put	R	std::basic_ofstream::put											
basic ofstream pword	R	std::basic_ofstream::pword											
basic ofstream rdstate	R	std::basic_ofstream::rdstate											
basic ofstream register callback	R	std::basic_ofstream::register_callback											
basic ofstream seekp	R	std::basic_ofstream::seekp											
basic ofstream sentry	R	std::basic_ofstream::sentry											
basic ofstream set rdbuf	R	std::basic_ofstream::set_rdbuf											
basic ofstream setf	R	std::basic_ofstream::setf											
basic ofstream setstate	R	std::basic_ofstream::setstate											
basic ofstream sync with stdio	R	std::basic_ofstream::sync_with_stdio											
basic ofstream tellp	R	std::basic_ofstream::tellp											
basic ofstream tie	R	std::basic_ofstream::tie											
basic ofstream unsetf	R	std::basic_ofstream::unsetf											
basic ofstream widen	R	std::basic_ofstream::widen											
basic ofstream width	R	std::basic_ofstream::width											
basic ofstream write	R	std::basic_ofstream::write											
basic ofstream xalloc	R	std::basic_ofstream::xalloc											
basic ostream	R	std::basic_ostream											
basic ostream Init	R	std::basic_ostream::Init											
basic ostream bad	R	std::basic_ostream::bad											
basic ostream clear	R	std::basic_ostream::clear											
basic ostream constructor	R	std::basic_ostream::basic_ostream											
basic ostream copyfmt	R	std::basic_ostream::copyfmt											
basic ostream destructor	R	std::basic_ostream::~basic_ostream											
basic ostream eof	R	std::basic_ostream::eof											
basic ostream exceptions	R	std::basic_ostream::exceptions											
basic ostream fail	R	std::basic_ostream::fail											
basic ostream failure	R	std::basic_ostream::failure											
basic ostream failure what	R	std::basic_ostream::failure::what											
basic ostream fill	R	std::basic_ostream::fill											
basic ostream flags	R	std::basic_ostream::flags											
basic ostream flush	R	std::basic_ostream::flush											
basic ostream getloc	R	std::basic_ostream::getloc											
basic ostream good	R	std::basic_ostream::good											
basic ostream init	R	std::basic_ostream::init											
basic ostream iword	R	std::basic_ostream::iword											
basic ostream move	R	std::basic_ostream::move											
basic ostream narrow	R	std::basic_ostream::narrow											
basic ostream precision	R	std::basic_ostream::precision											
basic ostream put	R	std::basic_ostream::put											
basic ostream pword	R	std::basic_ostream::pword											
basic ostream rdbuf	R	std::basic_ostream::rdbuf											
basic ostream rdstate	R	std::basic_ostream::rdstate											
basic ostream register callback	R	std::basic_ostream::register_callback											
basic ostream seekp	R	std::basic_ostream::seekp											
basic ostream sentry	R	std::basic_ostream::sentry											
basic ostream set rdbuf	R	std::basic_ostream::set_rdbuf											
basic ostream setf	R	std::basic_ostream::setf											
basic ostream setstate	R	std::basic_ostream::setstate											
basic ostream swap	R	std::basic_ostream::swap											
basic ostream sync with stdio	R	std::basic_ostream::sync_with_stdio											
basic ostream tellp	R	std::basic_ostream::tellp											
basic ostream tie	R	std::basic_ostream::tie											
basic ostream unsetf	R	std::basic_ostream::unsetf											
basic ostream widen	R	std::basic_ostream::widen											
basic ostream width	R	std::basic_ostream::width											
basic ostream write	R	std::basic_ostream::write											
basic ostream xalloc	R	std::basic_ostream::xalloc											
basic ostringstream	R	std::basic_ostringstream											
basic ostringstream Init	R	std::basic_ostringstream::Init											
basic ostringstream bad	R	std::basic_ostringstream::bad											
basic ostringstream clear	R	std::basic_ostringstream::clear											
basic ostringstream constructor	R	std::basic_ostringstream::basic_ostringstream											
basic ostringstream copyfmt	R	std::basic_ostringstream::copyfmt											
basic ostringstream eof	R	std::basic_ostringstream::eof											
basic ostringstream exceptions	R	std::basic_ostringstream::exceptions											
basic ostringstream fail	R	std::basic_ostringstream::fail											
basic ostringstream failure	R	std::basic_ostringstream::failure											
basic ostringstream failure what	R	std::basic_ostringstream::failure::what											
basic ostringstream fill	R	std::basic_ostringstream::fill											
basic ostringstream flags	R	std::basic_ostringstream::flags											
basic ostringstream flush	R	std::basic_ostringstream::flush											
basic ostringstream getloc	R	std::basic_ostringstream::getloc											
basic ostringstream good	R	std::basic_ostringstream::good											
basic ostringstream init	R	std::basic_ostringstream::init											
basic ostringstream iword	R	std::basic_ostringstream::iword											
basic ostringstream move	R	std::basic_ostringstream::move											
basic ostringstream narrow	R	std::basic_ostringstream::narrow											
basic ostringstream precision	R	std::basic_ostringstream::precision											
basic ostringstream put	R	std::basic_ostringstream::put											
basic ostringstream pword	R	std::basic_ostringstream::pword											
basic ostringstream rdstate	R	std::basic_ostringstream::rdstate											
basic ostringstream register callback	R	std::basic_ostringstream::register_callback											
basic ostringstream seekp	R	std::basic_ostringstream::seekp											
basic ostringstream sentry	R	std::basic_ostringstream::sentry											
basic ostringstream set rdbuf	R	std::basic_ostringstream::set_rdbuf											
basic ostringstream setf	R	std::basic_ostringstream::setf											
basic ostringstream setstate	R	std::basic_ostringstream::setstate											
basic ostringstream str	R	std::basic_ostringstream::str											
basic ostringstream sync with stdio	R	std::basic_ostringstream::sync_with_stdio											
basic ostringstream tellp	R	std::basic_ostringstream::tellp											
basic ostringstream tie	R	std::basic_ostringstream::tie											
basic ostringstream unsetf	R	std::basic_ostringstream::unsetf											
basic ostringstream widen	R	std::basic_ostringstream::widen											
basic ostringstream width	R	std::basic_ostringstream::width											
basic ostringstream write	R	std::basic_ostringstream::write											
basic ostringstream xalloc	R	std::basic_ostringstream::xalloc											
basic regex	R	std::basic_regex											
basic regex assign	R	std::basic_regex::assign											
basic regex constructor	R	std::basic_regex::basic_regex											
basic regex flags	R	std::basic_regex::flags											
basic regex getloc	R	std::basic_regex::getloc											
basic regex imbue	R	std::basic_regex::imbue											
basic regex mark count	R	std::basic_regex::mark_count											
basic regex swap	R	std::basic_regex::swap											
basic streambuf	R	std::basic_streambuf											
basic streambuf destructor	R	std::basic_streambuf::~basic_streambuf											
basic streambuf eback	R	std::basic_streambuf::eback											
basic streambuf egptr	R	std::basic_streambuf::egptr											
basic streambuf epptr	R	std::basic_streambuf::epptr											
basic streambuf gbump	R	std::basic_streambuf::gbump											
basic streambuf getloc	R	std::basic_streambuf::getloc											
basic streambuf gptr	R	std::basic_streambuf::gptr											
basic streambuf imbue	R	std::basic_streambuf::imbue											
basic streambuf in avail	R	std::basic_streambuf::in_avail											
basic streambuf overflow	R	std::basic_streambuf::overflow											
basic streambuf pbackfail	R	std::basic_streambuf::pbackfail											
basic streambuf pbase	R	std::basic_streambuf::pbase											
basic streambuf pbump	R	std::basic_streambuf::pbump											
basic streambuf pptr	R	std::basic_streambuf::pptr											
basic streambuf pubimbue	R	std::basic_streambuf::pubimbue											
basic streambuf pubseekoff	R	std::basic_streambuf::pubseekoff											
basic streambuf pubseekpos	R	std::basic_streambuf::pubseekpos											
basic streambuf pubsync	R	std::basic_streambuf::pubsync											
basic streambuf sbumpc	R	std::basic_streambuf::sbumpc											
basic streambuf seekoff	R	std::basic_streambuf::seekoff											
basic streambuf seekpos	R	std::basic_streambuf::seekpos											
basic streambuf setg	R	std::basic_streambuf::setg											
basic streambuf setp	R	std::basic_streambuf::setp											
basic streambuf sgetc	R	std::basic_streambuf::sgetc											
basic streambuf showmanyc	R	std::basic_streambuf::showmanyc											
basic streambuf snextc	R	std::basic_streambuf::snextc											
basic streambuf sputbackc	R	std::basic_streambuf::sputbackc											
basic streambuf sputc	R	std::basic_streambuf::sputc											
basic streambuf sungetc	R	std::basic_streambuf::sungetc											
basic streambuf swap	R	std::basic_streambuf::swap											
basic streambuf sync	R	std::basic_streambuf::sync											
basic streambuf uflow	R	std::basic_streambuf::uflow											
basic streambuf underflow	R	std::basic_streambuf::underflow											
basic string	R	std::basic_string											
basic string append	R	std::basic_string::append											
basic string assign	R	std::basic_string::assign											
basic string at	R	std::basic_string::at											
basic string back	R	std::basic_string::back											
basic string begin	R	std::basic_string::begin											
basic string c str	R	std::basic_string::c_str											
basic string capacity	R	std::basic_string::capacity											
basic string cbegin	R	std::basic_string::cbegin											
basic string cend	R	std::basic_string::cend											
basic string clear	R	std::basic_string::clear											
basic string compare	R	std::basic_string::compare											
basic string constructor	R	std::basic_string::basic_string											
basic string copy	R	std::basic_string::copy											
basic string crbegin	R	std::basic_string::crbegin											
basic string crend	R	std::basic_string::crend											
basic string data	R	std::basic_string::data											
basic string empty	R	std::basic_string::empty											
basic string end	R	std::basic_string::end											
basic string erase	R	std::basic_string::erase											
basic string find	R	std::basic_string::find											
basic string find first not of	R	std::basic_string::find_first_not_of											
basic string find first of	R	std::basic_string::find_first_of											
basic string find last not of	R	std::basic_string::find_last_not_of											
basic string find last of	R	std::basic_string::find_last_of											
basic string front	R	std::basic_string::front											
basic string get allocator	R	std::basic_string::get_allocator											
basic string insert	R	std::basic_string::insert											
basic string length	R	std::basic_string::length											
basic string max size	R	std::basic_string::max_size											
basic string pop back	R	std::basic_string::pop_back											
basic string push back	R	std::basic_string::push_back											
basic string rbegin	R	std::basic_string::rbegin											
basic string rend	R	std::basic_string::rend											
basic string replace	R	std::basic_string::replace											
basic string reserve	R	std::basic_string::reserve											
basic string resize	R	std::basic_string::resize											
basic string rfind	R	std::basic_string::rfind											
basic string shrink to fit	R	std::basic_string::shrink_to_fit											
basic string size	R	std::basic_string::size											
basic string substr	R	std::basic_string::substr											
basic string swap	R	std::basic_string::swap											
basic string view	R	std::basic_string_view											
basic string view at	R	std::basic_string_view::at											
basic string view back	R	std::basic_string_view::back											
basic string view begin	R	std::basic_string_view::begin											
basic string view cbegin	R	std::basic_string_view::cbegin											
basic string view cend	R	std::basic_string_view::cend											
basic string view compare	R	std::basic_string_view::compare											
basic string view copy	R	std::basic_string_view::copy											
basic string view crbegin	R	std::basic_string_view::crbegin											
basic string view crend	R	std::basic_string_view::crend											
basic string view data	R	std::basic_string_view::data											
basic string view empty	R	std::basic_string_view::empty											
basic string view end	R	std::basic_string_view::end											
basic string view find	R	std::basic_string_view::find											
basic string view find first not of	R	std::basic_string_view::find_first_not_of											
basic string view find first of	R	std::basic_string_view::find_first_of											
basic string view find last not of	R	std::basic_string_view::find_last_not_of											
basic string view find last of	R	std::basic_string_view::find_last_of											
basic string view front	R	std::basic_string_view::front											
basic string view length	R	std::basic_string_view::length											
basic string view max size	R	std::basic_string_view::max_size											
basic string view rbegin	R	std::basic_string_view::rbegin											
basic string view remove prefix	R	std::basic_string_view::remove_prefix											
basic string view remove suffix	R	std::basic_string_view::remove_suffix											
basic string view rend	R	std::basic_string_view::rend											
basic string view rfind	R	std::basic_string_view::rfind											
basic string view size	R	std::basic_string_view::size											
basic string view substr	R	std::basic_string_view::substr											
basic string view swap	R	std::basic_string_view::swap											
basic string view to string	R	std::experimental::basic_string_view::to_string											
basic stringbuf	R	std::basic_stringbuf											
basic stringbuf eback	R	std::basic_stringbuf::eback											
basic stringbuf egptr	R	std::basic_stringbuf::egptr											
basic stringbuf epptr	R	std::basic_stringbuf::epptr											
basic stringbuf gbump	R	std::basic_stringbuf::gbump											
basic stringbuf getloc	R	std::basic_stringbuf::getloc											
basic stringbuf gptr	R	std::basic_stringbuf::gptr											
basic stringbuf imbue	R	std::basic_stringbuf::imbue											
basic stringbuf in avail	R	std::basic_stringbuf::in_avail											
basic stringbuf pbase	R	std::basic_stringbuf::pbase											
basic stringbuf pbump	R	std::basic_stringbuf::pbump											
basic stringbuf pptr	R	std::basic_stringbuf::pptr											
basic stringbuf pubimbue	R	std::basic_stringbuf::pubimbue											
basic stringbuf pubseekoff	R	std::basic_stringbuf::pubseekoff											
basic stringbuf pubseekpos	R	std::basic_stringbuf::pubseekpos											
basic stringbuf pubsync	R	std::basic_stringbuf::pubsync											
basic stringbuf sbumpc	R	std::basic_stringbuf::sbumpc											
basic stringbuf setbuf	R	std::basic_stringbuf::setbuf											
basic stringbuf setg	R	std::basic_stringbuf::setg											
basic stringbuf setp	R	std::basic_stringbuf::setp											
basic stringbuf sgetc	R	std::basic_stringbuf::sgetc											
basic stringbuf showmanyc	R	std::basic_stringbuf::showmanyc											
basic stringbuf snextc	R	std::basic_stringbuf::snextc											
basic stringbuf sputbackc	R	std::basic_stringbuf::sputbackc											
basic stringbuf sputc	R	std::basic_stringbuf::sputc											
basic stringbuf str	R	std::basic_stringbuf::str											
basic stringbuf sungetc	R	std::basic_stringbuf::sungetc											
basic stringbuf sync	R	std::basic_stringbuf::sync											
basic stringbuf uflow	R	std::basic_stringbuf::uflow											
basic stringstream	R	std::basic_stringstream											
basic stringstream Init	R	std::basic_stringstream::Init											
basic stringstream bad	R	std::basic_stringstream::bad											
basic stringstream clear	R	std::basic_stringstream::clear											
basic stringstream constructor	R	std::basic_stringstream::basic_stringstream											
basic stringstream copyfmt	R	std::basic_stringstream::copyfmt											
basic stringstream eof	R	std::basic_stringstream::eof											
basic stringstream exceptions	R	std::basic_stringstream::exceptions											
basic stringstream fail	R	std::basic_stringstream::fail											
basic stringstream failure	R	std::basic_stringstream::failure											
basic stringstream failure what	R	std::basic_stringstream::failure::what											
basic stringstream fill	R	std::basic_stringstream::fill											
basic stringstream flags	R	std::basic_stringstream::flags											
basic stringstream flush	R	std::basic_stringstream::flush											
basic stringstream gcount	R	std::basic_stringstream::gcount											
basic stringstream get	R	std::basic_stringstream::get											
basic stringstream getline	R	std::basic_stringstream::getline											
basic stringstream getloc	R	std::basic_stringstream::getloc											
basic stringstream good	R	std::basic_stringstream::good											
basic stringstream ignore	R	std::basic_stringstream::ignore											
basic stringstream init	R	std::basic_stringstream::init											
basic stringstream iword	R	std::basic_stringstream::iword											
basic stringstream move	R	std::basic_stringstream::move											
basic stringstream narrow	R	std::basic_stringstream::narrow											
basic stringstream peek	R	std::basic_stringstream::peek											
basic stringstream precision	R	std::basic_stringstream::precision											
basic stringstream put	R	std::basic_stringstream::put											
basic stringstream putback	R	std::basic_stringstream::putback											
basic stringstream pword	R	std::basic_stringstream::pword											
basic stringstream rdstate	R	std::basic_stringstream::rdstate											
basic stringstream read	R	std::basic_stringstream::read											
basic stringstream readsome	R	std::basic_stringstream::readsome											
basic stringstream register callback	R	std::basic_stringstream::register_callback											
basic stringstream seekg	R	std::basic_stringstream::seekg											
basic stringstream seekp	R	std::basic_stringstream::seekp											
basic stringstream set rdbuf	R	std::basic_stringstream::set_rdbuf											
basic stringstream setf	R	std::basic_stringstream::setf											
basic stringstream setstate	R	std::basic_stringstream::setstate											
basic stringstream str	R	std::basic_stringstream::str											
basic stringstream sync	R	std::basic_stringstream::sync											
basic stringstream sync with stdio	R	std::basic_stringstream::sync_with_stdio											
basic stringstream tellg	R	std::basic_stringstream::tellg											
basic stringstream tellp	R	std::basic_stringstream::tellp											
basic stringstream tie	R	std::basic_stringstream::tie											
basic stringstream unget	R	std::basic_stringstream::unget											
basic stringstream unsetf	R	std::basic_stringstream::unsetf											
basic stringstream widen	R	std::basic_stringstream::widen											
basic stringstream width	R	std::basic_stringstream::width											
basic stringstream write	R	std::basic_stringstream::write											
basic stringstream xalloc	R	std::basic_stringstream::xalloc											
basic_filebuf	R	std::basic_filebuf											
basic_filebuf close	R	std::basic_filebuf::close											
basic_filebuf constructor	R	std::basic_filebuf::basic_filebuf											
basic_filebuf eback	R	std::basic_filebuf::eback											
basic_filebuf egptr	R	std::basic_filebuf::egptr											
basic_filebuf epptr	R	std::basic_filebuf::epptr											
basic_filebuf gbump	R	std::basic_filebuf::gbump											
basic_filebuf getloc	R	std::basic_filebuf::getloc											
basic_filebuf gptr	R	std::basic_filebuf::gptr											
basic_filebuf in_avail	R	std::basic_filebuf::in_avail											
basic_filebuf is_open	R	std::basic_filebuf::is_open											
basic_filebuf open	R	std::basic_filebuf::open											
basic_filebuf pbase	R	std::basic_filebuf::pbase											
basic_filebuf pbump	R	std::basic_filebuf::pbump											
basic_filebuf pptr	R	std::basic_filebuf::pptr											
basic_filebuf pubimbue	R	std::basic_filebuf::pubimbue											
basic_filebuf pubseekoff	R	std::basic_filebuf::pubseekoff											
basic_filebuf pubseekpos	R	std::basic_filebuf::pubseekpos											
basic_filebuf pubsetbuf	R	std::basic_filebuf::pubsetbuf											
basic_filebuf pubsync	R	std::basic_filebuf::pubsync											
basic_filebuf sbumpc	R	std::basic_filebuf::sbumpc											
basic_filebuf setg	R	std::basic_filebuf::setg											
basic_filebuf setp	R	std::basic_filebuf::setp											
basic_filebuf sgetc	R	std::basic_filebuf::sgetc											
basic_filebuf sgetn	R	std::basic_filebuf::sgetn											
basic_filebuf snextc	R	std::basic_filebuf::snextc											
basic_filebuf sputbackc	R	std::basic_filebuf::sputbackc											
basic_filebuf sputc	R	std::basic_filebuf::sputc											
basic_filebuf sputn	R	std::basic_filebuf::sputn											
basic_filebuf sungetc	R	std::basic_filebuf::sungetc											
basic_filebuf xsgetn	R	std::basic_filebuf::xsgetn											
basic_filebuf xsputn	R	std::basic_filebuf::xsputn											
basic_fstream	R	std::basic_fstream											
basic_fstream Init	R	std::basic_fstream::Init											
basic_fstream bad	R	std::basic_fstream::bad											
basic_fstream clear	R	std::basic_fstream::clear											
basic_fstream close	R	std::basic_fstream::close											
basic_fstream constructor	R	std::basic_fstream::basic_fstream											
basic_fstream copyfmt	R	std::basic_fstream::copyfmt											
basic_fstream eof	R	std::basic_fstream::eof											
basic_fstream exceptions	R	std::basic_fstream::exceptions											
basic_fstream fail	R	std::basic_fstream::fail											
basic_fstream failure	R	std::basic_fstream::failure											
basic_fstream failure what	R	std::basic_fstream::failure::what											
basic_fstream fill	R	std::basic_fstream::fill											
basic_fstream flags	R	std::basic_fstream::flags											
basic_fstream flush	R	std::basic_fstream::flush											
basic_fstream gcount	R	std::basic_fstream::gcount											
basic_fstream get	R	std::basic_fstream::get											
basic_fstream getline	R	std::basic_fstream::getline											
basic_fstream getloc	R	std::basic_fstream::getloc											
basic_fstream good	R	std::basic_fstream::good											
basic_fstream ignore	R	std::basic_fstream::ignore											
basic_fstream init	R	std::basic_fstream::init											
basic_fstream is_open	R	std::basic_fstream::is_open											
basic_fstream iword	R	std::basic_fstream::iword											
basic_fstream move	R	std::basic_fstream::move											
basic_fstream narrow	R	std::basic_fstream::narrow											
basic_fstream open	R	std::basic_fstream::open											
basic_fstream peek	R	std::basic_fstream::peek											
basic_fstream precision	R	std::basic_fstream::precision											
basic_fstream put	R	std::basic_fstream::put											
basic_fstream putback	R	std::basic_fstream::putback											
basic_fstream pword	R	std::basic_fstream::pword											
basic_fstream rdstate	R	std::basic_fstream::rdstate											
basic_fstream read	R	std::basic_fstream::read											
basic_fstream readsome	R	std::basic_fstream::readsome											
basic_fstream register_callback	R	std::basic_fstream::register_callback											
basic_fstream seekg	R	std::basic_fstream::seekg											
basic_fstream seekp	R	std::basic_fstream::seekp											
basic_fstream set_rdbuf	R	std::basic_fstream::set_rdbuf											
basic_fstream setf	R	std::basic_fstream::setf											
basic_fstream setstate	R	std::basic_fstream::setstate											
basic_fstream sync	R	std::basic_fstream::sync											
basic_fstream sync_with_stdio	R	std::basic_fstream::sync_with_stdio											
basic_fstream tellg	R	std::basic_fstream::tellg											
basic_fstream tellp	R	std::basic_fstream::tellp											
basic_fstream tie	R	std::basic_fstream::tie											
basic_fstream unget	R	std::basic_fstream::unget											
basic_fstream unsetf	R	std::basic_fstream::unsetf											
basic_fstream widen	R	std::basic_fstream::widen											
basic_fstream width	R	std::basic_fstream::width											
basic_fstream write	R	std::basic_fstream::write											
basic_fstream xalloc	R	std::basic_fstream::xalloc											
basic_ifstream	R	std::basic_ifstream											
basic_ifstream Init	R	std::basic_ifstream::Init											
basic_ifstream bad	R	std::basic_ifstream::bad											
basic_ifstream clear	R	std::basic_ifstream::clear											
basic_ifstream close	R	std::basic_ifstream::close											
basic_ifstream constructor	R	std::basic_ifstream::basic_ifstream											
basic_ifstream copyfmt	R	std::basic_ifstream::copyfmt											
basic_ifstream eof	R	std::basic_ifstream::eof											
basic_ifstream exceptions	R	std::basic_ifstream::exceptions											
basic_ifstream fail	R	std::basic_ifstream::fail											
basic_ifstream failure	R	std::basic_ifstream::failure											
basic_ifstream failure what	R	std::basic_ifstream::failure::what											
basic_ifstream fill	R	std::basic_ifstream::fill											
basic_ifstream flags	R	std::basic_ifstream::flags											
basic_ifstream gcount	R	std::basic_ifstream::gcount											
basic_ifstream get	R	std::basic_ifstream::get											
basic_ifstream getline	R	std::basic_ifstream::getline											
basic_ifstream getloc	R	std::basic_ifstream::getloc											
basic_ifstream good	R	std::basic_ifstream::good											
basic_ifstream ignore	R	std::basic_ifstream::ignore											
basic_ifstream init	R	std::basic_ifstream::init											
basic_ifstream is_open	R	std::basic_ifstream::is_open											
basic_ifstream iword	R	std::basic_ifstream::iword											
basic_ifstream move	R	std::basic_ifstream::move											
basic_ifstream narrow	R	std::basic_ifstream::narrow											
basic_ifstream open	R	std::basic_ifstream::open											
basic_ifstream peek	R	std::basic_ifstream::peek											
basic_ifstream precision	R	std::basic_ifstream::precision											
basic_ifstream putback	R	std::basic_ifstream::putback											
basic_ifstream pword	R	std::basic_ifstream::pword											
basic_ifstream rdstate	R	std::basic_ifstream::rdstate											
basic_ifstream read	R	std::basic_ifstream::read											
basic_ifstream readsome	R	std::basic_ifstream::readsome											
basic_ifstream register_callback	R	std::basic_ifstream::register_callback											
basic_ifstream seekg	R	std::basic_ifstream::seekg											
basic_ifstream sentry	R	std::basic_ifstream::sentry											
basic_ifstream set_rdbuf	R	std::basic_ifstream::set_rdbuf											
basic_ifstream setf	R	std::basic_ifstream::setf											
basic_ifstream setstate	R	std::basic_ifstream::setstate											
basic_ifstream sync	R	std::basic_ifstream::sync											
basic_ifstream sync_with_stdio	R	std::basic_ifstream::sync_with_stdio											
basic_ifstream tellg	R	std::basic_ifstream::tellg											
basic_ifstream tie	R	std::basic_ifstream::tie											
basic_ifstream unget	R	std::basic_ifstream::unget											
basic_ifstream unsetf	R	std::basic_ifstream::unsetf											
basic_ifstream widen	R	std::basic_ifstream::widen											
basic_ifstream width	R	std::basic_ifstream::width											
basic_ifstream xalloc	R	std::basic_ifstream::xalloc											
basic_ios	R	std::basic_ios											
basic_ios Init	R	std::basic_ios::Init											
basic_ios bad	R	std::basic_ios::bad											
basic_ios clear	R	std::basic_ios::clear											
basic_ios constructor	R	std::basic_ios::basic_ios											
basic_ios copyfmt	R	std::basic_ios::copyfmt											
basic_ios destructor	R	std::basic_ios::~basic_ios											
basic_ios eof	R	std::basic_ios::eof											
basic_ios exceptions	R	std::basic_ios::exceptions											
basic_ios fail	R	std::basic_ios::fail											
basic_ios failure	R	std::basic_ios::failure											
basic_ios failure what	R	std::basic_ios::failure::what											
basic_ios fill	R	std::basic_ios::fill											
basic_ios flags	R	std::basic_ios::flags											
basic_ios getloc	R	std::basic_ios::getloc											
basic_ios good	R	std::basic_ios::good											
basic_ios init	R	std::basic_ios::init											
basic_ios iword	R	std::basic_ios::iword											
basic_ios move	R	std::basic_ios::move											
basic_ios narrow	R	std::basic_ios::narrow											
basic_ios precision	R	std::basic_ios::precision											
basic_ios pword	R	std::basic_ios::pword											
basic_ios rdbuf	R	std::basic_ios::rdbuf											
basic_ios rdstate	R	std::basic_ios::rdstate											
basic_ios register_callback	R	std::basic_ios::register_callback											
basic_ios set_rdbuf	R	std::basic_ios::set_rdbuf											
basic_ios setf	R	std::basic_ios::setf											
basic_ios setstate	R	std::basic_ios::setstate											
basic_ios swap	R	std::basic_ios::swap											
basic_ios sync_with_stdio	R	std::basic_ios::sync_with_stdio											
basic_ios tie	R	std::basic_ios::tie											
basic_ios unsetf	R	std::basic_ios::unsetf											
basic_ios widen	R	std::basic_ios::widen											
basic_ios width	R	std::basic_ios::width											
basic_ios xalloc	R	std::basic_ios::xalloc											
basic_iostream	R	std::basic_iostream											
basic_iostream Init	R	std::basic_iostream::Init											
basic_iostream bad	R	std::basic_iostream::bad											
basic_iostream clear	R	std::basic_iostream::clear											
basic_iostream constructor	R	std::basic_iostream::basic_iostream											
basic_iostream copyfmt	R	std::basic_iostream::copyfmt											
basic_iostream destructor	R	std::basic_iostream::~basic_iostream											
basic_iostream eof	R	std::basic_iostream::eof											
basic_iostream exceptions	R	std::basic_iostream::exceptions											
basic_iostream fail	R	std::basic_iostream::fail											
basic_iostream failure	R	std::basic_iostream::failure											
basic_iostream failure what	R	std::basic_iostream::failure::what											
basic_iostream fill	R	std::basic_iostream::fill											
basic_iostream flags	R	std::basic_iostream::flags											
basic_iostream flush	R	std::basic_iostream::flush											
basic_iostream gcount	R	std::basic_iostream::gcount											
basic_iostream get	R	std::basic_iostream::get											
basic_iostream getline	R	std::basic_iostream::getline											
basic_iostream getloc	R	std::basic_iostream::getloc											
basic_iostream good	R	std::basic_iostream::good											
basic_iostream ignore	R	std::basic_iostream::ignore											
basic_iostream init	R	std::basic_iostream::init											
basic_iostream iword	R	std::basic_iostream::iword											
basic_iostream move	R	std::basic_iostream::move											
basic_iostream narrow	R	std::basic_iostream::narrow											
basic_iostream peek	R	std::basic_iostream::peek											
basic_iostream precision	R	std::basic_iostream::precision											
basic_iostream put	R	std::basic_iostream::put											
basic_iostream putback	R	std::basic_iostream::putback											
basic_iostream pword	R	std::basic_iostream::pword											
basic_iostream rdbuf	R	std::basic_iostream::rdbuf											
basic_iostream rdstate	R	std::basic_iostream::rdstate											
basic_iostream read	R	std::basic_iostream::read											
basic_iostream readsome	R	std::basic_iostream::readsome											
basic_iostream register_callback	R	std::basic_iostream::register_callback											
basic_iostream seekg	R	std::basic_iostream::seekg											
basic_iostream seekp	R	std::basic_iostream::seekp											
basic_iostream set_rdbuf	R	std::basic_iostream::set_rdbuf											
basic_iostream setf	R	std::basic_iostream::setf											
basic_iostream setstate	R	std::basic_iostream::setstate											
basic_iostream swap	R	std::basic_iostream::swap											
basic_iostream sync	R	std::basic_iostream::sync											
basic_iostream sync_with_stdio	R	std::basic_iostream::sync_with_stdio											
basic_iostream tellg	R	std::basic_iostream::tellg											
basic_iostream tellp	R	std::basic_iostream::tellp											
basic_iostream tie	R	std::basic_iostream::tie											
basic_iostream unget	R	std::basic_iostream::unget											
basic_iostream unsetf	R	std::basic_iostream::unsetf											
basic_iostream widen	R	std::basic_iostream::widen											
basic_iostream width	R	std::basic_iostream::width											
basic_iostream write	R	std::basic_iostream::write											
basic_iostream xalloc	R	std::basic_iostream::xalloc											
basic_istream	R	std::basic_istream											
basic_istream Init	R	std::basic_istream::Init											
basic_istream bad	R	std::basic_istream::bad											
basic_istream clear	R	std::basic_istream::clear											
basic_istream constructor	R	std::basic_istream::basic_istream											
basic_istream copyfmt	R	std::basic_istream::copyfmt											
basic_istream destructor	R	std::basic_istream::~basic_istream											
basic_istream eof	R	std::basic_istream::eof											
basic_istream exceptions	R	std::basic_istream::exceptions											
basic_istream fail	R	std::basic_istream::fail											
basic_istream failure	R	std::basic_istream::failure											
basic_istream failure what	R	std::basic_istream::failure::what											
basic_istream fill	R	std::basic_istream::fill											
basic_istream flags	R	std::basic_istream::flags											
basic_istream gcount	R	std::basic_istream::gcount											
basic_istream get	R	std::basic_istream::get											
basic_istream getline	R	std::basic_istream::getline											
basic_istream getloc	R	std::basic_istream::getloc											
basic_istream good	R	std::basic_istream::good											
basic_istream ignore	R	std::basic_istream::ignore											
basic_istream init	R	std::basic_istream::init											
basic_istream iword	R	std::basic_istream::iword											
basic_istream move	R	std::basic_istream::move											
basic_istream narrow	R	std::basic_istream::narrow											
basic_istream peek	R	std::basic_istream::peek											
basic_istream precision	R	std::basic_istream::precision											
basic_istream putback	R	std::basic_istream::putback											
basic_istream pword	R	std::basic_istream::pword											
basic_istream rdbuf	R	std::basic_istream::rdbuf											
basic_istream rdstate	R	std::basic_istream::rdstate											
basic_istream read	R	std::basic_istream::read											
basic_istream readsome	R	std::basic_istream::readsome											
basic_istream register_callback	R	std::basic_istream::register_callback											
basic_istream seekg	R	std::basic_istream::seekg											
basic_istream sentry	R	std::basic_istream::sentry											
basic_istream set_rdbuf	R	std::basic_istream::set_rdbuf											
basic_istream setf	R	std::basic_istream::setf											
basic_istream setstate	R	std::basic_istream::setstate											
basic_istream swap	R	std::basic_istream::swap											
basic_istream sync	R	std::basic_istream::sync											
basic_istream sync_with_stdio	R	std::basic_istream::sync_with_stdio											
basic_istream tellg	R	std::basic_istream::tellg											
basic_istream tie	R	std::basic_istream::tie											
basic_istream unget	R	std::basic_istream::unget											
basic_istream unsetf	R	std::basic_istream::unsetf											
basic_istream widen	R	std::basic_istream::widen											
basic_istream width	R	std::basic_istream::width											
basic_istream xalloc	R	std::basic_istream::xalloc											
basic_istringstream	R	std::basic_istringstream											
basic_istringstream Init	R	std::basic_istringstream::Init											
basic_istringstream bad	R	std::basic_istringstream::bad											
basic_istringstream clear	R	std::basic_istringstream::clear											
basic_istringstream constructor	R	std::basic_istringstream::basic_istringstream											
basic_istringstream copyfmt	R	std::basic_istringstream::copyfmt											
basic_istringstream eof	R	std::basic_istringstream::eof											
basic_istringstream exceptions	R	std::basic_istringstream::exceptions											
basic_istringstream fail	R	std::basic_istringstream::fail											
basic_istringstream failure	R	std::basic_istringstream::failure											
basic_istringstream failure what	R	std::basic_istringstream::failure::what											
basic_istringstream fill	R	std::basic_istringstream::fill											
basic_istringstream flags	R	std::basic_istringstream::flags											
basic_istringstream gcount	R	std::basic_istringstream::gcount											
basic_istringstream get	R	std::basic_istringstream::get											
basic_istringstream getline	R	std::basic_istringstream::getline											
basic_istringstream getloc	R	std::basic_istringstream::getloc											
basic_istringstream good	R	std::basic_istringstream::good											
basic_istringstream ignore	R	std::basic_istringstream::ignore											
basic_istringstream init	R	std::basic_istringstream::init											
basic_istringstream iword	R	std::basic_istringstream::iword											
basic_istringstream move	R	std::basic_istringstream::move											
basic_istringstream narrow	R	std::basic_istringstream::narrow											
basic_istringstream peek	R	std::basic_istringstream::peek											
basic_istringstream precision	R	std::basic_istringstream::precision											
basic_istringstream putback	R	std::basic_istringstream::putback											
basic_istringstream pword	R	std::basic_istringstream::pword											
basic_istringstream rdstate	R	std::basic_istringstream::rdstate											
basic_istringstream read	R	std::basic_istringstream::read											
basic_istringstream readsome	R	std::basic_istringstream::readsome											
basic_istringstream register_callback	R	std::basic_istringstream::register_callback											
basic_istringstream seekg	R	std::basic_istringstream::seekg											
basic_istringstream sentry	R	std::basic_istringstream::sentry											
basic_istringstream set_rdbuf	R	std::basic_istringstream::set_rdbuf											
basic_istringstream setf	R	std::basic_istringstream::setf											
basic_istringstream setstate	R	std::basic_istringstream::setstate											
basic_istringstream str	R	std::basic_istringstream::str											
basic_istringstream sync	R	std::basic_istringstream::sync											
basic_istringstream sync_with_stdio	R	std::basic_istringstream::sync_with_stdio											
basic_istringstream tellg	R	std::basic_istringstream::tellg											
basic_istringstream tie	R	std::basic_istringstream::tie											
basic_istringstream unget	R	std::basic_istringstream::unget											
basic_istringstream unsetf	R	std::basic_istringstream::unsetf											
basic_istringstream widen	R	std::basic_istringstream::widen											
basic_istringstream width	R	std::basic_istringstream::width											
basic_istringstream xalloc	R	std::basic_istringstream::xalloc											
basic_ofstream	R	std::basic_ofstream											
basic_ofstream Init	R	std::basic_ofstream::Init											
basic_ofstream bad	R	std::basic_ofstream::bad											
basic_ofstream clear	R	std::basic_ofstream::clear											
basic_ofstream close	R	std::basic_ofstream::close											
basic_ofstream constructor	R	std::basic_ofstream::basic_ofstream											
basic_ofstream copyfmt	R	std::basic_ofstream::copyfmt											
basic_ofstream eof	R	std::basic_ofstream::eof											
basic_ofstream exceptions	R	std::basic_ofstream::exceptions											
basic_ofstream fail	R	std::basic_ofstream::fail											
basic_ofstream failure	R	std::basic_ofstream::failure											
basic_ofstream failure what	R	std::basic_ofstream::failure::what											
basic_ofstream fill	R	std::basic_ofstream::fill											
basic_ofstream flags	R	std::basic_ofstream::flags											
basic_ofstream flush	R	std::basic_ofstream::flush											
basic_ofstream getloc	R	std::basic_ofstream::getloc											
basic_ofstream good	R	std::basic_ofstream::good											
basic_ofstream init	R	std::basic_ofstream::init											
basic_ofstream is_open	R	std::basic_ofstream::is_open											
basic_ofstream iword	R	std::basic_ofstream::iword											
basic_ofstream move	R	std::basic_ofstream::move											
basic_ofstream narrow	R	std::basic_ofstream::narrow											
basic_ofstream open	R	std::basic_ofstream::open											
basic_ofstream precision	R	std::basic_ofstream::precision											
basic_ofstream put	R	std::basic_ofstream::put											
basic_ofstream pword	R	std::basic_ofstream::pword											
basic_ofstream rdstate	R	std::basic_ofstream::rdstate											
basic_ofstream register_callback	R	std::basic_ofstream::register_callback											
basic_ofstream seekp	R	std::basic_ofstream::seekp											
basic_ofstream sentry	R	std::basic_ofstream::sentry											
basic_ofstream set_rdbuf	R	std::basic_ofstream::set_rdbuf											
basic_ofstream setf	R	std::basic_ofstream::setf											
basic_ofstream setstate	R	std::basic_ofstream::setstate											
basic_ofstream sync_with_stdio	R	std::basic_ofstream::sync_with_stdio											
basic_ofstream tellp	R	std::basic_ofstream::tellp											
basic_ofstream tie	R	std::basic_ofstream::tie											
basic_ofstream unsetf	R	std::basic_ofstream::unsetf											
basic_ofstream widen	R	std::basic_ofstream::widen											
basic_ofstream width	R	std::basic_ofstream::width											
basic_ofstream write	R	std::basic_ofstream::write											
basic_ofstream xalloc	R	std::basic_ofstream::xalloc											
basic_ostream	R	std::basic_ostream											
basic_ostream Init	R	std::basic_ostream::Init											
basic_ostream bad	R	std::basic_ostream::bad											
basic_ostream clear	R	std::basic_ostream::clear											
basic_ostream constructor	R	std::basic_ostream::basic_ostream											
basic_ostream copyfmt	R	std::basic_ostream::copyfmt											
basic_ostream destructor	R	std::basic_ostream::~basic_ostream											
basic_ostream eof	R	std::basic_ostream::eof											
basic_ostream exceptions	R	std::basic_ostream::exceptions											
basic_ostream fail	R	std::basic_ostream::fail											
basic_ostream failure	R	std::basic_ostream::failure											
basic_ostream failure what	R	std::basic_ostream::failure::what											
basic_ostream fill	R	std::basic_ostream::fill											
basic_ostream flags	R	std::basic_ostream::flags											
basic_ostream flush	R	std::basic_ostream::flush											
basic_ostream getloc	R	std::basic_ostream::getloc											
basic_ostream good	R	std::basic_ostream::good											
basic_ostream init	R	std::basic_ostream::init											
basic_ostream iword	R	std::basic_ostream::iword											
basic_ostream move	R	std::basic_ostream::move											
basic_ostream narrow	R	std::basic_ostream::narrow											
basic_ostream precision	R	std::basic_ostream::precision											
basic_ostream put	R	std::basic_ostream::put											
basic_ostream pword	R	std::basic_ostream::pword											
basic_ostream rdbuf	R	std::basic_ostream::rdbuf											
basic_ostream rdstate	R	std::basic_ostream::rdstate											
basic_ostream register_callback	R	std::basic_ostream::register_callback											
basic_ostream seekp	R	std::basic_ostream::seekp											
basic_ostream sentry	R	std::basic_ostream::sentry											
basic_ostream set_rdbuf	R	std::basic_ostream::set_rdbuf											
basic_ostream setf	R	std::basic_ostream::setf											
basic_ostream setstate	R	std::basic_ostream::setstate											
basic_ostream swap	R	std::basic_ostream::swap											
basic_ostream sync_with_stdio	R	std::basic_ostream::sync_with_stdio											
basic_ostream tellp	R	std::basic_ostream::tellp											
basic_ostream tie	R	std::basic_ostream::tie											
basic_ostream unsetf	R	std::basic_ostream::unsetf											
basic_ostream widen	R	std::basic_ostream::widen											
basic_ostream width	R	std::basic_ostream::width											
basic_ostream write	R	std::basic_ostream::write											
basic_ostream xalloc	R	std::basic_ostream::xalloc											
basic_ostringstream	R	std::basic_ostringstream											
basic_ostringstream Init	R	std::basic_ostringstream::Init											
basic_ostringstream bad	R	std::basic_ostringstream::bad											
basic_ostringstream clear	R	std::basic_ostringstream::clear											
basic_ostringstream constructor	R	std::basic_ostringstream::basic_ostringstream											
basic_ostringstream copyfmt	R	std::basic_ostringstream::copyfmt											
basic_ostringstream eof	R	std::basic_ostringstream::eof											
basic_ostringstream exceptions	R	std::basic_ostringstream::exceptions											
basic_ostringstream fail	R	std::basic_ostringstream::fail											
basic_ostringstream failure	R	std::basic_ostringstream::failure											
basic_ostringstream failure what	R	std::basic_ostringstream::failure::what											
basic_ostringstream fill	R	std::basic_ostringstream::fill											
basic_ostringstream flags	R	std::basic_ostringstream::flags											
basic_ostringstream flush	R	std::basic_ostringstream::flush											
basic_ostringstream getloc	R	std::basic_ostringstream::getloc											
basic_ostringstream good	R	std::basic_ostringstream::good											
basic_ostringstream init	R	std::basic_ostringstream::init											
basic_ostringstream iword	R	std::basic_ostringstream::iword											
basic_ostringstream move	R	std::basic_ostringstream::move											
basic_ostringstream narrow	R	std::basic_ostringstream::narrow											
basic_ostringstream precision	R	std::basic_ostringstream::precision											
basic_ostringstream put	R	std::basic_ostringstream::put											
basic_ostringstream pword	R	std::basic_ostringstream::pword											
basic_ostringstream rdstate	R	std::basic_ostringstream::rdstate											
basic_ostringstream register_callback	R	std::basic_ostringstream::register_callback											
basic_ostringstream seekp	R	std::basic_ostringstream::seekp											
basic_ostringstream sentry	R	std::basic_ostringstream::sentry											
basic_ostringstream set_rdbuf	R	std::basic_ostringstream::set_rdbuf											
basic_ostringstream setf	R	std::basic_ostringstream::setf											
basic_ostringstream setstate	R	std::basic_ostringstream::setstate											
basic_ostringstream str	R	std::basic_ostringstream::str											
basic_ostringstream sync_with_stdio	R	std::basic_ostringstream::sync_with_stdio											
basic_ostringstream tellp	R	std::basic_ostringstream::tellp											
basic_ostringstream tie	R	std::basic_ostringstream::tie											
basic_ostringstream unsetf	R	std::basic_ostringstream::unsetf											
basic_ostringstream widen	R	std::basic_ostringstream::widen											
basic_ostringstream width	R	std::basic_ostringstream::width											
basic_ostringstream write	R	std::basic_ostringstream::write											
basic_ostringstream xalloc	R	std::basic_ostringstream::xalloc											
basic_regex	R	std::basic_regex											
basic_regex assign	R	std::basic_regex::assign											
basic_regex constructor	R	std::basic_regex::basic_regex											
basic_regex flags	R	std::basic_regex::flags											
basic_regex getloc	R	std::basic_regex::getloc											
basic_regex imbue	R	std::basic_regex::imbue											
basic_regex mark_count	R	std::basic_regex::mark_count											
basic_regex swap	R	std::basic_regex::swap											
basic_streambuf	R	std::basic_streambuf											
basic_streambuf destructor	R	std::basic_streambuf::~basic_streambuf											
basic_streambuf eback	R	std::basic_streambuf::eback											
basic_streambuf egptr	R	std::basic_streambuf::egptr											
basic_streambuf epptr	R	std::basic_streambuf::epptr											
basic_streambuf gbump	R	std::basic_streambuf::gbump											
basic_streambuf getloc	R	std::basic_streambuf::getloc											
basic_streambuf gptr	R	std::basic_streambuf::gptr											
basic_streambuf imbue	R	std::basic_streambuf::imbue											
basic_streambuf in_avail	R	std::basic_streambuf::in_avail											
basic_streambuf overflow	R	std::basic_streambuf::overflow											
basic_streambuf pbackfail	R	std::basic_streambuf::pbackfail											
basic_streambuf pbase	R	std::basic_streambuf::pbase											
basic_streambuf pbump	R	std::basic_streambuf::pbump											
basic_streambuf pptr	R	std::basic_streambuf::pptr											
basic_streambuf pubimbue	R	std::basic_streambuf::pubimbue											
basic_streambuf pubseekoff	R	std::basic_streambuf::pubseekoff											
basic_streambuf pubseekpos	R	std::basic_streambuf::pubseekpos											
basic_streambuf pubsync	R	std::basic_streambuf::pubsync											
basic_streambuf sbumpc	R	std::basic_streambuf::sbumpc											
basic_streambuf seekoff	R	std::basic_streambuf::seekoff											
basic_streambuf seekpos	R	std::basic_streambuf::seekpos											
basic_streambuf setg	R	std::basic_streambuf::setg											
basic_streambuf setp	R	std::basic_streambuf::setp											
basic_streambuf sgetc	R	std::basic_streambuf::sgetc											
basic_streambuf showmanyc	R	std::basic_streambuf::showmanyc											
basic_streambuf snextc	R	std::basic_streambuf::snextc											
basic_streambuf sputbackc	R	std::basic_streambuf::sputbackc											
basic_streambuf sputc	R	std::basic_streambuf::sputc											
basic_streambuf sungetc	R	std::basic_streambuf::sungetc											
basic_streambuf swap	R	std::basic_streambuf::swap											
basic_streambuf sync	R	std::basic_streambuf::sync											
basic_streambuf uflow	R	std::basic_streambuf::uflow											
basic_streambuf underflow	R	std::basic_streambuf::underflow											
basic_string	R	std::basic_string											
basic_string append	R	std::basic_string::append											
basic_string assign	R	std::basic_string::assign											
basic_string at	R	std::basic_string::at											
basic_string back	R	std::basic_string::back											
basic_string begin	R	std::basic_string::begin											
basic_string c_str	R	std::basic_string::c_str											
basic_string capacity	R	std::basic_string::capacity											
basic_string cbegin	R	std::basic_string::cbegin											
basic_string cend	R	std::basic_string::cend											
basic_string clear	R	std::basic_string::clear											
basic_string compare	R	std::basic_string::compare											
basic_string constructor	R	std::basic_string::basic_string											
basic_string copy	R	std::basic_string::copy											
basic_string crbegin	R	std::basic_string::crbegin											
basic_string crend	R	std::basic_string::crend											
basic_string data	R	std::basic_string::data											
basic_string empty	R	std::basic_string::empty											
basic_string end	R	std::basic_string::end											
basic_string erase	R	std::basic_string::erase											
basic_string find	R	std::basic_string::find											
basic_string find_first_not_of	R	std::basic_string::find_first_not_of											
basic_string find_first_of	R	std::basic_string::find_first_of											
basic_string find_last_not_of	R	std::basic_string::find_last_not_of											
basic_string find_last_of	R	std::basic_string::find_last_of											
basic_string front	R	std::basic_string::front											
basic_string get_allocator	R	std::basic_string::get_allocator											
basic_string insert	R	std::basic_string::insert											
basic_string length	R	std::basic_string::length											
basic_string max_size	R	std::basic_string::max_size											
basic_string pop_back	R	std::basic_string::pop_back											
basic_string push_back	R	std::basic_string::push_back											
basic_string rbegin	R	std::basic_string::rbegin											
basic_string rend	R	std::basic_string::rend											
basic_string replace	R	std::basic_string::replace											
basic_string reserve	R	std::basic_string::reserve											
basic_string resize	R	std::basic_string::resize											
basic_string rfind	R	std::basic_string::rfind											
basic_string shrink_to_fit	R	std::basic_string::shrink_to_fit											
basic_string size	R	std::basic_string::size											
basic_string substr	R	std::basic_string::substr											
basic_string swap	R	std::basic_string::swap											
basic_string_view	R	std::basic_string_view											
basic_string_view at	R	std::basic_string_view::at											
basic_string_view back	R	std::basic_string_view::back											
basic_string_view begin	R	std::basic_string_view::begin											
basic_string_view cbegin	R	std::basic_string_view::cbegin											
basic_string_view cend	R	std::basic_string_view::cend											
basic_string_view compare	R	std::basic_string_view::compare											
basic_string_view copy	R	std::basic_string_view::copy											
basic_string_view crbegin	R	std::basic_string_view::crbegin											
basic_string_view crend	R	std::basic_string_view::crend											
basic_string_view data	R	std::basic_string_view::data											
basic_string_view empty	R	std::basic_string_view::empty											
basic_string_view end	R	std::basic_string_view::end											
basic_string_view find	R	std::basic_string_view::find											
basic_string_view find_first_not_of	R	std::basic_string_view::find_first_not_of											
basic_string_view find_first_of	R	std::basic_string_view::find_first_of											
basic_string_view find_last_not_of	R	std::basic_string_view::find_last_not_of											
basic_string_view find_last_of	R	std::basic_string_view::find_last_of											
basic_string_view front	R	std::basic_string_view::front											
basic_string_view length	R	std::basic_string_view::length											
basic_string_view max_size	R	std::basic_string_view::max_size											
basic_string_view rbegin	R	std::basic_string_view::rbegin											
basic_string_view remove_prefix	R	std::basic_string_view::remove_prefix											
basic_string_view remove_suffix	R	std::basic_string_view::remove_suffix											
basic_string_view rend	R	std::basic_string_view::rend											
basic_string_view rfind	R	std::basic_string_view::rfind											
basic_string_view size	R	std::basic_string_view::size											
basic_string_view substr	R	std::basic_string_view::substr											
basic_string_view swap	R	std::basic_string_view::swap											
basic_string_view to_string	R	std::experimental::basic_string_view::to_string											
basic_stringbuf	R	std::basic_stringbuf											
basic_stringbuf eback	R	std::basic_stringbuf::eback											
basic_stringbuf egptr	R	std::basic_stringbuf::egptr											
basic_stringbuf epptr	R	std::basic_stringbuf::epptr											
basic_stringbuf gbump	R	std::basic_stringbuf::gbump											
basic_stringbuf getloc	R	std::basic_stringbuf::getloc											
basic_stringbuf gptr	R	std::basic_stringbuf::gptr											
basic_stringbuf imbue	R	std::basic_stringbuf::imbue											
basic_stringbuf in_avail	R	std::basic_stringbuf::in_avail											
basic_stringbuf pbase	R	std::basic_stringbuf::pbase											
basic_stringbuf pbump	R	std::basic_stringbuf::pbump											
basic_stringbuf pptr	R	std::basic_stringbuf::pptr											
basic_stringbuf pubimbue	R	std::basic_stringbuf::pubimbue											
basic_stringbuf pubseekoff	R	std::basic_stringbuf::pubseekoff											
basic_stringbuf pubseekpos	R	std::basic_stringbuf::pubseekpos											
basic_stringbuf pubsync	R	std::basic_stringbuf::pubsync											
basic_stringbuf sbumpc	R	std::basic_stringbuf::sbumpc											
basic_stringbuf setbuf	R	std::basic_stringbuf::setbuf											
basic_stringbuf setg	R	std::basic_stringbuf::setg											
basic_stringbuf setp	R	std::basic_stringbuf::setp											
basic_stringbuf sgetc	R	std::basic_stringbuf::sgetc											
basic_stringbuf showmanyc	R	std::basic_stringbuf::showmanyc											
basic_stringbuf snextc	R	std::basic_stringbuf::snextc											
basic_stringbuf sputbackc	R	std::basic_stringbuf::sputbackc											
basic_stringbuf sputc	R	std::basic_stringbuf::sputc											
basic_stringbuf str	R	std::basic_stringbuf::str											
basic_stringbuf sungetc	R	std::basic_stringbuf::sungetc											
basic_stringbuf sync	R	std::basic_stringbuf::sync											
basic_stringbuf uflow	R	std::basic_stringbuf::uflow											
basic_stringstream	R	std::basic_stringstream											
basic_stringstream Init	R	std::basic_stringstream::Init											
basic_stringstream bad	R	std::basic_stringstream::bad											
basic_stringstream clear	R	std::basic_stringstream::clear											
basic_stringstream constructor	R	std::basic_stringstream::basic_stringstream											
basic_stringstream copyfmt	R	std::basic_stringstream::copyfmt											
basic_stringstream eof	R	std::basic_stringstream::eof											
basic_stringstream exceptions	R	std::basic_stringstream::exceptions											
basic_stringstream fail	R	std::basic_stringstream::fail											
basic_stringstream failure	R	std::basic_stringstream::failure											
basic_stringstream failure what	R	std::basic_stringstream::failure::what											
basic_stringstream fill	R	std::basic_stringstream::fill											
basic_stringstream flags	R	std::basic_stringstream::flags											
basic_stringstream flush	R	std::basic_stringstream::flush											
basic_stringstream gcount	R	std::basic_stringstream::gcount											
basic_stringstream get	R	std::basic_stringstream::get											
basic_stringstream getline	R	std::basic_stringstream::getline											
basic_stringstream getloc	R	std::basic_stringstream::getloc											
basic_stringstream good	R	std::basic_stringstream::good											
basic_stringstream ignore	R	std::basic_stringstream::ignore											
basic_stringstream init	R	std::basic_stringstream::init											
basic_stringstream iword	R	std::basic_stringstream::iword											
basic_stringstream move	R	std::basic_stringstream::move											
basic_stringstream narrow	R	std::basic_stringstream::narrow											
basic_stringstream peek	R	std::basic_stringstream::peek											
basic_stringstream precision	R	std::basic_stringstream::precision											
basic_stringstream put	R	std::basic_stringstream::put											
basic_stringstream putback	R	std::basic_stringstream::putback											
basic_stringstream pword	R	std::basic_stringstream::pword											
basic_stringstream rdstate	R	std::basic_stringstream::rdstate											
basic_stringstream read	R	std::basic_stringstream::read											
basic_stringstream readsome	R	std::basic_stringstream::readsome											
basic_stringstream register_callback	R	std::basic_stringstream::register_callback											
basic_stringstream seekg	R	std::basic_stringstream::seekg											
basic_stringstream seekp	R	std::basic_stringstream::seekp											
basic_stringstream set_rdbuf	R	std::basic_stringstream::set_rdbuf											
basic_stringstream setf	R	std::basic_stringstream::setf											
basic_stringstream setstate	R	std::basic_stringstream::setstate											
basic_stringstream str	R	std::basic_stringstream::str											
basic_stringstream sync	R	std::basic_stringstream::sync											
basic_stringstream sync_with_stdio	R	std::basic_stringstream::sync_with_stdio											
basic_stringstream tellg	R	std::basic_stringstream::tellg											
basic_stringstream tellp	R	std::basic_stringstream::tellp											
basic_stringstream tie	R	std::basic_stringstream::tie											
basic_stringstream unget	R	std::basic_stringstream::unget											
basic_stringstream unsetf	R	std::basic_stringstream::unsetf											
basic_stringstream widen	R	std::basic_stringstream::widen											
basic_stringstream width	R	std::basic_stringstream::width											
basic_stringstream write	R	std::basic_stringstream::write											
basic_stringstream xalloc	R	std::basic_stringstream::xalloc											
before	R	std::type_info::before											
before begin	R	std::forward_list::before_begin											
before_begin	R	std::forward_list::before_begin											
begin	R	std::begin											
bernoulli distribution	R	std::bernoulli_distribution											
bernoulli distribution constructor	R	std::bernoulli_distribution::bernoulli_distribution											
bernoulli distribution max	R	std::bernoulli_distribution::max											
bernoulli distribution min	R	std::bernoulli_distribution::min											
bernoulli distribution p	R	std::bernoulli_distribution::p											
bernoulli distribution param	R	std::bernoulli_distribution::param											
bernoulli distribution reset	R	std::bernoulli_distribution::reset											
bernoulli_distribution	R	std::bernoulli_distribution											
bernoulli_distribution constructor	R	std::bernoulli_distribution::bernoulli_distribution											
bernoulli_distribution max	R	std::bernoulli_distribution::max											
bernoulli_distribution min	R	std::bernoulli_distribution::min											
bernoulli_distribution p	R	std::bernoulli_distribution::p											
bernoulli_distribution param	R	std::bernoulli_distribution::param											
bernoulli_distribution reset	R	std::bernoulli_distribution::reset											
beta	R	std::gamma_distribution::beta											
betaf	R	std::betaf											
bidirectional iterator tag	R	std::bidirectional_iterator_tag											
bidirectional_iterator_tag	R	std::bidirectional_iterator_tag											
binary negate	R	std::binary_negate											
binary search	R	std::binary_search											
binary_negate	R	std::binary_negate											
binary_search	R	std::binary_search											
bind	R	std::bind											
binomial distribution	R	std::binomial_distribution											
binomial distribution constructor	R	std::binomial_distribution::binomial_distribution											
binomial distribution max	R	std::binomial_distribution::max											
binomial distribution min	R	std::binomial_distribution::min											
binomial distribution p	R	std::binomial_distribution::p											
binomial distribution param	R	std::binomial_distribution::param											
binomial distribution reset	R	std::binomial_distribution::reset											
binomial distribution t	R	std::binomial_distribution::t											
binomial_distribution	R	std::binomial_distribution											
binomial_distribution constructor	R	std::binomial_distribution::binomial_distribution											
binomial_distribution max	R	std::binomial_distribution::max											
binomial_distribution min	R	std::binomial_distribution::min											
binomial_distribution p	R	std::binomial_distribution::p											
binomial_distribution param	R	std::binomial_distribution::param											
binomial_distribution reset	R	std::binomial_distribution::reset											
binomial_distribution t	R	std::binomial_distribution::t											
bit and	R	std::bit_and											
bit not	R	std::bit_not											
bit or	R	std::bit_or											
bit_and	R	std::bit_and											
bit_not	R	std::bit_not											
bit_or	R	std::bit_or											
bitset	R	std::bitset											
bitset all	R	std::bitset::all											
bitset any	R	std::bitset::any											
bitset constructor	R	std::bitset::bitset											
bitset count	R	std::bitset::count											
bitset flip	R	std::bitset::flip											
bitset none	R	std::bitset::none											
bitset reference	R	std::bitset::reference											
bitset reset	R	std::bitset::reset											
bitset set	R	std::bitset::set											
bitset size	R	std::bitset::size											
bitset test	R	std::bitset::test											
bitset to string	R	std::bitset::to_string											
bitset to ullong	R	std::bitset::to_ullong											
bitset to ulong	R	std::bitset::to_ulong											
bitset to_string	R	std::bitset::to_string											
bitset to_ullong	R	std::bitset::to_ullong											
bitset to_ulong	R	std::bitset::to_ulong											
boolalpha	R	std::boolalpha											
boyer moore horspool searcher	R	std::boyer_moore_horspool_searcher											
boyer moore searcher	R	std::boyer_moore_searcher											
boyer_moore_horspool_searcher	R	std::boyer_moore_horspool_searcher											
boyer_moore_searcher	R	std::boyer_moore_searcher											
bsearch	R	std::bsearch											
btowc	R	std::btowc											
c str	R	std::basic_string::c_str											
c16rtomb	R	std::c16rtomb											
c32rtomb	R	std::c32rtomb											
c_str	R	std::basic_string::c_str											
call once	R	std::call_once											
call_once	R	std::call_once											
calloc	R	std::calloc											
canonical	R	std::experimental::filesystem::canonical											
cauchy distribution	R	std::cauchy_distribution											
cauchy distribution a	R	std::cauchy_distribution::a											
cauchy distribution b	R	std::cauchy_distribution::b											
cauchy distribution constructor	R	std::cauchy_distribution::cauchy_distribution											
cauchy distribution max	R	std::cauchy_distribution::max											
cauchy distribution min	R	std::cauchy_distribution::min											
cauchy distribution param	R	std::cauchy_distribution::param											
cauchy distribution reset	R	std::cauchy_distribution::reset											
cauchy_distribution	R	std::cauchy_distribution											
cauchy_distribution a	R	std::cauchy_distribution::a											
cauchy_distribution b	R	std::cauchy_distribution::b											
cauchy_distribution constructor	R	std::cauchy_distribution::cauchy_distribution											
cauchy_distribution max	R	std::cauchy_distribution::max											
cauchy_distribution min	R	std::cauchy_distribution::min											
cauchy_distribution param	R	std::cauchy_distribution::param											
cauchy_distribution reset	R	std::cauchy_distribution::reset											
cbefore begin	R	std::forward_list::cbefore_begin											
cbefore_begin	R	std::forward_list::cbefore_begin											
cbegin	R	std::cbegin											
cbrt	R	std::cbrt											
cend	R	std::cend											
cerr	R	std::cerr											
char traits	R	std::char_traits											
char traits assign	R	std::char_traits::assign											
char traits compare	R	std::char_traits::compare											
char traits copy	R	std::char_traits::copy											
char traits eof	R	std::char_traits::eof											
char traits eq	R	std::char_traits::eq											
char traits eq int type	R	std::char_traits::eq_int_type											
char traits find	R	std::char_traits::find											
char traits length	R	std::char_traits::length											
char traits lt	R	std::char_traits::lt											
char traits move	R	std::char_traits::move											
char traits not eof	R	std::char_traits::not_eof											
char traits to char type	R	std::char_traits::to_char_type											
char traits to int type	R	std::char_traits::to_int_type											
char_traits	R	std::char_traits											
char_traits assign	R	std::char_traits::assign											
char_traits compare	R	std::char_traits::compare											
char_traits copy	R	std::char_traits::copy											
char_traits eof	R	std::char_traits::eof											
char_traits eq	R	std::char_traits::eq											
char_traits eq_int_type	R	std::char_traits::eq_int_type											
char_traits find	R	std::char_traits::find											
char_traits length	R	std::char_traits::length											
char_traits lt	R	std::char_traits::lt											
char_traits move	R	std::char_traits::move											
char_traits not_eof	R	std::char_traits::not_eof											
char_traits to_char_type	R	std::char_traits::to_char_type											
char_traits to_int_type	R	std::char_traits::to_int_type											
chi squared distribution	R	std::chi_squared_distribution											
chi squared distribution constructor	R	std::chi_squared_distribution::chi_squared_distribution											
chi squared distribution max	R	std::chi_squared_distribution::max											
chi squared distribution min	R	std::chi_squared_distribution::min											
chi squared distribution n	R	std::chi_squared_distribution::n											
chi squared distribution param	R	std::chi_squared_distribution::param											
chi squared distribution reset	R	std::chi_squared_distribution::reset											
chi_squared_distribution	R	std::chi_squared_distribution											
chi_squared_distribution constructor	R	std::chi_squared_distribution::chi_squared_distribution											
chi_squared_distribution max	R	std::chi_squared_distribution::max											
chi_squared_distribution min	R	std::chi_squared_distribution::min											
chi_squared_distribution n	R	std::chi_squared_distribution::n											
chi_squared_distribution param	R	std::chi_squared_distribution::param											
chi_squared_distribution reset	R	std::chi_squared_distribution::reset											
chrono duration	R	std::chrono::duration											
chrono duration cast	R	std::chrono::duration_cast											
chrono duration constructor	R	std::chrono::duration::duration											
chrono duration count	R	std::chrono::duration::count											
chrono duration max	R	std::chrono::duration::max											
chrono duration min	R	std::chrono::duration::min											
chrono duration values	R	std::chrono::duration_values											
chrono duration values max	R	std::chrono::duration_values::max											
chrono duration values min	R	std::chrono::duration_values::min											
chrono duration values zero	R	std::chrono::duration_values::zero											
chrono duration zero	R	std::chrono::duration::zero											
chrono duration_cast	R	std::chrono::duration_cast											
chrono duration_values	R	std::chrono::duration_values											
chrono duration_values max	R	std::chrono::duration_values::max											
chrono duration_values min	R	std::chrono::duration_values::min											
chrono duration_values zero	R	std::chrono::duration_values::zero											
chrono high resolution clock	R	std::chrono::high_resolution_clock											
chrono high resolution clock now	R	std::chrono::high_resolution_clock::now											
chrono high_resolution_clock	R	std::chrono::high_resolution_clock											
chrono high_resolution_clock now	R	std::chrono::high_resolution_clock::now											
chrono steady clock	R	std::chrono::steady_clock											
chrono steady clock now	R	std::chrono::steady_clock::now											
chrono steady_clock	R	std::chrono::steady_clock											
chrono steady_clock now	R	std::chrono::steady_clock::now											
chrono system clock	R	std::chrono::system_clock											
chrono system clock from time t	R	std::chrono::system_clock::from_time_t											
chrono system clock now	R	std::chrono::system_clock::now											
chrono system clock to time t	R	std::chrono::system_clock::to_time_t											
chrono system_clock	R	std::chrono::system_clock											
chrono system_clock from_time_t	R	std::chrono::system_clock::from_time_t											
chrono system_clock now	R	std::chrono::system_clock::now											
chrono system_clock to_time_t	R	std::chrono::system_clock::to_time_t											
chrono time point	R	std::chrono::time_point											
chrono time point cast	R	std::chrono::time_point_cast											
chrono time point constructor	R	std::chrono::time_point::time_point											
chrono time point max	R	std::chrono::time_point::max											
chrono time point min	R	std::chrono::time_point::min											
chrono time point time since epoch	R	std::chrono::time_point::time_since_epoch											
chrono time_point	R	std::chrono::time_point											
chrono time_point constructor	R	std::chrono::time_point::time_point											
chrono time_point max	R	std::chrono::time_point::max											
chrono time_point min	R	std::chrono::time_point::min											
chrono time_point time_since_epoch	R	std::chrono::time_point::time_since_epoch											
chrono time_point_cast	R	std::chrono::time_point_cast											
chrono treat as floating point	R	std::chrono::treat_as_floating_point											
chrono treat_as_floating_point	R	std::chrono::treat_as_floating_point											
cin	R	std::cin											
classic	R	std::locale::classic											
clearerr	R	std::clearerr											
clock	R	std::clock											
clog	R	std::clog											
codecvt	R	std::codecvt											
codecvt always noconv	R	std::codecvt::always_noconv											
codecvt always_noconv	R	std::codecvt::always_noconv											
codecvt base	R	std::codecvt_base											
codecvt byname	R	std::codecvt_byname											
codecvt constructor	R	std::codecvt::codecvt											
codecvt destructor	R	std::codecvt::~codecvt											
codecvt do always noconv	R	std::codecvt::do_always_noconv											
codecvt do encoding	R	std::codecvt::do_encoding											
codecvt do in	R	std::codecvt::do_in											
codecvt do length	R	std::codecvt::do_length											
codecvt do max length	R	std::codecvt::do_max_length											
codecvt do out	R	std::codecvt::do_out											
codecvt do unshift	R	std::codecvt::do_unshift											
codecvt do_always_noconv	R	std::codecvt::do_always_noconv											
codecvt do_encoding	R	std::codecvt::do_encoding											
codecvt do_in	R	std::codecvt::do_in											
codecvt do_length	R	std::codecvt::do_length											
codecvt do_max_length	R	std::codecvt::do_max_length											
codecvt do_out	R	std::codecvt::do_out											
codecvt do_unshift	R	std::codecvt::do_unshift											
codecvt encoding	R	std::codecvt::encoding											
codecvt in	R	std::codecvt::in											
codecvt length	R	std::codecvt::length											
codecvt max length	R	std::codecvt::max_length											
codecvt max_length	R	std::codecvt::max_length											
codecvt out	R	std::codecvt::out											
codecvt unshift	R	std::codecvt::unshift											
codecvt utf16	R	std::codecvt_utf16											
codecvt utf8	R	std::codecvt_utf8											
codecvt utf8 utf16	R	std::codecvt_utf8_utf16											
codecvt_base	R	std::codecvt_base											
codecvt_byname	R	std::codecvt_byname											
codecvt_utf16	R	std::codecvt_utf16											
codecvt_utf8	R	std::codecvt_utf8											
codecvt_utf8_utf16	R	std::codecvt_utf8_utf16											
collate	R	std::collate											
collate byname	R	std::collate_byname											
collate compare	R	std::collate::compare											
collate constructor	R	std::collate::collate											
collate destructor	R	std::collate::~collate											
collate do compare	R	std::collate::do_compare											
collate do hash	R	std::collate::do_hash											
collate do transform	R	std::collate::do_transform											
collate do_compare	R	std::collate::do_compare											
collate do_hash	R	std::collate::do_hash											
collate do_transform	R	std::collate::do_transform											
collate hash	R	std::collate::hash											
collate transform	R	std::collate::transform											
collate_byname	R	std::collate_byname											
combine	R	std::locale::combine											
common type	R	std::common_type											
common_type	R	std::common_type											
comp ellint 1f	R	std::comp_ellint_1f											
comp ellint 2f	R	std::comp_ellint_2f											
comp ellint 3f	R	std::comp_ellint_3f											
comp_ellint_1f	R	std::comp_ellint_1f											
comp_ellint_2f	R	std::comp_ellint_2f											
comp_ellint_3f	R	std::comp_ellint_3f											
compare exchange strong	R	std::atomic::compare_exchange_strong											
compare exchange weak	R	std::atomic::compare_exchange_weak											
compare_exchange_strong	R	std::atomic::compare_exchange_strong											
compare_exchange_weak	R	std::atomic::compare_exchange_weak											
complex	R	std::complex											
complex constructor	R	std::complex::complex											
complex imag	R	std::complex::imag											
complex real	R	std::complex::real											
concat	R	std::filesystem::path::concat											
condition variable	R	std::condition_variable											
condition variable any	R	std::condition_variable_any											
condition variable any notify all	R	std::condition_variable_any::notify_all											
condition variable any notify one	R	std::condition_variable_any::notify_one											
condition variable any wait	R	std::condition_variable_any::wait											
condition variable any wait until	R	std::condition_variable_any::wait_until											
condition variable native handle	R	std::condition_variable::native_handle											
condition variable notify all	R	std::condition_variable::notify_all											
condition variable notify one	R	std::condition_variable::notify_one											
condition variable wait	R	std::condition_variable::wait											
condition variable wait until	R	std::condition_variable::wait_until											
condition_variable	R	std::condition_variable											
condition_variable native_handle	R	std::condition_variable::native_handle											
condition_variable notify_all	R	std::condition_variable::notify_all											
condition_variable notify_one	R	std::condition_variable::notify_one											
condition_variable wait	R	std::condition_variable::wait											
condition_variable wait_until	R	std::condition_variable::wait_until											
condition_variable_any	R	std::condition_variable_any											
condition_variable_any notify_all	R	std::condition_variable_any::notify_all											
condition_variable_any notify_one	R	std::condition_variable_any::notify_one											
condition_variable_any wait	R	std::condition_variable_any::wait											
condition_variable_any wait_until	R	std::condition_variable_any::wait_until											
conditional	R	std::conditional											
conjunction	R	std::conjunction											
const pointer cast	R	std::const_pointer_cast											
const_pointer_cast	R	std::const_pointer_cast											
constructor allocator	R	std::allocator::allocator											
constructor any	R	std::any::any											
constructor atomic	R	std::atomic::atomic											
constructor auto ptr	R	std::auto_ptr::auto_ptr											
constructor auto_ptr	R	std::auto_ptr::auto_ptr											
constructor basic filebuf	R	std::basic_filebuf::basic_filebuf											
constructor basic fstream	R	std::basic_fstream::basic_fstream											
constructor basic ifstream	R	std::basic_ifstream::basic_ifstream											
constructor basic ios	R	std::basic_ios::basic_ios											
constructor basic iostream	R	std::basic_iostream::basic_iostream											
constructor basic istream	R	std::basic_istream::basic_istream											
constructor basic istringstream	R	std::basic_istringstream::basic_istringstream											
constructor basic ofstream	R	std::basic_ofstream::basic_ofstream											
constructor basic ostream	R	std::basic_ostream::basic_ostream											
constructor basic ostringstream	R	std::basic_ostringstream::basic_ostringstream											
constructor basic regex	R	std::basic_regex::basic_regex											
constructor basic string	R	std::basic_string::basic_string											
constructor basic stringstream	R	std::basic_stringstream::basic_stringstream											
constructor basic_filebuf	R	std::basic_filebuf::basic_filebuf											
constructor basic_fstream	R	std::basic_fstream::basic_fstream											
constructor basic_ifstream	R	std::basic_ifstream::basic_ifstream											
constructor basic_ios	R	std::basic_ios::basic_ios											
constructor basic_iostream	R	std::basic_iostream::basic_iostream											
constructor basic_istream	R	std::basic_istream::basic_istream											
constructor basic_istringstream	R	std::basic_istringstream::basic_istringstream											
constructor basic_ofstream	R	std::basic_ofstream::basic_ofstream											
constructor basic_ostream	R	std::basic_ostream::basic_ostream											
constructor basic_ostringstream	R	std::basic_ostringstream::basic_ostringstream											
constructor basic_regex	R	std::basic_regex::basic_regex											
constructor basic_string	R	std::basic_string::basic_string											
constructor basic_stringstream	R	std::basic_stringstream::basic_stringstream											
constructor bernoulli distribution	R	std::bernoulli_distribution::bernoulli_distribution											
constructor bernoulli_distribution	R	std::bernoulli_distribution::bernoulli_distribution											
constructor binomial distribution	R	std::binomial_distribution::binomial_distribution											
constructor binomial_distribution	R	std::binomial_distribution::binomial_distribution											
constructor bitset	R	std::bitset::bitset											
constructor cauchy distribution	R	std::cauchy_distribution::cauchy_distribution											
constructor cauchy_distribution	R	std::cauchy_distribution::cauchy_distribution											
constructor chi squared distribution	R	std::chi_squared_distribution::chi_squared_distribution											
constructor chi_squared_distribution	R	std::chi_squared_distribution::chi_squared_distribution											
constructor chrono duration	R	std::chrono::duration::duration											
constructor chrono time point	R	std::chrono::time_point::time_point											
constructor chrono time_point	R	std::chrono::time_point::time_point											
constructor codecvt	R	std::codecvt::codecvt											
constructor collate	R	std::collate::collate											
constructor complex	R	std::complex::complex											
constructor ctype	R	std::ctype::ctype											
constructor deque	R	std::deque::deque											
constructor directory entry	R	std::filesystem::directory_entry::directory_entry											
constructor directory iterator	R	std::filesystem::directory_iterator::directory_iterator											
constructor directory_entry	R	std::filesystem::directory_entry::directory_entry											
constructor directory_iterator	R	std::filesystem::directory_iterator::directory_iterator											
constructor discard block engine	R	std::discard_block_engine::discard_block_engine											
constructor discard_block_engine	R	std::discard_block_engine::discard_block_engine											
constructor discrete distribution	R	std::discrete_distribution::discrete_distribution											
constructor discrete_distribution	R	std::discrete_distribution::discrete_distribution											
constructor duration	R	std::chrono::duration::duration											
constructor enable shared from this	R	std::enable_shared_from_this::enable_shared_from_this											
constructor enable_shared_from_this	R	std::enable_shared_from_this::enable_shared_from_this											
constructor error category	R	std::error_category::error_category											
constructor error code	R	std::error_code::error_code											
constructor error condition	R	std::error_condition::error_condition											
constructor error_category	R	std::error_category::error_category											
constructor error_code	R	std::error_code::error_code											
constructor error_condition	R	std::error_condition::error_condition											
constructor exception	R	std::exception::exception											
constructor experimental any	R	std::experimental::any::any											
constructor experimental filesystem directory entry	R	std::experimental::filesystem::directory_entry::directory_entry											
constructor experimental filesystem directory iterator	R	std::experimental::filesystem::directory_iterator::directory_iterator											
constructor experimental filesystem directory_entry	R	std::experimental::filesystem::directory_entry::directory_entry											
constructor experimental filesystem directory_iterator	R	std::experimental::filesystem::directory_iterator::directory_iterator											
constructor experimental filesystem file status	R	std::experimental::filesystem::file_status::file_status											
constructor experimental filesystem file_status	R	std::experimental::filesystem::file_status::file_status											
constructor experimental filesystem path	R	std::experimental::filesystem::path::path											
constructor experimental filesystem recursive directory iterator	R	std::experimental::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor experimental filesystem recursive_directory_iterator	R	std::experimental::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor experimental optional	R	std::experimental::optional::optional											
constructor experimental pmr memory resource	R	std::experimental::pmr::memory_resource::memory_resource											
constructor experimental pmr memory_resource	R	std::experimental::pmr::memory_resource::memory_resource											
constructor exponential distribution	R	std::exponential_distribution::exponential_distribution											
constructor exponential_distribution	R	std::exponential_distribution::exponential_distribution											
constructor extreme value distribution	R	std::extreme_value_distribution::extreme_value_distribution											
constructor extreme_value_distribution	R	std::extreme_value_distribution::extreme_value_distribution											
constructor facet	R	std::locale::facet::facet											
constructor file status	R	std::filesystem::file_status::file_status											
constructor file_status	R	std::filesystem::file_status::file_status											
constructor filesystem directory entry	R	std::filesystem::directory_entry::directory_entry											
constructor filesystem directory iterator	R	std::filesystem::directory_iterator::directory_iterator											
constructor filesystem directory_entry	R	std::filesystem::directory_entry::directory_entry											
constructor filesystem directory_iterator	R	std::filesystem::directory_iterator::directory_iterator											
constructor filesystem file status	R	std::filesystem::file_status::file_status											
constructor filesystem file_status	R	std::filesystem::file_status::file_status											
constructor filesystem path	R	std::filesystem::path::path											
constructor filesystem recursive directory iterator	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor filesystem recursive_directory_iterator	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor fisher f distribution	R	std::fisher_f_distribution::fisher_f_distribution											
constructor fisher_f_distribution	R	std::fisher_f_distribution::fisher_f_distribution											
constructor forward list	R	std::forward_list::forward_list											
constructor forward_list	R	std::forward_list::forward_list											
constructor function	R	std::function::function											
constructor future	R	std::future::future											
constructor future error	R	std::future_error::future_error											
constructor future_error	R	std::future_error::future_error											
constructor gamma distribution	R	std::gamma_distribution::gamma_distribution											
constructor gamma_distribution	R	std::gamma_distribution::gamma_distribution											
constructor geometric distribution	R	std::geometric_distribution::geometric_distribution											
constructor geometric_distribution	R	std::geometric_distribution::geometric_distribution											
constructor independent bits engine	R	std::independent_bits_engine::independent_bits_engine											
constructor independent_bits_engine	R	std::independent_bits_engine::independent_bits_engine											
constructor initializer list	R	std::initializer_list::initializer_list											
constructor initializer_list	R	std::initializer_list::initializer_list											
constructor ios base	R	std::ios_base::ios_base											
constructor ios_base	R	std::ios_base::ios_base											
constructor istrstream	R	std::istrstream::istrstream											
constructor linear congruential engine	R	std::linear_congruential_engine::linear_congruential_engine											
constructor linear_congruential_engine	R	std::linear_congruential_engine::linear_congruential_engine											
constructor list	R	std::list::list											
constructor locale	R	std::locale::locale											
constructor locale facet	R	std::locale::facet::facet											
constructor lock guard	R	std::lock_guard::lock_guard											
constructor lock_guard	R	std::lock_guard::lock_guard											
constructor lognormal distribution	R	std::lognormal_distribution::lognormal_distribution											
constructor lognormal_distribution	R	std::lognormal_distribution::lognormal_distribution											
constructor map	R	std::map::map											
constructor memory resource	R	std::pmr::memory_resource::memory_resource											
constructor memory_resource	R	std::pmr::memory_resource::memory_resource											
constructor mersenne twister engine	R	std::mersenne_twister_engine::mersenne_twister_engine											
constructor mersenne_twister_engine	R	std::mersenne_twister_engine::mersenne_twister_engine											
constructor messages	R	std::messages::messages											
constructor money get	R	std::money_get::money_get											
constructor money put	R	std::money_put::money_put											
constructor money_get	R	std::money_get::money_get											
constructor money_put	R	std::money_put::money_put											
constructor moneypunct	R	std::moneypunct::moneypunct											
constructor monotonic buffer resource	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
constructor monotonic_buffer_resource	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
constructor multimap	R	std::multimap::multimap											
constructor multiset	R	std::multiset::multiset											
constructor mutex	R	std::mutex::mutex											
constructor negative binomial distribution	R	std::negative_binomial_distribution::negative_binomial_distribution											
constructor negative_binomial_distribution	R	std::negative_binomial_distribution::negative_binomial_distribution											
constructor nested exception	R	std::nested_exception::nested_exception											
constructor nested_exception	R	std::nested_exception::nested_exception											
constructor normal distribution	R	std::normal_distribution::normal_distribution											
constructor normal_distribution	R	std::normal_distribution::normal_distribution											
constructor num get	R	std::num_get::num_get											
constructor num put	R	std::num_put::num_put											
constructor num_get	R	std::num_get::num_get											
constructor num_put	R	std::num_put::num_put											
constructor numpunct	R	std::numpunct::numpunct											
constructor optional	R	std::optional::optional											
constructor packaged task	R	std::packaged_task::packaged_task											
constructor packaged_task	R	std::packaged_task::packaged_task											
constructor pair	R	std::pair::pair											
constructor path	R	std::filesystem::path::path											
constructor piecewise constant distribution	R	std::piecewise_constant_distribution::piecewise_constant_distribution											
constructor piecewise linear distribution	R	std::piecewise_linear_distribution::piecewise_linear_distribution											
constructor piecewise_constant_distribution	R	std::piecewise_constant_distribution::piecewise_constant_distribution											
constructor piecewise_linear_distribution	R	std::piecewise_linear_distribution::piecewise_linear_distribution											
constructor pmr memory resource	R	std::pmr::memory_resource::memory_resource											
constructor pmr memory_resource	R	std::pmr::memory_resource::memory_resource											
constructor pmr monotonic buffer resource	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
constructor pmr monotonic_buffer_resource	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
constructor pmr polymorphic allocator	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
constructor pmr polymorphic_allocator	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
constructor pmr synchronized pool resource	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
constructor pmr synchronized_pool_resource	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
constructor pmr unsynchronized pool resource	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
constructor pmr unsynchronized_pool_resource	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
constructor poisson distribution	R	std::poisson_distribution::poisson_distribution											
constructor poisson_distribution	R	std::poisson_distribution::poisson_distribution											
constructor polymorphic allocator	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
constructor polymorphic_allocator	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
constructor priority queue	R	std::priority_queue::priority_queue											
constructor priority_queue	R	std::priority_queue::priority_queue											
constructor promise	R	std::promise::promise											
constructor queue	R	std::queue::queue											
constructor random device	R	std::random_device::random_device											
constructor random_device	R	std::random_device::random_device											
constructor raw storage iterator	R	std::raw_storage_iterator::raw_storage_iterator											
constructor raw_storage_iterator	R	std::raw_storage_iterator::raw_storage_iterator											
constructor recursive directory iterator	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor recursive_directory_iterator	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor reference wrapper	R	std::reference_wrapper::reference_wrapper											
constructor reference_wrapper	R	std::reference_wrapper::reference_wrapper											
constructor regex iterator	R	std::regex_iterator::regex_iterator											
constructor regex token iterator	R	std::regex_token_iterator::regex_token_iterator											
constructor regex_iterator	R	std::regex_iterator::regex_iterator											
constructor regex_token_iterator	R	std::regex_token_iterator::regex_token_iterator											
constructor scoped allocator adaptor	R	std::scoped_allocator_adaptor::scoped_allocator_adaptor											
constructor scoped_allocator_adaptor	R	std::scoped_allocator_adaptor::scoped_allocator_adaptor											
constructor set	R	std::set::set											
constructor shared future	R	std::shared_future::shared_future											
constructor shared lock	R	std::shared_lock::shared_lock											
constructor shared ptr	R	std::shared_ptr::shared_ptr											
constructor shared_future	R	std::shared_future::shared_future											
constructor shared_lock	R	std::shared_lock::shared_lock											
constructor shared_ptr	R	std::shared_ptr::shared_ptr											
constructor shuffle order engine	R	std::shuffle_order_engine::shuffle_order_engine											
constructor shuffle_order_engine	R	std::shuffle_order_engine::shuffle_order_engine											
constructor stack	R	std::stack::stack											
constructor std allocator	R	std::allocator::allocator											
constructor std any	R	std::any::any											
constructor std atomic	R	std::atomic::atomic											
constructor std auto ptr	R	std::auto_ptr::auto_ptr											
constructor std auto_ptr	R	std::auto_ptr::auto_ptr											
constructor std basic filebuf	R	std::basic_filebuf::basic_filebuf											
constructor std basic fstream	R	std::basic_fstream::basic_fstream											
constructor std basic ifstream	R	std::basic_ifstream::basic_ifstream											
constructor std basic ios	R	std::basic_ios::basic_ios											
constructor std basic iostream	R	std::basic_iostream::basic_iostream											
constructor std basic istream	R	std::basic_istream::basic_istream											
constructor std basic istringstream	R	std::basic_istringstream::basic_istringstream											
constructor std basic ofstream	R	std::basic_ofstream::basic_ofstream											
constructor std basic ostream	R	std::basic_ostream::basic_ostream											
constructor std basic ostringstream	R	std::basic_ostringstream::basic_ostringstream											
constructor std basic regex	R	std::basic_regex::basic_regex											
constructor std basic string	R	std::basic_string::basic_string											
constructor std basic stringstream	R	std::basic_stringstream::basic_stringstream											
constructor std basic_filebuf	R	std::basic_filebuf::basic_filebuf											
constructor std basic_fstream	R	std::basic_fstream::basic_fstream											
constructor std basic_ifstream	R	std::basic_ifstream::basic_ifstream											
constructor std basic_ios	R	std::basic_ios::basic_ios											
constructor std basic_iostream	R	std::basic_iostream::basic_iostream											
constructor std basic_istream	R	std::basic_istream::basic_istream											
constructor std basic_istringstream	R	std::basic_istringstream::basic_istringstream											
constructor std basic_ofstream	R	std::basic_ofstream::basic_ofstream											
constructor std basic_ostream	R	std::basic_ostream::basic_ostream											
constructor std basic_ostringstream	R	std::basic_ostringstream::basic_ostringstream											
constructor std basic_regex	R	std::basic_regex::basic_regex											
constructor std basic_string	R	std::basic_string::basic_string											
constructor std basic_stringstream	R	std::basic_stringstream::basic_stringstream											
constructor std bernoulli distribution	R	std::bernoulli_distribution::bernoulli_distribution											
constructor std bernoulli_distribution	R	std::bernoulli_distribution::bernoulli_distribution											
constructor std binomial distribution	R	std::binomial_distribution::binomial_distribution											
constructor std binomial_distribution	R	std::binomial_distribution::binomial_distribution											
constructor std bitset	R	std::bitset::bitset											
constructor std cauchy distribution	R	std::cauchy_distribution::cauchy_distribution											
constructor std cauchy_distribution	R	std::cauchy_distribution::cauchy_distribution											
constructor std chi squared distribution	R	std::chi_squared_distribution::chi_squared_distribution											
constructor std chi_squared_distribution	R	std::chi_squared_distribution::chi_squared_distribution											
constructor std chrono duration	R	std::chrono::duration::duration											
constructor std chrono time point	R	std::chrono::time_point::time_point											
constructor std chrono time_point	R	std::chrono::time_point::time_point											
constructor std codecvt	R	std::codecvt::codecvt											
constructor std collate	R	std::collate::collate											
constructor std complex	R	std::complex::complex											
constructor std ctype	R	std::ctype::ctype											
constructor std deque	R	std::deque::deque											
constructor std discard block engine	R	std::discard_block_engine::discard_block_engine											
constructor std discard_block_engine	R	std::discard_block_engine::discard_block_engine											
constructor std discrete distribution	R	std::discrete_distribution::discrete_distribution											
constructor std discrete_distribution	R	std::discrete_distribution::discrete_distribution											
constructor std enable shared from this	R	std::enable_shared_from_this::enable_shared_from_this											
constructor std enable_shared_from_this	R	std::enable_shared_from_this::enable_shared_from_this											
constructor std error category	R	std::error_category::error_category											
constructor std error code	R	std::error_code::error_code											
constructor std error condition	R	std::error_condition::error_condition											
constructor std error_category	R	std::error_category::error_category											
constructor std error_code	R	std::error_code::error_code											
constructor std error_condition	R	std::error_condition::error_condition											
constructor std exception	R	std::exception::exception											
constructor std experimental any	R	std::experimental::any::any											
constructor std experimental filesystem directory entry	R	std::experimental::filesystem::directory_entry::directory_entry											
constructor std experimental filesystem directory iterator	R	std::experimental::filesystem::directory_iterator::directory_iterator											
constructor std experimental filesystem directory_entry	R	std::experimental::filesystem::directory_entry::directory_entry											
constructor std experimental filesystem directory_iterator	R	std::experimental::filesystem::directory_iterator::directory_iterator											
constructor std experimental filesystem file status	R	std::experimental::filesystem::file_status::file_status											
constructor std experimental filesystem file_status	R	std::experimental::filesystem::file_status::file_status											
constructor std experimental filesystem path	R	std::experimental::filesystem::path::path											
constructor std experimental filesystem recursive directory iterator	R	std::experimental::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor std experimental filesystem recursive_directory_iterator	R	std::experimental::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor std experimental optional	R	std::experimental::optional::optional											
constructor std experimental pmr memory resource	R	std::experimental::pmr::memory_resource::memory_resource											
constructor std experimental pmr memory_resource	R	std::experimental::pmr::memory_resource::memory_resource											
constructor std exponential distribution	R	std::exponential_distribution::exponential_distribution											
constructor std exponential_distribution	R	std::exponential_distribution::exponential_distribution											
constructor std extreme value distribution	R	std::extreme_value_distribution::extreme_value_distribution											
constructor std extreme_value_distribution	R	std::extreme_value_distribution::extreme_value_distribution											
constructor std filesystem directory entry	R	std::filesystem::directory_entry::directory_entry											
constructor std filesystem directory iterator	R	std::filesystem::directory_iterator::directory_iterator											
constructor std filesystem directory_entry	R	std::filesystem::directory_entry::directory_entry											
constructor std filesystem directory_iterator	R	std::filesystem::directory_iterator::directory_iterator											
constructor std filesystem file status	R	std::filesystem::file_status::file_status											
constructor std filesystem file_status	R	std::filesystem::file_status::file_status											
constructor std filesystem path	R	std::filesystem::path::path											
constructor std filesystem recursive directory iterator	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor std filesystem recursive_directory_iterator	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
constructor std fisher f distribution	R	std::fisher_f_distribution::fisher_f_distribution											
constructor std fisher_f_distribution	R	std::fisher_f_distribution::fisher_f_distribution											
constructor std forward list	R	std::forward_list::forward_list											
constructor std forward_list	R	std::forward_list::forward_list											
constructor std function	R	std::function::function											
constructor std future	R	std::future::future											
constructor std future error	R	std::future_error::future_error											
constructor std future_error	R	std::future_error::future_error											
constructor std gamma distribution	R	std::gamma_distribution::gamma_distribution											
constructor std gamma_distribution	R	std::gamma_distribution::gamma_distribution											
constructor std geometric distribution	R	std::geometric_distribution::geometric_distribution											
constructor std geometric_distribution	R	std::geometric_distribution::geometric_distribution											
constructor std independent bits engine	R	std::independent_bits_engine::independent_bits_engine											
constructor std independent_bits_engine	R	std::independent_bits_engine::independent_bits_engine											
constructor std initializer list	R	std::initializer_list::initializer_list											
constructor std initializer_list	R	std::initializer_list::initializer_list											
constructor std ios base	R	std::ios_base::ios_base											
constructor std ios_base	R	std::ios_base::ios_base											
constructor std istrstream	R	std::istrstream::istrstream											
constructor std linear congruential engine	R	std::linear_congruential_engine::linear_congruential_engine											
constructor std linear_congruential_engine	R	std::linear_congruential_engine::linear_congruential_engine											
constructor std list	R	std::list::list											
constructor std locale	R	std::locale::locale											
constructor std locale facet	R	std::locale::facet::facet											
constructor std lock guard	R	std::lock_guard::lock_guard											
constructor std lock_guard	R	std::lock_guard::lock_guard											
constructor std lognormal distribution	R	std::lognormal_distribution::lognormal_distribution											
constructor std lognormal_distribution	R	std::lognormal_distribution::lognormal_distribution											
constructor std map	R	std::map::map											
constructor std mersenne twister engine	R	std::mersenne_twister_engine::mersenne_twister_engine											
constructor std mersenne_twister_engine	R	std::mersenne_twister_engine::mersenne_twister_engine											
constructor std messages	R	std::messages::messages											
constructor std money get	R	std::money_get::money_get											
constructor std money put	R	std::money_put::money_put											
constructor std money_get	R	std::money_get::money_get											
constructor std money_put	R	std::money_put::money_put											
constructor std moneypunct	R	std::moneypunct::moneypunct											
constructor std multimap	R	std::multimap::multimap											
constructor std multiset	R	std::multiset::multiset											
constructor std mutex	R	std::mutex::mutex											
constructor std negative binomial distribution	R	std::negative_binomial_distribution::negative_binomial_distribution											
constructor std negative_binomial_distribution	R	std::negative_binomial_distribution::negative_binomial_distribution											
constructor std nested exception	R	std::nested_exception::nested_exception											
constructor std nested_exception	R	std::nested_exception::nested_exception											
constructor std normal distribution	R	std::normal_distribution::normal_distribution											
constructor std normal_distribution	R	std::normal_distribution::normal_distribution											
constructor std num get	R	std::num_get::num_get											
constructor std num put	R	std::num_put::num_put											
constructor std num_get	R	std::num_get::num_get											
constructor std num_put	R	std::num_put::num_put											
constructor std numpunct	R	std::numpunct::numpunct											
constructor std optional	R	std::optional::optional											
constructor std packaged task	R	std::packaged_task::packaged_task											
constructor std packaged_task	R	std::packaged_task::packaged_task											
constructor std pair	R	std::pair::pair											
constructor std piecewise constant distribution	R	std::piecewise_constant_distribution::piecewise_constant_distribution											
constructor std piecewise linear distribution	R	std::piecewise_linear_distribution::piecewise_linear_distribution											
constructor std piecewise_constant_distribution	R	std::piecewise_constant_distribution::piecewise_constant_distribution											
constructor std piecewise_linear_distribution	R	std::piecewise_linear_distribution::piecewise_linear_distribution											
constructor std pmr memory resource	R	std::pmr::memory_resource::memory_resource											
constructor std pmr memory_resource	R	std::pmr::memory_resource::memory_resource											
constructor std pmr monotonic buffer resource	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
constructor std pmr monotonic_buffer_resource	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
constructor std pmr polymorphic allocator	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
constructor std pmr polymorphic_allocator	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
constructor std pmr synchronized pool resource	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
constructor std pmr synchronized_pool_resource	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
constructor std pmr unsynchronized pool resource	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
constructor std pmr unsynchronized_pool_resource	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
constructor std poisson distribution	R	std::poisson_distribution::poisson_distribution											
constructor std poisson_distribution	R	std::poisson_distribution::poisson_distribution											
constructor std priority queue	R	std::priority_queue::priority_queue											
constructor std priority_queue	R	std::priority_queue::priority_queue											
constructor std promise	R	std::promise::promise											
constructor std queue	R	std::queue::queue											
constructor std random device	R	std::random_device::random_device											
constructor std random_device	R	std::random_device::random_device											
constructor std raw storage iterator	R	std::raw_storage_iterator::raw_storage_iterator											
constructor std raw_storage_iterator	R	std::raw_storage_iterator::raw_storage_iterator											
constructor std reference wrapper	R	std::reference_wrapper::reference_wrapper											
constructor std reference_wrapper	R	std::reference_wrapper::reference_wrapper											
constructor std regex iterator	R	std::regex_iterator::regex_iterator											
constructor std regex token iterator	R	std::regex_token_iterator::regex_token_iterator											
constructor std regex_iterator	R	std::regex_iterator::regex_iterator											
constructor std regex_token_iterator	R	std::regex_token_iterator::regex_token_iterator											
constructor std scoped allocator adaptor	R	std::scoped_allocator_adaptor::scoped_allocator_adaptor											
constructor std scoped_allocator_adaptor	R	std::scoped_allocator_adaptor::scoped_allocator_adaptor											
constructor std set	R	std::set::set											
constructor std shared future	R	std::shared_future::shared_future											
constructor std shared lock	R	std::shared_lock::shared_lock											
constructor std shared ptr	R	std::shared_ptr::shared_ptr											
constructor std shared_future	R	std::shared_future::shared_future											
constructor std shared_lock	R	std::shared_lock::shared_lock											
constructor std shared_ptr	R	std::shared_ptr::shared_ptr											
constructor std shuffle order engine	R	std::shuffle_order_engine::shuffle_order_engine											
constructor std shuffle_order_engine	R	std::shuffle_order_engine::shuffle_order_engine											
constructor std stack	R	std::stack::stack											
constructor std strstreambuf	R	std::strstreambuf::strstreambuf											
constructor std student t distribution	R	std::student_t_distribution::student_t_distribution											
constructor std student_t_distribution	R	std::student_t_distribution::student_t_distribution											
constructor std sub match	R	std::sub_match::sub_match											
constructor std sub_match	R	std::sub_match::sub_match											
constructor std subtract with carry engine	R	std::subtract_with_carry_engine::subtract_with_carry_engine											
constructor std subtract_with_carry_engine	R	std::subtract_with_carry_engine::subtract_with_carry_engine											
constructor std thread	R	std::thread::thread											
constructor std time get	R	std::time_get::time_get											
constructor std time put	R	std::time_put::time_put											
constructor std time_get	R	std::time_get::time_get											
constructor std time_put	R	std::time_put::time_put											
constructor std tuple	R	std::tuple::tuple											
constructor std uniform int distribution	R	std::uniform_int_distribution::uniform_int_distribution											
constructor std uniform real distribution	R	std::uniform_real_distribution::uniform_real_distribution											
constructor std uniform_int_distribution	R	std::uniform_int_distribution::uniform_int_distribution											
constructor std uniform_real_distribution	R	std::uniform_real_distribution::uniform_real_distribution											
constructor std unique lock	R	std::unique_lock::unique_lock											
constructor std unique_lock	R	std::unique_lock::unique_lock											
constructor std unordered map	R	std::unordered_map::unordered_map											
constructor std unordered multimap	R	std::unordered_multimap::unordered_multimap											
constructor std unordered multiset	R	std::unordered_multiset::unordered_multiset											
constructor std unordered set	R	std::unordered_set::unordered_set											
constructor std unordered_map	R	std::unordered_map::unordered_map											
constructor std unordered_multimap	R	std::unordered_multimap::unordered_multimap											
constructor std unordered_multiset	R	std::unordered_multiset::unordered_multiset											
constructor std unordered_set	R	std::unordered_set::unordered_set											
constructor std variant	R	std::variant::variant											
constructor std vector	R	std::vector::vector											
constructor std wbuffer convert	R	std::wbuffer_convert::wbuffer_convert											
constructor std wbuffer_convert	R	std::wbuffer_convert::wbuffer_convert											
constructor std weak ptr	R	std::weak_ptr::weak_ptr											
constructor std weak_ptr	R	std::weak_ptr::weak_ptr											
constructor std weibull distribution	R	std::weibull_distribution::weibull_distribution											
constructor std weibull_distribution	R	std::weibull_distribution::weibull_distribution											
constructor strstreambuf	R	std::strstreambuf::strstreambuf											
constructor student t distribution	R	std::student_t_distribution::student_t_distribution											
constructor student_t_distribution	R	std::student_t_distribution::student_t_distribution											
constructor sub match	R	std::sub_match::sub_match											
constructor sub_match	R	std::sub_match::sub_match											
constructor subtract with carry engine	R	std::subtract_with_carry_engine::subtract_with_carry_engine											
constructor subtract_with_carry_engine	R	std::subtract_with_carry_engine::subtract_with_carry_engine											
constructor synchronized pool resource	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
constructor synchronized_pool_resource	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
constructor thread	R	std::thread::thread											
constructor time get	R	std::time_get::time_get											
constructor time point	R	std::chrono::time_point::time_point											
constructor time put	R	std::time_put::time_put											
constructor time_get	R	std::time_get::time_get											
constructor time_point	R	std::chrono::time_point::time_point											
constructor time_put	R	std::time_put::time_put											
constructor tuple	R	std::tuple::tuple											
constructor uniform int distribution	R	std::uniform_int_distribution::uniform_int_distribution											
constructor uniform real distribution	R	std::uniform_real_distribution::uniform_real_distribution											
constructor uniform_int_distribution	R	std::uniform_int_distribution::uniform_int_distribution											
constructor uniform_real_distribution	R	std::uniform_real_distribution::uniform_real_distribution											
constructor unique lock	R	std::unique_lock::unique_lock											
constructor unique_lock	R	std::unique_lock::unique_lock											
constructor unordered map	R	std::unordered_map::unordered_map											
constructor unordered multimap	R	std::unordered_multimap::unordered_multimap											
constructor unordered multiset	R	std::unordered_multiset::unordered_multiset											
constructor unordered set	R	std::unordered_set::unordered_set											
constructor unordered_map	R	std::unordered_map::unordered_map											
constructor unordered_multimap	R	std::unordered_multimap::unordered_multimap											
constructor unordered_multiset	R	std::unordered_multiset::unordered_multiset											
constructor unordered_set	R	std::unordered_set::unordered_set											
constructor unsynchronized pool resource	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
constructor unsynchronized_pool_resource	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
constructor variant	R	std::variant::variant											
constructor vector	R	std::vector::vector											
constructor wbuffer convert	R	std::wbuffer_convert::wbuffer_convert											
constructor wbuffer_convert	R	std::wbuffer_convert::wbuffer_convert											
constructor weak ptr	R	std::weak_ptr::weak_ptr											
constructor weak_ptr	R	std::weak_ptr::weak_ptr											
constructor weibull distribution	R	std::weibull_distribution::weibull_distribution											
constructor weibull_distribution	R	std::weibull_distribution::weibull_distribution											
converted	R	std::wstring_convert::converted											
copy	R	std::copy											
copy backward	R	std::copy_backward											
copy if	R	std::copy_if											
copy options	R	std::filesystem::copy_options											
copy symlink	R	std::filesystem::copy_symlink											
copy_backward	R	std::copy_backward											
copy_if	R	std::copy_if											
copy_options	R	std::filesystem::copy_options											
copy_symlink	R	std::filesystem::copy_symlink											
cos	R	std::cos											
cosh	R	std::cosh											
count	R	std::count											
count if	R	std::count_if											
count_if	R	std::count_if											
cout	R	std::cout											
crbegin	R	std::crbegin											
create directories	R	std::filesystem::create_directories											
create directory symlink	R	std::filesystem::create_directory_symlink											
create hard link	R	std::filesystem::create_hard_link											
create symlink	R	std::filesystem::create_symlink											
create_directories	R	std::filesystem::create_directories											
create_directory_symlink	R	std::filesystem::create_directory_symlink											
create_hard_link	R	std::filesystem::create_hard_link											
create_symlink	R	std::filesystem::create_symlink											
cref	R	std::cref											
crend	R	std::crend											
ctime	R	std::ctime											
ctype	R	std::ctype											
ctype base	R	std::ctype_base											
ctype byname	R	std::ctype_byname											
ctype constructor	R	std::ctype::ctype											
ctype destructor	R	std::ctype::~ctype											
ctype do scan is	R	std::ctype::do_scan_is											
ctype do_scan_is	R	std::ctype::do_scan_is											
ctype scan is	R	std::ctype::scan_is											
ctype scan_is	R	std::ctype::scan_is											
ctype_base	R	std::ctype_base											
ctype_byname	R	std::ctype_byname											
curr symbol	R	std::moneypunct::curr_symbol											
curr_symbol	R	std::moneypunct::curr_symbol											
current exception	R	std::current_exception											
current path	R	std::filesystem::current_path											
current_exception	R	std::current_exception											
current_path	R	std::filesystem::current_path											
cyl bessel if	R	std::cyl_bessel_if											
cyl bessel jf	R	std::cyl_bessel_jf											
cyl bessel kf	R	std::cyl_bessel_kf											
cyl neumannf	R	std::cyl_neumannf											
cyl_bessel_if	R	std::cyl_bessel_if											
cyl_bessel_jf	R	std::cyl_bessel_jf											
cyl_bessel_kf	R	std::cyl_bessel_kf											
cyl_neumannf	R	std::cyl_neumannf											
data	R	std::data											
date order	R	std::time_get::date_order											
date_order	R	std::time_get::date_order											
dec	R	std::dec											
decay	R	std::decay											
declare no pointers	R	std::declare_no_pointers											
declare reachable	R	std::declare_reachable											
declare_no_pointers	R	std::declare_no_pointers											
declare_reachable	R	std::declare_reachable											
declval	R	std::declval											
default delete	R	std::default_delete											
default searcher	R	std::default_searcher											
default_delete	R	std::default_delete											
default_searcher	R	std::default_searcher											
defaultfloat	R	std::defaultfloat											
defer lock t	R	std::defer_lock_t											
defer_lock_t	R	std::defer_lock_t											
denorm min	R	std::numeric_limits::denorm_min											
denorm_min	R	std::numeric_limits::denorm_min											
depth	R	std::filesystem::recursive_directory_iterator::depth											
deque	R	std::deque											
deque assign	R	std::deque::assign											
deque at	R	std::deque::at											
deque back	R	std::deque::back											
deque begin	R	std::deque::begin											
deque cbegin	R	std::deque::cbegin											
deque cend	R	std::deque::cend											
deque clear	R	std::deque::clear											
deque constructor	R	std::deque::deque											
deque crbegin	R	std::deque::crbegin											
deque crend	R	std::deque::crend											
deque emplace	R	std::deque::emplace											
deque emplace back	R	std::deque::emplace_back											
deque emplace front	R	std::deque::emplace_front											
deque emplace_back	R	std::deque::emplace_back											
deque emplace_front	R	std::deque::emplace_front											
deque empty	R	std::deque::empty											
deque end	R	std::deque::end											
deque erase	R	std::deque::erase											
deque front	R	std::deque::front											
deque get allocator	R	std::deque::get_allocator											
deque get_allocator	R	std::deque::get_allocator											
deque insert	R	std::deque::insert											
deque max size	R	std::deque::max_size											
deque max_size	R	std::deque::max_size											
deque pop back	R	std::deque::pop_back											
deque pop front	R	std::deque::pop_front											
deque pop_back	R	std::deque::pop_back											
deque pop_front	R	std::deque::pop_front											
deque push back	R	std::deque::push_back											
deque push front	R	std::deque::push_front											
deque push_back	R	std::deque::push_back											
deque push_front	R	std::deque::push_front											
deque rbegin	R	std::deque::rbegin											
deque rend	R	std::deque::rend											
deque resize	R	std::deque::resize											
deque shrink to fit	R	std::deque::shrink_to_fit											
deque shrink_to_fit	R	std::deque::shrink_to_fit											
deque size	R	std::deque::size											
deque swap	R	std::deque::swap											
destroy at	R	std::destroy_at											
destroy_at	R	std::destroy_at											
destructor basic ios	R	std::basic_ios::~basic_ios											
destructor basic iostream	R	std::basic_iostream::~basic_iostream											
destructor basic istream	R	std::basic_istream::~basic_istream											
destructor basic ostream	R	std::basic_ostream::~basic_ostream											
destructor basic streambuf	R	std::basic_streambuf::~basic_streambuf											
destructor basic_ios	R	std::basic_ios::~basic_ios											
destructor basic_iostream	R	std::basic_iostream::~basic_iostream											
destructor basic_istream	R	std::basic_istream::~basic_istream											
destructor basic_ostream	R	std::basic_ostream::~basic_ostream											
destructor basic_streambuf	R	std::basic_streambuf::~basic_streambuf											
destructor codecvt	R	std::codecvt::~codecvt											
destructor collate	R	std::collate::~collate											
destructor ctype	R	std::ctype::~ctype											
destructor error category	R	std::error_category::~error_category											
destructor error_category	R	std::error_category::~error_category											
destructor exception	R	std::exception::~exception											
destructor ios base	R	std::ios_base::~ios_base											
destructor ios_base	R	std::ios_base::~ios_base											
destructor istrstream	R	std::istrstream::~istrstream											
destructor messages	R	std::messages::~messages											
destructor money get	R	std::money_get::~money_get											
destructor money put	R	std::money_put::~money_put											
destructor money_get	R	std::money_get::~money_get											
destructor money_put	R	std::money_put::~money_put											
destructor moneypunct	R	std::moneypunct::~moneypunct											
destructor nested exception	R	std::nested_exception::~nested_exception											
destructor nested_exception	R	std::nested_exception::~nested_exception											
destructor num get	R	std::num_get::~num_get											
destructor num put	R	std::num_put::~num_put											
destructor num_get	R	std::num_get::~num_get											
destructor num_put	R	std::num_put::~num_put											
destructor numpunct	R	std::numpunct::~numpunct											
destructor ostrstream	R	std::ostrstream::~ostrstream											
destructor std basic ios	R	std::basic_ios::~basic_ios											
destructor std basic iostream	R	std::basic_iostream::~basic_iostream											
destructor std basic istream	R	std::basic_istream::~basic_istream											
destructor std basic ostream	R	std::basic_ostream::~basic_ostream											
destructor std basic streambuf	R	std::basic_streambuf::~basic_streambuf											
destructor std basic_ios	R	std::basic_ios::~basic_ios											
destructor std basic_iostream	R	std::basic_iostream::~basic_iostream											
destructor std basic_istream	R	std::basic_istream::~basic_istream											
destructor std basic_ostream	R	std::basic_ostream::~basic_ostream											
destructor std basic_streambuf	R	std::basic_streambuf::~basic_streambuf											
destructor std codecvt	R	std::codecvt::~codecvt											
destructor std collate	R	std::collate::~collate											
destructor std ctype	R	std::ctype::~ctype											
destructor std error category	R	std::error_category::~error_category											
destructor std error_category	R	std::error_category::~error_category											
destructor std exception	R	std::exception::~exception											
destructor std ios base	R	std::ios_base::~ios_base											
destructor std ios_base	R	std::ios_base::~ios_base											
destructor std istrstream	R	std::istrstream::~istrstream											
destructor std messages	R	std::messages::~messages											
destructor std money get	R	std::money_get::~money_get											
destructor std money put	R	std::money_put::~money_put											
destructor std money_get	R	std::money_get::~money_get											
destructor std money_put	R	std::money_put::~money_put											
destructor std moneypunct	R	std::moneypunct::~moneypunct											
destructor std nested exception	R	std::nested_exception::~nested_exception											
destructor std nested_exception	R	std::nested_exception::~nested_exception											
destructor std num get	R	std::num_get::~num_get											
destructor std num put	R	std::num_put::~num_put											
destructor std num_get	R	std::num_get::~num_get											
destructor std num_put	R	std::num_put::~num_put											
destructor std numpunct	R	std::numpunct::~numpunct											
destructor std ostrstream	R	std::ostrstream::~ostrstream											
destructor std strstream	R	std::strstream::~strstream											
destructor std strstreambuf	R	std::strstreambuf::~strstreambuf											
destructor std time get	R	std::time_get::~time_get											
destructor std time put	R	std::time_put::~time_put											
destructor std time_get	R	std::time_get::~time_get											
destructor std time_put	R	std::time_put::~time_put											
destructor strstream	R	std::strstream::~strstream											
destructor strstreambuf	R	std::strstreambuf::~strstreambuf											
destructor time get	R	std::time_get::~time_get											
destructor time put	R	std::time_put::~time_put											
destructor time_get	R	std::time_get::~time_get											
destructor time_put	R	std::time_put::~time_put											
detach	R	std::thread::detach											
detected or	R	std::experimental::detected_or											
detected_or	R	std::experimental::detected_or											
difftime	R	std::difftime											
directory entry	R	std::filesystem::directory_entry											
directory entry assign	R	std::filesystem::directory_entry::assign											
directory entry constructor	R	std::filesystem::directory_entry::directory_entry											
directory entry path	R	std::filesystem::directory_entry::path											
directory entry replace filename	R	std::filesystem::directory_entry::replace_filename											
directory entry status	R	std::filesystem::directory_entry::status											
directory entry symlink status	R	std::filesystem::directory_entry::symlink_status											
directory iterator	R	std::filesystem::directory_iterator											
directory iterator constructor	R	std::filesystem::directory_iterator::directory_iterator											
directory iterator increment	R	std::filesystem::directory_iterator::increment											
directory options	R	std::filesystem::directory_options											
directory_entry	R	std::filesystem::directory_entry											
directory_entry assign	R	std::filesystem::directory_entry::assign											
directory_entry constructor	R	std::filesystem::directory_entry::directory_entry											
directory_entry path	R	std::filesystem::directory_entry::path											
directory_entry replace_filename	R	std::filesystem::directory_entry::replace_filename											
directory_entry status	R	std::filesystem::directory_entry::status											
directory_entry symlink_status	R	std::filesystem::directory_entry::symlink_status											
directory_iterator	R	std::filesystem::directory_iterator											
directory_iterator constructor	R	std::filesystem::directory_iterator::directory_iterator											
directory_iterator increment	R	std::filesystem::directory_iterator::increment											
directory_options	R	std::filesystem::directory_options											
disable recursion pending	R	std::filesystem::recursive_directory_iterator::disable_recursion_pending											
disable_recursion_pending	R	std::filesystem::recursive_directory_iterator::disable_recursion_pending											
discard block engine	R	std::discard_block_engine											
discard block engine base	R	std::discard_block_engine::base											
discard block engine constructor	R	std::discard_block_engine::discard_block_engine											
discard block engine discard	R	std::discard_block_engine::discard											
discard block engine max	R	std::discard_block_engine::max											
discard block engine min	R	std::discard_block_engine::min											
discard block engine seed	R	std::discard_block_engine::seed											
discard_block_engine	R	std::discard_block_engine											
discard_block_engine base	R	std::discard_block_engine::base											
discard_block_engine constructor	R	std::discard_block_engine::discard_block_engine											
discard_block_engine discard	R	std::discard_block_engine::discard											
discard_block_engine max	R	std::discard_block_engine::max											
discard_block_engine min	R	std::discard_block_engine::min											
discard_block_engine seed	R	std::discard_block_engine::seed											
discrete distribution	R	std::discrete_distribution											
discrete distribution constructor	R	std::discrete_distribution::discrete_distribution											
discrete distribution max	R	std::discrete_distribution::max											
discrete distribution min	R	std::discrete_distribution::min											
discrete distribution param	R	std::discrete_distribution::param											
discrete distribution probabilities	R	std::discrete_distribution::probabilities											
discrete distribution reset	R	std::discrete_distribution::reset											
discrete_distribution	R	std::discrete_distribution											
discrete_distribution constructor	R	std::discrete_distribution::discrete_distribution											
discrete_distribution max	R	std::discrete_distribution::max											
discrete_distribution min	R	std::discrete_distribution::min											
discrete_distribution param	R	std::discrete_distribution::param											
discrete_distribution probabilities	R	std::discrete_distribution::probabilities											
discrete_distribution reset	R	std::discrete_distribution::reset											
disjunction	R	std::disjunction											
distance	R	std::distance											
div	R	std::div											
div t	R	std::div_t											
div_t	R	std::div_t											
divides	R	std::divides											
do always noconv	R	std::codecvt::do_always_noconv											
do compare	R	std::collate::do_compare											
do curr symbol	R	std::moneypunct::do_curr_symbol											
do date order	R	std::time_get::do_date_order											
do encoding	R	std::codecvt::do_encoding											
do falsename	R	std::numpunct::do_falsename											
do frac digits	R	std::moneypunct::do_frac_digits											
do get date	R	std::time_get::do_get_date											
do get monthname	R	std::time_get::do_get_monthname											
do get weekday	R	std::time_get::do_get_weekday											
do hash	R	std::collate::do_hash											
do in	R	std::codecvt::do_in											
do length	R	std::codecvt::do_length											
do max length	R	std::codecvt::do_max_length											
do neg format	R	std::moneypunct::do_neg_format											
do out	R	std::codecvt::do_out											
do pos format	R	std::moneypunct::do_pos_format											
do scan is	R	std::ctype::do_scan_is											
do transform	R	std::collate::do_transform											
do truename	R	std::numpunct::do_truename											
do unshift	R	std::codecvt::do_unshift											
do_always_noconv	R	std::codecvt::do_always_noconv											
do_compare	R	std::collate::do_compare											
do_curr_symbol	R	std::moneypunct::do_curr_symbol											
do_date_order	R	std::time_get::do_date_order											
do_encoding	R	std::codecvt::do_encoding											
do_falsename	R	std::numpunct::do_falsename											
do_frac_digits	R	std::moneypunct::do_frac_digits											
do_get_date	R	std::time_get::do_get_date											
do_get_monthname	R	std::time_get::do_get_monthname											
do_get_weekday	R	std::time_get::do_get_weekday											
do_hash	R	std::collate::do_hash											
do_in	R	std::codecvt::do_in											
do_length	R	std::codecvt::do_length											
do_max_length	R	std::codecvt::do_max_length											
do_neg_format	R	std::moneypunct::do_neg_format											
do_out	R	std::codecvt::do_out											
do_pos_format	R	std::moneypunct::do_pos_format											
do_scan_is	R	std::ctype::do_scan_is											
do_transform	R	std::collate::do_transform											
do_truename	R	std::numpunct::do_truename											
do_unshift	R	std::codecvt::do_unshift											
domain error	R	std::domain_error											
domain error what	R	std::domain_error::what											
domain_error	R	std::domain_error											
domain_error what	R	std::domain_error::what											
duration	R	std::chrono::duration											
duration cast	R	std::chrono::duration_cast											
duration constructor	R	std::chrono::duration::duration											
duration count	R	std::chrono::duration::count											
duration max	R	std::chrono::duration::max											
duration min	R	std::chrono::duration::min											
duration values	R	std::chrono::duration_values											
duration values max	R	std::chrono::duration_values::max											
duration values min	R	std::chrono::duration_values::min											
duration values zero	R	std::chrono::duration_values::zero											
duration zero	R	std::chrono::duration::zero											
duration_cast	R	std::chrono::duration_cast											
duration_values	R	std::chrono::duration_values											
duration_values max	R	std::chrono::duration_values::max											
duration_values min	R	std::chrono::duration_values::min											
duration_values zero	R	std::chrono::duration_values::zero											
dynamic pointer cast	R	std::dynamic_pointer_cast											
dynamic_pointer_cast	R	std::dynamic_pointer_cast											
ellint 1f	R	std::ellint_1f											
ellint 2f	R	std::ellint_2f											
ellint 3f	R	std::ellint_3f											
ellint_1f	R	std::ellint_1f											
ellint_2f	R	std::ellint_2f											
ellint_3f	R	std::ellint_3f											
emplace after	R	std::forward_list::emplace_after											
emplace_after	R	std::forward_list::emplace_after											
empty	R	std::empty											
enable if	R	std::enable_if											
enable shared from this	R	std::enable_shared_from_this											
enable shared from this constructor	R	std::enable_shared_from_this::enable_shared_from_this											
enable shared from this shared from this	R	std::enable_shared_from_this::shared_from_this											
enable shared from this weak from this	R	std::enable_shared_from_this::weak_from_this											
enable_if	R	std::enable_if											
enable_shared_from_this	R	std::enable_shared_from_this											
enable_shared_from_this constructor	R	std::enable_shared_from_this::enable_shared_from_this											
enable_shared_from_this shared_from_this	R	std::enable_shared_from_this::shared_from_this											
enable_shared_from_this weak_from_this	R	std::enable_shared_from_this::weak_from_this											
encoding	R	std::codecvt::encoding											
end	R	std::end											
endl	R	std::endl											
ends	R	std::ends											
entropy	R	std::random_device::entropy											
epsilon	R	std::numeric_limits::epsilon											
eq	R	std::char_traits::eq											
eq int type	R	std::char_traits::eq_int_type											
eq_int_type	R	std::char_traits::eq_int_type											
equal range	R	std::equal_range											
equal to	R	std::equal_to											
equal_range	R	std::equal_range											
equal_to	R	std::equal_to											
erase after	R	std::forward_list::erase_after											
erase_after	R	std::forward_list::erase_after											
erased type	R	std::experimental::erased_type											
erased_type	R	std::experimental::erased_type											
errc	R	std::errc											
error category	R	std::error_category											
error category constructor	R	std::error_category::error_category											
error category default error condition	R	std::error_category::default_error_condition											
error category destructor	R	std::error_category::~error_category											
error category equivalent	R	std::error_category::equivalent											
error category message	R	std::error_category::message											
error category name	R	std::error_category::name											
error code	R	std::error_code											
error code assign	R	std::error_code::assign											
error code category	R	std::error_code::category											
error code clear	R	std::error_code::clear											
error code constructor	R	std::error_code::error_code											
error code default error condition	R	std::error_code::default_error_condition											
error code message	R	std::error_code::message											
error code value	R	std::error_code::value											
error condition	R	std::error_condition											
error condition assign	R	std::error_condition::assign											
error condition category	R	std::error_condition::category											
error condition clear	R	std::error_condition::clear											
error condition constructor	R	std::error_condition::error_condition											
error condition message	R	std::error_condition::message											
error condition value	R	std::error_condition::value											
error_category	R	std::error_category											
error_category constructor	R	std::error_category::error_category											
error_category default_error_condition	R	std::error_category::default_error_condition											
error_category destructor	R	std::error_category::~error_category											
error_category equivalent	R	std::error_category::equivalent											
error_category message	R	std::error_category::message											
error_category name	R	std::error_category::name											
error_code	R	std::error_code											
error_code assign	R	std::error_code::assign											
error_code category	R	std::error_code::category											
error_code clear	R	std::error_code::clear											
error_code constructor	R	std::error_code::error_code											
error_code default_error_condition	R	std::error_code::default_error_condition											
error_code message	R	std::error_code::message											
error_code value	R	std::error_code::value											
error_condition	R	std::error_condition											
error_condition assign	R	std::error_condition::assign											
error_condition category	R	std::error_condition::category											
error_condition clear	R	std::error_condition::clear											
error_condition constructor	R	std::error_condition::error_condition											
error_condition message	R	std::error_condition::message											
error_condition value	R	std::error_condition::value											
exception	R	std::exception											
exception constructor	R	std::exception::exception											
exception destructor	R	std::exception::~exception											
exception what	R	std::exception::what											
exchange	R	std::exchange											
exclusive scan	R	std::exclusive_scan											
exclusive_scan	R	std::exclusive_scan											
execution parallel policy	R	std::execution::parallel_policy											
execution parallel unsequenced policy	R	std::execution::parallel_unsequenced_policy											
execution parallel_policy	R	std::execution::parallel_policy											
execution parallel_unsequenced_policy	R	std::execution::parallel_unsequenced_policy											
execution sequenced policy	R	std::execution::sequenced_policy											
execution sequenced_policy	R	std::execution::sequenced_policy											
exists	R	std::filesystem::exists											
exit	R	std::exit											
exp	R	std::exp											
experimental any	R	std::experimental::any											
experimental any cast	R	std::experimental::any_cast											
experimental any clear	R	std::experimental::any::clear											
experimental any constructor	R	std::experimental::any::any											
experimental any empty	R	std::experimental::any::empty											
experimental any swap	R	std::experimental::any::swap											
experimental any type	R	std::experimental::any::type											
experimental any_cast	R	std::experimental::any_cast											
experimental apply	R	std::experimental::apply											
experimental bad optional access	R	std::experimental::bad_optional_access											
experimental bad optional access what	R	std::experimental::bad_optional_access::what											
experimental bad_optional_access	R	std::experimental::bad_optional_access											
experimental bad_optional_access what	R	std::experimental::bad_optional_access::what											
experimental basic string view	R	std::experimental::basic_string_view											
experimental basic string view at	R	std::experimental::basic_string_view::at											
experimental basic string view back	R	std::experimental::basic_string_view::back											
experimental basic string view begin	R	std::experimental::basic_string_view::begin											
experimental basic string view cbegin	R	std::experimental::basic_string_view::cbegin											
experimental basic string view cend	R	std::experimental::basic_string_view::cend											
experimental basic string view compare	R	std::experimental::basic_string_view::compare											
experimental basic string view copy	R	std::experimental::basic_string_view::copy											
experimental basic string view crbegin	R	std::experimental::basic_string_view::crbegin											
experimental basic string view crend	R	std::experimental::basic_string_view::crend											
experimental basic string view data	R	std::experimental::basic_string_view::data											
experimental basic string view empty	R	std::experimental::basic_string_view::empty											
experimental basic string view end	R	std::experimental::basic_string_view::end											
experimental basic string view find	R	std::experimental::basic_string_view::find											
experimental basic string view find first not of	R	std::experimental::basic_string_view::find_first_not_of											
experimental basic string view find first of	R	std::experimental::basic_string_view::find_first_of											
experimental basic string view find last not of	R	std::experimental::basic_string_view::find_last_not_of											
experimental basic string view find last of	R	std::experimental::basic_string_view::find_last_of											
experimental basic string view front	R	std::experimental::basic_string_view::front											
experimental basic string view length	R	std::experimental::basic_string_view::length											
experimental basic string view max size	R	std::experimental::basic_string_view::max_size											
experimental basic string view rbegin	R	std::experimental::basic_string_view::rbegin											
experimental basic string view remove prefix	R	std::experimental::basic_string_view::remove_prefix											
experimental basic string view remove suffix	R	std::experimental::basic_string_view::remove_suffix											
experimental basic string view rend	R	std::experimental::basic_string_view::rend											
experimental basic string view rfind	R	std::experimental::basic_string_view::rfind											
experimental basic string view size	R	std::experimental::basic_string_view::size											
experimental basic string view substr	R	std::experimental::basic_string_view::substr											
experimental basic string view swap	R	std::experimental::basic_string_view::swap											
experimental basic string view to string	R	std::experimental::basic_string_view::to_string											
experimental basic_string_view	R	std::experimental::basic_string_view											
experimental basic_string_view at	R	std::experimental::basic_string_view::at											
experimental basic_string_view back	R	std::experimental::basic_string_view::back											
experimental basic_string_view begin	R	std::experimental::basic_string_view::begin											
experimental basic_string_view cbegin	R	std::experimental::basic_string_view::cbegin											
experimental basic_string_view cend	R	std::experimental::basic_string_view::cend											
experimental basic_string_view compare	R	std::experimental::basic_string_view::compare											
experimental basic_string_view copy	R	std::experimental::basic_string_view::copy											
experimental basic_string_view crbegin	R	std::experimental::basic_string_view::crbegin											
experimental basic_string_view crend	R	std::experimental::basic_string_view::crend											
experimental basic_string_view data	R	std::experimental::basic_string_view::data											
experimental basic_string_view empty	R	std::experimental::basic_string_view::empty											
experimental basic_string_view end	R	std::experimental::basic_string_view::end											
experimental basic_string_view find	R	std::experimental::basic_string_view::find											
experimental basic_string_view find_first_not_of	R	std::experimental::basic_string_view::find_first_not_of											
experimental basic_string_view find_first_of	R	std::experimental::basic_string_view::find_first_of											
experimental basic_string_view find_last_not_of	R	std::experimental::basic_string_view::find_last_not_of											
experimental basic_string_view find_last_of	R	std::experimental::basic_string_view::find_last_of											
experimental basic_string_view front	R	std::experimental::basic_string_view::front											
experimental basic_string_view length	R	std::experimental::basic_string_view::length											
experimental basic_string_view max_size	R	std::experimental::basic_string_view::max_size											
experimental basic_string_view rbegin	R	std::experimental::basic_string_view::rbegin											
experimental basic_string_view remove_prefix	R	std::experimental::basic_string_view::remove_prefix											
experimental basic_string_view remove_suffix	R	std::experimental::basic_string_view::remove_suffix											
experimental basic_string_view rend	R	std::experimental::basic_string_view::rend											
experimental basic_string_view rfind	R	std::experimental::basic_string_view::rfind											
experimental basic_string_view size	R	std::experimental::basic_string_view::size											
experimental basic_string_view substr	R	std::experimental::basic_string_view::substr											
experimental basic_string_view swap	R	std::experimental::basic_string_view::swap											
experimental basic_string_view to_string	R	std::experimental::basic_string_view::to_string											
experimental boyer moore horspool searcher	R	std::experimental::boyer_moore_horspool_searcher											
experimental boyer moore searcher	R	std::experimental::boyer_moore_searcher											
experimental boyer_moore_horspool_searcher	R	std::experimental::boyer_moore_horspool_searcher											
experimental boyer_moore_searcher	R	std::experimental::boyer_moore_searcher											
experimental default searcher	R	std::experimental::default_searcher											
experimental default_searcher	R	std::experimental::default_searcher											
experimental detected or	R	std::experimental::detected_or											
experimental detected_or	R	std::experimental::detected_or											
experimental erased type	R	std::experimental::erased_type											
experimental erased_type	R	std::experimental::erased_type											
experimental filesystem absolute	R	std::experimental::filesystem::absolute											
experimental filesystem canonical	R	std::experimental::filesystem::canonical											
experimental filesystem copy	R	std::experimental::filesystem::copy											
experimental filesystem copy options	R	std::experimental::filesystem::copy_options											
experimental filesystem copy symlink	R	std::experimental::filesystem::copy_symlink											
experimental filesystem copy_options	R	std::experimental::filesystem::copy_options											
experimental filesystem copy_symlink	R	std::experimental::filesystem::copy_symlink											
experimental filesystem create directories	R	std::experimental::filesystem::create_directories											
experimental filesystem create directory symlink	R	std::experimental::filesystem::create_directory_symlink											
experimental filesystem create hard link	R	std::experimental::filesystem::create_hard_link											
experimental filesystem create symlink	R	std::experimental::filesystem::create_symlink											
experimental filesystem create_directories	R	std::experimental::filesystem::create_directories											
experimental filesystem create_directory_symlink	R	std::experimental::filesystem::create_directory_symlink											
experimental filesystem create_hard_link	R	std::experimental::filesystem::create_hard_link											
experimental filesystem create_symlink	R	std::experimental::filesystem::create_symlink											
experimental filesystem current path	R	std::experimental::filesystem::current_path											
experimental filesystem current_path	R	std::experimental::filesystem::current_path											
experimental filesystem directory entry	R	std::experimental::filesystem::directory_entry											
experimental filesystem directory entry assign	R	std::experimental::filesystem::directory_entry::assign											
experimental filesystem directory entry constructor	R	std::experimental::filesystem::directory_entry::directory_entry											
experimental filesystem directory entry path	R	std::experimental::filesystem::directory_entry::path											
experimental filesystem directory entry replace filename	R	std::experimental::filesystem::directory_entry::replace_filename											
experimental filesystem directory entry status	R	std::experimental::filesystem::directory_entry::status											
experimental filesystem directory entry symlink status	R	std::experimental::filesystem::directory_entry::symlink_status											
experimental filesystem directory iterator	R	std::experimental::filesystem::directory_iterator											
experimental filesystem directory iterator constructor	R	std::experimental::filesystem::directory_iterator::directory_iterator											
experimental filesystem directory iterator increment	R	std::experimental::filesystem::directory_iterator::increment											
experimental filesystem directory options	R	std::experimental::filesystem::directory_options											
experimental filesystem directory_entry	R	std::experimental::filesystem::directory_entry											
experimental filesystem directory_entry assign	R	std::experimental::filesystem::directory_entry::assign											
experimental filesystem directory_entry constructor	R	std::experimental::filesystem::directory_entry::directory_entry											
experimental filesystem directory_entry path	R	std::experimental::filesystem::directory_entry::path											
experimental filesystem directory_entry replace_filename	R	std::experimental::filesystem::directory_entry::replace_filename											
experimental filesystem directory_entry status	R	std::experimental::filesystem::directory_entry::status											
experimental filesystem directory_entry symlink_status	R	std::experimental::filesystem::directory_entry::symlink_status											
experimental filesystem directory_iterator	R	std::experimental::filesystem::directory_iterator											
experimental filesystem directory_iterator constructor	R	std::experimental::filesystem::directory_iterator::directory_iterator											
experimental filesystem directory_iterator increment	R	std::experimental::filesystem::directory_iterator::increment											
experimental filesystem directory_options	R	std::experimental::filesystem::directory_options											
experimental filesystem equivalent	R	std::experimental::filesystem::equivalent											
experimental filesystem exists	R	std::experimental::filesystem::exists											
experimental filesystem file size	R	std::experimental::filesystem::file_size											
experimental filesystem file status	R	std::experimental::filesystem::file_status											
experimental filesystem file status constructor	R	std::experimental::filesystem::file_status::file_status											
experimental filesystem file status permissions	R	std::experimental::filesystem::file_status::permissions											
experimental filesystem file status type	R	std::experimental::filesystem::file_status::type											
experimental filesystem file type	R	std::experimental::filesystem::file_type											
experimental filesystem file_size	R	std::experimental::filesystem::file_size											
experimental filesystem file_status	R	std::experimental::filesystem::file_status											
experimental filesystem file_status constructor	R	std::experimental::filesystem::file_status::file_status											
experimental filesystem file_status permissions	R	std::experimental::filesystem::file_status::permissions											
experimental filesystem file_status type	R	std::experimental::filesystem::file_status::type											
experimental filesystem file_type	R	std::experimental::filesystem::file_type											
experimental filesystem filesystem error	R	std::experimental::filesystem::filesystem_error											
experimental filesystem filesystem error path1	R	std::experimental::filesystem::filesystem_error::path1											
experimental filesystem filesystem error path2	R	std::experimental::filesystem::filesystem_error::path2											
experimental filesystem filesystem error what	R	std::experimental::filesystem::filesystem_error::what											
experimental filesystem filesystem_error	R	std::experimental::filesystem::filesystem_error											
experimental filesystem filesystem_error path1	R	std::experimental::filesystem::filesystem_error::path1											
experimental filesystem filesystem_error path2	R	std::experimental::filesystem::filesystem_error::path2											
experimental filesystem filesystem_error what	R	std::experimental::filesystem::filesystem_error::what											
experimental filesystem hard link count	R	std::experimental::filesystem::hard_link_count											
experimental filesystem hard_link_count	R	std::experimental::filesystem::hard_link_count											
experimental filesystem is block file	R	std::experimental::filesystem::is_block_file											
experimental filesystem is character file	R	std::experimental::filesystem::is_character_file											
experimental filesystem is directory	R	std::experimental::filesystem::is_directory											
experimental filesystem is empty	R	std::experimental::filesystem::is_empty											
experimental filesystem is fifo	R	std::experimental::filesystem::is_fifo											
experimental filesystem is other	R	std::experimental::filesystem::is_other											
experimental filesystem is regular file	R	std::experimental::filesystem::is_regular_file											
experimental filesystem is socket	R	std::experimental::filesystem::is_socket											
experimental filesystem is symlink	R	std::experimental::filesystem::is_symlink											
experimental filesystem is_block_file	R	std::experimental::filesystem::is_block_file											
experimental filesystem is_character_file	R	std::experimental::filesystem::is_character_file											
experimental filesystem is_directory	R	std::experimental::filesystem::is_directory											
experimental filesystem is_empty	R	std::experimental::filesystem::is_empty											
experimental filesystem is_fifo	R	std::experimental::filesystem::is_fifo											
experimental filesystem is_other	R	std::experimental::filesystem::is_other											
experimental filesystem is_regular_file	R	std::experimental::filesystem::is_regular_file											
experimental filesystem is_socket	R	std::experimental::filesystem::is_socket											
experimental filesystem is_symlink	R	std::experimental::filesystem::is_symlink											
experimental filesystem path	R	std::experimental::filesystem::path											
experimental filesystem path assign	R	std::experimental::filesystem::path::assign											
experimental filesystem path begin	R	std::experimental::filesystem::path::begin											
experimental filesystem path c str	R	std::experimental::filesystem::path::c_str											
experimental filesystem path c_str	R	std::experimental::filesystem::path::c_str											
experimental filesystem path clear	R	std::experimental::filesystem::path::clear											
experimental filesystem path compare	R	std::experimental::filesystem::path::compare											
experimental filesystem path concat	R	std::experimental::filesystem::path::concat											
experimental filesystem path constructor	R	std::experimental::filesystem::path::path											
experimental filesystem path empty	R	std::experimental::filesystem::path::empty											
experimental filesystem path end	R	std::experimental::filesystem::path::end											
experimental filesystem path extension	R	std::experimental::filesystem::path::extension											
experimental filesystem path filename	R	std::experimental::filesystem::path::filename											
experimental filesystem path generic string	R	std::experimental::filesystem::path::generic_string											
experimental filesystem path generic u16string	R	std::experimental::filesystem::path::generic_u16string											
experimental filesystem path generic u32string	R	std::experimental::filesystem::path::generic_u32string											
experimental filesystem path generic u8string	R	std::experimental::filesystem::path::generic_u8string											
experimental filesystem path generic wstring	R	std::experimental::filesystem::path::generic_wstring											
experimental filesystem path generic_string	R	std::experimental::filesystem::path::generic_string											
experimental filesystem path generic_u16string	R	std::experimental::filesystem::path::generic_u16string											
experimental filesystem path generic_u32string	R	std::experimental::filesystem::path::generic_u32string											
experimental filesystem path generic_u8string	R	std::experimental::filesystem::path::generic_u8string											
experimental filesystem path generic_wstring	R	std::experimental::filesystem::path::generic_wstring											
experimental filesystem path has extension	R	std::experimental::filesystem::path::has_extension											
experimental filesystem path has filename	R	std::experimental::filesystem::path::has_filename											
experimental filesystem path has parent path	R	std::experimental::filesystem::path::has_parent_path											
experimental filesystem path has relative path	R	std::experimental::filesystem::path::has_relative_path											
experimental filesystem path has root directory	R	std::experimental::filesystem::path::has_root_directory											
experimental filesystem path has root name	R	std::experimental::filesystem::path::has_root_name											
experimental filesystem path has root path	R	std::experimental::filesystem::path::has_root_path											
experimental filesystem path has stem	R	std::experimental::filesystem::path::has_stem											
experimental filesystem path has_extension	R	std::experimental::filesystem::path::has_extension											
experimental filesystem path has_filename	R	std::experimental::filesystem::path::has_filename											
experimental filesystem path has_parent_path	R	std::experimental::filesystem::path::has_parent_path											
experimental filesystem path has_relative_path	R	std::experimental::filesystem::path::has_relative_path											
experimental filesystem path has_root_directory	R	std::experimental::filesystem::path::has_root_directory											
experimental filesystem path has_root_name	R	std::experimental::filesystem::path::has_root_name											
experimental filesystem path has_root_path	R	std::experimental::filesystem::path::has_root_path											
experimental filesystem path has_stem	R	std::experimental::filesystem::path::has_stem											
experimental filesystem path make preferred	R	std::experimental::filesystem::path::make_preferred											
experimental filesystem path make_preferred	R	std::experimental::filesystem::path::make_preferred											
experimental filesystem path native	R	std::experimental::filesystem::path::native											
experimental filesystem path parent path	R	std::experimental::filesystem::path::parent_path											
experimental filesystem path parent_path	R	std::experimental::filesystem::path::parent_path											
experimental filesystem path relative path	R	std::experimental::filesystem::path::relative_path											
experimental filesystem path relative_path	R	std::experimental::filesystem::path::relative_path											
experimental filesystem path remove filename	R	std::experimental::filesystem::path::remove_filename											
experimental filesystem path remove_filename	R	std::experimental::filesystem::path::remove_filename											
experimental filesystem path replace extension	R	std::experimental::filesystem::path::replace_extension											
experimental filesystem path replace filename	R	std::experimental::filesystem::path::replace_filename											
experimental filesystem path replace_extension	R	std::experimental::filesystem::path::replace_extension											
experimental filesystem path replace_filename	R	std::experimental::filesystem::path::replace_filename											
experimental filesystem path root directory	R	std::experimental::filesystem::path::root_directory											
experimental filesystem path root name	R	std::experimental::filesystem::path::root_name											
experimental filesystem path root path	R	std::experimental::filesystem::path::root_path											
experimental filesystem path root_directory	R	std::experimental::filesystem::path::root_directory											
experimental filesystem path root_name	R	std::experimental::filesystem::path::root_name											
experimental filesystem path root_path	R	std::experimental::filesystem::path::root_path											
experimental filesystem path stem	R	std::experimental::filesystem::path::stem											
experimental filesystem path string	R	std::experimental::filesystem::path::string											
experimental filesystem path swap	R	std::experimental::filesystem::path::swap											
experimental filesystem path u16string	R	std::experimental::filesystem::path::u16string											
experimental filesystem path u32string	R	std::experimental::filesystem::path::u32string											
experimental filesystem path u8string	R	std::experimental::filesystem::path::u8string											
experimental filesystem path wstring	R	std::experimental::filesystem::path::wstring											
experimental filesystem permissions	R	std::experimental::filesystem::permissions											
experimental filesystem perms	R	std::experimental::filesystem::perms											
experimental filesystem read symlink	R	std::experimental::filesystem::read_symlink											
experimental filesystem read_symlink	R	std::experimental::filesystem::read_symlink											
experimental filesystem recursive directory iterator	R	std::experimental::filesystem::recursive_directory_iterator											
experimental filesystem recursive directory iterator constructor	R	std::experimental::filesystem::recursive_directory_iterator::recursive_directory_iterator											
experimental filesystem recursive directory iterator depth	R	std::experimental::filesystem::recursive_directory_iterator::depth											
experimental filesystem recursive directory iterator disable recursion pending	R	std::experimental::filesystem::recursive_directory_iterator::disable_recursion_pending											
experimental filesystem recursive directory iterator increment	R	std::experimental::filesystem::recursive_directory_iterator::increment											
experimental filesystem recursive directory iterator options	R	std::experimental::filesystem::recursive_directory_iterator::options											
experimental filesystem recursive directory iterator pop	R	std::experimental::filesystem::recursive_directory_iterator::pop											
experimental filesystem recursive directory iterator recursion pending	R	std::experimental::filesystem::recursive_directory_iterator::recursion_pending											
experimental filesystem recursive_directory_iterator	R	std::experimental::filesystem::recursive_directory_iterator											
experimental filesystem recursive_directory_iterator constructor	R	std::experimental::filesystem::recursive_directory_iterator::recursive_directory_iterator											
experimental filesystem recursive_directory_iterator depth	R	std::experimental::filesystem::recursive_directory_iterator::depth											
experimental filesystem recursive_directory_iterator disable_recursion_pending	R	std::experimental::filesystem::recursive_directory_iterator::disable_recursion_pending											
experimental filesystem recursive_directory_iterator increment	R	std::experimental::filesystem::recursive_directory_iterator::increment											
experimental filesystem recursive_directory_iterator options	R	std::experimental::filesystem::recursive_directory_iterator::options											
experimental filesystem recursive_directory_iterator pop	R	std::experimental::filesystem::recursive_directory_iterator::pop											
experimental filesystem recursive_directory_iterator recursion_pending	R	std::experimental::filesystem::recursive_directory_iterator::recursion_pending											
experimental filesystem remove	R	std::experimental::filesystem::remove											
experimental filesystem remove all	R	std::experimental::filesystem::remove_all											
experimental filesystem remove_all	R	std::experimental::filesystem::remove_all											
experimental filesystem rename	R	std::experimental::filesystem::rename											
experimental filesystem resize file	R	std::experimental::filesystem::resize_file											
experimental filesystem resize_file	R	std::experimental::filesystem::resize_file											
experimental filesystem space	R	std::experimental::filesystem::space											
experimental filesystem space info	R	std::experimental::filesystem::space_info											
experimental filesystem space_info	R	std::experimental::filesystem::space_info											
experimental filesystem status	R	std::experimental::filesystem::status											
experimental filesystem status known	R	std::experimental::filesystem::status_known											
experimental filesystem status_known	R	std::experimental::filesystem::status_known											
experimental filesystem symlink status	R	std::experimental::filesystem::symlink_status											
experimental filesystem symlink_status	R	std::experimental::filesystem::symlink_status											
experimental filesystem system complete	R	std::experimental::filesystem::system_complete											
experimental filesystem system_complete	R	std::experimental::filesystem::system_complete											
experimental filesystem temp directory path	R	std::experimental::filesystem::temp_directory_path											
experimental filesystem temp_directory_path	R	std::experimental::filesystem::temp_directory_path											
experimental gcd	R	std::experimental::gcd											
experimental invocation type	R	std::experimental::invocation_type											
experimental invocation_type	R	std::experimental::invocation_type											
experimental is detected	R	std::experimental::is_detected											
experimental is_detected	R	std::experimental::is_detected											
experimental lcm	R	std::experimental::lcm											
experimental make array	R	std::experimental::make_array											
experimental make optional	R	std::experimental::make_optional											
experimental make_array	R	std::experimental::make_array											
experimental make_optional	R	std::experimental::make_optional											
experimental not fn	R	std::experimental::not_fn											
experimental not_fn	R	std::experimental::not_fn											
experimental observer ptr	R	std::experimental::observer_ptr											
experimental observer_ptr	R	std::experimental::observer_ptr											
experimental optional	R	std::experimental::optional											
experimental optional constructor	R	std::experimental::optional::optional											
experimental optional emplace	R	std::experimental::optional::emplace											
experimental optional swap	R	std::experimental::optional::swap											
experimental optional value	R	std::experimental::optional::value											
experimental optional value or	R	std::experimental::optional::value_or											
experimental optional value_or	R	std::experimental::optional::value_or											
experimental ostream joiner	R	std::experimental::ostream_joiner											
experimental ostream_joiner	R	std::experimental::ostream_joiner											
experimental pmr get default resource	R	std::experimental::pmr::get_default_resource											
experimental pmr get_default_resource	R	std::experimental::pmr::get_default_resource											
experimental pmr memory resource	R	std::experimental::pmr::memory_resource											
experimental pmr memory resource allocate	R	std::experimental::pmr::memory_resource::allocate											
experimental pmr memory resource constructor	R	std::experimental::pmr::memory_resource::memory_resource											
experimental pmr memory resource deallocate	R	std::experimental::pmr::memory_resource::deallocate											
experimental pmr memory resource do allocate	R	std::experimental::pmr::memory_resource::do_allocate											
experimental pmr memory resource do deallocate	R	std::experimental::pmr::memory_resource::do_deallocate											
experimental pmr memory resource is equal	R	std::experimental::pmr::memory_resource::is_equal											
experimental pmr memory_resource	R	std::experimental::pmr::memory_resource											
experimental pmr memory_resource allocate	R	std::experimental::pmr::memory_resource::allocate											
experimental pmr memory_resource constructor	R	std::experimental::pmr::memory_resource::memory_resource											
experimental pmr memory_resource deallocate	R	std::experimental::pmr::memory_resource::deallocate											
experimental pmr memory_resource do_allocate	R	std::experimental::pmr::memory_resource::do_allocate											
experimental pmr memory_resource do_deallocate	R	std::experimental::pmr::memory_resource::do_deallocate											
experimental pmr memory_resource is_equal	R	std::experimental::pmr::memory_resource::is_equal											
experimental pmr monotonic buffer resource	R	std::experimental::pmr::monotonic_buffer_resource											
experimental pmr monotonic_buffer_resource	R	std::experimental::pmr::monotonic_buffer_resource											
experimental pmr new delete resource	R	std::experimental::pmr::new_delete_resource											
experimental pmr new_delete_resource	R	std::experimental::pmr::new_delete_resource											
experimental pmr polymorphic allocator	R	std::experimental::pmr::polymorphic_allocator											
experimental pmr polymorphic_allocator	R	std::experimental::pmr::polymorphic_allocator											
experimental pmr resource adaptor	R	std::experimental::pmr::resource_adaptor											
experimental pmr resource_adaptor	R	std::experimental::pmr::resource_adaptor											
experimental pmr set default resource	R	std::experimental::pmr::set_default_resource											
experimental pmr set_default_resource	R	std::experimental::pmr::set_default_resource											
experimental pmr synchronized pool resource	R	std::experimental::pmr::synchronized_pool_resource											
experimental pmr synchronized_pool_resource	R	std::experimental::pmr::synchronized_pool_resource											
experimental pmr unsynchronized pool resource	R	std::experimental::pmr::unsynchronized_pool_resource											
experimental pmr unsynchronized_pool_resource	R	std::experimental::pmr::unsynchronized_pool_resource											
experimental propagate const	R	std::experimental::propagate_const											
experimental propagate_const	R	std::experimental::propagate_const											
experimental randint	R	std::experimental::randint											
experimental reseed	R	std::experimental::reseed											
experimental sample	R	std::experimental::sample											
experimental search	R	std::experimental::search											
experimental source location	R	std::experimental::source_location											
experimental source_location	R	std::experimental::source_location											
experimental to array	R	std::experimental::to_array											
experimental to_array	R	std::experimental::to_array											
expintf	R	std::expintf											
expired	R	std::weak_ptr::expired											
exponential distribution	R	std::exponential_distribution											
exponential distribution constructor	R	std::exponential_distribution::exponential_distribution											
exponential distribution lambda	R	std::exponential_distribution::lambda											
exponential distribution max	R	std::exponential_distribution::max											
exponential distribution min	R	std::exponential_distribution::min											
exponential distribution param	R	std::exponential_distribution::param											
exponential distribution reset	R	std::exponential_distribution::reset											
exponential_distribution	R	std::exponential_distribution											
exponential_distribution constructor	R	std::exponential_distribution::exponential_distribution											
exponential_distribution lambda	R	std::exponential_distribution::lambda											
exponential_distribution max	R	std::exponential_distribution::max											
exponential_distribution min	R	std::exponential_distribution::min											
exponential_distribution param	R	std::exponential_distribution::param											
exponential_distribution reset	R	std::exponential_distribution::reset											
extension	R	std::filesystem::path::extension											
extent	R	std::extent											
extreme value distribution	R	std::extreme_value_distribution											
extreme value distribution a	R	std::extreme_value_distribution::a											
extreme value distribution b	R	std::extreme_value_distribution::b											
extreme value distribution constructor	R	std::extreme_value_distribution::extreme_value_distribution											
extreme value distribution max	R	std::extreme_value_distribution::max											
extreme value distribution min	R	std::extreme_value_distribution::min											
extreme value distribution param	R	std::extreme_value_distribution::param											
extreme value distribution reset	R	std::extreme_value_distribution::reset											
extreme_value_distribution	R	std::extreme_value_distribution											
extreme_value_distribution a	R	std::extreme_value_distribution::a											
extreme_value_distribution b	R	std::extreme_value_distribution::b											
extreme_value_distribution constructor	R	std::extreme_value_distribution::extreme_value_distribution											
extreme_value_distribution max	R	std::extreme_value_distribution::max											
extreme_value_distribution min	R	std::extreme_value_distribution::min											
extreme_value_distribution param	R	std::extreme_value_distribution::param											
extreme_value_distribution reset	R	std::extreme_value_distribution::reset											
facet	R	std::locale::facet											
facet constructor	R	std::locale::facet::facet											
falsename	R	std::numpunct::falsename											
fclose	R	std::fclose											
feclearexcept	R	std::feclearexcept											
fegetenv	R	std::fegetenv											
fegetexceptflag	R	std::fegetexceptflag											
fegetround	R	std::fegetround											
feholdexcept	R	std::feholdexcept											
feof	R	std::feof											
feraiseexcept	R	std::feraiseexcept											
ferror	R	std::ferror											
fesetenv	R	std::fesetenv											
fesetexceptflag	R	std::fesetexceptflag											
fesetround	R	std::fesetround											
fetch add	R	std::atomic::fetch_add											
fetch and	R	std::atomic::fetch_and											
fetch or	R	std::atomic::fetch_or											
fetch sub	R	std::atomic::fetch_sub											
fetch xor	R	std::atomic::fetch_xor											
fetch_add	R	std::atomic::fetch_add											
fetch_and	R	std::atomic::fetch_and											
fetch_or	R	std::atomic::fetch_or											
fetch_sub	R	std::atomic::fetch_sub											
fetch_xor	R	std::atomic::fetch_xor											
fetestexcept	R	std::fetestexcept											
feupdateenv	R	std::feupdateenv											
fflush	R	std::fflush											
fgetc	R	std::fgetc											
fgetpos	R	std::fgetpos											
fgets	R	std::fgets											
fgetwc	R	std::fgetwc											
fgetws	R	std::fgetws											
file size	R	std::filesystem::file_size											
file status	R	std::filesystem::file_status											
file status constructor	R	std::filesystem::file_status::file_status											
file status permissions	R	std::filesystem::file_status::permissions											
file status type	R	std::filesystem::file_status::type											
file type	R	std::filesystem::file_type											
file_size	R	std::filesystem::file_size											
file_status	R	std::filesystem::file_status											
file_status constructor	R	std::filesystem::file_status::file_status											
file_status permissions	R	std::filesystem::file_status::permissions											
file_status type	R	std::filesystem::file_status::type											
file_type	R	std::filesystem::file_type											
filename	R	std::filesystem::path::filename											
filesystem absolute	R	std::filesystem::absolute											
filesystem canonical	R	std::experimental::filesystem::canonical											
filesystem copy	R	std::filesystem::copy											
filesystem copy options	R	std::filesystem::copy_options											
filesystem copy symlink	R	std::filesystem::copy_symlink											
filesystem copy_options	R	std::filesystem::copy_options											
filesystem copy_symlink	R	std::filesystem::copy_symlink											
filesystem create directories	R	std::filesystem::create_directories											
filesystem create directory symlink	R	std::filesystem::create_directory_symlink											
filesystem create hard link	R	std::filesystem::create_hard_link											
filesystem create symlink	R	std::filesystem::create_symlink											
filesystem create_directories	R	std::filesystem::create_directories											
filesystem create_directory_symlink	R	std::filesystem::create_directory_symlink											
filesystem create_hard_link	R	std::filesystem::create_hard_link											
filesystem create_symlink	R	std::filesystem::create_symlink											
filesystem current path	R	std::filesystem::current_path											
filesystem current_path	R	std::filesystem::current_path											
filesystem directory entry	R	std::filesystem::directory_entry											
filesystem directory entry assign	R	std::filesystem::directory_entry::assign											
filesystem directory entry constructor	R	std::filesystem::directory_entry::directory_entry											
filesystem directory entry path	R	std::filesystem::directory_entry::path											
filesystem directory entry replace filename	R	std::filesystem::directory_entry::replace_filename											
filesystem directory entry status	R	std::filesystem::directory_entry::status											
filesystem directory entry symlink status	R	std::filesystem::directory_entry::symlink_status											
filesystem directory iterator	R	std::filesystem::directory_iterator											
filesystem directory iterator constructor	R	std::filesystem::directory_iterator::directory_iterator											
filesystem directory iterator increment	R	std::filesystem::directory_iterator::increment											
filesystem directory options	R	std::filesystem::directory_options											
filesystem directory_entry	R	std::filesystem::directory_entry											
filesystem directory_entry assign	R	std::filesystem::directory_entry::assign											
filesystem directory_entry constructor	R	std::filesystem::directory_entry::directory_entry											
filesystem directory_entry path	R	std::filesystem::directory_entry::path											
filesystem directory_entry replace_filename	R	std::filesystem::directory_entry::replace_filename											
filesystem directory_entry status	R	std::filesystem::directory_entry::status											
filesystem directory_entry symlink_status	R	std::filesystem::directory_entry::symlink_status											
filesystem directory_iterator	R	std::filesystem::directory_iterator											
filesystem directory_iterator constructor	R	std::filesystem::directory_iterator::directory_iterator											
filesystem directory_iterator increment	R	std::filesystem::directory_iterator::increment											
filesystem directory_options	R	std::filesystem::directory_options											
filesystem equivalent	R	std::filesystem::equivalent											
filesystem error	R	std::filesystem::filesystem_error											
filesystem error path1	R	std::filesystem::filesystem_error::path1											
filesystem error path2	R	std::filesystem::filesystem_error::path2											
filesystem error what	R	std::filesystem::filesystem_error::what											
filesystem exists	R	std::filesystem::exists											
filesystem file size	R	std::filesystem::file_size											
filesystem file status	R	std::filesystem::file_status											
filesystem file status constructor	R	std::filesystem::file_status::file_status											
filesystem file status permissions	R	std::filesystem::file_status::permissions											
filesystem file status type	R	std::filesystem::file_status::type											
filesystem file type	R	std::filesystem::file_type											
filesystem file_size	R	std::filesystem::file_size											
filesystem file_status	R	std::filesystem::file_status											
filesystem file_status constructor	R	std::filesystem::file_status::file_status											
filesystem file_status permissions	R	std::filesystem::file_status::permissions											
filesystem file_status type	R	std::filesystem::file_status::type											
filesystem file_type	R	std::filesystem::file_type											
filesystem filesystem error	R	std::filesystem::filesystem_error											
filesystem filesystem error path1	R	std::filesystem::filesystem_error::path1											
filesystem filesystem error path2	R	std::filesystem::filesystem_error::path2											
filesystem filesystem error what	R	std::filesystem::filesystem_error::what											
filesystem filesystem_error	R	std::filesystem::filesystem_error											
filesystem filesystem_error path1	R	std::filesystem::filesystem_error::path1											
filesystem filesystem_error path2	R	std::filesystem::filesystem_error::path2											
filesystem filesystem_error what	R	std::filesystem::filesystem_error::what											
filesystem hard link count	R	std::filesystem::hard_link_count											
filesystem hard_link_count	R	std::filesystem::hard_link_count											
filesystem is block file	R	std::filesystem::is_block_file											
filesystem is character file	R	std::filesystem::is_character_file											
filesystem is directory	R	std::filesystem::is_directory											
filesystem is empty	R	std::filesystem::is_empty											
filesystem is fifo	R	std::filesystem::is_fifo											
filesystem is other	R	std::filesystem::is_other											
filesystem is regular file	R	std::filesystem::is_regular_file											
filesystem is socket	R	std::filesystem::is_socket											
filesystem is symlink	R	std::filesystem::is_symlink											
filesystem is_block_file	R	std::filesystem::is_block_file											
filesystem is_character_file	R	std::filesystem::is_character_file											
filesystem is_directory	R	std::filesystem::is_directory											
filesystem is_empty	R	std::filesystem::is_empty											
filesystem is_fifo	R	std::filesystem::is_fifo											
filesystem is_other	R	std::filesystem::is_other											
filesystem is_regular_file	R	std::filesystem::is_regular_file											
filesystem is_socket	R	std::filesystem::is_socket											
filesystem is_symlink	R	std::filesystem::is_symlink											
filesystem path	R	std::filesystem::path											
filesystem path assign	R	std::filesystem::path::assign											
filesystem path begin	R	std::filesystem::path::begin											
filesystem path c str	R	std::filesystem::path::c_str											
filesystem path c_str	R	std::filesystem::path::c_str											
filesystem path clear	R	std::filesystem::path::clear											
filesystem path compare	R	std::filesystem::path::compare											
filesystem path concat	R	std::filesystem::path::concat											
filesystem path constructor	R	std::filesystem::path::path											
filesystem path empty	R	std::filesystem::path::empty											
filesystem path end	R	std::filesystem::path::end											
filesystem path extension	R	std::filesystem::path::extension											
filesystem path filename	R	std::filesystem::path::filename											
filesystem path generic string	R	std::filesystem::path::generic_string											
filesystem path generic u16string	R	std::filesystem::path::generic_u16string											
filesystem path generic u32string	R	std::filesystem::path::generic_u32string											
filesystem path generic u8string	R	std::filesystem::path::generic_u8string											
filesystem path generic wstring	R	std::filesystem::path::generic_wstring											
filesystem path generic_string	R	std::filesystem::path::generic_string											
filesystem path generic_u16string	R	std::filesystem::path::generic_u16string											
filesystem path generic_u32string	R	std::filesystem::path::generic_u32string											
filesystem path generic_u8string	R	std::filesystem::path::generic_u8string											
filesystem path generic_wstring	R	std::filesystem::path::generic_wstring											
filesystem path has extension	R	std::filesystem::path::has_extension											
filesystem path has filename	R	std::filesystem::path::has_filename											
filesystem path has parent path	R	std::filesystem::path::has_parent_path											
filesystem path has relative path	R	std::filesystem::path::has_relative_path											
filesystem path has root directory	R	std::filesystem::path::has_root_directory											
filesystem path has root name	R	std::filesystem::path::has_root_name											
filesystem path has root path	R	std::filesystem::path::has_root_path											
filesystem path has stem	R	std::filesystem::path::has_stem											
filesystem path has_extension	R	std::filesystem::path::has_extension											
filesystem path has_filename	R	std::filesystem::path::has_filename											
filesystem path has_parent_path	R	std::filesystem::path::has_parent_path											
filesystem path has_relative_path	R	std::filesystem::path::has_relative_path											
filesystem path has_root_directory	R	std::filesystem::path::has_root_directory											
filesystem path has_root_name	R	std::filesystem::path::has_root_name											
filesystem path has_root_path	R	std::filesystem::path::has_root_path											
filesystem path has_stem	R	std::filesystem::path::has_stem											
filesystem path is absolute	R	std::filesystem::path::is_absolute											
filesystem path is relative	R	std::filesystem::path::is_relative											
filesystem path is_absolute	R	std::filesystem::path::is_absolute											
filesystem path is_relative	R	std::filesystem::path::is_relative											
filesystem path lexically normal	R	std::filesystem::path::lexically_normal											
filesystem path lexically proximate	R	std::filesystem::path::lexically_proximate											
filesystem path lexically relative	R	std::filesystem::path::lexically_relative											
filesystem path lexically_normal	R	std::filesystem::path::lexically_normal											
filesystem path lexically_proximate	R	std::filesystem::path::lexically_proximate											
filesystem path lexically_relative	R	std::filesystem::path::lexically_relative											
filesystem path make preferred	R	std::filesystem::path::make_preferred											
filesystem path make_preferred	R	std::filesystem::path::make_preferred											
filesystem path native	R	std::filesystem::path::native											
filesystem path parent path	R	std::filesystem::path::parent_path											
filesystem path parent_path	R	std::filesystem::path::parent_path											
filesystem path relative path	R	std::filesystem::path::relative_path											
filesystem path relative_path	R	std::filesystem::path::relative_path											
filesystem path remove filename	R	std::filesystem::path::remove_filename											
filesystem path remove_filename	R	std::filesystem::path::remove_filename											
filesystem path replace extension	R	std::filesystem::path::replace_extension											
filesystem path replace filename	R	std::filesystem::path::replace_filename											
filesystem path replace_extension	R	std::filesystem::path::replace_extension											
filesystem path replace_filename	R	std::filesystem::path::replace_filename											
filesystem path root directory	R	std::filesystem::path::root_directory											
filesystem path root name	R	std::filesystem::path::root_name											
filesystem path root path	R	std::filesystem::path::root_path											
filesystem path root_directory	R	std::filesystem::path::root_directory											
filesystem path root_name	R	std::filesystem::path::root_name											
filesystem path root_path	R	std::filesystem::path::root_path											
filesystem path stem	R	std::filesystem::path::stem											
filesystem path string	R	std::filesystem::path::string											
filesystem path swap	R	std::filesystem::path::swap											
filesystem path u16string	R	std::filesystem::path::u16string											
filesystem path u32string	R	std::filesystem::path::u32string											
filesystem path u8string	R	std::filesystem::path::u8string											
filesystem path wstring	R	std::filesystem::path::wstring											
filesystem permissions	R	std::filesystem::permissions											
filesystem perms	R	std::filesystem::perms											
filesystem read symlink	R	std::filesystem::read_symlink											
filesystem read_symlink	R	std::filesystem::read_symlink											
filesystem recursive directory iterator	R	std::filesystem::recursive_directory_iterator											
filesystem recursive directory iterator constructor	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
filesystem recursive directory iterator depth	R	std::filesystem::recursive_directory_iterator::depth											
filesystem recursive directory iterator disable recursion pending	R	std::filesystem::recursive_directory_iterator::disable_recursion_pending											
filesystem recursive directory iterator increment	R	std::filesystem::recursive_directory_iterator::increment											
filesystem recursive directory iterator options	R	std::filesystem::recursive_directory_iterator::options											
filesystem recursive directory iterator pop	R	std::filesystem::recursive_directory_iterator::pop											
filesystem recursive directory iterator recursion pending	R	std::filesystem::recursive_directory_iterator::recursion_pending											
filesystem recursive_directory_iterator	R	std::filesystem::recursive_directory_iterator											
filesystem recursive_directory_iterator constructor	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
filesystem recursive_directory_iterator depth	R	std::filesystem::recursive_directory_iterator::depth											
filesystem recursive_directory_iterator disable_recursion_pending	R	std::filesystem::recursive_directory_iterator::disable_recursion_pending											
filesystem recursive_directory_iterator increment	R	std::filesystem::recursive_directory_iterator::increment											
filesystem recursive_directory_iterator options	R	std::filesystem::recursive_directory_iterator::options											
filesystem recursive_directory_iterator pop	R	std::filesystem::recursive_directory_iterator::pop											
filesystem recursive_directory_iterator recursion_pending	R	std::filesystem::recursive_directory_iterator::recursion_pending											
filesystem remove	R	std::filesystem::remove											
filesystem remove all	R	std::filesystem::remove_all											
filesystem remove_all	R	std::filesystem::remove_all											
filesystem rename	R	std::filesystem::rename											
filesystem resize file	R	std::filesystem::resize_file											
filesystem resize_file	R	std::filesystem::resize_file											
filesystem space	R	std::filesystem::space											
filesystem space info	R	std::filesystem::space_info											
filesystem space_info	R	std::filesystem::space_info											
filesystem status	R	std::filesystem::status											
filesystem status known	R	std::filesystem::status_known											
filesystem status_known	R	std::filesystem::status_known											
filesystem symlink status	R	std::filesystem::symlink_status											
filesystem symlink_status	R	std::filesystem::symlink_status											
filesystem system complete	R	std::filesystem::system_complete											
filesystem system_complete	R	std::filesystem::system_complete											
filesystem temp directory path	R	std::filesystem::temp_directory_path											
filesystem temp_directory_path	R	std::filesystem::temp_directory_path											
filesystem u8path	R	std::filesystem::u8path											
filesystem_error	R	std::filesystem::filesystem_error											
filesystem_error path1	R	std::filesystem::filesystem_error::path1											
filesystem_error path2	R	std::filesystem::filesystem_error::path2											
filesystem_error what	R	std::filesystem::filesystem_error::what											
fill n	R	std::fill_n											
fill_n	R	std::fill_n											
find	R	std::find											
find end	R	std::find_end											
find first of	R	std::find_first_of											
find if	R	std::find_if											
find if not	R	std::find_if_not											
find_end	R	std::find_end											
find_first_of	R	std::find_first_of											
find_if	R	std::find_if											
find_if_not	R	std::find_if_not											
fisher f distribution	R	std::fisher_f_distribution											
fisher f distribution constructor	R	std::fisher_f_distribution::fisher_f_distribution											
fisher f distribution m	R	std::fisher_f_distribution::m											
fisher f distribution max	R	std::fisher_f_distribution::max											
fisher f distribution min	R	std::fisher_f_distribution::min											
fisher f distribution n	R	std::fisher_f_distribution::n											
fisher f distribution param	R	std::fisher_f_distribution::param											
fisher f distribution reset	R	std::fisher_f_distribution::reset											
fisher_f_distribution	R	std::fisher_f_distribution											
fisher_f_distribution constructor	R	std::fisher_f_distribution::fisher_f_distribution											
fisher_f_distribution m	R	std::fisher_f_distribution::m											
fisher_f_distribution max	R	std::fisher_f_distribution::max											
fisher_f_distribution min	R	std::fisher_f_distribution::min											
fisher_f_distribution n	R	std::fisher_f_distribution::n											
fisher_f_distribution param	R	std::fisher_f_distribution::param											
fisher_f_distribution reset	R	std::fisher_f_distribution::reset											
fixed	R	std::fixed											
flip	R	std::bitset::flip											
flush	R	std::flush											
fopen	R	std::fopen											
format	R	std::match_results::format											
forward as tuple	R	std::forward_as_tuple											
forward iterator tag	R	std::forward_iterator_tag											
forward list	R	std::forward_list											
forward list assign	R	std::forward_list::assign											
forward list before begin	R	std::forward_list::before_begin											
forward list begin	R	std::forward_list::begin											
forward list cbefore begin	R	std::forward_list::cbefore_begin											
forward list cbegin	R	std::forward_list::cbegin											
forward list cend	R	std::forward_list::cend											
forward list clear	R	std::forward_list::clear											
forward list constructor	R	std::forward_list::forward_list											
forward list emplace after	R	std::forward_list::emplace_after											
forward list emplace front	R	std::forward_list::emplace_front											
forward list empty	R	std::forward_list::empty											
forward list end	R	std::forward_list::end											
forward list erase after	R	std::forward_list::erase_after											
forward list front	R	std::forward_list::front											
forward list get allocator	R	std::forward_list::get_allocator											
forward list insert after	R	std::forward_list::insert_after											
forward list max size	R	std::forward_list::max_size											
forward list merge	R	std::forward_list::merge											
forward list pop front	R	std::forward_list::pop_front											
forward list push front	R	std::forward_list::push_front											
forward list remove	R	std::forward_list::remove											
forward list remove if	R	std::forward_list::remove_if											
forward list resize	R	std::forward_list::resize											
forward list reverse	R	std::forward_list::reverse											
forward list sort	R	std::forward_list::sort											
forward list splice after	R	std::forward_list::splice_after											
forward list swap	R	std::forward_list::swap											
forward list unique	R	std::forward_list::unique											
forward_as_tuple	R	std::forward_as_tuple											
forward_iterator_tag	R	std::forward_iterator_tag											
forward_list	R	std::forward_list											
forward_list assign	R	std::forward_list::assign											
forward_list before_begin	R	std::forward_list::before_begin											
forward_list begin	R	std::forward_list::begin											
forward_list cbefore_begin	R	std::forward_list::cbefore_begin											
forward_list cbegin	R	std::forward_list::cbegin											
forward_list cend	R	std::forward_list::cend											
forward_list clear	R	std::forward_list::clear											
forward_list constructor	R	std::forward_list::forward_list											
forward_list emplace_after	R	std::forward_list::emplace_after											
forward_list emplace_front	R	std::forward_list::emplace_front											
forward_list empty	R	std::forward_list::empty											
forward_list end	R	std::forward_list::end											
forward_list erase_after	R	std::forward_list::erase_after											
forward_list front	R	std::forward_list::front											
forward_list get_allocator	R	std::forward_list::get_allocator											
forward_list insert_after	R	std::forward_list::insert_after											
forward_list max_size	R	std::forward_list::max_size											
forward_list merge	R	std::forward_list::merge											
forward_list pop_front	R	std::forward_list::pop_front											
forward_list push_front	R	std::forward_list::push_front											
forward_list remove	R	std::forward_list::remove											
forward_list remove_if	R	std::forward_list::remove_if											
forward_list resize	R	std::forward_list::resize											
forward_list reverse	R	std::forward_list::reverse											
forward_list sort	R	std::forward_list::sort											
forward_list splice_after	R	std::forward_list::splice_after											
forward_list swap	R	std::forward_list::swap											
forward_list unique	R	std::forward_list::unique											
fpos	R	std::fpos											
fpos state	R	std::fpos::state											
fprintf	R	std::fprintf											
fputc	R	std::fputc											
fputs	R	std::fputs											
fputwc	R	std::fputwc											
fputws	R	std::fputws											
frac digits	R	std::moneypunct::frac_digits											
frac_digits	R	std::moneypunct::frac_digits											
fread	R	std::fread											
free	R	std::free											
freopen	R	std::freopen											
from bytes	R	std::wstring_convert::from_bytes											
from time t	R	std::chrono::system_clock::from_time_t											
from_bytes	R	std::wstring_convert::from_bytes											
from_time_t	R	std::chrono::system_clock::from_time_t											
front insert iterator	R	std::front_insert_iterator											
front inserter	R	std::front_inserter											
front_insert_iterator	R	std::front_insert_iterator											
front_inserter	R	std::front_inserter											
fscanf	R	std::fscanf											
fseek	R	std::fseek											
fsetpos	R	std::fsetpos											
ftell	R	std::ftell											
function	R	std::function											
function assign	R	std::function::assign											
function constructor	R	std::function::function											
function swap	R	std::function::swap											
function target	R	std::function::target											
function target type	R	std::function::target_type											
function target_type	R	std::function::target_type											
future	R	std::future											
future constructor	R	std::future::future											
future error	R	std::future_error											
future error code	R	std::future_error::code											
future error constructor	R	std::future_error::future_error											
future get	R	std::future::get											
future share	R	std::future::share											
future valid	R	std::future::valid											
future wait	R	std::future::wait											
future wait for	R	std::future::wait_for											
future wait until	R	std::future::wait_until											
future wait_for	R	std::future::wait_for											
future wait_until	R	std::future::wait_until											
future_error	R	std::future_error											
future_error code	R	std::future_error::code											
future_error constructor	R	std::future_error::future_error											
fwprintf	R	std::fwprintf											
fwrite	R	std::fwrite											
fwscanf	R	std::fwscanf											
gamma distribution	R	std::gamma_distribution											
gamma distribution alpha	R	std::gamma_distribution::alpha											
gamma distribution beta	R	std::gamma_distribution::beta											
gamma distribution constructor	R	std::gamma_distribution::gamma_distribution											
gamma distribution max	R	std::gamma_distribution::max											
gamma distribution min	R	std::gamma_distribution::min											
gamma distribution param	R	std::gamma_distribution::param											
gamma distribution reset	R	std::gamma_distribution::reset											
gamma_distribution	R	std::gamma_distribution											
gamma_distribution alpha	R	std::gamma_distribution::alpha											
gamma_distribution beta	R	std::gamma_distribution::beta											
gamma_distribution constructor	R	std::gamma_distribution::gamma_distribution											
gamma_distribution max	R	std::gamma_distribution::max											
gamma_distribution min	R	std::gamma_distribution::min											
gamma_distribution param	R	std::gamma_distribution::param											
gamma_distribution reset	R	std::gamma_distribution::reset											
gcd	R	std::gcd											
generate	R	std::seed_seq::generate											
generate canonical	R	std::generate_canonical											
generate n	R	std::generate_n											
generate_canonical	R	std::generate_canonical											
generate_n	R	std::generate_n											
generic category	R	std::generic_category											
generic string	R	std::filesystem::path::generic_string											
generic u16string	R	std::filesystem::path::generic_u16string											
generic u32string	R	std::filesystem::path::generic_u32string											
generic u8string	R	std::filesystem::path::generic_u8string											
generic wstring	R	std::filesystem::path::generic_wstring											
generic_category	R	std::generic_category											
generic_string	R	std::filesystem::path::generic_string											
generic_u16string	R	std::filesystem::path::generic_u16string											
generic_u32string	R	std::filesystem::path::generic_u32string											
generic_u8string	R	std::filesystem::path::generic_u8string											
generic_wstring	R	std::filesystem::path::generic_wstring											
geometric distribution	R	std::geometric_distribution											
geometric distribution constructor	R	std::geometric_distribution::geometric_distribution											
geometric distribution max	R	std::geometric_distribution::max											
geometric distribution min	R	std::geometric_distribution::min											
geometric distribution p	R	std::geometric_distribution::p											
geometric distribution param	R	std::geometric_distribution::param											
geometric distribution reset	R	std::geometric_distribution::reset											
geometric_distribution	R	std::geometric_distribution											
geometric_distribution constructor	R	std::geometric_distribution::geometric_distribution											
geometric_distribution max	R	std::geometric_distribution::max											
geometric_distribution min	R	std::geometric_distribution::min											
geometric_distribution p	R	std::geometric_distribution::p											
geometric_distribution param	R	std::geometric_distribution::param											
geometric_distribution reset	R	std::geometric_distribution::reset											
get date	R	std::time_get::get_date											
get default resource	R	std::pmr::get_default_resource											
get deleter	R	std::unique_ptr::get_deleter											
get money	R	std::get_money											
get monthname	R	std::time_get::get_monthname											
get new handler	R	std::get_new_handler											
get pointer safety	R	std::get_pointer_safety											
get temporary buffer	R	std::get_temporary_buffer											
get terminate	R	std::get_terminate											
get time	R	std::get_time											
get weekday	R	std::time_get::get_weekday											
get_date	R	std::time_get::get_date											
get_default_resource	R	std::pmr::get_default_resource											
get_deleter	R	std::unique_ptr::get_deleter											
get_money	R	std::get_money											
get_monthname	R	std::time_get::get_monthname											
get_new_handler	R	std::get_new_handler											
get_pointer_safety	R	std::get_pointer_safety											
get_temporary_buffer	R	std::get_temporary_buffer											
get_terminate	R	std::get_terminate											
get_time	R	std::get_time											
get_weekday	R	std::time_get::get_weekday											
getc	R	std::getc											
getchar	R	std::getchar											
getenv	R	std::getenv											
getline	R	std::getline											
getwchar	R	std::getwchar											
global	R	std::locale::global											
gmtime	R	std::gmtime											
greater	R	std::greater											
greater equal	R	std::greater_equal											
greater_equal	R	std::greater_equal											
gslice	R	std::gslice											
gslice array	R	std::gslice_array											
gslice_array	R	std::gslice_array											
hard link count	R	std::filesystem::hard_link_count											
hard_link_count	R	std::filesystem::hard_link_count											
hardware concurrency	R	std::thread::hardware_concurrency											
hardware_concurrency	R	std::thread::hardware_concurrency											
has extension	R	std::filesystem::path::has_extension											
has facet	R	std::has_facet											
has filename	R	std::filesystem::path::has_filename											
has parent path	R	std::filesystem::path::has_parent_path											
has relative path	R	std::filesystem::path::has_relative_path											
has root directory	R	std::filesystem::path::has_root_directory											
has root name	R	std::filesystem::path::has_root_name											
has root path	R	std::filesystem::path::has_root_path											
has stem	R	std::filesystem::path::has_stem											
has unique object representations	R	std::has_unique_object_representations											
has virtual destructor	R	std::has_virtual_destructor											
has_extension	R	std::filesystem::path::has_extension											
has_facet	R	std::has_facet											
has_filename	R	std::filesystem::path::has_filename											
has_parent_path	R	std::filesystem::path::has_parent_path											
has_relative_path	R	std::filesystem::path::has_relative_path											
has_root_directory	R	std::filesystem::path::has_root_directory											
has_root_name	R	std::filesystem::path::has_root_name											
has_root_path	R	std::filesystem::path::has_root_path											
has_stem	R	std::filesystem::path::has_stem											
has_unique_object_representations	R	std::has_unique_object_representations											
has_virtual_destructor	R	std::has_virtual_destructor											
hash	R	std::collate::hash											
hermitef	R	std::hermitef											
hex	R	std::hex											
hexfloat	R	std::hexfloat											
high resolution clock	R	std::chrono::high_resolution_clock											
high resolution clock now	R	std::chrono::high_resolution_clock::now											
high_resolution_clock	R	std::chrono::high_resolution_clock											
high_resolution_clock now	R	std::chrono::high_resolution_clock::now											
holds alternative	R	std::holds_alternative											
holds_alternative	R	std::holds_alternative											
imag	R	std::complex::imag											
imaxdiv	R	std::imaxdiv											
imaxdiv t	R	std::imaxdiv_t											
imaxdiv_t	R	std::imaxdiv_t											
in	R	std::codecvt::in											
in place	R	std::in_place											
in_place	R	std::in_place											
includes	R	std::includes											
inclusive scan	R	std::inclusive_scan											
inclusive_scan	R	std::inclusive_scan											
independent bits engine	R	std::independent_bits_engine											
independent bits engine base	R	std::independent_bits_engine::base											
independent bits engine constructor	R	std::independent_bits_engine::independent_bits_engine											
independent bits engine discard	R	std::independent_bits_engine::discard											
independent bits engine max	R	std::independent_bits_engine::max											
independent bits engine min	R	std::independent_bits_engine::min											
independent bits engine seed	R	std::independent_bits_engine::seed											
independent_bits_engine	R	std::independent_bits_engine											
independent_bits_engine base	R	std::independent_bits_engine::base											
independent_bits_engine constructor	R	std::independent_bits_engine::independent_bits_engine											
independent_bits_engine discard	R	std::independent_bits_engine::discard											
independent_bits_engine max	R	std::independent_bits_engine::max											
independent_bits_engine min	R	std::independent_bits_engine::min											
independent_bits_engine seed	R	std::independent_bits_engine::seed											
index	R	std::variant::index											
indirect array	R	std::indirect_array											
indirect_array	R	std::indirect_array											
infinity	R	std::numeric_limits::infinity											
initializer list	R	std::initializer_list											
initializer list begin	R	std::initializer_list::begin											
initializer list constructor	R	std::initializer_list::initializer_list											
initializer list end	R	std::initializer_list::end											
initializer list size	R	std::initializer_list::size											
initializer_list	R	std::initializer_list											
initializer_list begin	R	std::initializer_list::begin											
initializer_list constructor	R	std::initializer_list::initializer_list											
initializer_list end	R	std::initializer_list::end											
initializer_list size	R	std::initializer_list::size											
inner allocator	R	std::scoped_allocator_adaptor::inner_allocator											
inner product	R	std::inner_product											
inner_allocator	R	std::scoped_allocator_adaptor::inner_allocator											
inner_product	R	std::inner_product											
inplace merge	R	std::inplace_merge											
inplace_merge	R	std::inplace_merge											
input iterator tag	R	std::input_iterator_tag											
input_iterator_tag	R	std::input_iterator_tag											
insert after	R	std::forward_list::insert_after											
insert iterator	R	std::insert_iterator											
insert_after	R	std::forward_list::insert_after											
insert_iterator	R	std::insert_iterator											
inserter	R	std::inserter											
integer sequence	R	std::integer_sequence											
integer_sequence	R	std::integer_sequence											
integral constant	R	std::integral_constant											
integral_constant	R	std::integral_constant											
internal	R	std::internal											
invalid argument	R	std::invalid_argument											
invalid argument what	R	std::invalid_argument::what											
invalid_argument	R	std::invalid_argument											
invalid_argument what	R	std::invalid_argument::what											
invocation type	R	std::experimental::invocation_type											
invocation_type	R	std::experimental::invocation_type											
invoke	R	std::invoke											
ios base	R	std::ios_base											
ios base Init	R	std::ios_base::Init											
ios base constructor	R	std::ios_base::ios_base											
ios base destructor	R	std::ios_base::~ios_base											
ios base failure	R	std::ios_base::failure											
ios base failure what	R	std::ios_base::failure::what											
ios base flags	R	std::ios_base::flags											
ios base getloc	R	std::ios_base::getloc											
ios base imbue	R	std::ios_base::imbue											
ios base iword	R	std::ios_base::iword											
ios base precision	R	std::ios_base::precision											
ios base pword	R	std::ios_base::pword											
ios base register callback	R	std::ios_base::register_callback											
ios base setf	R	std::ios_base::setf											
ios base sync with stdio	R	std::ios_base::sync_with_stdio											
ios base unsetf	R	std::ios_base::unsetf											
ios base width	R	std::ios_base::width											
ios base xalloc	R	std::ios_base::xalloc											
ios_base	R	std::ios_base											
ios_base Init	R	std::ios_base::Init											
ios_base constructor	R	std::ios_base::ios_base											
ios_base destructor	R	std::ios_base::~ios_base											
ios_base failure	R	std::ios_base::failure											
ios_base failure what	R	std::ios_base::failure::what											
ios_base flags	R	std::ios_base::flags											
ios_base getloc	R	std::ios_base::getloc											
ios_base imbue	R	std::ios_base::imbue											
ios_base iword	R	std::ios_base::iword											
ios_base precision	R	std::ios_base::precision											
ios_base pword	R	std::ios_base::pword											
ios_base register_callback	R	std::ios_base::register_callback											
ios_base setf	R	std::ios_base::setf											
ios_base sync_with_stdio	R	std::ios_base::sync_with_stdio											
ios_base unsetf	R	std::ios_base::unsetf											
ios_base width	R	std::ios_base::width											
ios_base xalloc	R	std::ios_base::xalloc											
iostream category	R	std::iostream_category											
iostream_category	R	std::iostream_category											
iota	R	std::iota											
is absolute	R	std::filesystem::path::is_absolute											
is abstract	R	std::is_abstract											
is arithmetic	R	std::is_arithmetic											
is array	R	std::is_array											
is assignable	R	std::is_assignable											
is base of	R	std::is_base_of											
is bind expression	R	std::is_bind_expression											
is block file	R	std::filesystem::is_block_file											
is callable	R	std::is_callable											
is character file	R	std::filesystem::is_character_file											
is class	R	std::is_class											
is compound	R	std::is_compound											
is const	R	std::is_const											
is constructible	R	std::is_constructible											
is convertible	R	std::is_convertible											
is copy assignable	R	std::is_copy_assignable											
is copy constructible	R	std::is_copy_constructible											
is default constructible	R	std::is_default_constructible											
is detected	R	std::experimental::is_detected											
is directory	R	std::filesystem::is_directory											
is empty	R	std::is_empty											
is enum	R	std::is_enum											
is error code enum	R	std::is_error_code_enum											
is error condition enum	R	std::is_error_condition_enum											
is execution policy	R	std::is_execution_policy											
is fifo	R	std::filesystem::is_fifo											
is final	R	std::is_final											
is floating point	R	std::is_floating_point											
is function	R	std::is_function											
is fundamental	R	std::is_fundamental											
is heap	R	std::is_heap											
is heap until	R	std::is_heap_until											
is integral	R	std::is_integral											
is literal type	R	std::is_literal_type											
is lock free	R	std::atomic::is_lock_free											
is lvalue reference	R	std::is_lvalue_reference											
is member function pointer	R	std::is_member_function_pointer											
is member object pointer	R	std::is_member_object_pointer											
is member pointer	R	std::is_member_pointer											
is move assignable	R	std::is_move_assignable											
is move constructible	R	std::is_move_constructible											
is nothrow assignable	R	std::is_nothrow_assignable											
is nothrow callable	R	std::is_nothrow_callable											
is nothrow constructible	R	std::is_nothrow_constructible											
is nothrow copy constructible	R	std::is_nothrow_copy_constructible											
is nothrow default constructible	R	std::is_nothrow_default_constructible											
is nothrow move assignable	R	std::is_nothrow_move_assignable											
is nothrow move constructible	R	std::is_nothrow_move_constructible											
is nothrow swappable	R	std::is_nothrow_swappable											
is null pointer	R	std::is_null_pointer											
is object	R	std::is_object											
is other	R	std::filesystem::is_other											
is permutation	R	std::is_permutation											
is placeholder	R	std::is_placeholder											
is pod	R	std::is_pod											
is pointer	R	std::is_pointer											
is polymorphic	R	std::is_polymorphic											
is reference	R	std::is_reference											
is regular file	R	std::filesystem::is_regular_file											
is relative	R	std::filesystem::path::is_relative											
is rvalue reference	R	std::is_rvalue_reference											
is same	R	std::is_same											
is scalar	R	std::is_scalar											
is signed	R	std::is_signed											
is socket	R	std::filesystem::is_socket											
is sorted	R	std::is_sorted											
is sorted until	R	std::is_sorted_until											
is standard layout	R	std::is_standard_layout											
is swappable	R	std::is_swappable											
is symlink	R	std::filesystem::is_symlink											
is trivial	R	std::is_trivial											
is trivially assignable	R	std::is_trivially_assignable											
is trivially constructible	R	std::is_trivially_constructible											
is trivially copy assignable	R	std::is_trivially_copy_assignable											
is trivially copy constructible	R	std::is_trivially_copy_constructible											
is trivially copyable	R	std::is_trivially_copyable											
is trivially default constructible	R	std::is_trivially_default_constructible											
is trivially move assignable	R	std::is_trivially_move_assignable											
is trivially move constructible	R	std::is_trivially_move_constructible											
is union	R	std::is_union											
is unsigned	R	std::is_unsigned											
is void	R	std::is_void											
is volatile	R	std::is_volatile											
is_absolute	R	std::filesystem::path::is_absolute											
is_abstract	R	std::is_abstract											
is_arithmetic	R	std::is_arithmetic											
is_array	R	std::is_array											
is_assignable	R	std::is_assignable											
is_base_of	R	std::is_base_of											
is_bind_expression	R	std::is_bind_expression											
is_block_file	R	std::filesystem::is_block_file											
is_callable	R	std::is_callable											
is_character_file	R	std::filesystem::is_character_file											
is_class	R	std::is_class											
is_compound	R	std::is_compound											
is_const	R	std::is_const											
is_constructible	R	std::is_constructible											
is_convertible	R	std::is_convertible											
is_copy_assignable	R	std::is_copy_assignable											
is_copy_constructible	R	std::is_copy_constructible											
is_default_constructible	R	std::is_default_constructible											
is_detected	R	std::experimental::is_detected											
is_directory	R	std::filesystem::is_directory											
is_empty	R	std::is_empty											
is_enum	R	std::is_enum											
is_error_code_enum	R	std::is_error_code_enum											
is_error_condition_enum	R	std::is_error_condition_enum											
is_execution_policy	R	std::is_execution_policy											
is_fifo	R	std::filesystem::is_fifo											
is_final	R	std::is_final											
is_floating_point	R	std::is_floating_point											
is_function	R	std::is_function											
is_fundamental	R	std::is_fundamental											
is_heap	R	std::is_heap											
is_heap_until	R	std::is_heap_until											
is_integral	R	std::is_integral											
is_literal_type	R	std::is_literal_type											
is_lock_free	R	std::atomic::is_lock_free											
is_lvalue_reference	R	std::is_lvalue_reference											
is_member_function_pointer	R	std::is_member_function_pointer											
is_member_object_pointer	R	std::is_member_object_pointer											
is_member_pointer	R	std::is_member_pointer											
is_move_assignable	R	std::is_move_assignable											
is_move_constructible	R	std::is_move_constructible											
is_nothrow_assignable	R	std::is_nothrow_assignable											
is_nothrow_callable	R	std::is_nothrow_callable											
is_nothrow_constructible	R	std::is_nothrow_constructible											
is_nothrow_copy_constructible	R	std::is_nothrow_copy_constructible											
is_nothrow_default_constructible	R	std::is_nothrow_default_constructible											
is_nothrow_move_assignable	R	std::is_nothrow_move_assignable											
is_nothrow_move_constructible	R	std::is_nothrow_move_constructible											
is_nothrow_swappable	R	std::is_nothrow_swappable											
is_null_pointer	R	std::is_null_pointer											
is_object	R	std::is_object											
is_other	R	std::filesystem::is_other											
is_permutation	R	std::is_permutation											
is_placeholder	R	std::is_placeholder											
is_pod	R	std::is_pod											
is_pointer	R	std::is_pointer											
is_polymorphic	R	std::is_polymorphic											
is_reference	R	std::is_reference											
is_regular_file	R	std::filesystem::is_regular_file											
is_relative	R	std::filesystem::path::is_relative											
is_rvalue_reference	R	std::is_rvalue_reference											
is_same	R	std::is_same											
is_scalar	R	std::is_scalar											
is_signed	R	std::is_signed											
is_socket	R	std::filesystem::is_socket											
is_sorted	R	std::is_sorted											
is_sorted_until	R	std::is_sorted_until											
is_standard_layout	R	std::is_standard_layout											
is_swappable	R	std::is_swappable											
is_symlink	R	std::filesystem::is_symlink											
is_trivial	R	std::is_trivial											
is_trivially_assignable	R	std::is_trivially_assignable											
is_trivially_constructible	R	std::is_trivially_constructible											
is_trivially_copy_assignable	R	std::is_trivially_copy_assignable											
is_trivially_copy_constructible	R	std::is_trivially_copy_constructible											
is_trivially_copyable	R	std::is_trivially_copyable											
is_trivially_default_constructible	R	std::is_trivially_default_constructible											
is_trivially_move_assignable	R	std::is_trivially_move_assignable											
is_trivially_move_constructible	R	std::is_trivially_move_constructible											
is_union	R	std::is_union											
is_unsigned	R	std::is_unsigned											
is_void	R	std::is_void											
is_volatile	R	std::is_volatile											
isctype	R	std::regex_traits::isctype											
istream iterator	R	std::istream_iterator											
istream_iterator	R	std::istream_iterator											
istreambuf iterator	R	std::istreambuf_iterator											
istreambuf_iterator	R	std::istreambuf_iterator											
istrstream	R	std::istrstream											
istrstream Init	R	std::istrstream::Init											
istrstream bad	R	std::istrstream::bad											
istrstream clear	R	std::istrstream::clear											
istrstream constructor	R	std::istrstream::istrstream											
istrstream copyfmt	R	std::istrstream::copyfmt											
istrstream destructor	R	std::istrstream::~istrstream											
istrstream eof	R	std::istrstream::eof											
istrstream exceptions	R	std::istrstream::exceptions											
istrstream fail	R	std::istrstream::fail											
istrstream failure	R	std::istrstream::failure											
istrstream failure what	R	std::istrstream::failure::what											
istrstream fill	R	std::istrstream::fill											
istrstream flags	R	std::istrstream::flags											
istrstream gcount	R	std::istrstream::gcount											
istrstream get	R	std::istrstream::get											
istrstream getline	R	std::istrstream::getline											
istrstream getloc	R	std::istrstream::getloc											
istrstream good	R	std::istrstream::good											
istrstream ignore	R	std::istrstream::ignore											
istrstream init	R	std::istrstream::init											
istrstream iword	R	std::istrstream::iword											
istrstream move	R	std::istrstream::move											
istrstream narrow	R	std::istrstream::narrow											
istrstream peek	R	std::istrstream::peek											
istrstream precision	R	std::istrstream::precision											
istrstream putback	R	std::istrstream::putback											
istrstream pword	R	std::istrstream::pword											
istrstream rdstate	R	std::istrstream::rdstate											
istrstream read	R	std::istrstream::read											
istrstream readsome	R	std::istrstream::readsome											
istrstream register callback	R	std::istrstream::register_callback											
istrstream register_callback	R	std::istrstream::register_callback											
istrstream seekg	R	std::istrstream::seekg											
istrstream sentry	R	std::istrstream::sentry											
istrstream set rdbuf	R	std::istrstream::set_rdbuf											
istrstream set_rdbuf	R	std::istrstream::set_rdbuf											
istrstream setf	R	std::istrstream::setf											
istrstream setstate	R	std::istrstream::setstate											
istrstream str	R	std::istrstream::str											
istrstream swap	R	std::istrstream::swap											
istrstream sync	R	std::istrstream::sync											
istrstream sync with stdio	R	std::istrstream::sync_with_stdio											
istrstream sync_with_stdio	R	std::istrstream::sync_with_stdio											
istrstream tellg	R	std::istrstream::tellg											
istrstream tie	R	std::istrstream::tie											
istrstream unget	R	std::istrstream::unget											
istrstream unsetf	R	std::istrstream::unsetf											
istrstream widen	R	std::istrstream::widen											
istrstream width	R	std::istrstream::width											
istrstream xalloc	R	std::istrstream::xalloc											
iswalnum	R	std::iswalnum											
iswalpha	R	std::iswalpha											
iswblank	R	std::iswblank											
iswcntrl	R	std::iswcntrl											
iswctype	R	std::iswctype											
iswdigit	R	std::iswdigit											
iswgraph	R	std::iswgraph											
iswlower	R	std::iswlower											
iswprint	R	std::iswprint											
iswpunct	R	std::iswpunct											
iswspace	R	std::iswspace											
iswupper	R	std::iswupper											
iswxdigit	R	std::iswxdigit											
iter swap	R	std::iter_swap											
iter_swap	R	std::iter_swap											
iterator	R	std::iterator											
iterator traits	R	std::iterator_traits											
iterator_traits	R	std::iterator_traits											
join	R	std::thread::join											
joinable	R	std::thread::joinable											
k	R	std::negative_binomial_distribution::k											
kill dependency	R	std::kill_dependency											
kill_dependency	R	std::kill_dependency											
labs	R	std::labs											
laguerref	R	std::laguerref											
lambda	R	std::exponential_distribution::lambda											
launder	R	std::launder											
lcm	R	std::lcm											
lconv	R	std::lconv											
ldiv	R	std::ldiv											
ldiv t	R	std::ldiv_t											
ldiv_t	R	std::ldiv_t											
left	R	std::left											
legendref	R	std::legendref											
length error	R	std::length_error											
length error what	R	std::length_error::what											
length_error	R	std::length_error											
length_error what	R	std::length_error::what											
less	R	std::less											
less equal	R	std::less_equal											
less_equal	R	std::less_equal											
lexically normal	R	std::filesystem::path::lexically_normal											
lexically proximate	R	std::filesystem::path::lexically_proximate											
lexically relative	R	std::filesystem::path::lexically_relative											
lexically_normal	R	std::filesystem::path::lexically_normal											
lexically_proximate	R	std::filesystem::path::lexically_proximate											
lexically_relative	R	std::filesystem::path::lexically_relative											
lexicographical compare	R	std::lexicographical_compare											
lexicographical_compare	R	std::lexicographical_compare											
linear congruential engine	R	std::linear_congruential_engine											
linear congruential engine constructor	R	std::linear_congruential_engine::linear_congruential_engine											
linear congruential engine discard	R	std::linear_congruential_engine::discard											
linear congruential engine max	R	std::linear_congruential_engine::max											
linear congruential engine min	R	std::linear_congruential_engine::min											
linear congruential engine seed	R	std::linear_congruential_engine::seed											
linear_congruential_engine	R	std::linear_congruential_engine											
linear_congruential_engine constructor	R	std::linear_congruential_engine::linear_congruential_engine											
linear_congruential_engine discard	R	std::linear_congruential_engine::discard											
linear_congruential_engine max	R	std::linear_congruential_engine::max											
linear_congruential_engine min	R	std::linear_congruential_engine::min											
linear_congruential_engine seed	R	std::linear_congruential_engine::seed											
list	R	std::list											
list assign	R	std::list::assign											
list back	R	std::list::back											
list begin	R	std::list::begin											
list cbegin	R	std::list::cbegin											
list cend	R	std::list::cend											
list clear	R	std::list::clear											
list constructor	R	std::list::list											
list crbegin	R	std::list::crbegin											
list crend	R	std::list::crend											
list emplace	R	std::list::emplace											
list emplace back	R	std::list::emplace_back											
list emplace front	R	std::list::emplace_front											
list emplace_back	R	std::list::emplace_back											
list emplace_front	R	std::list::emplace_front											
list empty	R	std::list::empty											
list end	R	std::list::end											
list erase	R	std::list::erase											
list front	R	std::list::front											
list get allocator	R	std::list::get_allocator											
list get_allocator	R	std::list::get_allocator											
list insert	R	std::list::insert											
list max size	R	std::list::max_size											
list max_size	R	std::list::max_size											
list merge	R	std::list::merge											
list pop back	R	std::list::pop_back											
list pop front	R	std::list::pop_front											
list pop_back	R	std::list::pop_back											
list pop_front	R	std::list::pop_front											
list push back	R	std::list::push_back											
list push front	R	std::list::push_front											
list push_back	R	std::list::push_back											
list push_front	R	std::list::push_front											
list rbegin	R	std::list::rbegin											
list remove	R	std::list::remove											
list remove if	R	std::list::remove_if											
list remove_if	R	std::list::remove_if											
list rend	R	std::list::rend											
list resize	R	std::list::resize											
list reverse	R	std::list::reverse											
list size	R	std::list::size											
list sort	R	std::list::sort											
list splice	R	std::list::splice											
list swap	R	std::list::swap											
list unique	R	std::list::unique											
llabs	R	std::llabs											
lldiv	R	std::lldiv											
lldiv t	R	std::lldiv_t											
lldiv_t	R	std::lldiv_t											
load	R	std::atomic::load											
locale	R	std::locale											
locale classic	R	std::locale::classic											
locale combine	R	std::locale::combine											
locale constructor	R	std::locale::locale											
locale facet	R	std::locale::facet											
locale facet constructor	R	std::locale::facet::facet											
locale global	R	std::locale::global											
locale id	R	std::locale::id											
locale name	R	std::locale::name											
localeconv	R	std::localeconv											
localtime	R	std::localtime											
lock	R	std::lock											
lock guard	R	std::lock_guard											
lock guard constructor	R	std::lock_guard::lock_guard											
lock_guard	R	std::lock_guard											
lock_guard constructor	R	std::lock_guard::lock_guard											
logic error	R	std::logic_error											
logic error what	R	std::logic_error::what											
logic_error	R	std::logic_error											
logic_error what	R	std::logic_error::what											
logical and	R	std::logical_and											
logical not	R	std::logical_not											
logical or	R	std::logical_or											
logical_and	R	std::logical_and											
logical_not	R	std::logical_not											
logical_or	R	std::logical_or											
lognormal distribution	R	std::lognormal_distribution											
lognormal distribution constructor	R	std::lognormal_distribution::lognormal_distribution											
lognormal distribution m	R	std::lognormal_distribution::m											
lognormal distribution max	R	std::lognormal_distribution::max											
lognormal distribution min	R	std::lognormal_distribution::min											
lognormal distribution param	R	std::lognormal_distribution::param											
lognormal distribution reset	R	std::lognormal_distribution::reset											
lognormal distribution s	R	std::lognormal_distribution::s											
lognormal_distribution	R	std::lognormal_distribution											
lognormal_distribution constructor	R	std::lognormal_distribution::lognormal_distribution											
lognormal_distribution m	R	std::lognormal_distribution::m											
lognormal_distribution max	R	std::lognormal_distribution::max											
lognormal_distribution min	R	std::lognormal_distribution::min											
lognormal_distribution param	R	std::lognormal_distribution::param											
lognormal_distribution reset	R	std::lognormal_distribution::reset											
lognormal_distribution s	R	std::lognormal_distribution::s											
longjmp	R	std::longjmp											
lookup classname	R	std::regex_traits::lookup_classname											
lookup collatename	R	std::regex_traits::lookup_collatename											
lookup_classname	R	std::regex_traits::lookup_classname											
lookup_collatename	R	std::regex_traits::lookup_collatename											
lower bound	R	std::lower_bound											
lower_bound	R	std::lower_bound											
lowest	R	std::numeric_limits::lowest											
lt	R	std::char_traits::lt											
make any	R	std::make_any											
make array	R	std::experimental::make_array											
make exception ptr	R	std::make_exception_ptr											
make from tuple	R	std::make_from_tuple											
make heap	R	std::make_heap											
make move iterator	R	std::make_move_iterator											
make optional	R	std::experimental::make_optional											
make pair	R	std::make_pair											
make preferred	R	std::filesystem::path::make_preferred											
make ready at thread exit	R	std::packaged_task::make_ready_at_thread_exit											
make reverse iterator	R	std::make_reverse_iterator											
make shared	R	std::make_shared											
make signed	R	std::make_signed											
make tuple	R	std::make_tuple											
make unique	R	std::make_unique											
make unsigned	R	std::make_unsigned											
make_any	R	std::make_any											
make_array	R	std::experimental::make_array											
make_exception_ptr	R	std::make_exception_ptr											
make_from_tuple	R	std::make_from_tuple											
make_heap	R	std::make_heap											
make_move_iterator	R	std::make_move_iterator											
make_optional	R	std::experimental::make_optional											
make_pair	R	std::make_pair											
make_preferred	R	std::filesystem::path::make_preferred											
make_ready_at_thread_exit	R	std::packaged_task::make_ready_at_thread_exit											
make_reverse_iterator	R	std::make_reverse_iterator											
make_shared	R	std::make_shared											
make_signed	R	std::make_signed											
make_tuple	R	std::make_tuple											
make_unique	R	std::make_unique											
make_unsigned	R	std::make_unsigned											
malloc	R	std::malloc											
map	R	std::map											
map at	R	std::map::at											
map begin	R	std::map::begin											
map cbegin	R	std::map::cbegin											
map cend	R	std::map::cend											
map clear	R	std::map::clear											
map constructor	R	std::map::map											
map count	R	std::map::count											
map crbegin	R	std::map::crbegin											
map crend	R	std::map::crend											
map emplace	R	std::map::emplace											
map emplace hint	R	std::map::emplace_hint											
map emplace_hint	R	std::map::emplace_hint											
map empty	R	std::map::empty											
map end	R	std::map::end											
map equal range	R	std::map::equal_range											
map equal_range	R	std::map::equal_range											
map erase	R	std::map::erase											
map get allocator	R	std::map::get_allocator											
map get_allocator	R	std::map::get_allocator											
map insert	R	std::map::insert											
map key comp	R	std::map::key_comp											
map key_comp	R	std::map::key_comp											
map max size	R	std::map::max_size											
map max_size	R	std::map::max_size											
map merge	R	std::map::merge											
map rbegin	R	std::map::rbegin											
map rend	R	std::map::rend											
map size	R	std::map::size											
map swap	R	std::map::swap											
map value comp	R	std::map::value_comp											
map value compare	R	std::map::value_compare											
map value_comp	R	std::map::value_comp											
map value_compare	R	std::map::value_compare											
mark count	R	std::basic_regex::mark_count											
mark_count	R	std::basic_regex::mark_count											
mask array	R	std::mask_array											
mask_array	R	std::mask_array											
match results	R	std::match_results											
match results begin	R	std::match_results::begin											
match results cbegin	R	std::match_results::cbegin											
match results cend	R	std::match_results::cend											
match results empty	R	std::match_results::empty											
match results end	R	std::match_results::end											
match results format	R	std::match_results::format											
match results get allocator	R	std::match_results::get_allocator											
match results length	R	std::match_results::length											
match results max size	R	std::match_results::max_size											
match results position	R	std::match_results::position											
match results prefix	R	std::match_results::prefix											
match results ready	R	std::match_results::ready											
match results size	R	std::match_results::size											
match results str	R	std::match_results::str											
match results suffix	R	std::match_results::suffix											
match results swap	R	std::match_results::swap											
match_results	R	std::match_results											
match_results begin	R	std::match_results::begin											
match_results cbegin	R	std::match_results::cbegin											
match_results cend	R	std::match_results::cend											
match_results empty	R	std::match_results::empty											
match_results end	R	std::match_results::end											
match_results format	R	std::match_results::format											
match_results get_allocator	R	std::match_results::get_allocator											
match_results length	R	std::match_results::length											
match_results max_size	R	std::match_results::max_size											
match_results position	R	std::match_results::position											
match_results prefix	R	std::match_results::prefix											
match_results ready	R	std::match_results::ready											
match_results size	R	std::match_results::size											
match_results str	R	std::match_results::str											
match_results suffix	R	std::match_results::suffix											
match_results swap	R	std::match_results::swap											
max	R	std::max											
max element	R	std::max_element											
max length	R	std::codecvt::max_length											
max_element	R	std::max_element											
max_length	R	std::codecvt::max_length											
mblen	R	std::mblen											
mbrlen	R	std::mbrlen											
mbrtoc16	R	std::mbrtoc16											
mbrtoc32	R	std::mbrtoc32											
mbrtowc	R	std::mbrtowc											
mbsinit	R	std::mbsinit											
mbsrtowcs	R	std::mbsrtowcs											
mbstate t	R	std::mbstate_t											
mbstate_t	R	std::mbstate_t											
mbstowcs	R	std::mbstowcs											
mbtowc	R	std::mbtowc											
mem fn	R	std::mem_fn											
mem_fn	R	std::mem_fn											
memchr	R	std::memchr											
memcmp	R	std::memcmp											
memcpy	R	std::memcpy											
memmove	R	std::memmove											
memory resource	R	std::pmr::memory_resource											
memory resource allocate	R	std::pmr::memory_resource::allocate											
memory resource constructor	R	std::pmr::memory_resource::memory_resource											
memory resource deallocate	R	std::pmr::memory_resource::deallocate											
memory resource do allocate	R	std::pmr::memory_resource::do_allocate											
memory resource do deallocate	R	std::pmr::memory_resource::do_deallocate											
memory resource is equal	R	std::pmr::memory_resource::is_equal											
memory_resource	R	std::pmr::memory_resource											
memory_resource allocate	R	std::pmr::memory_resource::allocate											
memory_resource constructor	R	std::pmr::memory_resource::memory_resource											
memory_resource deallocate	R	std::pmr::memory_resource::deallocate											
memory_resource do_allocate	R	std::pmr::memory_resource::do_allocate											
memory_resource do_deallocate	R	std::pmr::memory_resource::do_deallocate											
memory_resource is_equal	R	std::pmr::memory_resource::is_equal											
memset	R	std::memset											
merge	R	std::merge											
mersenne twister engine	R	std::mersenne_twister_engine											
mersenne twister engine constructor	R	std::mersenne_twister_engine::mersenne_twister_engine											
mersenne twister engine discard	R	std::mersenne_twister_engine::discard											
mersenne twister engine max	R	std::mersenne_twister_engine::max											
mersenne twister engine min	R	std::mersenne_twister_engine::min											
mersenne twister engine seed	R	std::mersenne_twister_engine::seed											
mersenne_twister_engine	R	std::mersenne_twister_engine											
mersenne_twister_engine constructor	R	std::mersenne_twister_engine::mersenne_twister_engine											
mersenne_twister_engine discard	R	std::mersenne_twister_engine::discard											
mersenne_twister_engine max	R	std::mersenne_twister_engine::max											
mersenne_twister_engine min	R	std::mersenne_twister_engine::min											
mersenne_twister_engine seed	R	std::mersenne_twister_engine::seed											
messages	R	std::messages											
messages base	R	std::messages_base											
messages byname	R	std::messages_byname											
messages byname close	R	std::messages_byname::close											
messages byname do close	R	std::messages_byname::do_close											
messages byname do get	R	std::messages_byname::do_get											
messages byname do open	R	std::messages_byname::do_open											
messages byname get	R	std::messages_byname::get											
messages byname open	R	std::messages_byname::open											
messages close	R	std::messages::close											
messages constructor	R	std::messages::messages											
messages destructor	R	std::messages::~messages											
messages do close	R	std::messages::do_close											
messages do get	R	std::messages::do_get											
messages do open	R	std::messages::do_open											
messages do_close	R	std::messages::do_close											
messages do_get	R	std::messages::do_get											
messages do_open	R	std::messages::do_open											
messages get	R	std::messages::get											
messages open	R	std::messages::open											
messages_base	R	std::messages_base											
messages_byname	R	std::messages_byname											
messages_byname close	R	std::messages_byname::close											
messages_byname do_close	R	std::messages_byname::do_close											
messages_byname do_get	R	std::messages_byname::do_get											
messages_byname do_open	R	std::messages_byname::do_open											
messages_byname get	R	std::messages_byname::get											
messages_byname open	R	std::messages_byname::open											
min	R	std::min											
min element	R	std::min_element											
min_element	R	std::min_element											
minmax	R	std::minmax											
minmax element	R	std::minmax_element											
minmax_element	R	std::minmax_element											
minus	R	std::minus											
mismatch	R	std::mismatch											
mktime	R	std::mktime											
modulus	R	std::modulus											
money base	R	std::money_base											
money get	R	std::money_get											
money get constructor	R	std::money_get::money_get											
money get destructor	R	std::money_get::~money_get											
money get do get	R	std::money_get::do_get											
money get get	R	std::money_get::get											
money put	R	std::money_put											
money put constructor	R	std::money_put::money_put											
money put destructor	R	std::money_put::~money_put											
money put do put	R	std::money_put::do_put											
money put put	R	std::money_put::put											
money_base	R	std::money_base											
money_get	R	std::money_get											
money_get constructor	R	std::money_get::money_get											
money_get destructor	R	std::money_get::~money_get											
money_get do_get	R	std::money_get::do_get											
money_get get	R	std::money_get::get											
money_put	R	std::money_put											
money_put constructor	R	std::money_put::money_put											
money_put destructor	R	std::money_put::~money_put											
money_put do_put	R	std::money_put::do_put											
money_put put	R	std::money_put::put											
moneypunct	R	std::moneypunct											
moneypunct byname	R	std::moneypunct_byname											
moneypunct byname do positive sign	R	std::moneypunct_byname::do_positive_sign											
moneypunct constructor	R	std::moneypunct::moneypunct											
moneypunct curr symbol	R	std::moneypunct::curr_symbol											
moneypunct curr_symbol	R	std::moneypunct::curr_symbol											
moneypunct decimal point	R	std::moneypunct::decimal_point											
moneypunct decimal_point	R	std::moneypunct::decimal_point											
moneypunct destructor	R	std::moneypunct::~moneypunct											
moneypunct do curr symbol	R	std::moneypunct::do_curr_symbol											
moneypunct do decimal point	R	std::moneypunct::do_decimal_point											
moneypunct do frac digits	R	std::moneypunct::do_frac_digits											
moneypunct do grouping	R	std::moneypunct::do_grouping											
moneypunct do neg format	R	std::moneypunct::do_neg_format											
moneypunct do pos format	R	std::moneypunct::do_pos_format											
moneypunct do positive sign	R	std::moneypunct::do_positive_sign											
moneypunct do thousands sep	R	std::moneypunct::do_thousands_sep											
moneypunct do_curr_symbol	R	std::moneypunct::do_curr_symbol											
moneypunct do_decimal_point	R	std::moneypunct::do_decimal_point											
moneypunct do_frac_digits	R	std::moneypunct::do_frac_digits											
moneypunct do_grouping	R	std::moneypunct::do_grouping											
moneypunct do_neg_format	R	std::moneypunct::do_neg_format											
moneypunct do_pos_format	R	std::moneypunct::do_pos_format											
moneypunct do_positive_sign	R	std::moneypunct::do_positive_sign											
moneypunct do_thousands_sep	R	std::moneypunct::do_thousands_sep											
moneypunct frac digits	R	std::moneypunct::frac_digits											
moneypunct frac_digits	R	std::moneypunct::frac_digits											
moneypunct grouping	R	std::moneypunct::grouping											
moneypunct neg format	R	std::moneypunct::neg_format											
moneypunct neg_format	R	std::moneypunct::neg_format											
moneypunct negative sign	R	std::moneypunct::negative_sign											
moneypunct negative_sign	R	std::moneypunct::negative_sign											
moneypunct pos format	R	std::moneypunct::pos_format											
moneypunct pos_format	R	std::moneypunct::pos_format											
moneypunct positive sign	R	std::moneypunct::positive_sign											
moneypunct positive_sign	R	std::moneypunct::positive_sign											
moneypunct thousands sep	R	std::moneypunct::thousands_sep											
moneypunct thousands_sep	R	std::moneypunct::thousands_sep											
moneypunct_byname	R	std::moneypunct_byname											
moneypunct_byname do_positive_sign	R	std::moneypunct_byname::do_positive_sign											
monostate	R	std::monostate											
monotonic buffer resource	R	std::pmr::monotonic_buffer_resource											
monotonic buffer resource allocate	R	std::pmr::monotonic_buffer_resource::allocate											
monotonic buffer resource constructor	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
monotonic buffer resource deallocate	R	std::pmr::monotonic_buffer_resource::deallocate											
monotonic buffer resource do is equal	R	std::pmr::monotonic_buffer_resource::do_is_equal											
monotonic buffer resource is equal	R	std::pmr::monotonic_buffer_resource::is_equal											
monotonic buffer resource release	R	std::pmr::monotonic_buffer_resource::release											
monotonic buffer resource upstream resource	R	std::pmr::monotonic_buffer_resource::upstream_resource											
monotonic_buffer_resource	R	std::pmr::monotonic_buffer_resource											
monotonic_buffer_resource allocate	R	std::pmr::monotonic_buffer_resource::allocate											
monotonic_buffer_resource constructor	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
monotonic_buffer_resource deallocate	R	std::pmr::monotonic_buffer_resource::deallocate											
monotonic_buffer_resource do_is_equal	R	std::pmr::monotonic_buffer_resource::do_is_equal											
monotonic_buffer_resource is_equal	R	std::pmr::monotonic_buffer_resource::is_equal											
monotonic_buffer_resource release	R	std::pmr::monotonic_buffer_resource::release											
monotonic_buffer_resource upstream_resource	R	std::pmr::monotonic_buffer_resource::upstream_resource											
move backward	R	std::move_backward											
move if noexcept	R	std::move_if_noexcept											
move iterator	R	std::move_iterator											
move_backward	R	std::move_backward											
move_if_noexcept	R	std::move_if_noexcept											
move_iterator	R	std::move_iterator											
multimap	R	std::multimap											
multimap begin	R	std::multimap::begin											
multimap cbegin	R	std::multimap::cbegin											
multimap cend	R	std::multimap::cend											
multimap clear	R	std::multimap::clear											
multimap constructor	R	std::multimap::multimap											
multimap count	R	std::multimap::count											
multimap crbegin	R	std::multimap::crbegin											
multimap crend	R	std::multimap::crend											
multimap emplace	R	std::multimap::emplace											
multimap emplace hint	R	std::multimap::emplace_hint											
multimap emplace_hint	R	std::multimap::emplace_hint											
multimap empty	R	std::multimap::empty											
multimap end	R	std::multimap::end											
multimap equal range	R	std::multimap::equal_range											
multimap equal_range	R	std::multimap::equal_range											
multimap erase	R	std::multimap::erase											
multimap get allocator	R	std::multimap::get_allocator											
multimap get_allocator	R	std::multimap::get_allocator											
multimap insert	R	std::multimap::insert											
multimap key comp	R	std::multimap::key_comp											
multimap key_comp	R	std::multimap::key_comp											
multimap max size	R	std::multimap::max_size											
multimap max_size	R	std::multimap::max_size											
multimap merge	R	std::multimap::merge											
multimap rbegin	R	std::multimap::rbegin											
multimap rend	R	std::multimap::rend											
multimap size	R	std::multimap::size											
multimap swap	R	std::multimap::swap											
multimap value comp	R	std::multimap::value_comp											
multimap value compare	R	std::multimap::value_compare											
multimap value_comp	R	std::multimap::value_comp											
multimap value_compare	R	std::multimap::value_compare											
multiplies	R	std::multiplies											
multiset	R	std::multiset											
multiset begin	R	std::multiset::begin											
multiset cbegin	R	std::multiset::cbegin											
multiset cend	R	std::multiset::cend											
multiset clear	R	std::multiset::clear											
multiset constructor	R	std::multiset::multiset											
multiset count	R	std::multiset::count											
multiset crbegin	R	std::multiset::crbegin											
multiset crend	R	std::multiset::crend											
multiset emplace	R	std::multiset::emplace											
multiset emplace hint	R	std::multiset::emplace_hint											
multiset emplace_hint	R	std::multiset::emplace_hint											
multiset empty	R	std::multiset::empty											
multiset end	R	std::multiset::end											
multiset equal range	R	std::multiset::equal_range											
multiset equal_range	R	std::multiset::equal_range											
multiset erase	R	std::multiset::erase											
multiset get allocator	R	std::multiset::get_allocator											
multiset get_allocator	R	std::multiset::get_allocator											
multiset insert	R	std::multiset::insert											
multiset key comp	R	std::multiset::key_comp											
multiset key_comp	R	std::multiset::key_comp											
multiset max size	R	std::multiset::max_size											
multiset max_size	R	std::multiset::max_size											
multiset merge	R	std::multiset::merge											
multiset rbegin	R	std::multiset::rbegin											
multiset rend	R	std::multiset::rend											
multiset size	R	std::multiset::size											
multiset swap	R	std::multiset::swap											
multiset value comp	R	std::multiset::value_comp											
multiset value_comp	R	std::multiset::value_comp											
mutex	R	std::mutex											
mutex constructor	R	std::mutex::mutex											
mutex lock	R	std::mutex::lock											
mutex native handle	R	std::mutex::native_handle											
mutex native_handle	R	std::mutex::native_handle											
mutex try lock	R	std::mutex::try_lock											
mutex try_lock	R	std::mutex::try_lock											
mutex unlock	R	std::mutex::unlock											
nan	R	std::nan											
nanf	R	std::nanf											
nanl	R	std::nanl											
native	R	std::filesystem::path::native											
neg format	R	std::moneypunct::neg_format											
neg_format	R	std::moneypunct::neg_format											
negate	R	std::negate											
negation	R	std::negation											
negative binomial distribution	R	std::negative_binomial_distribution											
negative binomial distribution constructor	R	std::negative_binomial_distribution::negative_binomial_distribution											
negative binomial distribution k	R	std::negative_binomial_distribution::k											
negative binomial distribution max	R	std::negative_binomial_distribution::max											
negative binomial distribution min	R	std::negative_binomial_distribution::min											
negative binomial distribution p	R	std::negative_binomial_distribution::p											
negative binomial distribution param	R	std::negative_binomial_distribution::param											
negative binomial distribution reset	R	std::negative_binomial_distribution::reset											
negative sign	R	std::moneypunct::negative_sign											
negative_binomial_distribution	R	std::negative_binomial_distribution											
negative_binomial_distribution constructor	R	std::negative_binomial_distribution::negative_binomial_distribution											
negative_binomial_distribution k	R	std::negative_binomial_distribution::k											
negative_binomial_distribution max	R	std::negative_binomial_distribution::max											
negative_binomial_distribution min	R	std::negative_binomial_distribution::min											
negative_binomial_distribution p	R	std::negative_binomial_distribution::p											
negative_binomial_distribution param	R	std::negative_binomial_distribution::param											
negative_binomial_distribution reset	R	std::negative_binomial_distribution::reset											
negative_sign	R	std::moneypunct::negative_sign											
nested exception	R	std::nested_exception											
nested exception constructor	R	std::nested_exception::nested_exception											
nested exception destructor	R	std::nested_exception::~nested_exception											
nested exception nested ptr	R	std::nested_exception::nested_ptr											
nested exception rethrow nested	R	std::nested_exception::rethrow_nested											
nested ptr	R	std::nested_exception::nested_ptr											
nested_exception	R	std::nested_exception											
nested_exception constructor	R	std::nested_exception::nested_exception											
nested_exception destructor	R	std::nested_exception::~nested_exception											
nested_exception nested_ptr	R	std::nested_exception::nested_ptr											
nested_exception rethrow_nested	R	std::nested_exception::rethrow_nested											
nested_ptr	R	std::nested_exception::nested_ptr											
new delete resource	R	std::pmr::new_delete_resource											
new_delete_resource	R	std::pmr::new_delete_resource											
next	R	std::next											
next permutation	R	std::next_permutation											
next_permutation	R	std::next_permutation											
nextafter	R	std::nextafter											
nexttoward	R	std::nexttoward											
noboolalpha	R	std::noboolalpha											
none	R	std::bitset::none											
normal distribution	R	std::normal_distribution											
normal distribution constructor	R	std::normal_distribution::normal_distribution											
normal distribution max	R	std::normal_distribution::max											
normal distribution mean	R	std::normal_distribution::mean											
normal distribution min	R	std::normal_distribution::min											
normal distribution param	R	std::normal_distribution::param											
normal distribution reset	R	std::normal_distribution::reset											
normal distribution stddev	R	std::normal_distribution::stddev											
normal_distribution	R	std::normal_distribution											
normal_distribution constructor	R	std::normal_distribution::normal_distribution											
normal_distribution max	R	std::normal_distribution::max											
normal_distribution mean	R	std::normal_distribution::mean											
normal_distribution min	R	std::normal_distribution::min											
normal_distribution param	R	std::normal_distribution::param											
normal_distribution reset	R	std::normal_distribution::reset											
normal_distribution stddev	R	std::normal_distribution::stddev											
noshowbase	R	std::noshowbase											
noshowpoint	R	std::noshowpoint											
noshowpos	R	std::noshowpos											
noskipws	R	std::noskipws											
not eof	R	std::char_traits::not_eof											
not equal to	R	std::not_equal_to											
not fn	R	std::not_fn											
not1	R	std::not1											
not2	R	std::not2											
not_eof	R	std::char_traits::not_eof											
not_equal_to	R	std::not_equal_to											
not_fn	R	std::not_fn											
nothrow t	R	std::nothrow_t											
nothrow_t	R	std::nothrow_t											
notify all at thread exit	R	std::notify_all_at_thread_exit											
notify_all_at_thread_exit	R	std::notify_all_at_thread_exit											
nounitbuf	R	std::nounitbuf											
nouppercase	R	std::nouppercase											
nth element	R	std::nth_element											
nth_element	R	std::nth_element											
null memory resource	R	std::pmr::null_memory_resource											
null_memory_resource	R	std::pmr::null_memory_resource											
nullopt t	R	std::nullopt_t											
nullopt_t	R	std::nullopt_t											
num get	R	std::num_get											
num get constructor	R	std::num_get::num_get											
num get destructor	R	std::num_get::~num_get											
num put	R	std::num_put											
num put constructor	R	std::num_put::num_put											
num put destructor	R	std::num_put::~num_put											
num_get	R	std::num_get											
num_get constructor	R	std::num_get::num_get											
num_get destructor	R	std::num_get::~num_get											
num_put	R	std::num_put											
num_put constructor	R	std::num_put::num_put											
num_put destructor	R	std::num_put::~num_put											
numeric limits	R	std::numeric_limits											
numeric limits denorm min	R	std::numeric_limits::denorm_min											
numeric limits epsilon	R	std::numeric_limits::epsilon											
numeric limits infinity	R	std::numeric_limits::infinity											
numeric limits lowest	R	std::numeric_limits::lowest											
numeric limits max	R	std::numeric_limits::max											
numeric limits min	R	std::numeric_limits::min											
numeric limits quiet NaN	R	std::numeric_limits::quiet_NaN											
numeric limits round error	R	std::numeric_limits::round_error											
numeric limits signaling NaN	R	std::numeric_limits::signaling_NaN											
numeric_limits	R	std::numeric_limits											
numeric_limits denorm_min	R	std::numeric_limits::denorm_min											
numeric_limits epsilon	R	std::numeric_limits::epsilon											
numeric_limits infinity	R	std::numeric_limits::infinity											
numeric_limits lowest	R	std::numeric_limits::lowest											
numeric_limits max	R	std::numeric_limits::max											
numeric_limits min	R	std::numeric_limits::min											
numeric_limits quiet_NaN	R	std::numeric_limits::quiet_NaN											
numeric_limits round_error	R	std::numeric_limits::round_error											
numeric_limits signaling_NaN	R	std::numeric_limits::signaling_NaN											
numpunct	R	std::numpunct											
numpunct byname	R	std::numpunct_byname											
numpunct constructor	R	std::numpunct::numpunct											
numpunct decimal point	R	std::numpunct::decimal_point											
numpunct decimal_point	R	std::numpunct::decimal_point											
numpunct destructor	R	std::numpunct::~numpunct											
numpunct do decimal point	R	std::numpunct::do_decimal_point											
numpunct do falsename	R	std::numpunct::do_falsename											
numpunct do grouping	R	std::numpunct::do_grouping											
numpunct do thousands sep	R	std::numpunct::do_thousands_sep											
numpunct do truename	R	std::numpunct::do_truename											
numpunct do_decimal_point	R	std::numpunct::do_decimal_point											
numpunct do_falsename	R	std::numpunct::do_falsename											
numpunct do_grouping	R	std::numpunct::do_grouping											
numpunct do_thousands_sep	R	std::numpunct::do_thousands_sep											
numpunct do_truename	R	std::numpunct::do_truename											
numpunct falsename	R	std::numpunct::falsename											
numpunct grouping	R	std::numpunct::grouping											
numpunct thousands sep	R	std::numpunct::thousands_sep											
numpunct thousands_sep	R	std::numpunct::thousands_sep											
numpunct_byname	R	std::numpunct_byname											
observer ptr	R	std::experimental::observer_ptr											
observer_ptr	R	std::experimental::observer_ptr											
oct	R	std::oct											
offsetof	R	offsetof											
once flag	R	std::once_flag											
once_flag	R	std::once_flag											
optional	R	std::optional											
optional constructor	R	std::optional::optional											
optional emplace	R	std::optional::emplace											
optional has value	R	std::optional::has_value											
optional has_value	R	std::optional::has_value											
optional reset	R	std::optional::reset											
optional swap	R	std::optional::swap											
optional value	R	std::optional::value											
optional value or	R	std::optional::value_or											
optional value_or	R	std::optional::value_or											
ostream iterator	R	std::ostream_iterator											
ostream joiner	R	std::experimental::ostream_joiner											
ostream_iterator	R	std::ostream_iterator											
ostream_joiner	R	std::experimental::ostream_joiner											
ostreambuf iterator	R	std::ostreambuf_iterator											
ostreambuf_iterator	R	std::ostreambuf_iterator											
ostrstream	R	std::ostrstream											
ostrstream Init	R	std::ostrstream::Init											
ostrstream bad	R	std::ostrstream::bad											
ostrstream clear	R	std::ostrstream::clear											
ostrstream copyfmt	R	std::ostrstream::copyfmt											
ostrstream destructor	R	std::ostrstream::~ostrstream											
ostrstream eof	R	std::ostrstream::eof											
ostrstream exceptions	R	std::ostrstream::exceptions											
ostrstream fail	R	std::ostrstream::fail											
ostrstream failure	R	std::ostrstream::failure											
ostrstream failure what	R	std::ostrstream::failure::what											
ostrstream fill	R	std::ostrstream::fill											
ostrstream flags	R	std::ostrstream::flags											
ostrstream flush	R	std::ostrstream::flush											
ostrstream freeze	R	std::ostrstream::freeze											
ostrstream getloc	R	std::ostrstream::getloc											
ostrstream good	R	std::ostrstream::good											
ostrstream init	R	std::ostrstream::init											
ostrstream iword	R	std::ostrstream::iword											
ostrstream move	R	std::ostrstream::move											
ostrstream narrow	R	std::ostrstream::narrow											
ostrstream pcount	R	std::ostrstream::pcount											
ostrstream precision	R	std::ostrstream::precision											
ostrstream put	R	std::ostrstream::put											
ostrstream pword	R	std::ostrstream::pword											
ostrstream rdstate	R	std::ostrstream::rdstate											
ostrstream register callback	R	std::ostrstream::register_callback											
ostrstream register_callback	R	std::ostrstream::register_callback											
ostrstream seekp	R	std::ostrstream::seekp											
ostrstream sentry	R	std::ostrstream::sentry											
ostrstream set rdbuf	R	std::ostrstream::set_rdbuf											
ostrstream set_rdbuf	R	std::ostrstream::set_rdbuf											
ostrstream setf	R	std::ostrstream::setf											
ostrstream setstate	R	std::ostrstream::setstate											
ostrstream str	R	std::ostrstream::str											
ostrstream swap	R	std::ostrstream::swap											
ostrstream sync with stdio	R	std::ostrstream::sync_with_stdio											
ostrstream sync_with_stdio	R	std::ostrstream::sync_with_stdio											
ostrstream tellp	R	std::ostrstream::tellp											
ostrstream tie	R	std::ostrstream::tie											
ostrstream unsetf	R	std::ostrstream::unsetf											
ostrstream widen	R	std::ostrstream::widen											
ostrstream width	R	std::ostrstream::width											
ostrstream write	R	std::ostrstream::write											
ostrstream xalloc	R	std::ostrstream::xalloc											
out	R	std::codecvt::out											
out of range	R	std::out_of_range											
out of range what	R	std::out_of_range::what											
out_of_range	R	std::out_of_range											
out_of_range what	R	std::out_of_range::what											
outer allocator	R	std::scoped_allocator_adaptor::outer_allocator											
outer_allocator	R	std::scoped_allocator_adaptor::outer_allocator											
output iterator tag	R	std::output_iterator_tag											
output_iterator_tag	R	std::output_iterator_tag											
overflow error	R	std::overflow_error											
overflow error what	R	std::overflow_error::what											
overflow_error	R	std::overflow_error											
overflow_error what	R	std::overflow_error::what											
owner less	R	std::owner_less											
owner_less	R	std::owner_less											
packaged task	R	std::packaged_task											
packaged task constructor	R	std::packaged_task::packaged_task											
packaged task get future	R	std::packaged_task::get_future											
packaged task make ready at thread exit	R	std::packaged_task::make_ready_at_thread_exit											
packaged task reset	R	std::packaged_task::reset											
packaged task swap	R	std::packaged_task::swap											
packaged task valid	R	std::packaged_task::valid											
packaged_task	R	std::packaged_task											
packaged_task constructor	R	std::packaged_task::packaged_task											
packaged_task get_future	R	std::packaged_task::get_future											
packaged_task make_ready_at_thread_exit	R	std::packaged_task::make_ready_at_thread_exit											
packaged_task reset	R	std::packaged_task::reset											
packaged_task swap	R	std::packaged_task::swap											
packaged_task valid	R	std::packaged_task::valid											
pair	R	std::pair											
pair constructor	R	std::pair::pair											
pair swap	R	std::pair::swap											
parallel policy	R	std::execution::parallel_policy											
parallel unsequenced policy	R	std::execution::parallel_unsequenced_policy											
parallel_policy	R	std::execution::parallel_policy											
parallel_unsequenced_policy	R	std::execution::parallel_unsequenced_policy											
parent path	R	std::filesystem::path::parent_path											
parent_path	R	std::filesystem::path::parent_path											
partial sort	R	std::partial_sort											
partial sort copy	R	std::partial_sort_copy											
partial sum	R	std::partial_sum											
partial_sort	R	std::partial_sort											
partial_sort_copy	R	std::partial_sort_copy											
partial_sum	R	std::partial_sum											
partition	R	std::partition											
partition point	R	std::partition_point											
partition_point	R	std::partition_point											
path	R	std::filesystem::path											
path assign	R	std::filesystem::path::assign											
path begin	R	std::filesystem::path::begin											
path c str	R	std::filesystem::path::c_str											
path c_str	R	std::filesystem::path::c_str											
path clear	R	std::filesystem::path::clear											
path compare	R	std::filesystem::path::compare											
path concat	R	std::filesystem::path::concat											
path constructor	R	std::filesystem::path::path											
path empty	R	std::filesystem::path::empty											
path end	R	std::filesystem::path::end											
path extension	R	std::filesystem::path::extension											
path filename	R	std::filesystem::path::filename											
path generic string	R	std::filesystem::path::generic_string											
path generic u16string	R	std::filesystem::path::generic_u16string											
path generic u32string	R	std::filesystem::path::generic_u32string											
path generic u8string	R	std::filesystem::path::generic_u8string											
path generic wstring	R	std::filesystem::path::generic_wstring											
path generic_string	R	std::filesystem::path::generic_string											
path generic_u16string	R	std::filesystem::path::generic_u16string											
path generic_u32string	R	std::filesystem::path::generic_u32string											
path generic_u8string	R	std::filesystem::path::generic_u8string											
path generic_wstring	R	std::filesystem::path::generic_wstring											
path has extension	R	std::filesystem::path::has_extension											
path has filename	R	std::filesystem::path::has_filename											
path has parent path	R	std::filesystem::path::has_parent_path											
path has relative path	R	std::filesystem::path::has_relative_path											
path has root directory	R	std::filesystem::path::has_root_directory											
path has root name	R	std::filesystem::path::has_root_name											
path has root path	R	std::filesystem::path::has_root_path											
path has stem	R	std::filesystem::path::has_stem											
path has_extension	R	std::filesystem::path::has_extension											
path has_filename	R	std::filesystem::path::has_filename											
path has_parent_path	R	std::filesystem::path::has_parent_path											
path has_relative_path	R	std::filesystem::path::has_relative_path											
path has_root_directory	R	std::filesystem::path::has_root_directory											
path has_root_name	R	std::filesystem::path::has_root_name											
path has_root_path	R	std::filesystem::path::has_root_path											
path has_stem	R	std::filesystem::path::has_stem											
path is absolute	R	std::filesystem::path::is_absolute											
path is relative	R	std::filesystem::path::is_relative											
path is_absolute	R	std::filesystem::path::is_absolute											
path is_relative	R	std::filesystem::path::is_relative											
path lexically normal	R	std::filesystem::path::lexically_normal											
path lexically proximate	R	std::filesystem::path::lexically_proximate											
path lexically relative	R	std::filesystem::path::lexically_relative											
path lexically_normal	R	std::filesystem::path::lexically_normal											
path lexically_proximate	R	std::filesystem::path::lexically_proximate											
path lexically_relative	R	std::filesystem::path::lexically_relative											
path make preferred	R	std::filesystem::path::make_preferred											
path make_preferred	R	std::filesystem::path::make_preferred											
path native	R	std::filesystem::path::native											
path parent path	R	std::filesystem::path::parent_path											
path parent_path	R	std::filesystem::path::parent_path											
path relative path	R	std::filesystem::path::relative_path											
path relative_path	R	std::filesystem::path::relative_path											
path remove filename	R	std::filesystem::path::remove_filename											
path remove_filename	R	std::filesystem::path::remove_filename											
path replace extension	R	std::filesystem::path::replace_extension											
path replace filename	R	std::filesystem::path::replace_filename											
path replace_extension	R	std::filesystem::path::replace_extension											
path replace_filename	R	std::filesystem::path::replace_filename											
path root directory	R	std::filesystem::path::root_directory											
path root name	R	std::filesystem::path::root_name											
path root path	R	std::filesystem::path::root_path											
path root_directory	R	std::filesystem::path::root_directory											
path root_name	R	std::filesystem::path::root_name											
path root_path	R	std::filesystem::path::root_path											
path stem	R	std::filesystem::path::stem											
path string	R	std::filesystem::path::string											
path swap	R	std::filesystem::path::swap											
path u16string	R	std::filesystem::path::u16string											
path u32string	R	std::filesystem::path::u32string											
path u8string	R	std::filesystem::path::u8string											
path wstring	R	std::filesystem::path::wstring											
path1	R	std::filesystem::filesystem_error::path1											
path2	R	std::filesystem::filesystem_error::path2											
permissions	R	std::filesystem::permissions											
perms	R	std::filesystem::perms											
perror	R	std::perror											
piecewise constant distribution	R	std::piecewise_constant_distribution											
piecewise constant distribution constructor	R	std::piecewise_constant_distribution::piecewise_constant_distribution											
piecewise constant distribution densities	R	std::piecewise_constant_distribution::densities											
piecewise constant distribution intervals	R	std::piecewise_constant_distribution::intervals											
piecewise constant distribution max	R	std::piecewise_constant_distribution::max											
piecewise constant distribution min	R	std::piecewise_constant_distribution::min											
piecewise constant distribution param	R	std::piecewise_constant_distribution::param											
piecewise constant distribution reset	R	std::piecewise_constant_distribution::reset											
piecewise construct t	R	std::piecewise_construct_t											
piecewise linear distribution	R	std::piecewise_linear_distribution											
piecewise linear distribution constructor	R	std::piecewise_linear_distribution::piecewise_linear_distribution											
piecewise linear distribution densities	R	std::piecewise_linear_distribution::densities											
piecewise linear distribution intervals	R	std::piecewise_linear_distribution::intervals											
piecewise linear distribution max	R	std::piecewise_linear_distribution::max											
piecewise linear distribution min	R	std::piecewise_linear_distribution::min											
piecewise linear distribution param	R	std::piecewise_linear_distribution::param											
piecewise linear distribution reset	R	std::piecewise_linear_distribution::reset											
piecewise_constant_distribution	R	std::piecewise_constant_distribution											
piecewise_constant_distribution constructor	R	std::piecewise_constant_distribution::piecewise_constant_distribution											
piecewise_constant_distribution densities	R	std::piecewise_constant_distribution::densities											
piecewise_constant_distribution intervals	R	std::piecewise_constant_distribution::intervals											
piecewise_constant_distribution max	R	std::piecewise_constant_distribution::max											
piecewise_constant_distribution min	R	std::piecewise_constant_distribution::min											
piecewise_constant_distribution param	R	std::piecewise_constant_distribution::param											
piecewise_constant_distribution reset	R	std::piecewise_constant_distribution::reset											
piecewise_construct_t	R	std::piecewise_construct_t											
piecewise_linear_distribution	R	std::piecewise_linear_distribution											
piecewise_linear_distribution constructor	R	std::piecewise_linear_distribution::piecewise_linear_distribution											
piecewise_linear_distribution densities	R	std::piecewise_linear_distribution::densities											
piecewise_linear_distribution intervals	R	std::piecewise_linear_distribution::intervals											
piecewise_linear_distribution max	R	std::piecewise_linear_distribution::max											
piecewise_linear_distribution min	R	std::piecewise_linear_distribution::min											
piecewise_linear_distribution param	R	std::piecewise_linear_distribution::param											
piecewise_linear_distribution reset	R	std::piecewise_linear_distribution::reset											
plus	R	std::plus											
pmr get default resource	R	std::pmr::get_default_resource											
pmr get_default_resource	R	std::pmr::get_default_resource											
pmr memory resource	R	std::pmr::memory_resource											
pmr memory resource allocate	R	std::pmr::memory_resource::allocate											
pmr memory resource constructor	R	std::pmr::memory_resource::memory_resource											
pmr memory resource deallocate	R	std::pmr::memory_resource::deallocate											
pmr memory resource do allocate	R	std::pmr::memory_resource::do_allocate											
pmr memory resource do deallocate	R	std::pmr::memory_resource::do_deallocate											
pmr memory resource is equal	R	std::pmr::memory_resource::is_equal											
pmr memory_resource	R	std::pmr::memory_resource											
pmr memory_resource allocate	R	std::pmr::memory_resource::allocate											
pmr memory_resource constructor	R	std::pmr::memory_resource::memory_resource											
pmr memory_resource deallocate	R	std::pmr::memory_resource::deallocate											
pmr memory_resource do_allocate	R	std::pmr::memory_resource::do_allocate											
pmr memory_resource do_deallocate	R	std::pmr::memory_resource::do_deallocate											
pmr memory_resource is_equal	R	std::pmr::memory_resource::is_equal											
pmr monotonic buffer resource	R	std::pmr::monotonic_buffer_resource											
pmr monotonic buffer resource allocate	R	std::pmr::monotonic_buffer_resource::allocate											
pmr monotonic buffer resource constructor	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
pmr monotonic buffer resource deallocate	R	std::pmr::monotonic_buffer_resource::deallocate											
pmr monotonic buffer resource do is equal	R	std::pmr::monotonic_buffer_resource::do_is_equal											
pmr monotonic buffer resource is equal	R	std::pmr::monotonic_buffer_resource::is_equal											
pmr monotonic buffer resource release	R	std::pmr::monotonic_buffer_resource::release											
pmr monotonic buffer resource upstream resource	R	std::pmr::monotonic_buffer_resource::upstream_resource											
pmr monotonic_buffer_resource	R	std::pmr::monotonic_buffer_resource											
pmr monotonic_buffer_resource allocate	R	std::pmr::monotonic_buffer_resource::allocate											
pmr monotonic_buffer_resource constructor	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
pmr monotonic_buffer_resource deallocate	R	std::pmr::monotonic_buffer_resource::deallocate											
pmr monotonic_buffer_resource do_is_equal	R	std::pmr::monotonic_buffer_resource::do_is_equal											
pmr monotonic_buffer_resource is_equal	R	std::pmr::monotonic_buffer_resource::is_equal											
pmr monotonic_buffer_resource release	R	std::pmr::monotonic_buffer_resource::release											
pmr monotonic_buffer_resource upstream_resource	R	std::pmr::monotonic_buffer_resource::upstream_resource											
pmr new delete resource	R	std::pmr::new_delete_resource											
pmr new_delete_resource	R	std::pmr::new_delete_resource											
pmr null memory resource	R	std::pmr::null_memory_resource											
pmr null_memory_resource	R	std::pmr::null_memory_resource											
pmr polymorphic allocator	R	std::pmr::polymorphic_allocator											
pmr polymorphic allocator allocate	R	std::pmr::polymorphic_allocator::allocate											
pmr polymorphic allocator construct	R	std::pmr::polymorphic_allocator::construct											
pmr polymorphic allocator constructor	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
pmr polymorphic allocator deallocate	R	std::pmr::polymorphic_allocator::deallocate											
pmr polymorphic allocator destroy	R	std::pmr::polymorphic_allocator::destroy											
pmr polymorphic allocator resource	R	std::pmr::polymorphic_allocator::resource											
pmr polymorphic_allocator	R	std::pmr::polymorphic_allocator											
pmr polymorphic_allocator allocate	R	std::pmr::polymorphic_allocator::allocate											
pmr polymorphic_allocator construct	R	std::pmr::polymorphic_allocator::construct											
pmr polymorphic_allocator constructor	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
pmr polymorphic_allocator deallocate	R	std::pmr::polymorphic_allocator::deallocate											
pmr polymorphic_allocator destroy	R	std::pmr::polymorphic_allocator::destroy											
pmr polymorphic_allocator resource	R	std::pmr::polymorphic_allocator::resource											
pmr pool options	R	std::pmr::pool_options											
pmr pool_options	R	std::pmr::pool_options											
pmr resource adaptor	R	std::experimental::pmr::resource_adaptor											
pmr resource_adaptor	R	std::experimental::pmr::resource_adaptor											
pmr set default resource	R	std::pmr::set_default_resource											
pmr set_default_resource	R	std::pmr::set_default_resource											
pmr synchronized pool resource	R	std::pmr::synchronized_pool_resource											
pmr synchronized pool resource allocate	R	std::pmr::synchronized_pool_resource::allocate											
pmr synchronized pool resource constructor	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
pmr synchronized pool resource deallocate	R	std::pmr::synchronized_pool_resource::deallocate											
pmr synchronized pool resource do is equal	R	std::pmr::synchronized_pool_resource::do_is_equal											
pmr synchronized pool resource is equal	R	std::pmr::synchronized_pool_resource::is_equal											
pmr synchronized pool resource options	R	std::pmr::synchronized_pool_resource::options											
pmr synchronized pool resource release	R	std::pmr::synchronized_pool_resource::release											
pmr synchronized pool resource upstream resource	R	std::pmr::synchronized_pool_resource::upstream_resource											
pmr synchronized_pool_resource	R	std::pmr::synchronized_pool_resource											
pmr synchronized_pool_resource allocate	R	std::pmr::synchronized_pool_resource::allocate											
pmr synchronized_pool_resource constructor	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
pmr synchronized_pool_resource deallocate	R	std::pmr::synchronized_pool_resource::deallocate											
pmr synchronized_pool_resource do_is_equal	R	std::pmr::synchronized_pool_resource::do_is_equal											
pmr synchronized_pool_resource is_equal	R	std::pmr::synchronized_pool_resource::is_equal											
pmr synchronized_pool_resource options	R	std::pmr::synchronized_pool_resource::options											
pmr synchronized_pool_resource release	R	std::pmr::synchronized_pool_resource::release											
pmr synchronized_pool_resource upstream_resource	R	std::pmr::synchronized_pool_resource::upstream_resource											
pmr unsynchronized pool resource	R	std::pmr::unsynchronized_pool_resource											
pmr unsynchronized pool resource allocate	R	std::pmr::unsynchronized_pool_resource::allocate											
pmr unsynchronized pool resource constructor	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
pmr unsynchronized pool resource deallocate	R	std::pmr::unsynchronized_pool_resource::deallocate											
pmr unsynchronized pool resource do is equal	R	std::pmr::unsynchronized_pool_resource::do_is_equal											
pmr unsynchronized pool resource is equal	R	std::pmr::unsynchronized_pool_resource::is_equal											
pmr unsynchronized pool resource options	R	std::pmr::unsynchronized_pool_resource::options											
pmr unsynchronized pool resource release	R	std::pmr::unsynchronized_pool_resource::release											
pmr unsynchronized pool resource upstream resource	R	std::pmr::unsynchronized_pool_resource::upstream_resource											
pmr unsynchronized_pool_resource	R	std::pmr::unsynchronized_pool_resource											
pmr unsynchronized_pool_resource allocate	R	std::pmr::unsynchronized_pool_resource::allocate											
pmr unsynchronized_pool_resource constructor	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
pmr unsynchronized_pool_resource deallocate	R	std::pmr::unsynchronized_pool_resource::deallocate											
pmr unsynchronized_pool_resource do_is_equal	R	std::pmr::unsynchronized_pool_resource::do_is_equal											
pmr unsynchronized_pool_resource is_equal	R	std::pmr::unsynchronized_pool_resource::is_equal											
pmr unsynchronized_pool_resource options	R	std::pmr::unsynchronized_pool_resource::options											
pmr unsynchronized_pool_resource release	R	std::pmr::unsynchronized_pool_resource::release											
pmr unsynchronized_pool_resource upstream_resource	R	std::pmr::unsynchronized_pool_resource::upstream_resource											
pointer safety	R	std::pointer_safety											
pointer to	R	std::pointer_traits::pointer_to											
pointer traits	R	std::pointer_traits											
pointer traits pointer to	R	std::pointer_traits::pointer_to											
pointer_safety	R	std::pointer_safety											
pointer_to	R	std::pointer_traits::pointer_to											
pointer_traits	R	std::pointer_traits											
pointer_traits pointer_to	R	std::pointer_traits::pointer_to											
poisson distribution	R	std::poisson_distribution											
poisson distribution constructor	R	std::poisson_distribution::poisson_distribution											
poisson distribution max	R	std::poisson_distribution::max											
poisson distribution mean	R	std::poisson_distribution::mean											
poisson distribution min	R	std::poisson_distribution::min											
poisson distribution param	R	std::poisson_distribution::param											
poisson distribution reset	R	std::poisson_distribution::reset											
poisson_distribution	R	std::poisson_distribution											
poisson_distribution constructor	R	std::poisson_distribution::poisson_distribution											
poisson_distribution max	R	std::poisson_distribution::max											
poisson_distribution mean	R	std::poisson_distribution::mean											
poisson_distribution min	R	std::poisson_distribution::min											
poisson_distribution param	R	std::poisson_distribution::param											
poisson_distribution reset	R	std::poisson_distribution::reset											
polymorphic allocator	R	std::pmr::polymorphic_allocator											
polymorphic allocator allocate	R	std::pmr::polymorphic_allocator::allocate											
polymorphic allocator construct	R	std::pmr::polymorphic_allocator::construct											
polymorphic allocator constructor	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
polymorphic allocator deallocate	R	std::pmr::polymorphic_allocator::deallocate											
polymorphic allocator destroy	R	std::pmr::polymorphic_allocator::destroy											
polymorphic allocator resource	R	std::pmr::polymorphic_allocator::resource											
polymorphic_allocator	R	std::pmr::polymorphic_allocator											
polymorphic_allocator allocate	R	std::pmr::polymorphic_allocator::allocate											
polymorphic_allocator construct	R	std::pmr::polymorphic_allocator::construct											
polymorphic_allocator constructor	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
polymorphic_allocator deallocate	R	std::pmr::polymorphic_allocator::deallocate											
polymorphic_allocator destroy	R	std::pmr::polymorphic_allocator::destroy											
polymorphic_allocator resource	R	std::pmr::polymorphic_allocator::resource											
pool options	R	std::pmr::pool_options											
pool_options	R	std::pmr::pool_options											
pop heap	R	std::pop_heap											
pop_heap	R	std::pop_heap											
pos format	R	std::moneypunct::pos_format											
pos_format	R	std::moneypunct::pos_format											
position	R	std::match_results::position											
positive sign	R	std::moneypunct::positive_sign											
positive_sign	R	std::moneypunct::positive_sign											
prefix	R	std::match_results::prefix											
prev	R	std::prev											
prev permutation	R	std::prev_permutation											
prev_permutation	R	std::prev_permutation											
printf	R	std::printf											
priority queue	R	std::priority_queue											
priority queue constructor	R	std::priority_queue::priority_queue											
priority queue emplace	R	std::priority_queue::emplace											
priority queue empty	R	std::priority_queue::empty											
priority queue pop	R	std::priority_queue::pop											
priority queue push	R	std::priority_queue::push											
priority queue size	R	std::priority_queue::size											
priority queue swap	R	std::priority_queue::swap											
priority queue top	R	std::priority_queue::top											
priority_queue	R	std::priority_queue											
priority_queue constructor	R	std::priority_queue::priority_queue											
priority_queue emplace	R	std::priority_queue::emplace											
priority_queue empty	R	std::priority_queue::empty											
priority_queue pop	R	std::priority_queue::pop											
priority_queue push	R	std::priority_queue::push											
priority_queue size	R	std::priority_queue::size											
priority_queue swap	R	std::priority_queue::swap											
priority_queue top	R	std::priority_queue::top											
probabilities	R	std::discrete_distribution::probabilities											
promise constructor	R	std::promise::promise											
promise get future	R	std::promise::get_future											
promise get_future	R	std::promise::get_future											
promise set exception	R	std::promise::set_exception											
promise set exception at thread exit	R	std::promise::set_exception_at_thread_exit											
promise set value	R	std::promise::set_value											
promise set value at thread exit	R	std::promise::set_value_at_thread_exit											
promise set_exception	R	std::promise::set_exception											
promise set_exception_at_thread_exit	R	std::promise::set_exception_at_thread_exit											
promise set_value	R	std::promise::set_value											
promise set_value_at_thread_exit	R	std::promise::set_value_at_thread_exit											
promise swap	R	std::promise::swap											
propagate const	R	std::experimental::propagate_const											
propagate_const	R	std::experimental::propagate_const											
pubsetbuf	R	std::basic_filebuf::pubsetbuf											
push heap	R	std::push_heap											
push_heap	R	std::push_heap											
put money	R	std::put_money											
put time	R	std::put_time											
put_money	R	std::put_money											
put_time	R	std::put_time											
putc	R	std::putc											
putchar	R	std::putchar											
puts	R	std::puts											
putwchar	R	std::putwchar											
qsort	R	std::qsort											
queue	R	std::queue											
queue back	R	std::queue::back											
queue constructor	R	std::queue::queue											
queue emplace	R	std::queue::emplace											
queue empty	R	std::queue::empty											
queue front	R	std::queue::front											
queue pop	R	std::queue::pop											
queue push	R	std::queue::push											
queue size	R	std::queue::size											
queue swap	R	std::queue::swap											
quick exit	R	std::quick_exit											
quick_exit	R	std::quick_exit											
quiet NaN	R	std::numeric_limits::quiet_NaN											
quiet_NaN	R	std::numeric_limits::quiet_NaN											
quoted	R	std::quoted											
raise	R	std::raise											
rand	R	std::rand											
randint	R	std::experimental::randint											
random access iterator tag	R	std::random_access_iterator_tag											
random device	R	std::random_device											
random device constructor	R	std::random_device::random_device											
random device entropy	R	std::random_device::entropy											
random device max	R	std::random_device::max											
random device min	R	std::random_device::min											
random shuffle	R	std::random_shuffle											
random_access_iterator_tag	R	std::random_access_iterator_tag											
random_device	R	std::random_device											
random_device constructor	R	std::random_device::random_device											
random_device entropy	R	std::random_device::entropy											
random_device max	R	std::random_device::max											
random_device min	R	std::random_device::min											
random_shuffle	R	std::random_shuffle											
range error	R	std::range_error											
range error what	R	std::range_error::what											
range_error	R	std::range_error											
range_error what	R	std::range_error::what											
rank	R	std::rank											
ratio	R	std::ratio											
ratio add	R	std::ratio_add											
ratio divide	R	std::ratio_divide											
ratio equal	R	std::ratio_equal											
ratio greater	R	std::ratio_greater											
ratio greater equal	R	std::ratio_greater_equal											
ratio less	R	std::ratio_less											
ratio less equal	R	std::ratio_less_equal											
ratio multiply	R	std::ratio_multiply											
ratio not equal	R	std::ratio_not_equal											
ratio subtract	R	std::ratio_subtract											
ratio_add	R	std::ratio_add											
ratio_divide	R	std::ratio_divide											
ratio_equal	R	std::ratio_equal											
ratio_greater	R	std::ratio_greater											
ratio_greater_equal	R	std::ratio_greater_equal											
ratio_less	R	std::ratio_less											
ratio_less_equal	R	std::ratio_less_equal											
ratio_multiply	R	std::ratio_multiply											
ratio_not_equal	R	std::ratio_not_equal											
ratio_subtract	R	std::ratio_subtract											
raw storage iterator	R	std::raw_storage_iterator											
raw storage iterator constructor	R	std::raw_storage_iterator::raw_storage_iterator											
raw_storage_iterator	R	std::raw_storage_iterator											
raw_storage_iterator constructor	R	std::raw_storage_iterator::raw_storage_iterator											
rbegin	R	std::rbegin											
read symlink	R	std::filesystem::read_symlink											
read_symlink	R	std::filesystem::read_symlink											
ready	R	std::match_results::ready											
real	R	std::complex::real											
realloc	R	std::realloc											
recursion pending	R	std::filesystem::recursive_directory_iterator::recursion_pending											
recursion_pending	R	std::filesystem::recursive_directory_iterator::recursion_pending											
recursive directory iterator	R	std::filesystem::recursive_directory_iterator											
recursive directory iterator constructor	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
recursive directory iterator depth	R	std::filesystem::recursive_directory_iterator::depth											
recursive directory iterator disable recursion pending	R	std::filesystem::recursive_directory_iterator::disable_recursion_pending											
recursive directory iterator increment	R	std::filesystem::recursive_directory_iterator::increment											
recursive directory iterator options	R	std::filesystem::recursive_directory_iterator::options											
recursive directory iterator pop	R	std::filesystem::recursive_directory_iterator::pop											
recursive directory iterator recursion pending	R	std::filesystem::recursive_directory_iterator::recursion_pending											
recursive mutex	R	std::recursive_mutex											
recursive mutex lock	R	std::recursive_mutex::lock											
recursive mutex native handle	R	std::recursive_mutex::native_handle											
recursive mutex try lock	R	std::recursive_mutex::try_lock											
recursive mutex unlock	R	std::recursive_mutex::unlock											
recursive timed mutex	R	std::recursive_timed_mutex											
recursive timed mutex lock	R	std::recursive_timed_mutex::lock											
recursive timed mutex native handle	R	std::recursive_timed_mutex::native_handle											
recursive timed mutex try lock	R	std::recursive_timed_mutex::try_lock											
recursive timed mutex try lock for	R	std::recursive_timed_mutex::try_lock_for											
recursive timed mutex try lock until	R	std::recursive_timed_mutex::try_lock_until											
recursive timed mutex unlock	R	std::recursive_timed_mutex::unlock											
recursive_directory_iterator	R	std::filesystem::recursive_directory_iterator											
recursive_directory_iterator constructor	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
recursive_directory_iterator depth	R	std::filesystem::recursive_directory_iterator::depth											
recursive_directory_iterator disable_recursion_pending	R	std::filesystem::recursive_directory_iterator::disable_recursion_pending											
recursive_directory_iterator increment	R	std::filesystem::recursive_directory_iterator::increment											
recursive_directory_iterator options	R	std::filesystem::recursive_directory_iterator::options											
recursive_directory_iterator pop	R	std::filesystem::recursive_directory_iterator::pop											
recursive_directory_iterator recursion_pending	R	std::filesystem::recursive_directory_iterator::recursion_pending											
recursive_mutex	R	std::recursive_mutex											
recursive_mutex lock	R	std::recursive_mutex::lock											
recursive_mutex native_handle	R	std::recursive_mutex::native_handle											
recursive_mutex try_lock	R	std::recursive_mutex::try_lock											
recursive_mutex unlock	R	std::recursive_mutex::unlock											
recursive_timed_mutex	R	std::recursive_timed_mutex											
recursive_timed_mutex lock	R	std::recursive_timed_mutex::lock											
recursive_timed_mutex native_handle	R	std::recursive_timed_mutex::native_handle											
recursive_timed_mutex try_lock	R	std::recursive_timed_mutex::try_lock											
recursive_timed_mutex try_lock_for	R	std::recursive_timed_mutex::try_lock_for											
recursive_timed_mutex try_lock_until	R	std::recursive_timed_mutex::try_lock_until											
recursive_timed_mutex unlock	R	std::recursive_timed_mutex::unlock											
ref	R	std::ref											
reference	R	std::bitset::reference											
reference wrapper	R	std::reference_wrapper											
reference wrapper constructor	R	std::reference_wrapper::reference_wrapper											
reference wrapper get	R	std::reference_wrapper::get											
reference_wrapper	R	std::reference_wrapper											
reference_wrapper constructor	R	std::reference_wrapper::reference_wrapper											
reference_wrapper get	R	std::reference_wrapper::get											
regex error	R	std::regex_error											
regex error code	R	std::regex_error::code											
regex error what	R	std::regex_error::what											
regex iterator constructor	R	std::regex_iterator::regex_iterator											
regex match	R	std::regex_match											
regex replace	R	std::regex_replace											
regex search	R	std::regex_search											
regex token iterator constructor	R	std::regex_token_iterator::regex_token_iterator											
regex traits	R	std::regex_traits											
regex traits getloc	R	std::regex_traits::getloc											
regex traits imbue	R	std::regex_traits::imbue											
regex traits isctype	R	std::regex_traits::isctype											
regex traits length	R	std::regex_traits::length											
regex traits lookup classname	R	std::regex_traits::lookup_classname											
regex traits lookup collatename	R	std::regex_traits::lookup_collatename											
regex traits transform	R	std::regex_traits::transform											
regex traits transform primary	R	std::regex_traits::transform_primary											
regex traits translate	R	std::regex_traits::translate											
regex traits translate nocase	R	std::regex_traits::translate_nocase											
regex traits value	R	std::regex_traits::value											
regex_error	R	std::regex_error											
regex_error code	R	std::regex_error::code											
regex_error what	R	std::regex_error::what											
regex_iterator constructor	R	std::regex_iterator::regex_iterator											
regex_match	R	std::regex_match											
regex_replace	R	std::regex_replace											
regex_search	R	std::regex_search											
regex_token_iterator constructor	R	std::regex_token_iterator::regex_token_iterator											
regex_traits	R	std::regex_traits											
regex_traits getloc	R	std::regex_traits::getloc											
regex_traits imbue	R	std::regex_traits::imbue											
regex_traits isctype	R	std::regex_traits::isctype											
regex_traits length	R	std::regex_traits::length											
regex_traits lookup_classname	R	std::regex_traits::lookup_classname											
regex_traits lookup_collatename	R	std::regex_traits::lookup_collatename											
regex_traits transform	R	std::regex_traits::transform											
regex_traits transform_primary	R	std::regex_traits::transform_primary											
regex_traits translate	R	std::regex_traits::translate											
regex_traits translate_nocase	R	std::regex_traits::translate_nocase											
regex_traits value	R	std::regex_traits::value											
relative path	R	std::filesystem::path::relative_path											
relative_path	R	std::filesystem::path::relative_path											
remove all	R	std::filesystem::remove_all											
remove all extents	R	std::remove_all_extents											
remove const	R	std::remove_const											
remove copy	R	std::remove_copy											
remove copy if	R	std::remove_copy_if											
remove cv	R	std::remove_cv											
remove extent	R	std::remove_extent											
remove filename	R	std::filesystem::path::remove_filename											
remove if	R	std::remove_if											
remove pointer	R	std::remove_pointer											
remove prefix	R	std::basic_string_view::remove_prefix											
remove reference	R	std::remove_reference											
remove suffix	R	std::basic_string_view::remove_suffix											
remove volatile	R	std::remove_volatile											
remove_all	R	std::filesystem::remove_all											
remove_all_extents	R	std::remove_all_extents											
remove_const	R	std::remove_const											
remove_copy	R	std::remove_copy											
remove_copy_if	R	std::remove_copy_if											
remove_cv	R	std::remove_cv											
remove_extent	R	std::remove_extent											
remove_filename	R	std::filesystem::path::remove_filename											
remove_if	R	std::remove_if											
remove_pointer	R	std::remove_pointer											
remove_prefix	R	std::basic_string_view::remove_prefix											
remove_reference	R	std::remove_reference											
remove_suffix	R	std::basic_string_view::remove_suffix											
remove_volatile	R	std::remove_volatile											
rename	R	std::rename											
rend	R	std::rend											
replace	R	std::replace											
replace copy	R	std::replace_copy											
replace copy if	R	std::replace_copy_if											
replace extension	R	std::filesystem::path::replace_extension											
replace if	R	std::replace_if											
replace_copy	R	std::replace_copy											
replace_copy_if	R	std::replace_copy_if											
replace_extension	R	std::filesystem::path::replace_extension											
replace_if	R	std::replace_if											
reseed	R	std::experimental::reseed											
resetiosflags	R	std::resetiosflags											
resize file	R	std::filesystem::resize_file											
resize_file	R	std::filesystem::resize_file											
resource	R	std::pmr::polymorphic_allocator::resource											
resource adaptor	R	std::experimental::pmr::resource_adaptor											
resource_adaptor	R	std::experimental::pmr::resource_adaptor											
result of	R	std::result_of											
result_of	R	std::result_of											
rethrow exception	R	std::rethrow_exception											
rethrow if nested	R	std::rethrow_if_nested											
rethrow nested	R	std::nested_exception::rethrow_nested											
rethrow_exception	R	std::rethrow_exception											
rethrow_if_nested	R	std::rethrow_if_nested											
rethrow_nested	R	std::nested_exception::rethrow_nested											
return temporary buffer	R	std::return_temporary_buffer											
return_temporary_buffer	R	std::return_temporary_buffer											
reverse iterator	R	std::reverse_iterator											
reverse_iterator	R	std::reverse_iterator											
rewind	R	std::rewind											
riemann zetaf	R	std::riemann_zetaf											
riemann_zetaf	R	std::riemann_zetaf											
right	R	std::right											
root directory	R	std::filesystem::path::root_directory											
root name	R	std::filesystem::path::root_name											
root path	R	std::filesystem::path::root_path											
root_directory	R	std::filesystem::path::root_directory											
root_name	R	std::filesystem::path::root_name											
root_path	R	std::filesystem::path::root_path											
rotate	R	std::rotate											
round error	R	std::numeric_limits::round_error											
round_error	R	std::numeric_limits::round_error											
runtime error	R	std::runtime_error											
runtime error what	R	std::runtime_error::what											
runtime_error	R	std::runtime_error											
runtime_error what	R	std::runtime_error::what											
s	R	std::lognormal_distribution::s											
sample	R	std::sample											
scan is	R	std::ctype::scan_is											
scan_is	R	std::ctype::scan_is											
scanf	R	std::scanf											
scientific	R	std::scientific											
scoped allocator adaptor	R	std::scoped_allocator_adaptor											
scoped allocator adaptor allocate	R	std::scoped_allocator_adaptor::allocate											
scoped allocator adaptor construct	R	std::scoped_allocator_adaptor::construct											
scoped allocator adaptor constructor	R	std::scoped_allocator_adaptor::scoped_allocator_adaptor											
scoped allocator adaptor deallocate	R	std::scoped_allocator_adaptor::deallocate											
scoped allocator adaptor destroy	R	std::scoped_allocator_adaptor::destroy											
scoped allocator adaptor inner allocator	R	std::scoped_allocator_adaptor::inner_allocator											
scoped allocator adaptor max size	R	std::scoped_allocator_adaptor::max_size											
scoped allocator adaptor outer allocator	R	std::scoped_allocator_adaptor::outer_allocator											
scoped allocator adaptor select on container copy construction	R	std::scoped_allocator_adaptor::select_on_container_copy_construction											
scoped_allocator_adaptor	R	std::scoped_allocator_adaptor											
scoped_allocator_adaptor allocate	R	std::scoped_allocator_adaptor::allocate											
scoped_allocator_adaptor construct	R	std::scoped_allocator_adaptor::construct											
scoped_allocator_adaptor constructor	R	std::scoped_allocator_adaptor::scoped_allocator_adaptor											
scoped_allocator_adaptor deallocate	R	std::scoped_allocator_adaptor::deallocate											
scoped_allocator_adaptor destroy	R	std::scoped_allocator_adaptor::destroy											
scoped_allocator_adaptor inner_allocator	R	std::scoped_allocator_adaptor::inner_allocator											
scoped_allocator_adaptor max_size	R	std::scoped_allocator_adaptor::max_size											
scoped_allocator_adaptor outer_allocator	R	std::scoped_allocator_adaptor::outer_allocator											
scoped_allocator_adaptor select_on_container_copy_construction	R	std::scoped_allocator_adaptor::select_on_container_copy_construction											
search	R	std::experimental::search											
search n	R	std::search_n											
search_n	R	std::search_n											
seed seq	R	std::seed_seq											
seed seq generate	R	std::seed_seq::generate											
seed seq param	R	std::seed_seq::param											
seed seq size	R	std::seed_seq::size											
seed_seq	R	std::seed_seq											
seed_seq generate	R	std::seed_seq::generate											
seed_seq param	R	std::seed_seq::param											
seed_seq size	R	std::seed_seq::size											
sequenced policy	R	std::execution::sequenced_policy											
sequenced_policy	R	std::execution::sequenced_policy											
set	R	std::set											
set begin	R	std::set::begin											
set cbegin	R	std::set::cbegin											
set cend	R	std::set::cend											
set clear	R	std::set::clear											
set constructor	R	std::set::set											
set count	R	std::set::count											
set crbegin	R	std::set::crbegin											
set crend	R	std::set::crend											
set default resource	R	std::pmr::set_default_resource											
set difference	R	std::set_difference											
set emplace	R	std::set::emplace											
set emplace hint	R	std::set::emplace_hint											
set emplace_hint	R	std::set::emplace_hint											
set empty	R	std::set::empty											
set end	R	std::set::end											
set equal range	R	std::set::equal_range											
set equal_range	R	std::set::equal_range											
set erase	R	std::set::erase											
set exception	R	std::promise::set_exception											
set exception at thread exit	R	std::promise::set_exception_at_thread_exit											
set get allocator	R	std::set::get_allocator											
set get_allocator	R	std::set::get_allocator											
set insert	R	std::set::insert											
set intersection	R	std::set_intersection											
set key comp	R	std::set::key_comp											
set key_comp	R	std::set::key_comp											
set max size	R	std::set::max_size											
set max_size	R	std::set::max_size											
set merge	R	std::set::merge											
set new handler	R	std::set_new_handler											
set rbegin	R	std::set::rbegin											
set rend	R	std::set::rend											
set size	R	std::set::size											
set swap	R	std::set::swap											
set symmetric difference	R	std::set_symmetric_difference											
set terminate	R	std::set_terminate											
set union	R	std::set_union											
set value	R	std::promise::set_value											
set value at thread exit	R	std::promise::set_value_at_thread_exit											
set value comp	R	std::set::value_comp											
set value_comp	R	std::set::value_comp											
set_default_resource	R	std::pmr::set_default_resource											
set_difference	R	std::set_difference											
set_exception	R	std::promise::set_exception											
set_exception_at_thread_exit	R	std::promise::set_exception_at_thread_exit											
set_intersection	R	std::set_intersection											
set_new_handler	R	std::set_new_handler											
set_symmetric_difference	R	std::set_symmetric_difference											
set_terminate	R	std::set_terminate											
set_union	R	std::set_union											
set_value	R	std::promise::set_value											
set_value_at_thread_exit	R	std::promise::set_value_at_thread_exit											
setbase	R	std::setbase											
setbuf	R	std::setbuf											
setfill	R	std::setfill											
setiosflags	R	std::setiosflags											
setjmp	R	setjmp											
setlocale	R	std::setlocale											
setprecision	R	std::setprecision											
setvbuf	R	std::setvbuf											
setw	R	std::setw											
sgetn	R	std::basic_filebuf::sgetn											
share	R	std::future::share											
shared from this	R	std::enable_shared_from_this::shared_from_this											
shared future	R	std::shared_future											
shared future constructor	R	std::shared_future::shared_future											
shared future get	R	std::shared_future::get											
shared future valid	R	std::shared_future::valid											
shared future wait	R	std::shared_future::wait											
shared future wait for	R	std::shared_future::wait_for											
shared future wait until	R	std::shared_future::wait_until											
shared lock	R	std::shared_lock											
shared lock constructor	R	std::shared_lock::shared_lock											
shared lock lock	R	std::shared_lock::lock											
shared lock mutex	R	std::shared_lock::mutex											
shared lock owns lock	R	std::shared_lock::owns_lock											
shared lock release	R	std::shared_lock::release											
shared lock swap	R	std::shared_lock::swap											
shared lock try lock	R	std::shared_lock::try_lock											
shared lock try lock for	R	std::shared_lock::try_lock_for											
shared lock try lock until	R	std::shared_lock::try_lock_until											
shared lock unlock	R	std::shared_lock::unlock											
shared mutex	R	std::shared_mutex											
shared mutex lock	R	std::shared_mutex::lock											
shared mutex lock shared	R	std::shared_mutex::lock_shared											
shared mutex native handle	R	std::shared_mutex::native_handle											
shared mutex try lock	R	std::shared_mutex::try_lock											
shared mutex try lock shared	R	std::shared_mutex::try_lock_shared											
shared mutex unlock	R	std::shared_mutex::unlock											
shared mutex unlock shared	R	std::shared_mutex::unlock_shared											
shared ptr	R	std::shared_ptr											
shared ptr constructor	R	std::shared_ptr::shared_ptr											
shared ptr get	R	std::shared_ptr::get											
shared ptr owner before	R	std::shared_ptr::owner_before											
shared ptr reset	R	std::shared_ptr::reset											
shared ptr swap	R	std::shared_ptr::swap											
shared ptr unique	R	std::shared_ptr::unique											
shared ptr use count	R	std::shared_ptr::use_count											
shared timed mutex	R	std::shared_timed_mutex											
shared timed mutex lock	R	std::shared_timed_mutex::lock											
shared timed mutex lock shared	R	std::shared_timed_mutex::lock_shared											
shared timed mutex try lock	R	std::shared_timed_mutex::try_lock											
shared timed mutex try lock for	R	std::shared_timed_mutex::try_lock_for											
shared timed mutex try lock shared	R	std::shared_timed_mutex::try_lock_shared											
shared timed mutex try lock shared for	R	std::shared_timed_mutex::try_lock_shared_for											
shared timed mutex try lock shared until	R	std::shared_timed_mutex::try_lock_shared_until											
shared timed mutex try lock until	R	std::shared_timed_mutex::try_lock_until											
shared timed mutex unlock	R	std::shared_timed_mutex::unlock											
shared timed mutex unlock shared	R	std::shared_timed_mutex::unlock_shared											
shared_from_this	R	std::enable_shared_from_this::shared_from_this											
shared_future	R	std::shared_future											
shared_future constructor	R	std::shared_future::shared_future											
shared_future get	R	std::shared_future::get											
shared_future valid	R	std::shared_future::valid											
shared_future wait	R	std::shared_future::wait											
shared_future wait_for	R	std::shared_future::wait_for											
shared_future wait_until	R	std::shared_future::wait_until											
shared_lock	R	std::shared_lock											
shared_lock constructor	R	std::shared_lock::shared_lock											
shared_lock lock	R	std::shared_lock::lock											
shared_lock mutex	R	std::shared_lock::mutex											
shared_lock owns_lock	R	std::shared_lock::owns_lock											
shared_lock release	R	std::shared_lock::release											
shared_lock swap	R	std::shared_lock::swap											
shared_lock try_lock	R	std::shared_lock::try_lock											
shared_lock try_lock_for	R	std::shared_lock::try_lock_for											
shared_lock try_lock_until	R	std::shared_lock::try_lock_until											
shared_lock unlock	R	std::shared_lock::unlock											
shared_mutex	R	std::shared_mutex											
shared_mutex lock	R	std::shared_mutex::lock											
shared_mutex lock_shared	R	std::shared_mutex::lock_shared											
shared_mutex native_handle	R	std::shared_mutex::native_handle											
shared_mutex try_lock	R	std::shared_mutex::try_lock											
shared_mutex try_lock_shared	R	std::shared_mutex::try_lock_shared											
shared_mutex unlock	R	std::shared_mutex::unlock											
shared_mutex unlock_shared	R	std::shared_mutex::unlock_shared											
shared_ptr	R	std::shared_ptr											
shared_ptr constructor	R	std::shared_ptr::shared_ptr											
shared_ptr get	R	std::shared_ptr::get											
shared_ptr owner_before	R	std::shared_ptr::owner_before											
shared_ptr reset	R	std::shared_ptr::reset											
shared_ptr swap	R	std::shared_ptr::swap											
shared_ptr unique	R	std::shared_ptr::unique											
shared_ptr use_count	R	std::shared_ptr::use_count											
shared_timed_mutex	R	std::shared_timed_mutex											
shared_timed_mutex lock	R	std::shared_timed_mutex::lock											
shared_timed_mutex lock_shared	R	std::shared_timed_mutex::lock_shared											
shared_timed_mutex try_lock	R	std::shared_timed_mutex::try_lock											
shared_timed_mutex try_lock_for	R	std::shared_timed_mutex::try_lock_for											
shared_timed_mutex try_lock_shared	R	std::shared_timed_mutex::try_lock_shared											
shared_timed_mutex try_lock_shared_for	R	std::shared_timed_mutex::try_lock_shared_for											
shared_timed_mutex try_lock_shared_until	R	std::shared_timed_mutex::try_lock_shared_until											
shared_timed_mutex try_lock_until	R	std::shared_timed_mutex::try_lock_until											
shared_timed_mutex unlock	R	std::shared_timed_mutex::unlock											
shared_timed_mutex unlock_shared	R	std::shared_timed_mutex::unlock_shared											
showbase	R	std::showbase											
showpoint	R	std::showpoint											
showpos	R	std::showpos											
shuffle	R	std::shuffle											
shuffle order engine	R	std::shuffle_order_engine											
shuffle order engine base	R	std::shuffle_order_engine::base											
shuffle order engine constructor	R	std::shuffle_order_engine::shuffle_order_engine											
shuffle order engine discard	R	std::shuffle_order_engine::discard											
shuffle order engine max	R	std::shuffle_order_engine::max											
shuffle order engine min	R	std::shuffle_order_engine::min											
shuffle order engine seed	R	std::shuffle_order_engine::seed											
shuffle_order_engine	R	std::shuffle_order_engine											
shuffle_order_engine base	R	std::shuffle_order_engine::base											
shuffle_order_engine constructor	R	std::shuffle_order_engine::shuffle_order_engine											
shuffle_order_engine discard	R	std::shuffle_order_engine::discard											
shuffle_order_engine max	R	std::shuffle_order_engine::max											
shuffle_order_engine min	R	std::shuffle_order_engine::min											
shuffle_order_engine seed	R	std::shuffle_order_engine::seed											
signal	R	std::signal											
signaling NaN	R	std::numeric_limits::signaling_NaN											
signaling_NaN	R	std::numeric_limits::signaling_NaN											
sin	R	std::sin											
sinh	R	std::sinh											
size	R	std::size											
skipws	R	std::skipws											
sleep for	R	std::this_thread::sleep_for											
sleep until	R	std::this_thread::sleep_until											
sleep_for	R	std::this_thread::sleep_for											
sleep_until	R	std::this_thread::sleep_until											
slice	R	std::slice											
slice array	R	std::slice_array											
slice_array	R	std::slice_array											
snprintf	R	std::snprintf											
sort	R	std::sort											
sort heap	R	std::sort_heap											
sort_heap	R	std::sort_heap											
source location	R	std::experimental::source_location											
source_location	R	std::experimental::source_location											
space	R	std::filesystem::space											
space info	R	std::filesystem::space_info											
space_info	R	std::filesystem::space_info											
sph besself	R	std::sph_besself											
sph legendref	R	std::sph_legendref											
sph neumannf	R	std::sph_neumannf											
sph_besself	R	std::sph_besself											
sph_legendref	R	std::sph_legendref											
sph_neumannf	R	std::sph_neumannf											
splice	R	std::list::splice											
splice after	R	std::forward_list::splice_after											
splice_after	R	std::forward_list::splice_after											
sprintf	R	std::sprintf											
sputn	R	std::basic_filebuf::sputn											
sqrt	R	std::sqrt											
srand	R	std::srand											
sscanf	R	std::sscanf											
stable sort	R	std::stable_sort											
stable_sort	R	std::stable_sort											
stack	R	std::stack											
stack constructor	R	std::stack::stack											
stack emplace	R	std::stack::emplace											
stack empty	R	std::stack::empty											
stack pop	R	std::stack::pop											
stack push	R	std::stack::push											
stack size	R	std::stack::size											
stack swap	R	std::stack::swap											
stack top	R	std::stack::top											
static pointer cast	R	std::static_pointer_cast											
static_pointer_cast	R	std::static_pointer_cast											
status	R	std::filesystem::status											
status known	R	std::filesystem::status_known											
status_known	R	std::filesystem::status_known											
std Exit	R	std::_Exit											
std _Exit	R	std::_Exit											
std abort	R	std::abort											
std accumulate	R	std::accumulate											
std acos	R	std::acos											
std acosh	R	std::acosh											
std add const	R	std::add_const											
std add cv	R	std::add_cv											
std add lvalue reference	R	std::add_lvalue_reference											
std add pointer	R	std::add_pointer											
std add rvalue reference	R	std::add_rvalue_reference											
std add volatile	R	std::add_volatile											
std add_const	R	std::add_const											
std add_cv	R	std::add_cv											
std add_lvalue_reference	R	std::add_lvalue_reference											
std add_pointer	R	std::add_pointer											
std add_rvalue_reference	R	std::add_rvalue_reference											
std add_volatile	R	std::add_volatile											
std adjacent difference	R	std::adjacent_difference											
std adjacent find	R	std::adjacent_find											
std adjacent_difference	R	std::adjacent_difference											
std adjacent_find	R	std::adjacent_find											
std adopt lock t	R	std::adopt_lock_t											
std adopt_lock_t	R	std::adopt_lock_t											
std advance	R	std::advance											
std align	R	std::align											
std align val t	R	std::align_val_t											
std align_val_t	R	std::align_val_t											
std aligned alloc	R	std::aligned_alloc											
std aligned storage	R	std::aligned_storage											
std aligned union	R	std::aligned_union											
std aligned_alloc	R	std::aligned_alloc											
std aligned_storage	R	std::aligned_storage											
std aligned_union	R	std::aligned_union											
std alignment of	R	std::alignment_of											
std alignment_of	R	std::alignment_of											
std allocate shared	R	std::allocate_shared											
std allocate_shared	R	std::allocate_shared											
std allocator	R	std::allocator											
std allocator address	R	std::allocator::address											
std allocator allocate	R	std::allocator::allocate											
std allocator arg t	R	std::allocator_arg_t											
std allocator construct	R	std::allocator::construct											
std allocator constructor	R	std::allocator::allocator											
std allocator deallocate	R	std::allocator::deallocate											
std allocator destroy	R	std::allocator::destroy											
std allocator max size	R	std::allocator::max_size											
std allocator max_size	R	std::allocator::max_size											
std allocator traits	R	std::allocator_traits											
std allocator traits allocate	R	std::allocator_traits::allocate											
std allocator traits construct	R	std::allocator_traits::construct											
std allocator traits deallocate	R	std::allocator_traits::deallocate											
std allocator traits destroy	R	std::allocator_traits::destroy											
std allocator traits max size	R	std::allocator_traits::max_size											
std allocator traits select on container copy construction	R	std::allocator_traits::select_on_container_copy_construction											
std allocator_arg_t	R	std::allocator_arg_t											
std allocator_traits	R	std::allocator_traits											
std allocator_traits allocate	R	std::allocator_traits::allocate											
std allocator_traits construct	R	std::allocator_traits::construct											
std allocator_traits deallocate	R	std::allocator_traits::deallocate											
std allocator_traits destroy	R	std::allocator_traits::destroy											
std allocator_traits max_size	R	std::allocator_traits::max_size											
std allocator_traits select_on_container_copy_construction	R	std::allocator_traits::select_on_container_copy_construction											
std any	R	std::any											
std any cast	R	std::any_cast											
std any constructor	R	std::any::any											
std any emplace	R	std::any::emplace											
std any has value	R	std::any::has_value											
std any has_value	R	std::any::has_value											
std any reset	R	std::any::reset											
std any swap	R	std::any::swap											
std any type	R	std::any::type											
std any_cast	R	std::any_cast											
std apply	R	std::apply											
std array	R	std::array											
std array at	R	std::array::at											
std array back	R	std::array::back											
std array begin	R	std::array::begin											
std array cbegin	R	std::array::cbegin											
std array cend	R	std::array::cend											
std array crbegin	R	std::array::crbegin											
std array crend	R	std::array::crend											
std array data	R	std::array::data											
std array empty	R	std::array::empty											
std array end	R	std::array::end											
std array fill	R	std::array::fill											
std array front	R	std::array::front											
std array max size	R	std::array::max_size											
std array max_size	R	std::array::max_size											
std array rbegin	R	std::array::rbegin											
std array rend	R	std::array::rend											
std array size	R	std::array::size											
std array swap	R	std::array::swap											
std as const	R	std::as_const											
std as_const	R	std::as_const											
std asctime	R	std::asctime											
std asin	R	std::asin											
std asinh	R	std::asinh											
std assoc laguerref	R	std::assoc_laguerref											
std assoc legendref	R	std::assoc_legendref											
std assoc_laguerref	R	std::assoc_laguerref											
std assoc_legendref	R	std::assoc_legendref											
std async	R	std::async											
std at quick exit	R	std::at_quick_exit											
std at_quick_exit	R	std::at_quick_exit											
std atan	R	std::atan											
std atan2	R	std::atan2											
std atanh	R	std::atanh											
std atexit	R	std::atexit											
std atof	R	std::atof											
std atoi	R	std::atoi											
std atol	R	std::atol											
std atoll	R	std::atoll											
std atomic	R	std::atomic											
std atomic compare exchange strong explicit	R	std::atomic_compare_exchange_strong_explicit											
std atomic compare exchange weak explicit	R	std::atomic_compare_exchange_weak_explicit											
std atomic compare_exchange_strong	R	std::atomic::compare_exchange_strong											
std atomic compare_exchange_weak	R	std::atomic::compare_exchange_weak											
std atomic constructor	R	std::atomic::atomic											
std atomic exchange	R	std::atomic::exchange											
std atomic fetch add explicit	R	std::atomic_fetch_add_explicit											
std atomic fetch and	R	std::atomic::fetch_and											
std atomic fetch or explicit	R	std::atomic_fetch_or_explicit											
std atomic fetch sub explicit	R	std::atomic_fetch_sub_explicit											
std atomic fetch xor explicit	R	std::atomic_fetch_xor_explicit											
std atomic fetch_add	R	std::atomic::fetch_add											
std atomic fetch_and	R	std::atomic::fetch_and											
std atomic fetch_or	R	std::atomic::fetch_or											
std atomic fetch_sub	R	std::atomic::fetch_sub											
std atomic fetch_xor	R	std::atomic::fetch_xor											
std atomic flag	R	std::atomic_flag											
std atomic flag clear	R	std::atomic_flag::clear											
std atomic flag test and set	R	std::atomic_flag::test_and_set											
std atomic init	R	std::atomic_init											
std atomic is lock free	R	std::atomic::is_lock_free											
std atomic is_lock_free	R	std::atomic::is_lock_free											
std atomic load	R	std::atomic::load											
std atomic signal fence	R	std::atomic_signal_fence											
std atomic store	R	std::atomic::store											
std atomic thread fence	R	std::atomic_thread_fence											
std atomic_compare_exchange_strong	R	std::atomic_compare_exchange_strong											
std atomic_compare_exchange_strong_explicit	R	std::atomic_compare_exchange_strong_explicit											
std atomic_compare_exchange_weak	R	std::atomic_compare_exchange_weak											
std atomic_compare_exchange_weak_explicit	R	std::atomic_compare_exchange_weak_explicit											
std atomic_fetch_add	R	std::atomic_fetch_add											
std atomic_fetch_add_explicit	R	std::atomic_fetch_add_explicit											
std atomic_fetch_or	R	std::atomic_fetch_or											
std atomic_fetch_or_explicit	R	std::atomic_fetch_or_explicit											
std atomic_fetch_sub	R	std::atomic_fetch_sub											
std atomic_fetch_sub_explicit	R	std::atomic_fetch_sub_explicit											
std atomic_fetch_xor	R	std::atomic_fetch_xor											
std atomic_fetch_xor_explicit	R	std::atomic_fetch_xor_explicit											
std atomic_flag	R	std::atomic_flag											
std atomic_flag clear	R	std::atomic_flag::clear											
std atomic_flag test_and_set	R	std::atomic_flag::test_and_set											
std atomic_init	R	std::atomic_init											
std atomic_signal_fence	R	std::atomic_signal_fence											
std atomic_thread_fence	R	std::atomic_thread_fence											
std auto ptr constructor	R	std::auto_ptr::auto_ptr											
std auto ptr get	R	std::auto_ptr::get											
std auto ptr release	R	std::auto_ptr::release											
std auto ptr reset	R	std::auto_ptr::reset											
std auto_ptr constructor	R	std::auto_ptr::auto_ptr											
std auto_ptr get	R	std::auto_ptr::get											
std auto_ptr release	R	std::auto_ptr::release											
std auto_ptr reset	R	std::auto_ptr::reset											
std back insert iterator	R	std::back_insert_iterator											
std back inserter	R	std::back_inserter											
std back_insert_iterator	R	std::back_insert_iterator											
std back_inserter	R	std::back_inserter											
std bad alloc	R	std::bad_alloc											
std bad alloc what	R	std::bad_alloc::what											
std bad any cast	R	std::bad_any_cast											
std bad array length	R	std::bad_array_length											
std bad array length what	R	std::bad_array_length::what											
std bad array new length	R	std::bad_array_new_length											
std bad array new length what	R	std::bad_array_new_length::what											
std bad cast	R	std::bad_cast											
std bad cast what	R	std::bad_cast::what											
std bad exception	R	std::bad_exception											
std bad function call	R	std::bad_function_call											
std bad function call what	R	std::bad_function_call::what											
std bad optional access	R	std::bad_optional_access											
std bad typeid	R	std::bad_typeid											
std bad typeid what	R	std::bad_typeid::what											
std bad variant access	R	std::bad_variant_access											
std bad weak ptr	R	std::bad_weak_ptr											
std bad weak ptr what	R	std::bad_weak_ptr::what											
std bad_alloc	R	std::bad_alloc											
std bad_alloc what	R	std::bad_alloc::what											
std bad_any_cast	R	std::bad_any_cast											
std bad_array_length	R	std::bad_array_length											
std bad_array_length what	R	std::bad_array_length::what											
std bad_array_new_length	R	std::bad_array_new_length											
std bad_array_new_length what	R	std::bad_array_new_length::what											
std bad_cast	R	std::bad_cast											
std bad_cast what	R	std::bad_cast::what											
std bad_exception	R	std::bad_exception											
std bad_function_call	R	std::bad_function_call											
std bad_function_call what	R	std::bad_function_call::what											
std bad_optional_access	R	std::bad_optional_access											
std bad_typeid	R	std::bad_typeid											
std bad_typeid what	R	std::bad_typeid::what											
std bad_variant_access	R	std::bad_variant_access											
std bad_weak_ptr	R	std::bad_weak_ptr											
std bad_weak_ptr what	R	std::bad_weak_ptr::what											
std basic filebuf	R	std::basic_filebuf											
std basic filebuf close	R	std::basic_filebuf::close											
std basic filebuf constructor	R	std::basic_filebuf::basic_filebuf											
std basic filebuf eback	R	std::basic_filebuf::eback											
std basic filebuf egptr	R	std::basic_filebuf::egptr											
std basic filebuf epptr	R	std::basic_filebuf::epptr											
std basic filebuf gbump	R	std::basic_filebuf::gbump											
std basic filebuf getloc	R	std::basic_filebuf::getloc											
std basic filebuf gptr	R	std::basic_filebuf::gptr											
std basic filebuf in avail	R	std::basic_filebuf::in_avail											
std basic filebuf is open	R	std::basic_filebuf::is_open											
std basic filebuf open	R	std::basic_filebuf::open											
std basic filebuf pbase	R	std::basic_filebuf::pbase											
std basic filebuf pbump	R	std::basic_filebuf::pbump											
std basic filebuf pptr	R	std::basic_filebuf::pptr											
std basic filebuf pubimbue	R	std::basic_filebuf::pubimbue											
std basic filebuf pubseekoff	R	std::basic_filebuf::pubseekoff											
std basic filebuf pubseekpos	R	std::basic_filebuf::pubseekpos											
std basic filebuf pubsetbuf	R	std::basic_filebuf::pubsetbuf											
std basic filebuf pubsync	R	std::basic_filebuf::pubsync											
std basic filebuf sbumpc	R	std::basic_filebuf::sbumpc											
std basic filebuf setg	R	std::basic_filebuf::setg											
std basic filebuf setp	R	std::basic_filebuf::setp											
std basic filebuf sgetc	R	std::basic_filebuf::sgetc											
std basic filebuf sgetn	R	std::basic_filebuf::sgetn											
std basic filebuf snextc	R	std::basic_filebuf::snextc											
std basic filebuf sputbackc	R	std::basic_filebuf::sputbackc											
std basic filebuf sputc	R	std::basic_filebuf::sputc											
std basic filebuf sputn	R	std::basic_filebuf::sputn											
std basic filebuf sungetc	R	std::basic_filebuf::sungetc											
std basic filebuf xsgetn	R	std::basic_filebuf::xsgetn											
std basic filebuf xsputn	R	std::basic_filebuf::xsputn											
std basic fstream	R	std::basic_fstream											
std basic fstream Init	R	std::basic_fstream::Init											
std basic fstream bad	R	std::basic_fstream::bad											
std basic fstream clear	R	std::basic_fstream::clear											
std basic fstream close	R	std::basic_fstream::close											
std basic fstream constructor	R	std::basic_fstream::basic_fstream											
std basic fstream copyfmt	R	std::basic_fstream::copyfmt											
std basic fstream eof	R	std::basic_fstream::eof											
std basic fstream exceptions	R	std::basic_fstream::exceptions											
std basic fstream fail	R	std::basic_fstream::fail											
std basic fstream failure	R	std::basic_fstream::failure											
std basic fstream failure what	R	std::basic_fstream::failure::what											
std basic fstream fill	R	std::basic_fstream::fill											
std basic fstream flags	R	std::basic_fstream::flags											
std basic fstream flush	R	std::basic_fstream::flush											
std basic fstream gcount	R	std::basic_fstream::gcount											
std basic fstream get	R	std::basic_fstream::get											
std basic fstream getline	R	std::basic_fstream::getline											
std basic fstream getloc	R	std::basic_fstream::getloc											
std basic fstream good	R	std::basic_fstream::good											
std basic fstream ignore	R	std::basic_fstream::ignore											
std basic fstream init	R	std::basic_fstream::init											
std basic fstream is open	R	std::basic_fstream::is_open											
std basic fstream iword	R	std::basic_fstream::iword											
std basic fstream move	R	std::basic_fstream::move											
std basic fstream narrow	R	std::basic_fstream::narrow											
std basic fstream open	R	std::basic_fstream::open											
std basic fstream peek	R	std::basic_fstream::peek											
std basic fstream precision	R	std::basic_fstream::precision											
std basic fstream put	R	std::basic_fstream::put											
std basic fstream putback	R	std::basic_fstream::putback											
std basic fstream pword	R	std::basic_fstream::pword											
std basic fstream rdstate	R	std::basic_fstream::rdstate											
std basic fstream read	R	std::basic_fstream::read											
std basic fstream readsome	R	std::basic_fstream::readsome											
std basic fstream register callback	R	std::basic_fstream::register_callback											
std basic fstream seekg	R	std::basic_fstream::seekg											
std basic fstream seekp	R	std::basic_fstream::seekp											
std basic fstream set rdbuf	R	std::basic_fstream::set_rdbuf											
std basic fstream setf	R	std::basic_fstream::setf											
std basic fstream setstate	R	std::basic_fstream::setstate											
std basic fstream sync	R	std::basic_fstream::sync											
std basic fstream sync with stdio	R	std::basic_fstream::sync_with_stdio											
std basic fstream tellg	R	std::basic_fstream::tellg											
std basic fstream tellp	R	std::basic_fstream::tellp											
std basic fstream tie	R	std::basic_fstream::tie											
std basic fstream unget	R	std::basic_fstream::unget											
std basic fstream unsetf	R	std::basic_fstream::unsetf											
std basic fstream widen	R	std::basic_fstream::widen											
std basic fstream width	R	std::basic_fstream::width											
std basic fstream write	R	std::basic_fstream::write											
std basic fstream xalloc	R	std::basic_fstream::xalloc											
std basic ifstream	R	std::basic_ifstream											
std basic ifstream Init	R	std::basic_ifstream::Init											
std basic ifstream bad	R	std::basic_ifstream::bad											
std basic ifstream clear	R	std::basic_ifstream::clear											
std basic ifstream close	R	std::basic_ifstream::close											
std basic ifstream constructor	R	std::basic_ifstream::basic_ifstream											
std basic ifstream copyfmt	R	std::basic_ifstream::copyfmt											
std basic ifstream eof	R	std::basic_ifstream::eof											
std basic ifstream exceptions	R	std::basic_ifstream::exceptions											
std basic ifstream fail	R	std::basic_ifstream::fail											
std basic ifstream failure	R	std::basic_ifstream::failure											
std basic ifstream failure what	R	std::basic_ifstream::failure::what											
std basic ifstream fill	R	std::basic_ifstream::fill											
std basic ifstream flags	R	std::basic_ifstream::flags											
std basic ifstream gcount	R	std::basic_ifstream::gcount											
std basic ifstream get	R	std::basic_ifstream::get											
std basic ifstream getline	R	std::basic_ifstream::getline											
std basic ifstream getloc	R	std::basic_ifstream::getloc											
std basic ifstream good	R	std::basic_ifstream::good											
std basic ifstream ignore	R	std::basic_ifstream::ignore											
std basic ifstream init	R	std::basic_ifstream::init											
std basic ifstream is open	R	std::basic_ifstream::is_open											
std basic ifstream iword	R	std::basic_ifstream::iword											
std basic ifstream move	R	std::basic_ifstream::move											
std basic ifstream narrow	R	std::basic_ifstream::narrow											
std basic ifstream open	R	std::basic_ifstream::open											
std basic ifstream peek	R	std::basic_ifstream::peek											
std basic ifstream precision	R	std::basic_ifstream::precision											
std basic ifstream putback	R	std::basic_ifstream::putback											
std basic ifstream pword	R	std::basic_ifstream::pword											
std basic ifstream rdstate	R	std::basic_ifstream::rdstate											
std basic ifstream read	R	std::basic_ifstream::read											
std basic ifstream readsome	R	std::basic_ifstream::readsome											
std basic ifstream register callback	R	std::basic_ifstream::register_callback											
std basic ifstream seekg	R	std::basic_ifstream::seekg											
std basic ifstream sentry	R	std::basic_ifstream::sentry											
std basic ifstream set rdbuf	R	std::basic_ifstream::set_rdbuf											
std basic ifstream setf	R	std::basic_ifstream::setf											
std basic ifstream setstate	R	std::basic_ifstream::setstate											
std basic ifstream sync	R	std::basic_ifstream::sync											
std basic ifstream sync with stdio	R	std::basic_ifstream::sync_with_stdio											
std basic ifstream tellg	R	std::basic_ifstream::tellg											
std basic ifstream tie	R	std::basic_ifstream::tie											
std basic ifstream unget	R	std::basic_ifstream::unget											
std basic ifstream unsetf	R	std::basic_ifstream::unsetf											
std basic ifstream widen	R	std::basic_ifstream::widen											
std basic ifstream width	R	std::basic_ifstream::width											
std basic ifstream xalloc	R	std::basic_ifstream::xalloc											
std basic ios	R	std::basic_ios											
std basic ios Init	R	std::basic_ios::Init											
std basic ios bad	R	std::basic_ios::bad											
std basic ios clear	R	std::basic_ios::clear											
std basic ios constructor	R	std::basic_ios::basic_ios											
std basic ios copyfmt	R	std::basic_ios::copyfmt											
std basic ios destructor	R	std::basic_ios::~basic_ios											
std basic ios eof	R	std::basic_ios::eof											
std basic ios exceptions	R	std::basic_ios::exceptions											
std basic ios fail	R	std::basic_ios::fail											
std basic ios failure	R	std::basic_ios::failure											
std basic ios failure what	R	std::basic_ios::failure::what											
std basic ios fill	R	std::basic_ios::fill											
std basic ios flags	R	std::basic_ios::flags											
std basic ios getloc	R	std::basic_ios::getloc											
std basic ios good	R	std::basic_ios::good											
std basic ios init	R	std::basic_ios::init											
std basic ios iword	R	std::basic_ios::iword											
std basic ios move	R	std::basic_ios::move											
std basic ios narrow	R	std::basic_ios::narrow											
std basic ios precision	R	std::basic_ios::precision											
std basic ios pword	R	std::basic_ios::pword											
std basic ios rdbuf	R	std::basic_ios::rdbuf											
std basic ios rdstate	R	std::basic_ios::rdstate											
std basic ios register callback	R	std::basic_ios::register_callback											
std basic ios set rdbuf	R	std::basic_ios::set_rdbuf											
std basic ios setf	R	std::basic_ios::setf											
std basic ios setstate	R	std::basic_ios::setstate											
std basic ios swap	R	std::basic_ios::swap											
std basic ios sync with stdio	R	std::basic_ios::sync_with_stdio											
std basic ios tie	R	std::basic_ios::tie											
std basic ios unsetf	R	std::basic_ios::unsetf											
std basic ios widen	R	std::basic_ios::widen											
std basic ios width	R	std::basic_ios::width											
std basic ios xalloc	R	std::basic_ios::xalloc											
std basic iostream	R	std::basic_iostream											
std basic iostream Init	R	std::basic_iostream::Init											
std basic iostream bad	R	std::basic_iostream::bad											
std basic iostream clear	R	std::basic_iostream::clear											
std basic iostream constructor	R	std::basic_iostream::basic_iostream											
std basic iostream copyfmt	R	std::basic_iostream::copyfmt											
std basic iostream destructor	R	std::basic_iostream::~basic_iostream											
std basic iostream eof	R	std::basic_iostream::eof											
std basic iostream exceptions	R	std::basic_iostream::exceptions											
std basic iostream fail	R	std::basic_iostream::fail											
std basic iostream failure	R	std::basic_iostream::failure											
std basic iostream failure what	R	std::basic_iostream::failure::what											
std basic iostream fill	R	std::basic_iostream::fill											
std basic iostream flags	R	std::basic_iostream::flags											
std basic iostream flush	R	std::basic_iostream::flush											
std basic iostream gcount	R	std::basic_iostream::gcount											
std basic iostream get	R	std::basic_iostream::get											
std basic iostream getline	R	std::basic_iostream::getline											
std basic iostream getloc	R	std::basic_iostream::getloc											
std basic iostream good	R	std::basic_iostream::good											
std basic iostream ignore	R	std::basic_iostream::ignore											
std basic iostream init	R	std::basic_iostream::init											
std basic iostream iword	R	std::basic_iostream::iword											
std basic iostream move	R	std::basic_iostream::move											
std basic iostream narrow	R	std::basic_iostream::narrow											
std basic iostream peek	R	std::basic_iostream::peek											
std basic iostream precision	R	std::basic_iostream::precision											
std basic iostream put	R	std::basic_iostream::put											
std basic iostream putback	R	std::basic_iostream::putback											
std basic iostream pword	R	std::basic_iostream::pword											
std basic iostream rdbuf	R	std::basic_iostream::rdbuf											
std basic iostream rdstate	R	std::basic_iostream::rdstate											
std basic iostream read	R	std::basic_iostream::read											
std basic iostream readsome	R	std::basic_iostream::readsome											
std basic iostream register callback	R	std::basic_iostream::register_callback											
std basic iostream seekg	R	std::basic_iostream::seekg											
std basic iostream seekp	R	std::basic_iostream::seekp											
std basic iostream set rdbuf	R	std::basic_iostream::set_rdbuf											
std basic iostream setf	R	std::basic_iostream::setf											
std basic iostream setstate	R	std::basic_iostream::setstate											
std basic iostream swap	R	std::basic_iostream::swap											
std basic iostream sync	R	std::basic_iostream::sync											
std basic iostream sync with stdio	R	std::basic_iostream::sync_with_stdio											
std basic iostream tellg	R	std::basic_iostream::tellg											
std basic iostream tellp	R	std::basic_iostream::tellp											
std basic iostream tie	R	std::basic_iostream::tie											
std basic iostream unget	R	std::basic_iostream::unget											
std basic iostream unsetf	R	std::basic_iostream::unsetf											
std basic iostream widen	R	std::basic_iostream::widen											
std basic iostream width	R	std::basic_iostream::width											
std basic iostream write	R	std::basic_iostream::write											
std basic iostream xalloc	R	std::basic_iostream::xalloc											
std basic istream	R	std::basic_istream											
std basic istream Init	R	std::basic_istream::Init											
std basic istream bad	R	std::basic_istream::bad											
std basic istream clear	R	std::basic_istream::clear											
std basic istream constructor	R	std::basic_istream::basic_istream											
std basic istream copyfmt	R	std::basic_istream::copyfmt											
std basic istream destructor	R	std::basic_istream::~basic_istream											
std basic istream eof	R	std::basic_istream::eof											
std basic istream exceptions	R	std::basic_istream::exceptions											
std basic istream fail	R	std::basic_istream::fail											
std basic istream failure	R	std::basic_istream::failure											
std basic istream failure what	R	std::basic_istream::failure::what											
std basic istream fill	R	std::basic_istream::fill											
std basic istream flags	R	std::basic_istream::flags											
std basic istream gcount	R	std::basic_istream::gcount											
std basic istream get	R	std::basic_istream::get											
std basic istream getline	R	std::basic_istream::getline											
std basic istream getloc	R	std::basic_istream::getloc											
std basic istream good	R	std::basic_istream::good											
std basic istream ignore	R	std::basic_istream::ignore											
std basic istream init	R	std::basic_istream::init											
std basic istream iword	R	std::basic_istream::iword											
std basic istream move	R	std::basic_istream::move											
std basic istream narrow	R	std::basic_istream::narrow											
std basic istream peek	R	std::basic_istream::peek											
std basic istream precision	R	std::basic_istream::precision											
std basic istream putback	R	std::basic_istream::putback											
std basic istream pword	R	std::basic_istream::pword											
std basic istream rdbuf	R	std::basic_istream::rdbuf											
std basic istream rdstate	R	std::basic_istream::rdstate											
std basic istream read	R	std::basic_istream::read											
std basic istream readsome	R	std::basic_istream::readsome											
std basic istream register callback	R	std::basic_istream::register_callback											
std basic istream seekg	R	std::basic_istream::seekg											
std basic istream sentry	R	std::basic_istream::sentry											
std basic istream set rdbuf	R	std::basic_istream::set_rdbuf											
std basic istream setf	R	std::basic_istream::setf											
std basic istream setstate	R	std::basic_istream::setstate											
std basic istream swap	R	std::basic_istream::swap											
std basic istream sync	R	std::basic_istream::sync											
std basic istream sync with stdio	R	std::basic_istream::sync_with_stdio											
std basic istream tellg	R	std::basic_istream::tellg											
std basic istream tie	R	std::basic_istream::tie											
std basic istream unget	R	std::basic_istream::unget											
std basic istream unsetf	R	std::basic_istream::unsetf											
std basic istream widen	R	std::basic_istream::widen											
std basic istream width	R	std::basic_istream::width											
std basic istream xalloc	R	std::basic_istream::xalloc											
std basic istringstream	R	std::basic_istringstream											
std basic istringstream Init	R	std::basic_istringstream::Init											
std basic istringstream bad	R	std::basic_istringstream::bad											
std basic istringstream clear	R	std::basic_istringstream::clear											
std basic istringstream constructor	R	std::basic_istringstream::basic_istringstream											
std basic istringstream copyfmt	R	std::basic_istringstream::copyfmt											
std basic istringstream eof	R	std::basic_istringstream::eof											
std basic istringstream exceptions	R	std::basic_istringstream::exceptions											
std basic istringstream fail	R	std::basic_istringstream::fail											
std basic istringstream failure	R	std::basic_istringstream::failure											
std basic istringstream failure what	R	std::basic_istringstream::failure::what											
std basic istringstream fill	R	std::basic_istringstream::fill											
std basic istringstream flags	R	std::basic_istringstream::flags											
std basic istringstream gcount	R	std::basic_istringstream::gcount											
std basic istringstream get	R	std::basic_istringstream::get											
std basic istringstream getline	R	std::basic_istringstream::getline											
std basic istringstream getloc	R	std::basic_istringstream::getloc											
std basic istringstream good	R	std::basic_istringstream::good											
std basic istringstream ignore	R	std::basic_istringstream::ignore											
std basic istringstream init	R	std::basic_istringstream::init											
std basic istringstream iword	R	std::basic_istringstream::iword											
std basic istringstream move	R	std::basic_istringstream::move											
std basic istringstream narrow	R	std::basic_istringstream::narrow											
std basic istringstream peek	R	std::basic_istringstream::peek											
std basic istringstream precision	R	std::basic_istringstream::precision											
std basic istringstream putback	R	std::basic_istringstream::putback											
std basic istringstream pword	R	std::basic_istringstream::pword											
std basic istringstream rdstate	R	std::basic_istringstream::rdstate											
std basic istringstream read	R	std::basic_istringstream::read											
std basic istringstream readsome	R	std::basic_istringstream::readsome											
std basic istringstream register callback	R	std::basic_istringstream::register_callback											
std basic istringstream seekg	R	std::basic_istringstream::seekg											
std basic istringstream sentry	R	std::basic_istringstream::sentry											
std basic istringstream set rdbuf	R	std::basic_istringstream::set_rdbuf											
std basic istringstream setf	R	std::basic_istringstream::setf											
std basic istringstream setstate	R	std::basic_istringstream::setstate											
std basic istringstream str	R	std::basic_istringstream::str											
std basic istringstream sync	R	std::basic_istringstream::sync											
std basic istringstream sync with stdio	R	std::basic_istringstream::sync_with_stdio											
std basic istringstream tellg	R	std::basic_istringstream::tellg											
std basic istringstream tie	R	std::basic_istringstream::tie											
std basic istringstream unget	R	std::basic_istringstream::unget											
std basic istringstream unsetf	R	std::basic_istringstream::unsetf											
std basic istringstream widen	R	std::basic_istringstream::widen											
std basic istringstream width	R	std::basic_istringstream::width											
std basic istringstream xalloc	R	std::basic_istringstream::xalloc											
std basic ofstream	R	std::basic_ofstream											
std basic ofstream Init	R	std::basic_ofstream::Init											
std basic ofstream bad	R	std::basic_ofstream::bad											
std basic ofstream clear	R	std::basic_ofstream::clear											
std basic ofstream close	R	std::basic_ofstream::close											
std basic ofstream constructor	R	std::basic_ofstream::basic_ofstream											
std basic ofstream copyfmt	R	std::basic_ofstream::copyfmt											
std basic ofstream eof	R	std::basic_ofstream::eof											
std basic ofstream exceptions	R	std::basic_ofstream::exceptions											
std basic ofstream fail	R	std::basic_ofstream::fail											
std basic ofstream failure	R	std::basic_ofstream::failure											
std basic ofstream failure what	R	std::basic_ofstream::failure::what											
std basic ofstream fill	R	std::basic_ofstream::fill											
std basic ofstream flags	R	std::basic_ofstream::flags											
std basic ofstream flush	R	std::basic_ofstream::flush											
std basic ofstream getloc	R	std::basic_ofstream::getloc											
std basic ofstream good	R	std::basic_ofstream::good											
std basic ofstream init	R	std::basic_ofstream::init											
std basic ofstream is open	R	std::basic_ofstream::is_open											
std basic ofstream iword	R	std::basic_ofstream::iword											
std basic ofstream move	R	std::basic_ofstream::move											
std basic ofstream narrow	R	std::basic_ofstream::narrow											
std basic ofstream open	R	std::basic_ofstream::open											
std basic ofstream precision	R	std::basic_ofstream::precision											
std basic ofstream put	R	std::basic_ofstream::put											
std basic ofstream pword	R	std::basic_ofstream::pword											
std basic ofstream rdstate	R	std::basic_ofstream::rdstate											
std basic ofstream register callback	R	std::basic_ofstream::register_callback											
std basic ofstream seekp	R	std::basic_ofstream::seekp											
std basic ofstream sentry	R	std::basic_ofstream::sentry											
std basic ofstream set rdbuf	R	std::basic_ofstream::set_rdbuf											
std basic ofstream setf	R	std::basic_ofstream::setf											
std basic ofstream setstate	R	std::basic_ofstream::setstate											
std basic ofstream sync with stdio	R	std::basic_ofstream::sync_with_stdio											
std basic ofstream tellp	R	std::basic_ofstream::tellp											
std basic ofstream tie	R	std::basic_ofstream::tie											
std basic ofstream unsetf	R	std::basic_ofstream::unsetf											
std basic ofstream widen	R	std::basic_ofstream::widen											
std basic ofstream width	R	std::basic_ofstream::width											
std basic ofstream write	R	std::basic_ofstream::write											
std basic ofstream xalloc	R	std::basic_ofstream::xalloc											
std basic ostream	R	std::basic_ostream											
std basic ostream Init	R	std::basic_ostream::Init											
std basic ostream bad	R	std::basic_ostream::bad											
std basic ostream clear	R	std::basic_ostream::clear											
std basic ostream constructor	R	std::basic_ostream::basic_ostream											
std basic ostream copyfmt	R	std::basic_ostream::copyfmt											
std basic ostream destructor	R	std::basic_ostream::~basic_ostream											
std basic ostream eof	R	std::basic_ostream::eof											
std basic ostream exceptions	R	std::basic_ostream::exceptions											
std basic ostream fail	R	std::basic_ostream::fail											
std basic ostream failure	R	std::basic_ostream::failure											
std basic ostream failure what	R	std::basic_ostream::failure::what											
std basic ostream fill	R	std::basic_ostream::fill											
std basic ostream flags	R	std::basic_ostream::flags											
std basic ostream flush	R	std::basic_ostream::flush											
std basic ostream getloc	R	std::basic_ostream::getloc											
std basic ostream good	R	std::basic_ostream::good											
std basic ostream init	R	std::basic_ostream::init											
std basic ostream iword	R	std::basic_ostream::iword											
std basic ostream move	R	std::basic_ostream::move											
std basic ostream narrow	R	std::basic_ostream::narrow											
std basic ostream precision	R	std::basic_ostream::precision											
std basic ostream put	R	std::basic_ostream::put											
std basic ostream pword	R	std::basic_ostream::pword											
std basic ostream rdbuf	R	std::basic_ostream::rdbuf											
std basic ostream rdstate	R	std::basic_ostream::rdstate											
std basic ostream register callback	R	std::basic_ostream::register_callback											
std basic ostream seekp	R	std::basic_ostream::seekp											
std basic ostream sentry	R	std::basic_ostream::sentry											
std basic ostream set rdbuf	R	std::basic_ostream::set_rdbuf											
std basic ostream setf	R	std::basic_ostream::setf											
std basic ostream setstate	R	std::basic_ostream::setstate											
std basic ostream swap	R	std::basic_ostream::swap											
std basic ostream sync with stdio	R	std::basic_ostream::sync_with_stdio											
std basic ostream tellp	R	std::basic_ostream::tellp											
std basic ostream tie	R	std::basic_ostream::tie											
std basic ostream unsetf	R	std::basic_ostream::unsetf											
std basic ostream widen	R	std::basic_ostream::widen											
std basic ostream width	R	std::basic_ostream::width											
std basic ostream write	R	std::basic_ostream::write											
std basic ostream xalloc	R	std::basic_ostream::xalloc											
std basic ostringstream	R	std::basic_ostringstream											
std basic ostringstream Init	R	std::basic_ostringstream::Init											
std basic ostringstream bad	R	std::basic_ostringstream::bad											
std basic ostringstream clear	R	std::basic_ostringstream::clear											
std basic ostringstream constructor	R	std::basic_ostringstream::basic_ostringstream											
std basic ostringstream copyfmt	R	std::basic_ostringstream::copyfmt											
std basic ostringstream eof	R	std::basic_ostringstream::eof											
std basic ostringstream exceptions	R	std::basic_ostringstream::exceptions											
std basic ostringstream fail	R	std::basic_ostringstream::fail											
std basic ostringstream failure	R	std::basic_ostringstream::failure											
std basic ostringstream failure what	R	std::basic_ostringstream::failure::what											
std basic ostringstream fill	R	std::basic_ostringstream::fill											
std basic ostringstream flags	R	std::basic_ostringstream::flags											
std basic ostringstream flush	R	std::basic_ostringstream::flush											
std basic ostringstream getloc	R	std::basic_ostringstream::getloc											
std basic ostringstream good	R	std::basic_ostringstream::good											
std basic ostringstream init	R	std::basic_ostringstream::init											
std basic ostringstream iword	R	std::basic_ostringstream::iword											
std basic ostringstream move	R	std::basic_ostringstream::move											
std basic ostringstream narrow	R	std::basic_ostringstream::narrow											
std basic ostringstream precision	R	std::basic_ostringstream::precision											
std basic ostringstream put	R	std::basic_ostringstream::put											
std basic ostringstream pword	R	std::basic_ostringstream::pword											
std basic ostringstream rdstate	R	std::basic_ostringstream::rdstate											
std basic ostringstream register callback	R	std::basic_ostringstream::register_callback											
std basic ostringstream seekp	R	std::basic_ostringstream::seekp											
std basic ostringstream sentry	R	std::basic_ostringstream::sentry											
std basic ostringstream set rdbuf	R	std::basic_ostringstream::set_rdbuf											
std basic ostringstream setf	R	std::basic_ostringstream::setf											
std basic ostringstream setstate	R	std::basic_ostringstream::setstate											
std basic ostringstream str	R	std::basic_ostringstream::str											
std basic ostringstream sync with stdio	R	std::basic_ostringstream::sync_with_stdio											
std basic ostringstream tellp	R	std::basic_ostringstream::tellp											
std basic ostringstream tie	R	std::basic_ostringstream::tie											
std basic ostringstream unsetf	R	std::basic_ostringstream::unsetf											
std basic ostringstream widen	R	std::basic_ostringstream::widen											
std basic ostringstream width	R	std::basic_ostringstream::width											
std basic ostringstream write	R	std::basic_ostringstream::write											
std basic ostringstream xalloc	R	std::basic_ostringstream::xalloc											
std basic regex	R	std::basic_regex											
std basic regex assign	R	std::basic_regex::assign											
std basic regex constructor	R	std::basic_regex::basic_regex											
std basic regex flags	R	std::basic_regex::flags											
std basic regex getloc	R	std::basic_regex::getloc											
std basic regex imbue	R	std::basic_regex::imbue											
std basic regex mark count	R	std::basic_regex::mark_count											
std basic regex swap	R	std::basic_regex::swap											
std basic streambuf	R	std::basic_streambuf											
std basic streambuf destructor	R	std::basic_streambuf::~basic_streambuf											
std basic streambuf eback	R	std::basic_streambuf::eback											
std basic streambuf egptr	R	std::basic_streambuf::egptr											
std basic streambuf epptr	R	std::basic_streambuf::epptr											
std basic streambuf gbump	R	std::basic_streambuf::gbump											
std basic streambuf getloc	R	std::basic_streambuf::getloc											
std basic streambuf gptr	R	std::basic_streambuf::gptr											
std basic streambuf imbue	R	std::basic_streambuf::imbue											
std basic streambuf in avail	R	std::basic_streambuf::in_avail											
std basic streambuf overflow	R	std::basic_streambuf::overflow											
std basic streambuf pbackfail	R	std::basic_streambuf::pbackfail											
std basic streambuf pbase	R	std::basic_streambuf::pbase											
std basic streambuf pbump	R	std::basic_streambuf::pbump											
std basic streambuf pptr	R	std::basic_streambuf::pptr											
std basic streambuf pubimbue	R	std::basic_streambuf::pubimbue											
std basic streambuf pubseekoff	R	std::basic_streambuf::pubseekoff											
std basic streambuf pubseekpos	R	std::basic_streambuf::pubseekpos											
std basic streambuf pubsync	R	std::basic_streambuf::pubsync											
std basic streambuf sbumpc	R	std::basic_streambuf::sbumpc											
std basic streambuf seekoff	R	std::basic_streambuf::seekoff											
std basic streambuf seekpos	R	std::basic_streambuf::seekpos											
std basic streambuf setg	R	std::basic_streambuf::setg											
std basic streambuf setp	R	std::basic_streambuf::setp											
std basic streambuf sgetc	R	std::basic_streambuf::sgetc											
std basic streambuf showmanyc	R	std::basic_streambuf::showmanyc											
std basic streambuf snextc	R	std::basic_streambuf::snextc											
std basic streambuf sputbackc	R	std::basic_streambuf::sputbackc											
std basic streambuf sputc	R	std::basic_streambuf::sputc											
std basic streambuf sungetc	R	std::basic_streambuf::sungetc											
std basic streambuf swap	R	std::basic_streambuf::swap											
std basic streambuf sync	R	std::basic_streambuf::sync											
std basic streambuf uflow	R	std::basic_streambuf::uflow											
std basic streambuf underflow	R	std::basic_streambuf::underflow											
std basic string	R	std::basic_string											
std basic string append	R	std::basic_string::append											
std basic string assign	R	std::basic_string::assign											
std basic string at	R	std::basic_string::at											
std basic string back	R	std::basic_string::back											
std basic string begin	R	std::basic_string::begin											
std basic string c str	R	std::basic_string::c_str											
std basic string capacity	R	std::basic_string::capacity											
std basic string cbegin	R	std::basic_string::cbegin											
std basic string cend	R	std::basic_string::cend											
std basic string clear	R	std::basic_string::clear											
std basic string compare	R	std::basic_string::compare											
std basic string constructor	R	std::basic_string::basic_string											
std basic string copy	R	std::basic_string::copy											
std basic string crbegin	R	std::basic_string::crbegin											
std basic string crend	R	std::basic_string::crend											
std basic string data	R	std::basic_string::data											
std basic string empty	R	std::basic_string::empty											
std basic string end	R	std::basic_string::end											
std basic string erase	R	std::basic_string::erase											
std basic string find	R	std::basic_string::find											
std basic string find first not of	R	std::basic_string::find_first_not_of											
std basic string find first of	R	std::basic_string::find_first_of											
std basic string find last not of	R	std::basic_string::find_last_not_of											
std basic string find last of	R	std::basic_string::find_last_of											
std basic string front	R	std::basic_string::front											
std basic string get allocator	R	std::basic_string::get_allocator											
std basic string insert	R	std::basic_string::insert											
std basic string length	R	std::basic_string::length											
std basic string max size	R	std::basic_string::max_size											
std basic string pop back	R	std::basic_string::pop_back											
std basic string push back	R	std::basic_string::push_back											
std basic string rbegin	R	std::basic_string::rbegin											
std basic string rend	R	std::basic_string::rend											
std basic string replace	R	std::basic_string::replace											
std basic string reserve	R	std::basic_string::reserve											
std basic string resize	R	std::basic_string::resize											
std basic string rfind	R	std::basic_string::rfind											
std basic string shrink to fit	R	std::basic_string::shrink_to_fit											
std basic string size	R	std::basic_string::size											
std basic string substr	R	std::basic_string::substr											
std basic string swap	R	std::basic_string::swap											
std basic string view	R	std::basic_string_view											
std basic string view at	R	std::basic_string_view::at											
std basic string view back	R	std::basic_string_view::back											
std basic string view begin	R	std::basic_string_view::begin											
std basic string view cbegin	R	std::basic_string_view::cbegin											
std basic string view cend	R	std::basic_string_view::cend											
std basic string view compare	R	std::basic_string_view::compare											
std basic string view copy	R	std::basic_string_view::copy											
std basic string view crbegin	R	std::basic_string_view::crbegin											
std basic string view crend	R	std::basic_string_view::crend											
std basic string view data	R	std::basic_string_view::data											
std basic string view empty	R	std::basic_string_view::empty											
std basic string view end	R	std::basic_string_view::end											
std basic string view find	R	std::basic_string_view::find											
std basic string view find first not of	R	std::basic_string_view::find_first_not_of											
std basic string view find first of	R	std::basic_string_view::find_first_of											
std basic string view find last not of	R	std::basic_string_view::find_last_not_of											
std basic string view find last of	R	std::basic_string_view::find_last_of											
std basic string view front	R	std::basic_string_view::front											
std basic string view length	R	std::basic_string_view::length											
std basic string view max size	R	std::basic_string_view::max_size											
std basic string view rbegin	R	std::basic_string_view::rbegin											
std basic string view remove prefix	R	std::basic_string_view::remove_prefix											
std basic string view remove suffix	R	std::basic_string_view::remove_suffix											
std basic string view rend	R	std::basic_string_view::rend											
std basic string view rfind	R	std::basic_string_view::rfind											
std basic string view size	R	std::basic_string_view::size											
std basic string view substr	R	std::basic_string_view::substr											
std basic string view swap	R	std::basic_string_view::swap											
std basic stringbuf	R	std::basic_stringbuf											
std basic stringbuf eback	R	std::basic_stringbuf::eback											
std basic stringbuf egptr	R	std::basic_stringbuf::egptr											
std basic stringbuf epptr	R	std::basic_stringbuf::epptr											
std basic stringbuf gbump	R	std::basic_stringbuf::gbump											
std basic stringbuf getloc	R	std::basic_stringbuf::getloc											
std basic stringbuf gptr	R	std::basic_stringbuf::gptr											
std basic stringbuf imbue	R	std::basic_stringbuf::imbue											
std basic stringbuf in avail	R	std::basic_stringbuf::in_avail											
std basic stringbuf pbase	R	std::basic_stringbuf::pbase											
std basic stringbuf pbump	R	std::basic_stringbuf::pbump											
std basic stringbuf pptr	R	std::basic_stringbuf::pptr											
std basic stringbuf pubimbue	R	std::basic_stringbuf::pubimbue											
std basic stringbuf pubseekoff	R	std::basic_stringbuf::pubseekoff											
std basic stringbuf pubseekpos	R	std::basic_stringbuf::pubseekpos											
std basic stringbuf pubsync	R	std::basic_stringbuf::pubsync											
std basic stringbuf sbumpc	R	std::basic_stringbuf::sbumpc											
std basic stringbuf setbuf	R	std::basic_stringbuf::setbuf											
std basic stringbuf setg	R	std::basic_stringbuf::setg											
std basic stringbuf setp	R	std::basic_stringbuf::setp											
std basic stringbuf sgetc	R	std::basic_stringbuf::sgetc											
std basic stringbuf showmanyc	R	std::basic_stringbuf::showmanyc											
std basic stringbuf snextc	R	std::basic_stringbuf::snextc											
std basic stringbuf sputbackc	R	std::basic_stringbuf::sputbackc											
std basic stringbuf sputc	R	std::basic_stringbuf::sputc											
std basic stringbuf str	R	std::basic_stringbuf::str											
std basic stringbuf sungetc	R	std::basic_stringbuf::sungetc											
std basic stringbuf sync	R	std::basic_stringbuf::sync											
std basic stringbuf uflow	R	std::basic_stringbuf::uflow											
std basic stringstream	R	std::basic_stringstream											
std basic stringstream Init	R	std::basic_stringstream::Init											
std basic stringstream bad	R	std::basic_stringstream::bad											
std basic stringstream clear	R	std::basic_stringstream::clear											
std basic stringstream constructor	R	std::basic_stringstream::basic_stringstream											
std basic stringstream copyfmt	R	std::basic_stringstream::copyfmt											
std basic stringstream eof	R	std::basic_stringstream::eof											
std basic stringstream exceptions	R	std::basic_stringstream::exceptions											
std basic stringstream fail	R	std::basic_stringstream::fail											
std basic stringstream failure	R	std::basic_stringstream::failure											
std basic stringstream failure what	R	std::basic_stringstream::failure::what											
std basic stringstream fill	R	std::basic_stringstream::fill											
std basic stringstream flags	R	std::basic_stringstream::flags											
std basic stringstream flush	R	std::basic_stringstream::flush											
std basic stringstream gcount	R	std::basic_stringstream::gcount											
std basic stringstream get	R	std::basic_stringstream::get											
std basic stringstream getline	R	std::basic_stringstream::getline											
std basic stringstream getloc	R	std::basic_stringstream::getloc											
std basic stringstream good	R	std::basic_stringstream::good											
std basic stringstream ignore	R	std::basic_stringstream::ignore											
std basic stringstream init	R	std::basic_stringstream::init											
std basic stringstream iword	R	std::basic_stringstream::iword											
std basic stringstream move	R	std::basic_stringstream::move											
std basic stringstream narrow	R	std::basic_stringstream::narrow											
std basic stringstream peek	R	std::basic_stringstream::peek											
std basic stringstream precision	R	std::basic_stringstream::precision											
std basic stringstream put	R	std::basic_stringstream::put											
std basic stringstream putback	R	std::basic_stringstream::putback											
std basic stringstream pword	R	std::basic_stringstream::pword											
std basic stringstream rdstate	R	std::basic_stringstream::rdstate											
std basic stringstream read	R	std::basic_stringstream::read											
std basic stringstream readsome	R	std::basic_stringstream::readsome											
std basic stringstream register callback	R	std::basic_stringstream::register_callback											
std basic stringstream seekg	R	std::basic_stringstream::seekg											
std basic stringstream seekp	R	std::basic_stringstream::seekp											
std basic stringstream set rdbuf	R	std::basic_stringstream::set_rdbuf											
std basic stringstream setf	R	std::basic_stringstream::setf											
std basic stringstream setstate	R	std::basic_stringstream::setstate											
std basic stringstream str	R	std::basic_stringstream::str											
std basic stringstream sync	R	std::basic_stringstream::sync											
std basic stringstream sync with stdio	R	std::basic_stringstream::sync_with_stdio											
std basic stringstream tellg	R	std::basic_stringstream::tellg											
std basic stringstream tellp	R	std::basic_stringstream::tellp											
std basic stringstream tie	R	std::basic_stringstream::tie											
std basic stringstream unget	R	std::basic_stringstream::unget											
std basic stringstream unsetf	R	std::basic_stringstream::unsetf											
std basic stringstream widen	R	std::basic_stringstream::widen											
std basic stringstream width	R	std::basic_stringstream::width											
std basic stringstream write	R	std::basic_stringstream::write											
std basic stringstream xalloc	R	std::basic_stringstream::xalloc											
std basic_filebuf	R	std::basic_filebuf											
std basic_filebuf close	R	std::basic_filebuf::close											
std basic_filebuf constructor	R	std::basic_filebuf::basic_filebuf											
std basic_filebuf eback	R	std::basic_filebuf::eback											
std basic_filebuf egptr	R	std::basic_filebuf::egptr											
std basic_filebuf epptr	R	std::basic_filebuf::epptr											
std basic_filebuf gbump	R	std::basic_filebuf::gbump											
std basic_filebuf getloc	R	std::basic_filebuf::getloc											
std basic_filebuf gptr	R	std::basic_filebuf::gptr											
std basic_filebuf in_avail	R	std::basic_filebuf::in_avail											
std basic_filebuf is_open	R	std::basic_filebuf::is_open											
std basic_filebuf open	R	std::basic_filebuf::open											
std basic_filebuf pbase	R	std::basic_filebuf::pbase											
std basic_filebuf pbump	R	std::basic_filebuf::pbump											
std basic_filebuf pptr	R	std::basic_filebuf::pptr											
std basic_filebuf pubimbue	R	std::basic_filebuf::pubimbue											
std basic_filebuf pubseekoff	R	std::basic_filebuf::pubseekoff											
std basic_filebuf pubseekpos	R	std::basic_filebuf::pubseekpos											
std basic_filebuf pubsetbuf	R	std::basic_filebuf::pubsetbuf											
std basic_filebuf pubsync	R	std::basic_filebuf::pubsync											
std basic_filebuf sbumpc	R	std::basic_filebuf::sbumpc											
std basic_filebuf setg	R	std::basic_filebuf::setg											
std basic_filebuf setp	R	std::basic_filebuf::setp											
std basic_filebuf sgetc	R	std::basic_filebuf::sgetc											
std basic_filebuf sgetn	R	std::basic_filebuf::sgetn											
std basic_filebuf snextc	R	std::basic_filebuf::snextc											
std basic_filebuf sputbackc	R	std::basic_filebuf::sputbackc											
std basic_filebuf sputc	R	std::basic_filebuf::sputc											
std basic_filebuf sputn	R	std::basic_filebuf::sputn											
std basic_filebuf sungetc	R	std::basic_filebuf::sungetc											
std basic_filebuf xsgetn	R	std::basic_filebuf::xsgetn											
std basic_filebuf xsputn	R	std::basic_filebuf::xsputn											
std basic_fstream	R	std::basic_fstream											
std basic_fstream Init	R	std::basic_fstream::Init											
std basic_fstream bad	R	std::basic_fstream::bad											
std basic_fstream clear	R	std::basic_fstream::clear											
std basic_fstream close	R	std::basic_fstream::close											
std basic_fstream constructor	R	std::basic_fstream::basic_fstream											
std basic_fstream copyfmt	R	std::basic_fstream::copyfmt											
std basic_fstream eof	R	std::basic_fstream::eof											
std basic_fstream exceptions	R	std::basic_fstream::exceptions											
std basic_fstream fail	R	std::basic_fstream::fail											
std basic_fstream failure	R	std::basic_fstream::failure											
std basic_fstream failure what	R	std::basic_fstream::failure::what											
std basic_fstream fill	R	std::basic_fstream::fill											
std basic_fstream flags	R	std::basic_fstream::flags											
std basic_fstream flush	R	std::basic_fstream::flush											
std basic_fstream gcount	R	std::basic_fstream::gcount											
std basic_fstream get	R	std::basic_fstream::get											
std basic_fstream getline	R	std::basic_fstream::getline											
std basic_fstream getloc	R	std::basic_fstream::getloc											
std basic_fstream good	R	std::basic_fstream::good											
std basic_fstream ignore	R	std::basic_fstream::ignore											
std basic_fstream init	R	std::basic_fstream::init											
std basic_fstream is_open	R	std::basic_fstream::is_open											
std basic_fstream iword	R	std::basic_fstream::iword											
std basic_fstream move	R	std::basic_fstream::move											
std basic_fstream narrow	R	std::basic_fstream::narrow											
std basic_fstream open	R	std::basic_fstream::open											
std basic_fstream peek	R	std::basic_fstream::peek											
std basic_fstream precision	R	std::basic_fstream::precision											
std basic_fstream put	R	std::basic_fstream::put											
std basic_fstream putback	R	std::basic_fstream::putback											
std basic_fstream pword	R	std::basic_fstream::pword											
std basic_fstream rdstate	R	std::basic_fstream::rdstate											
std basic_fstream read	R	std::basic_fstream::read											
std basic_fstream readsome	R	std::basic_fstream::readsome											
std basic_fstream register_callback	R	std::basic_fstream::register_callback											
std basic_fstream seekg	R	std::basic_fstream::seekg											
std basic_fstream seekp	R	std::basic_fstream::seekp											
std basic_fstream set_rdbuf	R	std::basic_fstream::set_rdbuf											
std basic_fstream setf	R	std::basic_fstream::setf											
std basic_fstream setstate	R	std::basic_fstream::setstate											
std basic_fstream sync	R	std::basic_fstream::sync											
std basic_fstream sync_with_stdio	R	std::basic_fstream::sync_with_stdio											
std basic_fstream tellg	R	std::basic_fstream::tellg											
std basic_fstream tellp	R	std::basic_fstream::tellp											
std basic_fstream tie	R	std::basic_fstream::tie											
std basic_fstream unget	R	std::basic_fstream::unget											
std basic_fstream unsetf	R	std::basic_fstream::unsetf											
std basic_fstream widen	R	std::basic_fstream::widen											
std basic_fstream width	R	std::basic_fstream::width											
std basic_fstream write	R	std::basic_fstream::write											
std basic_fstream xalloc	R	std::basic_fstream::xalloc											
std basic_ifstream	R	std::basic_ifstream											
std basic_ifstream Init	R	std::basic_ifstream::Init											
std basic_ifstream bad	R	std::basic_ifstream::bad											
std basic_ifstream clear	R	std::basic_ifstream::clear											
std basic_ifstream close	R	std::basic_ifstream::close											
std basic_ifstream constructor	R	std::basic_ifstream::basic_ifstream											
std basic_ifstream copyfmt	R	std::basic_ifstream::copyfmt											
std basic_ifstream eof	R	std::basic_ifstream::eof											
std basic_ifstream exceptions	R	std::basic_ifstream::exceptions											
std basic_ifstream fail	R	std::basic_ifstream::fail											
std basic_ifstream failure	R	std::basic_ifstream::failure											
std basic_ifstream failure what	R	std::basic_ifstream::failure::what											
std basic_ifstream fill	R	std::basic_ifstream::fill											
std basic_ifstream flags	R	std::basic_ifstream::flags											
std basic_ifstream gcount	R	std::basic_ifstream::gcount											
std basic_ifstream get	R	std::basic_ifstream::get											
std basic_ifstream getline	R	std::basic_ifstream::getline											
std basic_ifstream getloc	R	std::basic_ifstream::getloc											
std basic_ifstream good	R	std::basic_ifstream::good											
std basic_ifstream ignore	R	std::basic_ifstream::ignore											
std basic_ifstream init	R	std::basic_ifstream::init											
std basic_ifstream is_open	R	std::basic_ifstream::is_open											
std basic_ifstream iword	R	std::basic_ifstream::iword											
std basic_ifstream move	R	std::basic_ifstream::move											
std basic_ifstream narrow	R	std::basic_ifstream::narrow											
std basic_ifstream open	R	std::basic_ifstream::open											
std basic_ifstream peek	R	std::basic_ifstream::peek											
std basic_ifstream precision	R	std::basic_ifstream::precision											
std basic_ifstream putback	R	std::basic_ifstream::putback											
std basic_ifstream pword	R	std::basic_ifstream::pword											
std basic_ifstream rdstate	R	std::basic_ifstream::rdstate											
std basic_ifstream read	R	std::basic_ifstream::read											
std basic_ifstream readsome	R	std::basic_ifstream::readsome											
std basic_ifstream register_callback	R	std::basic_ifstream::register_callback											
std basic_ifstream seekg	R	std::basic_ifstream::seekg											
std basic_ifstream sentry	R	std::basic_ifstream::sentry											
std basic_ifstream set_rdbuf	R	std::basic_ifstream::set_rdbuf											
std basic_ifstream setf	R	std::basic_ifstream::setf											
std basic_ifstream setstate	R	std::basic_ifstream::setstate											
std basic_ifstream sync	R	std::basic_ifstream::sync											
std basic_ifstream sync_with_stdio	R	std::basic_ifstream::sync_with_stdio											
std basic_ifstream tellg	R	std::basic_ifstream::tellg											
std basic_ifstream tie	R	std::basic_ifstream::tie											
std basic_ifstream unget	R	std::basic_ifstream::unget											
std basic_ifstream unsetf	R	std::basic_ifstream::unsetf											
std basic_ifstream widen	R	std::basic_ifstream::widen											
std basic_ifstream width	R	std::basic_ifstream::width											
std basic_ifstream xalloc	R	std::basic_ifstream::xalloc											
std basic_ios	R	std::basic_ios											
std basic_ios Init	R	std::basic_ios::Init											
std basic_ios bad	R	std::basic_ios::bad											
std basic_ios clear	R	std::basic_ios::clear											
std basic_ios constructor	R	std::basic_ios::basic_ios											
std basic_ios copyfmt	R	std::basic_ios::copyfmt											
std basic_ios destructor	R	std::basic_ios::~basic_ios											
std basic_ios eof	R	std::basic_ios::eof											
std basic_ios exceptions	R	std::basic_ios::exceptions											
std basic_ios fail	R	std::basic_ios::fail											
std basic_ios failure	R	std::basic_ios::failure											
std basic_ios failure what	R	std::basic_ios::failure::what											
std basic_ios fill	R	std::basic_ios::fill											
std basic_ios flags	R	std::basic_ios::flags											
std basic_ios getloc	R	std::basic_ios::getloc											
std basic_ios good	R	std::basic_ios::good											
std basic_ios init	R	std::basic_ios::init											
std basic_ios iword	R	std::basic_ios::iword											
std basic_ios move	R	std::basic_ios::move											
std basic_ios narrow	R	std::basic_ios::narrow											
std basic_ios precision	R	std::basic_ios::precision											
std basic_ios pword	R	std::basic_ios::pword											
std basic_ios rdbuf	R	std::basic_ios::rdbuf											
std basic_ios rdstate	R	std::basic_ios::rdstate											
std basic_ios register_callback	R	std::basic_ios::register_callback											
std basic_ios set_rdbuf	R	std::basic_ios::set_rdbuf											
std basic_ios setf	R	std::basic_ios::setf											
std basic_ios setstate	R	std::basic_ios::setstate											
std basic_ios swap	R	std::basic_ios::swap											
std basic_ios sync_with_stdio	R	std::basic_ios::sync_with_stdio											
std basic_ios tie	R	std::basic_ios::tie											
std basic_ios unsetf	R	std::basic_ios::unsetf											
std basic_ios widen	R	std::basic_ios::widen											
std basic_ios width	R	std::basic_ios::width											
std basic_ios xalloc	R	std::basic_ios::xalloc											
std basic_iostream	R	std::basic_iostream											
std basic_iostream Init	R	std::basic_iostream::Init											
std basic_iostream bad	R	std::basic_iostream::bad											
std basic_iostream clear	R	std::basic_iostream::clear											
std basic_iostream constructor	R	std::basic_iostream::basic_iostream											
std basic_iostream copyfmt	R	std::basic_iostream::copyfmt											
std basic_iostream destructor	R	std::basic_iostream::~basic_iostream											
std basic_iostream eof	R	std::basic_iostream::eof											
std basic_iostream exceptions	R	std::basic_iostream::exceptions											
std basic_iostream fail	R	std::basic_iostream::fail											
std basic_iostream failure	R	std::basic_iostream::failure											
std basic_iostream failure what	R	std::basic_iostream::failure::what											
std basic_iostream fill	R	std::basic_iostream::fill											
std basic_iostream flags	R	std::basic_iostream::flags											
std basic_iostream flush	R	std::basic_iostream::flush											
std basic_iostream gcount	R	std::basic_iostream::gcount											
std basic_iostream get	R	std::basic_iostream::get											
std basic_iostream getline	R	std::basic_iostream::getline											
std basic_iostream getloc	R	std::basic_iostream::getloc											
std basic_iostream good	R	std::basic_iostream::good											
std basic_iostream ignore	R	std::basic_iostream::ignore											
std basic_iostream init	R	std::basic_iostream::init											
std basic_iostream iword	R	std::basic_iostream::iword											
std basic_iostream move	R	std::basic_iostream::move											
std basic_iostream narrow	R	std::basic_iostream::narrow											
std basic_iostream peek	R	std::basic_iostream::peek											
std basic_iostream precision	R	std::basic_iostream::precision											
std basic_iostream put	R	std::basic_iostream::put											
std basic_iostream putback	R	std::basic_iostream::putback											
std basic_iostream pword	R	std::basic_iostream::pword											
std basic_iostream rdbuf	R	std::basic_iostream::rdbuf											
std basic_iostream rdstate	R	std::basic_iostream::rdstate											
std basic_iostream read	R	std::basic_iostream::read											
std basic_iostream readsome	R	std::basic_iostream::readsome											
std basic_iostream register_callback	R	std::basic_iostream::register_callback											
std basic_iostream seekg	R	std::basic_iostream::seekg											
std basic_iostream seekp	R	std::basic_iostream::seekp											
std basic_iostream set_rdbuf	R	std::basic_iostream::set_rdbuf											
std basic_iostream setf	R	std::basic_iostream::setf											
std basic_iostream setstate	R	std::basic_iostream::setstate											
std basic_iostream swap	R	std::basic_iostream::swap											
std basic_iostream sync	R	std::basic_iostream::sync											
std basic_iostream sync_with_stdio	R	std::basic_iostream::sync_with_stdio											
std basic_iostream tellg	R	std::basic_iostream::tellg											
std basic_iostream tellp	R	std::basic_iostream::tellp											
std basic_iostream tie	R	std::basic_iostream::tie											
std basic_iostream unget	R	std::basic_iostream::unget											
std basic_iostream unsetf	R	std::basic_iostream::unsetf											
std basic_iostream widen	R	std::basic_iostream::widen											
std basic_iostream width	R	std::basic_iostream::width											
std basic_iostream write	R	std::basic_iostream::write											
std basic_iostream xalloc	R	std::basic_iostream::xalloc											
std basic_istream	R	std::basic_istream											
std basic_istream Init	R	std::basic_istream::Init											
std basic_istream bad	R	std::basic_istream::bad											
std basic_istream clear	R	std::basic_istream::clear											
std basic_istream constructor	R	std::basic_istream::basic_istream											
std basic_istream copyfmt	R	std::basic_istream::copyfmt											
std basic_istream destructor	R	std::basic_istream::~basic_istream											
std basic_istream eof	R	std::basic_istream::eof											
std basic_istream exceptions	R	std::basic_istream::exceptions											
std basic_istream fail	R	std::basic_istream::fail											
std basic_istream failure	R	std::basic_istream::failure											
std basic_istream failure what	R	std::basic_istream::failure::what											
std basic_istream fill	R	std::basic_istream::fill											
std basic_istream flags	R	std::basic_istream::flags											
std basic_istream gcount	R	std::basic_istream::gcount											
std basic_istream get	R	std::basic_istream::get											
std basic_istream getline	R	std::basic_istream::getline											
std basic_istream getloc	R	std::basic_istream::getloc											
std basic_istream good	R	std::basic_istream::good											
std basic_istream ignore	R	std::basic_istream::ignore											
std basic_istream init	R	std::basic_istream::init											
std basic_istream iword	R	std::basic_istream::iword											
std basic_istream move	R	std::basic_istream::move											
std basic_istream narrow	R	std::basic_istream::narrow											
std basic_istream peek	R	std::basic_istream::peek											
std basic_istream precision	R	std::basic_istream::precision											
std basic_istream putback	R	std::basic_istream::putback											
std basic_istream pword	R	std::basic_istream::pword											
std basic_istream rdbuf	R	std::basic_istream::rdbuf											
std basic_istream rdstate	R	std::basic_istream::rdstate											
std basic_istream read	R	std::basic_istream::read											
std basic_istream readsome	R	std::basic_istream::readsome											
std basic_istream register_callback	R	std::basic_istream::register_callback											
std basic_istream seekg	R	std::basic_istream::seekg											
std basic_istream sentry	R	std::basic_istream::sentry											
std basic_istream set_rdbuf	R	std::basic_istream::set_rdbuf											
std basic_istream setf	R	std::basic_istream::setf											
std basic_istream setstate	R	std::basic_istream::setstate											
std basic_istream swap	R	std::basic_istream::swap											
std basic_istream sync	R	std::basic_istream::sync											
std basic_istream sync_with_stdio	R	std::basic_istream::sync_with_stdio											
std basic_istream tellg	R	std::basic_istream::tellg											
std basic_istream tie	R	std::basic_istream::tie											
std basic_istream unget	R	std::basic_istream::unget											
std basic_istream unsetf	R	std::basic_istream::unsetf											
std basic_istream widen	R	std::basic_istream::widen											
std basic_istream width	R	std::basic_istream::width											
std basic_istream xalloc	R	std::basic_istream::xalloc											
std basic_istringstream	R	std::basic_istringstream											
std basic_istringstream Init	R	std::basic_istringstream::Init											
std basic_istringstream bad	R	std::basic_istringstream::bad											
std basic_istringstream clear	R	std::basic_istringstream::clear											
std basic_istringstream constructor	R	std::basic_istringstream::basic_istringstream											
std basic_istringstream copyfmt	R	std::basic_istringstream::copyfmt											
std basic_istringstream eof	R	std::basic_istringstream::eof											
std basic_istringstream exceptions	R	std::basic_istringstream::exceptions											
std basic_istringstream fail	R	std::basic_istringstream::fail											
std basic_istringstream failure	R	std::basic_istringstream::failure											
std basic_istringstream failure what	R	std::basic_istringstream::failure::what											
std basic_istringstream fill	R	std::basic_istringstream::fill											
std basic_istringstream flags	R	std::basic_istringstream::flags											
std basic_istringstream gcount	R	std::basic_istringstream::gcount											
std basic_istringstream get	R	std::basic_istringstream::get											
std basic_istringstream getline	R	std::basic_istringstream::getline											
std basic_istringstream getloc	R	std::basic_istringstream::getloc											
std basic_istringstream good	R	std::basic_istringstream::good											
std basic_istringstream ignore	R	std::basic_istringstream::ignore											
std basic_istringstream init	R	std::basic_istringstream::init											
std basic_istringstream iword	R	std::basic_istringstream::iword											
std basic_istringstream move	R	std::basic_istringstream::move											
std basic_istringstream narrow	R	std::basic_istringstream::narrow											
std basic_istringstream peek	R	std::basic_istringstream::peek											
std basic_istringstream precision	R	std::basic_istringstream::precision											
std basic_istringstream putback	R	std::basic_istringstream::putback											
std basic_istringstream pword	R	std::basic_istringstream::pword											
std basic_istringstream rdstate	R	std::basic_istringstream::rdstate											
std basic_istringstream read	R	std::basic_istringstream::read											
std basic_istringstream readsome	R	std::basic_istringstream::readsome											
std basic_istringstream register_callback	R	std::basic_istringstream::register_callback											
std basic_istringstream seekg	R	std::basic_istringstream::seekg											
std basic_istringstream sentry	R	std::basic_istringstream::sentry											
std basic_istringstream set_rdbuf	R	std::basic_istringstream::set_rdbuf											
std basic_istringstream setf	R	std::basic_istringstream::setf											
std basic_istringstream setstate	R	std::basic_istringstream::setstate											
std basic_istringstream str	R	std::basic_istringstream::str											
std basic_istringstream sync	R	std::basic_istringstream::sync											
std basic_istringstream sync_with_stdio	R	std::basic_istringstream::sync_with_stdio											
std basic_istringstream tellg	R	std::basic_istringstream::tellg											
std basic_istringstream tie	R	std::basic_istringstream::tie											
std basic_istringstream unget	R	std::basic_istringstream::unget											
std basic_istringstream unsetf	R	std::basic_istringstream::unsetf											
std basic_istringstream widen	R	std::basic_istringstream::widen											
std basic_istringstream width	R	std::basic_istringstream::width											
std basic_istringstream xalloc	R	std::basic_istringstream::xalloc											
std basic_ofstream	R	std::basic_ofstream											
std basic_ofstream Init	R	std::basic_ofstream::Init											
std basic_ofstream bad	R	std::basic_ofstream::bad											
std basic_ofstream clear	R	std::basic_ofstream::clear											
std basic_ofstream close	R	std::basic_ofstream::close											
std basic_ofstream constructor	R	std::basic_ofstream::basic_ofstream											
std basic_ofstream copyfmt	R	std::basic_ofstream::copyfmt											
std basic_ofstream eof	R	std::basic_ofstream::eof											
std basic_ofstream exceptions	R	std::basic_ofstream::exceptions											
std basic_ofstream fail	R	std::basic_ofstream::fail											
std basic_ofstream failure	R	std::basic_ofstream::failure											
std basic_ofstream failure what	R	std::basic_ofstream::failure::what											
std basic_ofstream fill	R	std::basic_ofstream::fill											
std basic_ofstream flags	R	std::basic_ofstream::flags											
std basic_ofstream flush	R	std::basic_ofstream::flush											
std basic_ofstream getloc	R	std::basic_ofstream::getloc											
std basic_ofstream good	R	std::basic_ofstream::good											
std basic_ofstream init	R	std::basic_ofstream::init											
std basic_ofstream is_open	R	std::basic_ofstream::is_open											
std basic_ofstream iword	R	std::basic_ofstream::iword											
std basic_ofstream move	R	std::basic_ofstream::move											
std basic_ofstream narrow	R	std::basic_ofstream::narrow											
std basic_ofstream open	R	std::basic_ofstream::open											
std basic_ofstream precision	R	std::basic_ofstream::precision											
std basic_ofstream put	R	std::basic_ofstream::put											
std basic_ofstream pword	R	std::basic_ofstream::pword											
std basic_ofstream rdstate	R	std::basic_ofstream::rdstate											
std basic_ofstream register_callback	R	std::basic_ofstream::register_callback											
std basic_ofstream seekp	R	std::basic_ofstream::seekp											
std basic_ofstream sentry	R	std::basic_ofstream::sentry											
std basic_ofstream set_rdbuf	R	std::basic_ofstream::set_rdbuf											
std basic_ofstream setf	R	std::basic_ofstream::setf											
std basic_ofstream setstate	R	std::basic_ofstream::setstate											
std basic_ofstream sync_with_stdio	R	std::basic_ofstream::sync_with_stdio											
std basic_ofstream tellp	R	std::basic_ofstream::tellp											
std basic_ofstream tie	R	std::basic_ofstream::tie											
std basic_ofstream unsetf	R	std::basic_ofstream::unsetf											
std basic_ofstream widen	R	std::basic_ofstream::widen											
std basic_ofstream width	R	std::basic_ofstream::width											
std basic_ofstream write	R	std::basic_ofstream::write											
std basic_ofstream xalloc	R	std::basic_ofstream::xalloc											
std basic_ostream	R	std::basic_ostream											
std basic_ostream Init	R	std::basic_ostream::Init											
std basic_ostream bad	R	std::basic_ostream::bad											
std basic_ostream clear	R	std::basic_ostream::clear											
std basic_ostream constructor	R	std::basic_ostream::basic_ostream											
std basic_ostream copyfmt	R	std::basic_ostream::copyfmt											
std basic_ostream destructor	R	std::basic_ostream::~basic_ostream											
std basic_ostream eof	R	std::basic_ostream::eof											
std basic_ostream exceptions	R	std::basic_ostream::exceptions											
std basic_ostream fail	R	std::basic_ostream::fail											
std basic_ostream failure	R	std::basic_ostream::failure											
std basic_ostream failure what	R	std::basic_ostream::failure::what											
std basic_ostream fill	R	std::basic_ostream::fill											
std basic_ostream flags	R	std::basic_ostream::flags											
std basic_ostream flush	R	std::basic_ostream::flush											
std basic_ostream getloc	R	std::basic_ostream::getloc											
std basic_ostream good	R	std::basic_ostream::good											
std basic_ostream init	R	std::basic_ostream::init											
std basic_ostream iword	R	std::basic_ostream::iword											
std basic_ostream move	R	std::basic_ostream::move											
std basic_ostream narrow	R	std::basic_ostream::narrow											
std basic_ostream precision	R	std::basic_ostream::precision											
std basic_ostream put	R	std::basic_ostream::put											
std basic_ostream pword	R	std::basic_ostream::pword											
std basic_ostream rdbuf	R	std::basic_ostream::rdbuf											
std basic_ostream rdstate	R	std::basic_ostream::rdstate											
std basic_ostream register_callback	R	std::basic_ostream::register_callback											
std basic_ostream seekp	R	std::basic_ostream::seekp											
std basic_ostream sentry	R	std::basic_ostream::sentry											
std basic_ostream set_rdbuf	R	std::basic_ostream::set_rdbuf											
std basic_ostream setf	R	std::basic_ostream::setf											
std basic_ostream setstate	R	std::basic_ostream::setstate											
std basic_ostream swap	R	std::basic_ostream::swap											
std basic_ostream sync_with_stdio	R	std::basic_ostream::sync_with_stdio											
std basic_ostream tellp	R	std::basic_ostream::tellp											
std basic_ostream tie	R	std::basic_ostream::tie											
std basic_ostream unsetf	R	std::basic_ostream::unsetf											
std basic_ostream widen	R	std::basic_ostream::widen											
std basic_ostream width	R	std::basic_ostream::width											
std basic_ostream write	R	std::basic_ostream::write											
std basic_ostream xalloc	R	std::basic_ostream::xalloc											
std basic_ostringstream	R	std::basic_ostringstream											
std basic_ostringstream Init	R	std::basic_ostringstream::Init											
std basic_ostringstream bad	R	std::basic_ostringstream::bad											
std basic_ostringstream clear	R	std::basic_ostringstream::clear											
std basic_ostringstream constructor	R	std::basic_ostringstream::basic_ostringstream											
std basic_ostringstream copyfmt	R	std::basic_ostringstream::copyfmt											
std basic_ostringstream eof	R	std::basic_ostringstream::eof											
std basic_ostringstream exceptions	R	std::basic_ostringstream::exceptions											
std basic_ostringstream fail	R	std::basic_ostringstream::fail											
std basic_ostringstream failure	R	std::basic_ostringstream::failure											
std basic_ostringstream failure what	R	std::basic_ostringstream::failure::what											
std basic_ostringstream fill	R	std::basic_ostringstream::fill											
std basic_ostringstream flags	R	std::basic_ostringstream::flags											
std basic_ostringstream flush	R	std::basic_ostringstream::flush											
std basic_ostringstream getloc	R	std::basic_ostringstream::getloc											
std basic_ostringstream good	R	std::basic_ostringstream::good											
std basic_ostringstream init	R	std::basic_ostringstream::init											
std basic_ostringstream iword	R	std::basic_ostringstream::iword											
std basic_ostringstream move	R	std::basic_ostringstream::move											
std basic_ostringstream narrow	R	std::basic_ostringstream::narrow											
std basic_ostringstream precision	R	std::basic_ostringstream::precision											
std basic_ostringstream put	R	std::basic_ostringstream::put											
std basic_ostringstream pword	R	std::basic_ostringstream::pword											
std basic_ostringstream rdstate	R	std::basic_ostringstream::rdstate											
std basic_ostringstream register_callback	R	std::basic_ostringstream::register_callback											
std basic_ostringstream seekp	R	std::basic_ostringstream::seekp											
std basic_ostringstream sentry	R	std::basic_ostringstream::sentry											
std basic_ostringstream set_rdbuf	R	std::basic_ostringstream::set_rdbuf											
std basic_ostringstream setf	R	std::basic_ostringstream::setf											
std basic_ostringstream setstate	R	std::basic_ostringstream::setstate											
std basic_ostringstream str	R	std::basic_ostringstream::str											
std basic_ostringstream sync_with_stdio	R	std::basic_ostringstream::sync_with_stdio											
std basic_ostringstream tellp	R	std::basic_ostringstream::tellp											
std basic_ostringstream tie	R	std::basic_ostringstream::tie											
std basic_ostringstream unsetf	R	std::basic_ostringstream::unsetf											
std basic_ostringstream widen	R	std::basic_ostringstream::widen											
std basic_ostringstream width	R	std::basic_ostringstream::width											
std basic_ostringstream write	R	std::basic_ostringstream::write											
std basic_ostringstream xalloc	R	std::basic_ostringstream::xalloc											
std basic_regex	R	std::basic_regex											
std basic_regex assign	R	std::basic_regex::assign											
std basic_regex constructor	R	std::basic_regex::basic_regex											
std basic_regex flags	R	std::basic_regex::flags											
std basic_regex getloc	R	std::basic_regex::getloc											
std basic_regex imbue	R	std::basic_regex::imbue											
std basic_regex mark_count	R	std::basic_regex::mark_count											
std basic_regex swap	R	std::basic_regex::swap											
std basic_streambuf	R	std::basic_streambuf											
std basic_streambuf destructor	R	std::basic_streambuf::~basic_streambuf											
std basic_streambuf eback	R	std::basic_streambuf::eback											
std basic_streambuf egptr	R	std::basic_streambuf::egptr											
std basic_streambuf epptr	R	std::basic_streambuf::epptr											
std basic_streambuf gbump	R	std::basic_streambuf::gbump											
std basic_streambuf getloc	R	std::basic_streambuf::getloc											
std basic_streambuf gptr	R	std::basic_streambuf::gptr											
std basic_streambuf imbue	R	std::basic_streambuf::imbue											
std basic_streambuf in_avail	R	std::basic_streambuf::in_avail											
std basic_streambuf overflow	R	std::basic_streambuf::overflow											
std basic_streambuf pbackfail	R	std::basic_streambuf::pbackfail											
std basic_streambuf pbase	R	std::basic_streambuf::pbase											
std basic_streambuf pbump	R	std::basic_streambuf::pbump											
std basic_streambuf pptr	R	std::basic_streambuf::pptr											
std basic_streambuf pubimbue	R	std::basic_streambuf::pubimbue											
std basic_streambuf pubseekoff	R	std::basic_streambuf::pubseekoff											
std basic_streambuf pubseekpos	R	std::basic_streambuf::pubseekpos											
std basic_streambuf pubsync	R	std::basic_streambuf::pubsync											
std basic_streambuf sbumpc	R	std::basic_streambuf::sbumpc											
std basic_streambuf seekoff	R	std::basic_streambuf::seekoff											
std basic_streambuf seekpos	R	std::basic_streambuf::seekpos											
std basic_streambuf setg	R	std::basic_streambuf::setg											
std basic_streambuf setp	R	std::basic_streambuf::setp											
std basic_streambuf sgetc	R	std::basic_streambuf::sgetc											
std basic_streambuf showmanyc	R	std::basic_streambuf::showmanyc											
std basic_streambuf snextc	R	std::basic_streambuf::snextc											
std basic_streambuf sputbackc	R	std::basic_streambuf::sputbackc											
std basic_streambuf sputc	R	std::basic_streambuf::sputc											
std basic_streambuf sungetc	R	std::basic_streambuf::sungetc											
std basic_streambuf swap	R	std::basic_streambuf::swap											
std basic_streambuf sync	R	std::basic_streambuf::sync											
std basic_streambuf uflow	R	std::basic_streambuf::uflow											
std basic_streambuf underflow	R	std::basic_streambuf::underflow											
std basic_string	R	std::basic_string											
std basic_string append	R	std::basic_string::append											
std basic_string assign	R	std::basic_string::assign											
std basic_string at	R	std::basic_string::at											
std basic_string back	R	std::basic_string::back											
std basic_string begin	R	std::basic_string::begin											
std basic_string c_str	R	std::basic_string::c_str											
std basic_string capacity	R	std::basic_string::capacity											
std basic_string cbegin	R	std::basic_string::cbegin											
std basic_string cend	R	std::basic_string::cend											
std basic_string clear	R	std::basic_string::clear											
std basic_string compare	R	std::basic_string::compare											
std basic_string constructor	R	std::basic_string::basic_string											
std basic_string copy	R	std::basic_string::copy											
std basic_string crbegin	R	std::basic_string::crbegin											
std basic_string crend	R	std::basic_string::crend											
std basic_string data	R	std::basic_string::data											
std basic_string empty	R	std::basic_string::empty											
std basic_string end	R	std::basic_string::end											
std basic_string erase	R	std::basic_string::erase											
std basic_string find	R	std::basic_string::find											
std basic_string find_first_not_of	R	std::basic_string::find_first_not_of											
std basic_string find_first_of	R	std::basic_string::find_first_of											
std basic_string find_last_not_of	R	std::basic_string::find_last_not_of											
std basic_string find_last_of	R	std::basic_string::find_last_of											
std basic_string front	R	std::basic_string::front											
std basic_string get_allocator	R	std::basic_string::get_allocator											
std basic_string insert	R	std::basic_string::insert											
std basic_string length	R	std::basic_string::length											
std basic_string max_size	R	std::basic_string::max_size											
std basic_string pop_back	R	std::basic_string::pop_back											
std basic_string push_back	R	std::basic_string::push_back											
std basic_string rbegin	R	std::basic_string::rbegin											
std basic_string rend	R	std::basic_string::rend											
std basic_string replace	R	std::basic_string::replace											
std basic_string reserve	R	std::basic_string::reserve											
std basic_string resize	R	std::basic_string::resize											
std basic_string rfind	R	std::basic_string::rfind											
std basic_string shrink_to_fit	R	std::basic_string::shrink_to_fit											
std basic_string size	R	std::basic_string::size											
std basic_string substr	R	std::basic_string::substr											
std basic_string swap	R	std::basic_string::swap											
std basic_string_view	R	std::basic_string_view											
std basic_string_view at	R	std::basic_string_view::at											
std basic_string_view back	R	std::basic_string_view::back											
std basic_string_view begin	R	std::basic_string_view::begin											
std basic_string_view cbegin	R	std::basic_string_view::cbegin											
std basic_string_view cend	R	std::basic_string_view::cend											
std basic_string_view compare	R	std::basic_string_view::compare											
std basic_string_view copy	R	std::basic_string_view::copy											
std basic_string_view crbegin	R	std::basic_string_view::crbegin											
std basic_string_view crend	R	std::basic_string_view::crend											
std basic_string_view data	R	std::basic_string_view::data											
std basic_string_view empty	R	std::basic_string_view::empty											
std basic_string_view end	R	std::basic_string_view::end											
std basic_string_view find	R	std::basic_string_view::find											
std basic_string_view find_first_not_of	R	std::basic_string_view::find_first_not_of											
std basic_string_view find_first_of	R	std::basic_string_view::find_first_of											
std basic_string_view find_last_not_of	R	std::basic_string_view::find_last_not_of											
std basic_string_view find_last_of	R	std::basic_string_view::find_last_of											
std basic_string_view front	R	std::basic_string_view::front											
std basic_string_view length	R	std::basic_string_view::length											
std basic_string_view max_size	R	std::basic_string_view::max_size											
std basic_string_view rbegin	R	std::basic_string_view::rbegin											
std basic_string_view remove_prefix	R	std::basic_string_view::remove_prefix											
std basic_string_view remove_suffix	R	std::basic_string_view::remove_suffix											
std basic_string_view rend	R	std::basic_string_view::rend											
std basic_string_view rfind	R	std::basic_string_view::rfind											
std basic_string_view size	R	std::basic_string_view::size											
std basic_string_view substr	R	std::basic_string_view::substr											
std basic_string_view swap	R	std::basic_string_view::swap											
std basic_stringbuf	R	std::basic_stringbuf											
std basic_stringbuf eback	R	std::basic_stringbuf::eback											
std basic_stringbuf egptr	R	std::basic_stringbuf::egptr											
std basic_stringbuf epptr	R	std::basic_stringbuf::epptr											
std basic_stringbuf gbump	R	std::basic_stringbuf::gbump											
std basic_stringbuf getloc	R	std::basic_stringbuf::getloc											
std basic_stringbuf gptr	R	std::basic_stringbuf::gptr											
std basic_stringbuf imbue	R	std::basic_stringbuf::imbue											
std basic_stringbuf in_avail	R	std::basic_stringbuf::in_avail											
std basic_stringbuf pbase	R	std::basic_stringbuf::pbase											
std basic_stringbuf pbump	R	std::basic_stringbuf::pbump											
std basic_stringbuf pptr	R	std::basic_stringbuf::pptr											
std basic_stringbuf pubimbue	R	std::basic_stringbuf::pubimbue											
std basic_stringbuf pubseekoff	R	std::basic_stringbuf::pubseekoff											
std basic_stringbuf pubseekpos	R	std::basic_stringbuf::pubseekpos											
std basic_stringbuf pubsync	R	std::basic_stringbuf::pubsync											
std basic_stringbuf sbumpc	R	std::basic_stringbuf::sbumpc											
std basic_stringbuf setbuf	R	std::basic_stringbuf::setbuf											
std basic_stringbuf setg	R	std::basic_stringbuf::setg											
std basic_stringbuf setp	R	std::basic_stringbuf::setp											
std basic_stringbuf sgetc	R	std::basic_stringbuf::sgetc											
std basic_stringbuf showmanyc	R	std::basic_stringbuf::showmanyc											
std basic_stringbuf snextc	R	std::basic_stringbuf::snextc											
std basic_stringbuf sputbackc	R	std::basic_stringbuf::sputbackc											
std basic_stringbuf sputc	R	std::basic_stringbuf::sputc											
std basic_stringbuf str	R	std::basic_stringbuf::str											
std basic_stringbuf sungetc	R	std::basic_stringbuf::sungetc											
std basic_stringbuf sync	R	std::basic_stringbuf::sync											
std basic_stringbuf uflow	R	std::basic_stringbuf::uflow											
std basic_stringstream	R	std::basic_stringstream											
std basic_stringstream Init	R	std::basic_stringstream::Init											
std basic_stringstream bad	R	std::basic_stringstream::bad											
std basic_stringstream clear	R	std::basic_stringstream::clear											
std basic_stringstream constructor	R	std::basic_stringstream::basic_stringstream											
std basic_stringstream copyfmt	R	std::basic_stringstream::copyfmt											
std basic_stringstream eof	R	std::basic_stringstream::eof											
std basic_stringstream exceptions	R	std::basic_stringstream::exceptions											
std basic_stringstream fail	R	std::basic_stringstream::fail											
std basic_stringstream failure	R	std::basic_stringstream::failure											
std basic_stringstream failure what	R	std::basic_stringstream::failure::what											
std basic_stringstream fill	R	std::basic_stringstream::fill											
std basic_stringstream flags	R	std::basic_stringstream::flags											
std basic_stringstream flush	R	std::basic_stringstream::flush											
std basic_stringstream gcount	R	std::basic_stringstream::gcount											
std basic_stringstream get	R	std::basic_stringstream::get											
std basic_stringstream getline	R	std::basic_stringstream::getline											
std basic_stringstream getloc	R	std::basic_stringstream::getloc											
std basic_stringstream good	R	std::basic_stringstream::good											
std basic_stringstream ignore	R	std::basic_stringstream::ignore											
std basic_stringstream init	R	std::basic_stringstream::init											
std basic_stringstream iword	R	std::basic_stringstream::iword											
std basic_stringstream move	R	std::basic_stringstream::move											
std basic_stringstream narrow	R	std::basic_stringstream::narrow											
std basic_stringstream peek	R	std::basic_stringstream::peek											
std basic_stringstream precision	R	std::basic_stringstream::precision											
std basic_stringstream put	R	std::basic_stringstream::put											
std basic_stringstream putback	R	std::basic_stringstream::putback											
std basic_stringstream pword	R	std::basic_stringstream::pword											
std basic_stringstream rdstate	R	std::basic_stringstream::rdstate											
std basic_stringstream read	R	std::basic_stringstream::read											
std basic_stringstream readsome	R	std::basic_stringstream::readsome											
std basic_stringstream register_callback	R	std::basic_stringstream::register_callback											
std basic_stringstream seekg	R	std::basic_stringstream::seekg											
std basic_stringstream seekp	R	std::basic_stringstream::seekp											
std basic_stringstream set_rdbuf	R	std::basic_stringstream::set_rdbuf											
std basic_stringstream setf	R	std::basic_stringstream::setf											
std basic_stringstream setstate	R	std::basic_stringstream::setstate											
std basic_stringstream str	R	std::basic_stringstream::str											
std basic_stringstream sync	R	std::basic_stringstream::sync											
std basic_stringstream sync_with_stdio	R	std::basic_stringstream::sync_with_stdio											
std basic_stringstream tellg	R	std::basic_stringstream::tellg											
std basic_stringstream tellp	R	std::basic_stringstream::tellp											
std basic_stringstream tie	R	std::basic_stringstream::tie											
std basic_stringstream unget	R	std::basic_stringstream::unget											
std basic_stringstream unsetf	R	std::basic_stringstream::unsetf											
std basic_stringstream widen	R	std::basic_stringstream::widen											
std basic_stringstream width	R	std::basic_stringstream::width											
std basic_stringstream write	R	std::basic_stringstream::write											
std basic_stringstream xalloc	R	std::basic_stringstream::xalloc											
std begin	R	std::begin											
std bernoulli distribution	R	std::bernoulli_distribution											
std bernoulli distribution constructor	R	std::bernoulli_distribution::bernoulli_distribution											
std bernoulli distribution max	R	std::bernoulli_distribution::max											
std bernoulli distribution min	R	std::bernoulli_distribution::min											
std bernoulli distribution p	R	std::bernoulli_distribution::p											
std bernoulli distribution param	R	std::bernoulli_distribution::param											
std bernoulli distribution reset	R	std::bernoulli_distribution::reset											
std bernoulli_distribution	R	std::bernoulli_distribution											
std bernoulli_distribution constructor	R	std::bernoulli_distribution::bernoulli_distribution											
std bernoulli_distribution max	R	std::bernoulli_distribution::max											
std bernoulli_distribution min	R	std::bernoulli_distribution::min											
std bernoulli_distribution p	R	std::bernoulli_distribution::p											
std bernoulli_distribution param	R	std::bernoulli_distribution::param											
std bernoulli_distribution reset	R	std::bernoulli_distribution::reset											
std betaf	R	std::betaf											
std bidirectional iterator tag	R	std::bidirectional_iterator_tag											
std bidirectional_iterator_tag	R	std::bidirectional_iterator_tag											
std binary negate	R	std::binary_negate											
std binary search	R	std::binary_search											
std binary_negate	R	std::binary_negate											
std binary_search	R	std::binary_search											
std bind	R	std::bind											
std binomial distribution	R	std::binomial_distribution											
std binomial distribution constructor	R	std::binomial_distribution::binomial_distribution											
std binomial distribution max	R	std::binomial_distribution::max											
std binomial distribution min	R	std::binomial_distribution::min											
std binomial distribution p	R	std::binomial_distribution::p											
std binomial distribution param	R	std::binomial_distribution::param											
std binomial distribution reset	R	std::binomial_distribution::reset											
std binomial distribution t	R	std::binomial_distribution::t											
std binomial_distribution	R	std::binomial_distribution											
std binomial_distribution constructor	R	std::binomial_distribution::binomial_distribution											
std binomial_distribution max	R	std::binomial_distribution::max											
std binomial_distribution min	R	std::binomial_distribution::min											
std binomial_distribution p	R	std::binomial_distribution::p											
std binomial_distribution param	R	std::binomial_distribution::param											
std binomial_distribution reset	R	std::binomial_distribution::reset											
std binomial_distribution t	R	std::binomial_distribution::t											
std bit and	R	std::bit_and											
std bit not	R	std::bit_not											
std bit or	R	std::bit_or											
std bit_and	R	std::bit_and											
std bit_not	R	std::bit_not											
std bit_or	R	std::bit_or											
std bitset	R	std::bitset											
std bitset all	R	std::bitset::all											
std bitset any	R	std::bitset::any											
std bitset constructor	R	std::bitset::bitset											
std bitset count	R	std::bitset::count											
std bitset flip	R	std::bitset::flip											
std bitset none	R	std::bitset::none											
std bitset reference	R	std::bitset::reference											
std bitset reset	R	std::bitset::reset											
std bitset set	R	std::bitset::set											
std bitset size	R	std::bitset::size											
std bitset test	R	std::bitset::test											
std bitset to string	R	std::bitset::to_string											
std bitset to ullong	R	std::bitset::to_ullong											
std bitset to ulong	R	std::bitset::to_ulong											
std bitset to_string	R	std::bitset::to_string											
std bitset to_ullong	R	std::bitset::to_ullong											
std bitset to_ulong	R	std::bitset::to_ulong											
std boolalpha	R	std::boolalpha											
std boyer moore horspool searcher	R	std::boyer_moore_horspool_searcher											
std boyer moore searcher	R	std::boyer_moore_searcher											
std boyer_moore_horspool_searcher	R	std::boyer_moore_horspool_searcher											
std boyer_moore_searcher	R	std::boyer_moore_searcher											
std bsearch	R	std::bsearch											
std btowc	R	std::btowc											
std c16rtomb	R	std::c16rtomb											
std c32rtomb	R	std::c32rtomb											
std call once	R	std::call_once											
std call_once	R	std::call_once											
std calloc	R	std::calloc											
std cauchy distribution	R	std::cauchy_distribution											
std cauchy distribution a	R	std::cauchy_distribution::a											
std cauchy distribution b	R	std::cauchy_distribution::b											
std cauchy distribution constructor	R	std::cauchy_distribution::cauchy_distribution											
std cauchy distribution max	R	std::cauchy_distribution::max											
std cauchy distribution min	R	std::cauchy_distribution::min											
std cauchy distribution param	R	std::cauchy_distribution::param											
std cauchy distribution reset	R	std::cauchy_distribution::reset											
std cauchy_distribution	R	std::cauchy_distribution											
std cauchy_distribution a	R	std::cauchy_distribution::a											
std cauchy_distribution b	R	std::cauchy_distribution::b											
std cauchy_distribution constructor	R	std::cauchy_distribution::cauchy_distribution											
std cauchy_distribution max	R	std::cauchy_distribution::max											
std cauchy_distribution min	R	std::cauchy_distribution::min											
std cauchy_distribution param	R	std::cauchy_distribution::param											
std cauchy_distribution reset	R	std::cauchy_distribution::reset											
std cbegin	R	std::cbegin											
std cbrt	R	std::cbrt											
std cend	R	std::cend											
std cerr	R	std::cerr											
std char traits	R	std::char_traits											
std char traits assign	R	std::char_traits::assign											
std char traits compare	R	std::char_traits::compare											
std char traits copy	R	std::char_traits::copy											
std char traits eof	R	std::char_traits::eof											
std char traits eq	R	std::char_traits::eq											
std char traits eq int type	R	std::char_traits::eq_int_type											
std char traits find	R	std::char_traits::find											
std char traits length	R	std::char_traits::length											
std char traits lt	R	std::char_traits::lt											
std char traits move	R	std::char_traits::move											
std char traits not eof	R	std::char_traits::not_eof											
std char traits to char type	R	std::char_traits::to_char_type											
std char traits to int type	R	std::char_traits::to_int_type											
std char_traits	R	std::char_traits											
std char_traits assign	R	std::char_traits::assign											
std char_traits compare	R	std::char_traits::compare											
std char_traits copy	R	std::char_traits::copy											
std char_traits eof	R	std::char_traits::eof											
std char_traits eq	R	std::char_traits::eq											
std char_traits eq_int_type	R	std::char_traits::eq_int_type											
std char_traits find	R	std::char_traits::find											
std char_traits length	R	std::char_traits::length											
std char_traits lt	R	std::char_traits::lt											
std char_traits move	R	std::char_traits::move											
std char_traits not_eof	R	std::char_traits::not_eof											
std char_traits to_char_type	R	std::char_traits::to_char_type											
std char_traits to_int_type	R	std::char_traits::to_int_type											
std chi squared distribution	R	std::chi_squared_distribution											
std chi squared distribution constructor	R	std::chi_squared_distribution::chi_squared_distribution											
std chi squared distribution max	R	std::chi_squared_distribution::max											
std chi squared distribution min	R	std::chi_squared_distribution::min											
std chi squared distribution n	R	std::chi_squared_distribution::n											
std chi squared distribution param	R	std::chi_squared_distribution::param											
std chi squared distribution reset	R	std::chi_squared_distribution::reset											
std chi_squared_distribution	R	std::chi_squared_distribution											
std chi_squared_distribution constructor	R	std::chi_squared_distribution::chi_squared_distribution											
std chi_squared_distribution max	R	std::chi_squared_distribution::max											
std chi_squared_distribution min	R	std::chi_squared_distribution::min											
std chi_squared_distribution n	R	std::chi_squared_distribution::n											
std chi_squared_distribution param	R	std::chi_squared_distribution::param											
std chi_squared_distribution reset	R	std::chi_squared_distribution::reset											
std chrono duration	R	std::chrono::duration											
std chrono duration cast	R	std::chrono::duration_cast											
std chrono duration constructor	R	std::chrono::duration::duration											
std chrono duration count	R	std::chrono::duration::count											
std chrono duration max	R	std::chrono::duration::max											
std chrono duration min	R	std::chrono::duration::min											
std chrono duration values	R	std::chrono::duration_values											
std chrono duration values max	R	std::chrono::duration_values::max											
std chrono duration values min	R	std::chrono::duration_values::min											
std chrono duration values zero	R	std::chrono::duration_values::zero											
std chrono duration zero	R	std::chrono::duration::zero											
std chrono duration_cast	R	std::chrono::duration_cast											
std chrono duration_values	R	std::chrono::duration_values											
std chrono duration_values max	R	std::chrono::duration_values::max											
std chrono duration_values min	R	std::chrono::duration_values::min											
std chrono duration_values zero	R	std::chrono::duration_values::zero											
std chrono high resolution clock	R	std::chrono::high_resolution_clock											
std chrono high resolution clock now	R	std::chrono::high_resolution_clock::now											
std chrono high_resolution_clock	R	std::chrono::high_resolution_clock											
std chrono high_resolution_clock now	R	std::chrono::high_resolution_clock::now											
std chrono steady clock	R	std::chrono::steady_clock											
std chrono steady clock now	R	std::chrono::steady_clock::now											
std chrono steady_clock	R	std::chrono::steady_clock											
std chrono steady_clock now	R	std::chrono::steady_clock::now											
std chrono system clock	R	std::chrono::system_clock											
std chrono system clock from time t	R	std::chrono::system_clock::from_time_t											
std chrono system clock now	R	std::chrono::system_clock::now											
std chrono system clock to time t	R	std::chrono::system_clock::to_time_t											
std chrono system_clock	R	std::chrono::system_clock											
std chrono system_clock from_time_t	R	std::chrono::system_clock::from_time_t											
std chrono system_clock now	R	std::chrono::system_clock::now											
std chrono system_clock to_time_t	R	std::chrono::system_clock::to_time_t											
std chrono time point	R	std::chrono::time_point											
std chrono time point cast	R	std::chrono::time_point_cast											
std chrono time point constructor	R	std::chrono::time_point::time_point											
std chrono time point max	R	std::chrono::time_point::max											
std chrono time point min	R	std::chrono::time_point::min											
std chrono time point time since epoch	R	std::chrono::time_point::time_since_epoch											
std chrono time_point	R	std::chrono::time_point											
std chrono time_point constructor	R	std::chrono::time_point::time_point											
std chrono time_point max	R	std::chrono::time_point::max											
std chrono time_point min	R	std::chrono::time_point::min											
std chrono time_point time_since_epoch	R	std::chrono::time_point::time_since_epoch											
std chrono time_point_cast	R	std::chrono::time_point_cast											
std chrono treat as floating point	R	std::chrono::treat_as_floating_point											
std chrono treat_as_floating_point	R	std::chrono::treat_as_floating_point											
std cin	R	std::cin											
std clearerr	R	std::clearerr											
std clock	R	std::clock											
std clog	R	std::clog											
std codecvt	R	std::codecvt											
std codecvt always noconv	R	std::codecvt::always_noconv											
std codecvt always_noconv	R	std::codecvt::always_noconv											
std codecvt base	R	std::codecvt_base											
std codecvt byname	R	std::codecvt_byname											
std codecvt constructor	R	std::codecvt::codecvt											
std codecvt destructor	R	std::codecvt::~codecvt											
std codecvt do always noconv	R	std::codecvt::do_always_noconv											
std codecvt do encoding	R	std::codecvt::do_encoding											
std codecvt do in	R	std::codecvt::do_in											
std codecvt do length	R	std::codecvt::do_length											
std codecvt do max length	R	std::codecvt::do_max_length											
std codecvt do out	R	std::codecvt::do_out											
std codecvt do unshift	R	std::codecvt::do_unshift											
std codecvt do_always_noconv	R	std::codecvt::do_always_noconv											
std codecvt do_encoding	R	std::codecvt::do_encoding											
std codecvt do_in	R	std::codecvt::do_in											
std codecvt do_length	R	std::codecvt::do_length											
std codecvt do_max_length	R	std::codecvt::do_max_length											
std codecvt do_out	R	std::codecvt::do_out											
std codecvt do_unshift	R	std::codecvt::do_unshift											
std codecvt encoding	R	std::codecvt::encoding											
std codecvt in	R	std::codecvt::in											
std codecvt length	R	std::codecvt::length											
std codecvt max length	R	std::codecvt::max_length											
std codecvt max_length	R	std::codecvt::max_length											
std codecvt out	R	std::codecvt::out											
std codecvt unshift	R	std::codecvt::unshift											
std codecvt utf16	R	std::codecvt_utf16											
std codecvt utf8	R	std::codecvt_utf8											
std codecvt utf8 utf16	R	std::codecvt_utf8_utf16											
std codecvt_base	R	std::codecvt_base											
std codecvt_byname	R	std::codecvt_byname											
std codecvt_utf16	R	std::codecvt_utf16											
std codecvt_utf8	R	std::codecvt_utf8											
std codecvt_utf8_utf16	R	std::codecvt_utf8_utf16											
std collate	R	std::collate											
std collate byname	R	std::collate_byname											
std collate compare	R	std::collate::compare											
std collate constructor	R	std::collate::collate											
std collate destructor	R	std::collate::~collate											
std collate do compare	R	std::collate::do_compare											
std collate do hash	R	std::collate::do_hash											
std collate do transform	R	std::collate::do_transform											
std collate do_compare	R	std::collate::do_compare											
std collate do_hash	R	std::collate::do_hash											
std collate do_transform	R	std::collate::do_transform											
std collate hash	R	std::collate::hash											
std collate transform	R	std::collate::transform											
std collate_byname	R	std::collate_byname											
std common type	R	std::common_type											
std common_type	R	std::common_type											
std comp ellint 1f	R	std::comp_ellint_1f											
std comp ellint 2f	R	std::comp_ellint_2f											
std comp ellint 3f	R	std::comp_ellint_3f											
std comp_ellint_1f	R	std::comp_ellint_1f											
std comp_ellint_2f	R	std::comp_ellint_2f											
std comp_ellint_3f	R	std::comp_ellint_3f											
std complex	R	std::complex											
std complex constructor	R	std::complex::complex											
std complex imag	R	std::complex::imag											
std complex real	R	std::complex::real											
std condition variable	R	std::condition_variable											
std condition variable any	R	std::condition_variable_any											
std condition variable any notify all	R	std::condition_variable_any::notify_all											
std condition variable any notify one	R	std::condition_variable_any::notify_one											
std condition variable any wait	R	std::condition_variable_any::wait											
std condition variable any wait until	R	std::condition_variable_any::wait_until											
std condition variable native handle	R	std::condition_variable::native_handle											
std condition variable notify all	R	std::condition_variable::notify_all											
std condition variable notify one	R	std::condition_variable::notify_one											
std condition variable wait	R	std::condition_variable::wait											
std condition variable wait until	R	std::condition_variable::wait_until											
std condition_variable	R	std::condition_variable											
std condition_variable native_handle	R	std::condition_variable::native_handle											
std condition_variable notify_all	R	std::condition_variable::notify_all											
std condition_variable notify_one	R	std::condition_variable::notify_one											
std condition_variable wait	R	std::condition_variable::wait											
std condition_variable wait_until	R	std::condition_variable::wait_until											
std condition_variable_any	R	std::condition_variable_any											
std condition_variable_any notify_all	R	std::condition_variable_any::notify_all											
std condition_variable_any notify_one	R	std::condition_variable_any::notify_one											
std condition_variable_any wait	R	std::condition_variable_any::wait											
std condition_variable_any wait_until	R	std::condition_variable_any::wait_until											
std conditional	R	std::conditional											
std conjunction	R	std::conjunction											
std const pointer cast	R	std::const_pointer_cast											
std const_pointer_cast	R	std::const_pointer_cast											
std copy	R	std::copy											
std copy backward	R	std::copy_backward											
std copy if	R	std::copy_if											
std copy_backward	R	std::copy_backward											
std copy_if	R	std::copy_if											
std cos	R	std::cos											
std cosh	R	std::cosh											
std count	R	std::count											
std count if	R	std::count_if											
std count_if	R	std::count_if											
std cout	R	std::cout											
std crbegin	R	std::crbegin											
std cref	R	std::cref											
std crend	R	std::crend											
std ctime	R	std::ctime											
std ctype	R	std::ctype											
std ctype base	R	std::ctype_base											
std ctype byname	R	std::ctype_byname											
std ctype constructor	R	std::ctype::ctype											
std ctype destructor	R	std::ctype::~ctype											
std ctype do scan is	R	std::ctype::do_scan_is											
std ctype do_scan_is	R	std::ctype::do_scan_is											
std ctype scan is	R	std::ctype::scan_is											
std ctype scan_is	R	std::ctype::scan_is											
std ctype_base	R	std::ctype_base											
std ctype_byname	R	std::ctype_byname											
std current exception	R	std::current_exception											
std current_exception	R	std::current_exception											
std cyl bessel if	R	std::cyl_bessel_if											
std cyl bessel jf	R	std::cyl_bessel_jf											
std cyl bessel kf	R	std::cyl_bessel_kf											
std cyl neumannf	R	std::cyl_neumannf											
std cyl_bessel_if	R	std::cyl_bessel_if											
std cyl_bessel_jf	R	std::cyl_bessel_jf											
std cyl_bessel_kf	R	std::cyl_bessel_kf											
std cyl_neumannf	R	std::cyl_neumannf											
std data	R	std::data											
std dec	R	std::dec											
std decay	R	std::decay											
std declare no pointers	R	std::declare_no_pointers											
std declare reachable	R	std::declare_reachable											
std declare_no_pointers	R	std::declare_no_pointers											
std declare_reachable	R	std::declare_reachable											
std declval	R	std::declval											
std default delete	R	std::default_delete											
std default searcher	R	std::default_searcher											
std default_delete	R	std::default_delete											
std default_searcher	R	std::default_searcher											
std defaultfloat	R	std::defaultfloat											
std defer lock t	R	std::defer_lock_t											
std defer_lock_t	R	std::defer_lock_t											
std deque	R	std::deque											
std deque assign	R	std::deque::assign											
std deque at	R	std::deque::at											
std deque back	R	std::deque::back											
std deque begin	R	std::deque::begin											
std deque cbegin	R	std::deque::cbegin											
std deque cend	R	std::deque::cend											
std deque clear	R	std::deque::clear											
std deque constructor	R	std::deque::deque											
std deque crbegin	R	std::deque::crbegin											
std deque crend	R	std::deque::crend											
std deque emplace	R	std::deque::emplace											
std deque emplace back	R	std::deque::emplace_back											
std deque emplace front	R	std::deque::emplace_front											
std deque emplace_back	R	std::deque::emplace_back											
std deque emplace_front	R	std::deque::emplace_front											
std deque empty	R	std::deque::empty											
std deque end	R	std::deque::end											
std deque erase	R	std::deque::erase											
std deque front	R	std::deque::front											
std deque get allocator	R	std::deque::get_allocator											
std deque get_allocator	R	std::deque::get_allocator											
std deque insert	R	std::deque::insert											
std deque max size	R	std::deque::max_size											
std deque max_size	R	std::deque::max_size											
std deque pop back	R	std::deque::pop_back											
std deque pop front	R	std::deque::pop_front											
std deque pop_back	R	std::deque::pop_back											
std deque pop_front	R	std::deque::pop_front											
std deque push back	R	std::deque::push_back											
std deque push front	R	std::deque::push_front											
std deque push_back	R	std::deque::push_back											
std deque push_front	R	std::deque::push_front											
std deque rbegin	R	std::deque::rbegin											
std deque rend	R	std::deque::rend											
std deque resize	R	std::deque::resize											
std deque shrink to fit	R	std::deque::shrink_to_fit											
std deque shrink_to_fit	R	std::deque::shrink_to_fit											
std deque size	R	std::deque::size											
std deque swap	R	std::deque::swap											
std destroy at	R	std::destroy_at											
std destroy_at	R	std::destroy_at											
std difftime	R	std::difftime											
std discard block engine	R	std::discard_block_engine											
std discard block engine base	R	std::discard_block_engine::base											
std discard block engine constructor	R	std::discard_block_engine::discard_block_engine											
std discard block engine discard	R	std::discard_block_engine::discard											
std discard block engine max	R	std::discard_block_engine::max											
std discard block engine min	R	std::discard_block_engine::min											
std discard block engine seed	R	std::discard_block_engine::seed											
std discard_block_engine	R	std::discard_block_engine											
std discard_block_engine base	R	std::discard_block_engine::base											
std discard_block_engine constructor	R	std::discard_block_engine::discard_block_engine											
std discard_block_engine discard	R	std::discard_block_engine::discard											
std discard_block_engine max	R	std::discard_block_engine::max											
std discard_block_engine min	R	std::discard_block_engine::min											
std discard_block_engine seed	R	std::discard_block_engine::seed											
std discrete distribution	R	std::discrete_distribution											
std discrete distribution constructor	R	std::discrete_distribution::discrete_distribution											
std discrete distribution max	R	std::discrete_distribution::max											
std discrete distribution min	R	std::discrete_distribution::min											
std discrete distribution param	R	std::discrete_distribution::param											
std discrete distribution probabilities	R	std::discrete_distribution::probabilities											
std discrete distribution reset	R	std::discrete_distribution::reset											
std discrete_distribution	R	std::discrete_distribution											
std discrete_distribution constructor	R	std::discrete_distribution::discrete_distribution											
std discrete_distribution max	R	std::discrete_distribution::max											
std discrete_distribution min	R	std::discrete_distribution::min											
std discrete_distribution param	R	std::discrete_distribution::param											
std discrete_distribution probabilities	R	std::discrete_distribution::probabilities											
std discrete_distribution reset	R	std::discrete_distribution::reset											
std disjunction	R	std::disjunction											
std distance	R	std::distance											
std div	R	std::div											
std div t	R	std::div_t											
std div_t	R	std::div_t											
std divides	R	std::divides											
std domain error	R	std::domain_error											
std domain error what	R	std::domain_error::what											
std domain_error	R	std::domain_error											
std domain_error what	R	std::domain_error::what											
std dynamic pointer cast	R	std::dynamic_pointer_cast											
std dynamic_pointer_cast	R	std::dynamic_pointer_cast											
std ellint 1f	R	std::ellint_1f											
std ellint 2f	R	std::ellint_2f											
std ellint 3f	R	std::ellint_3f											
std ellint_1f	R	std::ellint_1f											
std ellint_2f	R	std::ellint_2f											
std ellint_3f	R	std::ellint_3f											
std empty	R	std::empty											
std enable if	R	std::enable_if											
std enable shared from this	R	std::enable_shared_from_this											
std enable shared from this constructor	R	std::enable_shared_from_this::enable_shared_from_this											
std enable shared from this shared from this	R	std::enable_shared_from_this::shared_from_this											
std enable shared from this weak from this	R	std::enable_shared_from_this::weak_from_this											
std enable_if	R	std::enable_if											
std enable_shared_from_this	R	std::enable_shared_from_this											
std enable_shared_from_this constructor	R	std::enable_shared_from_this::enable_shared_from_this											
std enable_shared_from_this shared_from_this	R	std::enable_shared_from_this::shared_from_this											
std enable_shared_from_this weak_from_this	R	std::enable_shared_from_this::weak_from_this											
std end	R	std::end											
std endl	R	std::endl											
std ends	R	std::ends											
std equal range	R	std::equal_range											
std equal to	R	std::equal_to											
std equal_range	R	std::equal_range											
std equal_to	R	std::equal_to											
std errc	R	std::errc											
std error category	R	std::error_category											
std error category constructor	R	std::error_category::error_category											
std error category default error condition	R	std::error_category::default_error_condition											
std error category destructor	R	std::error_category::~error_category											
std error category equivalent	R	std::error_category::equivalent											
std error category message	R	std::error_category::message											
std error category name	R	std::error_category::name											
std error code	R	std::error_code											
std error code assign	R	std::error_code::assign											
std error code category	R	std::error_code::category											
std error code clear	R	std::error_code::clear											
std error code constructor	R	std::error_code::error_code											
std error code default error condition	R	std::error_code::default_error_condition											
std error code message	R	std::error_code::message											
std error code value	R	std::error_code::value											
std error condition	R	std::error_condition											
std error condition assign	R	std::error_condition::assign											
std error condition category	R	std::error_condition::category											
std error condition clear	R	std::error_condition::clear											
std error condition constructor	R	std::error_condition::error_condition											
std error condition message	R	std::error_condition::message											
std error condition value	R	std::error_condition::value											
std error_category	R	std::error_category											
std error_category constructor	R	std::error_category::error_category											
std error_category default_error_condition	R	std::error_category::default_error_condition											
std error_category destructor	R	std::error_category::~error_category											
std error_category equivalent	R	std::error_category::equivalent											
std error_category message	R	std::error_category::message											
std error_category name	R	std::error_category::name											
std error_code	R	std::error_code											
std error_code assign	R	std::error_code::assign											
std error_code category	R	std::error_code::category											
std error_code clear	R	std::error_code::clear											
std error_code constructor	R	std::error_code::error_code											
std error_code default_error_condition	R	std::error_code::default_error_condition											
std error_code message	R	std::error_code::message											
std error_code value	R	std::error_code::value											
std error_condition	R	std::error_condition											
std error_condition assign	R	std::error_condition::assign											
std error_condition category	R	std::error_condition::category											
std error_condition clear	R	std::error_condition::clear											
std error_condition constructor	R	std::error_condition::error_condition											
std error_condition message	R	std::error_condition::message											
std error_condition value	R	std::error_condition::value											
std exception	R	std::exception											
std exception constructor	R	std::exception::exception											
std exception destructor	R	std::exception::~exception											
std exception what	R	std::exception::what											
std exchange	R	std::exchange											
std exclusive scan	R	std::exclusive_scan											
std exclusive_scan	R	std::exclusive_scan											
std execution parallel policy	R	std::execution::parallel_policy											
std execution parallel unsequenced policy	R	std::execution::parallel_unsequenced_policy											
std execution parallel_policy	R	std::execution::parallel_policy											
std execution parallel_unsequenced_policy	R	std::execution::parallel_unsequenced_policy											
std execution sequenced policy	R	std::execution::sequenced_policy											
std execution sequenced_policy	R	std::execution::sequenced_policy											
std exit	R	std::exit											
std exp	R	std::exp											
std experimental any	R	std::experimental::any											
std experimental any cast	R	std::experimental::any_cast											
std experimental any clear	R	std::experimental::any::clear											
std experimental any constructor	R	std::experimental::any::any											
std experimental any empty	R	std::experimental::any::empty											
std experimental any swap	R	std::experimental::any::swap											
std experimental any type	R	std::experimental::any::type											
std experimental any_cast	R	std::experimental::any_cast											
std experimental apply	R	std::experimental::apply											
std experimental bad optional access	R	std::experimental::bad_optional_access											
std experimental bad optional access what	R	std::experimental::bad_optional_access::what											
std experimental bad_optional_access	R	std::experimental::bad_optional_access											
std experimental bad_optional_access what	R	std::experimental::bad_optional_access::what											
std experimental basic string view	R	std::experimental::basic_string_view											
std experimental basic string view at	R	std::experimental::basic_string_view::at											
std experimental basic string view back	R	std::experimental::basic_string_view::back											
std experimental basic string view begin	R	std::experimental::basic_string_view::begin											
std experimental basic string view cbegin	R	std::experimental::basic_string_view::cbegin											
std experimental basic string view cend	R	std::experimental::basic_string_view::cend											
std experimental basic string view compare	R	std::experimental::basic_string_view::compare											
std experimental basic string view copy	R	std::experimental::basic_string_view::copy											
std experimental basic string view crbegin	R	std::experimental::basic_string_view::crbegin											
std experimental basic string view crend	R	std::experimental::basic_string_view::crend											
std experimental basic string view data	R	std::experimental::basic_string_view::data											
std experimental basic string view empty	R	std::experimental::basic_string_view::empty											
std experimental basic string view end	R	std::experimental::basic_string_view::end											
std experimental basic string view find	R	std::experimental::basic_string_view::find											
std experimental basic string view find first not of	R	std::experimental::basic_string_view::find_first_not_of											
std experimental basic string view find first of	R	std::experimental::basic_string_view::find_first_of											
std experimental basic string view find last not of	R	std::experimental::basic_string_view::find_last_not_of											
std experimental basic string view find last of	R	std::experimental::basic_string_view::find_last_of											
std experimental basic string view front	R	std::experimental::basic_string_view::front											
std experimental basic string view length	R	std::experimental::basic_string_view::length											
std experimental basic string view max size	R	std::experimental::basic_string_view::max_size											
std experimental basic string view rbegin	R	std::experimental::basic_string_view::rbegin											
std experimental basic string view remove prefix	R	std::experimental::basic_string_view::remove_prefix											
std experimental basic string view remove suffix	R	std::experimental::basic_string_view::remove_suffix											
std experimental basic string view rend	R	std::experimental::basic_string_view::rend											
std experimental basic string view rfind	R	std::experimental::basic_string_view::rfind											
std experimental basic string view size	R	std::experimental::basic_string_view::size											
std experimental basic string view substr	R	std::experimental::basic_string_view::substr											
std experimental basic string view swap	R	std::experimental::basic_string_view::swap											
std experimental basic string view to string	R	std::experimental::basic_string_view::to_string											
std experimental basic_string_view	R	std::experimental::basic_string_view											
std experimental basic_string_view at	R	std::experimental::basic_string_view::at											
std experimental basic_string_view back	R	std::experimental::basic_string_view::back											
std experimental basic_string_view begin	R	std::experimental::basic_string_view::begin											
std experimental basic_string_view cbegin	R	std::experimental::basic_string_view::cbegin											
std experimental basic_string_view cend	R	std::experimental::basic_string_view::cend											
std experimental basic_string_view compare	R	std::experimental::basic_string_view::compare											
std experimental basic_string_view copy	R	std::experimental::basic_string_view::copy											
std experimental basic_string_view crbegin	R	std::experimental::basic_string_view::crbegin											
std experimental basic_string_view crend	R	std::experimental::basic_string_view::crend											
std experimental basic_string_view data	R	std::experimental::basic_string_view::data											
std experimental basic_string_view empty	R	std::experimental::basic_string_view::empty											
std experimental basic_string_view end	R	std::experimental::basic_string_view::end											
std experimental basic_string_view find	R	std::experimental::basic_string_view::find											
std experimental basic_string_view find_first_not_of	R	std::experimental::basic_string_view::find_first_not_of											
std experimental basic_string_view find_first_of	R	std::experimental::basic_string_view::find_first_of											
std experimental basic_string_view find_last_not_of	R	std::experimental::basic_string_view::find_last_not_of											
std experimental basic_string_view find_last_of	R	std::experimental::basic_string_view::find_last_of											
std experimental basic_string_view front	R	std::experimental::basic_string_view::front											
std experimental basic_string_view length	R	std::experimental::basic_string_view::length											
std experimental basic_string_view max_size	R	std::experimental::basic_string_view::max_size											
std experimental basic_string_view rbegin	R	std::experimental::basic_string_view::rbegin											
std experimental basic_string_view remove_prefix	R	std::experimental::basic_string_view::remove_prefix											
std experimental basic_string_view remove_suffix	R	std::experimental::basic_string_view::remove_suffix											
std experimental basic_string_view rend	R	std::experimental::basic_string_view::rend											
std experimental basic_string_view rfind	R	std::experimental::basic_string_view::rfind											
std experimental basic_string_view size	R	std::experimental::basic_string_view::size											
std experimental basic_string_view substr	R	std::experimental::basic_string_view::substr											
std experimental basic_string_view swap	R	std::experimental::basic_string_view::swap											
std experimental basic_string_view to_string	R	std::experimental::basic_string_view::to_string											
std experimental boyer moore horspool searcher	R	std::experimental::boyer_moore_horspool_searcher											
std experimental boyer moore searcher	R	std::experimental::boyer_moore_searcher											
std experimental boyer_moore_horspool_searcher	R	std::experimental::boyer_moore_horspool_searcher											
std experimental boyer_moore_searcher	R	std::experimental::boyer_moore_searcher											
std experimental default searcher	R	std::experimental::default_searcher											
std experimental default_searcher	R	std::experimental::default_searcher											
std experimental detected or	R	std::experimental::detected_or											
std experimental detected_or	R	std::experimental::detected_or											
std experimental erased type	R	std::experimental::erased_type											
std experimental erased_type	R	std::experimental::erased_type											
std experimental filesystem absolute	R	std::experimental::filesystem::absolute											
std experimental filesystem canonical	R	std::experimental::filesystem::canonical											
std experimental filesystem copy	R	std::experimental::filesystem::copy											
std experimental filesystem copy options	R	std::experimental::filesystem::copy_options											
std experimental filesystem copy symlink	R	std::experimental::filesystem::copy_symlink											
std experimental filesystem copy_options	R	std::experimental::filesystem::copy_options											
std experimental filesystem copy_symlink	R	std::experimental::filesystem::copy_symlink											
std experimental filesystem create directories	R	std::experimental::filesystem::create_directories											
std experimental filesystem create directory symlink	R	std::experimental::filesystem::create_directory_symlink											
std experimental filesystem create hard link	R	std::experimental::filesystem::create_hard_link											
std experimental filesystem create symlink	R	std::experimental::filesystem::create_symlink											
std experimental filesystem create_directories	R	std::experimental::filesystem::create_directories											
std experimental filesystem create_directory_symlink	R	std::experimental::filesystem::create_directory_symlink											
std experimental filesystem create_hard_link	R	std::experimental::filesystem::create_hard_link											
std experimental filesystem create_symlink	R	std::experimental::filesystem::create_symlink											
std experimental filesystem current path	R	std::experimental::filesystem::current_path											
std experimental filesystem current_path	R	std::experimental::filesystem::current_path											
std experimental filesystem directory entry	R	std::experimental::filesystem::directory_entry											
std experimental filesystem directory entry assign	R	std::experimental::filesystem::directory_entry::assign											
std experimental filesystem directory entry constructor	R	std::experimental::filesystem::directory_entry::directory_entry											
std experimental filesystem directory entry path	R	std::experimental::filesystem::directory_entry::path											
std experimental filesystem directory entry replace filename	R	std::experimental::filesystem::directory_entry::replace_filename											
std experimental filesystem directory entry status	R	std::experimental::filesystem::directory_entry::status											
std experimental filesystem directory entry symlink status	R	std::experimental::filesystem::directory_entry::symlink_status											
std experimental filesystem directory iterator	R	std::experimental::filesystem::directory_iterator											
std experimental filesystem directory iterator constructor	R	std::experimental::filesystem::directory_iterator::directory_iterator											
std experimental filesystem directory iterator increment	R	std::experimental::filesystem::directory_iterator::increment											
std experimental filesystem directory options	R	std::experimental::filesystem::directory_options											
std experimental filesystem directory_entry	R	std::experimental::filesystem::directory_entry											
std experimental filesystem directory_entry assign	R	std::experimental::filesystem::directory_entry::assign											
std experimental filesystem directory_entry constructor	R	std::experimental::filesystem::directory_entry::directory_entry											
std experimental filesystem directory_entry path	R	std::experimental::filesystem::directory_entry::path											
std experimental filesystem directory_entry replace_filename	R	std::experimental::filesystem::directory_entry::replace_filename											
std experimental filesystem directory_entry status	R	std::experimental::filesystem::directory_entry::status											
std experimental filesystem directory_entry symlink_status	R	std::experimental::filesystem::directory_entry::symlink_status											
std experimental filesystem directory_iterator	R	std::experimental::filesystem::directory_iterator											
std experimental filesystem directory_iterator constructor	R	std::experimental::filesystem::directory_iterator::directory_iterator											
std experimental filesystem directory_iterator increment	R	std::experimental::filesystem::directory_iterator::increment											
std experimental filesystem directory_options	R	std::experimental::filesystem::directory_options											
std experimental filesystem equivalent	R	std::experimental::filesystem::equivalent											
std experimental filesystem exists	R	std::experimental::filesystem::exists											
std experimental filesystem file size	R	std::experimental::filesystem::file_size											
std experimental filesystem file status	R	std::experimental::filesystem::file_status											
std experimental filesystem file status constructor	R	std::experimental::filesystem::file_status::file_status											
std experimental filesystem file status permissions	R	std::experimental::filesystem::file_status::permissions											
std experimental filesystem file status type	R	std::experimental::filesystem::file_status::type											
std experimental filesystem file type	R	std::experimental::filesystem::file_type											
std experimental filesystem file_size	R	std::experimental::filesystem::file_size											
std experimental filesystem file_status	R	std::experimental::filesystem::file_status											
std experimental filesystem file_status constructor	R	std::experimental::filesystem::file_status::file_status											
std experimental filesystem file_status permissions	R	std::experimental::filesystem::file_status::permissions											
std experimental filesystem file_status type	R	std::experimental::filesystem::file_status::type											
std experimental filesystem file_type	R	std::experimental::filesystem::file_type											
std experimental filesystem filesystem error	R	std::experimental::filesystem::filesystem_error											
std experimental filesystem filesystem error path1	R	std::experimental::filesystem::filesystem_error::path1											
std experimental filesystem filesystem error path2	R	std::experimental::filesystem::filesystem_error::path2											
std experimental filesystem filesystem error what	R	std::experimental::filesystem::filesystem_error::what											
std experimental filesystem filesystem_error	R	std::experimental::filesystem::filesystem_error											
std experimental filesystem filesystem_error path1	R	std::experimental::filesystem::filesystem_error::path1											
std experimental filesystem filesystem_error path2	R	std::experimental::filesystem::filesystem_error::path2											
std experimental filesystem filesystem_error what	R	std::experimental::filesystem::filesystem_error::what											
std experimental filesystem hard link count	R	std::experimental::filesystem::hard_link_count											
std experimental filesystem hard_link_count	R	std::experimental::filesystem::hard_link_count											
std experimental filesystem is block file	R	std::experimental::filesystem::is_block_file											
std experimental filesystem is character file	R	std::experimental::filesystem::is_character_file											
std experimental filesystem is directory	R	std::experimental::filesystem::is_directory											
std experimental filesystem is empty	R	std::experimental::filesystem::is_empty											
std experimental filesystem is fifo	R	std::experimental::filesystem::is_fifo											
std experimental filesystem is other	R	std::experimental::filesystem::is_other											
std experimental filesystem is regular file	R	std::experimental::filesystem::is_regular_file											
std experimental filesystem is socket	R	std::experimental::filesystem::is_socket											
std experimental filesystem is symlink	R	std::experimental::filesystem::is_symlink											
std experimental filesystem is_block_file	R	std::experimental::filesystem::is_block_file											
std experimental filesystem is_character_file	R	std::experimental::filesystem::is_character_file											
std experimental filesystem is_directory	R	std::experimental::filesystem::is_directory											
std experimental filesystem is_empty	R	std::experimental::filesystem::is_empty											
std experimental filesystem is_fifo	R	std::experimental::filesystem::is_fifo											
std experimental filesystem is_other	R	std::experimental::filesystem::is_other											
std experimental filesystem is_regular_file	R	std::experimental::filesystem::is_regular_file											
std experimental filesystem is_socket	R	std::experimental::filesystem::is_socket											
std experimental filesystem is_symlink	R	std::experimental::filesystem::is_symlink											
std experimental filesystem path	R	std::experimental::filesystem::path											
std experimental filesystem path assign	R	std::experimental::filesystem::path::assign											
std experimental filesystem path begin	R	std::experimental::filesystem::path::begin											
std experimental filesystem path c str	R	std::experimental::filesystem::path::c_str											
std experimental filesystem path c_str	R	std::experimental::filesystem::path::c_str											
std experimental filesystem path clear	R	std::experimental::filesystem::path::clear											
std experimental filesystem path compare	R	std::experimental::filesystem::path::compare											
std experimental filesystem path concat	R	std::experimental::filesystem::path::concat											
std experimental filesystem path constructor	R	std::experimental::filesystem::path::path											
std experimental filesystem path empty	R	std::experimental::filesystem::path::empty											
std experimental filesystem path end	R	std::experimental::filesystem::path::end											
std experimental filesystem path extension	R	std::experimental::filesystem::path::extension											
std experimental filesystem path filename	R	std::experimental::filesystem::path::filename											
std experimental filesystem path generic string	R	std::experimental::filesystem::path::generic_string											
std experimental filesystem path generic u16string	R	std::experimental::filesystem::path::generic_u16string											
std experimental filesystem path generic u32string	R	std::experimental::filesystem::path::generic_u32string											
std experimental filesystem path generic u8string	R	std::experimental::filesystem::path::generic_u8string											
std experimental filesystem path generic wstring	R	std::experimental::filesystem::path::generic_wstring											
std experimental filesystem path generic_string	R	std::experimental::filesystem::path::generic_string											
std experimental filesystem path generic_u16string	R	std::experimental::filesystem::path::generic_u16string											
std experimental filesystem path generic_u32string	R	std::experimental::filesystem::path::generic_u32string											
std experimental filesystem path generic_u8string	R	std::experimental::filesystem::path::generic_u8string											
std experimental filesystem path generic_wstring	R	std::experimental::filesystem::path::generic_wstring											
std experimental filesystem path has extension	R	std::experimental::filesystem::path::has_extension											
std experimental filesystem path has filename	R	std::experimental::filesystem::path::has_filename											
std experimental filesystem path has parent path	R	std::experimental::filesystem::path::has_parent_path											
std experimental filesystem path has relative path	R	std::experimental::filesystem::path::has_relative_path											
std experimental filesystem path has root directory	R	std::experimental::filesystem::path::has_root_directory											
std experimental filesystem path has root name	R	std::experimental::filesystem::path::has_root_name											
std experimental filesystem path has root path	R	std::experimental::filesystem::path::has_root_path											
std experimental filesystem path has stem	R	std::experimental::filesystem::path::has_stem											
std experimental filesystem path has_extension	R	std::experimental::filesystem::path::has_extension											
std experimental filesystem path has_filename	R	std::experimental::filesystem::path::has_filename											
std experimental filesystem path has_parent_path	R	std::experimental::filesystem::path::has_parent_path											
std experimental filesystem path has_relative_path	R	std::experimental::filesystem::path::has_relative_path											
std experimental filesystem path has_root_directory	R	std::experimental::filesystem::path::has_root_directory											
std experimental filesystem path has_root_name	R	std::experimental::filesystem::path::has_root_name											
std experimental filesystem path has_root_path	R	std::experimental::filesystem::path::has_root_path											
std experimental filesystem path has_stem	R	std::experimental::filesystem::path::has_stem											
std experimental filesystem path make preferred	R	std::experimental::filesystem::path::make_preferred											
std experimental filesystem path make_preferred	R	std::experimental::filesystem::path::make_preferred											
std experimental filesystem path native	R	std::experimental::filesystem::path::native											
std experimental filesystem path parent path	R	std::experimental::filesystem::path::parent_path											
std experimental filesystem path parent_path	R	std::experimental::filesystem::path::parent_path											
std experimental filesystem path relative path	R	std::experimental::filesystem::path::relative_path											
std experimental filesystem path relative_path	R	std::experimental::filesystem::path::relative_path											
std experimental filesystem path remove filename	R	std::experimental::filesystem::path::remove_filename											
std experimental filesystem path remove_filename	R	std::experimental::filesystem::path::remove_filename											
std experimental filesystem path replace extension	R	std::experimental::filesystem::path::replace_extension											
std experimental filesystem path replace filename	R	std::experimental::filesystem::path::replace_filename											
std experimental filesystem path replace_extension	R	std::experimental::filesystem::path::replace_extension											
std experimental filesystem path replace_filename	R	std::experimental::filesystem::path::replace_filename											
std experimental filesystem path root directory	R	std::experimental::filesystem::path::root_directory											
std experimental filesystem path root name	R	std::experimental::filesystem::path::root_name											
std experimental filesystem path root path	R	std::experimental::filesystem::path::root_path											
std experimental filesystem path root_directory	R	std::experimental::filesystem::path::root_directory											
std experimental filesystem path root_name	R	std::experimental::filesystem::path::root_name											
std experimental filesystem path root_path	R	std::experimental::filesystem::path::root_path											
std experimental filesystem path stem	R	std::experimental::filesystem::path::stem											
std experimental filesystem path string	R	std::experimental::filesystem::path::string											
std experimental filesystem path swap	R	std::experimental::filesystem::path::swap											
std experimental filesystem path u16string	R	std::experimental::filesystem::path::u16string											
std experimental filesystem path u32string	R	std::experimental::filesystem::path::u32string											
std experimental filesystem path u8string	R	std::experimental::filesystem::path::u8string											
std experimental filesystem path wstring	R	std::experimental::filesystem::path::wstring											
std experimental filesystem permissions	R	std::experimental::filesystem::permissions											
std experimental filesystem perms	R	std::experimental::filesystem::perms											
std experimental filesystem read symlink	R	std::experimental::filesystem::read_symlink											
std experimental filesystem read_symlink	R	std::experimental::filesystem::read_symlink											
std experimental filesystem recursive directory iterator	R	std::experimental::filesystem::recursive_directory_iterator											
std experimental filesystem recursive directory iterator constructor	R	std::experimental::filesystem::recursive_directory_iterator::recursive_directory_iterator											
std experimental filesystem recursive directory iterator depth	R	std::experimental::filesystem::recursive_directory_iterator::depth											
std experimental filesystem recursive directory iterator disable recursion pending	R	std::experimental::filesystem::recursive_directory_iterator::disable_recursion_pending											
std experimental filesystem recursive directory iterator increment	R	std::experimental::filesystem::recursive_directory_iterator::increment											
std experimental filesystem recursive directory iterator options	R	std::experimental::filesystem::recursive_directory_iterator::options											
std experimental filesystem recursive directory iterator pop	R	std::experimental::filesystem::recursive_directory_iterator::pop											
std experimental filesystem recursive directory iterator recursion pending	R	std::experimental::filesystem::recursive_directory_iterator::recursion_pending											
std experimental filesystem recursive_directory_iterator	R	std::experimental::filesystem::recursive_directory_iterator											
std experimental filesystem recursive_directory_iterator constructor	R	std::experimental::filesystem::recursive_directory_iterator::recursive_directory_iterator											
std experimental filesystem recursive_directory_iterator depth	R	std::experimental::filesystem::recursive_directory_iterator::depth											
std experimental filesystem recursive_directory_iterator disable_recursion_pending	R	std::experimental::filesystem::recursive_directory_iterator::disable_recursion_pending											
std experimental filesystem recursive_directory_iterator increment	R	std::experimental::filesystem::recursive_directory_iterator::increment											
std experimental filesystem recursive_directory_iterator options	R	std::experimental::filesystem::recursive_directory_iterator::options											
std experimental filesystem recursive_directory_iterator pop	R	std::experimental::filesystem::recursive_directory_iterator::pop											
std experimental filesystem recursive_directory_iterator recursion_pending	R	std::experimental::filesystem::recursive_directory_iterator::recursion_pending											
std experimental filesystem remove	R	std::experimental::filesystem::remove											
std experimental filesystem remove all	R	std::experimental::filesystem::remove_all											
std experimental filesystem remove_all	R	std::experimental::filesystem::remove_all											
std experimental filesystem rename	R	std::experimental::filesystem::rename											
std experimental filesystem resize file	R	std::experimental::filesystem::resize_file											
std experimental filesystem resize_file	R	std::experimental::filesystem::resize_file											
std experimental filesystem space	R	std::experimental::filesystem::space											
std experimental filesystem space info	R	std::experimental::filesystem::space_info											
std experimental filesystem space_info	R	std::experimental::filesystem::space_info											
std experimental filesystem status	R	std::experimental::filesystem::status											
std experimental filesystem status known	R	std::experimental::filesystem::status_known											
std experimental filesystem status_known	R	std::experimental::filesystem::status_known											
std experimental filesystem symlink status	R	std::experimental::filesystem::symlink_status											
std experimental filesystem symlink_status	R	std::experimental::filesystem::symlink_status											
std experimental filesystem system complete	R	std::experimental::filesystem::system_complete											
std experimental filesystem system_complete	R	std::experimental::filesystem::system_complete											
std experimental filesystem temp directory path	R	std::experimental::filesystem::temp_directory_path											
std experimental filesystem temp_directory_path	R	std::experimental::filesystem::temp_directory_path											
std experimental gcd	R	std::experimental::gcd											
std experimental invocation type	R	std::experimental::invocation_type											
std experimental invocation_type	R	std::experimental::invocation_type											
std experimental is detected	R	std::experimental::is_detected											
std experimental is_detected	R	std::experimental::is_detected											
std experimental lcm	R	std::experimental::lcm											
std experimental make array	R	std::experimental::make_array											
std experimental make optional	R	std::experimental::make_optional											
std experimental make_array	R	std::experimental::make_array											
std experimental make_optional	R	std::experimental::make_optional											
std experimental not fn	R	std::experimental::not_fn											
std experimental not_fn	R	std::experimental::not_fn											
std experimental observer ptr	R	std::experimental::observer_ptr											
std experimental observer_ptr	R	std::experimental::observer_ptr											
std experimental optional	R	std::experimental::optional											
std experimental optional constructor	R	std::experimental::optional::optional											
std experimental optional emplace	R	std::experimental::optional::emplace											
std experimental optional swap	R	std::experimental::optional::swap											
std experimental optional value	R	std::experimental::optional::value											
std experimental optional value or	R	std::experimental::optional::value_or											
std experimental optional value_or	R	std::experimental::optional::value_or											
std experimental ostream joiner	R	std::experimental::ostream_joiner											
std experimental ostream_joiner	R	std::experimental::ostream_joiner											
std experimental pmr get default resource	R	std::experimental::pmr::get_default_resource											
std experimental pmr get_default_resource	R	std::experimental::pmr::get_default_resource											
std experimental pmr memory resource	R	std::experimental::pmr::memory_resource											
std experimental pmr memory resource allocate	R	std::experimental::pmr::memory_resource::allocate											
std experimental pmr memory resource constructor	R	std::experimental::pmr::memory_resource::memory_resource											
std experimental pmr memory resource deallocate	R	std::experimental::pmr::memory_resource::deallocate											
std experimental pmr memory resource do allocate	R	std::experimental::pmr::memory_resource::do_allocate											
std experimental pmr memory resource do deallocate	R	std::experimental::pmr::memory_resource::do_deallocate											
std experimental pmr memory resource is equal	R	std::experimental::pmr::memory_resource::is_equal											
std experimental pmr memory_resource	R	std::experimental::pmr::memory_resource											
std experimental pmr memory_resource allocate	R	std::experimental::pmr::memory_resource::allocate											
std experimental pmr memory_resource constructor	R	std::experimental::pmr::memory_resource::memory_resource											
std experimental pmr memory_resource deallocate	R	std::experimental::pmr::memory_resource::deallocate											
std experimental pmr memory_resource do_allocate	R	std::experimental::pmr::memory_resource::do_allocate											
std experimental pmr memory_resource do_deallocate	R	std::experimental::pmr::memory_resource::do_deallocate											
std experimental pmr memory_resource is_equal	R	std::experimental::pmr::memory_resource::is_equal											
std experimental pmr monotonic buffer resource	R	std::experimental::pmr::monotonic_buffer_resource											
std experimental pmr monotonic_buffer_resource	R	std::experimental::pmr::monotonic_buffer_resource											
std experimental pmr new delete resource	R	std::experimental::pmr::new_delete_resource											
std experimental pmr new_delete_resource	R	std::experimental::pmr::new_delete_resource											
std experimental pmr polymorphic allocator	R	std::experimental::pmr::polymorphic_allocator											
std experimental pmr polymorphic_allocator	R	std::experimental::pmr::polymorphic_allocator											
std experimental pmr resource adaptor	R	std::experimental::pmr::resource_adaptor											
std experimental pmr resource_adaptor	R	std::experimental::pmr::resource_adaptor											
std experimental pmr set default resource	R	std::experimental::pmr::set_default_resource											
std experimental pmr set_default_resource	R	std::experimental::pmr::set_default_resource											
std experimental pmr synchronized pool resource	R	std::experimental::pmr::synchronized_pool_resource											
std experimental pmr synchronized_pool_resource	R	std::experimental::pmr::synchronized_pool_resource											
std experimental pmr unsynchronized pool resource	R	std::experimental::pmr::unsynchronized_pool_resource											
std experimental pmr unsynchronized_pool_resource	R	std::experimental::pmr::unsynchronized_pool_resource											
std experimental propagate const	R	std::experimental::propagate_const											
std experimental propagate_const	R	std::experimental::propagate_const											
std experimental randint	R	std::experimental::randint											
std experimental reseed	R	std::experimental::reseed											
std experimental sample	R	std::experimental::sample											
std experimental search	R	std::experimental::search											
std experimental source location	R	std::experimental::source_location											
std experimental source_location	R	std::experimental::source_location											
std experimental to array	R	std::experimental::to_array											
std experimental to_array	R	std::experimental::to_array											
std expintf	R	std::expintf											
std exponential distribution	R	std::exponential_distribution											
std exponential distribution constructor	R	std::exponential_distribution::exponential_distribution											
std exponential distribution lambda	R	std::exponential_distribution::lambda											
std exponential distribution max	R	std::exponential_distribution::max											
std exponential distribution min	R	std::exponential_distribution::min											
std exponential distribution param	R	std::exponential_distribution::param											
std exponential distribution reset	R	std::exponential_distribution::reset											
std exponential_distribution	R	std::exponential_distribution											
std exponential_distribution constructor	R	std::exponential_distribution::exponential_distribution											
std exponential_distribution lambda	R	std::exponential_distribution::lambda											
std exponential_distribution max	R	std::exponential_distribution::max											
std exponential_distribution min	R	std::exponential_distribution::min											
std exponential_distribution param	R	std::exponential_distribution::param											
std exponential_distribution reset	R	std::exponential_distribution::reset											
std extent	R	std::extent											
std extreme value distribution	R	std::extreme_value_distribution											
std extreme value distribution a	R	std::extreme_value_distribution::a											
std extreme value distribution b	R	std::extreme_value_distribution::b											
std extreme value distribution constructor	R	std::extreme_value_distribution::extreme_value_distribution											
std extreme value distribution max	R	std::extreme_value_distribution::max											
std extreme value distribution min	R	std::extreme_value_distribution::min											
std extreme value distribution param	R	std::extreme_value_distribution::param											
std extreme value distribution reset	R	std::extreme_value_distribution::reset											
std extreme_value_distribution	R	std::extreme_value_distribution											
std extreme_value_distribution a	R	std::extreme_value_distribution::a											
std extreme_value_distribution b	R	std::extreme_value_distribution::b											
std extreme_value_distribution constructor	R	std::extreme_value_distribution::extreme_value_distribution											
std extreme_value_distribution max	R	std::extreme_value_distribution::max											
std extreme_value_distribution min	R	std::extreme_value_distribution::min											
std extreme_value_distribution param	R	std::extreme_value_distribution::param											
std extreme_value_distribution reset	R	std::extreme_value_distribution::reset											
std fclose	R	std::fclose											
std feclearexcept	R	std::feclearexcept											
std fegetenv	R	std::fegetenv											
std fegetexceptflag	R	std::fegetexceptflag											
std fegetround	R	std::fegetround											
std feholdexcept	R	std::feholdexcept											
std feof	R	std::feof											
std feraiseexcept	R	std::feraiseexcept											
std ferror	R	std::ferror											
std fesetenv	R	std::fesetenv											
std fesetexceptflag	R	std::fesetexceptflag											
std fesetround	R	std::fesetround											
std fetestexcept	R	std::fetestexcept											
std feupdateenv	R	std::feupdateenv											
std fflush	R	std::fflush											
std fgetc	R	std::fgetc											
std fgetpos	R	std::fgetpos											
std fgets	R	std::fgets											
std fgetwc	R	std::fgetwc											
std fgetws	R	std::fgetws											
std filesystem absolute	R	std::filesystem::absolute											
std filesystem copy	R	std::filesystem::copy											
std filesystem copy options	R	std::filesystem::copy_options											
std filesystem copy symlink	R	std::filesystem::copy_symlink											
std filesystem copy_options	R	std::filesystem::copy_options											
std filesystem copy_symlink	R	std::filesystem::copy_symlink											
std filesystem create directories	R	std::filesystem::create_directories											
std filesystem create directory symlink	R	std::filesystem::create_directory_symlink											
std filesystem create hard link	R	std::filesystem::create_hard_link											
std filesystem create symlink	R	std::filesystem::create_symlink											
std filesystem create_directories	R	std::filesystem::create_directories											
std filesystem create_directory_symlink	R	std::filesystem::create_directory_symlink											
std filesystem create_hard_link	R	std::filesystem::create_hard_link											
std filesystem create_symlink	R	std::filesystem::create_symlink											
std filesystem current path	R	std::filesystem::current_path											
std filesystem current_path	R	std::filesystem::current_path											
std filesystem directory entry	R	std::filesystem::directory_entry											
std filesystem directory entry assign	R	std::filesystem::directory_entry::assign											
std filesystem directory entry constructor	R	std::filesystem::directory_entry::directory_entry											
std filesystem directory entry path	R	std::filesystem::directory_entry::path											
std filesystem directory entry replace filename	R	std::filesystem::directory_entry::replace_filename											
std filesystem directory entry status	R	std::filesystem::directory_entry::status											
std filesystem directory entry symlink status	R	std::filesystem::directory_entry::symlink_status											
std filesystem directory iterator	R	std::filesystem::directory_iterator											
std filesystem directory iterator constructor	R	std::filesystem::directory_iterator::directory_iterator											
std filesystem directory iterator increment	R	std::filesystem::directory_iterator::increment											
std filesystem directory options	R	std::filesystem::directory_options											
std filesystem directory_entry	R	std::filesystem::directory_entry											
std filesystem directory_entry assign	R	std::filesystem::directory_entry::assign											
std filesystem directory_entry constructor	R	std::filesystem::directory_entry::directory_entry											
std filesystem directory_entry path	R	std::filesystem::directory_entry::path											
std filesystem directory_entry replace_filename	R	std::filesystem::directory_entry::replace_filename											
std filesystem directory_entry status	R	std::filesystem::directory_entry::status											
std filesystem directory_entry symlink_status	R	std::filesystem::directory_entry::symlink_status											
std filesystem directory_iterator	R	std::filesystem::directory_iterator											
std filesystem directory_iterator constructor	R	std::filesystem::directory_iterator::directory_iterator											
std filesystem directory_iterator increment	R	std::filesystem::directory_iterator::increment											
std filesystem directory_options	R	std::filesystem::directory_options											
std filesystem equivalent	R	std::filesystem::equivalent											
std filesystem exists	R	std::filesystem::exists											
std filesystem file size	R	std::filesystem::file_size											
std filesystem file status	R	std::filesystem::file_status											
std filesystem file status constructor	R	std::filesystem::file_status::file_status											
std filesystem file status permissions	R	std::filesystem::file_status::permissions											
std filesystem file status type	R	std::filesystem::file_status::type											
std filesystem file type	R	std::filesystem::file_type											
std filesystem file_size	R	std::filesystem::file_size											
std filesystem file_status	R	std::filesystem::file_status											
std filesystem file_status constructor	R	std::filesystem::file_status::file_status											
std filesystem file_status permissions	R	std::filesystem::file_status::permissions											
std filesystem file_status type	R	std::filesystem::file_status::type											
std filesystem file_type	R	std::filesystem::file_type											
std filesystem filesystem error	R	std::filesystem::filesystem_error											
std filesystem filesystem error path1	R	std::filesystem::filesystem_error::path1											
std filesystem filesystem error path2	R	std::filesystem::filesystem_error::path2											
std filesystem filesystem error what	R	std::filesystem::filesystem_error::what											
std filesystem filesystem_error	R	std::filesystem::filesystem_error											
std filesystem filesystem_error path1	R	std::filesystem::filesystem_error::path1											
std filesystem filesystem_error path2	R	std::filesystem::filesystem_error::path2											
std filesystem filesystem_error what	R	std::filesystem::filesystem_error::what											
std filesystem hard link count	R	std::filesystem::hard_link_count											
std filesystem hard_link_count	R	std::filesystem::hard_link_count											
std filesystem is block file	R	std::filesystem::is_block_file											
std filesystem is character file	R	std::filesystem::is_character_file											
std filesystem is directory	R	std::filesystem::is_directory											
std filesystem is empty	R	std::filesystem::is_empty											
std filesystem is fifo	R	std::filesystem::is_fifo											
std filesystem is other	R	std::filesystem::is_other											
std filesystem is regular file	R	std::filesystem::is_regular_file											
std filesystem is socket	R	std::filesystem::is_socket											
std filesystem is symlink	R	std::filesystem::is_symlink											
std filesystem is_block_file	R	std::filesystem::is_block_file											
std filesystem is_character_file	R	std::filesystem::is_character_file											
std filesystem is_directory	R	std::filesystem::is_directory											
std filesystem is_empty	R	std::filesystem::is_empty											
std filesystem is_fifo	R	std::filesystem::is_fifo											
std filesystem is_other	R	std::filesystem::is_other											
std filesystem is_regular_file	R	std::filesystem::is_regular_file											
std filesystem is_socket	R	std::filesystem::is_socket											
std filesystem is_symlink	R	std::filesystem::is_symlink											
std filesystem path	R	std::filesystem::path											
std filesystem path assign	R	std::filesystem::path::assign											
std filesystem path begin	R	std::filesystem::path::begin											
std filesystem path c str	R	std::filesystem::path::c_str											
std filesystem path c_str	R	std::filesystem::path::c_str											
std filesystem path clear	R	std::filesystem::path::clear											
std filesystem path compare	R	std::filesystem::path::compare											
std filesystem path concat	R	std::filesystem::path::concat											
std filesystem path constructor	R	std::filesystem::path::path											
std filesystem path empty	R	std::filesystem::path::empty											
std filesystem path end	R	std::filesystem::path::end											
std filesystem path extension	R	std::filesystem::path::extension											
std filesystem path filename	R	std::filesystem::path::filename											
std filesystem path generic string	R	std::filesystem::path::generic_string											
std filesystem path generic u16string	R	std::filesystem::path::generic_u16string											
std filesystem path generic u32string	R	std::filesystem::path::generic_u32string											
std filesystem path generic u8string	R	std::filesystem::path::generic_u8string											
std filesystem path generic wstring	R	std::filesystem::path::generic_wstring											
std filesystem path generic_string	R	std::filesystem::path::generic_string											
std filesystem path generic_u16string	R	std::filesystem::path::generic_u16string											
std filesystem path generic_u32string	R	std::filesystem::path::generic_u32string											
std filesystem path generic_u8string	R	std::filesystem::path::generic_u8string											
std filesystem path generic_wstring	R	std::filesystem::path::generic_wstring											
std filesystem path has extension	R	std::filesystem::path::has_extension											
std filesystem path has filename	R	std::filesystem::path::has_filename											
std filesystem path has parent path	R	std::filesystem::path::has_parent_path											
std filesystem path has relative path	R	std::filesystem::path::has_relative_path											
std filesystem path has root directory	R	std::filesystem::path::has_root_directory											
std filesystem path has root name	R	std::filesystem::path::has_root_name											
std filesystem path has root path	R	std::filesystem::path::has_root_path											
std filesystem path has stem	R	std::filesystem::path::has_stem											
std filesystem path has_extension	R	std::filesystem::path::has_extension											
std filesystem path has_filename	R	std::filesystem::path::has_filename											
std filesystem path has_parent_path	R	std::filesystem::path::has_parent_path											
std filesystem path has_relative_path	R	std::filesystem::path::has_relative_path											
std filesystem path has_root_directory	R	std::filesystem::path::has_root_directory											
std filesystem path has_root_name	R	std::filesystem::path::has_root_name											
std filesystem path has_root_path	R	std::filesystem::path::has_root_path											
std filesystem path has_stem	R	std::filesystem::path::has_stem											
std filesystem path is absolute	R	std::filesystem::path::is_absolute											
std filesystem path is relative	R	std::filesystem::path::is_relative											
std filesystem path is_absolute	R	std::filesystem::path::is_absolute											
std filesystem path is_relative	R	std::filesystem::path::is_relative											
std filesystem path lexically normal	R	std::filesystem::path::lexically_normal											
std filesystem path lexically proximate	R	std::filesystem::path::lexically_proximate											
std filesystem path lexically relative	R	std::filesystem::path::lexically_relative											
std filesystem path lexically_normal	R	std::filesystem::path::lexically_normal											
std filesystem path lexically_proximate	R	std::filesystem::path::lexically_proximate											
std filesystem path lexically_relative	R	std::filesystem::path::lexically_relative											
std filesystem path make preferred	R	std::filesystem::path::make_preferred											
std filesystem path make_preferred	R	std::filesystem::path::make_preferred											
std filesystem path native	R	std::filesystem::path::native											
std filesystem path parent path	R	std::filesystem::path::parent_path											
std filesystem path parent_path	R	std::filesystem::path::parent_path											
std filesystem path relative path	R	std::filesystem::path::relative_path											
std filesystem path relative_path	R	std::filesystem::path::relative_path											
std filesystem path remove filename	R	std::filesystem::path::remove_filename											
std filesystem path remove_filename	R	std::filesystem::path::remove_filename											
std filesystem path replace extension	R	std::filesystem::path::replace_extension											
std filesystem path replace filename	R	std::filesystem::path::replace_filename											
std filesystem path replace_extension	R	std::filesystem::path::replace_extension											
std filesystem path replace_filename	R	std::filesystem::path::replace_filename											
std filesystem path root directory	R	std::filesystem::path::root_directory											
std filesystem path root name	R	std::filesystem::path::root_name											
std filesystem path root path	R	std::filesystem::path::root_path											
std filesystem path root_directory	R	std::filesystem::path::root_directory											
std filesystem path root_name	R	std::filesystem::path::root_name											
std filesystem path root_path	R	std::filesystem::path::root_path											
std filesystem path stem	R	std::filesystem::path::stem											
std filesystem path string	R	std::filesystem::path::string											
std filesystem path swap	R	std::filesystem::path::swap											
std filesystem path u16string	R	std::filesystem::path::u16string											
std filesystem path u32string	R	std::filesystem::path::u32string											
std filesystem path u8string	R	std::filesystem::path::u8string											
std filesystem path wstring	R	std::filesystem::path::wstring											
std filesystem permissions	R	std::filesystem::permissions											
std filesystem perms	R	std::filesystem::perms											
std filesystem read symlink	R	std::filesystem::read_symlink											
std filesystem read_symlink	R	std::filesystem::read_symlink											
std filesystem recursive directory iterator	R	std::filesystem::recursive_directory_iterator											
std filesystem recursive directory iterator constructor	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
std filesystem recursive directory iterator depth	R	std::filesystem::recursive_directory_iterator::depth											
std filesystem recursive directory iterator disable recursion pending	R	std::filesystem::recursive_directory_iterator::disable_recursion_pending											
std filesystem recursive directory iterator increment	R	std::filesystem::recursive_directory_iterator::increment											
std filesystem recursive directory iterator options	R	std::filesystem::recursive_directory_iterator::options											
std filesystem recursive directory iterator pop	R	std::filesystem::recursive_directory_iterator::pop											
std filesystem recursive directory iterator recursion pending	R	std::filesystem::recursive_directory_iterator::recursion_pending											
std filesystem recursive_directory_iterator	R	std::filesystem::recursive_directory_iterator											
std filesystem recursive_directory_iterator constructor	R	std::filesystem::recursive_directory_iterator::recursive_directory_iterator											
std filesystem recursive_directory_iterator depth	R	std::filesystem::recursive_directory_iterator::depth											
std filesystem recursive_directory_iterator disable_recursion_pending	R	std::filesystem::recursive_directory_iterator::disable_recursion_pending											
std filesystem recursive_directory_iterator increment	R	std::filesystem::recursive_directory_iterator::increment											
std filesystem recursive_directory_iterator options	R	std::filesystem::recursive_directory_iterator::options											
std filesystem recursive_directory_iterator pop	R	std::filesystem::recursive_directory_iterator::pop											
std filesystem recursive_directory_iterator recursion_pending	R	std::filesystem::recursive_directory_iterator::recursion_pending											
std filesystem remove	R	std::filesystem::remove											
std filesystem remove all	R	std::filesystem::remove_all											
std filesystem remove_all	R	std::filesystem::remove_all											
std filesystem rename	R	std::filesystem::rename											
std filesystem resize file	R	std::filesystem::resize_file											
std filesystem resize_file	R	std::filesystem::resize_file											
std filesystem space	R	std::filesystem::space											
std filesystem space info	R	std::filesystem::space_info											
std filesystem space_info	R	std::filesystem::space_info											
std filesystem status	R	std::filesystem::status											
std filesystem status known	R	std::filesystem::status_known											
std filesystem status_known	R	std::filesystem::status_known											
std filesystem symlink status	R	std::filesystem::symlink_status											
std filesystem symlink_status	R	std::filesystem::symlink_status											
std filesystem system complete	R	std::filesystem::system_complete											
std filesystem system_complete	R	std::filesystem::system_complete											
std filesystem temp directory path	R	std::filesystem::temp_directory_path											
std filesystem temp_directory_path	R	std::filesystem::temp_directory_path											
std filesystem u8path	R	std::filesystem::u8path											
std fill n	R	std::fill_n											
std fill_n	R	std::fill_n											
std find	R	std::find											
std find end	R	std::find_end											
std find first of	R	std::find_first_of											
std find if	R	std::find_if											
std find if not	R	std::find_if_not											
std find_end	R	std::find_end											
std find_first_of	R	std::find_first_of											
std find_if	R	std::find_if											
std find_if_not	R	std::find_if_not											
std fisher f distribution	R	std::fisher_f_distribution											
std fisher f distribution constructor	R	std::fisher_f_distribution::fisher_f_distribution											
std fisher f distribution m	R	std::fisher_f_distribution::m											
std fisher f distribution max	R	std::fisher_f_distribution::max											
std fisher f distribution min	R	std::fisher_f_distribution::min											
std fisher f distribution n	R	std::fisher_f_distribution::n											
std fisher f distribution param	R	std::fisher_f_distribution::param											
std fisher f distribution reset	R	std::fisher_f_distribution::reset											
std fisher_f_distribution	R	std::fisher_f_distribution											
std fisher_f_distribution constructor	R	std::fisher_f_distribution::fisher_f_distribution											
std fisher_f_distribution m	R	std::fisher_f_distribution::m											
std fisher_f_distribution max	R	std::fisher_f_distribution::max											
std fisher_f_distribution min	R	std::fisher_f_distribution::min											
std fisher_f_distribution n	R	std::fisher_f_distribution::n											
std fisher_f_distribution param	R	std::fisher_f_distribution::param											
std fisher_f_distribution reset	R	std::fisher_f_distribution::reset											
std fixed	R	std::fixed											
std flush	R	std::flush											
std fopen	R	std::fopen											
std forward as tuple	R	std::forward_as_tuple											
std forward iterator tag	R	std::forward_iterator_tag											
std forward list	R	std::forward_list											
std forward list assign	R	std::forward_list::assign											
std forward list before begin	R	std::forward_list::before_begin											
std forward list begin	R	std::forward_list::begin											
std forward list cbefore begin	R	std::forward_list::cbefore_begin											
std forward list cbegin	R	std::forward_list::cbegin											
std forward list cend	R	std::forward_list::cend											
std forward list clear	R	std::forward_list::clear											
std forward list constructor	R	std::forward_list::forward_list											
std forward list emplace after	R	std::forward_list::emplace_after											
std forward list emplace front	R	std::forward_list::emplace_front											
std forward list empty	R	std::forward_list::empty											
std forward list end	R	std::forward_list::end											
std forward list erase after	R	std::forward_list::erase_after											
std forward list front	R	std::forward_list::front											
std forward list get allocator	R	std::forward_list::get_allocator											
std forward list insert after	R	std::forward_list::insert_after											
std forward list max size	R	std::forward_list::max_size											
std forward list merge	R	std::forward_list::merge											
std forward list pop front	R	std::forward_list::pop_front											
std forward list push front	R	std::forward_list::push_front											
std forward list remove	R	std::forward_list::remove											
std forward list remove if	R	std::forward_list::remove_if											
std forward list resize	R	std::forward_list::resize											
std forward list reverse	R	std::forward_list::reverse											
std forward list sort	R	std::forward_list::sort											
std forward list splice after	R	std::forward_list::splice_after											
std forward list swap	R	std::forward_list::swap											
std forward list unique	R	std::forward_list::unique											
std forward_as_tuple	R	std::forward_as_tuple											
std forward_iterator_tag	R	std::forward_iterator_tag											
std forward_list	R	std::forward_list											
std forward_list assign	R	std::forward_list::assign											
std forward_list before_begin	R	std::forward_list::before_begin											
std forward_list begin	R	std::forward_list::begin											
std forward_list cbefore_begin	R	std::forward_list::cbefore_begin											
std forward_list cbegin	R	std::forward_list::cbegin											
std forward_list cend	R	std::forward_list::cend											
std forward_list clear	R	std::forward_list::clear											
std forward_list constructor	R	std::forward_list::forward_list											
std forward_list emplace_after	R	std::forward_list::emplace_after											
std forward_list emplace_front	R	std::forward_list::emplace_front											
std forward_list empty	R	std::forward_list::empty											
std forward_list end	R	std::forward_list::end											
std forward_list erase_after	R	std::forward_list::erase_after											
std forward_list front	R	std::forward_list::front											
std forward_list get_allocator	R	std::forward_list::get_allocator											
std forward_list insert_after	R	std::forward_list::insert_after											
std forward_list max_size	R	std::forward_list::max_size											
std forward_list merge	R	std::forward_list::merge											
std forward_list pop_front	R	std::forward_list::pop_front											
std forward_list push_front	R	std::forward_list::push_front											
std forward_list remove	R	std::forward_list::remove											
std forward_list remove_if	R	std::forward_list::remove_if											
std forward_list resize	R	std::forward_list::resize											
std forward_list reverse	R	std::forward_list::reverse											
std forward_list sort	R	std::forward_list::sort											
std forward_list splice_after	R	std::forward_list::splice_after											
std forward_list swap	R	std::forward_list::swap											
std forward_list unique	R	std::forward_list::unique											
std fpos	R	std::fpos											
std fpos state	R	std::fpos::state											
std fprintf	R	std::fprintf											
std fputc	R	std::fputc											
std fputs	R	std::fputs											
std fputwc	R	std::fputwc											
std fputws	R	std::fputws											
std fread	R	std::fread											
std free	R	std::free											
std freopen	R	std::freopen											
std front insert iterator	R	std::front_insert_iterator											
std front inserter	R	std::front_inserter											
std front_insert_iterator	R	std::front_insert_iterator											
std front_inserter	R	std::front_inserter											
std fscanf	R	std::fscanf											
std fseek	R	std::fseek											
std fsetpos	R	std::fsetpos											
std ftell	R	std::ftell											
std function	R	std::function											
std function assign	R	std::function::assign											
std function constructor	R	std::function::function											
std function swap	R	std::function::swap											
std function target	R	std::function::target											
std function target type	R	std::function::target_type											
std function target_type	R	std::function::target_type											
std future	R	std::future											
std future constructor	R	std::future::future											
std future error	R	std::future_error											
std future error code	R	std::future_error::code											
std future error constructor	R	std::future_error::future_error											
std future get	R	std::future::get											
std future share	R	std::future::share											
std future valid	R	std::future::valid											
std future wait	R	std::future::wait											
std future wait for	R	std::future::wait_for											
std future wait until	R	std::future::wait_until											
std future wait_for	R	std::future::wait_for											
std future wait_until	R	std::future::wait_until											
std future_error	R	std::future_error											
std future_error code	R	std::future_error::code											
std future_error constructor	R	std::future_error::future_error											
std fwprintf	R	std::fwprintf											
std fwrite	R	std::fwrite											
std fwscanf	R	std::fwscanf											
std gamma distribution	R	std::gamma_distribution											
std gamma distribution alpha	R	std::gamma_distribution::alpha											
std gamma distribution beta	R	std::gamma_distribution::beta											
std gamma distribution constructor	R	std::gamma_distribution::gamma_distribution											
std gamma distribution max	R	std::gamma_distribution::max											
std gamma distribution min	R	std::gamma_distribution::min											
std gamma distribution param	R	std::gamma_distribution::param											
std gamma distribution reset	R	std::gamma_distribution::reset											
std gamma_distribution	R	std::gamma_distribution											
std gamma_distribution alpha	R	std::gamma_distribution::alpha											
std gamma_distribution beta	R	std::gamma_distribution::beta											
std gamma_distribution constructor	R	std::gamma_distribution::gamma_distribution											
std gamma_distribution max	R	std::gamma_distribution::max											
std gamma_distribution min	R	std::gamma_distribution::min											
std gamma_distribution param	R	std::gamma_distribution::param											
std gamma_distribution reset	R	std::gamma_distribution::reset											
std gcd	R	std::gcd											
std generate canonical	R	std::generate_canonical											
std generate n	R	std::generate_n											
std generate_canonical	R	std::generate_canonical											
std generate_n	R	std::generate_n											
std generic category	R	std::generic_category											
std generic_category	R	std::generic_category											
std geometric distribution	R	std::geometric_distribution											
std geometric distribution constructor	R	std::geometric_distribution::geometric_distribution											
std geometric distribution max	R	std::geometric_distribution::max											
std geometric distribution min	R	std::geometric_distribution::min											
std geometric distribution p	R	std::geometric_distribution::p											
std geometric distribution param	R	std::geometric_distribution::param											
std geometric distribution reset	R	std::geometric_distribution::reset											
std geometric_distribution	R	std::geometric_distribution											
std geometric_distribution constructor	R	std::geometric_distribution::geometric_distribution											
std geometric_distribution max	R	std::geometric_distribution::max											
std geometric_distribution min	R	std::geometric_distribution::min											
std geometric_distribution p	R	std::geometric_distribution::p											
std geometric_distribution param	R	std::geometric_distribution::param											
std geometric_distribution reset	R	std::geometric_distribution::reset											
std get money	R	std::get_money											
std get new handler	R	std::get_new_handler											
std get pointer safety	R	std::get_pointer_safety											
std get temporary buffer	R	std::get_temporary_buffer											
std get terminate	R	std::get_terminate											
std get time	R	std::get_time											
std get_money	R	std::get_money											
std get_new_handler	R	std::get_new_handler											
std get_pointer_safety	R	std::get_pointer_safety											
std get_temporary_buffer	R	std::get_temporary_buffer											
std get_terminate	R	std::get_terminate											
std get_time	R	std::get_time											
std getc	R	std::getc											
std getchar	R	std::getchar											
std getenv	R	std::getenv											
std getline	R	std::getline											
std getwchar	R	std::getwchar											
std gmtime	R	std::gmtime											
std greater	R	std::greater											
std greater equal	R	std::greater_equal											
std greater_equal	R	std::greater_equal											
std gslice	R	std::gslice											
std gslice array	R	std::gslice_array											
std gslice_array	R	std::gslice_array											
std has facet	R	std::has_facet											
std has unique object representations	R	std::has_unique_object_representations											
std has virtual destructor	R	std::has_virtual_destructor											
std has_facet	R	std::has_facet											
std has_unique_object_representations	R	std::has_unique_object_representations											
std has_virtual_destructor	R	std::has_virtual_destructor											
std hermitef	R	std::hermitef											
std hex	R	std::hex											
std hexfloat	R	std::hexfloat											
std holds alternative	R	std::holds_alternative											
std holds_alternative	R	std::holds_alternative											
std imaxdiv	R	std::imaxdiv											
std imaxdiv t	R	std::imaxdiv_t											
std imaxdiv_t	R	std::imaxdiv_t											
std in place	R	std::in_place											
std in_place	R	std::in_place											
std includes	R	std::includes											
std inclusive scan	R	std::inclusive_scan											
std inclusive_scan	R	std::inclusive_scan											
std independent bits engine	R	std::independent_bits_engine											
std independent bits engine base	R	std::independent_bits_engine::base											
std independent bits engine constructor	R	std::independent_bits_engine::independent_bits_engine											
std independent bits engine discard	R	std::independent_bits_engine::discard											
std independent bits engine max	R	std::independent_bits_engine::max											
std independent bits engine min	R	std::independent_bits_engine::min											
std independent bits engine seed	R	std::independent_bits_engine::seed											
std independent_bits_engine	R	std::independent_bits_engine											
std independent_bits_engine base	R	std::independent_bits_engine::base											
std independent_bits_engine constructor	R	std::independent_bits_engine::independent_bits_engine											
std independent_bits_engine discard	R	std::independent_bits_engine::discard											
std independent_bits_engine max	R	std::independent_bits_engine::max											
std independent_bits_engine min	R	std::independent_bits_engine::min											
std independent_bits_engine seed	R	std::independent_bits_engine::seed											
std indirect array	R	std::indirect_array											
std indirect_array	R	std::indirect_array											
std initializer list	R	std::initializer_list											
std initializer list begin	R	std::initializer_list::begin											
std initializer list constructor	R	std::initializer_list::initializer_list											
std initializer list end	R	std::initializer_list::end											
std initializer list size	R	std::initializer_list::size											
std initializer_list	R	std::initializer_list											
std initializer_list begin	R	std::initializer_list::begin											
std initializer_list constructor	R	std::initializer_list::initializer_list											
std initializer_list end	R	std::initializer_list::end											
std initializer_list size	R	std::initializer_list::size											
std inner product	R	std::inner_product											
std inner_product	R	std::inner_product											
std inplace merge	R	std::inplace_merge											
std inplace_merge	R	std::inplace_merge											
std input iterator tag	R	std::input_iterator_tag											
std input_iterator_tag	R	std::input_iterator_tag											
std insert iterator	R	std::insert_iterator											
std insert_iterator	R	std::insert_iterator											
std inserter	R	std::inserter											
std integer sequence	R	std::integer_sequence											
std integer_sequence	R	std::integer_sequence											
std integral constant	R	std::integral_constant											
std integral_constant	R	std::integral_constant											
std internal	R	std::internal											
std invalid argument	R	std::invalid_argument											
std invalid argument what	R	std::invalid_argument::what											
std invalid_argument	R	std::invalid_argument											
std invalid_argument what	R	std::invalid_argument::what											
std invoke	R	std::invoke											
std ios base	R	std::ios_base											
std ios base Init	R	std::ios_base::Init											
std ios base constructor	R	std::ios_base::ios_base											
std ios base destructor	R	std::ios_base::~ios_base											
std ios base failure	R	std::ios_base::failure											
std ios base failure what	R	std::ios_base::failure::what											
std ios base flags	R	std::ios_base::flags											
std ios base getloc	R	std::ios_base::getloc											
std ios base imbue	R	std::ios_base::imbue											
std ios base iword	R	std::ios_base::iword											
std ios base precision	R	std::ios_base::precision											
std ios base pword	R	std::ios_base::pword											
std ios base register callback	R	std::ios_base::register_callback											
std ios base setf	R	std::ios_base::setf											
std ios base sync with stdio	R	std::ios_base::sync_with_stdio											
std ios base unsetf	R	std::ios_base::unsetf											
std ios base width	R	std::ios_base::width											
std ios base xalloc	R	std::ios_base::xalloc											
std ios_base	R	std::ios_base											
std ios_base Init	R	std::ios_base::Init											
std ios_base constructor	R	std::ios_base::ios_base											
std ios_base destructor	R	std::ios_base::~ios_base											
std ios_base failure	R	std::ios_base::failure											
std ios_base failure what	R	std::ios_base::failure::what											
std ios_base flags	R	std::ios_base::flags											
std ios_base getloc	R	std::ios_base::getloc											
std ios_base imbue	R	std::ios_base::imbue											
std ios_base iword	R	std::ios_base::iword											
std ios_base precision	R	std::ios_base::precision											
std ios_base pword	R	std::ios_base::pword											
std ios_base register_callback	R	std::ios_base::register_callback											
std ios_base setf	R	std::ios_base::setf											
std ios_base sync_with_stdio	R	std::ios_base::sync_with_stdio											
std ios_base unsetf	R	std::ios_base::unsetf											
std ios_base width	R	std::ios_base::width											
std ios_base xalloc	R	std::ios_base::xalloc											
std iostream category	R	std::iostream_category											
std iostream_category	R	std::iostream_category											
std iota	R	std::iota											
std is abstract	R	std::is_abstract											
std is arithmetic	R	std::is_arithmetic											
std is array	R	std::is_array											
std is assignable	R	std::is_assignable											
std is base of	R	std::is_base_of											
std is bind expression	R	std::is_bind_expression											
std is callable	R	std::is_callable											
std is class	R	std::is_class											
std is compound	R	std::is_compound											
std is const	R	std::is_const											
std is constructible	R	std::is_constructible											
std is convertible	R	std::is_convertible											
std is copy assignable	R	std::is_copy_assignable											
std is copy constructible	R	std::is_copy_constructible											
std is default constructible	R	std::is_default_constructible											
std is empty	R	std::is_empty											
std is enum	R	std::is_enum											
std is error code enum	R	std::is_error_code_enum											
std is error condition enum	R	std::is_error_condition_enum											
std is execution policy	R	std::is_execution_policy											
std is final	R	std::is_final											
std is floating point	R	std::is_floating_point											
std is function	R	std::is_function											
std is fundamental	R	std::is_fundamental											
std is heap	R	std::is_heap											
std is heap until	R	std::is_heap_until											
std is integral	R	std::is_integral											
std is literal type	R	std::is_literal_type											
std is lvalue reference	R	std::is_lvalue_reference											
std is member function pointer	R	std::is_member_function_pointer											
std is member object pointer	R	std::is_member_object_pointer											
std is member pointer	R	std::is_member_pointer											
std is move assignable	R	std::is_move_assignable											
std is move constructible	R	std::is_move_constructible											
std is nothrow assignable	R	std::is_nothrow_assignable											
std is nothrow callable	R	std::is_nothrow_callable											
std is nothrow constructible	R	std::is_nothrow_constructible											
std is nothrow copy constructible	R	std::is_nothrow_copy_constructible											
std is nothrow default constructible	R	std::is_nothrow_default_constructible											
std is nothrow move assignable	R	std::is_nothrow_move_assignable											
std is nothrow move constructible	R	std::is_nothrow_move_constructible											
std is nothrow swappable	R	std::is_nothrow_swappable											
std is null pointer	R	std::is_null_pointer											
std is object	R	std::is_object											
std is permutation	R	std::is_permutation											
std is placeholder	R	std::is_placeholder											
std is pod	R	std::is_pod											
std is pointer	R	std::is_pointer											
std is polymorphic	R	std::is_polymorphic											
std is reference	R	std::is_reference											
std is rvalue reference	R	std::is_rvalue_reference											
std is same	R	std::is_same											
std is scalar	R	std::is_scalar											
std is signed	R	std::is_signed											
std is sorted	R	std::is_sorted											
std is sorted until	R	std::is_sorted_until											
std is standard layout	R	std::is_standard_layout											
std is swappable	R	std::is_swappable											
std is trivial	R	std::is_trivial											
std is trivially assignable	R	std::is_trivially_assignable											
std is trivially constructible	R	std::is_trivially_constructible											
std is trivially copy assignable	R	std::is_trivially_copy_assignable											
std is trivially copy constructible	R	std::is_trivially_copy_constructible											
std is trivially copyable	R	std::is_trivially_copyable											
std is trivially default constructible	R	std::is_trivially_default_constructible											
std is trivially move assignable	R	std::is_trivially_move_assignable											
std is trivially move constructible	R	std::is_trivially_move_constructible											
std is union	R	std::is_union											
std is unsigned	R	std::is_unsigned											
std is void	R	std::is_void											
std is volatile	R	std::is_volatile											
std is_abstract	R	std::is_abstract											
std is_arithmetic	R	std::is_arithmetic											
std is_array	R	std::is_array											
std is_assignable	R	std::is_assignable											
std is_base_of	R	std::is_base_of											
std is_bind_expression	R	std::is_bind_expression											
std is_callable	R	std::is_callable											
std is_class	R	std::is_class											
std is_compound	R	std::is_compound											
std is_const	R	std::is_const											
std is_constructible	R	std::is_constructible											
std is_convertible	R	std::is_convertible											
std is_copy_assignable	R	std::is_copy_assignable											
std is_copy_constructible	R	std::is_copy_constructible											
std is_default_constructible	R	std::is_default_constructible											
std is_empty	R	std::is_empty											
std is_enum	R	std::is_enum											
std is_error_code_enum	R	std::is_error_code_enum											
std is_error_condition_enum	R	std::is_error_condition_enum											
std is_execution_policy	R	std::is_execution_policy											
std is_final	R	std::is_final											
std is_floating_point	R	std::is_floating_point											
std is_function	R	std::is_function											
std is_fundamental	R	std::is_fundamental											
std is_heap	R	std::is_heap											
std is_heap_until	R	std::is_heap_until											
std is_integral	R	std::is_integral											
std is_literal_type	R	std::is_literal_type											
std is_lvalue_reference	R	std::is_lvalue_reference											
std is_member_function_pointer	R	std::is_member_function_pointer											
std is_member_object_pointer	R	std::is_member_object_pointer											
std is_member_pointer	R	std::is_member_pointer											
std is_move_assignable	R	std::is_move_assignable											
std is_move_constructible	R	std::is_move_constructible											
std is_nothrow_assignable	R	std::is_nothrow_assignable											
std is_nothrow_callable	R	std::is_nothrow_callable											
std is_nothrow_constructible	R	std::is_nothrow_constructible											
std is_nothrow_copy_constructible	R	std::is_nothrow_copy_constructible											
std is_nothrow_default_constructible	R	std::is_nothrow_default_constructible											
std is_nothrow_move_assignable	R	std::is_nothrow_move_assignable											
std is_nothrow_move_constructible	R	std::is_nothrow_move_constructible											
std is_nothrow_swappable	R	std::is_nothrow_swappable											
std is_null_pointer	R	std::is_null_pointer											
std is_object	R	std::is_object											
std is_permutation	R	std::is_permutation											
std is_placeholder	R	std::is_placeholder											
std is_pod	R	std::is_pod											
std is_pointer	R	std::is_pointer											
std is_polymorphic	R	std::is_polymorphic											
std is_reference	R	std::is_reference											
std is_rvalue_reference	R	std::is_rvalue_reference											
std is_same	R	std::is_same											
std is_scalar	R	std::is_scalar											
std is_signed	R	std::is_signed											
std is_sorted	R	std::is_sorted											
std is_sorted_until	R	std::is_sorted_until											
std is_standard_layout	R	std::is_standard_layout											
std is_swappable	R	std::is_swappable											
std is_trivial	R	std::is_trivial											
std is_trivially_assignable	R	std::is_trivially_assignable											
std is_trivially_constructible	R	std::is_trivially_constructible											
std is_trivially_copy_assignable	R	std::is_trivially_copy_assignable											
std is_trivially_copy_constructible	R	std::is_trivially_copy_constructible											
std is_trivially_copyable	R	std::is_trivially_copyable											
std is_trivially_default_constructible	R	std::is_trivially_default_constructible											
std is_trivially_move_assignable	R	std::is_trivially_move_assignable											
std is_trivially_move_constructible	R	std::is_trivially_move_constructible											
std is_union	R	std::is_union											
std is_unsigned	R	std::is_unsigned											
std is_void	R	std::is_void											
std is_volatile	R	std::is_volatile											
std istream iterator	R	std::istream_iterator											
std istream_iterator	R	std::istream_iterator											
std istreambuf iterator	R	std::istreambuf_iterator											
std istreambuf_iterator	R	std::istreambuf_iterator											
std istrstream	R	std::istrstream											
std istrstream Init	R	std::istrstream::Init											
std istrstream bad	R	std::istrstream::bad											
std istrstream clear	R	std::istrstream::clear											
std istrstream constructor	R	std::istrstream::istrstream											
std istrstream copyfmt	R	std::istrstream::copyfmt											
std istrstream destructor	R	std::istrstream::~istrstream											
std istrstream eof	R	std::istrstream::eof											
std istrstream exceptions	R	std::istrstream::exceptions											
std istrstream fail	R	std::istrstream::fail											
std istrstream failure	R	std::istrstream::failure											
std istrstream failure what	R	std::istrstream::failure::what											
std istrstream fill	R	std::istrstream::fill											
std istrstream flags	R	std::istrstream::flags											
std istrstream gcount	R	std::istrstream::gcount											
std istrstream get	R	std::istrstream::get											
std istrstream getline	R	std::istrstream::getline											
std istrstream getloc	R	std::istrstream::getloc											
std istrstream good	R	std::istrstream::good											
std istrstream ignore	R	std::istrstream::ignore											
std istrstream init	R	std::istrstream::init											
std istrstream iword	R	std::istrstream::iword											
std istrstream move	R	std::istrstream::move											
std istrstream narrow	R	std::istrstream::narrow											
std istrstream peek	R	std::istrstream::peek											
std istrstream precision	R	std::istrstream::precision											
std istrstream putback	R	std::istrstream::putback											
std istrstream pword	R	std::istrstream::pword											
std istrstream rdstate	R	std::istrstream::rdstate											
std istrstream read	R	std::istrstream::read											
std istrstream readsome	R	std::istrstream::readsome											
std istrstream register callback	R	std::istrstream::register_callback											
std istrstream register_callback	R	std::istrstream::register_callback											
std istrstream seekg	R	std::istrstream::seekg											
std istrstream sentry	R	std::istrstream::sentry											
std istrstream set rdbuf	R	std::istrstream::set_rdbuf											
std istrstream set_rdbuf	R	std::istrstream::set_rdbuf											
std istrstream setf	R	std::istrstream::setf											
std istrstream setstate	R	std::istrstream::setstate											
std istrstream str	R	std::istrstream::str											
std istrstream swap	R	std::istrstream::swap											
std istrstream sync	R	std::istrstream::sync											
std istrstream sync with stdio	R	std::istrstream::sync_with_stdio											
std istrstream sync_with_stdio	R	std::istrstream::sync_with_stdio											
std istrstream tellg	R	std::istrstream::tellg											
std istrstream tie	R	std::istrstream::tie											
std istrstream unget	R	std::istrstream::unget											
std istrstream unsetf	R	std::istrstream::unsetf											
std istrstream widen	R	std::istrstream::widen											
std istrstream width	R	std::istrstream::width											
std istrstream xalloc	R	std::istrstream::xalloc											
std iswalnum	R	std::iswalnum											
std iswalpha	R	std::iswalpha											
std iswblank	R	std::iswblank											
std iswcntrl	R	std::iswcntrl											
std iswctype	R	std::iswctype											
std iswdigit	R	std::iswdigit											
std iswgraph	R	std::iswgraph											
std iswlower	R	std::iswlower											
std iswprint	R	std::iswprint											
std iswpunct	R	std::iswpunct											
std iswspace	R	std::iswspace											
std iswupper	R	std::iswupper											
std iswxdigit	R	std::iswxdigit											
std iter swap	R	std::iter_swap											
std iter_swap	R	std::iter_swap											
std iterator	R	std::iterator											
std iterator traits	R	std::iterator_traits											
std iterator_traits	R	std::iterator_traits											
std kill dependency	R	std::kill_dependency											
std kill_dependency	R	std::kill_dependency											
std labs	R	std::labs											
std laguerref	R	std::laguerref											
std launder	R	std::launder											
std lcm	R	std::lcm											
std lconv	R	std::lconv											
std ldiv	R	std::ldiv											
std ldiv t	R	std::ldiv_t											
std ldiv_t	R	std::ldiv_t											
std left	R	std::left											
std legendref	R	std::legendref											
std length error	R	std::length_error											
std length error what	R	std::length_error::what											
std length_error	R	std::length_error											
std length_error what	R	std::length_error::what											
std less	R	std::less											
std less equal	R	std::less_equal											
std less_equal	R	std::less_equal											
std lexicographical compare	R	std::lexicographical_compare											
std lexicographical_compare	R	std::lexicographical_compare											
std linear congruential engine	R	std::linear_congruential_engine											
std linear congruential engine constructor	R	std::linear_congruential_engine::linear_congruential_engine											
std linear congruential engine discard	R	std::linear_congruential_engine::discard											
std linear congruential engine max	R	std::linear_congruential_engine::max											
std linear congruential engine min	R	std::linear_congruential_engine::min											
std linear congruential engine seed	R	std::linear_congruential_engine::seed											
std linear_congruential_engine	R	std::linear_congruential_engine											
std linear_congruential_engine constructor	R	std::linear_congruential_engine::linear_congruential_engine											
std linear_congruential_engine discard	R	std::linear_congruential_engine::discard											
std linear_congruential_engine max	R	std::linear_congruential_engine::max											
std linear_congruential_engine min	R	std::linear_congruential_engine::min											
std linear_congruential_engine seed	R	std::linear_congruential_engine::seed											
std list	R	std::list											
std list assign	R	std::list::assign											
std list back	R	std::list::back											
std list begin	R	std::list::begin											
std list cbegin	R	std::list::cbegin											
std list cend	R	std::list::cend											
std list clear	R	std::list::clear											
std list constructor	R	std::list::list											
std list crbegin	R	std::list::crbegin											
std list crend	R	std::list::crend											
std list emplace	R	std::list::emplace											
std list emplace back	R	std::list::emplace_back											
std list emplace front	R	std::list::emplace_front											
std list emplace_back	R	std::list::emplace_back											
std list emplace_front	R	std::list::emplace_front											
std list empty	R	std::list::empty											
std list end	R	std::list::end											
std list erase	R	std::list::erase											
std list front	R	std::list::front											
std list get allocator	R	std::list::get_allocator											
std list get_allocator	R	std::list::get_allocator											
std list insert	R	std::list::insert											
std list max size	R	std::list::max_size											
std list max_size	R	std::list::max_size											
std list merge	R	std::list::merge											
std list pop back	R	std::list::pop_back											
std list pop front	R	std::list::pop_front											
std list pop_back	R	std::list::pop_back											
std list pop_front	R	std::list::pop_front											
std list push back	R	std::list::push_back											
std list push front	R	std::list::push_front											
std list push_back	R	std::list::push_back											
std list push_front	R	std::list::push_front											
std list rbegin	R	std::list::rbegin											
std list remove	R	std::list::remove											
std list remove if	R	std::list::remove_if											
std list remove_if	R	std::list::remove_if											
std list rend	R	std::list::rend											
std list resize	R	std::list::resize											
std list reverse	R	std::list::reverse											
std list size	R	std::list::size											
std list sort	R	std::list::sort											
std list splice	R	std::list::splice											
std list swap	R	std::list::swap											
std list unique	R	std::list::unique											
std llabs	R	std::llabs											
std lldiv	R	std::lldiv											
std lldiv t	R	std::lldiv_t											
std lldiv_t	R	std::lldiv_t											
std locale	R	std::locale											
std locale classic	R	std::locale::classic											
std locale combine	R	std::locale::combine											
std locale constructor	R	std::locale::locale											
std locale facet	R	std::locale::facet											
std locale facet constructor	R	std::locale::facet::facet											
std locale global	R	std::locale::global											
std locale id	R	std::locale::id											
std locale name	R	std::locale::name											
std localeconv	R	std::localeconv											
std localtime	R	std::localtime											
std lock	R	std::lock											
std lock guard	R	std::lock_guard											
std lock guard constructor	R	std::lock_guard::lock_guard											
std lock_guard	R	std::lock_guard											
std lock_guard constructor	R	std::lock_guard::lock_guard											
std logic error	R	std::logic_error											
std logic error what	R	std::logic_error::what											
std logic_error	R	std::logic_error											
std logic_error what	R	std::logic_error::what											
std logical and	R	std::logical_and											
std logical not	R	std::logical_not											
std logical or	R	std::logical_or											
std logical_and	R	std::logical_and											
std logical_not	R	std::logical_not											
std logical_or	R	std::logical_or											
std lognormal distribution	R	std::lognormal_distribution											
std lognormal distribution constructor	R	std::lognormal_distribution::lognormal_distribution											
std lognormal distribution m	R	std::lognormal_distribution::m											
std lognormal distribution max	R	std::lognormal_distribution::max											
std lognormal distribution min	R	std::lognormal_distribution::min											
std lognormal distribution param	R	std::lognormal_distribution::param											
std lognormal distribution reset	R	std::lognormal_distribution::reset											
std lognormal distribution s	R	std::lognormal_distribution::s											
std lognormal_distribution	R	std::lognormal_distribution											
std lognormal_distribution constructor	R	std::lognormal_distribution::lognormal_distribution											
std lognormal_distribution m	R	std::lognormal_distribution::m											
std lognormal_distribution max	R	std::lognormal_distribution::max											
std lognormal_distribution min	R	std::lognormal_distribution::min											
std lognormal_distribution param	R	std::lognormal_distribution::param											
std lognormal_distribution reset	R	std::lognormal_distribution::reset											
std lognormal_distribution s	R	std::lognormal_distribution::s											
std longjmp	R	std::longjmp											
std lower bound	R	std::lower_bound											
std lower_bound	R	std::lower_bound											
std make any	R	std::make_any											
std make exception ptr	R	std::make_exception_ptr											
std make from tuple	R	std::make_from_tuple											
std make heap	R	std::make_heap											
std make move iterator	R	std::make_move_iterator											
std make pair	R	std::make_pair											
std make reverse iterator	R	std::make_reverse_iterator											
std make shared	R	std::make_shared											
std make signed	R	std::make_signed											
std make tuple	R	std::make_tuple											
std make unique	R	std::make_unique											
std make unsigned	R	std::make_unsigned											
std make_any	R	std::make_any											
std make_exception_ptr	R	std::make_exception_ptr											
std make_from_tuple	R	std::make_from_tuple											
std make_heap	R	std::make_heap											
std make_move_iterator	R	std::make_move_iterator											
std make_pair	R	std::make_pair											
std make_reverse_iterator	R	std::make_reverse_iterator											
std make_shared	R	std::make_shared											
std make_signed	R	std::make_signed											
std make_tuple	R	std::make_tuple											
std make_unique	R	std::make_unique											
std make_unsigned	R	std::make_unsigned											
std malloc	R	std::malloc											
std map	R	std::map											
std map at	R	std::map::at											
std map begin	R	std::map::begin											
std map cbegin	R	std::map::cbegin											
std map cend	R	std::map::cend											
std map clear	R	std::map::clear											
std map constructor	R	std::map::map											
std map count	R	std::map::count											
std map crbegin	R	std::map::crbegin											
std map crend	R	std::map::crend											
std map emplace	R	std::map::emplace											
std map emplace hint	R	std::map::emplace_hint											
std map emplace_hint	R	std::map::emplace_hint											
std map empty	R	std::map::empty											
std map end	R	std::map::end											
std map equal range	R	std::map::equal_range											
std map equal_range	R	std::map::equal_range											
std map erase	R	std::map::erase											
std map get allocator	R	std::map::get_allocator											
std map get_allocator	R	std::map::get_allocator											
std map insert	R	std::map::insert											
std map key comp	R	std::map::key_comp											
std map key_comp	R	std::map::key_comp											
std map max size	R	std::map::max_size											
std map max_size	R	std::map::max_size											
std map merge	R	std::map::merge											
std map rbegin	R	std::map::rbegin											
std map rend	R	std::map::rend											
std map size	R	std::map::size											
std map swap	R	std::map::swap											
std map value comp	R	std::map::value_comp											
std map value compare	R	std::map::value_compare											
std map value_comp	R	std::map::value_comp											
std map value_compare	R	std::map::value_compare											
std mask array	R	std::mask_array											
std mask_array	R	std::mask_array											
std match results	R	std::match_results											
std match results begin	R	std::match_results::begin											
std match results cbegin	R	std::match_results::cbegin											
std match results cend	R	std::match_results::cend											
std match results empty	R	std::match_results::empty											
std match results end	R	std::match_results::end											
std match results format	R	std::match_results::format											
std match results get allocator	R	std::match_results::get_allocator											
std match results length	R	std::match_results::length											
std match results max size	R	std::match_results::max_size											
std match results position	R	std::match_results::position											
std match results prefix	R	std::match_results::prefix											
std match results ready	R	std::match_results::ready											
std match results size	R	std::match_results::size											
std match results str	R	std::match_results::str											
std match results suffix	R	std::match_results::suffix											
std match results swap	R	std::match_results::swap											
std match_results	R	std::match_results											
std match_results begin	R	std::match_results::begin											
std match_results cbegin	R	std::match_results::cbegin											
std match_results cend	R	std::match_results::cend											
std match_results empty	R	std::match_results::empty											
std match_results end	R	std::match_results::end											
std match_results format	R	std::match_results::format											
std match_results get_allocator	R	std::match_results::get_allocator											
std match_results length	R	std::match_results::length											
std match_results max_size	R	std::match_results::max_size											
std match_results position	R	std::match_results::position											
std match_results prefix	R	std::match_results::prefix											
std match_results ready	R	std::match_results::ready											
std match_results size	R	std::match_results::size											
std match_results str	R	std::match_results::str											
std match_results suffix	R	std::match_results::suffix											
std match_results swap	R	std::match_results::swap											
std max	R	std::max											
std max element	R	std::max_element											
std max_element	R	std::max_element											
std mblen	R	std::mblen											
std mbrlen	R	std::mbrlen											
std mbrtoc16	R	std::mbrtoc16											
std mbrtoc32	R	std::mbrtoc32											
std mbrtowc	R	std::mbrtowc											
std mbsinit	R	std::mbsinit											
std mbsrtowcs	R	std::mbsrtowcs											
std mbstate t	R	std::mbstate_t											
std mbstate_t	R	std::mbstate_t											
std mbstowcs	R	std::mbstowcs											
std mbtowc	R	std::mbtowc											
std mem fn	R	std::mem_fn											
std mem_fn	R	std::mem_fn											
std memchr	R	std::memchr											
std memcmp	R	std::memcmp											
std memcpy	R	std::memcpy											
std memmove	R	std::memmove											
std memset	R	std::memset											
std merge	R	std::merge											
std mersenne twister engine	R	std::mersenne_twister_engine											
std mersenne twister engine constructor	R	std::mersenne_twister_engine::mersenne_twister_engine											
std mersenne twister engine discard	R	std::mersenne_twister_engine::discard											
std mersenne twister engine max	R	std::mersenne_twister_engine::max											
std mersenne twister engine min	R	std::mersenne_twister_engine::min											
std mersenne twister engine seed	R	std::mersenne_twister_engine::seed											
std mersenne_twister_engine	R	std::mersenne_twister_engine											
std mersenne_twister_engine constructor	R	std::mersenne_twister_engine::mersenne_twister_engine											
std mersenne_twister_engine discard	R	std::mersenne_twister_engine::discard											
std mersenne_twister_engine max	R	std::mersenne_twister_engine::max											
std mersenne_twister_engine min	R	std::mersenne_twister_engine::min											
std mersenne_twister_engine seed	R	std::mersenne_twister_engine::seed											
std messages	R	std::messages											
std messages base	R	std::messages_base											
std messages byname	R	std::messages_byname											
std messages byname close	R	std::messages_byname::close											
std messages byname do close	R	std::messages_byname::do_close											
std messages byname do get	R	std::messages_byname::do_get											
std messages byname do open	R	std::messages_byname::do_open											
std messages byname get	R	std::messages_byname::get											
std messages byname open	R	std::messages_byname::open											
std messages close	R	std::messages::close											
std messages constructor	R	std::messages::messages											
std messages destructor	R	std::messages::~messages											
std messages do close	R	std::messages::do_close											
std messages do get	R	std::messages::do_get											
std messages do open	R	std::messages::do_open											
std messages do_close	R	std::messages::do_close											
std messages do_get	R	std::messages::do_get											
std messages do_open	R	std::messages::do_open											
std messages get	R	std::messages::get											
std messages open	R	std::messages::open											
std messages_base	R	std::messages_base											
std messages_byname	R	std::messages_byname											
std messages_byname close	R	std::messages_byname::close											
std messages_byname do_close	R	std::messages_byname::do_close											
std messages_byname do_get	R	std::messages_byname::do_get											
std messages_byname do_open	R	std::messages_byname::do_open											
std messages_byname get	R	std::messages_byname::get											
std messages_byname open	R	std::messages_byname::open											
std min	R	std::min											
std min element	R	std::min_element											
std min_element	R	std::min_element											
std minmax	R	std::minmax											
std minmax element	R	std::minmax_element											
std minmax_element	R	std::minmax_element											
std minus	R	std::minus											
std mismatch	R	std::mismatch											
std mktime	R	std::mktime											
std modulus	R	std::modulus											
std money base	R	std::money_base											
std money get	R	std::money_get											
std money get constructor	R	std::money_get::money_get											
std money get destructor	R	std::money_get::~money_get											
std money get do get	R	std::money_get::do_get											
std money get get	R	std::money_get::get											
std money put	R	std::money_put											
std money put constructor	R	std::money_put::money_put											
std money put destructor	R	std::money_put::~money_put											
std money put do put	R	std::money_put::do_put											
std money put put	R	std::money_put::put											
std money_base	R	std::money_base											
std money_get	R	std::money_get											
std money_get constructor	R	std::money_get::money_get											
std money_get destructor	R	std::money_get::~money_get											
std money_get do_get	R	std::money_get::do_get											
std money_get get	R	std::money_get::get											
std money_put	R	std::money_put											
std money_put constructor	R	std::money_put::money_put											
std money_put destructor	R	std::money_put::~money_put											
std money_put do_put	R	std::money_put::do_put											
std money_put put	R	std::money_put::put											
std moneypunct	R	std::moneypunct											
std moneypunct byname	R	std::moneypunct_byname											
std moneypunct byname do positive sign	R	std::moneypunct_byname::do_positive_sign											
std moneypunct constructor	R	std::moneypunct::moneypunct											
std moneypunct curr symbol	R	std::moneypunct::curr_symbol											
std moneypunct curr_symbol	R	std::moneypunct::curr_symbol											
std moneypunct decimal point	R	std::moneypunct::decimal_point											
std moneypunct decimal_point	R	std::moneypunct::decimal_point											
std moneypunct destructor	R	std::moneypunct::~moneypunct											
std moneypunct do curr symbol	R	std::moneypunct::do_curr_symbol											
std moneypunct do decimal point	R	std::moneypunct::do_decimal_point											
std moneypunct do frac digits	R	std::moneypunct::do_frac_digits											
std moneypunct do grouping	R	std::moneypunct::do_grouping											
std moneypunct do neg format	R	std::moneypunct::do_neg_format											
std moneypunct do pos format	R	std::moneypunct::do_pos_format											
std moneypunct do positive sign	R	std::moneypunct::do_positive_sign											
std moneypunct do thousands sep	R	std::moneypunct::do_thousands_sep											
std moneypunct do_curr_symbol	R	std::moneypunct::do_curr_symbol											
std moneypunct do_decimal_point	R	std::moneypunct::do_decimal_point											
std moneypunct do_frac_digits	R	std::moneypunct::do_frac_digits											
std moneypunct do_grouping	R	std::moneypunct::do_grouping											
std moneypunct do_neg_format	R	std::moneypunct::do_neg_format											
std moneypunct do_pos_format	R	std::moneypunct::do_pos_format											
std moneypunct do_positive_sign	R	std::moneypunct::do_positive_sign											
std moneypunct do_thousands_sep	R	std::moneypunct::do_thousands_sep											
std moneypunct frac digits	R	std::moneypunct::frac_digits											
std moneypunct frac_digits	R	std::moneypunct::frac_digits											
std moneypunct grouping	R	std::moneypunct::grouping											
std moneypunct neg format	R	std::moneypunct::neg_format											
std moneypunct neg_format	R	std::moneypunct::neg_format											
std moneypunct negative sign	R	std::moneypunct::negative_sign											
std moneypunct negative_sign	R	std::moneypunct::negative_sign											
std moneypunct pos format	R	std::moneypunct::pos_format											
std moneypunct pos_format	R	std::moneypunct::pos_format											
std moneypunct positive sign	R	std::moneypunct::positive_sign											
std moneypunct positive_sign	R	std::moneypunct::positive_sign											
std moneypunct thousands sep	R	std::moneypunct::thousands_sep											
std moneypunct thousands_sep	R	std::moneypunct::thousands_sep											
std moneypunct_byname	R	std::moneypunct_byname											
std moneypunct_byname do_positive_sign	R	std::moneypunct_byname::do_positive_sign											
std monostate	R	std::monostate											
std move backward	R	std::move_backward											
std move if noexcept	R	std::move_if_noexcept											
std move iterator	R	std::move_iterator											
std move_backward	R	std::move_backward											
std move_if_noexcept	R	std::move_if_noexcept											
std move_iterator	R	std::move_iterator											
std multimap	R	std::multimap											
std multimap begin	R	std::multimap::begin											
std multimap cbegin	R	std::multimap::cbegin											
std multimap cend	R	std::multimap::cend											
std multimap clear	R	std::multimap::clear											
std multimap constructor	R	std::multimap::multimap											
std multimap count	R	std::multimap::count											
std multimap crbegin	R	std::multimap::crbegin											
std multimap crend	R	std::multimap::crend											
std multimap emplace	R	std::multimap::emplace											
std multimap emplace hint	R	std::multimap::emplace_hint											
std multimap emplace_hint	R	std::multimap::emplace_hint											
std multimap empty	R	std::multimap::empty											
std multimap end	R	std::multimap::end											
std multimap equal range	R	std::multimap::equal_range											
std multimap equal_range	R	std::multimap::equal_range											
std multimap erase	R	std::multimap::erase											
std multimap get allocator	R	std::multimap::get_allocator											
std multimap get_allocator	R	std::multimap::get_allocator											
std multimap insert	R	std::multimap::insert											
std multimap key comp	R	std::multimap::key_comp											
std multimap key_comp	R	std::multimap::key_comp											
std multimap max size	R	std::multimap::max_size											
std multimap max_size	R	std::multimap::max_size											
std multimap merge	R	std::multimap::merge											
std multimap rbegin	R	std::multimap::rbegin											
std multimap rend	R	std::multimap::rend											
std multimap size	R	std::multimap::size											
std multimap swap	R	std::multimap::swap											
std multimap value comp	R	std::multimap::value_comp											
std multimap value compare	R	std::multimap::value_compare											
std multimap value_comp	R	std::multimap::value_comp											
std multimap value_compare	R	std::multimap::value_compare											
std multiplies	R	std::multiplies											
std multiset	R	std::multiset											
std multiset begin	R	std::multiset::begin											
std multiset cbegin	R	std::multiset::cbegin											
std multiset cend	R	std::multiset::cend											
std multiset clear	R	std::multiset::clear											
std multiset constructor	R	std::multiset::multiset											
std multiset count	R	std::multiset::count											
std multiset crbegin	R	std::multiset::crbegin											
std multiset crend	R	std::multiset::crend											
std multiset emplace	R	std::multiset::emplace											
std multiset emplace hint	R	std::multiset::emplace_hint											
std multiset emplace_hint	R	std::multiset::emplace_hint											
std multiset empty	R	std::multiset::empty											
std multiset end	R	std::multiset::end											
std multiset equal range	R	std::multiset::equal_range											
std multiset equal_range	R	std::multiset::equal_range											
std multiset erase	R	std::multiset::erase											
std multiset get allocator	R	std::multiset::get_allocator											
std multiset get_allocator	R	std::multiset::get_allocator											
std multiset insert	R	std::multiset::insert											
std multiset key comp	R	std::multiset::key_comp											
std multiset key_comp	R	std::multiset::key_comp											
std multiset max size	R	std::multiset::max_size											
std multiset max_size	R	std::multiset::max_size											
std multiset merge	R	std::multiset::merge											
std multiset rbegin	R	std::multiset::rbegin											
std multiset rend	R	std::multiset::rend											
std multiset size	R	std::multiset::size											
std multiset swap	R	std::multiset::swap											
std multiset value comp	R	std::multiset::value_comp											
std multiset value_comp	R	std::multiset::value_comp											
std mutex	R	std::mutex											
std mutex constructor	R	std::mutex::mutex											
std mutex lock	R	std::mutex::lock											
std mutex native handle	R	std::mutex::native_handle											
std mutex native_handle	R	std::mutex::native_handle											
std mutex try lock	R	std::mutex::try_lock											
std mutex try_lock	R	std::mutex::try_lock											
std mutex unlock	R	std::mutex::unlock											
std nan	R	std::nan											
std nanf	R	std::nanf											
std nanl	R	std::nanl											
std negate	R	std::negate											
std negation	R	std::negation											
std negative binomial distribution	R	std::negative_binomial_distribution											
std negative binomial distribution constructor	R	std::negative_binomial_distribution::negative_binomial_distribution											
std negative binomial distribution k	R	std::negative_binomial_distribution::k											
std negative binomial distribution max	R	std::negative_binomial_distribution::max											
std negative binomial distribution min	R	std::negative_binomial_distribution::min											
std negative binomial distribution p	R	std::negative_binomial_distribution::p											
std negative binomial distribution param	R	std::negative_binomial_distribution::param											
std negative binomial distribution reset	R	std::negative_binomial_distribution::reset											
std negative_binomial_distribution	R	std::negative_binomial_distribution											
std negative_binomial_distribution constructor	R	std::negative_binomial_distribution::negative_binomial_distribution											
std negative_binomial_distribution k	R	std::negative_binomial_distribution::k											
std negative_binomial_distribution max	R	std::negative_binomial_distribution::max											
std negative_binomial_distribution min	R	std::negative_binomial_distribution::min											
std negative_binomial_distribution p	R	std::negative_binomial_distribution::p											
std negative_binomial_distribution param	R	std::negative_binomial_distribution::param											
std negative_binomial_distribution reset	R	std::negative_binomial_distribution::reset											
std nested exception	R	std::nested_exception											
std nested exception constructor	R	std::nested_exception::nested_exception											
std nested exception destructor	R	std::nested_exception::~nested_exception											
std nested exception nested ptr	R	std::nested_exception::nested_ptr											
std nested exception rethrow nested	R	std::nested_exception::rethrow_nested											
std nested_exception	R	std::nested_exception											
std nested_exception constructor	R	std::nested_exception::nested_exception											
std nested_exception destructor	R	std::nested_exception::~nested_exception											
std nested_exception nested_ptr	R	std::nested_exception::nested_ptr											
std nested_exception rethrow_nested	R	std::nested_exception::rethrow_nested											
std next	R	std::next											
std next permutation	R	std::next_permutation											
std next_permutation	R	std::next_permutation											
std nextafter	R	std::nextafter											
std nexttoward	R	std::nexttoward											
std noboolalpha	R	std::noboolalpha											
std normal distribution	R	std::normal_distribution											
std normal distribution constructor	R	std::normal_distribution::normal_distribution											
std normal distribution max	R	std::normal_distribution::max											
std normal distribution mean	R	std::normal_distribution::mean											
std normal distribution min	R	std::normal_distribution::min											
std normal distribution param	R	std::normal_distribution::param											
std normal distribution reset	R	std::normal_distribution::reset											
std normal distribution stddev	R	std::normal_distribution::stddev											
std normal_distribution	R	std::normal_distribution											
std normal_distribution constructor	R	std::normal_distribution::normal_distribution											
std normal_distribution max	R	std::normal_distribution::max											
std normal_distribution mean	R	std::normal_distribution::mean											
std normal_distribution min	R	std::normal_distribution::min											
std normal_distribution param	R	std::normal_distribution::param											
std normal_distribution reset	R	std::normal_distribution::reset											
std normal_distribution stddev	R	std::normal_distribution::stddev											
std noshowbase	R	std::noshowbase											
std noshowpoint	R	std::noshowpoint											
std noshowpos	R	std::noshowpos											
std noskipws	R	std::noskipws											
std not equal to	R	std::not_equal_to											
std not fn	R	std::not_fn											
std not1	R	std::not1											
std not2	R	std::not2											
std not_equal_to	R	std::not_equal_to											
std not_fn	R	std::not_fn											
std nothrow t	R	std::nothrow_t											
std nothrow_t	R	std::nothrow_t											
std notify all at thread exit	R	std::notify_all_at_thread_exit											
std notify_all_at_thread_exit	R	std::notify_all_at_thread_exit											
std nounitbuf	R	std::nounitbuf											
std nouppercase	R	std::nouppercase											
std nth element	R	std::nth_element											
std nth_element	R	std::nth_element											
std nullopt t	R	std::nullopt_t											
std nullopt_t	R	std::nullopt_t											
std num get	R	std::num_get											
std num get constructor	R	std::num_get::num_get											
std num get destructor	R	std::num_get::~num_get											
std num put	R	std::num_put											
std num put constructor	R	std::num_put::num_put											
std num put destructor	R	std::num_put::~num_put											
std num_get	R	std::num_get											
std num_get constructor	R	std::num_get::num_get											
std num_get destructor	R	std::num_get::~num_get											
std num_put	R	std::num_put											
std num_put constructor	R	std::num_put::num_put											
std num_put destructor	R	std::num_put::~num_put											
std numeric limits	R	std::numeric_limits											
std numeric limits denorm min	R	std::numeric_limits::denorm_min											
std numeric limits epsilon	R	std::numeric_limits::epsilon											
std numeric limits infinity	R	std::numeric_limits::infinity											
std numeric limits lowest	R	std::numeric_limits::lowest											
std numeric limits max	R	std::numeric_limits::max											
std numeric limits min	R	std::numeric_limits::min											
std numeric limits quiet NaN	R	std::numeric_limits::quiet_NaN											
std numeric limits round error	R	std::numeric_limits::round_error											
std numeric limits signaling NaN	R	std::numeric_limits::signaling_NaN											
std numeric_limits	R	std::numeric_limits											
std numeric_limits denorm_min	R	std::numeric_limits::denorm_min											
std numeric_limits epsilon	R	std::numeric_limits::epsilon											
std numeric_limits infinity	R	std::numeric_limits::infinity											
std numeric_limits lowest	R	std::numeric_limits::lowest											
std numeric_limits max	R	std::numeric_limits::max											
std numeric_limits min	R	std::numeric_limits::min											
std numeric_limits quiet_NaN	R	std::numeric_limits::quiet_NaN											
std numeric_limits round_error	R	std::numeric_limits::round_error											
std numeric_limits signaling_NaN	R	std::numeric_limits::signaling_NaN											
std numpunct	R	std::numpunct											
std numpunct byname	R	std::numpunct_byname											
std numpunct constructor	R	std::numpunct::numpunct											
std numpunct decimal point	R	std::numpunct::decimal_point											
std numpunct decimal_point	R	std::numpunct::decimal_point											
std numpunct destructor	R	std::numpunct::~numpunct											
std numpunct do decimal point	R	std::numpunct::do_decimal_point											
std numpunct do falsename	R	std::numpunct::do_falsename											
std numpunct do grouping	R	std::numpunct::do_grouping											
std numpunct do thousands sep	R	std::numpunct::do_thousands_sep											
std numpunct do truename	R	std::numpunct::do_truename											
std numpunct do_decimal_point	R	std::numpunct::do_decimal_point											
std numpunct do_falsename	R	std::numpunct::do_falsename											
std numpunct do_grouping	R	std::numpunct::do_grouping											
std numpunct do_thousands_sep	R	std::numpunct::do_thousands_sep											
std numpunct do_truename	R	std::numpunct::do_truename											
std numpunct falsename	R	std::numpunct::falsename											
std numpunct grouping	R	std::numpunct::grouping											
std numpunct thousands sep	R	std::numpunct::thousands_sep											
std numpunct thousands_sep	R	std::numpunct::thousands_sep											
std numpunct_byname	R	std::numpunct_byname											
std oct	R	std::oct											
std once flag	R	std::once_flag											
std once_flag	R	std::once_flag											
std optional	R	std::optional											
std optional constructor	R	std::optional::optional											
std optional emplace	R	std::optional::emplace											
std optional has value	R	std::optional::has_value											
std optional has_value	R	std::optional::has_value											
std optional reset	R	std::optional::reset											
std optional swap	R	std::optional::swap											
std optional value	R	std::optional::value											
std optional value or	R	std::optional::value_or											
std optional value_or	R	std::optional::value_or											
std ostream iterator	R	std::ostream_iterator											
std ostream_iterator	R	std::ostream_iterator											
std ostreambuf iterator	R	std::ostreambuf_iterator											
std ostreambuf_iterator	R	std::ostreambuf_iterator											
std ostrstream	R	std::ostrstream											
std ostrstream Init	R	std::ostrstream::Init											
std ostrstream bad	R	std::ostrstream::bad											
std ostrstream clear	R	std::ostrstream::clear											
std ostrstream copyfmt	R	std::ostrstream::copyfmt											
std ostrstream destructor	R	std::ostrstream::~ostrstream											
std ostrstream eof	R	std::ostrstream::eof											
std ostrstream exceptions	R	std::ostrstream::exceptions											
std ostrstream fail	R	std::ostrstream::fail											
std ostrstream failure	R	std::ostrstream::failure											
std ostrstream failure what	R	std::ostrstream::failure::what											
std ostrstream fill	R	std::ostrstream::fill											
std ostrstream flags	R	std::ostrstream::flags											
std ostrstream flush	R	std::ostrstream::flush											
std ostrstream freeze	R	std::ostrstream::freeze											
std ostrstream getloc	R	std::ostrstream::getloc											
std ostrstream good	R	std::ostrstream::good											
std ostrstream init	R	std::ostrstream::init											
std ostrstream iword	R	std::ostrstream::iword											
std ostrstream move	R	std::ostrstream::move											
std ostrstream narrow	R	std::ostrstream::narrow											
std ostrstream pcount	R	std::ostrstream::pcount											
std ostrstream precision	R	std::ostrstream::precision											
std ostrstream put	R	std::ostrstream::put											
std ostrstream pword	R	std::ostrstream::pword											
std ostrstream rdstate	R	std::ostrstream::rdstate											
std ostrstream register callback	R	std::ostrstream::register_callback											
std ostrstream register_callback	R	std::ostrstream::register_callback											
std ostrstream seekp	R	std::ostrstream::seekp											
std ostrstream sentry	R	std::ostrstream::sentry											
std ostrstream set rdbuf	R	std::ostrstream::set_rdbuf											
std ostrstream set_rdbuf	R	std::ostrstream::set_rdbuf											
std ostrstream setf	R	std::ostrstream::setf											
std ostrstream setstate	R	std::ostrstream::setstate											
std ostrstream str	R	std::ostrstream::str											
std ostrstream swap	R	std::ostrstream::swap											
std ostrstream sync with stdio	R	std::ostrstream::sync_with_stdio											
std ostrstream sync_with_stdio	R	std::ostrstream::sync_with_stdio											
std ostrstream tellp	R	std::ostrstream::tellp											
std ostrstream tie	R	std::ostrstream::tie											
std ostrstream unsetf	R	std::ostrstream::unsetf											
std ostrstream widen	R	std::ostrstream::widen											
std ostrstream width	R	std::ostrstream::width											
std ostrstream write	R	std::ostrstream::write											
std ostrstream xalloc	R	std::ostrstream::xalloc											
std out of range	R	std::out_of_range											
std out of range what	R	std::out_of_range::what											
std out_of_range	R	std::out_of_range											
std out_of_range what	R	std::out_of_range::what											
std output iterator tag	R	std::output_iterator_tag											
std output_iterator_tag	R	std::output_iterator_tag											
std overflow error	R	std::overflow_error											
std overflow error what	R	std::overflow_error::what											
std overflow_error	R	std::overflow_error											
std overflow_error what	R	std::overflow_error::what											
std owner less	R	std::owner_less											
std owner_less	R	std::owner_less											
std packaged task	R	std::packaged_task											
std packaged task constructor	R	std::packaged_task::packaged_task											
std packaged task get future	R	std::packaged_task::get_future											
std packaged task make ready at thread exit	R	std::packaged_task::make_ready_at_thread_exit											
std packaged task reset	R	std::packaged_task::reset											
std packaged task swap	R	std::packaged_task::swap											
std packaged task valid	R	std::packaged_task::valid											
std packaged_task	R	std::packaged_task											
std packaged_task constructor	R	std::packaged_task::packaged_task											
std packaged_task get_future	R	std::packaged_task::get_future											
std packaged_task make_ready_at_thread_exit	R	std::packaged_task::make_ready_at_thread_exit											
std packaged_task reset	R	std::packaged_task::reset											
std packaged_task swap	R	std::packaged_task::swap											
std packaged_task valid	R	std::packaged_task::valid											
std pair	R	std::pair											
std pair constructor	R	std::pair::pair											
std pair swap	R	std::pair::swap											
std partial sort	R	std::partial_sort											
std partial sort copy	R	std::partial_sort_copy											
std partial sum	R	std::partial_sum											
std partial_sort	R	std::partial_sort											
std partial_sort_copy	R	std::partial_sort_copy											
std partial_sum	R	std::partial_sum											
std partition	R	std::partition											
std partition point	R	std::partition_point											
std partition_point	R	std::partition_point											
std perror	R	std::perror											
std piecewise constant distribution	R	std::piecewise_constant_distribution											
std piecewise constant distribution constructor	R	std::piecewise_constant_distribution::piecewise_constant_distribution											
std piecewise constant distribution densities	R	std::piecewise_constant_distribution::densities											
std piecewise constant distribution intervals	R	std::piecewise_constant_distribution::intervals											
std piecewise constant distribution max	R	std::piecewise_constant_distribution::max											
std piecewise constant distribution min	R	std::piecewise_constant_distribution::min											
std piecewise constant distribution param	R	std::piecewise_constant_distribution::param											
std piecewise constant distribution reset	R	std::piecewise_constant_distribution::reset											
std piecewise construct t	R	std::piecewise_construct_t											
std piecewise linear distribution	R	std::piecewise_linear_distribution											
std piecewise linear distribution constructor	R	std::piecewise_linear_distribution::piecewise_linear_distribution											
std piecewise linear distribution densities	R	std::piecewise_linear_distribution::densities											
std piecewise linear distribution intervals	R	std::piecewise_linear_distribution::intervals											
std piecewise linear distribution max	R	std::piecewise_linear_distribution::max											
std piecewise linear distribution min	R	std::piecewise_linear_distribution::min											
std piecewise linear distribution param	R	std::piecewise_linear_distribution::param											
std piecewise linear distribution reset	R	std::piecewise_linear_distribution::reset											
std piecewise_constant_distribution	R	std::piecewise_constant_distribution											
std piecewise_constant_distribution constructor	R	std::piecewise_constant_distribution::piecewise_constant_distribution											
std piecewise_constant_distribution densities	R	std::piecewise_constant_distribution::densities											
std piecewise_constant_distribution intervals	R	std::piecewise_constant_distribution::intervals											
std piecewise_constant_distribution max	R	std::piecewise_constant_distribution::max											
std piecewise_constant_distribution min	R	std::piecewise_constant_distribution::min											
std piecewise_constant_distribution param	R	std::piecewise_constant_distribution::param											
std piecewise_constant_distribution reset	R	std::piecewise_constant_distribution::reset											
std piecewise_construct_t	R	std::piecewise_construct_t											
std piecewise_linear_distribution	R	std::piecewise_linear_distribution											
std piecewise_linear_distribution constructor	R	std::piecewise_linear_distribution::piecewise_linear_distribution											
std piecewise_linear_distribution densities	R	std::piecewise_linear_distribution::densities											
std piecewise_linear_distribution intervals	R	std::piecewise_linear_distribution::intervals											
std piecewise_linear_distribution max	R	std::piecewise_linear_distribution::max											
std piecewise_linear_distribution min	R	std::piecewise_linear_distribution::min											
std piecewise_linear_distribution param	R	std::piecewise_linear_distribution::param											
std piecewise_linear_distribution reset	R	std::piecewise_linear_distribution::reset											
std plus	R	std::plus											
std pmr get default resource	R	std::pmr::get_default_resource											
std pmr get_default_resource	R	std::pmr::get_default_resource											
std pmr memory resource	R	std::pmr::memory_resource											
std pmr memory resource allocate	R	std::pmr::memory_resource::allocate											
std pmr memory resource constructor	R	std::pmr::memory_resource::memory_resource											
std pmr memory resource deallocate	R	std::pmr::memory_resource::deallocate											
std pmr memory resource do allocate	R	std::pmr::memory_resource::do_allocate											
std pmr memory resource do deallocate	R	std::pmr::memory_resource::do_deallocate											
std pmr memory resource is equal	R	std::pmr::memory_resource::is_equal											
std pmr memory_resource	R	std::pmr::memory_resource											
std pmr memory_resource allocate	R	std::pmr::memory_resource::allocate											
std pmr memory_resource constructor	R	std::pmr::memory_resource::memory_resource											
std pmr memory_resource deallocate	R	std::pmr::memory_resource::deallocate											
std pmr memory_resource do_allocate	R	std::pmr::memory_resource::do_allocate											
std pmr memory_resource do_deallocate	R	std::pmr::memory_resource::do_deallocate											
std pmr memory_resource is_equal	R	std::pmr::memory_resource::is_equal											
std pmr monotonic buffer resource	R	std::pmr::monotonic_buffer_resource											
std pmr monotonic buffer resource allocate	R	std::pmr::monotonic_buffer_resource::allocate											
std pmr monotonic buffer resource constructor	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
std pmr monotonic buffer resource deallocate	R	std::pmr::monotonic_buffer_resource::deallocate											
std pmr monotonic buffer resource do is equal	R	std::pmr::monotonic_buffer_resource::do_is_equal											
std pmr monotonic buffer resource is equal	R	std::pmr::monotonic_buffer_resource::is_equal											
std pmr monotonic buffer resource release	R	std::pmr::monotonic_buffer_resource::release											
std pmr monotonic buffer resource upstream resource	R	std::pmr::monotonic_buffer_resource::upstream_resource											
std pmr monotonic_buffer_resource	R	std::pmr::monotonic_buffer_resource											
std pmr monotonic_buffer_resource allocate	R	std::pmr::monotonic_buffer_resource::allocate											
std pmr monotonic_buffer_resource constructor	R	std::pmr::monotonic_buffer_resource::monotonic_buffer_resource											
std pmr monotonic_buffer_resource deallocate	R	std::pmr::monotonic_buffer_resource::deallocate											
std pmr monotonic_buffer_resource do_is_equal	R	std::pmr::monotonic_buffer_resource::do_is_equal											
std pmr monotonic_buffer_resource is_equal	R	std::pmr::monotonic_buffer_resource::is_equal											
std pmr monotonic_buffer_resource release	R	std::pmr::monotonic_buffer_resource::release											
std pmr monotonic_buffer_resource upstream_resource	R	std::pmr::monotonic_buffer_resource::upstream_resource											
std pmr new delete resource	R	std::pmr::new_delete_resource											
std pmr new_delete_resource	R	std::pmr::new_delete_resource											
std pmr null memory resource	R	std::pmr::null_memory_resource											
std pmr null_memory_resource	R	std::pmr::null_memory_resource											
std pmr polymorphic allocator	R	std::pmr::polymorphic_allocator											
std pmr polymorphic allocator allocate	R	std::pmr::polymorphic_allocator::allocate											
std pmr polymorphic allocator construct	R	std::pmr::polymorphic_allocator::construct											
std pmr polymorphic allocator constructor	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
std pmr polymorphic allocator deallocate	R	std::pmr::polymorphic_allocator::deallocate											
std pmr polymorphic allocator destroy	R	std::pmr::polymorphic_allocator::destroy											
std pmr polymorphic allocator resource	R	std::pmr::polymorphic_allocator::resource											
std pmr polymorphic_allocator	R	std::pmr::polymorphic_allocator											
std pmr polymorphic_allocator allocate	R	std::pmr::polymorphic_allocator::allocate											
std pmr polymorphic_allocator construct	R	std::pmr::polymorphic_allocator::construct											
std pmr polymorphic_allocator constructor	R	std::pmr::polymorphic_allocator::polymorphic_allocator											
std pmr polymorphic_allocator deallocate	R	std::pmr::polymorphic_allocator::deallocate											
std pmr polymorphic_allocator destroy	R	std::pmr::polymorphic_allocator::destroy											
std pmr polymorphic_allocator resource	R	std::pmr::polymorphic_allocator::resource											
std pmr pool options	R	std::pmr::pool_options											
std pmr pool_options	R	std::pmr::pool_options											
std pmr set default resource	R	std::pmr::set_default_resource											
std pmr set_default_resource	R	std::pmr::set_default_resource											
std pmr synchronized pool resource	R	std::pmr::synchronized_pool_resource											
std pmr synchronized pool resource allocate	R	std::pmr::synchronized_pool_resource::allocate											
std pmr synchronized pool resource constructor	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
std pmr synchronized pool resource deallocate	R	std::pmr::synchronized_pool_resource::deallocate											
std pmr synchronized pool resource do is equal	R	std::pmr::synchronized_pool_resource::do_is_equal											
std pmr synchronized pool resource is equal	R	std::pmr::synchronized_pool_resource::is_equal											
std pmr synchronized pool resource options	R	std::pmr::synchronized_pool_resource::options											
std pmr synchronized pool resource release	R	std::pmr::synchronized_pool_resource::release											
std pmr synchronized pool resource upstream resource	R	std::pmr::synchronized_pool_resource::upstream_resource											
std pmr synchronized_pool_resource	R	std::pmr::synchronized_pool_resource											
std pmr synchronized_pool_resource allocate	R	std::pmr::synchronized_pool_resource::allocate											
std pmr synchronized_pool_resource constructor	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
std pmr synchronized_pool_resource deallocate	R	std::pmr::synchronized_pool_resource::deallocate											
std pmr synchronized_pool_resource do_is_equal	R	std::pmr::synchronized_pool_resource::do_is_equal											
std pmr synchronized_pool_resource is_equal	R	std::pmr::synchronized_pool_resource::is_equal											
std pmr synchronized_pool_resource options	R	std::pmr::synchronized_pool_resource::options											
std pmr synchronized_pool_resource release	R	std::pmr::synchronized_pool_resource::release											
std pmr synchronized_pool_resource upstream_resource	R	std::pmr::synchronized_pool_resource::upstream_resource											
std pmr unsynchronized pool resource	R	std::pmr::unsynchronized_pool_resource											
std pmr unsynchronized pool resource allocate	R	std::pmr::unsynchronized_pool_resource::allocate											
std pmr unsynchronized pool resource constructor	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
std pmr unsynchronized pool resource deallocate	R	std::pmr::unsynchronized_pool_resource::deallocate											
std pmr unsynchronized pool resource do is equal	R	std::pmr::unsynchronized_pool_resource::do_is_equal											
std pmr unsynchronized pool resource is equal	R	std::pmr::unsynchronized_pool_resource::is_equal											
std pmr unsynchronized pool resource options	R	std::pmr::unsynchronized_pool_resource::options											
std pmr unsynchronized pool resource release	R	std::pmr::unsynchronized_pool_resource::release											
std pmr unsynchronized pool resource upstream resource	R	std::pmr::unsynchronized_pool_resource::upstream_resource											
std pmr unsynchronized_pool_resource	R	std::pmr::unsynchronized_pool_resource											
std pmr unsynchronized_pool_resource allocate	R	std::pmr::unsynchronized_pool_resource::allocate											
std pmr unsynchronized_pool_resource constructor	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
std pmr unsynchronized_pool_resource deallocate	R	std::pmr::unsynchronized_pool_resource::deallocate											
std pmr unsynchronized_pool_resource do_is_equal	R	std::pmr::unsynchronized_pool_resource::do_is_equal											
std pmr unsynchronized_pool_resource is_equal	R	std::pmr::unsynchronized_pool_resource::is_equal											
std pmr unsynchronized_pool_resource options	R	std::pmr::unsynchronized_pool_resource::options											
std pmr unsynchronized_pool_resource release	R	std::pmr::unsynchronized_pool_resource::release											
std pmr unsynchronized_pool_resource upstream_resource	R	std::pmr::unsynchronized_pool_resource::upstream_resource											
std pointer safety	R	std::pointer_safety											
std pointer traits	R	std::pointer_traits											
std pointer traits pointer to	R	std::pointer_traits::pointer_to											
std pointer_safety	R	std::pointer_safety											
std pointer_traits	R	std::pointer_traits											
std pointer_traits pointer_to	R	std::pointer_traits::pointer_to											
std poisson distribution	R	std::poisson_distribution											
std poisson distribution constructor	R	std::poisson_distribution::poisson_distribution											
std poisson distribution max	R	std::poisson_distribution::max											
std poisson distribution mean	R	std::poisson_distribution::mean											
std poisson distribution min	R	std::poisson_distribution::min											
std poisson distribution param	R	std::poisson_distribution::param											
std poisson distribution reset	R	std::poisson_distribution::reset											
std poisson_distribution	R	std::poisson_distribution											
std poisson_distribution constructor	R	std::poisson_distribution::poisson_distribution											
std poisson_distribution max	R	std::poisson_distribution::max											
std poisson_distribution mean	R	std::poisson_distribution::mean											
std poisson_distribution min	R	std::poisson_distribution::min											
std poisson_distribution param	R	std::poisson_distribution::param											
std poisson_distribution reset	R	std::poisson_distribution::reset											
std pop heap	R	std::pop_heap											
std pop_heap	R	std::pop_heap											
std prev	R	std::prev											
std prev permutation	R	std::prev_permutation											
std prev_permutation	R	std::prev_permutation											
std printf	R	std::printf											
std priority queue	R	std::priority_queue											
std priority queue constructor	R	std::priority_queue::priority_queue											
std priority queue emplace	R	std::priority_queue::emplace											
std priority queue empty	R	std::priority_queue::empty											
std priority queue pop	R	std::priority_queue::pop											
std priority queue push	R	std::priority_queue::push											
std priority queue size	R	std::priority_queue::size											
std priority queue swap	R	std::priority_queue::swap											
std priority queue top	R	std::priority_queue::top											
std priority_queue	R	std::priority_queue											
std priority_queue constructor	R	std::priority_queue::priority_queue											
std priority_queue emplace	R	std::priority_queue::emplace											
std priority_queue empty	R	std::priority_queue::empty											
std priority_queue pop	R	std::priority_queue::pop											
std priority_queue push	R	std::priority_queue::push											
std priority_queue size	R	std::priority_queue::size											
std priority_queue swap	R	std::priority_queue::swap											
std priority_queue top	R	std::priority_queue::top											
std promise constructor	R	std::promise::promise											
std promise get future	R	std::promise::get_future											
std promise get_future	R	std::promise::get_future											
std promise set exception	R	std::promise::set_exception											
std promise set exception at thread exit	R	std::promise::set_exception_at_thread_exit											
std promise set value	R	std::promise::set_value											
std promise set value at thread exit	R	std::promise::set_value_at_thread_exit											
std promise set_exception	R	std::promise::set_exception											
std promise set_exception_at_thread_exit	R	std::promise::set_exception_at_thread_exit											
std promise set_value	R	std::promise::set_value											
std promise set_value_at_thread_exit	R	std::promise::set_value_at_thread_exit											
std promise swap	R	std::promise::swap											
std push heap	R	std::push_heap											
std push_heap	R	std::push_heap											
std put money	R	std::put_money											
std put time	R	std::put_time											
std put_money	R	std::put_money											
std put_time	R	std::put_time											
std putc	R	std::putc											
std putchar	R	std::putchar											
std puts	R	std::puts											
std putwchar	R	std::putwchar											
std qsort	R	std::qsort											
std queue	R	std::queue											
std queue back	R	std::queue::back											
std queue constructor	R	std::queue::queue											
std queue emplace	R	std::queue::emplace											
std queue empty	R	std::queue::empty											
std queue front	R	std::queue::front											
std queue pop	R	std::queue::pop											
std queue push	R	std::queue::push											
std queue size	R	std::queue::size											
std queue swap	R	std::queue::swap											
std quick exit	R	std::quick_exit											
std quick_exit	R	std::quick_exit											
std quoted	R	std::quoted											
std raise	R	std::raise											
std rand	R	std::rand											
std random access iterator tag	R	std::random_access_iterator_tag											
std random device	R	std::random_device											
std random device constructor	R	std::random_device::random_device											
std random device entropy	R	std::random_device::entropy											
std random device max	R	std::random_device::max											
std random device min	R	std::random_device::min											
std random shuffle	R	std::random_shuffle											
std random_access_iterator_tag	R	std::random_access_iterator_tag											
std random_device	R	std::random_device											
std random_device constructor	R	std::random_device::random_device											
std random_device entropy	R	std::random_device::entropy											
std random_device max	R	std::random_device::max											
std random_device min	R	std::random_device::min											
std random_shuffle	R	std::random_shuffle											
std range error	R	std::range_error											
std range error what	R	std::range_error::what											
std range_error	R	std::range_error											
std range_error what	R	std::range_error::what											
std rank	R	std::rank											
std ratio	R	std::ratio											
std ratio add	R	std::ratio_add											
std ratio divide	R	std::ratio_divide											
std ratio equal	R	std::ratio_equal											
std ratio greater	R	std::ratio_greater											
std ratio greater equal	R	std::ratio_greater_equal											
std ratio less	R	std::ratio_less											
std ratio less equal	R	std::ratio_less_equal											
std ratio multiply	R	std::ratio_multiply											
std ratio not equal	R	std::ratio_not_equal											
std ratio subtract	R	std::ratio_subtract											
std ratio_add	R	std::ratio_add											
std ratio_divide	R	std::ratio_divide											
std ratio_equal	R	std::ratio_equal											
std ratio_greater	R	std::ratio_greater											
std ratio_greater_equal	R	std::ratio_greater_equal											
std ratio_less	R	std::ratio_less											
std ratio_less_equal	R	std::ratio_less_equal											
std ratio_multiply	R	std::ratio_multiply											
std ratio_not_equal	R	std::ratio_not_equal											
std ratio_subtract	R	std::ratio_subtract											
std raw storage iterator	R	std::raw_storage_iterator											
std raw storage iterator constructor	R	std::raw_storage_iterator::raw_storage_iterator											
std raw_storage_iterator	R	std::raw_storage_iterator											
std raw_storage_iterator constructor	R	std::raw_storage_iterator::raw_storage_iterator											
std rbegin	R	std::rbegin											
std realloc	R	std::realloc											
std recursive mutex	R	std::recursive_mutex											
std recursive mutex lock	R	std::recursive_mutex::lock											
std recursive mutex native handle	R	std::recursive_mutex::native_handle											
std recursive mutex try lock	R	std::recursive_mutex::try_lock											
std recursive mutex unlock	R	std::recursive_mutex::unlock											
std recursive timed mutex	R	std::recursive_timed_mutex											
std recursive timed mutex lock	R	std::recursive_timed_mutex::lock											
std recursive timed mutex native handle	R	std::recursive_timed_mutex::native_handle											
std recursive timed mutex try lock	R	std::recursive_timed_mutex::try_lock											
std recursive timed mutex try lock for	R	std::recursive_timed_mutex::try_lock_for											
std recursive timed mutex try lock until	R	std::recursive_timed_mutex::try_lock_until											
std recursive timed mutex unlock	R	std::recursive_timed_mutex::unlock											
std recursive_mutex	R	std::recursive_mutex											
std recursive_mutex lock	R	std::recursive_mutex::lock											
std recursive_mutex native_handle	R	std::recursive_mutex::native_handle											
std recursive_mutex try_lock	R	std::recursive_mutex::try_lock											
std recursive_mutex unlock	R	std::recursive_mutex::unlock											
std recursive_timed_mutex	R	std::recursive_timed_mutex											
std recursive_timed_mutex lock	R	std::recursive_timed_mutex::lock											
std recursive_timed_mutex native_handle	R	std::recursive_timed_mutex::native_handle											
std recursive_timed_mutex try_lock	R	std::recursive_timed_mutex::try_lock											
std recursive_timed_mutex try_lock_for	R	std::recursive_timed_mutex::try_lock_for											
std recursive_timed_mutex try_lock_until	R	std::recursive_timed_mutex::try_lock_until											
std recursive_timed_mutex unlock	R	std::recursive_timed_mutex::unlock											
std ref	R	std::ref											
std reference wrapper	R	std::reference_wrapper											
std reference wrapper constructor	R	std::reference_wrapper::reference_wrapper											
std reference wrapper get	R	std::reference_wrapper::get											
std reference_wrapper	R	std::reference_wrapper											
std reference_wrapper constructor	R	std::reference_wrapper::reference_wrapper											
std reference_wrapper get	R	std::reference_wrapper::get											
std regex error	R	std::regex_error											
std regex error code	R	std::regex_error::code											
std regex error what	R	std::regex_error::what											
std regex iterator constructor	R	std::regex_iterator::regex_iterator											
std regex match	R	std::regex_match											
std regex replace	R	std::regex_replace											
std regex search	R	std::regex_search											
std regex token iterator constructor	R	std::regex_token_iterator::regex_token_iterator											
std regex traits	R	std::regex_traits											
std regex traits getloc	R	std::regex_traits::getloc											
std regex traits imbue	R	std::regex_traits::imbue											
std regex traits isctype	R	std::regex_traits::isctype											
std regex traits length	R	std::regex_traits::length											
std regex traits lookup classname	R	std::regex_traits::lookup_classname											
std regex traits lookup collatename	R	std::regex_traits::lookup_collatename											
std regex traits transform	R	std::regex_traits::transform											
std regex traits transform primary	R	std::regex_traits::transform_primary											
std regex traits translate	R	std::regex_traits::translate											
std regex traits translate nocase	R	std::regex_traits::translate_nocase											
std regex traits value	R	std::regex_traits::value											
std regex_error	R	std::regex_error											
std regex_error code	R	std::regex_error::code											
std regex_error what	R	std::regex_error::what											
std regex_iterator constructor	R	std::regex_iterator::regex_iterator											
std regex_match	R	std::regex_match											
std regex_replace	R	std::regex_replace											
std regex_search	R	std::regex_search											
std regex_token_iterator constructor	R	std::regex_token_iterator::regex_token_iterator											
std regex_traits	R	std::regex_traits											
std regex_traits getloc	R	std::regex_traits::getloc											
std regex_traits imbue	R	std::regex_traits::imbue											
std regex_traits isctype	R	std::regex_traits::isctype											
std regex_traits length	R	std::regex_traits::length											
std regex_traits lookup_classname	R	std::regex_traits::lookup_classname											
std regex_traits lookup_collatename	R	std::regex_traits::lookup_collatename											
std regex_traits transform	R	std::regex_traits::transform											
std regex_traits transform_primary	R	std::regex_traits::transform_primary											
std regex_traits translate	R	std::regex_traits::translate											
std regex_traits translate_nocase	R	std::regex_traits::translate_nocase											
std regex_traits value	R	std::regex_traits::value											
std remove all extents	R	std::remove_all_extents											
std remove const	R	std::remove_const											
std remove copy	R	std::remove_copy											
std remove copy if	R	std::remove_copy_if											
std remove cv	R	std::remove_cv											
std remove extent	R	std::remove_extent											
std remove if	R	std::remove_if											
std remove pointer	R	std::remove_pointer											
std remove reference	R	std::remove_reference											
std remove volatile	R	std::remove_volatile											
std remove_all_extents	R	std::remove_all_extents											
std remove_const	R	std::remove_const											
std remove_copy	R	std::remove_copy											
std remove_copy_if	R	std::remove_copy_if											
std remove_cv	R	std::remove_cv											
std remove_extent	R	std::remove_extent											
std remove_if	R	std::remove_if											
std remove_pointer	R	std::remove_pointer											
std remove_reference	R	std::remove_reference											
std remove_volatile	R	std::remove_volatile											
std rename	R	std::rename											
std rend	R	std::rend											
std replace	R	std::replace											
std replace copy	R	std::replace_copy											
std replace copy if	R	std::replace_copy_if											
std replace if	R	std::replace_if											
std replace_copy	R	std::replace_copy											
std replace_copy_if	R	std::replace_copy_if											
std replace_if	R	std::replace_if											
std resetiosflags	R	std::resetiosflags											
std result of	R	std::result_of											
std result_of	R	std::result_of											
std rethrow exception	R	std::rethrow_exception											
std rethrow if nested	R	std::rethrow_if_nested											
std rethrow_exception	R	std::rethrow_exception											
std rethrow_if_nested	R	std::rethrow_if_nested											
std return temporary buffer	R	std::return_temporary_buffer											
std return_temporary_buffer	R	std::return_temporary_buffer											
std reverse iterator	R	std::reverse_iterator											
std reverse_iterator	R	std::reverse_iterator											
std rewind	R	std::rewind											
std riemann zetaf	R	std::riemann_zetaf											
std riemann_zetaf	R	std::riemann_zetaf											
std right	R	std::right											
std rotate	R	std::rotate											
std runtime error	R	std::runtime_error											
std runtime error what	R	std::runtime_error::what											
std runtime_error	R	std::runtime_error											
std runtime_error what	R	std::runtime_error::what											
std sample	R	std::sample											
std scanf	R	std::scanf											
std scientific	R	std::scientific											
std scoped allocator adaptor	R	std::scoped_allocator_adaptor											
std scoped allocator adaptor allocate	R	std::scoped_allocator_adaptor::allocate											
std scoped allocator adaptor construct	R	std::scoped_allocator_adaptor::construct											
std scoped allocator adaptor constructor	R	std::scoped_allocator_adaptor::scoped_allocator_adaptor											
std scoped allocator adaptor deallocate	R	std::scoped_allocator_adaptor::deallocate											
std scoped allocator adaptor destroy	R	std::scoped_allocator_adaptor::destroy											
std scoped allocator adaptor inner allocator	R	std::scoped_allocator_adaptor::inner_allocator											
std scoped allocator adaptor max size	R	std::scoped_allocator_adaptor::max_size											
std scoped allocator adaptor outer allocator	R	std::scoped_allocator_adaptor::outer_allocator											
std scoped allocator adaptor select on container copy construction	R	std::scoped_allocator_adaptor::select_on_container_copy_construction											
std scoped_allocator_adaptor	R	std::scoped_allocator_adaptor											
std scoped_allocator_adaptor allocate	R	std::scoped_allocator_adaptor::allocate											
std scoped_allocator_adaptor construct	R	std::scoped_allocator_adaptor::construct											
std scoped_allocator_adaptor constructor	R	std::scoped_allocator_adaptor::scoped_allocator_adaptor											
std scoped_allocator_adaptor deallocate	R	std::scoped_allocator_adaptor::deallocate											
std scoped_allocator_adaptor destroy	R	std::scoped_allocator_adaptor::destroy											
std scoped_allocator_adaptor inner_allocator	R	std::scoped_allocator_adaptor::inner_allocator											
std scoped_allocator_adaptor max_size	R	std::scoped_allocator_adaptor::max_size											
std scoped_allocator_adaptor outer_allocator	R	std::scoped_allocator_adaptor::outer_allocator											
std scoped_allocator_adaptor select_on_container_copy_construction	R	std::scoped_allocator_adaptor::select_on_container_copy_construction											
std search n	R	std::search_n											
std search_n	R	std::search_n											
std seed seq	R	std::seed_seq											
std seed seq generate	R	std::seed_seq::generate											
std seed seq param	R	std::seed_seq::param											
std seed seq size	R	std::seed_seq::size											
std seed_seq	R	std::seed_seq											
std seed_seq generate	R	std::seed_seq::generate											
std seed_seq param	R	std::seed_seq::param											
std seed_seq size	R	std::seed_seq::size											
std set	R	std::set											
std set begin	R	std::set::begin											
std set cbegin	R	std::set::cbegin											
std set cend	R	std::set::cend											
std set clear	R	std::set::clear											
std set constructor	R	std::set::set											
std set count	R	std::set::count											
std set crbegin	R	std::set::crbegin											
std set crend	R	std::set::crend											
std set difference	R	std::set_difference											
std set emplace	R	std::set::emplace											
std set emplace hint	R	std::set::emplace_hint											
std set emplace_hint	R	std::set::emplace_hint											
std set empty	R	std::set::empty											
std set end	R	std::set::end											
std set equal range	R	std::set::equal_range											
std set equal_range	R	std::set::equal_range											
std set erase	R	std::set::erase											
std set get allocator	R	std::set::get_allocator											
std set get_allocator	R	std::set::get_allocator											
std set insert	R	std::set::insert											
std set intersection	R	std::set_intersection											
std set key comp	R	std::set::key_comp											
std set key_comp	R	std::set::key_comp											
std set max size	R	std::set::max_size											
std set max_size	R	std::set::max_size											
std set merge	R	std::set::merge											
std set new handler	R	std::set_new_handler											
std set rbegin	R	std::set::rbegin											
std set rend	R	std::set::rend											
std set size	R	std::set::size											
std set swap	R	std::set::swap											
std set symmetric difference	R	std::set_symmetric_difference											
std set terminate	R	std::set_terminate											
std set union	R	std::set_union											
std set value comp	R	std::set::value_comp											
std set value_comp	R	std::set::value_comp											
std set_difference	R	std::set_difference											
std set_intersection	R	std::set_intersection											
std set_new_handler	R	std::set_new_handler											
std set_symmetric_difference	R	std::set_symmetric_difference											
std set_terminate	R	std::set_terminate											
std set_union	R	std::set_union											
std setbase	R	std::setbase											
std setbuf	R	std::setbuf											
std setfill	R	std::setfill											
std setiosflags	R	std::setiosflags											
std setlocale	R	std::setlocale											
std setprecision	R	std::setprecision											
std setvbuf	R	std::setvbuf											
std setw	R	std::setw											
std shared future	R	std::shared_future											
std shared future constructor	R	std::shared_future::shared_future											
std shared future get	R	std::shared_future::get											
std shared future valid	R	std::shared_future::valid											
std shared future wait	R	std::shared_future::wait											
std shared future wait for	R	std::shared_future::wait_for											
std shared future wait until	R	std::shared_future::wait_until											
std shared lock	R	std::shared_lock											
std shared lock constructor	R	std::shared_lock::shared_lock											
std shared lock lock	R	std::shared_lock::lock											
std shared lock mutex	R	std::shared_lock::mutex											
std shared lock owns lock	R	std::shared_lock::owns_lock											
std shared lock release	R	std::shared_lock::release											
std shared lock swap	R	std::shared_lock::swap											
std shared lock try lock	R	std::shared_lock::try_lock											
std shared lock try lock for	R	std::shared_lock::try_lock_for											
std shared lock try lock until	R	std::shared_lock::try_lock_until											
std shared lock unlock	R	std::shared_lock::unlock											
std shared mutex	R	std::shared_mutex											
std shared mutex lock	R	std::shared_mutex::lock											
std shared mutex lock shared	R	std::shared_mutex::lock_shared											
std shared mutex native handle	R	std::shared_mutex::native_handle											
std shared mutex try lock	R	std::shared_mutex::try_lock											
std shared mutex try lock shared	R	std::shared_mutex::try_lock_shared											
std shared mutex unlock	R	std::shared_mutex::unlock											
std shared mutex unlock shared	R	std::shared_mutex::unlock_shared											
std shared ptr	R	std::shared_ptr											
std shared ptr constructor	R	std::shared_ptr::shared_ptr											
std shared ptr get	R	std::shared_ptr::get											
std shared ptr owner before	R	std::shared_ptr::owner_before											
std shared ptr reset	R	std::shared_ptr::reset											
std shared ptr swap	R	std::shared_ptr::swap											
std shared ptr unique	R	std::shared_ptr::unique											
std shared ptr use count	R	std::shared_ptr::use_count											
std shared timed mutex	R	std::shared_timed_mutex											
std shared timed mutex lock	R	std::shared_timed_mutex::lock											
std shared timed mutex lock shared	R	std::shared_timed_mutex::lock_shared											
std shared timed mutex try lock	R	std::shared_timed_mutex::try_lock											
std shared timed mutex try lock for	R	std::shared_timed_mutex::try_lock_for											
std shared timed mutex try lock shared	R	std::shared_timed_mutex::try_lock_shared											
std shared timed mutex try lock shared for	R	std::shared_timed_mutex::try_lock_shared_for											
std shared timed mutex try lock shared until	R	std::shared_timed_mutex::try_lock_shared_until											
std shared timed mutex try lock until	R	std::shared_timed_mutex::try_lock_until											
std shared timed mutex unlock	R	std::shared_timed_mutex::unlock											
std shared timed mutex unlock shared	R	std::shared_timed_mutex::unlock_shared											
std shared_future	R	std::shared_future											
std shared_future constructor	R	std::shared_future::shared_future											
std shared_future get	R	std::shared_future::get											
std shared_future valid	R	std::shared_future::valid											
std shared_future wait	R	std::shared_future::wait											
std shared_future wait_for	R	std::shared_future::wait_for											
std shared_future wait_until	R	std::shared_future::wait_until											
std shared_lock	R	std::shared_lock											
std shared_lock constructor	R	std::shared_lock::shared_lock											
std shared_lock lock	R	std::shared_lock::lock											
std shared_lock mutex	R	std::shared_lock::mutex											
std shared_lock owns_lock	R	std::shared_lock::owns_lock											
std shared_lock release	R	std::shared_lock::release											
std shared_lock swap	R	std::shared_lock::swap											
std shared_lock try_lock	R	std::shared_lock::try_lock											
std shared_lock try_lock_for	R	std::shared_lock::try_lock_for											
std shared_lock try_lock_until	R	std::shared_lock::try_lock_until											
std shared_lock unlock	R	std::shared_lock::unlock											
std shared_mutex	R	std::shared_mutex											
std shared_mutex lock	R	std::shared_mutex::lock											
std shared_mutex lock_shared	R	std::shared_mutex::lock_shared											
std shared_mutex native_handle	R	std::shared_mutex::native_handle											
std shared_mutex try_lock	R	std::shared_mutex::try_lock											
std shared_mutex try_lock_shared	R	std::shared_mutex::try_lock_shared											
std shared_mutex unlock	R	std::shared_mutex::unlock											
std shared_mutex unlock_shared	R	std::shared_mutex::unlock_shared											
std shared_ptr	R	std::shared_ptr											
std shared_ptr constructor	R	std::shared_ptr::shared_ptr											
std shared_ptr get	R	std::shared_ptr::get											
std shared_ptr owner_before	R	std::shared_ptr::owner_before											
std shared_ptr reset	R	std::shared_ptr::reset											
std shared_ptr swap	R	std::shared_ptr::swap											
std shared_ptr unique	R	std::shared_ptr::unique											
std shared_ptr use_count	R	std::shared_ptr::use_count											
std shared_timed_mutex	R	std::shared_timed_mutex											
std shared_timed_mutex lock	R	std::shared_timed_mutex::lock											
std shared_timed_mutex lock_shared	R	std::shared_timed_mutex::lock_shared											
std shared_timed_mutex try_lock	R	std::shared_timed_mutex::try_lock											
std shared_timed_mutex try_lock_for	R	std::shared_timed_mutex::try_lock_for											
std shared_timed_mutex try_lock_shared	R	std::shared_timed_mutex::try_lock_shared											
std shared_timed_mutex try_lock_shared_for	R	std::shared_timed_mutex::try_lock_shared_for											
std shared_timed_mutex try_lock_shared_until	R	std::shared_timed_mutex::try_lock_shared_until											
std shared_timed_mutex try_lock_until	R	std::shared_timed_mutex::try_lock_until											
std shared_timed_mutex unlock	R	std::shared_timed_mutex::unlock											
std shared_timed_mutex unlock_shared	R	std::shared_timed_mutex::unlock_shared											
std showbase	R	std::showbase											
std showpoint	R	std::showpoint											
std showpos	R	std::showpos											
std shuffle	R	std::shuffle											
std shuffle order engine	R	std::shuffle_order_engine											
std shuffle order engine base	R	std::shuffle_order_engine::base											
std shuffle order engine constructor	R	std::shuffle_order_engine::shuffle_order_engine											
std shuffle order engine discard	R	std::shuffle_order_engine::discard											
std shuffle order engine max	R	std::shuffle_order_engine::max											
std shuffle order engine min	R	std::shuffle_order_engine::min											
std shuffle order engine seed	R	std::shuffle_order_engine::seed											
std shuffle_order_engine	R	std::shuffle_order_engine											
std shuffle_order_engine base	R	std::shuffle_order_engine::base											
std shuffle_order_engine constructor	R	std::shuffle_order_engine::shuffle_order_engine											
std shuffle_order_engine discard	R	std::shuffle_order_engine::discard											
std shuffle_order_engine max	R	std::shuffle_order_engine::max											
std shuffle_order_engine min	R	std::shuffle_order_engine::min											
std shuffle_order_engine seed	R	std::shuffle_order_engine::seed											
std signal	R	std::signal											
std sin	R	std::sin											
std sinh	R	std::sinh											
std size	R	std::size											
std skipws	R	std::skipws											
std slice	R	std::slice											
std slice array	R	std::slice_array											
std slice_array	R	std::slice_array											
std snprintf	R	std::snprintf											
std sort	R	std::sort											
std sort heap	R	std::sort_heap											
std sort_heap	R	std::sort_heap											
std sph besself	R	std::sph_besself											
std sph legendref	R	std::sph_legendref											
std sph neumannf	R	std::sph_neumannf											
std sph_besself	R	std::sph_besself											
std sph_legendref	R	std::sph_legendref											
std sph_neumannf	R	std::sph_neumannf											
std sprintf	R	std::sprintf											
std sqrt	R	std::sqrt											
std srand	R	std::srand											
std sscanf	R	std::sscanf											
std stable sort	R	std::stable_sort											
std stable_sort	R	std::stable_sort											
std stack	R	std::stack											
std stack constructor	R	std::stack::stack											
std stack emplace	R	std::stack::emplace											
std stack empty	R	std::stack::empty											
std stack pop	R	std::stack::pop											
std stack push	R	std::stack::push											
std stack size	R	std::stack::size											
std stack swap	R	std::stack::swap											
std stack top	R	std::stack::top											
std static pointer cast	R	std::static_pointer_cast											
std static_pointer_cast	R	std::static_pointer_cast											
std stod	R	std::stod											
std stof	R	std::stof											
std stoi	R	std::stoi											
std stol	R	std::stol											
std stold	R	std::stold											
std stoll	R	std::stoll											
std stoul	R	std::stoul											
std stoull	R	std::stoull											
std strcat	R	std::strcat											
std strchr	R	std::strchr											
std strcmp	R	std::strcmp											
std strcoll	R	std::strcoll											
std strcpy	R	std::strcpy											
std strcspn	R	std::strcspn											
std strerror	R	std::strerror											
std strftime	R	std::strftime											
std strlen	R	std::strlen											
std strncat	R	std::strncat											
std strncmp	R	std::strncmp											
std strncpy	R	std::strncpy											
std strpbrk	R	std::strpbrk											
std strrchr	R	std::strrchr											
std strspn	R	std::strspn											
std strstr	R	std::strstr											
std strstream	R	std::strstream											
std strstream Init	R	std::strstream::Init											
std strstream bad	R	std::strstream::bad											
std strstream clear	R	std::strstream::clear											
std strstream copyfmt	R	std::strstream::copyfmt											
std strstream destructor	R	std::strstream::~strstream											
std strstream eof	R	std::strstream::eof											
std strstream exceptions	R	std::strstream::exceptions											
std strstream fail	R	std::strstream::fail											
std strstream failure	R	std::strstream::failure											
std strstream failure what	R	std::strstream::failure::what											
std strstream fill	R	std::strstream::fill											
std strstream flags	R	std::strstream::flags											
std strstream flush	R	std::strstream::flush											
std strstream freeze	R	std::strstream::freeze											
std strstream gcount	R	std::strstream::gcount											
std strstream get	R	std::strstream::get											
std strstream getline	R	std::strstream::getline											
std strstream getloc	R	std::strstream::getloc											
std strstream good	R	std::strstream::good											
std strstream ignore	R	std::strstream::ignore											
std strstream init	R	std::strstream::init											
std strstream iword	R	std::strstream::iword											
std strstream move	R	std::strstream::move											
std strstream narrow	R	std::strstream::narrow											
std strstream pcount	R	std::strstream::pcount											
std strstream peek	R	std::strstream::peek											
std strstream precision	R	std::strstream::precision											
std strstream put	R	std::strstream::put											
std strstream putback	R	std::strstream::putback											
std strstream pword	R	std::strstream::pword											
std strstream rdstate	R	std::strstream::rdstate											
std strstream read	R	std::strstream::read											
std strstream readsome	R	std::strstream::readsome											
std strstream register callback	R	std::strstream::register_callback											
std strstream register_callback	R	std::strstream::register_callback											
std strstream seekg	R	std::strstream::seekg											
std strstream seekp	R	std::strstream::seekp											
std strstream set rdbuf	R	std::strstream::set_rdbuf											
std strstream set_rdbuf	R	std::strstream::set_rdbuf											
std strstream setf	R	std::strstream::setf											
std strstream setstate	R	std::strstream::setstate											
std strstream str	R	std::strstream::str											
std strstream swap	R	std::strstream::swap											
std strstream sync	R	std::strstream::sync											
std strstream sync with stdio	R	std::strstream::sync_with_stdio											
std strstream sync_with_stdio	R	std::strstream::sync_with_stdio											
std strstream tellg	R	std::strstream::tellg											
std strstream tellp	R	std::strstream::tellp											
std strstream tie	R	std::strstream::tie											
std strstream unget	R	std::strstream::unget											
std strstream unsetf	R	std::strstream::unsetf											
std strstream widen	R	std::strstream::widen											
std strstream width	R	std::strstream::width											
std strstream write	R	std::strstream::write											
std strstream xalloc	R	std::strstream::xalloc											
std strstreambuf	R	std::strstreambuf											
std strstreambuf constructor	R	std::strstreambuf::strstreambuf											
std strstreambuf destructor	R	std::strstreambuf::~strstreambuf											
std strstreambuf eback	R	std::strstreambuf::eback											
std strstreambuf egptr	R	std::strstreambuf::egptr											
std strstreambuf epptr	R	std::strstreambuf::epptr											
std strstreambuf freeze	R	std::strstreambuf::freeze											
std strstreambuf gbump	R	std::strstreambuf::gbump											
std strstreambuf getloc	R	std::strstreambuf::getloc											
std strstreambuf gptr	R	std::strstreambuf::gptr											
std strstreambuf imbue	R	std::strstreambuf::imbue											
std strstreambuf in avail	R	std::strstreambuf::in_avail											
std strstreambuf in_avail	R	std::strstreambuf::in_avail											
std strstreambuf pbase	R	std::strstreambuf::pbase											
std strstreambuf pbump	R	std::strstreambuf::pbump											
std strstreambuf pcount	R	std::strstreambuf::pcount											
std strstreambuf pptr	R	std::strstreambuf::pptr											
std strstreambuf pubimbue	R	std::strstreambuf::pubimbue											
std strstreambuf pubseekoff	R	std::strstreambuf::pubseekoff											
std strstreambuf pubseekpos	R	std::strstreambuf::pubseekpos											
std strstreambuf pubsync	R	std::strstreambuf::pubsync											
std strstreambuf sbumpc	R	std::strstreambuf::sbumpc											
std strstreambuf setbuf	R	std::strstreambuf::setbuf											
std strstreambuf setg	R	std::strstreambuf::setg											
std strstreambuf setp	R	std::strstreambuf::setp											
std strstreambuf sgetc	R	std::strstreambuf::sgetc											
std strstreambuf showmanyc	R	std::strstreambuf::showmanyc											
std strstreambuf snextc	R	std::strstreambuf::snextc											
std strstreambuf sputbackc	R	std::strstreambuf::sputbackc											
std strstreambuf sputc	R	std::strstreambuf::sputc											
std strstreambuf str	R	std::strstreambuf::str											
std strstreambuf sungetc	R	std::strstreambuf::sungetc											
std strstreambuf swap	R	std::strstreambuf::swap											
std strstreambuf sync	R	std::strstreambuf::sync											
std strstreambuf uflow	R	std::strstreambuf::uflow											
std strtod	R	std::strtod											
std strtof	R	std::strtof											
std strtoimax	R	std::strtoimax											
std strtok	R	std::strtok											
std strtol	R	std::strtol											
std strtold	R	std::strtold											
std strtoll	R	std::strtoll											
std strtoul	R	std::strtoul											
std strtoull	R	std::strtoull											
std strtoumax	R	std::strtoumax											
std strxfrm	R	std::strxfrm											
std student t distribution	R	std::student_t_distribution											
std student t distribution constructor	R	std::student_t_distribution::student_t_distribution											
std student t distribution max	R	std::student_t_distribution::max											
std student t distribution min	R	std::student_t_distribution::min											
std student t distribution n	R	std::student_t_distribution::n											
std student t distribution param	R	std::student_t_distribution::param											
std student t distribution reset	R	std::student_t_distribution::reset											
std student_t_distribution	R	std::student_t_distribution											
std student_t_distribution constructor	R	std::student_t_distribution::student_t_distribution											
std student_t_distribution max	R	std::student_t_distribution::max											
std student_t_distribution min	R	std::student_t_distribution::min											
std student_t_distribution n	R	std::student_t_distribution::n											
std student_t_distribution param	R	std::student_t_distribution::param											
std student_t_distribution reset	R	std::student_t_distribution::reset											
std sub match	R	std::sub_match											
std sub match constructor	R	std::sub_match::sub_match											
std sub match str	R	std::sub_match::str											
std sub_match	R	std::sub_match											
std sub_match constructor	R	std::sub_match::sub_match											
std sub_match str	R	std::sub_match::str											
std subtract with carry engine	R	std::subtract_with_carry_engine											
std subtract with carry engine constructor	R	std::subtract_with_carry_engine::subtract_with_carry_engine											
std subtract with carry engine discard	R	std::subtract_with_carry_engine::discard											
std subtract with carry engine max	R	std::subtract_with_carry_engine::max											
std subtract with carry engine min	R	std::subtract_with_carry_engine::min											
std subtract with carry engine seed	R	std::subtract_with_carry_engine::seed											
std subtract_with_carry_engine	R	std::subtract_with_carry_engine											
std subtract_with_carry_engine constructor	R	std::subtract_with_carry_engine::subtract_with_carry_engine											
std subtract_with_carry_engine discard	R	std::subtract_with_carry_engine::discard											
std subtract_with_carry_engine max	R	std::subtract_with_carry_engine::max											
std subtract_with_carry_engine min	R	std::subtract_with_carry_engine::min											
std subtract_with_carry_engine seed	R	std::subtract_with_carry_engine::seed											
std swap	R	std::swap											
std swprintf	R	std::swprintf											
std swscanf	R	std::swscanf											
std system	R	std::system											
std system category	R	std::system_category											
std system error	R	std::system_error											
std system error code	R	std::system_error::code											
std system_category	R	std::system_category											
std system_error	R	std::system_error											
std system_error code	R	std::system_error::code											
std tan	R	std::tan											
std tanh	R	std::tanh											
std terminate	R	std::terminate											
std this thread get id	R	std::this_thread::get_id											
std this thread sleep for	R	std::this_thread::sleep_for											
std this thread sleep until	R	std::this_thread::sleep_until											
std this thread yield	R	std::this_thread::yield											
std this_thread get_id	R	std::this_thread::get_id											
std this_thread sleep_for	R	std::this_thread::sleep_for											
std this_thread sleep_until	R	std::this_thread::sleep_until											
std this_thread yield	R	std::this_thread::yield											
std thread	R	std::thread											
std thread constructor	R	std::thread::thread											
std thread detach	R	std::thread::detach											
std thread get id	R	std::thread::get_id											
std thread get_id	R	std::thread::get_id											
std thread hardware concurrency	R	std::thread::hardware_concurrency											
std thread hardware_concurrency	R	std::thread::hardware_concurrency											
std thread id	R	std::thread::id											
std thread join	R	std::thread::join											
std thread joinable	R	std::thread::joinable											
std thread native handle	R	std::thread::native_handle											
std thread native_handle	R	std::thread::native_handle											
std thread swap	R	std::thread::swap											
std throw with nested	R	std::throw_with_nested											
std throw_with_nested	R	std::throw_with_nested											
std tie	R	std::tie											
std time	R	std::time											
std time base	R	std::time_base											
std time get	R	std::time_get											
std time get byname	R	std::time_get_byname											
std time get constructor	R	std::time_get::time_get											
std time get date order	R	std::time_get::date_order											
std time get destructor	R	std::time_get::~time_get											
std time get do date order	R	std::time_get::do_date_order											
std time get do get date	R	std::time_get::do_get_date											
std time get do get monthname	R	std::time_get::do_get_monthname											
std time get do get weekday	R	std::time_get::do_get_weekday											
std time get get	R	std::time_get::get											
std time get get date	R	std::time_get::get_date											
std time get get monthname	R	std::time_get::get_monthname											
std time get get weekday	R	std::time_get::get_weekday											
std time put	R	std::time_put											
std time put byname	R	std::time_put_byname											
std time put byname do put	R	std::time_put_byname::do_put											
std time put byname put	R	std::time_put_byname::put											
std time put constructor	R	std::time_put::time_put											
std time put destructor	R	std::time_put::~time_put											
std time put do put	R	std::time_put::do_put											
std time put put	R	std::time_put::put											
std time_base	R	std::time_base											
std time_get	R	std::time_get											
std time_get constructor	R	std::time_get::time_get											
std time_get date_order	R	std::time_get::date_order											
std time_get destructor	R	std::time_get::~time_get											
std time_get do_date_order	R	std::time_get::do_date_order											
std time_get do_get_date	R	std::time_get::do_get_date											
std time_get do_get_monthname	R	std::time_get::do_get_monthname											
std time_get do_get_weekday	R	std::time_get::do_get_weekday											
std time_get get	R	std::time_get::get											
std time_get get_date	R	std::time_get::get_date											
std time_get get_monthname	R	std::time_get::get_monthname											
std time_get get_weekday	R	std::time_get::get_weekday											
std time_get_byname	R	std::time_get_byname											
std time_put	R	std::time_put											
std time_put constructor	R	std::time_put::time_put											
std time_put destructor	R	std::time_put::~time_put											
std time_put do_put	R	std::time_put::do_put											
std time_put put	R	std::time_put::put											
std time_put_byname	R	std::time_put_byname											
std time_put_byname do_put	R	std::time_put_byname::do_put											
std time_put_byname put	R	std::time_put_byname::put											
std timed mutex	R	std::timed_mutex											
std timed mutex lock	R	std::timed_mutex::lock											
std timed mutex native handle	R	std::timed_mutex::native_handle											
std timed mutex try lock	R	std::timed_mutex::try_lock											
std timed mutex try lock for	R	std::timed_mutex::try_lock_for											
std timed mutex try lock until	R	std::timed_mutex::try_lock_until											
std timed mutex unlock	R	std::timed_mutex::unlock											
std timed_mutex	R	std::timed_mutex											
std timed_mutex lock	R	std::timed_mutex::lock											
std timed_mutex native_handle	R	std::timed_mutex::native_handle											
std timed_mutex try_lock	R	std::timed_mutex::try_lock											
std timed_mutex try_lock_for	R	std::timed_mutex::try_lock_for											
std timed_mutex try_lock_until	R	std::timed_mutex::try_lock_until											
std timed_mutex unlock	R	std::timed_mutex::unlock											
std timespec	R	std::timespec											
std tm	R	std::tm											
std tmpfile	R	std::tmpfile											
std tmpnam	R	std::tmpnam											
std to string	R	std::to_string											
std to wstring	R	std::to_wstring											
std to_string	R	std::to_string											
std to_wstring	R	std::to_wstring											
std towctrans	R	std::towctrans											
std towlower	R	std::towlower											
std towupper	R	std::towupper											
std transform	R	std::transform											
std transform exclusive scan	R	std::transform_exclusive_scan											
std transform inclusive scan	R	std::transform_inclusive_scan											
std transform_exclusive_scan	R	std::transform_exclusive_scan											
std transform_inclusive_scan	R	std::transform_inclusive_scan											
std try lock	R	std::try_lock											
std try to lock t	R	std::try_to_lock_t											
std try_lock	R	std::try_lock											
std try_to_lock_t	R	std::try_to_lock_t											
std tuple	R	std::tuple											
std tuple cat	R	std::tuple_cat											
std tuple constructor	R	std::tuple::tuple											
std tuple swap	R	std::tuple::swap											
std tuple_cat	R	std::tuple_cat											
std type index	R	std::type_index											
std type index hash code	R	std::type_index::hash_code											
std type index name	R	std::type_index::name											
std type info	R	std::type_info											
std type info before	R	std::type_info::before											
std type info hash code	R	std::type_info::hash_code											
std type info name	R	std::type_info::name											
std type_index	R	std::type_index											
std type_index hash_code	R	std::type_index::hash_code											
std type_index name	R	std::type_index::name											
std type_info	R	std::type_info											
std type_info before	R	std::type_info::before											
std type_info hash_code	R	std::type_info::hash_code											
std type_info name	R	std::type_info::name											
std unary negate	R	std::unary_negate											
std unary_negate	R	std::unary_negate											
std uncaught exception	R	std::uncaught_exception											
std uncaught_exception	R	std::uncaught_exception											
std undeclare no pointers	R	std::undeclare_no_pointers											
std undeclare reachable	R	std::undeclare_reachable											
std undeclare_no_pointers	R	std::undeclare_no_pointers											
std undeclare_reachable	R	std::undeclare_reachable											
std underflow error	R	std::underflow_error											
std underflow error what	R	std::underflow_error::what											
std underflow_error	R	std::underflow_error											
std underflow_error what	R	std::underflow_error::what											
std underlying type	R	std::underlying_type											
std underlying_type	R	std::underlying_type											
std ungetc	R	std::ungetc											
std ungetwc	R	std::ungetwc											
std uniform int distribution	R	std::uniform_int_distribution											
std uniform int distribution a	R	std::uniform_int_distribution::a											
std uniform int distribution b	R	std::uniform_int_distribution::b											
std uniform int distribution constructor	R	std::uniform_int_distribution::uniform_int_distribution											
std uniform int distribution max	R	std::uniform_int_distribution::max											
std uniform int distribution min	R	std::uniform_int_distribution::min											
std uniform int distribution param	R	std::uniform_int_distribution::param											
std uniform int distribution reset	R	std::uniform_int_distribution::reset											
std uniform real distribution	R	std::uniform_real_distribution											
std uniform real distribution a	R	std::uniform_real_distribution::a											
std uniform real distribution b	R	std::uniform_real_distribution::b											
std uniform real distribution constructor	R	std::uniform_real_distribution::uniform_real_distribution											
std uniform real distribution max	R	std::uniform_real_distribution::max											
std uniform real distribution min	R	std::uniform_real_distribution::min											
std uniform real distribution param	R	std::uniform_real_distribution::param											
std uniform real distribution reset	R	std::uniform_real_distribution::reset											
std uniform_int_distribution	R	std::uniform_int_distribution											
std uniform_int_distribution a	R	std::uniform_int_distribution::a											
std uniform_int_distribution b	R	std::uniform_int_distribution::b											
std uniform_int_distribution constructor	R	std::uniform_int_distribution::uniform_int_distribution											
std uniform_int_distribution max	R	std::uniform_int_distribution::max											
std uniform_int_distribution min	R	std::uniform_int_distribution::min											
std uniform_int_distribution param	R	std::uniform_int_distribution::param											
std uniform_int_distribution reset	R	std::uniform_int_distribution::reset											
std uniform_real_distribution	R	std::uniform_real_distribution											
std uniform_real_distribution a	R	std::uniform_real_distribution::a											
std uniform_real_distribution b	R	std::uniform_real_distribution::b											
std uniform_real_distribution constructor	R	std::uniform_real_distribution::uniform_real_distribution											
std uniform_real_distribution max	R	std::uniform_real_distribution::max											
std uniform_real_distribution min	R	std::uniform_real_distribution::min											
std uniform_real_distribution param	R	std::uniform_real_distribution::param											
std uniform_real_distribution reset	R	std::uniform_real_distribution::reset											
std uninitialized fill n	R	std::uninitialized_fill_n											
std uninitialized_fill_n	R	std::uninitialized_fill_n											
std unique	R	std::unique											
std unique copy	R	std::unique_copy											
std unique lock	R	std::unique_lock											
std unique lock constructor	R	std::unique_lock::unique_lock											
std unique lock lock	R	std::unique_lock::lock											
std unique lock mutex	R	std::unique_lock::mutex											
std unique lock owns lock	R	std::unique_lock::owns_lock											
std unique lock release	R	std::unique_lock::release											
std unique lock swap	R	std::unique_lock::swap											
std unique lock try lock	R	std::unique_lock::try_lock											
std unique lock try lock for	R	std::unique_lock::try_lock_for											
std unique lock try lock until	R	std::unique_lock::try_lock_until											
std unique lock unlock	R	std::unique_lock::unlock											
std unique ptr	R	std::unique_ptr											
std unique ptr get	R	std::unique_ptr::get											
std unique ptr get deleter	R	std::unique_ptr::get_deleter											
std unique ptr release	R	std::unique_ptr::release											
std unique ptr reset	R	std::unique_ptr::reset											
std unique ptr swap	R	std::unique_ptr::swap											
std unique_copy	R	std::unique_copy											
std unique_lock	R	std::unique_lock											
std unique_lock constructor	R	std::unique_lock::unique_lock											
std unique_lock lock	R	std::unique_lock::lock											
std unique_lock mutex	R	std::unique_lock::mutex											
std unique_lock owns_lock	R	std::unique_lock::owns_lock											
std unique_lock release	R	std::unique_lock::release											
std unique_lock swap	R	std::unique_lock::swap											
std unique_lock try_lock	R	std::unique_lock::try_lock											
std unique_lock try_lock_for	R	std::unique_lock::try_lock_for											
std unique_lock try_lock_until	R	std::unique_lock::try_lock_until											
std unique_lock unlock	R	std::unique_lock::unlock											
std unique_ptr	R	std::unique_ptr											
std unique_ptr get	R	std::unique_ptr::get											
std unique_ptr get_deleter	R	std::unique_ptr::get_deleter											
std unique_ptr release	R	std::unique_ptr::release											
std unique_ptr reset	R	std::unique_ptr::reset											
std unique_ptr swap	R	std::unique_ptr::swap											
std unitbuf	R	std::unitbuf											
std unordered map	R	std::unordered_map											
std unordered map at	R	std::unordered_map::at											
std unordered map begin	R	std::unordered_map::begin											
std unordered map bucket	R	std::unordered_map::bucket											
std unordered map bucket count	R	std::unordered_map::bucket_count											
std unordered map bucket size	R	std::unordered_map::bucket_size											
std unordered map cbegin	R	std::unordered_map::cbegin											
std unordered map cend	R	std::unordered_map::cend											
std unordered map clear	R	std::unordered_map::clear											
std unordered map constructor	R	std::unordered_map::unordered_map											
std unordered map count	R	std::unordered_map::count											
std unordered map emplace	R	std::unordered_map::emplace											
std unordered map emplace hint	R	std::unordered_map::emplace_hint											
std unordered map empty	R	std::unordered_map::empty											
std unordered map end	R	std::unordered_map::end											
std unordered map equal range	R	std::unordered_map::equal_range											
std unordered map erase	R	std::unordered_map::erase											
std unordered map get allocator	R	std::unordered_map::get_allocator											
std unordered map hash function	R	std::unordered_map::hash_function											
std unordered map insert	R	std::unordered_map::insert											
std unordered map key eq	R	std::unordered_map::key_eq											
std unordered map load factor	R	std::unordered_map::load_factor											
std unordered map max bucket count	R	std::unordered_map::max_bucket_count											
std unordered map max load factor	R	std::unordered_map::max_load_factor											
std unordered map max size	R	std::unordered_map::max_size											
std unordered map merge	R	std::unordered_map::merge											
std unordered map rehash	R	std::unordered_map::rehash											
std unordered map reserve	R	std::unordered_map::reserve											
std unordered map size	R	std::unordered_map::size											
std unordered map swap	R	std::unordered_map::swap											
std unordered multimap	R	std::unordered_multimap											
std unordered multimap begin	R	std::unordered_multimap::begin											
std unordered multimap bucket	R	std::unordered_multimap::bucket											
std unordered multimap bucket count	R	std::unordered_multimap::bucket_count											
std unordered multimap bucket size	R	std::unordered_multimap::bucket_size											
std unordered multimap cbegin	R	std::unordered_multimap::cbegin											
std unordered multimap cend	R	std::unordered_multimap::cend											
std unordered multimap clear	R	std::unordered_multimap::clear											
std unordered multimap constructor	R	std::unordered_multimap::unordered_multimap											
std unordered multimap count	R	std::unordered_multimap::count											
std unordered multimap emplace	R	std::unordered_multimap::emplace											
std unordered multimap emplace hint	R	std::unordered_multimap::emplace_hint											
std unordered multimap empty	R	std::unordered_multimap::empty											
std unordered multimap end	R	std::unordered_multimap::end											
std unordered multimap equal range	R	std::unordered_multimap::equal_range											
std unordered multimap erase	R	std::unordered_multimap::erase											
std unordered multimap get allocator	R	std::unordered_multimap::get_allocator											
std unordered multimap hash function	R	std::unordered_multimap::hash_function											
std unordered multimap insert	R	std::unordered_multimap::insert											
std unordered multimap key eq	R	std::unordered_multimap::key_eq											
std unordered multimap load factor	R	std::unordered_multimap::load_factor											
std unordered multimap max bucket count	R	std::unordered_multimap::max_bucket_count											
std unordered multimap max load factor	R	std::unordered_multimap::max_load_factor											
std unordered multimap max size	R	std::unordered_multimap::max_size											
std unordered multimap merge	R	std::unordered_multimap::merge											
std unordered multimap rehash	R	std::unordered_multimap::rehash											
std unordered multimap reserve	R	std::unordered_multimap::reserve											
std unordered multimap size	R	std::unordered_multimap::size											
std unordered multimap swap	R	std::unordered_multimap::swap											
std unordered multiset	R	std::unordered_multiset											
std unordered multiset begin	R	std::unordered_multiset::begin											
std unordered multiset bucket	R	std::unordered_multiset::bucket											
std unordered multiset bucket count	R	std::unordered_multiset::bucket_count											
std unordered multiset bucket size	R	std::unordered_multiset::bucket_size											
std unordered multiset cbegin	R	std::unordered_multiset::cbegin											
std unordered multiset cend	R	std::unordered_multiset::cend											
std unordered multiset clear	R	std::unordered_multiset::clear											
std unordered multiset constructor	R	std::unordered_multiset::unordered_multiset											
std unordered multiset count	R	std::unordered_multiset::count											
std unordered multiset emplace	R	std::unordered_multiset::emplace											
std unordered multiset emplace hint	R	std::unordered_multiset::emplace_hint											
std unordered multiset empty	R	std::unordered_multiset::empty											
std unordered multiset end	R	std::unordered_multiset::end											
std unordered multiset equal range	R	std::unordered_multiset::equal_range											
std unordered multiset erase	R	std::unordered_multiset::erase											
std unordered multiset get allocator	R	std::unordered_multiset::get_allocator											
std unordered multiset hash function	R	std::unordered_multiset::hash_function											
std unordered multiset insert	R	std::unordered_multiset::insert											
std unordered multiset key eq	R	std::unordered_multiset::key_eq											
std unordered multiset load factor	R	std::unordered_multiset::load_factor											
std unordered multiset max bucket count	R	std::unordered_multiset::max_bucket_count											
std unordered multiset max load factor	R	std::unordered_multiset::max_load_factor											
std unordered multiset max size	R	std::unordered_multiset::max_size											
std unordered multiset merge	R	std::unordered_multiset::merge											
std unordered multiset rehash	R	std::unordered_multiset::rehash											
std unordered multiset reserve	R	std::unordered_multiset::reserve											
std unordered multiset size	R	std::unordered_multiset::size											
std unordered multiset swap	R	std::unordered_multiset::swap											
std unordered set	R	std::unordered_set											
std unordered set begin	R	std::unordered_set::begin											
std unordered set bucket	R	std::unordered_set::bucket											
std unordered set bucket count	R	std::unordered_set::bucket_count											
std unordered set bucket size	R	std::unordered_set::bucket_size											
std unordered set cbegin	R	std::unordered_set::cbegin											
std unordered set cend	R	std::unordered_set::cend											
std unordered set clear	R	std::unordered_set::clear											
std unordered set constructor	R	std::unordered_set::unordered_set											
std unordered set count	R	std::unordered_set::count											
std unordered set emplace	R	std::unordered_set::emplace											
std unordered set emplace hint	R	std::unordered_set::emplace_hint											
std unordered set empty	R	std::unordered_set::empty											
std unordered set end	R	std::unordered_set::end											
std unordered set equal range	R	std::unordered_set::equal_range											
std unordered set erase	R	std::unordered_set::erase											
std unordered set get allocator	R	std::unordered_set::get_allocator											
std unordered set hash function	R	std::unordered_set::hash_function											
std unordered set insert	R	std::unordered_set::insert											
std unordered set key eq	R	std::unordered_set::key_eq											
std unordered set load factor	R	std::unordered_set::load_factor											
std unordered set max bucket count	R	std::unordered_set::max_bucket_count											
std unordered set max load factor	R	std::unordered_set::max_load_factor											
std unordered set max size	R	std::unordered_set::max_size											
std unordered set merge	R	std::unordered_set::merge											
std unordered set rehash	R	std::unordered_set::rehash											
std unordered set reserve	R	std::unordered_set::reserve											
std unordered set size	R	std::unordered_set::size											
std unordered set swap	R	std::unordered_set::swap											
std unordered_map	R	std::unordered_map											
std unordered_map at	R	std::unordered_map::at											
std unordered_map begin	R	std::unordered_map::begin											
std unordered_map bucket	R	std::unordered_map::bucket											
std unordered_map bucket_count	R	std::unordered_map::bucket_count											
std unordered_map bucket_size	R	std::unordered_map::bucket_size											
std unordered_map cbegin	R	std::unordered_map::cbegin											
std unordered_map cend	R	std::unordered_map::cend											
std unordered_map clear	R	std::unordered_map::clear											
std unordered_map constructor	R	std::unordered_map::unordered_map											
std unordered_map count	R	std::unordered_map::count											
std unordered_map emplace	R	std::unordered_map::emplace											
std unordered_map emplace_hint	R	std::unordered_map::emplace_hint											
std unordered_map empty	R	std::unordered_map::empty											
std unordered_map end	R	std::unordered_map::end											
std unordered_map equal_range	R	std::unordered_map::equal_range											
std unordered_map erase	R	std::unordered_map::erase											
std unordered_map get_allocator	R	std::unordered_map::get_allocator											
std unordered_map hash_function	R	std::unordered_map::hash_function											
std unordered_map insert	R	std::unordered_map::insert											
std unordered_map key_eq	R	std::unordered_map::key_eq											
std unordered_map load_factor	R	std::unordered_map::load_factor											
std unordered_map max_bucket_count	R	std::unordered_map::max_bucket_count											
std unordered_map max_load_factor	R	std::unordered_map::max_load_factor											
std unordered_map max_size	R	std::unordered_map::max_size											
std unordered_map merge	R	std::unordered_map::merge											
std unordered_map rehash	R	std::unordered_map::rehash											
std unordered_map reserve	R	std::unordered_map::reserve											
std unordered_map size	R	std::unordered_map::size											
std unordered_map swap	R	std::unordered_map::swap											
std unordered_multimap	R	std::unordered_multimap											
std unordered_multimap begin	R	std::unordered_multimap::begin											
std unordered_multimap bucket	R	std::unordered_multimap::bucket											
std unordered_multimap bucket_count	R	std::unordered_multimap::bucket_count											
std unordered_multimap bucket_size	R	std::unordered_multimap::bucket_size											
std unordered_multimap cbegin	R	std::unordered_multimap::cbegin											
std unordered_multimap cend	R	std::unordered_multimap::cend											
std unordered_multimap clear	R	std::unordered_multimap::clear											
std unordered_multimap constructor	R	std::unordered_multimap::unordered_multimap											
std unordered_multimap count	R	std::unordered_multimap::count											
std unordered_multimap emplace	R	std::unordered_multimap::emplace											
std unordered_multimap emplace_hint	R	std::unordered_multimap::emplace_hint											
std unordered_multimap empty	R	std::unordered_multimap::empty											
std unordered_multimap end	R	std::unordered_multimap::end											
std unordered_multimap equal_range	R	std::unordered_multimap::equal_range											
std unordered_multimap erase	R	std::unordered_multimap::erase											
std unordered_multimap get_allocator	R	std::unordered_multimap::get_allocator											
std unordered_multimap hash_function	R	std::unordered_multimap::hash_function											
std unordered_multimap insert	R	std::unordered_multimap::insert											
std unordered_multimap key_eq	R	std::unordered_multimap::key_eq											
std unordered_multimap load_factor	R	std::unordered_multimap::load_factor											
std unordered_multimap max_bucket_count	R	std::unordered_multimap::max_bucket_count											
std unordered_multimap max_load_factor	R	std::unordered_multimap::max_load_factor											
std unordered_multimap max_size	R	std::unordered_multimap::max_size											
std unordered_multimap merge	R	std::unordered_multimap::merge											
std unordered_multimap rehash	R	std::unordered_multimap::rehash											
std unordered_multimap reserve	R	std::unordered_multimap::reserve											
std unordered_multimap size	R	std::unordered_multimap::size											
std unordered_multimap swap	R	std::unordered_multimap::swap											
std unordered_multiset	R	std::unordered_multiset											
std unordered_multiset begin	R	std::unordered_multiset::begin											
std unordered_multiset bucket	R	std::unordered_multiset::bucket											
std unordered_multiset bucket_count	R	std::unordered_multiset::bucket_count											
std unordered_multiset bucket_size	R	std::unordered_multiset::bucket_size											
std unordered_multiset cbegin	R	std::unordered_multiset::cbegin											
std unordered_multiset cend	R	std::unordered_multiset::cend											
std unordered_multiset clear	R	std::unordered_multiset::clear											
std unordered_multiset constructor	R	std::unordered_multiset::unordered_multiset											
std unordered_multiset count	R	std::unordered_multiset::count											
std unordered_multiset emplace	R	std::unordered_multiset::emplace											
std unordered_multiset emplace_hint	R	std::unordered_multiset::emplace_hint											
std unordered_multiset empty	R	std::unordered_multiset::empty											
std unordered_multiset end	R	std::unordered_multiset::end											
std unordered_multiset equal_range	R	std::unordered_multiset::equal_range											
std unordered_multiset erase	R	std::unordered_multiset::erase											
std unordered_multiset get_allocator	R	std::unordered_multiset::get_allocator											
std unordered_multiset hash_function	R	std::unordered_multiset::hash_function											
std unordered_multiset insert	R	std::unordered_multiset::insert											
std unordered_multiset key_eq	R	std::unordered_multiset::key_eq											
std unordered_multiset load_factor	R	std::unordered_multiset::load_factor											
std unordered_multiset max_bucket_count	R	std::unordered_multiset::max_bucket_count											
std unordered_multiset max_load_factor	R	std::unordered_multiset::max_load_factor											
std unordered_multiset max_size	R	std::unordered_multiset::max_size											
std unordered_multiset merge	R	std::unordered_multiset::merge											
std unordered_multiset rehash	R	std::unordered_multiset::rehash											
std unordered_multiset reserve	R	std::unordered_multiset::reserve											
std unordered_multiset size	R	std::unordered_multiset::size											
std unordered_multiset swap	R	std::unordered_multiset::swap											
std unordered_set	R	std::unordered_set											
std unordered_set begin	R	std::unordered_set::begin											
std unordered_set bucket	R	std::unordered_set::bucket											
std unordered_set bucket_count	R	std::unordered_set::bucket_count											
std unordered_set bucket_size	R	std::unordered_set::bucket_size											
std unordered_set cbegin	R	std::unordered_set::cbegin											
std unordered_set cend	R	std::unordered_set::cend											
std unordered_set clear	R	std::unordered_set::clear											
std unordered_set constructor	R	std::unordered_set::unordered_set											
std unordered_set count	R	std::unordered_set::count											
std unordered_set emplace	R	std::unordered_set::emplace											
std unordered_set emplace_hint	R	std::unordered_set::emplace_hint											
std unordered_set empty	R	std::unordered_set::empty											
std unordered_set end	R	std::unordered_set::end											
std unordered_set equal_range	R	std::unordered_set::equal_range											
std unordered_set erase	R	std::unordered_set::erase											
std unordered_set get_allocator	R	std::unordered_set::get_allocator											
std unordered_set hash_function	R	std::unordered_set::hash_function											
std unordered_set insert	R	std::unordered_set::insert											
std unordered_set key_eq	R	std::unordered_set::key_eq											
std unordered_set load_factor	R	std::unordered_set::load_factor											
std unordered_set max_bucket_count	R	std::unordered_set::max_bucket_count											
std unordered_set max_load_factor	R	std::unordered_set::max_load_factor											
std unordered_set max_size	R	std::unordered_set::max_size											
std unordered_set merge	R	std::unordered_set::merge											
std unordered_set rehash	R	std::unordered_set::rehash											
std unordered_set reserve	R	std::unordered_set::reserve											
std unordered_set size	R	std::unordered_set::size											
std unordered_set swap	R	std::unordered_set::swap											
std upper bound	R	std::upper_bound											
std upper_bound	R	std::upper_bound											
std uppercase	R	std::uppercase											
std use facet	R	std::use_facet											
std use_facet	R	std::use_facet											
std uses allocator	R	std::uses_allocator											
std uses_allocator	R	std::uses_allocator											
std valarray	R	std::valarray											
std variant	R	std::variant											
std variant alternative	R	std::variant_alternative											
std variant constructor	R	std::variant::variant											
std variant emplace	R	std::variant::emplace											
std variant index	R	std::variant::index											
std variant size	R	std::variant_size											
std variant swap	R	std::variant::swap											
std variant valueless by exception	R	std::variant::valueless_by_exception											
std variant valueless_by_exception	R	std::variant::valueless_by_exception											
std variant_alternative	R	std::variant_alternative											
std variant_size	R	std::variant_size											
std vector assign	R	std::vector::assign											
std vector at	R	std::vector::at											
std vector back	R	std::vector::back											
std vector begin	R	std::vector::begin											
std vector capacity	R	std::vector::capacity											
std vector cbegin	R	std::vector::cbegin											
std vector cend	R	std::vector::cend											
std vector clear	R	std::vector::clear											
std vector constructor	R	std::vector::vector											
std vector crbegin	R	std::vector::crbegin											
std vector crend	R	std::vector::crend											
std vector data	R	std::vector::data											
std vector emplace	R	std::vector::emplace											
std vector emplace back	R	std::vector::emplace_back											
std vector emplace_back	R	std::vector::emplace_back											
std vector empty	R	std::vector::empty											
std vector end	R	std::vector::end											
std vector erase	R	std::vector::erase											
std vector front	R	std::vector::front											
std vector get allocator	R	std::vector::get_allocator											
std vector get_allocator	R	std::vector::get_allocator											
std vector insert	R	std::vector::insert											
std vector max size	R	std::vector::max_size											
std vector max_size	R	std::vector::max_size											
std vector pop back	R	std::vector::pop_back											
std vector pop_back	R	std::vector::pop_back											
std vector push back	R	std::vector::push_back											
std vector push_back	R	std::vector::push_back											
std vector rbegin	R	std::vector::rbegin											
std vector rend	R	std::vector::rend											
std vector reserve	R	std::vector::reserve											
std vector resize	R	std::vector::resize											
std vector shrink to fit	R	std::vector::shrink_to_fit											
std vector shrink_to_fit	R	std::vector::shrink_to_fit											
std vector size	R	std::vector::size											
std vector swap	R	std::vector::swap											
std vfprintf	R	std::vfprintf											
std vfscanf	R	std::vfscanf											
std vfwprintf	R	std::vfwprintf											
std vfwscanf	R	std::vfwscanf											
std visit	R	std::visit											
std vprintf	R	std::vprintf											
std vscanf	R	std::vscanf											
std vsnprintf	R	std::vsnprintf											
std vsprintf	R	std::vsprintf											
std vsscanf	R	std::vsscanf											
std vswprintf	R	std::vswprintf											
std vswscanf	R	std::vswscanf											
std vwprintf	R	std::vwprintf											
std vwscanf	R	std::vwscanf											
std wbuffer convert	R	std::wbuffer_convert											
std wbuffer convert constructor	R	std::wbuffer_convert::wbuffer_convert											
std wbuffer convert rdbuf	R	std::wbuffer_convert::rdbuf											
std wbuffer convert state	R	std::wbuffer_convert::state											
std wbuffer_convert	R	std::wbuffer_convert											
std wbuffer_convert constructor	R	std::wbuffer_convert::wbuffer_convert											
std wbuffer_convert rdbuf	R	std::wbuffer_convert::rdbuf											
std wbuffer_convert state	R	std::wbuffer_convert::state											
std wcerr	R	std::wcerr											
std wcin	R	std::wcin											
std wclog	R	std::wclog											
std wcout	R	std::wcout											
std wcrtomb	R	std::wcrtomb											
std wcscat	R	std::wcscat											
std wcschr	R	std::wcschr											
std wcscmp	R	std::wcscmp											
std wcscoll	R	std::wcscoll											
std wcscpy	R	std::wcscpy											
std wcscspn	R	std::wcscspn											
std wcsftime	R	std::wcsftime											
std wcslen	R	std::wcslen											
std wcsncat	R	std::wcsncat											
std wcsncmp	R	std::wcsncmp											
std wcsncpy	R	std::wcsncpy											
std wcspbrk	R	std::wcspbrk											
std wcsrchr	R	std::wcsrchr											
std wcsrtombs	R	std::wcsrtombs											
std wcsspn	R	std::wcsspn											
std wcsstr	R	std::wcsstr											
std wcstod	R	std::wcstod											
std wcstof	R	std::wcstof											
std wcstoimax	R	std::wcstoimax											
std wcstok	R	std::wcstok											
std wcstol	R	std::wcstol											
std wcstold	R	std::wcstold											
std wcstoll	R	std::wcstoll											
std wcstombs	R	std::wcstombs											
std wcstoul	R	std::wcstoul											
std wcstoull	R	std::wcstoull											
std wcstoumax	R	std::wcstoumax											
std wctob	R	std::wctob											
std wctomb	R	std::wctomb											
std wctrans	R	std::wctrans											
std wctype	R	std::wctype											
std weak ptr	R	std::weak_ptr											
std weak ptr constructor	R	std::weak_ptr::weak_ptr											
std weak ptr expired	R	std::weak_ptr::expired											
std weak ptr lock	R	std::weak_ptr::lock											
std weak ptr owner before	R	std::weak_ptr::owner_before											
std weak ptr reset	R	std::weak_ptr::reset											
std weak ptr swap	R	std::weak_ptr::swap											
std weak ptr use count	R	std::weak_ptr::use_count											
std weak_ptr	R	std::weak_ptr											
std weak_ptr constructor	R	std::weak_ptr::weak_ptr											
std weak_ptr expired	R	std::weak_ptr::expired											
std weak_ptr lock	R	std::weak_ptr::lock											
std weak_ptr owner_before	R	std::weak_ptr::owner_before											
std weak_ptr reset	R	std::weak_ptr::reset											
std weak_ptr swap	R	std::weak_ptr::swap											
std weak_ptr use_count	R	std::weak_ptr::use_count											
std weibull distribution	R	std::weibull_distribution											
std weibull distribution a	R	std::weibull_distribution::a											
std weibull distribution b	R	std::weibull_distribution::b											
std weibull distribution constructor	R	std::weibull_distribution::weibull_distribution											
std weibull distribution max	R	std::weibull_distribution::max											
std weibull distribution min	R	std::weibull_distribution::min											
std weibull distribution param	R	std::weibull_distribution::param											
std weibull distribution reset	R	std::weibull_distribution::reset											
std weibull_distribution	R	std::weibull_distribution											
std weibull_distribution a	R	std::weibull_distribution::a											
std weibull_distribution b	R	std::weibull_distribution::b											
std weibull_distribution constructor	R	std::weibull_distribution::weibull_distribution											
std weibull_distribution max	R	std::weibull_distribution::max											
std weibull_distribution min	R	std::weibull_distribution::min											
std weibull_distribution param	R	std::weibull_distribution::param											
std weibull_distribution reset	R	std::weibull_distribution::reset											
std wmemchr	R	std::wmemchr											
std wmemcmp	R	std::wmemcmp											
std wmemcpy	R	std::wmemcpy											
std wmemmove	R	std::wmemmove											
std wmemset	R	std::wmemset											
std wprintf	R	std::wprintf											
std ws	R	std::ws											
std wscanf	R	std::wscanf											
std wstring convert	R	std::wstring_convert											
std wstring convert converted	R	std::wstring_convert::converted											
std wstring convert from bytes	R	std::wstring_convert::from_bytes											
std wstring convert state	R	std::wstring_convert::state											
std wstring convert to bytes	R	std::wstring_convert::to_bytes											
std wstring_convert	R	std::wstring_convert											
std wstring_convert converted	R	std::wstring_convert::converted											
std wstring_convert from_bytes	R	std::wstring_convert::from_bytes											
std wstring_convert state	R	std::wstring_convert::state											
std wstring_convert to_bytes	R	std::wstring_convert::to_bytes											
stddev	R	std::normal_distribution::stddev											
steady clock	R	std::chrono::steady_clock											
steady clock now	R	std::chrono::steady_clock::now											
steady_clock	R	std::chrono::steady_clock											
steady_clock now	R	std::chrono::steady_clock::now											
stem	R	std::filesystem::path::stem											
stod	R	std::stod											
stof	R	std::stof											
stoi	R	std::stoi											
stol	R	std::stol											
stold	R	std::stold											
stoll	R	std::stoll											
store	R	std::atomic::store											
stoul	R	std::stoul											
stoull	R	std::stoull											
strcat	R	std::strcat											
strchr	R	std::strchr											
strcmp	R	std::strcmp											
strcoll	R	std::strcoll											
strcpy	R	std::strcpy											
strcspn	R	std::strcspn											
strerror	R	std::strerror											
strftime	R	std::strftime											
string	R	std::filesystem::path::string											
strlen	R	std::strlen											
strncat	R	std::strncat											
strncmp	R	std::strncmp											
strncpy	R	std::strncpy											
strpbrk	R	std::strpbrk											
strrchr	R	std::strrchr											
strspn	R	std::strspn											
strstr	R	std::strstr											
strstream	R	std::strstream											
strstream Init	R	std::strstream::Init											
strstream bad	R	std::strstream::bad											
strstream clear	R	std::strstream::clear											
strstream copyfmt	R	std::strstream::copyfmt											
strstream destructor	R	std::strstream::~strstream											
strstream eof	R	std::strstream::eof											
strstream exceptions	R	std::strstream::exceptions											
strstream fail	R	std::strstream::fail											
strstream failure	R	std::strstream::failure											
strstream failure what	R	std::strstream::failure::what											
strstream fill	R	std::strstream::fill											
strstream flags	R	std::strstream::flags											
strstream flush	R	std::strstream::flush											
strstream freeze	R	std::strstream::freeze											
strstream gcount	R	std::strstream::gcount											
strstream get	R	std::strstream::get											
strstream getline	R	std::strstream::getline											
strstream getloc	R	std::strstream::getloc											
strstream good	R	std::strstream::good											
strstream ignore	R	std::strstream::ignore											
strstream init	R	std::strstream::init											
strstream iword	R	std::strstream::iword											
strstream move	R	std::strstream::move											
strstream narrow	R	std::strstream::narrow											
strstream pcount	R	std::strstream::pcount											
strstream peek	R	std::strstream::peek											
strstream precision	R	std::strstream::precision											
strstream put	R	std::strstream::put											
strstream putback	R	std::strstream::putback											
strstream pword	R	std::strstream::pword											
strstream rdstate	R	std::strstream::rdstate											
strstream read	R	std::strstream::read											
strstream readsome	R	std::strstream::readsome											
strstream register callback	R	std::strstream::register_callback											
strstream register_callback	R	std::strstream::register_callback											
strstream seekg	R	std::strstream::seekg											
strstream seekp	R	std::strstream::seekp											
strstream set rdbuf	R	std::strstream::set_rdbuf											
strstream set_rdbuf	R	std::strstream::set_rdbuf											
strstream setf	R	std::strstream::setf											
strstream setstate	R	std::strstream::setstate											
strstream str	R	std::strstream::str											
strstream swap	R	std::strstream::swap											
strstream sync	R	std::strstream::sync											
strstream sync with stdio	R	std::strstream::sync_with_stdio											
strstream sync_with_stdio	R	std::strstream::sync_with_stdio											
strstream tellg	R	std::strstream::tellg											
strstream tellp	R	std::strstream::tellp											
strstream tie	R	std::strstream::tie											
strstream unget	R	std::strstream::unget											
strstream unsetf	R	std::strstream::unsetf											
strstream widen	R	std::strstream::widen											
strstream width	R	std::strstream::width											
strstream write	R	std::strstream::write											
strstream xalloc	R	std::strstream::xalloc											
strstreambuf	R	std::strstreambuf											
strstreambuf constructor	R	std::strstreambuf::strstreambuf											
strstreambuf destructor	R	std::strstreambuf::~strstreambuf											
strstreambuf eback	R	std::strstreambuf::eback											
strstreambuf egptr	R	std::strstreambuf::egptr											
strstreambuf epptr	R	std::strstreambuf::epptr											
strstreambuf freeze	R	std::strstreambuf::freeze											
strstreambuf gbump	R	std::strstreambuf::gbump											
strstreambuf getloc	R	std::strstreambuf::getloc											
strstreambuf gptr	R	std::strstreambuf::gptr											
strstreambuf imbue	R	std::strstreambuf::imbue											
strstreambuf in avail	R	std::strstreambuf::in_avail											
strstreambuf in_avail	R	std::strstreambuf::in_avail											
strstreambuf pbase	R	std::strstreambuf::pbase											
strstreambuf pbump	R	std::strstreambuf::pbump											
strstreambuf pcount	R	std::strstreambuf::pcount											
strstreambuf pptr	R	std::strstreambuf::pptr											
strstreambuf pubimbue	R	std::strstreambuf::pubimbue											
strstreambuf pubseekoff	R	std::strstreambuf::pubseekoff											
strstreambuf pubseekpos	R	std::strstreambuf::pubseekpos											
strstreambuf pubsync	R	std::strstreambuf::pubsync											
strstreambuf sbumpc	R	std::strstreambuf::sbumpc											
strstreambuf setbuf	R	std::strstreambuf::setbuf											
strstreambuf setg	R	std::strstreambuf::setg											
strstreambuf setp	R	std::strstreambuf::setp											
strstreambuf sgetc	R	std::strstreambuf::sgetc											
strstreambuf showmanyc	R	std::strstreambuf::showmanyc											
strstreambuf snextc	R	std::strstreambuf::snextc											
strstreambuf sputbackc	R	std::strstreambuf::sputbackc											
strstreambuf sputc	R	std::strstreambuf::sputc											
strstreambuf str	R	std::strstreambuf::str											
strstreambuf sungetc	R	std::strstreambuf::sungetc											
strstreambuf swap	R	std::strstreambuf::swap											
strstreambuf sync	R	std::strstreambuf::sync											
strstreambuf uflow	R	std::strstreambuf::uflow											
strtod	R	std::strtod											
strtof	R	std::strtof											
strtoimax	R	std::strtoimax											
strtok	R	std::strtok											
strtol	R	std::strtol											
strtold	R	std::strtold											
strtoll	R	std::strtoll											
strtoul	R	std::strtoul											
strtoull	R	std::strtoull											
strtoumax	R	std::strtoumax											
strxfrm	R	std::strxfrm											
student t distribution	R	std::student_t_distribution											
student t distribution constructor	R	std::student_t_distribution::student_t_distribution											
student t distribution max	R	std::student_t_distribution::max											
student t distribution min	R	std::student_t_distribution::min											
student t distribution n	R	std::student_t_distribution::n											
student t distribution param	R	std::student_t_distribution::param											
student t distribution reset	R	std::student_t_distribution::reset											
student_t_distribution	R	std::student_t_distribution											
student_t_distribution constructor	R	std::student_t_distribution::student_t_distribution											
student_t_distribution max	R	std::student_t_distribution::max											
student_t_distribution min	R	std::student_t_distribution::min											
student_t_distribution n	R	std::student_t_distribution::n											
student_t_distribution param	R	std::student_t_distribution::param											
student_t_distribution reset	R	std::student_t_distribution::reset											
sub match	R	std::sub_match											
sub match constructor	R	std::sub_match::sub_match											
sub match str	R	std::sub_match::str											
sub_match	R	std::sub_match											
sub_match constructor	R	std::sub_match::sub_match											
sub_match str	R	std::sub_match::str											
subtract with carry engine	R	std::subtract_with_carry_engine											
subtract with carry engine constructor	R	std::subtract_with_carry_engine::subtract_with_carry_engine											
subtract with carry engine discard	R	std::subtract_with_carry_engine::discard											
subtract with carry engine max	R	std::subtract_with_carry_engine::max											
subtract with carry engine min	R	std::subtract_with_carry_engine::min											
subtract with carry engine seed	R	std::subtract_with_carry_engine::seed											
subtract_with_carry_engine	R	std::subtract_with_carry_engine											
subtract_with_carry_engine constructor	R	std::subtract_with_carry_engine::subtract_with_carry_engine											
subtract_with_carry_engine discard	R	std::subtract_with_carry_engine::discard											
subtract_with_carry_engine max	R	std::subtract_with_carry_engine::max											
subtract_with_carry_engine min	R	std::subtract_with_carry_engine::min											
subtract_with_carry_engine seed	R	std::subtract_with_carry_engine::seed											
suffix	R	std::match_results::suffix											
swap	R	std::swap											
swprintf	R	std::swprintf											
swscanf	R	std::swscanf											
symlink status	R	std::filesystem::symlink_status											
symlink_status	R	std::filesystem::symlink_status											
synchronized pool resource	R	std::pmr::synchronized_pool_resource											
synchronized pool resource allocate	R	std::pmr::synchronized_pool_resource::allocate											
synchronized pool resource constructor	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
synchronized pool resource deallocate	R	std::pmr::synchronized_pool_resource::deallocate											
synchronized pool resource do is equal	R	std::pmr::synchronized_pool_resource::do_is_equal											
synchronized pool resource is equal	R	std::pmr::synchronized_pool_resource::is_equal											
synchronized pool resource options	R	std::pmr::synchronized_pool_resource::options											
synchronized pool resource release	R	std::pmr::synchronized_pool_resource::release											
synchronized pool resource upstream resource	R	std::pmr::synchronized_pool_resource::upstream_resource											
synchronized_pool_resource	R	std::pmr::synchronized_pool_resource											
synchronized_pool_resource allocate	R	std::pmr::synchronized_pool_resource::allocate											
synchronized_pool_resource constructor	R	std::pmr::synchronized_pool_resource::synchronized_pool_resource											
synchronized_pool_resource deallocate	R	std::pmr::synchronized_pool_resource::deallocate											
synchronized_pool_resource do_is_equal	R	std::pmr::synchronized_pool_resource::do_is_equal											
synchronized_pool_resource is_equal	R	std::pmr::synchronized_pool_resource::is_equal											
synchronized_pool_resource options	R	std::pmr::synchronized_pool_resource::options											
synchronized_pool_resource release	R	std::pmr::synchronized_pool_resource::release											
synchronized_pool_resource upstream_resource	R	std::pmr::synchronized_pool_resource::upstream_resource											
system	R	std::system											
system category	R	std::system_category											
system clock	R	std::chrono::system_clock											
system clock from time t	R	std::chrono::system_clock::from_time_t											
system clock now	R	std::chrono::system_clock::now											
system clock to time t	R	std::chrono::system_clock::to_time_t											
system complete	R	std::filesystem::system_complete											
system error	R	std::system_error											
system error code	R	std::system_error::code											
system_category	R	std::system_category											
system_clock	R	std::chrono::system_clock											
system_clock from_time_t	R	std::chrono::system_clock::from_time_t											
system_clock now	R	std::chrono::system_clock::now											
system_clock to_time_t	R	std::chrono::system_clock::to_time_t											
system_complete	R	std::filesystem::system_complete											
system_error	R	std::system_error											
system_error code	R	std::system_error::code											
t	R	std::binomial_distribution::t											
tan	R	std::tan											
tanh	R	std::tanh											
target	R	std::function::target											
target type	R	std::function::target_type											
target_type	R	std::function::target_type											
temp directory path	R	std::filesystem::temp_directory_path											
temp_directory_path	R	std::filesystem::temp_directory_path											
terminate	R	std::terminate											
test	R	std::bitset::test											
test and set	R	std::atomic_flag::test_and_set											
test_and_set	R	std::atomic_flag::test_and_set											
this thread get id	R	std::this_thread::get_id											
this thread sleep for	R	std::this_thread::sleep_for											
this thread sleep until	R	std::this_thread::sleep_until											
this thread yield	R	std::this_thread::yield											
this_thread get_id	R	std::this_thread::get_id											
this_thread sleep_for	R	std::this_thread::sleep_for											
this_thread sleep_until	R	std::this_thread::sleep_until											
this_thread yield	R	std::this_thread::yield											
thread	R	std::thread											
thread constructor	R	std::thread::thread											
thread detach	R	std::thread::detach											
thread get id	R	std::thread::get_id											
thread get_id	R	std::thread::get_id											
thread hardware concurrency	R	std::thread::hardware_concurrency											
thread hardware_concurrency	R	std::thread::hardware_concurrency											
thread id	R	std::thread::id											
thread join	R	std::thread::join											
thread joinable	R	std::thread::joinable											
thread native handle	R	std::thread::native_handle											
thread native_handle	R	std::thread::native_handle											
thread swap	R	std::thread::swap											
throw with nested	R	std::throw_with_nested											
throw_with_nested	R	std::throw_with_nested											
tie	R	std::tie											
time	R	std::time											
time base	R	std::time_base											
time get	R	std::time_get											
time get byname	R	std::time_get_byname											
time get constructor	R	std::time_get::time_get											
time get date order	R	std::time_get::date_order											
time get destructor	R	std::time_get::~time_get											
time get do date order	R	std::time_get::do_date_order											
time get do get date	R	std::time_get::do_get_date											
time get do get monthname	R	std::time_get::do_get_monthname											
time get do get weekday	R	std::time_get::do_get_weekday											
time get get	R	std::time_get::get											
time get get date	R	std::time_get::get_date											
time get get monthname	R	std::time_get::get_monthname											
time get get weekday	R	std::time_get::get_weekday											
time point	R	std::chrono::time_point											
time point cast	R	std::chrono::time_point_cast											
time point constructor	R	std::chrono::time_point::time_point											
time point max	R	std::chrono::time_point::max											
time point min	R	std::chrono::time_point::min											
time point time since epoch	R	std::chrono::time_point::time_since_epoch											
time put	R	std::time_put											
time put byname	R	std::time_put_byname											
time put byname do put	R	std::time_put_byname::do_put											
time put byname put	R	std::time_put_byname::put											
time put constructor	R	std::time_put::time_put											
time put destructor	R	std::time_put::~time_put											
time put do put	R	std::time_put::do_put											
time put put	R	std::time_put::put											
time since epoch	R	std::chrono::time_point::time_since_epoch											
time_base	R	std::time_base											
time_get	R	std::time_get											
time_get constructor	R	std::time_get::time_get											
time_get date_order	R	std::time_get::date_order											
time_get destructor	R	std::time_get::~time_get											
time_get do_date_order	R	std::time_get::do_date_order											
time_get do_get_date	R	std::time_get::do_get_date											
time_get do_get_monthname	R	std::time_get::do_get_monthname											
time_get do_get_weekday	R	std::time_get::do_get_weekday											
time_get get	R	std::time_get::get											
time_get get_date	R	std::time_get::get_date											
time_get get_monthname	R	std::time_get::get_monthname											
time_get get_weekday	R	std::time_get::get_weekday											
time_get_byname	R	std::time_get_byname											
time_point	R	std::chrono::time_point											
time_point constructor	R	std::chrono::time_point::time_point											
time_point max	R	std::chrono::time_point::max											
time_point min	R	std::chrono::time_point::min											
time_point time_since_epoch	R	std::chrono::time_point::time_since_epoch											
time_point_cast	R	std::chrono::time_point_cast											
time_put	R	std::time_put											
time_put constructor	R	std::time_put::time_put											
time_put destructor	R	std::time_put::~time_put											
time_put do_put	R	std::time_put::do_put											
time_put put	R	std::time_put::put											
time_put_byname	R	std::time_put_byname											
time_put_byname do_put	R	std::time_put_byname::do_put											
time_put_byname put	R	std::time_put_byname::put											
time_since_epoch	R	std::chrono::time_point::time_since_epoch											
timed mutex	R	std::timed_mutex											
timed mutex lock	R	std::timed_mutex::lock											
timed mutex native handle	R	std::timed_mutex::native_handle											
timed mutex try lock	R	std::timed_mutex::try_lock											
timed mutex try lock for	R	std::timed_mutex::try_lock_for											
timed mutex try lock until	R	std::timed_mutex::try_lock_until											
timed mutex unlock	R	std::timed_mutex::unlock											
timed_mutex	R	std::timed_mutex											
timed_mutex lock	R	std::timed_mutex::lock											
timed_mutex native_handle	R	std::timed_mutex::native_handle											
timed_mutex try_lock	R	std::timed_mutex::try_lock											
timed_mutex try_lock_for	R	std::timed_mutex::try_lock_for											
timed_mutex try_lock_until	R	std::timed_mutex::try_lock_until											
timed_mutex unlock	R	std::timed_mutex::unlock											
timespec	R	std::timespec											
tm	R	std::tm											
tmpfile	R	std::tmpfile											
tmpnam	R	std::tmpnam											
to array	R	std::experimental::to_array											
to bytes	R	std::wstring_convert::to_bytes											
to char type	R	std::char_traits::to_char_type											
to int type	R	std::char_traits::to_int_type											
to string	R	std::to_string											
to time t	R	std::chrono::system_clock::to_time_t											
to ullong	R	std::bitset::to_ullong											
to ulong	R	std::bitset::to_ulong											
to wstring	R	std::to_wstring											
to_array	R	std::experimental::to_array											
to_bytes	R	std::wstring_convert::to_bytes											
to_char_type	R	std::char_traits::to_char_type											
to_int_type	R	std::char_traits::to_int_type											
to_string	R	std::to_string											
to_time_t	R	std::chrono::system_clock::to_time_t											
to_ullong	R	std::bitset::to_ullong											
to_ulong	R	std::bitset::to_ulong											
to_wstring	R	std::to_wstring											
towctrans	R	std::towctrans											
towlower	R	std::towlower											
towupper	R	std::towupper											
transform	R	std::transform											
transform exclusive scan	R	std::transform_exclusive_scan											
transform inclusive scan	R	std::transform_inclusive_scan											
transform primary	R	std::regex_traits::transform_primary											
transform_exclusive_scan	R	std::transform_exclusive_scan											
transform_inclusive_scan	R	std::transform_inclusive_scan											
transform_primary	R	std::regex_traits::transform_primary											
translate	R	std::regex_traits::translate											
translate nocase	R	std::regex_traits::translate_nocase											
translate_nocase	R	std::regex_traits::translate_nocase											
treat as floating point	R	std::chrono::treat_as_floating_point											
treat_as_floating_point	R	std::chrono::treat_as_floating_point											
try lock	R	std::try_lock											
try lock shared for	R	std::shared_timed_mutex::try_lock_shared_for											
try lock shared until	R	std::shared_timed_mutex::try_lock_shared_until											
try to lock t	R	std::try_to_lock_t											
try_lock	R	std::try_lock											
try_lock_shared_for	R	std::shared_timed_mutex::try_lock_shared_for											
try_lock_shared_until	R	std::shared_timed_mutex::try_lock_shared_until											
try_to_lock_t	R	std::try_to_lock_t											
tuple	R	std::tuple											
tuple cat	R	std::tuple_cat											
tuple constructor	R	std::tuple::tuple											
tuple swap	R	std::tuple::swap											
tuple_cat	R	std::tuple_cat											
type	R	std::any::type											
type index	R	std::type_index											
type index hash code	R	std::type_index::hash_code											
type index name	R	std::type_index::name											
type info	R	std::type_info											
type info before	R	std::type_info::before											
type info hash code	R	std::type_info::hash_code											
type info name	R	std::type_info::name											
type_index	R	std::type_index											
type_index hash_code	R	std::type_index::hash_code											
type_index name	R	std::type_index::name											
type_info	R	std::type_info											
type_info before	R	std::type_info::before											
type_info hash_code	R	std::type_info::hash_code											
type_info name	R	std::type_info::name											
u16string	R	std::filesystem::path::u16string											
u32string	R	std::filesystem::path::u32string											
u8path	R	std::filesystem::u8path											
u8string	R	std::filesystem::path::u8string											
unary negate	R	std::unary_negate											
unary_negate	R	std::unary_negate											
uncaught exception	R	std::uncaught_exception											
uncaught_exception	R	std::uncaught_exception											
undeclare no pointers	R	std::undeclare_no_pointers											
undeclare reachable	R	std::undeclare_reachable											
undeclare_no_pointers	R	std::undeclare_no_pointers											
undeclare_reachable	R	std::undeclare_reachable											
underflow error	R	std::underflow_error											
underflow error what	R	std::underflow_error::what											
underflow_error	R	std::underflow_error											
underflow_error what	R	std::underflow_error::what											
underlying type	R	std::underlying_type											
underlying_type	R	std::underlying_type											
ungetc	R	std::ungetc											
ungetwc	R	std::ungetwc											
uniform int distribution	R	std::uniform_int_distribution											
uniform int distribution a	R	std::uniform_int_distribution::a											
uniform int distribution b	R	std::uniform_int_distribution::b											
uniform int distribution constructor	R	std::uniform_int_distribution::uniform_int_distribution											
uniform int distribution max	R	std::uniform_int_distribution::max											
uniform int distribution min	R	std::uniform_int_distribution::min											
uniform int distribution param	R	std::uniform_int_distribution::param											
uniform int distribution reset	R	std::uniform_int_distribution::reset											
uniform real distribution	R	std::uniform_real_distribution											
uniform real distribution a	R	std::uniform_real_distribution::a											
uniform real distribution b	R	std::uniform_real_distribution::b											
uniform real distribution constructor	R	std::uniform_real_distribution::uniform_real_distribution											
uniform real distribution max	R	std::uniform_real_distribution::max											
uniform real distribution min	R	std::uniform_real_distribution::min											
uniform real distribution param	R	std::uniform_real_distribution::param											
uniform real distribution reset	R	std::uniform_real_distribution::reset											
uniform_int_distribution	R	std::uniform_int_distribution											
uniform_int_distribution a	R	std::uniform_int_distribution::a											
uniform_int_distribution b	R	std::uniform_int_distribution::b											
uniform_int_distribution constructor	R	std::uniform_int_distribution::uniform_int_distribution											
uniform_int_distribution max	R	std::uniform_int_distribution::max											
uniform_int_distribution min	R	std::uniform_int_distribution::min											
uniform_int_distribution param	R	std::uniform_int_distribution::param											
uniform_int_distribution reset	R	std::uniform_int_distribution::reset											
uniform_real_distribution	R	std::uniform_real_distribution											
uniform_real_distribution a	R	std::uniform_real_distribution::a											
uniform_real_distribution b	R	std::uniform_real_distribution::b											
uniform_real_distribution constructor	R	std::uniform_real_distribution::uniform_real_distribution											
uniform_real_distribution max	R	std::uniform_real_distribution::max											
uniform_real_distribution min	R	std::uniform_real_distribution::min											
uniform_real_distribution param	R	std::uniform_real_distribution::param											
uniform_real_distribution reset	R	std::uniform_real_distribution::reset											
uninitialized fill n	R	std::uninitialized_fill_n											
uninitialized_fill_n	R	std::uninitialized_fill_n											
unique	R	std::unique											
unique copy	R	std::unique_copy											
unique lock	R	std::unique_lock											
unique lock constructor	R	std::unique_lock::unique_lock											
unique lock lock	R	std::unique_lock::lock											
unique lock mutex	R	std::unique_lock::mutex											
unique lock owns lock	R	std::unique_lock::owns_lock											
unique lock release	R	std::unique_lock::release											
unique lock swap	R	std::unique_lock::swap											
unique lock try lock	R	std::unique_lock::try_lock											
unique lock try lock for	R	std::unique_lock::try_lock_for											
unique lock try lock until	R	std::unique_lock::try_lock_until											
unique lock unlock	R	std::unique_lock::unlock											
unique ptr	R	std::unique_ptr											
unique ptr get	R	std::unique_ptr::get											
unique ptr get deleter	R	std::unique_ptr::get_deleter											
unique ptr release	R	std::unique_ptr::release											
unique ptr reset	R	std::unique_ptr::reset											
unique ptr swap	R	std::unique_ptr::swap											
unique_copy	R	std::unique_copy											
unique_lock	R	std::unique_lock											
unique_lock constructor	R	std::unique_lock::unique_lock											
unique_lock lock	R	std::unique_lock::lock											
unique_lock mutex	R	std::unique_lock::mutex											
unique_lock owns_lock	R	std::unique_lock::owns_lock											
unique_lock release	R	std::unique_lock::release											
unique_lock swap	R	std::unique_lock::swap											
unique_lock try_lock	R	std::unique_lock::try_lock											
unique_lock try_lock_for	R	std::unique_lock::try_lock_for											
unique_lock try_lock_until	R	std::unique_lock::try_lock_until											
unique_lock unlock	R	std::unique_lock::unlock											
unique_ptr	R	std::unique_ptr											
unique_ptr get	R	std::unique_ptr::get											
unique_ptr get_deleter	R	std::unique_ptr::get_deleter											
unique_ptr release	R	std::unique_ptr::release											
unique_ptr reset	R	std::unique_ptr::reset											
unique_ptr swap	R	std::unique_ptr::swap											
unitbuf	R	std::unitbuf											
unordered map	R	std::unordered_map											
unordered map at	R	std::unordered_map::at											
unordered map begin	R	std::unordered_map::begin											
unordered map bucket	R	std::unordered_map::bucket											
unordered map bucket count	R	std::unordered_map::bucket_count											
unordered map bucket size	R	std::unordered_map::bucket_size											
unordered map cbegin	R	std::unordered_map::cbegin											
unordered map cend	R	std::unordered_map::cend											
unordered map clear	R	std::unordered_map::clear											
unordered map constructor	R	std::unordered_map::unordered_map											
unordered map count	R	std::unordered_map::count											
unordered map emplace	R	std::unordered_map::emplace											
unordered map emplace hint	R	std::unordered_map::emplace_hint											
unordered map empty	R	std::unordered_map::empty											
unordered map end	R	std::unordered_map::end											
unordered map equal range	R	std::unordered_map::equal_range											
unordered map erase	R	std::unordered_map::erase											
unordered map get allocator	R	std::unordered_map::get_allocator											
unordered map hash function	R	std::unordered_map::hash_function											
unordered map insert	R	std::unordered_map::insert											
unordered map key eq	R	std::unordered_map::key_eq											
unordered map load factor	R	std::unordered_map::load_factor											
unordered map max bucket count	R	std::unordered_map::max_bucket_count											
unordered map max load factor	R	std::unordered_map::max_load_factor											
unordered map max size	R	std::unordered_map::max_size											
unordered map merge	R	std::unordered_map::merge											
unordered map rehash	R	std::unordered_map::rehash											
unordered map reserve	R	std::unordered_map::reserve											
unordered map size	R	std::unordered_map::size											
unordered map swap	R	std::unordered_map::swap											
unordered multimap	R	std::unordered_multimap											
unordered multimap begin	R	std::unordered_multimap::begin											
unordered multimap bucket	R	std::unordered_multimap::bucket											
unordered multimap bucket count	R	std::unordered_multimap::bucket_count											
unordered multimap bucket size	R	std::unordered_multimap::bucket_size											
unordered multimap cbegin	R	std::unordered_multimap::cbegin											
unordered multimap cend	R	std::unordered_multimap::cend											
unordered multimap clear	R	std::unordered_multimap::clear											
unordered multimap constructor	R	std::unordered_multimap::unordered_multimap											
unordered multimap count	R	std::unordered_multimap::count											
unordered multimap emplace	R	std::unordered_multimap::emplace											
unordered multimap emplace hint	R	std::unordered_multimap::emplace_hint											
unordered multimap empty	R	std::unordered_multimap::empty											
unordered multimap end	R	std::unordered_multimap::end											
unordered multimap equal range	R	std::unordered_multimap::equal_range											
unordered multimap erase	R	std::unordered_multimap::erase											
unordered multimap get allocator	R	std::unordered_multimap::get_allocator											
unordered multimap hash function	R	std::unordered_multimap::hash_function											
unordered multimap insert	R	std::unordered_multimap::insert											
unordered multimap key eq	R	std::unordered_multimap::key_eq											
unordered multimap load factor	R	std::unordered_multimap::load_factor											
unordered multimap max bucket count	R	std::unordered_multimap::max_bucket_count											
unordered multimap max load factor	R	std::unordered_multimap::max_load_factor											
unordered multimap max size	R	std::unordered_multimap::max_size											
unordered multimap merge	R	std::unordered_multimap::merge											
unordered multimap rehash	R	std::unordered_multimap::rehash											
unordered multimap reserve	R	std::unordered_multimap::reserve											
unordered multimap size	R	std::unordered_multimap::size											
unordered multimap swap	R	std::unordered_multimap::swap											
unordered multiset	R	std::unordered_multiset											
unordered multiset begin	R	std::unordered_multiset::begin											
unordered multiset bucket	R	std::unordered_multiset::bucket											
unordered multiset bucket count	R	std::unordered_multiset::bucket_count											
unordered multiset bucket size	R	std::unordered_multiset::bucket_size											
unordered multiset cbegin	R	std::unordered_multiset::cbegin											
unordered multiset cend	R	std::unordered_multiset::cend											
unordered multiset clear	R	std::unordered_multiset::clear											
unordered multiset constructor	R	std::unordered_multiset::unordered_multiset											
unordered multiset count	R	std::unordered_multiset::count											
unordered multiset emplace	R	std::unordered_multiset::emplace											
unordered multiset emplace hint	R	std::unordered_multiset::emplace_hint											
unordered multiset empty	R	std::unordered_multiset::empty											
unordered multiset end	R	std::unordered_multiset::end											
unordered multiset equal range	R	std::unordered_multiset::equal_range											
unordered multiset erase	R	std::unordered_multiset::erase											
unordered multiset get allocator	R	std::unordered_multiset::get_allocator											
unordered multiset hash function	R	std::unordered_multiset::hash_function											
unordered multiset insert	R	std::unordered_multiset::insert											
unordered multiset key eq	R	std::unordered_multiset::key_eq											
unordered multiset load factor	R	std::unordered_multiset::load_factor											
unordered multiset max bucket count	R	std::unordered_multiset::max_bucket_count											
unordered multiset max load factor	R	std::unordered_multiset::max_load_factor											
unordered multiset max size	R	std::unordered_multiset::max_size											
unordered multiset merge	R	std::unordered_multiset::merge											
unordered multiset rehash	R	std::unordered_multiset::rehash											
unordered multiset reserve	R	std::unordered_multiset::reserve											
unordered multiset size	R	std::unordered_multiset::size											
unordered multiset swap	R	std::unordered_multiset::swap											
unordered set	R	std::unordered_set											
unordered set begin	R	std::unordered_set::begin											
unordered set bucket	R	std::unordered_set::bucket											
unordered set bucket count	R	std::unordered_set::bucket_count											
unordered set bucket size	R	std::unordered_set::bucket_size											
unordered set cbegin	R	std::unordered_set::cbegin											
unordered set cend	R	std::unordered_set::cend											
unordered set clear	R	std::unordered_set::clear											
unordered set constructor	R	std::unordered_set::unordered_set											
unordered set count	R	std::unordered_set::count											
unordered set emplace	R	std::unordered_set::emplace											
unordered set emplace hint	R	std::unordered_set::emplace_hint											
unordered set empty	R	std::unordered_set::empty											
unordered set end	R	std::unordered_set::end											
unordered set equal range	R	std::unordered_set::equal_range											
unordered set erase	R	std::unordered_set::erase											
unordered set get allocator	R	std::unordered_set::get_allocator											
unordered set hash function	R	std::unordered_set::hash_function											
unordered set insert	R	std::unordered_set::insert											
unordered set key eq	R	std::unordered_set::key_eq											
unordered set load factor	R	std::unordered_set::load_factor											
unordered set max bucket count	R	std::unordered_set::max_bucket_count											
unordered set max load factor	R	std::unordered_set::max_load_factor											
unordered set max size	R	std::unordered_set::max_size											
unordered set merge	R	std::unordered_set::merge											
unordered set rehash	R	std::unordered_set::rehash											
unordered set reserve	R	std::unordered_set::reserve											
unordered set size	R	std::unordered_set::size											
unordered set swap	R	std::unordered_set::swap											
unordered_map	R	std::unordered_map											
unordered_map at	R	std::unordered_map::at											
unordered_map begin	R	std::unordered_map::begin											
unordered_map bucket	R	std::unordered_map::bucket											
unordered_map bucket_count	R	std::unordered_map::bucket_count											
unordered_map bucket_size	R	std::unordered_map::bucket_size											
unordered_map cbegin	R	std::unordered_map::cbegin											
unordered_map cend	R	std::unordered_map::cend											
unordered_map clear	R	std::unordered_map::clear											
unordered_map constructor	R	std::unordered_map::unordered_map											
unordered_map count	R	std::unordered_map::count											
unordered_map emplace	R	std::unordered_map::emplace											
unordered_map emplace_hint	R	std::unordered_map::emplace_hint											
unordered_map empty	R	std::unordered_map::empty											
unordered_map end	R	std::unordered_map::end											
unordered_map equal_range	R	std::unordered_map::equal_range											
unordered_map erase	R	std::unordered_map::erase											
unordered_map get_allocator	R	std::unordered_map::get_allocator											
unordered_map hash_function	R	std::unordered_map::hash_function											
unordered_map insert	R	std::unordered_map::insert											
unordered_map key_eq	R	std::unordered_map::key_eq											
unordered_map load_factor	R	std::unordered_map::load_factor											
unordered_map max_bucket_count	R	std::unordered_map::max_bucket_count											
unordered_map max_load_factor	R	std::unordered_map::max_load_factor											
unordered_map max_size	R	std::unordered_map::max_size											
unordered_map merge	R	std::unordered_map::merge											
unordered_map rehash	R	std::unordered_map::rehash											
unordered_map reserve	R	std::unordered_map::reserve											
unordered_map size	R	std::unordered_map::size											
unordered_map swap	R	std::unordered_map::swap											
unordered_multimap	R	std::unordered_multimap											
unordered_multimap begin	R	std::unordered_multimap::begin											
unordered_multimap bucket	R	std::unordered_multimap::bucket											
unordered_multimap bucket_count	R	std::unordered_multimap::bucket_count											
unordered_multimap bucket_size	R	std::unordered_multimap::bucket_size											
unordered_multimap cbegin	R	std::unordered_multimap::cbegin											
unordered_multimap cend	R	std::unordered_multimap::cend											
unordered_multimap clear	R	std::unordered_multimap::clear											
unordered_multimap constructor	R	std::unordered_multimap::unordered_multimap											
unordered_multimap count	R	std::unordered_multimap::count											
unordered_multimap emplace	R	std::unordered_multimap::emplace											
unordered_multimap emplace_hint	R	std::unordered_multimap::emplace_hint											
unordered_multimap empty	R	std::unordered_multimap::empty											
unordered_multimap end	R	std::unordered_multimap::end											
unordered_multimap equal_range	R	std::unordered_multimap::equal_range											
unordered_multimap erase	R	std::unordered_multimap::erase											
unordered_multimap get_allocator	R	std::unordered_multimap::get_allocator											
unordered_multimap hash_function	R	std::unordered_multimap::hash_function											
unordered_multimap insert	R	std::unordered_multimap::insert											
unordered_multimap key_eq	R	std::unordered_multimap::key_eq											
unordered_multimap load_factor	R	std::unordered_multimap::load_factor											
unordered_multimap max_bucket_count	R	std::unordered_multimap::max_bucket_count											
unordered_multimap max_load_factor	R	std::unordered_multimap::max_load_factor											
unordered_multimap max_size	R	std::unordered_multimap::max_size											
unordered_multimap merge	R	std::unordered_multimap::merge											
unordered_multimap rehash	R	std::unordered_multimap::rehash											
unordered_multimap reserve	R	std::unordered_multimap::reserve											
unordered_multimap size	R	std::unordered_multimap::size											
unordered_multimap swap	R	std::unordered_multimap::swap											
unordered_multiset	R	std::unordered_multiset											
unordered_multiset begin	R	std::unordered_multiset::begin											
unordered_multiset bucket	R	std::unordered_multiset::bucket											
unordered_multiset bucket_count	R	std::unordered_multiset::bucket_count											
unordered_multiset bucket_size	R	std::unordered_multiset::bucket_size											
unordered_multiset cbegin	R	std::unordered_multiset::cbegin											
unordered_multiset cend	R	std::unordered_multiset::cend											
unordered_multiset clear	R	std::unordered_multiset::clear											
unordered_multiset constructor	R	std::unordered_multiset::unordered_multiset											
unordered_multiset count	R	std::unordered_multiset::count											
unordered_multiset emplace	R	std::unordered_multiset::emplace											
unordered_multiset emplace_hint	R	std::unordered_multiset::emplace_hint											
unordered_multiset empty	R	std::unordered_multiset::empty											
unordered_multiset end	R	std::unordered_multiset::end											
unordered_multiset equal_range	R	std::unordered_multiset::equal_range											
unordered_multiset erase	R	std::unordered_multiset::erase											
unordered_multiset get_allocator	R	std::unordered_multiset::get_allocator											
unordered_multiset hash_function	R	std::unordered_multiset::hash_function											
unordered_multiset insert	R	std::unordered_multiset::insert											
unordered_multiset key_eq	R	std::unordered_multiset::key_eq											
unordered_multiset load_factor	R	std::unordered_multiset::load_factor											
unordered_multiset max_bucket_count	R	std::unordered_multiset::max_bucket_count											
unordered_multiset max_load_factor	R	std::unordered_multiset::max_load_factor											
unordered_multiset max_size	R	std::unordered_multiset::max_size											
unordered_multiset merge	R	std::unordered_multiset::merge											
unordered_multiset rehash	R	std::unordered_multiset::rehash											
unordered_multiset reserve	R	std::unordered_multiset::reserve											
unordered_multiset size	R	std::unordered_multiset::size											
unordered_multiset swap	R	std::unordered_multiset::swap											
unordered_set	R	std::unordered_set											
unordered_set begin	R	std::unordered_set::begin											
unordered_set bucket	R	std::unordered_set::bucket											
unordered_set bucket_count	R	std::unordered_set::bucket_count											
unordered_set bucket_size	R	std::unordered_set::bucket_size											
unordered_set cbegin	R	std::unordered_set::cbegin											
unordered_set cend	R	std::unordered_set::cend											
unordered_set clear	R	std::unordered_set::clear											
unordered_set constructor	R	std::unordered_set::unordered_set											
unordered_set count	R	std::unordered_set::count											
unordered_set emplace	R	std::unordered_set::emplace											
unordered_set emplace_hint	R	std::unordered_set::emplace_hint											
unordered_set empty	R	std::unordered_set::empty											
unordered_set end	R	std::unordered_set::end											
unordered_set equal_range	R	std::unordered_set::equal_range											
unordered_set erase	R	std::unordered_set::erase											
unordered_set get_allocator	R	std::unordered_set::get_allocator											
unordered_set hash_function	R	std::unordered_set::hash_function											
unordered_set insert	R	std::unordered_set::insert											
unordered_set key_eq	R	std::unordered_set::key_eq											
unordered_set load_factor	R	std::unordered_set::load_factor											
unordered_set max_bucket_count	R	std::unordered_set::max_bucket_count											
unordered_set max_load_factor	R	std::unordered_set::max_load_factor											
unordered_set max_size	R	std::unordered_set::max_size											
unordered_set merge	R	std::unordered_set::merge											
unordered_set rehash	R	std::unordered_set::rehash											
unordered_set reserve	R	std::unordered_set::reserve											
unordered_set size	R	std::unordered_set::size											
unordered_set swap	R	std::unordered_set::swap											
unshift	R	std::codecvt::unshift											
unsynchronized pool resource	R	std::pmr::unsynchronized_pool_resource											
unsynchronized pool resource allocate	R	std::pmr::unsynchronized_pool_resource::allocate											
unsynchronized pool resource constructor	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
unsynchronized pool resource deallocate	R	std::pmr::unsynchronized_pool_resource::deallocate											
unsynchronized pool resource do is equal	R	std::pmr::unsynchronized_pool_resource::do_is_equal											
unsynchronized pool resource is equal	R	std::pmr::unsynchronized_pool_resource::is_equal											
unsynchronized pool resource options	R	std::pmr::unsynchronized_pool_resource::options											
unsynchronized pool resource release	R	std::pmr::unsynchronized_pool_resource::release											
unsynchronized pool resource upstream resource	R	std::pmr::unsynchronized_pool_resource::upstream_resource											
unsynchronized_pool_resource	R	std::pmr::unsynchronized_pool_resource											
unsynchronized_pool_resource allocate	R	std::pmr::unsynchronized_pool_resource::allocate											
unsynchronized_pool_resource constructor	R	std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource											
unsynchronized_pool_resource deallocate	R	std::pmr::unsynchronized_pool_resource::deallocate											
unsynchronized_pool_resource do_is_equal	R	std::pmr::unsynchronized_pool_resource::do_is_equal											
unsynchronized_pool_resource is_equal	R	std::pmr::unsynchronized_pool_resource::is_equal											
unsynchronized_pool_resource options	R	std::pmr::unsynchronized_pool_resource::options											
unsynchronized_pool_resource release	R	std::pmr::unsynchronized_pool_resource::release											
unsynchronized_pool_resource upstream_resource	R	std::pmr::unsynchronized_pool_resource::upstream_resource											
upper bound	R	std::upper_bound											
upper_bound	R	std::upper_bound											
uppercase	R	std::uppercase											
use facet	R	std::use_facet											
use_facet	R	std::use_facet											
uses allocator	R	std::uses_allocator											
uses_allocator	R	std::uses_allocator											
va arg	R	va_arg											
va copy	R	va_copy											
va end	R	va_end											
va list	R	va_list											
va start	R	va_start											
va_arg	R	va_arg											
va_copy	R	va_copy											
va_end	R	va_end											
va_list	R	va_list											
va_start	R	va_start											
valarray	R	std::valarray											
value or	R	std::optional::value_or											
value_or	R	std::optional::value_or											
valueless by exception	R	std::variant::valueless_by_exception											
valueless_by_exception	R	std::variant::valueless_by_exception											
variant	R	std::variant											
variant alternative	R	std::variant_alternative											
variant constructor	R	std::variant::variant											
variant emplace	R	std::variant::emplace											
variant index	R	std::variant::index											
variant size	R	std::variant_size											
variant swap	R	std::variant::swap											
variant valueless by exception	R	std::variant::valueless_by_exception											
variant valueless_by_exception	R	std::variant::valueless_by_exception											
variant_alternative	R	std::variant_alternative											
variant_size	R	std::variant_size											
vector assign	R	std::vector::assign											
vector at	R	std::vector::at											
vector back	R	std::vector::back											
vector begin	R	std::vector::begin											
vector capacity	R	std::vector::capacity											
vector cbegin	R	std::vector::cbegin											
vector cend	R	std::vector::cend											
vector clear	R	std::vector::clear											
vector constructor	R	std::vector::vector											
vector crbegin	R	std::vector::crbegin											
vector crend	R	std::vector::crend											
vector data	R	std::vector::data											
vector emplace	R	std::vector::emplace											
vector emplace back	R	std::vector::emplace_back											
vector emplace_back	R	std::vector::emplace_back											
vector empty	R	std::vector::empty											
vector end	R	std::vector::end											
vector erase	R	std::vector::erase											
vector front	R	std::vector::front											
vector get allocator	R	std::vector::get_allocator											
vector get_allocator	R	std::vector::get_allocator											
vector insert	R	std::vector::insert											
vector max size	R	std::vector::max_size											
vector max_size	R	std::vector::max_size											
vector pop back	R	std::vector::pop_back											
vector pop_back	R	std::vector::pop_back											
vector push back	R	std::vector::push_back											
vector push_back	R	std::vector::push_back											
vector rbegin	R	std::vector::rbegin											
vector rend	R	std::vector::rend											
vector reserve	R	std::vector::reserve											
vector resize	R	std::vector::resize											
vector shrink to fit	R	std::vector::shrink_to_fit											
vector shrink_to_fit	R	std::vector::shrink_to_fit											
vector size	R	std::vector::size											
vector swap	R	std::vector::swap											
vfprintf	R	std::vfprintf											
vfscanf	R	std::vfscanf											
vfwprintf	R	std::vfwprintf											
vfwscanf	R	std::vfwscanf											
visit	R	std::visit											
vprintf	R	std::vprintf											
vscanf	R	std::vscanf											
vsnprintf	R	std::vsnprintf											
vsprintf	R	std::vsprintf											
vsscanf	R	std::vsscanf											
vswprintf	R	std::vswprintf											
vswscanf	R	std::vswscanf											
vwprintf	R	std::vwprintf											
vwscanf	R	std::vwscanf											
wbuffer convert	R	std::wbuffer_convert											
wbuffer convert constructor	R	std::wbuffer_convert::wbuffer_convert											
wbuffer convert rdbuf	R	std::wbuffer_convert::rdbuf											
wbuffer convert state	R	std::wbuffer_convert::state											
wbuffer_convert	R	std::wbuffer_convert											
wbuffer_convert constructor	R	std::wbuffer_convert::wbuffer_convert											
wbuffer_convert rdbuf	R	std::wbuffer_convert::rdbuf											
wbuffer_convert state	R	std::wbuffer_convert::state											
wcerr	R	std::wcerr											
wcin	R	std::wcin											
wclog	R	std::wclog											
wcout	R	std::wcout											
wcrtomb	R	std::wcrtomb											
wcscat	R	std::wcscat											
wcschr	R	std::wcschr											
wcscmp	R	std::wcscmp											
wcscoll	R	std::wcscoll											
wcscpy	R	std::wcscpy											
wcscspn	R	std::wcscspn											
wcsftime	R	std::wcsftime											
wcslen	R	std::wcslen											
wcsncat	R	std::wcsncat											
wcsncmp	R	std::wcsncmp											
wcsncpy	R	std::wcsncpy											
wcspbrk	R	std::wcspbrk											
wcsrchr	R	std::wcsrchr											
wcsrtombs	R	std::wcsrtombs											
wcsspn	R	std::wcsspn											
wcsstr	R	std::wcsstr											
wcstod	R	std::wcstod											
wcstof	R	std::wcstof											
wcstoimax	R	std::wcstoimax											
wcstok	R	std::wcstok											
wcstol	R	std::wcstol											
wcstold	R	std::wcstold											
wcstoll	R	std::wcstoll											
wcstombs	R	std::wcstombs											
wcstoul	R	std::wcstoul											
wcstoull	R	std::wcstoull											
wcstoumax	R	std::wcstoumax											
wctob	R	std::wctob											
wctomb	R	std::wctomb											
wctrans	R	std::wctrans											
wctype	R	std::wctype											
weak from this	R	std::enable_shared_from_this::weak_from_this											
weak ptr	R	std::weak_ptr											
weak ptr constructor	R	std::weak_ptr::weak_ptr											
weak ptr expired	R	std::weak_ptr::expired											
weak ptr lock	R	std::weak_ptr::lock											
weak ptr owner before	R	std::weak_ptr::owner_before											
weak ptr reset	R	std::weak_ptr::reset											
weak ptr swap	R	std::weak_ptr::swap											
weak ptr use count	R	std::weak_ptr::use_count											
weak_from_this	R	std::enable_shared_from_this::weak_from_this											
weak_ptr	R	std::weak_ptr											
weak_ptr constructor	R	std::weak_ptr::weak_ptr											
weak_ptr expired	R	std::weak_ptr::expired											
weak_ptr lock	R	std::weak_ptr::lock											
weak_ptr owner_before	R	std::weak_ptr::owner_before											
weak_ptr reset	R	std::weak_ptr::reset											
weak_ptr swap	R	std::weak_ptr::swap											
weak_ptr use_count	R	std::weak_ptr::use_count											
weibull distribution	R	std::weibull_distribution											
weibull distribution a	R	std::weibull_distribution::a											
weibull distribution b	R	std::weibull_distribution::b											
weibull distribution constructor	R	std::weibull_distribution::weibull_distribution											
weibull distribution max	R	std::weibull_distribution::max											
weibull distribution min	R	std::weibull_distribution::min											
weibull distribution param	R	std::weibull_distribution::param											
weibull distribution reset	R	std::weibull_distribution::reset											
weibull_distribution	R	std::weibull_distribution											
weibull_distribution a	R	std::weibull_distribution::a											
weibull_distribution b	R	std::weibull_distribution::b											
weibull_distribution constructor	R	std::weibull_distribution::weibull_distribution											
weibull_distribution max	R	std::weibull_distribution::max											
weibull_distribution min	R	std::weibull_distribution::min											
weibull_distribution param	R	std::weibull_distribution::param											
weibull_distribution reset	R	std::weibull_distribution::reset											
wmemchr	R	std::wmemchr											
wmemcmp	R	std::wmemcmp											
wmemcpy	R	std::wmemcpy											
wmemmove	R	std::wmemmove											
wmemset	R	std::wmemset											
wprintf	R	std::wprintf											
ws	R	std::ws											
wscanf	R	std::wscanf											
wstring	R	std::filesystem::path::wstring											
wstring convert	R	std::wstring_convert											
wstring convert converted	R	std::wstring_convert::converted											
wstring convert from bytes	R	std::wstring_convert::from_bytes											
wstring convert state	R	std::wstring_convert::state											
wstring convert to bytes	R	std::wstring_convert::to_bytes											
wstring_convert	R	std::wstring_convert											
wstring_convert converted	R	std::wstring_convert::converted											
wstring_convert from_bytes	R	std::wstring_convert::from_bytes											
wstring_convert state	R	std::wstring_convert::state											
wstring_convert to_bytes	R	std::wstring_convert::to_bytes											
xsgetn	R	std::basic_filebuf::xsgetn											
xsputn	R	std::basic_filebuf::xsputn											
yield	R	std::this_thread::yield											
